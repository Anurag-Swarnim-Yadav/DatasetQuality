,raw_predictions,correctly_predicted
0,<S2SV_ModStart> ; if ( n2size < 1 ) <S2SV_ModEnd> { applog (,0
1,<S2SV_ModStart> case EAP_TYPE_TCHECK_8BITS ( tptr ) { ND_TCHECK_8BITS ( tptr ) ; <S2SV_ModStart> case EAP_TYPE_TYPE_TYPE_TYPE_TYPE_8BITS ( tptr + 8 ) ; ND_TCHECK_8BITS ( tptr + 8 ) ; <S2SV_ModStart> case EAP_TYPE_TYPE_TTLS : ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> case EAP_TYPE_TYPE_TYPE_TYPE_8BITS ( tptr + 6 ) ; <S2SV_ModStart> case EAP_TYPE_TYPE_TTLS : ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> case EAP_TYPE_TYPE_TTLS : ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> case EAP_TYPE_TTLS : ND_TTLS : ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> case EAP_TYPE_TTLS : ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> case EAP_,0
2,<S2SV_ModStart> sk ) ; <S2SV_ModEnd> return ret ;,0
3,"<S2SV_ModStart> case SIOCYAMGCFG : memset ( & yi, 0, sizeof ( yi ) ) ;",1
4,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,0
5,"<S2SV_ModStart>, offset ; if ( avio_feof ( f ) ) return AVERROR_INVALIDDATA ;",0
6,<S2SV_ModStart> * tpg ; u16 <S2SV_ModEnd> t ; int,0
7,<S2SV_ModStart> int fd ; fd = NULL ;,0
8,<S2SV_ModStart> { u32 data <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return vcpu -> arch <S2SV_ModEnd> ; if (,0
9,<S2SV_ModStart> ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>,0
10,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
11,"<S2SV_ModStart> ( sb, KERN_ERR,",1
12,<S2SV_ModStart> if ( ( skb_mac_header <S2SV_ModEnd> ( skb ),0
13,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",0
14,<S2SV_ModStart> < 0 ) { <S2SV_ModStart> ) ) ; },0
15,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int i, t1 ; tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> 4 ] ; tran_high_t <S2SV_ModEnd> * output, <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> = ( tran_t <S2SV_ModStart> 4 ] ; tran_low_t <S2SV_ModEnd> * output [ 2 <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModEnd> ; input = (",0
16,<S2SV_ModStart> == 0 ) sanitize_dead_code ( env ) ; if ( ret == 0 ),1
17,"<S2SV_ModStart> int i ; if (! config -> sample_rate ) { strcpy ( wpc -> error_message, ""sample <S2SV_blank> rate <S2SV_blank> cannot <S2SV_blank> be <S2SV_blank> zero!"" ) ; return FALSE ; }",1
18,"<S2SV_ModStart> = 0 ; unsigned int sense_buffer = 0 ; <S2SV_ModStart> cgc -> senseptr = 0 ; senseptr = sense_buffer -> senseptr ; <S2SV_ModStart> cgc -> sense_buffer, sense ) ; if ( cgc -> sense ) senseptr = senseptr + senseptr -> senseptr <S2SV_ModStart> cgc -> sense_buffer, sense ) ; if ( cgc -> senseptr == 0 ) { senseptr = senseptr -> senseptr ; <S2SV_ModStart> cgc -> sense_buffer, senseptr, sense ) ; if ( cgc -> senseptr -> sense ) memcgc -> senseptr = sense ;",0
19,<S2SV_ModStart> ) ; return <S2SV_ModEnd> } else if,0
20,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> int mi_err_set_error ( VP9_COMMON <S2SV_ModStart> * cpi, int mi_row, int mi_cols * rf_err, int mi_row, int mi_cols * cpi <S2SV_ModEnd> ) { int <S2SV_ModStart> -> common ; int mi_row = get_frame <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> -> common. sf_err ) ; if ( cpi -> sf_err ) { if ( <S2SV_ModEnd> ( segf_err ) <S2SV_ModStart> ; if ( <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> -> common. <S2SV_ModStart> ; if ( <S2SV_ModEnd> == KEY_FRAME ) <S2SV_ModStart> -> avg_FRAME <S2SV_ModEnd> frame_FRAME ]. <S2SV_ModStart> { if ( segf_err!= NULL <S2SV_ModEnd> ) { int <S2SV_ModStart> -> segf_err ; for ( i = 0 ; i = 0 ; i < 4 ; ++ i ) { if ( segf_inter_err ) { if ( cpi -> frame_to_cpu ( cpi -> seg, mi_err, mi_row, mi_col, mi_col, mi_col, mi",0
21,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( c,0
22,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int vpx_reader <S2SV_ModEnd> ( vpx_reader, <S2SV_ModStart> * w, vpx_write_literal <S2SV_ModEnd> ( w,",0
23,<S2SV_ModStart> ) ; return <S2SV_ModEnd> ralg -> seedsize,1
24,<S2SV_ModStart> ; if ( sockaddr_len < sizeof ( struct sockaddr_pppox ) ) return - EINVAL ; if (,1
25,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_128 ; } else { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } <S2SV_ModStart> ( ) ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> ( ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; },0
26,<S2SV_ModStart> char * fmtname ; int debug <S2SV_ModStart> = 0 ; debug = 0 ; <S2SV_ModStart> ) ) ; goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } debug <S2SV_ModStart> ) ) ; goto error <S2SV_ModEnd> ; } debug <S2SV_ModStart> jas_stream_close ( debug ) ;,0
27,"<S2SV_ModStart> esr ) { siginfo_t info ; void __user * info = ( void __user * ) info ; info = ( void __user * ) info ; <S2SV_ModStart>, regs ) ; if (! info. si_die ) return - EINVAL ; info. si_errno = 0 ; info. si_errno = 0 ; info. si_die = info. si_die ; info. si_errno = 0 ;",0
28,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> 2 ) ; length -= 2 ; ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",0
29,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
30,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> p ; int <S2SV_ModStart> case 0 : if ( tolen < 2 ) return - ENAMETOOLONG ; <S2SV_ModStart> case 0 : if ( tolen == 0 ) return - 1 ; <S2SV_ModStart> case 3 : if ( tolen == 0 ) return - ENAMETOOLONG ; <S2SV_ModStart> case 3 : if ( tolen == 0 ) return - ENAMETOOLONG ; <S2SV_ModStart> case 3 : if ( tolen < 2 ) return - 1 ; <S2SV_ModStart> case 3 : if ( tolen == 0 ) return - ENAMETOOLONG ;,0
31,<S2SV_ModStart> == - 1 || class == NULL <S2SV_ModEnd> ) { err,0
32,<S2SV_ModStart> unsigned long flags ; if ( qid > NVMET_NR_QUEUES ) return NULL,1
33,"<S2SV_ModStart> -> bmp_desc ) { dev_err ( & interface -> dev, NULL ) ; retval = - EINVAL ; goto error ; } <S2SV_ModStart> ) ) { retval = <S2SV_ModEnd> ; dev ->",0
34,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,0
35,<S2SV_ModStart> user_keyring ) ; if ( test_bit ( KEY_FLAG_UID_KEYRING ) ) { <S2SV_ModStart> goto out ; } keyring_free ( keyring ) ;,0
36,<S2SV_ModStart> = create_spnego_ctx ( 1,1
37,"<S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_l2tpip <S2SV_ModEnd> ) ) return <S2SV_ModStart> ; if ( addr -> l2tp_family!= AF_INET <S2SV_ModEnd> ) return - <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> ret = - <S2SV_ModStart> ( sk ) ; if (! sock_flag ( sk, SOCK_ZAPPED ) ) goto out",1
38,<S2SV_ModStart> <S2SV_null> static unsigned long <S2SV_ModEnd> stack_maxrandom_size ( void <S2SV_ModStart> ) { unsigned long <S2SV_ModEnd> max = 0 <S2SV_ModStart> ( ( - 1UL <S2SV_ModEnd> ) & STACK_RND_MASK,1
39,"<S2SV_ModStart>, _ ( ""_Cancel"" ), GTK_RESPONSE_CANCEL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( _ (",0
40,,0
41,<S2SV_ModStart> if (! data ||,0
42,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 1 ] = 0x86 ; state -> data [ 1 ] = 0x87 ; state -> data [ 1 ] = 0x87 ; state -> data [ 1 ] = 0x80 ; state -> data [ 1 ] = 0x51_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd>, 1,",0
43,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
44,<S2SV_ModStart> } } } fix_google_param ( google_out ) ;,0
45,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horAcc8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
46,"<S2SV_ModStart> tsample_t s ; uint16 bps = 0 ; ( void ) TIFFGetField ( in, TIFFTAG_BITSPERSAMPLE, & bps ) ; if ( bps!= 8 ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> can <S2SV_blank> only <S2SV_blank> handle <S2SV_blank> BitsPerSample=8 <S2SV_blank> in <S2SV_blank> %s"", ""cpContig2SeparateByRow"" ) ; return 0 ; }",1
47,<S2SV_ModStart> ) ; struct hugepage_subpool * spool <S2SV_ModEnd> ; struct hugepage_subpool,0
48,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) { return AVERROR_EOF ; } if (,1
49,<S2SV_ModStart> goto not_found ; if ( e - p > HOST_NAME_MAX - 1 ) goto not_found ;,0
50,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> bool <S2SV_ModEnd> generic_pipe_buf_get ( struct <S2SV_ModStart> buf ) { return try_get_page <S2SV_ModEnd> ( buf ->,1
51,"<S2SV_ModStart>, cp, ep2, map, nmap ) ; } else cp = ikev1_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) goto trunc ; } if <S2SV_ModStart> < ep2 ) <S2SV_ModEnd> ND_PRINT ( (",1
52,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",0
53,<S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } if,0
54,<S2SV_ModStart> config -> pm_max_requests ; fpm_globals. listening_socket = dup ( wp -> listening_socket ),1
55,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> this_frame_frame_rate ( const VP9_COMP * const VP9_COMP * const FIRSTPASS_STATS * const VP9_COUNT <S2SV_ModEnd> * const FIRSTPASS_STATS * const FIRSTPASS_STATS * const FIRSTPASS_STATS * const FIRSTPASS_STATS * const FIRSTPASS_STATS * const FIRSTPASS_STATS * const FIRSTPASS_STATS * const FIRSTPASS_STATS * this_frame = get_frame_stats ( twopass, & cpi ) ; const FIRSTPASS_STATS * const FIRSTPASS_STATS * const FIRSTPASS_STATS * const FIRSTPASS_STATS * const FIRSTPASS_STATS * this_frame = get_frame_frame_decay_rate ( twopass, this_frame ) ; double prev_frame = 0.0 ; double zero_rate = 0.0 ; double avg_frame_frame_rate = 0.0 ; double avg_frame_frame_bandwidth = 0.0 ; double projected_frame = 0.0 ; double avg_frame_frame_frame_",0
56,<S2SV_ModStart> 0 ; rc = err? err : 0 ; <S2SV_ModStart> ) ; return err <S2SV_ModEnd> ; } <S2SV_null>,0
57,<S2SV_ModStart> inode ) ; spin_lock_irqsave ( & EXT4_I ( inode -> i_completed ) ;,0
58,<S2SV_ModStart> valuelen ) ; args -> rmtvaluelen = args -> valuelen ;,1
59,<S2SV_ModStart> { return false ; <S2SV_ModEnd> } if (,0
60,"<S2SV_ModStart> 2 ) { ND_TCHECK2 ( * tptr, 2 ) ; <S2SV_ModStart> len - 2 ; if ( len < stlv_len ) goto trunc ; ND_TCHECK2 ( * ( tptr ), stlv_len ) <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> len - ISIS_SUBTLV_SPB_MIN_LEN ; stlv_len = ISIS_SUBTLV_SPB_MIN_LEN ; stlv_len = stlv_len - ISIS_SUBTLV_SPB_MIN_LEN ; if ( stlv_len < ISIS_SUBTLV_SPB_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> len - ISIS_SUBTLV_SPB_MIN_LEN ; stlv_len = stlv_len - ISIS_SUBTLV_SPB_MIN_LEN ; stlv_len = stlv_len - ISIS_SUBTLV_",0
61,"<S2SV_ModStart> ) { return skip ( c, body_size + 2 <S2SV_ModEnd>, MSG_JOB_TOO_BIG )",1
62,"<S2SV_ModStart> flags ) ; memset ( & ddi, 0, sizeof ( ddi ) ) ;",1
63,<S2SV_ModStart> == 12 && ( <S2SV_ModStart> flags & TH_SYN ),1
64,"<S2SV_ModStart> -> ipc_socket ; int procfd ; <S2SV_ModStart> { 0 } procfd = payload -> procfd ; <S2SV_ModStart> : 0 ; <S2SV_ModEnd> if ( ipc_socket <S2SV_ModStart> ( ipc_socket, SHUT_RDWR, SHUT_RDONLY | O_RDWR, SHUT_RDONLY | O_RDONLY | O_RDWR ) <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( procfd, strerror ( errno ) <S2SV_ModEnd> ) ; shutdown <S2SV_ModStart> { ERROR ( ""Error <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> IPC <S2SV_blank> process <S2SV_blank> IPC <S2SV_blank> process <S2SV_blank> IPC <S2SV_blank> IPC <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> initial <S2SV_blank> (%s."", strerror ( errno ) <S2SV_ModEnd> ) ; shutdown <S2SV_ModStart> ) ; } close ( ipc_socket ) ; shutdown ( ipc_socket ) ;",0
65,<S2SV_ModStart> -> len = 0 <S2SV_ModEnd> ; if (,0
66,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
67,<S2SV_ModStart> NULL ; } sas_probe_devices ( port ) ;,1
68,,0
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,"<S2SV_ModStart> ENOBUFS ; } memset ( & line, 0, sizeof ( line ) ) ;",1
71,"<S2SV_ModStart> arg ) { int ret ; ret = scsi_verify_blk_ioctl ( bd, cmd ) ; if ( ret < 0 ) return ret ;",1
72,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
73,<S2SV_ModStart> * ureq ; unsigned,0
74,"<S2SV_ModStart> int m ; if ( n < 0 ) { jas_deprecated ( ""negative <S2SV_blank> count <S2SV_blank> for <S2SV_blank> jas_stream_gobble"" ) ; }",0
75,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ) ) ; },0
76,<S2SV_ModStart> av_log ( mxf -> fc,1
77,"<S2SV_ModStart> mntent, path, rootfs",1
78,<S2SV_ModStart> ( buf [ 5 <S2SV_ModEnd> ] = 0,0
79,"<S2SV_ModStart> -> header_len ; ND_TCHECK ( p [ 0 ] ) ; <S2SV_ModStart> case LS_COOKIE_ID : ND_TCHECK2 ( p [ 0 ], 2 ) ;",0
80,<S2SV_ModStart> NF_STOLEN ; return err == 0? NF_ACCEPT : NF_DROP <S2SV_ModEnd> ; } <S2SV_null>,1
81,"<S2SV_ModStart> * up ; klen = klen ( klen, sizeof ( * up ) ; <S2SV_ModStart> ( up ) ; klen = klen ( klen ) ; klen ( klen ) ; <S2SV_ModStart> len ) ; klen = klen ( klen ) ;",0
82,<S2SV_ModStart> -> io_data ; <S2SV_ModEnd> if ( io,0
83,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
84,,0
85,"<S2SV_ModStart> ( buf = jas_alloc3 ( bufsize, numcols <S2SV_ModEnd>, sizeof (",1
86,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
87,<S2SV_ModStart> size ) { netdev_err <S2SV_ModEnd> ( vif ->,0
88,"<S2SV_ModStart> * object, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void * <S2SV_ModStart> < 0 ) <S2SV_ModEnd> bitmap_object ( base",0
89,"<S2SV_ModStart> xfr_cmd, fname <S2SV_ModEnd> ) ; free",1
90,<S2SV_ModStart> mixer ) { snd_usb_mixer_disconnect ( mixer ) ;,1
91,<S2SV_ModStart> atomic_mutex ) { struct rollover * rollover = NULL ; mutex_lock ( & <S2SV_ModEnd> rollover ) ; <S2SV_ModStart> atomic_set ( & <S2SV_ModEnd> rollover ) { <S2SV_ModStart> atomic_mutex ) ; mutex_unlock ( & <S2SV_ModEnd> rollover ) ; <S2SV_ModStart> atomic_mutex ) { mutex_unlock ( & rollover -> rollover ) ; } <S2SV_ModEnd> rollover = NULL <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover ) ; <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover ) ; <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover ) ; <S2SV_ModStart> atomic_set ( & <S2SV_ModEnd> rollover ) ; <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover ) ;,0
92,<S2SV_ModStart> ipv6_pinfo ) ) ; newnp -> ipv6_mc_list = NULL ; newnp -> ipv6_ac_list = NULL ; newnp -> ipv6_fl_list = NULL,1
93,<S2SV_ModStart> ) ; kfree ( page ) ;,0
94,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
95,<S2SV_ModStart> ) { int ret,0
96,"<S2SV_ModStart> ( interface, ENC28",0
97,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,0
98,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } if (,0
99,<S2SV_ModStart> ; if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) <S2SV_ModEnd> ) { ret,0
100,<S2SV_ModStart> len ; } ND_TCHECK ( p [ 2 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 2 ] <S2SV_ModEnd> ) ; ND_PRINT,0
101,"<S2SV_ModStart> if (! caller_may_see_dir ( fc -> pid, controller, cgroup ) ) { ret = - ENOENT ; goto out ; } if (!",1
102,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
103,"<S2SV_ModStart> ptr ) { struct floppy_raw_cmd cmd = * ptr ; cmd. next = NULL ; cmd. kernel_data = NULL ; <S2SV_ModStart> ( param, & cmd <S2SV_ModEnd>, sizeof ( <S2SV_ModStart>, sizeof ( cmd <S2SV_ModEnd> ) ) ;",1
104,"<S2SV_ModStart> : if (! cap_issubset ( new -> cap_permitted, old -> per_clear ) ) if (",0
105,"<S2SV_ModStart> int mb2_cache_entry * bcache <S2SV_ModEnd> ; struct mb2_cache <S2SV_ModStart> * ext4_mb_cache_cache = mb2_cache_cache_entry_cache ( ext2_mb_cache, hash, hash, hash, bh -> mb2_cache, hash <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( bh -> b_cache, cache, bh -> b_block <S2SV_ModEnd> ) ; else <S2SV_ModStart> ( bh -> b_blocknr <S2SV_ModEnd> ) ; }",0
106,<S2SV_ModStart> rlen ) ; return - 1,0
107,<S2SV_ModStart> tf = ( <S2SV_ModEnd> luaY_parser ) (,1
108,<S2SV_ModStart> ; int err ; if ( protocol < 0 || protocol >= IPPROTO_MAX ) return - EINVAL,1
109,<S2SV_ModStart> { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> * opt ; struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> opt.,0
110,"<S2SV_ModStart> ; dl = kzalloc <S2SV_ModEnd> ( size,",1
111,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static UINT <S2SV_ModEnd> rtr_rtr_print ( const <S2SV_ModStart> * tptr, const u_int len, const u_char len <S2SV_ModStart> * tptr ) ; if ( len < sizeof ( * tptr ) ) goto trunc ; ND_TCHECK ( * tptr ) ; ND_PRINT ( ( ndo, ""[%u]"", len ) ) ; if ( len < sizeof ( rpdu ) ) goto invalid ; ND_TCHECK2 ( * tptr ) ; <S2SV_ModStart> rtr_len ) ; if ( rpdu_len < sizeof ( * tptr ) ) goto invalid ; ND_TCHECK2 ( * tptr ) ; <S2SV_ModStart> rtr_len ) ; if ( rpdu_len < sizeof ( * tptr ) ) goto invalid ; ND_TCHECK2 ( * tptr, len ) ; ND_PRINT ( ( ndo, ""[%u]"", len ) ) ) ; <S2SV_ModStart> rtr = len ; if ( len < sizeof ( rpdu_rtr_len ) goto trunc ; ND_PRINT ( ( len ) ) )",0
113,<S2SV_ModStart> ; int n <S2SV_ModEnd> ; skb ->,0
114,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr,1
115,<S2SV_ModStart> ( s )!= 0,0
116,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; ret =",0
117,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; int ret,0
118,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; break",1
119,"<S2SV_ModStart> == '/' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> is <S2SV_blank> absolute"" ) ; return ( ARCHIVE_FAILED ) ; } separator = * src ++ ; } <S2SV_ModEnd> for ( ;",1
120,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> rcode ( TPM2B_RC <S2SV_ModStart> int rc ; TPM_RC * TPM_RC * TPM2B_RC ; int rc = TPM_RC ; <S2SV_ModStart> = NULL ; <S2SV_ModEnd> int ctx = HMAC_ALIGN2_DIGEST <S2SV_ModStart> ; if (! rc ) return TPM_RC ; memcpy ( & ctx, 0, 0, sizeof ( md ) ) ; <S2SV_ModStart> ) ) { if (! rc ) return TPM_RC ; LOG_ERR ( ""%s"", NULL ; return NULL ; } return TPM_RC ;",0
121,"<S2SV_ModStart> inmem )? jas_stream_memopen2 <S2SV_ModEnd> ( 0,",0
122,<S2SV_ModStart> s ) { if ( s == 0 ) return ( ( void * ) NULL ) ;,1
123,<S2SV_ModStart> ; if ( WARN_ON_ONCE (! ib_safe_file_access ( fp ) ) ) return - EACCES ; if (,1
124,"<S2SV_ModStart> ""MemoryAllocationFailed"" ) ; ( void ) ResetMagickMemory ( BImgBuff, 0, ldblk * sizeof ( double ) ) ;",1
125,<S2SV_ModStart> ( peer ) peer = maybe_get_net <S2SV_ModEnd> ( peer ),1
126,<S2SV_ModStart> } while ( ( i < ( int ) header_buf_used ) && ( <S2SV_ModStart> ] == '\\n' ),1
127,<S2SV_ModStart> m_family ) ; if ( proto == LLDP_MGMT_ADDR_NONE ) continue <S2SV_ModEnd> ; if (,1
128,"<S2SV_ModStart> ( ndo, ""%s"", rlen",0
129,<S2SV_ModStart> default_auto_asconf ) { spin_lock ( & sock_net ( sk ) -> sctp. addr_wq_lock ) ; <S2SV_ModStart> do_auto_asconf = 1 ; spin_unlock ( & sock_net ( sk ) -> sctp. addr_wq_lock ) <S2SV_ModStart> ; } else { <S2SV_ModStart> = 0 ; },1
130,<S2SV_ModStart> { switch ( * <S2SV_ModEnd> level == 0,0
131,"<S2SV_ModStart> + MIDQ_DATA_BUFF ; u16 head, head, tail, size ; <S2SV_ModStart> out ) ; head = readw ( mpu -> dev -> MIDQ + MIDQS_wHead ) ; if ( head > size ) goto out ; if ( head > MIDQS2SV_null> <S2SV_null>",0
132,<S2SV_ModStart> rule ) ; if (! entry -> lsm. rule ) return - EINVAL ;,0
133,<S2SV_ModStart> file ) ; <S2SV_ModEnd> file_free ( file,1
134,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
135,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> header2SV_null> <S2SV_null> static <S2SV_ModStart> s_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> res_null> static <S2SV_ModStart> s_null> <S2SV_null> static int num_null>,0
136,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> push ( struct <S2SV_ModStart> ifindex_hdr return - EINVAL <S2SV_ModStart> ; if ( len <S2SV_ModEnd> == 0 ) return - EINVAL <S2SV_ModStart> error ; return - EINVAL ;,0
137,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,1
138,<S2SV_ModStart> ; while ( ( i < to_read ) && <S2SV_ModStart>!= 0 ) <S2SV_ModEnd> ) { i,1
139,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
140,<S2SV_ModStart> [ plane ] && in -> linesize [ plane ],1
141,"<S2SV_ModStart> ( szFileName, pszFileName, <S2SV_ModStart> ) - 5 <S2SV_ModEnd> ) ; }",1
142,"<S2SV_ModStart> ( fd, KERNEL_ERR <S2SV_ModEnd> ) ) {",0
143,<S2SV_ModStart> if ( q < p || q,0
144,"<S2SV_ModStart> __be32 new_saddr ; struct ip_options_rcu * inet_opt ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. srr ) daddr = inet_opt -> opt. <S2SV_ModEnd> faddr ; rt",1
145,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
146,"<S2SV_ModStart> return ; } if ( len < sizeof ( struct eigrp_common_header ) ) { ND_PRINT ( ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ) ; goto trunc ; } <S2SV_ModStart> ) tlv_ptr ; if ( len < sizeof ( struct eigrp_common_header ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> < <S2SV_blank> (%u)"", ( ndo, "" <S2SV_blank> (too <S2SV_blank> short, sizeof ( struct eigrparm ) ) ) ) ; return ; } <S2SV_ModStart> ) ) ; }",0
147,"<S2SV_ModStart> ) memcpy <S2SV_ModEnd> ( addr,",0
148,"<S2SV_ModStart> s_table * table <S2SV_ModEnd>, int bytes <S2SV_ModStart>, unsigned int ret <S2SV_ModEnd>, int bytes <S2SV_ModStart> = SOCK_BUFS_SIZE ; if (! table_read_table ( sbi -> s_table, table ) ) { s_read_table ( ) ; return NULL ; }",0
149,"<S2SV_ModStart>, '/' ) ; if ( ptr == NULL ) return ( ENOENT ) ; ptr ++ <S2SV_ModEnd> ; rw_exit (",1
150,<S2SV_ModStart> |= EXT4_EXT_MARK_UNINIT2 ; if ( flags & EXT4_GET_BLOCKS_CONVERT ) split_flag |= EXT4_EXT_DATA_VALID2 ;,1
151,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; ret =",0
152,<S2SV_ModStart> if ( cmd == NULL ||,0
153,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ), & final ) ; rcu_read_unlock ( <S2SV_ModEnd> ) ; dst",1
154,"<S2SV_ModStart> = 0.0 ; uint32 nstrips = 0, ntiles = 0 ; uint32",0
155,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> init ( int <S2SV_ModStart> arg ; int arg ; # if CONFIG_VP9_HIGHBITDEPTH int arg ; # if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( arg!= VPX_HIGHBITDEPTH ) return - 1 ; # endif <S2SV_ModStart> arg ) ; # endif if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( argv12_arg ( & arg, & arg, & arg, & arg, & arg ) ) { if CONFIG_VP8_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH ) { switch ( arg = 1 ) { case VPX_VP8_HIGHBITDEPTH ) { case VPX_TYPE_HIGHBITDEPTH : break ; } else { case VPX_IMG_F_FMT ( arg, arg, arg, & arg, & arg, & arg, & arg, & arg, & arg ) ; else if CONFIG_VP8_HIGHBITDEPTH ) break ; } else if ( arg",0
156,<S2SV_ModStart> options. disable_forwarding ||! use_privsep,1
157,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
158,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
159,<S2SV_ModStart> errno ) ; <S2SV_ModEnd> } } <S2SV_null> <S2SV_null>,0
160,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> out ; } ext_size = sizeof ( EXT4_I ( inode ) -> i_data ) ; <S2SV_ModStart> -> i_data, ext_size ) ; memset ( bh -> b_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size <S2SV_ModEnd> ) ; neh",1
161,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 1 ;,0
162,<S2SV_ModStart> ; int ret ; if ( current_chrooted ( ) ) return - EPERM,1
163,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
164,<S2SV_ModStart> c -> nreslevels + 1 <S2SV_ModEnd> ) ; return,0
165,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
166,<S2SV_ModStart> ; bool do_vnet = false <S2SV_ModStart> < 0 ) { <S2SV_ModStart> = 0 ; do_vnet = false ; do_vnet <S2SV_ModEnd> ; if (,0
167,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> sctp_auth_asoc_init_key ( asoc,0
168,<S2SV_ModStart> return false ; if ( ndp_msg_type_type_info ( msg -> addrto ) ) return 0 ;,0
169,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> lsm_set_label_label_label ( int lsm_labelfd <S2SV_ModEnd>, int lsm_label ) <S2SV_ModStart> = - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( lsm_labelfd",0
170,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
171,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
172,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return 0 ; <S2SV_ModStart> ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
173,,0
174,"<S2SV_ModStart> <S2SV_null> <S2SV_null> struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> * ext4_mb_cache, struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> * ext4_cache, <S2SV_ModEnd> * ext4_mb_cache,",0
175,"<S2SV_ModStart> { gint64 offset <S2SV_ModEnd> ; char line <S2SV_ModStart> = offset ; return parse_cosine_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart> -> phdr, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart> wth -> frame_buffer, line",1
176,<S2SV_ModStart> = line_end ; <S2SV_ModEnd> error = add_push_report_pkt,1
177,<S2SV_ModStart> if ( left == 0 && extend ) return 0 ; if ( left,1
178,<S2SV_ModStart> < 0 ) { <S2SV_ModStart> ) ) ; },0
179,"<S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
180,<S2SV_ModStart> * hdr ; ( hdr. hdr. hdr,0
181,"<S2SV_ModStart> ( buf = jas_alloc3 <S2SV_ModEnd> ( bufsize, <S2SV_ModStart> 2, hstartrow <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ( bufsize, <S2SV_ModStart> ( bufsize, hstartrow <S2SV_ModEnd>, sizeof (",0
182,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
183,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> * sizeof ( <S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> ; pixels =",0
184,<S2SV_ModStart> ) ; } if ( sbi -> s_mb_cache ) sbi -> s_mb_cache = NULL ;,0
185,"<S2SV_ModStart> t_alts ) ; if ( intf -> desc. bNumEndpoints < 1 ) { dev_err ( & interface -> dev, ""Invalid <S2SV_blank> interface <S2SV_blank> endpoints\\n"" ) ; return - EINVAL ; }",0
186,"<S2SV_ModStart> ""setregid"" ) ; <S2SV_ModEnd> char * arg <S2SV_ModStart> 0 ] = ""/bin/sh"" <S2SV_ModEnd> ; arg [",1
187,<S2SV_ModStart> node ) { if ( node -> nd_item. ci_parent ) <S2SV_ModStart> ci_parent ) ; else return NULL ;,1
188,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart> ( state, fmode <S2SV_ModEnd> ) ; }",0
189,<S2SV_ModStart> ( pb ) ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA,1
190,<S2SV_ModStart> if ( q < p || q,1
191,<S2SV_ModStart> protostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> cryptostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> timingstats ) ; <S2SV_ModEnd> step_callback = &,1
192,"<S2SV_ModStart> * tmpname, fname <S2SV_ModEnd> ) ; if",0
193,<S2SV_ModStart> ) ) ; struct mnt_namespace * ns ;,0
194,<S2SV_ModStart> ; savesegment ( fs <S2SV_ModEnd> ) ; if,0
195,<S2SV_ModStart> dd ) ; <S2SV_ModEnd> } } <S2SV_null>,1
196,<S2SV_ModStart> { ps_codec -> i1_max = 0 ; ps_codec ->,0
197,<S2SV_ModStart> 1u << DB_VECTOR ) | ( 1u << AC_VECTOR,1
198,"<S2SV_ModStart> sfsname, stringlen <S2SV_ModEnd> ) ; const <S2SV_ModStart> 1 ] ; stringlen = stringlen <S2SV_ModEnd> ; if ( <S2SV_ModStart> 1 ], stringlen <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ; temp [ stringlen <S2SV_ModEnd> ] = '\\0'",0
199,"<S2SV_ModStart> unsigned int flags, struct rt6_info * rt <S2SV_ModStart> ( & fhdr, rt",1
200,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return h2 ->,0
201,<S2SV_ModStart> ( cmd = 0 <S2SV_ModEnd> ; if (,0
202,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int64_t <S2SV_ModEnd> v_stride { int <S2SV_ModStart> int64_t <S2SV_ModEnd> const int16xptr = vpx_get_buffer <S2SV_ModEnd> ( dest_stride, <S2SV_ModStart> stride ) ; const int4_buffer_size = vpx_get_buffer <S2SV_ModEnd> ( src_stride, <S2SV_ModStart> i ) ; const int16x4_buffer <S2SV_ModEnd> = 2 ; <S2SV_ModStart> } # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_buf -> flags & YV12_FLAG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH ) { const int64_buffer ( vpx_buffer, dst, dst_buf -> stride, dst. stride, dst_buf -> stride, dst_stride, dst_stride, dst_stride, dst_stride, dst_stride, dst_stride, dst_stride, dst_stride, dst_stride, dst_stride, dst_buffer <S2SV_ModEnd>, 4, <S2SV_ModStart> src, dst_stride, dst_stride, dst_str",0
203,<S2SV_ModStart> p ++ ) ; if ( ( void * ) p > head -> iov_base + head -> iov_len ) return 0,1
204,"<S2SV_ModStart> <S2SV_null> static inline int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> dst ) { return assign_eip_far ( ctxt, dst, ctxt -> mode == X86EMUL_MODE_PROT64 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",1
205,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
206,"<S2SV_ModStart> ; remaining = tvb_reported_length_remaining <S2SV_ModEnd> ( tvb,",1
207,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode ( struct <S2SV_ModStart> inode ) { int ret = <S2SV_ModEnd> i_block_read_lock ( &,0
208,<S2SV_ModStart> return rc ; <S2SV_ModEnd> copied = skb,1
209,<S2SV_ModStart> char buf [ 7 <S2SV_ModEnd> ] = 0,0
210,<S2SV_ModStart> ; if ( pmc_overflow ( val ) <S2SV_ModEnd> ) write_pmc (,1
211,"<S2SV_ModStart> ( * b + len, * avail - len <S2SV_ModEnd>, nl )",1
212,"<S2SV_ModStart> char * fmode_t <S2SV_ModEnd>, const char * <S2SV_ModStart> char * args ; int ret ; const char * type_name = NULL ; Py_DECREF ( ) ; if (! strcmp ( _PyObject_LookupAttr, & Py_name, arg, arg, & PyId_type_comment ) ) goto fail ; if ( _PyObject_Lookup [ 0 ] ) == NULL ) { PyErr_type_comment = NULL ; return NULL ; } if ( _PyObject_Lookup [ 0 ] == - 1 ] ) goto fail ; } if ( _PyObject_Lookup [ 0 ] ) { PyErr_Format ( PyExc_Type ) ; PyErr_type_comment = NULL ; PyErr_comment = NULL ; break ; } else { PyErr_Format ( PyExc_TypeError, ""lineno"" ) ; if (! strlen ) goto fail ; } if (! str ) goto fail ; PyErr_TYPE_COMMENTS ) { if (! str = NULL ) goto fail ; } if (! str ) { if (! str ) goto fail ; PyErr_Lookup ; PyErr_Format (",0
213,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
214,"<S2SV_ModStart> string ) ) i ++, <S2SV_ModEnd> c = c",0
215,"<S2SV_ModStart> == 0 ) mark_key_instantiated ( key, 0 <S2SV_ModEnd> ) ; up_write",1
216,<S2SV_ModStart> <= * len && plen > 0,1
217,<S2SV_ModStart> ; args. rmtvaluelen = valuelen ; args.,1
218,<S2SV_ModStart> ; if ( <S2SV_ModEnd> timeout == NULL <S2SV_ModStart> ; if ( compat_get_timespec <S2SV_ModEnd> ( & ktspec <S2SV_ModStart> > 0 && compat_put_timespec <S2SV_ModEnd> ( & ktspec,1
219,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
220,<S2SV_ModStart> -> net ; kfree ( skb ),0
221,<S2SV_ModStart> |= MSG_TRUNC ; <S2SV_ModEnd> lock_sock ( sk,1
222,<S2SV_ModStart> } if ( <S2SV_ModEnd> udp_specified && settings,1
223,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
224,"<S2SV_ModStart> -> fx, 0",0
225,<S2SV_ModStart> found = 0 <S2SV_ModEnd> ; const char <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( found,1
226,"<S2SV_ModStart> int validate_event ( struct pmu * pmu, <S2SV_ModStart> arm_pmu * pmu, <S2SV_ModEnd> ; struct pmu <S2SV_ModStart> pmu * pmu!= pmu * pmu ) return 0 ; if ( pmu!= pmu ) return 1 ;",0
227,"<S2SV_ModStart> bool new_idmap_permitted ( const struct file * file, <S2SV_ModStart>, cap_setid ) && file_ns_capable ( file, ns -> parent, cap_setid )",1
228,<S2SV_ModStart> j ++ ) { if ( a -> type == szMAPI_BINARY ) <S2SV_ModStart> ) ; } },1
229,"<S2SV_ModStart> { u8 * buf ; int ret ; buf = kmalloc ( 1, GFP_KERNEL ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; kfree ( <S2SV_ModStart> ) ; return 0 ; buf [ 0 ] = <S2SV_ModEnd> ; kfree (",0
230,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) ) ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } ptr ++ ; length -= 2 ; length -= 4 ; ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; ptr ++ ; length -= 4 ; if ( length < 4 ) { ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return - 1 ; } <S2SV_ModStart> 1 ) ; ptr ++ ; length -= 4 ; length -= 4 ; length -= 4 ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return FALSE ; } if ( length < 4 ) { ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return - 1 ; }",0
231,"<S2SV_ModStart> princ ) &&! data_eq ( * data, <S2SV_ModEnd> handle ) &&",0
232,<S2SV_ModStart> ; if ( shader_rec_offset < args -> bin_cl_size ||,1
233,<S2SV_ModStart> endif # if HAVE_LZMA_H <S2SV_ModEnd> && HAVE_LIBLZMA if,1
234,<S2SV_ModStart> ; if ( <S2SV_ModEnd> vma_flag ( page,0
235,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
236,<S2SV_ModStart> arg ) { char ch = * arg ; switch ( ch <S2SV_ModEnd> ) { case <S2SV_ModStart> ';' : case '=' : case <S2SV_ModStart> b ++ = ch <S2SV_ModEnd> ; break ;,1
237,"<S2SV_ModStart>, cp, map, map, nmap ) ; else cp = ikev1_attrmap_print ( cp, cp, ep2 ) ; if ( cp == NULL ) goto trunc ; } if <S2SV_ModStart> < ep2 ) <S2SV_ModEnd> ND_PRINT ( (",0
238,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
239,<S2SV_ModStart> if ( ( skb_mac_header <S2SV_ModEnd> ( skb ) <S2SV_ModStart> skb ) < skb -> head +,1
240,<S2SV_ModStart> ) ; # if <S2SV_ModEnd> (!,0
241,<S2SV_ModStart>. val =!!!! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ;,0
242,<S2SV_ModStart> - EOPNOTSUPP ; msg -> msg_namelen = 0 ; <S2SV_ModStart> err ; } <S2SV_ModEnd> copied = skb,0
243,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
244,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
245,"<S2SV_ModStart> ret ) ; ret = X509_get_dn ( md ) ; if ( ret ) goto cleanup ; if ( ret ) goto cleanup ; if ( <S2SV_ModEnd> ( md, <S2SV_ModStart> md -> subject_dn ) ) goto cleanup ; ret = rfc2253_name <S2SV_ModEnd> ( X509_get_subject_name (",0
246,"<S2SV_ModStart> out_free ; } else kvm_iommu_unmap_pages ( kvm, & old ) ;",0
247,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ru,1
248,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
249,"<S2SV_ModStart> length ) { ND_TCHECK ( rp -> rip6_nets ) ; length_left = length ; if ( length < sizeof ( struct rip6 ) ) goto trunc ; length_left <S2SV_ModEnd> ( length ) <S2SV_ModStart> ) ) ; length_left -= 4 ; ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %u)"", length_left ) ) ; length_left -= length_left <S2SV_ModEnd> ; length_left ; <S2SV_ModStart> ni ) { ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %u"", length_left ) ) ; length_left ) ; length_left = length_left ; length_left ; break ; } if ( length_left!= length_left ) goto trunc ; length_left <S2SV_ModEnd> ; length_left -= <S2SV_ModStart> ni ) { ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %u)"", length_left ) ; length_left ) goto trunc ; length_left <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> ni ) ; length = sizeof ( rp -> rip6 ) ; length_left <S2SV_ModEnd> ; }",0
250,<S2SV_ModStart> < 0 ) goto error ; <S2SV_ModEnd> goto set ;,1
251,<S2SV_ModStart> i ] ; memset <S2SV_ModEnd> ( cpi ->,0
252,"<S2SV_ModStart> argc ++ ; retval = bprm_change_interp ( iname, bprm ) ; if ( retval < 0 ) goto _error <S2SV_ModEnd> ; interp_file =",1
253,<S2SV_ModStart> ; int iSrc <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; } } <S2SV_ModEnd> res -> ContribRow <S2SV_ModStart> u ]. Left = iLeft ; res -> ContribRow [ u ]. Right = iRight ; for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ].,1
254,<S2SV_ModStart> user -> user ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
255,"<S2SV_ModStart> Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; return ; } if (! COM_CompareExtension ( filename, "".cfg"" ) ) { Com_Printf ( ""Com_WriteConfig_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".cfg\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n""",1
256,"<S2SV_ModStart> ( cursor,",0
257,"<S2SV_ModStart> ( mobj ) { size_t granularity = BIT ( tee_mm_sec_ddr. shift ) ; <S2SV_ModStart>, 0, ROUNDUP ( size, granularity ) ) ; } <S2SV_ModEnd> return mobj ;",1
258,<S2SV_ModStart> ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
259,"<S2SV_ModStart> const node * n0, bool <S2SV_ModEnd> is_async ) { <S2SV_ModStart> is_async ) { const n = CHILD ( n, 1 ) ; if ( n0 == 0 ) { n0 = CHILD ( n0, 1 ) ; if (! nch_async ) { ast_async ( n, CHILD ( n, 1 ) ) ; return CHILD ( n, 0 ) ; } else if ( n0 ) == 0 ) { n = CHILD ( n, 1 ) ; if ( nch_type_comment ) == NULL ||! nch_async ( nchunk ( n, 1 ) ) ) { ast_new_async ( CHILD ( n, 0 ), 0 ) ; if (! func_async ( n, CHILD ( n, 1 ) ) ) { ast_f = CHILD ( n, 1 ) ; if (! func_async ( n, CHILD ( n, 1 ) ) == CHILD ( n, 1 ) ) goto error ; } for ( i = 0 ; i = 0 ; i < 0 ; i ++ ) { if (! nchr_type_comment ) { if (! n",0
260,"<S2SV_ModStart>, NULL, false",0
261,"<S2SV_ModStart> * cpi, ThreadData * td, MACROBLOCK * const xd, PREDICTION_MODE <S2SV_ModEnd> mode_INFO * <S2SV_ModStart> mi ; const PREDICTION_MODE <S2SV_ModEnd> mode_info <S2SV_ModStart> mi ; const MODE_INFO * const MACROBLOCKD * const PREDICTION_MODE <S2SV_ModEnd> mode = & <S2SV_ModStart> mi -> mbmi_mode ; const PREDICTION_MODE <S2SV_ModEnd> mode = mi <S2SV_ModStart> mi -> mbmi_mode_mode ; const PREDICTION_MODE <S2SV_ModEnd> mode = mi <S2SV_ModStart> -> mbmi_mode ; const PREDICTION_MODE <S2SV_ModEnd> mode = mi_mode_mode_mode_mode_info <S2SV_ModStart> ( cm, mi <S2SV_ModEnd>, bsize, <S2SV_ModStart> mi, bsize,",0
262,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; saddr,1
263,"<S2SV_ModStart>, r -> qiov. size <S2SV_ModEnd> ) ; n <S2SV_ModStart> = r -> qiov. size <S2SV_ModEnd> / 512 ; <S2SV_ModStart>, r -> qiov. size <S2SV_ModEnd> ) ; }",1
264,<S2SV_ModStart> if ( cs >= <S2SV_ModEnd> CQSPI_MAX_CHIPSELECT ) {,1
265,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
266,<S2SV_ModStart> ) break ; if ( l > ll ) l = ll ;,1
267,<S2SV_ModStart> out ; } } if ( free < 0 ) { err = - ENOMEM ; goto out ;,1
268,<S2SV_ModStart> <= 0 && <S2SV_ModEnd> ND_TTEST ( *,0
269,<S2SV_ModStart> ) ; } if <S2SV_ModEnd> ( rq ->,0
270,"<S2SV_ModStart> ret ; uint8_t * buffer ; buffer = kmalloc ( 1, GFP_KERNEL ) ; if (! buffer ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart> ret ) { kfree ( buffer ) ; return <S2SV_ModEnd> ; } <S2SV_null>",0
271,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
272,"<S2SV_ModStart> } buf2 = buf2 <S2SV_ModEnd> ( buf2,",0
273,<S2SV_ModStart> Lut ) ; Lut = NULL ; <S2SV_ModStart> ; Error : if ( Lut!= NULL ),1
274,<S2SV_ModStart> = 0 ; ( i + 3 ) <S2SV_ModEnd> < sec -> <S2SV_ModStart> = 0 ; ( i + 7 ) <S2SV_ModEnd> < sec ->,1
275,<S2SV_ModStart> case ISIS_SUBTLV_EXT_IS_REACH_BW_CONSTRAINTS_OLD : if ( subl == 0 ) break ; <S2SV_ModStart> ++ ) { <S2SV_ModEnd> bw. i,1
276,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
277,<S2SV_ModStart> ONIG_INFINITE_DISTANCE ) { if ( str < reg -> low ) { continue ; },0
278,<S2SV_ModStart> fq_flags ) ; if ( nfd == NULL ) return - EINVAL,0
279,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
280,<S2SV_ModStart> vif ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> ) ) ; netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> size ) ; netbk_fatal_err ( vif <S2SV_ModEnd> ) ; vif,0
281,<S2SV_ModStart> ( cmd = 0 <S2SV_ModEnd> ; if (,0
282,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
283,<S2SV_ModStart> conn ) ; if ( <S2SV_ModStart> ( conn )!= 0 ) return,1
284,"<S2SV_ModStart> netbk_idx, pending_idx, pending_idx, XEN_NETIF_RSP_ERROR ) ; <S2SV_ModStart> netbk, pending_idx, XEN_ERROR, pending_idx <S2SV_ModEnd>, XEN_RSP_ERROR ) <S2SV_ModStart> netbk, pending_idx, pending_idx, pending_idx <S2SV_ModEnd>, XEN_NETIF_RSP_ERROR ) <S2SV_ModStart> err ) ; <S2SV_ModEnd> if ( netbk",0
285,,1
286,"<S2SV_ModStart> NULL ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; }",0
287,"<S2SV_ModStart> len < 0 <S2SV_ModEnd> ) { syslog <S2SV_ModStart> 1 ; } if ( addr. nl_pid ) { syslog ( LOG_WARNING, ""Received <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> untrusted <S2SV_blank> pid:%u"", addr. nl_pid ) ; continue ; }",1
288,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
289,<S2SV_ModStart> client ) ; <S2SV_ModEnd> } } if,0
290,"<S2SV_ModStart> ( args,",0
291,"<S2SV_ModStart>, nameptr, lfi, fname, UDF_NAME_LEN <S2SV_ModEnd> ) ; if",1
292,"<S2SV_ModStart> ip_vs_timeout_user t ; memset ( & t, 0, sizeof ( t ) ) ;",1
293,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> -> opt ) ; rcu_dereference ( <S2SV_ModStart> np -> opt ),0
294,<S2SV_ModStart> ; ssize_t result ; if ( WARN_ON_ONCE (! ib_safe_file_access ( filp ) ) ) return - EACCES,1
295,"<S2SV_ModStart>, * controller, * next = NULL <S2SV_ModStart> if (! caller_is_in_ancestor ( fpath, controller, path1, fpath ) ) { ret = - EACCES ; goto out ; } if (! next ) { ret = - ENOENT ; goto out ; } if ( next ) { ret = - EEXIST ; goto out ; } ret = - EEXIST ; if (! fc_access ( fpath, O_RDWR ) ) { ret = - EACCES ; goto out ; } if (! <S2SV_ModStart> if (! fpath ) ) ret = - EEXIST ) { ret = - EEXIST ; goto out ; } if (! fc_access ( fpath ) ) ret = - EEXIST ; if ( next < 0 ) { ret = - EEXIST ; goto out ; } ret = - EEXIST ;",0
296,<S2SV_ModStart> flags ) ; <S2SV_ModEnd> if (!,0
297,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
298,"<S2SV_ModStart> ) AcquireQuantumMemory ( MagickMax ( number_pixels, max_packets ), <S2SV_ModEnd> bytes_per_pixel * sizeof",0
299,<S2SV_ModStart> 0 ) ; if ( avio_feof ( s -> pb ) ) { ret = AVERROR_INVALIDDATA ; goto end ; },1
300,<S2SV_ModStart> ; rinfo = kzalloc <S2SV_ModEnd> ( rinfo ->,0
301,"<S2SV_ModStart> ; # endif install_keyword ( ""umask"", & umask_handler ) ;",1
302,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, void )",0
303,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> kfree ( tmpbuf,1
304,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; }",1
305,<S2SV_ModStart> ( box = jp2_box_create0 ( ) ) ;,0
306,"<S2SV_ModStart> size_t * new_size, size_t",0
307,<S2SV_ModStart> ; int copylen = 0,0
308,<S2SV_ModStart> ( struct ipv6hdr <S2SV_ModEnd> ) ; unsigned <S2SV_ModStart> offset ) { struct ipv6_opt_hdr * exthdr ; struct ipv6_opt_hdr * exthdr ; <S2SV_ModStart> offset ) ; if ( offset >= packet_len ) return - EINVAL ; offset += len <S2SV_ModEnd> ; } <S2SV_null>,0
309,"<S2SV_ModStart> int vpx_wb_write_bit_buffer <S2SV_ModEnd> ( wb, <S2SV_ModStart> 6 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 6 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
310,"<S2SV_ModStart> } else { memcpy <S2SV_ModEnd> ( cpi,",0
311,<S2SV_ModStart> 0 ; } aux. tp_padding = 0 ;,1
312,<S2SV_ModStart> } if ( <S2SV_ModEnd> djrcv_dev -> paired_dj_devices,1
313,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
314,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
315,<S2SV_ModStart> asconf ) { sctp_chunk_t * err = sctp_addip ; sctp_chunk_t * addip = sctp_chunk_tohsock_params param ; sctp_addip_chunk_t * addip = sctp_chunk_t * addip_chunk_t <S2SV_ModEnd> ; if ( <S2SV_ModStart> hdr ) { if ( param. p -> type == SCTP_ADDRESS || param. p -> type == SCTP_PARAM_ADDRESS || param. p -> type == SCTP_ADDRESS || param. p -> type == SCTP_PARAM_IPV4phdr. type ) return err_code ; if ( err_param. addip ) { if ( err_code == SCTP_ERROR || param. p -> type == SCTP_ADDRESS ) return err_code = SCTP_PARAM_ADDRESS ; <S2SV_ModStart> - EINVAL ; if ( err_code == SCTP_ack ) { if ( err_code == SCTP_ERROR ) return err_code == SCTP,0
316,"<S2SV_ModStart> 101, ( ""jas_realloc(%x, <S2SV_blank> %zu)\\n"" <S2SV_ModEnd>, ptr,",1
317,<S2SV_ModStart> exit ; } m -> msg_namelen = 0 ;,0
318,<S2SV_ModStart> CPU_FTR_TM_COMP ) && hv_enabled <S2SV_ModEnd> ; break ;,1
319,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
320,<S2SV_ModStart> 0 ) { kvcpu_hdr. hdr = 0 ; <S2SV_ModStart> len ) ) { <S2SV_ModEnd> if ( ( ( req,0
321,<S2SV_ModStart> -> log_file ; d -> log_file = eventfp ;,1
322,<S2SV_ModStart> return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
323,"<S2SV_ModStart> * parg = ( void * ) NULL ; void * parg = NULL ; void __u16 _IOC_SIZE ( void * ) arg = NULL ; if ( _IOC_SIZE ( _IOC_SIZE ( _IOC_IOC_IOC_SIZE, _IOC_SIZE ( void ) ) ) memset ( & mbuf, 0, sizeof ( void * ) ) ) { err = - EFAULT ; if ( _IOC_SIZE ( _IOC_SIZE ( _IOC_SIZE ( _IOC_SIZE ( _IOC_SIZE, _IOC_SIZE ) ) == - EFAULT ; if ( _IOC_SIZE ( _IOC_SIZE < _IOC_SIZE ( _IOC_SIZE ) ) { err = - EFAULT ; if ( _IOC_SIZE ( _IOC_SIZE ( _IOC_SIZE ( _IOC_SIZE, _IOC_SIZE ( _IOC_SIZE, _IOC_SIZE ( _IOC_SIZE, _IOC_SIZE ) ) ) ) { err = _IOC_SIZE ( _IOC_SIZE ( _IOC_SIZE ( _I",0
324,<S2SV_ModStart> ; if ( args -> rsize == 0 ||,0
325,"<S2SV_ModStart> data ) { void * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM ; ret = <S2SV_ModEnd> usb_control_msg ( dev <S2SV_ModStart>, 0, buf <S2SV_ModEnd>, size, <S2SV_ModStart> 500 ) ; kfree ( buf ) ; return ret ;",0
326,"<S2SV_ModStart> t_alts ) ; if ( intf -> desc. bNumEndpoints < 1 ) { dev_err ( & interface -> dev, ""Invalid <S2SV_blank> interface <S2SV_blank> endpoints\\n"" ) ; return - EINVAL ; }",0
327,"<S2SV_ModStart> ) { case GTK_RESPONSE_OK : { file = nautilus_file_get_metadata ( parameters -> file ) ; nautilus_file_metadata ( parameters -> file ) ; nautilus_file_metadata ( parameters -> file, NULL, NULL, NULL, NULL, parameters -> file ) ; nautilus_screen = nautilus_file_get_screen ( parameters -> file, NULL, parameters -> file ) ; nautilus_widget_invalidate_widget_screen ( parameters -> file ) ;",0
328,<S2SV_ModStart> ; if ( urb -> actual_length > 0 &&,1
329,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> seset * vol <S2SV_ModStart> -> server, struct smb_ses_list * smb_ses_ses_ses_len <S2SV_ModEnd> ) { switch <S2SV_ModStart> -> server. smb_ses_ses_list ) { if ( strncmp ( vol -> vol -> password, vol -> password ) continue ; if ( strlen ( strncmp ( vol -> password, vol -> password, vol -> password, vol -> password, vol -> password ) ) continue ; if ( vol -> password ) continue ; if ( strncmp ( strncmp <S2SV_ModEnd> ) continue",0
330,<S2SV_ModStart> vpx_codec_err_t res ; if ( cfg -> cfg. g_h!= cpi -> cfg. g_h ||! ctx -> cfg -> cfg. g_h ) { if ( cfg -> cfg -> cfg -> cfg. g_h || cfg -> cfg. g_h > cpi -> cfg. g_h || ( cfg -> cpi -> cpi -> cpi -> cpi -> cpi -> initial_width ) || ( cfg -> initial_width > cpi -> cpi -> cpi -> cpi -> oxcf. cpi -> cfg. g_h ) || ( cpi -> cpi -> oxcf. cpi -> cpi -> initial_width > cpi -> cpi -> cpi -> cpi -> oxcf. cpi -> cpi -> initial_width ) || ( cpi -> cpi -> cpi -> oxcf. cpi -> cpi -> oxcf. cpi -> oxcf. cpi -> cpi -> oxcf. cpi -> cpi -> cpi -> oxcf. cpi -> force_key ) ) ; if ( cpi ->,0
331,"<S2SV_ModStart> -> file * ptr <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( strlen ( ptr <S2SV_ModEnd> -> header. <S2SV_ModStart> * ), ptr <S2SV_ModEnd>, ptr <S2SV_ModStart> ) ) { if (! strcmp ( header, 3 ) ) { <S2SV_ModStart> else if (! f -> header. fmode == 0 ) { pr_err ( ""f: <S2SV_blank> invalid <S2SV_blank> path <S2SV_blank> path <S2SV_blank> invalid <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> size <S2SV_blank> (%s <S2SV_blank> %d)\\n"", ptr <S2SV_ModEnd>, path, <S2SV_ModStart> ) ) ; return 0 ; }",0
332,"<S2SV_ModStart> inode ) ; struct hugepage_subpool * spool = subpool_inode ( inode ) ; <S2SV_ModStart> ; if ( hugepage_subpool_get_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> 0 ) { hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg )",1
333,<S2SV_ModStart> process_keyring ) return 0,0
334,<S2SV_ModStart> * bufsize = 0 <S2SV_ModEnd> ; if (,0
335,"<S2SV_ModStart> orig ) ; fptr_orig = io_get_open_fptr ( mrb, orig ) ; <S2SV_ModStart> mrb_io_alloc ( mrb <S2SV_ModEnd> ) ; DATA_TYPE",1
336,<S2SV_ModStart> auth_keyring ) ; key_put_key ( keyring ) ;,0
337,"<S2SV_ModStart> cpi, vpx_free <S2SV_ModEnd> ) ; #",0
338,"<S2SV_ModStart> return res ; res = utee_param_to_param ( utc, <S2SV_ModEnd> param, callee_params <S2SV_ModStart>, callee_params ) ; if ( res!= TEE_SUCCESS ) return res",1
339,"<S2SV_ModStart> int rc ; struct desc_struct old_desc, new_desc ; const struct x86_emulate_ops * ops = ctxt -> ops ; u8 ctxt -> ops = cpl ( ctxt ) ; if ( rc!= X86EMUL_MODE_PROT64 ) ops -> get_segment ( ctxt, & old_desc, & old_desc, NULL, VCPU_SREG_CS ) <S2SV_ModStart>, ctxt, VCPU_SREG_CS ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; rc = assign_eip_far ( ctxt, new_descriptor_descriptor <S2SV_ModEnd>, ctxt, <S2SV_ModStart>, ctxt, VCPU_SREG_CS ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; rc = assign_eip_far ( ctxt, new_desc. l ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; if ( rc!= X86EMUL_CONTINUE ) return X86EMUL_CONTINUE ;",0
340,<S2SV_ModStart> -> band = av_calloc <S2SV_ModEnd> ( reslevel -> <S2SV_ModStart> -> prec = av_calloc <S2SV_ModEnd> ( reslevel ->,1
341,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
342,<S2SV_ModStart> * sizeof ( struct reloc_struct_t <S2SV_ModEnd> ) ) ;,1
343,<S2SV_ModStart> return si ; <S2SV_ModEnd> return 0 ;,0
344,"<S2SV_ModStart>, pct ; } if ( <S2SV_ModStart> -> height ) { memcpy ( p_total, OPJ_U, OPJ_UINT32 ) ; return - 1 ; } if (",0
345,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
346,"<S2SV_ModStart> RETURN_FALSE ; } if ( var_hash ( var_hash )!= NULL ) { php_unserialize_data_t retval ; zval = <S2SV_ModStart> ( retval, retval, retval <S2SV_ModEnd> ) ; }",0
347,<S2SV_ModStart> -> private_data ; <S2SV_ModEnd> if ( tu <S2SV_ModStart> } __err : <S2SV_ModEnd> return err ;,0
348,<S2SV_ModStart> ; if ( zfound == NULL ) return GF_ISOM_INVALID ; if ( <S2SV_ModStart> i ] ) { zfound = GF_ISOM_INVALID_FILE ; break ; } if (,0
349,"<S2SV_ModStart>. get_si ( get_alg_priv ( ctx ) <S2SV_ModEnd>, ctx ->",0
350,"<S2SV_ModStart> == 0 ) if ( received_protocol ) { fprintf ( stderr, ""received_protocol <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; }",0
351,<S2SV_ModStart> return si ; <S2SV_ModEnd> return 0 ;,0
352,<S2SV_ModStart> -> filesize = UINT64_MAX <S2SV_ModEnd> ; s ->,0
353,"<S2SV_ModStart> * cb ; size_t maxw, maxh, maxw, maxh, maxw, maxh, maxh, maxh, maxh, maxh, maxh, maxh, maxh, maxh, maxh, maxh, maxh, maxh, maxh, maxh, maxh, maxh, maxh <S2SV_ModEnd> maxh * <S2SV_ModStart> maxh ) ; maxh = ( size_t ) img -> comps [ maxw * maxh ; maxh = img -> comps [ 3 ]. maxh ; maxh = img -> comps [ maxh ; maxh = ( size_t ) img -> comps [ maxh ; maxh = img -> comps [ maxh = img -> comps [ 1 ]. maxh ; maxh = img -> comps [ 0 ]. maxh ; maxh = img -> comps [ 0 ]. maxh = img -> comps [ 0 ]. maxh - offx ; maxh = img -> comps [ 0 ]. data ; maxh = img -> comps [ 3 ]. data ; maxh = img -> comps [ 0 ]. data ; maxh = maxh =",0
354,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { mutex_unlock <S2SV_ModStart> ( state, fmode <S2SV_ModEnd> ) ; switch <S2SV_ModStart> ; } spin_unlock ( & state -> fmode <S2SV_ModEnd> ) ; return",0
355,"<S2SV_ModStart> return SSH_ERR_INVALID_ARGUMENT ; ssh_dispatch_set ( ssh, SSH2_MSG_KEXINIT, NULL ) ;",1
356,"<S2SV_ModStart> { assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.one <S2SV_blank> + <S2SV_blank> 1 <S2SV_blank> == <S2SV_blank> tests.constants.two <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.foo <S2SV_blank> == <S2SV_blank> \\""foo\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\"" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.empty <S2SV_blank> == <S2SV_blank> \\"" <S2SV_blank> \\"" <S2SV_blank> \\"" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\"" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
357,<S2SV_ModStart> read_info ) ; <S2SV_ModEnd> if ( EOFBlob,1
358,"<S2SV_ModStart> char lbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char strbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char ltest [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char strtest [ 512 <S2SV_ModEnd> ] ; if <S2SV_ModStart> ( ltest, ""%511[^\\r\\n]"" <S2SV_ModEnd>, strbase ) <S2SV_ModStart> ( ltest, ""%511[^\\r\\n]"" <S2SV_ModEnd>, strbase ) <S2SV_ModStart> && ntest!= 511 <S2SV_ModEnd> && ntest!= <S2SV_ModStart> && ntest!= 511 <S2SV_ModEnd> ) ; if",0
359,<S2SV_ModStart> ; int ret = kmalloc <S2SV_ModEnd> ; if (,0
360,<S2SV_ModStart> vpx_read ) { return 0 ;,0
361,,0
362,"<S2SV_ModStart>, e -> elems, e ->",1
363,<S2SV_ModStart> bpp <= 8 && c -> format!= CHUNKY,0
364,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; break",0
365,<S2SV_ModStart> q ) { mutex_lock ( & q -> timer_mutex ) ; <S2SV_ModStart> snd_timer_close ( q ) ; mutex_unlock ( & q -> timer_mutex,0
366,<S2SV_ModStart> = offset ; unsigned int error ; <S2SV_ModStart> out ; } if ( unlikely (! inode -> i_sb ) ) { error = gfs2_map ( inode ) ; if ( unlikely ( ip ) ) goto out ; error ; } if ( unlikely ( unlikely ( ip ) ) ) goto out ; nr_blk_is_unmap ( & bh ) ) ; if ( unlikely ( error ) ) goto out ; nr_blkfree ( ip. bh_block ) ; bh_map. bh_blocknr = bh_map. bh_map. bh_blks ( inode ) ; if ( inode -> i_blks ) goto out ; } if ( unlikely ( unlikely ( ip ) ) ) goto out ; if ( unlikely ( error ) ) goto out ; nr_map. bh_map. bh_map. bh_map. bh_map. bh_map. bh_blocks ) goto out ; nr_map. bh_size = len ; nr_map. b_map. bh_map. bh_map. bh_map. bh_map. b,0
367,<S2SV_ModStart> in ) ; if ( load -> error ) return NULL,0
368,<S2SV_ModStart> ) ) { return,0
369,<S2SV_ModStart> ; if (! retval ) <S2SV_ModEnd> retval = context,1
370,<S2SV_ModStart> name ) ; <S2SV_ModEnd> return 0 ;,0
371,<S2SV_ModStart> miux_tlv_length ) ; if (! miux_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> rw_tlv_length ) ; if (! rw_tlv ) { err = - ENOMEM ; goto error_tlv ; },0
372,<S2SV_ModStart> return m ; <S2SV_ModEnd> return 0 ;,0
373,<S2SV_ModStart> ( ctx -> <S2SV_ModEnd>!= 0,0
374,,0
375,"<S2SV_ModStart> ( interface, ENCRR <S2SV_ModEnd> ) ; if",0
376,<S2SV_ModStart> ; if ( inet_opt <S2SV_ModEnd> ( skb ),0
377,<S2SV_ModStart> len ; } ND_TCHECK_32BITS <S2SV_ModEnd> ( p + <S2SV_ModStart> p + 2 <S2SV_ModEnd> ) ; ND_PRINT,1
378,<S2SV_ModStart> ; if ( skb ->,0
379,<S2SV_ModStart> private ) { struct skcipher_tfm * tfm = private ; crypto_free ( tfm <S2SV_ModEnd> ) ; tfm_free_private,0
380,<S2SV_ModStart> bprm ) { <S2SV_ModEnd> int retval ; <S2SV_ModStart> int retval ; bprm_fill_uid ( bprm ) ; <S2SV_ModEnd> retval = security_bprm_set_creds,1
381,<S2SV_ModStart> = nlogs ; if ( unlikely ( datalen > 0 ) ) { r = UIO_MAXIOV + 1 ; goto err ; },1
382,<S2SV_ModStart> ; dlen -= 3 <S2SV_ModEnd> ; if (,0
383,<S2SV_ModStart> { rq = tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; fn (,1
384,<S2SV_ModStart> ( vpx_codec_alg == NULL <S2SV_ModEnd> ) { if,0
385,<S2SV_ModStart> - EOPNOTSUPP ; msg -> msg_namelen = 0 ; <S2SV_ModStart> goto out ; <S2SV_ModEnd> if ( msg,0
386,<S2SV_ModStart> skb_is_nonlinear ( skb ) ) return 0 ; if ( skb -> len < sizeof ( struct nlattr,1
387,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; return",0
388,"<S2SV_ModStart> bp, len <S2SV_ModEnd> ; break ;",0
389,<S2SV_ModStart> } if ( tile_buffsize > 0 && tile_buffsize > 0,0
390,<S2SV_ModStart> O_APPEND | O_CREAT | O_NOFOLLOW,1
391,<S2SV_ModStart> err ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
392,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; cluster = cluster -> cluster ; if (! cluster ) { ret = - EINVAL ; goto out <S2SV_ModEnd> ; } <S2SV_null> <S2SV_ModStart> - EBUSY ; o2SV_null> <S2SV_null>,0
393,"<S2SV_ModStart> ( fp, "" <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %127s\\n"" <S2SV_ModEnd>, & n",1
394,"<S2SV_ModStart> x, 0, 0",0
395,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
396,<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( connection ->,0
397,<S2SV_ModStart> return - E_NOTHANDLED ; if ( ninst == 0 ) return - E_INVALID,1
398,"<S2SV_ModStart> ( ldo, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
399,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
400,"<S2SV_ModStart>, p + offset + 3, <S2SV_ModEnd> tim. length <S2SV_ModStart> - 3 ) ; <S2SV_ModEnd> return 0 ;",0
401,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",1
402,<S2SV_ModStart> r ) ; <S2SV_ModEnd> return NULL ;,0
403,<S2SV_ModStart>,0
404,"<S2SV_ModStart> rc, NULL, true",0
405,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int f2n_verify_get ( & md -> chain [ ISAKMP_N ] -> chain [ ISAKMP_N ] ) ; if ( md -> chain [ ISAKMP_NEXT_N ] -> chain [ ISAKMP_NEXT_NEXT_NEXT_N ] -> chain [ ISAKMP_N ] -> chain [ ISAKMP_N ] -> chain [ ISAKMP_N ] = md -> chain [ ISAKMP_NEXT_NEXT_NEXT_NEXT_NEXT_NEXT_NEXT_N ] -> chain [ ISAKMP_NEXT_N ] -> payload [ ISAKMP_NEXT_N ] -> chain [ ISAKMP_NEXT_NEXT_N ] = md -> chain [ ISAKMP_N ] -> chain [ ISAKMP_NEXT_N ] -> chain [ ISAKMP_N ] -> chain [ ISAKMP_N ] -> chain [ ISAKMP_N ] [ ISAKMP_N ] -> chain [ ISAKMP_N,0
406,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nsc_encode ( void,0
407,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
408,<S2SV_ModStart> stringset == ETH_SS_STATS || stringset == ETH_SS_PRIV_FLAGS,1
409,<S2SV_ModStart> return ( ( ( <S2SV_ModStart> ) / 8 ) * GetPSDPacketSize ( image ),1
410,"<S2SV_ModStart> ( dentry, ""%s"",",0
411,<S2SV_ModStart> bMasterInterface0 ) ; if (! pcu -> ctrl_intf ) return - EINVAL ; <S2SV_ModStart> bSlaveInterface0 ) ; if (! pcu -> data_intf ) return - EINVAL ;,1
412,"<S2SV_ModStart> dev ) ; kstrdup ( dev, GFP_KERNEL ) ; <S2SV_ModStart> dentry ) ; kfree ( devname <S2SV_ModEnd> ) ; return",0
413,"<S2SV_ModStart> pirlvl ) { if ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 || pirlvl -> prcheightexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 ) { return - 1 ; } <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl ->",0
414,<S2SV_ModStart> target_enc ) { return ONIGERR_NOT_SUPPORTED_ENCODING_COMBINATION <S2SV_ModEnd> ; } else,1
415,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static MagickBooleanRow ( ImageError, CorruptImageError, ""ImproperImageHeader"" ) ; assert ( image -> colormap == ( image ) ; assert ( image -> colormap == ( image ) NULL ) ; if ( image -> colormap == ( image -> colormap == ( image -> colormap ) ) return ( image, image -> colormap + ( image -> colormap ) ) ; q = ( image -> colormap + ( image -> colormap + ( image -> colormap + ( image -> colormap ) ) ; q += GetPixelInfo ( image, image -> colormap ) ; if ( image -> colormap == ( image -> colormap ) ) return ( image -> colormap + ( image -> colormap + ( image -> colormap + ( image -> colormap + ( image -> colormap + ( image -> colormap ), image -> colormap + ( image -> colormap + ( image -> colormap ) ) ) ; if ( ( ( image -> colorm",0
416,"<S2SV_ModStart> u_char * tptr, const u_int length ) { u_int length ; u_int <S2SV_ModEnd> hdrlen ; hexdump = FALSE <S2SV_ModStart> case AFNUM_INET6 : if ( length < 4 ) { ND_PRINT ( ( ndo, ""(invalid <S2SV_blank> address <S2SV_blank> length <S2SV_blank> %u)"", length - 1 ) ) ; hexdump = TRUE ; break ; } <S2SV_ModStart> case AFNUM_INET6 : if ( length < 4 ) { ND_PRINT ( ( ( ndo, ""(invalid <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> length <S2SV_blank> %u)"", length - 1 ) ) ) ; hexdump = TRUE ; break ; }",0
417,"<S2SV_ModStart> ctxt -> rdx ; rcx = 0 ; <S2SV_ModStart> = X86EMUL_MODE_PROT64 ; rcx = reg_read ( ctxt, VCPU_REGS_RCX ) ; if ( rcx >= X86EMUL_CONTINUE ) return rcx ; <S2SV_ModStart>, 0, rdx <S2SV_ModEnd> ; rcx =",0
418,<S2SV_ModStart> dev ) ; ssize_t len ; device_lock ( dev ) ; len = <S2SV_ModEnd> sprintf ( buf <S2SV_ModStart> driver_override ) ; device_unlock ( dev ) ; return len ;,1
419,"<S2SV_ModStart> NULL ) ; if (! tmpio_get ( BIO ) ) { CMSerr ( CMSerr, CMSerr ( CMS_F_CMS_F_OK ) ; goto err ; } <S2SV_ModEnd> if (! <S2SV_ModStart>, BIO ) ) { CMSerr ( CMSerr ) ; goto err ; } if ( CMSerr ( CMSerr ) { CMSerr ( CMSerr, CMSerr ) ; goto err ; } if ( CMSerr!= i ) goto err ; } if (! BIO_TYPE_FAILURE ) goto err ; if ( i < CMS_TEXT ) goto err ; goto err ; goto err ; } if ( i < CMS_TYPE_TEXT ) goto err ; if ( i ) goto err ; if (! BIO_get_text ( i ) ) goto err ; if ( i < 0 ) goto err ; if (! BIO_cMS_TEXT ) goto err ; if ( i == BIO_TEXT ) goto err ; if ( i < 0 ) goto err ; if ( i < 0 ) goto err ; break ;",0
420,<S2SV_ModStart> = KRB5_PREAUTH_FAILED ; if ( retval == 0 ) return retval ;,0
421,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
422,"<S2SV_ModStart> = ""/tmp"" ; # endif",0
423,<S2SV_ModStart> = 0 ; size_t pathlen = 0 ; <S2SV_ModStart> case AF_UNIX : pathlen = ( ( <S2SV_ModEnd> ) -> sun_path <S2SV_ModStart> ) -> pathlen ) pathlen <S2SV_ModEnd> ; if (,0
424,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
425,<S2SV_ModStart> if ( count > <S2SV_ModEnd> MAX ) return,0
426,"<S2SV_ModStart> ) { struct hugepage_subpool * spool = subpool_get_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> page_subpool_put_pages ( spool <S2SV_ModEnd>, chg )",0
427,"<S2SV_ModStart> filegen_string ) ; if ( NULL == filegen ) { msyslog ( LOG_ERR, ""unrecognized"" ) ; continue ; }",0
428,"<S2SV_ModStart>, tag ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
429,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> output_x8 ( const tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> 4 ] ; tran_high_t <S2SV_ModEnd> * output, <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x0, <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x8 = input <S2SV_ModStart> 4 ] ; tran_low_t <S2SV_ModEnd> x8 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x8 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x8 = input <S2SV_ModStart> 4 ] ; tran_low_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> 4 ] ; tran_low_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> 3 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 3 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModEnd> [ 0 ] = (",0
430,<S2SV_ModStart> flags ) ; if ( flags &= 0 ) return - EINVAL ;,0
431,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
432,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF <S2SV_ModStart> wc ) ; return,1
433,"<S2SV_ModStart> tot_len ) ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
434,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> AVINDEX_KEYFRAME ) ; },1
435,"<S2SV_ModStart> ( ndo, ""%s"", rlen",0
436,"<S2SV_ModStart>, * controller, * next = NULL <S2SV_ModStart> if (! caller_is_in_ancestor ( fpath, controller, controller, & next ) ) { ret = - ENOENT ; goto out ; } if (! next ) { ret = - ENOENT ; goto out ; } if (! fc_may_access ( fc -> pid, controller, NULL ) ) { ret = - ENOENT ; goto out ; } if (! <S2SV_ModStart> out ) ) { ret = - EACCES ; goto out ; } ret = - EACCES ; free ( fcgdir ) ;",0
437,<S2SV_ModStart> ; mnt -> mnt_flags |= MNT_LOCK_NODEV ; if ( mnt -> mnt. mnt. mnt. mnt_flags & MNT_LOCK_NODEV ) mnt -> mnt. mnt_flags |= MNT_NODEV ; if ( mnt -> mnt. mnt. mnt. mnt. mnt_flags & MNT_LOCK_NODEV ) mnt -> mnt. mnt. mnt_flags |= MNT_NODEV ; if ( mnt -> mnt. mnt_flags & MNT_LOCK_NOSUID ) mnt -> mnt. mnt. mnt. mnt. mnt. mnt. mnt_flags |= MNT_NOSUID ; if ( mnt -> mnt. mnt. mnt. mnt. mnt. mnt. mnt_flags & MNT_NOEXEC ) mnt -> mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt_flags |= MNT_LOCK_NODE,0
438,<S2SV_ModStart> rds_loop_transport ; } <S2SV_ModEnd> } conn ->,1
439,<S2SV_ModStart> * rsize >= 112 <S2SV_ModEnd> && rdesc [,1
440,<S2SV_ModStart> if ( ( ( <S2SV_ModStart> ) < bodyLength ) || ( bodyLength < sizeof ( EAPOL_RSN_KEY ) ),1
441,<S2SV_ModStart> ( likely ( serio <S2SV_ModEnd> &&! filtered,1
442,"<S2SV_ModStart>! e ) { ND_TCHECK ( <S2SV_ModEnd> dp [ 0 <S2SV_ModStart> 0 ] ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> c <S2SV_blank> %04x"", EXTRACT_32BITS ( & dp [ 0 ] ) ) ) ; } ND_PRINT ( ( ndo, EXTRACT_32BITS ( & dp [ 0 ] ) ) ) ) ;",0
443,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
444,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> int mi_cols ( <S2SV_ModStart> int mi_col, vpx_writer <S2SV_ModEnd> * bsize, <S2SV_ModStart> * mi, vpx_writer <S2SV_ModEnd>, int mi <S2SV_ModStart> int mi_col ; vp9_get_segment_id <S2SV_ModEnd> ( sb,",0
445,<S2SV_ModStart> ) return 0,0
446,<S2SV_ModStart> ; int ret =,0
447,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> S2SV_null>,0
448,"<S2SV_ModStart> NULL ) ; if (! _gdImageGifCtx <S2SV_ModEnd> ( im, <S2SV_ModStart>, out ) ) { <S2SV_ModEnd> rv = gdDPExtractData <S2SV_ModStart> size ) ; } else { rv = NULL ; }",1
449,<S2SV_ModStart> bprm ) ; kfree ( bprm ) ;,0
450,"<S2SV_ModStart> = 0 ; size_t data_size = 0 ; <S2SV_ModStart>, & buf_size, & data_size <S2SV_ModStart> OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( ret > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> ) ; } if ( ret > ( siz -> bsockaddr ) ) { ret = - EINVAL ; OE_RAISE_ERRNO ( OEINVAL ) ; goto out ; } if (",0
451,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( line,",0
452,"<S2SV_ModStart> ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, ""Invalid <S2SV_blank> image <S2SV_blank> dimensions"" ) ; goto done ; }",1
453,<S2SV_ModStart> fc ) { memcpy <S2SV_ModEnd> ( & cpi,0
454,"<S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
455,<S2SV_ModStart> * p ; size_t <S2SV_ModEnd> len ; if,0
456,<S2SV_ModStart> destroy_list ) ; <S2SV_ModEnd> } } <S2SV_null>,1
457,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
458,<S2SV_ModStart> ) ; } fuse_conn_put ( & cc -> fc ) ;,1
459,<S2SV_ModStart> ( code ) { <S2SV_ModEnd> return err ;,0
460,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> uint8_t *,0
461,<S2SV_ModStart> cur_pic. field_picture <S2SV_ModEnd> ) return 0,1
462,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> sizeof ( struct <S2SV_ModStart> m_inc ) { int ret = - ENOMEM ; goto out <S2SV_ModEnd> ; } size <S2SV_ModStart> 0 ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>,0
463,<S2SV_ModStart> buf ) ) { return 0 ; } <S2SV_ModEnd> ext_block = (,1
464,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = key_permission,1
465,<S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen ] ) ; <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen ] <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ] ) ; },0
466,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
467,"<S2SV_ModStart> = hmi_data ; uint32_t data_siz ; <S2SV_ModStart> += 4 ; hmi_track_offset [ i ] ; hmi_data [ i ] = hmi_offset [ i ] ; <S2SV_ModStart> += 4 ; hmi_data [ i ] += 4 ; <S2SV_ModStart> += 4 ; hmi_offset += 4 ; hmi_data [ i ] -= setup_data <S2SV_ModEnd> ; if ( <S2SV_ModStart> += 4 ; hmi_offset [ i ] += 4 ; <S2SV_ModStart> += 4 ; hmi_data [ i ] = hmi_offset [ i ] += 4 ; <S2SV_ModStart> += 4 ; hmi_data [ i ] += 4 ; <S2SV_ModStart> += 4 ; hmi_tmp += 4 ; hmi_data [ i ] += 4 ; hmi_offset += 4 ; hmi_data [ i ] += 4 ; <S2SV_ModStart> += 4 ; if ( hmi_tmp < hmi_data [ i ] ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, __LINE__, 0 ) ; goto _hmi_tmp ; } if ( hmi_data [ hmi_",0
468,<S2SV_ModStart> -> id ; haddr -> hci_channel = 0 ;,1
469,<S2SV_ModStart> -> i_iget5_offset ; fh16 [ 3 ] = 0 ;,1
470,,0
471,"<S2SV_ModStart> BPF_ALU64 ) { coerce_to_size ( dst_reg, 4 ) ; coerce_reg_to_size <S2SV_ModEnd> ( & src_reg <S2SV_ModStart> ( & src_reg, 4",0
472,"<S2SV_ModStart> ) { const VP9EncoderConfig <S2SV_ModEnd> * const oxcf <S2SV_ModStart> = get_layer_context ( cpi <S2SV_ModEnd>, cpi -> <S2SV_ModStart> -> common ; vp9_filter_filter_q ( cm, cpi -> common, cpi -> common, cpi -> common, cpi -> common. frame_type, cpi -> common. frame_type, cpi -> common. frame_type ) ; if ( cpi -> common. frame_type == KEY_FRESH_FRESH_FRAME ) { cpi -> common. frame_type = 1 ; } else if ( cpi -> frame_type == KEY_FRESH_FRESH_FRAME ) { if ( cpi -> common. frame_type == KEY_FRESH_FRESH_FRAME ) { cpi -> common. frame_type = cpi -> common ; } else if ( cpi -> frame_type == KEY_FRESH_FRESH_FRAME ) { cpi -> common. use_svcpy ( cpi, frame_level, frame_level ) ; } else vp9_filter_q ( cm -> bit_depth, frame_depth, cm -> bit_depth,",0
473,<S2SV_ModStart> ) ) ; if ( TEMP_FAILURE_RETRY (,0
474,<S2SV_ModStart> DestroyQuantumInfo ( quantum_info ) ; canvas_image = DestroyImage ( canvas_image,1
475,"<S2SV_ModStart> = getnum ( <S2SV_ModEnd> fmt, MAXALIGN",0
476,<S2SV_ModStart> void usage_exit ( void,1
477,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
478,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
479,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
480,"<S2SV_ModStart>, vpx_codec_alg_priv ( void ) <S2SV_ModEnd>, data )",0
481,<S2SV_ModStart> ; if ( * value == 0 ||,1
482,"<S2SV_ModStart> ( sb, ext4_has_data,",0
483,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
484,<S2SV_ModStart> ND_TCHECK ( * tptr <S2SV_ModEnd> ) ; ND_PRINT,0
485,"<S2SV_ModStart> kf ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3",0
486,,0
487,<S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp. zval )!= IS_DOUBLE ) { zval = * * * * tmp ; zval_copy_ctor ( & dval ) ; convert_to_double ( & dval ) ; x = Z_DVAL ( dval ) ; } else { zval = * * * * * tmp ; zval_copy_ctor ( & dval ) ; zval_ctor_ctor ( & dval ) ; convert_to_double ( & dval <S2SV_ModEnd> ) ; x,0
488,"<S2SV_ModStart> ( obj, <S2SV_ModEnd> ) ; }",0
489,<S2SV_ModStart> SQL_DROP ) ; <S2SV_ModEnd> return 0 ;,1
490,"<S2SV_ModStart> ; r = __copy_from_user <S2SV_ModEnd> ( data,",1
491,"<S2SV_ModStart> && isspace ( ( unsigned char ) <S2SV_ModStart> ; isspace ( ( unsigned char ) <S2SV_ModEnd>, sizeof (",0
492,<S2SV_ModStart> = 0 ; info -> port = NULL ;,1
493,<S2SV_ModStart> -> ctx. <S2SV_ModEnd> pmu = pmu,1
494,"<S2SV_ModStart> iovec ) { int len = kiocb -> iov_nbytes ; <S2SV_ModStart> * len, len <S2SV_ModEnd> ) ; if",0
495,<S2SV_ModStart> ext4_group_t flex_group ; unsigned <S2SV_ModStart> -> s_log_groups_per_flex ; if ( sbi -> s_log_groups_per_flex < 1 || sbi -> s_log_per_flex > 1 ) { sbi -> s_log_groups_per_flex = 0 ; return 1 ; },0
496,<S2SV_ModStart> ( unlikely ( chunk -> pdiscard ) ) return 0 ; if ( unlikely (,1
497,<S2SV_ModStart> { if ( cJSON_CreateNumber <S2SV_ModEnd> ( i ),0
498,"<S2SV_ModStart> { if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) return exit_client (",0
499,<S2SV_ModStart> <= w - ( int ),1
500,<S2SV_ModStart> callback_args -> forward_matches ; assert ( match_offset + match_length <= callback_args -> data_size ),1
501,<S2SV_ModStart> options. disable_forwarding && use_privsep,1
502,"<S2SV_ModStart> { if ( length > SMKTREE_DECODE_MAX_RECURSION ) { av_log ( NULL, AV_LOG_ERROR, ""Maximum <S2SV_blank> tree <S2SV_blank> recursion <S2SV_blank> level <S2SV_blank> exceeded.\\n"" ) ; return AVERROR_INVALIDDATA ; } if (",1
503,<S2SV_ModStart> err ; } if ( m -> msg_name ),1
504,"<S2SV_ModStart> } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_target, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> from <S2SV_blank> a"" ) ; return 1 ; } else { int res <S2SV_ModEnd> ; res = <S2SV_ModStart> ) ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> obj, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_CLEAR ( PyExc_TypeError, ""required <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> list"" ) ; return 1 ; } else { PyErr_type_comment = NULL ; } else { int res ; res ; res ; res = obj2ast_type_ignores <S2SV_ModEnd> ( obj, <S2SV_ModStart> obj, & tmp ) ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> obj, & tmp ) < 0 ) goto failed ; } if ( tmp == NULL ) { Py_CLEAR ( tmp ) { PyErr_SetString ( PyExc_TypeError, & PyExc_TypeError,",0
505,<S2SV_ModStart> m ; int hstartrow <S2SV_ModEnd> ; if ( <S2SV_ModStart> 2 ) { hstartrow <S2SV_ModEnd> = ( numrows <S2SV_ModStart> = numrows - hstartrow <S2SV_ModEnd> ; n = <S2SV_ModStart> & a [ hstartrow <S2SV_ModEnd> * stride ],1
506,"<S2SV_ModStart> ""REPLY_ADD_STA <S2SV_blank> PASSED\\n"" ) ; ret = iwl_sta_ucode_activate ( priv, sta_id ) <S2SV_ModEnd> ; break ;",1
507,"<S2SV_ModStart> ; log_file = fopen_safe <S2SV_ModEnd> ( file_name,",1
508,"<S2SV_ModStart> ""a\\0x\\0x\\0x\\0"" ) ; assert_true_rule_rule_blob ( ""rule <S2SV_blank> test <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /\\\\babc/ <S2SV_blank> wide <S2SV_blank> condition: <S2SV_blank> $a\\0c\\0"" ) ; assert_true_rule_rule_rule_blob ( ""rule <S2SV_blank> test <S2SV_blank> test <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /\\\\babc/ <S2SV_blank> wide <S2SV_blank> wide <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> wide <S2SV_blank> condition: <S2SV_blank> $a\\0c\\0"" ) ; assert_true_rule_blob ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /\\\\babc/ <S2SV_blank> wide <S2SV_blank> condition: <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> $a <S2SV_blank> wide <S2SV_blank> condition: <S2SV_blank> $a\\0c\\0c\\0c\\0c\\0c\\0c\\0"", ""\\0c\\0c\\0"" ) ; assert_true_rule_rule_blob ( ""rule <S2SV_blank> strings: <S2SV_blank> strings: <S2SV_blank> $a\\0c\\0c\\0c\\0c\\0"" ) ; assert_true_rule",0
509,"<S2SV_ModStart> & HB_LOCK ) spin_lock_irqsave ( & hashbin -> hb_spinlock, flags ) ; <S2SV_ModStart> & HB_LOCK ) { if ( hashbin -> hb_type & HB_LOCK ) spin_lock_irqsave ( & hashbin -> hb_spinlock, flags ) ; if ( hashbin -> hb_lock ) { <S2SV_ModStart> & HB_LOCK ) ; if ( hashbin -> hb_spinlock_irqrestore ( & HB_LOCK ) break ; } <S2SV_ModEnd> if ( hashbin <S2SV_ModStart> & HB_LOCK ) spin_unlock_irqrestore ( & hashbin -> hb_spinlock, hashbin -> hb_irqrestore ( & hashbin -> hb_spinlock, flags ) ; if ( & hashbin -> hb_type & HB_LOCK ) spin_unlock_irqrestore ( & hashbin -> hb_irqrestore ( & hashbin -> hb_spinlock, flags ) ; if ( & hashbin -> hb_type & HB_LOCK ) spin_unlock_irqrestore ( & hashbin -> hb_spinlock, flags ) ;",0
510,<S2SV_ModStart> EPERM ; } if ( ( ( mnt -> mnt. mnt. mnt_flags & MNT_LOCK_NODEV ) &&! ( mnt -> mnt. mnt_flags & MNT_LOCK_NODEV ) ) { return - EPERM ; } if ( ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NODEV ) &&! ( mnt -> mnt_flags & MNT_NOSUID ) ) return - EPERM ; } if ( ( ( mnt -> mnt. mnt. mnt_flags & MNT_LOCK_NOSUID ) && ( mnt -> mnt. mnt. mnt_flags & MNT_MASK )!= - EPERM ) { return - EPERM ; } return - EPERM ; },0
511,<S2SV_ModStart> 0 ; int err ; <S2SV_ModStart> goto out ; offset = 0 ;,0
512,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
513,<S2SV_ModStart> port ) { <S2SV_ModEnd> return 0 ;,0
514,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> read64_chunk ; int <S2SV_ModStart> s64_chunk, length, table_length ) ; if ( cs64_chunk. table_length!= 0 ) { cs64_chunk. dsamples = sizeof ( cs64_chunk. ds64_chunk. ck64_length ) ; cs64_chunk. dsamples = sizeof ( CS64_chunk. ds64_chunk ) ; return GF_MAX ; } if ( table_length > sizeof ( CS64_length ) ) { error_line ( CS64_chunk. ck64_chunk. ck * sizeof ( cs64_chunk. dsamples ), table_length ) ; return GF_MAX ; } <S2SV_ModStart> ds64_chunk. length = CS64_chunk. table_length * sizeof ( cs64_chunk ) ; if ( cs64_chunk ) ) return FALSE ;",0
515,"<S2SV_ModStart> ( msg_name, <S2SV_ModEnd> -> msg_namelen <S2SV_ModStart> -> msg_name, msg_sys <S2SV_ModEnd> -> msg_name, <S2SV_ModStart> ( msg_sys -> msg_name, msg_namelen <S2SV_ModStart> -> msg_name, msg_sys -> msg_namelen <S2SV_ModEnd> ) ; } if",0
516,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> chunk_sizeof ( struct <S2SV_ModStart> goto out_dblks ; int bpending_blocks ; int bh_chunk_size = 0 ; <S2SV_ModStart> goto out_dput ; bhdr ; bh_blk ( & bh -> bh_blocksize ) ; <S2SV_ModStart> goto out_dput ; bhdr = 0 ;,0
517,<S2SV_ModStart> ) ) { # if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModEnd> ( ) { <S2SV_ModStart> ) ; } # endif <S2SV_ModStart> ) ) ; } # if CONFIG_VPX_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH ) { <S2SV_ModStart> ) ) ; },0
518,<S2SV_ModStart> return FALSE ; { BOOL rc ; <S2SV_ModStart> -> prof_nsc_rle_decompress_data ) rc = <S2SV_ModStart> -> prof_nsc_rle_decompress_rle_decode ) rc ; if (! rc ) return FALSE ; } if (! rc ) return FALSE ;,0
519,"<S2SV_ModStart> -> dict ) && xmlDictOwns ( ctxt -> dict, value )",1
520,"<S2SV_ModStart> ; if ( is_link ( fname ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank> file\\n"" ) ; exit ( 1 ) ; } if (",0
521,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> push ( struct <S2SV_ModStart> ifindex_hdr return - EINVAL <S2SV_ModStart> ; if ( len <S2SV_ModEnd> == 0 ) return - EINVAL <S2SV_ModStart> error ; return - EINVAL ;,0
522,<S2SV_ModStart> b ) { } else if ( warn_script_unsaved && fv -> script_unsaved && AskScriptChanged ( ) == 2 ) { return false ;,1
523,<S2SV_ModStart> mmap_sem ) ; if ( msr_err < 0 ||,0
524,<S2SV_ModStart> = timespec_to_ns ( & <S2SV_ModStart> = timespec_to_ns ( &,0
525,"<S2SV_ModStart> { if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
526,<S2SV_ModStart> ) ) { size_t <S2SV_ModEnd> value ; if,0
527,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> range ( struct <S2SV_ModStart> ranges ) { struct range_media_media ; struct range_media = & clt -> range [ 0 ] ; struct range_media = & r -> range [ 0 ] ; r -> range [ 0 ] = & r -> range [ 0 ] ; r -> range [ 0 ] = & r -> range [ 0 ] ; r -> range [ 0 ] = & r -> range [ 0 ] ; r -> range [ 0 ] = & r -> range [ 0 ] ; rranges = r -> range [ 0 ] ; r -> range [ 0 ] = & r -> range [ 0 ] ; <S2SV_ModStart> ranges ) ; <S2SV_ModEnd> return 0 ;,0
528,"<S2SV_ModStart> ( interface, KSZ8851_ISR ) ; <S2SV_ModStart> ( interface, KSZ8851_ISR ) ; if ( status & KSZ8851_IS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_IS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_IS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR, KSZ8851_IS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_ISRXISR, KSZ8851_IS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR, KSZ8851_IS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_IS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISRXISR, KSZ8851_IS <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( interface, KSZ8851_ISRXISR, KSZ8851_IS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_IS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ88",0
529,"<S2SV_ModStart> vp9_write_bit_buffer ( const vpx_writer <S2SV_ModEnd> * wb, <S2SV_ModStart> * wb, vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
530,<S2SV_ModStart> bpp <= 8 && c -> format!= CHUNKY,0
531,"<S2SV_ModStart> { if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
532,<S2SV_ModStart> ; if ( * ptr == '\\0' ) { <S2SV_ModStart> m ) ; } <S2SV_ModEnd> if (!,0
533,"<S2SV_ModStart> struct fb_vblank vblank ; memset ( & vblank, 0, sizeof ( vblank ) )",1
534,<S2SV_ModStart> flags ) { spin_lock ( & ctx -> cancel_lock ) ; <S2SV_ModStart> } } else { __timerfd_remove_cancel <S2SV_ModEnd> ( ctx ) <S2SV_ModStart> ) ; } spin_unlock ( & ctx -> cancel_lock ) ;,1
535,,0
536,<S2SV_ModStart> { if (! dev_name ||,1
537,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; break",0
538,<S2SV_ModStart> goto res ; <S2SV_ModEnd> if ( len,0
539,<S2SV_ModStart> TSRMLS_CC ) ; if ( new_len > INT_MAX ) { efree ( replaced ) ; RETURN_FALSE ; },1
540,"<S2SV_ModStart> ( uid,",0
541,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) ;",0
542,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> int mi_row, <S2SV_ModStart> int mi_row, vpx_col <S2SV_ModEnd>, int mi_row <S2SV_ModStart> row, bsize, bsize <S2SV_ModEnd>, int mi_col <S2SV_ModStart> = 1 ; <S2SV_ModEnd> if ( bsize <S2SV_ModStart> 0 ) { <S2SV_ModEnd> return 0 ; <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return 0 ;",0
543,"<S2SV_ModStart> name ) ; if (! strcmp ( key, ""url"" ) && value && looks_like_command_line_option ( value ) ) data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_URL, ""disallowed <S2SV_blank> submodule <S2SV_blank> url: <S2SV_blank> %s"", value ) ;",1
544,<S2SV_ModStart> int block_ptr = - 1 <S2SV_ModEnd> ; int block_ptr <S2SV_ModStart> -- ) { ADVANCE_BLOCK ( ) <S2SV_ModStart> row_inc ; } <S2SV_ModEnd> } break ; <S2SV_ModStart> row_inc ; } <S2SV_ModEnd> } return,0
545,<S2SV_ModStart> cnt ) { ssize_t <S2SV_ModEnd> n ; assert,1
546,<S2SV_ModStart> ; __be16 type ; if ( NAPI_GRO_CB ( skb ) -> encap_mark ) goto out ; NAPI_GRO_CB ( skb ) -> encap_mark = 1,1
547,<S2SV_ModStart> ; if ( numrows < 0 || numcols < 0 ) { return 0 ; } if (,1
548,<S2SV_ModStart> = tpm_kdfa ( <S2SV_ModEnd> session -> authHash,1
549,"<S2SV_ModStart> key_ref ) ; ret = key_read ( key, 0 <S2SV_ModEnd> ) ; if",0
550,<S2SV_ModStart> ps_dec -> u4_first_slice_in_pic = 0,0
551,"<S2SV_ModStart> BPF_ALU64 ) { coerce_reg_to_size ( dst_reg, 4 ) ; coerce_reg_to_size <S2SV_ModEnd> ( & src_reg <S2SV_ModStart> ( & src_reg, 4",0
552,"<S2SV_ModStart> pathname, fpath <S2SV_ModEnd> ) ; if",0
553,<S2SV_ModStart> int rc ; size_t size ; <S2SV_ModStart> - EINVAL ; size = sizeof ( uint32_t ) hdr. size_t ) ; if ( hdr. size < sizeof ( uint32_t ) ) return - EINVAL ; <S2SV_ModStart> size = 0 ; if ( hdr. hdr. size < sizeof ( uint32_t ) ) return - EINVAL ; if ( hdr. size < sizeof ( uint32_t ) ) { size = 0 ; break ; case VFIO_IRQ_SET_SET_IRQ_SET_SET_IRQ : size = 0 ; break ; case VFIO_IRQ_SET_SET_IRQ_SET_DATA_SIZE : size = 0 ; break ; case VFIO_IRQ_SET_SET_IRQ : size = size ; break ; case VFIO_IRQ_SET_SET_IRQ_IRQ : size = size ; break ; case VFIO_IRQ_SET_IRQ_SET_IRQ : size = size ; break ; },0
554,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ext4_has_inline_data ( inode,1
555,<S2SV_ModStart> -> filesize = UINT64_MAX <S2SV_ModEnd> ; s ->,1
556,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
557,"<S2SV_ModStart> char * in, size_t olen <S2SV_ModStart> += 4 ; if ( len == olen ) return len ; <S2SV_ModStart> '=' ) { if ( len == olen ) return len ; <S2SV_ModStart> '=' ) { if ( len == olen ) return len ;",1
558,<S2SV_ModStart> gc ) ; <S2SV_ModEnd> return 0 ;,1
559,"<S2SV_ModStart> i, bytes <S2SV_ModEnd> ) ; for",0
560,<S2SV_ModStart> & CP_RDESC_SWAPPED_MIN_MAX ) ) return rdesc ; if ( * rsize < 4,1
561,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_frame_per_frame_sample ( svc_frame_t <S2SV_ModStart> int i ; int i ; <S2SV_ModStart> ) { int64_t number_layers = 0 ; int64_t number_layers [ VP9_layers [ VPX_COUNT ] ; int64_t number_layers = 0 ; <S2SV_ModStart> ; int64_t number_layers [ VPX_LEN_layers ] ; int64_layers = VPX_CODEC_PER_RESHIGHBITDEPTHRESHIGHBITDEPTHRESHIGHBITDEPTHRESHIGHBITS2SV_null>,0
562,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decode ( TWO <S2SV_ModStart> 4 ) { if ( outSize < len ) return FALSE ; <S2SV_ModStart> 4 ) { if ( outSize < 4 ) return FALSE ; outSize -- ; <S2SV_ModStart> 4 ) { if ( outSize < 4 ) return FALSE ; * outSize -- ; * outSize -- ; <S2SV_ModStart> 4 ) return FALSE <S2SV_ModEnd> ; } <S2SV_null>,0
563,<S2SV_ModStart> ; if ( screen_free ( screen ) &&,0
564,"<S2SV_ModStart> char * str, size_t <S2SV_ModEnd> len ) { <S2SV_ModStart> char * end = NULL <S2SV_ModStart> char * end = strlen ( * ) ; if (! str ) { return NULL ; } if ( * end == NULL ) { * end = NULL ; } else { char * end = NULL ; } else if ( * end == NULL ) { * end = NULL ; return NULL ; } * end = * end = NULL ; <S2SV_ModStart> char * end = str ; if (! str ) return NULL ; } else { if ( * end == '\\0' ) return NULL ; <S2SV_ModEnd> if ( * <S2SV_ModStart> char * end = NULL <S2SV_ModEnd> ; } <S2SV_null>",0
565,"<S2SV_ModStart> * m, size_t <S2SV_ModEnd> bufsize ) { <S2SV_ModStart> * m, m, <S2SV_ModEnd> bufsize ) { <S2SV_ModStart> * bufsize <S2SV_ModEnd> ) ; }",0
566,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
567,"<S2SV_ModStart>, pred_rtrn ) ||! expr -> action. args",1
568,<S2SV_ModStart> pcrypt_free ( struct aead_instance <S2SV_ModEnd> * inst ) <S2SV_ModStart> * ctx = aead_instance_ctx <S2SV_ModEnd> ( inst ),1
569,"<S2SV_ModStart> ( 2 * ptr,",0
570,"<S2SV_ModStart> } if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if (",1
571,<S2SV_ModStart> icmp6_hop_limit ) { if ( <S2SV_ModStart> icmp6_hop_limit < 4 ) { ND_PRINT ( nf. icmph. hop_limit ) ; },0
572,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
573,"<S2SV_ModStart> * up ; ulen = xfrm_replay_state_esn_len ( ulen, ulen <S2SV_ModEnd> ) ; if <S2SV_ModStart> 0 ) return ulen <S2SV_ModEnd> ; } <S2SV_null>",0
574,"<S2SV_ModStart> int ret = proc_dointvec_minmax <S2SV_ModEnd> ( table,",1
575,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",1
576,<S2SV_ModStart> opj_calloc ( ( size_t ) ( <S2SV_ModStart> -> numlayers + 1U <S2SV_ModEnd> ) * l_step_l,0
577,"<S2SV_ModStart> name ), ""crypto-%s"" <S2SV_ModEnd>, name )",1
578,"<S2SV_ModStart> start = 0 ; int i <S2SV_ModStart> -> flags ; for ( i = 0 ; i < 3 ; i ++ ) <S2SV_ModStart> ( kvm, i <S2SV_ModEnd>, kvm -> <S2SV_ModStart>. channels [ i <S2SV_ModEnd> ]. count",1
579,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> -> common ; MACROBLOCK * const xd = & td <S2SV_ModEnd> -> mb ; <S2SV_ModStart> -> mb ; <S2SV_ModEnd> int mi_row, <S2SV_ModStart> mi_col ) { VP9_COMMON * const <S2SV_ModEnd> const int mi_row, <S2SV_ModStart> mi_col ) { VP9_COMMON * const <S2SV_ModStart> mi_col = & cm -> mi_row * cm -> mi_col ; BLOCK_SIZE bsize = & cm -> mi_row * cm -> mi_col ; BLOCK_8X8x = & cm -> mi_col ; BLOCK_SIZE bsize = & cpi -> mi_row * cm -> mi_col ; BLOCK_SIZE bsize = & cpi -> mi_rows - mi_row ; <S2SV_ModStart> mi_col ) { vp9_set ( cm, xd <S2SV_ModEnd>, mi_row, <S2SV_ModStart> mi_col ) ; vp9_zero ( cm, xd <S2SV_ModEnd>, cpi -> <S2SV_ModStart> mi_row, xd <S2SV_ModEnd>, mi_row, <S2SV_ModStart> mi_col ) ; vp9_set ( cm, xd",0
580,"<S2SV_ModStart> 1 ) ; if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf = opipe",1
581,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; if",0
582,,0
583,"<S2SV_ModStart> * tmpname, fname <S2SV_ModEnd> ) ; if",0
584,<S2SV_ModStart> blkg ) ) <S2SV_ModEnd> return PTR_ERR ( <S2SV_ModStart> blkg ) ; <S2SV_ModEnd> q -> root_blkg,1
585,<S2SV_ModStart> avctx -> width + 1,0
586,,0
587,<S2SV_ModStart> mnt ) ; nd -> last_type = LAST_BIND ;,1
588,"<S2SV_ModStart> struct usbdevfs_connectinfo ci ; memset ( & ci, 0, sizeof ( ci ) ) ; ci <S2SV_ModEnd> return 0 ;",0
589,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> opt. <S2SV_ModStart> ) ; opt -> opt. <S2SV_ModStart> ) ; return opt -> optlen <S2SV_ModEnd> ; },0
590,<S2SV_ModStart> ; args -> rmtvaluelen2 = args -> rmtvaluelen2,0
591,"<S2SV_ModStart> ) { size_t devicePathLen ; devicePathLen = 0 ; <S2SV_ModStart> ) break ; if (! TC_MAX_SUCCESS || ( memcmp ( & request -> DevicePath, sizeof ( WCHAR ) ) ) { Irp -> IoStatus. Status ; Irp -> IoStatus. Status = STATUS_INVALID_PARAMETER ; break ; } <S2SV_ModStart> ) ) { Irp -> IoStatus. Information = STATUS_INVALID_PARAMETER ; }",0
592,,0
593,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> sockaddr ; int <S2SV_ModStart> = 0 ; hdrlen = sizeof ( * daddr ) <S2SV_ModEnd> ; if (,0
594,<S2SV_ModStart> ) ; } <S2SV_ModEnd> goto err ;,0
595,<S2SV_ModStart> -> columns - 4 <S2SV_ModEnd> ) ; x <S2SV_ModStart> % 4 ) > <S2SV_ModEnd> 2 ) {,0
596,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
597,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void *,0
598,"<S2SV_ModStart> 0 ) { if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""UnexpectedEndOfFile"" ) ;",0
599,"<S2SV_ModStart> ( bp, len <S2SV_ModEnd> ) ; }",0
600,<S2SV_ModStart>,0
601,<S2SV_ModStart> { if (! ret ||,0
602,<S2SV_ModStart> <= w - ( int ),1
603,<S2SV_ModStart> page ) ; <S2SV_ModEnd> memset ( addr,1
604,<S2SV_ModStart> val ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t,0
605,<S2SV_ModStart> ; ps_dec -> i4_cur_slice_id = 0 ; if (,0
606,"<S2SV_ModStart> * priv ; if (! port -> interrupt_out_urb ||! port -> interrupt_in_urb ) { dev_err ( & port -> dev, ""required <S2SV_blank> endpoint <S2SV_blank> is <S2SV_blank> missing\\n"" ) ; return - ENODEV ; }",1
607,<S2SV_ModStart> ) ; return - ENOMEM ;,0
608,<S2SV_ModStart> -> device_data ; cancel_autoload_drivers ( ) ;,1
609,"<S2SV_ModStart>, int no_subdir, <S2SV_ModEnd> ) { int",0
610,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> p == q ) || ( <S2SV_ModEnd> size < 16 <S2SV_ModStart> size < 16 ) || ( <S2SV_ModEnd> size > 256 <S2SV_ModStart> size > 256 ),1
611,"<S2SV_ModStart> uint dblocks = xfs_attr3_rmt_blocks <S2SV_ModEnd> ( mp,",1
612,"<S2SV_ModStart> ( key,",0
613,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } else {,0
614,<S2SV_ModStart> ] == EOF || text [ 1 ] == 0 <S2SV_ModStart> ; if (! isxdigit ( <S2SV_ModStart> [ 2 ] ) <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if (! isxdigit ( <S2SV_ModStart> [ 3 ] ) <S2SV_ModEnd> ) return 0,1
615,<S2SV_ModStart> ( buf ) - 1 <S2SV_ModEnd> ) ; },0
616,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 8 <S2SV_ModStart> 16 ] ; <S2SV_ModEnd> int i, <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 8 <S2SV_ModStart> ++ j ) out <S2SV_ModEnd> [ j *",0
617,"<S2SV_ModStart> else if ( g_str_has_prefix <S2SV_ModEnd> ( arg,",0
618,"<S2SV_ModStart> fh_dentry ) ; error = fh_want_write ( fh ) ; if ( error ) <S2SV_ModEnd> goto out_errno ; <S2SV_ModStart> goto out_errno ; fh_lock ( fh ) ; error = set_posix_acl ( inode, ACL_TYPE_ACCESS, argp -> acl_access <S2SV_ModEnd> ) ; if",0
619,<S2SV_ModStart> * ue ; if <S2SV_ModEnd> ( tree_root == <S2SV_ModStart> == NULL ) return 0,1
620,"<S2SV_ModStart> ( fmode_t path, ""%s"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( fmode ) { <S2SV_ModEnd> if (!",0
621,<S2SV_ModStart> elen ) ; elen += sizeof ( struct pathComponent ) ; <S2SV_ModStart> > 0 ) { elen += pc -> lengthComponentIdent ; break ; } <S2SV_ModEnd> case 2 : <S2SV_ModStart> case 5 : elen += pc -> lengthComponentIdent ; if ( elen > fromlen ) return - EIO ; <S2SV_ModStart> break ; } <S2SV_ModEnd> } if (,1
622,<S2SV_ModStart> ( dp [ 3 <S2SV_ModEnd> ] ) ;,0
623,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_8BITS ( tptr ) ;,0
624,,0
625,<S2SV_ModStart> ; bool slow <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ; * addr_len = sizeof ( * sin ) ;,1
626,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> rtr_pdu_len = <S2SV_ModEnd> rtr_pdu_print ( ndo <S2SV_ModStart>, pdu_len, pdu_len <S2SV_ModEnd>, 8 ) <S2SV_ModStart> -= pdu_len ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
627,"<S2SV_ModStart> int s ; struct stream packet = * s ; <S2SV_ModStart> return False ; packet = * s ; <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mtsrequest(), <S2SV_blank> consume <S2SV_blank> stream <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> return False ;",0
628,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nscratch ( struct <S2SV_ModStart> * rt ) { ND_PRINT ( ( ndo, ""\\n"" ) ) ; return 0 ; <S2SV_ModStart> ; } ND_TCHECK ( * bp <S2SV_ModEnd> ) ; ND_TTEST ( <S2SV_ModStart> ) ; return 0 ;",0
629,"<S2SV_ModStart>, args -> rmtvaluelen <S2SV_ModEnd> ) ; error <S2SV_ModStart> = args -> rmtvaluelen <S2SV_ModEnd> ; while (",1
630,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
631,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> S_IWUSR ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; unlink",0
632,<S2SV_ModStart> ( fc -> header <S2SV_ModEnd> ) ; ret,0
633,"<S2SV_ModStart> -> x = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> x = MagickMax <S2SV_ModEnd> ( 1.0f,",0
634,"<S2SV_ModStart> PKT_LEN_SIZE ) { giterr_set_str ( GITERR_NET, ""Invalid <S2SV_blank> empty <S2SV_blank> packet"" ) ; return GIT_ERROR <S2SV_ModEnd> ; } if",1
635,<S2SV_ModStart> goto out_page ; } <S2SV_ModEnd> if (!,0
636,<S2SV_ModStart> rc ; } <S2SV_ModEnd> if (!,0
637,<S2SV_ModStart> env -> insn_aux_data ; int i <S2SV_ModStart> ) ) ; for ( i = off ; i < off + cnt - 1 ; i ++ ) new_data [ i ]. seen = true ;,1
638,<S2SV_ModStart> ; ND_TCHECK ( * dp <S2SV_ModEnd> ) ; if,1
639,<S2SV_ModStart> trunc ; } ND_TCHECK_16BITS ( & bp [ i + 2 ] ) ;,1
640,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( cpi ->,0
641,<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( occ0 <S2SV_ModStart> % rowsize )!= 0 ) return 0,0
642,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteOentaxEntry ) ) ;",0
643,<S2SV_ModStart> ; if ( ctx -> terminated ||,1
644,<S2SV_ModStart> = NULL ; if ( sbi -> spool ) hugepage_put_subpool ( sbi -> spool ) ;,1
645,<S2SV_ModStart> } if ( filename == NULL ||,0
646,<S2SV_ModStart> char buf [ size_t <S2SV_ModEnd> ] ; size_t <S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> = 0 ; char,0
647,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
648,"<S2SV_ModStart> ( ) ; iov_iter_advance ( i, copied ) ; <S2SV_ModStart> again ; } <S2SV_ModEnd> pos += copied",1
649,"<S2SV_ModStart>, arg ) ; <S2SV_ModEnd> return 0 ;",0
650,<S2SV_ModStart> ) ; } kfree_skb ( skb ) ;,0
651,"<S2SV_ModStart> ( obj, <S2SV_ModEnd> name, data <S2SV_ModStart>, show_object, & base <S2SV_ModEnd>, path,",1
652,<S2SV_ModStart> ++ ) { if (! result ) return 1 ;,0
653,"<S2SV_ModStart>, y ; # ifdef CONFIG_VP9_HIGHBITDEPTH if ( memcpy ) > 4 ) { return AVERROR_INVALIDDATA ; }",0
654,<S2SV_ModStart> lock_ptr ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
655,"<S2SV_ModStart> ) ; } snprintf ( cmd. key, <S2SV_ModEnd> ) ; if",0
656,<S2SV_ModStart> ( void ),0
657,<S2SV_ModStart> timeri -> master && timeri -> timer ) { mutex_lock ( & timeri -> lock ) ; },0
658,<S2SV_ModStart> len ; } ND_TCHECK ( p [ 2 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT,1
659,<S2SV_ModStart> cpu ) { <S2SV_ModEnd> char * * <S2SV_ModStart> * arch = strdup ( info -> cpu ) ; free ( cpu ) ; <S2SV_ModStart> cpu ) ; <S2SV_ModEnd> cpu = r,0
660,"<S2SV_ModStart> sas_probe_devices ( struct asd_sas_port * port <S2SV_ModEnd> ) { struct <S2SV_ModStart>, * n <S2SV_ModEnd> ; list_for_each_entry (",1
661,<S2SV_ModStart> } else { if ( ps_dec -> u4_first_slice_in_pic && ( 0x > ps_dec -> u2_total_mbs_coded ) ) { return ERROR_INVALIDDATA_T ; },0
662,<S2SV_ModStart> gint64 offset ; <S2SV_ModEnd> char line [ <S2SV_ModStart> return FALSE ; <S2SV_ModEnd> if (!,0
663,<S2SV_ModStart> 0 ) ; if ( <S2SV_ModStart>. seq_num ) < 0 ) return - 1,1
664,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
665,<S2SV_ModStart> : ret = - EOPNOTSUPP ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = <S2SV_ModEnd> key -> read <S2SV_ModStart> sem ) ; <S2SV_ModEnd> if (!,0
666,"<S2SV_ModStart> ""localhost <S2SV_blank> "" ) ; <S2SV_ModEnd> if ( ret",0
667,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",1
668,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,0
669,<S2SV_ModStart> page ) ; rm -> atomic. op_active = 0 ;,1
670,<S2SV_ModStart> bus ] ; if ( bi == NULL ) return NULL,0
671,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = 0 <S2SV_ModStart> ) ) ; msg -> msg_namelen = sizeof ( * sin ) ;",0
672,"<S2SV_ModStart> sizeof ( spath ) ) return - 1 ; if ( strstr ( name, "".."" ) || strchr ( name, '/'",1
673,<S2SV_ModStart> = get_t ( s ),0
674,"<S2SV_ModStart> -> bcache, cache_id ( <S2SV_ModStart> ] -> data )",1
675,<S2SV_ModStart> objp ) ; * objp = NULL ;,1
676,"<S2SV_ModStart> ) ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
677,<S2SV_ModStart> return 1 ; consume_skb ( skb ) ; return 0 <S2SV_ModEnd> ; } if,1
678,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
679,<S2SV_ModStart> goto out ; err = ovl_copy_up ( dentry ) ; if (! err ) { <S2SV_ModStart> dentry ) ; <S2SV_ModEnd> mutex_lock ( & <S2SV_ModStart> ) ; } <S2SV_ModEnd> ovl_drop_write ( dentry,1
680,<S2SV_ModStart> ( isspace ( ( unsigned char ),1
681,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> } if (! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if (",1
682,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
683,<S2SV_ModStart> data -> data [ i ] = 0 ;,0
684,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> } if (,0
685,<S2SV_ModStart> ++ ) { if ( band -> prec ) { <S2SV_ModStart> ) ; } },1
686,,0
687,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart>, & final ) ; rcu_read_unlock (",0
688,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
689,"<S2SV_ModStart> ( u32 size, u32 num ) { if ( size > UINT32_MAX / num ) { return NULL ; } <S2SV_ModEnd> return malloc ( <S2SV_ModStart> malloc ( size * num",1
690,<S2SV_ModStart> mio ) { if ( idx >= <S2SV_ModEnd> f -> dim,0
691,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,1
692,,0
693,"<S2SV_ModStart> scn, root_storage <S2SV_ModEnd> ) ) <",1
694,,0
695,<S2SV_ModStart> (! eof && vars -> str. c!= vars -> ptr,1
696,<S2SV_ModStart> ( void ) return - EINVAL ; if (,0
697,"<S2SV_ModStart> PERF_COUNT_SW_EMULATION_FAULTS, 1 <S2SV_ModEnd>, regs,",0
698,"<S2SV_ModStart> -> _eip ; rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val ) ; if ( rc!= X86EMUL_CONTINUE ) break <S2SV_ModStart> case 4 : rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val )",1
699,"<S2SV_ModStart> list. user, false",0
700,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct2SV_null> <S2SV_null>,0
701,<S2SV_ModStart> ( count > MaxAllocSize / sizeof ( Pairs ) ),0
702,<S2SV_ModStart> ) ; } if <S2SV_ModEnd> ( rq ->,0
703,<S2SV_ModStart> -> session_id ; if ( s -> session_ctx -> session_size > 0 ) { SSL_SESSION_MAX_CACHE * s -> session_ctx = s -> session_sess ; SSL_free ( s -> session_ctx -> session_sess_ctx ) ; if ( s -> session_ctx -> session_sess_ctx -> session_size == 0 ) { s -> session_ctx = s -> session_ctx -> session_sess ; SSL_SESSION_free ( s -> session_sess ) ; } else if ( s -> session -> session_ctx -> session_cache_sess_ctx -> session_sess ) { SSL_SESSION_free ( s -> session_ctx -> session_sess ) ; s -> session_sess = s -> session_ctx -> session_sess ; s -> session_sess ; } s -> session_ctx -> session_sess = s -> session_ctx -> session_ctx -> session_sess ; SSL_SESSION_free ( s -> session_session_sess ) ; s -> session_cb ( s -> session_ctx ) ; if ( s -> session_ctx -> session,0
704,"<S2SV_ModStart> -> bmode,",0
705,<S2SV_ModStart> ( )!= NULL <S2SV_ModEnd> ; if (,0
706,<S2SV_ModStart> NULL ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_FIELD_REF,0
707,<S2SV_ModStart> ) ; return cmd <S2SV_ModEnd> ; } <S2SV_null>,0
708,"<S2SV_ModStart>, annotation, string type_comment, <S2SV_ModStart> ; if (! type_comment ) return 0 ; has_comment = NCH ( CHILD ( n, NCH ( n, NCH ( nch_type_comment ) ) ; if (! type_comment ) return NULL ;",0
709,<S2SV_ModStart> return - EINVAL ; if ( waitqueue_active ( & asoc -> wait ) ) return - EBUSY,0
710,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
711,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,1
712,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
713,<S2SV_ModStart> -> rows = 1 <S2SV_ModEnd> ; image -> <S2SV_ModStart> ( BImgBuff ) <S2SV_ModEnd> ; break ;,1
714,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> ) ) ) rc = <S2SV_ModStart> ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>,1
715,,1
716,<S2SV_ModStart> status ) ; <S2SV_ModEnd> } else if,0
717,<S2SV_ModStart> ( psf -> header. indx + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> ( psf -> header. ptr <S2SV_ModStart> ) ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> ) ) ; <S2SV_ModEnd> ( psf -> header <S2SV_ModStart> ) ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> ) ) return <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>,0
718,<S2SV_ModStart> out_mutex ; } ext4_inode_block_unlocked_dio ( inode ) ; inode_dio_wait ( inode ) ; down_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart> ioffset ) ; <S2SV_ModEnd> credits = ext4_writepage_trans_blocks <S2SV_ModStart> ) ; goto out_mmap <S2SV_ModEnd> ; } down_write <S2SV_ModStart> handle ) ; out_mmap : up_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModEnd> ext4_inode_resume_unlocked_dio ( inode,1
719,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> uint32_t * midi_data ; uint8_t * midi_data ; uint8_t * midi_data ; uint32_t * midi_data ; <S2SV_ModStart> uint32_t * midi_data ; uint32_t * midi_data ; uint32_t * midi_data ; uint32_t * midi_data ; <S2SV_ModStart> uint32_t * midi_data ; uint8_t * midi_data ; uint8_t * midi_data ; uint32_t * midi_tracks = tmp_val <S2SV_ModEnd> ; midi_data <S2SV_ModStart> ( midi_data ) ; if ( tmp_val <S2SV_ModEnd> ( midi_data <S2SV_ModStart> ( midi_data, & midi_data <S2SV_ModStart> ( midi_data ) ; midi_size -= tmp_val <S2SV_ModEnd> ; midi_data <S2SV_ModStart> ( midi_data ) ; midi_size -= tmp_val <S2SV_ModEnd> ; midi_data <S2SV_ModStart> ( midi_data [ tmp_val <S2SV_ModEnd> ; midi_val <S2SV_ModEnd> ; midi_",0
720,"<S2SV_ModStart> = max_t ( int <S2SV_ModEnd>, val * <S2SV_ModStart> = max_t ( int <S2SV_ModEnd>, val *",1
721,"<S2SV_ModStart> * bh ; unsigned int table_len ; <S2SV_ModStart> -> b_data ; sb = le32_to_cpu ( lvd -> s_blocksize - sizeof ( * lvd ), table_len ) ; if ( * lvd -> table_len > table_len ) { sb -> b_blocksize = 0 ; break ; }",0
722,"<S2SV_ModStart> long n ; info = 0 ; info = 0 ; <S2SV_ModStart> ""cannot <S2SV_blank> get <S2SV_blank> header\\n"" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ""cannot <S2SV_blank> get <S2SV_blank> info\\n"" ) ; goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> 0 ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> 0 ; goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> 0 ) { goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> 0 ) { goto error <S2SV_ModEnd> ; } JAS_DBGLOG",0
723,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> dev ), func <S2SV_ModEnd>, line, <S2SV_ModStart> ( ""[0000:00.0]:[%pV"", func <S2SV_ModEnd>, line,",0
724,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
725,"<S2SV_ModStart> g_tv_comment, FILENAME_COMMENT ) ; problem_data_reload_from_dump_dir ( ) ; update_gui_state_from_problem_data ( 0",1
726,"<S2SV_ModStart> media_pad_desc pad ; memset ( & pad, 0, sizeof ( pad ) ) ; <S2SV_ModStart> ) continue ; memset ( & link, 0, sizeof ( link ) ) ;",1
727,<S2SV_ModStart> ) ) { indent = <S2SV_ModEnd> ; } else,0
728,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
729,"<S2SV_ModStart>, krb5_principal, const char * tgt_realm <S2SV_ModEnd>, tgt_realm,",0
730,<S2SV_ModStart> = MagickFalse ; break <S2SV_ModEnd> ; } if,0
731,<S2SV_ModStart> ; newinet -> inet_opt <S2SV_ModEnd> = ireq ->,1
732,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
733,"<S2SV_ModStart>!= 0 ) { int tend_off = skb_transport_offset ( skb ) + tlen ; <S2SV_ModStart> ( csum, skb_checksum ( skb, tend_off, <S2SV_ModEnd> offset, 0 <S2SV_ModStart> ) ) ; }",1
734,"<S2SV_ModStart> gfn, page_size >> PAGE_SHIFT",0
735,<S2SV_ModStart> 0x00 } ; if ( cmd -> msg_len > sizeof ( b ) - 4 ) return - EINVAL ;,1
736,"<S2SV_ModStart> perf_event_context * ctx ; ctx = perf_event_ctx_lock <S2SV_ModEnd> ( event ) <S2SV_ModStart> event ) ; perf_event_ctx_unlock ( event, ctx <S2SV_ModEnd> ) ; }",0
737,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ; return ( <S2SV_ModStart> ; return ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> & 0xffffffffffff <S2SV_ModEnd> ; return ( <S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> [ 3 ] <S2SV_ModEnd> ; return (,0
738,"<S2SV_ModStart> * nid ; int err_free_nid = - EINVAL ; if ( nid == NULL ) goto err_free_nid ; <S2SV_ModStart> ) ) goto err <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto err_free_nid <S2SV_ModEnd> ; if ( <S2SV_ModStart> 4_slab, nid ) ; spin_lock_irq_lock ( & nm_lock ) ; if ( ret ) goto err_free ; i = true ; spin_lock_unlock ( & nm_lock ) ; radix_lock_list_list_list ( & nm_list_list ) ; if ( ret ) goto err_free_list ( rid ) ; if ( ret ) goto err ; if ( ret ) { ret = - EINVAL ; err = true ; goto err_out ; } if ( free_nid_nid_cache_cache_list ( rid ) ) ; if ( ret ) goto err ) ret = true ; if ( free_nid_cache_cache_cache_nid_cache_cache_cache_nid_nid_list ( ) ) goto err ; if ( ret ) goto err_free ; if ( ret ) goto err_list",0
739,<S2SV_ModStart> ; cpi ->,0
740,"<S2SV_ModStart> vif_tx_size ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Need <S2SV_blank> more <S2SV_blank> size\\n"" ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> ) ; return <S2SV_ModEnd> ; } <S2SV_null>",0
741,<S2SV_ModStart> ) ) ; hdr -> sadb_msg_reserved = 0 ;,1
742,"<S2SV_ModStart> ) return ; memset ( & r1, 0, sizeof ( r1 ) ) ;",1
743,"<S2SV_ModStart>, 1 ) ; luaL_argcheck ( L, pos > 0, 3, ""offset <S2SV_blank> must <S2SV_blank> be <S2SV_blank> a\\n"" ) ; <S2SV_ModStart> ( L, <S2SV_ModEnd> size <= ld <S2SV_ModStart> ( L, <S2SV_ModEnd> size <= ld <S2SV_ModStart> size <= ld && pos <= ld - size, <S2SV_ModEnd> 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> short""",0
744,"<S2SV_ModStart> ( * bp, u_len <S2SV_ModEnd> ) ) ;",0
745,<S2SV_ModStart> ; int n ; if (! body -> unit_size ) break ; n,0
746,<S2SV_ModStart> ) { # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. screen_mode == 0 ) { # endif <S2SV_ModStart> = 1 ; # endif <S2SV_ModEnd> if ( cpi,0
747,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> S_IWUSR ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; unlink",0
748,<S2SV_ModStart> status = IMAP_FATAL ; return ; } if (,0
749,<S2SV_ModStart> return res ; <S2SV_ModEnd> return 0 ;,1
750,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> ) ; } ext_size = sizeof ( struct ext4_extent_header ) + ext4_extent_header ) ; memset ( bh -> b_data + ext4_size, inode -> i_sb -> s_blocksize - ext_size ) ; <S2SV_ModStart> ) ; } memset ( bh -> b_data + ext_size, 0, sizeof ( struct ext4_extentries ) ) ; memset ( bh -> b_data + ext4_size, inode -> i_sb -> s_blocksize - ext_size ) ;",0
751,,0
752,<S2SV_ModStart> ; cmap_len = get_tga_ushort <S2SV_ModEnd> ( & tga,0
753,<S2SV_ModStart> ; ssize_t ret ; if ( WARN_ON_ONCE (! ib_safe_file_access ( filp ) ) ) return - EACCES,1
754,<S2SV_ModStart> == CPUCLOCK_SCHED ) return <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null> <S2SV_null>,0
755,<S2SV_ModStart> ; uint32 nstrips <S2SV_ModEnd> ; nstrips =,1
756,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = 0 <S2SV_ModStart> ) ) ; msg -> msg_namelen = sizeof ( * sin ) ;",0
757,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> init ( L_BUF_CHECK2,0
758,<S2SV_ModStart> ; int error = 0 <S2SV_ModStart> &= PAGE_MASK ; if ( address < mmap_min_addr ) return - EPERM <S2SV_ModEnd> ; prev =,1
759,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> } break ;",0
760,"<S2SV_ModStart>, int optional, const char * rootfs <S2SV_ModStart> endif if ( safe_mount <S2SV_ModEnd> ( fsname, <S2SV_ModStart> MS_REMOUNT, data, rootfs <S2SV_ModStart>, data ) < 0",1
761,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
762,"<S2SV_ModStart> it_overrun = - 1LL <S2SV_ModEnd> ; ++ timr <S2SV_ModStart> info -> si_overrun = timer_overrun_to_int ( timr, info -> si_overrun ) <S2SV_ModEnd> ; } unlock_timer",1
763,<S2SV_ModStart> ) ) { size_t <S2SV_ModEnd> target = 0,0
764,<S2SV_ModStart> struct static_key * once_key <S2SV_ModEnd> ) { static <S2SV_ModStart> ; __net_random_once_disable_jump ( once_key <S2SV_ModEnd> ) ; return,1
765,<S2SV_ModStart> -> mm ) ; mutex_lock ( & io_data -> kiocb -> kiocb ) ; <S2SV_ModStart> & io_data -> kiocb ) ; if ( io_data -> kiocb ) { ret = - EFAULT ; } <S2SV_ModStart> flags & io_data -> data <S2SV_ModEnd> ; ret =,0
766,"<S2SV_ModStart> ; if ( tcp_filter <S2SV_ModEnd> ( skb,",0
767,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
768,"<S2SV_ModStart> struct trusted_key_payload * p ; struct trusted_key_payload * datalen ; int ret ; struct trusted_key_payload * datalen = datalen ; if (! test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) return - ENOKEY ;",0
769,"<S2SV_ModStart> v |= ( JAS_CAST ( uint_fast32_t, c ) <S2SV_ModEnd> << 24 )",1
770,<S2SV_ModStart> ) ) { if ( len < ROSE_MAX_ADDR_LEN ) { kfree_skb ( skb ) ; continue ; } <S2SV_ModStart> ] ) ; if ( len!= ROSE_CALL_ADDR_LEN ) { kfree_skb ( skb ) ; continue ; },0
771,"<S2SV_ModStart> out_free ; } else kvm_iommu_unmap_pages ( kvm, & old ) ;",0
772,<S2SV_ModStart> if ( indev && indev -> ifa_list <S2SV_ModEnd> ) { ifa,1
773,<S2SV_ModStart> if ( index == <S2SV_ModEnd> ) { return,0
774,"<S2SV_ModStart> char * buff ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } buff",1
775,,0
776,<S2SV_ModStart> ( server. ds_enabled <S2SV_ModEnd> ) ; },0
777,"<S2SV_ModStart> ( fd,",0
778,"<S2SV_ModStart> * data, int ret ; int ret = 0 ; <S2SV_ModStart> = 0 ; mutex_lock ( & d -> data_mutex ) ; <S2SV_ModStart>, & d -> data <S2SV_ModEnd> ) ; if",0
779,<S2SV_ModStart> connection ) ; <S2SV_ModEnd> if ( client,0
780,<S2SV_ModStart> book -> dim && i < n,1
781,"<S2SV_ModStart> f ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.3f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.3f <S2SV_blank> %12.4f <S2SV_blank> %12.0f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.3f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.3f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.0f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f",0
782,<S2SV_ModStart> == - EEXIST || ret == - EOVERFLOW,1
783,<S2SV_ModStart> fp ) ; spin_lock ( & unix_gc_lock ) ; <S2SV_ModStart> unix_sk ( s <S2SV_ModEnd> ) ; if <S2SV_ModStart> unix_tot_inflight ++ ; } fp -> unix_inflight ++ ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
784,<S2SV_ModStart> size_t chanmap_size = 0,0
785,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( sse ->,0
786,<S2SV_ModStart> ms ) { uint32_t <S2SV_ModEnd> nestsize = ( <S2SV_ModStart> nestsize = ( uint32_t <S2SV_ModEnd> ) ms ->,1
787,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
788,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
789,<S2SV_ModStart> -> xrefs = safe_calloc ( <S2SV_ModEnd> sizeof ( xref_t,1
790,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
791,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * ),0
792,"<S2SV_ModStart> = dcont ; if (! tmpout ) { CMSerr ( SMIME_F_BINARY ) { CMSerr ( dcont, dcont, SMIME_BINARY ) ; goto err ; } <S2SV_ModStart>, cmsbio ) ; if (! tmpout ) { CMSerr ( CMSerr, SMIME_F_BINARY ) ; goto err ; } <S2SV_ModStart> : if (! tmpout ) { CMSerr ( SMIME_F_BINARY ) ; goto err ; }",0
793,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * ),0
794,<S2SV_ModStart> net ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
795,<S2SV_ModStart> cs_flags ) ; hook_del_nick_can_register ( check_registration_keywords ) ; hook_user_user_can_register ( check_registration_keywords ) ; hook_user_user_can_register ( check_registration_registration_keywords ) ; hook_user_user_can_register ( check_registration_keywords ) ; hook_user_user_can_register ( check_registration_registration_keywords ) ; hook_user_can_can_register ( check_registration_keywords ) ; hook_can_register ( check_registration_registration_registration_keywords ) ; hook_can_register ( check_registration_registration_keywords ( check_registration_registration_user_user_registration_registration_user_keywords ) ; hook_user_registration_user_keywords ( check_registration_user_registration_can_registration_registration_keywords ) ; check_registration_registration_user_user_can_registration_registration_user_user_can_registration_registration_,0
796,<S2SV_ModStart> struct memcpy <S2SV_ModEnd> ( info.,0
797,<S2SV_ModStart>!= mm ) { smp_mb ( ) ; <S2SV_ModStart> goto out ; } <S2SV_ModStart> ) ) ; smp_mb ( ) ;,1
798,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
799,<S2SV_ModStart> val ) { int i ; <S2SV_ModStart> val ) { ; } <S2SV_ModEnd> } else {,0
800,<S2SV_ModStart> task ) { <S2SV_ModEnd> del_timer ( & <S2SV_ModStart> -> timer ) <S2SV_ModEnd> ; complete (,1
801,"<S2SV_ModStart> ; if ( safe_calloc <S2SV_ModEnd> ( name,",0
802,<S2SV_ModStart> == NULL ) <S2SV_ModEnd> if ( buf,0
803,<S2SV_ModStart> ] = 0 <S2SV_ModEnd> ; if (,0
804,"<S2SV_ModStart> ( interface, ENC28J60_ECON <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC28J60_ECON <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC28J60_ECON )!= 0 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( interface, ENC28J60_ECON <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( interface, ENC28J60_ECON_LEVEL <S2SV_ModEnd>, interface -> <S2SV_ModStart> ( interface, ENC28J60_ECON_PI_BITS2SV_null>",0
805,<S2SV_ModStart> all_channels_lock ) ; put_net ( pch -> chan_net ) ; pch -> chan_net = NULL ;,1
806,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int ret = <S2SV_ModStart> goto out ; ret = - EINVAL ; if ( ret == - EINVAL ) { goto out_errno ; ret = - EINVAL ; goto out ; } if ( ret!= 0 ) { ret = - EACCES ; goto out ; } if (! <S2SV_ModStart> out ) { ret = - EEXIST ) ; goto out ; } ret = - EACCES ; if ( ret ) { ret = - EACCES ; goto out ; } ret = - EACCES ; if (! ret ) { ret = - EACCES ; goto out ; } ret = - EACCES ; if ( ret ) { ret = - EACCESS ; goto out ; } ret = - EFAULT ; goto out ; if ( ret ) { ret = - EACCESS ; goto out ; } ret = - EACCES ; goto out ; if ( ret ) goto out ;,0
807,"<S2SV_ModStart> count ) ; char * txt = op -> txt ; int txt = op -> txt ; int txt += txtLen ; int txt += txtLen ; txt += txtLen ; txt += txtLen ; <S2SV_ModStart> < count && txtLen <S2SV_ModEnd> + 10 < <S2SV_ModStart> ++ ) { snprintf ( txt, txtLeft <S2SV_ModEnd>, ""%d <S2SV_blank> "", <S2SV_ModStart> ] ) ; txt += txtLen ; txt += txtLen ; <S2SV_ModStart> } snprintf ( txt, txtLeft - 1 <S2SV_ModEnd>, ""%d"",",0
808,"<S2SV_ModStart> client -> proxy ) ; g_byte_array_free ( client -> auth_buffer, TRUE",1
809,<S2SV_ModStart> = { x -> plane [ plane ]. eobs,0
810,<S2SV_ModStart> ; if ( key_is_negative ( key <S2SV_ModEnd> ) ) return,1
811,"<S2SV_ModStart> NEED_IP ( t, <S2SV_ModEnd> NEED_IP ( t, <S2SV_ModStart> NEED_IP ( t, <S2SV_ModEnd> 3 ) ) <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, <S2SV_ModEnd> 3 ) ) <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, <S2SV_ModEnd> 15 ) )",0
812,"<S2SV_ModStart> ) ; } if ( crm_has_subsize < 0 ) { crmprintf ( PRED, ""Failed <S2SV_blank> to <S2SV_blank> image"" ) ; exit ( EXTRACE_FAILURE ) ; } <S2SV_ModStart> ) ) { crmprintf ( ""%s <S2SV_blank> is <S2SV_blank> has <S2SV_blank> %s"", __func__, retval, retval ) ; if ( retval < 0 ) { fprintf ( stderr, ""error: <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> has <S2SV_blank> has <S2SV_blank> %s"", res ) ; return FALSE ; } <S2SV_ModStart> - 1 ; }",0
813,<S2SV_ModStart> { vpn_packet_t outpkt ; if ( len > sizeof outpkt. data ) return,1
814,<S2SV_ModStart> vmx_vpid_bitmap ) ; <S2SV_ModEnd> for ( msr <S2SV_ModStart> 0x83f ) ; <S2SV_ModEnd> if ( enable_ept,1
815,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,0
816,"<S2SV_ModStart> { TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd, 0 )",0
817,"<S2SV_ModStart> ) { const VP9EncoderConfig <S2SV_ModEnd> * const oxcf <S2SV_ModStart> -> oxcf = rc -> avg_frame_bandwidth <S2SV_ModEnd> ( rc -> <S2SV_ModStart> rc -> avg_frame_bandwidth <S2SV_ModEnd> * oxcf,",0
818,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> return 0 ;,0
819,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
820,<S2SV_ModStart> { if ( count >= <S2SV_ModEnd> ) return 0,0
821,"<S2SV_ModStart> + tail ; size_t ss = CDF_SHORT_SEC_SIZE ( h )? CDF_SEC_SIZE ( h ) : CDF_SEC_SIZE ( h ) ; <S2SV_ModStart>, sst -> sst -> sst -> sst_len, ss <S2SV_ModEnd> * sst -> <S2SV_ModStart> b ), ss <S2SV_ModEnd> * sst ->",0
822,"<S2SV_ModStart> : # line 113 <S2SV_ModEnd> ""re_grammar.y"" { RE_AST <S2SV_ModStart> } # line 1358 <S2SV_ModEnd> ""re_grammar.c""re_grammar.y"" { RE_AST <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 1054 <S2SV_ModEnd> ""re_grammar.y"" { RE_AST <S2SV_ModStart> : # line 10 <S2SV_ModEnd> ""re_grammar.c""re_grammar.y"" break ; <S2SV_ModStart> : # line 1054 <S2SV_ModEnd> ""re_grammar.c""re_grammar.c"" break ; <S2SV_ModStart> } # line 1054 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 991 <S2SV_ModEnd> ""re_grammar.c""re_grammar.c"" { RE_AST ( ) ; <S2SV_ModStart> : # line 157 <S2SV_ModEnd> ""re_grammar.c""re_grammar.y"" { int <S2SV_ModStart> : # line 954 <S2SV_ModEnd> ""re_grammar.c""re_grammar.c"" break ; <S2SV_ModStart> : # line 1054 <S2SV_ModEnd> ""re_grammar.y"" { int <S2SV_ModStart> : # line 1048 <S2SV_ModEnd> ""re_grammar.c""re_grammar.y"" {",0
823,"<S2SV_ModStart> ] ; } memcpy <S2SV_ModEnd> ( e,",0
824,<S2SV_ModStart> ( opts!= 0,0
825,<S2SV_ModStart> ; if ( key_is_positive ( key <S2SV_ModEnd> ) ) zap,1
826,"<S2SV_ModStart> ) -> filter ; memset ( & uf, 0, sizeof ( uf ) )",1
827,<S2SV_ModStart> = VP9_COMMON * pbi <S2SV_ModEnd> ; if (,0
828,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> ) ; } exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
829,<S2SV_ModStart> -> peer. auth_capable = new -> peer. auth_capable ; asoc -> peer.,1
830,<S2SV_ModStart> } if ( ( sizeof ( struct user_sibhdr ),0
831,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( cc0 <S2SV_ModStart> % rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""PredictorEncodeTile"", ""%s"", ""(cc0%rowsize)!=0"" ) ; return 0 ; } <S2SV_ModEnd> while ( cc",1
832,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
833,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> r_incr ) { return 0 ; } int <S2SV_ModEnd> for ( bytes_matched <S2SV_ModStart> == 0 ) { <S2SV_ModStart> input_incr ) { size_t result = 0 ; for ( i = 0 ; i = 0 ; i < bytes_matched ; i ++ ) { for ( i = 0 ; i = 0 ; i < bytes_matched ; i ++ ) { for ( i = 0 ; i = _yr_incr ; i < bytes_matched ; i ++ ) { for ( i = 0 ; i ++ ) { <S2SV_ModEnd> ; i =,0
834,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int best_rd_rd_rd_mode_t best_rd_sse = UINT_MAX <S2SV_ModEnd> ; int mbmi <S2SV_ModStart>, best_rd_sse = 0 <S2SV_ModStart>, best_rd_sse = UINT_MAX ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTHRESHIGHBITDEPTH if ( x -> flags & best_rd_buf -> flags & best_rd_rd_val, best_rd_val, best_rd_rd_val, best_rd_rd, best_rd, best_rd_mode, best_sse, best_rd_mode, best_rd, best_rd, best_mode ) { unsigned char * best_sse = UINT_MAX ; int best_sse = UINT_MAX ; unsigned char * best_sse = INTRA_PREDICTION_MODE mode ; unsigned char * src_mode = INT_mv_PREDICTION_mode ; unsigned char * src_mode = INTRA_",0
835,"<S2SV_ModStart> svm, MC_VECTOR ) ; set_exception_intercept ( svm, AC_VECTOR",1
836,<S2SV_ModStart> ; if (! ( h -> filesize ) ||,0
837,"<S2SV_ModStart> sst, const cdf_directory_t * root_storage <S2SV_ModEnd> ) { struct <S2SV_ModStart> break ; } if ( root_storage ) { root_storage_storage_to_uuid ( root_storage ) ; return - 1 ; } <S2SV_ModStart> return 0 ; } <S2SV_ModEnd> return 0 ;",0
838,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
839,<S2SV_ModStart> -> length ) ; if ( err ) return - EFAULT,1
840,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
841,<S2SV_ModStart> if ( prev && <S2SV_ModEnd> ( f && <S2SV_ModStart> ) - offset <S2SV_ModEnd> > 0 ),0
842,<S2SV_ModStart> { uint16 bitspersample = 1,0
843,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> init ( struct <S2SV_ModStart> -> archive_entry_set_error ( a -> archive, a -> name, & error_string, NULL ) ; if ( a -> archive_set_error ( & a -> archive, a -> archive, & error ) ) { return AVERROR ( ARCHIVE_INVALIDDATA ; } if (! archive ) { archive_error ( & a -> archive, ""too <S2SV_blank> many <S2SV_blank> chunk"" ) ; return 0 ; } archive_set_error ( & a -> archive, & a -> archive, & a -> archive, & a -> archive, & a -> archive, sizeof ( a -> archive ) ) ; return AVERROR ( ARCHIVE_INVALIDDATA ; } if (! a -> archive ) { archive_set_error ( & a -> archive, & a -> archive, & error ) ; return 0 ; } if ( a -> archive, & a -> archive, sizeof ( a -> archive ) ) ; return 0 ; } if ( a -> archive ) { archive_set_error ( & a -> archive, & a",0
844,"<S2SV_ModStart> ; if ( safe_mount ( path, path, rootfs -> path, rootfs -> path, rootfs -> path, rootfs -> path, NULL, NULL )!= NULL",0
845,<S2SV_ModStart> ) { struct iinfo * inode * iinfo <S2SV_ModEnd> ; int i <S2SV_ModStart> ) goto out ; struct iinfo * inode = inode -> i_len <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( inode -> i_len > bs ) goto out ; if ( inode -> i_len ) goto out ; if ( inode -> i_len > bs ) { err = - EIO ; goto out ; } if ( inode -> i_len > bs ) goto out ; if ( udf_error ( inode ) goto out ; if ( inode -> i_sb -> i_len > inode ) goto out ; if ( inode -> i_len && iinfo -> i_len > bs ) goto out ; } if ( inode -> i_len > bs ) goto out ;,0
846,<S2SV_ModStart> cpi ] ; memset <S2SV_ModEnd> ( & dst_rx <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & dst,0
847,"<S2SV_ModStart> dst, gb <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return - 1 <S2SV_ModEnd> ; } <S2SV_null>",0
848,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) ;",0
849,<S2SV_ModStart> reset ) ; <S2SV_ModEnd> if ( q,0
850,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
851,<S2SV_ModStart> ++ ) { if (! result ) return 1 ;,0
852,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF <S2SV_ModStart> / 2 ; if (! <S2SV_ModStart>, cc ) ) return 0 <S2SV_ModStart> wc ) ; return 1 ;",1
853,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
854,<S2SV_ModStart> int err ; struct ip_options_rcu * inet_opt ; <S2SV_ModStart> return 0 ; rcu_read_lock ( ) ; rcu_dereference ( inet -> inet_opt ) ; <S2SV_ModStart> return 0 ; rcu_read_lock ( ) ;,0
855,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
856,"<S2SV_ModStart> * mgr_hdl ; <S2SV_ModEnd> memset ( s_path <S2SV_ModStart> ( c_path, <S2SV_ModEnd> ) ; if",0
857,<S2SV_ModStart> ( pCmdData || replySize > 0 ||,0
858,"<S2SV_ModStart> ""`%s\'"", option ) ; geometry = DestroyString ( geometry",0
859,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * ),0
860,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),0
861,,0
862,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_row_idx <S2SV_ModStart> return ; } LIBXSMM_ASSERT ( 0!= l_row && 0!= l_column ) ;",1
863,<S2SV_ModStart> ] ) { <S2SV_ModEnd> if ( len,0
864,"<S2SV_ModStart> uint32 length ; struct stream packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_response(), <S2SV_blank> consume <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
865,"<S2SV_ModStart> ; cleanup : if ( status == NULL ) status = ""UNKNOWN_REASON"" <S2SV_ModEnd> ; if (",1
866,"<S2SV_ModStart> l ) ; <S2SV_ModEnd> } } if <S2SV_ModStart> XML_ERR_NAME_TOO_LONG, ""Name"" ) ; return ( NULL ) ; } if ( ctxt -> input -> cur - ctxt -> input -> base < len ) { xmlFatalErr ( ctxt, XML_ERR_INTERNAL_ERROR, ""unexpected <S2SV_blank> change <S2SV_blank> of <S2SV_blank> input <S2SV_blank> buffer""",1
867,<S2SV_ModStart> ; if ( ctx -> td.,0
868,<S2SV_ModStart> * rsize >= 18 <S2SV_ModEnd> && rdesc [,1
869,<S2SV_ModStart> & new_map ) <S2SV_ModEnd> { ret =,0
870,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } else {,0
871,<S2SV_ModStart> sr ) { <S2SV_ModEnd> uint16_t StructSize ; <S2SV_ModStart> sr -> fid_ofile <S2SV_ModEnd> ; sr ->,0
872,,0
873,"<S2SV_ModStart> ) ) { memcpy <S2SV_ModEnd> ( dst_ptr,",0
874,"<S2SV_ModStart> addrtype = TIPC_ADDR_ID ; memset ( & addr -> addr, 0, sizeof ( addr -> addr ) )",1
875,"<S2SV_ModStart> out_free ; } else kvm_iommu_unmap_pages ( kvm, & old ) ;",0
876,"<S2SV_ModStart>, sizeof ( double <S2SV_ModEnd> ) ) ;",0
877,<S2SV_ModStart> } if ( tmp_line_len >= 1 &&,0
878,"<S2SV_ModStart> char * buf, const u_char * p <S2SV_ModEnd>, char * <S2SV_ModStart> * p ; const u_char <S2SV_ModEnd> * p = <S2SV_ModStart> if (! ND_PRINT ( ( n ) - 1 ) goto trunc ; } if ( * p == NULL ) { ND_PRINT ( ( n ) - 1 ) ; return NULL ; } else { ND_TCHECK2 ( * p ) ; <S2SV_ModStart> if (! buf ) return NULL ; } if (! ND_TTEST ( * p ) return NULL ; } if ( * p == '\\0' || * p == '\\0' ) { PyErr_DECREF ( * p ) ; return NULL ; } else { PyErr_DECREF ( p ) ; } if (! buf ) return NULL ; <S2SV_ModStart> if (! buf ) return NULL ; if (! buf [ 2 ] ) return NULL <S2SV_ModEnd> ; } else",0
879,,0
880,"<S2SV_ModStart> ; char * buff ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
881,<S2SV_ModStart> { uint32_t numChannels = 0,0
882,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_8BITS ( tptr ) ;,0
883,<S2SV_ModStart> ~ SNDRV_TIMER_IFLG_RUNNING ; list_del_init ( & timeri -> ack_list ) ; list_del_init ( & timeri -> active_list ) ;,1
884,"<S2SV_ModStart> char * sp, int64_t <S2SV_ModEnd> offset, int i <S2SV_ModStart> = 0 ; <S2SV_ModEnd> str [ i <S2SV_ModStart> ] = 0 <S2SV_ModEnd> ; switch ( <S2SV_ModStart> ( buf, <S2SV_ModEnd> ) == 0 <S2SV_ModStart> 3 ) { <S2SV_ModEnd> return 0",0
885,<S2SV_ModStart> else if ( anope_flags_compat &&,0
886,<S2SV_ModStart> < 0 ) return - EINVAL ; if (,0
887,"<S2SV_ModStart> ( pb, false",0
888,<S2SV_ModStart> krb ) { krb5_data = 0 ; <S2SV_ModStart> return 0 ; } <S2SV_ModEnd> if ( krb,0
889,"<S2SV_ModStart> void write_literal ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_write_bit <S2SV_ModEnd> ( w,",0
890,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; } ret",1
891,<S2SV_ModStart> dptr ++ = ROSE_CALL_REQ_ADDR_LEN_VAL <S2SV_ModEnd> ; memcpy (,1
892,<S2SV_ModStart> = new_ns ; new_ns -> mounts ++ ;,1
893,<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi ->,0
894,<S2SV_ModStart> ; zip_object_handlers. get_gc = php_zip_get_gc ; zip_object_handlers.,1
895,<S2SV_ModStart> case RXE_MEM_TYPE_FMR : if <S2SV_ModEnd> ( iova < <S2SV_ModStart> mem -> iova || length < <S2SV_ModEnd> mem -> iova,0
896,"<S2SV_ModStart> = 0 ; ND_TCHECK2 ( * dp, sizeof ( * ni6 ) ) ; <S2SV_ModStart> ) + 4 ; ND_TCHECK ( cp [ 0 ] )",1
897,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",1
898,<S2SV_ModStart> sent = 0 <S2SV_ModEnd> ; smb_msg.,1
899,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> buffer_pipe_buf_get ( struct <S2SV_ModStart> -> private ; if ( ref -> ref > INT_MAX / 2 ) return false ; <S2SV_ModStart> ref ++ ; return true ;,1
900,"<S2SV_ModStart>, * ptr <S2SV_ModEnd> ) ; if",0
901,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
902,<S2SV_ModStart> ) ; } lock_sock ( sk ) ;,0
903,<S2SV_ModStart> } } } <S2SV_ModEnd> } else {,0
904,<S2SV_ModStart> (! mm ||! mm -> env_end,1
905,"<S2SV_ModStart> inode * inode, int relocated ) { int flags = relocated? RR_RELOC_DE : 0 ; <S2SV_ModEnd> int result = <S2SV_ModStart>, inode, flags <S2SV_ModEnd> ) ; if <S2SV_ModStart>, inode, flags | RR_REGARD_XA <S2SV_ModEnd> ) ; }",1
906,<S2SV_ModStart> -> private_flags ; <S2SV_ModEnd> group = 0,0
907,<S2SV_ModStart> [ p ] && in -> linesize [ p ],1
908,"<S2SV_ModStart> ( key,",0
909,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
910,"<S2SV_ModStart> SCALAR_VALUE ) { coerce_reg_to_size ( & <S2SV_ModStart> [ value_regno ], size <S2SV_ModEnd> ) ; }",1
911,"<S2SV_ModStart> = 0 ; uint32 <S2SV_ModEnd> strip, nstrips",1
912,<S2SV_ModStart> base_name ) ; struct search_domain * dom ; <S2SV_ModEnd> for ( dom,0
913,<S2SV_ModStart> timestamp = 0 <S2SV_ModEnd> ; if (,0
914,<S2SV_ModStart> goto out ; <S2SV_ModEnd> err = -,1
915,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> * sizeof ( <S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> ; pixels =",0
916,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> UINT32 originalSize ; if (! context ) return FALSE ; <S2SV_ModStart> < originalSize ) { if ( context -> priv -> PlaneBuffersLength < originalSize ) return FALSE ; <S2SV_ModStart> 0xFF ) ; } return FALSE ;,0
917,<S2SV_ModStart> policy ) { if (! inode_owner_or_capable ( inode ) ) return - EACCES ;,1
918,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } } <S2SV_null> <S2SV_null>,0
919,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),0
920,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) -> iif ) ; * addr_len = sizeof ( * sin6,1
921,"<S2SV_ModStart> ) ) ) { applog ( LOG_WARNING, ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> header <S2SV_blank> to <S2SV_blank> header <S2SV_blank> convert <S2SV_blank> got <S2SV_blank> %s"", __func__, header ) ; pool_failed ( pool ) ; return false ; } <S2SV_ModEnd> cb1 = (",0
922,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, length )",0
923,"<S2SV_ModStart> size ) { size_t res ; if ( check_mul_overflow ( num, size, & res ) ) abort ( ) ; ) ; <S2SV_ModStart> = malloc ( res <S2SV_ModEnd> ) ; if",0
924,<S2SV_ModStart> ioc ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
925,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } if,0
926,<S2SV_ModStart> goto err ; if (! dev -> desc.,0
927,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, int ret <S2SV_ModStart> = event ; <S2SV_ModEnd> event_ctx = _",0
928,<S2SV_ModStart> sacked_out ) ; if ( newly_acked_sacked <= 0 || WARN_ON_ONCE (! tp -> prior_cwnd ) ) return ;,1
929,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_mode ( VP9_COMMON <S2SV_ModStart> * r, PREDICTION_MODE <S2SV_ModEnd> * r, <S2SV_ModStart> * cm, PREDICTION_MODE <S2SV_ModEnd> y_mode, const PREDICTION_MODE <S2SV_ModStart> y_mode, const PREDICTION_MODE <S2SV_ModEnd> cm -> fc",0
930,<S2SV_ModStart> mask ) { struct skcipher * tfm ; struct crypto_skcipher * tfm ; struct crypto_skcipher * tfm ; if (! tfm ) return ERR ( - ENOMEM ) ; kfree ( tfm ) ; return tfm ;,0
931,"<S2SV_ModStart>, cmd, <S2SV_ModEnd> return - EINVAL",0
932,"<S2SV_ModStart> c -> tile_width <S2SV_ModEnd>, 16 ) <S2SV_ModStart>, 16 ) * 3",1
933,"<S2SV_ModStart>, NULL,",0
934,,1
935,<S2SV_ModStart> cpu ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
936,"<S2SV_ModStart> p ) { return <S2SV_ModEnd> chdlc_print ( ndo <S2SV_ModStart>, p, h -> len <S2SV_ModEnd> ) ; }",1
937,<S2SV_ModStart> (! rc <S2SV_ModEnd> && tcon ),1
938,<S2SV_ModStart> ; if ( skb_is_err_queue ( skb ) &&,0
939,"<S2SV_ModStart> ) ) ; raptor_sax2_set_option ( rdf_parser -> sax2, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES ) ;",0
940,<S2SV_ModStart> { if (! SSL_READ_ETM <S2SV_ModEnd> ( s ->,0
941,<S2SV_ModStart> { return SECURE_ELEMENT_ERROR_NPE ; } if ( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE ) { return SECURE_ELEMENT_ERROR_BUF_SIZE,1
942,<S2SV_ModStart> ) { return NGHTTP2_ERR <S2SV_ModEnd> ; if (,0
943,<S2SV_ModStart> = ucounts ; new_ns -> mounts = 0 ; new_ns -> pending_mounts = 0 ;,1
944,"<S2SV_ModStart> += dif ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
945,<S2SV_ModStart> [ 1 ] ; <S2SV_ModEnd> return 0 ;,0
946,<S2SV_ModStart> = 0 ; unsigned int actual_size = r -> begin < actual_size? r -> begin : actual_size ; unsigned int limit_r_r_begin = r -> begin < actual_size? r -> end : actual_read,0
947,"<S2SV_ModStart> ) ; WRITE_ONCE ( count, count ) ; <S2SV_ModStart> = count ; <S2SV_ModEnd> count = count",0
948,"<S2SV_ModStart> struct llc_pktinfo info ; memset ( & info, 0, sizeof ( info ) )",1
949,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> void vpx_write_literal <S2SV_ModEnd> ( vpx_literal <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ; const vpx_wb_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> i ] ; vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) ; vpx_wb_write_literal <S2SV_ModEnd> ( w,",0
950,"<S2SV_ModStart> wb ) { struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ; <S2SV_ModStart> wb ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
951,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char *,0
952,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> hid_descriptor ) { <S2SV_ModStart> int num_descriptor ; n = offsetof ( struct hid_descriptor, hdescriptor, hdesc -> bNumEndpoints ) ; if ( hdesc -> bNumEndpoints < sizeof ( struct hid_descriptor ) ) return - EINVAL ; <S2SV_ModStart> descriptor ; } if ( hdesc -> bLength < sizeof ( struct hid_descriptor ) ) return - EINVAL ;",0
953,"<S2SV_ModStart>, flags, <S2SV_ModEnd> ND_TCHECK2 ( *",0
954,<S2SV_ModStart> exit_dead ) ; if ( tsk -> exit_dead ) exit_notify ( tsk ) ; if ( tsk -> exit_dead ) exit_dead ( tsk ) ; exit_dead ( tsk ) ; exit_dead ( ) ; exit_dead : if ( tsk -> exit_dead ) ; if ( tsk ) exit_dead ( tsk ) ; exit_dead_dead ( tsk ) ; exit_dead ( 1 ) ; exit_dead ( tsk ) ; exit_dead ( tsk -> exit_dead ) ; exit_dead : if ( tsk ) exit_dead ( tsk ) ; if ( tsk -> exit_dead ) ; if ( tsk -> exit_dead ) exit_exit ( tsk ) ; exit_exit ( tsk ) ; if ( tsk -> exit_dead ) ; if ( tsk -> exit_dead ) ; exit_exit ( tsk ) ; exit_dead ( tsk ) ; if ( tsk -> exit_dead ) exit_exit ( tsk ) ; exit_exit ( tsk ) ; if ( tsk -> exit_dead ) ; exit_exit ( tsk ) ; exit_exit (,0
955,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void *",0
956,<S2SV_ModStart> ; if ( opts == 0 ||,0
957,<S2SV_ModStart> err ; } if ( urb -> state == NULL ) { err = - EINVAL ; goto invalid ; },0
958,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = X86_C2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> x2SV_null> <S2SV_null> static,0
959,<S2SV_ModStart> ( tag = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> < 0 ) goto check_error ; <S2SV_ModEnd> if ( len,0
960,<S2SV_ModStart> = malloc ( NULL <S2SV_ModEnd> ) ; if,0
961,<S2SV_ModStart> mnt ) { return 0 ;,0
962,"<S2SV_ModStart> PHP_SHA512_CTX context ; if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; return FAILURE ; } <S2SV_ModStart> PHP_SHA4_CTX context ; } if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_SHA512_CTX context ; if ( sig_len < sizeof ( digest ) ) { spprintf ( error ) ; if ( error ) { if ( sig_len < 0 ) { spprintf ( error, ""broken <S2SV_blank> signature"" ) ; return FAILURE ; } return FAILURE ; } if ( sig_len < sizeof ( digest ) { spprintf ( sig_len ) ; if ( sig_len < sizeof ( digest ) ) { if ( sig_len < sizeof ( digest ) ) { read_len = 0 ; } return FAILURE ; } if ( read_len < sizeof ( sig_len ) { if ( FAILURE ) { if (",0
963,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
964,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
965,<S2SV_ModStart> if ( argReg > <S2SV_ModEnd> regsz ) { <S2SV_ModStart> regsz ) { return ;,1
966,"<S2SV_ModStart> ( req_class, rb_str, NULL, <S2SV_ModStart> ) ) ; } <S2SV_ModEnd> if (!",0
967,<S2SV_ModStart> 0 ) ; args -> rmtvaluelen <S2SV_ModEnd> = args -> <S2SV_ModStart> -> rmtvaluelen ; args -> rmtvaluelen = args -> rmtvaluelen <S2SV_ModEnd> ; args -> <S2SV_ModStart> -> rmtvaluelen < args -> rmtvaluelen <S2SV_ModEnd> ) ; return,0
968,,0
969,"<S2SV_ModStart> NULL ) { memset <S2SV_ModEnd> ( ssl,",0
970,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) &&! test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) &&",1
971,"<S2SV_ModStart> ) ) ; if ( LTXTQUERY_TOO_BIG ( state. num, state. sumlen ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""ltxtquery <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large"" ) ) ) ;",1
972,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
973,<S2SV_ModStart> ; if (! EXT4_SB ( inode -> i_sb ) -> s_journal <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd>! handle ),1
974,<S2SV_ModStart> { uint32_t <S2SV_ModEnd> ; if ( <S2SV_ModStart> } if ( u >= max &&,0
975,"<S2SV_ModStart> ( f,",0
976,"<S2SV_ModStart> ( buf [ size ], 2 <S2SV_ModEnd> ) ; size",0
977,<S2SV_ModStart> ; if (,0
978,"<S2SV_ModStart> char strncpy <S2SV_ModEnd> ( str,",0
979,"<S2SV_ModStart> char * in, size_t <S2SV_ModEnd> c = 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd> ( g. <S2SV_ModStart> ) ) { if ( <S2SV_ModEnd> f + pre + <S2SV_ModStart> g. outf + len > pre ) { fprintf ( stderr, ""\\n"" ) ; return - g. inf ; } else if (",0
980,,1
981,<S2SV_ModStart> * output ; MagickBooleanType status ; <S2SV_ModStart> i ++ ) { <S2SV_ModEnd> input = ( <S2SV_ModStart> i ; } status = MagickFalse ; <S2SV_ModStart> ( void ) status = MagickFalse ; <S2SV_ModStart> ( void ) fclose ( <S2SV_ModEnd> ) ; ( <S2SV_ModStart> i ++ ) return ( <S2SV_ModEnd> ) ; },0
982,<S2SV_ModStart> ) { const si,0
983,"<S2SV_ModStart> ( sb, KERN_ERR,",1
984,"<S2SV_ModStart> passwd * pwd, const char * prefix <S2SV_ModStart> = NULL ; <S2SV_ModEnd> pw_init ( ) <S2SV_ModStart> & tmpname, ""/etc"", prefix <S2SV_ModEnd> ) ) ==",1
985,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
986,,0
987,<S2SV_ModStart> TRUE ; } const char * stanza_from = jid_get_from ( stanza ) ; jid -> barejid = jid_create ( stanza_from ) ; if ( stanza_from!= 0 ) { jid_create ( stanza ) ; return 0 ; },0
988,<S2SV_ModStart> 0 ) { int class = <S2SV_ModEnd> getClientTypeByName ( v <S2SV_ModStart> j ] ) ; if ( class <S2SV_ModStart> == - 1 || class == CLIENT_TYPE_MASTER,1
989,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char *,0
990,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( config_path,0
991,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; BT_DBG (,1
992,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
993,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
994,<S2SV_ModStart> = u4_height ; ps_dec -> u4_max_width = ps_dec -> u4_height ;,0
995,<S2SV_ModStart> * zone ; size_t tilemap_size ; <S2SV_ModStart> * size_size ; <S2SV_ModEnd> x = 0,0
996,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_printroute ( netdissect_options <S2SV_ModStart> ) ; return ( 0 ),0
997,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
998,<S2SV_ModStart> ( void ) NULL <S2SV_ModEnd> ; if (,0
999,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> + 1, L_BUFSIZE <S2SV_ModEnd> "" ) <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd>, buf ) <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd> ) )",0
1000,<S2SV_ModStart> if ( chunk_num >= <S2SV_ModEnd> chm -> num_chunks,1
1001,<S2SV_ModStart> current_data ) { uint ret ; <S2SV_ModStart> ) ) return - EINVAL ; if (! ret ) return - ENOMEM ; <S2SV_ModStart> ) ) return ret <S2SV_ModEnd> ; } <S2SV_null>,0
1002,<S2SV_ModStart> ; default : if (,0
1003,"<S2SV_ModStart> ( s -> avctx, 8",0
1004,<S2SV_ModStart> nsops < 1 || nsops > SEMOPM,1
1005,,0
1006,<S2SV_ModStart> < INDIRECT_BLOCKS ) { <S2SV_ModStart> ] ) ; },1
1007,"<S2SV_ModStart> -> i ; if (! ( i -> width ) || ( i -> height > i -> height ) || ( i -> height > i -> height ) || ( i -> height > i -> height ) || i -> height > i -> height ) { continue ; } <S2SV_ModStart> ) ) { if (! ( i -> height ) ) return FALSE ; } if ( i -> height ) { if (! ( i -> height ) ) return FALSE ; } if ( i -> width > i -> height ) { if ( i -> height ) { if ( i -> parent_height + i -> height > i -> height ) fprintf ( i -> parent, ""\\n"" ) <S2SV_ModEnd> ) ; return FALSE <S2SV_ModStart> ) ; } if (! i -> width ) if ( i -> width ) if ( i -> height ) if ( i -> height ) { if ( i -> height ) return FALSE ; } } if ( i -> width > i -> height ) { if ( i -> posY + i -> height ) { if ( i -> parent_height > i -> height ) { if ( i -> width + i -> height ) { if ( i -> height )! i -> height ) { if ( i -> height ) fprintf ( i ->",0
1008,<S2SV_ModStart> if ( q < p || q,0
1009,<S2SV_ModStart> ++ ) { <S2SV_ModEnd> if ( bytes_matched,0
1010,"<S2SV_ModStart> case LEX_UNFINISHED : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> case LEX_UNFINISHED : return ; strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> case LEX_ID : str, ""LITERAL"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_ID : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> case LEX_TEMPLATE : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> case LEX_ID : str, <S2SV_ModStart> case LEX_UNFINISHED : str, ""LITERAL"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_TEMPLATE : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> case LEX_TEMPLATE_LITERAL : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> case LEX_LITERAL : str, <S2SV_ModStart> str, ""LITERAL"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> case LEX_ID : strcpy <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_TEMPLATE_TEMPLATE_LITERAL : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> case LEX_TEMPLATE_LITERAL : strcpy <S2SV_ModEnd> ( str,",0
1011,"<S2SV_ModStart> mnt_instance ) ; if ( unlikely (! list_empty ( & mnt -> mnt_mounts ) ) ) { struct mount * p, * tmp ; list_for_each_entry_safe ( p, tmp, & mnt -> mnt_mounts, mnt_child ) { umount_mnt ( p ) ; } }",1
1012,"<S2SV_ModStart> void encode_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static",0
1013,,1
1014,<S2SV_ModStart> goto not_found ; if ( e - p > HOST_NAME_MAX - 1 ) goto not_found ;,0
1015,<S2SV_ModStart> ; int err <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> uint32_t pos ; if ( inode -> i_size > inode -> i_sb -> s_blocksize ) { err = - EIO ; goto out_unmap ; },0
1016,<S2SV_ModStart> else if ( cpu_has_secondary_exec_ctrls ( ) && ( vmcs_read32 ( cpu -> file,0
1017,<S2SV_ModStart> if ( ent == NULL ) { st = KRB5_KDB_NOENTRY ; <S2SV_ModEnd> goto cleanup ;,0
1018,<S2SV_ModStart> { ps_codec -> i1_mbs = 0 ; ps_codec ->,0
1019,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> chunk_sizeof ( struct <S2SV_ModStart> goto out_dblks ; int bpending_blocks ; int bh_chunk_size = 0 ; <S2SV_ModStart> goto out_dput ; bhdr ; bh_blk ( & bh -> bh_blocksize ) ; <S2SV_ModStart> goto out_dput ; bhdr = 0 ;,0
1020,<S2SV_ModStart> 0 ) ; if ( psf -> header. type == NULL ) return 0 ;,0
1021,<S2SV_ModStart> ; if ( d -> msg. msg ) return - EINVAL ; if (,0
1022,"<S2SV_ModStart> break ; } memset ( & cinfo, 0, sizeof ( cinfo ) ) ;",1
1023,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
1024,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0644 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; return",0
1025,"<S2SV_ModStart> int num_items_scanned ; guint pkt_len ; int <S2SV_ModEnd> pktnum, hr <S2SV_ModStart> + 64, ""LEN=%9u"" <S2SV_ModEnd>, & pkt_len <S2SV_ModStart> FALSE ; } if ( pkt_len > WTAP_MAX_PACKET_SIZE ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup_printf ( ""toshiba: <S2SV_blank> File <S2SV_blank> has <S2SV_blank> %u-byte <S2SV_blank> packet, <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> maximum <S2SV_blank> of <S2SV_blank> %u"", pkt_len, WTAP_MAX_PACKET_SIZE ) ; return FALSE ; } <S2SV_ModStart> ( buf, pkt_len <S2SV_ModEnd> ) ; pd",0
1026,<S2SV_ModStart> ; int err = 0 ; msg -> msg_namelen,1
1027,"<S2SV_ModStart> ; if ( zend_hash_find <S2SV_ModEnd> ( ht,",1
1028,"<S2SV_ModStart> ) ) ; nla_strlcpy <S2SV_ModEnd> ( link_info. <S2SV_ModStart> TIPC_NLA_LINK_NAME ] ), TIPC_MAX_LINK_NAME",1
1029,<S2SV_ModStart> -> io_data ; <S2SV_ModEnd> if ( io,0
1030,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",1
1031,<S2SV_ModStart> p -> tokenpos >= ( <S2SV_ModEnd> p -> tokenlen <S2SV_ModStart> p -> tokenlen - 1 ),1
1032,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void vpx_read_block ( vpx_read_b <S2SV_ModEnd> ( r, <S2SV_ModStart> 8x8 ) ; vpx_read_literal <S2SV_ModEnd> ( r,",0
1033,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
1034,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> & 0xFFFF ; },1
1035,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
1036,,0
1037,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
1038,"<S2SV_ModStart> -> stratum_port ; snprintf ( address, 254 <S2SV_ModEnd>, ""%s:%s"",",1
1039,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } if (,0
1040,"<S2SV_ModStart>, j ; unsigned int actual_size = r -> begin < actual_size? r -> end : actual_size = r -> end < actual_size? r -> end : actual_read",0
1041,<S2SV_ModStart> p ++ ) return 0,0
1042,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; int ret <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; o2nm_lock_subsystem ( ) ; <S2SV_ModStart> - EINVAL ; },0
1043,<S2SV_ModStart> = 0 ; # ifdef CONFIG_VP9_HIGHBITDEPTH if ( vpx_buf -> flags & YV12_BUFFER_SIZE ) { <S2SV_ModStart> ) ) ; return - EINVAL ; } else { <S2SV_ModStart> v4 ) ; },0
1044,<S2SV_ModStart> size ) { ASSERT_NO_SIZE_OVERFLOW ( size ) ;,1
1045,<S2SV_ModStart> ; ssize_t count ; if ( bytes == 0 || items == 0 ) return 0,1
1046,,0
1047,"<S2SV_ModStart> key_ref ) ; ret = key_read ( key, 0 <S2SV_ModEnd> ) ; if",0
1048,,0
1049,"<S2SV_ModStart>, args -> rmtvaluelen <S2SV_ModEnd> ) ; if",0
1050,<S2SV_ModStart> r ) { if ( al -> alg ) return 0 ;,0
1051,<S2SV_ModStart> 0 ) ; hrtimer_try_to_cancel <S2SV_ModEnd> ( & stime,1
1052,<S2SV_ModStart> ONIG_INFINITE_DISTANCE ) { if ( str < reg -> low ) { continue ; },0
1053,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> l2SV_null> static <S2SV_ModStart> case L2SV_null> <S2SV_null> static L2SV_null> static,0
1054,"<S2SV_ModStart> ( ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, 0 )",0
1055,<S2SV_ModStart> -> chunksize = UINT64_MAX <S2SV_ModEnd> ; for (,1
1056,<S2SV_ModStart> } } } ps_dec -> u2_first_slice_in_pic = 0 ;,0
1057,,0
1058,<S2SV_ModStart> } err = crypto_rng_alg ( tfm ) <S2SV_ModEnd> -> seed (,1
1059,<S2SV_ModStart> = uid ; <S2SV_ModEnd> new -> count <S2SV_ModStart> new -> count = 0 <S2SV_ModEnd> ; spin_lock_irq ( <S2SV_ModStart> } if ( <S2SV_ModEnd> ucounts -> count <S2SV_ModStart> ucounts -> count == INT_MAX ) ucounts = NULL ; else ucounts -> count += 1 <S2SV_ModEnd> ; spin_unlock_irq (,1
1060,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0,0
1061,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1062,<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline,0
1063,<S2SV_ModStart> ; if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) ) <S2SV_ModEnd> { if ( <S2SV_ModStart> ) ; } if ( ext4_should_dioread_nolock ( inode ) ) set_buffer_uninit ( bh_result ) ;,1
1064,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { struct fmode <S2SV_ModStart>, fmode, fmode <S2SV_ModEnd> ) ; mutex_unlock",0
1065,"<S2SV_ModStart> ResourceLimitError, ""MemoryAllocationFailed"" ) ;",0
1066,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
1067,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void oidc_scrub_headers (,1
1068,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int64_t best_dist_t <S2SV_ModEnd> sse, int64_t <S2SV_ModStart>, int64_t sse, int64_t sse, int64_t * bsize, int64_t, int64_t sse, int64_t, int64_t * bsize, int64_t sse, int64_t, int64_t sse, int64_t, int64_t, int64_t, int64_t sse, int64_t, int64_t, int64_t, unsigned int64_t sse, unsigned int64_t, int64_t, unsigned int64_t, int64_t sse, unsigned int64_t, int64_t, unsigned int64_t, int64_t, unsigned int64_t, int64_t, unsigned int64_t ) ( unsigned int64_t ) # if CONFIG_VP9_HIGHBITDEPTHRESHIGHBITDEPTHRESHIGHBITDEPTH const uint64_",0
1069,<S2SV_ModStart> ; if ( pmd_trans <S2SV_ModEnd> ( pmd ),0
1070,"<S2SV_ModStart> ND_TCHECK ( * tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> } trunc : ND_PRINT ( ( ndo, ""[|esis]"" ) ) <S2SV_ModEnd> ; } <S2SV_null>",1
1071,<S2SV_ModStart> ; if ( * p == '\\0' || * ptr == NULL ) return NULL ; if (,0
1072,"<S2SV_ModStart> void write_segment_id ( vpx_reader <S2SV_ModEnd> * r,",0
1073,<S2SV_ModStart> r ) ; <S2SV_ModEnd> return 0 ;,0
1074,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> segment_desc ( <S2SV_ModStart> ) return false <S2SV_ModEnd> ; struct desc_struct <S2SV_ModStart> struct ld ) { struct desc_struct * out = * out ; <S2SV_ModStart> struct ld ) { * out = * out ; return false ; } <S2SV_ModEnd> if (! <S2SV_ModStart> sel ) ; return true ;,0
1075,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dest_ptr1, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dest_ptr2, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dest_ptr1,",0
1076,<S2SV_ModStart> ) ) ; struct ip6_options_rcu * opt = rcu_read_lock ( ) ; <S2SV_ModStart> ) ) ; if (! sock_owned_by_user ( skb ) ) return - EINVAL ;,0
1077,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1078,"<S2SV_ModStart> ( buf, len <S2SV_ModEnd> ) ; if",0
1079,"<S2SV_ModStart> = conn ; <S2SV_ModEnd> g_debug ( ""GsmXSMPClient: <S2SV_blank> Initializing <S2SV_blank> client <S2SV_blank> %s""",1
1080,<S2SV_ModStart> >= 0 && <S2SV_ModEnd> ND_TTEST ( * <S2SV_ModStart> < ie && <S2SV_ModEnd> ND_TTEST ( *,1
1081,"<S2SV_ModStart> ( interface, KSZ8851_ISRMD <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J60_EIR_TXQ <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC624J60_EINVAL <S2SV_ModEnd> ) ; return",0
1082,"<S2SV_ModStart> NULL ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
1083,<S2SV_ModStart> } if ( assoc_array_ptr_is_leaf ( ptr ) &&,0
1084,<S2SV_ModStart>. udpport = 0 <S2SV_ModEnd> ; settings.,1
1085,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1086,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( xd, <S2SV_ModStart> 1 ) ; memset <S2SV_ModEnd> ( x1,",0
1087,<S2SV_ModStart> clips_ptr ) { if ( num_clips < 0 || num_clips > DRM_MODE_FB_DIRTY_MAX_CLIPS ) { ret = - EINVAL ; goto out_err1 ; },1
1088,<S2SV_ModStart> ; if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1089,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1090,"<S2SV_ModStart> 0 ) ; int minsz = minsz ; minsz = R_MAX ( minsz, minsz, minsz, minsz, minsz, 0 ) ; <S2SV_ModStart> ++ ) { <S2SV_ModStart>!= UT64_MAX ) { <S2SV_ModStart> ptr ) ; } <S2SV_ModStart> ++ ) { <S2SV_ModStart> ptr ) ; int minsz = R_MAX ( minsz, minsz, minsz, minsz, minsz, minsz, minsz, minsz ) ; minsz <S2SV_ModEnd> ; minsz <S2SV_ModStart>!= UT64_MAX ) { <S2SV_ModStart> ptr ) ; }",0
1091,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int fclose ( fp ) ; int fclose ( fp ) ; <S2SV_ModStart> 1 ) { fprintf ( stderr, ""Unexpected <S2SV_blank> file <S2SV_blank> width\\n"" ) ; return - 1 ; } <S2SV_ModEnd> ( fprintf ( stderr, <S2SV_ModStart> ) ; return 0 <S2SV_ModEnd> ; } if <S2SV_ModStart> 1 ) { fprintf ( stderr, ""error: <S2SV_blank> %s\\n"", fstr ) ; return NULL ; } <S2SV_ModStart> ) ) { fprintf ( stderr, ""Input <S2SV_blank> file <S2SV_blank> %s\\n"", fprintf ( fprintf ( stderr, ""Error: <S2SV_blank> %s\\n"", fstr ) ; return NULL ; } <S2SV_ModEnd> ( fprintf ( fstr, <S2SV_ModStart> ) ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>",0
1092,"<S2SV_ModStart> + JSPQ_DATA_BUFF ; head = readw ( head, chip -> head ) ; if ( head > size ) goto out ; size = readw ( chip -> head ) ; head = readw ( chip, chip -> head ) ; if ( head > size ) goto out ; spin_unlock ( & chip -> head ) ; head = readw ( chip, head ) ; if ( head > size ) goto out <S2SV_ModEnd> ; head <S2SV_ModStart> + JQS_SPQSQS_null> <S2SV_null>",0
1093,<S2SV_ModStart> * op1 ; size_t <S2SV_ModEnd> len = 0,0
1094,<S2SV_ModStart> acpi_status status ; <S2SV_ModEnd> union acpi_operand_object * <S2SV_ModStart> acpi_operand_object * name <S2SV_ModEnd> ; ACPI_FUNCTION_TRACE ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> acpi_tree ( acpi_object,0
1095,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
1096,<S2SV_ModStart> [ sizeof ( the_url <S2SV_ModEnd> ) - 1,0
1097,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; },0
1098,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),0
1099,"<S2SV_ModStart> vpx_codec_ctx_t * priv <S2SV_ModEnd>, vpx_codec_alg_priv_t * priv <S2SV_ModStart> = NULL ; vpx_codec_alg_priv_t * priv <S2SV_ModEnd> ; vpx_t * <S2SV_ModStart> -> cfg = ( sizeof ( priv ) <S2SV_ModEnd> ; vpx_codec_alg_t * priv <S2SV_ModStart> -> cfg ; priv -> cfg = sizeof ( priv -> cfg ) <S2SV_ModEnd> ; vpx_codec_alg_priv_t * priv <S2SV_ModStart> ctx -> cfg ; priv <S2SV_ModEnd> -> cfg = <S2SV_ModStart> -> cfg = & priv <S2SV_ModEnd> -> cfg ;",0
1100,"<S2SV_ModStart> error ) { if ( bp && ( <S2SV_ModEnd> xfs_da_shrink_inode ( args <S2SV_ModStart>, bp )!= 0 ) <S2SV_ModEnd> ) goto out",1
1101,,0
1102,<S2SV_ModStart> timeri -> master && timeri -> timer ) { mutex_lock ( & timeri -> lock ) ; },0
1103,<S2SV_ModStart> return err ; if (! <S2SV_ModEnd> attrs [ TIPC_NLA_NLA_NLA_SOCK <S2SV_ModStart> [ TIPC_NLA_S ] ) return - EINVAL <S2SV_ModStart> [ TIPC_NLA_SOCK ] ) return - EINVAL ; if (! tsk [ TIPC_NLA_SOCK ] ) return - EINVAL ; TIPC_NLA_NLA_SOCK [ TIPC_NLA_SOCK ] = TIPC_NLA_SOCK <S2SV_ModEnd> [ TIPC_NLA_NLA_SOCK ] <S2SV_ModStart> [ TIPC_NLA_NLA_NLA_SOCK ] <S2SV_ModEnd> [ TIPC_NLA_NLA_SOCK ] <S2SV_ModStart> [ TIPC_NLA_NLA_SOCK ] ) return - EINVAL ; TIPC_NLA_NLA_SOCK [ TIPC_NLA_SOCK <S2SV_ModEnd> [ TIPC_NLA_NLA_NLA_NLA_SOCK ] <S2SV_ModStart> [ TIPC_NLA_NLA_NLA_NLA_NLA_NLA,0
1104,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1105,<S2SV_ModStart> = v ; if (! IS_ERR ( vma ) ),1
1106,<S2SV_ModStart> ) buffer ; if ( total_len < <S2SV_ModEnd> cap -> desc ->,0
1107,<S2SV_ModStart> task = current <S2SV_ModEnd> ; if (,1
1108,<S2SV_ModStart> ( iinfo -> i_lenAlloc > bs || iinfo ->,0
1109,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR, ENC28J60_MIREGADR <S2SV_ModEnd>, address, <S2SV_ModStart> ( interface, ENC28J60_MICMD_MIIRD <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( interface, ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MICMD, ENC28J60_MICMD <S2SV_ModEnd>, 0 )",0
1110,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> char *,0
1111,"<S2SV_ModStart> ; kfree ( rcu_dereference_protected ( inet -> inet_opt, 1 ) <S2SV_ModEnd> ) ; dst_release",1
1112,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
1113,<S2SV_ModStart>! bp ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart>!= '\\n' ) { bp ++ ;,0
1114,<S2SV_ModStart> ; args -> rmtvaluelen <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ( args -> rmtblkno <S2SV_ModEnd> ) ; args -> <S2SV_ModStart> = be32_to_cpu ( args -> rmtblkno <S2SV_ModEnd> ) ; return,0
1115,<S2SV_ModStart> ; return ; } if (,0
1116,<S2SV_ModStart> = 0 ; size_t data_len = 0 ;,0
1117,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,0
1118,<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( context ->,0
1119,<S2SV_ModStart> u8 label_len ; <S2SV_ModEnd> GET8 ( label_len <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ;,1
1120,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpAcc ( TIFF <S2SV_ModStart> tmp ) ; if <S2SV_ModEnd> ( cc %,0
1121,"<S2SV_ModStart> -> vm_ops ) ; <S2SV_ModEnd> return do_oops ( <S2SV_ModStart>, pte, pmd, flags, entry ) ; <S2SV_ModEnd> return do_page ( <S2SV_ModStart>, address, pmd, pmd, pmd, entry ) ;",0
1122,"<S2SV_ModStart> s ) { size_t len = strlen ( s ) + 1 ; <S2SV_ModStart> = pool_alloc ( len ) ; memcpy <S2SV_ModEnd> ( r, <S2SV_ModStart> r, s, len",1
1123,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1124,"<S2SV_ModStart>! new_idmap_permitted ( file,",1
1125,,0
1126,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( c,0
1127,"<S2SV_ModStart>, filename, <S2SV_ModEnd> ) ; }",0
1128,"<S2SV_ModStart> ip6 ) { ND_TCHECK ( * cp, <S2SV_ModStart> ip6 ) ; if ( advance < 0 ) return ; <S2SV_ModStart> ip6 ) ; if ( advance < 0 ) return ; <S2SV_ModStart> ip6 ) return ;",0
1129,"<S2SV_ModStart>, len + 8",0
1130,<S2SV_ModStart> ( iinfo -> i_lenAlloc > bs || iinfo ->,0
1131,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
1132,"<S2SV_ModStart>, vpx_reader <S2SV_ModEnd> ( r,",0
1133,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_array ) + strlen ( t1_array ) + 1, T1_BUF_SIZE ) ; <S2SV_ModStart> ( t1_array, T1_BUF_SIZE ) + 1 <S2SV_ModEnd> ) ; }",0
1134,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
1135,<S2SV_ModStart> ctxt ) ; if (! ( em_syscall_is_enabled ( ctxt ) ) ) return emulate_ud ( ctxt,0
1136,<S2SV_ModStart> ; if ( j < 0 ||,0
1137,"<S2SV_ModStart>, annotation, NULL,",0
1138,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int running_avg_y_y_stride <S2SV_ModEnd> intra_y_stride ( <S2SV_ModStart> int i, int running_avg_y_y_stride <S2SV_ModEnd> intra_y_avg_y_stride, int running_avg_y_y_stride <S2SV_ModStart> intra_y_stride, int running_avg_y_y_stride, unsigned int running_avg_y_y_avg_y_y_stride, unsigned int running_avg_y_stride, unsigned int running_avg_y_stride, unsigned int running_avg_y_stride, unsigned int running_avg_y_stride, unsigned int motion_y_y_stride, unsigned int running_avg_y_y_stride, unsigned int64_t <S2SV_ModEnd> unsigned int <S2SV_ModStart> int num_magnitude_magnitude_magnitude_mv_magnitude_magnitude_magnitude_magnitude_mv_magnitude",0
1139,<S2SV_ModStart> ) + 2 <S2SV_ModEnd> ; if (,0
1140,"<S2SV_ModStart> PERF_COUNT_SW_EMULATION_FAULTS, 1",0
1141,<S2SV_ModStart> size ) ; message -> interface = queueItem -> interface ;,0
1142,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1143,"<S2SV_ModStart> 1 ] ; if ( val, sizeof ( val ) ) return - 1 ;",0
1144,"<S2SV_ModStart> ; int error ; struct mb2_cache_cache * ext2_mb_cache = inode -> i_mb_cache_cache <S2SV_ModEnd> ( ext2_mb_cache,",0
1145,"<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp. <S2SV_ModStart>. type, ""compression"", sizeof ( rcomp. type ) <S2SV_ModEnd> ) ; if",1
1146,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
1147,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( rc ) return rc ; rc = posix_acl_update_mode ( inode, & acl ) ; if ( rc < 0 ) return - EINVAL ; } break ; default : return - EINVAL ; } if (! value ) return - EINVAL ;",0
1148,"<S2SV_ModStart> 0 ) { if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""UnexpectedEndOfFile"" ) ;",0
1149,<S2SV_ModStart> id ) ; if ( count > <S2SV_ModEnd> ) return,0
1150,<S2SV_ModStart> 3 * len + 8,1
1151,<S2SV_ModStart> SUCCESS ) { if ( Z_TYPE_PP ( var )!= IS_LONG ) { zval lval lval ; lval = * var ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; lval <S2SV_ModStart> ; convert_to_long ( & lval <S2SV_ModEnd> ) ; points <S2SV_ModStart>. x = Z_LVAL ( lval ) ; } <S2SV_ModStart> ; convert_to_long ( & lval <S2SV_ModEnd> ) ; },0
1152,<S2SV_ModStart> -> it_overrun += <S2SV_ModEnd> kc -> timer_forward,0
1153,"<S2SV_ModStart> AcquireQuantumMemory ( imsx, imsy <S2SV_ModEnd> ) ; if",0
1154,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_array ) + strlen ( t1_array ) + 1, T1_BUF_SIZE ) ; <S2SV_ModStart> ( t1_array, T1_BUF_SIZE ) + 1 <S2SV_ModEnd> ) ; }",0
1155,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
1156,"<S2SV_ModStart>. path ; return Curl_urldecode <S2SV_ModEnd> ( data, <S2SV_ModStart>, 0, & <S2SV_ModEnd> pop3c -> mailbox <S2SV_ModStart> pop3c -> mailbox, TRUE ) <S2SV_ModEnd> ; } <S2SV_null>",0
1157,<S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ; <S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ;,1
1158,"<S2SV_ModStart> sb ) ; if ( s -> av_log ( s -> avctx, AV_LOG_ERROR ) ;",0
1159,<S2SV_ModStart> } } } <S2SV_ModEnd> } else {,0
1160,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1161,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
1162,<S2SV_ModStart> val ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t,0
1163,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_row, int mbmi_col, int64_t * bsize, int64_t * mbmi_col, int64_t * bd <S2SV_ModEnd> ) { int <S2SV_ModStart> = 1 ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { memset ( bsize, 0, 0, 0, 0, 0, 0, sizeof ( xd ) ) ) ; return 1 ; } else { <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>",0
1164,<S2SV_ModStart> -> mmap_sem ) ;,0
1165,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 8 ) ; <S2SV_ModEnd> src += src_stride",1
1166,"<S2SV_ModStart> return getnum ( L,",0
1167,,0
1168,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1169,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1170,<S2SV_ModStart> ( upid == INT_MIN ) return - ESRCH ; if ( upid ==,1
1171,"<S2SV_ModStart> siocb -> scm, false",1
1172,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1173,"<S2SV_ModStart>, plane ) * ( ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH )? 2 : 1 )",0
1174,<S2SV_ModStart> ) bp ; if ( len < 4 ) { <S2SV_ModStart> ) return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ) ) ; if (! <S2SV_ModStart> ) return AVERROR_INVALIDDATA <S2SV_ModEnd> ; if (,0
1175,"<S2SV_ModStart> -> private ; struct dm_dev * dev = lc -> dev ; int r = 0 ; if <S2SV_ModEnd> ( lc -> <S2SV_ModStart> ( lc -> start || ti -> len!= i_size_read ( dev -> bdev -> bd_inode ) >> SECTOR_SHIFT ) r = scsi_verify_blk_ioctl ( NULL, cmd ) ; return r? : __blkdev_driver_ioctl ( <S2SV_ModStart> -> bdev, <S2SV_ModEnd> dev -> mode",1
1176,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1177,<S2SV_ModStart> { return false ; <S2SV_ModEnd> } if (,0
1178,"<S2SV_ModStart> ( size, <S2SV_ModEnd> msg ) ;",0
1179,<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ;,1
1180,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1181,<S2SV_ModStart> sock -> sk <S2SV_ModEnd> ; memset (,0
1182,<S2SV_ModStart> ; if ( plen < 1 ) return - EINVAL ; if (,0
1183,<S2SV_ModStart> NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC | NTLMSSP_NEGOTIATE_SEAL <S2SV_ModStart> -> sign ) <S2SV_ModEnd> flags |= NTLMSSP_NEGOTIATE_SIGN <S2SV_ModStart> |= NTLMSSP_NEGOTIATE_KEY_XCH ; <S2SV_ModEnd> tmp = *,1
1184,<S2SV_ModStart> ) ) ; mutt_socket_empty ( adata -> conn <S2SV_ModEnd> ) ; if,0
1185,,0
1186,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horDiff8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
1187,<S2SV_ModStart> -> head <= 0 || ( unsigned char ) ( ( g -> sect << 2 ) >> FD_SIZECODE ( g ) ) ==,1
1188,<S2SV_ModStart> } if ( len < 0 ||,0
1189,"<S2SV_ModStart>, & rlen, 0",1
1190,"<S2SV_ModStart> char buf [ 1024 <S2SV_ModEnd> ] ; int <S2SV_ModStart> ( buf, sizeof ( buf ) <S2SV_ModEnd> ) ; if",0
1191,"<S2SV_ModStart> mntent, path, rootfs -> mount",1
1192,"<S2SV_ModStart> name, const char * name <S2SV_ModEnd> ) ; if",0
1193,<S2SV_ModStart> - offset ; unsigned short prev_bi_vcnt = bio -> bi_vcnt ; <S2SV_ModStart> ) break ; if ( bio -> bi_vcnt == prev_bi_vcnt ) put_page ( pages [ j ] ) ;,1
1194,<S2SV_ModStart> -> depth ; if ( numcolors > RAS_CMAP_MAXSIZ ) { return - 1 ; } <S2SV_ModEnd> actualnumcolors = hdr,1
1195,"<S2SV_ModStart> state. path <S2SV_ModEnd> ; char localhost <S2SV_ModStart> ""localhost"" ; } result = Curl_urldecode ( conn -> data, path, 0, & <S2SV_ModStart> smtpc -> domain, NULL, TRUE ) ; if ( result ) return result <S2SV_ModEnd> ; state (",1
1196,"<S2SV_ModStart> char strncpy <S2SV_ModEnd> ( str,",0
1197,,0
1198,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
1199,<S2SV_ModStart> ) ; return ret,0
1200,<S2SV_ModStart> -> id ; <S2SV_ModEnd> int ret ;,0
1201,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1202,,1
1203,,0
1204,"<S2SV_ModStart>, rqstp, res <S2SV_ModEnd> ) ; out",1
1205,<S2SV_ModStart> mnt ) { return 0 ;,0
1206,"<S2SV_ModStart>, NULL,",0
1207,"<S2SV_ModStart> ) ) { * status = ""INVALID_TIONS"" ; <S2SV_ModStart> ) ) ; }",0
1208,<S2SV_ModStart> thread -> tp_value [ 0 ],0
1209,"<S2SV_ModStart> bufsize ) { size_t <S2SV_ModEnd> bufsize ; size_t <S2SV_ModStart> ; size_t bufsize <S2SV_ModEnd> ; JAS_DBGLOG ( <S2SV_ModStart> ; if ( bufsize < 0 ) { jas_deprecated ( ""negative <S2SV_blank> size <S2SV_blank> of <S2SV_blank> jas_stream_memopen <S2SV_blank> user.\\n"" ) ; return 0 ; } bufsize = bufsize <S2SV_ModEnd> ; } <S2SV_null>",0
1210,"<S2SV_ModStart> char * sig = NULL <S2SV_ModStart> char * b = NULL <S2SV_ModStart> "" ) ; if (! authctxt -> user == NULL || authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> of <S2SV_blank> user"", __func__ ) ; goto done ; } <S2SV_ModStart> b ) { if (! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } <S2SV_ModStart> ) ) ; if (! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> user"", __func__, __func__ ) ; goto done ; }",0
1211,"<S2SV_ModStart> ; char * buff ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
1212,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode ( struct <S2SV_ModStart> inode ) { int ret = <S2SV_ModEnd> i_block_read_lock ( &,0
1213,,0
1214,<S2SV_ModStart> tn_buf ) ; return - EACCES ;,1
1215,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnotePentaxEntry ) ) ;",0
1216,<S2SV_ModStart> failed_mount3 ; sbi -> s_mb_cache = NULL ;,0
1217,<S2SV_ModStart> ) { return TEMP_FAILURE ;,0
1218,<S2SV_ModStart> ) return ; if ( unlikely (,0
1219,<S2SV_ModStart> int i ; size_t size ; matrix = 0 ; <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } matrix <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } matrix <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } matrix,0
1220,<S2SV_ModStart> prevhdr ) ; if ( hlen < 0 ) goto out ;,0
1221,"<S2SV_ModStart> int mb2_cache_entry * bcache <S2SV_ModEnd> ; struct mb2_cache <S2SV_ModStart> * ext4_mb_cache_cache = mb2_cache_cache_entry_cache ( ext2_mb_cache, hash, hash, hash, bh -> mb2_cache, hash <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( bh -> b_cache, cache, bh -> b_block <S2SV_ModEnd> ) ; else <S2SV_ModStart> ( bh -> b_blocknr <S2SV_ModEnd> ) ; }",0
1222,<S2SV_ModStart> req ) ; <S2SV_ModEnd> return req ;,0
1223,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1224,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1225,<S2SV_ModStart> ( ret ||! cm_id -> device ||,1
1226,<S2SV_ModStart> xfrm_policy_walk * ) <S2SV_ModEnd> cb -> args <S2SV_ModStart> cb -> args <S2SV_ModEnd> ; struct xfrm_dump_info <S2SV_ModStart> struct xfrm_dump_info info <S2SV_ModEnd> ; info. <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> ( void ),1
1227,<S2SV_ModStart> (! file || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
1228,<S2SV_ModStart> dentry * upper <S2SV_ModEnd> ; int err <S2SV_ModStart> ) ; upper = PTR_ERR ( upper ) ; if ( IS_ERR ( upper ) ) goto out_unlock <S2SV_ModEnd> ; if (,0
1229,"<S2SV_ModStart> ( LOG_INFO * section,",0
1230,<S2SV_ModStart> * ptrptr && <S2SV_ModEnd> nmemb && size <S2SV_ModStart> nmemb && size <S2SV_ModEnd> ) return AVERROR,1
1231,,0
1232,"<S2SV_ModStart> -> i ; if (! ( i -> width ) || ( i -> height > i -> height ) || ( i -> height > i -> height ) || ( i -> height > i -> height ) || i -> height > i -> height ) { continue ; } <S2SV_ModStart> ) ) { if (! ( i -> height ) ) return FALSE ; } if ( i -> height ) { if (! ( i -> height ) ) return FALSE ; } if ( i -> width > i -> height ) { if ( i -> height ) { if ( i -> parent_height + i -> height > i -> height ) fprintf ( i -> parent, ""\\n"" ) <S2SV_ModEnd> ) ; return FALSE <S2SV_ModStart> ) ; } if (! i -> width ) if ( i -> width ) if ( i -> height ) if ( i -> height ) { if ( i -> height ) return FALSE ; } if ( i -> width > i -> height ) { if ( i -> posY + i -> height ) { if (! i -> height ) if ( i -> height ) { if ( i -> width > i -> height ) { if ( i -> height )! i -> height ) { if ( i -> height ) fprintf ( i ->",0
1233,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : ms -> elf_notes_max = * ( const size_t * ) val ; return 0 ;,0
1234,"<S2SV_ModStart> { jas_eprintf ( ""got <S2SV_blank> box <S2SV_blank> type <S2SV_blank> %s\\n"" <S2SV_ModEnd>, box ->",1
1235,,1
1236,<S2SV_ModStart> if ( count > <S2SV_ModEnd> MAX ) return,0
1237,<S2SV_ModStart> page ) ; <S2SV_ModEnd> spin_lock ( &,0
1238,<S2SV_ModStart> return 0 ; size_t <S2SV_ModEnd> f = 0,0
1239,<S2SV_ModStart> UINT32 nsc_rle_encode ( const,1
1240,<S2SV_ModStart> char buf [ 1024 ] ; size = 0 ; <S2SV_ModStart> ) ) goto write_literal <S2SV_ModEnd> ; if (,0
1241,"<S2SV_ModStart> * dllhandle ; if ( COM_CompareExtension ( name, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", name ) ; return NULL ; }",1
1242,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if (!,0
1243,,0
1244,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1245,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } else if,0
1246,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> if ( char <S2SV_ModStart> errno ) { char * <S2SV_ModStart> errno = strtol ( char * e, ""No <S2SV_blank> address <S2SV_blank> address <S2SV_blank> %s"", * e ) ; char * e = strtol ( char * e, * e, * e, * e ) ; if ( * e ) { char * e = NULL ; * e = strcpy ( char * e, * e, & e ) ; if ( * e && * e ) { * e = NULL ; * e = strtol ( char * e, sizeof ( * e ), * e ) ; if ( * e ) { * e = NULL ; if (! * e ) { return NULL ; } <S2SV_ModEnd> return estrndup ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> str = str2 <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1247,,0
1248,"<S2SV_ModStart> ; # endif memcpy <S2SV_ModEnd> ( dst,",0
1249,<S2SV_ModStart> c -> width + 1,0
1250,<S2SV_ModStart> == * ptr && ptr [ 1 ],1
1251,"<S2SV_ModStart> * cpi, ThreadData * td, MACROBLOCK * const xd <S2SV_ModEnd>, int mi_row <S2SV_ModStart> int mi_row, <S2SV_ModEnd> BLOCK_SIZE bsize, <S2SV_ModStart> int mi_row, RD_COST * const MODE_INFO * const <S2SV_ModStart> -> common ; const mbmi_info = & cpi -> td. mbmi_row * const mbmi_col = & cpi -> td. mbmi_col ; MB_MODE_INFO_INFO * const mbmi_INFO * const mbmi_ext = & cpi -> common ; MACROBLOCKD * const MODE_INFO * const mbmi_ext = & cpi -> td. mbmi_row = & td -> mbmi_cols + mi_row * const mbmi_cols + mi_cols - mi_col ; BLOCK_SIZE bsize = & cpi -> mbmi_row * const mbmi_col ; BLOCK_SIZE bsize = & cpi -> mbmi_cols + mi_row * const mbmi_col = & cpi -> mbmi_col ; BLOCK_",0
1252,"<S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
1253,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1254,"<S2SV_ModStart> ( decoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart>, decoder -> codec_interface <S2SV_ModEnd> ( ),",0
1255,<S2SV_ModStart> ) ) ; goto out_skb <S2SV_ModEnd> ; skb =,0
1256,<S2SV_ModStart> sta -> lock ) ; spin_lock_init ( & sta -> ps_lock,1
1257,<S2SV_ModStart> tp_event ) && perf_paranoid_tracepoint_raw <S2SV_ModEnd> ( ) &&,1
1258,<S2SV_ModStart> net ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1259,"<S2SV_ModStart>, 0 ) ; if (! data_interface ||! control_interface ) return - ENODEV",1
1260,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1261,<S2SV_ModStart> ; if ( addr_len < 0 ||,0
1262,"<S2SV_ModStart> * head ; <S2SV_ModEnd> newsk -> sk_sndbuf <S2SV_ModStart> -> sk_rcvbuf ; sctp_copy_descendant <S2SV_ModEnd> ( newsk,",1
1263,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
1264,<S2SV_ModStart> { struct desc_struct <S2SV_ModEnd> desc ; short <S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
1265,<S2SV_ModStart> ctx ) { <S2SV_ModEnd> ( ctx ->,0
1266,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> plane <S2SV_null> <S2SV_null>,0
1267,<S2SV_ModStart> return ret ; fsnotify_put_group ( group ) ;,1
1268,"<S2SV_ModStart> ( ctx, KERNEL_ERR,",0
1269,"<S2SV_ModStart> BPF_ALU64 ) { coerce_reg_to_size ( dst_reg, 4 ) ; coerce_reg_to_size <S2SV_ModEnd> ( & src_reg <S2SV_ModStart> ( & src_reg, 4",0
1270,<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) break ;,0
1271,<S2SV_ModStart> ) == NULL && ps_stream -> u4_offset < ps_stream -> u4_offset,0
1272,"<S2SV_ModStart>, ret = 0 <S2SV_ModEnd> ; if (",0
1273,,0
1274,"<S2SV_ModStart> ( buf, size_t <S2SV_ModEnd> len ) )",0
1275,<S2SV_ModStart> } else { if ( iter == 0 ) return 0 ;,0
1276,<S2SV_ModStart> } if ( safe_mount <S2SV_ModEnd> ( sbi ->,0
1277,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = '\\0' ; char * name = strncpy ( char * name, char * name, * name, <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; if (! <S2SV_ModEnd>!= '\\0' ) { <S2SV_ModStart> = '\\0' ; return 0 ; } <S2SV_ModEnd> } if (! <S2SV_ModStart> ) return 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart> } if (! strncmp ( is_url [ 0 ] ) ) return 0 ; <S2SV_ModEnd> } if (",0
1278,<S2SV_ModStart> ) { return BOOL <S2SV_ModEnd> ; } if,0
1279,<S2SV_ModStart> len ) { struct ipv6_txoptions * opt_to_free = NULL ; <S2SV_ModStart>! opt ) { opt = txopt_get ( np ) ; opt_to_free = opt ; } <S2SV_ModEnd> if ( flowlabel <S2SV_ModStart> flowlabel ) ; txopt_put ( opt_to_free ) ;,1
1280,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( skb ),0
1281,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> } break ;",1
1282,<S2SV_ModStart> goto err ; if (! type == NULL ) { err = - EINVAL ; goto out_free ; } if (! in_skb ) { err = - EINVAL ; goto errout_free ; } if (! skb ) goto out_free ; } if (,0
1283,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1284,<S2SV_ModStart> ; if ( info -> num > 4 ) return 0 ; if (,0
1285,"<S2SV_ModStart> { if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
1286,<S2SV_ModStart> ) break ; <S2SV_ModEnd> tp -> copied_seq <S2SV_ModStart> = seq ; } tp -> copied_seq = seq ;,1
1287,<S2SV_ModStart> ; if ( key_is_key <S2SV_ModEnd> ( key ),0
1288,,0
1289,"<S2SV_ModStart> ( pTab, 5 <S2SV_ModEnd> ) ; }",0
1290,<S2SV_ModStart> ) return 0 <S2SV_ModEnd> ; if (,0
1291,"<S2SV_ModStart> expr_ty returns, string type_comment, int <S2SV_ModEnd> lineno, int",0
1292,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",0
1293,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ),1
1294,"<S2SV_ModStart> ) { case AC_VECTOR : kvm_queue_exception_e ( vcpu, AC_VECTOR, error_code ) ; return 1 ; case",1
1295,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ( opt,0
1296,"<S2SV_ModStart>, * buf <S2SV_ModEnd> ) ; if",0
1297,,0
1298,<S2SV_ModStart> < 0 ) { ret = <S2SV_ModEnd> chg ; goto out_err <S2SV_ModStart> err ; } return ret ; goto out_err <S2SV_ModEnd> ; } if <S2SV_ModStart> chg ) goto out_err <S2SV_ModEnd> ; } <S2SV_null>,0
1299,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> -> opt : rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> final ) ; rcu_read_unlock ( ) ;,0
1300,"<S2SV_ModStart> path path ; uid_t check_ruid ; <S2SV_ModStart> sbi, raw_data, & check_ruid",0
1301,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1302,"<S2SV_ModStart>, sizeof ( double <S2SV_ModEnd> ) ) ;",0
1303,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1304,"<S2SV_ModStart> ret, n_data <S2SV_ModEnd>, kdb ->",0
1305,"<S2SV_ModStart> int result = RLC_ERR ; bn_t t ; bn_dig ( m, m ) ; bn_len = RLC_OK <S2SV_ModEnd> ; bn_dig ( <S2SV_ModStart> 8 ) ; bn_len = RLC_OK <S2SV_ModEnd> 8 ) ; <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> if ( m <S2SV_ModStart> 8 ) { <S2SV_ModEnd> if ( m <S2SV_ModStart> 8 ) { <S2SV_ModStart> 8 ) ; bn_len = RLC_OK ; bn_dig ( m, m, 8 ) ; bn_len = RLC_OK ; bn_dig ( m, m, 8 ) ; bn_len = RLC_OK ; bn_2 ( m, m, m, m ) ; bn_dig ( m, m, m, 8 ) ; bn_len = RLC_OK <S2SV_ModEnd> ; if (",0
1306,"<S2SV_ModStart> -> length, 0,",1
1307,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1308,<S2SV_ModStart> { rq = <S2SV_ModEnd> hctx -> tags <S2SV_ModStart> hctx -> tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; if (,1
1309,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
1310,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1311,<S2SV_ModStart> } if ( strlen ( token ) > 4 &&,0
1312,"<S2SV_ModStart> * cpi, MACROBLOCK * const x, <S2SV_ModEnd>, int mi_row <S2SV_ModStart> x ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> 0 ) ; memset <S2SV_ModEnd> ( xd ->",0
1313,"<S2SV_ModStart> ; if ( safe_calloc <S2SV_ModEnd> ( name,",0
1314,<S2SV_ModStart> ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>,0
1315,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> * sizeof ( <S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> ; pixels =",0
1316,<S2SV_ModStart> ctl_files_rwlock ) ; mutex_init ( & card -> user_ctl_lock ) ;,1
1317,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1318,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
1319,<S2SV_ModStart> ; ps_dec -> pu4_ofsts = 0 ; ps_dec ->,0
1320,,0
1321,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> -> opt : rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> final ) ; rcu_read_unlock ( ) ;,0
1322,<S2SV_ModStart> args ) ; <S2SV_ModEnd> return - EINVAL,0
1323,"<S2SV_ModStart> int mptctl_do_ioctl_alloc ( MPT_ADAPTER * ioc, <S2SV_ModStart> malloc ) ; <S2SV_ModEnd> return - EFAULT <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } if",0
1324,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( c,0
1325,"<S2SV_ModStart> char * path, const char * rootfs <S2SV_ModStart> mntdata, rootfs",0
1326,"<S2SV_ModStart> ) NULL ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1327,"<S2SV_ModStart> char buf [ 1024 * buf ; int len_max ; long len_full ; long len_full ; long len_data ; long len_full ; long len_full ; long len_full ; long len_full ; long len_full ; long len_full = 0 ; buf_head ( buf_head ) ; long len_head ; long len_data = 0 ; bool buf_head ; long len_head ; long len_full = 0 ; long len_full ; len_head ; long len_data = 0 ; buf_head ( buf, & buf_head ) ; len_head = 0 ; if (! buf_head ) { long len_full = 0 ; buf_head = 0 ; long len_full = 0 ; len_full = buf_head ; long len_head ; if (! buf_head ) { if (! buf_head ( buf_head ) ) { long len_full = 0 ; len_full = 0 ; len_full = max_full ; len_full = 0 ; len_full = len_full ; len_full = len_full ; len_full = 0 ; len_full = len_full ; long len_",0
1328,<S2SV_ModStart> if ( mode!= MODE_INVALID <S2SV_ModEnd> ) { r,0
1329,"<S2SV_ModStart> err_info ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> FALSE ; } return parse_netscreen_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart> err, buf, line <S2SV_ModEnd>, err,",0
1330,<S2SV_ModStart> * rq ) <S2SV_ModEnd> { int cpu <S2SV_ModStart> ) ; return ; <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1331,<S2SV_ModStart> ( void ),0
1332,<S2SV_ModStart> 0 ) { int i ; <S2SV_ModStart> = 0 ; } <S2SV_ModEnd> strdup ( cmd <S2SV_ModStart> ) ) ; return <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>,0
1333,"<S2SV_ModStart> RFP_KERNEL ) ; void * memset ( & resp, 0, sizeof ( struct rq ) ) ; <S2SV_ModStart> ) ) ; kfree ( rq ) ; <S2SV_ModStart> return ret ; }",0
1334,<S2SV_ModStart> ; if ( password == NULL ||,1
1335,,0
1336,"<S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd> ) +",0
1337,"<S2SV_ModStart> ext_dp -> icmp_length && ND_TTEST2 ( ext_dp -> icmp_ext_res, hlen )",0
1338,<S2SV_ModStart> dentry * dir <S2SV_ModEnd> ; int dir_has_key <S2SV_ModStart> 0 ; } <S2SV_ModEnd> spin_lock ( & <S2SV_ModStart> dir_has_key = ( d_inode ( dir ) -> i_crypt_info <S2SV_ModEnd>!= NULL ),1
1339,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1340,<S2SV_ModStart> ) ; return ARCHIVE_ERROR <S2SV_ModEnd> ; } if,0
1341,"<S2SV_ModStart> + i -> if ( i -> height ) { # if! defined ( i -> parent -> parent -> parent ) ) fprintf ( i -> parent -> parent -> parent -> parent ) ; # if! defined ( i -> width ) fprintf ( i -> parent -> parent -> parent ) ; # if! defined ( i -> parent -> parent -> parent -> parent -> width ) ) if ( i -> parent -> parent -> width ) fprintf ( i -> parent -> posY, i -> parent -> parent -> parent -> parent -> width ) ; # if! defined ( i -> parent -> width ) fprintf ( i -> posY, i -> parent -> parent -> parent -> parent -> parent -> width ) ; # if! defined ( i -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> width ) if ( i -> parent -> parent -> parent -> parent -> parent ) if! defined ( i -> parent -> parent ) fprintf ( i -> parent -> parent -> parent -> parent ) ; # if! defined ( i -> parent -> parent -> parent -> parent -> parent_FILE ) fprintf ( i -> parent -> parent -> parent -> parent -> parent -> parent ) ; # if! defined ( i -> parent -> parent ->",0
1342,<S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ),1
1343,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
1344,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> break ; } if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",0
1345,<S2SV_ModStart> ) ) { return NULL <S2SV_ModEnd> ; } <S2SV_null>,0
1346,"<S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_E",0
1347,"<S2SV_ModStart> ( packets + 257UL <S2SV_ModEnd>, image ->",1
1348,"<S2SV_ModStart> error ; } memset ( newserv, 0, sizeof ( struct service ) ) ;",1
1349,<S2SV_ModStart> u1_num ++ ; <S2SV_ModEnd> u8 * ps_dec,0
1350,<S2SV_ModStart> ) -> tp_value [ 0 ],1
1351,"<S2SV_ModStart> ""overflow <S2SV_blank> in <S2SV_blank> exec\\n"" ) ; ret = - EINVAL ;",0
1352,<S2SV_ModStart> char * size_t <S2SV_ModEnd> size ; int <S2SV_ModStart> = 0 ; size_t i = 0 ; for ( i = 0 ; i < 3 ; i ++ ) p ++ <S2SV_ModEnd> ; for ( <S2SV_ModStart> ++ ) { if (! ( * ) ) return 0 ; <S2SV_ModEnd> return 0 ; <S2SV_ModStart> ++ ) { if (! ( * ) ) return 0 ; <S2SV_ModEnd> return 0 ;,0
1353,"<S2SV_ModStart>, flags, <S2SV_ModEnd> ND_TCHECK2 ( *",0
1354,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1355,"<S2SV_ModStart> = 0 ; bool unix_peer_wakeup ( sk, sk ) ; <S2SV_ModStart> ) ; } unix_dgram_peer_wakeup ( sk ) <S2SV_ModEnd> ; if (",0
1356,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1357,"<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> c"", <S2SV_ModStart> y3 ) ; sendClean ( outputbuffer ) ;",0
1358,<S2SV_ModStart> ) ) ; goto out_skb <S2SV_ModEnd> ; skb =,0
1359,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> int ctx ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1360,"<S2SV_ModStart> PERF_COUNT_SW_EMULATION_FAULTS, 1",0
1361,<S2SV_ModStart> } if ( ctx -> terminated ||,0
1362,"<S2SV_ModStart> ) { int ret = pci_read_config_word <S2SV_ModEnd> ( cmd, <S2SV_ModStart> offset, value |= PCI_COMMAND_GUEST ; return ret <S2SV_ModEnd> ; } <S2SV_null>",0
1363,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ( ctx, <S2SV_ModEnd> va_list args )",0
1364,<S2SV_ModStart> ] ) ; free_uid ( fpl -> user ) ;,1
1365,<S2SV_ModStart> if (! ctx -> nb ) return - EINVAL ;,0
1366,"<S2SV_ModStart> -> dwc ; dwc3_gadget_del_and_unmap_request ( dep, req, status <S2SV_ModEnd> ) ; spin_unlock <S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
1367,<S2SV_ModStart> { char prefix = ( void ) - ( yyvsp [ ( 1 ) - ( yyvsp [ ( yyvsp [ ( 1 ]. String ) ]. String ) - ( yyvsp [ ( 1 ) ]. String ) - ( yyvsp [ ( yyvsp [ ( 1 ]. String ) ]. String ) ) ; ( yyval. String ) ; ( yyvsp [ ( yyvsp [ ( yyvsp [ ( yyvsp [ ( 3 ]. String ) ]. String ) - ( yyval. String ) ]. String ) ) ; ( yyval. String ) ; ( yyvsp [ ( yyvsp [ ( yyvsp [ ( yyvsp [ ( yyvsp [ ( yyvsp [ ( 3 ]. String ) ]. String ) ]. String ) ) ) ; ( yyval. String ) ; ( yyvsp [ ( yyvsp [ ( yyvsp [ ( 1 ]. String ) - ( yyvsp [ ( 1 ]. String ) ]. String ) ]. String ) ]. String ),0
1368,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1369,,0
1370,<S2SV_ModStart> { if ( ops -> type == NULL ) return - EINVAL ; if (,0
1371,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
1372,<S2SV_ModStart> sk_family!= AF_INET <S2SV_ModStart> ) ) ; <S2SV_ModEnd> struct sockaddr_in6,0
1373,<S2SV_ModStart> ext4_lblk_t lblk ; <S2SV_ModEnd> unsigned int blkbits <S2SV_ModStart> ) ; } <S2SV_ModEnd> ext4_inode_block_block_unlocked_dio ( ext4_dio ( inode,0
1374,<S2SV_ModStart> ) ; } free_bufs = NULL ;,0
1375,<S2SV_ModStart> return map ; map =,1
1376,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> int cpy ( <S2SV_ModStart> ) return 0 ; if ( ( ( c + 1 ) == '\\0' ) return - 1 ; <S2SV_ModStart> ) ) { if ( ( ( ( * c + 1 ) == '\\0' ) return - 1 ; <S2SV_ModStart> ) return 0 ; } <S2SV_ModStart> ) ) { if ( ( * cp == '\\0' ) return - 1 ; <S2SV_ModStart> ) return 1 ; } <S2SV_ModEnd> if ( ( ( ( ( len <S2SV_ModStart> ) ) { if (! cJSON_malloc ( ctxt, ctxt, c ) ) return - 1 ; } <S2SV_ModStart> ) ) { if (! ctxt ) return 0 ; } if ( ( ( isdigit ( c + 1 ) ) return - 1 ; <S2SV_ModStart> ) ) { if ( ( ( ( isdigit ( c + 1 ) ) ) return - 1 ; <S2SV_ModStart> ) ) { if ( * cp == 0 ) return 1 <S2SV_ModEnd> ; } <S2SV_null>",0
1377,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1378,<S2SV_ModStart> ; if ( <S2SV_ModEnd> size_left < 4,1
1379,"<S2SV_ModStart> int x ; int x <S2SV_ModEnd> max ( pix <S2SV_ModStart>, pix <S2SV_ModEnd>, j ; <S2SV_ModStart> i ] ; } <S2SV_ModEnd> return 0 ;",0
1380,<S2SV_ModStart> { int i ; int <S2SV_ModEnd> ubits = BN_num_bits <S2SV_ModStart> ( u ) ; int <S2SV_ModEnd> vbits = BN_num_bits <S2SV_ModStart> ( v ) ; if ( udp [ 0 ] == 0 ) return 0 ;,0
1381,"<S2SV_ModStart> best_address, 0,",0
1382,,0
1383,<S2SV_ModStart> = alloc ; size_t <S2SV_ModEnd> strindex = 0,1
1384,"<S2SV_ModStart>, msg -> readcount, msg -> nbits <S2SV_ModStart> ) ) ; if ( msg -> readcount > msg -> cursize ) { msg -> readcount = msg -> readcount = msg -> readcount ; return 0 ; }",0
1385,<S2SV_ModStart> int idx ; unsigned int count ; <S2SV_ModStart> -> count ; count = kcontrol -> count ; <S2SV_ModStart> ; idx < <S2SV_ModEnd> count ; idx,1
1386,<S2SV_ModStart> ; out1 : cancel_work_sync ( & dev -> kevent ) ; del_timer_sync ( & dev -> delay ) ;,1
1387,"<S2SV_ModStart> * m, int64_t <S2SV_ModEnd> out, int",0
1388,<S2SV_ModStart> == 0 ) { <S2SV_ModStart> problem_data ) ; },0
1389,<S2SV_ModStart> - 2 ; if ( plen < 0 ) return 0 ;,1
1390,"<S2SV_ModStart> acl ) { struct iattr ; retval = posix_acl_update_mode ( inode, & tiid, & acl ) ; if ( retval <S2SV_ModEnd> ) return 0 <S2SV_ModStart> iattr ) ; <S2SV_ModEnd> return 0 ;",0
1391,<S2SV_ModStart> header. types_size <S2SV_ModEnd> ) { continue,1
1392,<S2SV_ModStart> : case NPPVformValue : case NPPVpluginNativeAccessibleAtkPlugId,0
1393,<S2SV_ModStart> char buf [ size_t <S2SV_ModEnd> ] ; size_t <S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> = 0 ; char,0
1394,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1395,"<S2SV_ModStart> rc, const VP9EncoderConfig_COMP * cpi <S2SV_ModEnd> ) { const <S2SV_ModStart> i, cpi -> common ; if ( cpi -> common == NULL ) return ; if ( cpi -> active_key == KEY_FRAME_FRAME ) return ; } <S2SV_ModEnd> if ( cpi",0
1396,"<S2SV_ModStart> ( interface, ENC28J600_EIR_LINKIF <S2SV_ModEnd> ) ; if",0
1397,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1398,<S2SV_ModStart> <= 0 && <S2SV_ModEnd> ND_TTEST ( *,0
1399,"<S2SV_ModStart>, NULL, <S2SV_ModEnd> data ) ;",1
1400,<S2SV_ModStart> status ) ; <S2SV_ModEnd> } else if,0
1401,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
1402,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1403,,0
1404,<S2SV_ModStart> { uint32_t <S2SV_ModEnd> ; if ( <S2SV_ModStart> } if ( u >= max &&,0
1405,,0
1406,<S2SV_ModStart> -> i_mmap_sem ) ; init_sem ( & ei -> i_mmap_sem ) ;,0
1407,<S2SV_ModStart>! thresholds ) ; if (! thresholds -> primary ) goto unlock <S2SV_ModStart> ( ) ; unlock :,1
1408,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct ion_handle * <S2SV_ModStart> ; handle = ion_handle_get_by_id_nolock ( client, id <S2SV_ModEnd> ) ; mutex_unlock <S2SV_ModStart> ; return handle <S2SV_ModEnd> ; } <S2SV_null>",1
1409,"<S2SV_ModStart> cpi, vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> 6 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 6 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 6 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 6 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 6 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
1410,<S2SV_ModStart> : if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> : if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; },1
1411,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context ->,0
1412,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1413,<S2SV_ModStart> -> mb ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,0
1414,"<S2SV_ModStart> ( interface, ENC624J600_EIR * ENC624J600_EIR, ENC624J600_EIR <S2SV_ModEnd> ) ; size <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_EIR_LINKIF <S2SV_ModEnd> ) ; size <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_EIR_LINKIF <S2SV_ModEnd> ) ; size <S2SV_ModStart> ( interface, ENC624J600_EIR_LINKIF <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_EIR_LINKIF <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EIR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_PKTIF <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_PKTIF <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EIR_PKTIF <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J",0
1415,<S2SV_ModStart> ] == 0x01 && i < gemsafe_cert_max,1
1416,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
1417,<S2SV_ModStart> <S2SV_null> <S2SV_null> 0,0
1418,"<S2SV_ModStart> ( vma, vma -> fbdev ) <S2SV_ModEnd> ; vma ->",0
1419,<S2SV_ModStart> } if (! fd &&,0
1420,<S2SV_ModStart> ++ ) { if ( n >= 4 ) return 0 ; <S2SV_ModStart> 1 ) { if ( n >= 4 ) return 0 ; } return 0 ;,0
1421,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
1422,<S2SV_ModStart> ; if ( <S2SV_ModEnd> arg >= cdi,1
1423,<S2SV_ModStart> ) ; if ( err == NULL ) return - EINVAL ; if (,0
1424,<S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1425,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> char * <S2SV_ModStart> char * bin, int <S2SV_ModEnd> char char <S2SV_ModStart> char * dir <S2SV_ModEnd> = ( char <S2SV_ModStart> char * d_len ; if ( len < 2 ) return 0 <S2SV_ModEnd> ; ND_TCHECK_16BITS ( char <S2SV_ModStart> * ) { if ( umode == 0 ) return 0 ; <S2SV_ModEnd> char * <S2SV_ModStart> if (! <S2SV_ModStart> + 1 ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> * ) return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
1426,"<S2SV_ModStart>, i ; if (! ( s -> token ) ) { av_log ( s, AV_LOG_ERROR, ""trns <S2SV_blank> IHDR\\n"" ) ; return AVERROR_INVALIDDATA ; } if (",0
1427,<S2SV_ModStart> command ) ; <S2SV_ModEnd> return 0 ;,0
1428,<S2SV_ModStart> } dt -> proto = IP_GET_IPPROTO ( p ) ; dt ->,1
1429,"<S2SV_ModStart> ( interface, KSZ8851_ISRXCHG <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & ENC624J60_EINVAL <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J60_EINVAL <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J60_EIE <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & ENC624J60_EIE_RXCHANGE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J60_EIE <S2SV_ModEnd> ) ; return 0 <S2SV_ModStart> ( interface, ENC624J600_EIE <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J60_EIE_PKTIE <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J60ReadReg ( interface, ENC624J60_EINVAL <S2SV_ModEnd> ) ; if",0
1430,"<S2SV_ModStart> const node * n0, bool <S2SV_ModEnd> is_async ) { <S2SV_ModStart> is_async ) { const node * const n = is_async? CHILD ( n, 1 ) : n0 ; <S2SV_ModStart>, NULL, n0 <S2SV_ModEnd> -> n_col_offset,",0
1431,<S2SV_ModStart> out ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1432,"<S2SV_ModStart> ( AUDIT_APPARMOR_DENIED, __aa_current_profile ( ), GFP_KERNEL, & sa, NULL <S2SV_ModEnd> ) ; }",1
1433,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1434,<S2SV_ModStart> ; if ( <S2SV_ModEnd> < 0 ) {,0
1435,"<S2SV_ModStart>, xmi_data, xmi_size,",1
1436,<S2SV_ModStart> size_t total_len ; struct iov_iterr ; <S2SV_ModStart> ; size_t ret = 0 ; size_t total_len = 0 ; <S2SV_ModStart> goto out ; <S2SV_ModEnd> if ( buf,0
1437,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits <S2SV_ModStart> ) ; } \\\n} <S2SV_ModEnd> IndexPacket index ; <S2SV_ModStart> ++ ) { next_pixel = MagickFalse ; displacement = 1 ; <S2SV_ModStart> -= MaxHashTable ; if ( k < 0 ) continue <S2SV_ModEnd> ; if (,1
1438,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1439,<S2SV_ModStart> ) ; goto cleanup <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto cleanup <S2SV_ModEnd> ; } hdl <S2SV_ModStart> ) ; goto cleanup <S2SV_ModEnd> ; } if <S2SV_ModStart> hdl ) { if ( hdl -> sm_hdl ) { if ( hdl -> sm_hdl -> c_hdl -> sm_hdl ) { if ( hdl -> c_hdl -> c_path [ 0 ] ) { if ( hdl -> c_hdl -> c_hdl -> fe_hdl -> c_hdl -> c_path [ 0 ] ) ; } if ( hdl -> c_hdl -> c_hdl -> c_path [ 0 ] ) { if ( hdl -> c_hdl -> c_hdl -> c_hdl -> fe_hdl -> c_path [ 0 ] ) ; } if ( hdl -> c_hdl -> c_hdl -> c_path ) { if ( hdl -> c_hdl -> c_hdl -> c_hdl ) { if ( hdl -> c_hdl -> c_path [ 0 ] ) { if ( hdl -> c_hdl -> c_hdl -> c_hdl -> c,0
1440,"<S2SV_ModStart> numcmpts ; size_t max_samples ; size_t max_samples ; image_samples = 0 ; <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ) ) { jas_eprintf ( ""image <S2SV_blank> size <S2SV_blank> to <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %ld\\n"", optstrsize ( fmtname, optstr ), optstr ( fmtid ), JAS_DBGLOG ( 10 ), ( 10 ) ) ; if (! ( fmtname ) ) { jas_eprintf ( ""error: <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %ld <S2SV_blank> %ld\\n"", fmtname <S2SV_ModEnd>, fmtname, <S2SV_ModStart>, fmtname, JAS_DBGLOG ( ""image <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %ld <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %ld\\n"", fmtname <S2SV_ModEnd>, fmtname <S2SV_ModStart>, fmtname, JAS_DBGLOG ( 10 ), JAS_FAILURE <S2SV_ModEnd> ) ; } <S2SV_ModStart> jas_image_image_image_image_image_name ( fmtname <S2SV_ModEnd>, fmtid )",0
1441,<S2SV_ModStart> ) ) ; return false,0
1442,"<S2SV_ModStart> ""localhost <S2SV_blank> "" ) ; <S2SV_ModEnd> if ( ret",0
1443,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1444,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } else {,0
1445,<S2SV_ModStart> 2 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,1
1446,"<S2SV_ModStart>, ret = 0 <S2SV_ModEnd> ; if (",0
1447,<S2SV_ModStart> -> fc_data ; spin_lock ( & req ) ; <S2SV_ModStart> ) ; },0
1448,<S2SV_ModStart> else { return false <S2SV_ModEnd> ; } case,1
1449,<S2SV_ModStart> sock -> sk <S2SV_ModEnd> ; memset (,0
1450,<S2SV_ModStart> (! handle ||! SecIsValidHandle ( handle ),1
1451,,0
1452,"<S2SV_ModStart>, new_dentry, false",0
1453,<S2SV_ModStart> OP_EXACT1 ) ; <S2SV_ModEnd> DATA_ENSURE ( 1 <S2SV_ModStart> ++ ; s <S2SV_ModEnd> ++ ; MOP_OUT,1
1454,"<S2SV_ModStart> { vpx_writer <S2SV_ModEnd> ( xd,",0
1455,<S2SV_ModStart> = - EINVAL <S2SV_ModEnd> ; if (,1
1456,"<S2SV_ModStart> mntent, path, rootfs",1
1457,<S2SV_ModStart> = hash ; sr -> fd_is_fdt = MK_TRUE ;,1
1458,<S2SV_ModStart> user_keyring ) ; if ( test_bit ( KEY_FLAG_UID_KEYRING ) ) { <S2SV_ModStart> goto out ; } keyring_free ( keyring ) ;,0
1459,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> -> common ; MACROBLOCK * const x = & td -> mb ; <S2SV_ModStart> x = & td <S2SV_ModEnd> -> mb ;",0
1460,<S2SV_ModStart> NETIF_F_CSUM | NETIF_F_SG <S2SV_ModEnd> ; if (,0
1461,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1462,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> * sizeof ( <S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> ; pixels =",0
1463,"<S2SV_ModStart> ( buf, size_t <S2SV_ModEnd> len ) )",0
1464,<S2SV_ModStart> ) ) ; if ( pSize < 0 ) return AVERROR_INVALID ;,0
1465,<S2SV_ModStart> ( fa ) ; if ( fa ) return fa ; <S2SV_ModEnd> } break ;,0
1466,,0
1467,<S2SV_ModStart> ; if ( opts == 0 ||,0
1468,<S2SV_ModStart> ; if ( ( vpx_codec_alg_priv_t * ) flags & ctx ->,0
1469,"<S2SV_ModStart>, sizeof ( double <S2SV_ModEnd> ) ) ;",1
1470,<S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1471,"<S2SV_ModStart>, flags ; ND_TCHECK2 ( tptr [ 0 ], 5 ) ; <S2SV_ModStart> tlen = len <S2SV_ModEnd> ; ND_PRINT (",0
1472,"<S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd> ) ; }",0
1473,<S2SV_ModStart> ) { memcpy <S2SV_ModEnd> ( & src,0
1474,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1475,<S2SV_ModStart> int m ; if ( n < 0 || n >= 32 ) { return EOF ; } <S2SV_ModEnd> assert (!,0
1476,"<S2SV_ModStart> iovec, compat, & iter <S2SV_ModStart> len, iovec, & iter",0
1477,<S2SV_ModStart> } if ( ptr - c -> rcurr > 1024 &&,0
1478,<S2SV_ModStart> goto err ; if (! dev -> desc.,0
1479,"<S2SV_ModStart> ( interface, desc -> bNumEndpoints <S2SV_ModEnd> ) ; if",0
1480,<S2SV_ModStart> ; ue -> card = 0 ; ue ->,0
1481,"<S2SV_ModStart> client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; return 0 ; } if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) { exit_client ( client_p, client_p, client_p, ""Malformed <S2SV_blank> AUTHENTICATE""",1
1482,<S2SV_ModStart> OpMask ) ; <S2SV_ModEnd> if ( ctxt <S2SV_ModStart> -> _eip ; done :,0
1483,<S2SV_ModStart> lock ) ; <S2SV_ModEnd> return error ;,0
1484,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; random_ether_addr (,1
1485,"<S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( input,",0
1486,"<S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_MIX2 <S2SV_ModEnd>, interface -> <S2SV_ModStart> ( interface, ENC624J600_MICMD <S2SV_ModEnd>, interface -> <S2SV_ModStart> ( interface, ENC624J600_MICMD <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_MICMD <S2SV_ModEnd>, interface -> <S2SV_ModStart> ( interface, ENC624J600_MICMD <S2SV_ModEnd>, interface -> <S2SV_ModStart> ( interface, ENC624J600_MICMD <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_MICMD <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_EIR, ENC624J600_PKTIF <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_MACON1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_ECON1 <S2SV_ModEnd>, interface,",0
1487,"<S2SV_ModStart> size_t len ; memset ( header, 0, sizeof ( header ) ) ;",0
1488,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
1489,"<S2SV_ModStart> ) ) ) { applog ( LOG_WARNING, ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> header <S2SV_blank> to <S2SV_blank> header <S2SV_blank> convert <S2SV_blank> got <S2SV_blank> %s"", __func__, header ) ; pool_failed ( pool ) ; return false ; } <S2SV_ModEnd> cb1 = (",0
1490,<S2SV_ModStart> -> get_alg_priv ( ctx ) <S2SV_ModEnd> ) return 0,0
1491,<S2SV_ModStart> case EXIT_REASON_VMON : case EXIT_REASON_INVEPT :,1
1492,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> vp9_rd_set_filter_filter_filter_init ( VP9_COMP <S2SV_ModStart> { VP9_COMP * const cm = & cpi -> td. use_sf -> common. mb. mb. mb. mb. mb. mbmi ; <S2SV_ModEnd> sf -> <S2SV_ModStart> frame = 1 ; <S2SV_ModEnd> frame = & cm <S2SV_ModStart> frame_type == KEY_FRAME_FRAME_FRAME <S2SV_ModEnd> ; sf -> <S2SV_ModStart> ; vp9f -> <S2SV_ModEnd> ; sf -> <S2SV_ModStart> ; if ( cm -> <S2SV_ModEnd> frame == KEY_FRAME <S2SV_ModStart> frame == KEY_FRAME ) { <S2SV_ModStart> { sf -> <S2SV_ModEnd> frame = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> cpi -> <S2SV_ModEnd> ; sf -> <S2SV_ModStart> ; sf -> <S2SV_ModEnd> frame = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> ; sf -> <S2SV_ModStart> frame_bandwidth = cm -> <S2SV_ModEnd> ; sf -> <S2SV_ModStart> { sf -> <S2SV_ModEnd> ; sf -> <S2SV_ModStart> frame_bandwidth = cm -> <S2SV_ModStart> ; sf -> <S2SV_ModEnd> ; sf -> <S2SV_ModStart> ; sf -> <S2SV_ModEnd> xd. <S2SV_ModEnd> ; sf -> <S2SV_ModStart> ;,0
1493,"<S2SV_ModStart> ), length <S2SV_ModEnd> ) ; if",0
1494,"<S2SV_ModStart> compat_timex tx32 ; memset ( txc, 0, sizeof ( struct timex ) ) ;",1
1495,"<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1, 0 )",0
1496,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1497,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1498,"<S2SV_ModStart> ( c, STR ( ch ) <S2SV_ModEnd> ) ; if",0
1499,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> vp9_null> static <S2SV_ModStart> 0 ) { if ( vpx_codec_ctx_t * const VPX_C_ERROR ( vpx_SV_null> <S2SV_null>,0
1500,<S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1501,<S2SV_ModStart> = get_t ( s ),0
1502,<S2SV_ModStart> return KADM5_MASK ; if ( mask & KADM5_DATA ) return 0 ; <S2SV_ModStart> ) return 0 ; if ( mask & KADM5_POLICY ) return 0 ;,0
1503,<S2SV_ModStart> frame -> data [ plane ] && frame -> linesize <S2SV_ModStart> [ plane ] && frame -> linesize [ plane ],1
1504,"<S2SV_ModStart> ( mb,",0
1505,,0
1506,,1
1507,"<S2SV_ModStart> x, 0, 0",0
1508,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 0 ;,0
1509,"<S2SV_ModStart> int fd ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1510,,0
1511,<S2SV_ModStart>  + 1,0
1512,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_decode ( NSC_CONTEXT,0
1513,<S2SV_ModStart> while ( offset > 0 && offset <S2SV_ModStart> < end_offset ) { <S2SV_ModStart> hf_keybuffer ) ; },1
1514,<S2SV_ModStart> out_free ; } if (! str ) { ret = - EINVAL ; goto out_free ; },0
1515,"<S2SV_ModStart> cpi, const VP9EncoderConfig <S2SV_ModEnd> * const oxcf <S2SV_ModStart> * rc -> avg_frame_bandwidth <S2SV_ModEnd> ) { int <S2SV_ModStart> rc -> avg_frame_bandwidth <S2SV_ModEnd> = cpi -> avg_frame_bandwidth <S2SV_ModEnd> ; const int <S2SV_ModStart> = ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * oxcf <S2SV_ModStart> ; if ( rc -> avg_frame_bandwidth > 1 ) return rc -> avg_frame_bandwidth <S2SV_ModEnd> -> avg_frame_bandwidth * <S2SV_ModStart> ( cpi -> avg_frame_bandwidth <S2SV_ModEnd> ) *",0
1516,<S2SV_ModStart> X86_EFLAGS_RF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1517,"<S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
1518,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_read_bit <S2SV_ModEnd> ( r,",0
1519,<S2SV_ModStart> op + OSPF6HDR_LEN ) ; ND_TCHECK_32BITS ( & hellop -> hello_options,1
1520,<S2SV_ModStart> { if ( datalen!= 1 ) return - EINVAL ; if (,1
1521,<S2SV_ModStart> rc ) { struct task_struct * <S2SV_ModEnd> task = kbd <S2SV_ModStart> ; if ( rc -> uwbd. task ) { rc -> uwbd. task = NULL ; <S2SV_ModStart> wbd. task = NULL <S2SV_ModEnd> ; } <S2SV_null>,0
1522,"<S2SV_ModStart> : # line 101 ""hex_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ). re_node ) ; } # line 103 ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 107 ""hex_grammar.c"" { yr_re_node_destroy ( ( * yyvaluep ). re_node ) ; } # line 1048 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 103 ""hex_grammar.c"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ). re_node ) ; } # line 1042 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 103 ""hex_grammar.c"" { yr_re_node_destroy ( ( ( ( * yyvaluep ) ). re_node ). re_node ) ; } # line 1048 <S2SV_ModEnd> ""hex_grammar.c"" { yr_re_node_node_destroy ( ( ( * yyvaluep ). re_node ). re_node ) ; } # line 10",0
1523,,0
1524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> int mi_col ; <S2SV_ModStart> int mi_col ; BLOCK_SIZE bsize = vp9_get_block ( xd -> plane [ 0 ], BLOCK_8X8 ) ; const MACROBLOCK_SIZE bsize = & x -> plane [ 0 ] ; tran_low_t * const int bsize = & x -> plane [ 0 ] ; BLOCK_8 * const int64_t * const int64_t ; const int bsize = xd -> skip_context [ 0 ] ; tran_low_t <S2SV_ModEnd> * const int <S2SV_ModStart> block ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) return ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( xd -> flags & VP9_HIGHBITDEPTH ) return ; # if CONFIG_VP9_HIGHBITDEPTH const int64_t, xd -> flags &",0
1525,<S2SV_ModStart> -> p ; if ( p -> selFlags & SF_View ) return 0,0
1526,<S2SV_ModStart> shm_perm ) ; if ( shp -> shm_file == NULL ) { ipc_unlock_object ( & shp -> shm_perm ) ; err = - EIDRM ; goto out_unlock ; },0
1527,"<S2SV_ModStart> * credcnt, fmode_t <S2SV_ModEnd> ) ; switch",0
1528,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1529,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1530,<S2SV_ModStart> : case NPNVSupportsWindowless : case NPNVprivateModeBool : case NPNVsupportsAdvancedKeyHandling,1
1531,<S2SV_ModStart> msg -> msg_namelen = 0 ;,0
1532,"<S2SV_ModStart> ( ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, 0 )",0
1533,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1534,"<S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd> ) +",0
1535,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * const si,0
1536,<S2SV_ModStart> reset ) ; <S2SV_ModEnd> if ( q,0
1537,<S2SV_ModStart> s ) { uint32 length ; struct stream packet = * s <S2SV_ModEnd> ; ber_parse_header (,0
1538,<S2SV_ModStart> RETURN_FALSE ; } <S2SV_ModEnd> if (!,0
1539,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1540,<S2SV_ModStart> ( buf ) { <S2SV_ModEnd> return NULL ;,0
1541,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ; <S2SV_ModStart> return 0 ; <S2SV_ModEnd> if (!,0
1542,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1543,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,0
1544,"<S2SV_ModStart> -> seg ; memset <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( seg,",0
1545,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 0 ) return - 1 ; const <S2SV_ModStart> 0 ) { const int get_attr_id ( ) ; <S2SV_ModStart>, & data, <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ) ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> 0 ) { <S2SV_ModStart> 0 ) ; return 0 ; <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return 0 ; <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return 0 ;",0
1546,<S2SV_ModStart> mode ) ; <S2SV_ModEnd> if (!,0
1547,<S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 4 ; <S2SV_ModEnd> break ; },0
1548,<S2SV_ModStart> ) { memcpy <S2SV_ModEnd> ( & cpi,0
1549,"<S2SV_ModStart> ) ; } smb_ofile_flush <S2SV_ModEnd> ( sr, <S2SV_ModStart> f_mutex ) ; smb_ofile_flush <S2SV_ModEnd> ( sr,",1
1550,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> char * <S2SV_ModStart> char * bin, int <S2SV_ModEnd> char char <S2SV_ModStart> char * dir <S2SV_ModEnd> = ( char <S2SV_ModStart> char * d_len ; if ( len < 2 ) return 0 <S2SV_ModEnd> ; ND_TCHECK_16BITS ( char <S2SV_ModStart> * ) { if ( umode == 0 ) return 0 ; <S2SV_ModEnd> char * <S2SV_ModStart> if (! <S2SV_ModStart> + 1 ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> * ) return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
1551,"<S2SV_ModStart> ; if ( * cp == '\\0' || <S2SV_ModEnd> strchr ( cp <S2SV_ModStart> )!= NULL || <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> ( cp, ""."" ) == 0 || strcmp ( cp, <S2SV_ModStart> ) == 0 <S2SV_ModEnd> ) { run_err",1
1552,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> char * output = <S2SV_ModEnd> ; char <S2SV_ModStart> char * temp = strlen ( char * <S2SV_ModStart> char * out <S2SV_ModEnd>, char * <S2SV_ModStart> char * out ) { const char * <S2SV_ModStart> char * out ; char * out = strlen ( char * out ) ; if ( <S2SV_ModEnd> ( strlen ( <S2SV_ModStart> ) ) { if (! strlen ( p ) ) return 0 <S2SV_ModEnd> = '\\0' ; <S2SV_ModStart> = '\\0' ; p = strlen ( p ) ; <S2SV_ModStart> + 1 ; p = strlen ( p ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( p ) == '\\n"" ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( strlen ( p ) <S2SV_ModEnd> + 1 ) <S2SV_ModStart> } else if (! <S2SV_ModStart> ( p ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( p < 1 ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( p ) { <S2SV_ModStart> } else { if (! <S2SV_ModStart> ( p ) return 1 <S2SV_ModEnd> ; } else <S2SV_ModStart> } else if ( <S2SV_ModStart> ( strlen ( p )!= '\\n"" ) { out = strlen ( p + 1 ) ; <S2SV_ModStart> ( buf ) ; } else if (! str",0
1553,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : ms -> elf_notes_max = * ( const size_t * ) val ; return 0 ;,0
1554,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int ip_options_select_id ( struct ip_options * ip_rcu <S2SV_ModEnd>, ip_hashr,",0
1555,"<S2SV_ModStart> } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lineno, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""lineno\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> expr"" ) ; return 1 ; } else <S2SV_ModEnd> { int res <S2SV_ModStart> int res ; res = obj2ast_int ( tmp, & tmp, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( tmp == NULL || tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> expr"" ) ; return 1 ; } else { int res <S2SV_ModEnd> ; res =",0
1556,"<S2SV_ModStart> void write_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_prob <S2SV_ModEnd> * probs )",0
1557,"<S2SV_ModStart> ctl -> pw, "".chfn""",1
1558,<S2SV_ModStart> { if ( max_length < sizeof ( struct ieee80211_radiotap_header ) ) return - EINVAL ; if (,0
1559,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int err ; <S2SV_ModStart> -> e -> len ; ret = - EINVAL ; if (! err ) goto out_err2SV_null>,0
1560,"<S2SV_ModStart>, NULL, false",0
1561,<S2SV_ModStart> return ; } if ( input <= 0.0 &&,0
1562,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
1563,<S2SV_ModStart> ) ; return cmd <S2SV_ModEnd> ; } <S2SV_null>,0
1564,"<S2SV_ModStart> else if ( g_str_has_prefix <S2SV_ModEnd> ( arg,",0
1565,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1566,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> vp9_null> <S2SV_null>,0
1567,<S2SV_ModStart> ; if ( fd < 0 ||,0
1568,<S2SV_ModStart> connection ) ; <S2SV_ModEnd> if ( client,0
1569,<S2SV_ModStart> = fpl -> user ; fpl -> user = NULL ;,0
1570,<S2SV_ModStart> opt_len ; struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt ) ; opt = rcu_dereference_protected ( inet -> opt ) <S2SV_ModEnd> ; if (,0
1571,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1572,"<S2SV_ModStart> ; vpx_codec_alg_priv_t * ctx = 0 ; if ( vpx_codec_alg_priv_t * ) memset ( & ctx -> flags, 0, sizeof ( vpx_codec_alg ) ) ) return 0 ; if (",0
1573,<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ),0
1574,<S2SV_ModStart> ) ; struct mnt_namespace * ns ; struct <S2SV_ModStart> mnt ) ; ns = dest_mnt <S2SV_ModEnd> ; if (,0
1575,"<S2SV_ModStart>, & len, 0",1
1576,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = _mm_set1_epi16 ( ( int16_t ),0
1577,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1578,<S2SV_ModStart> if ( buf = 0,0
1579,"<S2SV_ModStart> byte * fout, int maxoffset <S2SV_ModStart> NYT, fout, maxoffset <S2SV_ModStart> NULL, fout, maxoffset",1
1580,"<S2SV_ModStart> * cpi, ThreadData * td, MACROBLOCK_SIZE bsize, MACROBLOCK_SIZE bsize, int mi_row, int mi_row, int mi_row, RD_COST * const rd -> mbmi. mbmi_row, BLOCK_SIZE bsize ) { const mbmi_ext = & cpi -> mbmi. mbmi_ext ; MACROBLOCKD * const xd = & cpi -> mbmi_row * const xd -> mbmi_cols + mi_col ; const mbmi_col = & cpi -> mbmi_row * const xd -> mbmi. mbmi_col ; <S2SV_ModStart> = cpi -> mbmi_col ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH ) { vp9_high_variance ( xd, xd -> plane, xd, xd -> plane, xd -> plane, xd -> plane, xd ) ; } # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBIT",0
1581,"<S2SV_ModStart> ( interface, desc -> bNumEndpoints <S2SV_ModEnd> ) ; if",0
1582,"<S2SV_ModStart> des [ 0 <S2SV_ModEnd> ] ; struct crypto_des <S2SV_ModStart> * tfm_des, crypto_des ) ; if (! tfm_des ) { crypto_cipher ( tfm_des ) ; crypto_des = 0 ; crypto_des = crypto_cipher ( tfm_des ) ; crypto_des = 0 ; crypto_des = crypto_des ; crypto_des = crypto_des ( tfm_des ) ; crypto_des = crypto_des ; if ( crypto_des < 0 ) { crypto_des < 0 ; crypto_cipher ( tfm_des ) ; crypto_des = 0 ; crypto_des = 0 ; crypto_des = crypto_desBytes ( tfm_des, 0, 0, sizeof ( tfm_des ) ; return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
1583,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1584,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1585,<S2SV_ModStart> i > pos + delta <S2SV_ModStart> off + 1 <= pos + delta <S2SV_ModEnd> ) insn ->,1
1586,<S2SV_ModStart> case EXIT_REASON_INVEPT : case EXIT_REASON_INVVPID :,1
1587,<S2SV_ModStart> } if ( (,0
1588,<S2SV_ModStart> ; client -> data = NULL ; if (,0
1589,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
1590,"<S2SV_ModStart> ++ r ; if <S2SV_ModEnd> ( pow ( <S2SV_ModStart>, dim ) <= entries ) return - 1 ; if <S2SV_ModEnd> ( ( int <S2SV_ModStart> dim ) ) > entries ) return - 1 <S2SV_ModEnd> ; return r",1
1591,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> x ), MagickMin <S2SV_ModEnd> ( 4,",0
1592,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( skb ),0
1593,<S2SV_ModStart> RETURN_FALSE ; } <S2SV_ModEnd> if (!,0
1594,"<S2SV_ModStart> { TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, MSG_WAITEM )",0
1595,"<S2SV_ModStart> c ) { sprintf ( "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.4f <S2SV_blank> %12.3f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.3f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.3f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.3f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f <S2SV_blank> %12.4f",0
1596,"<S2SV_ModStart> cfg ) { struct stat st ; FILE * file = NULL ; int fd = - 1 ; <S2SV_ModStart> } else { file = open ( file, O_RDWRONLY | O_APPEND | O_CLOEXEC | O_NOFOLLOW | O_NOFOLLOW | O_NOCTTY ) ; if ( fd!= NULL ) { fd = - 1 ; return NULL ; } <S2SV_ModEnd> if ( fd <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( fd",0
1597,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! f2fs_readonly (,1
1598,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
1599,"<S2SV_ModStart>, y, <S2SV_ModEnd> ) ; }",0
1600,,0
1601,<S2SV_ModStart> user -> user ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1602,<S2SV_ModStart> ) { memcpy <S2SV_ModEnd> ( cpi ->,0
1603,<S2SV_ModStart> == ARPHRD_ETHER ) { <S2SV_ModStart> ether_setup ) ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; },1
1604,"<S2SV_ModStart> * data ; struct stream packet = * s ; <S2SV_ModStart> ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } if (",1
1605,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return 0 ;,0
1606,<S2SV_ModStart> { if ( l == NULL ) break ; if (,1
1607,<S2SV_ModStart> { if ( ( portBYTE_ALIGNMENT_MASK ) && ( xWantedSize & portBYTE_ALIGNMENT_MASK ) > xWantedSize ) { xWantedSize = 0 ; } else { xWantedSize = 0 ; } else { xWantedSize += ( portBYTE_ALIGNMENT_MASK ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT_MASK ) & portBYTE_ALIGNMENT_MASK ) ; } else { xWantedSize = 0 ; } else { xWantedSize = 0 ; } else { xWantedSize = 0 ; } } if ( ( ( ( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) & portBYTE_ALIGNMENT_MASK ) & portBYTE_ALIGNMENT_MASK ) ) == 0 ) { xWantedSize = 0 ; } else { xWantedSize = 0 ; } else { xWantedSize = 0 ; } else { xWantedSize = 0 ; } } if ( ( ( portBYTE_ALIGNMENT_MASK > xWantedSize ),0
1608,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1609,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1610,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpAcc ( TIFF <S2SV_ModStart> cc ) ; if <S2SV_ModEnd> ( cc %,0
1611,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1612,"<S2SV_ModStart>, args -> rmtvaluelen <S2SV_ModEnd> ) ; if",0
1613,"<S2SV_ModStart> ( * bp, u_len <S2SV_ModEnd> ) ) ;",0
1614,<S2SV_ModStart> { uint16 bitspersample = 1,0
1615,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1616,<S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> coef_probs [ tx_size,0
1617,"<S2SV_ModStart> ( fname, TEMP_FAILURE_RETRY (",0
1618,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 2 ] = 0xe ; state -> data [ 1 ] = 0x0 ; state -> data [ 2 ] = 0x0 ; if ( dvb_usb_generic_rw ( d, state -> data, 3, state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 2 ] = 0x87 ; state -> data [ 2 ] = 0x86 ; state -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> ( d, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart> ""command <S2SV_blank> failed."" ) ; state -> data <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0xe ; state -> data [ 1 ] = 0x80 ; state -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 2 ] = 0x83 ;",0
1619,<S2SV_ModStart> ) return 0 <S2SV_ModEnd> ; if (,0
1620,"<S2SV_ModStart> ( vpx_codec_alg_priv_t ctx <S2SV_ModEnd>, sizeof (",0
1621,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> vp9_stride_uv8 ( const <S2SV_ModStart> struct macrostride, const tran_low_t * mbmi, int8x8, int8, int64_t * src_stride, int64_t * src_stride, int64_t * out_stride, int64_t * src_stride, vpx_row, uv_stride, int64_t * dst_stride, <S2SV_ModStart> struct macroblock ) ; # if CONFIG_VP9_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & vp9_buf -> flags ) ) { vp9_high_high_buffer ( xd, & src_stride, NULL, NULL, NULL, NULL, & sse, NULL ) ; vpx_highbd_8x8x8, NULL, NULL, NULL, NULL ) ; return vpx_8_8_8x8x8",0
1622,<S2SV_ModStart> ; bufp += 2 <S2SV_ModEnd> ; if (,0
1623,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1624,<S2SV_ModStart> status ) ; switch ( task -> tk_status ) { case - EACCES : goto done ; default :,0
1625,<S2SV_ModStart> ) { struct iinfo * inode * iinfo <S2SV_ModEnd> ; int i <S2SV_ModStart> ) goto out ; struct iinfo * inode = inode -> i_len <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( inode -> i_len > bs ) goto out ; if ( inode -> i_len ) goto out ; if ( inode -> i_len > bs ) { err = - EIO ; goto out ; } if ( inode -> i_len > bs ) goto out ; if ( udf_error ( inode ) goto out ; if ( inode -> i_sb -> i_len > inode ) goto out ; if ( inode -> i_len && iinfo -> i_len > bs ) goto out ; } if ( inode -> i_len > bs ) goto out ;,0
1626,"<S2SV_ModStart>, n ) ; if ( w == NULL ) return 0",1
1627,"<S2SV_ModStart>, len + 8",0
1628,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> int i ; <S2SV_ModStart> int i ; vpx_writer <S2SV_ModEnd> * const tile_info <S2SV_ModStart> int i ; vpx_write_literal ( & tile_info -> tile_data, <S2SV_ModEnd> ) ) ; <S2SV_ModStart> int i ; vpx_writer <S2SV_ModEnd> ( & tile_info <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( & tile_info <S2SV_ModStart> ) ) ; vpx_write <S2SV_ModEnd> ( w",0
1629,<S2SV_ModStart> = 0 ; # ifdef LIBRAW_MAX ; # endif,0
1630,<S2SV_ModStart> ) ; if ( err == NULL ) return - EINVAL ; if (,0
1631,"<S2SV_ModStart> int seg ; memset <S2SV_ModEnd> ( seg, <S2SV_ModStart> i ] ; memset <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( seg -> <S2SV_ModStart> 0 ) ; memset <S2SV_ModEnd> ( seg ->",0
1632,<S2SV_ModStart> ( void ) return - EINVAL ; if (,0
1633,"<S2SV_ModStart> ( void ) TIFFGetFieldDefaulted <S2SV_ModEnd> ( in,",1
1634,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
1635,,0
1636,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1637,,0
1638,<S2SV_ModStart> [ 1 ] ; <S2SV_ModEnd> return 0 ;,0
1639,<S2SV_ModStart> ; ps_dec -> u2_total_mbs_coded = 0 ; ps_dec ->,0
1640,<S2SV_ModStart> -> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock,0
1641,<S2SV_ModStart> ; if ( key_is_key <S2SV_ModEnd> ( key ),0
1642,"<S2SV_ModStart> ) ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1643,<S2SV_ModStart> { if (! ret ||,0
1644,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 2 ] = 0xe ; state -> data [ 1 ] = 0x0 ; state -> data [ 2 ] = 0x0 ; if ( dvb_usb_generic_rw ( d, state -> data, 3, state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 2 ] = 0x87 ; state -> data [ 2 ] = 0x86 ; state -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> ( d, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart> ""command <S2SV_blank> failed."" ) ; state -> data <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0xe ; state -> data [ 1 ] = 0x80 ; state -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 2 ] = 0x83 ;",0
1645,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> int char *,0
1646,<S2SV_ModStart> g ) { memcpy <S2SV_ModEnd> ( g -> <S2SV_ModStart> ) ; },0
1647,<S2SV_ModStart> ; kfree ( buf ) ; kfree ( data ) ;,0
1648,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> l ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> { TEMP_FAILURE_RETRY ( <S2SV_ModStart> sock, 1 ) <S2SV_ModStart> len = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1, 0 )",0
1649,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> int ipc_generic ( <S2SV_ModStart> int data, sizeof ( struct sockaddr * <S2SV_ModStart> int data, struct sockaddr * <S2SV_ModStart> char * inode_info ; struct sockaddr = - EINVAL ; memcpy ( & acluster_info, 0, sizeof ( struct sockaddr ) <S2SV_ModEnd> ) ; if <S2SV_ModStart> return - EINVAL ; memcpy ( & chan_info, 0, sizeof ( * ) <S2SV_ModEnd> ) ; if",0
1650,<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi ->,0
1651,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; if",0
1652,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MIN, 1 <S2SV_ModEnd>, regs,",1
1653,<S2SV_ModStart> ) ) ; ND_TCHECK2 ( bp [ 0 ] ) ;,0
1654,"<S2SV_ModStart> ctx, expr -> unary. child",1
1655,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1656,"<S2SV_ModStart> int mptctl_do_alloc ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_alloc ; <S2SV_ModEnd> return mpt_ioctlprintk",0
1657,"<S2SV_ModStart> < 0 ) { data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } <S2SV_ModEnd> * p ++",0
1658,,0
1659,<S2SV_ModStart> return 0 ; if (! strch ( token ) ) return 0,0
1660,"<S2SV_ModStart> int vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> ) return vpx_read_literal <S2SV_ModEnd> ( r,",0
1661,<S2SV_ModStart> ; int is_valid = ( error == GIT_OK ) <S2SV_ModStart> giterr_clear ( ) <S2SV_ModEnd> ; error =,1
1662,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1663,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r )",0
1664,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } else {,0
1665,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if ( ( vpxg -> cfg. g_h ) { if (! cfg -> cfg. g_h ) return - 1 ; <S2SV_ModStart> : 0 ; } # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH ) { new_buf -> cfg_h = ( cfg -> cfg. g_h, cfg -> cfg. g_bit_depth, cfg -> cfg. g_w, cfg -> cfg. g_h, cfg -> cfg. g_h, cfg -> cfg -> cfg. g_h, cfg -> cfg -> cfg. g_h ) ; if (! ( cfg ) ) return 0 <S2SV_ModEnd> ; } else <S2SV_ModStart>!= cfg -> cfg -> bit_depth <S2SV_ModEnd> ) ) { <S2SV_ModStart>. cfg -> bit_depth = VPX_IMG_FMT_HIGHBITDEPTH <S2SV_ModEnd> ; } <S2SV_ModStart>. cfg, cfg ->",0
1666,"<S2SV_ModStart> ) ) ; ND_TCHECK ( * dp, 2 ) ;",0
1667,<S2SV_ModStart> return NULL ; },0
1668,"<S2SV_ModStart> = 0 ; bool unix_peer_wakeup ( sk, sk ) ; <S2SV_ModStart> ) ; } unix_dgram_peer_wakeup ( sk ) <S2SV_ModEnd> ; if (",0
1669,"<S2SV_ModStart> } if ( test_bit ( key -> path, NULL ) && <S2SV_ModStart> 0 ) { if ( test_bit ( KEY_FLAG_SIZE + 1 ) ) { <S2SV_ModStart> 0 ) ; } else { <S2SV_ModEnd> f ( key <S2SV_ModStart> 0 ) ; }",0
1670,<S2SV_ModStart> ; if ( skb -> len < sizeof ( struct nlattr ) ) return 0 ; if ( <S2SV_ModStart> -> nla_len > <S2SV_ModEnd> skb -> len <S2SV_ModStart> skb -> len - A,1
1671,"<S2SV_ModStart> ]. size ; if ( ~ length < 16 ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" )",1
1672,<S2SV_ModStart> ) ; goto error_message <S2SV_ModEnd> ; } <S2SV_null>,0
1673,"<S2SV_ModStart> -> cac_id, serial -> len <S2SV_ModEnd> ) ; SC_FUNC_RETURN",1
1674,<S2SV_ModStart> ; # endif tok -> type_comments = 0 ;,0
1675,<S2SV_ModStart> ) ; } if ( cb -> desc. bNum < 0 ) {,0
1676,<S2SV_ModStart> ; if ( fd < 0 ||,0
1677,"<S2SV_ModStart> ; buff [ MIN ( ( size_t ) r, ( sizeof buff ) - 1 )",0
1678,,0
1679,<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> (! sock ||! addr ||! addrlen ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_in > OE_RAISE_ERRNO ( OE_EINVAL ) ) ;,0
1680,,1
1681,"<S2SV_ModStart>, len ) ; if (!",0
1682,"<S2SV_ModStart> -> ipv6_txoptions_data ; struct ipv6_txoptions * opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> ) ) { opt = & opt ; txopt_put ( opt ) ; } <S2SV_ModEnd> if ( opt",0
1683,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> NULL ) { int i = 0 ; uint32_t <S2SV_ModEnd> ; uint32_t <S2SV_ModStart> offset = 0 ; int i <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { if (! sess_check_remaining <= 0 ) { if ( <S2SV_ModStart> ) ) { goto cleanup ; } <S2SV_ModStart> ) ) { if (! sess [ i ] ) { if (! sess [ i ] ) { goto error ; } <S2SV_ModStart> = 1 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> == NULL ) { if (! s_check_remaining <= 0 ) { goto out_free ( sctxt, 0 ) ; sess [ i ] ) ; sess = 0 ; break ; } if (! sctxt [ i ] ) { if (! sess [ i ] ) { if (! sess [ i ] ) { sess [ i ] ) goto out_free ( sctxt, 0 ) ; sess [ i ]. length = 0 ; break ; } if (! sctxt [ i ] ) { if (! ( pirlen ) goto outbuf [ i ] )",0
1684,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_MWCMDX <S2SV_ModEnd>, dm9000ReadReg ( DM9000_ISR <S2SV_ModEnd>, DM9000_NSR ) <S2SV_ModStart> { dm9000WriteReg ( DM9000_NSR, DM9000_NSR ) ; dm9000WriteReg ( DM9000_NSR, DM9000_NSR <S2SV_ModEnd> ) ; dm9000ReadReg <S2SV_ModStart> { dm9000WriteReg ( DM9000_NSR, DM9000_NSR ) ; dm9000WriteReg ( DM9000_NSR ) ; if ( status & DM9000_NSR )!= 0 ) { dm9000WriteReg ( DM9000_NSR, DM9000_PT ) ; dm9000WriteReg ( DM9000_NSR, DM9000_NSR ) ; } dm9000WriteReg ( DM9000_NSR, DM9000_NSR ) ; dm9000WriteReg ( DM9000_PT ) ; dm9000WriteReg ( DM9000_NSR ) ; dm9000WriteReg ( DM9000_",0
1685,"<S2SV_ModStart>, buffer, t2p -> tiff_datasize,",1
1686,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",0
1687,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_decode ( NSC_CONTEXT,0
1688,"<S2SV_ModStart> ( sb, ext4_has_data,",0
1689,"<S2SV_ModStart> new_parent ) { <S2SV_ModEnd> __ptrace_link ( child <S2SV_ModStart>, new_parent, current_cred ( ) <S2SV_ModEnd> ) ; }",1
1690,<S2SV_ModStart> return NULL ; },0
1691,"<S2SV_ModStart> cib -> connection, false",0
1692,"<S2SV_ModStart> size = INT_MAX ; if ( unlikely (! access_ok ( VERIFY_WRITE, ubuf, len ) ) ) return - EFAULT",0
1693,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_mv_mv_err ( vp9_get_mv ( void, int64_t, int64_t, int64_t * mv, int64_t, int64_t vp9_mv, int64_t old_dist_mv, int64_t old_mv, 0, int64_t old_mv, int64_t vp9_mv_mv, 0, 0, 0, 0, 0, 0, 0 ) { unsigned long_mv ; <S2SV_ModStart> best_mv = vpx_mv_variance64_to_fast ( tmp_mv, & sse, 0, 0, 0, 0, 0 ) ; if ( tmp_errno_mv_mv_err ( vp9_mv, & sse, 0 ) ) { unsigned long_mv_mv = vpx_mv_mv_mv_mv_mv_get_sb ( tmp_err,",0
1694,<S2SV_ModStart> ; if ( ( h -> file ) == NULL ||,0
1695,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 0 ;,0
1696,<S2SV_ModStart> ( msg_sys -> msg_namelen <S2SV_ModEnd> ) ; if,0
1697,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
1698,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> * sizeof ( <S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> ; pixels =",0
1699,<S2SV_ModStart> comp -> type <S2SV_ModEnd> ) ) return,0
1700,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1701,<S2SV_ModStart> client ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1702,<S2SV_ModStart> in ) { if (! <S2SV_ModStart> ) ) return 0 ;,0
1703,"<S2SV_ModStart> -> fx, 0",0
1704,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1705,"<S2SV_ModStart>, new_dentry, false",0
