,raw_predictions,correctly_predicted
0,<S2SV_ModStart> ; if ( n2size < 1 ) <S2SV_ModEnd> { applog (,0
1,"<S2SV_ModStart> case EAP_FRAME_TYPE_PACKET : ND_TCHECK_8BITS ( tptr ) ; <S2SV_ModStart> case EAP_FRAME_TYPE_PACKET_VIDEO : ND_TCHECK_8BITS ( tptr + 2 ) ; <S2SV_ModStart> 2 ) { ND_TCHECK_8BITS ( tptr + 4 ) ; <S2SV_ModStart>, ""unknown"", subtype <S2SV_ModEnd> ), subtype <S2SV_ModStart> len ) ; ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> case EAP_TYPE_VIDEO : ND_TCHECK_8BITS ( tptr + 6 ) ; <S2SV_ModStart> case EAP_FRAME_TYPE_VIDEO : ND_TCHECK_8BITS ( tptr + 7 ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr + 6 ) ; <S2SV_ModStart>, ""unknown"", subtype <S2SV_ModEnd> ), subtype <S2SV_ModStart> len ) ; ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> case EAP_TYPE_VIDEO : ND_TCHECK_8BITS ( tptr + 6 ) ; <S2SV_ModStart> case EAP_FRAME_TYPE_VIDEO : ND_TCHECK_8BITS ( tptr +",0
2,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
3,"<S2SV_ModStart> ; if ( ioctl_cmd == SIOCYAMSMCS ) return - EINVAL ; if ( ( ym = kmalloc ( sizeof ( struct yamdrv_mcs ), GFP_KERNEL ) ) == NULL ) return - ENOBUFS ; if ( ( ym = kmalloc ( sizeof ( struct yamdrv_mcs ), GFP_KERNEL ) ) == NULL ) return - ENOBUFS ; if ( ( ym = kmalloc ( sizeof ( struct yamdrv_mcs ), GFP_KERNEL ) ) == NULL ) return - ENOBUFS ; if ( copy_from_user ( ym, ifr -> ifr_data, sizeof ( struct yamdrv_mcs ) ) ) return - EFAULT ; if ( copy_from_user ( ym, ifr -> ifr_data, sizeof ( struct yamdrv_mcs ) ) ) return - EFAULT ; if ( copy_from_user ( ym, ifr -> ifr_data, sizeof ( struct yamdrv_mcs ) ) ) return - EFAULT ;",0
4,"<S2SV_ModStart> ; if ( unfrag_ip6hlen < 0 ) { pr_err ( ""unfrag <S2SV_blank> ip6 <S2SV_blank> fragment <S2SV_blank> too <S2SV_blank> short"" ) ; goto out ; } unfrag_ip6hlen = min_t ( u32, unfrag_ip6hlen, skb -> len - unfrag_hdr_sz ) ; unfrag_len = min_t ( u32, unfrag_ip6hlen, skb -> len - unfrag_hdr_sz ) ; if ( unfrag_ip6hlen < 0 ) { pr_err ( ""unfrag <S2SV_blank> ip6 <S2SV_blank> fragment <S2SV_blank> too <S2SV_blank> short"" ) ; unfrag_ip6hlen = min_t ( u32, unfrag_ip6hlen, skb -> len - unfrag_hdr_sz ) ; goto out ; }",0
5,"<S2SV_ModStart>, offset ; if ( avio_feof ( f ) ) { index -> item_count = 0 ; av_freep ( & index -> items ) ; return AVERROR_INVALIDDATA ; }",1
6,"<S2SV_ModStart> * tpg ; u16 <S2SV_ModEnd> tpgt ; int <S2SV_ModStart> ; if ( kstrtou16 <S2SV_ModEnd> ( name + <S2SV_ModStart> 10, & tpgt ) == UINT_MAX ) return ERR_PTR ( - EINVAL ) ; tpg = kzalloc ( sizeof ( struct vhost_scsi_tpg ), GFP_KERNEL ) ; if (! tpg ) { pr_err ( ""Unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> struct <S2SV_blank> vhost_scsi_tpg"" ) ; return NULL ; } tpg -> tport_tpgt = tpgt ; ret = core_tpg_register ( & tpg -> se_tpg, wwn, & tpg -> se_tpg, TRANSPORT_TPG_TYPE_NORMAL ) ; if ( ret < 0 ) { kfree ( tpg ) ; return NULL ; } mutex_lock ( & vhost_scsi_mutex ) ; list_add_tail ( & tpg -> tv_tpg_list, & vhost_scsi_list ) ; mutex_unlock ( & vhost_scsi_mutex ) ;",0
7,"<S2SV_ModStart> TrackWriter * writer ; writer = gf_list_get_at ( writers, 0 ) ; if ( IS_ERR ( writer ) ) { gf_log ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""TrackWriter <S2SV_blank> with <S2SV_blank> no <S2SV_blank> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
8,"<S2SV_ModStart> { u32 data <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return ; kvm_read_guest_cached ( vcpu -> kvm, & <S2SV_ModEnd> vcpu -> arch <S2SV_ModStart>. apic -> vapic_cache, & data, sizeof ( u32 ) <S2SV_ModEnd> ) ; apic_set_tpr",1
9,<S2SV_ModStart> src ) ; switch_to_tm ( src ) ; default : <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
10,<S2SV_ModStart> item ) { return <S2SV_ModEnd> c -> child <S2SV_ModStart> -> child ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
11,"<S2SV_ModStart> ( sb, KERN_ERR,",1
12,<S2SV_ModStart> prevhdr ) ; fptr = ERR_PTR ( unfrag_ip6hlen ) ; if ( unlikely ( fptr == ERR_PTR ( - EINVAL ) ) ) goto out ;,0
13,"<S2SV_ModStart> u32 event_id, <S2SV_ModEnd> struct pt_regs * <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",0
14,"<S2SV_ModStart> { # ifdef HAVE_MSC_VER <S2SV_ModEnd> char buf [ <S2SV_ModStart> ( data ) ] ; # else char * buf = grub_malloc ( EXT2_BLOCK_SIZE ( data ) ) ; if (! buf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } leaf = grub_ext4_find_leaf ( data, buf, ( struct grub_ext4_extent * ) ( buf + 1 ) ) ; if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) ( leaf + 1 ) ; for ( i = 0 ; i < grub_le_to_cpu16 ( leaf -> entries ) ; i ++ ) { if ( fileblock < grub_le_to_cpu32 ( ext [ i ]. block ) ) break ; <S2SV_ModEnd> fileblock -= grub_le_to_cpu32 <S2SV_ModStart> start ) ; } <S2SV_ModStart> 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
15,"<S2SV_ModStart> fdct16 ( const tran_low_t * in, tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> ) { int step1 [ 8 ] ; int step2 [ 8 ] ; int step3 [ 8 ] ; int input [ 8 ] ; int temp1, temp2 ; input [ 0 ] = in [ 0 ] + in [ 15 ] ; input [ 1 ] = in [ 1 ] + in [ 13 ] ; input [ 2 ] = in [ 2 ] + in [ 14 ] ; input [ 3 ] = in [ 3 ] + in [ 15 ] ; input [ 4 ] = in [ 4 ] + in [ 11 ] ; input [ 5 ] = in [ 5 ] + in [ 12 ] ; input [ 6 ] = in [ 6 ] + in [ 10 ] ; input [ 7 ] = in [ 7 ] + in [ 8 ] ; step1 [ 0 ] = in [ 0 ] + in [ 15 ] ; input [ 1 ] = in [ 1 ] + in [ 14 ] ; input [ 2 ] = in [ 2 ] + in [ 15 ] ; input [ 3 ] = in [ 3 ] + in [ 11 ] ; input [ 4 ] = in [ 5 ] + in [ 10",0
16,<S2SV_ModStart> ; skip_full_check : kfree ( env -> insn_aux_data ) ; err_free_env :,0
17,"<S2SV_ModStart> int i ; if (! config -> sample_rate ) { strcpy ( wpc -> error_message, ""sample <S2SV_blank> rate <S2SV_blank> cannot <S2SV_blank> be <S2SV_blank> zero!"" ) ; return FALSE ; }",1
18,"<S2SV_ModStart> = 0 ; unsigned char sense_buffer [ SCSI_SENSE_BUFFERSIZE ] ; <S2SV_ModStart> -> buflen, sense_buffer, & sshdr, cgc -> timeout, IOCTL_RETRIES, 0, 0, NULL ) ; if ( cgc -> sense ) memcpy ( cgc -> sense, sense_buffer, sizeof ( * cgc -> sense ) ) ;",0
19,"<S2SV_ModStart> ( ) == 0x48454150 && order == 0x4d4d <S2SV_ModStart> ; if ( order == 0x4d4d && raw_height == 0 && raw_width == 0 ) { imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; } else if ( order == 0x4d4d && order == 0x48454150 && order == 0x4d4d ) { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; # endif parse_ciff ( save + hlen, len - hlen, 0 ) ; } else { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; # endif",0
20,"<S2SV_ModStart> void search_filter_level ( const YV12_BUFFER_CONFIG * sd, <S2SV_ModStart> partial_frame ) { <S2SV_ModEnd> VP9_COMMON * const <S2SV_ModStart> * const cm = & cpi -> common <S2SV_ModEnd> ; struct loopfilter <S2SV_ModStart> lf = & cpi -> loopfilter <S2SV_ModEnd> ; const int <S2SV_ModStart> = get_max_filter_level ( cpi ) ; int <S2SV_ModEnd> filt_best ; int <S2SV_ModStart> ; int best_err <S2SV_ModEnd> ; int filt_mid <S2SV_ModStart> / 4 ; memset <S2SV_ModEnd> ( ss_err, <S2SV_ModStart> + 1 ] ; memset ( ss_err, 0xFF, sizeof ( ss_err ) ) ; vpx_yv12_copy_y ( cm -> frame_to_show, & cpi -> last_frame_uf ) ; best_err = try_filter_frame ( sd, cpi, filt_mid, partial_frame ) ; filt_best = filt_mid ; if ( cpi -> twopass. section_intra_rating < 20 ) { filt_err = try_filter_frame ( sd, cpi, filt_low, partial_frame ) ; } else { filt_err = try_filter_frame ( sd, cpi, filt_",0
21,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
22,"<S2SV_ModStart> encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> i ] ) ; vpx_write <S2SV_ModEnd> ( w,",0
23,<S2SV_ModStart> ) ; return <S2SV_ModEnd> ralg -> seedsize,1
24,<S2SV_ModStart> ; if ( sockaddr_len < sizeof ( struct sockaddr_pppox ) ) return - EINVAL ; if (,1
25,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } else { <S2SV_ModEnd> request -> rxBlockSzx <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; } <S2SV_ModStart> ( ) ) { <S2SV_ModStart> ( ) ; },1
26,"<S2SV_ModStart> char * fmtname ; char * help <S2SV_ModStart> ; while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case <S2SV_ModStart> break ; case OPT_INFILE : help = jas_optarg ; break ; default : usage ( ) ; break ; } } <S2SV_ModStart> ( infile ) { if (! jas_stream_fopen ( infile, ""rb"" ) ) { fprintf ( stderr, ""cannot <S2SV_blank> open <S2SV_blank> input <S2SV_blank> image <S2SV_blank> file <S2SV_blank> %s\\n"", infile ) ; exit ( EXIT_FAILURE ) ; } } else { if (! ( instream = jas_stream_fdopen ( 0, ""rb"" ) ) ) { fprintf ( stderr, ""cannot <S2SV_blank> open <S2SV_blank> standard <S2SV_blank> input <S2SV_blank> file <S2SV_blank> %s\\n"", infile ) ; exit ( EXIT_FAILURE ) ; } } if (! ( <S2SV_ModStart> ( image = jas_image_decode ( image, fmtid, 0 ) ) ) { abort ( ) ; } jas_stream_close ( instream ) ; numcmpts = jas_image_numcmpts ( image ) ; depth = jas_image_cmptprec",0
27,"<S2SV_ModStart> esr ) { # ifdef CONFIG_X86_64 <S2SV_ModEnd> pr_crit ( ""Bad <S2SV_blank> mode <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> handler <S2SV_blank> detected, <S2SV_blank> code <S2SV_blank> 0x%08x\\n"" <S2SV_ModStart> esr ) ; # endif <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
28,"<S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",0
29,"<S2SV_ModStart> intf ) { struct usb_host_interface * <S2SV_ModEnd> alt ; alt <S2SV_ModStart> ; if (! alt ) return - ENODEV <S2SV_ModEnd> ; return usb_set_interface <S2SV_ModStart> ( udev, alt -> <S2SV_ModEnd> desc. bInterfaceNumber <S2SV_ModStart> bInterfaceNumber, alt -> desc. bAlternateSetting",1
30,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> udf_pc_to_char ( struct <S2SV_ModStart> char * to, int tolen <S2SV_ModStart> = 0 ; int comp_len ; <S2SV_ModStart> = 0 ; if ( tolen < fromlen ) return - ENAMETOOLONG ; <S2SV_ModStart> case 2 : if ( tolen < 3 ) return - ENAMETOOLONG ; <S2SV_ModStart> = '/' ; tolen -= 3 ; <S2SV_ModStart> case 3 : if ( tolen < 3 ) return - ENAMETOOLONG ; <S2SV_ModStart> += 3 ; tolen -= 3 ; <S2SV_ModStart> case 4 : if ( tolen < 2 ) return - ENAMETOOLONG ; <S2SV_ModStart> += 2 ; tolen -= 2 ; <S2SV_ModStart> case 5 : if ( tolen < 2 ) return - ENAMETOOLONG ; <S2SV_ModStart> += 2 ; tolen -= 2 ; <S2SV_ModStart> = '\\0' ; return 0 ;",0
31,"<S2SV_ModStart> ; } } else if ( argc == 1 ) { if ( server. protected_mode == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'no\'"" ; goto loaderr ; } } else if ( argc == 2 ) { if ( server. protected_mode == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'no\'"" ; goto loaderr ; } } else if ( argc == 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'no\'"" ; goto loaderr ; } } else if ( ( server. protected_mode & 1 ) == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'no\'"" ; goto loaderr ; } } else if ( ( server. protected_mode & 1 ) == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'no\'"" ; goto loaderr ; }",0
32,<S2SV_ModStart> unsigned long flags ; if ( qid > NVMET_NR_QUEUES ) return NULL,1
33,"<S2SV_ModStart> ) ) ; usb_set_intfdata ( interface, dev ) ; result = usb_register_dev ( interface, & tower_class ) ; if ( result < 0 ) { dev_err ( idev, ""Not <S2SV_blank> able <S2SV_blank> to <S2SV_blank> get <S2SV_blank> a <S2SV_blank> minor <S2SV_blank> for <S2SV_blank> this <S2SV_blank> device\\n"" ) ; retval = - ENODEV ; goto error ; } dev -> minor = interface -> minor ; result = usb_register_dev ( interface, & tower_class ) ; if ( result < 0 ) { dev_err ( idev, ""Not <S2SV_blank> able <S2SV_blank> to <S2SV_blank> get <S2SV_blank> a <S2SV_blank> minor <S2SV_blank> for <S2SV_blank> this <S2SV_blank> device\\n"" ) ; retval = - ENODEV ; goto error ; } usb_set_intfdata ( interface, & tower_class ) ; result = usb_register_dev ( interface, & tower_class ) ; if ( result < 0 ) { dev_err ( idev, ""Not <S2SV_blank> able <S2SV_blank> to <S2SV_blank> get <S2SV_blank> a <S2SV_blank> minor <S2SV_blank> for <S2SV_blank> this <S2SV_blank> device\\n"" ) ; retval = - ENODEV ; goto error ; }",0
34,"<S2SV_ModStart> out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; goto out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; goto out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; goto out_error ; }",0
35,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool construct_get_dest_keyring ( struct key * dest_keyring ) { if (! dest_keyring ) return false ; <S2SV_ModStart> authkey ; } <S2SV_ModEnd> switch ( cred <S2SV_ModStart> KEY_REQKEY_DEFL_DEFAULT : case KEY_REQKEY_DEFL_REQUESTOR_KEYRING : if ( cred -> request_key_auth ) { authkey = cred -> request_key_auth ; if (! test_bit ( KEY_FLAG_REVOKED, & authkey -> flags ) ) dest_keyring = key_get ( authkey -> dest_keyring ) ; if (! dest_keyring ) return false ; } break ; case KEY_REQKEY_DEFL_USER_SESSION_KEYRING : case KEY_REQKEY_DEFL_GROUP_KEYRING : if ( cred -> user -> session_keyring ) dest_keyring = key_get ( cred -> user -> session_keyring ) ; break ; case KEY_REQKEY_DEFL_USER_SESSION_KEYRING : dest_keyring = key_get ( cred -> user -> session_",0
36,<S2SV_ModStart> = create_spnego_ctx ( 1,1
37,"<S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_l2tpip <S2SV_ModEnd> ) ) return <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> ret = - <S2SV_ModStart> ; lock_sock ( sk ) ; if ( addr -> l2tp_family!= AF_INET <S2SV_ModEnd> ) return - <S2SV_ModStart> ; ret = - EADDRINUSE ; read_lock_bh ( & l2tp_ip_lock ) ; if ( __l2tp_ip_bind_lookup ( net, addr -> l2tp_addr. s_addr, sk -> sk_bound_dev_if, addr -> l2tp_conn_id ) ) goto out_in_use ; ret = - EADDRINUSE ; if ( addr -> l2tp_addr. s_addr && chk_addr_ret == RTN_LOCAL && chk_addr_ret!= RTN_MULTICAST || chk_addr_ret == RTN_BROADCAST ) goto out ; if ( addr -> l2tp_addr. s_addr ) inet -> inet_rcv_saddr = addr -> l2tp_addr. s_addr ; ret = - EADDRNOTAVAIL ; if (",0
38,<S2SV_ModStart> <S2SV_null> static inline size_t <S2SV_ModEnd> stack_maxrandom_size ( void <S2SV_ModStart> void ) { size_t <S2SV_ModEnd> max = 0 <S2SV_ModStart> max = ( size_t <S2SV_ModEnd> ) & STACK_RND_MASK <S2SV_ModStart> ) << PAGE_SHIFT ; return max ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
39,"<S2SV_ModStart>, _ ( ""Cancel"" ), GTK_RESPONSE_CANCEL ) ; gtk_dialog_set_default_response ( GTK_DIALOG ( dialog ), GTK_RESPONSE_CANCEL <S2SV_ModEnd> ) ; if <S2SV_ModStart>, _ ( ""Cancel"" ), GTK_RESPONSE_CANCEL <S2SV_ModEnd> ) ; }",0
40,"<S2SV_ModStart> ( & t, 0",0
41,"<S2SV_ModStart> password ) ) ; if ( strlen ( password ) > MAXPASS ) { printf ( ""Password <S2SV_blank> too <S2SV_blank> long. <S2SV_blank> Password <S2SV_blank> length <S2SV_blank> %d <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", length, MAXPASS ) ; die ( ""Password <S2SV_blank> too <S2SV_blank> long. <S2SV_blank> Password <S2SV_blank> length <S2SV_blank> %d <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", password, strlen ( secret ) ) ; exit ( EXIT_FAILURE ) ; }",0
42,"<S2SV_ModStart> int m88rs2000_frontend_attach ( struct dvb_usb_adapter * adap ) { struct dw2102_state * state = d -> priv ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0x51 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> 0x51 <S2SV_blank> transfer <S2SV_blank> failed."" ) ; adap <S2SV_ModEnd> -> fe_adap [ <S2SV_ModStart> & d -> <S2SV_ModEnd> i2c_adap ) ; <S2SV_ModStart> ( ts2020_attach, adap <S2SV_ModEnd> -> fe_adap [ <S2SV_ModStart> & d -> <S2SV_ModEnd> i2c_adap )",0
43,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
44,"<S2SV_ModStart> ; } } if ( google_sig ) { debug ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> google <S2SV_blank> signature <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"", w -> id, google_sig ) ; responseHandler = google_client_response_handler ( w, google_reqId, google_sig ) ; outFileName = google_client_response_handler ( w, outFileName ) ; } else { debug ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'google_sig\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"", w -> id, google_sig ) ; responseHandler = google_client_response_handler ( w, google_reqId, google_sig ) ; }",0
45,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horAcc8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
46,"<S2SV_ModStart> tsample_t s ; uint16 bps = 0 ; ( void ) TIFFGetField ( in, TIFFTAG_BITSPERSAMPLE, & bps ) ; if ( bps!= 8 ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> can <S2SV_blank> only <S2SV_blank> handle <S2SV_blank> BitsPerSample=8 <S2SV_blank> in <S2SV_blank> %s"", ""cpContig2SeparateByRow"" ) ; return 0 ; }",1
47,"<S2SV_ModStart> ) ; struct hugepage_subpool * spool = ( struct hugepage_subpool <S2SV_ModEnd> * ) page_private <S2SV_ModStart> hugetlb_lock ) ; hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, 1 )",1
48,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) { return AVERROR_EOF ; } if (,1
49,<S2SV_ModStart>! e || ( ( e - p ) > HOST_NAME_MAX ),0
50,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> bool <S2SV_ModEnd> generic_pipe_buf_get ( struct <S2SV_ModStart> buf ) { return try_get_page <S2SV_ModEnd> ( buf ->,1
51,"<S2SV_ModStart> ) ) ; if ( cp == NULL ) cp = ikev2_attr_print ( ndo, cp, ep2, map, nmap ) ; else cp = ikev2_attr_print ( ndo, cp, ep2, map, nmap ) ; if ( cp == NULL ) cp = ikev2_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) cp = ikev2_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) cp = ikev2_attr_print ( ndo, cp, ep2 ) ; else cp = ikev2_attr_print ( ndo, cp, ep2, map, nmap ) ; if ( cp == NULL ) cp = ikev2_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) cp = ikev2_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) cp = ikev2_attr_print ( ndo, cp, ep2 ) ;",0
52,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",0
53,"<S2SV_ModStart> NULL, NULL, & timeout ) ; if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) return FALSE",0
54,<S2SV_ModStart> config -> pm_max_requests ; fpm_globals. listening_socket = NULL,0
55,"<S2SV_ModStart> detect_transition_to_still ( TWO_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> last_decay_rate ) { TWO_PASS <S2SV_ModEnd> * position = <S2SV_ModStart> ( frame_interval > MIN_GF_INTERVAL <S2SV_ModEnd> && loop_decay_rate >= <S2SV_ModStart> >= 0.999 && last_decay_rate < <S2SV_ModEnd> 0.9 ) { <S2SV_ModStart> int j ; TWO_PASS <S2SV_ModEnd> * position = <S2SV_ModStart> twopass -> stats_in ; FIRSTPASS_STATS tmp_next_frame ; for ( j = 0 ; j < still_interval ; ++ j ) { if ( EOF == input_stats ( twopass, & tmp_next_frame ) ) break ; <S2SV_ModEnd> if ( tmp_next_frame <S2SV_ModStart> pcnt_inter - tmp_next_frame. <S2SV_ModEnd> pcnt_motion < 0.999 <S2SV_ModStart> } reset_fpf_position ( twopass, <S2SV_ModEnd> position ) ; <S2SV_ModStart> } return trans_to_still <S2SV_ModEnd> ; } <S2SV_null>",0
56,<S2SV_ModStart> 0 ; } err = handle -> h_err ; <S2SV_ModStart> h_transaction ) { rc <S2SV_ModEnd> = jbd2_journal_stop ( <S2SV_ModStart> ) ; return err? err : rc <S2SV_ModEnd> ; } sb <S2SV_ModStart> t_journal -> j_private <S2SV_ModEnd> ; rc =,1
57,"<S2SV_ModStart> ; if ( unlikely ( offset + size > i_size_read ( inode ) ) ) { ret = ext4_convert_unwritten_extents ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten"" ""extents <S2SV_blank> to <S2SV_blank> written <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; return ret ; } }",0
58,<S2SV_ModStart> valuelen ) ; args -> rmtvaluelen = args -> valuelen ;,1
59,"<S2SV_ModStart> alg ) { if (! <S2SV_ModStart> ) request_module ( ""crypto-larval-%s"" <S2SV_ModEnd>, name ) <S2SV_ModStart> ) request_module ( ""crypto-larval-%s"" <S2SV_ModEnd>, name )",0
60,"<S2SV_ModStart> 2 ) { ND_TCHECK2 ( * tptr, 2 ) ; <S2SV_ModStart> len - 2 ; if ( len < stlv_len ) goto trunc ; ND_TCHECK2 ( * tptr, stlv_len ) <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) ; stlv_len = stlv_len - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ; <S2SV_ModStart> case ISIS_SUBTLV_CIST <S2SV_blank> Root_ID : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ; stlv_len = stlv_len - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ; stlv_len = stlv_len - ISIS_SUBTLV_SPB_",0
61,"<S2SV_ModStart> ( c, MSG_JOB_TOO_BIG ) ; } if ( body_size + 2 > job_data_size_limit ) { twarnx ( ""server <S2SV_blank> error: <S2SV_blank> "" MSG_JOB_TOO_BIG "" <S2SV_blank> body <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", job_data_size_limit ) ; return skip ( c, body_size + 2, MSG_OUT_OF_MEMORY ) ;",0
62,"<S2SV_ModStart> flags ) ; memset ( & ddi, 0, sizeof ( ddi ) ) ;",1
63,<S2SV_ModStart> == 12 && ( <S2SV_ModStart> flags & TH_SYN ),1
64,"<S2SV_ModStart> -> ipc_socket ; <S2SV_ModEnd> lxc_attach_options_t * options <S2SV_ModStart> int fd ; <S2SV_ModEnd> int status ; <S2SV_ModStart> { ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (0)"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } status = - 1 ; ret = lxc_read_nointr_expect ( ipc_socket, & status, sizeof ( status ), & expected ) ; if ( ret <= 0 ) { ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (1)"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } if ( ( options -> attach_flags & LXC_ATTACH_REMOUNT_PROC_SYS ) ) { ret = lxc_attach_remount_sys_proc ( ) ; if ( ret < 0 ) { SYSERROR ( ""could <S2SV_blank> not <S2SV_blank> ensure <S2SV_blank> correct <S2SV_blank> architecture"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( -",0
65,"<S2SV_ModStart> = GIT_PKT_NG ; ptr = line + 3 ; if (! ptr ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> ref = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> ref ) ; memcpy ( pkt -> ref, line, len ) ; pkt -> ref [ len ] = '\\0' ; line = ptr + 1 ; if (! ptr ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> msg = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> msg ) ; memcpy ( pkt -> msg, line, len ) ; pkt -> msg [ len ] = '\\0' ; * out = ( git_pkt * ) pkt ; return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
66,"<S2SV_ModStart> ; if ( getc ( IN ) >= 12U ) { fprintf ( stderr, ""Error, <S2SV_blank> invalid <S2SV_blank> BMP <S2SV_blank> header <S2SV_blank> size\\n"" ) ; return OPJ_FALSE ; } if ( <S2SV_ModStart> >= 52U ) { fprintf ( stderr, ""Error, <S2SV_blank> invalid <S2SV_blank> BMP <S2SV_blank> header <S2SV_blank> size\\n"" ) ; return OPJ_FALSE ; } if ( getc ( IN ) >= 56U ) { fprintf ( stderr, ""Error, <S2SV_blank> invalid <S2SV_blank> BMP <S2SV_blank> header <S2SV_blank> size\\n"" ) ; return OPJ_FALSE ; } header -> biHeight = ( OPJ_UINT32 ) getc ( IN ) ; header -> biWidth = ( OPJ_UINT32 ) getc ( IN ) ; header -> biHeight = ( OPJ_UINT32 ) getc ( IN ) ; header -> biPlanes = ( OPJ_UINT16 ) ( ( OPJ_UINT32 ) getc ( IN ) << 8 ) ; header -> biPlanes |= ( OPJ_UINT16 ) ( ( OPJ_UINT32 ) getc ( IN ) << 16 ) ; header -> biHeight = ( OPJ_UINT",0
67,<S2SV_ModStart> NULL ; } sas_probe_devices ( port ) ;,1
68,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,"<S2SV_ModStart> ENOBUFS ; } memset ( & line, 0, sizeof ( line ) ) ;",1
71,"<S2SV_ModStart> arg ) { int ret ; ret = scsi_verify_blk_ioctl ( bd, cmd ) ; if ( ret < 0 ) return ret ;",1
72,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nego_process_negotiation_request ( rdpNego <S2SV_ModStart> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nego_process_negotiation_request ( rdpNego <S2SV_ModStart> = NEGO_STATE_FINAL ; return TRUE ;,0
73,<S2SV_ModStart> * ureq ; unsigned <S2SV_ModStart> return - EFAULT ; if ( req_len > ( QETH_BUFSIZE - IPA_PDU_HEADER_SIZE - sizeof ( struct qeth_ipacmd_setadpparms_hdr ) - sizeof ( struct qeth_ipacmd_setadpparms_hdr ) - sizeof ( struct qeth_ipacmd_setadpparms_hdr ) ) ) return - EINVAL,0
74,"<S2SV_ModStart> int m ; if ( n < 0 ) { jas_deprecated ( ""negative <S2SV_blank> count <S2SV_blank> for <S2SV_blank> jas_stream_pad"" ) ; }",1
75,<S2SV_ModStart> += 2 ; if ( avio_feof ( pb ) ) return AVERROR_EOF ; <S2SV_ModStart> += 2 ; if ( avio_feof ( pb ) ) return AVERROR_EOF ; <S2SV_ModStart> += 3 ; if ( avio_feof ( pb ) ) return AVERROR_EOF ; <S2SV_ModStart> += 3 ; if ( avio_feof ( pb ) ) return AVERROR_EOF ; <S2SV_ModStart> += 3 ; <S2SV_ModStart> += 3 ; if ( avio_feof ( pb ) ) return AVERROR_EOF ; <S2SV_ModStart> += 3 ; if ( avio_feof ( pb ) ) return AVERROR_EOF ; <S2SV_ModStart> += 3 ; if ( avio_feof ( pb ) ) return AVERROR_EOF ; <S2SV_ModStart> += 3 ; if ( avio_feof ( pb ) ) return AVERROR_EOF ;,0
76,"<S2SV_ModStart> if (! mxf_track_is_strong_ref ( mxf, & mxf -> tracks_refs [ i ], Track ) ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""could <S2SV_blank> not <S2SV_blank> resolve <S2SV_blank> material <S2SV_blank> track <S2SV_blank> strong <S2SV_blank> ref\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( mxf_track_is_strong_ref ( mxf, & mxf -> tracks_refs [ i ], Track ) ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""could <S2SV_blank> not <S2SV_blank> resolve <S2SV_blank> track <S2SV_blank> strong <S2SV_blank> ref\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
77,"<S2SV_ModStart> mntent, path, rootfs",1
78,"<S2SV_ModStart> + 10 ; if ( psf -> fileoffset < psf -> filelength ) <S2SV_ModStart> ; } ; if ( psf -> fileoffset < psf -> filelength ) <S2SV_ModStart> ; } ; if ( psf -> fileoffset < psf -> filelength ) { <S2SV_ModStart> ; } ; if ( psf -> fileoffset < psf -> filelength ) { psf_log_printf ( psf, ""ID3 <S2SV_blank> length <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"", psf -> filelength ) ; return 0 ; }",0
79,"<S2SV_ModStart> return 0 ; ND_TCHECK_16BITS ( p + l2info -> cookie_len ) ; <S2SV_ModStart> += jnx_ext_len ; if ( jnx_ext_len!= l2info -> cookie_len ) ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%u]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; for ( idx = 0 ; idx < l2info -> cookie_len ; idx ++ ) { ND_TCHECK_16BITS ( p + l2info -> cookie_len ) ; if ( l2info -> cookie_len < l2info -> cookie_len ) ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%u]"", bittok2str ( jnx_flag_values, ""none"", l2info -> direction ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%u]"", bittok2str ( jnx_flag_values, ""none",0
80,<S2SV_ModStart> NF_STOLEN ; return err == 0? NF_ACCEPT : NF_DROP <S2SV_ModEnd> ; } <S2SV_null>,1
81,"<S2SV_ModStart> * up ; int klen ; <S2SV_ModStart> rta ) ; klen = <S2SV_ModEnd> xfrm_replay_state_esn_len ( up <S2SV_ModStart> ( up ) ; if ( klen <S2SV_ModStart> ENOMEM ; } klen = <S2SV_ModEnd> xfrm_replay_state_esn_len ( up <S2SV_ModStart> ( up ) ; memcpy ( p, up, klen ) ;",0
82,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
83,<S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( size_t ) ( <S2SV_ModEnd> value + 0.5 <S2SV_ModStart> value + 0.5 ) ) ; break ; } case RightShiftEvaluateOperator : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( size_t ) ( <S2SV_ModEnd> value + 0.5 <S2SV_ModStart> value + 0.5 ),0
84,"<S2SV_ModStart> ) ) ; btif_config_set_uint <S2SV_ModEnd> ( bdstr, <S2SV_ModStart> ) ) ; btif_config_set_uint <S2SV_ModEnd> ( bdstr,",0
85,"<S2SV_ModStart> ( buf = jas_alloc3 ( bufsize, numcols <S2SV_ModEnd>, sizeof (",1
86,<S2SV_ModStart> ; vpx_codec_enc_cfg_map_t * const <S2SV_ModEnd> map ; if <S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; if (! iface -> enc. cfg_maps ) { res = VPX_CODEC_INCAPABLE ; } else { for ( map = iface -> enc. cfg_maps ; map -> usage >= 0 && map -> cfg,0
87,"<S2SV_ModStart> size ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""GSO <S2SV_blank> size <S2SV_blank> must <S2SV_blank> not <S2SV_blank> be <S2SV_blank> zero.\\n"" ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> gso. type ) ; netbk_fatal_tx_err ( vif",1
88,"<S2SV_ModStart> * object, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void * <S2SV_ModStart> < 0 ) <S2SV_ModEnd> bitmap_pos = ext_index_add_object <S2SV_ModStart> name ) ; <S2SV_ModEnd> bitmap_set ( base",1
89,"<S2SV_ModStart> ; } } fd_printf ( STO, ""\\r\\n*** <S2SV_blank> xfr: <S2SV_blank> %s <S2SV_blank> ***\\r\\n"", fname ) ; xfr_cmd = strdup_printf ( xfr_cmd, sizeof ( xfr_cmd ) ) ; xfr_parity = strdup_printf ( xfr_parity, sizeof ( xfr_parity ) ) ; fname = strdup_printf ( xfr_cmd, sizeof ( xfr_cmd ) ) ; xfr_parity = strdup_printf ( xfr_cmd, sizeof ( xfr_cmd ) ) ; fname = strdup_printf ( fname, sizeof ( xfr_cmd ) ) ; xfr_cmd = strdup_printf ( fname, sizeof ( xfr_cmd ) ) ; xfr_parity = strdup_printf ( xfr_parity, sizeof ( xfr_parity ) ) ; fname = strdup_printf ( fname, sizeof ( xfr_cmd ) ) ; xfr_parity = strdup_printf ( fname, sizeof ( xfr_cmd ) ) ; fname = strdup_printf ( fname, sizeof ( xfr_cmd ) )",0
90,<S2SV_ModStart> mixer ) { snd_usb_mixer_disconnect ( mixer ) ;,1
91,"<S2SV_ModStart> ) { struct packet_rollover * rollover = NULL ; struct <S2SV_ModStart> EINVAL ; } mutex_lock ( & fanout_mutex ) ; err = - EINVAL ; switch ( type ) { case PACKET_FANOUT_HASH : if ( type_flags & PACKET_FANOUT_CPU : if ( type_flags & PACKET_FANOUT_RND : case PACKET_FANOUT_CPU : if ( type_flags & PACKET_FANOUT_FLAG_EBPF ) return - EINVAL ; } break ; case PACKET_FANOUT_LB : if ( type == PACKET_FANOUT_CPU ) { case PACKET_FANOUT_CPU : if ( type_flags & PACKET_FANOUT_FLAG_ROLLOVER ) { rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if (! rollover ) return - ENOMEM ; <S2SV_ModEnd> atomic_long_set ( & <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> atomic_long_set ( & <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover ->",0
92,"<S2SV_ModStart> ( newsk ) ; memset ( newnp, 0, sizeof ( struct ipv6_pinfo ) ) ;",0
93,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
94,"<S2SV_ModStart> void show_progress ( int frame_in, int frame_out, uint64_t dx_time ) { if ( frame_in < 0 || frame_out < 0 ) { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out ) ; return ; } if ( frame_in < 0 || frame_out >= UINT64_MAX ) { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out ) ; return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
95,"<S2SV_ModStart> fields ) { if ( ChopBlanks == 0 ) { perlio_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> empty <S2SV_blank> table\\n"" ) ; return Nullav ; } <S2SV_ModStart> fields ) { if ( ChopBlanks == 1 ) { perlio_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> empty <S2SV_blank> table\\n"" ) ; return Nullav ; } } else { <S2SV_ModStart> fields ) { perlio_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> empty <S2SV_blank> table\\n"" ) ; return Nullav ; } } } <S2SV_ModEnd> num_fields = DBIc_is <S2SV_ModStart> ( imp_sth, DBIcf_NumFields ) ; if ( num_fields == 0 ) { perlio_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> empty <S2SV_blank> table\\n"" ) ; return Nullav ; } <S2SV_ModEnd> } # if",0
96,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ETXSTL, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteBuffer ( interface, buffer, offset ) ; enc28j60WriteReg ( interface, ENC28J60_ETXNDL, LSB ( ENC28J60_TX_BUFFER_START + length ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXNDH, MSB ( ENC28J60_TX_BUFFER_START + length ) ) ; <S2SV_ModEnd> enc28j60SetBit ( interface <S2SV_ModStart> ( interface",0
97,"<S2SV_ModStart> value ) ; value = ast2obj_int ( o -> lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ;",0
98,"<S2SV_ModStart> ( page && ( <S2SV_ModStart> ( page && <S2SV_ModEnd> access ( page <S2SV_ModStart> ( page && <S2SV_ModEnd> access ( page <S2SV_ModStart> ( page && <S2SV_ModEnd> access ( page <S2SV_ModStart> ( page && <S2SV_ModEnd> access ( page <S2SV_ModStart> ( page && <S2SV_ModEnd> access ( page <S2SV_ModStart> ( page && <S2SV_ModEnd> access ( page <S2SV_ModStart> 0 ) ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } <S2SV_ModEnd> } else if <S2SV_ModStart> ( page && <S2SV_ModEnd> access ( page <S2SV_ModStart> ( page && <S2SV_ModEnd> access ( page <S2SV_ModStart> ) == 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } } else if (! strcmp ( func, ""page/get"" ) ) { char * page = http_request_param_get ( req, ""page"" ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } else if ( page == NULL ) page = http_request_get_query_string",0
99,"<S2SV_ModStart> ( flags == EXT4_GET_BLOCKS_PRE_IO <S2SV_ModEnd> ) { ret <S2SV_ModStart> inode, EXT4_STATE_DIO_UNWRITTEN <S2SV_ModEnd> ) ; goto <S2SV_ModStart> } if ( flags & EXT4_GET_BLOCKS_CONVERT ) { ret = ext4_convert_unwritten_extents_endio ( handle, inode, path ) ; if ( ret >= 0 ) ext4_update_inode_fsync_trans ( inode, 1 ) ; goto out2 ; } if ( ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) == 0 ) { set_buffer_uninit ( bh_result ) ;",0
100,<S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ;,1
101,"<S2SV_ModStart> if (! caller_may_see_dir ( fc -> pid, controller, cgroup ) ) { ret = - ENOENT ; goto out ; } if (!",1
102,"<S2SV_ModStart> flag ) { int mb_rows, mb_cols ; unsigned char * limits ; int mbr, mbc ; ( void ) post ; ( void ) low_var_thresh ; ( void ) flag ; memset ( & limits, ( unsigned char ) ppl, 16 * mb_cols ) ; for ( mbr = 0 ; mbr < mb_rows ; mbr ++ ) { vpx_post_proc_down_and_across_mb_row ( source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_stride, source -> y_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> u_buffer, 16 * mbr * source -> uv_stride, source -> uv_stride, source -> uv_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> v_buffer + 8 * mbr * source -> uv_stride, source -> uv_stride, source -> uv_width, limits, 8 ) ; vpx_post_proc_down_and_across_mb",0
103,"<S2SV_ModStart> { ret = __copy_to_user <S2SV_ModEnd> ( param, <S2SV_ModStart> ) ) ; if ( ret ) return ret ; param += sizeof ( struct floppy_raw_cmd ) ; if ( ( ptr -> flags & FD_RAW_READ ) && ptr -> buffer_length ) { long length = ptr -> buffer_length - ptr -> length ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; } else { long length = - 1 ; ret = fd_copyout ( ptr -> kernel_data, ptr -> length ) ; if ( ret ) return ret ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
104,"<S2SV_ModStart> : if (! cap_issubset ( new -> cap_permitted, old -> cap_permitted ) ) bprm -> per_clear |= PER_CLEAR_ON_SETID ; if (",1
105,"<S2SV_ModStart> void ext4_xattr_cache_insert ( <S2SV_ModEnd> struct buffer_head * <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; <S2SV_ModEnd> if (! <S2SV_ModStart> return ; } <S2SV_ModEnd> error = mb_cache_entry_insert <S2SV_ModStart> bh -> b_blocknr <S2SV_ModEnd>, hash ) <S2SV_ModStart> error ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> } } <S2SV_null>",0
106,<S2SV_ModStart> rlen ) ; free ( uri ) ;,0
107,<S2SV_ModStart> tf = ( <S2SV_ModEnd> luaY_parser ) (,1
108,<S2SV_ModStart> ; int err ; if ( protocol < 0 || protocol >= IPPROTO_MAX ) return - EINVAL,1
109,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> opt.",1
110,"<S2SV_ModStart> ; dl = kzalloc <S2SV_ModEnd> ( size,",1
111,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static u_int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> * tptr, const u_int len <S2SV_ModEnd> ) { const <S2SV_ModStart> * msg ; if ( len < sizeof ( rpki_rtr_pdu ) ) { ND_PRINT ( ( ndo, ""RPKI-RTRv%u, <S2SV_blank> %s <S2SV_blank> PDU <S2SV_blank> (%u), <S2SV_blank> length: <S2SV_blank> %u"", indent_string ( 8 ), * tptr, len ) ) ; return len ; } ND_TCHECK2 ( * tptr, len ) ; hexdump = FALSE ; switch ( pdu_type ) { case RPKI_RTR_SERIAL_NOTIFY_PDU : case RPKI_RTR_SERIAL_QUERY_PDU : case RPKI_RTR_END_OF_DATA_PDU : msg = ( const u_char * ) ( tptr + 1 ) ; ND_PRINT ( ( ndo, ""%sSession <S2SV_blank> ID: <S2SV_blank> 0x%04x, <S2SV_blank> Serial: <S2SV_blank> %u"", indent_",0
113,"<S2SV_ModStart> ; int n <S2SV_ModEnd> ; skb -> <S2SV_ModStart> = NULL ; if ( skb -> len < 4 ) { rose_transmit_clear_request ( neigh, lci, ROSE_INVALID_FACILITY, 76 ) ; return 0 ; } <S2SV_ModStart> & facilities, skb -> len <S2SV_ModEnd> ) ; if",0
114,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr,1
115,"<S2SV_ModStart> } else { if ( * varp == NUL ) errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> set <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> empty <S2SV_blank> string"" ) ; else if ( term_is_gui ( T_NAME ) ) errmsg = ( char_u * ) N_ ( ""E531: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else <S2SV_ModEnd> if ( ( <S2SV_ModStart> == FAIL ) errmsg = ( char_u * ) N_ ( ""E522: <S2SV_blank> Not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> termcap"" ) ; else <S2SV_ModEnd> redraw_later_clear ( )",0
116,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret <S2SV_ModEnd> ) goto out",0
117,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; int ret <S2SV_ModStart> ) ; } o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> cl_nodes_lock ) ; o2nm_unlock_subsystem ( ) ;,1
118,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; break",1
119,"<S2SV_ModStart> == '/' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> is <S2SV_blank> absolute"" ) ; return ( ARCHIVE_FAILED ) ; } separator = * src ++ ; } <S2SV_ModEnd> for ( ;",1
120,"<S2SV_ModStart> TPM_RC tpm_kdfa ( <S2SV_ModEnd> TPMI_ALG_HASH hashAlg, <S2SV_ModStart> { TPM2B_DIGEST tmpResult <S2SV_ModEnd> ; TPM2B_DIGEST tpm2bLabel <S2SV_ModStart> ) { TPM2B_DIGEST <S2SV_ModEnd> tpm2bBits, tpm2b_i_2 <S2SV_ModStart> ; TPM_RC rval = TPM_RC_SUCCESS <S2SV_ModEnd> ; int i <S2SV_ModStart> 1 ; while ( resultKey -> t. size < bytes ) { i_Swizzled = string_bytes_endian_convert_32 ( i ) ; * ( TPM2B_DIGEST * ) tpm2b_i_2Ptr = i_Swizzled ; j = 0 ; bufferList [ j ++ ] = ( TPM2B_DIGEST * ) & ( tpm2bBits. b ) ; bufferList [ j ++ ] = ( TPM2B_DIGEST * ) & ( tpm2bLabel. b ) ; bufferList [ j ++ ] = ( TPM2B_DIGEST * ) & ( tpm2bBits. b ) ; bufferList [ j ++ ] = ( TPM2B_DI",0
121,"<S2SV_ModStart> size_t size ; if ( width == 0 || height == 0 ) { goto error ; } if (! jas_safe_intfast32_add ( tlx, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ) { goto error ; } if (! <S2SV_ModStart> 0 ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ) { goto error ; } cmpt -> stream_ = ( inmem )? jas_stream_memopen2 ( 0, size ) : jas_stream_tmpfile ( ) ; if (! cmpt -> stream_ ) { goto error ; } if (",0
122,<S2SV_ModStart> s ) { if ( s == 0 ) return ( ( void * ) NULL ) ;,1
123,<S2SV_ModStart> ; if ( WARN_ON_ONCE (! ib_safe_file_access ( fp ) ) ) return - EACCES ; if (,1
124,"<S2SV_ModStart> ""MemoryAllocationFailed"" ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;",0
125,<S2SV_ModStart> ( peer ) peer = maybe_get_net <S2SV_ModEnd> ( peer ),1
126,<S2SV_ModStart> ; } } if ( i < ( int ) header_buf_used && <S2SV_ModStart> ] == '\\n' ) { i ++ ; if ( i < ( int ) header_buf_used && <S2SV_ModStart> } } } if ( i < ( int ) header_buf_used && <S2SV_ModStart> ] == '\\n' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\r' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\r' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { i ++ ; if ( i < ( int ) header_buf_used &&,0
127,<S2SV_ModStart> m_family ) && POKE_UINT8 ( <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
128,<S2SV_ModStart> == datalen ) { if ( flags & FLAG_LAST_MATCHED ) { pc -= asn1_op_lengths [ op ] ; goto next_op ; } <S2SV_ModEnd> flags &= ~ <S2SV_ModStart> == datalen ) { pc -= asn1_op_lengths [ op ] ; goto next_op ; } <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> == datalen ) { if ( flags & FLAG_LAST_MATCHED ) { flags &= ~ FLAG_LAST_MATCHED ; pc -= asn1_op_lengths [ op ] ; goto next_op ; },0
129,<S2SV_ModStart> = 0 ; spin_lock_bh ( & sock_net ( sk ) -> sctp. addr_wq_lock ) ; <S2SV_ModStart> = 0 ; spin_unlock_bh ( & sock_net ( sk ) -> sctp. addr_wq_lock ) ;,0
130,"<S2SV_ModStart> int mpeg4_decode_profile_level ( MpegEncContext <S2SV_ModEnd> * s, <S2SV_ModStart> gb ) { if ( s -> avctx -> profile == 0 && s -> avctx -> level == 8 ) { s -> avctx -> level = 0 ; } else { s -> avctx -> profile = 0 ; } } return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
131,"<S2SV_ModStart> + MIDQ_DATA_BUFF ; unsigned short head, tail ; <S2SV_ModStart> ( mpu -> input_lock ) ; head = readw ( mpu -> dev -> MIDQ + JQS_wHead ) ; tail = readw ( mpu -> dev -> MIDQ + JQS_wTail ) ; while ( head!= tail ) { u16 wTmp, val ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; } spin_lock_irqsave (",0
132,<S2SV_ModStart> rule ) ; if (! entry -> lsm [ lsm_rule ]. rule ) return - EINVAL ;,1
133,<S2SV_ModStart> file ) ; <S2SV_ModEnd> file_free ( file,1
134,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
135,"<S2SV_ModStart> "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> checkSession();\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }\\n"" ""\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> function <S2SV_blank> receiveMessage(e) <S2SV_blank> {\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
136,"<S2SV_ModStart> req, size_t <S2SV_ModEnd> acl_len ) { <S2SV_ModStart> acl_len ) { <S2SV_ModEnd> int status ; <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart>, OP_GETATTR ) )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & savep ) )!= 0 ) goto out ; if ( unlikely ( attrlen > recvd ) { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen, recvd ) ; return - EINVAL ; } <S2SV_ModEnd> xdr_read_pages ( xdr <S2SV_ModStart>, attrlen ) ; <S2SV_ModEnd> } else status",0
137,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,1
138,<S2SV_ModStart> ; while ( ( i < to_read ) && <S2SV_ModStart>!= 0 ) <S2SV_ModEnd> ) { i,1
139,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
140,"<S2SV_ModStart> [ plane ] && in -> pix_fmt_desc_get ( in -> format ) -> flags & AV_PIX_FMT_FLAG_PLANE <S2SV_ModEnd> ) memcpy ( <S2SV_ModStart> [ plane ] && in -> pix_fmt_desc_get ( in -> format ) -> flags & AV_PIX_FMT_FLAG_HIGHBITDEPTH ) memcpy ( out -> data [ plane ] + ( width - 1 ) * step, in -> data [ plane ] + ( height - 1 ) * step ) ; av_frame_copy_props ( out, in ) ; if ( av_pix_fmt_desc_get ( in -> format ) -> flags & AV_PIX_FMT_FLAG_HIGHBITDEPTH ) memcpy ( out -> data [ plane ] + ( width - 1 ) * step, in -> data [ plane ] + ( height - 1 ) * step ) ; else memcpy ( out -> data [ plane ], in -> data [ plane ] ) ; for ( i = 0 ; i < height ; i ++ ) { uint8_t * outrow16 = ( uint8_t * ) outrow ; uint16_t * inrow16 = ( uint",0
141,"<S2SV_ModStart> ( szFileName, pszFileName, <S2SV_ModStart> ) - 5 <S2SV_ModEnd> ) ; }",1
142,"<S2SV_ModStart>, & tok ) ; if (! ssplit ( tok, 1 ) ) { return MPR_ERR_BAD_SYNTAX ; } <S2SV_ModStart> ( tok, "":"" ) ; if (! ssplit ( tok, 1 ) ) { return MPR_ERR_BAD_SYNTAX ; } } if ( owner && * owner ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else { uid = userToID ( owner ) ; } } if ( group && * group ) { if ( smatch ( owner, ""APPWEB"" ) ) { gid = groupToID ( group ) ; } } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; }",0
143,"<S2SV_ModStart> ) ) ; if ( nelements == 0 ) { DPRINTF ( ( ""CDF_VECTOR <S2SV_blank> with <S2SV_blank> nelements <S2SV_blank> == <S2SV_blank> 0\\n"" ) ) ; goto out ; } <S2SV_ModStart> 0 ) { DPRINTF ( ( ""CDF_VECTOR <S2SV_blank> with <S2SV_blank> nelements <S2SV_blank> == <S2SV_blank> 0\\n"" ) ) ; <S2SV_ModStart> 0 ) { DPRINTF ( ( ""CDF_VECTOR <S2SV_blank> with <S2SV_blank> nelements <S2SV_blank> == <S2SV_blank> 0\\n"" ) ) ; goto out ; } if ( nelements == 0 ) { DPRINTF ( ( ""CDF_VECTOR <S2SV_blank> with <S2SV_blank> nelements <S2SV_blank> == <S2SV_blank> 0\\n"" ) ) ; goto out ; } <S2SV_ModStart> 0 ) { DPRINTF ( ( ""CDF_VECTOR <S2SV_blank> with <S2SV_blank> nelements <S2SV_blank> == <S2SV_blank> 0\\n"" ) ) ; <S2SV_ModStart> 0 ) { DPRINTF ( ( ""CDF_VECTOR <S2SV_blank> with <S2SV_blank> nelements <S2SV_blank> == <S2SV_blank> 0\\n"" ) ) ; goto out ; }",0
144,"<S2SV_ModStart> __be32 new_saddr ; struct ip_options_rcu * inet_opt ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. srr ) daddr = inet_opt -> opt. <S2SV_ModEnd> faddr ; rt",1
145,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
146,<S2SV_ModStart> case EIGRP_COM_HDR_V <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
147,"<S2SV_ModStart> ; # if CONFIG_MEM_MANAGER if ( vpx_mm_create_heap_memory ( ) < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> create <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) } number_aau = ( ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ; addr = VPX_MALLOC_L ( size + <S2SV_ModEnd> ADDRESS_STORAGE_SIZE ) ; <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr",0
148,"<S2SV_ModStart> int res ; <S2SV_ModEnd> long long export_index_table <S2SV_ModStart> long long export_index_table [ 2 * SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) <S2SV_ModEnd> ] ; res <S2SV_ModStart> long long export_index_table [ 2 * SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) ] ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } res = read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } SQUASHFS_INSWAP_LOOKUP_BLOCKS ( export_index_table, indexes ) ; * table_start = export_index_table [ 0 ] ; return TRUE ; } <S2SV_ModEnd> <SQUASHFS_",0
149,"<S2SV_ModStart> } ptr = strchr <S2SV_ModEnd> ( ptr + <S2SV_ModStart> + 1, '/' ) ; if (! ptr ) { rw_exit ( & sdvp -> sdev_contents ) ; return - ENOENT ; } if ( ptr [ strlen ( ZVOL_DIR ) + 1 ]!= '/' ) { rw_exit ( & sdvp -> sdev_contents ) ; devzvol_create_pool_dirs ( dvp ) ; rw_enter ( & sdvp -> sdev_contents, RW_READER ) ; return ( devname_readdir_func ( dvp, uiop, cred, eofp, 0 ) ) ; } ptr = strchr ( ptr + 1, '/' ) ; if (! ptr ) { rw_exit ( & sdvp -> sdev_contents ) ; return - ENOENT ; } ptr ++ ; rw_exit ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw",0
150,<S2SV_ModStart> |= EXT4_EXT_MARK_UNINIT2 ; if ( flags & EXT4_GET_BLOCKS_CONVERT ) split_flag |= EXT4_EXT_DATA_VALID2 ;,1
151,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret <S2SV_ModEnd> ) goto out",0
152,"<S2SV_ModStart> HASH_DISABLED ; } else { return apr_psprintf ( cmd -> pool, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"", p1 ) ; }",0
153,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ), & final ) ; rcu_read_unlock ( <S2SV_ModEnd> ) ; dst",1
154,"<S2SV_ModStart> = 0.0 ; uint16 <S2SV_ModEnd> planar = 0 <S2SV_ModStart> 0.0 ; } if ( buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""loadImage"", ""Unable <S2SV_blank> to <S2SV_blank> allocate/reallocate <S2SV_blank> read <S2SV_blank> buffer"" ) ; return ( - 1 ) ; } <S2SV_ModStart> buffsize ) ; if ( buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""loadImage"", ""Unable <S2SV_blank> to <S2SV_blank> allocate/reallocate <S2SV_blank> read <S2SV_blank> buffer"" ) ; return ( - 1 ) ; } <S2SV_ModStart> buffsize ) ; if ( buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""loadImage"", ""loadImage"", ""Unable <S2SV_blank> to <S2SV_blank> allocate/reallocate <S2SV_blank> read <S2SV_blank> buffer"" ) ; return ( - 1 ) ; }",0
155,"<S2SV_ModStart> 0 ; # if CONFIG_VP10_ENCODER if ( global -> codec -> codec_type == VPX_CODEC_8 ) { ctrl_args = vp10_args ; ctrl_args_map = vp10_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp10"" ) == 0 ) { ctrl_args = vp10_args ; ctrl_args_map = vp10_arg_ctrl_map ; # endif if ( strcmp ( global -> codec -> name, ""vp11"" ) == 0 ) { ctrl_args = vp11_args ; ctrl_args_map = vp11_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp12"" ) == 0 ) { ctrl_args = vp12_args ; ctrl_args_map = vp12_arg_ctrl_map ; # endif } else if ( arg_match ( & arg, & outputfile, argi ) ) { config -> out_fn = arg. val ; } else if ( arg_match ( & arg, & fpf_name, argi ) ) { config -> stats_",0
156,"<S2SV_ModStart> ) ; } if (! success ) fatal ( ""server_input_global_request: <S2SV_blank> tcpip-forward <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> listen <S2SV_blank> %d"", fwd. listen_host, fwd. listen_port ) ;",0
157,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
158,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
159,"<S2SV_ModStart> errout ; } <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart>. value = ( char * ) kmalloc ( sizeof ( gss_union_ctx_id_desc ), GFP_KERNEL ) ; if ( gr -> gr_ctx. value == NULL ) { <S2SV_ModEnd> fprintf ( stderr <S2SV_ModStart> ""svcauth_gss_accept_context"" ) ; return ( FALSE ) ; } <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart>. value = ( char * ) kmalloc ( sizeof ( gss_union_ctx_id_desc ) ) ; <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart>. value = ( char * ) kmalloc ( sizeof ( gss_union_ctx_id_desc ), GFP_KERNEL ) ; if ( gr -> gr_ctx. value == NULL ) { <S2SV_ModEnd> fprintf ( stderr <S2SV_ModStart> ""svcauth_gss_accept_context"" ) ; return ( FALSE ) ; } <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart>. value = ( char * ) kmalloc ( sizeof ( gss_union_ctx_id_desc ) ) ; <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart>. value = ( char * ) kmalloc ( sizeof ( gss_union_ctx_id_desc ) )",0
160,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> out ; } ext_size = sizeof ( EXT4_I ( inode ) -> i_data ) ; <S2SV_ModStart> -> i_data, ext_size ) ; memset ( bh -> b_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size <S2SV_ModEnd> ) ; neh",1
161,"<S2SV_ModStart> 1 ; } preverify_ok |= verify_checks ( c, preverify_ok, callback_ctx ) ; <S2SV_ModStart> 1 ; } preverify_ok &= verify_checks ( c, preverify_ok, callback_ctx ) ; if ( preverify_ok ) { SSL_SESSION * sess = SSL_get1_session ( c -> ssl ) ; if (! sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } if ( <S2SV_ModEnd> c -> opt <S2SV_ModStart> -> protocol ) { if (! verify_checks ( c, preverify_ok, callback_ctx ) ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } return 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_",0
162,<S2SV_ModStart> ; int ret ; if ( current_chrooted ( ) ) return - EPERM,1
163,"<S2SV_ModStart> ( memcmp ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE <S2SV_ModEnd> ) ) goto",0
164,"<S2SV_ModStart> AVERROR_INVALIDDATA ; } <S2SV_ModEnd> c -> nreslevels2decode <S2SV_ModStart> -> reduction_factor ) { avpriv_request_sample ( s -> avctx, ""reduction_factor <S2SV_blank> too <S2SV_blank> large\\n"" ) ; return AVERROR_PATCHWELCOME ; } <S2SV_ModEnd> c -> log2_cblk_width <S2SV_ModStart> 6 ) { avpriv_request_sample ( s -> avctx, ""log2_cblk_size <S2SV_blank> too <S2SV_blank> large\\n"" ) ; return AVERROR_PATCHWELCOME ; } if ( c -> log2_cblk_width + c -> log2_cblk_height > 6 ) { avpriv_request_sample ( s -> avctx, ""log2_cblk_size <S2SV_blank> too <S2SV_blank> large\\n"" ) ; return AVERROR_PATCHWELCOME ; }",0
165,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
166,"<S2SV_ModStart> ; bool is_drop_n_account <S2SV_ModEnd> ; BUILD_BUG_ON ( <S2SV_ModStart> ; is_drop_n_account = false ; copy_skb = skb_clone ( skb, GFP_ATOMIC ) ; if ( skb_is_gso ( skb ) ) goto drop_n_restore",0
167,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> sctp_auth_asoc_init_active_key ( asoc,1
168,<S2SV_ModStart> return false ; if ( ndp_msg_type_info ( msg_type ) -> inter_type ) return ndp_msg_type_info ( msg_type ) -> inter_type_valid ( msg ) ;,0
169,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> lsm_set_label_at ( int lsm_labelfd <S2SV_ModEnd>, int on_exec <S2SV_ModStart> lsm_set_label_at ( int lsm_labelfd <S2SV_ModEnd>, int on_exec <S2SV_ModStart> ) goto out <S2SV_ModEnd> ; const char <S2SV_ModStart> ( name, ""AppArmor"" ) == 0 ) on_exec = 0 ; if ( on_exec ) { labelfd = openat ( procfd, ""self/attr/exec"", O_RDWR ) ; } else { labelfd = openat ( procfd, ""self/attr/current"", O_RDWR ) ; } if ( labelfd < 0 ) { SYSERROR ( ""Unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> LSM <S2SV_blank> label"" ) ; ret = - 1 ; goto out ; } if ( strcmp ( name, ""SELinux"" ) == 0 ) { if ( write ( labelfd, lsm_label, strlen ( lsm_label ) + 1 ) < 0 ) { SYSERROR ( ""Unable <S2SV_blank> to <S2SV_blank> set <S2SV_blank> LSM <S2SV_blank> label"" ) ; ret = - 1 ; goto out ; }",0
170,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
171,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
172,"<S2SV_ModStart> cpi ) { <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> KEY_FRAME ) { <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> -= bits_used ; cpi -> twopass. gf_group_bits -= bits_used ; cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
173,"<S2SV_ModStart> } num ++ ; if ( num > MaxAllocSize / ITEMSIZE ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> levels <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", num, ( int ) ( MaxAllocSize / ITEMSIZE ) ) ) )",1
174,"<S2SV_ModStart> header, struct mb2_cache_entry <S2SV_ModEnd> * * pce <S2SV_ModStart> ) ; struct mb2_cache_entry * ce ; struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache = <S2SV_ModStart> hash ) ; ce = mb2_cache_entry_find_first <S2SV_ModEnd> ( ext4_mb_cache, <S2SV_ModStart> ( ext4_mb_cache, <S2SV_ModEnd> hash ) ; <S2SV_ModStart> * bh ; <S2SV_ModEnd> bh = sb_bread <S2SV_ModStart> ; ce = mb2_cache_entry_find_next ( ext4_mb_cache, ce <S2SV_ModEnd> ) ; }",1
175,"<S2SV_ModStart> data_offset ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> = offset ; return parse_cosine_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart> wth -> frame_buffer, line <S2SV_ModEnd>, err, <S2SV_ModStart> err_info ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
176,<S2SV_ModStart> = line_end ; <S2SV_ModEnd> error = add_push_report_pkt,1
177,"<S2SV_ModStart> > 0 && extend ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } if ( left >= n ) { s -> packet_length += n ; s -> left = left - n ; rb -> offset += n ; return ( n ; } if ( s -> packet_length + n > ( int ) ( rb -> len - rb -> offset ) ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } if ( extend ) { if ( left > ( int ) ( rb -> len - rb -> offset ) ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } if ( extend ) { if ( left > ( int ) ( rb -> len - rb -> offset ) ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; }",0
178,"<S2SV_ModStart> { # ifdef HAVE_MSC_VER <S2SV_ModEnd> char buf [ <S2SV_ModStart> ( data ) ] ; # else char * buf = grub_malloc ( EXT2_BLOCK_SIZE ( data ) ) ; if (! buf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } leaf = grub_ext4_find_leaf ( data, buf, ( struct grub_ext4_extent * ) ( buf + 1 ) ) ; if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) ( leaf + 1 ) ; for ( i = 0 ; i < grub_le_to_cpu16 ( leaf -> entries ) ; i ++ ) { if ( fileblock < grub_le_to_cpu32 ( ext [ i ]. block ) ) break ; <S2SV_ModEnd> fileblock -= grub_le_to_cpu32 <S2SV_ModStart> start ) ; } <S2SV_ModStart> 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
179,"<S2SV_ModStart> ) / 3 ) ThrowReaderException ( CorruptImageError, ""InvalidColormapIndex"" ) ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries",0
180,"<S2SV_ModStart> - ENOMEM ; size_t copied_size = hdr. size_in ; <S2SV_ModStart> copy_from_user ( buf + copied_size <S2SV_ModEnd>, hdr. <S2SV_ModStart> size_in ) ) { copied_size = - EFAULT ; goto out ; } if ( copied_size < 0 ) { vbg_debug ( ""%s: <S2SV_blank> too <S2SV_blank> much <S2SV_blank> output <S2SV_blank> data <S2SV_blank> %zu <S2SV_blank> > <S2SV_blank> %zu\\n"", __func__, copied_size, ( unsigned long ) hdr. size_out ) ; ret = - EINVAL ; goto out ; } if ( copied_size < 0 ) { vbg_debug ( ""%s: <S2SV_blank> too <S2SV_blank> much <S2SV_blank> output <S2SV_blank> data <S2SV_blank> %zu <S2SV_blank> > <S2SV_blank> %zu\\n"", __func__, returned_size, ( unsigned long ) hdr. size_out ) ; ret = - EINVAL ; goto out ; } if ( copied_size < 0 ) { vbg_debug ( ""%s: <S2SV_blank> too <S2SV_blank> much <S2SV_blank> output <S2SV_blank> data <S2SV_blank> %zu <S2SV_blank> > <S2SV_blank> %zu\\n"", __func__, returned_size ) ; ret = - EINVAL ; goto out ; }",0
181,"<S2SV_ModStart> int m ; jas_fix_t * buf ; int hstartrow ; int hstartcol ; if ( bufsize <= 0 ) { abort ( ) ; } buf = jas_alloc2 ( bufsize, sizeof ( splitbuf ) ) ; if (! buf ) { abort ( ) ; } } if ( numrows >= 2 ) { hstartrow = ( numrows + 1 - parity ) >> 1 ; hstartrow = ( numrows + 2 - parity ) >> 1 ; n = m ; dstptr = buf ; srcptr = & a [ hstartrow * stride ] ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr = & a [ hstartrow * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = dstptr ; ++ dstptr2 ; ++ src",0
182,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart>. length ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
183,"<S2SV_ModStart> define EOFOp 0x08 <S2SV_ModEnd> Image * image <S2SV_ModStart> ) ) ; if ( image -> rows * image -> columns > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( image -> rows * image -> columns > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( image -> rows * image -> columns > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( image -> rows * image -> columns > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( image -> rows * image -> rows > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( image -> rows * image -> columns > GetBlobSize ( image ) ) ThrowReaderException ( Cor",0
184,<S2SV_ModStart> DQUOT_LIMITS_ENABLED ) ; if ( sbi -> s_mb_cache ) { ext2_xattr_destroy_cache ( sbi -> s_mb_cache ) ; sbi -> s_mb_cache = NULL ; } <S2SV_ModEnd> if (!,1
185,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> num_altsetting < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - ENODEV ; goto err_free_urbinfo ; } <S2SV_ModStart> 0 ]. desc ; if ( endpoint -> desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - ENODEV ; goto err_free_buf ; }",0
186,"<S2SV_ModStart> ( buf, sizeof ( buf ) <S2SV_ModEnd> ) ; }",0
187,<S2SV_ModStart> node ) { if ( node -> nd_item. ci_parent ) <S2SV_ModStart> ci_parent ) ; else return NULL ;,1
188,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
189,<S2SV_ModStart> pb ) ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ;,0
190,"<S2SV_ModStart> ) ) ; if ( nelements == 0 ) { DPRINTF ( ( ""CDF_VECTOR <S2SV_blank> with <S2SV_blank> nelements <S2SV_blank> == <S2SV_blank> 0\\n"" ) ) ; goto out ; } <S2SV_ModStart> 0 ) { DPRINTF ( ( ""CDF_VECTOR <S2SV_blank> with <S2SV_blank> nelements <S2SV_blank> == <S2SV_blank> 0\\n"" ) ) ; <S2SV_ModStart> 0 ) { DPRINTF ( ( ""CDF_VECTOR <S2SV_blank> with <S2SV_blank> nelements <S2SV_blank> == <S2SV_blank> 0\\n"" ) ) ; goto out ; } if ( nelements == 0 ) { DPRINTF ( ( ""CDF_VECTOR <S2SV_blank> with <S2SV_blank> nelements <S2SV_blank> == <S2SV_blank> 0\\n"" ) ) ; goto out ; } <S2SV_ModStart> 0 ) { DPRINTF ( ( ""CDF_VECTOR <S2SV_blank> with <S2SV_blank> nelements <S2SV_blank> == <S2SV_blank> 0\\n"" ) ) ; <S2SV_ModStart> 0 ) { DPRINTF ( ( ""CDF_VECTOR <S2SV_blank> with <S2SV_blank> nelements <S2SV_blank> == <S2SV_blank> 0\\n"" ) ) ; goto out ; }",0
191,<S2SV_ModStart> protostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> cryptostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> timingstats ) ; <S2SV_ModEnd> step_callback = &,1
192,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> fd = xfmkstemp <S2SV_ModEnd> ( & tmpname <S2SV_ModStart> dir ) ) == NULL ) { ulckpwdf ( ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } copyfile ( lockfd, fileno ( fd ) ) ; tmp_file = tmpname ;",0
193,<S2SV_ModStart> prev ) ; n -> mounts += n -> pending_mounts ; n -> pending_mounts = 0 ;,1
194,"<S2SV_ModStart> ; savesegment ( fs, fsindex ) ; savesegment ( gs, gsindex ) ; load_TLS ( next, cpu ) ; arch_end_context_switch ( next_p ) ; savesegment ( <S2SV_ModStart> next -> ds <S2SV_ModEnd> ) ; if",1
195,<S2SV_ModStart> dd ) ; <S2SV_ModEnd> } } <S2SV_null>,1
196,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid && 0 == ( ps_sps -> i1_sps_base + MAX_SPS_CNT - 2 ) && 0 == ( ps_sps -> i1_sps_base + MAX_SPS_CNT - 3 ) && 0 == ( ps_sps -> i1_sps_base + MAX_SPS_CNT - 2 ) && 0 == ( ps_sps -> i1_sps_base + MAX_SPS_CNT - 3 ) && 0 == ( ps_sps -> i1_sps_base + MAX_SPS_CNT - 2 ) && 0 == ( ps_sps -> i1_sps_base + MAX_SPS_CNT - 3 ) && 0 == ( ps_sps -> i1_sps_base + MAX_SPS_CNT - 3 ) && 0 == ( ps_sps -> i1_sps_base + MAX_SPS_CNT - 3 ) && 0 == ( ps_sps -> i1_sps_base + MAX,0
197,<S2SV_ModStart> 1u << DB_VECTOR ) | ( 1u << AC_VECTOR,1
198,"<S2SV_ModStart> sfsname ) { <S2SV_ModEnd> char temp [ <S2SV_ModStart> 1 ] ; u_int len = strlen ( sfsname ) ; if ( len > NFSX_V3FHMAX ) { ND_PRINT ( ( ndo, "" <S2SV_blank> fh[%u]"", ( unsigned int ) NFSX_V3FHMAX ) ) ; sfsname = NULL ; } else if ( len > NFSX_V3FHMAX ) { ND_PRINT ( ( ndo, "" <S2SV_blank> fh[%u]"", ( unsigned int ) NFSX_V3FHMAX ) ) ; len = NFSX_V3FHMAX ; } if ( len > len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> fh[%u]"", ( unsigned int ) len ) ) ; sfsname = NULL ; } if ( sfsname ) { char temp [ NFSX_V3FHMAX ] ; strncpy ( temp, sfsname, len ) ; temp [ len ] = '\\0' ; spacep = strchr ( temp,'<S2SV_blank>') ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh",0
199,"<S2SV_ModStart>, unsigned int <S2SV_ModEnd> flags ) { <S2SV_ModStart> ; ipv6_select_ident ( skb, & fhdr ) ; skb_shinfo ( skb ) -> ip_frag_id = fhdr. identification ; __skb_queue_tail ( & sk -> sk_write_queue, skb ) ; return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
200,<S2SV_ModStart> ( res ) goto err_add_port <S2SV_ModEnd> ; res = <S2SV_ModStart> port ) ; err_add_port : hsr_del_node ( & hsr -> self_node_db ) ;,1
201,<S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> &,0
202,"<S2SV_ModStart> void vp9_setup_dst_planes ( <S2SV_ModEnd> MACROBLOCKD * xd <S2SV_ModStart> mi_col ) { const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; const int subsampling_x, subsampling_y ; const int mi_col ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
203,"<S2SV_ModStart> ++ ) ; if (! xdr_decode_hyper ( p, & args -> stable ) ) return 0 ;",0
204,"<S2SV_ModStart> <S2SV_null> static inline int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> dst ) { return assign_eip_far ( ctxt, dst, ctxt -> mode == X86EMUL_MODE_PROT64 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",1
205,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
206,"<S2SV_ModStart> ; remaining = tvb_reported_length_remaining <S2SV_ModEnd> ( tvb,",1
207,<S2SV_ModStart> == READ ) { mutex_lock ( & inode -> i_mmap_sem ) ; <S2SV_ModStart> = ocfs2_dio_get_block ; mutex_unlock ( & inode -> i_mmap_sem ) ;,0
208,<S2SV_ModStart> return rc ; <S2SV_ModEnd> copied = skb,1
209,"<S2SV_ModStart>, strparm )!= 2 ) { if ( strparm [ 0 ] == \'""\' ) { isstring = true ; len = strlen ( strparm ) ; strparm [ len - 1 ] = 0 ; } else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else if ( parm == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else strparm [ len - 1 ] = 0 ; } else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else sscanf ( strparm + 2, ""%i"", & parm ) ; for ( i = 0 ; i < numdefaults ; i ++ ) if (! strcmp ( def, defaults [ i ]. name ) ) { if (! isstring ) * defaults [ i ]. location = parm ; else *",0
210,<S2SV_ModStart> ; if ( pmc_overflow ( val ) <S2SV_ModEnd> ) write_pmc (,1
211,"<S2SV_ModStart> ( * b + len, * avail - len <S2SV_ModEnd>, nl )",1
212,"<S2SV_ModStart> n ) { <S2SV_ModEnd> int all_whitespace = <S2SV_ModStart> ; PyCompilerFlags cf <S2SV_ModEnd> ; char * <S2SV_ModStart> * str ; PyObject * o ; Py_ssize_t len ; Py_ssize_t i ; assert ( expr_start >= expr_end ) ; assert ( * ( expr_start - 1 ) == '{' ) ; assert ( * ( expr_end - 1 ) == '}' ) ; <S2SV_ModEnd> o = PyUnicode_DecodeUTF8 <S2SV_ModStart> expr_start, NULL ) ; if ( o == NULL ) return NULL ; len = PyUnicode_GET_LENGTH ( o ) ; kind = PyUnicode_KIND ( o ) ; data = PyUnicode_DATA ( o ) ; for ( i = 0 ; i < len ; i ++ ) { if (! Py_UNICODE_ISSPACE ( PyUnicode_READ ( kind, data, i ) ) ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } } Py_DECREF ( o ) ; str = PyMem_RawMalloc ( len + 3 ) ; if ( str == NULL ) return NULL ; Py_DECREF ( fstring_name )",0
213,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
214,"<S2SV_ModStart> string ) { return cJSON_firstChild ( object, string ) <S2SV_ModEnd> ; } <S2SV_null>",0
215,"<S2SV_ModStart> == 0 ) mark_key_instantiated ( key, 0 <S2SV_ModEnd> ) ; up_write",1
216,<S2SV_ModStart> <= * len && plen > 0,1
217,"<S2SV_ModStart> ; } } if ( retval == 0 ) { retval = context -> put_listent ( context, entry -> flags, name_loc -> nameval, ( int ) xfs_attr3_leaf_valuelen ( leaf, i ), context -> rmtvaluelen ) ; if ( retval!= 0 ) { retval = context -> put_listent ( context, retval, context -> rmtvaluelen ) ; if ( retval!= 0 ) { retval = context -> put_listent ( context, retval, context -> rmtvaluelen ) ; } } else { retval = context -> put_listent ( context, retval, entry -> flags, name_loc -> nameval, ( int ) xfs_attr3_leaf_valuelen ( leaf, i ) ) ; if ( retval!= 0 ) { retval = context -> put_listent ( context, retval, context -> rmtvaluelen ) ; if ( retval!= 0 ) { retval = context -> put_listent ( context, retval, 0, context -> rmtvaluelen ) ; } } }",0
218,<S2SV_ModStart> ; if ( <S2SV_ModEnd> timeout == NULL <S2SV_ModStart> ; if ( compat_get_timespec <S2SV_ModEnd> ( & ktspec <S2SV_ModStart> > 0 && compat_put_timespec <S2SV_ModEnd> ( & ktspec,1
219,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart>. length ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
220,<S2SV_ModStart> ndev ) ; <S2SV_ModEnd> assert ( skb <S2SV_ModStart> q_num ) ; return <S2SV_ModEnd> hns_nic_net_xmit_hw ( ndev <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
221,<S2SV_ModStart> |= MSG_TRUNC ; <S2SV_ModEnd> lock_sock ( sk,1
222,"<S2SV_ModStart>, NO_HASHEXPAND, <S2SV_ModEnd> SLAB_REASSIGN, SLAB_AUTOMOVE <S2SV_ModStart>, NO_HASHEXPAND, <S2SV_ModEnd> SLAB_AUTOMOVE, SLAB_AUTOMOVE_RATIO <S2SV_ModStart>, NO_HASHEXPAND, <S2SV_ModEnd> SLAB_AUTOMOVE_WINDOW, <S2SV_ModStart>, NO_HASHEXPAND, <S2SV_ModEnd> SLAB_REASSIGN, SLAB_AUTOMOVE_RATIO <S2SV_ModStart>, NO_HASHEXPAND, <S2SV_ModEnd> SLAB_REASSIGN, <S2SV_ModStart>, NO_HASHEXPAND, SLAB_AUTOMOVE, <S2SV_ModEnd> SLAB_AUTOMOVE_RATIO <S2SV_ModStart>, SLAB_AUTOMOVE_WINDOW, <S2SV_ModEnd> SLAB_AUTOMOVE_RATIO, SLAB_AUTOMOVE_RATIO <S2SV_ModStart>, SLAB_AUTOMOVE_RATIO, SLAB_AUTOMOVE_WINDOW, NO_HASHEXPAND,",0
223,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
224,<S2SV_ModStart> size ) ; if (! px -> ft ) { return FALSE ; },1
225,<S2SV_ModStart> found = 0 <S2SV_ModEnd> ; const char <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( found,1
226,"<S2SV_ModStart> int validate_event ( struct pmu * pmu, <S2SV_ModStart> arm_pmu * armpmu <S2SV_ModEnd> ; struct hw_perf_event <S2SV_ModStart> ( event -> pmu <S2SV_ModEnd>!= leader_pmu ) <S2SV_ModStart> return 1 ; armpmu = to_arm_pmu ( event -> pmu ) ; if ( armpmu -> get_event_idx <S2SV_ModEnd> ( hw_events, <S2SV_ModStart> return armpmu -> get_event_idx <S2SV_ModEnd> ( hw_events,",0
227,"<S2SV_ModStart> bool new_idmap_permitted ( const struct file * file, <S2SV_ModStart>, cap_setid ) && file_ns_capable ( file, ns -> parent, cap_setid )",1
228,<S2SV_ModStart> j ++ ) ( void ) a -> values [ j ] ; <S2SV_ModStart> ) ; } ( void ) a ;,0
229,"<S2SV_ModStart> hx ; u8 * buf <S2SV_ModEnd> ; int ret <S2SV_ModStart> = 0 ; buf = kmalloc ( sizeof ( * hx ), GFP_KERNEL ) ; if (! buf ) return - ENOMEM ; hx = ( struct hexline * ) buf ; buf [ 0 ] = 0 ; if ( usb_cypress_writemem ( udev, cypress [ type ]. cpu_cs_register, buf, 1 <S2SV_ModEnd> )!= 1 <S2SV_ModStart> ( ret || usb_cypress_writemem ( udev, cypress [ type ]. cpu_cs_register, buf, 1 <S2SV_ModEnd> )!= 1 <S2SV_ModStart> ; kfree ( buf <S2SV_ModEnd> ) ; return <S2SV_ModStart> 0 ) { buf [ 0 ] = 0 ; buf [ 1 ] = 0 ; if ( usb_cypress_writemem ( udev, cypress [ type ]. cpu_cs_register, buf, 1 <S2SV_ModEnd> )!= 1 <S2SV_ModStart> ( ret || usb_cypress_writemem ( udev, cypress [ type ]. cpu_cs_register, buf, 1 <S2SV_ModEnd> )!= 1 <S2SV_ModStart> ; kfree ( buf <S2SV_ModEnd> ) ; return",0
230,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 2 ; <S2SV_ModStart> val_l ) ) ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",0
231,"<S2SV_ModStart> princ ) ; success = ( strncmp ( handle -> params. realm, realm -> data, realm -> length ) == 0 && strncmp ( ""kadmin"", c1 -> data, c1 -> length ) == 0 <S2SV_ModEnd> && strncmp (",0
232,<S2SV_ModStart> ; if ( shader_rec_offset < args -> bin_cl_size ||,1
233,<S2SV_ModStart> endif # if HAVE_LZMA_H <S2SV_ModEnd> && HAVE_LIBLZMA if,1
234,<S2SV_ModStart> vma -> vm_file ) ; down_read ( & EXT4_I ( inode ) -> i_mmap_sem <S2SV_ModStart> ; out : up_read ( & EXT4_I ( inode ) -> i_mmap_sem ) ;,1
235,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
236,<S2SV_ModStart> arg ) { char ch = * arg ; switch ( ch <S2SV_ModEnd> ) { case <S2SV_ModStart> ';' : case '=' : case <S2SV_ModStart> b ++ = ch <S2SV_ModEnd> ; break ;,1
237,"<S2SV_ModStart> ) ) ; if ( cp == NULL ) cp = ikev1_attr_print ( ndo, cp, map, ep2 ) ; if ( cp == NULL ) cp = ikev1_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) cp = ikev1_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) cp = ikev1_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) cp = ikev1_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) cp = ikev1_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) cp = ikev1_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) cp = ikev1_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) cp = ikev1_attr_print ( ndo, cp, ep2 ) ;",0
238,"<S2SV_ModStart> } GsmIceConnectionData ; IceListenObj listener ; IceAcceptStatus status ; IceConn ice_conn ; g_debug ( ""GsmXsmpServer: <S2SV_blank> IceAcceptConnection()"" ) ; ice_conn = IceAcceptConnection ( listener, & status ) ; if ( status!= IceAcceptSuccess ) { g_debug ( ""GsmXsmpServer: <S2SV_blank> IceAcceptConnection <S2SV_blank> returned <S2SV_blank> %d"", status ) ; return TRUE ; } <S2SV_ModEnd> ice_conn -> context <S2SV_ModStart> ice_conn ) ; <S2SV_ModEnd> gsm_store_add ( server",0
239,<S2SV_ModStart> if ( ( skb_mac_header <S2SV_ModEnd> ( skb ) <S2SV_ModStart> skb ) < skb -> head +,1
240,"<S2SV_ModStart> void ) { strncpy <S2SV_ModEnd> ( ""refs/heads/git_tilde1"", <S2SV_ModStart> "".git/foobar"" ) ; strncpy <S2SV_ModEnd> ( ""refs/heads/git_tilde1"", <S2SV_ModStart> "".git/foobar"" ) ; strncpy <S2SV_ModEnd> ( ""refs/heads/git_tilde1"", <S2SV_ModStart> ""refs/heads/git_tilde1"", "".git"" ) ; test_checkout_fails ( ""refs/heads/git_tilde1_ <S2SV_blank>.git_tilde1"", <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
241,<S2SV_ModStart>. val =!! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ; <S2SV_ModStart>. val =!! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ;,1
242,<S2SV_ModStart> & RCV_SHUTDOWN ) return 0 ; <S2SV_ModEnd> return err ; <S2SV_ModStart> msg_namelen ) ; <S2SV_ModEnd> } skb_free_datagram (,1
243,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
244,"<S2SV_ModStart> int i ; const int stride [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int buffers [ 5 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> uv_buffer, src -> alpha_buffer } ; const int strides [ 5 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y, pd -> subsampling_x, pd -> subsampling_y ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
245,"<S2SV_ModStart>, j ; if (! X509_get_subject_name ( cert ) ) { ret = ENOMEM ; goto cleanup ; } <S2SV_ModEnd> md -> subject_dn <S2SV_ModStart> goto cleanup ; } ret = strdup ( <S2SV_ModEnd> md -> subject_dn <S2SV_ModStart> md -> subject_dn ) ; if ( ret ) goto cleanup ; ret = strdup ( <S2SV_ModEnd> md -> issuer_dn <S2SV_ModStart> md -> issuer_dn ) ; if ( ret ) goto cleanup ; j = 0 ; if ( upn_sans!= NULL ) { for ( i = 0 ; i < upn_sans -> length ; i ++ ) { for ( i = 0 ; i < upn_sans -> length ; i ++ ) { ret = ENOMEM ; goto cleanup ; } ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx, cert, & pkinit_sans, & upn_sans, NULL ) ; if ( ret ) goto cleanup ; } if ( j!= 0 ) { for ( i = 0 ; i < upn_sans -> length ; i ++ ) { for ( i = 0 ; i < upn_sans -> length ; i ++",0
246,"<S2SV_ModStart> out_free ; } kvm_iommu_unmap_pages ( kvm, & old ) ;",0
247,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ru,1
248,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
249,"<S2SV_ModStart> * ni ; u_int length_left ; u_int j ; ND_TCHECK ( rp -> rip6_cmd ) ; <S2SV_ModStart> case RIP6_REQUEST : length_left = length ; if ( length_left <= 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %u[%u]:"", j, length ) ) ; break ; } if ( <S2SV_ModEnd> rp -> rip6_nets <S2SV_ModStart> -> rip6_metric == HOPCNT_INFINITY6 <S2SV_ModEnd> ) { ND_PRINT <S2SV_ModStart> break ; } if ( length_left <= 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %u[%u]:"", j, length ) ) ; else ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %u:"", j ) ) ; break ; } if ( length_left <= 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %u[%u]:"", j, length ) ) ; else ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %u:"", j ) ) ; break ; } <S2SV_ModStart>",0
250,<S2SV_ModStart> < 0 ) goto error ; <S2SV_ModEnd> goto set ;,1
251,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
252,"<S2SV_ModStart> argc ++ ; retval = bprm_change_interp ( iname, bprm ) ; if ( retval < 0 ) goto _error <S2SV_ModEnd> ; interp_file =",1
253,<S2SV_ModStart> ; int iSrc <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; } } <S2SV_ModEnd> res -> ContribRow <S2SV_ModStart> u ]. Left = iLeft ; res -> ContribRow [ u ]. Right = iRight ; for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ].,1
254,<S2SV_ModStart> user ) { cleanup_srcu_struct ( & user -> release_barrier ) ;,0
255,"<S2SV_ModStart> Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; return ; } if (! COM_CompareExtension ( filename, "".cfg"" ) ) { Com_Printf ( ""Com_WriteConfig_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".cfg\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n""",1
256,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen,1
257,"<S2SV_ModStart> & tee_mm_sec_ddr ) ; mobj_assert ( mobj ) ; <S2SV_ModStart> mobj ) memset <S2SV_ModEnd> ( mobj_get_va ( <S2SV_ModStart> 0 ), 0, size ) ;",0
258,<S2SV_ModStart> -> it_overrun += 1LL <S2SV_ModEnd> << i ;,1
259,"<S2SV_ModStart> * for_ch ; asdl_seq * ifs ; int is_async = 0 ; if ( NCH ( n ) == 1 ) { is_async = 1 ; } else if ( c -> c_feature_version < 6 ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } for_ch = CHILD ( n, 2 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; expression = ast_for_expr ( c, CHILD ( n, 3 + is_async ) ) ; if (! expression ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if ( NCH ( for_ch ) == 1 ) comp = comprehension ( first, expression, NULL, is_async, c -> c_arena ) ; else comp = comprehension ( Tuple ( t, Store, first -> lineno, first -> col_offset, c -> c_arena )",0
260,"<S2SV_ModStart> NULL ; } for ( i = src -> curframe + 1 ; i <= dst_state -> curframe ; i ++ ) { free_func_state ( dst_state -> frame [ i ] ) ; dst_state -> frame [ i ] = NULL ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) return - ENOMEM ; dst_state -> frame [ i ] = dst ; } } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) return - ENOMEM ; dst_state -> frame [ i ] = dst ; } dst_state -> frame [ i ] = dst ; }",0
261,"<S2SV_ModStart> void write_mb_modes_kf ( const VP9_COMMON * cm, const MACROBLOCKD * xd, <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> * mi_8x8, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> w ) { const MODE_INFO * const mi = mi_8x8 [ 0 ] ; const MODE_INFO * const above_mi = mi_8x8 [ - xd -> mi_stride ] ; const MODE_INFO * const left_mi = mi_8x8 [ - xd -> mi_stride ] ; const MB_MODE_INFO * const mbmi = & mi -> mbmi ; const BLOCK_SIZE bsize = mbmi -> sb_type ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ bsize ] ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ bsize ]",0
262,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; saddr,1
263,"<S2SV_ModStart> } } DPRINTF ( ""Data <S2SV_blank> ready <S2SV_blank> tag=0x%x <S2SV_blank> len=%zd\\n"" <S2SV_ModEnd>, r -> <S2SV_ModStart>. tag, r -> qiov. size <S2SV_ModEnd> ) ; n <S2SV_ModStart> -> req, r -> qiov. size <S2SV_ModEnd> ) ; }",0
264,<S2SV_ModStart> if ( cs >= <S2SV_ModEnd> CQSPI_MAX_CHIPSELECT ) {,1
265,"<S2SV_ModStart> { if ( n < 0 || n >= maxn ) { SWF_error ( ""Action <S2SV_blank> overflow!!"" ) ; return 0 ; } <S2SV_ModEnd> switch ( actions <S2SV_ModStart>. ActionCode ) { case SWFACTION_END : return 0 ; case SWFACTION_CONSTANTPOOL : decompileCONSTANTPOOL ( & actions [ n ] ) ; return 0 ; case SWFACTION_GOTOFRAME : return decompileGOTOFRAME ( n, actions, maxn, 1 ) ; case SWFACTION_GOTOFRAME2 : decompileGOTOFRAME2 ( n, actions, maxn, 0 ) ; return 0 ; case SWFACTION_GETURL2 : decompileGETURL2 ( & actions [ n ] ) ; return 0 ; case SWFACTION_PUSHDUP : decompilePUSHDUP ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETPROPERTY : decompileGETPROPERTY ( n, actions, maxn ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n, actions, maxn ) ; return 0 ; case SWFACTION_TRACE : decompileTRACE ( n, actions, maxn )",0
266,<S2SV_ModStart> ) break ; if ( l > ll ) l = ll ;,1
267,<S2SV_ModStart> out ; } } if ( free < 0 ) { err = - ENOMEM ; goto out ;,1
268,"<S2SV_ModStart> < sizeof ( struct pgstate ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> wb-prep: <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ( - 1 ) ; } if ( len < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> wb-prep: <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ( - 1 ) ; } n = EXTRACT_32BITS ( & prep -> pp_n ) ; ps = ( const struct pgstate * ) ( prep + 1 ) ; while ( n >= 0 && ND_TTEST ( * ps ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %u/%s:%u"", n, EXTRACT_32BITS ( & ps -> slot ), ps -> page. p_uid ) ) ; ps = ( const struct pgstate * ) ( prep + 1 ) ; for ( ie = io + ps -> nid ; io < ie ; ++ io ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %c%s:%u"", c, ipaddr_string ( ndo, & io -> id ), EXTRACT_32BITS ( & io -> off ) ) ; c = ',' ; }",0
269,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
270,"<S2SV_ModStart> ret ; uint8_t * buffer ; uint8_t value ; buffer = kmalloc ( 1, GFP_KERNEL ) ; if (! buffer ) return - ENOMEM <S2SV_ModEnd> ; dev_dbg ( <S2SV_ModStart>, reg, buffer <S2SV_ModEnd>, 1, <S2SV_ModStart> 1000 ) ; if ( <S2SV_ModEnd> ret >= 0 <S2SV_ModStart> ret >= 0 ) { value = buffer [ 0 ] ; kfree ( buffer ) ; return value ; } else { kfree ( buffer ) ; return <S2SV_ModEnd> ret ; } <S2SV_ModStart> ret ; } }",1
271,<S2SV_ModStart> <S2SV_null> <S2SV_null> static sqlite3_int64 <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> * ) * <S2SV_ModEnd> 2 + pTable <S2SV_ModStart> nModuleArg ) ; sqlite3_int64 <S2SV_ModEnd> azModuleArg = sqlite3DbRealloc,0
272,"<S2SV_ModStart> } } } s -> append_char ( s, 0 ) ;",0
273,"<S2SV_ModStart> ) ) { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATE_MISMATCH, ""Invalid <S2SV_blank> adaptation <S2SV_blank> state"" ) ; goto Error ; } } <S2SV_ModEnd> if ( lIsInput <S2SV_ModStart> lIsInput ) { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATE_MISMATCH, ""Invalid <S2SV_blank> adaptation <S2SV_blank> state"" ) ; goto Error ; } <S2SV_ModEnd> } } } <S2SV_ModStart> lIsInput ) { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATE_MISMATCH, ""Invalid <S2SV_blank> adaptation <S2SV_blank> state"" ) ; goto Error ; } <S2SV_ModEnd> if ( lIsInput <S2SV_ModStart> lIsInput ) { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATE_MISMATCH, ""Invalid <S2SV_blank> adaptation <S2SV_blank> state"" ) ; goto Error ; } } else { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATE_MISMATCH, ""Invalid <S2SV_blank> adaptation <S2SV_blank> state"" ) ; goto",0
274,<S2SV_ModStart> = 0 ; ( i + 3 ) <S2SV_ModEnd> < sec -> <S2SV_ModStart> = 0 ; ( i + 7 ) <S2SV_ModEnd> < sec ->,1
275,"<S2SV_ModStart> case ISIS_SUBTLV_EXT_IS_REACH_IPV6_INTF_ADDR : if ( subl == 8 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; <S2SV_ModStart> break ; case ISIS_SUBTLV_EXT_IS_REACH_IPV6_NEIGHBOR_ADDR : if ( subl == 6 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; <S2SV_ModStart> break ; case ISIS_SUBTLV_EXT_IS_REACH_IPV6_INTF_ADDR : if ( subl == 6 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; break ; case ISIS_SUBTLV_EXT_IS_REACH_IPV6_INTF_ADDR : if ( subl == 6 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) )",0
276,<S2SV_ModStart> ] ; } if ( idx >= ( TWICE_QMF_SYNTH_CHANNELS_NUM * sizeof ( FLOAT32 ) ) ) { ptr_hbe_txposer -> ptr_error_buf [ idx ] = ia_esbr_hbe_txposer_err_buf [ idx ] = ia_esbr_hbe_txposer_err_buf [ idx ] = ia_esbr_hbe_txposer_err_buf [ idx ] = ia_esbr_hbe_txposer_err_buf [ idx ] = ia_esbr_hbe_txposer_err_buf [ idx ] = ia_esbr_hbe_txposer_err_buf [ idx ] = ia_esbr_hbe_txposer_err_buf [ idx ] = ia_esbr_hbe_txposer_err_buf [ idx ] = ia_esbr_hbe_txposer_err_buf [ idx ] = ia_esbr_hbe_txposer_err_buf [ idx ] = ia_esbr_hbe_txposer_err_buf [ idx ] = ia_esbr_hbe,0
277,"<S2SV_ModStart> ; while ( ( unsigned ) <S2SV_ModStart> p < q ) { if ( p - str < reg -> dmax ) { * low = ( UChar * ) onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; * low = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; } else { * low = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; } } } else { if ( p - str < reg -> dmax ) { * low = ( UChar * ) onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; * low = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; } else { * low = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; } }",0
278,"<S2SV_ModStart> bfq_idle_slice_timer_body ( struct bfq_data * bfqd, <S2SV_ModStart> bfqq ) { <S2SV_ModEnd> enum bfqq_expiration reason <S2SV_ModStart> flags ) ; if (! bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_queued [ 0 ] == 0 && bfq_bfqq_queued [ 1 ] == 0 ) reason = BFQQE_TOO_IDLE ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_TOO_IDLE ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_queued [ 0 ] == 0 && bfq_bfqq_queued [ 1 ] == 0 ) reason = BFQQE_TOO_IDLE ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_TOO_IDLE ;",0
279,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
280,"<S2SV_ModStart> vif ) continue ; if ( vif -> tx. req_prod - vif -> tx. req_cons > XEN_NETIF_TX_RING_SIZE ) { netdev_err ( vif -> dev, ""Impossible <S2SV_blank> number <S2SV_blank> of <S2SV_blank> requests, <S2SV_blank> req_prod <S2SV_blank> %d, <S2SV_blank> size <S2SV_blank> %d\\n"", vif -> tx. req_prod, vif -> tx. req_cons, XEN_NETIF_TX_RING_SIZE ) ; continue ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { netdev_err ( vif -> dev, ""Impossible <S2SV_blank> number <S2SV_blank> of <S2SV_blank> requests, <S2SV_blank> req_cons <S2SV_blank> %d, <S2SV_blank> size <S2SV_blank> %d\\n"", idx, vif -> tx. req_cons, XEN_NETIF_TX_RING_SIZE ) ; continue ; } <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> 0 ) ) { netdev_err ( vif -> dev, ""Impossible <S2SV_blank> number <S2SV_blank> of <S2SV_blank> requests, <S2SV_blank> req_cons <S2SV_blank> %d, <S2SV_blank> size <S2SV_blank> %d\\n"", vif -> tx. req_cons, XEN_NETIF_TX_RING_SIZE ) ;",0
281,<S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> && n < <S2SV_ModStart> n >= cmdsize - 1 <S2SV_ModEnd> &,0
282,<S2SV_ModStart> xfrm_policy_walk * ) <S2SV_ModEnd> cb -> args,0
283,<S2SV_ModStart> conn ) ; if ( <S2SV_ModStart> ( conn )!= 0 ) return,1
284,"<S2SV_ModStart> ) ; struct <S2SV_ModEnd> skb_shared_info * shinfo <S2SV_ModStart> err ) ) xen_netbk_idx_release ( netbk, pending_idx, XEN_NETIF_RSP_OKAY <S2SV_ModStart> XEN_NETIF_RSP_ERROR ) ; <S2SV_ModEnd> start = ( <S2SV_ModStart>, newerr ; <S2SV_ModEnd> pending_idx = frag_get_pending_idx <S2SV_ModStart> netbk, pending_idx, XEN_NETIF_RSP_OKAY <S2SV_ModStart> continue ; } xen_netbk_idx_release ( netbk, pending_idx, XEN_NETIF_RSP_OKAY <S2SV_ModStart> XEN_NETIF_RSP_ERROR ) ; <S2SV_ModEnd> if ( err <S2SV_ModStart> netbk, pending_idx, XEN_NETIF_RSP_OKAY <S2SV_ModStart> netbk, pending_idx, XEN_NETIF_RSP_OKAY",0
285,,1
286,<S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ;,0
287,"<S2SV_ModStart> 1 ) { struct sockaddr * addr_p = ( struct sockaddr * ) & addr ; socklen_t addr_l = sizeof ( addr ) ; <S2SV_ModStart> ( LOG_ERR, ""bind <S2SV_blank> failed; <S2SV_blank> error:%d"", error ) ; close ( fd ) ; exit ( EXIT_FAILURE ) ; } addr_p = ( struct sockaddr * ) & addr ; error = bind ( fd, ( struct sockaddr * ) & addr, sizeof ( addr ) ) ; if ( error < 0 ) { syslog ( LOG_ERR, ""bind <S2SV_blank> failed; <S2SV_blank> error:%d"", error ) ; close ( fd ) ; exit ( EXIT_FAILURE ) ; } len = recvfrom ( fd, & addr_p, & addr_l <S2SV_ModStart> len ) ; if ( len < 0 ) { syslog ( LOG_ERR, ""recvfrom <S2SV_blank> failed; <S2SV_blank> error:%d"", len ) ; close ( fd ) ; exit ( EXIT_FAILURE ) ; }",0
288,"<S2SV_ModStart> PERF_COUNT_SW_ALIGNMENT_FAULTS, 1 <S2SV_ModEnd>, regs,",0
289,<S2SV_ModStart> ipc == NULL && client -> session == NULL,1
290,"<S2SV_ModStart> > newDataLength || <S2SV_ModEnd> extraPtr + y <S2SV_ModStart> extraBlock + extraBlockLength <S2SV_ModEnd> > diffBlock + <S2SV_ModStart> NULL ; } if ( diffPtr + x > newDataLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, diffPtr + x, <S2SV_ModEnd> extraPtr + y <S2SV_ModStart> y ) ; if ( extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; }",0
291,"<S2SV_ModStart> if (! UDF_EXTERNAL_FILE ( dir -> i_sb, fname ) ) goto out_err ; if ( UDF_EXTERNAL_FILE ( dir -> i_sb, fname ) == 0 ) goto out_err ; if ( UDF_EXTERNAL_FILE ( dir -> i_sb, fname ) == 0 ) goto out_err ; if ( UDF_EXTERNAL_FILE ( dir -> i_sb, fname ) == 0 ) goto out_err ; if ( UDF_EXTERNAL_FILE ( dir -> i_sb, fname ) == 0 ) goto out_err ; if ( UDF_EXTERNAL_FILE ( dir -> i_sb, fname ) == 0 ) goto out_err ; if ( UDF_EXTERNAL_FILE ( dir -> i_sb, fname ) == 0 ) goto out_err ; if ( UDF_EXTERNAL_FILE ( dir -> i_sb, fname ) == 0 ) goto out_err ; if ( UDF_EXTERNAL_FILE ( dir -> i_sb, fname ) == 0 ) goto out_err ; if ( UDF_EXTERNAL_FILE ( dir -> i_sb, fname ) == 0 ) goto out_err ;",0
292,"<S2SV_ModStart> ip_vs_timeout_user t ; memset ( & t, 0, sizeof ( t ) ) ;",1
293,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart>, fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
294,<S2SV_ModStart> ; ssize_t result ; if ( WARN_ON_ONCE (! ib_safe_file_access ( filp ) ) ) return - EACCES,1
295,"<S2SV_ModStart>, * controller, * next = NULL <S2SV_ModStart> if (! fpath ) { if (! fc_may_access ( fc, controller, path1, NULL, O_RDWR ) ) { ret = - EACCES ; goto out ; } if (! <S2SV_ModStart> if (! caller_is_in_ancestor ( fc -> pid, controller, path1, & next ) ) { ret = - EACCES ; goto out ; } ret = cgfs_create ( controller, cgroup, fc -> uid, fc -> gid ) ; printf ( ""cgfs_create <S2SV_blank> returned <S2SV_blank> %d <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> %s\\n"", ret, controller, cgroup ) ; out : free ( next ) ;",0
296,<S2SV_ModStart> ) ) { put_disk ( disk ) ;,1
297,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
298,"<S2SV_ModStart> == VFF_TYP_BIT ) { if ( CheckMemoryOverflow <S2SV_ModEnd> ( ( image <S2SV_ModStart> ) >> 3UL, <S2SV_ModEnd> image -> rows <S2SV_ModStart> image -> rows )!= MagickFalse ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" ) ; max_packets = ( ( image -> columns + 7UL ) >> 3UL ) * image -> rows ; } else if ( CheckMemoryOverflow ( number_pixels, bytes_per_pixel, max_packets )!= MagickFalse ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" ) ; <S2SV_ModEnd> max_packets = ( <S2SV_ModStart> ) >> 3UL ; } else if ( CheckMemoryOverflow ( number_pixels, <S2SV_ModEnd> image -> rows <S2SV_ModStart> image -> rows )!= MagickFalse ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" ) ; <S2SV_ModEnd> max_packets = ( <S2SV_ModStart> number_data_bands ) ; if ( CheckMemoryOverflow ( number_pixels, max_packets )!= MagickFalse ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" ) ;",0
299,<S2SV_ModStart> ) pktnum ; if ( avio_feof ( s -> pb ) ) { goto end ; },0
300,"<S2SV_ModStart> if (! access_ok ( VERIFY_READ, p, SZ_SG_REQ_DATA_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
301,"<S2SV_ModStart> ; # endif install_keyword ( ""umask"", & umask_handler ) ;",1
302,<S2SV_ModStart> data ) { # if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> codec_flags & VPX_CODEC_USE_HIGHBITDEPTH ) ctx -> codec_flags &= ~ VPX_CODEC_USE_HIGHBITDEPTH ; # endif <S2SV_ModStart> encoder_common_init ( ctx ) ; # if CONFIG_MULTITHREAD if ( ctx -> codec_flags & VPX_CODEC_USE_HIGHBITDEPTH ) ctx -> codec_flags &= ~ VPX_CODEC_USE_HIGHBITDEPTH if ( ctx -> codec_flags & VPX_CODEC_USE_HIGHBITDEPTH ) ctx -> codec_flags |= VPX_CODEC_USE_HIGHBITDEPTH ; # endif,0
303,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> kfree ( tmpbuf,1
304,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; }",1
305,"<S2SV_ModStart> 0 ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, \'""\', <S2SV_ModStart> ) ) ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, \'""\', <S2SV_ModStart> ) ) ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, \'""\', <S2SV_ModStart> 1 ) { JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, \'""\', <S2SV_ModStart> ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c",0
306,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
307,"<S2SV_ModStart> ; int copylen <S2SV_ModEnd> ; bool zerocopy <S2SV_ModStart> goto err ; err = - EMSGSIZE ; if ( unlikely ( count > MAX_SKB_FRAGS ) ) goto err ; <S2SV_ModStart> zerocopy ) { if ( count > MAX_SKB_FRAGS ) { copylen = iov_length ( iv, count - MAX_SKB_FRAGS ) ; if ( copylen < vnet_hdr. hdr_len ) copylen = vnet_hdr. hdr_len ; } else { copylen = len - vnet_hdr_len ; skb = macvtap_alloc_skb ( & q -> sk, NET_IP_ALIGN, copylen, vnet_hdr. hdr_len, noblock, & err ) ; if (! skb ) goto err ; skb = macvtap_alloc_skb ( & q -> sk, NET_IP_ALIGN, copylen, vnet_hdr. hdr_len, noblock, & err ) ; if (! skb ) goto err ; }",0
308,<S2SV_ModStart> nexthdr ) { unsigned int <S2SV_ModEnd> offset = sizeof <S2SV_ModStart> while ( offset <S2SV_ModEnd> <= packet_len ) <S2SV_ModStart> packet_len ) { struct ipv6_opt_hdr * exthdr ; <S2SV_ModStart> offset ; } exthdr = ( struct ipv6_opt_hdr * ) ( skb_network_header ( skb ) + offset ) ; <S2SV_ModStart> offset ; } return - 1 <S2SV_ModEnd> ; } <S2SV_null>,0
309,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
310,<S2SV_ModStart> ; } } # if CONFIG_VP8_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags,0
311,<S2SV_ModStart> sll ) ; msg -> msg_namelen = skb -> len ; <S2SV_ModStart> out_free ; } copied = skb -> len ; if ( copied > len ) { copied = len ; msg -> msg_flags |= MSG_TRUNC ; },0
312,<S2SV_ModStart> } if ( <S2SV_ModEnd> djrcv_dev -> paired_dj_devices,1
313,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
314,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
315,"<S2SV_ModStart> asconf ) { sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) asconf -> chunk_hdr ; union sctp_params param ; <S2SV_ModStart> __u32 serial ; <S2SV_ModEnd> chunk_len = ntohs <S2SV_ModStart> goto done ; sctp_walk_params ( param, addip, addip_hdr. params ) { if ( param. p -> type == SCTP_PARAM_IPV4_ADDRESS || param. p -> p -> p -> p -> type == SCTP_PARAM_IPV6_ADDRESS ) continue ; <S2SV_ModEnd> err_code = sctp_process_asconf_param <S2SV_ModStart>, asconf, param. addip ) ; if ( err_code!= SCTP_ERROR_NO_ERROR <S2SV_ModEnd> ) all_param_pass = <S2SV_ModStart>! all_param_pass ) sctp_add_asconf_response ( asconf_ack, param. addip <S2SV_ModEnd> -> crr_id, <S2SV_ModStart> -> crr_id, err_code, param. addip ) ; if ( err_code == SCTP_ERROR_RSRC_LOW <S2SV_ModEnd> ) goto done <S2SV_ModStart> goto done ; <S2SV_ModEnd> } done",0
316,"<S2SV_ModStart> 101, ( ""jas_realloc(%x, <S2SV_blank> %zu)\\n"" <S2SV_ModEnd>, ptr,",1
317,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
318,<S2SV_ModStart> ; break ; # ifdef CONFIG_PPC_BOOK3S_64 case KVM_CAP_SPAPR_TCE_64 : case KVM_CAP_SPAPR_TCE_VFIO : case KVM_CAP_SPAPR_VFIO_64 : case,0
319,"<S2SV_ModStart> msicap ; msicap = kmalloc ( sizeof ( * msicap ), GFP_KERNEL ) ; if (! msicap ) return - ENOMEM <S2SV_ModEnd> ; return pci_emul_add_capability",0
320,"<S2SV_ModStart> key_name ), UTF16_HOST_ENDIAN, <S2SV_ModStart> data. key, HV_KVP_EXCHANGE_MAX_KEY_SIZE / 2 <S2SV_ModStart> data. key, HV_KVP_EXCHANGE_MAX_KEY_SIZE / 2 <S2SV_ModStart> data. value, UTF16_HOST_ENDIAN, <S2SV_ModStart> data. value, HV_KVP_EXCHANGE_MAX_VALUE_SIZE / 2",0
321,<S2SV_ModStart> -> log_ctx ; mutex_lock ( & d -> mutex ) ; <S2SV_ModStart> -> log_ctx ; mutex_unlock ( & d -> mutex ) ;,0
322,<S2SV_ModStart> return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
323,"<S2SV_ModStart> * parg = ( void * ) arg ; long err = - EINVAL ; int is_ext_ctrl = ( cmd == VIDIOC_S_EXT_CTRLS ) || ( cmd == VIDIOC_G_EXT_CTRLS ) ; if ( is_ext_ctrl ) { parg = sbuf ; } else { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) return - ENOMEM ; parg = mbuf ; } err = - EFAULT ; if ( _IOC_DIR ( cmd ) & _IOC_WRITE ) { parg = mbuf ; } else { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) return - ENOMEM ; parg = mbuf ; } err = - EFAULT ; if ( _IOC_DIR ( cmd ) & _IOC_WRITE ) { parg = sbuf ; } else { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == m",0
324,"<S2SV_ModStart> psubscribeCommand ) { addReplyError ( c, ""only <S2SV_blank> (P)SUBSCRIBE <S2SV_blank> / <S2SV_blank> (P)UNSUBSCRIBE <S2SV_blank> / <S2SV_blank> QUIT <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> this <S2SV_blank> context"" ) ; return REDIS_OK ; }",0
325,"<S2SV_ModStart> u16 size, const <S2SV_ModStart> data ) { void * buf ; int ret ; buf = kmemdup ( data, size, GFP_NOIO ) ; if (! buf ) return - ENOMEM ; ret = <S2SV_ModEnd> usb_control_msg ( dev <S2SV_ModStart>, 0, buf <S2SV_ModEnd>, size, <S2SV_ModStart> 500 ) ; kfree ( buf ) ; return ret ;",1
326,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> num_altsetting < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - ENODEV ; goto err_free_urbinfo ; } <S2SV_ModStart> 0 ]. desc ; if ( endpoint -> desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - ENODEV ; goto err_free_buf ; }",0
327,"<S2SV_ModStart> ) { case GTK_RESPONSE_OK : { file = nautilus_file_get_location ( parameters -> file ) ; nautilus_file_set_metadata ( parameters -> file, NAUTILUS_METADATA_KEY_DESKTOP_FILE_TRUSTED, TRUE ) ; nautilus_file_mark_desktop_file_untrusted ( file, parameters -> parent_window, TRUE, NULL, NULL ) ; nautilus_file_set_metadata ( parameters -> file, NAUTILUS_METADATA_KEY_DESKTOP_FILE_TRUSTED, NULL, parameters -> parent_window ) ; nautilus_file_set_metadata ( parameters -> file, NAUTILUS_METADATA_KEY_DESKTOP_FILE_TRUSTED, TRUE ) ; nautilus_file_mark_desktop_file_untrusted ( file, parameters -> parent_window, TRUE, NULL, NULL ) ; nautilus_file_set_metadata ( parameters -> file, NAUTILUS_METADATA_KEY_DESKTOP_FILE_TRUSTED, NULL, parameters -> parent_window ) ; <S2SV_ModEnd> g_object_unref ( file",0
328,<S2SV_ModStart> ; if ( urb -> actual_length > 0 &&,1
329,"<S2SV_ModStart> * server, struct smb_vol * vol ) { <S2SV_ModEnd> struct cifsSesInfo * <S2SV_ModStart> cifs_tcp_ses_lock ) ; list_for_each_entry ( ses <S2SV_ModEnd>, & server <S2SV_ModStart> server -> smb_ses_list, smb_ses_list ) { if ( strncmp ( ses -> userName <S2SV_ModEnd>, username, <S2SV_ModStart> ) continue ; }",0
330,"<S2SV_ModStart> vpx_codec_err_t res ; # if CONFIG_VP8_HIGHBITDEPTH if ( ( cfg -> g_w!= ctx -> cfg. g_w ) || ( ( cfg -> g_h!= ctx -> cfg. g_h ) ) && ( ( cfg -> g_lag_in_frames > 1 || ( cfg -> g_pass!= VPX_RC_ONE_PASS ) ) ) { ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; return ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; } else { ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; return ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; } # endif } # if CONFIG_VP8_HIGHBITDEPTH if ( ( cfg -> g_w!= ctx -> cfg. g_w ) || ( cfg -> g_h!= ctx -> cfg. g_h ) ) { ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; return ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width",0
331,"<S2SV_ModStart> =='<S2SV_blank>') { input ++ ; } <S2SV_ModEnd> ptr = strchr <S2SV_ModStart> off ) ) { <S2SV_ModStart> ) ; } } <S2SV_ModStart> offset ) ) { <S2SV_ModStart> input ) ; } <S2SV_ModStart> offset ) ) { <S2SV_ModStart> ""Unknown <S2SV_blank> filesystem <S2SV_blank> type\\n"" ) ; }",0
332,"<S2SV_ModStart> inode ) ; struct hugepage_subpool * spool = subpool_inode ( inode ) ; <S2SV_ModStart> ; if ( hugepage_subpool_get_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> 0 ) { hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg )",1
333,<S2SV_ModStart> key * keyring ; if ( new -> thread_keyring ) return 0,1
334,"<S2SV_ModStart> = 0 ; size_t scanned = 0 ; static size_t readnbd = 0 ; if ( readnbd > ( size_t ) 0U ) { readnbd -= scanned ; memmove ( cmd, cmd + scanned, readnbd ) ; scanned = ( size_t ) 0U ; } <S2SV_ModEnd> } if (",0
335,"<S2SV_ModStart> orig ) ; fptr_orig = io_get_open_fptr ( mrb, orig ) ; <S2SV_ModStart> mrb_io_alloc ( mrb <S2SV_ModEnd> ) ; DATA_TYPE",1
336,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
337,"<S2SV_ModStart> cpi ) { # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. noise_sensitivity > 0 ) { cpi -> oxcf. noise_sensitivity = 0 ; } else { cpi -> zbin_mode_boost = 1 ; } # endif vp9_init_plane_quantizers ( cpi, & cpi -> td ) ; } # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. noise_sensitivity > 0 ) { cpi -> oxcf. noise_sensitivity = cpi -> oxcf. noise_sensitivity ; } # endif } # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. noise_sensitivity > 0 ) { cpi -> oxcf. noise_sensitivity = cpi -> oxcf. noise_sensitivity ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. noise_sensitivity > 0 ) { cpi -> oxcf. noise_sensitivity = cpi -> oxcf. noise_sensitivity",0
338,"<S2SV_ModStart> return res ; res = utee_param_to_param ( utc, <S2SV_ModEnd> param, callee_params <S2SV_ModStart>, callee_params ) ; if ( res!= TEE_SUCCESS ) return res",1
339,"<S2SV_ModStart> int rc ; struct desc_struct old_desc, new_desc ; const struct x86_emulate_ops * ops = ctxt -> ops ; if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) ops -> get_segment ( ctxt, & old_cs, & old_desc, NULL <S2SV_ModEnd> ) ; old_eip <S2SV_ModStart> 2 ) ; rc = assign_eip_far ( ctxt, ctxt -> src. val, new_desc. l ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; rc = assign_eip_far ( ctxt, ctxt -> src. val, new_desc. l ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; rc = em_push ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; rc = assign_eip_far ( ctxt, ctxt -> src. val, new_desc. l ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; rc = assign_eip_far ( ctxt, ctxt -> src. val, new_desc. l ) ; if ( rc!= X86EMUL_CONT",0
340,<S2SV_ModStart> -> band = av_calloc <S2SV_ModEnd> ( reslevel -> <S2SV_ModStart> -> prec = av_calloc <S2SV_ModEnd> ( reslevel ->,1
341,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
342,"<S2SV_ModStart> } struct reloc_struct_t <S2SV_ModEnd> * got_table = <S2SV_ModStart> * got_table = safe_calloc ( n_got, <S2SV_ModEnd> sizeof ( ut32 <S2SV_ModStart> ut32 ) ) ; if (! reloc_table ) { r_list_free ( list ) ; return NULL ; } obj -> n_got = n_got ; obj -> got_table = got_table ; } } if ( obj -> hdr -> flags & FLAT_FLAG_GOT ) { n_got = 0 ; for ( i = 0 ; i < n_reloc ; i ++ ) { ut32 got_entry ; if ( obj -> hdr -> data_start + offset + 4 > obj -> size ) { break ; } len = r_buf_read_at ( obj -> b, obj -> hdr -> data_start + offset, ( ut8 * ) & got_entry, sizeof ( ut32 ) ) ; if (! VALID_GOT_ENTRY ( got_entry ) || len!= sizeof ( ut32 ) ) { break ; } reloc_table [ i ]. addr_to_patch = got_entry ; reloc_table [ i ]. data_offset = got_",0
343,<S2SV_ModStart> info -> si_code!= SI_QUEUE ) { WARN_ON_ONCE ( info -> si_code < 0 ) ; <S2SV_ModEnd> return - EPERM <S2SV_ModStart> - EPERM ; },1
344,"<S2SV_ModStart> * p_tx0 = ( OPJ_INT32 ) opj_uint_max <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdx, <S2SV_ModEnd> p_image -> x0 <S2SV_ModStart> * p_tx1 = ( OPJ_INT32 ) opj_uint_min <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdx, <S2SV_ModEnd> p_image -> x1 <S2SV_ModStart> * p_ty0 = ( OPJ_INT32 ) opj_uint_max <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdy, <S2SV_ModEnd> p_image -> y0 <S2SV_ModStart> * p_ty1 = ( OPJ_INT32 ) opj_uint_min <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdy, <S2SV_ModEnd> p_image -> y1",1
345,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> char * create_output_name <S2SV_ModStart> ( utf8 ) x *= 3 ; if (! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if (! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if (! ( p = ( unsigned char * ) malloc ( strlen ( ( char * ) fname ) ) ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { x = ( c & 0xC0 ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= ( * fname ++ & 0x3F",0
346,"<S2SV_ModStart> classes = NULL ; zval * return_value = NULL <S2SV_ModStart> } } } if (! php_var_unserialize_ex ( return_value, & p, p + buf_len, & var_hash, class_hash ) ) { PHP_VAR_UNSERIALIZE_DESTROY ( var_hash ) ; if ( class_hash ) { zend_hash_destroy ( class_hash ) ; FREE_HASHTABLE ( class_hash ) ; } } if ( Z_TYPE_P ( classes ) == IS_ARRAY ) { zval * entry ; zval * lcname ; zval_copy_ctor ( & lcname, Z_STR_P ( entry ) ) ; zval_copy_ctor ( & lcname, Z_STR_P ( entry ) ) ; zval_copy_ctor ( & lcname, Z_STR_P ( entry ) ) ; zval_copy_ctor ( & lcname, Z_STR_P ( entry ) ) ; zval_copy_ctor ( & lcname, Z_STR_P ( entry ) ) ; convert_to_string_ex ( lcname ) ; zval_release ( lcname )",0
347,<S2SV_ModStart> goto __err ; tu -> qhead = tu -> qtail = tu -> qused = 0 ;,1
348,"<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if ( ptr -> movie_identifier == NULL ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""Bad <S2SV_blank> movie <S2SV_blank> identifier <S2SV_blank> in <S2SV_blank> abst_box_read(): <S2SV_blank> missing <S2SV_blank> movie <S2SV_blank> identifier\\n"" ) ) ; return GF_ISOM_INVALID_FILE ; } <S2SV_ModStart> - 8 ; if (! tmp_strsize ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""Bad <S2SV_blank> movie <S2SV_blank> identifier <S2SV_blank> in <S2SV_blank> abst_box_read(): <S2SV_blank> missing <S2SV_blank> movie <S2SV_blank> identifier\\n"" ) ) ; return GF_ISOM_INVALID_FILE ; } <S2SV_ModStart> i ] ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""Bad <S2SV_blank> movie <S2SV_blank> identifier <S2SV_blank> in <S2SV_blank> abst_box_read(): <S2SV_blank> missing <S2SV_blank> movie <S2SV_blank> identifier\\n"" ) ; return GF_ISOM_INVALID_FILE ; } <S2SV_ModStart> i ] ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""Bad",0
349,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
350,<S2SV_ModStart> uschar * argv2 <S2SV_ModEnd> ; uschar * <S2SV_ModStart> uschar * argv3 <S2SV_ModEnd> ; uschar * <S2SV_ModStart> uschar * argv4 <S2SV_ModEnd> ; uschar * <S2SV_ModStart> uschar * argv5 <S2SV_ModEnd> ; uschar * <S2SV_ModStart> uschar * argv6 <S2SV_ModEnd> ; uschar * <S2SV_ModStart> uschar * argv7 <S2SV_ModEnd> ; uschar * <S2SV_ModStart> uschar * argv6 <S2SV_ModEnd> ; uschar * <S2SV_ModStart> uschar * argv7 <S2SV_ModEnd> ; uschar * <S2SV_ModStart> uschar * argv7 <S2SV_ModEnd> ; uschar * <S2SV_ModStart> uschar * argv6 <S2SV_ModEnd> ; uschar * <S2SV_ModStart> uschar * argv3 <S2SV_ModEnd> ; uschar * <S2SV_ModStart> uschar * argv4 <S2SV_ModEnd> ; uschar * <S2SV_ModStart> uschar * argv5 <S2SV_ModEnd> ; uschar * <S2SV_ModStart> uschar * argv6 <S2SV_ModEnd> ; uschar * <S2SV_ModStart> uschar * argv7 <S2SV_ModEnd> ; uschar * <S2SV_ModStart> uschar * argv7 <S2SV_ModEnd> ; uschar * <S2SV_ModStart> uschar * argv6 <S2SV_ModEnd> ; uschar * <S2SV_ModStart> uschar * argv7 <S2SV_ModEnd> ; uschar * <S2SV_ModStart> uschar * argv7 <S2SV_ModEnd> ; uschar * <S2SV_ModStart> uschar * argv7 <S2SV_ModEnd> ; uschar * <S2SV_ModStart> uschar * argv7 <S2SV_ModEnd> ; uschar * <S2SV_ModStart> uschar * argv7 <S2SV_ModEnd> ; uschar * <S2SV_ModStart> uschar * argv7 <S2SV_ModEnd> ; uschar * <S2SV_ModStart>,0
351,<S2SV_ModStart> info -> si_code!= SI_QUEUE ) { WARN_ON_ONCE ( info -> si_code < 0 ) ; <S2SV_ModEnd> return - EPERM <S2SV_ModStart> - EPERM ; },1
352,"<S2SV_ModStart> -> off = strtoull <S2SV_ModEnd> ( p, <S2SV_ModStart> -> filesize = strtoull <S2SV_ModEnd> ( slash +",1
353,"<S2SV_ModStart> * cr ; size_t <S2SV_ModEnd> maxw, maxh <S2SV_ModStart> maxh, max, offset, upb ; size_t i, j ; maxw = ( size_t ) img -> comps [ 0 ]. w ; maxh = ( size_t ) img -> comps [ 0 ]. h ; offset = 1 << ( upb - 1 ) ; upb = ( unsigned int ) img -> comps [ 0 ]. prec ; max = maxw * maxh ; y = img -> comps [ 0 ]. data ; cb = img -> comps [ 1 ]. data ; cr = img -> comps [ 2 ]. data ; d0 = r = ( int * ) malloc ( sizeof ( int ) * max ) ; d1 = g <S2SV_ModEnd> = ( int <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> goto fails ; <S2SV_ModEnd> for ( i <S2SV_ModStart> 0U ; i < <S2SV_ModEnd> maxw ; ++ <S2SV_ModStart> maxh ; ++ i ) { sycc_to_rgb ( offset, upb, * y, * cb, * cr, r, g, b ) ; ++ y ; ++ r ; ++ g ; ++ b ; }",0
354,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state == fmode <S2SV_ModEnd> ) return ; <S2SV_ModStart> ; if ( ( fmode & FMODE_WRITE ) == ( state -> state & FMODE_WRITE ) ) { if ( state -> state & FMODE_READ ) list_move ( & state -> open_states, & state -> owner -> so_states ) ; else list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } else { list_move ( & state -> open_states, & state -> owner -> so_states ) ; } state -> state = fmode <S2SV_ModEnd> ; } <S2SV_null>",0
355,"<S2SV_ModStart> return SSH_ERR_INVALID_ARGUMENT ; if ( ( r = sshpkt_get_string ( ssh, NULL, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_end ( ssh ) )!= 0 ) return r ; for ( i = 0 ; i < KEX_COOKIE_LEN ; i ++ ) if ( ( r = sshpkt_get_u8 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_string ( ssh, NULL, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_end ( ssh ) )!= 0 ) return r ; for ( i = 0 ; i < PROPOSAL_MAX ; i ++ ) if ( ( r = sshpkt_get_string ( ssh, NULL, NULL, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL )",0
356,"<S2SV_ModStart> ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.one <S2SV_blank> + <S2SV_blank> 1 <S2SV_blank> == <S2SV_blank> tests.constants.two <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.foo <S2SV_blank> == <S2SV_blank> \\""foo\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.empty <S2SV_blank> == <S2SV_blank> \\""\\"" <S2SV_blank> <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.empty() <S2SV_blank> == <S2SV_blank> \\""\\"" <S2SV_blank> <S2SV_blank> \\\n",0
357,"<S2SV_ModStart>!= EOF ) { if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; break ; } <S2SV_ModStart>!= EOF ) { if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; break ; } <S2SV_ModEnd> if ( filesize <S2SV_ModStart>!= EOF ) { if ( <S2SV_ModEnd> fputc ( file <S2SV_ModStart>!= EOF ) { if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; break ; } <S2SV_ModStart>!= EOF ) { if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; break ; } if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>!= EOF ) { if ( <S2SV_ModEnd> fputc ( file <S2SV_ModStart>!= EOF ) <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart> ""ImproperImageHeader"" ) ; break ; }",0
358,"<S2SV_ModStart> char lbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char strbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char ltest [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char strtest [ 512 <S2SV_ModEnd> ] ; if <S2SV_ModStart> ( lbase, ""%511[^\\r\\n]"" <S2SV_ModEnd>, strbase ) <S2SV_ModStart> ( ltest, ""%511[^\\r\\n]"" <S2SV_ModEnd>, strtest ) <S2SV_ModStart> ( nbase!= 511 <S2SV_ModEnd> && ntest!= <S2SV_ModStart> && ntest!= 511 <S2SV_ModEnd> ) ; if",1
359,<S2SV_ModStart> intf ) { <S2SV_ModEnd> if ( cdc_ncm_select_altsetting <S2SV_ModStart> - ENODEV ; return <S2SV_ModEnd> cdc_ncm_bind_common ( dev <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
360,"<S2SV_ModStart> 0 ; } if ( elem. in_sg [ 0 ]. iov_len!= len ) { memcpy ( elem. in_sg [ 0 ]. iov_base, buf, len ) ; virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } <S2SV_ModEnd> virtqueue_push ( vq",0
361,"<S2SV_ModStart>, i, ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; } for ( i = 0 ; i < qcd -> compparms. numstepsizes ; ++ i ) { fprintf ( out, ""expn[%d] <S2SV_blank> = <S2SV_blank> 0x%04x; <S2SV_blank> mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", i, ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", i, ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] )",0
362,"<S2SV_ModStart>, e -> elems, e ->",1
363,"<S2SV_ModStart> = AV_PIX_FMT_PAL8 ; avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } else { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; }",0
364,"<S2SV_ModStart> 1 ) ; } if ( length > 0 && length < ( u_int ) caplen - 1 ) { ND_PRINT ( ( ndo, ""[|osi]"" ) ) ; length = ( u_int ) caplen ; return ( 1 ) ; } if ( length > 0 && length < ( u_int ) caplen - 1 ) { ND_PRINT ( ( ndo, ""[|osi]"" ) ) ; length = ( u_int ) caplen - 1 ; } if ( length > 0 && length < ( u_int ) caplen - 1 ) { ND_PRINT ( ( ndo, ""[|osi]"" ) ) ; length = ( u_int ) caplen ; return ( 1 ) ; } if ( length > 0 && length < ( u_int ) caplen - 1 ) { ND_PRINT ( ( ndo, ""[|osi]"" ) ) ; return ( 1 ) ; } if ( length > 0 && length < ( u_int ) caplen - 1 ) { ND_PRINT ( ( ndo, ""[|osi]"" ) ) ; return ( 1 ) ; }",0
365,<S2SV_ModStart> q ) { mutex_lock ( & q -> timer_mutex ) ; <S2SV_ModStart> snd_seq_timer_close ( q ) ; mutex_unlock ( & q -> timer_mutex,1
366,"<S2SV_ModStart> int error ; unsigned int nr_blks = ( len + PAGE_CACHE_SIZE - 1 ) >> inode -> i_blkbits ; error = gfs2_meta_inode_buffer ( ip, & dibh ) ; if ( unlikely ( error ) ) goto out ; pgoff_t start = ( offset >> PAGE_CACHE_SHIFT ) ; unsigned int start_offset = ( offset & ~ PAGE_CACHE_MASK ; unsigned int end = ( offset + len - 1 ) >> PAGE_CACHE_SHIFT ; error = gfs2_meta_inode_buffer ( ip, & dibh ) ; if ( unlikely ( error ) ) goto out ; gfs2_trans_add_bh ( ip -> i_gl, dibh, 1 ) ; if ( gfs2_is_stuffed ( ip ) ) { error = gfs2_unstuff_dinode ( ip, NULL ) ; if ( unlikely ( error ) ) goto out ; } curr = start ; offset = start << PAGE_CACHE_SHIFT ; to = PAGE_CACHE_SIZE ; error = write_empty_blocks ( page, from, to, mode ) ; if ( unlikely",0
367,<S2SV_ModStart> VIPS_FOREIGN_LOAD_GET_CLASS ( load ) ; if ( load -> error ) return ( NULL <S2SV_ModStart> -> real ) || <S2SV_ModEnd> vips_foreign_load_iscompat ( load <S2SV_ModStart> out ) ) { vips_operation_invalidate ( VIPS_OPERATION ( load ) ) ; load -> error = TRUE ; return ( NULL ) ; } <S2SV_ModEnd> vips_image_pipelinev ( load,1
368,"<S2SV_ModStart>, image_noffset ) { const char * name ; if ( strncmp ( name, FIT_SIG_NODENAME, strlen ( FIT_SIG_NODENAME ) ) ) { ret = fit_image_check_sig ( fit, noffset, data, size, sig_blob, sig_offset ) ; if ( ret ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; } } else { name = fit_get_name ( fit, noffset, NULL ) ; if (! strncmp ( name, FIT_SIG_NODENAME, strlen ( FIT_SIG_NODENAME ) ) ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) { printf ( "" <S2SV_blank> error!\\n%s <S2SV_blank> for <S2SV_blank> \'%s\' <S2SV_blank> hash <S2SV_blank> node <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> image <S2SV_blank> node\\n"", err_msg, fit_get_name ( fit, image_noffset, NULL ) ) ; goto error ; } }",0
369,<S2SV_ModStart> ; args. rmtvaluelen = <S2SV_ModEnd> be16_to_cpu ( leaf <S2SV_ModStart> ; args. <S2SV_ModEnd> rmtvaluelen = be16_to_cpu <S2SV_ModStart> ; args. <S2SV_ModEnd> rmtvaluelen = be16_to_cpu <S2SV_ModStart> ; args. rmtvaluelen = be16_to_cpu ( leaf -> rmtvaluelen ) ; args. <S2SV_ModEnd> rmtvaluelen = be16_to_cpu <S2SV_ModStart> ; args. <S2SV_ModEnd> rmtvaluelen = be16_to_cpu <S2SV_ModStart> ; args. rmtvaluelen = be16_to_cpu ( leaf -> rmtvaluelen ) ; args. <S2SV_ModEnd> rmtvaluelen = be16_to_cpu <S2SV_ModStart> ; args. <S2SV_ModEnd> rmtvaluelen = be16_to_cpu <S2SV_ModStart> ; args. <S2SV_ModEnd> rmtvaluelen = be16_to_cpu <S2SV_ModStart> ; args. rmtvaluelen = be16_to_cpu ( leaf -> rmtvaluelen ) ; args. <S2SV_ModEnd> rmtvaluelen = be16_to_cpu ( leaf -> rmtvaluelen ) ; args.,0
370,"<S2SV_ModStart> ; if ( cx23888_ir_rx_kfifo_alloc ( & state -> rx_kfifo, CX23888_IR_RX_KFIFO_SIZE, <S2SV_ModEnd> GFP_KERNEL ) ) <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> sd = & <S2SV_ModStart> = dev ; ret = cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; if ( ret ) { cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_tx_params ; v4l2_subdev_call ( sd, ir, tx_s_parameters, & default_params ) ; mutex_init ( & state -> tx_params_lock ) ; ret = cx23888_ir_write4 ( dev, CX23888_IR_TX_KFIFO_SIZE, GFP_KERNEL ) ; state -> dev = dev ; }",0
371,<S2SV_ModStart> service_name_tlv_length ) ; if (! service_name_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> miux_tlv_length ) ; if (! miux_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> rw_tlv_length ) ; if (! rw_tlv ) { err = - ENOMEM ; goto error_tlv ; },1
372,"<S2SV_ModStart> ssh * ssh <S2SV_ModEnd> ; mon = <S2SV_ModStart>. compression ) { mon -> m_zback = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; ssh_packet_set_compress_hooks ( ssh, mon -> m_zback, ( ssh_packet_comp_alloc_func * ) mm_zalloc, ( ssh_packet_comp_free_func * ) mm_zfree ) ; }",0
373,"<S2SV_ModStart> iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> ( flags & VPX_CODEC_USE_XMA <S2SV_ModEnd> ) &&! <S2SV_ModStart> VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) &&! ( iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_ERROR_CONCEALMENT ) &&! ( iface -> caps & VPX_CODEC_CAP_ERROR_CONCEALMENT ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&!",0
374,"<S2SV_ModStart> unsigned int channo ; if (! ( cdef -> ents = jas_alloc2 ( cdef -> numchans, sizeof ( jp2_cdefent_t ) ) ) ) { return - 1 ; }",0
375,<S2SV_ModStart> ; value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
376,<S2SV_ModStart> ; icmp_param. dst. dev = rt -> dst. dev ; icmp_param. data [ 0 ] = type ; icmp_param. data [ 1 ]. code = code ; icmp_param. data [ 2 ]. data [ 3 ]. data [ 4 ]. data_len = skb_headlen ( skb_in ) - iph -> ihl ; icmp_param. data [ 1 ]. data_len = skb_headlen ( skb_in ) - iph -> network_header + ( iph -> ihl << 2 ) + ( iph -> ihl << 2 ) + sizeof ( * iph ) ; icmp_param. data [ 3 ]. data [ 4 ]. data [ 5 ]. data_len = skb_headlen ( skb_in ) - iph -> network_header + iph -> ihl ; icmp_param. data [ 1 ]. data_len = skb_headlen - iph -> network_header + ( iph -> ihl << 2 ) + ( iph -> ihl << 2 ) ; icmp_param. data [ 2 ]. data [ 3,0
377,<S2SV_ModStart> len ; } ND_TCHECK_32BITS <S2SV_ModEnd> ( p +,0
378,<S2SV_ModStart> 0 ; } if ( unlikely ( IPCB ( skb ) -> opt. optlen ) ) skb_dst_force ( skb ) ; else,1
379,<S2SV_ModStart> private ) { struct skcipher_tfm * tfm = private ; crypto_free_skcipher ( tfm -> skcipher ) ; kfree ( tfm <S2SV_ModEnd> ) ; },1
380,<S2SV_ModStart> bprm ) { <S2SV_ModEnd> int retval ; <S2SV_ModStart> int retval ; bprm_fill_uid ( bprm ) ; <S2SV_ModEnd> retval = security_bprm_set_creds,1
381,<S2SV_ModStart> = nlogs ; if ( unlikely ( headcount > UIO_MAXIOV ) ) { r = - ENOBUFS ; goto err ; },0
382,<S2SV_ModStart> s ) ) { if ( dlen < 2 ) break ;,0
383,<S2SV_ModStart> { rq = tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; fn (,1
384,<S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) && ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) && ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODE,0
385,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
386,<S2SV_ModStart> ; if (! skb_is_nonlinear ( skb ) ) return 0 ; if (,0
387,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; RESERVE_SPACE",1
388,"<S2SV_ModStart> bp, len ) ; goto trunc ; } if ( flags & GRE_CP ) { ND_TCHECK_16BITS ( * bp, 2 ) ; if ( len < 2 ) goto trunc ; <S2SV_ModStart> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> sum <S2SV_blank> 0x%x"", EXTRACT_16BITS ( bp ) ) ) ; bp += 2 ; len -= 2 ; } if ( flags & GRE_KP ) { ND_TCHECK_16BITS ( bp, 4 ) ; if ( len < 4 ) goto trunc ; <S2SV_ModStart> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> key=0x%x"", EXTRACT_32BITS ( bp ) ) ) ; bp += 4 ; len -= 4 ; } if ( flags & GRE_SP ) { ND_TCHECK_32BITS ( bp, 4 ) ; if ( len < 4 ) goto trunc ; ND_PRINT ( ( ndo, "", <S2SV_blank> seq <S2SV_blank> %u"", EXTRACT_32BITS ( bp ) ) ) ; bp += 4 ; len -= 4 ; }",0
389,"<S2SV_ModStart> } if ( tile_buffsize > 0xFFFFFFFFU - ( tile_buffsize / tile_rowsize ) ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> calculating <S2SV_blank> buffer <S2SV_blank> size"" ) ; exit ( - 1 ) ; } <S2SV_ModStart> } if ( tile_buffsize > 0xFFFFFFFFU - ( tile_buffsize / tile_rowsize ) ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> calculating <S2SV_blank> buffer <S2SV_blank> size"" ) ; exit ( - 1 ) ; }",0
390,"<S2SV_ModStart>, argv, { ""umask"", required_argument <S2SV_ModEnd>, 'u' } <S2SV_ModStart>, argv, { ""umask"", required_argument <S2SV_ModEnd>, 'G' } <S2SV_ModStart>, argv, { ""umask"", required_argument <S2SV_ModEnd>, 'G' } <S2SV_ModStart>, argv, { ""umask"", required_argument <S2SV_ModEnd>, 'G' } <S2SV_ModStart>, argv, { ""umask"", required_argument <S2SV_ModEnd>, 'G' } <S2SV_ModStart>, argv, { ""umask"", required_argument <S2SV_ModEnd>, 'G' } <S2SV_ModStart>, { ""umask"", required_argument <S2SV_ModEnd>, 'G' } <S2SV_ModStart>, argv, { ""umask"", required_argument <S2SV_ModEnd>, 'G' } <S2SV_ModStart>, argv, { ""umask"", required_argument <S2SV_ModEnd>, 'G' } <S2SV_ModStart>, argv, { ""umask"", required_argument <S2SV_ModEnd>, 'G' } <S2SV_ModStart>, argv, { ""umask"", required_argument <S2SV_ModEnd>, 'G' } <S2SV_ModStart>, { ""umask"", required_argument <S2SV_ModEnd>, 'G' } <S2SV_ModStart>, { ""umask"", required_argument <S2SV_ModEnd>, 'G' } <S2SV_ModStart>, argv, { ""umask"", required_argument",0
391,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ""modify_bar_registration: <S2SV_blank> bypass <S2SV_blank> for <S2SV_blank> pci-gvt\\n"" ) ; return 0 <S2SV_ModEnd> ; } switch <S2SV_ModStart> break ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
392,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart> -> nd_num ) { ret = <S2SV_ModEnd> - EBUSY ; <S2SV_ModStart> - EBUSY ; goto out ; } <S2SV_ModStart> nd_num ; } out : o2nm_unlock_subsystem ( ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>,0
393,"<S2SV_ModStart> ( fp, "" <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %s\\n"" <S2SV_ModEnd>, & n",0
394,<S2SV_ModStart> : case 0x1a : case 0x1b : case 0x1c : case 0x1f : case 0x16 : case 0x17 : case 0x18 : case 0x19 : case 0x1a : case 0x1b : case 0x1c : case 0x1f :,0
395,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
396,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
397,<S2SV_ModStart> return - E_NOTHANDLED ; if ( ninst == 0 ) return - E_INVALID,1
398,"<S2SV_ModStart> goto trunc ; if ( lshp -> ls_length < 2 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %u, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_router ), lshp -> ls_seq, lshp -> ls_age ) ) ; } else { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %u, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_seq ), lshp -> ls_age ) ) ; }",0
399,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
400,"<S2SV_ModStart> return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> memcpy ( & cf, p + offset, 2 ) ; if (! ND_TTEST2 ( * ( p + offset ), 4 ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), 4 ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), 5 ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), 5 ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), 5 ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), 5 ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), 6 ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), 6 ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), 6 ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), 6 ) ) return 0",0
401,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf -> flags",0
402,<S2SV_ModStart> ( ) ; if (! tbuf ) { return NULL ; },1
403,"<S2SV_ModStart> long ret, <S2SV_ModEnd> err ; if <S2SV_ModStart>, err ; if (! access_ok ( VERIFY_WRITE, ur, sizeof ( * ur ) ) ) return - EFAULT ; set_fs ( old_fs ) ; <S2SV_ModStart> = 0 ; if ( <S2SV_ModEnd> r. ru_utime <S2SV_ModStart> ; err |= __put_user ( r. ru_stime, & ur -> ru_stime ) ; err |= __put_user ( r. ru_maxrss, & ur -> ru_maxrss ) ; err |= __put_user ( r. ru_ixrss, & ur -> ru_ixrss ) ; err |= __put_user ( r. ru_idrss, & ur -> ru_idrss ) ; err |= __put_user ( r. ru_minflt, & ur -> ru_minflt ) ; err |= __put_user ( r. ru_nswap, & ur -> ru_nswap ) ; err |= __put_user ( r. ru_inblock, & ur -> ru_inblock ) ; err |= __put_user ( r. ru_oublock, & ur -> ru_oublock ) ; <S2SV_ModEnd> return ret ;",0
404,"<S2SV_ModStart>, LXC_AUTO_PROC_MIXED, ""%r/proc/sys/net"", ""%r/proc/net"" <S2SV_ModEnd>, MS_BIND, <S2SV_ModStart>, LXC_AUTO_PROC_MIXED, ""%r/proc/sys"", <S2SV_ModStart> MS_BIND, NULL, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys"", ""%r/proc/sys"" <S2SV_ModEnd>, MS_BIND, <S2SV_ModStart> MS_BIND, NULL, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sysrq-trigger"", ""%r/proc/sysrq-trigger"" <S2SV_ModEnd>, MS_BIND, <S2SV_ModStart> MS_BIND, NULL, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_RW, ""sys"", ""%r/proc/sys"" <S2SV_ModEnd>, MS_BIND, <S2SV_ModStart> MS_BIND, NULL, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_RW, ""sys",0
405,"<S2SV_ModStart> } else { if ( addrinsubnet ( & md -> sender, & c -> spd. that. client ) ) { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"" "" <S2SV_blank> but <S2SV_blank> no <S2SV_blank> connection <S2SV_blank> has <S2SV_blank> been <S2SV_blank> authorized%s%s"", ip_str ( & md -> iface -> ip_addr ), ntohs ( portof ( & md -> iface -> ip_addr ) ) ; } else { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"" "" <S2SV_blank> but <S2SV_blank> no <S2SV_blank> connection <S2SV_blank> has <S2SV_blank> been <S2SV_blank> authorized%s"", ip_str ( & md -> iface -> ip_addr ), ntohs ( portof ( & md -> iface -> ip_addr ) ), ( policy!= LEMPTY )? bitnamesof ( sa_policy_bit_names, policy ) : """", ( policy!= LEMPTY )? bitnamesof ( sa_policy_bit_names, policy ) : """" ) ; return STF_FAIL + v2N_NO_PROPOSAL",0
406,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nsc_encode ( NSC_CONTEXT <S2SV_ModStart> rowstride ) { if (! context ) return FALSE ; if (! <S2SV_ModStart>, rowstride ) ) return FALSE ; if (! <S2SV_ModStart> ChromaSubsamplingLevel ) { if (! <S2SV_ModStart> ( context ) ) return FALSE ; } } return TRUE ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
407,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, const",0
408,<S2SV_ModStart> stringset == ETH_SS_STATS || stringset == ETH_SS_PRIV_FLAGS,1
409,<S2SV_ModStart> return ( ( ( <S2SV_ModStart> ) / 8 ) * GetPSDPacketSize ( image ),1
410,"<S2SV_ModStart> { p_dev -> fd = open_safe ( dev_path, O_RDWR | O_CLOEXEC ) ; if ( p_dev -> fd < 0 ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%d"", __FUNCTION__, p_dev -> fd ) ; break ; }",0
411,<S2SV_ModStart> bMasterInterface0 ) ; if (! pcu -> ctrl_intf ) return - EINVAL ; <S2SV_ModStart> bSlaveInterface0 ) ; if (! pcu -> data_intf ) return - EINVAL ;,1
412,"<S2SV_ModStart> const char * devname = kstrdup ( dev_name ( & <S2SV_ModEnd> d -> udev <S2SV_ModStart> udev -> dev ), GFP_KERNEL ) ; if (! devname ) return ; dev_dbg ( & d -> udev -> dev, ""%s: <S2SV_blank> bInterfaceNumber=%d\\n"", __func__, intf -> cur_altsetting -> desc. bInterfaceNumber ) ; <S2SV_ModStart> d ) ; kfree ( devname ) ;",0
413,"<S2SV_ModStart> pirlvl ) { if ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 || pirlvl -> prcheightexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 ) { return - 1 ; } <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> ) % ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << rpx ) <S2SV_ModStart> ) % ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << rpy )",1
414,<S2SV_ModStart> target_enc ) { return ONIGERR_NOT_SUPPORTED_ENCODING_COMBINATION <S2SV_ModEnd> ; } else,1
415,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> InsertRow ( Image <S2SV_ModStart> exception ) { Quantum * q ; <S2SV_ModEnd> register Quantum * <S2SV_ModStart> x ; ssize_t bit <S2SV_ModEnd> ; register Quantum <S2SV_ModStart> register Quantum * <S2SV_ModEnd> q ; index <S2SV_ModStart> index = 0 <S2SV_ModEnd> ; switch ( <S2SV_ModStart> : { q = QueueAuthenticPixels ( image, 0, y, image -> columns, 1, exception ) ; if ( q == ( Quantum * ) NULL ) break ; for ( x = 0 ; x < ( ( ssize_t ) image -> columns - 7 ) ; x += 8 ) { for ( bit = 0 ; bit < 8 ; bit ++ ) { index = ( Quantum ) ( ( ( ( * p ) & ( 0x80 >> bit ) )? 0x01 : 0x00 ) ; SetPixelIndex ( image, index, q ) ; q += GetPixelChannels ( image ) ; } p ++ ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> % 8 )!= 0 ) { index = ( Quantum ) ( ( ( ( * p ) & ( 0x80 >> bit ) )? 0x01 : 0x00 ) ; Set",0
416,"<S2SV_ModStart> u_char * tptr, u_int length <S2SV_ModStart> network_addr_type ; u_int <S2SV_ModEnd> hexdump = FALSE <S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Network <S2SV_blank> Address <S2SV_blank> Type <S2SV_blank> %u <S2SV_blank> (%u)"" <S2SV_ModEnd>, network_addr_type ) <S2SV_ModStart> case AFNUM_INET : if ( length < 2 ) { ND_PRINT ( ( ndo, ""(invalid <S2SV_blank> IPv4 <S2SV_blank> address <S2SV_blank> length)"" ) ) ; hexdump = TRUE ; break ; } <S2SV_ModStart> case AFNUM_INET6 : if ( length < 2 ) { ND_PRINT ( ( ndo, ""(invalid <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> length)"" ) ) ; hexdump = TRUE ; break ; }",0
417,"<S2SV_ModStart> ; u64 msr_data, rcx, rdx <S2SV_ModStart> = X86EMUL_MODE_PROT32 ; rcx = reg_read ( ctxt, VCPU_REGS_RCX ) ; rdx = reg_read ( ctxt, VCPU_REGS_RDX ) ; <S2SV_ModStart> = 1 ; <S2SV_ModEnd> } cs_sel |= <S2SV_ModStart> VCPU_SREG_SS ) ; rcx = reg_read ( ctxt, VCPU_REGS_RCX ) ; <S2SV_ModStart> -> _eip = rdx <S2SV_ModEnd> ; * reg_write <S2SV_ModStart> VCPU_REGS_RSP ) = rcx <S2SV_ModEnd> ; return emulate_gp",0
418,<S2SV_ModStart> dev ) ; ssize_t len ; device_lock ( dev ) ; len = <S2SV_ModEnd> sprintf ( buf <S2SV_ModStart> driver_override ) ; device_unlock ( dev ) ; return len ;,1
419,"<S2SV_ModStart> BIO * tmpout ; tmpout = cms_get_text_bio ( out, flags ) ; if (! tmpout ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, ERR_R_MALLOC_FAILURE ) ; goto err ; } else tmpout = out ; if (! tmpout ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, ERR_R_MALLOC_FAILURE ) ; goto err ; } if ( flags & CMS_TEXT ) { tmpout = BIO_new ( BIO_s_mem ( ) ) ; BIO_set_mem_eof_return ( tmpout, 0 ) ; } else tmpout = out ; if (! tmpout ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, ERR_R_MALLOC_FAILURE ) ; goto err ; } for ( ; ; ) { i = BIO_read ( in, buf, sizeof ( buf ) ) ; if ( i <= 0 ) { if ( BIO_method_type ( in ) == BIO_TYPE_CIPHER ) { if (! BIO_get_cipher_status ( in ) ) goto err",0
420,<S2SV_ModStart> = KRB5_PREAUTH_FAILED ; if ( retval == 0 ) rs. enc_tkt_reply -> flags |= TKT_FLG_PRE_AUTH ;,1
421,"<S2SV_ModStart> costs, vpx_tree <S2SV_ModEnd> * tree, <S2SV_ModStart> c ) { vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> i / 2 ] ; vpx_tree_index <S2SV_ModEnd> ii = tree",0
422,<S2SV_ModStart> && ( tmp_dir [ strlen ( W3MCONFIG ) - 1 ] == '.' || tmp_dir [ strlen ( W3MCONFIG ) - 1 ] == '\\0' || tmp_dir [ strlen ( W3MCONFIG ) - 1 ] == '\\0' ) && ( <S2SV_ModStart> && ( tmp_dir [ strlen ( W3MCONFIG ) - 1 ] == '.' || tmp_dir [ strlen ( W3MCONFIG ) - 1 ] == '\\0' ) || ( tmp_dir [ strlen ( W3MCONFIG ) - 1 ] == '\\0' || tmp_dir [ strlen ( W3MCONFIG ) - 1 ] == '\\0' || tmp_dir [ strlen ( W3MCONFIG ) - 1 ] == '\\0' ) && ( <S2SV_ModStart> && ( tmp_dir [ strlen ( W3MCONFIG ) - 1 ] == '.' || tmp_dir [ strlen ( W3MCONFIG ) - 1 ] == '\\0' ) || ( tmp_dir [ strlen ( W3MCONFIG ) - 1 ] == '\\0' || tmp_dir [ strlen ( W3MCONFIG ) - 1 ] == '\\0' || tmp_dir [ strlen ( W3MCONFIG ) -,0
423,"<S2SV_ModStart> = 0 ; size_t pathlen = 0 ; <S2SV_ModStart> case AF_UNIX : pathlen = sizeof ( <S2SV_ModEnd> ( ( struct <S2SV_ModStart> ( struct sockaddr_un * ) sock_addr ) -> sun_path ) ; if ( pathlen > MAXPATHLEN ) { pathlen = MAXPATHLEN ; } strncpy ( addr_text, ( ( struct sockaddr_un * ) sock_addr ) -> sun_path, pathlen ) ; addr_text [ pathlen - 1 ] = '\\0' ; protoname = ""unix"" ; break ; } strncpy ( addr_text, ( ( struct sockaddr_un * ) sock_addr ) -> sun_path <S2SV_ModEnd>, sizeof (",0
424,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
425,"<S2SV_ModStart> & 0xffff ; if (! check_patch ( dev, fmt, buf, p + 4, c, 0 ) ) return err ; err = synth_devs [ dev ] -> load_patch ( dev, fmt, buf, p + 4, c, 0 ) ; if ( err",0
426,"<S2SV_ModStart> ) { struct hugepage_subpool * spool = subpool_vma ( vma ) ; struct <S2SV_ModStart> page * page <S2SV_ModEnd> ; long chg <S2SV_ModStart> ) if ( hugepage_subpool_get_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> page ) { hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> unsigned long ) spool <S2SV_ModEnd> ) ; vma_commit_reservation",1
427,<S2SV_ModStart> filegen_string ) ; if ( filegen == NULL ) continue ; <S2SV_ModStart> filegen_file ) ; if ( filegen == NULL ) continue ;,0
428,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; timer_set_state",1
429,"<S2SV_ModStart> fadst16 ( const tran_low_t * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> [ 15 ] ; tran_high_t x1 = input [ 0 ] ; tran_high_t x2 = input [ 1 ] ; tran_high_t x3 = input [ 2 ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> ; tran_high_t x5 = input [ 3 ] ; tran_high_t <S2SV_ModEnd> x6 = input <S2SV_ModStart> 7 ] ; tran_high_t <S2SV_ModEnd> x8 = input <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 10 ] ; tran_high_t <S2SV_ModEnd> x10 = input <S2SV_ModStart> 11 ] ; tran_high_t <S2SV_ModEnd> x12 = input <S2SV_ModStart> 12 ] ; tran_high_t <S2SV_ModEnd> x15 = input <S2SV_ModStart> 14 ] ; tran_high_t <S2SV_ModEnd> x0 = x",0
430,<S2SV_ModStart> ; # if HAVE_EDSP <S2SV_ModEnd> flags |= HAS_EDSP <S2SV_ModStart> ; # endif if ( win <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
431,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
432,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF <S2SV_ModStart> wc ) ; return,1
433,"<S2SV_ModStart> tot_len ) ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
434,<S2SV_ModStart> += 4 ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> += 4 ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> += 4 ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> += 4 ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> += 4 ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> += 4 ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> += 4 ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> += 4 ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> += 4 ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ;,0
435,<S2SV_ModStart> == datalen ) { if ( flags & FLAG_LAST_MATCHED ) { pc -= asn1_op_lengths [ op ] ; goto next_op ; } <S2SV_ModEnd> flags &= ~ <S2SV_ModStart> == datalen ) { pc -= asn1_op_lengths [ op ] ; goto next_op ; } <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> == datalen ) { if ( flags & FLAG_LAST_MATCHED ) { flags &= ~ FLAG_LAST_MATCHED ; pc -= asn1_op_lengths [ op ] ; goto next_op ; },0
436,"<S2SV_ModStart>, * controller, * next = NULL <S2SV_ModStart> out ; } <S2SV_ModEnd> if (! <S2SV_ModStart>, cgroup, & next ) ) { if (! fpath || strcmp ( next, fpath ) == 0 ) ret = - EBUSY ; else ret = - ENOENT ; goto out ; } if (! fc_may_access ( fc, controller, cgdir, NULL, O_WRONLY <S2SV_ModEnd> ) ) { <S2SV_ModStart> if (! caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if (! <S2SV_ModStart> cgdir ) ; free ( next ) ;",1
437,<S2SV_ModStart> ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_READONLY <S2SV_ModEnd> ) ) mnt <S2SV_ModStart> ; if ( mnt -> mnt. mnt_flags & MNT_NODEV ) mnt -> mnt. mnt_flags |= MNT_LOCK_NODEV ; if ( mnt -> mnt. mnt_flags & MNT_NOSUID ) mnt -> mnt. mnt_flags |= MNT_LOCK_NOSUID ; if ( mnt -> mnt. mnt_flags & MNT_NOEXEC ) mnt -> mnt. mnt_flags |= MNT_LOCK_NOEXEC ; if ( mnt -> mnt. mnt_flags & MNT_NOEXEC ) mnt -> mnt. mnt_flags |= MNT_LOCK_NOEXEC ; if ( mnt -> mnt. mnt_flags & MNT_NOEXEC ) mnt -> mnt. mnt_flags |= MNT_LOCK_NOEXEC ; if ( mnt -> mnt. mnt_flags & MNT_NOEXEC ) mnt -> mnt.,0
438,<S2SV_ModStart> rds_loop_transport ; } <S2SV_ModEnd> } conn ->,1
439,<S2SV_ModStart> * rsize >= 112 <S2SV_ModEnd> && rdesc [,1
440,"<S2SV_ModStart> ; if ( ( bodyLength < sizeof ( EAPOL_RSN_KEY ) ) || ( bodyLength > tot_len - offset ) ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Invalid <S2SV_blank> EAPOL-Key <S2SV_blank> length"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_INVALID_HANDSHAKE ; } if ( <S2SV_ModStart> + 2 ) ; if ( ( bodyLength < sizeof ( EAPOL_RSN_KEY ) ) ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Invalid <S2SV_blank> EAPOL-Key <S2SV_blank> length"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_INVALID_HANDSHAKE ; }",0
441,"<S2SV_ModStart> & I8042_STR_AUXERR ) { dbg ( ""AUX <S2SV_blank> error, <S2SV_blank> status <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> data <S2SV_blank> is <S2SV_blank> %02x\\n"", str, ( unsigned char ) data ) ; serio = i8042_read_serio ( port, str & ~ I8042_STR_AUXDATA ) ; if ( unlikely ( serio == NULL ) ) { spin_unlock_irqrestore ( & i8042_lock, flags ) ; return IRQ_NONE ; } serio = i8042_read_serio ( port, str & ~ I8042_STR_SERIO ) ; if ( unlikely ( serio == NULL ) ) { serio = i8042_read_serio ( port, str & ~ I8042_STR_SERIO ) ; if ( unlikely ( serio == NULL ) ) { spin_unlock_irqrestore ( & i8042_lock, flags ) ; return IRQ_HANDLED ; } } else { serio = i8042_read_serio ( port, str & ~ I8042_STR_",0
442,"<S2SV_ModStart> case NFSPROC_GETSTAT : if ( parsewccres ( ndo, dp,! ndo -> ndo_vflag, 0 )!= 0 ) return ; if ( parseattrstat ( ndo, dp,! ndo -> ndo_vflag, 0 )!= 0 ) return ; if ( v3 ) { if ( parsewccres ( ndo, dp,! ndo -> ndo_vflag, 0 )!= 0 ) return ; } else { if ( parsewccres ( ndo, dp,! ndo -> ndo_vflag, 0 )!= 0 ) return ; } } break ; case NFSPROC_SETATTR : if ( parseattrstat ( ndo, dp,! ndo -> ndo_qflag, 0 )!= 0 ) return ; if ( v3 ) { if ( parsewccres ( ndo, dp,! ndo -> ndo_vflag, 0 )!= 0 ) return ; } else { if ( parsewccres ( ndo, dp,! ndo -> ndo_vflag, 0 )!= 0 ) return ; } break ; case NFSPROC_",0
443,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static unsigned short <S2SV_ModEnd> udf_translate_to_linux ( uint8_t <S2SV_ModStart> * udfName, int udfLen, <S2SV_ModEnd> uint8_t * fidName <S2SV_ModStart> ( newIndex < ( udfLen - EXT_SIZE ) ) newName [ newIndex ++ ] = curr ; else needsCRC = 1 ; } } if ( newIndex < ( udfLen - EXT_SIZE ) ) newName [ newIndex ++ ] = EXT_MARK ; if ( index + 1 < udfLen && udfName [ index + 1 ] == '/' || udfName [ index + 1 ] == 0 ) { if ( udfLen == index + 1 ) { needsCRC = 1 ; curr = ILLEGAL_CHAR_MARK ; while ( index < ( udfLen - index - 1 ) && ( udfName [ index + 1 ] == '/' || udfName [ index + 1 ] == 0 ) ) index ++ ; } if ( curr == EXT_MARK && ( udfLen - index - 1 ) <= EXT_SIZE ) { if ( udfLen == index + 1 ) hasExt = 0 ; else { if ( udfLen == index + 1 ) { hasExt = 1 ; newExtIndex = index",0
444,"<S2SV_ModStart> void count_segs_sb ( const VP9_COMMON * cm, <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * <S2SV_ModEnd> mi_8x8, int <S2SV_ModStart> bsize ) { <S2SV_ModEnd> int bw, <S2SV_ModStart> bw = num_8x8_blocks_wide_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ], hbs = num_8x8_blocks_high_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; if ( bw < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, hbs, mi_row, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, hbs, mi_row, mi_col ) ; count_segs ( cpi, tile, mi_8x8",0
445,<S2SV_ModStart> ; if (! ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) &&! ( c -> flags & CLIENT_ESTABLISHED ),0
446,"<S2SV_ModStart> = 0 ; if ( ( mpd -> b_state & ( 1 << BH_Mapped ) ) &&! ( mpd -> b_state & ( 1 << BH_Unwritten ) ) ) { ext4_msg ( mpd -> inode -> i_sb, KERN_CRIT, ""delayed <S2SV_blank> block <S2SV_blank> allocation <S2SV_blank> failed\\n"", mpd -> inode -> i_ino ) ; mpd -> retval = err ; return err ; } if ( ( mpd -> b_state & ( 1 << BH_Mapped ) ) &&! ( mpd -> b_state & ( 1 << BH_Delay ) ) ) { ext4_msg ( mpd -> inode -> i_sb, KERN_CRIT, ""delayed <S2SV_blank> block <S2SV_blank> allocation <S2SV_blank> failed\\n"", mpd -> inode -> i_ino ) ; return 0 ; } if ( mpd -> b_state & ( 1 << BH_Mapped ) ) { ext4_msg ( mpd -> inode -> i_sb, KERN_CRIT, ""delayed <S2SV_blank> block <S2SV_blank> allocation <S2SV_blank> failed\\n"", mpd -> inode -> i_ino ) ; return err ;",0
447,"<S2SV_ModStart> * s ; const unsigned char * p = sigbuf ; unsigned char * der = NULL ; int derlen = - 1 ; <S2SV_ModStart> s, & p <S2SV_ModEnd>, siglen ) <S2SV_ModStart> == NULL ) goto err ; derlen = i2d_DSA_SIG ( s, & der ) ; if ( derlen!= siglen || memcmp ( sigbuf, der, derlen ) ) <S2SV_ModStart> ; err : if ( derlen > 0 ) { OPENSSL_cleanse ( der, derlen ) ; OPENSSL_free ( der ) ; }",1
448,"<S2SV_ModStart> NULL ) ; if (! _gdImageGifCtx <S2SV_ModEnd> ( im, <S2SV_ModStart>, out ) ) { <S2SV_ModEnd> rv = gdDPExtractData <S2SV_ModStart> size ) ; } else { rv = NULL ; }",1
449,<S2SV_ModStart> ) ; } if ( bprm -> interp!= bprm -> filename ) kfree ( bprm -> interp ) ;,1
450,"<S2SV_ModStart> = 0 ; oe_addrinfo_t * p ; size_t ai_addrlen = 0 ; <S2SV_ModStart>, handle, & ai_flags, & ai_family, & ai_socktype, & ai_protocol, & ai_addrlen, NULL, & ai_addrlen, & canonnamelen, NULL )!= OE_OK ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( ai_addrlen > sizeof ( struct oe_addrinfo ) ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; goto done ; } if ( p == NULL ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; goto done ; } if ( p == NULL ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; goto done ; } if ( p == NULL ) { ret = OE_EAI_",0
451,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
452,"<S2SV_ModStart> ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, ""Invalid <S2SV_blank> image <S2SV_blank> dimensions"" ) ; goto done ; }",1
453,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
454,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> set_registers ( pegasus_t <S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmemdup ( data, size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
455,"<S2SV_ModStart> asdl_seq * body, asdl_arena * arena <S2SV_ModStart> = body ; p -> v. Module. arena = arena ;",0
456,<S2SV_ModStart> destroy_list ) ; <S2SV_ModEnd> } } <S2SV_null>,1
457,"<S2SV_ModStart> ts_start, int64_t ts_end, unsigned int flags ) { # if USE_PARTIAL_COPY int row, col, active_end ; int mb_cols = ( src -> y_height + 15 ) >> 4 ; # endif if ( ctx -> sz + 1 > ctx -> max_sz ) return 1 ; ctx -> sz ++ ; buf = pop ( ctx, & ctx -> write_idx ) ; # if USE_PARTIAL_COPY <S2SV_ModEnd> if ( ctx <S2SV_ModStart> -> max_sz == 1 && active_map &&! flags ) { row = 0 ; col = 0 ; while ( 1 ) { if ( col == mb_cols ) break ; active_end = col ; for ( ; active_end < mb_cols ; ++ active_end ) { if (! active_map [ active_end ] ) break ; vp9_copy_and_extend_frame_with_rect ( src, & buf -> img, row << 4, 16, ( active_end - col ) << 4 ) ; col = active_end ; } active_map += mb_cols ; } } else { vp9_copy_and_extend_frame ( src, & buf -> img )",0
458,<S2SV_ModStart> ) ; } fuse_conn_put ( & cc -> fc ) ;,1
459,"<S2SV_ModStart> ( code ) { * status = ""DECODE_PA_S4U_X509_USER"" ; return code ; } <S2SV_ModEnd> code = verify_s4u_x509_user_checksum",1
460,"<S2SV_ModStart> scsi_disk_emulate_command ( SCSIDiskRequest * qdev, SCSIRequest * req, uint8_t * outbuf ) { SCSIDiskState * s = DO_UPCAST ( SCSIDiskState, qdev, req -> dev ) ; if (! scsi_disk_emulate_supported ( qdev, req ) ) goto illegal_request ; break ; case READ_TOC_10 : if ( scsi_disk_emulate_read_toc ( qdev, req, outbuf ) < 0 ) goto illegal_request ; break ; case READ_TOC_10 : if ( scsi_disk_emulate_read_toc ( qdev, req, outbuf ) < 0 ) goto illegal_request ; break ; case READ_TOC_10 : if ( scsi_disk_emulate_read_toc_10 ( qdev, req, outbuf ) < 0 ) goto illegal_request ; break ; case READ_TOC_10 : if ( scsi_disk_emulate_read_toc_10 ( qdev, req, outbuf ) < 0 ) goto illegal_request ; break ; case",0
461,<S2SV_ModStart> cur_pic. field_picture <S2SV_ModEnd> ) return 0,1
462,"<S2SV_ModStart> off ) { struct scatterlist * sgp = & rm -> data. op_sg [ sg ] ; int ret = sizeof ( struct rds_header ) + be32_to_cpu ( rm -> m_inc. i_hdr. h_len ) ; <S2SV_ModStart> 0 ) ; ret = min_t ( int, ret, sgp -> length - conn -> c_xmit_data_off ) ; goto out <S2SV_ModEnd> ; } BUG_ON <S2SV_ModStart> m_inc ) ; out : return ret <S2SV_ModEnd> ; } <S2SV_null>",1
463,<S2SV_ModStart> buf ) ) { return 0 ; } <S2SV_ModEnd> ext_block = (,1
464,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = key_permission,1
465,<S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_16BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_16BITS ( & bp [ hlen ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_16BITS ( & bp [ hlen ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_16BITS ( & bp [ hlen ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_16BITS ( & bp [ hlen ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) {,0
466,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
467,"<S2SV_ModStart> = hmi_data ; uint32_t hmi_bpm = 0 ; uint16_t hmi_division = 0 <S2SV_ModStart> channel ; } * note = & _note ; if ( hmi_track_offset [ i ] >= hmi_size ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> to <S2SV_blank> parse\\n"", 0 ) ; return NULL ; } if ( hmi_track_offset [ i ] >= hmi_size ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> to <S2SV_blank> parse\\n"", 0 ) ; return NULL ; } if ( hmi_track_offset [ i ] >= hmi_size ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> to <S2SV_blank> parse\\n"", 0 ) ; return NULL ; }",0
468,<S2SV_ModStart> -> id ; haddr -> hci_channel = 0 ;,1
469,<S2SV_ModStart> -> i_iget5_offset ; fh16 [ 3 ] = 0 ;,1
470,"<S2SV_ModStart>! vague_errors ) return ( KRB_ERR_GENERIC ) ; else return ( KDC_ERR_KEY_EXP ) ; } if ( server. pw_expiration && server. pw_expiration < kdc_time ) { * status = ""CLIENT <S2SV_blank> KEY <S2SV_blank> EXPIRED"" ; if ( vague_errors ) return ( KRB_ERR_GENERIC ) ; else return ( KDC_ERR_KEY_EXP ) ; } if ( client. pw_expiration && client. pw_expiration < kdc_time ) { * status = ""CLIENT <S2SV_blank> KEY <S2SV_blank> EXPIRED"" ; if ( vague_errors ) return ( KRB_ERR_GENERIC ) ; else return ( KDC_ERR_KEY_EXP ) ; } if ( isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) ) { * status = ""REQUIRED <S2SV_blank> PWCHANGE"" ; return ( KDC_ERR_KEY_EXP",0
471,"<S2SV_ModStart> case BPF_SUB : if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = 0 ; dst_reg -> smax_value = U64_MAX ; } else { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } <S2SV_ModEnd> if ( src_known <S2SV_ModStart> case BPF_SUB : if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MAX ; } else { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; }",0
472,"<S2SV_ModStart> ; if ( cpi -> oxcf. key_frame_mode == KEY_FRAME ) lf -> sharpness_level = 0 ; else lf -> sharpness_level = get_max_filter_level ( cpi ) ; if ( cpi -> oxcf. key_frame_mode == KEY_FRAME ) lf -> filter_level = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; else if ( cpi -> oxcf. key_frame_mode == KEY_FRAME ) lf -> filter_level = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; else lf -> filter_level = get_max_filter_level ( cpi ) ; if ( cpi -> oxcf. key_frame_mode == KEY_FRAME ) lf -> filter_level = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; else if ( cpi -> oxcf. key_frame_mode == KEY_FRAME ) lf -> filter_level = clamp ( lf -> filter_level, min_filter_level, max_filter_",0
473,"<S2SV_ModStart> case BTA_DM_DISABLE_EVT : { BD_NAME bdname ; bt_status_t status ; BT_DBG_EVENT ( ""BTIF_DM_DISABLE_EVT: <S2SV_blank> %s"", dump_dm_event ( event ) ) ; BTIF_DBG_EVENT ( ""BTIF_DM_DISABLE_EVT: <S2SV_blank> %s"", dump_dm_event ( event ) ) ; BT_DBG_EVENT ( ""BTIF_DM_DISABLE_EVT: <S2SV_blank> %s"", dump_dm_event ( event ) ) ; } break ; case BT_DM_DISABLE_EVT : { BD_NAME bdname ; bt_status_t status ; bt_property_t prop ; status = btif_storage_get_adapter_property ( & prop ) ; if ( status == BT_STATUS_SUCCESS ) { BT_DBG_EVENT ( ""BTIF_DM_DISABLE_EVT: <S2SV_blank> %s"", dump_dm_event ( event ) ) ; } break ; case BT_DM_DISABLE_EVT :",0
474,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { image = DestroyImageList ( image ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { image = DestroyImageList ( image ) ; return ( DestroyImageList ( image ) ) ; }",0
475,"<S2SV_ModStart> = getnum ( <S2SV_ModEnd> fmt, MAXALIGN",0
476,<S2SV_ModStart> void usage_exit ( void,1
477,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
478,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
479,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
480,"<S2SV_ModStart> vpx_codec_err_t res ; unsigned int alg_priv ; <S2SV_ModStart>. decode ( & alg_priv, data, data_sz <S2SV_ModEnd>, user_priv,",0
481,"<S2SV_ModStart> ; if ( strchr ( value, ',' ) ) { av_log ( s, AV_LOG_WARNING, ""Missing <S2SV_blank> PPS <S2SV_blank> in <S2SV_blank> sprop-parameter-sets, <S2SV_blank> ignoring\\n"" ) ; return 0 ; } if (",0
482,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> isofs_read_inode ( struct <S2SV_ModStart> inode ) ; if ( de -> name_len > inode -> i_sb -> s_blocksize - offset ) { printk ( KERN_INFO ""%s: <S2SV_blank> directory <S2SV_blank> name <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", __func__, inode -> i_sb -> s_blocksize - offset ) ; goto fail ; } if ( de_len < 0 ) { printk ( KERN_INFO ""%s: <S2SV_blank> directory <S2SV_blank> record <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", __func__, inode -> i_sb -> s_blocksize - offset ) ; ret = - EIO ; goto fail ; } if ( de_len > inode -> i_sb -> s_blocksize - offset ) { printk ( KERN_INFO ""%s: <S2SV_blank> directory <S2SV_blank> record <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", __func__, inode -> i_sb -> s_blocksize -",0
483,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
484,"<S2SV_ModStart> case ESIS_SOURCE_ADDRESS_LENGTH : if ( ndo -> ndo_vflag == 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> source <S2SV_blank> address <S2SV_blank> length <S2SV_blank> %u, <S2SV_blank> number <S2SV_blank> %u"", ndo -> ndo_vflag, source_address_length ) ) ; return ; } <S2SV_ModStart> case ESIS_SOURCE_ADDRESS_NUMBER : if ( ndo -> ndo_vflag == 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> source <S2SV_blank> address <S2SV_blank> number <S2SV_blank> %u, <S2SV_blank> length <S2SV_blank> %u"", source_address_number, ndo -> ndo_vflag, source_address_length ) ) ; return ; } <S2SV_ModStart> case ESIS_SOURCE_ADDRESS_LENGTH : if ( ndo -> ndo_vflag == 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> source <S2SV_blank> address <S2SV_blank> length <S2SV_blank> %u, <S2SV_blank> number <S2SV_blank> %u"", source_address_length ) ) ; return ; }",0
485,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> ) ; } sendClean ( outputbuffer ) ;",1
486,<S2SV_ModStart> } else { return false ; } } else if ( r -> CRn == 9 && r -> CRm == 13 ) { if ( pmu_access_event_counter_el0_disabled ( vcpu ) ) return false ; idx = ARMV8_PMU_CYCLE_IDX ; } else { return false ; } <S2SV_ModEnd> } else if <S2SV_ModStart> } else { return false <S2SV_ModEnd> ; } if,0
487,<S2SV_ModStart> case IS_STRING : { zval dval ; dval = * * zval_affine_elem ; zval_copy_ctor ( & dval ) ; convert_to_double ( & dval <S2SV_ModEnd> ) ; affine <S2SV_ModStart> i ] = Z_DVAL ( dval ) ; } <S2SV_ModEnd> break ; default <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; rect <S2SV_ModStart>. x = Z_LVAL ( lval ) ; } else { rect. x = <S2SV_ModStart> ) ; } } <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; rect <S2SV_ModStart>. y = Z_LVAL ( lval ) ; } else { rect. y = <S2SV_ModStart> ) ; } } <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval,1
488,<S2SV_ModStart> self ) { if ( self -> dict ),0
489,<S2SV_ModStart> SQL_DROP ) ; <S2SV_ModEnd> return 0 ;,1
490,"<S2SV_ModStart> ; r = __copy_from_user <S2SV_ModEnd> ( data,",1
491,"<S2SV_ModStart> q, * r, * p <S2SV_ModStart> ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2015 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\nThis <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\nThere <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\nparticular <S2SV_blank> purpose.\\n"" <S2SV_ModEnd> ) ; exit <S2SV_ModStart> ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2015 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\nThis <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\nThere <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\nparticular <S2SV_blank> purpose.\\n"" <S2SV_ModEnd> ) ; exit",0
492,<S2SV_ModStart> = 0 ; info -> port = NULL ;,1
493,<S2SV_ModStart> -> ctx. <S2SV_ModEnd> pmu = pmu,1
494,"<S2SV_ModStart> iovec * iovec, struct iov_iter * iter ) { if ( len > MAX_RW_COUNT ) len = MAX_RW_COUNT ; <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> = 1 ; iov_iter_init ( iter, rw, iovec, * nr_segs, len ) ;",1
495,<S2SV_ModStart> ext4_group_t flex_group ; unsigned <S2SV_ModStart> -> s_log_groups_per_flex ; if ( sbi -> s_log_groups_per_flex < 1 || sbi -> s_log_groups_per_flex > 31 ) { sbi -> s_log_groups_per_flex = 0 ; return 1 ; } <S2SV_ModStart> -> s_log_groups_per_flex ; <S2SV_ModEnd> flex_group_count = (,1
496,<S2SV_ModStart> ( unlikely ( chunk -> pdiscard ) ) return 0 ; if ( unlikely (,1
497,"<S2SV_ModStart> ; a && i < count ; ++ i, n = cJSON_CreateString ( strings [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } <S2SV_ModEnd> return a ;",0
498,"<S2SV_ModStart> { if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) { ircd_snprintf ( realhost, sizeof ( realhost ), "" <S2SV_blank> [%s]"", parv [ 1 ] ) ; return send_reply ( cptr, ERR_INVALIDPARAM ; } if ( <S2SV_ModStart> { if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) { ircd_snprintf ( realhost, parv [ 1 ],'<S2SV_blank>') ; if ( strchr ( parv [ 1 ],'<S2SV_blank>') ) ircd_snprintf ( realhost, sizeof ( realhost ), "" <S2SV_blank> [%s]"", parv [ 1 ] ) ; return <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
499,<S2SV_ModStart> <= w - ( int ),1
500,<S2SV_ModStart> callback_args -> forward_matches ; assert ( match_offset + match_length <= callback_args -> data_size ),1
501,<S2SV_ModStart>! no_port_forwarding_flag && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 <S2SV_ModEnd> ) { c,0
502,"<S2SV_ModStart> { if ( length > SMKTREE_DECODE_MAX_RECURSION ) { av_log ( NULL, AV_LOG_ERROR, ""Maximum <S2SV_blank> tree <S2SV_blank> recursion <S2SV_blank> level <S2SV_blank> exceeded.\\n"" ) ; return AVERROR_INVALIDDATA ; } if (",1
503,<S2SV_ModStart> err ; } if ( m -> msg_name ),1
504,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == Py_None ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" )",0
505,<S2SV_ModStart> m ; int hstartrow <S2SV_ModEnd> ; if ( <S2SV_ModStart> 2 ) { hstartrow <S2SV_ModEnd> = ( numrows <S2SV_ModStart> - parity ) >> 1 ; n = m ; dstptr = buf ; srcptr = & a [ hstartrow * stride ] ; n = numrows - hstartrow ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartrow * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartrow * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartrow * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride ; } } if ( buf!= splitbuf ) { jas_free,0
506,"<S2SV_ModStart> ""REPLY_ADD_STA <S2SV_blank> PASSED\\n"" ) ; ret = iwl_sta_ucode_activate ( priv, sta_id ) <S2SV_ModEnd> ; break ;",1
507,"<S2SV_ModStart> ; log_file = fopen_safe <S2SV_ModEnd> ( file_name,",1
508,"<S2SV_ModStart> ""a\\0x\\0x\\0b\\0"" ) ; assert_true_rule_blob ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /\\\\babc/ <S2SV_blank> wide <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""a\\0b\\0c\\0"" ) ; assert_true_rule_blob ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /\\\\babc/ <S2SV_blank> wide <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""\\0a\\0b\\0c\\0"" ) ; assert_true_rule_blob ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /\\\\babc/ <S2SV_blank> wide <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""\\ta\\0b\\0c\\0"" ) ; assert_true_rule_blob ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /\\\\babc/ <S2SV_blank> wide <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""\\0a\\0b\\0c\\0"" ) ; assert_true_rule_blob ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /\\\\",0
509,"<S2SV_ModStart> & HB_LOCK ) spin_lock_irqsave ( & hashbin -> hb_spinlock, flags, hashbin_lock_depth ++ ) ; <S2SV_ModEnd> for ( i <S2SV_ModStart> ++ ) { if ( hashbin -> hb_type & HB_LOCK ) spin_unlock_irqrestore ( & hashbin -> hb_spinlock, flags ) ; <S2SV_ModEnd> for ( i <S2SV_ModStart> & HB_LOCK ) spin_lock_irqsave ( & hashbin -> hb_spinlock, flags ) ; if ( hashbin -> hb_type & HB_LOCK ) spin_unlock_irqrestore ( & hashbin -> hb_spinlock, flags ) ; <S2SV_ModEnd> } } hashbin <S2SV_ModStart> & HB_LOCK ) <S2SV_ModEnd> spin_unlock_irqrestore ( & <S2SV_ModStart> flags ) ; <S2SV_ModEnd> kfree ( hashbin",0
510,<S2SV_ModStart> EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NODEV ) &&! ( mnt_flags & MNT_NODEV ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOSUID ) &&! ( mnt_flags & MNT_NOSUID ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) &&! ( mnt_flags & MNT_NOEXEC ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) &&! ( mnt_flags & MNT_NOEXEC ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) &&! ( mnt -> mnt. mnt_flags & MNT_NOEXEC ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & M,0
511,"<S2SV_ModStart> copied, err <S2SV_ModEnd> ; int vnet_hdr_len <S2SV_ModStart> out_free ; } copied = skb -> len ; msg -> msg_namelen = copied ;",0
512,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
513,"<S2SV_ModStart> ( serial -> num_bulk_out <S2SV_ModEnd> < 2 ) <S2SV_ModStart> < 2 ) { dev_err ( & serial -> interface -> dev, ""missing <S2SV_blank> bulk <S2SV_blank> out <S2SV_blank> endpoints\\n"" ) ; return - ENODEV ; } <S2SV_ModEnd> port = serial",1
514,"<S2SV_ModStart> write_junk = 1, ds64_chunk, junkchunk <S2SV_ModStart> ; DS64Chunk ds64_chunk ; if ( ds64_chunk == NULL ) { error_line ( ""can\'t <S2SV_blank> create <S2SV_blank> valid <S2SV_blank> RIFF <S2SV_blank> data!"" ) ; return FALSE ; } ds64_chunk = CreateDS64Chunk ( ds64_chunk ) ; if ( ds64_chunk == NULL ) { error_line ( ""can\'t <S2SV_blank> create <S2SV_blank> valid <S2SV_blank> RIFF <S2SV_blank> data!"" ) ; return FALSE ; } ds64_chunk -> bytes_per_sample = bytes_per_sample ; ds64_chunk. bits_per_sample = bits_per_sample ; junkchunk = CreateJunkChunk ( ds64_chunk ) ; if ( junkchunk == NULL ) { error_line ( ""can\'t <S2SV_blank> create <S2SV_blank> JunkChunk!"" ) ; return FALSE ; }",0
515,"<S2SV_ModStart> ( msg ) ; err = - EFAULT ; if ( msg_sys -> msg_name ) <S2SV_ModStart>, & addr, msg_sys -> msg_name_len <S2SV_ModStart> ) ; } else { err = copy_iovec_from_user ( msg, msg_sys, iov, msg_sys -> msg_control, msg_sys -> msg_control_len, VERIFY_READ ) ; if ( err < 0 ) goto out_freeiov ; total_len = err ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( err < 0 ) goto out_freeiov ; }",0
516,"<S2SV_ModStart> inode ) ; struct buffer_head * dibh = mp -> mp_bh [ 0 ] ; int ret <S2SV_ModStart> unsigned end_of_metadata = ( height > 1 )? height - 1 : 0 <S2SV_ModEnd> ; enum alloc_state <S2SV_ModStart> ALLOC_DATA ) ; ret = gfs2_extent_length ( bh -> b_data, maxlen, & eob ) ; if ( ret < 0 ) { brelse ( dibh ) ; return ret ; } <S2SV_ModEnd> if ( state <S2SV_ModStart> ALLOC_GROW_HEIGHT ) { iblks = min ( maxlen, ptrs_per_blk - mp -> mp_list [ end_of_metadata ] ) ; state = ALLOC_GROW_DEPTH ; } } else { if ( height > 1 ) { struct buffer_head * bh ; ptr = metapointer ( end_of_metadata, mp ) ; bh = mp -> mp_bh [ end_of_metadata ] ; dblks = min ( maxlen, ptrs_per_blk - mp -> mp_list [ end_of_metadata ] ) ; ret = gfs2_extent_length ( bh -> b_data, maxlen, & e",0
517,"<S2SV_ModStart>, vpx_codec_iface_name ( stream -> codec -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> : ""YV12"" ) ; } if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> index ) ; else if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> index ) <S2SV_ModStart> ( g_h ) ; <S2SV_ModStart> ( rc_resize_allowed ) ; SHOW ( rc_resize_up_thresh ) ; SHOW ( rc_resize_down_thresh ) ; SHOW ( rc_end_usage ) ; SHOW ( rc_dropframe_thresh ) ; SHOW ( rc_undershoot_pct ) ; SHOW ( rc_overshoot_pct ) ; SHOW ( rc_buf_pct ) ; SHOW ( rc_2pass_vbr_bias_pct ) ; SHOW ( rc_2pass_vbr_minsection_pct ) ; SHOW ( rc_2pass_vbr_maxsection_pct ) ; SHOW ( rc_2pass_vbr_bias_pct ) ; SHOW ( rc_2pass",0
518,<S2SV_ModStart> return FALSE ; { BOOL rc ; <S2SV_ModStart> -> prof_nsc_rle_decompress_data ) rc = <S2SV_ModStart> -> prof_nsc_rle_decompress_data ) if (! rc ) return FALSE ; } { BOOL rc ; <S2SV_ModStart> -> prof_nsc_decode ) rc = <S2SV_ModStart> -> prof_nsc_decode ) if (! rc ) return FALSE ; },1
519,"<S2SV_ModStart> -> dict ) { if ( value == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> value <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } } <S2SV_ModEnd> text = xmlNewDocProp <S2SV_ModStart> -> dict ) { if ( value == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> value <S2SV_blank> of <S2SV_blank> a <S2SV_blank> literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } } else { if ( valueAVT == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> value <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; }",0
520,"<S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"",",0
521,"<S2SV_ModStart> req, size_t <S2SV_ModEnd> acl_len ) { <S2SV_ModStart> acl_len ) { <S2SV_ModEnd> int status ; <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart>, OP_GETATTR ) )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & savep ) )!= 0 ) goto out ; if ( unlikely ( attrlen > recvd ) { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen, recvd ) ; return - EINVAL ; } <S2SV_ModEnd> xdr_read_pages ( xdr <S2SV_ModStart>, attrlen ) ; <S2SV_ModEnd> } else status",0
522,<S2SV_ModStart> fv -> b ) ; if ( sf -> name [ 0 ] == '.' ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 2 ) return ( false ) ; else SFClearAutoSave ( sf ) ; } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 2 ) return ( false ) ; } else if ( AskChanged ( fv -> b. sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 2 ) return ( false ) ; } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 0 &&! _FVMenuSave ( fv ) ) return ( false ) ; } else if ( sf -> filename!= NULL ) RecentFilesRemember ( sf -> filename ) ; else if ( sf -> origname!= NULL ) RecentFilesRemember ( sf -> origname ) ;,0
523,"<S2SV_ModStart> % 4096 == 0 ) ; if ( msix_tab_size == 0 ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> msix <S2SV_blank> tab <S2SV_blank> size <S2SV_blank> %d\\n"", __func__, msix_tab_size ) ; return ; } <S2SV_ModEnd> bzero ( msixcap",0
524,<S2SV_ModStart> = timespec_to_ns ( & <S2SV_ModStart> = timespec_to_ns ( & <S2SV_ModStart> = timespec_to_ns ( &,1
525,"<S2SV_ModStart> ; if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog <S2SV_ModStart> -> prog, <S2SV_ModEnd> m, 0",0
526,"<S2SV_ModStart> : if ( <S2SV_ModEnd> Field ( ( <S2SV_ModStart>, 1 ) ) < 0 ) caml_set_oo_id ( ( value ) dest ) ; sp -- ; break ; case OFreshOID : if ( ( Int_val ( Field ( ( value ) dest, 1 ) ) < 0 ) caml_set_oo_id ( ( value ) dest ) ; sp -- ; break ; case OSetOID : if ( ( Int_val ( Field ( ( value ) dest, 1 ) ) < 0 ) caml_set_oo_id ( ( value ) dest ) ; sp -- ; break ; case OGetOID : if ( ( code & 0x80 ) == 0 ) { v = Val_hp ( intern_dest ) ; if ( intern_obj_table!= NULL ) intern_obj_table [ obj_counter ++ ] = v ; } else { v = Val_hp ( intern_dest ) ; if ( intern_obj_table!= NULL ) intern_obj_table [ obj_counter ++ ] = v ; } } else { * intern_dest = Make_header ( size, tag, intern_color ) ; sp -> op = OFreshOID ; sp -> dest = (",0
527,"<S2SV_ModStart> multipart_media ; struct range * range <S2SV_ModEnd> ; size_t content_length <S2SV_ModStart> ; size_t content_length = 0 <S2SV_ModStart> nranges, ret <S2SV_ModEnd> ; char content_range <S2SV_ModStart> path ) ; nranges = parse_ranges ( clt, <S2SV_ModEnd> range_str, st <S2SV_ModStart> st -> st_size, & range ) ; if ( nranges == NULL ) { code = 416 ; ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> */%lld"", st -> st_size ) ; errstr = ""failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> file <S2SV_blank> buffer"" ; goto abort ; } if ( nranges == 1 ) { ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> %lld-%lld/%lld"", range -> start, range -> end, st -> st_size ) ; kv_add ( & resp -> http_headers, ""Content-Range"", content_range ) ; if ( kv_add ( & resp -> http_headers, ""Content-Range"", content_range ) == NULL ) goto abort ; content_length = <S2SV_ModEnd> range -> end <S2SV_ModStart> + 1 ; <S2SV_ModEnd> } else {",0
528,"<S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, KSZ8851_ISR ) ; if ( ( isr & KSZ8851_ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_LCIS <S2SV_ModEnd> ) ; isr <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_TXIS <S2SV_ModEnd> ) ; n <S2SV_ModStart> ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
529,"<S2SV_ModStart> void encode_quantization ( VP9_COMMON * cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm -> base_qindex, QINDEX_BITS ) ; write_delta_q ( wb, cm -> y_dc_delta_q ) ; write_delta_q ( wb, cm -> uv_dc_delta_q ) ; write_delta_q ( wb, cm -> uv_ac_delta_q ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
530,"<S2SV_ModStart> = AV_PIX_FMT_PAL8 ; avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } else { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; }",0
531,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> msglen ) ),0
532,<S2SV_ModStart> tmp ) { goto parse_scheme_end <S2SV_ModEnd> ; } case <S2SV_ModStart> tmp ) { goto parse_scheme_end <S2SV_ModEnd> ; } state <S2SV_ModStart> end ) ; parse_scheme_end : state -> offset = 0 ;,0
533,"<S2SV_ModStart> struct fb_vblank vblank ; memset ( & vblank, 0, sizeof ( vblank ) )",1
534,<S2SV_ModStart> flags ) { spin_lock ( & ctx -> cancel_lock ) ; <S2SV_ModStart> ) ; } spin_unlock ( & ctx -> cancel_lock ) ;,0
535,"<S2SV_ModStart> ) ) ; if ( c16 -> Curves [ i ] == NULL ) { _cmsFree ( ContextID, c16 ) ; return NULL ; }",0
536,<S2SV_ModStart> { if (! dev_name ||,1
537,"<S2SV_ModStart> 1 ) ; } if ( length > 0 && length < ( u_int ) caplen - 1 ) { ND_PRINT ( ( ndo, ""[|osi]"" ) ) ; length = ( u_int ) caplen ; return ( 1 ) ; } if ( length > 0 && length < ( u_int ) caplen - 1 ) { ND_PRINT ( ( ndo, ""[|osi]"" ) ) ; length = ( u_int ) caplen - 1 ; } if ( length > 0 && length < ( u_int ) caplen - 1 ) { ND_PRINT ( ( ndo, ""[|osi]"" ) ) ; length = ( u_int ) caplen ; return ( 1 ) ; } if ( length > 0 && length < ( u_int ) caplen - 1 ) { ND_PRINT ( ( ndo, ""[|osi]"" ) ) ; return ( 1 ) ; } if ( length > 0 && length < ( u_int ) caplen - 1 ) { ND_PRINT ( ( ndo, ""[|osi]"" ) ) ; return ( 1 ) ; }",0
538,"<S2SV_ModStart> ) ) { if ( buf ) memcpy_fromio ( buf + space_rem - sizeof ( * msg ), msg, msg -> size ) ; else memcpy_fromio ( buf + space_rem - sizeof ( * msg ), bus -> m_pdwGetRing, buf_size ) ; <S2SV_ModStart> peekonly ) { if ( buf ) memcpy_fromio ( buf + space_rem - sizeof ( * msg ), bus -> m_pdwGetRing, buf_size ) ; } else { if ( buf ) memcpy_fromio ( buf + space_rem - sizeof ( * msg ), bus -> m_pdwGetRing, buf_size - sizeof ( * msg ) ) ; } } else { if ( buf ) memcpy_fromio ( buf + space_rem - sizeof ( * msg ), bus -> m_pdwGetRing + curr_grp, bus -> m_dwSizeGetRing - curr_grp, buf_size ) ; } else { if ( buf ) memcpy_fromio ( buf + space_rem - sizeof ( * msg ), bus -> m_pdwGetRing ) ; } else {",0
539,<S2SV_ModStart> TSRMLS_CC ) ; if ( new_len > INT_MAX ) { efree ( replaced ) ; RETURN_FALSE ; },1
540,"<S2SV_ModStart> ; if ( ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == NULL ) { goto sslerr ; } } else if ( ( localrsa = d2i_RSA_pubkey_bio ( rawcert, NULL ) ) == NULL ) { goto sslerr ; }",0
541,"<S2SV_ModStart> ( ) ; strcpy <S2SV_ModEnd> ( t1_buf_array, <S2SV_ModStart> t1_line_array ) ; t1_buf_ptr = eol ( t1_buf_array ) ; t1_line_ptr = eol ( t1_line_array ) ;",0
542,"<S2SV_ModStart> BLOCK_SIZE bsize, <S2SV_ModEnd> BLOCK_SIZE subsize ) <S2SV_ModStart> -> e_mbd ; const <S2SV_ModStart>, hbs = b_height_log2_lookup [ bsize ] <S2SV_ModEnd> ; PARTITION_TYPE partition <S2SV_ModStart> case PARTITION_NONE : set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; break ; case PARTITION_VERT : set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb <S2SV_ModEnd> ( cm, <S2SV_ModStart> mi_cols ) { set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb <S2SV_ModEnd> ( cm,",0
543,"<S2SV_ModStart> name ) ; if (! strcmp ( key, ""url"" ) && value && looks_like_command_line_option ( value ) ) data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_URL, ""disallowed <S2SV_blank> submodule <S2SV_blank> url: <S2SV_blank> %s"", value ) ;",1
544,"<S2SV_ModStart> ; int pixel_ptr <S2SV_ModEnd> ; int block_ptr <S2SV_ModStart> ; while ( stream_ptr < chunk_size ) { if ( ++ stream_ptr > s -> avctx -> width * s -> avctx -> height * s -> avctx -> width ) { av_log ( s -> avctx, AV_LOG_ERROR, ""Block <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", s -> avctx -> width ) ; break ; } if ( ++ stream_ptr > s -> avctx -> height * s -> avctx -> width ) { av_log ( s -> avctx, AV_LOG_ERROR, ""Block <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", s -> avctx -> height ) ; break ; }",0
545,<S2SV_ModStart> cnt ) { size_t <S2SV_ModEnd> n ; assert,0
546,<S2SV_ModStart> ; __be16 type ; if ( NAPI_GRO_CB ( skb ) -> encap_mark ) goto out ; NAPI_GRO_CB ( skb ) -> encap_mark = 1,1
547,"<S2SV_ModStart> ( matrix = jas_matrix_create0 ( numrows, numcols ) ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } if (! jas_safe_size_mul ( numrows, numcols, & matrix -> numcols_, & matrix -> xstart_, & matrix -> ystart_ ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } if (! jas_safe_size_mul ( matrix, numcols, & matrix -> xend_ ) ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; }",0
548,"<S2SV_ModStart> { bool result = string_bytes_concat_buffer ( ( TPM2B_MAX_BUFFER * ) & key, & ( session -> sessionKey. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TPM2B_MAX_BUFFER * ) & key, & ( session -> nonceNewer. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TPM2B_MAX_BUFFER * ) & key, & ( session -> sessionKey. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TPM2B_MAX_BUFFER * ) & key, & ( session -> nonceNewer. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TPM2B_MAX_BUFFER * ) & key, & ( session -> salt. b",0
549,"<S2SV_ModStart> key_ref, KEY_NEED_READ ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( key -> type -> read ) { up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } else ret = - EOPNOTSUPP ; if ( key -> type -> read ) { up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( key -> type -> read ) { up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; } else",0
550,<S2SV_ModStart> } if ( <S2SV_ModEnd> ps_dec -> u4_first_slice_in_pic <S2SV_ModStart> ps_dec -> u1_first_slice_in_pic ) { ps_dec -> u1_first_slice_in_pic = 0 ; ps_dec -> u1_first_slice_in_pic = 1 ; } else if ( ( ps_dec -> u1_first_slice_in_pic == 1 ) && ( ps_dec -> u2_first_slice_in_pic!= 0 ) && ( ps_dec -> u2_first_slice_in_pic!= 0 ) ) { ps_dec -> u1_first_slice_in_pic = 0 ; ps_dec -> u1_first_slice_in_pic = 1 ; ps_dec -> u1_first_slice_in_pic = 0 ; } else if ( ( ps_dec -> u1_first_slice_in_pic == 1 ) && ( ps_dec -> u2_first_slice_in_pic!= 0 ) && ( ps_dec -> u2_first_slice_in_pic!= 0 ) { ps_dec -> u1_first_slice,0
551,"<S2SV_ModStart> var_off ) ; if ( src_known &&! dst_reg -> smin_value ) { verbose ( env, ""R%d <S2SV_blank> tried <S2SV_blank> to <S2SV_blank> add <S2SV_blank> from <S2SV_blank> different <S2SV_blank> pointers <S2SV_blank> or <S2SV_blank> scalars\\n"", dst_reg -> smin_value ) ; return - EINVAL ; } <S2SV_ModEnd> switch ( opcode <S2SV_ModStart> case BPF_SUB : verbose ( env, ""R%d <S2SV_blank> tried <S2SV_blank> to <S2SV_blank> sub <S2SV_blank> from <S2SV_blank> different <S2SV_blank> pointers <S2SV_blank> or <S2SV_blank> scalars\\n"", dst_reg -> smin_value ) ; verbose ( env, ""R%d <S2SV_blank> tried <S2SV_blank> to <S2SV_blank> sub <S2SV_blank> from <S2SV_blank> different <S2SV_blank> pointers <S2SV_blank> or <S2SV_blank> scalars\\n"", dst_reg -> smax_value ) ; return - EINVAL ; }",0
552,"<S2SV_ModStart> == NULL ) { full_path = build_path_from_dentry ( direntry, pTcon, file_inode ( cfile -> f_path. dentry ) ) ; rc = - EINVAL ; goto lookup_out ; } <S2SV_ModEnd> posix_open = true <S2SV_ModStart> == NULL ) { full_path = build_path_from_dentry ( direntry, pTcon, file_inode ( cfile -> f_path. dentry ) ; <S2SV_ModEnd> rc = - <S2SV_ModStart> == NULL ) { full_path = build_path_from_dentry ( direntry, pTcon, file_inode ( cfile -> f_path. dentry ) ; if ( full_path == NULL ) { full_path = build_path_from_dentry ( direntry, pTcon, file_inode ( cfile -> f_path. dentry ) ) ; rc = - ENOMEM ; goto lookup_out ; } } else { full_path = build_path_from_dentry ( direntry, pTcon, file_inode ( cfile -> f_path. dentry ) )",0
553,"<S2SV_ModStart> EINVAL ; } minsz = offsetof ( struct vfio_irq_info, num_irqs ) ; if ( copy_from_user ( & caps, ( void __user * ) arg, minsz ) ) return - EINVAL ; <S2SV_ModStart> VFIO_IRQ_INFO_FLAG_WRITE ; break ; case VFIO_PCI_BAR0_REGION_INDEX... VFIO_PCI_BAR5_REGION_INDEX : minsz = offsetof ( struct vfio_irq_info_cap, offset ) ; if ( copy_from_user ( & caps, ( void __user * ) arg, minsz ) ) return - EINVAL ; break ; case VFIO_PCI_BAR0_REGION_INDEX... VFIO_PCI_BAR5_REGION_INDEX : minsz = offsetof ( struct vfio_irq_info, offset ) ; if ( copy_from_user ( & caps, ( void __user * ) arg, minsz ) ) return - EINVAL ;",0
554,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ext4_has_inline_data ( inode,1
555,<S2SV_ModStart> -> filesize = UINT64_MAX <S2SV_ModEnd> ; s ->,1
556,"<S2SV_ModStart> ; if ( rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ) ) ) { if ( rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ) ) == NULL ) { NET_INC_STATS_BH ( sock_net ( sk ), LINUX_MIB_SYNCOOKIESFAILED ) ; goto out ; } } <S2SV_ModStart> = opt ; if ( rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ) ) ) { if ( rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ) ) == NULL ) { NET_INC_STATS_BH ( sock_net ( sk ), LINUX_MIB_SYNCOOKIESFAILED ) ; goto out ; } }",0
557,"<S2SV_ModStart> char * in, size_t olen <S2SV_ModStart> += 4 ; if ( len == olen ) return len ; <S2SV_ModStart> '=' ) { if ( len == olen ) return len ; <S2SV_ModStart> '=' ) { if ( len == olen ) return len ;",1
558,<S2SV_ModStart> gc ) ; <S2SV_ModEnd> return 0 ;,1
559,"<S2SV_ModStart>, i ; size_t <S2SV_ModEnd> cur_len ; ssize_t <S2SV_ModStart> ++ ) { size_t min_copied = min_t ( size_t, <S2SV_ModStart> save_len - cur_len, nr_pages - i ) ; if ( copied < min_copied ) { rc = - EINVAL ; break ; } <S2SV_ModStart> copied ) ; if (! cur_len ) { cur_len = min_t ( size_t, <S2SV_ModStart> save_len - cur_len, nr_pages - i ) ; kfree ( wdata ) ; break ; } cur_len -= min_t ( size_t, <S2SV_ModStart> save_len - cur_len, nr_pages - i ) <S2SV_ModEnd> ; } list_for_each_entry_safe ( tmp, & wdata_list, & wdata_list, smp_processor_id ( ) ) { if (! cur_len ) break ; cur_len = min_t ( size_t, <S2SV_ModStart> save_len - cur_len, nr_pages - i ) ; kfree ( wdata ) ; break ; }",0
560,<S2SV_ModStart> & CP_RDESC_SWAPPED_MIN_MAX ) ) return rdesc ; if ( * rsize < 4,1
561,"<S2SV_ModStart> ) { int number_of_frames, number_of_keyframes <S2SV_ModEnd>, encode_frame_count ; <S2SV_ModStart> ; SvcInternal * <S2SV_ModEnd> si = get_svc_internal <S2SV_ModStart> ( svc_ctx ) ; <S2SV_ModEnd> svc_log_reset ( svc_ctx <S2SV_ModStart> ( svc_ctx ) ; number_of_frames = si -> number_of_frames ; number_of_keyframes = si -> number_of_keyframes <S2SV_ModEnd> ; svc_log ( <S2SV_ModStart> ""\\n"" ) ; for ( i = 0 ; i < si -> layers ; ++ i ) { number_of_frames = encode_frame_count ; if ( svc_ctx -> encoding_mode == ALT_INTER_LAYER_PREDICTION_IP && ( i == 1 || i == 3 ) ) { number_of_frames -= number_of_keyframes ; } svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes=[%u]\\n"", i, ( double ) si -> psnr_sum",0
562,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decode ( BYTE <S2SV_ModStart> BYTE * out, UINT32 outSize <S2SV_ModStart> 5 ) { if ( outSize < 1 ) return FALSE ; outSize -- ; <S2SV_ModStart> 4 ; } if ( outSize < len ) return FALSE ; outSize -- ; <S2SV_ModStart> } else { if ( outSize < len ) return FALSE ; outSize -- ; * out ++ = value ; left -- ; } } return true ;",0
563,"<S2SV_ModStart> ; if ( is_altscreen && screen -> buffer ) { if ( <S2SV_ModStart> -> buffer ) { if ( screen -> sb_buffer ) { vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = NULL ; } else { vterm_allocator_free ( screen -> vt, screen -> buffer ) ; screen -> sb_buffer = NULL ; } } else { vterm_allocator_free ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; } } } else { VTermScreenCell * sb_buffer = screen -> buffer ; if ( screen -> sb_buffer ) { vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols",0
564,"<S2SV_ModStart> n ) { int literal_start = * str ; int literal_end = 0 ; int in_named_escape = 0 ; int result = 0 ; assert ( * str < end ) ; for ( ; * str < end ; ( * str ) ++ ) { char ch <S2SV_ModEnd> = * * <S2SV_ModStart> str < end ; <S2SV_ModEnd> ( * str <S2SV_ModStart> ++ ) { <S2SV_ModEnd> if (! <S2SV_ModStart> ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( in_named_escape && ch == '{' && ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( ch == '{' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '}' ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'",0
565,"<S2SV_ModStart> * m, size_t <S2SV_ModEnd> bufsize ) { <S2SV_ModStart> * buf ; <S2SV_ModEnd> JAS_DBGLOG ( 100 <S2SV_ModStart> 100, ( ""mem_resize(%p, <S2SV_blank> %zu)\\n"" <S2SV_ModEnd>, m, <S2SV_ModStart> ) ) ; if (! bufsize ) { JAS_DBGLOG ( 100, ( ""mem_resize <S2SV_blank> failed\\n"" ) ) ; return - 1 ; } <S2SV_ModEnd> if (!",0
566,"<S2SV_ModStart> ( pd, g_settings_dump_location <S2SV_ModEnd> ) ; char",0
567,"<S2SV_ModStart> symInterpretMatchMaskNames, pred_txt, & mods_rtrn ) ) { log_err ( info -> ctx, ""Illegal <S2SV_blank> modifier <S2SV_blank> predicate <S2SV_blank> \\""%s\\""; <S2SV_blank> Ignored\\n"", pred_txt ) ; return false ; } expr = expr -> action. args ; } else if ( expr -> expr. op == EXPR_OP_DEF ) { const char * pred_txt = xkb_atom_text ( info -> ctx, expr -> ident. name ) ; if ( istreq ( pred_txt, ""any"" ) ) { * pred_rtrn = MATCH_ANY ; * mods_rtrn = MOD_REAL_MASK_ALL ; return true ; }",0
568,<S2SV_ModStart> pcrypt_free ( struct aead_instance <S2SV_ModEnd> * inst ) <S2SV_ModStart> * ctx = aead_instance_ctx <S2SV_ModEnd> ( inst ),1
569,<S2SV_ModStart> ( red > ( ( ( ptr -> width - w1 ) / 8 ) || green > ( ( ptr -> height - h1 ) / 8 ) ) { if ( red > ( ( ptr -> width - w1 ) / 8 ) ) { if ( green > ( ( ptr -> height - h1 ) / 8 ) ) { if ( blue > ( ( ptr -> width - h1 ) / 8 ) ) { if ( red > ( ( ptr -> width - w1 ) / 8 ) ) { if ( blue > ( ( ptr -> height - h1 ) / 8 ) ) { if ( red > ( ( ptr -> width - w1 ) / 8 ) ) { if ( green > ( ( ptr -> width - w1 ) / 8 ) ) { if ( blue > ( ( ptr -> height - h1 ) / 8 ) ) { if ( red > ( ( ptr -> width - w1 ) / 8 ) ) { if ( green > ( ( ptr -> width - w1 ) / 8 ) ) { if ( blue > ( ( ptr -> height - h1 ) / 8 ) ) { if ( red > ( ( w1 - w1 ) / 8 ) ) { if ( green > (,0
570,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
571,<S2SV_ModStart> -> iif. rt6_hop_limit <S2SV_ModEnd> ) { if <S2SV_ModStart> -> iif. rt6_hop_limit < <S2SV_ModEnd> ra_msg -> iif <S2SV_ModStart> -> iif. rt6_hop_limit ) { if ( <S2SV_ModStart> -> iif. rt6_hop_limit < <S2SV_ModEnd> ra_msg -> iif <S2SV_ModStart> -> iif. rt6_hop_limit ) { if ( <S2SV_ModStart> -> iif. rt6_hop_limit < <S2SV_ModEnd> ra_msg -> iif <S2SV_ModStart> -> iif. rt6_hop_limit ) { if ( <S2SV_ModStart> -> iif. rt6_hop_limit < <S2SV_ModEnd> ra_msg -> iif <S2SV_ModStart> -> iif. rt6_hop_limit ) { if ( <S2SV_ModStart> -> iif. rt6_hop_limit < <S2SV_ModEnd> ra_msg -> iif <S2SV_ModStart> -> iif. rt6_hop_limit ) { if ( <S2SV_ModStart> -> iif. rt6_hop_limit < <S2SV_ModEnd> ra_msg -> iif <S2SV_ModStart> -> iif. rt6_hop_limit ) { if ( <S2SV_ModStart> -> iif. rt6_hop_limit < <S2SV_ModEnd> ra_msg -> iif <S2SV_ModStart> -> iif. rt6_hop_limit ) { if ( <S2SV_ModStart>,0
572,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
573,<S2SV_ModStart> * up ; int len ; <S2SV_ModStart> rp ) ; len = xfrm_replay_state_esn_len ( up ) ; if ( len < <S2SV_ModEnd> xfrm_replay_state_esn_len ( replay_esn <S2SV_ModStart> replay_esn )!= len <S2SV_ModEnd> ) return -,0
574,"<S2SV_ModStart> int ret = proc_dointvec_minmax <S2SV_ModEnd> ( table,",1
575,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + this_mv <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost",0
576,<S2SV_ModStart> opj_calloc ( ( size_t ) ( <S2SV_ModStart> -> numlayers + ( size_t ) ( <S2SV_ModStart> -> numlayers + ( size_t ) ( <S2SV_ModStart> -> numlayers + ( size_t ) ( <S2SV_ModStart> -> numlayers + ( size_t ) ( <S2SV_ModStart> -> numlayers + ( size_t ) ( <S2SV_ModStart> -> numlayers + ( size_t ) ( <S2SV_ModStart> -> numlayers + ( size_t ) ( <S2SV_ModStart> -> numlayers + ( size_t ) ( <S2SV_ModStart> -> numlayers + ( size_t ) ( <S2SV_ModStart> -> numlayers * ( size_t ) ( <S2SV_ModStart> -> numlayers + ( size_t ) ( <S2SV_ModStart> -> numlayers + ( size_t ) ( <S2SV_ModStart> -> numlayers + ( size_t ) ( <S2SV_ModStart> -> numlayers + ( size_t ) ( <S2SV_ModStart> -> numlayers + ( size_t ) ( <S2SV_ModStart> -> numlayers + ( size_t ) ( <S2SV_ModStart> -> numlayers + ( size_t ) ( <S2SV_ModStart> -> numlayers + ( size_t ) ( <S2SV_ModStart> -> numlayers + ( size_t ) ( <S2SV_ModStart> -> numlayers * ( size_t ) ( <S2SV_ModStart> -> numlayers + ( size_t ) ( <S2SV_ModStart> -> numlayers + ( size_t ),0
577,"<S2SV_ModStart> name ), ""crypto-%s"" <S2SV_ModEnd>, name )",1
578,"<S2SV_ModStart> ps ) { u32 <S2SV_ModEnd> prev_legacy, cur_legacy <S2SV_ModStart> -> flags ; if ( prev_legacy &&! cur_legacy ) <S2SV_ModStart> start ) ; else kvm_pit_load_count ( kvm, 0, ps -> channels [ 0 ]. count, start ) ;",0
579,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; <S2SV_ModEnd> for ( mi_col <S2SV_ModStart> mi_col = tile -> mi_col_start <S2SV_ModEnd> ; mi_col < <S2SV_ModStart> mi_col < tile -> mi_col_end <S2SV_ModEnd> ; mi_col += <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> * prev_mi_8x8 = cm -> prev_mi_grid_visible + idx_str ; BLOCK_SIZE bsize ; cpi -> mb. source_variance = UINT_MAX <S2SV_ModEnd> ; switch ( <S2SV_ModStart> case VAR_BASED_PARTITION : if ( cpi -> sf. partition_search_type == VAR_BASED_PARTITION ) { set_offsets ( cpi, tile, mi_row, mi_col, BLOCK_64X64 ) ; set_source_var_based_partition ( cpi, tile, mi_8x8, mi_col, BLOCK_64X64, 1, & dummy_rate, & dummy_dist ) ; break ; case SOURCE_VAR_BASED_PARTITION : if ( cpi",0
580,"<S2SV_ModStart> 1 ) ; if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf = opipe",1
581,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
582,<S2SV_ModStart> } else { # ifdef UPNP_ENABLE_POST_WRITE <S2SV_ModStart> return HTTP_UNAUTHORIZED ; # else return HTTP_NOT_FOUND ; # endif,1
583,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> fd = xfmkstemp <S2SV_ModEnd> ( & tmpname <S2SV_ModStart> dir ) ) == NULL ) { ulckpwdf ( ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } copyfile ( lockfd, fileno ( fd ) ) ; tmp_file = tmpname ;",0
584,<S2SV_ModStart> blkg ) ) <S2SV_ModEnd> return PTR_ERR ( <S2SV_ModStart> blkg ) ; <S2SV_ModEnd> q -> root_blkg,1
585,"<S2SV_ModStart> ] ) ; if ( bpp == 8 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> color <S2SV_blank> size\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ] ) ; if ( bpp == 4 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> color <S2SV_blank> size\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ] ) ; if ( bpp == 8 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> color <S2SV_blank> size\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
586,"<S2SV_ModStart> ; krb5_data rspac ; const char * tgt_realm = krb5_principal_get_realm ( context, krbtgt -> entry. principal, 1 ) ; const char * tgt_realm = krb5_principal_get_realm ( context, krbtgt -> entry. principal, 1 ) ; const char * tgt_realm_str = krb5_principal_get_realm_str ( context, krbtgt -> entry. principal, 1 ) ; const char * tgt_realm_str = krb5_principal_get_realm_str ( context, krbtgt -> entry. principal, tgt_realm ) ; const char * tgt_realm_str = krb5_principal_get_realm_str ( context, krbtgt -> entry. principal, tgt_realm_str ) ; const char * tgt_realm_str = krb5_principal_get_realm_str ( context, krbtgt -> entry. principal, tgt_realm_str ) ; const char * tgt_realm_str = krb5_principal_get_realm_str ( context, krbtgt -> entry. principal, tgt_realm_str ) ;",0
587,<S2SV_ModStart> mnt ) ; nd -> last_type = LAST_BIND ;,1
588,"<S2SV_ModStart> struct usbdevfs_connectinfo ci ; memset ( & ci, 0, sizeof ( ci ) ) ; ci <S2SV_ModEnd>. devnum = <S2SV_ModStart> dev -> devnum ; ci <S2SV_ModEnd>. slow = <S2SV_ModStart> speed == USB_SPEED_LOW <S2SV_ModEnd> ; if (",1
589,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> int optlen ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> & 3 ) opt -> __data <S2SV_ModEnd> [ optlen ++ <S2SV_ModStart> ++ ] = IPOPT_END <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( net, & opt -> opt, NULL ) ) { kfree ( opt ) ; return 0 ; } opt -> optlen = optlen ; if ( ip_options_compile ( net, & opt -> opt, NULL ) ) { kfree ( opt ) ; return - EINVAL ; } kfree ( * optp ) ; * optp = opt ; return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
590,<S2SV_ModStart> rmtblkcnt2 ; } args -> rmtvaluelen2 = args -> rmtvaluelen ;,0
591,"<S2SV_ModStart> ; if (! NT_SUCCESS ( IoEnumerateDeviceObjectList ( TCDriverObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) * ( int * ) Irp -> AssociatedIrp. SystemBuffer = TRUE ; Irp -> IoStatus. Information = sizeof ( int ) ; Irp -> IoStatus. Status = STATUS_SUCCESS ; } break ; case TC_IOCTL_GET_DEVICE_REFCOUNT : if ( ValidateIOBufferSize ( Irp, sizeof ( LONG ), ValidateOutput ) ) { LONG deviceObjectCount = 0 ; if ( IoEnumerateDeviceObjectList ( TCDriverObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) * ( int * ) Irp -> AssociatedIrp. SystemBuffer = TRUE ; Irp -> IoStatus. Information = sizeof ( int ) ; Irp -> IoStatus. Status = STATUS_BUFFER_TOO_SMALL ; Irp -> IoStatus. Status = STATUS_BUFFER_TOO_SMALL ; if ( IoEnumerateDeviceObjectList ( TCDriverObject, NULL, 0, & deviceObjectCount ) ==",0
592,"<S2SV_ModStart> ; if ( connection == NULL || strcmp ( connection, ""close"" ) == 0 ) { log_error ( ""Connection <S2SV_blank> header <S2SV_blank> is <S2SV_blank> required"" ) ; goto error ; } else { bool found_upgrade = false ; int count ; sds * tokens = sdssplitlen ( connection, strlen ( connection ), "","", 1, & count ) ; if ( tokens == NULL ) { log_error ( ""Connection <S2SV_blank> header <S2SV_blank> is <S2SV_blank> required"" ) ; goto error ; } count = sdssplitlen ( connection, strlen ( connection ), "","", 1, & count ) ; if ( count == 0 ) { log_error ( ""Connection <S2SV_blank> header <S2SV_blank> is <S2SV_blank> required"" ) ; goto error ; } else { bool found_websocket = false ; int count ; sds * tokens = sdssplitlen ( connection, strlen ( connection ), "","", 1, & count ) ; if ( tokens == NULL ) { log_error ( ""Connection <S2SV_blank> header <S2SV_blank> is <S2SV_blank> required"" ) ; goto error ; } count = sdssplitlen ( connection, strlen ( connection ), "","", 1, & count ) ; if ( count == 0 ) { log_error ( ""Connection <S2SV_blank> header <S2SV_blank> is <S2SV_blank> required",0
593,"<S2SV_ModStart> * findalldevs_if ; uint32 nif = 0 ; uint32 len <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ; } len <S2SV_ModEnd> += strlen ( <S2SV_ModStart> -> description ) { len <S2SV_ModEnd> += strlen ( <S2SV_ModStart> -> name ) ; len <S2SV_ModEnd> += sizeof ( <S2SV_ModStart> ( struct rpcap_findalldevs_if ) ; for ( address = d -> addresses ; address!= NULL ; address = address -> next ) { switch ( address -> addr -> sa_family ) { case AF_INET : # endif break ; default : break ; } } if ( sock_bufferize ( NULL, sizeof ( struct rpcap_header ), NULL, & sendbufidx, RPCAP_NETBUF_SIZE, SOCK_DGRAM ) == - 1 ) { rpcap_senderror ( pars -> sockctrl, ver, PCAP_ERR_NOREMOTEIF, ""No <S2SV_blank> interfaces <S2SV_blank> found! <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed"" "" <S2SV_blank> and <S2SV_blank> you <S2SV_blank> have <S2SV_blank> the <S2SV_blank> right <S2SV_blank> to <S2SV_blank> access <S2SV_blank> to <S2SV_blank> the <S2SV_blank> remote <S2SV_blank> device."", errbuf ) == - 1 ) { rpcapd_log ( LOGPRIO_ERROR, ""Send <S2SV_blank> to",0
594,"<S2SV_ModStart> ; struct dump_dir * dd ; int status ; dd = dd_create ( path, client_uid, DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } dd_create_basic_files ( dd, client_uid, NULL ) ; dd_save_text ( dd, FILENAME_ABRT_VERSION, VERSION ) ; if (! gpkey ) { g_hash_table_iter_init ( & iter, problem_info ) ; for ( gpkey = g_hash_table_iter_next ( & iter, & gpkey, & gpvalue ) ) { dd_save_text ( dd, FILENAME_CMDLINE, cmdline ) ; free ( cmdline ) ; } } g_hash_table_iter_init ( & iter, problem_info ) ; while ( g_hash_table_iter_next ( & iter, & gpkey, & gpvalue ) ) { dd_save_text ( dd, FILENAME_UID, ( gchar * ) gpkey, ( gchar * ) gpvalue ) ;",0
595,"<S2SV_ModStart> ) ; for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 2 ) ; bit ++ ) { index = ( ( * p ) & 0x3 ) ; SetPixelIndex ( indexes + x + bit, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 4 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 4 ) ; bit ++ ) { index = ( ( * p ) & 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } if ( ( image -> columns % 4 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 4 ) ; bit ++ ) { index = ( ( * p ) & 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x +",0
596,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
597,"<S2SV_ModStart>, int tstype, bool opt_id <S2SV_ModStart> ; int err ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { <S2SV_ModStart> ee_info = tstype ; serr -> opt_id = opt_id ; } else { serr = SKB_EXT_ERR ( skb ) ; } <S2SV_ModEnd> if ( sk <S2SV_ModStart> = SO_EE_ORIGIN_TIMESTAMPING ; serr -> opt_id = opt_id ; if ( opt_id ) serr -> opt_id = sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( opt_id ) serr -> ee. ee_data -= sk -> sk_tskey ; } err = sock_queue_err_skb ( sk, skb ) ; if ( err ) kfree_skb ( skb ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
598,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
599,<S2SV_ModStart> = len ; bp += 1 ; len -= 1 ; <S2SV_ModStart> = len ; bp += 1 ;,0
600,"<S2SV_ModStart> ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""<?xml"" ), CONST_STR_LEN ( ""<?xml"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""<?xml"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""<?xml"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""<?xml"" ), CONST_STR_LEN ( ""<?xml"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""<?xml"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""<?xml"" ), CONST_STR_LEN ( ""<?xml"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""<?xml"" ) ) ;",0
601,<S2SV_ModStart> ; if ( task -> ptrace &&! dumpable <S2SV_ModEnd> &&! ptrace_has_cap,0
602,<S2SV_ModStart> <= w - ( int ),1
603,<S2SV_ModStart> page ) ; <S2SV_ModEnd> memset ( addr,1
604,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
605,<S2SV_ModStart> ps_sps ) ; if ( 0 == ps_parse -> i4_cur_buf_size ) { ps_parse -> i4_cur_buf_size = 0 ; } <S2SV_ModStart> ps_sps ) ; if ( 0 == ps_parse -> i4_cur_buf_size ) { ps_parse -> i4_cur_buf_size = 0 ; } <S2SV_ModStart> ps_sps ) ; if ( 0 == ps_parse -> i4_cur_buf_size ) { ps_parse -> i1_cur_buf_size = 0 ; },0
606,"<S2SV_ModStart> * priv ; if (! port -> interrupt_out_urb ||! port -> interrupt_in_urb ) { dev_err ( & port -> dev, ""required <S2SV_blank> endpoint <S2SV_blank> is <S2SV_blank> missing\\n"" ) ; return - ENODEV ; }",1
607,<S2SV_ModStart> -> sdma_descq_cnt ; if (! dd -> per_sdma ) { ret = - ENOMEM ; goto err_free_per_sdma ; } <S2SV_ModStart> -> sdma_descq_cnt ) ; if (! dd -> per_sdma ) { ret = - ENOMEM ; goto err_free_per_sdma ; } <S2SV_ModStart> -> sdma_descq_cnt ) ; if (! dd -> per_sdma ) { ret = - ENOMEM ; goto err_free_per_sdma ; },0
608,<S2SV_ModStart> -> device_data ; cancel_autoload_drivers ( ) ;,1
609,"<S2SV_ModStart>, int rep_quick, my_bool verbose <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name <S2SV_ModEnd> ) ; printf <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name <S2SV_ModEnd> ) ; printf <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name <S2SV_ModEnd> ) ; DBUG_PRINT <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name <S2SV_ModEnd> ) ; if <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name <S2SV_ModEnd> ) ; printf <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, name ) <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name",0
610,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> p == q ) || ( <S2SV_ModEnd> size < 16 <S2SV_ModStart> size < 16 ) || ( <S2SV_ModEnd> size > 256 <S2SV_ModStart> size > 256 ),1
611,"<S2SV_ModStart> uint dblocks = xfs_attr3_rmt_blocks <S2SV_ModEnd> ( mp,",1
612,"<S2SV_ModStart> ) ; } if ( pcount > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, ( int ) ( MaxAllocSize / sizeof ( Pairs ) ) ) ) ;",0
613,"<S2SV_ModStart> val ) ; if (! val ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> value"", r -> name ) ;",0
614,<S2SV_ModStart> ; if (! isxdigit ( <S2SV_ModStart> [ 1 ] ) <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if (! isxdigit ( <S2SV_ModStart> [ 2 ] ) <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if (! isxdigit ( <S2SV_ModStart> [ 3 ] ) <S2SV_ModEnd> ) return 0,0
615,"<S2SV_ModStart> case 'Q' : if ( 3 == b - c -> buf && 0 == strncmp ( ""GET"", c -> buf, 3 ) ) { method = AGOO_GET ; } else if ( 4 == b - c -> buf && 0 == strncmp ( ""POST"", c -> buf, 4 ) ) { method = AGOO_POST ; } else if ( 0 == strncmp ( ""PUT"", c -> buf, 4 ) ) { method = AGOO_PUT ; } else if ( 4 == b - c -> buf && 0 == strncmp ( ""POST"", c -> buf, 4 ) ) { method = AGOO_POST ; } else if ( 5 == b - c -> buf && 0 == strncmp ( ""GET"", c -> buf, 5 ) ) { method = AGOO_GET ; } else if ( 0 == strncmp ( ""PUT"", c -> buf, 5 ) ) { method = AGOO_PUT ; } else if ( 4 == b - c -> buf && 0 == strncmp ( ""POST"", c -> buf, 4 ) ) { method = AGOO_POST ;",0
616,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; <S2SV_ModEnd> int i, <S2SV_ModStart>, j ; tran_low_t temp_in [ 16 ], temp_out [ 16 ] ; const transform_2d ht = FHT_16 [ tx_type ] ; for ( i = 0 ; i < 16 ; ++ i ) { for ( j = 0 ; j < 16 ; ++ j ) temp_in [ j ] = input [ j * stride + i ] * 4 ; ht. cols ( temp_in, temp_out ) ; for ( j = 0 ; j < 16 ; ++ j ) outptr [ j * 16 + i ] = ( temp_out [ j ] + 1 ) >> 2 ; } for ( i = 0 ; i < 16 ; ++ i ) { for ( j = 0 ; j < 16 ; ++ j ) out [ j * 16 + i ] = ( temp_out [ j ] + 1 ) >> 2 ; } for ( i = 0 ; i < 16 ; ++ i )",0
617,"<S2SV_ModStart>, error ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s.%s"", tmpfile_name, "".desktop"" ) ; g_auto ( GStrv ) groups = NULL ; g_auto ( GStrv ) new_data = NULL ; gsize new_data_len ; g_key_file_load_from_data ( keyfile, data, data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; for ( i = 0 ; i < new_data_len ; i ++ ) { g_assert ( new_data [ i ] == '\\0' ) ; new_data [ i ] = '\\0' ; } g_assert ( new_data [ i ]!= '\\0' ) ; g_assert ( new_data [ i ]!= '\\0' ) ; g_assert ( new_data [ i ]!= '\\0' ) ; g_assert ( new_",0
618,"<S2SV_ModStart> fh_dentry ) ; error = fh_want_write ( fh ) ; if ( error ) <S2SV_ModEnd> goto out_errno ; <S2SV_ModStart> goto out_errno ; fh_lock ( fh ) ; error = set_posix_acl ( inode, ACL_TYPE_ACCESS, argp -> acl_access <S2SV_ModEnd> ) ; if <S2SV_ModStart> error ) goto out_drop_lock ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT <S2SV_ModEnd>, argp -> <S2SV_ModStart> argp -> acl_default ) ; out_drop_lock : fh_unlock ( fh ) ; <S2SV_ModEnd> fh_drop_write ( fh",1
619,<S2SV_ModStart> * ue ; if <S2SV_ModEnd> ( tree_root == <S2SV_ModStart> == NULL ) return 0,1
620,"<S2SV_ModStart> char * temp_filename = osi_calloc ( <S2SV_ModEnd> strlen ( filename <S2SV_ModStart> ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } for ( const list_node_t * node = list_begin ( config -> sections ) ; node!= list_end ( config -> sections ) ) { fprintf ( fp, ""[%s]\\n"", section -> name ) ; } for ( const list_node_t * enode = list_begin ( section -> entries ) ; enode!= list_end ( section -> entries ) ) { const entry_t * entry = ( const entry_t * ) list_node ( enode ) ; fprintf ( fp",0
621,"<S2SV_ModStart> elen ) ; elen += sizeof ( struct pathComponent ) ; <S2SV_ModStart> > 0 ) { elen += pc -> lengthComponentIdent ; continue ; } <S2SV_ModEnd> case 2 : <S2SV_ModStart> case 5 : elen += pc -> lengthComponentIdent ; break ; case 6 : if ( elen < pc -> lengthComponentIdent ) return - ENAMETOOLONG ; * p ++ = '/' ; tolen -= pc -> lengthComponentIdent ; break ; case 7 : if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""../"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 8 : if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""./"", 2 ) ; p += 2 ; tolen -= 2 ; break ; case 9 : if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""./"", 2 ) ; p += 2 ; tolen -= 2 ; break ; case 10 : comp_len = udf_get_filename ( sb, pc -> componentIdent, pc -> lengthComponentIdent, p, tolen ) ; p += comp_len ; tolen -= comp_len",0
622,"<S2SV_ModStart>!= NULL ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %s"", tok2str ( nfsv3_sattr_str, ""access-%u"", EXTRACT_32BITS ( & dp [ 0 ] ) ) ) ; goto trunc ; } ND_PRINT ( ( ndo, "" <S2SV_blank> %s"", tok2str ( nfsv3_sattr_str, ""access-%u"", EXTRACT_32BITS ( & dp [ 1 ] ) ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> %s"", tok2str ( nfsv3_sattr_str, ""access-%u"", EXTRACT_32BITS ( & dp [ 0 ] ) ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> %s"", tok2str ( nfsv3_sattr_str, ""access-%u"", EXTRACT_32BITS ( & dp [ 1 ] ) ) ) ) ; if (! v3 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %s"", tok2str ( nfsv3_sattr_str, ""access-%u"", EXTRA",0
623,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ;,0
624,"<S2SV_ModStart> userData, target, ctxt -> lineNo <S2SV_ModStart> ) ) { if ( ctxt -> lineNo > 0 ) { xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""ParsePI: <S2SV_blank> PI <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" ) ; } if ( ( ctxt -> lineNo > 0 ) && ( ctxt -> lineNo < ctxt -> lineNoMax ) ) { xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""ParsePI: <S2SV_blank> PI <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" ) ; } if ( ( ctxt -> lineNo > 0 ) && ( ctxt -> lineNoMax < ctxt -> lineNoMin ) ) { xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""ParsePI: <S2SV_blank> PI <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" ) ; } if ( ( ctxt -> lineNoMax > 0 ) { xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""ParsePI: <S2SV_blank> PI <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" ) ;",0
625,<S2SV_ModStart> ; bool slow <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ; * addr_len = sizeof ( * sin ) ;,1
626,"<S2SV_ModStart> len ) { <S2SV_ModEnd> if (! <S2SV_ModStart> return ; } ND_TCHECK2 ( * tptr, sizeof ( rpki_rtr_pdu ) ) ; if (! tlen ) { ND_PRINT ( ( ndo, ""\\n\\t%s"", tstr ) ) ; return ; } while ( tlen >= sizeof ( rpki_rtr_pdu ) ) { ND_TCHECK2 ( * tptr, sizeof ( rpki_rtr_pdu ) ) ; tptr += sizeof ( rpki_rtr_pdu ) ) ; if (! pdu_len ) { goto trunc ; } <S2SV_ModEnd> if ( rpki_rtr_pdu_print <S2SV_ModStart> ndo, tptr <S2SV_ModEnd>, 8 ) <S2SV_ModStart> pdu_len ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
627,"<S2SV_ModStart> int tagval ; struct stream packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> token <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> token <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> token <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
628,"<S2SV_ModStart> 0 ; int elt ; u_int offset ; u_int length ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; if ( ( ( i = * cp ++ ) & INDIR_MASK )!= INDIR_MASK ) { compress = 0 ; rp = cp + l ; } if ( i!= 0 ) while ( i && cp < ndo -> ndo_snapend ) { if ( ( i & INDIR_MASK ) == INDIR_MASK ) { if (! compress ) { rp = cp + 1 ; compress = 1 ; } if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; cp += l ; } if ( i!= 0 ) while ( i && cp < ndo -> ndo_snapend ) { if ( ( i & INDIR_MASK ) == INDIR_MASK ) { if (! compress ) { rp = cp + 1 ; compress = 1 ; } if (! ND_TTEST2 ( * cp, 1 ) ) return",0
629,<S2SV_ModStart> ; blkcnt = args -> rmtvaluelen <S2SV_ModEnd> ; error =,0
630,"<S2SV_ModStart> ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" <S2SV_ModEnd> ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModStart> ""Content-Length: <S2SV_blank> %d\\r\\n"" ""%s"",",0
631,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ( src, <S2SV_ModEnd> dest, getuid <S2SV_ModStart> getgid ( ) <S2SV_ModEnd>, S_IRUSR | <S2SV_ModStart> | S_IWUSR ) ; fs_logger2 ( ""clone"", dest <S2SV_ModEnd> ) ; unlink",1
632,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; },1
633,"<S2SV_ModStart> -> x = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> -> y = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> -> z = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 0.0f,",1
634,"<S2SV_ModStart> PKT_LEN_SIZE ) { giterr_set_str ( GITERR_NET, ""Invalid <S2SV_blank> empty <S2SV_blank> packet"" ) ; return GIT_ERROR <S2SV_ModEnd> ; } if",1
635,<S2SV_ModStart> ; if ( vma -> vm_flags & VM_SHARED ) return VM_FAULT_SIGBUS ; if (,1
636,<S2SV_ModStart> -> sasl_mechanism ; rec -> sasl_username = g_strdup ( src -> sasl_username ) ; rec -> sasl_password = g_strdup ( src -> sasl_password ) ;,0
637,"<S2SV_ModStart> env -> insn_aux_data ; int ret <S2SV_ModStart> ) ) ; ret = sanitize_insn_aux_data ( env, new_data, cnt ) ; if ( ret < 0 ) return ret <S2SV_ModStart> = new_data ; <S2SV_ModEnd> vfree ( old_data",0
638,<S2SV_ModStart> ; ND_TCHECK ( * dp <S2SV_ModEnd> ) ; if,1
639,<S2SV_ModStart> trunc ; } ND_TCHECK_16BITS ( & bp [ i + 2 ] ) ;,1
640,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
641,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( occ0 <S2SV_ModStart> % rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""PredictorDecodeTile"", ""%s"", ""occ0%rowsize <S2SV_blank>!= <S2SV_blank> 0"" ) ; return 0 ; } <S2SV_ModEnd> assert ( sp <S2SV_ModStart> 0 ) { if (! <S2SV_ModStart>, rowsize ) ) return 0",1
642,"<S2SV_ModStart>, o, datao ; if ( CHECKOVERFLOW ( datao, buf_size, 6 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> entries [ tcount ]. entries = exif_mem_alloc ( ne -> mem, sizeof ( MnoteCanonEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( ne -> log, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> entries [ tcount ]. entries = exif_mem_alloc ( ne -> mem, sizeof ( MnoteCanonEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( ne -> log, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> entries [ tcount ]. entries = exif_mem_alloc ( ne -> mem, sizeof ( MnoteCanonEntry ) * c ) ; if (! n -> entries ) { EXIF_",0
643,<S2SV_ModStart> ; if ( ctx -> terminated ||,1
644,<S2SV_ModStart> = NULL ; if ( sbi -> spool ) hugepage_put_subpool ( sbi -> spool ) ;,1
645,"<S2SV_ModStart> ; } } if ( my_errno == HA_ERR_NO_FILE : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> MyISAM-table"", filename ) ; break ; case HA_ERR_NO_DATA : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> MyISAM-table"", filename ) ; break ; case HA_ERR_NO_DATA : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> MyISAM-table"", filename ) ; break ; case HA_ERR_NO_FILE : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> MyISAM-table"", filename ) ; break ; case HA_ERR_NO_FILE : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> MyISAM-table"", filename ) ; break ; case HA_ERR_NO_FILE :",0
646,"<S2SV_ModStart> olen ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> int alloc = ( length? length : ( int ) strlen ( string ) ) + 1 <S2SV_ModStart> long hex ; <S2SV_ModEnd> ns [ strindex <S2SV_ModStart> strindex ++ ] = CURL_convert_from_network ( handle, & in, 1 ) ; if (! res ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; } ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ; return ns ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
647,"<S2SV_ModStart> ; RAnalOp next_op ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, len - op -> size <S2SV_ModEnd>, cpu )",0
648,"<S2SV_ModStart> ( ) ; iov_iter_advance ( i, copied ) ; <S2SV_ModStart> again ; } <S2SV_ModEnd> pos += copied",1
649,<S2SV_ModStart> unlikely ( len + ring -> frameoffset,1
650,<S2SV_ModStart> -> pdu_free_state_ref = usm_free_usmStateReference <S2SV_ModEnd> ; def ->,0
651,"<S2SV_ModStart> |= SEEN ; if ( show_object ( obj, NULL, name, data ) == FALSE ) die ( ""tagged <S2SV_blank> object <S2SV_blank> %s <S2SV_blank> (%s)"", oid_to_hex ( & obj -> oid ), name ) ; else die ( ""unknown <S2SV_blank> pending <S2SV_blank> object <S2SV_blank> %s <S2SV_blank> (%s)"", oid_to_hex ( & obj -> oid ), name ) ; <S2SV_ModStart> show_object, & base <S2SV_ModEnd>, path,",0
652,"<S2SV_ModStart> NULL ; return <S2SV_ModEnd> match ( prog <S2SV_ModStart>, sub ) <S2SV_ModEnd> ; } <S2SV_null>",0
653,<S2SV_ModStart> bits ] ; if ( src >= src_end ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> bits ] ; if ( src >= src_end ) return AVERROR_INVALIDDATA ;,0
654,<S2SV_ModStart> lock_ptr ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
655,<S2SV_ModStart> ; # ifndef NETSNMP_NO_WRITE_SUPPORT <S2SV_ModEnd> switch ( action,0
656,<S2SV_ModStart> 255U ; break ; case 3 : { CheckNumberPixels ( 4 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 5 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 4 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 3 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; break ; } break ; case 4 : { CheckNumberPixels ( 8 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 5 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 3 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; break ; } case 5 : { CheckNumberPixels ( 8 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 7 ) & 0x03 ) ; break ; } break ; case 6 : { CheckNumberPixels ( 4 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 5 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel,0
657,"<S2SV_ModStart> timer ) ; spin_lock_irq ( & timeri -> lock ) ; <S2SV_ModStart> tmp, & timeri -> slave_list_head, open_list ) { spin_lock_irq ( & timeri -> lock ) ; _snd_timer_stop ( slave, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail ( & slave -> open_list, & timeri -> slave_active_list ) ; timer -> master = NULL ; spin_unlock_irq ( & timeri -> lock ) ; } mutex_unlock ( & register_mutex ) ;",0
658,<S2SV_ModStart> len ; } ND_TCHECK ( p [ 2 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT,0
659,"<S2SV_ModStart> -> has_va ; <S2SV_ModEnd> char * arch <S2SV_ModStart> char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config, ""io.va"", ( binobj -> info )? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config, ""bin.baddr"", baseaddr ) ; r_config_set ( r -> config, ""asm.bits"", bits ) ; r_config_set ( r -> config, ""asm.arch"", arch ) ; r_config_set ( r -> config, ""asm.bits"", bits ) ; r_config_set ( r -> config, ""anal.arch"", arch ) ; r_config_set ( r -> config, ""anal.cpu"", <S2SV_ModEnd> cpu ) ; <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> return true ;",0
660,"<S2SV_ModStart> sas_probe_devices ( struct asd_sas_port * port <S2SV_ModEnd> ) { struct <S2SV_ModStart>, * n <S2SV_ModEnd> ; list_for_each_entry (",1
661,<S2SV_ModStart> -> u4_bitoffset = ih264d_read_mmco_commands <S2SV_ModEnd> ( ps_dec ),0
662,<S2SV_ModStart> gint64 offset ; <S2SV_ModEnd> char line [ <S2SV_ModStart> line [ NETSCREEN_LINE_LENGTH <S2SV_ModEnd> ] ; offset <S2SV_ModStart> return FALSE ; <S2SV_ModEnd> if (! <S2SV_ModStart> wth -> frame_buffer ) ) return FALSE ; if ( wth -> file_encap == WTAP_ENCAP_UNKNOWN ) wth -> file_encap = WTAP_ENCAP_PER_PACKET ; else if ( wth -> file_encap == WTAP_ENCAP_PER_PACKET ) { if ( wth -> phdr. pkt_encap == WTAP_ENCAP_UNKNOWN ) wth -> file_encap = WTAP_ENCAP_PER_PACKET ; } else if ( wth -> file_encap == WTAP_ENCAP_PER_PACKET ) wth -> file_encap = WTAP_ENCAP_PER_PACKET ; else if ( wth -> file_encap == WTAP_ENCAP_PER_PACKET ) { if ( wth -> phdr. pkt_encap!= WTAP_ENCAP_UNKNOWN ) wth -> file_encap = WTAP_ENCAP_PER,0
663,<S2SV_ModStart> 0 ) ; if ( <S2SV_ModStart>. seq_num ) < 0 ) return - 1,1
664,<S2SV_ModStart> { int_fast32_t widthOverflow = ( gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ) >> 3 ; int_fast32_t heightOverflow = ( gifFilePtr -> Image. Height * gifFilePtr -> Image. Width ) >> 3 ; int_fast32_t rasterSize = ( gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ) >> 3 ; const uint_fast32_t newRasterSize = gifFilePtr -> Image. Height * gifFilePtr -> Image. Height ; if ( widthOverflow > 0 && heightOverflow > 0 ) { gifFilePtr -> Image. Width = gifFilePtr -> Image. Width ; int_fast32_t rasterSize = ( gifFilePtr -> Image. Height * gifFilePtr -> Image. Width ) >> 3 ; uint_fast32_t newRasterSize = ( gifFilePtr -> Image. Height * gifFilePtr -> Image. Height ) >> 3 ; if ( newRasterSize,0
665,"<S2SV_ModStart> : ret = - EOPNOTSUPP ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = <S2SV_ModStart> == 0 ) ret = <S2SV_ModEnd> key -> type <S2SV_ModStart> type -> read ( key, buffer, buflen ) ; up_read <S2SV_ModEnd> ( & key <S2SV_ModStart> sem ) ; <S2SV_ModEnd> } error2 :",1
666,"<S2SV_ModStart> validator -> user ) ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size",0
667,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> if ( length!= GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length <S2SV_ModStart> ReadBlobMSBShort ( image )!= GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlobMSBShort ( image ) ; if ( length!= GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlobMSBShort ( image ) ; if ( length!= GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlobMSBShort ( image ) ; if ( length!= GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( length!= GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlobMSBShort ( image ) ; if",0
668,"<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if <S2SV_ModStart> - JAS_CAST ( jas_longlong <S2SV_ModEnd>, ( ( <S2SV_ModStart> ) & 0x7fffffff <S2SV_ModEnd> ) + 1 <S2SV_ModStart> val = ( JAS_CAST ( jas_longlong <S2SV_ModEnd>, tmp )",0
669,<S2SV_ModStart> page ) ; rm -> atomic. op_active = 0 ;,1
670,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> has <S2SV_blank> wrong <S2SV_blank> bus <S2SV_blank> %d <S2SV_blank> info!\\n"", __func__, dev -> name, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",1
671,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = sizeof ( * sin )",0
672,"<S2SV_ModStart> sizeof ( spath ) ) return - 1 ; if ( strchr ( name, '@' ) ) { flog ( LOG_ERR, ""failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> %s <S2SV_blank> (%u) <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", name, val, iface ) ; flog ( LOG_ERR, ""failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> %s <S2SV_blank> (%u) <S2SV_blank> for <S2SV_blank> %s"", name, val, iface ) ; return - 1 ; } if ( strchr ( name, '@' ) ) { flog ( LOG_ERR, ""failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> %s <S2SV_blank> (%u) <S2SV_blank> for <S2SV_blank> %s"", name, val, iface ) ; return - 1 ; } if ( access ( spath, F_OK )!= 0 ) return - 1 ; fp = fopen ( spath, ""a"" ) ; if (! fp ) { if ( name ) flog ( LOG_ERR, ""failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> %s <S2SV_blank> (%u) <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", name, val, iface ) ; return - 1 ; }",0
673,"<S2SV_ModStart> 0 ) { if ( len < 9 ) { output_error ( ""Not <S2SV_blank> enough <S2SV_blank> space <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> /FontName\\n"" ) ; return ; } <S2SV_ModStart> ++ s ; len = t - s ; if ( len < 1 ) { output_error ( ""Not <S2SV_blank> enough <S2SV_blank> space <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> /FontName\\n"" ) ; return ; } <S2SV_ModEnd> if ( * <S2SV_ModStart> ) ) t ++ ; if ( len < 1 ) { output_error ( ""Not <S2SV_blank> enough <S2SV_blank> space <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> /FontName\\n"" ) ; return ; } output_current_post ( ) ; blocktyp = POST_ASCII ; } if ( strncmp ( s, ""/FontName"", 9 ) == 0 ) { <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
674,"<S2SV_ModStart> -> bcache, cache_id ( <S2SV_ModStart> ] -> data )",1
675,<S2SV_ModStart> objp ) ; * objp = NULL ;,1
676,"<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL ) )",1
677,"<S2SV_ModStart> return 1 ; sk -> sk_state = DCCP_LISTEN ; dcb -> dccpd_reset_code = DCCP_RESET_CODE_NO_CONNECTION ; return 1 ; } if ( sk -> sk_state == DCCP_CLOSED ) { dcb -> dccpd_reset_code = DCCP_RESET_CODE_NO_CONNECTION ; return 1 ; } if ( sk -> sk_state == DCCP_REQUESTING && dcb -> dccph_type == DCCP_PKT_DATA ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; } if ( sk -> sk_state == DCCP_REQUESTING && dh -> dccph_type == DCCP_PKT_RESPONSE ) || ( dp -> dccps_role == DCCP_ROLE_CLIENT && dcb -> dccph_type == DCCP_PKT_RESPOND && dcb -> dccph_type == DCCP_PKT_DATA ) ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PK",0
678,"<S2SV_ModStart> msixcap msixcap ; if ( msgnum > MAX_MSIX_TABLE_ENTRIES ) { pr_err ( ""%s: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> msix <S2SV_blank> tables"", __func__ ) ; return - EINVAL ; } <S2SV_ModEnd> pci_msix_table_init ( dev <S2SV_ModStart> msgnum ) ; <S2SV_ModEnd> pci_populate_msixcap ( &",0
679,"<S2SV_ModStart> goto out ; err = ovl_dentry_lower ( dentry ) ; if ( err ) goto out ; <S2SV_ModStart> if ( upperdentry ) { mutex_lock ( & upperdentry -> d_inode -> i_mutex ) ; err = notify_change ( upperdentry, attr, NULL ) ; mutex_unlock ( & upperdentry -> d_inode -> i_mutex ) ; } else { err = ovl_copy_up_last ( dentry, attr, false ) ; }",0
680,<S2SV_ModStart> ( isspace ( ( unsigned char ),1
681,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> authctxt -> valid <S2SV_ModStart> { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if (! authctxt -> valid ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; }",0
682,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
683,<S2SV_ModStart> 1 ) ; if ( strlen ( line ) == 0 ) return - 1 ;,1
684,"<S2SV_ModStart> == NULL ) { retval = KRB5KDC_ERR_NO_MEMORY ; goto cleanup ; } status = X509_NAME_cmp ( X509_get_issuer_name ( kdc_cert ), is -> issuer ) ; if (! status ) { retval = KRB5KDC_ERR_NO_MEMORY ; goto cleanup ; } status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) { retval = KRB5KDC_ERR_NO_MEMORY ; goto cleanup ; } status = X509_NAME_cmp ( X509_get_issuer_name ( kdc_cert ), is -> issuer ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) * valid_kdcPkId = 1 ; } retval = 0 ; cleanup :",0
685,<S2SV_ModStart> ++ ) { if ( band -> prec ) { <S2SV_ModStart> ) ; } },1
686,"<S2SV_ModStart> ; } } if ( ( entity -> etype == XML_EXTERNAL_PARAMETER_ENTITY ) && ( ctxt -> vctxt. error!= NULL ) ) { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""External: <S2SV_blank> %%%s; <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> parameter <S2SV_blank> entity\\n"", name, NULL ) ; } else { xmlWarningMsg ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""External: <S2SV_blank> %s; <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> parameter <S2SV_blank> entity\\n"", name, NULL ) ; }",0
687,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ), <S2SV_ModEnd> np -> tclass <S2SV_ModStart> np -> tclass ) ; rcu_read_unlock (",0
688,<S2SV_ModStart> <S2SV_null> <S2SV_null> static TX_MODE <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart> cpi ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; if ( frame_type == MV_REFERENCE_FRAME_2 ) { return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ]? ALLOW_32X32 : TX_MODE_SELECT ; } else if ( cpi -> sf. tx_size_search_method == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] ; } else if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL ) { return ALLOW_32X32 ; } else if ( cpi -> sf. tx_size_search_method == USE_FULL_RD ) { const,0
689,"<S2SV_ModStart> ( u32 size, u32 num ) { if ( size > UINT32_MAX / num ) { return NULL ; } <S2SV_ModEnd> return malloc ( <S2SV_ModStart> malloc ( size * num",1
690,<S2SV_ModStart> 0.0 ) { <S2SV_ModEnd> if ( magfact <S2SV_ModStart> 0.0 ) { <S2SV_ModEnd> if ( magfact <S2SV_ModStart> 0.0 ) { <S2SV_ModEnd> if ( magfact <S2SV_ModStart> 0.0 ) { <S2SV_ModEnd> if ( magfact <S2SV_ModStart> 0.0 ) { <S2SV_ModEnd> if ( magfact <S2SV_ModStart> 0.0 ) { <S2SV_ModEnd> if ( magfact <S2SV_ModStart> 0.0 ) { <S2SV_ModEnd> if ( magfact <S2SV_ModStart> 0.0 ) { <S2SV_ModEnd> if ( magfact <S2SV_ModStart> 0.0 ) { <S2SV_ModEnd> if ( magfact <S2SV_ModStart> 0.0 ) { if ( magfact > <S2SV_ModEnd> 1.0 ) { <S2SV_ModStart> 0.0 ) { <S2SV_ModEnd> if ( magfact <S2SV_ModStart> 0.0 ) { <S2SV_ModEnd> if ( magfact <S2SV_ModStart> 0.0 ) { <S2SV_ModEnd> if ( magfact <S2SV_ModStart> 0.0 ) { <S2SV_ModEnd> if ( magfact <S2SV_ModStart> 0.0 ) { <S2SV_ModEnd> if ( magfact <S2SV_ModStart> 0.0 ) { <S2SV_ModEnd> if ( magfact <S2SV_ModStart> 0.0 ) { <S2SV_ModEnd> if ( magfact <S2SV_ModStart> 0.0 ) { <S2SV_ModEnd> if ( magfact <S2SV_ModStart> 0.0 ) { if ( magfact > <S2SV_ModEnd> 1.0 ) { <S2SV_ModStart> 0.0 ) { <S2SV_ModEnd> if ( magfact <S2SV_ModStart> 0.0 ) { <S2SV_ModEnd> if ( magfact <S2SV_ModStart> 0.0 ) { <S2SV_ModEnd> if ( magfact,0
691,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,1
692,"<S2SV_ModStart> ; if ( tile_buffer_size_cmp ( buf1, buf2 ) < 0 ) { return 1 ; } else if ( tile_buffer_size_cmp ( buf2, buf1 -> size ) == 0 ) { return - 1 ; } else if ( tile_buffer_size_cmp ( buf2, buf1 -> size ) == 0 ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 0 ; } else if ( tile_buffer_size_cmp ( buf1 -> size, buf2 -> size ) == 0 ) { return 1 ; } else if ( tile_buffer_size_cmp ( buf2, buf1 -> size ) == 0 ) { return - 1 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
693,"<S2SV_ModStart> scn ) { strncpy <S2SV_ModEnd> ( corrupt, <S2SV_ModStart> corrupt, CDF_SHORT_SEC_SIZE ( & h ), sizeof ( corrupt ) ) ; goto out3 ; } if ( ( i = cdf_read_short_stream ( & info, & h, & sst, & root_storage ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> short <S2SV_blank> stream"" ; goto out4 ; } if ( ( i = cdf_read_short_stream ( & info, & h, & sst, & scn, CDF_SHORT_SEC_SIZE ( & h ), & root_storage ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> short <S2SV_blank> stream"" ; goto out5 ; } if ( ( i = cdf_read_directory ( & info, & h, & dir, & root_storage ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> directory"" ; goto out6 ; } if ( ( i = cdf_read_short_stream ( & info, & h, & sst, & dir, & root_storage ) ) == - 1 ) { expn = ""Can",0
694,"<S2SV_ModStart> ; size_t sz ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) { if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) return NULL ; }",0
695,"<S2SV_ModStart>! eof ) { if ( vars -> cnt < vars -> max_vars ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Input <S2SV_blank> variables <S2SV_blank> exceeded <S2SV_blank> %"" PRIu64 "". <S2SV_blank> "" ""To <S2SV_blank> increase <S2SV_blank> the <S2SV_blank> limit <S2SV_blank> change <S2SV_blank> max_input_vars <S2SV_blank> in <S2SV_blank> php.ini."", max_vars ) ; return FAILURE ; } <S2SV_ModStart>! eof ) { if ( vars -> cnt < vars -> max_vars ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Input <S2SV_blank> variables <S2SV_blank> exceeded <S2SV_blank> %"" PRIu64 "". <S2SV_blank> "" ""To <S2SV_blank> increase <S2SV_blank> the <S2SV_blank> limit <S2SV_blank> change <S2SV_blank> max_input_vars <S2SV_blank> in <S2SV_blank> php.ini."", max_vars ) ; return FAILURE ; } }",0
696,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
697,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs,",0
698,"<S2SV_ModStart> -> _eip ; rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val ) ; if ( rc!= X86EMUL_CONTINUE ) break <S2SV_ModStart> case 4 : rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val )",1
699,"<S2SV_ModStart> & url ) ; if ( strcmp ( url. path, list. name ) == 0 ) { mutt_err ( 1, ""Malformed <S2SV_blank> mailbox <S2SV_blank> name: <S2SV_blank> %s\\n"", errstr ) ; return ; }",0
700,"<S2SV_ModStart> void * end <S2SV_ModEnd> ) { struct <S2SV_ModStart> * th ; <S2SV_ModEnd> struct ceph_crypto_key old_key <S2SV_ModStart> struct ceph_crypto_key old_key ; void * dbuf ; void * ticket_buf ; void * <S2SV_ModStart> bad ) ; ticket_buf = kzalloc ( TEMP_TICKET_BUF_LEN, GFP_NOFS ) ; if (! ticket_buf ) { ret = - ENOMEM ; goto out ; } <S2SV_ModStart>, end, ticket_buf <S2SV_ModEnd>, TEMP_TICKET_BUF_LEN ) <S2SV_ModStart> bad ) ; ticket_buf = kzalloc ( dlen, GFP_NOFS ) ; if (! ticket_buf ) { ret = - ENOMEM ; goto out ; } ticket_buf = kzalloc ( dlen, GFP_NOFS ) ; if (! ticket_buf ) { ret = - ENOMEM ; goto out ; } ticket_buf = kzalloc ( dlen, GFP_NOFS ) ; if (! ticket_buf ) { ret = - ENOMEM ; goto out ; } ticket_buf = kzalloc ( dlen, GFP_NOFS ) ; if (! ticket_buf ) {",0
701,"<S2SV_ModStart> / 2 ; if ( count > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", count, ( int ) ( MaxAllocSize / sizeof ( Pairs ) ) ) ) ) ;",1
702,<S2SV_ModStart> -> skip_clock_update = 1 <S2SV_ModEnd> ; prev ->,0
703,"<S2SV_ModStart> -> init_msg ; if ( s -> session -> session_id_length == 0 ) { al = SSL_AD_INTERNAL_ERROR ; SSLerr ( SSL_F_SSL3_GET_NEW_SESSION_TICKET, ERR_R_MALLOC_FAILURE ) ; goto f_err ; }",0
704,"<S2SV_ModStart> b ) ; if ( b -> manager -> event == NULL ) { r = log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } r = sd_event_add_io ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; }",0
705,<S2SV_ModStart> ( errors ) return TEST_ERR_MAJOR_BAD ; else return 0 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
706,<S2SV_ModStart> NULL ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_FIELD_REF <S2SV_ModStart> NULL ; return ( * index_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_ARRAY_REF <S2SV_ModStart>. entry ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; default :,0
707,<S2SV_ModStart> -> lun ) sas_eh_finish_cmd <S2SV_ModEnd> ( cmd ),1
708,"<S2SV_ModStart>, end_col_offset ; name = NEW_IDENTIFIER ( CHILD ( n, name_i ) ) ; if (! name ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == TYPE_COMMENT ) { returns = ast_for_comment ( c, CHILD ( n, name_i + 3 ) ) ; if (! returns ) return NULL ; } <S2SV_ModStart> += 2 ; } if ( TYPE ( CHILD ( n, name_i + 4 ) ) == TYPE_COMMENT ) { returns = ast_for_comment ( c, CHILD ( n, name_i + 5 ) ) ; if (! returns ) return NULL ; name_i += 4 ; } if ( TYPE ( CHILD ( n, name_i + 5 ) ) == TYPE_COMMENT ) { returns = ast_for_comment ( c, CHILD ( n, name_i + 6 ) ) ; if (! body ) return NULL ; get_last_end_pos ( body, & end_lineno, & end_col_",0
709,"<S2SV_ModStart> err = 0 ; if (! net_eq ( current -> nsproxy -> net_ns, sock_net ( sk ) ) ) return - EINVAL",1
710,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
711,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,1
712,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
713,"<S2SV_ModStart> ) / 3 ) ThrowReaderException ( CorruptImageError, ""InvalidColormapIndex"" ) ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries",0
714,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> ) ) ) rc = <S2SV_ModStart> ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>,1
715,,1
716,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
717,"<S2SV_ModStart> : if ( psf_bump_header_allocation ( psf ) ) { <S2SV_ModEnd> psf_fseek ( psf <S2SV_ModStart> } ; if ( psf_bump_header_allocation ( psf ) ) { <S2SV_ModEnd> psf_fseek ( psf <S2SV_ModStart> } ; if ( psf_bump_header_allocation ( psf ) ) { <S2SV_ModEnd> psf_fseek ( psf <S2SV_ModStart> psf_fseek ( psf, <S2SV_ModEnd> whence ) ; <S2SV_ModStart> } ; if ( psf_bump_header_allocation ( psf ) ) { <S2SV_ModEnd> psf_fseek ( psf <S2SV_ModStart> psf_fseek ( psf, <S2SV_ModEnd> whence ) ; <S2SV_ModStart> } ; if ( psf_bump_header_allocation ( psf ) ) { <S2SV_ModEnd> psf_fseek ( psf <S2SV_ModStart> } ; if ( psf_bump_header_allocation ( psf ) <S2SV_ModEnd> ) { psf_fseek <S2SV_ModStart> psf_fseek ( psf, <S2SV_ModEnd> whence ) ; <S2SV_ModStart> } ; if ( psf_bump_header_allocation ( psf ) ) { <S2SV_ModEnd> psf_fseek ( psf <S2SV_ModStart> } ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>",0
718,<S2SV_ModStart> out_mutex ; } ext4_inode_block_unlocked_dio ( inode ) ; inode_dio_wait ( inode ) ; down_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart> ioffset ) ; <S2SV_ModEnd> credits = ext4_writepage_trans_blocks <S2SV_ModStart> ) ; goto out_mmap <S2SV_ModEnd> ; } down_write <S2SV_ModStart> handle ) ; out_mmap : up_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModEnd> ext4_inode_resume_unlocked_dio ( inode,1
719,"<S2SV_ModStart> uint32_t midi_type ; if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } <S2SV_ModStart> uint32_t tmp_val ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 24 ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 16 ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 8 ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 8 ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 16 ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 8 ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 8 ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 24 ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 16 ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 8 ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 16 ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 8 ; tmp_val <S2SV_ModEnd> |=",0
720,"<S2SV_ModStart> |= SOCK_SNDBUF_LOCK ; sk -> sk_sndbuf = min_t ( u32, <S2SV_ModEnd> val * 2 <S2SV_ModStart> val * 2, SOCK_MIN_SNDBUF ) ; sk -> sk_write_space ( sk ) ; break ; case SO_RCVBUF : val = min_t ( u32, val, sysctl_rmem_max ) ; set_rcvbuf : sk -> sk_userlocks |= SOCK_RCVBUF_LOCK ; sk -> sk_rcvbuf = max_t ( u32, <S2SV_ModEnd> val * 2 <S2SV_ModStart> val * 2, SOCK_MIN_RCVBUF ) <S2SV_ModEnd> ; break ;",0
721,"<S2SV_ModStart> * bh ; unsigned int table_len ; <S2SV_ModStart> -> b_data ; table_len = le32_to_cpu ( lvd -> mapTableLength ) ; if ( table_len == 0 ) goto out_bh ; for ( i = 0 ; i < sbi -> s_partitions && offset < le32_to_cpu ( lvd -> mapTableLength ) ; i ++, offset += gpm -> partitionMapLength ) { struct udf_part_map * map = & sbi -> s_partmaps [ i ] ; struct genericPartitionMap * gpm = ( struct genericPartitionMap * ) & ( lvd -> partitionMaps [ offset ] ) ; if ( udf_sb_alloc_partition_maps ( sb, table_len ) ) goto out_bh ; } for ( i = 0 ; i < sbi -> s_partitions && offset < le32_to_cpu ( lvd -> mapTableLength ) ; i ++, offset += gpm -> partitionMapLength ) { struct genericPartitionMap * map = ( struct genericPartitionMap * ) gpm ; map -> s_partition_type = UDF_TYPE1_MAP15 ; map -> s_volumeseq",0
722,"<S2SV_ModStart> long n ; image = 0 ; info = 0 ; <S2SV_ModStart> ""cannot <S2SV_blank> get <S2SV_blank> header\\n"" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ""cannot <S2SV_blank> get <S2SV_blank> info\\n"" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> 1, ( ""BMP <S2SV_blank> information: <S2SV_blank> len <S2SV_blank> %d; <S2SV_blank> width <S2SV_blank> %d; <S2SV_blank> height <S2SV_blank> %d; <S2SV_blank> numplanes <S2SV_blank> %d; <S2SV_blank> "" ""depth <S2SV_blank> %d; <S2SV_blank> enctype <S2SV_blank> %d; <S2SV_blank> siz <S2SV_blank> %d; <S2SV_blank> hres <S2SV_blank> %d; <S2SV_blank> vres <S2SV_blank> %d; <S2SV_blank> vres <S2SV_blank> %d; <S2SV_blank> hres <S2SV_blank> %d; <S2SV_blank> vres <S2SV_blank> %d\\n"" <S2SV_ModStart> ""cannot <S2SV_blank> get <S2SV_blank> info\\n"" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> 1, ( ""BMP <S2SV_blank> information: <S2SV_blank> len <S2SV_blank> %d; <S2SV_blank> width <S2SV_blank> %d; <S2SV_blank> height <S2SV_blank> %d; <S2SV_blank> numplanes <S2SV_blank> %d; <S2SV_blank> depth <S2SV_blank> %d; <S2SV_blank> enctype <S2SV_blank> %d; <S2SV_blank> siz <S2SV_blank> %d; <S2SV_blank> hres <S2SV_blank> %d; <S2SV_blank> vres <S2SV_blank> %d; <S2SV_blank> hres <S2SV_blank> %d; <S2SV_blank>",0
723,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> dev ), func <S2SV_ModEnd>, line, <S2SV_ModStart> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"", func <S2SV_ModEnd>, line,",1
724,"<S2SV_ModStart> ) IHEVCD_SUCCESS ) ; if ( ps_cabac -> u4_range > ( UWORD32 ) 510 << RANGE_SHIFT ) { IHEVCD_ERROR_T e ; ps_cabac -> u4_range = ( UWORD32 ) 510 << RANGE_SHIFT ; ps_cabac -> u4_ofst = 0 ; return ( IHEVCD_ERROR_T ) IHEVCD_SUCCESS ; } <S2SV_ModStart> ) IHEVCD_SUCCESS ) ; if ( ps_cabac -> u4_ofst > ( UWORD32 ) 510 << RANGE_SHIFT ) { IHEVCD_ERROR_T e ; ps_cabac -> u4_ofst = 0 ; e = ( UWORD32 ) 510 ; BITS_GET ( ps_cabac -> u4_ofst, ps_bitstrm -> pu4_buf, ps_bitstrm -> u4_bit_ofst, ps_bitstrm -> u4_cur_word, ps_bitstrm -> u4_nxt_word ) ; }",0
725,"<S2SV_ModStart> g_tv_comment, FILENAME_COMMENT ) ; update_ls_details_checkboxes ( g_event_selected <S2SV_ModStart> g_tv_approve_bt ) ; <S2SV_ModEnd> } if ( <S2SV_ModStart> ]. page_widget == page ) { gtk_widget_set_sensitive ( g_btn_next, gtk_toggle_button_get_active ( g_rb_custom_search ) ) ; } <S2SV_ModEnd> if ( pages <S2SV_ModStart> ]. page_widget == page ) { gtk_widget_set_sensitive ( g_btn_next, gtk_toggle_button_get_active ( g_tb_approve_bt ) ) ; } if ( pages [ PAGENO_EDIT_COMMENT ]. page_widget == page ) { gtk_widget_show ( g_btn_detail ) ; gtk_widget_set_sensitive ( g_btn_next, gtk_toggle_button_get_active ( g_tb_approve_bt ) ) ; } <S2SV_ModEnd> if ( pages <S2SV_ModStart> ]. page_widget == page ) { gtk_widget_show ( g_btn_detail ) ; gtk_widget_set_sensitive ( g_btn_next, gtk_toggle_button_",0
726,"<S2SV_ModStart> media_pad_desc pad ; if ( copy_to_user ( & links -> pads [ p ], & pad, sizeof ( pad ) ) ) return - EFAULT ; <S2SV_ModStart> ) continue ; if ( copy_to_user ( & links -> links [ l ]. source, & link. source ) ) return - EFAULT ;",0
727,<S2SV_ModStart> } } } if ( line -> indent > 0 ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 0 ; } else if ( line -> indent > 0 ) { line -> type = MD_LINE_EMPTY ; ctx -> last_line_has_list_loosening_effect = 1 ; } else if ( line -> indent > 0 ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 1 ; } else if ( line -> type == MD_LINE_BLANK ) { ctx -> last_line_has_list_loosening_effect = 0 ; } else if ( line -> indent > 0 ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 1 ; } else if ( line -> indent > 0 ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 1 ; } else if ( prev_line_has_list_loosening_effect ) {,0
728,"<S2SV_ModStart> extent, height <S2SV_ModEnd> ; ssize_t count <S2SV_ModStart> height ; } bytes_per_line = sun_info. width * sun_info. depth ; height = sun_info. height * sun_info. depth ; <S2SV_ModStart>. length ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( height > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; bytes_per_line = sun_info. width * sun_info. height ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( height > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImage",0
729,"<S2SV_ModStart>, krb5_principal client_principal, const char * tgt_realm <S2SV_ModStart> principal ) ; if ( tgt_realm == NULL || tgt_realm -> str <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
730,"<S2SV_ModStart> ReadBlobLSBLong ( image ) ; if ( bmp_info. number_colors > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
731,<S2SV_ModStart> ; newinet -> inet_opt <S2SV_ModEnd> = ireq ->,1
732,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
733,"<S2SV_ModStart>!= 0 ) { if ( skb_transport_offset ( skb ) + tlen > skb -> len ) { put_cmsg ( msg, SOL_IP, IP_CHECKSUM, sizeof ( __wsum ), & csum ) ; return ; } <S2SV_ModStart>, csum_partial ( skb_transport_header <S2SV_ModEnd> ( skb ) <S2SV_ModStart> tlen, offset, skb -> len <S2SV_ModEnd> ) ) ;",0
734,"<S2SV_ModStart> pfn ) ; kvm_unpin_pages ( kvm, pfn, page_size ) ; <S2SV_ModStart> unmap_pages : kvm_unpin_pages ( kvm, pfn, page_size ) ;",0
735,<S2SV_ModStart> 0x00 } ; if ( cmd -> msg_len > sizeof ( b ) - 4 ) return - EINVAL ;,1
736,<S2SV_ModStart> perf_event_context * ctx ; ctx = perf_event_ctx_lock <S2SV_ModEnd> ( event ) <S2SV_ModStart> state = PERF_EVENT_STATE_OFF <S2SV_ModEnd> ; } raw_spin_unlock_irq,0
737,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ; return ( <S2SV_ModStart> ; return ( <S2SV_ModEnd> value & 0xffffffff <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ) ; } <S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> [ 3 ] ; return <S2SV_ModEnd> ( value & <S2SV_ModStart> & 0xffffffff ) <S2SV_ModEnd> ; } <S2SV_null>,1
738,"<S2SV_ModStart> free_nid * i <S2SV_ModEnd> ; struct nat_entry <S2SV_ModStart> ; int err <S2SV_ModEnd> ; if ( <S2SV_ModStart> return false ; i = f2fs_kmem_cache_alloc ( free_nid_slab, GFP_NOFS ) ; i -> nid = nid ; i -> state = NID_NEW ; if ( radix_tree_preload ( GFP_NOFS ) ) { spin_lock ( & nm_i -> nid_list_lock ) ; spin_unlock ( & nm_i -> nid_list_lock ) ; radix_tree_preload_end ( ) ; return true ; } i = f2fs_kmem_cache_alloc ( free_nid_slab, GFP_NOFS ) ; i -> nid = nid ; i -> state = NID_NEW ; if ( radix_tree_preload ( GFP_NOFS ) ) { spin_lock ( & nm_i -> nid_list_lock ) ; radix_tree_preload_end ( ) ; i = f2fs_insert_nid_to_list ( sbi, i, FREE_NID_LIST, true ) ; spin_unlock ( & nm_i",0
739,<S2SV_ModStart> -> post_proc_flag = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_display_mv_flag? VP9D_DEBUG_DRAW_MV : 0 ) <S2SV_ModEnd> ; flags -> <S2SV_ModStart> noise_level ; # if CONFIG_POSTPROC_VISUALIZER if ( ctx -> dbg_color_ref_frame_flag ) { flags -> display_ref_frame_flag = ctx -> dbg_color_ref_frame_flag ; flags -> display_mb_modes_flag = ctx -> dbg_color_mb_modes_flag ; flags -> display_b_modes_flag = ctx -> dbg_color_b_modes_flag ; flags -> display_mv_flag = ctx -> dbg_display_mv_flag ;,0
740,"<S2SV_ModStart> ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> ++ cons ; netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> extra. type ) ; netbk_fatal_tx_err ( vif",1
741,<S2SV_ModStart> ) ) ; hdr -> sadb_msg_reserved = 0 ;,1
742,"<S2SV_ModStart> ) return ; memset ( & r1, 0, sizeof ( r1 ) ) ;",1
743,"<S2SV_ModStart> - 1 ; luaL_argcheck ( L, size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> short"" ) ; luaL_argcheck ( L, size <= ld, 2, ""too <S2SV_blank> many <S2SV_blank> results"" ) ; switch ( * fmt ) { case 'b' : { lua_Number res = getinteger ( data + pos, h. endian, issigned, size ) ; correctbytes ( ( char * ) & res, sizeof ( res ), h. endian ) ; lua_pushnumber ( L, res ) ; break ; } case 'l' : { lua_Number res = getinteger ( data + pos, h. endian, issigned, size ) ; correctbytes ( ( char * ) & res, sizeof ( res ), h. endian ) ; lua_pushnumber ( L, res ) ; break ; } case 'x' : { lua_Number f ; memcpy ( & f, data + pos, size ) ; correctbytes ( ( char * ) & f, sizeof ( f ), h. endian ) ; lua_pushnumber ( L, f ) ; break ; } case 'f' : { float f ; memcpy ( & d,",0
744,"<S2SV_ModStart> = 0 ; if ( msg_len_valid == 0 ) { goto trunc ; } ND_TCHECK ( * tptr, sizeof ( struct olsr_hello ) ) ; hello = ( const struct olsr_hello * ) tptr ; hello_link = ( const struct olsr_hello_link * ) tptr ; hello_link = ( const struct olsr_hello_link * ) tptr ; tc = ( const struct olsr_tc * ) tptr ; hna = ( const struct olsr_hna4 * ) tptr ; hna = ( const struct olsr_hna4 * ) tptr ; tc = ( const struct olsr_hna4 * ) tptr ; hna = ( const struct olsr_hna4 * ) tptr ; tc = ( const struct olsr_tc * ) tptr ; hna = ( const struct olsr_hna4 * ) tptr ; if ( hna!= NULL ) { ND_TCHECK2 ( * tptr, sizeof ( struct olsr_hna4 ) ) ; hna = ( const struct olsr_",0
745,"<S2SV_ModStart> ; int n <S2SV_ModEnd> ; if ( <S2SV_ModStart> body -> unit_size ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; data += body -> unit_size ; } else { n = ( len - sizeof ( struct oz_multiple_fixed ) + 1 ) / body -> unit_size ; oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; data += body -> unit_size ; } } break ; case OZ_DATA_F_ISOC_FIXED : { struct oz_isoc_fixed * body = ( struct oz_isoc_fixed * ) data_hdr ; int data_len = len - sizeof ( struct oz_isoc_fixed ) + 1 ; u8 * data = body -> data ; int count ; int i ; if (! unit_size ) break ; count = data_len / unit_size ; for ( i = 0 ; i < count ; i ++ ) { oz_hcd_data_ind ( usb_ctx -> hport,",0
746,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,1
747,"<S2SV_ModStart> { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; exit ( 1 ) ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; exit ( 1 ) ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; exit ( 1 ) ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; exit ( 1 ) ; } copy_file_as_user ( src, dest, getuid ( ), getgid ( ) <S2SV_ModEnd> ) ; if",0
748,<S2SV_ModStart> IMAP_FATAL ; return ; } mailbox = idata -> buf ;,0
749,<S2SV_ModStart> return res ; <S2SV_ModEnd> return 0 ;,1
750,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> ) ; } ext_size = sizeof ( struct ext4_extent_header ) + sizeof ( struct ext4_extent ) * le16_to_cpu ( neh -> eh_entries ) ; memset ( bh -> b_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size ) ; <S2SV_ModStart> ) ; } ext_size = sizeof ( struct ext4_extent_header ) + ( sizeof ( struct ext4_extent ) * le16_to_cpu ( neh -> eh_entries ) ) ; memset ( bh -> b_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size ) ;",1
751,<S2SV_ModStart> } else { if ( ptr_hbe_txposer -> core_frame_length == 768 ) { if ( ptr_hbe_txposer -> k_start + ptr_hbe_txposer -> synth_size > 16 ) ptr_hbe_txposer -> k_start = 16 - ptr_hbe_txposer -> synth_size ; } else { if ( ptr_hbe_txposer -> k_start + ptr_hbe_txposer -> synth_size > 24 ) ptr_hbe_txposer -> k_start = 24 - ptr_hbe_txposer -> synth_size ; } else { if ( ptr_hbe_txposer -> core_frame_length == 768 ) { if ( ptr_hbe_txposer -> k_start + ptr_hbe_txposer -> synth_size > 24 ) ptr_hbe_txposer -> k_start = 24 - ptr_hbe_txposer -> synth_size ; } else { if ( ptr_hbe_txposer -> k_start > 24 ) ptr_hbe_txposer -> k_start = 24 - ptr_h,0
752,<S2SV_ModStart> ; cmap_len = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> ; cmap_entry_size = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> ; x_origin = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> ; y_origin = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> ; image_w = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> ; image_h = get_tga_ushort <S2SV_ModEnd> ( & tga,0
753,<S2SV_ModStart> ; ssize_t ret ; if ( WARN_ON_ONCE (! ib_safe_file_access ( filp ) ) ) return - EACCES,1
754,<S2SV_ModStart> ( which_clock )!= CPUCLOCK_SCHED ) return ; <S2SV_ModEnd> cputime_to_timespec ( cpu <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
755,<S2SV_ModStart> ; uint32 nstrips <S2SV_ModEnd> ; nstrips =,1
756,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = sizeof ( * sin )",0
757,"<S2SV_ModStart> lua_module ) ; <S2SV_ModEnd> int result ; <S2SV_ModStart> r ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> ( L, <S2SV_ModEnd> prov_spec -> args <S2SV_ModStart> args -> nelts, & result ) { ap_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02318 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", prov_spec -> function_name, prov_spec -> file_name ) ; ap_lua_release_state ( L, spec, r ) ; return AUTHZ_GENERAL_ERROR ; } <S2SV_ModEnd> if (! <S2SV_ModStart> -> nelts ) { ap_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02319 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", prov_spec -> function_name, prov_spec -> file_name ) ; ap_lua_release_state ( L, spec, r ) ; return AUTHZ_GENERAL_",0
758,<S2SV_ModStart> ; int error = 0 <S2SV_ModStart> &= PAGE_MASK ; if ( address < mmap_min_addr ) return - EPERM <S2SV_ModEnd> ; prev =,1
759,"<S2SV_ModStart> { umode_t mode <S2SV_ModEnd> ; error = <S2SV_ModStart> ; error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & mode <S2SV_ModStart>, & mode, & acl <S2SV_ModStart> if ( error <S2SV_ModEnd> ) return error <S2SV_ModStart> return error ; <S2SV_ModEnd> error = xfs_set_mode",1
760,"<S2SV_ModStart>, int optional, const char * rootfs <S2SV_ModStart> endif if ( safe_mount <S2SV_ModEnd> ( fsname, <S2SV_ModStart> MS_REMOUNT, data, rootfs <S2SV_ModStart>, data ) < 0",1
761,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
762,"<S2SV_ModStart> it_overrun = - 1LL <S2SV_ModEnd> ; ++ timr <S2SV_ModStart> info -> si_overrun = timer_overrun_to_int ( timr, info -> si_overrun ) <S2SV_ModEnd> ; } unlock_timer",1
763,<S2SV_ModStart> if (! proto_end ) return 0 ; if ( proto_end - url < 3,0
764,<S2SV_ModStart> static_key * done_key <S2SV_ModEnd> ) { static <S2SV_ModStart> flags ) ; <S2SV_ModEnd> return true ;,0
765,"<S2SV_ModStart> -> actual ; bool kiocb_has_eventfd = <S2SV_ModEnd> io_data -> kiocb <S2SV_ModStart> ki_flags & IOCB_EVENTFD ; if ( io_data -> read && ret > 0 ) { use_mm ( io_data -> mm ) ; ret = copy_to_iter ( io_data -> buf, ret, & io_data -> data ) ; if ( iov_iter_count ( & io_data -> data ) ) ret = - EFAULT ; unuse_mm ( io_data -> mm ) ; } io_data -> kiocb -> ki_complete ( io_data -> kiocb, ret, ret ) ; if ( io_data -> ffs -> ffs_eventfd &&! kiocb_has_eventfd <S2SV_ModEnd> ) eventfd_signal ( <S2SV_ModStart> -> req ) <S2SV_ModEnd> ; if (",1
766,<S2SV_ModStart> ; if ( IPCB ( skb ) -> flags & IPSKB_DOREDIRECT <S2SV_ModEnd> &&! opt,1
767,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
768,"<S2SV_ModStart> struct trusted_key_payload * p ; struct trusted_key_payload * new_p ; struct trusted_key_options * new_o ; size_t datalen = prep -> datalen ; char * datablob ; int ret = 0 ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) return - ENOKEY ; <S2SV_ModStart> 0 ] ; <S2SV_ModEnd> if (!",1
769,"<S2SV_ModStart> v |= ( JAS_CAST ( uint_fast32_t, c ) <S2SV_ModEnd> << 24 )",1
770,<S2SV_ModStart> NULL ) { if ( skb -> len < ROSE_MIN_LEN ) { kfree_skb ( skb ) ; continue ; } <S2SV_ModStart> 2 ] ; if ( frametype == ROSE_CALL_REQUEST && ( skb -> len <= ROSE_CALL_REQ_FACILITIES_OFF || skb -> data [ ROSE_CALL_REQ_ADDR_LEN_OFF ]!= ROSE_CALL_REQ_ADDR_LEN_VAL ) ) { kfree_skb ( skb ) ; continue ; } <S2SV_ModStart> -> data + ROSE_CALL_REQ_DEST_ADDR_OFF <S2SV_ModEnd> ) ; lci_o,1
771,"<S2SV_ModStart> npages ) { kvm_iommu_unmap_pages ( kvm, & old, npages ) ; kvm_iommu_put_pages ( & old, npages ) ; goto out_free ; } r = - EINVAL ; if ( base_gfn!= old. base_gfn ) { kvm_iommu_unmap_pages ( kvm, & old, base_gfn, npages ) ; goto out_free ; } <S2SV_ModStart> npages ) { kvm_iommu_unmap_pages ( kvm, & old, <S2SV_ModEnd> npages ) ; <S2SV_ModStart> npages ) ; kvm_iommu_put_pages ( & old, npages ) ; out_free :",0
772,<S2SV_ModStart> indev!= NULL && indev -> ifa_list,0
773,"<S2SV_ModStart> fdt ) ; const char * const name = fdt_get_name ( fdt, offset, & len ) ; if ( len > path_len ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> nextoffset ; switch ( len ) { case FDT_PROP : include = want >= 2 ; stop_at = offset ; break ; case FDT_NOP : include = want >= 2 ; break ; case FDT_BEGIN_NODE : depth = 0 ; if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BADSTRUCTURE ; if (! str ) return - FDT_ERR_BADSTRUCTURE ; if ( str_in_list ( path, inc, inc_count ) ) include = 0 ; break ; case FDT_END_NODE : depth = 0 ; if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BADSTRUCTURE ; if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BADSTRUCTURE ; name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_BADSTRUCTURE ; if (",0
774,"<S2SV_ModStart> char * buff ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } buff",1
775,"<S2SV_ModStart> } if ( data_body == NULL && in_bio == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_NO_CONTENT ) ; goto err ; } if ( <S2SV_ModStart> ) ) { if ( in_bio == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_NO_CONTENT ) ; goto err ; }",0
776,"<S2SV_ModStart> ) ) { if ( ( loops % 50 ) ) { redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."", j, used, vkeys ) ; } else <S2SV_ModEnd> { redisLog ( <S2SV_ModStart> ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lldSlots <S2SV_blank> HT."" <S2SV_ModEnd>, j, <S2SV_ModStart> ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."" <S2SV_ModEnd>, j, <S2SV_ModStart> ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lldSlots <S2SV_blank> HT."" <S2SV_ModEnd>, j, <S2SV_ModStart> ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lldSlots <S2SV_blank> HT."" <S2SV_ModEnd>, j, <S2SV_ModStart> ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT",0
777,"<S2SV_ModStart> } if ( options -> flags & ( UV_PROCESS_SETUID | UV_PROCESS_SETGID ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setuid()"" ) ; _exit ( 127 ) ; } if (",0
778,"<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> EOPNOTSUPP ; } if ( rlen > MAX_XFER_SIZE ) { warn ( ""i2c <S2SV_blank> rd: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", rlen ) ; return - EOPNOTSUPP ; } <S2SV_ModEnd> mutex_lock ( & <S2SV_ModStart> wlen ) ; <S2SV_ModEnd> ret = dvb_usb_generic_rw <S2SV_ModStart> + wlen, st -> data <S2SV_ModEnd>, rlen, <S2SV_ModStart> rlen, 0 ) ; if (! ret && rbuf && rlen ) memcpy ( rbuf, st -> data, rlen",1
779,"<S2SV_ModStart> -> protocol_timeout = g_timeout_add_seconds <S2SV_ModEnd> ( 5,",0
780,<S2SV_ModStart> book -> dim && i < n,1
781,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
782,"<S2SV_ModStart> no_free_extent ; } ret = btrfs_check_dir_item_collision ( trans, fs_info, root, path, dir_item, new_root_item ) ; if ( ret ) { pending -> error = ret ; goto no_free_dir_item ; } ret = btrfs_check_dir_item_collision ( trans, fs_info, root, path, dir_item, new_root_item ) ; if ( ret ) { btrfs_abort_transaction ( trans, fs_info, root, ret ) ; goto root_item_collision_alloc_fail ; } if ( ret ) { pending -> error = ret ; goto no_free_dir_item ; } ret = btrfs_check_dir_item_collision ( trans, fs_info, root, path, dir_item, new_root_item, new_root_item ) ; if ( ret ) { btrfs_abort_transaction ( trans, fs_info, root, ret ) ; goto root_item_collision_alloc_fail ; }",0
783,<S2SV_ModStart> fp ) ; spin_lock ( & unix_gc_lock ) ; <S2SV_ModStart> unix_sk ( s <S2SV_ModEnd> ) ; BUG_ON <S2SV_ModStart> unix_tot_inflight -- ; } fp -> f_cred -> user -> unix_inflight -- ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
784,"<S2SV_ModStart> size_t chanmap_size = SF_MIN ( <S2SV_ModStart> sf. channels, layout_tag & 0xffff )",1
785,<S2SV_ModStart> this_h ) ) return ; if ( sf -> x_scale_fp == REF_INVALID_SCALE || sf -> y_scale_fp == REF_INVALID_SCALE ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } if ( sf -> x_step_q4 == 16 ) { sf -> predict [ 0 ] [ 0 ] = vp9_convolve_copy ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve_avg ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve8_horiz ; sf -> predict [ 0 ] [ 0 ] = vp9_convolve8_horiz ; sf -> predict [ 1 ] [ 0 ] = vp9_convolve8_horiz ; sf -> predict [ 1 ] [ 1 ] = vp9_convolve8_avg_horiz ; } else { sf -> predict [ 0 ] [ 0 ] = vp9_convolve_copy ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve8_horiz ; sf -> predict [ 0 ] [ 1 ] = vp,0
786,<S2SV_ModStart> ms ) { uint32_t <S2SV_ModEnd> nestsize = ( <S2SV_ModStart> nestsize = ( uint32_t <S2SV_ModEnd> ) ms ->,1
787,"<S2SV_ModStart> PERF_COUNT_SW_ALIGNMENT_FAULTS, 1 <S2SV_ModEnd>, regs,",0
788,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
789,<S2SV_ModStart> -> xrefs = safe_calloc ( <S2SV_ModEnd> sizeof ( xref_t,1
790,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
791,"<S2SV_ModStart> ( sk ) ; rcu_read_lock ( ) ; <S2SV_ModStart> ( opt ) { atomic_sub ( <S2SV_ModEnd> opt -> tot_len <S2SV_ModStart> opt -> tot_len, & sk -> sk_omem_alloc ) ; txopt_put ( opt ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
792,"<S2SV_ModStart>, * tmpin = NULL, * tmpout <S2SV_ModStart> cmsbio = dcont ; if (! ( flags & CMS_NO_CONTENT ) ) { tmpout = CMS_get0_content ( cms ) ; if (! tmpout ) { CMSerr ( CMS_F_CMS_VERIFY, ERR_R_MALLOC_FAILURE ) ; goto err ; } <S2SV_ModStart> } if (! ( flags & CMS_NO_CONTENT ) ) { tmpout = CMS_get1_content ( cms ) ; if (! tmpout ) { CMSerr ( CMS_F_CMS_VERIFY, CMS_R_MALLOC_FAILURE ) ; goto err ; } } if (! ( flags & CMS_NO_CONTENT ) ) { tmpout = CMS_get0_content ( cms ) ; if ( sk_CMS_SignerInfo_num ( sinfos ) <= 0 ) { CMSerr ( CMS_F_CMS_VERIFY, CMS_R_MALLOC_FAILURE ) ; goto err ; } for ( i = 0 ; i < sk_CMS_SignerInfo_num ( sinfos ) ; i ++ ) { si = CMS_SignerInfo_value ( sinfos, i ) ; if (",0
793,"<S2SV_ModStart>! skb ) { atomic_sub ( optlen, & sk -> sk_omem_alloc ) ; <S2SV_ModStart> - EMSGSIZE ; atomic_sub ( optlen, & sk -> sk_omem_alloc ) ; } <S2SV_ModEnd> break ; case <S2SV_ModStart>! skb ) { atomic_sub ( optlen, & sk -> sk_omem_alloc ) ; <S2SV_ModStart> - EMSGSIZE ; atomic_sub ( optlen, & sk -> sk_omem_alloc ) ; } <S2SV_ModEnd> } case IPV6_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
794,<S2SV_ModStart> ( ) ; unregister_pernet_subsys ( & sctp_ipv4_ops ) ; unregister_pernet_subsys ( & sctp_ipv6_ops ) ; unregister_pernet_subsys ( & sctp_ipv6_ops ) ; unregister_pernet_subsys ( & sctp_ipv4_ops ) ;,0
795,<S2SV_ModStart> cs_flags ) ; # if! defined ( __GNUC__ ) || defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( CONFIG_GNUC__ ) kfree ( __GNUC__ ) ; # if! defined ( __GNUC__ ) if ( defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) kfree ( __GNUC__ ) kfree ( __GNUC__ ) ; # if! defined ( __GNUC__ ) kfree ( __GNUC__ ) kfree ( __GNUC__ ) kfree ( __GNUC,0
796,"<S2SV_ModStart> ) { struct in_device * idev <S2SV_ModEnd> = ( ( <S2SV_ModStart> ) -> ifa_dev <S2SV_ModEnd> ; struct netdev_notifier_info <S2SV_ModStart> netdev_notifier_info info ; if ( idev -> dead ) return NOTIFY_DONE ; <S2SV_ModStart> & info, idev ->",1
797,"<S2SV_ModStart> ; if (! mmget_still_valid ( mm ) ) { leave_mm ( smp_processor_id ( ) ) ; <S2SV_ModStart> ) ; goto out ; } if ( ( end!= TLB_FLUSH_ALL ) &&! vmflag & VM_HUGETLB ) base_pages_to_flush = ( end - start ) >> PAGE_SHIFT ; if ( base_pages_to_flush > tlb_single_page_flush_ceiling ) { base_pages_to_flush = TLB_FLUSH_ALL ; count_vm_tlb_event ( NR_TLB_LOCAL_SHOOTDOWN, base_pages_to_flush ) ; local_flush_tlb ( ) ; } <S2SV_ModEnd> trace_tlb_flush ( TLB_LOCAL_MM_SHOOTDOWN",0
798,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> index ) ; return sse_to_psnr ( stream -> psnr_samples_total, 255.0, stream -> psnr_sse_total ) <S2SV_ModEnd> ; } <S2SV_null>",0
799,"<S2SV_ModStart> val ) { int temp_size = 500 ; char * temp = malloc ( temp_size ) <S2SV_ModEnd> ; int i <S2SV_ModStart> ; ) { if ( i >= temp_size ) { temp_size *= 2 ; temp = realloc ( temp, temp_size ) ; }",1
800,<S2SV_ModStart> task ) { <S2SV_ModEnd> del_timer ( & <S2SV_ModStart> -> timer ) <S2SV_ModEnd> ; complete (,1
801,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
802,"<S2SV_ModStart> NULL ) { if ( addr_str_length > sizeof ( addr_str_buffer ) ) { log_warn ( ""lldp"", ""too <S2SV_blank> large <S2SV_blank> management <S2SV_blank> address <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; return - 1 ; } <S2SV_ModStart> NULL ) { if ( addr_str_length > sizeof ( addr_str_buffer ) ) { log_warn ( ""lldp"", ""too <S2SV_blank> large <S2SV_blank> management <S2SV_blank> address <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; return - 1 ; } <S2SV_ModStart> NULL ) { log_warn ( ""lldp"", ""too <S2SV_blank> large <S2SV_blank> management <S2SV_blank> address <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname, addr_str_length ) ; return - 1 ; } <S2SV_ModStart> ( <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
803,"<S2SV_ModStart> object + size > bplist -> offset_table ) { PLIST_BIN_ERR ( ""%s: <S2SV_blank> plist <S2SV_blank> data <S2SV_blank> bytes <S2SV_blank> point <S2SV_blank> outside <S2SV_blank> of <S2SV_blank> valid <S2SV_blank> range\\n"", __func__ ) ; return NULL ; } if ( * object + size <S2SV_ModStart> object + size > bplist -> offset_table ) { PLIST_BIN_ERR ( ""%s: <S2SV_blank> plist <S2SV_blank> data <S2SV_blank> bytes <S2SV_blank> point <S2SV_blank> outside <S2SV_blank> of <S2SV_blank> valid <S2SV_blank> range\\n"", __func__",0
804,"<S2SV_ModStart> ; TRACE_DEBUG ( ""CIDER=0x%04"" PRIX16 ""\\r\\n"" <S2SV_ModEnd>, ksz8851ReadReg ( <S2SV_ModStart> ( interface, KSZ8851_CIDER ) ) ; TRACE_DEBUG ( ""PHY1ILR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1ILR ) ) ; TRACE_DEBUG ( ""PHY1IHR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1IHR ) ) ; if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } ksz8851DumpReg ( interface ) ; context -> frameId = 0 ; context -> txBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; context -> rxBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; if ( context -> txBuffer == NULL || context -> rxBuffer == NULL )",0
805,<S2SV_ModStart> all_channels_lock ) ; put_net ( pch -> chan_net ) ; pch -> chan_net = NULL ;,1
806,"<S2SV_ModStart> btrfs_dir_item * di = NULL <S2SV_ModStart> - ENOMEM ; path -> skip_release_on_error = 1 ; if (! ( flags & XATTR_REPLACE ) ) { di = btrfs_lookup_xattr ( trans, root, path, btrfs_ino ( inode ), name, name_len, - 1 ) ; if (! di ) { ret = - ENODATA ; goto out ; } else if ( di ) { ret = - ENODATA ; goto out ; } ret = btrfs_delete_one_dir_name <S2SV_ModEnd> ( trans, <S2SV_ModStart>, path, <S2SV_ModEnd> di ) ; <S2SV_ModStart> out ; } if ( flags & XATTR_REPLACE ) { di = btrfs_lookup_xattr ( trans, root, path, btrfs_ino ( inode ), name, name_len, 0 ) ; if ( IS_ERR ( di ) ) { ret = PTR_ERR ( di ) ; goto out ; } else if (! di ) { ret = - ENODATA ; goto out ; } ret = btrfs_insert_xattr_item <S2SV_ModEnd> ( trans, <S2SV_ModStart>, path, btrfs_ino (",0
807,<S2SV_ModStart> > 0xbf ) { <S2SV_ModStart> return 1 ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto error ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto error ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto error ; } <S2SV_ModStart> goto error ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto error ; } <S2SV_ModStart> goto error ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto error ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto error ; } <S2SV_ModStart> goto error ; } <S2SV_ModStart> goto error ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto error ; } <S2SV_ModStart> goto error ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto error ; } <S2SV_ModStart> goto error ; } <S2SV_ModStart> goto error ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto error ; } <S2SV_ModStart> goto error ; } <S2SV_ModStart> goto error ; } <S2SV_ModStart> goto error ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto error ; } <S2SV_ModStart> goto error ; } <S2SV_ModStart> goto error ; } <S2SV_ModStart> goto error ; } <S2SV_ModStart> goto error ; } <S2SV_ModStart> goto error ; error :,0
808,"<S2SV_ModStart> client -> proxy ) ; g_byte_array_free ( client -> auth_buffer, TRUE",1
809,"<S2SV_ModStart>. skip } ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) arg. flags |= YV12_FLAG_HIGHBITDEPTH ; vp9_foreach_transformed_block_in_plane ( xd, bsize, plane, encode_block_intra, & arg ) ; } else { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) arg. flags |= YV12_FLAG_HIGHBITDEPTH ; } else { vp9_foreach_transformed_block_in_plane ( xd, bsize, plane, encode_block_intra,",0
810,<S2SV_ModStart> ; if ( key_is_negative ( key <S2SV_ModEnd> ) ) return,1
811,<S2SV_ModStart> ip ++ ; if ( unlikely (! ( * ip == 0 ) ) ) { goto input_overrun ; } <S2SV_ModStart> endif { NEED_IP ( 1 <S2SV_ModEnd> ) ; do <S2SV_ModStart> t + 3 ) ; do { * op ++ = * ip ++ ; } while ( -- t > 0 ) ; } state = 4 ; continue ; } if ( state == 4 ) { next = t & 3 ; m_pos = op - 1 ; m_pos -= t >> 2 ; m_pos -= t >> 2 ; TEST_LB ( m_pos ) ; op [ 0 ] = m_pos [ 0 ] ; op [ 1 ] = m_pos [ 1 ] ; op [ 2 ] = m_pos [ 2 ] ; } state = 4 ; continue ; } if ( state == 4 ) { next = t & 3 ; m_pos = op - 1 ; m_pos -= t >> 2 ; TEST_LB ( m_pos ) ; op [ 0 ] = m_pos [ 0 ] ; op [ 1 ] = m_pos [ 1 ] ; op [ 2 ] = m_pos [ 1 ] ; op [ 3 ] = m_pos [ 2 ] ; op [ 3 ] =,0
812,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> fit_check_format ( fit <S2SV_ModStart>, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - EINVAL ; } else { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - EINVAL ; } <S2SV_ModEnd> } bootstage_mark ( <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT_OK ) ; if ( fit_uname ) { bootstage_mark ( bootstage_id + BOOTSTAGE_SUB_UNIT_NAME ) ; noffset = fit_image_get_node ( fit, fit_uname ) ; } else { bootstage_mark ( bootstage_id + BOOTSTAGE_SUB_NO_UNIT_NAME ) ; noffset = fit_image_get_node ( fit, fit_base_uname_config ) ; }",0
813,<S2SV_ModStart> { vpn_packet_t outpkt ; if ( len > sizeof outpkt. data ) return,1
814,<S2SV_ModStart> vmx_vpid_bitmap ) ; <S2SV_ModEnd> for ( msr <S2SV_ModStart> ( unsigned long ) <S2SV_ModEnd> __get_free_page ( GFP_KERNEL <S2SV_ModStart> ( unsigned long ) <S2SV_ModEnd> __get_free_page ( GFP_KERNEL <S2SV_ModStart> ( unsigned long ) <S2SV_ModEnd> __get_free_page ( GFP_KERNEL <S2SV_ModStart> ( unsigned long ) <S2SV_ModEnd> __get_free_page ( GFP_KERNEL <S2SV_ModStart> ( unsigned long ) <S2SV_ModEnd> __get_free_page ( GFP_KERNEL <S2SV_ModStart> ; for ( i = 0 ; i < ARRAY_SIZE ( vmx_vpid_bitmap ) ; ++ i ) kvm_set_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical_logical,0
815,"<S2SV_ModStart> out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; goto out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; goto out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; goto out_error ; }",0
816,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ),0
817,<S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc ->,0
818,"<S2SV_ModStart> ( strcmp ( argv [ i ] <S2SV_ModEnd>, ""--allow-untrusted"" )",0
819,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
820,<S2SV_ModStart> INDENT_INCR ; } if ( tbl -> indent < 0 ) tbl -> indent = 0 ; <S2SV_ModStart> -= INDENT_INCR ; if ( offset < 0 ) offset = 0 ;,1
821,"<S2SV_ModStart> + tail ; size_t ss = CDF_SEC_SIZE ( h ) ; <S2SV_ModStart> b ) <= ss <S2SV_ModEnd> * sst -> <S2SV_ModStart> b ) <= ss <S2SV_ModEnd> * sst -> <S2SV_ModStart> b ), ss <S2SV_ModEnd> * sst -> <S2SV_ModStart> b ), ss <S2SV_ModEnd> * sst ->",0
822,"<S2SV_ModStart> : # line 118 <S2SV_ModEnd> ""hex_grammar.y"" { int <S2SV_ModStart> } # line 118 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 118 <S2SV_ModEnd> ""hex_grammar.y"" { int <S2SV_ModStart> } # line 118 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 118 <S2SV_ModEnd> ""hex_grammar.y"" { int <S2SV_ModStart> } # line 118 <S2SV_ModEnd> ""hex_grammar.y"" { int <S2SV_ModStart> } # line 118 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 118 <S2SV_ModEnd> ""hex_grammar.y"" { int <S2SV_ModStart> } # line 118 <S2SV_ModEnd> ""hex_grammar.y"" { int <S2SV_ModStart> } # line 118 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 118 <S2SV_ModEnd> ""hex_grammar.y"" { int <S2SV_ModStart> } # line 118 <S2SV_ModEnd> ""hex_grammar.y"" { int <S2SV_ModStart> } # line 118 <S2SV_ModEnd> ""hex_grammar.y"" { int <S2SV_ModStart> } # line 118 <S2SV_ModEnd> ""hex_grammar.y"" { int <S2SV_ModStart> } # line 118 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 118 <S2SV_ModEnd> ""hex_grammar.y""",0
823,<S2SV_ModStart> ib ] ; <S2SV_ModEnd> dequant_ptr = d,1
824,<S2SV_ModStart> FN_REFLEN ] ; if ( i + 1 >= FN_DIRLEN ) { error = - 1 ; goto exit ; } <S2SV_ModStart> 1 ) ; if ( i + 1 >= FN_DIRLEN ) { error = - 1 ; goto exit ; },0
825,<S2SV_ModStart> ; if ( key_is_positive ( key <S2SV_ModEnd> ) ) zap,1
826,"<S2SV_ModStart> ) -> filter ; memset ( & uf, 0, sizeof ( uf ) )",1
827,"<S2SV_ModStart> int n = min_t ( int, data_end - data, sizeof ( clear_buffer ) ) <S2SV_ModEnd> ; if (",0
828,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
829,<S2SV_ModStart> -> peer. auth_capable = new -> peer. auth_capable ; asoc -> peer.,1
830,"<S2SV_ModStart> cleanup ; } for ( i = 0 ; i < ( sizeof ( struct aac_srb ) - sizeof ( struct aac_srb ) ) ; i ++ ) { if ( copy_from_user ( & fibsize, & user_srb -> count, sizeof ( u32 ) ) ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> Could <S2SV_blank> not <S2SV_blank> copy <S2SV_blank> data <S2SV_blank> size <S2SV_blank> from <S2SV_blank> user\\n"" ) ; rcode = - EFAULT ; goto cleanup ; } for ( i = 0 ; i < ( sizeof ( struct aac_srb ) - sizeof ( struct aac_srb ) ; i ++ ) { if ( copy_from_user ( & fibsize, & user_srb -> count, sizeof ( u32 ) ) ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> Could <S2SV_blank> not <S2SV_blank> copy <S2SV_blank> data <S2SV_blank> size <S2SV_blank> from <S2SV_blank> user\\n"" ) ; rcode = - EFAULT ; goto cleanup ; } }",0
831,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( cc0 <S2SV_ModStart> % rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""PredictorEncodeTile"", ""%s"", ""(cc0%rowsize)!=0"" ) ; return 0 ; } <S2SV_ModEnd> while ( cc",1
832,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
833,"<S2SV_ModStart> input_data, size_t input_start_size, size_t input_end_size <S2SV_ModEnd>, int flags <S2SV_ModStart> # define prolog ( e ) { <S2SV_ModStart> break ; } <S2SV_ModEnd> if ( _yr_re_alloc_storage <S2SV_ModStart> ) switch ( e ) { case ERROR_INSUFFICIENT_MEMORY : return - 2 ; case ERROR_TOO_MANY_RE_FIBERS : return - 4 ; } <S2SV_ModEnd> if ( _yr_re_fiber_create <S2SV_ModStart> ) yr_min ( input_start_size <S2SV_ModEnd>, RE_SCAN_LIMIT ) <S2SV_ModStart> ) yr_min ( input_end_size <S2SV_ModEnd>, RE_SCAN_LIMIT ) <S2SV_ModStart> } max_bytes_matched = max_bytes_matched - max_bytes_matched % character_size ; bytes_matched = 0 ; error = _yr_re_fiber_sync ( & fibers, & storage -> fiber_pool, fiber ) ; fail_if_error ( error ) ; next_fiber = _yr_re_fiber_create ( & storage -> fiber_pool, fiber ) ; fail_if_error ( error ) ; ip = re_code ;",0
834,"<S2SV_ModStart> * returnrate, RATE_DISTORTION * returndistortion, int * returnintra ) { BLOCK * b = & x -> block [ 0 ] ; BLOCKD * d = & x -> e_mbd. block [ 0 ] ; MACROBLOCKD * xd = & x -> e_mbd. block [ 1 ] ; MACROBLOCKD * xd2 = & x -> e_mbd. block [ 2 ] ; MACROBLOCKD * xd = & x -> e_mbd. block [ 3 ] ; <S2SV_ModStart> = INT_MAX, <S2SV_ModEnd> best_rd_sse = INT_MAX <S2SV_ModStart> = INT_MAX ; # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX, <S2SV_ModEnd> best_rd_sse = INT_MAX <S2SV_ModStart> = INT_MAX ; # else unsigned int zero_mv_sse = INT_MAX, best_rd_sse = INT_MAX, <S2SV_ModEnd> best_rd_sse = INT_MAX <S2SV_ModStart> = INT_MAX ; # if CONFIG_TEMPORAL_DENOIS",0
835,"<S2SV_ModStart> svm, MC_VECTOR ) ; set_exception_intercept ( svm, DB_VECTOR",0
836,"<S2SV_ModStart> goto error ; if (! h -> writable ) { h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL ) goto error ; DEBUG ( 2, ""mmap <S2SV_blank> file <S2SV_blank> at <S2SV_blank> %p"", h -> addr ) ; h -> fd = - 1 ; goto error ; } else { h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL ) goto error ; DEBUG ( 2, ""malloc <S2SV_blank> file <S2SV_blank> at <S2SV_blank> %p"", h -> addr ) ; h -> addr = - 1 ; } } else { h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL ) goto error ; DEBUG ( 2, ""malloc <S2SV_blank> file <S2SV_blank> at <S2SV_blank> %p"", h -> addr ) ; }",0
837,"<S2SV_ModStart> sst, const cdf_directory_t * root_storage <S2SV_ModEnd> ) { cdf_summary_info_header_t <S2SV_ModStart> break ; } if ( root_storage ) { <S2SV_ModStart> = cdf_clsid_to_mime ( root_storage -> d_storage_uuid <S2SV_ModEnd>, clsid2desc ) <S2SV_ModStart> - 2 ; } <S2SV_ModStart>, count, root_storage <S2SV_ModEnd> ) ; free",1
838,"<S2SV_ModStart> ; UWORD8 u1_profile_idc, u1_level_idc, u1_seq_parameter_set_id ; UWORD16 i2_max_frm_num ; UWORD32 * pu4_bitstrm_buf = & ps_bitstrm -> pu4_buffer ; UWORD32 * pu4_bitstrm_ofst = & ps_bitstrm -> pu4_ofst ; <S2SV_ModEnd> u4_num_reorder_frames = 0 <S2SV_ModStart> ; u1_frame_cropping_flag = ih264d_get_bit_h264 ( ps_bitstrm, 8 ) ; u1_frame_cropping_flag = ih264d_get_bit_h264 ( ps_bitstrm, 8 ) ; u1_frame_cropping_rect_left_ofst = u1_frame_cropping_rect_left_ofst ; u1_frame_cropping_rect_right_ofst = u1_frame_cropping_rect_right_ofst ; u1_frame_cropping_flag = ih264d_get_bit_h264 ( ps_",0
839,<S2SV_ModStart> -> length ) ; if ( err ) return - EFAULT,1
840,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vpx_svc_parameters_t * ) <S2SV_ModEnd> ; VP9_COMP * <S2SV_ModStart> cpi ; vpx_svc_parameters_t * const <S2SV_ModEnd> params = va_arg <S2SV_ModStart> ; if ( params == NULL ) return VPX_CODEC_INVALID_PARAM ; cpi -> svc. spatial_layer_id = params -> spatial_layer ; cpi -> svc. temporal_layer_id = params -> temporal_layer ; cpi -> lst_fb_idx = params -> lst_fb_idx ; cpi -> gld_fb_idx = params -> gld_fb_idx ; cpi -> alt_fb_idx = params -> alt_fb_idx ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ; set_encoder_config ( & ctx -> oxcf, & ctx -> extra_cfg, & ctx ->",0
841,"<S2SV_ModStart> > 0 ) { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_INHDRERRORS ) ; icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - skb_network_header ( skb ) ) ; goto err ; } <S2SV_ModStart> > 0 ) { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_INHDRERRORS ) ; icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - skb_network_header ( skb ) ) ) ; goto err ; } <S2SV_ModEnd> if ( prev <S2SV_ModStart> > 0 ) { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_INHDRERRORS ) ; icmpv6",0
842,"<S2SV_ModStart> out ) { uint32 length ; uint32 width ; uint32 bitspersample ; uint32 samplesperpixel ; uint16 <S2SV_ModEnd> input_compression, input_photometric <S2SV_ModStart> uint16 input_compression, input_photometric ; if ( length < ( uint32 ) - 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> image <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short.\\n"", TIFFFileName ( in ) ) ; return FALSE ; } length = ( uint32 ) - 1 ; bitspersample = ( uint32 ) ( bitspersample * 8 ) ; samplesperpixel = ( uint32 ) ( samplesperpixel * 8 ) ; CopyField ( TIFFTAG_BITSPERSAMPLE, bitspersample ) ; CopyField ( TIFFTAG_SAMPLESPERPIXELEL, samplesperpixel ) ; if ( length < ( uint32 ) - 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> image <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short.\\n"", TIFFFileName ( in ) ) ; return FALSE ; }",0
843,"<S2SV_ModStart> a ) { archive_error_t <S2SV_ModEnd> r ; char <S2SV_ModStart> = '\\0' ; if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Cannot <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else if ( S_ISLNK ( a -> mode ) ) { archive_set_error ( & a -> archive, 0, ""Removing <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } } else if ( S_ISLNK ( a -> mode ) ) { archive_set_error ( & a -> archive, 0, ""Removing <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; a -> pst = NULL ; } else if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno",0
844,"<S2SV_ModStart> ; if ( safe_mount ( hostpath, path, 0, MS_BIND, NULL, rootfs -> path? rootfs -> mount : <S2SV_ModEnd> NULL )!=",1
845,"<S2SV_ModStart> inode ) ; <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct kernel_lb_addr loc <S2SV_ModStart>. extLength && ( bh = udf_read_ptagged ( inode -> i_sb, & iinfo -> i_location, 0, & ident ) ) ) { if ( udf_read_ptagged ( inode -> i_sb, & iinfo -> i_location, 1, & ident ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( udf_read_ptagged ( inode -> i_sb, & iinfo -> i_location, 0, & ident ) ) { if ( ident == TAG_IDENT_FE || ident == TAG_IDENT_EFE ) { memcpy ( & iinfo -> i_location, & loc, sizeof ( struct fileEntry ) ) ; make_bad_inode ( inode ) ; return ; } fe = ( struct fileEntry * ) bh -> b_data ; efe = ( struct extendedFileEntry * )",0
846,"<S2SV_ModStart> get_uv_tx_size ( mbmi ) ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const left_uv = & lfm -> left_uv [ tx_size_uv ] ; uint16_t * const int_4x4_y = & lfm -> int_4x4_y [ tx_size_y ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv [ tx_size_uv ] ; int index = shift_uv ; for ( i = 0 ; i < w ; i ++ ) { vpx_memset ( & lfm -> lfl_y [ index ], filter_level, w ) ; index += 8 ;",0
847,"<S2SV_ModStart> dst_size ) { uint16_t <S2SV_ModEnd> namelen = strlen <S2SV_ModStart> data < data_end ) { if ( len >= data_end - data ) return - 1 ; len = data_end - data ; data += len ; } <S2SV_ModEnd> for ( ; <S2SV_ModStart> ; if ( data >= data_end <S2SV_ModEnd> ) return - <S2SV_ModStart> - 1 ; if ( data >= data_end <S2SV_ModEnd> ) return - <S2SV_ModStart> += size ; len = bytestream_get_be16 ( & data ) ; if ( len < 0 || size >= data_end - data <S2SV_ModEnd> ) return - <S2SV_ModStart> - 1 ; data += size ; if ( size == namelen &&! memcmp ( data - size, name, namelen ) ) { switch ( * data ++ ) { case AMF_DATA_TYPE_NUMBER : snprintf ( dst, dst_size, ""%g"", av_int2double ( AV_RB64 ( data ) ) ) ; break ; case AMF_DATA_TYPE_BOOL : snprintf ( dst, dst_size, ""%s"", * data? ""true"" : ""false"" ) ; break ; default : return - 1 ; } return 0 <S2SV_ModEnd> ; } <S2SV_",0
848,"<S2SV_ModStart> ( ) ; strcpy <S2SV_ModEnd> ( t1_buf_array, <S2SV_ModStart> t1_line_array ) ; t1_buf_ptr = eol ( t1_buf_array ) ; t1_line_ptr = eol ( t1_line_array ) ;",0
849,"<S2SV_ModStart> mq_flush_lock, flags ) ; fq -> flush_rq = flush_rq ;",0
850,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
851,"<S2SV_ModStart> NULL ; return <S2SV_ModEnd> match ( prog <S2SV_ModStart>, sub ) <S2SV_ModEnd> ; } <S2SV_null>",0
852,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF <S2SV_ModStart> / 2 ; if (! <S2SV_ModStart>, cc ) ) return 0 <S2SV_ModStart> wc ) ; return 1 ;",1
853,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
854,"<S2SV_ModStart> __be32 daddr ; struct ip_options_rcu * inet_opt <S2SV_ModStart> return 0 ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> return 0 ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. srr ) daddr = inet_opt -> opt. <S2SV_ModEnd> faddr ; rt",0
855,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
856,"<S2SV_ModStart> * mgr_hdl ; <S2SV_ModEnd> memset ( s_path <S2SV_ModStart> ) ) ; <S2SV_ModEnd> switch ( mgr <S2SV_ModStart> ; default : return FM_CONF_INIT_ERR ; } sprintf ( s_path, ""%s%s%d"", HSM_FM_SCK_PREFIX, mgr_prefix, hdl -> instance ) ; sprintf ( c_path, ""%s%s%d_C_%lu"", HSM_FM_SCK_PREFIX, mgr_prefix, hdl -> instance, ( long unsigned ) pid ) ; } if ( * mgr_hdl == NULL ) { if ( hcom_client_init ( mgr_hdl, s_path, c_path, 32768 )!= HSM_COM_OK ) { return FM_CONF_INIT_ERR ; } } if ( hcom_client_connect ( * mgr_hdl ) == HSM_COM_OK ) { hdl -> conx_mask |= mgr ; return FM_CONF_CONX_ERR ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
857,"<S2SV_ModStart> == NULL || replySize == NULL || <S2SV_ModStart> ) ) { ALOGW ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( <S2SV_ModStart> sizeof ( effect_param_t ) ) { ALOGW ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( <S2SV_ModStart> == NULL || replySize == sizeof ( effect_param_t ) ) { ALOGW ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( <S2SV_ModStart> * replySize < sizeof ( effect_param_t ) ) { ALOGW ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( <S2SV_ModStart> == NULL || replySize == sizeof ( effect_param_t ) ) { ALOGW ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; }",0
858,"<S2SV_ModStart> ""`%s\'"", option ) ; geometry = DestroyString ( geometry",0
859,"<S2SV_ModStart>! skb ) { atomic_sub ( optlen, & sk -> sk_omem_alloc ) ; <S2SV_ModStart> - EMSGSIZE ; atomic_sub ( optlen, & sk -> sk_omem_alloc ) ; } <S2SV_ModEnd> break ; case <S2SV_ModStart>! skb ) { atomic_sub ( optlen, & sk -> sk_omem_alloc ) ; <S2SV_ModStart> - EMSGSIZE ; atomic_sub ( optlen, & sk -> sk_omem_alloc ) ; <S2SV_ModEnd> } case IPV6_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
860,<S2SV_ModStart> berval ) ; if ( ret [ j ] == NULL ) { err = ENOMEM ; goto cleanup ; } <S2SV_ModStart> ++ ) { if ( ret [ j ] -> length > INT_MAX / sizeof ( struct berval ) ) { err = ENOMEM ; goto cleanup ; } <S2SV_ModStart> ++ ) { if ( ret [ j ] -> length > INT_MAX / sizeof ( struct berval ) ) { err = ENOMEM ; goto cleanup ; } <S2SV_ModStart> berval ) ) { ret [ j ] = k5 <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
861,"<S2SV_ModStart> OP_ENDCATCH ) ; emit ( J, F, OP_ENDTRY ) ;",1
862,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_row_idx <S2SV_ModStart> return ; } LIBXSMM_ASSERT ( 0!= l_row && 0!= l_column ) ;",1
863,"<S2SV_ModStart> 0x02 ) ; if ( crgram_len > SC_MAX_APDU_BUFFER_SIZE - 1 ) { if ( crgram_len > SC_MAX_APDU_BUFFER_SIZE - 1 ) { r = sc_transmit_apdu ( card, & apdu ) ; LOG_TEST_RET ( card -> ctx, r, ""APDU <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", SC_MAX_APDU_BUFFER_SIZE - 1 ) ; } else { if ( crgram_len > SC_MAX_APDU_BUFFER_SIZE - 1 ) { if ( crgram_len > SC_MAX_APDU_BUFFER_SIZE - 1 ) { r = sc_transmit_apdu ( card, & apdu ) ; LOG_TEST_RET ( card -> ctx, r, ""APDU <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", SC_MAX_APDU_BUFFER_SIZE - 1 ) ; } else { if ( crgram_len > SC_MAX_APDU_BUFFER_SIZE - 1 ) { r = sc_transmit_apdu ( card, &",0
864,"<S2SV_ModStart> uint8 result ; uint32 <S2SV_ModEnd> length ; STREAM <S2SV_ModStart> ; STREAM s ; struct stream packet <S2SV_ModStart> return False ; packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> connect <S2SV_blank> id <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",1
865,"<S2SV_ModStart> ; if ( status == NULL ) status = ""UNKNOWN_REASON"" <S2SV_ModEnd> ; errcode = <S2SV_ModStart> goto no_ticket ; if ( status == NULL ) status = ""UNKNOWN_REASON"" <S2SV_ModEnd> ; newtransited = <S2SV_ModStart> goto no_ticket ; if ( status == NULL ) status = ""UNKNOWN_REASON"" <S2SV_ModEnd> ; errcode = <S2SV_ModStart> goto no_ticket ; if ( status == ""UNKNOWN_REASON"" <S2SV_ModEnd> ) errcode = <S2SV_ModStart> goto no_ticket ; if ( status == NULL ) status = ""UNKNOWN_REASON"" <S2SV_ModEnd> ; newtransited = <S2SV_ModStart> goto no_ticket ; if ( status == NULL ) status = ""UNKNOWN_REASON"" <S2SV_ModEnd> ; errcode = <S2SV_ModStart> goto no_ticket ; if ( status == NULL ) status = ""UNKNOWN_REASON"" <S2SV_ModEnd> ; newtransited = <S2SV_ModStart> goto no_ticket ; if ( status == ""UNKNOWN_REASON"" <S2SV_ModEnd> ) errcode = <S2SV_ModStart> goto no_ticket ; if ( status == NULL ) status = ""UNKNOWN_REASON"" <S2SV_ModEnd> ; if (",0
866,<S2SV_ModStart> <= 0x7FFF ) && ( ( ( c >= 0x100 ) && ( c <= 0x7FFF ) ) || ( ( c >= 0x7FFF ) && ( ( c >= 0x7FFF ) && ( ( c >= 0x7FFF ) && ( ( c >= 0x7FFF ) && ( ( c >= 0x7FFF ) && ( ( c >= 0x7FFF ) && ( c <= 0x7FFF ) ) ) || ( ( c >= 0x10000 ) && ( c <= 0xEFFFF ) ) ) ) ) { if ( ( ( c >= 0x200C ) && ( c <= 0x218F ) ) && ( ( c >= 0x3001 ) && ( c <= 0x2FEF ) ) && ( ( c >= 0x3001 ) && ( c <= 0x3FFF ) ) && ( ( c >= 0x10000 ) && ( c <= 0xEFFFF ) ) ) { return ( NULL ) ; },0
867,"<S2SV_ModStart> I40E_ERR_RX ; } if ( ctxt. uplink_seid!= vsi -> back -> hw. pf_id ) { dev_err ( & vdev -> dev, ""Invalid <S2SV_blank> uplink <S2SV_blank> seid: <S2SV_blank> %d\\n"", ctxt. uplink_seid ) ; return - EINVAL ; } <S2SV_ModStart> ; if ( ctxt. uplink_seid!= vsi -> back -> hw. pf_id ) { dev_err ( & vdev -> dev, ""Invalid <S2SV_blank> uplink <S2SV_blank> seid: <S2SV_blank> %d\\n"", vsi -> back -> hw. pf_id ) ; return - EINVAL ; } <S2SV_ModStart> ; if ( ctxt. uplink_seid!= vsi -> back -> hw. pf_id ) { dev_err ( & vdev -> dev, ""Invalid <S2SV_blank> uplink <S2SV_blank> seid: <S2SV_blank> %d\\n"", ctxt. uplink_seid ) ; return - EINVAL ; }",0
868,<S2SV_ModStart> * rsize >= 18 <S2SV_ModEnd> && rdesc [,1
869,<S2SV_ModStart> & new_map ) <S2SV_ModEnd> ) goto out <S2SV_ModStart> lower_first ; } ret = sort_idmaps ( & new_map ) ; if ( ret < 0 ) goto out ;,1
870,"<S2SV_ModStart> } } } eprintf ( ""E01"" ) ;",0
871,"<S2SV_ModStart> sr ) { <S2SV_ModEnd> uint16_t StructSize ; <S2SV_ModStart> ) ; } smb_ofile_flush ( sr, <S2SV_ModEnd> sr -> fid_ofile <S2SV_ModStart> sr -> fid_ofile <S2SV_ModEnd> ) ; (",1
872,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
873,<S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags,0
874,"<S2SV_ModStart> addrtype = TIPC_ADDR_ID ; memset ( & addr -> addr, 0, sizeof ( addr -> addr ) )",1
875,"<S2SV_ModStart> ( user_alloc && ( <S2SV_ModStart> PAGE_SIZE - 1 ) ) ||! access_ok ( VERIFY_WRITE, mem -> userspace_addr, mem -> memory_size",1
876,<S2SV_ModStart> ) NULL ) ;,0
877,"<S2SV_ModStart> } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Malformed <S2SV_blank> request, <S2SV_blank> aborting"" ) ; return NULL ; } if ( <S2SV_ModStart> } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Malformed <S2SV_blank> request, <S2SV_blank> aborting"" ) ; return NULL ; } if ( <S2SV_ModStart> } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Malformed <S2SV_blank> request, <S2SV_blank> aborting"" ) ; return NULL ; } if ( <S2SV_ModStart> } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Malformed <S2SV_blank> request, <S2SV_blank> aborting"" ) ; return NULL ; } if ( <S2SV_ModStart> } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Malformed <S2SV_blank> request, <S2SV_blank> aborting"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC",0
878,"<S2SV_ModStart> len ) { <S2SV_ModEnd> char * buf <S2SV_ModStart> char * p <S2SV_ModEnd> ; if ( <S2SV_ModStart> char * end <S2SV_ModEnd> ; if ( <S2SV_ModStart> & 0x80 ) { if ( p - buf > Py_SIZE ( u ) ) { Py_DECREF ( w ) ; return NULL ; } <S2SV_ModStart> += 5 ; if ( p - buf > Py_SIZE ( u ) ) { Py_DECREF ( w ) ; } } else { * p ++ = * s ++ ; } } if ( p - buf > Py_SIZE ( u ) ) { Py_DECREF ( w ) ; } } if ( p - buf <= Py_SIZE ( u ) ) { Py_DECREF ( w ) ; } else { * p ++ = * s ++ ; } } len = p - buf ; s = buf ; return PyUnicode_DecodeUnicodeEscape ( s, len, NULL ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
879,"<S2SV_ModStart> 0 ) { if ( strings_size > ( ( record_data_size - 4 ) - strings_offset ) ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_RUNTIME, LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS, ""%s: <S2SV_blank> strings <S2SV_blank> size <S2SV_blank> value <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds."", function ) ; return ( - 1 ) ; } <S2SV_ModStart> 0 ) { if ( strings_size > ( ( record_data_size - 4 ) - strings_offset ) ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_RUNTIME, LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS, ""%s: <S2SV_blank> strings <S2SV_blank> size <S2SV_blank> value <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds."", function ) ; return ( - 1 ) ; } if ( <S2SV_ModStart> 0 ) { if ( user_sid_size > ( ( record_data_size - 4 ) - user_sid_offset ) ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_RUNTIME, LIBCERROR_RUNTIME_ERROR_VALUE_OUT",0
880,"<S2SV_ModStart> WaveHeader WaveHeader ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
881,"<S2SV_ModStart> char * buff ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } buff",0
882,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ;,0
883,<S2SV_ModStart> ~ SNDRV_TIMER_IFLG_RUNNING ; list_del_init ( & timeri -> ack_list ) ; list_del_init ( & timeri -> active_list ) ;,1
884,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart> NO, DISPLAYED <S2SV_ModEnd> } wrerrno = <S2SV_ModStart> ; setimes : <S2SV_ModEnd> ( void ) <S2SV_ModStart> ( void ) <S2SV_ModEnd> umask ( 0 <S2SV_ModStart> ( void ) <S2SV_ModEnd> umask ( 0 <S2SV_ModStart> ( void ) <S2SV_ModEnd> umask ( 0 <S2SV_ModStart> ( void ) <S2SV_ModEnd> umask ( 0 <S2SV_ModStart> ( void ) <S2SV_ModEnd> umask ( 0 <S2SV_ModStart> ( void ) <S2SV_ModEnd> umask ( 0 <S2SV_ModStart> ( void ) <S2SV_ModEnd> umask ( 0 <S2SV_ModStart> ( void ) <S2SV_ModEnd> umask ( 0 <S2SV_ModStart> ( void ) <S2SV_ModEnd> umask ( 0 <S2SV_ModStart> ( void ) <S2SV_ModEnd> umask ( 0 <S2SV_ModStart> ( void ) <S2SV_ModEnd> umask ( 0 <S2SV_ModStart> ( void ) <S2SV_ModEnd> umask ( 0 <S2SV_ModStart> ( void ) <S2SV_ModEnd> umask ( 0 <S2SV_ModStart> ( void ) <S2SV_ModEnd> umask ( 0 <S2SV_ModStart> ( void ) <S2SV_ModEnd> umask ( 0 <S2SV_ModStart> ( void ) umask ( 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( void ) <S2SV_ModEnd> umask ( 0 <S2SV_ModStart> ( void ) <S2SV_ModEnd> umask ( 0 <S2SV_ModStart> ( void ) <S2SV_ModEnd> umask ( 0 <S2SV_ModStart> ( void ) <S2SV_ModEnd> umask ( 0 <S2SV_ModStart> ( void ) <S2SV_ModEnd> umask ( 0 <S2SV_ModStart> ( void ) <S2SV_ModEnd> umask ( 0 <S2SV_ModStart> ( void ) umask ( 0 <S2SV_ModEnd> ) ; }",0
885,"<S2SV_ModStart> } else if ( flags_to_bitmask ( target, 0 ) <S2SV_ModEnd> == NULL ) <S2SV_ModStart> else if ( flags_to_bitmask ( target, 0 ) <S2SV_ModEnd> == NULL ) <S2SV_ModStart> else if ( flags_to_bitmask ( target, 0 ) <S2SV_ModEnd> == NULL ) <S2SV_ModStart> else if ( flags_to_bitmask ( target, 0 ) <S2SV_ModEnd> == NULL ) <S2SV_ModStart> else if ( flags_to_bitmask ( target, 0 ) <S2SV_ModEnd> == NULL )",0
886,<S2SV_ModStart> -> buffer ; if (! ctx -> gf128 ) return - ENOKEY ;,1
887,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) goto error ; if (,0
888,"<S2SV_ModStart> null_server ; int need_error_free = 0 ; int local_rcache = 0, local_authcon = 0 ; int problem = 0 ; if ( ( retval = krb5_read_message ( context, fd, & inbuf ) ) ) return ( retval ) ; if ( strcmp ( inbuf. data, sendauth_version ) ) { problem = KRB5_SENDAUTH_BADAUTHVERS ; response = 1 ; } else if ( ( retval = krb5_read_message ( context, fd, & inbuf ) ) ) return ( retval ) ; if ( appl_version && strcmp ( inbuf. data, appl_version ) ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } else { if ( version &&! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } } if ( flags & KRB5_RECVAUTH_SKIP_APPLVERS ) { if (! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 1 ; } if ( retval = krb5_read_message ( context, fd, &",0
889,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
890,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; } ret",1
891,<S2SV_ModStart> dptr ++ = ROSE_CALL_REQ_ADDR_LEN_VAL <S2SV_ModEnd> ; memcpy (,1
892,<S2SV_ModStart> = new_ns ; new_ns -> mounts ++ ;,1
893,<S2SV_ModStart> = 0 ; if ( ( width & 0xf0 )!= 0 ) width += 16 ; if ( ( height & 0xf0 )!= 0 ) height += 16 ; if ( ( width & 0xf0 )!= 0 ) height += 16 ; if ( ( height & 0xf0 )!= 0 ) height += 16 ; if ( ( width & 0xf0 )!= 0 ) width += 16 ; if ( ( height & 0xf0 )!= 0 ) height += 16 ; if ( ( height & 0xf0 )!= 0 ) height += 16 ; if ( ( width & 0xf0 )!= 0 ) width += 16 ; if ( ( height & 0xf0 )!= 0 ) height += 16 ; if ( ( height & 0xf0 )!= 0 ) height += 16 ; if ( ( width & 0xf0 )!= 0 ) width += 16 ; if ( ( height & 0xf0 )!= 0 ) height += 16 ; if ( ( width & 0xf0 )!= 0 ) width += 16 ; if ( ( height & 0xf0 )!= 0 ) height += 16 ; if ( ( height & 0xf0 )!= 0 ) height += 16 ; if ( ( width &,0
894,<S2SV_ModStart> ; zip_object_handlers. get_gc = php_zip_get_gc ; zip_object_handlers.,1
895,<S2SV_ModStart> case RXE_MEM_TYPE_FMR : if <S2SV_ModEnd> ( iova < <S2SV_ModStart> mem -> iova || length > mem -> length || iova > <S2SV_ModEnd> mem -> iova <S2SV_ModStart> mem -> length - length ) return - EFAULT ; return <S2SV_ModEnd> 0 ; default,1
896,"<S2SV_ModStart> ( ndo, ""%s"", icmp6_tstr <S2SV_ModEnd> ) ) ;",0
897,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",1
898,<S2SV_ModStart> sent = 0 <S2SV_ModEnd> ; smb_msg.,1
899,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> buffer_pipe_buf_get ( struct <S2SV_ModStart> -> private ; if ( ref -> ref > INT_MAX / 2 ) return false ; <S2SV_ModStart> ref ++ ; return true ;,1
900,<S2SV_ModStart> fs -> clusters + <S2SV_ModEnd> 1 ) get_fat,1
901,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
902,<S2SV_ModStart> sk_nulls_node ) ; sk_nulls_node_init ( & sk -> sk_nulls_node ) ;,1
903,<S2SV_ModStart> } ps_dec -> u2_total_mbs_coded += u1_num_mbs ; if ( ps_dec -> u2_total_mbs_coded > ps_dec -> ps_cur_slice -> u1_slice_size ) { ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> ps_cur_slice -> u1_slice_size = u1_num_mbs ; ps_dec -> ps_cur_slice -> u1_slice_type = u1_inter_mb_type ; ps_dec -> ps_cur_slice -> u1_mbaff_frame_flag = u1_deblk_mb_type ; ps_dec -> ps_cur_slice -> u1_mbaff_frame_flag = u1_mbaff ; ps_dec -> ps_cur_slice -> u1_slice_type = u1_slice_type ; ps_dec -> ps_cur_slice -> u1_slice_num = u1_num_mbs ; ps_dec -> ps_cur_slice -> u1_mbaff_frame_flag = u1_,0
904,<S2SV_ModStart> (! mm ||! mm -> env_end,1
905,"<S2SV_ModStart> inode * inode, int relocated ) { int result = relocated? parse_rock_ridge_inode_internal ( de, inode, 0 ) : 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart>, inode, relocated? parse_rock_ridge_inode_internal ( de, inode, relocated? parse_rock_ridge_inode_internal ( de, inode, 14 ) : 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) { result = relocated? parse_rock_ridge_inode_internal ( de, inode, 14 ) : <S2SV_ModEnd> parse_rock_ridge_inode_internal ( de <S2SV_ModStart>, inode, relocated? parse_rock_ridge_inode_internal ( de, inode, relocated? parse_rock_ridge_inode_internal ( de, inode, relocated? parse_rock_ridge_inode_internal ( de, inode, 14 ) : 0 <S2SV_ModEnd> ) ; }",0
906,<S2SV_ModStart> * inotify_new_group ( <S2SV_ModEnd> unsigned int max_events <S2SV_ModStart> -> inotify_data. fa = NULL <S2SV_ModEnd> ; group -> <S2SV_ModStart> -> inotify_data. user = get_current_user ( ) ; if ( atomic_inc_return ( & group -> inotify_data. user -> inotify_devs ) > inotify_max_user_instances ) { fsnotify_put_group ( group ) ; return ERR_PTR ( - EMFILE ) ; } <S2SV_ModEnd> return group ;,1
907,<S2SV_ModStart> [ p ] && in -> linesize [ p ],1
908,"<S2SV_ModStart> ) ; } if ( pcount > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, ( int ) ( MaxAllocSize / sizeof ( Pairs ) ) ) ) ;",0
909,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
910,"<S2SV_ModStart> EACCES ; } if ( value_regno >= 0 && is_pointer_value ( env, value_regno ) ) { verbose ( env, ""R%d <S2SV_blank> leaks <S2SV_blank> addr <S2SV_blank> into <S2SV_blank> map\\n"", value_regno ) ; mark_reg_unknown ( env, regs, value_regno ) ; } else if ( value_regno >= 0 && is_pointer_value ( env, value_regno ) ) { verbose ( env, ""R%d <S2SV_blank> leaks <S2SV_blank> addr <S2SV_blank> into <S2SV_blank> ctx\\n"", value_regno ) ; mark_reg_unknown ( env, regs, value_regno ) ; } else if ( value_regno >= 0 && is_pointer_value ( env, value_regno ) ) { verbose ( env, ""R%d <S2SV_blank> leaks <S2SV_blank> addr <S2SV_blank> into <S2SV_blank> ctx\\n"", value_regno ) ; return - EACCES ; }",0
911,"<S2SV_ModStart> uint16 strip, nstrips ; if ( nstrips == 0 ) { TIFFError ( """", ""TIFF <S2SV_blank> number <S2SV_blank> of <S2SV_blank> strips <S2SV_blank> is <S2SV_blank> zero!"" ) ; return 0 ; }",0
912,<S2SV_ModStart> base_name ) ; char need_to_append_dot ; struct search_domain * dom ; if (! base_len ) return NULL ; <S2SV_ModEnd> need_to_append_dot = base_name <S2SV_ModStart> : 1 ; <S2SV_ModEnd> for ( dom,1
913,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
914,<S2SV_ModStart> goto out ; <S2SV_ModEnd> err = - <S2SV_ModStart> goto out ; <S2SV_ModEnd> } caif_read_lock (,0
915,"<S2SV_ModStart> one, offset <S2SV_ModEnd> ; ssize_t count <S2SV_ModStart> -> rows ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> -> columns ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> -> rows ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> -> rows ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> -> rows ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> -> rows ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> -> rows ; if ( number_planes_filled > GetBlobSize ( image ) ) Throw",0
916,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> UINT32 originalSize ; if (! context ) return FALSE ; <S2SV_ModStart> == 0 ) { if ( context -> priv -> PlaneBuffersLength < originalSize ) return FALSE ; <S2SV_ModStart> 0xFF ) ; } <S2SV_ModStart> < originalSize ) { if (! <S2SV_ModStart> i ], context -> priv -> PlaneBuffersLength, originalSize ) ) return FALSE ; } else { if ( context -> priv -> PlaneBuffersLength < originalSize ) return FALSE ; <S2SV_ModEnd> CopyMemory ( context <S2SV_ModStart> originalSize ) ; } <S2SV_ModStart> planeSize ; } return TRUE ;",1
917,<S2SV_ModStart> policy ) { if (! inode_owner_or_capable ( inode ) ) return - EACCES ;,1
918,"<S2SV_ModStart> value ) { if ( strlen ( value ) > 1 ) { <S2SV_ModStart> value ) ; } else { httpSetHostName ( state -> host, stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) ; httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
919,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
920,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { * addr_len = sizeof ( * sin6 ) ; return sizeof ( * sin6 ) ; } <S2SV_ModEnd> if ( flags <S2SV_ModStart> MSG_TRUNC ) { if ( sin6 ) { <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
921,"<S2SV_ModStart> ||! prev_hash || <S2SV_ModEnd>! coinbase1 || <S2SV_ModStart>! ntime ) <S2SV_ModEnd> { if ( <S2SV_ModStart> if ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ; goto out ; } cg_wlock ( & pool -> data_lock ) ; cb1 = kmalloc ( cb1_len, GFP_KERNEL ) ; cb2 = kmalloc ( cb2_len, GFP_KERNEL ) ;",0
922,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
923,"<S2SV_ModStart> size ) { size_t res ; if ( check_mul_overflow ( num, size, & res ) ) abort ( ) ; <S2SV_ModStart> = malloc ( res <S2SV_ModEnd> ) ; if <S2SV_ModStart> { memset ( res <S2SV_ModEnd>, '\\0',",0
924,<S2SV_ModStart> ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
925,"<S2SV_ModStart> unused ) { <S2SV_ModEnd> _Py_IDENTIFIER ( __dict__ <S2SV_ModStart> __dict__ ) ; _Py_IDENTIFIER <S2SV_ModEnd> ( __dict__ ) <S2SV_ModStart> * dict = _PyObject_GetAttrId <S2SV_ModEnd> ( self, <S2SV_ModStart> ( self, & PyId___dict__ ) ; if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } <S2SV_ModEnd> return res ;",0
926,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
927,"<S2SV_ModStart> -> private_data ; <S2SV_ModEnd> u32 flags = <S2SV_ModStart> ) ; case PERF_EVENT_IOC_PERIOD : return perf_event_period ( event, ( u64 __user * ) arg ) ; case PERF_EVENT_IOC_SET_FILTER : return perf_event_set_filter ( event, ( void __user * ) arg ) ; case PERF_EVENT_IOC_GET_ID : { u64 id = primary_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; return 0 ; } case PERF_EVENT_IOC_SET_OUTPUT : { int ret ; ret = perf_event_set_output ( event, NULL ) ; fdput ( output ) ; ret = perf_event_set_output ( event, output_event ) ; } else { ret = perf_event_set_output ( event, NULL ) ; } return ret ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
928,<S2SV_ModStart> sacked_out ) ; if ( newly_acked_sacked <= 0 ) return ;,0
929,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> * cm, PREDICTION_MODE <S2SV_ModEnd> y_mode ) { <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode",0
930,<S2SV_ModStart> mask ) { struct skcipher_tfm * tfm = crypto_alloc_skcipher ( type ) ; if (! tfm ) { crypto_free_skcipher ( tfm ) ; return NULL ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
931,"<S2SV_ModStart> EINVAL ; } if (! sha -> digest ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 5, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 6, 0 ) ) return - EINVAL ; ctx = & sha -> ctx ; } else if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 6, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 5, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 6, 0 ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) return - EINVAL ; block_size = SHA384_BLOCK_SIZE ; } else if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 6, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 6, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 6, 0 )",0
932,"<S2SV_ModStart> c -> tile_width <S2SV_ModEnd>, 16 ) <S2SV_ModStart>, 16 ) * 3",1
933,"<S2SV_ModStart> iv ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
934,"<S2SV_ModStart> JAS_CAST ( jpc_fix_t, JAS_CAST ( jpc_fix_t, JAS_CAST ( jpc_fix_t, JAS_CAST ( jpc_fix_t, JAS_CAST ( jpc_fix_t, JAS_CAST ( jpc_fix_t, JAS_CAST ( jpc_fix_t, JAS_CAST ( jpc_fix_t, JAS_CAST ( jpc_fix_t, JAS_CAST ( jpc_fix_t, JAS_CAST ( jpc_fix_t, JAS_CAST ( jpc_fix_t, JAS_CAST ( jpc_fix_t, JAS_CAST ( jpc_fix_t, JAS_CAST ( jpc_fix_t, JAS_CAST ( jpc_fix_t, JAS_CAST ( jpc_fix_t, JAS_CAST ( jpc_fix_t, JAS_CAST ( jpc_fix_t, JAS_CAST ( jpc_fix_t, JAS_CAST ( jpc_fix_t, J",0
935,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
936,"<S2SV_ModStart> p ) { return <S2SV_ModEnd> chdlc_print ( ndo <S2SV_ModStart>, p, h -> len <S2SV_ModEnd> ) ; }",1
937,"<S2SV_ModStart> = 0 ; rc = cifs_read_super ( cifs_sb, xid, & cifs_super -> smb_cache, & cifs_sb -> smb_cache, & cifs_sb -> local_nls ) ; if ( rc <S2SV_ModEnd> ) goto out <S2SV_ModStart> out_nls ; } rc = cifs_write_super ( cifs_sb, xid, & cifs_super -> smb_cache, & cifs_sb -> smb_cache, & cifs_sb -> smb_cache, & cifs_sb -> smb_state ) ; if ( rc <S2SV_ModEnd> ) goto out_nls <S2SV_ModStart> cifs_sb -> smb_cache <S2SV_ModEnd>, & cifs_sb <S2SV_ModStart> cifs_sb -> smb_cache <S2SV_ModEnd>, & cifs_sb <S2SV_ModStart> cifs_write_super ( cifs_sb, xid, & cifs_super -> smb_cache, & cifs_sb -> smb_cache, & cifs_sb -> smb_cache, & cifs_sb -> smb_state ) ;",0
938,<S2SV_ModStart> -> len && SKB_EXT_ERR ( skb ) -> opt_stats <S2SV_ModEnd> ) put_cmsg (,1
939,"<S2SV_ModStart> ) ) ; raptor_sax2_set_option ( rdf_xml_parser -> sax2, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES, NULL, RAPTOR_OPTIONS_GET_NUMERIC ( rdf_parser, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES ) ) ;",1
940,"<S2SV_ModStart> OPENSSL_NO_PSK if ( alg_k & SSL_kDHE ) { al = SSL_AD_UNEXPECTED_MESSAGE ; SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ; SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; goto f_err ; } if ( alg_k & SSL_kECDHE ) { al = SSL_AD_UNEXPECTED_MESSAGE ; SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ; SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; goto f_err ; }",0
941,<S2SV_ModStart> { return SECURE_ELEMENT_ERROR_NPE ; } if ( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE ) { return SECURE_ELEMENT_ERROR_BUF_SIZE,1
942,"<S2SV_ModStart> 0 ) { if ( iframe -> max_settings > session -> max_settings ) { rv = nghttp2_session_set_max_settings ( session, 0, ( size_t ) ( iframe -> max_settings - session -> min_settings ) ) ; if ( nghttp2_is_fatal ( rv ) { return rv ; } } break ; case NGHTTP2_IB_READ_SETTINGS : DEBUGF ( ""recv: <S2SV_blank> [IB_READ_SETTINGS]\\n"" ) ; if ( iframe -> max_settings > session -> max_settings ) { rv = nghttp2_session_set_max_settings ( session, ( size_t ) ( iframe -> max_settings - session -> min_settings ) ) ; if ( nghttp2_is_fatal ( rv ) { return rv ; } break ; case NGHTTP2_IB_READ_CLIENT_MAGIC : if ( memcmp ( & NGHTTP2_CLIENT_MAGIC [ NGHTTP2_CLIENT_MAGIC_LEN - iframe -> payloadleft ], in, readlen )!= 0 ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } break ;",0
943,<S2SV_ModStart> = ucounts ; new_ns -> mounts = 0 ; new_ns -> pending_mounts = 0 ;,1
944,"<S2SV_ModStart> += dif ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
945,"<S2SV_ModStart> ; if ( cpu_has_feature ( X86_FEATURE_ARCH_PERFMON ) && x86_pmu. num_counters > INTEL_MAX_PERFMON_EVENTS ) x86_pmu. num_counters_fixed = MIN ( INTEL_MAX_PERFMON_EVENTS, x86_pmu. num_counters ) ; else if ( x86_pmu. num_counters_fixed == INTEL_MAX_PERFMON_EVENTS ) x86_pmu. num_counters_fixed = MIN ( INTEL_MAX_PERFMON_EVENTS, x86_pmu. num_counters ) ; if ( x86_pmu. num_counters_fixed == MAX ( INTEL_MAX_PERFMON_EVENTS, x86_pmu. num_counters ) ) x86_pmu. num_counters_fixed = MAX ( INTEL_MAX_PERFMON_EVENTS, x86_pmu. num_counters ) ;",0
946,"<S2SV_ModStart>. dimensions ; # ifndef STB_VORBIS_DIVIDES_IN_RESIDUE uint8 * * part_classdata = ( uint8 * * * ) temp_block_array ( f, f -> channels, part_read * sizeof ( * * part_classdata ) ) ; # else int * * classifications = ( int * * ) temp_block_array ( f, f -> channels, part_read * sizeof ( * * classifications ) ) ; # endif",0
947,"<S2SV_ModStart> ) ; u32 last_oow_ack_time <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { challenge_timestamp = last_oow_ack_time ; challenge_count = 0 ; } if ( ++ challenge_count <= sysctl_tcp_challenge_ack_limit ) { NET_INC_STATS ( sock_net ( sk ), LINUX_MIB_TCPCHALLENGEACK ) ; tcp_send_ack ( sk ) ; } else if ( tcp_oow_rate_limited ( sock_net ( sk ), skb, LINUX_MIB_TCPACKSKIPPEDCHALLENGE, & tp -> last_oow_ack_time ) ) return ; if ( ++ challenge_count <= sysctl_tcp_challenge_ack_limit ) { NET_INC_STATS ( sock_net ( sk ), LINUX_MIB_TCPCHALLENGEACK ) ; }",0
948,"<S2SV_ModStart> struct llc_pktinfo info ; memset ( & info, 0, sizeof ( info ) )",1
949,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, tran_low_t <S2SV_ModEnd> * * tp <S2SV_ModStart> * tp, tran_low_t <S2SV_ModEnd> * stop ) <S2SV_ModStart> t ] ; tran_high_t <S2SV_ModEnd> i = 0 <S2SV_ModStart> 0 ; int v = a -> value ; int n = a -> len ; if ( p -> skip_eob_node ) { n -= p -> skip_eob_node ; i = 2 * p -> skip_eob_node ; } if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int bits = v >> n ; vwrite_tree ( w, vp9_coef_tree, p -> context_tree, bits, len, i ) ; vp9_write_tree ( w, vp9_coef_con_tree, vp9_pareto8_full [ p -> context_tree [ PIVOT_NODE ], v, n - len, 0 ) ; } else { vpx_write_tree ( w, vp9_coef_tree, p -> context_tree",0
950,"<S2SV_ModStart>, uncompressed_hdr_size ; write_uncompressed_header ( cpi, & wb ) ; struct vp9_write_bit_buffer saved_wb ; write_uncompressed_header ( cpi, & wb ) ; saved_wb = wb ; write_uncompressed_header ( cpi, & wb ) ; saved_wb = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> 16 ) ; vpx_rb_bytes_written <S2SV_ModEnd> ( & wb <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> uncompressed_hdr_size = vp9_rb_bytes_written <S2SV_ModEnd> ( & wb <S2SV_ModStart> ; vpx_compute_update_table ( ) ; vpx_clear_system_state ( ) ; first_part_size = write_compressed_header ( cpi, data ) ; data += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> ( ) ; vpx_clear_system_state <S2SV_ModEnd> ( ) ;",0
951,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
952,"<S2SV_ModStart> ret, n <S2SV_ModEnd> ; quirks = <S2SV_ModStart> ENODEV ; } if ( hdesc -> bLength < sizeof ( struct hid_descriptor ) ) return - EINVAL ; <S2SV_ModStart> hdesc -> bCountryCode ; if ( hdesc -> bLength < sizeof ( struct hid_descriptor ) ) return - EINVAL ; <S2SV_ModStart> hdesc -> bCountryCode ; if ( hdesc -> bLength < sizeof ( struct hid_descriptor ) ) return - EINVAL ; for ( n = 0 ; n < hdesc -> bNumDescriptors ; n ++ ) if ( hdesc -> desc [ n ]. bDescriptorType == HID_DT_REPORT ) rsize = le16_to_cpu ( hdesc -> desc [ n ]. wDescriptorLength ) ; if ( rsize < sizeof ( struct hid_report ) || rsize > HID_MAX_DESCRIPTOR_SIZE ) { dbg_hid ( ""weird <S2SV_blank> size <S2SV_blank> of <S2SV_blank> report <S2SV_blank> descriptor <S2SV_blank> (%u)\\n"", rsize ) ; return - EINVAL ; }",0
953,"<S2SV_ModStart> ) { struct ikev2_id <S2SV_ModEnd> id ; int <S2SV_ModStart> * typedata ; ND_TCHECK2 ( * ext, sizeof ( struct ikev2_id ) <S2SV_ModEnd> ) ; UNALIGNED_MEMCPY <S2SV_ModStart> ( * ext, sizeof ( struct ikev2_id ) <S2SV_ModEnd> ) ; ikev2_pay_print",0
954,"<S2SV_ModStart> group_dead ) ; module_put ( tsk -> module ) ; if ( group_dead ) module_put ( tsk -> module ) ; # ifdef CONFIG_FUTEX if ( unlikely ( tsk -> robust_list ) ) exit_robust_list ( tsk ) ; # endif if ( group_dead ) acct_collect ( code, group_dead ) ; if ( group_dead ) acct_collect ( code, group_dead ) ; # ifdef CONFIG_COMPAT if ( unlikely ( tsk -> compat_robust_list ) ) compat_exit_robust_list ( tsk ) ; # ifdef CONFIG_NUMA if ( unlikely ( tsk -> robust_list ) ) exit_robust_list ( tsk ) ; # endif if ( group_dead ) acct_collect ( code, group_dead ) ; if ( group_dead ) acct_collect ( code, group_dead ) ; if ( group_dead ) acct_collect ( code, group_dead ) ; if ( group_dead ) { if ( tsk -> signal -> real_timer ) hrtimer_cancel ( & tsk -> signal -> real_timer )",0
955,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void * <S2SV_ModStart> data ) { <S2SV_ModEnd> add_preferred_base_object ( name <S2SV_ModStart> |= OBJECT_ADDED ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
956,"<S2SV_ModStart> ; if (! jas_safe_size_mul3 ( cmpt -> width, cmpt -> height, & cmpt -> width ) ||! jas_safe_size_mul4 ( cmpt -> sampperx, & cmpt -> samppery ) ) { jas_eprintf ( ""invalid <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> %d\\n"", sizeof ( cmpt -> sampperx ), & cmpt -> height ) ; goto error ; } if (! jas_safe_size_mul3 ( cmpt -> width, cmpt -> height, & cmpt -> prec ) ) { jas_eprintf ( ""invalid <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> %d\\n"", & cmpt -> width ) ; goto error ; } if (! jas_safe_size_mul4 ( cmpt -> width, cmpt -> height, & cmpt -> height ) ) { jas_eprintf ( ""invalid <S2SV_blank> height <S2SV_blank> %d\\n"", sizeof ( cmpt -> height ) ) ; goto error ; }",0
957,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
958,"<S2SV_ModStart>, fft_jmp ; WORD32 xt0_0, yt0_0, yt1_0, yt2_0 ; WORD32 xh0_0, xh1_0, xh20_0, xh21_0, xl0_0, xl1_0, xl20_0, xl21_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1 ; x_l2_0, x_l2_1 ; x_h2_0, x_h2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1 ; x_l1_1 = x [ l1 ] ; x_l2_0 = x [ l2 ] ; x_h2_0 = x [ h2 ] ; x_h2_1 = x [ h2 ] ; x_h2_1 = x [ h2 ] ; x_h2_0 = x [ h2 ] ; x_h2_1 =",0
959,<S2SV_ModStart> ; if ( unlikely ( datalen - dp < 2 ) ) goto data_overrun_error ; if ( unlikely ( tag == ASN1_EOC ) ) goto invalid_eoc ; if ( -- indef_level <= 0 ) { if ( datalen - dp < 2 ) goto data_overrun_error ; goto next_tag ; } if ( unlikely ( len <= 0x7f ) { if ( datalen - dp < 2 ) goto data_overrun_error ; if ( len > datalen - dp ) goto data_overrun_error ; } if ( unlikely ( len == ASN1_INDEFINITE_LENGTH ) ) { if ( unlikely ( ( tag & ASN1_CONS_BIT ) == ASN1_PRIM << 5 ) ) goto indefinite_len_primitive ; indef_level ++ ; goto next_tag ; } if ( unlikely ( len == ASN1_INDEFINITE_LENGTH ) ) { if ( unlikely ( ( tag & ASN1_CONS_BIT ) == ASN1_PRIM << 5 ) ) goto indefinite_len_primitive ; indef_level ++ ; goto next_tag ; },0
960,<S2SV_ModStart> ) val ; <S2SV_ModEnd> memset ( ptr,1
961,<S2SV_ModStart> mntent ) { if ( IS_ERR ( mntent -> mnt_dir ) ) return PTR_ERR ( mntent -> mnt_dir ) ; else return 0 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
962,"<S2SV_ModStart> PHP_MD_CTX ctx ; if ( sig_len < sizeof ( buf ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_MD_CTX ctx ; if ( sig_len < sizeof ( buf ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_MD_CTX ctx ; if ( sig_len < sizeof ( buf ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_MD_CTX ctx ; if ( sig_len < sizeof ( buf ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_MD_CTX ctx ; if ( sig_len < sizeof ( buf ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; }",0
963,<S2SV_ModStart> && value [ n ] - min < field -> maxusage <S2SV_ModStart> && field -> value [ n ] - min < field -> maxusage <S2SV_ModStart> <= max <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
964,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
965,<S2SV_ModStart> if ( argReg > <S2SV_ModEnd> regsz ) { <S2SV_ModStart> regsz ) { return ;,1
966,"<S2SV_ModStart> ( req ) ) ; rb_hash_aset ( env, remote_addr_val, remote_addr ( req ) ) ; rb_hash_aset ( env, remote_port_val, remote_port ( req ) ) ; rb_hash_aset ( env,",0
967,"<S2SV_ModStart> 0 ) ; args -> rmtvaluelen <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> -> i_mount, args -> rmtvaluelen <S2SV_ModEnd> ) ; if <S2SV_ModStart> -> valuelen < args -> rmtvaluelen ) { args -> valuelen = args -> rmtvaluelen ; return XFS_ERROR ( ERANGE ) ; } args -> rmtvaluelen <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> -> i_mount, args -> rmtvaluelen <S2SV_ModEnd> ) ; return",0
968,"<S2SV_ModStart> ; size_t sz ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) { if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) return NULL ; }",0
969,"<S2SV_ModStart> endif int col_type <S2SV_ModEnd>, prepare_retval ; <S2SV_ModStart>, prepare_retval ; # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION imp_sth -> use_server_side_prepare = ( svp )? SvTRUE ( * svp ) : imp_dbh -> use_server_side_prepare ; if ( ( attribs && SvTRUE ( * svp ) ) { # if MYSQL_ASYNC imp_sth -> is_async = FALSE ; # else do_error ( sth, 2000, ""Async <S2SV_blank> support <S2SV_blank> was <S2SV_blank> not <S2SV_blank> built <S2SV_blank> into <S2SV_blank> this <S2SV_blank> version <S2SV_blank> of <S2SV_blank> DBD::mysql"", ""HY000"" ) ; # endif <S2SV_ModStart> } } } # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION imp_sth -> use_server_side_prepare = ( svp )? SvTRUE ( * svp ) : imp_dbh -> use_server_side_prepare ; if ( attribs && SvTRUE ( * svp ) ) { # if MYSQL_ASYNC imp_sth -> is_async = FALSE ; # else do_error ( sth, 2000, ""Async <S2SV_blank> support <S2SV_blank> was <S2SV_blank> not <S2SV_blank> built",0
970,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) &&! test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) &&",1
971,"<S2SV_ModStart> ) ) ; if ( LTXTQUERY_TOO_BIG ( state. num, state. sumlen ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""ltxtquery <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large"" ) ) ) ;",1
972,"<S2SV_ModStart> int need = 0 ; int space_left = 0 ; int <S2SV_ModStart> screen, { space_left = 4 } ) ; if ( space_left <= 0 ) { TRACE ( ( ""SaltTextAway <S2SV_blank> which=%d, <S2SV_blank> first=%d, <S2SV_blank> col=%d\\n"", which, first. row, first. col ) ) ; return ; } if_OPT_WIDE_CHARS ( screen, { space_left = 4 } ) ; if ( space_left <= 0 ) { TRACE ( ( ""SaltTextAway <S2SV_blank> which=%d, <S2SV_blank> first=%d, <S2SV_blank> col=%d\\n"", which, first. row ) ) ; if ( space_left <= 0 ) { TRACE ( ( ""SaltTextAway <S2SV_blank> which=%d, <S2SV_blank> first=%d, <S2SV_blank> col=%d\\n"", which, first. row ) ) ; return ; } <S2SV_ModEnd> if_OPT_WIDE_CHARS ( screen <S2SV_ModStart> { need *= 4 ; if ( space_left <= 0 ) { TRACE ( ( ""SaltTextAway <S2SV_blank> which=%d, <S2SV_blank> first=%d, <S2SV_blank> col=%d\\n"", which, first. row ) ) ; return ; } <S2SV_ModEnd> scp -> data_limit",0
973,<S2SV_ModStart> ; if (! EXT4_SB ( inode -> i_sb ) -> s_journal <S2SV_ModEnd> ) return 0 <S2SV_ModStart> i_orphan ) ; <S2SV_ModEnd> err = ext4_reserve_inode_write,0
974,"<S2SV_ModStart> char * str <S2SV_ModEnd>, int radix <S2SV_ModStart> 0.0000001 ; if ( len <= 0 ) { if ( isnan ( val ) ) strcpy ( str, ""NaN"", len ) ; else strcpy ( str, ""Infinity"", len ) ; } else { if ( val < 0 ) strcpy ( str, ""-Infinity"", len ) ; else strcpy ( str, ""Infinity"", len ) ; } else { if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ) ) { if ( -- len <= 0 ) { * str = 0 ; return ; } * ( str ++ ) = '-' ; val = - val ; } if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ) ; d = 1 ; while ( d * radix <= val ) d *= radix ; while ( d >= 1 ) { int v = ( int ) ( val / d ) ; val -= v * radix ; if ( v == radix - 1 ) v = radix - 1 ; if ( hasPt ) v = radix - 1 ; if ( v ==",0
975,"<S2SV_ModStart> ( f, ""PG%31[ <S2SV_blank> \\t]%c%c%31[ <S2SV_blank> \\t+-]%d%31[ <S2SV_blank> \\t]%d%31[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp,",1
976,"<S2SV_ModStart> ( size < 5 <S2SV_ModEnd> ) ASSERT ( <S2SV_ModStart> ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; char * result ; memcpy ( buf, ""DEADBEEF"", 8 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%5"", 12345 ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( length == 5 ) ; if ( size < 6 ) ASSERT ( result!= buf ) ; ASSERT ( memcmp ( buf + size, & ""DEADBEEF"" [ size ], 8 - size ) == 0 ) ; if ( result!= buf ) free ( result ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; char * result ; my_asnprintf ( buf, & length, ""%5"", 12345 ) ; ASSERT ( length == 5 ) ; ASSERT ( length == 6 ) ; if ( size < 6 ) ASSERT ( result!= buf ) ; ASSERT ( memcmp ( buf + size, & ""DEADBEEF"" [ size ], 8 - size ) == 0",0
977,<S2SV_ModStart> cycles ) ; <S2SV_ModEnd> if ( (,0
978,"<S2SV_ModStart> ( str, ""ID:"" <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, jslGetTokenValueAsString <S2SV_ModEnd> ( ), <S2SV_ModStart> ( str, jslGetTokenValueAsString <S2SV_ModEnd> ( ), <S2SV_ModStart> ( str, jslGetTokenValueAsString <S2SV_ModEnd> ( ),",0
979,"<S2SV_ModStart> } if ( ( st. st_mode & S_IFMT ) == S_IFREG ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> not <S2SV_blank> supported"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFLNK ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> not <S2SV_blank> supported"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFREG ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> not <S2SV_blank> supported"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFDIR ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> directory <S2SV_blank> or <S2SV_blank> device <S2SV_blank> not <S2SV_blank> supported"", g. inf ) ; return ; }",0
980,,1
981,"<S2SV_ModStart> * output ; MagickBooleanType status = MagickFalse ; <S2SV_ModStart> ) ; } input = fopen_utf8 ( argv [ i ], ""rb"" ) ; if ( input == ( FILE * ) NULL ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ i ] ) ; continue ; } for ( i = 2 ; i < ( ssize_t ) ( argc - 1 ) ; i ++ ) { input = fopen_utf8 ( argv [ i ], ""rb"" ) ; if ( input == ( FILE * ) NULL ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ i ] ) ; continue ; } for ( c = fgetc ( input ) ; c!= EOF ; c = fgetc ( input ) ) ( void ) fputc ( ( char ) c, output ) ; ( void ) fclose ( input ) ; ( void ) remove_utf8 ( argv [ i ] ) ; } ( void ) fclose ( output ) ; return ( status <S2SV_ModEnd> ) ; }",0
982,<S2SV_ModStart> ) { SvcInternal_t <S2SV_ModEnd> * const si,0
983,"<S2SV_ModStart> fail : ext3_msg ( sb, KERN_ERR, ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> journal <S2SV_blank> device <S2SV_blank> %s"", __bdevname ( dev, b ) ) ; blkdev_put ( bdev, FMODE_READ | FMODE_WRITE | FMODE_EXCL <S2SV_ModEnd> ) ; return",0
984,"<S2SV_ModStart> passwd * pwd, const char * prefix <S2SV_ModStart> = NULL ; <S2SV_ModEnd> pw_init ( ) <S2SV_ModStart> ( fp = safe_mkstemp <S2SV_ModEnd> ( & tmpname <S2SV_ModStart> atomic_dir ) ) == NULL ) return - 1 ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( lckpwdf ( ) < 0 ) goto fail ; pwf = fopen ( PASSWD_FILE, ""r"" ) ; if (! pwf ) goto fail ; namelen = strlen ( pwd -> pw_name ) ; while ( fgets ( linebuf, buflen, pwf )!= NULL ) { char * tmp ; buflen *= 2 ; if ( tmp == realloc ( linebuf, buflen ) ) break ; tmp = realloc ( tmp, buflen ) ; if ( tmp == NULL ) goto fail ; linebuf = tmp ; if ( fgets ( linebuf, buflen / 2, pwf ) == NULL ) break ; contlen = strlen ( linebuf ) ; if (! found && linebuf [ contlen ] == ':' &&! strncmp ( linebuf, pwd -> pw_name, namel",0
985,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, const",0
986,<S2SV_ModStart> s2 ) { size_t len = strlen ( s1 ) + 1U ; if ( len!= strlen ( s2 ) ) { return - 1 ; } return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
987,"<S2SV_ModStart> TRUE ; } Jid * jid_from = jid_create ( message -> from ) ; Jid * jid_to = jid_create ( to ) ; if (! jid_from ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> jid <S2SV_blank> for <S2SV_blank> Carbon"" ) ; return TRUE ; } const char * const stanza_from = xmpp_stanza_get_from ( stanza ) ; Jid * const stanza_from = xmpp_stanza_get_from ( stanza ) ; if (! stanza_from ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> stanza <S2SV_blank> from <S2SV_blank> for <S2SV_blank> Carbon"" ) ; return TRUE ; } char * stanza_from = xmpp_stanza_get_from ( stanza ) ; if (! stanza_from ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> stanza <S2SV_blank> from <S2SV_blank> for <S2SV_blank> Carbon"" ) ; return TRUE ; } char * const stanza_from = xmpp_stanza_get_from ( stanza ) ; if (! stanza_from ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> stanza <S2SV_blank> from <S2SV_blank> for <S2SV_blank> Carbon"" ) ; return TRUE ; } char *",0
988,"<S2SV_ModStart> badfmt ; } if ( sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) { addReplyError ( c, ""The <S2SV_blank> operating <S2SV_blank> system <S2SV_blank> is <S2SV_blank> not <S2SV_blank> able <S2SV_blank> to <S2SV_blank> handle <S2SV_blank> the <S2SV_blank> specified <S2SV_blank> number <S2SV_blank> of <S2SV_blank> clients, <S2SV_blank> try <S2SV_blank> with <S2SV_blank> %d"", ll ) ; return ; }",0
989,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
990,"<S2SV_ModStart> ) ) { global_options_print ( ) ; parse_service_option ( CMD_PRINT_HELP, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, <S2SV_ModStart> ) ) { global_options_print ( ) ; parse_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1,",0
991,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; BT_DBG (,1
992,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
993,"<S2SV_ModStart> md -> raw_packet == NULL ) { md -> encrypted = FALSE ; loglog ( RC_LOG_ERROR, ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; return ; } <S2SV_ModEnd> md -> raw_packet",0
994,<S2SV_ModStart> { if ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > MAX_BITSTREAM_BUFFER_SIZE ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = MAX_BITSTREAM_BUFFER_SIZE ; ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; } else { if ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; },0
995,<S2SV_ModStart> * zone ; size_t tilemap_size ; <S2SV_ModStart>. height ; tilemap_size = <S2SV_ModEnd> x_size * y_size <S2SV_ModStart> struct map_tile ) ; if ( x_size == 0 || tilemap_size / x_size / sizeof ( struct map_tile )!= y_size ||! ( tilemap = malloc ( tilemap_size,1
996,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_printroute ( netdissect_options <S2SV_ModStart> ) ; return ( - 1 ) ; } if ( ( length + 1 ) < 3 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> length <S2SV_blank> %u]"", length ) ) ; return ( - 1 ) ; } <S2SV_ModStart> 3 ) { if ( ptr < 3 || ptr > length + 1 ) ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> ptr <S2SV_blank> %u]"", cp [ 2 ] ) ) ; else if ( ptr > length + 1 ) ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> length <S2SV_blank> %u]"", length ) ) ; return ( - 1 ) ; } <S2SV_ModStart> 4 ) { if ( ptr < 3 || ptr > length + 1 ) ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> ptr <S2SV_blank> %u]"", cp [ 2 ] ) ) ; return ( - 1 ) ; }",0
997,<S2SV_ModStart> char * print_string ( const printbuffer * p ) { if (! p ) return NULL ; return print_string_ptr ( p -> valuestring ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
998,"<S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img, <S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img,",1
999,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> + 1, L_BUFSIZE <S2SV_ModEnd>, ""prestring=%s"", <S2SV_ModStart> + 1, L_BUFSIZE <S2SV_ModEnd>, ""protos=%s"", <S2SV_ModStart> + 1, L_BUFSIZE <S2SV_ModEnd>, "" <S2SV_blank> "", <S2SV_ModStart> + 1, L_BUFSIZE <S2SV_ModEnd>, "" <S2SV_blank> "", <S2SV_ModStart> + 1, L_BUFSIZE <S2SV_ModEnd>, "" <S2SV_blank> "", <S2SV_ModStart> + 1, L_BUFSIZE <S2SV_ModEnd>, "" <S2SV_blank> "", <S2SV_ModStart> + 1, L_BUFSIZE <S2SV_ModEnd> ) ; if <S2SV_ModStart> + 1, L_BUFSIZE <S2SV_ModEnd>, ""protos=%s"", <S2SV_ModStart> + 1, L_BUFSIZE <S2SV_ModEnd>, buf ) <S2SV_ModStart> + 1, L_BUFSIZE <S2SV_ModEnd>, "" <S2SV_blank> "", <S2SV_ModStart> + 1, L_BUFSIZE <S2SV_ModEnd>, "" <S2SV_blank> "", <S2SV_ModStart> + 1, L_BUFSIZE <S2SV_ModEnd>, "" <S2SV_blank> "", <S2SV_ModStart> + 1, L_BUFSIZE <S2SV_ModEnd>, "" <S2SV_blank> "", <S2SV_ModStart> + 1, L_BUFSIZE <S2SV_ModEnd> ) ; if <S2SV_ModStart> + 1, L_BUFSIZE <S2SV_ModEnd>, "" <S2SV_blank> "", <S2SV_ModStart> + 1, L_BUFSIZE <S2SV_ModEnd>",0
1000,<S2SV_ModStart> if ( chunk_num >= <S2SV_ModEnd> chm -> num_chunks,1
1001,"<S2SV_ModStart>! validate_event ( event -> pmu, <S2SV_ModStart>! validate_event ( event -> pmu, <S2SV_ModStart>! validate_event ( event -> pmu,",1
1002,"<S2SV_ModStart> ) ; } else if ( arg1 == 1 ) { win_set_geom ( 0, - 1, - 1, 0 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; term. rows0 = rows0 ; } else if ( arg1 == 1 ) { win_set_geom ( 0, - 1, - 1, 0 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; term. rows0 = rows0 ; term. cols0 = rows0 ; } else if ( arg1 == 1 ) { win_maximise ( 1 ) ; term. rows0 = rows0 ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; term. rows0 = rows0 ; term. cols0 =",0
1003,<S2SV_ModStart> studio_profile ) { if ( s -> studio_profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO &&! ( s -> avctx -> profile & FF_PROFILE_MPEG4_SIMPLE_STUDIO ) ) s -> avctx -> profile = FF_PROFILE_MPEG4_SIMPLE_STUDIO ; <S2SV_ModStart> studio_profile ) { if ( s -> avctx -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO &&! ( s -> avctx -> profile & FF_PROFILE_MPEG4_SIMPLE_STUDIO ) ) s -> avctx -> profile = FF_PROFILE_MPEG4_SIMPLE_STUDIO ; } else s -> avctx -> profile = FF_PROFILE_MPEG4_SIMPLE_STUDIO ; } else if ( s -> avctx -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO &&! ( s -> avctx -> profile & FF_PROFILE_MPEG4_SIMPLE_STUDIO ) ) s -> avctx -> profile = FF_PROFILE_MPEG4,0
1004,<S2SV_ModStart> nsops < 1 || nsops > SEMOPM,1
1005,<S2SV_ModStart> ++ ) s [ i ] = 0 ; for ( i = cols ; i < 17 ; i ++ ) s [ i ] = s [ cols - 1 ] ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( c = 0 ; c < cols + 8 ; c ++ ) { int x = s [ c + 7 ] - s [ c - 8 ] ; int y = s [ c + 7 ] + s [ c - 8 ] ; sum += x ; sumsq += x * y ; d [ c & 15 ] = s [ c ] ; if ( sumsq * 15 < flimit ) d [ c & 15 ] = ( 8 + sum + s [ c ] ) >> 4 ; s [ c - 8 ] = d [ ( c - 8 ) & 15 ] ; if ( sum,0
1006,"<S2SV_ModStart> i ]. len > inode -> i_sb -> s_blocksize - log2_blksz ) { grub_error ( GRUB_ERR_BAD_FS, ""file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large"" ) ; return - 1 ; } <S2SV_ModEnd> if ( i <S2SV_ModStart> i ]. len > inode -> i_sb -> s_blocksize - log2_blksz ) { grub_error ( GRUB_ERR_BAD_FS, ""file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large"" ) ; return - 1 ; }",0
1007,"<S2SV_ModStart> ; if ( ( i -> width < i -> parent -> width ) || ( i -> height < i -> parent -> height ) ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } if ( ( i -> height < i -> parent -> height ) || ( i -> width < i -> parent -> width ) || ( i -> height < i -> parent -> height ) ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank>",0
1008,"<S2SV_ModStart> ) ) ; if ( nelements == 0 ) { DPRINTF ( ( ""CDF_VECTOR <S2SV_blank> with <S2SV_blank> nelements <S2SV_blank> == <S2SV_blank> 0\\n"" ) ) ; goto out ; } <S2SV_ModStart> 0 ) { DPRINTF ( ( ""CDF_VECTOR <S2SV_blank> with <S2SV_blank> nelements <S2SV_blank> == <S2SV_blank> 0\\n"" ) ) ; <S2SV_ModStart> 0 ) { DPRINTF ( ( ""CDF_VECTOR <S2SV_blank> with <S2SV_blank> nelements <S2SV_blank> == <S2SV_blank> 0\\n"" ) ) ; goto out ; } if ( nelements == 0 ) { DPRINTF ( ( ""CDF_VECTOR <S2SV_blank> with <S2SV_blank> nelements <S2SV_blank> == <S2SV_blank> 0\\n"" ) ) ; goto out ; } <S2SV_ModStart> 0 ) { DPRINTF ( ( ""CDF_VECTOR <S2SV_blank> with <S2SV_blank> nelements <S2SV_blank> == <S2SV_blank> 0\\n"" ) ) ; <S2SV_ModStart> 0 ) { DPRINTF ( ( ""CDF_VECTOR <S2SV_blank> with <S2SV_blank> nelements <S2SV_blank> == <S2SV_blank> 0\\n"" ) ) ; goto out ; }",0
1009,"<S2SV_ModStart> ++ ) { if ( bytes_matched >= max_bytes_matched ) { FAIL_ON_ERROR ( callback ( flags & RE_FLAGS_BACKWARDS? input + 1 : input_data, bytes_matched, flags, callback_args ) ) ; break ; } <S2SV_ModStart> ++ ; } if ( bytes_matched >= max_bytes_matched ) { FAIL_ON_ERROR ( callback ( flags & RE_FLAGS_BACKWARDS? input + 1 : input_data, bytes_matched, flags, callback_args ) ) ; break ; }",0
1010,"<S2SV_ModStart> len ) { assert ( len >= 3 ) ; <S2SV_ModStart> case LEX_EOF : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""EOF"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_ID : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""ID"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_INT : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""INT"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_FLOAT : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""FLOAT"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_STR : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""STRING"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED_STR : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> STRING"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_TEMPLATE_LITERAL : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""TEMPLATE <S2SV_blank> LITERAL"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED_TEMPLATE_LITERAL : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> TEMPLATE <S2SV_blank> LITERAL"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_REGEX : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""REGEX"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case L",0
1011,"<S2SV_ModStart> mnt_instance ) ; if ( unlikely (! list_empty ( & mnt -> mnt_mounts ) ) ) { list_add_tail ( & mnt -> mnt_mounts, & mnt -> mnt_mounts ) ; unlock_mount_hash ( ) ; return ; }",0
1012,"<S2SV_ModStart> encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 16 ) ) vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 32 ) ) vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 64 ) ) vpx_write_literal <S2SV_ModEnd> ( w,",0
1013,,1
1014,<S2SV_ModStart>! e || ( ( e - p ) > HOST_NAME_MAX ),0
1015,<S2SV_ModStart> ; int err <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> uint32_t pos ; if ( inode -> i_size > inode -> i_sb -> s_blocksize ) { err = - ENAMETOOLONG ; goto out ; } <S2SV_ModStart>! bh ) { err = - EIO ; goto out ; } <S2SV_ModEnd> symlink = bh <S2SV_ModStart> 0 ; out : if ( err ) { up_read ( & iinfo -> i_data_sem ) ; SetPageError ( page ) ; return err ; } up_read ( & iinfo -> i_data_sem ) ;,0
1016,<S2SV_ModStart> else if ( cpu_has_secondary_exec_ctrls ( ) && ( vmcs_read32 ( SECONDARY_VM_EXEC_CONTROL ) & SECONDARY_EXEC_VIRTUALIZE_X2APIC_MODE ) <S2SV_ModEnd> ) { if,1
1017,"<S2SV_ModStart> if ( ent == NULL ) { st = KRB5_KDB_NOENTRY ; <S2SV_ModEnd> goto cleanup ; <S2SV_ModStart> cleanup ; } st = populate_policy ( context, ld, ent, pol_name, * policy ) ;",1
1018,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid && ( 0 == ps_sps -> i1_sps_dependent_slice_enabled ) && ( 0 == ps_sps -> i1_sps_output_flag_present ) && ( 0 == ps_sps -> i1_sps_output_flag_present ) && ( 0 == ps_sps -> i1_sps_output_flag_present ) && ( 0 == ps_sps -> i1_sps_output_flag_present && ( 0 == ps_sps -> i1_sps_dependent_slice_enabled ) && ( 0 == ps_sps -> i1_sps_output_flag_present ) && ( 0 == ps_sps -> i1_sps_output_flag_present ) && ( 0 == ps_sps -> i1_sps_output_flag_present ) && ( 0 == ps_sps -> i1_sps_output_flag_present && ( 0 == ps_sps -> i1_sps_dependent_slice_enabled ) && ( 0 == ps,0
1019,"<S2SV_ModStart> inode ) ; struct buffer_head * dibh = mp -> mp_bh [ 0 ] ; int ret <S2SV_ModStart> unsigned end_of_metadata = ( height > 1 )? height - 1 : 0 <S2SV_ModEnd> ; enum alloc_state <S2SV_ModStart> ALLOC_DATA ) ; ret = gfs2_extent_length ( bh -> b_data, maxlen, & eob ) ; if ( ret < 0 ) { brelse ( dibh ) ; return ret ; } <S2SV_ModEnd> if ( state <S2SV_ModStart> ALLOC_GROW_HEIGHT ) { iblks = min ( maxlen, ptrs_per_blk - mp -> mp_list [ end_of_metadata ] ) ; state = ALLOC_GROW_DEPTH ; } } else { if ( height > 1 ) { struct buffer_head * bh ; ptr = metapointer ( end_of_metadata, mp ) ; bh = mp -> mp_bh [ end_of_metadata ] ; dblks = min ( maxlen, ptrs_per_blk - mp -> mp_list [ end_of_metadata ] ) ; ret = gfs2_extent_length ( bh -> b_data, maxlen, & e",0
1020,"<S2SV_ModStart> ) ) { switch ( c ) { case'<S2SV_blank>': psf -> rwf_endian = SF_ENDIAN_LITTLE_ENDIAN ; break ; case 'G' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'R' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'S' : psf -> rwf_endian = SF_ENDIAN_LITTLE_ENDIAN ; break ; case 'G' : psf -> rwf_endian = SF_ENDIAN_LITTLE_ENDIAN ; break ; case 'X' : psf -> rwf_endian = SF_ENDIAN_LITTLE_ENDIAN ; break ; case 'Y' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'Z' : psf -> header. ptr = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_long ( psf, data ) ; } else { header_put_le_long ( psf, data ) ; } ; count += 1 ; break ; case '0' : data = va_arg ( argptr,",0
1021,<S2SV_ModStart> ; if ( d -> msg_len > sizeof ( d -> msg ) ) return - EINVAL ; if ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( i,1
1022,"<S2SV_ModStart> break ; } memset ( & cinfo, 0, sizeof ( cinfo ) ) ;",1
1023,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart>. length ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
1024,"<S2SV_ModStart> 0 ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0600 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; return",1
1025,"<S2SV_ModStart> int num_items_scanned ; int pkt_len ; int <S2SV_ModEnd> pktnum, hr <S2SV_ModStart> + 64, ""LEN=%9u"" <S2SV_ModEnd>, & pkt_len <S2SV_ModStart> g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } if ( pkt_len < 0 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> packet <S2SV_blank> header <S2SV_blank> has <S2SV_blank> a <S2SV_blank> negative <S2SV_blank> packet <S2SV_blank> length""",0
1026,<S2SV_ModStart> ; int err = 0 ; msg -> msg_namelen,1
1027,"<S2SV_ModStart> ; if ( zend_hash_find <S2SV_ModEnd> ( ht,",1
1028,<S2SV_ModStart> ) ) ; if ( strlen ( link_info. str ) >= sizeof ( link_info. str ) ) return - EINVAL ;,0
1029,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1030,"<S2SV_ModStart>, obuf ) ; if (! <S2SV_ModStart>, obuf ) ) { ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf -> flags",0
1031,<S2SV_ModStart> p -> tokenpos >= ( <S2SV_ModEnd> p -> tokenlen <S2SV_ModStart> p -> tokenlen - 1 ),1
1032,<S2SV_ModStart> vp9_variance_fn_t get_block_variance_fn ( vpx_bit_depth_t bit_depth <S2SV_ModStart> case BLOCK_8X8 : return vpx_mse8x8 ; case BLOCK_16X8 : return vpx_mse16x8 ; case BLOCK_8X16 : return vpx_mse8x16 ; case BLOCK_16X16 : return vpx_mse16x16 ; case BLOCK_8X16 : return vpx_mse8x16 ; case BLOCK_16X16 : return vpx_mse16x16 ; default : return vpx_mse8x16 <S2SV_ModEnd> ; } },0
1033,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
1034,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; } <S2SV_ModStart> i ++ ) { if ( avio_feof,0
1035,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
1036,"<S2SV_ModStart> } if ( dhkey_info. key_len > MAX_KEY_PACK_SIZE ) { retval = <S2SV_ModEnd> pkinit_server_return_key_pack_draft9 ( context <S2SV_ModStart> reply, reply, dhkey_info. key_len, <S2SV_ModEnd> padata -> pa_type <S2SV_ModStart> pa_type == KRB5_PADATA_PKINIT_RP9 ) { if ( retval == 0 ) { retval = pkinit_server_return_key_pack_draft9 ( context, request, reply, dhkey_info. key_len ) ; } else { retval = <S2SV_ModEnd> pkinit_server_return_key_pack_draft10 ( context <S2SV_ModStart> reply, reply, dhkey_info. key_len, <S2SV_ModEnd> padata -> pa_type <S2SV_ModStart> padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { if ( retval == 0 ) { retval = pkinit_server_return_key_pack_draft10 ( context, request, reply, dhkey_info. key_len ) ; } else { retval = <S2SV_ModEnd> pkinit_server_return_key_pack_draft10 ( context,",0
1037,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
1038,"<S2SV_ModStart> -> stratum_port ; snprintf ( address, 254 <S2SV_ModEnd>, ""%s:%s"",",1
1039,"<S2SV_ModStart> ( page && ( <S2SV_ModStart> ( page && <S2SV_ModEnd> access ( page <S2SV_ModStart> ( page && <S2SV_ModEnd> access ( page <S2SV_ModStart> ( page && <S2SV_ModEnd> access ( page <S2SV_ModStart> ( page && <S2SV_ModEnd> access ( page <S2SV_ModStart> ( page && <S2SV_ModEnd> access ( page <S2SV_ModStart> ( page && <S2SV_ModEnd> access ( page <S2SV_ModStart> 0 ) ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } <S2SV_ModEnd> } else if <S2SV_ModStart> ( page && <S2SV_ModEnd> access ( page <S2SV_ModStart> ( page && <S2SV_ModEnd> access ( page <S2SV_ModStart> ) == 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } } else if (! strcmp ( func, ""page/get"" ) ) { char * page = http_request_param_get ( req, ""page"" ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } else if ( page == NULL ) page = http_request_get_query_string",0
1040,"<S2SV_ModStart> > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; if ( f -> max_submaps > INT_MAX / f -> blocksize_1 ) return error ( f, VORBIS_too_many_submaps ) ; if ( f -> max_submaps > INT_MAX / f -> blocksize_0 ) return error ( f, VORBIS_invalid_first_page ) ; <S2SV_ModStart> > INT_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; if ( f -> max_submaps > INT_MAX / f -> blocksize_1 ) return error ( f, VORBIS_invalid_first_page ) ; if ( f -> max_submaps > INT_MAX / f -> blocksize_1 ) return error ( f, VORBIS_invalid_first_page ) ; if ( f -> max_submaps > INT_MAX / f -> blocksize_1 ) return error ( f, VORBIS_invalid_first_page ) ;",0
1041,<S2SV_ModStart> head -> iov_base ; if ( hdr > head -> iov_len ) return 0,1
1042,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> cl_nodes_lock ) ; o2nm_unlock_subsystem ( ) ;,1
1043,"<S2SV_ModStart> flags ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } if ( input -> buf_cur_space_left > frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", frame_len ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 <S2SV_ModEnd> ) { dev_err_once <S2SV_ModStart> ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", frame",0
1044,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1045,<S2SV_ModStart> ; ssize_t count ; if ( bytes == 0 || items == 0 ) return 0,1
1046,<S2SV_ModStart> -> serviceId == EXTRACT_16BITS <S2SV_ModEnd> ( & rxh,1
1047,"<S2SV_ModStart> key_ref, KEY_NEED_READ ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( key -> type -> read ) { up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } else ret = - EOPNOTSUPP ; if ( key -> type -> read ) { up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( key -> type -> read ) { up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; } else",0
1048,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > IEEE80211_MAX_SSID_LEN ) { mwifiex_dbg ( adapter, INFO, ""info: <S2SV_blank> ADHOC_S_CMD: <S2SV_blank> SSID <S2SV_blank> too <S2SV_blank> long\\n"", req_ssid -> ssid_len ) ; return - 1 ; }",0
1049,"<S2SV_ModStart> -> valuelen < sizeof ( * sbp ) ) { error = context -> put_listent ( context, sfe -> flags, sfe -> nameval, 0, ( int ) sfe -> valuelen, & sbp [ nsbuf ] ) ; if ( error ) return error ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; } if (! context -> put_listent ) { error = context -> put_listent ( context, sfe -> flags, sfe -> nameval, 0, ( int ) sfe -> valuelen ) ; if ( context -> put_listent ( context, sfe -> flags, sfe -> nameval, 0, ( int ) sfe -> valuelen ) ; if ( context -> seen_enough ) break ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; } if (! context -> put_listent ) { error = context -> put_listent ( context, sfe -> flags, sfe -> nameval, 0, ( int ) sfe -> valuelen ) ; if ( context -> put_listent ( context, sfe -> flags,",0
1050,<S2SV_ModStart> r ) { if ( a == NULL ) return ( - 1 ) ;,0
1051,<S2SV_ModStart> 0 ) ; hrtimer_try_to_cancel <S2SV_ModEnd> ( & stime,1
1052,"<S2SV_ModStart> ; while ( ( unsigned ) <S2SV_ModStart> p < q ) { if ( p - str < reg -> dmax ) { * low = ( UChar * ) onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; * low = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; } else { * low = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; } } } else { if ( p - str < reg -> dmax ) { * low = ( UChar * ) onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; * low = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; } else { * low = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; } }",0
1053,"<S2SV_ModStart> l2cap_conf_rfc rfc = { } <S2SV_ModStart> = L2CAP_MODE_BASIC ; BT_DBG ( ""sk <S2SV_blank> %p"", sk ) ; req -> dcid = cpu_to_le16 ( pi -> dcid ) ; req -> flags = cpu_to_le16 ( 0 ) ; return l2cap_add_conf_opt ( & ptr, L2CAP_CONF_MODE, sizeof ( rfc ), ( unsigned long ) & rfc ) ; case L2CAP_MODE_ERTM : rfc. mode = L2CAP_MODE_ERTM ; rfc. txwin_size = L2CAP_DEFAULT_RX_WINDOW ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; l2cap_add_conf_",0
1054,"<S2SV_ModStart> { do { if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; break ; } ret = recv ( sock_fd, buf, r, MSG_WAITALL ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } }",0
1055,<S2SV_ModStart> -> chunksize = UINT64_MAX <S2SV_ModEnd> ; for (,1
1056,<S2SV_ModStart> return ERROR_INCOMPLETE_FRAME ; } if ( ( ps_dec -> u2_total_mbs_coded!= 0 ) && ( ( ps_dec -> u2_total_mbs_coded!= 0 ) && ( ( ps_dec -> u2_total_mbs_coded!= 0 ) && ( ( u1_nal_unit_type!= IDR_SLICE_NAL ) && ( ( u1_nal_unit_type!= IDR_SLICE_NAL ) && ( ( u1_nal_unit_type!= IDR_SLICE_NAL ) && ( ( ps_dec -> u2_total_mbs_coded!= 0 ) && ( ( ps_dec -> u2_total_mbs_coded!= 0 ) && ( ( u1_nal_unit_type!= IDR_SLICE_NAL ) && ( u1_nal_unit_type!= IDR_SLICE_NAL ) && ( u1_nal_unit_type!= IDR_SLICE_NAL ) && ( u1_nal_unit_type!= ID,0
1057,<S2SV_ModStart>!= 0 ) if ( pair == NULL ) return ;,0
1058,<S2SV_ModStart> } err = crypto_rng_alg ( tfm ) <S2SV_ModEnd> -> seed (,1
1059,<S2SV_ModStart> = uid ; <S2SV_ModEnd> new -> count <S2SV_ModStart> new -> count = 0 <S2SV_ModEnd> ; spin_lock_irq ( <S2SV_ModStart> } if ( <S2SV_ModEnd> ucounts -> count <S2SV_ModStart> ucounts -> count == INT_MAX ) ucounts = NULL ; else ucounts -> count += 1 <S2SV_ModEnd> ; spin_unlock_irq (,1
1060,"<S2SV_ModStart> == 0 ) { datagrams = err ; goto out_put ; } <S2SV_ModEnd> if ( err <S2SV_ModStart> err ; } <S2SV_ModEnd> if ( err <S2SV_ModStart> datagrams ; } out_put : fput_light ( sock -> file, fput_needed ) ; <S2SV_ModStart> datagrams ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1061,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1062,<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline <S2SV_ModStart> i ; for ( ; i < len / 8 * 32 ; i += 8 * 32 <S2SV_ModEnd> ) { ( <S2SV_ModStart> ] ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1063,"<S2SV_ModStart> ; if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) == 0 ) { if ( ext4_should_dioread_nolock ( inode ) ) set_buffer_uninit ( bh_result ) ; err = ext4_alloc_file_blocks ( handle, inode, bh_result, max_blocks, EXT4_GET_BLOCKS_CONVERT ) ; goto out2 ; } } else if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) == 0 ) { if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) == 0 ) { if ( ext4_should_dioread_nolock ( inode ) ) set_buffer_uninit ( bh_result ) ; err = ext4_alloc_file_blocks ( handle, inode, bh_result, max_blocks, EXT4_GET_BLOCKS_CONVERT ) ; } else if ( ( flags & EXT4_GET_BLOCKS_WRITE ) == 0 ) { if ( ext4_should_dioread_nolock ( inode, bh_result ) ) set_buffer_uninit ( bh_",0
1064,"<S2SV_ModStart> * delegation, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; fmode |= FMODE_READ | FMODE_WRITE ; if ( ( fmode & ( FMODE_READ | FMODE_WRITE ) ) == fmode <S2SV_ModEnd> ) goto no_delegation_unlock <S2SV_ModStart> deleg_cur ) ; nfs_mark_delegation_referenced ( deleg_cur ) ;",0
1065,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1066,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
1067,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void oidc_scrub_headers (,1
1068,"<S2SV_ModStart> * xd, tran_low_t <S2SV_ModEnd> * out_dist_sum ) <S2SV_ModStart> int sse ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { vp9_model_rd_from_var_lapndz_high ( sse, 1 << num_pels_log2_lookup [ bs ], pd -> dequant [ 1 ] >> 3, & rate, & dist ) ; } else { vp9_model_rd_from_var_lapndz_high ( sse, 1 << num_pels_log2_lookup [ bs ], pd -> dequant [ 1 ] >> 3, & rate, & dist ) ; * out_rate_sum = ( int64_t ) rate_sum ; * out_dist_sum = ( int64_t ) dist_sum ; } else { int rate ; int64_t dist ; vp9_model_rd_from_var_lapndz_high ( sse, 1 << num_pels_log2_lookup [ bs ], pd -> dequant [ 1 ] >> 3, & rate, & dist ) ;",0
1069,<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1070,"<S2SV_ModStart> case ESIS_SOURCE_ADDRESS_LENGTH : if ( ndo -> ndo_vflag == 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> source <S2SV_blank> address <S2SV_blank> length <S2SV_blank> %u, <S2SV_blank> number <S2SV_blank> %u"", ndo -> ndo_vflag, source_address_length ) ) ; return ; } <S2SV_ModStart> case ESIS_SOURCE_ADDRESS_NUMBER : if ( ndo -> ndo_vflag == 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> source <S2SV_blank> address <S2SV_blank> number <S2SV_blank> %u, <S2SV_blank> length <S2SV_blank> %u"", source_address_number, ndo -> ndo_vflag, source_address_length ) ) ; return ; } <S2SV_ModStart> case ESIS_SOURCE_ADDRESS_LENGTH : if ( ndo -> ndo_vflag == 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> source <S2SV_blank> address <S2SV_blank> length <S2SV_blank> %u, <S2SV_blank> number <S2SV_blank> %u"", source_address_length ) ) ; return ; }",0
1071,<S2SV_ModStart>!= '\\0' ) { ptr ++ ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> { if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; <S2SV_ModStart> } if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1,0
1072,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { return vpx_read_tree <S2SV_ModEnd> ( r, <S2SV_ModStart> seg -> tree_probs ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1073,<S2SV_ModStart> ; uint32_t backup_handle = 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd> res -> backup <S2SV_ModStart> res -> backup ) { if ( <S2SV_ModEnd> res -> backup <S2SV_ModStart> res -> backup ) { if ( <S2SV_ModEnd> res -> backup <S2SV_ModStart> res -> backup ) { ret = - EBUSY ; goto out_unlock ; } } else { backup_handle = req -> backup_handle ; } } out_unlock :,0
1074,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool get_desc ( <S2SV_ModStart> SEGMENT_LDT ) { bool success = false <S2SV_ModEnd> ; struct ldt_struct <S2SV_ModStart> -> nr_entries ) { <S2SV_ModStart> sel ] ; success = true ; } <S2SV_ModStart> ) ; return success <S2SV_ModEnd> ; } # <S2SV_ModStart> size ) return false <S2SV_ModEnd> ; return ( <S2SV_ModStart> desc_base ) ; success : return true ;,0
1075,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",1
1076,<S2SV_ModStart> bp ; struct ipv6_pinfo * np = inet6_sk ( sk ) ; struct <S2SV_ModStart> ; __u8 matchlen = np -> opt. optlen <S2SV_ModEnd> ; __u8 bmatchlen <S2SV_ModStart> ) ; } if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> fl6_dport = daddr -> v6. sin6_port ; fl6 -> flowi6_proto = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LOOPBACK ) fl6 -> flowi6_oif = IPPROTO_SCTP ; <S2SV_ModStart> ) ; } if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> fl6_dport = daddr -> v6. sin6_port ; fl6 -> fl6_proto = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_,0
1077,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1078,"<S2SV_ModStart>, maxbuf, unicodestr ) ; if ( buf2 == NULL ) return ( NULL ) ; buf = buf2 ; } return ( buf ) ; case '/' : depth -- ; if ( buf >= maxbuf ) return ( buf ) ; while ( buf < maxbuf ) { const u_char * buf2 ; depth ++ ; buf2 = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf2 == NULL ) return ( NULL ) ; buf = buf2 ; } return ( buf ) ; } if ( buf >= maxbuf ) return ( buf ) ; memset ( s, 0, sizeof ( s ) ) ; fmt = p + 1 ; buf = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf == NULL ) return ( NULL ) ; while ( buf < maxbuf ) { size_t len = PTR_DIFF ( maxbuf, buf ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ; smb_print_data ( ndo, buf",0
1079,<S2SV_ModStart> ; if ( gsm_verify_protocol_timeout ( client ) == - 1 ) { g_assert ( client -> priv -> protocol_timeout == 0 ) ; client -> priv -> protocol_timeout = 0 ; } else if ( gsm_verify_protocol_timeout ( client ) == - 1 ) { g_assert ( client -> priv -> protocol_timeout == - 1 ) ; client -> priv -> protocol_timeout = 0 ; } <S2SV_ModEnd> * mask_ret |= <S2SV_ModStart> |= SmsSaveYourselfP2RequestProcMask ; callbacks_ret -> save_yourself_phase2_request. callback = save_yourself_phase2_request_callback ; callbacks_ret -> save_yourself_phase2_request. manager_data = client ; * mask_ret |= SmsSaveYourselfP2DoneProcMask ; callbacks_ret -> save_yourself_phase2_request. callback = save_yourself_phase2_request_callback ; callbacks_ret -> save_yourself_phase2_request. manager_data = client ; * mask_ret |= SmsCloseConnectionProcMask ; callbacks_ret -> close_connection,0
1080,<S2SV_ModStart> >= 0 && <S2SV_ModEnd> ND_TTEST ( * <S2SV_ModStart> < ie && <S2SV_ModEnd> ND_TTEST ( *,1
1081,"<S2SV_ModStart> ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_TXQCR, KSZ8851_TXQCR_METFE <S2SV_ModEnd> ) ; n <S2SV_ModStart> ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK <S2SV_ModEnd> ; if (",0
1082,"<S2SV_ModStart> NULL ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
1083,"<S2SV_ModStart>! new_n0 ) { pr_devel ( ""alloc <S2SV_blank> failed\\n"" ) ; return false ; } <S2SV_ModStart>! new_n1 ) { pr_devel ( ""alloc <S2SV_blank> failed\\n"" ) ; return false ; } <S2SV_ModStart>! new_s0 ) { pr_devel ( ""alloc <S2SV_blank> failed\\n"" ) ; return false ; } <S2SV_ModStart>! new_s1 ) { pr_devel ( ""alloc <S2SV_blank> failed\\n"" ) ; return false <S2SV_ModEnd> ; } pr_devel",0
1084,<S2SV_ModStart>. udpport = 0 <S2SV_ModEnd> ; settings.,1
1085,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> if ( domains_to_finalize,0
1086,"<S2SV_ModStart> x_7 ; WORD32 x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 x_10, x_11, x_12, x_13, x_23, x_34 ; WORD32 x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; x_10 = x_0 + x_2 ; x_11 = x_1 + x_3 ; x_3 = x_4 + x_5 ; x_6 = x_5 + x_6 ; x_7 = x_7 ; x_8 = * x0 ++ ; x_9 = * x0 ++ ; x_9 = * x0 ++ ; x_a = x_0 + x_2 ; x_b = x_1 + x_3 ; x_c = x_4 + x_6 ; x_d = x_5 + x_7 ; x_e = x_4 + x_6 ; x_7 = x_7 ; x_8 =",0
1087,<S2SV_ModStart> clips_ptr ) { if ( num_clips < 0 || num_clips > DRM_MODE_FB_DIRTY_MAX_CLIPS ) { ret = - EINVAL ; goto out_err1 ; },1
1088,<S2SV_ModStart> ; if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1089,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1090,"<S2SV_ModStart> + idx ; if ( idx + size > len ) { r_cons_printf ( ""bytes <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", len ) ; break ; } <S2SV_ModStart> + idx ; if ( idx + size > len ) { r_cons_printf ( ""bytes <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", nops, len ) ; break ; } <S2SV_ModStart> + idx ; if ( idx + size > len ) { r_cons_printf ( ""bytes <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", len ) ; break ; }",0
1091,"<S2SV_ModStart>, frames ; size_t width, height ; size_t target_width, target_height ; if ( argc < 4 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; return 1 ; } if ( argc < 5 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; } if ( fout == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> write\\n"", fout ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpout = fopen ( fout, ""wb"" ) ; if ( fout == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> write\\",0
1092,"<S2SV_ModStart> + DSPQ_DATA_BUFF ; u16 head, tail, size ; head <S2SV_ModEnd> = readw ( <S2SV_ModStart> + JQS_wHead ) ; tail = readw ( chip -> DSPQ + JQS_wTail ) ; size = <S2SV_ModEnd> readw ( chip <S2SV_ModStart> + JQS_wSize ) ; if ( head > size || tail > size ) { snd_msnd_eval_dsp_msg ( chip, readw ( pwDSPQData + 2 * head ) ) ; head = 0 ; } else head = head <S2SV_ModEnd> ; snd_msnd_eval_dsp_msg ( <S2SV_ModStart> ) ) ; if ( tail!= readw ( chip -> DSPQ + JQS_wTail ) ) { snd_msnd_eval_dsp_msg ( chip, readw ( pwDSPQData + 2 * head ) ) ; snd_msnd_eval_dsp_msg ( chip, readw ( pwDSPQData + 2 * tail ) ) ; }",0
1093,<S2SV_ModStart> * opcode_desc ; if ( len < 2 ) { return NULL ; },1
1094,<S2SV_ModStart> acpi_status status ; <S2SV_ModEnd> acpi_operand_object * next <S2SV_ModStart> * prev ; acpi_operand_object * next ; ACPI_FUNCTION_TRACE ( ns_terminate ) <S2SV_ModStart> ) ; } <S2SV_ModEnd> acpi_ns_delete_namespace_subtree ( acpi_gbl_root_node,0
1095,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
1096,"<S2SV_ModStart> ; if ( strlen ( url_arg ) >= sizeof ( the_url ) ) { fprintf ( stderr, ""Input <S2SV_blank> url <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long.\\n"", url_arg ) ; fprintf ( stderr, ""Output <S2SV_blank> url <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long.\\n"", url_arg ) ; fprintf ( stderr, ""Input <S2SV_blank> url <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long.\\n"", url_arg ) ; i ++ ; } else if ( strlen ( url_arg ) >= sizeof ( the_url ) ) { fprintf ( stderr, ""Input <S2SV_blank> url <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long.\\n"", url_arg ) ; fprintf ( stderr, ""Input <S2SV_blank> url <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long.\\n"", url_arg ) ; fprintf ( stderr, ""Output <S2SV_blank> url <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long.\\n"", url_arg ) ; } else if ( strlen ( url_arg ) >= sizeof ( the_url ) ) { fprintf ( stderr, ""Input <S2SV_blank> url <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long.\\n"", url_arg",0
1097,"<S2SV_ModStart>, result ; if ( num_fields < 0 ) { return 0 ; } <S2SV_ModEnd> _Py_IDENTIFIER ( _attributes",0
1098,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
1099,"<S2SV_ModStart> = VPX_CODEC_OK ; <S2SV_ModEnd> struct vpx_codec_alg_priv * <S2SV_ModStart> struct vpx_codec_alg_priv * <S2SV_ModEnd> priv ; vpx_codec_enc_cfg_t <S2SV_ModStart> -> priv = vpx_calloc ( 1, <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> struct vpx_codec_alg_priv ) ) ; if (! priv <S2SV_ModEnd> ) { return <S2SV_ModStart> vp8_cfg = extracfg_map [ i ]. cfg ; priv -> vp8_cfg. pkt_list = & priv -> pkt_list. head ; priv -> cx_data_sz = 32768 ; priv -> cx_data_sz = 32768 ; if ( priv -> cx_data_sz < 32768 ) priv -> cx_data_sz = 32768 ; priv -> cx_data = malloc ( priv -> cx_data_sz ) ; if (! priv -> cx_data ) { return VPX_CODEC_MEM_ERROR ; } priv -> cfg = & priv -> cfg ; if ( mr_cfg ) ctx -> priv -> enc. mr_total_resolutions = mr_cfg -> mr_total_resolutions ; else ctx -> priv -> enc.",0
1100,"<S2SV_ModStart> error ) { if ( bp && ( <S2SV_ModEnd> xfs_da_shrink_inode ( args <S2SV_ModStart>, bp )!= 0 ) <S2SV_ModEnd> ) goto out",1
1101,<S2SV_ModStart> } if ( pixel -> total_freq <= cnt_c + step ) return ret ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; if ( totfr > BOT ) { totfr = 0 ; for ( i = 0 ; i < 16 ; i ++ ) { unsigned nc = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = nc ; pixel -> lookup [ i ] = nc ; totfr += nc ; } for ( i = 0 ; i < 256 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; pixel -> lookup [ i ] = sum ; totfr += nc ; } for ( i = 0 ; i < 16 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++,0
1102,"<S2SV_ModStart> timer ) ; spin_lock_irq ( & timeri -> lock ) ; <S2SV_ModStart> tmp, & timeri -> slave_list_head, open_list ) { spin_lock_irq ( & timeri -> lock ) ; _snd_timer_stop ( slave, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail ( & slave -> open_list, & timeri -> slave_active_list ) ; timer -> master = NULL ; spin_unlock_irq ( & timeri -> lock ) ; } mutex_unlock ( & register_mutex ) ;",0
1103,"<S2SV_ModStart> return err ; if (! <S2SV_ModEnd> attrs [ TIPC_NLA_SOCK <S2SV_ModStart> attrs [ TIPC_NLA_SOCK <S2SV_ModEnd> ] ) return <S2SV_ModStart> - EINVAL ; err = nla_parse_nested ( sock, TIPC_NLA_SOCK_MAX, attrs [ TIPC_NLA_SOCK ], tipc_nl_sock_policy ) ; if ( err ) return err ; if (! sock <S2SV_ModEnd> [ TIPC_NLA_SOCK_REF ] <S2SV_ModStart> [ TIPC_NLA_SOCK_REF ] <S2SV_ModEnd> ) return - <S2SV_ModStart> - EINVAL ; tsk_portid = nla_get_u32 ( sock [ TIPC_NLA_SOCK_REF ] ) ; } if ( done ) return 0 ; tsk = tipc_sk_lookup ( net, tsk_portid ) ; if (! tsk ) return - EINVAL ;",1
1104,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> 0 ; } memset <S2SV_ModEnd> ( ctx ->,0
1105,<S2SV_ModStart> = v ; if (! IS_ERR ( vma ) ),1
1106,<S2SV_ModStart> ) buffer ; if ( total_len < sizeof ( * cap ) ) break ; length = cap -> bLength ;,0
1107,<S2SV_ModStart> task = current <S2SV_ModEnd> ; if (,1
1108,"<S2SV_ModStart> ; if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenEAttr > inode -> i_sb -> s_blocksize ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> inode <S2SV_blank> entry\\n"", inode -> i_ino ) ; goto out ; } if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenEAttr > inode -> i_sb -> s_blocksize ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> inode <S2SV_blank> entry\\n"", inode -> i_ino ) ; goto out ; } if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenEAttr > inode -> i_sb -> s_blocksize ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> inode <S2SV_blank> entry\\n"", inode -> i_ino ) ; goto out ; } if ( iinfo -> i_lenEAttr > inode -> i_sb -> s",0
1109,"<S2SV_ModStart> data ) { uint16_t status ; <S2SV_ModStart> ( interface, ENC28J60_MIREGADR, address <S2SV_ModEnd> & REG_ADDR_MASK ) <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",0
1110,<S2SV_ModStart> int bad_format_imginfo ( const <S2SV_ModStart> fmt ) { const <S2SV_ModStart> return 1 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1111,"<S2SV_ModStart> sk_forward_alloc ) ; atomic_set ( & sk -> sk_omem_alloc, 0 ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> dst_release ( rcu_dereference_check",0
1112,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
1113,<S2SV_ModStart>! saw_digit ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart>!= '\\r' ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart>!= '\\n' ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart> ; trunc : * endp = bp ; <S2SV_ModStart> ; invalid : * endp = bp ;,1
1114,<S2SV_ModStart> ; args -> rmtvaluelen = be32_to_cpu ( name_rmt -> <S2SV_ModEnd> valuelen ) ;,0
1115,"<S2SV_ModStart> ""DefragIPv4NoDataTest"", DefragIPv4NoDataTest ) ; UtRegisterTest ( ""DefragIPv4TooLargeTest"", DefragIPv4TooLargeTest ) ; UtRegisterTest ( ""IPV6DefragInOrderSimpleTest"", IPV6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""IPV6DefragReverseSimpleTest"", IPV6DefragReverseSimpleTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakBsdTest"", IPV6DefragSturgesNovakBsdTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakLinuxTest"", IPV6DefragSturgesNovakLinuxTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakWindowsTest"", IPV6DefragSturgesNovakWindowsTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakSolarisTest"", IPV6DefragSturgesNovakSolarisTest ) ;",0
1116,"<S2SV_ModStart> ; if (! object_length ) { r = coolkey_add_object_to_list ( & priv -> objects_list, & new_object ) ; if ( r!= SC_SUCCESS ) { free ( new_object. data ) ; new_object. data = NULL ; return SC_ERROR_OUT_OF_MEMORY ; } if ( add_v1_record && object_data [ 0 ]!= COOLKEY_V1_OBJECT ) { r = coolkey_add_object_to_list ( & priv -> objects_list, & new_object ) ; if ( r!= SC_SUCCESS ) { free ( new_object. data ) ; return SC_ERROR_OUT_OF_MEMORY ; } if ( add_v1_record && object_data [ 0 ] == COOLKEY_V1_OBJECT ) { new_object. data [ 0 ] = COOLKEY_V1_OBJECT ; new_object. length ++ ; } memcpy ( & new_object. data [ add_v1_record ], object_data, object_length ) ; }",0
1117,"<S2SV_ModStart> out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; goto out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; goto out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; goto out_error ; }",0
1118,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
1119,<S2SV_ModStart> u8 label_len ; <S2SV_ModEnd> GET8 ( label_len <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ;,1
1120,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpAcc ( TIFF <S2SV_ModStart> cc ) ; if <S2SV_ModEnd> ( cc % <S2SV_ModStart> * stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""fpAcc"", ""%s"", ""cc%(bps*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> tmp ) return 0 <S2SV_ModStart> tmp ) ; return 1 ;",1
1121,"<S2SV_ModStart> -> vm_ops ) <S2SV_ModEnd> return do_fault ( <S2SV_ModStart>, pte, pmd, flags, entry ) ; <S2SV_ModEnd> return do_anonymous_page ( <S2SV_ModStart>, address, pte, pmd, <S2SV_ModEnd> flags ) ;",1
1122,"<S2SV_ModStart> s ) { size_t len = strlen ( s ) ; if ( len > UINT32_MAX ) len = UINT32_MAX ; <S2SV_ModStart> r, s, len",0
1123,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1124,"<S2SV_ModStart> ; } } mutex_unlock ( & id_map_mutex ) ; new_map = kzalloc ( count + 1, GFP_KERNEL ) ; if (! new_map ) { mutex_unlock ( & id_map_mutex ) ; return - ENOMEM ; }",0
1125,"<S2SV_ModStart> ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> capacity <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; return NULL <S2SV_ModEnd> ; } if",0
1126,"<S2SV_ModStart> -> n_new_frames ; if ( p_sys -> n_new_frames > MAX_FRAME_SIZE ) { msg_Err ( p_enc, ""Maximum <S2SV_blank> number <S2SV_blank> of <S2SV_blank> frames <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", MAX_FRAME_SIZE ) ; return NULL ; }",0
1127,"<S2SV_ModStart> ] ) ; if (! mp_path_exists ( mf -> name ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> name ) ; goto exit_mf ; }",0
1128,"<S2SV_ModStart> NF_TCHECK ( * cp <S2SV_ModEnd> ) ; if <S2SV_ModStart> NF_TCHECK ( * cp <S2SV_ModEnd> ) ; if <S2SV_ModStart> NF_TCHECK ( * cp <S2SV_ModEnd> ) ; if <S2SV_ModStart> NF_TCHECK ( * cp <S2SV_ModEnd> ) ; if <S2SV_ModStart> NF_TCHECK ( * cp <S2SV_ModEnd> ) ; if <S2SV_ModStart> NF_TCHECK ( * cp <S2SV_ModEnd> ) ; if <S2SV_ModStart> NF_TCHECK ( * cp <S2SV_ModEnd> ) ; if <S2SV_ModStart> NF_TCHECK ( * cp <S2SV_ModEnd> ) ; if <S2SV_ModStart> NF_TCHECK ( * cp <S2SV_ModEnd> ) ; if <S2SV_ModStart> cp ) ; if ( advance < len ) ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", advance - length ) ) ; if ( advance < len ) ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", len - advance ) ) ; if ( len < cp ) ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> bytes <S2SV_blank> missing!"" ) ) ; if ( advance < len ) ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", advance - length",0
1129,"<S2SV_ModStart> 4 ) ; if ( idx + 4 > len ) return NULL ; <S2SV_ModStart> ) ; for ( j = 0 ; j < ( a -> names [ i ]. len >> 1 ) ; j ++ ) { <S2SV_ModEnd> a -> names <S2SV_ModStart> [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; } } else { size_t i ; a -> names = CHECKED_XMALLOC ( VarLenData, a -> num_names ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> names [ i ]. data = CHECKED_XMALLOC ( unsigned char, a -> names [ i ]. len ) ; for ( j = 0 ; j < a -> num_names ; j ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len )",0
1130,"<S2SV_ModStart> ; if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenEAttr > inode -> i_sb -> s_blocksize ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> inode <S2SV_blank> entry\\n"", inode -> i_ino ) ; goto out ; } if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenEAttr > inode -> i_sb -> s_blocksize ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> inode <S2SV_blank> entry\\n"", inode -> i_ino ) ; goto out ; } if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenEAttr > inode -> i_sb -> s_blocksize ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> inode <S2SV_blank> entry\\n"", inode -> i_ino ) ; goto out ; } if ( iinfo -> i_lenEAttr > inode -> i_sb -> s",0
1131,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
1132,<S2SV_ModStart> int sse ; if ( cpi -> oxcf. aq_mode == YV12_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1133,"<S2SV_ModStart> ( ) ; strcpy <S2SV_ModEnd> ( t1_buf_array, <S2SV_ModStart> t1_line_array ) ; t1_buf_ptr = eol ( t1_buf_array ) ; t1_line_ptr = eol ( t1_line_array ) ; } else { strcpy ( t1_buf_array, t1_line_array ) ; t1_buf_ptr = eol ( t1_buf_array ) ; t1_line_ptr = eol ( t1_line_array ) ; }",0
1134,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ) ; if ( ctx -> frame_parallel_decode ) { YV12_BUFFER_CONFIG * fb ; vpx_get_reference_dec ( ctx -> pbi, data -> idx, & fb ) ; yuvconfig2image ( & data -> img, fb, NULL ) ; return VPX_CODEC_OK ; } else <S2SV_ModEnd> { YV12_BUFFER_CONFIG * <S2SV_ModStart> * fb ; vpx_get_reference_dec <S2SV_ModEnd> ( ctx ->",0
1135,"<S2SV_ModStart> ctxt ) ; if (! ( em_syscall_is_enabled ( ctxt ) ) ) return emulate_ud ( ctxt ) ; <S2SV_ModStart>, & ss ) ; if (! ( efer & EFER_SCE ) ) return emulate_ud ( ctxt",1
1136,"<S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> space <S2SV_blank> after <S2SV_blank> marker.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> space <S2SV_blank> after <S2SV_blank> marker.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> space <S2SV_blank> after <S2SV_blank> marker.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> space <S2SV_blank> after <S2SV_blank> marker.\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
1137,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == testlist ) e = ast_for_testlist ( c, ch ) ; else e = ast_for_expr ( c, ch ) ; if (! e ) return NULL ; if (! set_context ( c, e, Store, ch ) ) return NULL ; switch ( expr1 -> kind ) { case Name_kind : case Attribute_kind : break ; default : ast_error ( c, ch, ""illegal <S2SV_blank> expression <S2SV_blank> for <S2SV_blank> augmented <S2SV_blank> assignment"" ) ; return NULL ; } ch = CHILD ( n, 2 ) ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; expr2 = ast_for_expr ( c, ch ) ; if (! expr2 ) return NULL ; newoperator = ast_for_augassign ( c, expr1, newoperator, expr2, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c -> c_arena ) ; return AugAssign ( expr1, newoperator, expr2, LIN",0
1138,"<S2SV_ModStart> int vp8_denoiser_filter_c ( <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * mc_running_avg_y, int mc_avg_y_stride, unsigned char * running_avg_y, int avg_y_stride, int motion_magnitude, int y_offset, int uv_offset ) { unsigned char * running_avg_y_buffer <S2SV_ModEnd> = running_avg -> <S2SV_ModStart> unsigned char * running_avg_y_buffer <S2SV_ModEnd> = running_avg -> <S2SV_ModStart> = running_avg -> y_buffer <S2SV_ModEnd> + y_offset ; <S2SV_ModStart> int r, c, i ; int sum_diff = 0 ; int <S2SV_ModEnd> adj_val [ 3 <S2SV_ModStart> MOTION_MAGNITUDE_THRESHOLD ) { for ( i = 0 ; i < 3 ; i ++ ) adj_val [ i ] += 1 ; } for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 16 ; ++ c ) { int diff = 0 ; int absdiff = abs ( diff ) ; if ( absdiff >= 4 && absdiff <= 7 ) adjustment = adj_val [ 0 ] ; else adjustment = adj_val [ 1 ] ; if ( diff > 0",0
1139,"<S2SV_ModStart> ) == 0 ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; continue ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) == 0 ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; continue ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) == 0 ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; continue ; } if ( ( sockPtr -> flags & NS_CONN_ENTITYTOOLONG ) == 0 ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; continue ; } if ( ( reqPtr -> request. line == NULL ) ) { sockPtr -> flags = NS_CONN_REQUESTURITOOLONG ; } else { sockPtr -> flags = NS_CONN_LINETOOLONG ; } } if ( ( e - s ) > drvPtr -> maxline ) { Ns_Log ( DriverDebug, ""SockParse: <S2SV_blank> maxline <S2SV_blank> reached <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> bytes"", drvPtr -> maxline ) ; sockPtr -> flags = NS_CONN_REQUESTUR",0
1140,<S2SV_ModStart> ret = 0 ; if ( WARN_ON_ONCE (! capable ( CAP_SYS_RAWIO ) ) ) return - EPERM,0
1141,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
1142,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> if ( xop <S2SV_ModStart> == XCOL_SOURCE_RECV_OP ) { struct se_device * src_dev <S2SV_ModEnd> ; pr_debug ( <S2SV_ModStart> -> dst_dev ; src_dev = xop -> src_dev ; } else { pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> src_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & src_dev -> dev_group. cg_item ) ; target_undepend_item ( & src_dev -> dev_group. cg_item ) ; } <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for""",0
1143,"<S2SV_ModStart> ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_MULTICAST_HOPS."" ) ; err = - errno ; goto close_sock ; } val = 1 ; ret = setsockopt ( sock, IPPROTO_IPV6, IPV6_RECVHOPLIMIT, & val, sizeof ( val ) ) ; if ( ret == - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_RECVHOPLIMIT,.""",1
1144,"<S2SV_ModStart> int error ; struct mb2_cache * ext2_mb_cache = EXT2_SB ( sb ) -> s_mb_cache <S2SV_ModStart> ; ext2_xattr_cache_insert ( inode,",0
1145,"<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp. <S2SV_ModStart>. type, ""compression"", sizeof ( rcomp. type ) <S2SV_ModEnd> ) ; if",1
1146,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> { if ( <S2SV_ModEnd> vp9_set_active_map ( ctx",0
1147,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( rc <S2SV_ModEnd> ) return rc <S2SV_ModStart> return rc ; }",0
1148,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1149,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
1150,"<S2SV_ModStart> ) { size_t <S2SV_ModEnd> maxlen = 3 <S2SV_ModStart> len ; } if (! parse_path ( state ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> URL <S2SV_blank> path: <S2SV_blank> \'%s\'"", state -> ptr ) ; efree ( state ) ; return NULL ; }",0
1151,<S2SV_ModStart> SUCCESS ) { if ( Z_TYPE_PP ( var )!= IS_LONG ) { zval lval ; lval = * * var ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval ) ; points [ i ]. x = Z_LVAL ( lval ) ; } else { points [ i ]. x = <S2SV_ModStart> var ) ; } <S2SV_ModStart> SUCCESS ) { if ( Z_TYPE_PP ( var )!= IS_LONG ) { zval lval ; lval = * * var ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval ) ; points [ i ]. y = Z_LVAL ( lval ) ; } else { points [ i ]. y = <S2SV_ModStart> var ) ; },0
1152,<S2SV_ModStart> ; sig_none = <S2SV_ModEnd> timr -> it_sigev_notify <S2SV_ModStart> timr -> it_sigev_notify <S2SV_ModEnd> == SIGEV_NONE ;,1
1153,"<S2SV_ModStart> unsigned char * ) AcquireQuantumMemory ( imsx * imsy, 1 ) ; if ( imbuf == NULL ) { return ( MagickFalse ) ; } <S2SV_ModStart> ) Reset ( ) <S2SV_ModEnd> ; } for <S2SV_ModStart> n ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet",0
1154,"<S2SV_ModStart> ( ) ; strcpy <S2SV_ModEnd> ( t1_buf_array, <S2SV_ModStart> t1_line_array ) ; t1_buf_ptr = eol ( t1_buf_array ) ; t1_line_ptr = eol ( t1_line_array ) ; } else { strcpy ( t1_buf_array, t1_line_array ) ; t1_buf_ptr = eol ( t1_buf_array ) ; t1_line_ptr = eol ( t1_line_array ) ; }",0
1155,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; if ( ctx -> frame_parallel_decode ) { return vp9_copy_reference_dec ( ctx -> pbi, ( VP9_REFFRAME ) frame -> frame_type, & sd ) ; } else { return VPX_CODEC_INVALID_PARAM ; } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1156,"<S2SV_ModStart>. path ; return Curl_urldecode <S2SV_ModEnd> ( data, <S2SV_ModStart>, 0, & <S2SV_ModEnd> pop3c -> mailbox <S2SV_ModStart> pop3c -> mailbox, NULL, TRUE ) <S2SV_ModEnd> ; } <S2SV_null>",1
1157,<S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ; <S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ;,1
1158,"<S2SV_ModStart> gb ) ; if ( sh -> pps_id >= HEVC_MAX_PPS_COUNT ||! s -> ps. pps_list [ sh -> pps_id ] ) { av_log ( s -> avctx, AV_LOG_ERROR, ""PPS <S2SV_blank> id <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range: <S2SV_blank> %d\\n"", sh -> pps_id ) ; return AVERROR_INVALIDDATA ; }",0
1159,<S2SV_ModStart> } ps_dec -> u2_total_mbs_coded += u1_num_mbs ; if ( ps_dec -> u2_total_mbs_coded > ps_dec -> ps_cur_slice -> u1_slice_size ) { ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> ps_cur_slice -> u1_slice_size = u1_num_mbs ; ps_dec -> ps_cur_slice -> u1_slice_type = u1_inter_mb_type ; ps_dec -> ps_cur_slice -> u1_mbaff_frame_flag = u1_deblk_mb_type ; ps_dec -> ps_cur_slice -> u1_mbaff_frame_flag = u1_mbaff ; ps_dec -> ps_cur_slice -> u1_slice_type = u1_slice_type ; ps_dec -> ps_cur_slice -> u1_slice_num = u1_num_mbs ; ps_dec -> ps_cur_slice -> u1_mbaff_frame_flag = u1_,0
1160,"<S2SV_ModStart> u4_y_offset ; UWORD32 u4_x_dst_offset, u4_y_dst_offset ; IMPEG2D_TRACE_MB_START ( ps_dec -> u2_mb_x, ps_dec -> u2_mb_y ) ; <S2SV_ModStart> == B_PIC ) { <S2SV_ModStart> ps_dec ) ; } else { <S2SV_ModStart> ps_dec ) ; }",0
1161,"<S2SV_ModStart> VP9_LAST_FLAG ) { VP9_COMMON * const cm = & pbi -> common ; YV12_BUFFER * const cfg = cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ] ; if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; } else { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> reference <S2SV_blank> frame"" ) ; } } else if ( ref_frame_flag == VP9_LAST_FLAG ) { const YV12_BUFFER_CONFIG * const sd = & cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ] ; if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd",0
1162,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
1163,<S2SV_ModStart> -> mbmi ; <S2SV_ModEnd> const TX_SIZE tx_size <S2SV_ModStart> 1 ) ; const int num_4x4_w = num_4x4_wide_lookup [ plane_bsize ] ; const int num_4x4_h = num_4x4_high_lookup [ plane_bsize ] ; const int max_blocks_wide = num_4x4_w ; const int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_y ) ) ; i = 0 ; for ( r = 0 ; r < num_4x4_w ; r += ( 1 << tx_size ) ) { for ( c = 0 ; c < num_4x4_h ; c += ( 1 << tx_size,0
1164,<S2SV_ModStart> -> mmap_legacy_base = TASK_UNMAPPED_BASE + random_factor <S2SV_ModEnd> ; if (,1
1165,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 8 ) ; <S2SV_ModEnd> src += src_stride",1
1166,"<S2SV_ModStart> return getnum ( <S2SV_ModEnd> fmt, 1 <S2SV_ModStart> return getnum ( <S2SV_ModEnd> fmt, sizeof",0
1167,"<S2SV_ModStart> nrow ) { if ( img -> row_size < img -> row_offset ) { TIFFErrorExt ( tif -> tif_clientdata, ""gtStripSeparate"", ""%s"", ""(row+img->row_offset) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", row, ( int ) img -> row_size ) ; return ( 0 ) ; } <S2SV_ModStart> % rowsperstrip ; if ( img -> row_size < img -> row_offset ) { TIFFErrorExt ( tif -> tif_clientdata, ""gtStripSeparate"", ""%s"", ""(row+img->row_offset) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ( int ) img -> row_size ) ; return ( 0 ) ; }",0
1168,"<S2SV_ModStart> } } } if ( TYPE ( CHILD ( n, 0 ) ) == TYPE_COMMENT ) { i += 2 ; l = 0 ; if ( TYPE ( CHILD ( n, 1 ) ) == TYPE_COMMENT ) i += 2 ; } else if ( NCH ( n ) == 1 && TYPE ( CHILD ( n, 2 ) ) == TYPE_COMMENT ) i += 2 ; if ( i < ( NCH ( n ) - 1 ) ) { Py_FatalError ( buf ) ; } else { i = 2 ; l = 0 ; if ( TYPE ( CHILD ( n, 1 ) ) == TYPE_COMMENT ) i += 2 ; } else { i = 2 ; l = 0 ; if ( TYPE ( CHILD ( n, 1 ) ) == TYPE_COMMENT ) i += 2 ; for ( ; i < NCH ( n ) - 1 ; i ++ ) l += num_stmts ( CHILD ( n, i ) ) ; } return l ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1169,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1170,<S2SV_ModStart> ( upid == INT_MIN ) return - ESRCH ; if ( upid ==,1
1171,"<S2SV_ModStart> siocb -> scm, false",1
1172,<S2SV_ModStart> number ) ; if ( num & ( 1 << ( number - 1 ) ) ) return num - ( 1 << number ) ; else return num ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1173,"<S2SV_ModStart>, plane ) * ( ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH )? 2 : 1 ) <S2SV_ModStart> { if ( vpx_img_plane_width ( img, plane ) * ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) <S2SV_ModEnd>!= w ) <S2SV_ModStart> { if ( vpx_img_plane_height ( img, plane ) * ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) <S2SV_ModEnd>!= h )",0
1174,"<S2SV_ModStart> ; uint16_t attr_len <S2SV_ModEnd> ; uint16_t orig_attr_len <S2SV_ModStart> ; uint16_t last_block_len <S2SV_ModEnd> ; if ( <S2SV_ModStart> avp -> length > L2TP_AVP_MAX_AVP_LEN ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } attr_len = avp -> length - sizeof ( struct l2tp_avp_t ) ; if ( attr_len <= MD5_DIGEST_LENGTH ) { memcpy ( avp -> val, p1, attr_len - MD5_DIGEST_LENGTH ) ; orig_attr_len = ntohs ( * ( uint16_t * ) p1 ) ; if ( orig_attr_len > attr_len - 2 ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank>",0
1175,"<S2SV_ModStart> -> private ; struct dm_dev * dev = lc -> dev ; int r = 0 ; if <S2SV_ModEnd> ( lc -> <S2SV_ModStart> ( lc -> start || ti -> len!= i_size_read ( dev -> bdev -> bd_inode ) >> SECTOR_SHIFT ) r = scsi_verify_blk_ioctl ( NULL, cmd ) ; return r? : __blkdev_driver_ioctl ( <S2SV_ModStart> -> bdev, <S2SV_ModEnd> dev -> mode",1
1176,"<S2SV_ModStart> ; if (! actx -> key. valid ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_INVALID_PARAMETER_ERROR ) ; return 0 ; } actx -> tag_len = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 4 ) ; actx -> tls_payload_length = NO_TLS_PAYLOAD_LENGTH ; actx -> cipher_data = OPENSSL_memdup ( actx, sizeof ( * actx ) + Poly1305_ctx_size ( ) ) ; if ( dst -> cipher_data == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_INVALID_PARAMETER_ERROR ) ; return 0 ; } actx -> nonce [ 0 ] = actx -> key. counter [ 1 ] = actx -> key. counter [ 2 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 4 ) ; actx -> nonce [ 1 ] = actx -> key. counter [ 3 ] = CHACHA_U8TOU32",0
1177,"<S2SV_ModStart> alg ) { if (! <S2SV_ModStart> ) request_module ( ""crypto-larval-%s"" <S2SV_ModEnd>, name ) <S2SV_ModStart> ) request_module ( ""crypto-larval-%s"" <S2SV_ModEnd>, name )",0
1178,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0 ) ;",0
1179,<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ;,1
1180,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1181,"<S2SV_ModStart> sock, sk ) ; memset ( sa, 0, sizeof ( * sa )",1
1182,"<S2SV_ModStart> { memcpy ( pass_salt <S2SV_ModEnd>, cpkt.",0
1183,<S2SV_ModStart> NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC | NTLMSSP_NEGOTIATE_SEAL <S2SV_ModStart> -> sign ) <S2SV_ModEnd> flags |= NTLMSSP_NEGOTIATE_SIGN <S2SV_ModStart> |= NTLMSSP_NEGOTIATE_KEY_XCH ; <S2SV_ModEnd> tmp = *,1
1184,<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_empty ( adata -> conn ) ; <S2SV_ModStart> goto err_close_conn ; } mutt_socket_empty ( adata -> conn ) ;,0
1185,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
1186,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horDiff8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
1187,"<S2SV_ModStart> -> head <= 0 || ( unsigned char ) ( ( g -> sect << 2 ) >> FD_SIZE ( g ) ) <= 0 || ( unsigned char ) ( g -> head & 7 ) || ( ( g -> stretch & ~ ( FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK ) )!= 0 ) || ( g -> stretch & ~ ( FD_STRETCH | FD_SECTBASEMASK ) )!= 0 ) return - EINVAL ; if ( ( cmd & FDDEFPRM ) ) { if ( poll_drive ( true, FD_RAW_NEED_DISK ) == - EINTR ) return - EINTR ; } current_type [ drive ] = & user_params [ drive ] ; floppy_sizes [ drive ] = & user_params [ drive ] ; if ( cmd == FDDEFPRM ) { if ( poll_drive ( true, FD_RAW_NEED_DISK ) == - EINTR ) return - EINTR ; } else { if ( buffer_drive == drive ) SUPBOUND ( buffer_max, user_params [ drive ].",0
1188,"<S2SV_ModStart> } else { if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } else if ( strncmp ( line, ""{\\""class\\"":\\""AGENTS\\"",\\""AGENTS\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } else if ( strncmp ( line, ""{\\""class\\"":\\""AGENTS\\"",\\""AGENTS\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } else if ( strncmp ( line, ""{\\""class\\"":\\""AGENTS\\"",\\""AGENTS\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } else if ( strncmp ( line, ""{\\""class\\"":\\""AGENTS\\"",\\""AGENTS\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> } } <S2SV_null>",0
1189,"<S2SV_ModStart>, & rlen, 0",1
1190,"<S2SV_ModStart> * slavename ; int len ; <S2SV_ModStart> = 0 ; len <S2SV_ModEnd> = strlen ( <S2SV_ModStart> -> password, len <S2SV_ModEnd> ) ; memcpy <S2SV_ModStart> -> pass_salt, len <S2SV_ModEnd> ) ; md5_init <S2SV_ModStart> state ) ; memcpy <S2SV_ModEnd> ( & state <S2SV_ModStart> ( & state, ( const md5_byte_t * ) md5data, len <S2SV_ModEnd> ) ; md5_finish <S2SV_ModStart> ( & state, ( const md5_byte_t * ) md5data + 1 + len <S2SV_ModEnd> + 17 ) <S2SV_ModStart> + 17 ) ; <S2SV_ModEnd> init_packet ( & <S2SV_ModStart> & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> seskey, curconn -> outcounter ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PTYPE_END_AUTH, NULL, 0 ) ; if ( curconn -> state == STATE_ACTIVE ) { abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ; return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1191,"<S2SV_ModStart> mntent, path, rootfs -> mount",1
1192,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> PyUnicode_CompareWithASCIIString ( name <S2SV_ModStart> * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } if (",0
1193,<S2SV_ModStart> ) ; } for ( j = cur_page ; j < page_limit ; j ++ ) { if (! pages [ j ] ) break ; put_page ( pages [ j ] ) ; } <S2SV_ModEnd> out_unmap : bio_for_each_segment_all,0
1194,<S2SV_ModStart> -> depth ; if ( numcolors > RAS_CMAP_MAXSIZ ) { return - 1 ; } <S2SV_ModEnd> actualnumcolors = hdr,1
1195,"<S2SV_ModStart> state. path <S2SV_ModEnd> ; char localhost <S2SV_ModStart> ""localhost"" ; } result = Curl_urldecode ( conn -> data, path, 0, & <S2SV_ModStart> smtpc -> domain, NULL, TRUE ) ; if ( result ) return result <S2SV_ModEnd> ; state (",1
1196,"<S2SV_ModStart> ( str, ""ID:"" <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, jslGetTokenValueAsString <S2SV_ModEnd> ( ), <S2SV_ModStart> ( str, jslGetTokenValueAsString <S2SV_ModEnd> ( ), <S2SV_ModStart> ( str, jslGetTokenValueAsString <S2SV_ModEnd> ( ),",0
1197,<S2SV_ModStart> [ i ] && j < sizeof ( buf ),0
1198,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
1199,<S2SV_ModStart> 0 ) ; if ( off == sizeof ( struct rds_header ) ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart> + RDS_CONG_MAP_BYTES ; if ( off == sizeof ( struct rds_header ) ) { ret = - EINVAL ; goto out ; },0
1200,<S2SV_ModStart> 0 ) ; if (! r ) return - EINVAL ;,1
1201,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1202,,1
1203,"<S2SV_ModStart> ; } } if ( IS_MODE_SET ( mode ) ) { r_flag_space_set ( r -> flags, R_FLAGS_FS_ENTRIES ) ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> exports\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } <S2SV_ModStart> } } } if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_SET ( mode ) ) { r_flag_space_set ( r -> flags, R_FLAGS_FS_SYMBOLS ) ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else",0
1204,"<S2SV_ModStart>, rqstp, res <S2SV_ModEnd> ) ; out",1
1205,<S2SV_ModStart> mntent ) { if ( IS_ERR ( mntent -> mnt_dir ) ) return PTR_ERR ( mntent -> mnt_dir ) ; else return 0 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1206,"<S2SV_ModStart> iv ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
1207,"<S2SV_ModStart> ) ) { * status = ""EVIDENCE_TICKET_MISMATCH"" ; return KRB5KDC_ERR_BADOPTION <S2SV_ModEnd> ; } if <S2SV_ModStart>, server_princ ) ) { * status = ""EVIDENCE_TICKET_MISMATCH"" ; return KRB5KDC_ERR_SERVER_NOMATCH ; } if (! isflagset ( t2enc -> flags, TKT_FLG_FORWARDABLE ) ) { * status = ""EVIDENCE_TICKET_NOT_FORWARDABLE"" ; return KRB5_TICKET_NOT_FORWARDABLE ; } if (! isflagset ( t2enc -> flags, TKT_FLG_FORWARDABLE ) ) { * status = ""EVIDENCE_TICKET_NOT_FORWARDABLE"" ; return KRB5_TICKET_NOT_FORWARDABLE ; }",0
1208,<S2SV_ModStart> thread -> tp_value [ 0 ] <S2SV_ModStart> childregs -> ARM_r3 ; thread -> tp_value [ 1 ] = get_tpuser ( ),1
1209,"<S2SV_ModStart> bufsize ) { size_t newbufsize <S2SV_ModEnd> ; JAS_DBGLOG ( <S2SV_ModStart> ; if ( bufsize <= 0 ) { jas_deprecated ( ""negative <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> for <S2SV_blank> jas_stream_memopen"" ) ; } if (! jas_safe_size_mul ( bufsize, & newbufsize ) ) { jas_deprecated ( ""negative <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> for <S2SV_blank> jas_stream_memopen"" ) ; } if ( bufsize <= 0 ) { jas_deprecated ( ""negative <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> for <S2SV_blank> jas_stream_memopen"" ) ; } if ( bufsize <= 0 ) { jas_deprecated ( ""negative <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> for <S2SV_blank> jas_stream_memopen"" ) ; } if (! jas_safe_size_mul ( bufsize, & newbufsize ) ) { jas_deprecated ( ""negative <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> for <S2SV_blank> jas_stream_memopen"" ) ; } jas_deprecated ( ""negative <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> for <S2SV_blank> jas_stream_memopen"" ) ; jas_deprecated ( ""negative <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> for <S2SV_blank> j",0
1210,"<S2SV_ModStart> sshbuf * b = NULL <S2SV_ModStart> char * pkalg = NULL <S2SV_ModStart> ca_s = NULL <S2SV_ModEnd> ; u_char * <S2SV_ModStart>, * sig = NULL <S2SV_ModStart> ; if (! authctxt -> valid ||! authctxt -> user ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( ( r = <S2SV_ModEnd> sshpkt_get_u8 ( ssh <S2SV_ModStart>, & have_sig ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & pkalg, NULL ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & pkblob, & blen ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_string ( ssh, & blen, & sig, & slen ) )!= 0 ) fatal ( ""%s: <S2SV_blank> parse <S2SV_blank> request <S2SV_blank> failed: <S2SV_blank> %s"", __func__, ssh_err ( r )",0
1211,"<S2SV_ModStart> ; uint32_t bcount ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
1212,<S2SV_ModStart> == READ ) { mutex_lock ( & inode -> i_mmap_sem ) ; <S2SV_ModStart> = ocfs2_dio_get_block ; mutex_unlock ( & inode -> i_mmap_sem ) ;,0
1213,"<S2SV_ModStart> mech ) ) { ret = gsasl_server_start ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn; <S2SV_blank> (%d): <S2SV_blank> %s"", ret, gsasl_strerror ( ret ) ) ; _sx_nad_write ( s, _sx_sasl_failure ( s, _sasl_err_TEMPORARY_FAILURE, gsasl_strerror ( ret ) ) ; _sx_nad_write ( s, _sx_sasl_failure ( s, _sasl_err_TEMPORARY_FAILURE, gsasl_strerror ( ret ) ), 0 ) ; return ; } ret = gsasl_server_start ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank>",0
1214,<S2SV_ModStart> tn_buf ) ; return - EACCES ;,1
1215,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteFujiEntry ) ) ;",1
1216,"<S2SV_ModStart> failed_mount3 ; } if ( le32_to_cpu ( es -> s_first_meta_block ) < db_count ) { ext2_msg ( sb, KERN_WARNING, ""first <S2SV_blank> meta <S2SV_blank> block <S2SV_blank> group <S2SV_blank> too <S2SV_blank> large"" ) ; goto failed_mount3 ; } <S2SV_ModStart> failed_mount3 ; } if ( le32_to_cpu ( es -> s_first_meta_block ) < db_count ) { ext2_msg ( sb, KERN_WARNING, ""second <S2SV_blank> meta <S2SV_blank> block <S2SV_blank> group <S2SV_blank> too <S2SV_blank> large"" ) ; goto failed_mount3 ; }",0
1217,<S2SV_ModStart> bd_addr ) { if ( bd_addr == NULL ) return BT_STATUS_INVALID_PARAMETER ;,0
1218,"<S2SV_ModStart> ; if ( tcp_hdrlen + 4 > skb -> len ) return - 1 ; if ( info -> mss == XT_TCPMSS_CLAMP_PMTU ) { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"", minlen ) ; return - 1 ; } else if ( info -> mss > XT_TCPMSS_CLAMP_PMTU ) { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"", min_mtu ) ; return - 1 ; } else",0
1219,<S2SV_ModStart> int i ; size_t size ; matrix = 0 ; <S2SV_ModStart> 0 ) { goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } matrix <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } } <S2SV_ModStart> return matrix ; error : jas_matrix_destroy ( matrix ) ; return 0 ;,0
1220,"<S2SV_ModStart> ipv6_select_ident ( fh, rt <S2SV_ModStart> ipv6_select_ident ( fh, rt",1
1221,"<S2SV_ModStart> void ext4_xattr_cache_insert ( <S2SV_ModEnd> struct buffer_head * <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; <S2SV_ModEnd> if (! <S2SV_ModStart> return ; } <S2SV_ModEnd> error = mb_cache_entry_insert <S2SV_ModStart> bh -> b_blocknr <S2SV_ModEnd>, hash ) <S2SV_ModStart> error ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> } } <S2SV_null>",0
1222,<S2SV_ModStart> * req ; <S2SV_ModEnd> req = scsi_req_alloc <S2SV_ModStart> hba_private ) ; <S2SV_ModEnd> return req ;,1
1223,"<S2SV_ModStart> int i ; size_t <S2SV_ModEnd> avail ; txid <S2SV_ModStart> 4 ) ; if ( buf -> len < buf -> cursor ) { elog ( ERROR, ""invalid <S2SV_blank> snapshot <S2SV_blank> data"" ) ; return ( Datum ) NULL ; } <S2SV_ModStart> buf -> cursor ; expect = 8 + 8 + nxip * 8 ; if ( expect < 0 || expect > avail ) { elog ( ERROR, ""invalid <S2SV_blank> snapshot <S2SV_blank> data"" ) ; return ( Datum ) NULL ; } <S2SV_ModEnd> xx = pq_getmsgint64 <S2SV_ModStart> buf ) ; if ( xmin == 0 || xmin > MAX_TXID ) { elog ( ERROR, ""invalid <S2SV_blank> snapshot <S2SV_blank> data"" ) ; return ( Datum ) NULL ; }",0
1224,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1225,"<S2SV_ModStart>!= RDMA_NODE_IB_CA ) { ret = - EADDRNOTAVAIL ; rdsdebug ( ""addr <S2SV_blank> %pI4 <S2SV_blank> ret <S2SV_blank> %d <S2SV_blank> node <S2SV_blank> type <S2SV_blank> %d\\n"", & addr, ret, cm_id -> device? cm_id -> device -> node_type : - 1 ) ; rdma_destroy_id ( cm_id ) ; return ret ; } <S2SV_ModEnd> rdsdebug ( ""addr <S2SV_blank> %pI4 <S2SV_blank> ret <S2SV_blank> %d <S2SV_blank> node <S2SV_blank> type <S2SV_blank> %d\\n""",0
1226,<S2SV_ModStart> xfrm_policy_walk * ) <S2SV_ModEnd> cb -> args <S2SV_ModStart> cb -> args <S2SV_ModEnd> ; struct xfrm_dump_info <S2SV_ModStart> struct xfrm_dump_info info <S2SV_ModEnd> ; info. <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> ( void ),1
1227,"<S2SV_ModStart> = - 1 ; size_t len = count ; <S2SV_ModStart> = 0 ; len = oe_syscall_write_ocall ( epoll -> host_fd, buf, count, & len ) ; if ( len > ( ssize_t ) len ) OE_RAISE_ERRNO ( OE_EINVAL ) ; <S2SV_ModStart> ) ; done : if ( ret > ( ssize_t ) len ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; }",0
1228,"<S2SV_ModStart> dentry * upper <S2SV_ModEnd> ; int err <S2SV_ModStart> I_MUTEX_PARENT ) ; upper = lookup_one_len ( dentry -> d_name. name, upperdir ) ; err = PTR_ERR ( upper ) ; if ( IS_ERR ( upper ) ) goto out_unlock <S2SV_ModEnd> ; inode_lock_nested ( <S2SV_ModStart> I_MUTEX_PARENT ) ; <S2SV_ModEnd> if ( upper <S2SV_ModStart> == upperdir ) { <S2SV_ModEnd> dget ( upper <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> ovl_dentry_version_inc ( dentry <S2SV_ModStart> dentry ) ; out_unlock :",0
1229,"<S2SV_ModStart> { errstr = parse_global_option ( CMD_INITIALIZE, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_ERR, ""Global <S2SV_blank> options: <S2SV_blank> %s"", errstr ) ; return 1 ; } } if ( * section_ptr == & new_service_options ) { s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_ERR, ""Service <S2SV_blank> [%s]: <S2SV_blank> %s"", ( * section_ptr ) -> servname, errstr ) ; return 1 ; } } if ( * section_ptr == & new_service_options ) { s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIAL",0
1230,<S2SV_ModStart> * ptrptr && <S2SV_ModEnd> nmemb && size <S2SV_ModStart> nmemb && size <S2SV_ModEnd> ) return AVERROR,1
1231,<S2SV_ModStart> ; if ( geti8 ( a ) <S2SV_ModEnd> == MAPI_BODY_HTML ) <S2SV_ModStart> else if ( geti8 ( a ) <S2SV_ModEnd> == MAPI_BODY_RTF ) <S2SV_ModStart> else if ( geti8 ( a ) <S2SV_ModEnd> == MAPI_RTF_COMPRESSED ) <S2SV_ModStart> else if ( geti8 ( a ) <S2SV_ModEnd> == MAPI_BODY_TEXT ) <S2SV_ModStart> else if ( geti8 ( a ) <S2SV_ModEnd> == MAPI_BODY_HTML ) <S2SV_ModStart> else if ( geti8 ( a ) <S2SV_ModEnd> == MAPI_RTF_COMPRESSED ),0
1232,"<S2SV_ModStart> ; if ( ( i -> width < i -> parent -> width ) || ( i -> height < i -> parent -> height ) ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } if ( ( i -> height < i -> parent -> height ) || ( i -> width < i -> parent -> width ) || ( i -> height < i -> parent -> height ) ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank>",0
1233,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : * ( size_t * ) val = ms -> elf_notes_max ; return 0 ;,1
1234,"<S2SV_ModStart> 1 ) { jas_eprintf ( ""got <S2SV_blank> box <S2SV_blank> type <S2SV_blank> %s\\n"" <S2SV_ModEnd>, box -> <S2SV_ModStart> info -> name ) ; goto error ; } if (! jas_safe_size_mul3 ( <S2SV_ModEnd> box -> data <S2SV_ModStart>!= JAS_CAST ( jas_uint <S2SV_ModEnd>, box -> <S2SV_ModStart>!= JAS_CAST ( jas_uint <S2SV_ModEnd>, box -> <S2SV_ModStart>!= JAS_CAST ( jas_uint <S2SV_ModEnd>, box -> <S2SV_ModStart>!= JAS_CAST ( jas_uint <S2SV_ModEnd>, box -> <S2SV_ModStart>!= JAS_CAST ( jas_uint <S2SV_ModEnd>, box -> <S2SV_ModStart>!= JAS_CAST ( jas_uint <S2SV_ModEnd>, box -> <S2SV_ModStart>!= JAS_CAST ( jas_uint <S2SV_ModEnd>, box -> <S2SV_ModStart>!= JAS_CAST ( jas_uint <S2SV_ModEnd>, box -> <S2SV_ModStart>!= JAS_CAST ( jas_uint <S2SV_ModEnd>, box -> <S2SV_ModStart>!= JAS_CAST ( jas_uint <S2SV_ModEnd>, box -> <S2SV_ModStart>!= JAS_CAST ( jas_uint <S2SV_ModEnd>, box -> <S2SV_ModStart>!= JAS_CAST ( jas_uint <S2SV_ModEnd>, box -> <S2SV_ModStart>!= JAS_CAST ( j",0
1235,,1
1236,"<S2SV_ModStart> & 0xffff ; if (! check_patch ( dev, fmt, buf, p + 4, c, 0 ) ) return err ; err = synth_devs [ dev ] -> load_patch ( dev, fmt, buf, p + 4, c, 0 ) ; if ( err",0
1237,<S2SV_ModStart> * journal = EXT4_JOURNAL ( page -> mapping -> host ) ; if (! try_get_journal ( journal ) ) { ClearPageChecked ( page ) ; return ; } <S2SV_ModEnd> if ( offset,0
1238,"<S2SV_ModStart> i ++ ) { writer = GF_SAFEALLOC ( writer, TrackWriter ) ; if (! writer ) goto exit ; if ( trak -> Media -> information -> sampleTable ) { writer -> mdia = ( GF_TrackBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_MEDIA ) ; if (! writer -> mdia ) return GF_OUT_OF_MEM ; } else { writer -> mdia = ( GF_TrackBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_MEDIA ) ; if (! writer -> mdia ) return GF_OUT_OF_MEM ; } } else { writer -> mdia = ( GF_TrackBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_MEDIA ) ; if (! writer -> mdia ) return GF_OUT_OF_MEM ; }",0
1239,<S2SV_ModStart> UINT32 nsc_rle_encode ( const,1
1240,"<S2SV_ModStart> ; int plen = 0 <S2SV_ModEnd> ; md5_state_t state <S2SV_ModStart> ; # endif strncpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> password, 82 ) ; memcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> ; memcpy ( md5data <S2SV_ModEnd> + 1, <S2SV_ModStart> ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; init_packet ( & data, MT_PTYPE_DATA, srcmac, dstmac, sessionkey, outcounter ) ; if ( is_a_tty && get_terminal_size ( & width, & height )!= - 1 ) { width = htole16 ( width ) ; height = htole16 ( height ) ; } if ( is_a_tty && get_terminal_size ( & width, & height )!= - 1 ) { width = htole16 ( width ) ; height = htole16 ( height ) ; } if ( is_a_tty && get_terminal_size ( & width, & height )!= - 1 ) { width = htole16 ( width ) ; height = htole16 ( height",0
1241,"<S2SV_ModStart> * dllhandle ; if ( COM_CompareExtension ( name, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", name ) ; return NULL ; }",1
1242,<S2SV_ModStart> ; if ( _mibindex_max > 0 ) SNMP_FREE ( _mibindex_max ) ; _mibindex_max = 0 ;,0
1243,"<S2SV_ModStart> ( n ) \\\n{ <S2SV_ModEnd> sum = ( <S2SV_ModStart> ) & 0xffffffff <S2SV_ModEnd> ; bits -= <S2SV_ModStart> ++ ; } \\\n} <S2SV_ModEnd> typedef struct PCDTable <S2SV_ModStart> buffer ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; for ( j = 0 ; j < i ; j ++ ) pcd_table [ j ] = ( PCDTable * ) RelinquishMagickMemory ( buffer ) ; for ( j = 0 ; j < i ; j ++ ) pcd_table [ j ] = ( PCDTable * ) RelinquishMagickMemory ( buffer ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; for ( j = 0 ; j < i ; j ++ ) pcd_table [ j ] = ( PCDTable * ) RelinquishMagickMemory ( buffer ) ; for ( j = 0 ; j < i ; j ++ ) pcd_table [ j ] = ( PCDTable * ) RelinquishMagickMemory ( buffer ) ; if (",0
1244,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1245,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1246,"<S2SV_ModStart> # ifdef HAVE_IPV6 <S2SV_ModEnd> char * p <S2SV_ModStart> 1 ) { if ( str_len > 2 ) { <S2SV_ModStart> 2 ) ; } else { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } <S2SV_ModStart> colon ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } <S2SV_ModEnd> return estrndup ( <S2SV_ModStart> colon ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } <S2SV_ModEnd> } # endif <S2SV_ModStart> colon ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1247,"<S2SV_ModStart>, i, ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; } for ( i = 0 ; i < qcd -> compparms. numstepsizes ; ++ i ) { fprintf ( out, ""expn[%d] <S2SV_blank> = <S2SV_blank> 0x%04x; <S2SV_blank> mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", i, ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", i, ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] )",0
1248,"<S2SV_ModStart> -> y_buffer ; const uint32_t width = src_ybc -> y_width ; const uint32_t height = src_ybc -> y_height ; <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst, <S2SV_ModStart> src_ybc -> y_width, width <S2SV_ModEnd> ) ; src",0
1249,"<S2SV_ModStart> AVERROR_INVALIDDATA ; } if ( c -> log2_cblk_width > 6 || c -> log2_cblk_height > 6 ) { avpriv_request_sample ( s -> avctx, ""cblk <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", c -> log2_cblk_width, 6 ) ; return AVERROR_INVALIDDATA ; }",0
1250,<S2SV_ModStart> == * ptr && ptr [ 1 ],1
1251,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> mi_col < tile -> mi_col_end <S2SV_ModEnd> ; mi_col += <S2SV_ModStart> { int dummy_rate ; int64_t dummy_dist ; BLOCK_SIZE i ; MACROBLOCK * x = & cpi -> mb ; if ( sf -> adaptive_pred_interp_filter ) { for ( i = BLOCK_4X4 ; i < BLOCK_8X8 ; ++ i ) { const int num_4x4_w = num_4x4_blocks_wide_lookup [ i ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ i ] ; const int num_4x4_blk = MAX ( 4, num_4x4_w * num_4x4_h ) ; for ( x -> sb_index = 0 ; x -> mb_index < 4 ; ++ x -> sb_index ) for ( x -> b_index =",0
1252,"<S2SV_ModStart> obj_tlen ; int <S2SV_ModEnd> hexdump ; u_int <S2SV_ModStart> hexdump ) ) ; return ; } if ( tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } if ( tlen > len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; }",0
1253,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> inc_mvs ( const <S2SV_ModStart> ], nmv_context_counts * counts ) { MV diff ; for ( i = 0 ; i < 2 ; ++ i ) { diff = { mvs [ i ]. as_mv. row - mbmi -> ref_frame [ i ]. row, mvs [ i ]. as_mv. col - mbmi -> ref_mvs [ i ]. as_mv. col } ; vp9_inc_mv ( & diff, counts ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1254,"<S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ),",0
1255,<S2SV_ModStart> ; if ( skb_out -> len + hdr_size > skb -> len ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } if (,0
1256,<S2SV_ModStart> sta -> lock ) ; spin_lock_init ( & sta -> ps_lock,1
1257,<S2SV_ModStart> tp_event ) && perf_paranoid_tracepoint_raw <S2SV_ModEnd> ( ) &&,1
1258,<S2SV_ModStart> ( ) ; unregister_pernet_subsys ( & sctp_ipv4_ops ) ; unregister_pernet_subsys ( & sctp_ipv6_ops ) ; unregister_pernet_subsys ( & sctp_ipv6_ops ) ; unregister_pernet_subsys ( & sctp_ipv4_ops ) ;,0
1259,"<S2SV_ModStart>, 0 ) ; if (! data_interface ||! control_interface ) return - ENODEV",1
1260,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1261,"<S2SV_ModStart> return ; netsnmp_init_mib_internals ( ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ; entry = strtok_r ( NULL, ENV_SEPARATOR, & st ) ; } <S2SV_ModEnd> } netsnmp_init_mib_internals ( <S2SV_ModStart> ) { add_mibfile <S2SV_ModEnd> ( entry, <S2SV_ModStart> NULL, NULL <S2SV_ModEnd> ) ; entry <S2SV_ModStart> } netsnmp_init_mib_internals ( ) ; env_var = strdup ( netsnmp_getenv ( ""MIBS"" ) ) ; if ( env_var == NULL ) { if ( confmibs!= NULL ) env_var = strdup ( confmibs ) ; else env_var = strdup ( NETSNMP_DEFAULT_MIBS ) ; } else { entry = strdup ( env_var ) ; } SNMP_FREE ( env_var ) ; <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
1262,"<S2SV_ModStart> * head ; <S2SV_ModEnd> newsk -> sk_sndbuf <S2SV_ModStart> oldsk -> sk_rcvbuf ; sctp_copy_descendant ( newsk, oldsk ) ; newsp -> ep = newep ; newsp -> hmac = NULL ; head = & sctp_port_hashtable [ inet_sk ( oldsk ) -> inet_num ] ; spin_lock ( & head -> lock ) ; pp = sctp_sk ( oldsk ) -> bind_hash ; sk_add_bind_node ( newsk, & pp -> owner ) ; sctp_sk ( newsk ) -> bind_hash = pp ; sctp_sk ( newsk ) -> inet_num = inet_sk ( oldsk ) -> inet_num ; spin_unlock ( & head -> lock ) ;",0
1263,"<S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> [ x ], O_RDWR ) <S2SV_ModStart> 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_RDWR ) <S2SV_ModStart>, EV_KEY ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_REL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, UI_SET_EVBIT, SYN ) <S2SV_ModStart> fd, UI_SET_KEYBIT, key_map [ x ]. <S2SV_ModEnd> mapped_id ) ;",0
1264,"<S2SV_ModStart> { struct desc_struct <S2SV_ModEnd> desc ; short <S2SV_ModStart> return sel ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! get_desc ( & desc, sel ) <S2SV_ModEnd> ) return - <S2SV_ModStart> if (! get_desc ( & desc, sel ) <S2SV_ModEnd> ) return - <S2SV_ModStart> if (! get_desc ( & desc, sel ) <S2SV_ModEnd> ) return - <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> switch ( (",0
1265,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
1266,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
1267,<S2SV_ModStart> return ret ; fsnotify_put_group ( group ) ;,1
1268,<S2SV_ModStart> <S2SV_null> <S2SV_null> static krb5_error_code <S2SV_ModEnd> iakerb_alloc_context ( iakerb_ctx_id_t <S2SV_ModStart> ; code = krb5_gss_init_context ( & ctx -> k5c <S2SV_ModEnd> ) ; if,0
1269,"<S2SV_ModStart> var_off ) ; if ( src_known &&! dst_reg -> smin_value ) { verbose ( env, ""R%d <S2SV_blank> tried <S2SV_blank> to <S2SV_blank> add <S2SV_blank> from <S2SV_blank> different <S2SV_blank> pointers <S2SV_blank> or <S2SV_blank> scalars\\n"", dst_reg -> smin_value ) ; return - EINVAL ; } <S2SV_ModEnd> switch ( opcode <S2SV_ModStart> case BPF_SUB : verbose ( env, ""R%d <S2SV_blank> tried <S2SV_blank> to <S2SV_blank> sub <S2SV_blank> from <S2SV_blank> different <S2SV_blank> pointers <S2SV_blank> or <S2SV_blank> scalars\\n"", dst_reg -> smin_value ) ; verbose ( env, ""R%d <S2SV_blank> tried <S2SV_blank> to <S2SV_blank> sub <S2SV_blank> from <S2SV_blank> different <S2SV_blank> pointers <S2SV_blank> or <S2SV_blank> scalars\\n"", dst_reg -> smax_value ) ; return - EINVAL ; }",0
1270,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> bitmapDC = CreateCompatibleDC",1
1271,<S2SV_ModStart> ; while ( ( <S2SV_ModStart> )!= START_CODE_PREFIX ) && ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ),1
1272,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { kfree ( string ) ; <S2SV_ModStart> - EINVAL ; }",0
1273,<S2SV_ModStart> imethod ) ; if ( inflated == NULL ) { Mono <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1274,"<S2SV_ModStart> ""nnnnn\\0"" ) ] ; unsigned long tmp <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( buf, buffer, count ) ) return - EFAULT ; tmp = simple_strtol ( buf, & end, 0 ) ; if ( ( * end!= '\\0' ) &&! isspace ( * end ) ) return - EINVAL ; uml_exitcode = tmp ; if (",0
1275,"<S2SV_ModStart>, ""Pushing <S2SV_blank> input <S2SV_blank> %d <S2SV_blank> : <S2SV_blank> %.30s\\n"" <S2SV_ModEnd>, ctxt -> <S2SV_ModStart> input -> cur ) ; } if ( ( ( ctxt -> options & XML_PARSE_HUGE ) == 0 ) && ( ( ctxt -> options & XML_PARSE_HUGE ) == 0 ) && ( ( ctxt -> options & XML_PARSE_HUGE ) == 0 ) && ( ( ctxt -> options & XML_PARSE_HUGE ) == 0 ) && ( ( ctxt -> options & XML_PARSE_HUGE ) == 0 ) && ( ( ctxt -> options & XML_PARSE_HUGE ) == 0 ) && ( ( ctxt -> options & XML_PARSE_HUGE ) == 0 ) ) && ( ( ctxt -> options & XML_PARSE_HUGE ) == 0 ) && ( ( ctxt -> options & XML_PARSE_HUGE ) == 0 ) && ( ( ctxt -> options & XML_PARSE_HUGE ) == 0 ) && ( ( ctxt -> options & XML_PARSE_HUGE ) == 0 ) && ( ( ctxt -> options & XML_PARSE_HUGE ) == 0 ) && ( ( ctxt ->",0
1276,"<S2SV_ModStart> } if ( le32_to_cpu ( raw_super -> segment_count ) > F2FS_MAX_SEGMENT ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> segment <S2SV_blank> count <S2SV_blank> (%u)"", le32_to_cpu ( raw_super -> segment_count ) ) ; return 1 ; } if (",1
1277,"<S2SV_ModStart> is_path ) { const <S2SV_ModEnd> char * last_elem <S2SV_ModStart> ( ( ( strncmp ( & name [ 1 ], ""ORIGIN}"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( ( strncmp ( & name [ 1 ], ""PLATFORM}"", 8 ) == 0 && ( len = 9 )!= 0 ) ) && ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( len = 11 )!= 0 ) ) && ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) { char * repl ; size_t len ; if ( len == 7 || name [ 2 ] == 'O' ) { <S2SV_ModEnd> wp = last_elem <S2SV_ModStart> l -> l_origin <S2SV_ModEnd> ) : _dl",0
1278,"<S2SV_ModStart> ) ; } if ( sizeof ( decContainer_t ) > MAX_DEC_SIZE ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> Memory <S2SV_blank> allocation <S2SV_blank> failed"" ) ; return ( H264SWDEC_MEMFAIL ) ; }",0
1279,<S2SV_ModStart> len ) { struct ipv6_txoptions * opt_to_free = NULL ; <S2SV_ModStart>! opt ) { opt = txopt_get ( np ) ; opt_to_free = opt ; } <S2SV_ModEnd> if ( flowlabel <S2SV_ModStart> flowlabel ) ; txopt_put ( opt_to_free ) ;,1
1280,"<S2SV_ModStart> == 5 ) goto inhdr_error ; if ( IPCB ( skb ) -> opt. optlen == 0 ) { IPCB ( skb ) -> opt. optlen = sizeof ( struct iphdr ) ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> opt. srr ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INHDRERRORS ) ; goto drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> srr ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INHDRERRORS ) ; goto drop ; } <S2SV_ModEnd> return 0 ;",0
1281,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> } break ;",1
1282,"<S2SV_ModStart> ; rt = rcu_dereference_protected ( rt -> dst, sock_owned_by_user ( in_skb ) ) ; if ( rt == NULL ) { err = - EINVAL ; goto errout ; }",0
1283,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1284,"<S2SV_ModStart> goto errout ; if (! info -> stagemasks ) { _ogg_free ( info -> stagemasks ) ; goto errout ; } for ( j = 0 ; j < info -> partitions ; j ++ ) { if ( info -> groupbook >= ci -> books ) { _ogg_free ( info -> stagebooks ) ; goto errout ; } } for ( j = 0 ; j < info -> partitions ; j ++ ) { int book = ( unsigned char ) oggpack_read ( opb, 3 ) ; if ( oggpack_read ( opb, 1 ) ) goto errout ; } for ( j = 0 ; j < info -> partitions ; j ++ ) { if ( info -> stagemasks [ j ] >= ci -> books ) { _ogg_free ( info -> stagebooks ) ; goto errout ; } for ( j = 0 ; j < info -> partitions ; j ++ ) { int cascade = ( unsigned char ) oggpack_read ( opb, 3 ) ; if ( oggpack_read ( opb, 1 ) ) { int cascade = ( unsigned char ) oggpack_read ( opb,",0
1285,"<S2SV_ModStart> ; if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog <S2SV_ModStart> -> prog, <S2SV_ModEnd> m, 0",0
1286,<S2SV_ModStart> ) break ; <S2SV_ModEnd> tp -> copied_seq <S2SV_ModStart> = seq ; } tp -> copied_seq = seq ;,1
1287,"<S2SV_ModStart> ; krb5_key_data * key_data ; if ( n_key_data == 0 || key_data_in == NULL ) goto cleanup ; key_data = k5calloc ( n_key_data, sizeof ( * key_data ), & err ) ; if ( key_data == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data - 1 ; i ++ ) if ( key_data [ i ]. key_data_kvno!= key_data [ i + 1 ]. key_data_kvno ) num_versions ++ ; ret = ( struct berval * * ) k5calloc ( num_versions + 1, sizeof ( struct berval * ) ) ; if ( ret == NULL ) { err = ENOMEM ; goto cleanup ; } for ( i = 0 ; i < n_key_data - 1 ; i ++ ) if ( key_data [ i ]. key_data_kvno!= key_data [ i + 1 ]. key_data_kvno )",0
1288,"<S2SV_ModStart> * value ) { if ( idx >= self -> memo_size ) { if ( _Unpickler_ResizeMemoList ( self, idx * 2 ) < 0 ) return - 1 ; assert ( idx < self -> memo_size",0
1289,"<S2SV_ModStart> ] ) ; if ( nByte > INT_MAX ) { rc = SQLITE_NOMEM ; } else if ( pTab -> pMod -> xAlloc ( nByte + 1, & pCsr -> pCsr -> pInput, nByte + 1 )!= SQLITE_OK ) { rc = SQLITE_NOMEM ; } else { memcpy ( pCsr -> zInput, zByte, nByte ) ; pCsr -> zInput [ nByte ] = 0 ; rc = pTab -> pMod -> xOpen ( pTab -> pTok, pCsr -> zInput, nByte, & pCsr -> pCsr ) ; if ( rc == SQLITE_OK ) { pCsr -> pCsr -> pTokenizer = pTab -> pTok ; } }",0
1290,<S2SV_ModStart> filp ) { if (! capable ( CAP_SYS_RAWIO ) ) return - EPERM ;,0
1291,"<S2SV_ModStart> expr_ty iter, string type_comment, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. type_comment = type_comment",0
1292,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> mi_sort_index ( MI_CHECK <S2SV_ModStart> name ) ; if ( param -> tmpfile_createflag & MYF_NOFOLLOW ) { mi_check_print_error ( param, ""Can\'t <S2SV_blank> create <S2SV_blank> temporary <S2SV_blank> file: <S2SV_blank> \'%s\'"", param -> tmpfile_filename ) ; DBUG_RETURN ( - 1 ; } <S2SV_ModStart> 0 ) { if ( param -> tmpfile_createflag & MYF_NOFOLLOW ) { mi_check_print_error ( param, ""Can\'t <S2SV_blank> create <S2SV_blank> temporary <S2SV_blank> file: <S2SV_blank> \'%s\'"", param -> tmpfile_filename ) ; DBUG_RETURN ( - 1 ; }",0
1293,"<S2SV_ModStart> ; } } if ( opt ) { atomic_sub ( opt -> opt. tot_len, & sk -> sk_omem_alloc ) ; opt = xchg ( & sk -> sk_omem_alloc, opt ) ; }",0
1294,"<S2SV_ModStart> ) ) { kvm_queue_exception_e ( vcpu, UD_VECTOR, error_code ) ; return 1 ; } if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( is_page_fault ( intr_info ) &&! ( error_code & PFERR_RSVD_MASK ) ) ) { kvm_queue_exception ( vcpu, UD_VECTOR, error_code ) ; return 1 ; }",0
1295,"<S2SV_ModStart> ; case NGHTTP2_ERR_STREAM_ID_NOT_SUPPORTED : return ""Stream <S2SV_blank> ID <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported"" ; case NGHTTP2_ERR_SHUT_WR : return ""The <S2SV_blank> transmission <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> for <S2SV_blank> this <S2SV_blank> stream"" ; case NGHTTP2_ERR_STREAM_ID_NOT_SUPPORTED : return ""Stream <S2SV_blank> ID <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> for <S2SV_blank> this <S2SV_blank> stream"" ; case NGHTTP2_ERR_STREAM_CLOSED : return ""Stream <S2SV_blank> is <S2SV_blank> closed"" ; case NGHTTP2_ERR_STREAM_CLOSED : return ""Stream <S2SV_blank> is <S2SV_blank> closed"" ; case NGHTTP2_ERR_STREAM_SHUT_WR : return ""The <S2SV_blank> transmission <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> for <S2SV_blank> this <S2SV_blank> stream"" ; case NGHTTP2_ERR_GOAWAY_ALREADY_SENT : return ""GOAWAY <S2SV_blank> has <S2SV_blank> already <S2SV_blank> been <S2SV_blank> sent"" ; case NGHTTP2_ERR_START_STREAM_NOT_ALLOWED : return ""request <S2SV_blank> HEADERS <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> for <S2SV_blank> this <S2SV_blank> stream"" ; case NGHTTP2_ERR_GOAW",0
1296,"<S2SV_ModStart> UINT error ; if (! Stream_SafeSeek <S2SV_ModEnd> ( s, <S2SV_ModStart> s, eventId, & error ) ) return error <S2SV_ModEnd> ; break ;",0
1297,"<S2SV_ModStart> ; } } if ( pData -> socket -> ops -> recvfrom == NULL ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> recvfrom <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s"", pData -> description ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; } else { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> recvfrom <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s"", pData -> description ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; } if ( pData -> socket -> ops -> recvfrom == NULL ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> recvfrom <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s"", pData -> description ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; }",0
1298,<S2SV_ModStart> < 0 ) { ret = chg ; goto out_err ; } <S2SV_ModEnd> if ( hugepage_subpool_get_pages <S2SV_ModStart> chg ) ) { ret = <S2SV_ModEnd> - ENOSPC ; <S2SV_ModStart> - ENOSPC ; goto out_err ; } <S2SV_ModStart> chg ) ; out_err : resv_map_put ( vma ) ; return ret ;,0
1299,"<S2SV_ModStart> ) ; struct ipv6_txoptions * opt ; struct <S2SV_ModStart> struct flowi6 fl6 ; if ( ipv6_addr_type ( & fl6. saddr ) & IPV6_ADDR_LOOPBACK ) { fl6. flowlabel = np -> flow_label ; IP_ECN_flow_xmit ( sk, fl6. flowlabel ) ; if ( ipv6_addr_type ( & fl6. saddr ) & IPV6_ADDR_LINKLOCAL ) fl6. flowi6_oif = transport -> saddr. v6. sin6_scope_id ; } <S2SV_ModEnd> pr_debug ( ""%s: <S2SV_blank> skb:%p, <S2SV_blank> len:%u, <S2SV_blank> src:%pI6 <S2SV_blank> dst:%pI6\\n"" <S2SV_ModStart> skb, skb <S2SV_ModEnd>, & fl6 <S2SV_ModStart> & fl6, <S2SV_ModEnd> opt, np <S2SV_ModStart> = 1 ; opt = rcu_dereference ( <S2SV_ModStart> np -> opt ) ; SCTP_INC_STATS ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ;",0
1300,"<S2SV_ModStart> goto out_free ; } if ( path. dentry -> d_inode -> i_uid!= current_uid ( ) ) { rc = - EPERM ; printk ( KERN_ERR ""Mount <S2SV_blank> of <S2SV_blank> device <S2SV_blank> (uid: <S2SV_blank> %d) <S2SV_blank> not <S2SV_blank> owned <S2SV_blank> by <S2SV_blank> "" ""requested <S2SV_blank> user <S2SV_blank> (uid: <S2SV_blank> %d)\\n"", path. dentry -> d_inode -> i_uid, current_uid ( ) ) ; goto out_free ; } if ( path. dentry -> d_inode -> i_uid!= current_uid ( ) ) { rc = - EPERM ; printk ( KERN_ERR ""Mount <S2SV_blank> of <S2SV_blank> device <S2SV_blank> (uid: <S2SV_blank> %d) <S2SV_blank> not <S2SV_blank> owned <S2SV_blank> by <S2SV_blank> "" ""requested <S2SV_blank> user <S2SV_blank> (uid: <S2SV_blank> %d)\\n"", path. dentry -> d_inode -> i_uid, current_uid ( ) ) ; goto out_free ; }",0
1301,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1302,"<S2SV_ModStart> ""MemoryAllocationFailed"" ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;",0
1303,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nego_process_negotiation_failure ( rdpNego <S2SV_ModStart>, s ) ; if (! s ) return FALSE <S2SV_ModStart> = NEGO_STATE_FAIL ; return TRUE ;",0
1304,"<S2SV_ModStart> ret, last_pwd, n_new_keys <S2SV_ModStart> keyblocks ) { n_new_keys = kdb -> n_key_data [ kdb -> n_key_data [ kdb -> n_key_data [ kdb -> n_key_data ] ]. n_keys ; <S2SV_ModStart> keyblocks ) { n_new_keys = kdb -> n_key_data [ kdb -> n_key_data ]. n_keys ; } if ( n_new_keys > kdb -> n_key_data [ kdb -> n_key_data ]. n_keys ) { kdb -> n_key_data [ kdb -> n_key_data ] = n_new_keys [ kdb -> n_key_data ] ; } else { n_new_keys = kdb -> n_key_data [ kdb -> n_key_data ]. n_keys ; } if ( n_new_keys > kdb -> n_key_data [ kdb -> n_key_data ]. n_keys ) { krb5_n_key_data [ kdb -> n_key_data ] = n",0
1305,"<S2SV_ModStart> len, result = RLC_ERR <S2SV_ModStart> = RLC_OK ; bn_null ( t ) ; RLC_TRY { bn_new ( t ) ; switch ( operation ) { case RSA_ENC : bn_zero ( m ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = k_len - 3 - m_len ; for ( int i = 0 ; i < * p_len ; i ++ ) { bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, 0 ) ; } bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, 0 ) ; bn_lsh ( m, m, m_len * 8 ) ; * p_len = k_len - 3 - m_len ; for ( int i = 0 ; i < * p_len ; i ++ ) { bn_zero ( m ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, pad ) ; } bn_lsh ( m, m,",0
1306,"<S2SV_ModStart> = ERROR_SUCCESS ; result = yr_object_eval ( function, ( YR_OBJECT * * ) & r1, sizeof ( YR_VALUE ), & r2 ) ; if ( result == ERROR_SUCCESS ) { yr_object_destroy ( function ) ; result = ERROR_INSUFFICIENT_MEMORY ; } <S2SV_ModEnd> break ; case <S2SV_ModStart> ++ ; } result = yr_object_eval ( function, ( YR_OBJECT * * ) & r1, sizeof ( YR_VALUE ), & r1 ) ; if ( result == ERROR_SUCCESS ) { yr_object_destroy ( function ) ; return ERROR_INSUFFICIENT_MEMORY ; } if ( result == ERROR_SUCCESS ) { yr_object_destroy ( function ) ; result = ERROR_INSUFFICIENT_MEMORY ; } <S2SV_ModEnd> break ; case <S2SV_ModStart> ++ ; } result = yr_object_eval ( function, ( YR_OBJECT * * ) & r1, sizeof ( YR_VALUE ), & r1 ) ; if ( result == ERROR_SUCCESS ) { yr_object_destroy ( function ) ; return ERROR_INSUFFICIENT_MEMORY ; } <S2SV_ModEnd>",0
1307,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1308,<S2SV_ModStart> { rq = <S2SV_ModEnd> hctx -> tags <S2SV_ModStart> hctx -> tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; if (,1
1309,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
1310,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> cm -> counts. <S2SV_ModEnd> switchable_interp [ j,0
1311,"<S2SV_ModStart> { token ++ ; } if ( operand >= MAX_OPERANDS ) { eprintf ( ""Too <S2SV_blank> many <S2SV_blank> operands\\n"" ) ; return false",1
1312,"<S2SV_ModStart> cpi ) { VP9_COMMON * const cm = & cpi -> common ; MACROBLOCKD * const xd = & cpi -> td. <S2SV_ModEnd> e_mbd ; const <S2SV_ModStart> mi_cols ) ; vpx_setup_src_planes ( x, cpi -> Source, 0, 0 ) ; vpx_setup_pre_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vpx_setup_dst_planes ( xd, get_frame_new_buffer ( cm ), 0, 0, NULL ) ; vp9_setup_block_planes ( & x -> <S2SV_ModEnd> e_mbd, cm <S2SV_ModStart> subsampling_y ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> MAX_MB_PLANE ) ; memset <S2SV_ModEnd> ( xd ->",0
1313,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
1314,"<S2SV_ModStart> ( hp ) ; if ( htc_request_check_host_hdr ( sp )!= 0 ) { WSP ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } retval = <S2SV_ModStart> 0 ) { if ( htc_request_check_host_hdr ( sp )!= 0 ) { WSP ( sp, SLT_Error, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" ) ; return ( retval ) ; } WSP ( sp, SLT_HttpGarbage, htc -> rxbuf ) ;",0
1315,"<S2SV_ModStart> define EOFOp 0x08 <S2SV_ModEnd> Image * image <S2SV_ModStart> image ) ) ; if ( image -> rows * image -> columns > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( image -> rows * image -> columns > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( image -> rows * image -> columns > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> ) ; } if ( image -> rows * image -> columns > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> ) ; } if ( image -> rows * image -> columns > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( image -> rows * image -> columns > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
1316,<S2SV_ModStart> ctl_files_rwlock ) ; mutex_init ( & card -> user_ctl_lock ) ;,1
1317,"<S2SV_ModStart> ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; } if ( padlen + 3 > sig_len ) { return ""4"" ""SIG <S2SV_blank> padding <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long"" ; } <S2SV_ModStart> = s ; if ( padlen + 3 > sig_len ) { return ""5"" ""SIG <S2SV_blank> padding <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long"" ; }",0
1318,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, len ) )",0
1319,<S2SV_ModStart> ; ps_dec -> u2_cur_slice_num = 0 ; ps_dec -> <S2SV_ModStart> -> u2_cur_slice_num ; if ( ps_dec -> u2_cur_slice_num > ps_dec -> ps_cur_slice_num_max ) { ps_dec -> u2_cur_slice_num_max = ps_dec -> ps_cur_slice_num_max ; ps_dec -> ps_cur_slice -> i4_delta_pic_order_cnt_bottom = ps_cur_slice -> i4_delta_pic_order_cnt_bottom ; if ( ps_dec -> u2_cur_slice_num > ps_dec -> ps_cur_slice_num_max ) { ps_dec -> u2_cur_slice_num_max = ps_dec -> ps_cur_slice_num_max ; ps_dec -> ps_cur_slice -> i4_delta_pic_order_cnt_bottom = ps_cur_slice -> i4_delta_pic_order_cnt_bottom ; },0
1320,<S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata -> rbuf. buf!= NULL ) <S2SV_ModStart> OPENSSL_free ( rdata -> rbuf. buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata -> rbuf. buf!= NULL ) <S2SV_ModStart> OPENSSL_free ( rdata -> rbuf. buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; },1
1321,"<S2SV_ModStart> ) ; struct ipv6_txoptions * opt ; struct <S2SV_ModStart> struct flowi6 fl6 ; if ( ipv6_addr_type ( & fl6. saddr ) & IPV6_ADDR_LOOPBACK ) { fl6. flowlabel = np -> flow_label ; IP_ECN_flow_xmit ( sk, fl6. flowlabel ) ; if ( ipv6_addr_type ( & fl6. saddr ) & IPV6_ADDR_LINKLOCAL ) fl6. flowi6_oif = transport -> saddr. v6. sin6_scope_id ; } <S2SV_ModEnd> pr_debug ( ""%s: <S2SV_blank> skb:%p, <S2SV_blank> len:%u, <S2SV_blank> src:%pI6 <S2SV_blank> dst:%pI6\\n"" <S2SV_ModStart> skb, skb <S2SV_ModEnd>, & fl6 <S2SV_ModStart> & fl6, <S2SV_ModEnd> opt, np <S2SV_ModStart> = 1 ; opt = rcu_dereference ( <S2SV_ModStart> np -> opt ) ; SCTP_INC_STATS ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ;",0
1322,<S2SV_ModStart> int ret ; drm_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1323,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_iocinfo * karg <S2SV_ModEnd> ; struct pci_dev <S2SV_ModStart> * pdev ; <S2SV_ModEnd> int port ; <S2SV_ModStart> return PTR_ERR ( karg ) ; } <S2SV_ModEnd> if ( (",0
1324,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
1325,"<S2SV_ModStart> char * path, const char * rootfs <S2SV_ModStart> mntdata, optional, rootfs",1
1326,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1327,"<S2SV_ModStart> ab ) { <S2SV_ModEnd> size_t i, <S2SV_ModStart> i, len <S2SV_ModEnd> ; const char <S2SV_ModStart> * ab, ""argc=%d"" <S2SV_ModEnd>, context -> <S2SV_ModStart>. argc ) ; buf = kmalloc ( MAX_EXECVE_AUDIT_LEN + 1, GFP_KERNEL ) ; if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } for ( i = 0 ; i < context -> execve. argc ; i ++ ) { len = audit_log_single_execve_arg ( context, ab, i, & len_sent, p, buf ) ; if ( len <= 0 ) break ; kfree ( buf ) ; return ; } for ( i = 0 ; i < context -> execve. argc ; i ++ ) { len = audit_log_single_execve_arg ( context, ab, i, & len_sent, p, buf ) ; kfree ( buf ) ; } }",0
1328,"<S2SV_ModStart> | O_NOCTTY, ( mode == 0 || mode == MODE_INVALID )? 0644 : mode <S2SV_ModEnd> ) ; if",1
1329,"<S2SV_ModStart> err_info ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> line [ NETSCREEN_LINE_LENGTH <S2SV_ModEnd> ] ; if <S2SV_ModStart> FALSE ; } return parse_netscreen_packet ( wth -> random_fh, phdr, buf <S2SV_ModEnd>, line, <S2SV_ModStart>, line, <S2SV_ModEnd> err, err_info <S2SV_ModStart> err_info ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
1330,<S2SV_ModStart> * rq ) <S2SV_ModEnd> { int cpu <S2SV_ModStart> ; u64 irq_time ; if ( rq -> skip_clock_update ) return <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1331,<S2SV_ModStart> 255U ; break ; case 3 : { CheckNumberPixels ( 4 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 5 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 4 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 3 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; break ; } break ; case 4 : { CheckNumberPixels ( 8 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 5 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 3 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; break ; } case 5 : { CheckNumberPixels ( 8 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 7 ) & 0x03 ) ; break ; } break ; case 6 : { CheckNumberPixels ( 4 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 5 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel,0
1332,"<S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv",0
1333,<S2SV_ModStart> { struct blkif_response * <S2SV_ModStart> int notify ; <S2SV_ModEnd> spin_lock_irqsave ( & <S2SV_ModStart> case BLKIF_PROTOCOL_NATIVE : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> native. rsp_prod_pvt <S2SV_ModEnd> ) ; break <S2SV_ModStart> case BLKIF_PROTOCOL_X86_32 : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> x86_32. rsp_prod_pvt <S2SV_ModEnd> ) ; break <S2SV_ModStart> case BLKIF_PROTOCOL_X86_64 : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart>. rsp_prod_pvt ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> ) ; } resp -> id = id ; resp -> operation = op ; resp -> status = st ;,1
1334,<S2SV_ModStart> ; if ( entry -> attributes & KADM5_KDB_DISALLOW_ALL_TIX <S2SV_ModEnd> ) return ;,0
1335,"<S2SV_ModStart> ; if ( CHECKOVERFLOW ( datao, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( CHECKOVERFLOW ( datao, buf_size, 2 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( CHECKOVERFLOW ( o, buf_size, 2 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> entries [ tcount ] = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnoteFuji"", sizeof ( MnoteFujiEntry ) * c )",0
1336,"<S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"" <S2SV_ModEnd>, dirout ) <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"" <S2SV_ModEnd>, dirout ) <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"" <S2SV_ModEnd>, dirout )",0
1337,"<S2SV_ModStart> ext_dp -> icmp_length && ND_TTEST2 ( ext_dp -> icmp_ext_version_res, plen - ICMP_EXTD_MINLEN ) <S2SV_ModStart> - ICMP_EXTD_MINLEN ; if ( ND_TTEST2 ( ext_dp -> icmp_ext_version_res, plen - ICMP_EXTD_MINLEN ) )",0
1338,<S2SV_ModStart> dentry * dir <S2SV_ModEnd> ; int dir_has_key <S2SV_ModStart> 0 ; } <S2SV_ModEnd> spin_lock ( & <S2SV_ModStart> dir_has_key = ( d_inode ( dir ) -> i_crypt_info <S2SV_ModEnd>!= NULL ),1
1339,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> while ( service_options <S2SV_ModStart> ) ; } s_log ( LOG_DEBUG, ""Unbinding <S2SV_blank> service <S2SV_blank> [%s]"", opt -> servname ) ; for ( i = 0 ; i < opt -> local_addr. num ; ++ i ) unbind_port ( opt, i ) ; if ( opt -> connect_addr. names ) { opt -> option. retry = 0 ; } if ( opt -> ctx ) SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; service_free ( opt ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1340,"<S2SV_ModStart> ARCHIVE_WARN ; } if ( argc >= MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } <S2SV_ModStart> p ) ; <S2SV_ModEnd> } if (",1
1341,<S2SV_ModStart> parent ) ; if ( i -> width > i -> parent -> width ) i -> width = i -> parent -> width ; if ( i -> height > i -> parent -> height ) i -> height = i -> parent -> height ;,0
1342,<S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ),1
1343,"<S2SV_ModStart> ; RAnalOp next_op ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, len - op -> size <S2SV_ModEnd>, cpu )",0
1344,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> break ; } if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",0
1345,<S2SV_ModStart> void ) { recovery_started = 1 ;,0
1346,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT5 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT7 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT8 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT9 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT10 <S2SV_ModEnd> )",0
1347,"<S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1348,"<S2SV_ModStart> ; if ( l > ( unsigned ) <S2SV_ModEnd> sizeof ( rbuf <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> service <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", l, ( unsigned ) sizeof ( rbuf ) ) ) { syslog ( LOG_INFO, ""(s=%d) <S2SV_blank> service <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", req -> socket, ( unsigned ) sizeof ( rbuf ) ) ; goto error ; } if ( l > ( unsigned ) <S2SV_ModEnd> sizeof ( rbuf <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> service <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ( unsigned ) sizeof ( rbuf ) ) ) { syslog ( LOG_INFO, ""(s=%d) <S2SV_blank> service <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", req -> socket, ( unsigned ) sizeof ( rbuf ) ) ; goto error ; }",0
1349,"<S2SV_ModStart> { WORD32 i <S2SV_ModEnd> ; WORD32 st_rps_idx <S2SV_ModStart> ; WORD32 ai4_num_st_curr_before, ai4_num_st_curr_after, u4_num_lt_curr, u4_num_total_curr, ai1_curr_delta_poc_msb_present_flag [ u4_num_st_curr_before, u4_num_st_curr_after, u4_num_lt_curr, u4_num_lt_foll, ai1_curr_delta_poc_msb_present_flag [ u4_num_st_curr_before, u4_num_lt_curr, u4_num_lt_foll, ai1_curr_delta_poc_msb_present_flag [ u4_num_st_curr_before, u4_num_st_curr_after, u4_num_lt_curr, u4_num_lt_foll, ai1_curr_delta_poc_msb_present_flag [ u4_num_st_curr_before ]",0
1350,"<S2SV_ModStart> ( child ) -> tp_value, datap ) ; break ; case PTRACE_GET_THREAD_AREA : ret = get_thread_area ( child ) ; break ; case PTRACE_SET_THREAD_AREA : ret = put_user ( task_thread_info ( child ) -> tp_value, datap ) ; break ; case PTRACE_GETFPREGS : ret = copy_regset_from_user ( child, & user_arm_view, REGSET_FPR, 0, sizeof ( union fp_regs ), datap ) ; break ; case PTRACE_SETFPREGS : ret = copy_regset_from_user ( child, & user_arm_view, REGSET_FPR, 0, sizeof ( union fp_state ), datap ) ; break ; case PTRACE_GETFPREGS : ret = copy_regset_from_user ( child, & user_arm_view, REGSET_FPR, 0, sizeof ( union fp_state ), datap ) ; break ; case PTRACE_SETFPREGS : ret = copy_regset_from_user ( child, & user_arm_",0
1351,"<S2SV_ModStart> ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; ret = - EINVAL ;",1
1352,"<S2SV_ModStart>, int fmt, printbuffer * p <S2SV_ModStart> = 0 ; if ( p ) len += p -> len ; child = child -> next ; } if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; child = item -> child ; ++",0
1353,"<S2SV_ModStart> ) { struct ikev2_id <S2SV_ModEnd> id ; int <S2SV_ModStart> * typedata ; ND_TCHECK2 ( * ext, sizeof ( struct ikev2_id ) <S2SV_ModEnd> ) ; UNALIGNED_MEMCPY <S2SV_ModStart> ( * ext, sizeof ( struct ikev2_id ) <S2SV_ModEnd> ) ; ikev2_pay_print",0
1354,"<S2SV_ModStart> int tagval, uint32 <S2SV_ModEnd> * length )",1
1355,"<S2SV_ModStart> ( sk ) ; if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLOUT ; <S2SV_ModStart> { if (! skb_queue_empty ( & sk -> sk_receive_queue ) ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; return mask ; } if ( <S2SV_ModStart> )!= sk ) { sock_poll_wait ( file, & unix_sk ( other ) -> peer_wait, wait ) ; if ( unix_recvq_full ( other ) ) writable = 0 ; } } else { if ( unix_peer ( sk )!= sk ) { sock_poll_wait ( file, & unix_sk ( other ) -> peer_wait, wait ) ; if ( unix_recvq_full ( other ) ) writable = 0 ; } sock_put ( other ) ; } if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; return mask <S2SV_ModEnd> ; } <",0
1356,<S2SV_ModStart> 4 ] ; unsigned int <S2SV_ModEnd> value ; if <S2SV_ModStart> value = ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 <S2SV_ModEnd> ; value |= <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart>. unsigned_value = <S2SV_ModEnd> value & 0xffffffff <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ; return (,1
1357,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sendClean ( outputbuffer ) ;",0
1358,<S2SV_ModStart> ; if ( skb_out -> len + hdr_size > skb -> len ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } if (,0
1359,<S2SV_ModStart> void exit_io_context ( struct task_struct * task <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; task_lock ( task <S2SV_ModEnd> ) ; ioc <S2SV_ModStart> ; ioc = task <S2SV_ModEnd> -> io_context ; <S2SV_ModStart> -> io_context ; task <S2SV_ModEnd> -> io_context = <S2SV_ModStart> ; task_unlock ( task <S2SV_ModEnd> ) ; if,1
1360,<S2SV_ModStart> ret = 0 ; if ( WARN_ON_ONCE (! capable ( CAP_SYS_RAWIO ) ) ) return - EPERM,0
1361,<S2SV_ModStart> 0 ) { if ( token_wrapper_len + 14 > ctx -> max_token_wrapper_len ) { * minor_status = GSS_S_INCOMPLETE_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } <S2SV_ModStart> buffer. length > ctx -> max_token_wrapper_len <S2SV_ModEnd> ) { * <S2SV_ModStart> GSS_S_DEFECTIVE_TOKEN ; } if ( token_wrapper_len + 14 > ctx -> max_token_wrapper_len ) { * minor_status = GSS_S_INCOMPLETE_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; },0
1362,"<S2SV_ModStart> ) { int ret <S2SV_ModEnd> ; int i <S2SV_ModStart> ; ret = pci_read_config_word <S2SV_ModEnd> ( dev, <S2SV_ModStart> offset, value ) ; if ( ret ) return ret <S2SV_ModEnd> ; for ( <S2SV_ModStart> & IORESOURCE_IO ) <S2SV_ModEnd> * value |= <S2SV_ModStart> |= PCI_COMMAND_IO ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1363,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; if ( ctx -> frame_parallel_decode ) { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; <S2SV_ModStart> * fb ; YV12_BUFFER_CONFIG * const fb ; vpx_get_reference_enc ( ctx -> cpi, frame -> idx, & fb ) ; yuvconfig2image ( & frame -> img, fb, NULL ) ; return VPX_CODEC_OK ; } else if ( frame == NULL ) { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; YV12_BUFFER_CONFIG * const fb ; vpx_get_reference_enc ( ctx -> cpi, frame -> idx, & fb ) ; yuvconfig2image ( & frame -> img, fb, NULL ) ; return VPX_CODEC_OK <S2SV_ModEnd> ; } <S2SV_null>",0
1364,<S2SV_ModStart> ] ) ; free_uid ( fpl -> user ) ;,1
1365,<S2SV_ModStart> plug ) ; if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) return - EPERM ;,0
1366,"<S2SV_ModStart> -> dwc ; dwc3_gadget_del_and_unmap_request ( dep, req, status <S2SV_ModEnd> ) ; spin_unlock <S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
1367,"<S2SV_ModStart> : # line 113 <S2SV_ModEnd> ""yyparse.c"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""yyparse.c"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""yyparse.y"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""yyparse.y"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""yyparse.y"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""yyparse.y"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""yyparse.y"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""yyparse.c"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""yyparse.y"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""y"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""y"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""y"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""y"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""y"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""y"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""y"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""y"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""y"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""y"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""y",0
1368,"<S2SV_ModStart> sas_revalidate_domain, [ <S2SV_ModEnd> DISCE_SUSPEND ] = <S2SV_ModStart> ] = sas_resume_devices <S2SV_ModEnd>, } ;",1
1369,"<S2SV_ModStart>, int rep_quick, my_bool write_only <S2SV_ModStart>, WRITE_CACHE, write_only <S2SV_ModEnd>, MYF ( <S2SV_ModStart> (! write_only && init_io_cache ( & info -> read_cache, info -> dfile, ( uint ) param -> write_buffer_length, WRITE_CACHE, share -> pack. header_length, MYF ( MY_WME ) ) <S2SV_ModStart> (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, WRITE_CACHE, share -> pack. header_length, MYF ( MY_WME ) ) ) { if ( init_io_cache ( & info -> read_cache, info -> dfile, ( uint ) param -> read_buffer_length, READ_CACHE, share -> pack. header_length, MYF ( MY_WME ) ) || init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, WRITE_CACHE, share -> pack. header_length, MYF ( MY_WME ) )",0
1370,"<S2SV_ModStart> s } ; uECC_word_t carry ; wordcount_t num_words = curve -> num_words ; bitcount_t num_n_bits = curve -> num_n_bits ; <S2SV_ModStart> curve ) ; if (! g_rng_function ) { uECC_vli_clear ( p, num_words ) ; tmp [ 0 ] = 1 ; } else if (! uECC_generate_random_int ( p, num_n_words ) ) { return 0 ; } uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n",0
1371,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
1372,"<S2SV_ModStart> sk -> sk_family <S2SV_ModEnd> ; struct sk_buff <S2SV_ModStart> goto out ; <S2SV_ModEnd> pr_debug ( ""ping_recvmsg(sk=%p,sk->num=%u)\\n"" <S2SV_ModStart> ) ) ; * addr_len = sizeof ( * sin ) ; <S2SV_ModStart> AF_INET ) { struct sockaddr_in * <S2SV_ModStart> ) ) ; * addr_len = sizeof ( * sin6",0
1373,"<S2SV_ModStart> -= lblk ; mutex_lock ( & inode -> i_mutex ) ; if (! ( ext4_test_inode_flag ( inode, EXT4_INODE_EXTENTS ) ) ) { ret = - EOPNOTSUPP ; goto out_mutex ; } flags = EXT4_GET_BLOCKS_CREATE_UNWRIT_EXT | EXT4_GET_BLOCKS_CONVERT_UNWRITTEN | EXT4_EX_NOCACHE ; if ( mode & FALLOC_FL_KEEP_SIZE ) flags |= EXT4_GET_BLOCKS_KEEP_SIZE ; mutex_unlock ( & inode -> i_mutex ) ; <S2SV_ModStart> |= EXT4_GET_BLOCKS_KEEP_SIZE ; }",0
1374,<S2SV_ModStart> ; } else if ( pool -> free_total < pool -> max_free ) { pool -> free_total = pool -> max_free ; free ( buf ) ; } else <S2SV_ModEnd> { uint32_t new_free_total <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1375,<S2SV_ModStart> return map ; map =,1
1376,"<S2SV_ModStart> tp ; { int cval = 0, meta = 0 ; <S2SV_ModStart> 2 ] ) { <S2SV_ModEnd> if ( * <S2SV_ModStart> = ""00112233445566778899aAbBcCdDeEfF"" ; <S2SV_ModEnd> const char * <S2SV_ModStart> ; int dcount = 0 ; cp ++ ; if ( * cp == 'x' || * cp == 'X' ) for ( ++ cp ; * cp && ( dcount ++ < 2 ) ; cp ++ ) cval = ( cval * 16 ) + ( ( int ) ( dp - hex ) / 2 ) ; else if ( * cp == 'o' || * cp == 'O' ) for ( ++ cp ; * cp && ( dcount ++ < 2 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp - '0' ) ; else for ( ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 10 ) + ( * cp - '0' ) ; }",0
1377,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1378,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> size_left < 4 <S2SV_ModStart> < 4 ) { LogError ( ""Process_ipfix: <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> error <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ; } if ( <S2SV_ModEnd> size_left < 4 <S2SV_ModStart> < 4 ) { LogError ( ""Process_ipfix: <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> error <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ; } <S2SV_ModEnd> if (!",0
1379,"<S2SV_ModStart> * lined ; PIX * pixc, * pixm, * pixg, * pixd ; PIXCMAP * cmap, * cmapd ; PROCNAME ( ""pixFewColorsOctcubeQuantMixed"" ) ; if (! pixs ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; if ( ( pixm = pixFewColorsOctcubeQuant1 ( pixs, level ) ) == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; cmap = pixGetColormap ( pixc ) ; ncolors = pixcmapGetCount ( cmap ) ; cmapd = pixcmapCreate ( 8 ) ; lut = ( l_int32 * ) LEPT_CALLOC ( 256, sizeof ( l_int32 ) ) ; for ( i = 0 ; i < ncolors ; i ++ ) lut [ i ] = - 1 ; for ( j = 0 ; j < ncolors ; j ++ ) lut [ j ] = - 1 ; for ( j = 0 ; j < ncolors ; j ++ )",0
1380,"<S2SV_ModStart> { int i, <S2SV_ModEnd> ubits = BN_num_bits <S2SV_ModStart> ( u ) ; int <S2SV_ModEnd> vbits = BN_num_bits <S2SV_ModStart> ( v ) ; for ( i = 0 ; i < ubits ; i ++ ) { if ( <S2SV_ModEnd> BN_GF2m_add ( u <S2SV_ModStart>, u, p [ i ] ) == NULL ) goto err ; if (! BN_GF2m_mod ( u, a, p [ i ] ) ) goto err ; } if ( BN_is_zero ( u ) ) goto err ; if (! BN_rshift1 ( u, u ) ) goto err ; if ( BN_is_odd ( u ) ) { if (! BN_GF2m_add ( u, u, p [ i ] ) ) goto err ; } if ( BN_abs_is_word ( u ) ) { if (! BN_GF2m_add ( u, u, p [ i ] ) ) goto err ; } if ( BN_num_bits ( u ) < BN_num_bits ( v ) ) goto err ; if ( BN_num_bits",0
1381,<S2SV_ModStart> = 256 ; if ( tmp_err < INT_MAX - new_mv_mode_penalty ) new_mv_mode_penalty = INT_MAX - new_mv_mode_penalty ;,0
1382,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
1383,<S2SV_ModStart> = alloc ; size_t <S2SV_ModEnd> strindex = 0,1
1384,"<S2SV_ModStart>, nbits ; if ( msg -> readcount > msg -> readsize ) { return 0 ; } <S2SV_ModStart> oob ) { if ( msg -> readcount + ( bits >> 3 ) > msg -> readsize ) { msg -> readcount = msg -> readsize - 1 ; return 0 ; } <S2SV_ModStart> & 7 ; if ( msg -> bit + nbits > msg -> readsize ) { msg -> readcount = msg -> readsize - 1 ; return 0 ; } <S2SV_ModStart> msg -> bit + nbits <S2SV_ModStart> 8 ) { if ( msg -> readcount > msg -> readsize ) { msg -> readcount = msg -> readsize - 1 ; return 0 ; }",0
1385,<S2SV_ModStart> int idx ; unsigned int count ; <S2SV_ModStart> -> count ; count = kcontrol -> count ; <S2SV_ModStart> ; idx < <S2SV_ModEnd> count ; idx,1
1386,<S2SV_ModStart> ; out1 : cancel_work_sync ( & dev -> kevent ) ; del_timer_sync ( & dev -> delay ) ;,1
1387,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> size = overhead <S2SV_ModStart> = overhead ; if ( ( flags & MONGO_CONTINUE_ON_ERROR ) ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } <S2SV_ModStart> = overhead ; if ( ( size + 4 ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; },0
1388,<S2SV_ModStart> ) ) { gtk_window_destroy ( GTK_WINDOW ( g_wnd_assistant ) ) ; <S2SV_ModStart> ) ; } else { gtk_window_destroy ( GTK_WINDOW ( g_wnd_assistant ) ) ; <S2SV_ModEnd> } } <S2SV_null>,0
1389,<S2SV_ModStart> - 2 ; if ( plen < 2 ) return 1 ;,0
1390,"<S2SV_ModStart> acl ) { struct iattr iattr ; retval = posix_acl_update_mode ( inode, & iattr. ia_mode, & acl ) ; if ( retval <S2SV_ModEnd> ) goto err_out <S2SV_ModStart> goto err_out ; if (! acl ) { value = NULL ; size = 0 ; } <S2SV_ModEnd> iattr. ia_valid <S2SV_ModStart> iattr ) ; <S2SV_ModEnd> } break ;",1
1391,"<S2SV_ModStart> header. class_size == 0 || bin -> header. class_size <S2SV_ModStart> header. strings_size == 0 ) { eprintf ( ""Invalid <S2SV_blank> strings <S2SV_blank> size\\n"" ) ; return false ; } if ( bin -> imports ) { r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; return false ; } if ( bin -> classes ) { r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> imports_list ) ; return false ; } if ( bin -> methods ) { r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; return false ; } if ( bin -> classes ) { r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> imports_list ) ; return",0
1392,<S2SV_ModStart> : case NPPVformValue : case NPPVpluginNativeAccessibleAtkPlugId <S2SV_ModStart> : type = RPC_TYPE_STRING ; break ; case NPPVpluginNativeAccessibleAtkPlugId <S2SV_ModStart> case NPPVpluginKeepLibraryInMemory : if ( variable == NPPVpluginWindowBool ) { type = RPC_TYPE_INT32 ; break ; } else { type = RPC_TYPE_BOOLEAN ; break ; },0
1393,"<S2SV_ModStart> olen ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> int alloc = ( length? length : ( int ) strlen ( string ) ) + 1 <S2SV_ModStart> long hex ; <S2SV_ModEnd> ns [ strindex <S2SV_ModStart> strindex ++ ] = CURL_convert_from_network ( handle, & in, 1 ) ; if (! res ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; } ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ; return ns ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1394,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FAIL ; return ; } if ( Stream_GetRemainingLength ( s ) < length ) { WLog_ERR ( TAG, ""Invalid <S2SV_blank> RDP_NEG_RSP"" ) ; <S2SV_ModStart> = NEGO_STATE_FINAL ; return ;",0
1395,"<S2SV_ModStart>, target_bits_per_mb ; const double correction_factor = get_rate_correction_factor ( cpi ) ; if ( correction_factor <= 0.0 ) { const VP9_COMMON * const cm = & cpi -> common ; const int i = active_best_quality ; do { const int bits_per_mb_at_this_q = ( int ) vp9_rc_bits_per_mb ( cm -> frame_type, i, correction_factor ) ; if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { if ( ( target_bits_per_mb - bits_per_mb_at_this_q ) <= last_error ) q = i - 1 ; last_error = bits_per_mb_at_this_q - target_bits_per_mb ; } else { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; } } while ( ++ i <= active_worst_quality ) ;",0
1396,<S2SV_ModStart> ; value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
1397,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1398,"<S2SV_ModStart> < sizeof ( struct pgstate ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> wb-prep: <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ( - 1 ) ; } if ( len < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> wb-prep: <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ( - 1 ) ; } n = EXTRACT_32BITS ( & prep -> pp_n ) ; ps = ( const struct pgstate * ) ( prep + 1 ) ; while ( n >= 0 && ND_TTEST ( * ps ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %u/%s:%u"", n, EXTRACT_32BITS ( & ps -> slot ), ps -> page. p_uid ) ) ; ps = ( const struct pgstate * ) ( prep + 1 ) ; for ( ie = io + ps -> nid ; io < ie ; ++ io ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %c%s:%u"", c, ipaddr_string ( ndo, & io -> id ), EXTRACT_32BITS ( & io -> off ) ) ; c = ',' ; }",0
1399,"<S2SV_ModStart>, NULL, <S2SV_ModEnd> data ) ;",1
1400,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
1401,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ;,0
1402,"<S2SV_ModStart> TX_SIZE tx_size, PREDICTION_MODE <S2SV_ModEnd> mode, int <S2SV_ModStart> i ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 64 ) ; memset <S2SV_ModEnd> ( left_col, <S2SV_ModStart> + y ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( left_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( right_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row,",0
1403,"<S2SV_ModStart> } else { if ( end >= pattern [ current ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end >= pattern [ current ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end >= pattern [ current ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end >= pattern [ current ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end >= pattern [ current ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; }",0
1404,"<S2SV_ModStart> char * str <S2SV_ModEnd>, int radix <S2SV_ModStart> 0.0000001 ; if ( len <= 0 ) { if ( isnan ( val ) ) strcpy ( str, ""NaN"", len ) ; else strcpy ( str, ""Infinity"", len ) ; } else { if ( val < 0 ) strcpy ( str, ""-Infinity"", len ) ; else strcpy ( str, ""Infinity"", len ) ; } else { if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ) ) { if ( -- len <= 0 ) { * str = 0 ; return ; } * ( str ++ ) = '-' ; val = - val ; } if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ) ; d = 1 ; while ( d * radix <= val ) d *= radix ; while ( d >= 1 ) { int v = ( int ) ( val / d ) ; val -= v * radix ; if ( v == radix - 1 ) v = radix - 1 ; if ( hasPt ) v = radix - 1 ; if ( v ==",0
1405,"<S2SV_ModStart> * jas_iccprof_createfrombuf ( jas_uchar <S2SV_ModEnd> * buf,",1
1406,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ;,1
1407,"<S2SV_ModStart> BUG ( ) ; if (! thresholds ) { mutex_unlock ( & memcg -> thresholds_lock ) ; return ; } <S2SV_ModEnd> usage = mem_cgroup_usage <S2SV_ModStart> ) ; mutex_lock ( & memcg -> thresholds_lock ) ; __mem_cgroup_threshold ( memcg, type == _MEMSWAP ) ; size = 0 ; for ( i = 0 ; i < thresholds -> primary -> size ; i ++, j ++ ) { if ( new -> entries [ j ]. threshold < usage ) break ; ++ new -> current_threshold ; } j ++ ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1408,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct ion_handle * <S2SV_ModStart> ; handle = ion_handle_get_by_id_nolock ( client, id <S2SV_ModEnd> ) ; mutex_unlock <S2SV_ModStart> ; return handle <S2SV_ModEnd> ; } <S2SV_null>",1
1409,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vp9_wb_write_bit ( wb, cm -> bit_depth <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; vp9_wb_write_bit ( wb, cm -> subsampling_x ) ; vpx_wb_write_bit ( wb, cm -> subsampling_y ) ; vpx_wb_write_bit ( wb, cm -> subsampling_x ) ; vpx_wb_write_bit ( wb, cm -> subsampling_y ) ; vpx_wb_write_bit ( wb, 0 ) ; if ( cm -> profile >= PROFILE_1 ) { vp9_wb_write_bit ( wb, cm -> subsampling_x ) ; vpx_wb_write_bit ( wb, cm -> subsampling_y ) ; vpx_wb_write_bit ( wb, 0 ) ; if ( cm -> profile >= PROFILE_1 )",0
1410,"<S2SV_ModStart> }, { ""stroff"", 1 <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""stroff"", 1 <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""stroff"", 1 <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""stroff"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""stroff"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""stroff"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""stroff"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""stroff"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""stroff"" <S2SV_ModStart> }, { ""stroff"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""stroff"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""stroff"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""stroff"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""stroff"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""stroff"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""stroff"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""stroff"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""stroff"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, {",0
1411,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
1412,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1413,<S2SV_ModStart> KEY_FRAME ) { memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd ->,0
1414,"<S2SV_ModStart> error_t error ; <S2SV_ModEnd> Enc624j600Context * context <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface",0
1415,<S2SV_ModStart> ] == 0x01 && i < gemsafe_cert_max,1
1416,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
1417,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv, VALUE klass ) { VALUE content ; VALUE parse_options ; xmlSchemaPtr schema ; xmlSchemaParserCtxtPtr ctx ; xmlSetStructuredErrorFunc ( NULL, Nokogiri_error_array_pusher ) ; # ifdef HAVE_XMLSCHEMASETPARSERSTRUCTUREDERRORS xmlSchemaSetParserStructuredErrors ( ctx, Nokogiri_error_array_pusher, ( void * ) errors, Nokogiri_error_array_pusher ) ; # endif xmlSchemaNewMemParserCtxt ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( NULL ), NULL ), ( void * ) errors ) ; # ifdef HAVE_XMLSCHEMASETPARSERSTRUCTUREDERRORS xmlSchemaSetParserStructuredErrors ( ctx, Nokogiri_error_array_pusher, ( void * ) errors, Nokogiri_error_array_pusher ) ; # endif xmlSchemaParse ( ctx ) ; if ( NULL == schema ) { xmlErrorPtr error = xmlGetLastError ( ) ; if ( error ) Nokogiri_error_raise (",0
1418,"<S2SV_ModStart> vma ) { <S2SV_ModEnd> struct au1200fb_device * <S2SV_ModStart> info -> par <S2SV_ModEnd> ; vma -> <S2SV_ModStart> _CACHE_MASK ; return vm_iomap_memory <S2SV_ModEnd> ( vma, <S2SV_ModStart> ( vma, fbdev -> fb_phys, fbdev -> fb_len <S2SV_ModEnd> ) ; }",1
1419,"<S2SV_ModStart> { if ( strlen ( errstr ) < 3 ) { s_log ( LOG_ERR, ""Malformed <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> line"" ) ; print_syntax ( ) ; return 1 ; } errstr = strerror ( errstr, - 1 ) ; if ( errstr ) { s_log ( LOG_ERR, ""Malformed <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> line"" ) ; print_syntax ( ) ; return 1 ; }",0
1420,"<S2SV_ModStart> 2 ] ; memset ( out, 0, 4 ) ; <S2SV_ModStart> 2 ] ; memset ( out, 0, 4 ) ; <S2SV_ModStart> 2 ] ; memset ( out, 0, 4 ) ;",0
1421,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
1422,<S2SV_ModStart> ; if ( <S2SV_ModEnd> arg >= cdi,1
1423,<S2SV_ModStart> fanout_mutex ) ; if ( list_empty ( & fanout_list ) ) goto out ; err = - EINVAL ; if ( type == PACKET_FANOUT_LB || type == PACKET_FANOUT_CPU : case PACKET_FANOUT_RND : case PACKET_FANOUT_CBPF : case PACKET_FANOUT_EBPF : return - EINVAL ; if ( ( type_flags & PACKET_FANOUT_FLAG_ROLLOVER ) ) { err = - EINVAL ; goto out ; },0
1424,<S2SV_ModStart> handle -> nmi ) { handle -> event -> pending_wakeup = 1 ; irq_work_queue ( & handle -> event -> pending ) ; } else <S2SV_ModEnd> perf_event_wakeup ( handle,0
1425,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> len > 0 && len > 0 <S2SV_ModStart> = pwcs ; if ( len < size ) return - EINVAL ; <S2SV_ModStart> PLANE_SIZE ) { if ( len < size ) return - EINVAL ; <S2SV_ModStart> -= PLANE_SIZE ; <S2SV_ModEnd> * op ++ <S2SV_ModStart> ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; } else { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ; } } else { * op ++ = ( wchar_t ) u ; } s += size ; len -= size ; } } return op - pwcs ; } <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1426,"<S2SV_ModStart>, i ; if (! ( s -> state & PNG_IHDR ) ) { av_log ( avctx, AV_LOG_ERROR, ""trns <S2SV_blank> before <S2SV_blank> IHDR\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( s -> state & PNG_IDAT ) { av_log ( avctx, AV_LOG_ERROR, ""trns <S2SV_blank> after <S2SV_blank> IDAT\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( s -> state & PNG_IDAT ) { av_log ( avctx, AV_LOG_ERROR, ""trns <S2SV_blank> after <S2SV_blank> IDAT\\n"" ) ; return AVERROR_INVALIDDATA ; } s -> state &= ~ PNG_IDAT ; if ( s -> state & PNG_IDAT ) { av_log ( avctx, AV_LOG_ERROR, ""trns <S2SV_blank> after <S2SV_blank> IDAT\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( s -> state & PNG_IDAT ) { av_log ( avctx, AV_LOG_ERROR, ""trns <S2SV_blank> after <S2SV_blank> IDAT\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
1427,"<S2SV_ModStart> EPROTONOSUPPORT ) { <S2SV_ModEnd> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure""",0
1428,<S2SV_ModStart> } dt -> proto = IP_GET_IPPROTO ( p ) ; dt ->,1
1429,"<S2SV_ModStart> -> nicContext ; if ( ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ( KSZ8851_RXFHSR_RXMR | KSZ8851_RXFTL | KSZ8851_RXRF | KXFHSR_RXCE <S2SV_ModEnd> ) ) == <S2SV_ModStart> ( interface, KSZ8851_RXFDPR, KSZ8851_RXFDPR_RXFPAI <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_RRXEF <S2SV_ModEnd> ) ; return",0
1430,"<S2SV_ModStart> const node * n0, const node * const n1, const node * const n2, asdl_seq * decorator_seq, bool <S2SV_ModEnd> is_async ) { <S2SV_ModStart> is_async ) { identifier name ; arguments_ty args ; expr_ty returns = NULL ; int name_i = 1 ; node * tc ; string type_comment = NULL ; if ( NCH ( n0, name_i ) > 4 ) { ast_error ( c, n, ""Invalid <S2SV_blank> function <S2SV_blank> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1431,<S2SV_ModStart> int i ; if ( mm_pgd_none_or_clear_bad ( mm ) ) return ; <S2SV_ModStart> out : if ( mm_pgd_none_or_clear_bad ( mm -> pgd ) ) return ;,0
1432,"<S2SV_ModStart> ( AUDIT_APPARMOR_DENIED, __aa_current_profile ( ), GFP_KERNEL, & sa, NULL <S2SV_ModEnd> ) ; }",1
1433,"<S2SV_ModStart> uint_fast8_t tmp ; siz -> comps = 0 ; <S2SV_ModStart> ) ) { jas_eprintf ( ""invalid <S2SV_blank> image <S2SV_blank> size\\n"" ) ; return - 1 ; } if (! siz -> width ||! siz -> height ) { jas_eprintf ( ""invalid <S2SV_blank> image <S2SV_blank> size\\n"" ) ; return - 1 ; } if (! siz -> tilewidth ||! siz -> tileheight ) { jas_eprintf ( ""invalid <S2SV_blank> tile <S2SV_blank> size\\n"" ) ; return - 1 ; } if (! siz -> numcomps || siz -> numcomps > 16384 ) { jas_eprintf ( ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> components\\n"" ) ; return - 1 ; } if ( siz -> xoff >= siz -> width ) { jas_eprintf ( ""xoff <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> yoff >= siz -> height ) { jas_eprintf ( ""yoff <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> tilexoff >=",0
1434,"<S2SV_ModStart> } if ( 0 == sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } <S2SV_ModEnd> dst_coap_msg_ptr -> token_ptr <S2SV_ModStart> = sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ; if ( 0 == sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } <S2SV_ModEnd> dst_coap_msg_ptr -> token_ptr",0
1435,"<S2SV_ModStart> += 4 ; if ( xmi_size < 2 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, ""Bad <S2SV_blank> XMI <S2SV_blank> data"" ) ; return NULL ; } <S2SV_ModStart> += 4 ; if ( xmi_size < 2 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, ""Bad <S2SV_blank> XMI <S2SV_blank> data"" ) ; return NULL ; } <S2SV_ModStart> += 4 ; if ( xmi_size < 2 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, ""Bad <S2SV_blank> XMI <S2SV_blank> data"" ) ; return NULL ; }",0
1436,"<S2SV_ModStart> size_t total_len ; struct iov_iter iter ; <S2SV_ModStart> ) ) return 0 ; iov_iter_init ( & iter, nr_segs, total_len, 0 ) <S2SV_ModStart> -> ops ; <S2SV_ModEnd> size_t chars = <S2SV_ModStart> buf -> len ; size_t written <S2SV_ModStart> ; size_t chars <S2SV_ModEnd> ; int error <S2SV_ModStart> break ; } written = copy_page_to_iter ( buf -> page, buf -> offset, chars, & iter ) ; if ( unlikely ( written < chars ) ) { if (! ret ) ret = - EFAULT <S2SV_ModEnd> ; break ; <S2SV_ModStart> break ; } if ( unlikely ( written < chars ) ) { if (! ret ) ret = - EFAULT <S2SV_ModEnd> ; break ;",0
1437,"<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits <S2SV_ModStart> ) ; } \\\n} <S2SV_ModEnd> IndexPacket index ; <S2SV_ModStart> ++ ) { if ( length >= 254 ) { ( void ) WriteBlobByte ( image, ( unsigned char ) length ) ; ( void ) WriteBlobByte ( image, ( unsigned char ) length ) ; ( void ) WriteBlob ( image, length ) ; length = 0 ; } <S2SV_ModStart> ++ ) { if ( length >= 254 ) { ( void ) WriteBlobByte ( image, ( unsigned char ) length ) ; ( void ) WriteBlob ( image, ( unsigned char ) length ) ; ( void ) WriteBlobByte ( image, ( unsigned char ) length ) ; ( void ) WriteBlob ( image, ( unsigned char ) length ) ; length = 0 ; } <S2SV_ModStart> ++ ) { if ( length >= 254 ) { ( void ) WriteBlobByte ( image, ( unsigned char ) length ) ; ( void ) WriteBlobByte ( image, ( unsigned char ) length ) ; ( void ) WriteBlob ( image, ( unsigned char ) length ) ; ( void ) WriteBlob ( image, ( unsigned char ) length ) ; ( void ) WriteBlob ( image, ( unsigned char ) length ) ; length = 0 ;",0
1438,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1439,"<S2SV_ModStart> { p_fm_config_conx_hdlt hdl = NULL <S2SV_ModStart> ) ; goto cleanup <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto cleanup <S2SV_ModEnd> ; } for <S2SV_ModStart> 0 ) { if ( hdl == NULL ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> initialize <S2SV_blank> the <S2SV_blank> client <S2SV_blank> handle: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res ) ; goto cleanup <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto cleanup <S2SV_ModEnd> ; } for <S2SV_ModStart> 0 ) { if ( hdl == NULL ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res ) ; goto cleanup <S2SV_ModEnd> ; } } <S2SV_ModStart> 0 ) { if ( hdl == NULL ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> initialize <S2SV_blank> the <S2SV_blank> client <S2SV_blank> handle: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res ) ; goto cleanup <S2SV_ModEnd> ; } } <S2SV_ModStart> hdl ) ; cleanup : if ( hdl == NULL ) { if ( hdl == NULL ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str ( res ) ) ; goto cleanup ; }",0
1440,"<S2SV_ModStart> size_t max_mem ; size_t max_samples ; size_t max_samples ; <S2SV_ModStart> 0 ] ; max_samples = 64 * JAS_MEBI ; <S2SV_ModStart> break ; case OPT_MAXSAMPLES : max_samples = strtoull ( jas_optarg, 0, 10 ) ; break ; case <S2SV_ModStart> break ; case OPT_MAXFMT : max_samples = strtoull ( jas_optarg, 0, 10 ) ; break ; case <S2SV_ModStart> (! ( image = jas_image_open ( jas_optarg, ""rb"" ) ) ) { fprintf ( stderr, ""cannot <S2SV_blank> open <S2SV_blank> standard <S2SV_blank> input <S2SV_blank> image <S2SV_blank> file <S2SV_blank> %s\\n"", infile ) ; exit ( EXIT_FAILURE ) ; } } if ( ( fmtid = jas_image_getfmt ( instream ) ) < 0 ) { fprintf ( stderr, ""unknown <S2SV_blank> image <S2SV_blank> format\\n"" ) ; } if (! ( fmtname = jas_image_getfmtname ( fmtid ) ) ) { fprintf ( stderr, ""cannot <S2SV_blank> open <S2SV_blank> standard <S2SV_blank> input <S2SV_blank> file <S2SV_blank> %s\\n"", fmtname ) ; exit (",0
1441,<S2SV_ModStart> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1442,"<S2SV_ModStart> validator -> user ) ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size",0
1443,"<S2SV_ModStart> 0 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD if ( ( RAW ( row, col ) = pred [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; # else",0
1444,<S2SV_ModStart> len < needed || len > param -> data_size,0
1445,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;",0
1446,"<S2SV_ModStart> vcpu_info ; int <S2SV_ModEnd> idx, ret <S2SV_ModStart> irq_srcu ) ; if ( guest_irq >= irq_rt -> nr_rt_entries ) goto out ; idx = srcu_read_lock ( & kvm -> irq_srcu ) ; <S2SV_ModStart> nr_rt_entries ) ; if ( idx >= irq_rt -> nr_rt_entries ) goto out ; hlist_for_each_entry ( e, & irq_rt -> map [ guest_irq ], link ) { if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; kvm_set_msi_irq ( kvm, e, & irq ) ; if (! kvm_intr_is_single_vcpu ( kvm, & irq, & vcpu ) ) { ret = irq_set_vcpu_affinity ( host_irq, NULL ) ; if ( ret < 0 ) { printk ( KERN_INFO ""failed <S2SV_blank> to <S2SV_blank> back <S2SV_blank> to <S2SV_blank> remapped <S2SV_blank> mode, <S2SV_blank> irq: <S2SV_blank> %u\\n"", host_irq ) ; goto out",0
1447,<S2SV_ModStart> bfqq ) { hrtimer_try_to_cancel <S2SV_ModEnd> ( timer ),0
1448,"<S2SV_ModStart> } else { return false ; } case U64_MAX : return rold -> umin_value == 0 && rold -> umax_value == U64_MAX && rold -> smin_value == S64_MIN && rold -> smax_value == S64_MAX ; case SCALAR_VALUE_OR_NULL : if ( rcur -> type == PTR_TO_MAP_VALUE_OR_NULL ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) == 0 && range_within ( rold, rcur ) && tnum_in ( rold -> var_off, rcur -> var_off ) ; case PTR_TO_PACKET_META : case PTR_TO_PACKET : if ( rcur -> type == PTR_TO_PACKET_META ) return false ; if ( rold -> range > rcur -> range ) return false ; if ( rold -> off!= rcur -> off ) return false ; if ( rold -> type!= rold -> type ) return false ; if ( rold -> range > rcur -> range )",0
1449,"<S2SV_ModStart> sock, sk ) ; memset ( sa, 0, sizeof ( * sa )",1
1450,<S2SV_ModStart> (! handle ||! SecIsValidHandle ( handle ),1
1451,<S2SV_ModStart> += 1 ; if ( orderInfo -> orderType >= MAX_PRIMARY_DRAWING_ORDER_TYPES ) return - 1 ;,0
1452,<S2SV_ModStart> old_type ) ) { if ( d_unhashed ( old ) == d_unhashed ( new ) ) { err = - EPERM ; goto out ; } } else { if ( d_unhashed ( old ) == d_unhashed ( new ) ) { err = - EPERM ; goto out ; } } <S2SV_ModEnd> if ( cleanup_whiteout <S2SV_ModStart> old_type ) ) { if ( new_upperdir == old_dentry_lower ( old ) -> d_inode ) { if ( new_upperdir == new_upperdir ) { err = - EPERM ; goto out ; } } else { if ( new_upperdir == old_upperdir ) { err = - EPERM ; goto out ; } } else { if ( new_type == OVL_TYPE_UPPER ( new_type ) ) { if ( old_type == OVL_TYPE_UPPER ( old_type ) ) { if ( new_upperdir == ovl_dentry_lower ( new ) -> d_inode ) { err = - EPERM ; goto out ; } } else { if ( old_type == OVL_,0
1453,<S2SV_ModStart> OP_EXACT1 ) ; <S2SV_ModEnd> fprintf ( stderr <S2SV_ModStart> OP_EXACT2 ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> OP_EXACT3 ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> OP_EXACT1 ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> OP_EXACT2 ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> OP_EXACT1 ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> OP_EXACT2 ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> OP_EXACT1 ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> OP_EXACT2 ) ;,0
1454,"<S2SV_ModStart> int plane ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) vp9_foreach_transformed_block_in_plane_high ( xd, bsize, plane, visit, arg ) ; # else for ( plane = 0 ; plane < MAX_MB_PLANE ; plane ++ ) vpx_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) vpx_foreach_transformed_block_high ( xd, bsize, plane, visit, arg ) ; # else for ( plane = 0 ; plane < MAX_MB_PLANE ; plane ++ ) vpx_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; # endif",0
1455,<S2SV_ModStart> = - EINVAL ; msg -> msg_namelen = 0,0
1456,"<S2SV_ModStart> mntent, path, rootfs",1
1457,<S2SV_ModStart> = hash ; sr -> session_fd = fd ;,0
1458,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool construct_get_dest_keyring ( struct key * dest_keyring ) { if (! dest_keyring ) return false ; <S2SV_ModStart> authkey ; } <S2SV_ModEnd> switch ( cred <S2SV_ModStart> KEY_REQKEY_DEFL_DEFAULT : case KEY_REQKEY_DEFL_REQUESTOR_KEYRING : if ( cred -> request_key_auth ) { authkey = cred -> request_key_auth ; if (! test_bit ( KEY_FLAG_REVOKED, & authkey -> flags ) ) dest_keyring = key_get ( authkey -> dest_keyring ) ; if (! dest_keyring ) return false ; } break ; case KEY_REQKEY_DEFL_USER_SESSION_KEYRING : case KEY_REQKEY_DEFL_GROUP_KEYRING : if ( cred -> user -> session_keyring ) dest_keyring = key_get ( cred -> user -> session_keyring ) ; break ; case KEY_REQKEY_DEFL_USER_SESSION_KEYRING : dest_keyring = key_get ( cred -> user -> session_",0
1459,"<S2SV_ModStart> void nonrd_pick_sb_modes ( const VP9_COMMON * const cm, MACROBLOCK * const x <S2SV_ModEnd>, int mi_row <S2SV_ModStart> -> e_mbd ; set_offsets <S2SV_ModEnd> ( cpi, <S2SV_ModStart> bsize ) ; if ( xd -> mi [ 0 ] -> mbmi. sb_type == BLOCK_SIZE_8X8 ) { vp9_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; set_mode_info ( & xd -> mi [ 0 ] -> mbmi, bsize ) ; } duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1460,<S2SV_ModStart> NETIF_F_HW_CSUM | NETIF_F_SG <S2SV_ModEnd> ; if ( <S2SV_ModStart> NETIF_F_HW_CSUM | NETIF_F_SG <S2SV_ModEnd> ; if (,1
1461,"<S2SV_ModStart> ; * err = safe_open ( filename, O_RDONLY | O_CLOEXEC | O_NOFOLLOW, & reader. superblock ) ; if (! reader. superblock ) { log ( ""cannot <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s\\n"", filename ) ; * err = errno ; return NULL ; }",0
1462,"<S2SV_ModStart> -> rows ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> -> columns ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> -> rows ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> -> rows ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> -> rows ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> -> rows ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
1463,"<S2SV_ModStart> ""nnnnn\\0"" ) ] ; unsigned long tmp <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( buf, buffer, count ) ) return - EFAULT ; tmp = simple_strtol ( buf, & end, 0 ) ; if ( ( * end!= '\\0' ) &&! isspace ( * end ) ) return - EINVAL ; uml_exitcode = tmp ; if (",0
1464,<S2SV_ModStart> -> ranges = safeMalloc ( <S2SV_ModEnd> sizeof ( MappedRange,0
1465,<S2SV_ModStart> return __this_address ; if ( be16_to_cpu ( dip -> di_nlink ) > mp -> m_sb. sb_dblocks ) return __this_address ; if ( be32_to_cpu ( dip -> di_anextents ) + be16_to_cpu ( dip -> di_anextents ) + be16_to_cpu ( dip -> di_nblocks ) > mp -> m_sb. sb_dblocks ) return __this_address ; if ( be16_to_cpu ( dip -> di_nlink ) > mp -> m_sb. sb_dblocks ) return __this_address ; if ( be32_to_cpu ( dip -> di_nextents ) + be16_to_cpu ( dip -> di_anextents ) + be16_to_cpu ( dip -> di_nblocks ) > mp -> m_sb. sb_inodesize ) return __this_address ; if ( mode && ( be32_to_cpu ( dip -> di_nextents ) + be16_to_cpu ( dip -> di_anextents ) > mp -> m_sb. sb_inodesize,0
1466,<S2SV_ModStart> } if ( pixel -> total_freq <= cnt_c + step ) return ret ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; if ( totfr > BOT ) { totfr = 0 ; for ( i = 0 ; i < 16 ; i ++ ) { unsigned nc = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = nc ; pixel -> lookup [ i ] = nc ; totfr += nc ; } for ( i = 0 ; i < 256 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; pixel -> lookup [ i ] = sum ; totfr += nc ; } for ( i = 0 ; i < 16 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++,0
1467,"<S2SV_ModStart> ; if (! jas_safe_size_mul3 ( cmpt -> width, cmpt -> height, & cmpt -> width ) ||! jas_safe_size_mul4 ( cmpt -> sampperx, & cmpt -> samppery ) ) { jas_eprintf ( ""invalid <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> %d\\n"", sizeof ( cmpt -> sampperx ), & cmpt -> height ) ; goto error ; } if (! jas_safe_size_mul3 ( cmpt -> width, cmpt -> height, & cmpt -> prec ) ) { jas_eprintf ( ""invalid <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> %d\\n"", & cmpt -> width ) ; goto error ; } if (! jas_safe_size_mul4 ( cmpt -> width, cmpt -> height, & cmpt -> height ) ) { jas_eprintf ( ""invalid <S2SV_blank> height <S2SV_blank> %d\\n"", sizeof ( cmpt -> height ) ) ; goto error ; }",0
1468,"<S2SV_ModStart> ; if ( flags & VP8_EFLAG_NO_UPD_GF ) || ( ( flags & VP8_EFLAG_NO_UPD_ARF ) && ( flags & VP8_EFLAG_FORCE_ARF ) ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_AL",0
1469,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;",0
1470,<S2SV_ModStart>! head ) <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
1471,"<S2SV_ModStart>, const u_char * p, u_int len, const u_char * end <S2SV_ModStart> case BGP_AIGP_TLV : if ( len < 3 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_AIGP_TLV : if ( len < 3 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> 3 ) { if ( len < 3 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> 3 ) { if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_AIGP_TLV : if ( len < 8 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> 3 ) { if ( len < 8 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> 3 ) { if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) )",0
1472,"<S2SV_ModStart> -> outputbuffer, ""<table <S2SV_blank> id=\'daemon-status-table\'><tr>"" ""<td>Name</td>"" ""<td>%s</td>"", Run. system -> name ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Pidfile</td>"" ""<td>%s</td></tr>"", Run. files. pid ) ; if ( Run. files. control ) StringBuffer_append ( res -> outputbuffer, ""<tr><td>Controlfile</td>"" ""<td>%s</td></tr>"", Run. files. control ) ; if ( Run. files. pid ) StringBuffer_append ( res -> outputbuffer, ""<tr><td>Logfile</td><td>%s</td></tr>"", Run. files. pid ) ; else StringBuffer_append ( res -> outputbuffer, ""<tr><td>Logfile</td><td>%s</td></tr>"", Run. files. log ) ; if ( Run. files. control ) StringBuffer_append ( res -> outputbuffer, ""<tr><td>Logfile</td><td>%s</td></tr>"", Run. files. log",0
1473,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
1474,"<S2SV_ModStart> len = sizeof ( tokbuf ) ; snprintf ( constr1, constr2, sizeof ( constr1 ), ""%s"", constr1 [ sizeof ( constr2 ) - 1 ] ) ; snprintf ( constr2, constr2, sizeof ( constr2 ), ""%s"", constr2 [ sizeof ( constr2 ) - 1 ]",0
1475,<S2SV_ModStart> int u ; if ( n < 0 || n >= 32 ) { return - 1 ; } <S2SV_ModEnd> v = 0,1
1476,"<S2SV_ModStart>, & len, <S2SV_ModEnd> iovec ) ; <S2SV_ModStart> iter_op ) { ret = iter_op ( req, & iter ) ; if ( ret ) ret = rw_op ( req, & iter ) ; else ret = rw_op ( req, & iter ) ; if ( ret < 0 ) { if ( iovec!= inline_vecs ) kfree ( iovec ) ; break ; } ret = rw_op ( req, & iter ) ; if ( ret < 0 ) { if ( iovec!= inline_vecs ) kfree ( iovec ) ; break ; }",0
1477,"<S2SV_ModStart> } } } if ( c -> rbytes == 0 ) { c -> rbytes = 0 ; c -> rcurr = ( char * ) malloc ( sizeof ( protocol_binary_request_header ) + 1 ) ; c -> rcurr = ( char * ) malloc ( sizeof ( protocol_binary_request_header ) + 1 ) ; c -> rcurr = ( char * ) malloc ( sizeof ( protocol_binary_request_header ) + 1 ) ; if ( c -> rcurr == ( char * ) malloc ( sizeof ( protocol_binary_request_header ) + 1 ) ; c -> rcurr = ( char * ) malloc ( sizeof ( protocol_binary_request_header ) ) ; for ( ii = 0 ; ii < sizeof ( protocol_binary_request_header ) ; ++ ii ) { if ( ii % 4 == 0 ) { fprintf ( stderr, ""\\n<%d <S2SV_blank> <S2SV_blank> <S2SV_blank> "", c -> sfd ) ; } fprintf ( stderr, "" <S2SV_blank> 0x%02x"", req -> bytes [ ii ] ) ; c -> rcurr = ( char * ) malloc ( sizeof ( protocol_binary_request_header ) ) ; c -> r",0
1478,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
1479,"<S2SV_ModStart> iad_num ] ; if ( config -> desc. bNumInterfaces < nintf ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, nintf, USB_MAXINTERFACES ) ; nintf = USB_MAXINTERFACES ; } else if ( config -> desc. bNumInterfaces == nintf_orig ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, USB_MAXINTERFACES ) ; nintf = USB_MAXINTERFACES ; }",0
1480,<S2SV_ModStart> ; if ( card -> user_ctl_count >= MAX_USER_CONTROLS ) return - ENOMEM ; if ( info -> count > MAX_USER_CONTROLS ) return - EINVAL <S2SV_ModEnd> ; access = <S2SV_ModStart> SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ) ) { if ( access & ( SNDRV_CTL_ELEM_ACCESS_INACTIVE | SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ) ) access &= ~ SNDRV_CTL_ELEM_ACCESS_INACTIVE ; if ( access & SNDRV_CTL_ELEM_ACCESS_INACTIVE ) access |= SNDRV_CTL_ELEM_ACCESS_INACTIVE ; if ( access & SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ) access |= SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ; },0
1481,"<S2SV_ModStart> client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; return 0 ; } if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) { exit_client ( client_p, client_p, client_p, ""Malformed <S2SV_blank> AUTHENTICATE""",1
1482,<S2SV_ModStart> OpMask ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> OpMask ) ) continue <S2SV_ModEnd> ; if ( <S2SV_ModStart> OpMask ) ) continue <S2SV_ModEnd> ; if ( <S2SV_ModStart> OpMask ) ) continue <S2SV_ModEnd> ; if ( <S2SV_ModStart> OpMask ) ) continue <S2SV_ModEnd> ; if ( <S2SV_ModStart> OpMask ) ) continue <S2SV_ModEnd> ; if ( <S2SV_ModStart> OpMask ) ) continue <S2SV_ModEnd> ; if ( <S2SV_ModStart> OpMask ) ) continue <S2SV_ModEnd> ; if ( <S2SV_ModStart> OpMask ) ) continue <S2SV_ModEnd> ; if ( <S2SV_ModStart> OpMask ) ) continue <S2SV_ModEnd> ; if ( <S2SV_ModStart> OpMask ) ) continue <S2SV_ModEnd> ; if ( <S2SV_ModStart> OpMask ) ) continue <S2SV_ModEnd> ; if ( <S2SV_ModStart> OpMask ) ) continue <S2SV_ModEnd> ; if ( <S2SV_ModStart> OpMask ) ) continue <S2SV_ModEnd> ; if ( <S2SV_ModStart> OpMask ) ) continue <S2SV_ModEnd> ; if ( <S2SV_ModStart> OpMask ) ) continue <S2SV_ModEnd> ; if ( <S2SV_ModStart> OpMask ) ) continue <S2SV_ModEnd> ; if (,0
1483,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
1484,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; random_ether_addr (,1
1485,"<S2SV_ModStart> 16 ) ; if ( error16x16 > INT_MAX ) { xd -> mode_info_context -> mbmi. mode = B_PRED ; error16x16 = INT_MAX ; } distortion = vp8_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; rate = x -> mbmode_cost [ xd -> frame_type ] [ mode ] ; this_rd = RDCOST ( x -> rdmult, x -> rddiv, rate, distortion ) ; if ( error16x16 > INT_MAX ) { xd -> mode_info_context -> mbmi. mode = B_PRED ; best_sse = sse ; }",0
1486,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; context <S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; context <S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_ECON",0
1487,"<S2SV_ModStart> * start ; va_start ( argptr, format ) ; va_start ( argptr, format ) ; vsnprintf ( start, maxlen, format, argptr ) ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> va_end ( argptr <S2SV_ModStart> psf -> header ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1488,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
1489,"<S2SV_ModStart> ||! prev_hash || <S2SV_ModEnd>! coinbase1 || <S2SV_ModStart>! ntime ) <S2SV_ModEnd> { if ( <S2SV_ModStart> if ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ; goto out ; } cg_wlock ( & pool -> data_lock ) ; cb1 = kmalloc ( cb1_len, GFP_KERNEL ) ; cb2 = kmalloc ( cb2_len, GFP_KERNEL ) ;",0
1490,<S2SV_ModStart> -> priv -> priv_type == VPX_CODEC_ALGO_PRIV && ctx -> iface -> destroy ) { if ( ctx -> priv -> priv_type == VPX_CODEC_ALGO_PRIV ) { vpx_codec_alg_priv_destroy ( ctx -> priv -> priv_priv ) ; ctx -> priv -> priv_type = VPX_CODEC_UNSUPPORTED_PRIV ; } else { ctx -> priv -> priv_type = VPX_CODEC_UNSUPPORTED_PRIV ; } } ctx -> priv = NULL ; ctx -> name = NULL ; ctx -> priv = NULL ; res = VPX_CODEC_OK ; },0
1491,<S2SV_ModStart> case EXIT_REASON_VMON : case EXIT_REASON_INVEPT :,1
1492,"<S2SV_ModStart> speed ) { SET_SPEED_FEATURES ( sf ) ; <S2SV_ModEnd> sf -> allow_skip_recode <S2SV_ModStart> 1 ) { <S2SV_ModEnd> sf -> use_square_partition_only <S2SV_ModStart> cm ) ; <S2SV_ModEnd> sf -> less_rectangular_check <S2SV_ModStart> ; sf -> <S2SV_ModEnd> tx_size_search_method = vp9_frame_is_boosted <S2SV_ModStart> ( cpi )? USE_FULL_RD : USE_LARGESTALL ; if ( MIN ( cm -> width, cm -> height ) >= 720 ) sf -> disable_split_mask = DISABLE_ALL_SPLIT ; else sf -> disable_split_mask = DISABLE_ALL_INTER_SPLIT ; else sf -> disable_split_mask = DISABLE_COMPOUND_SPLIT ; sf -> recode_loop = ALLOW_RECODE_KFARFGF ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_H_V ; sf -> intra_y_mode_mask [ TX_16X16 ] = INTRA_DC",0
1493,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
1494,"<S2SV_ModStart> struct compat_timex ) ; memset ( & txc -> tx32, 0, sizeof ( txc -> tx32 ) ) ;",0
1495,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
1496,"<S2SV_ModStart> ; int goodsize ; if ( inuse > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) { luaD_reallocstack ( L, goodsize, 0 ) ; } else if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else <S2SV_ModEnd> condmovestack ( L",0
1497,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1498,"<S2SV_ModStart>, * s <S2SV_ModEnd> ; int quote <S2SV_ModStart> ) ) ; if (! str ) { Py_DECREF ( str ) ; return NULL ; } Py_DECREF ( type ) ; Py_DECREF ( value ) ; Py_XDECREF ( tback ) ; } # ifdef Py_USING_UNICODE if ( PyErr_ExceptionMatches ( PyExc_UnicodeError ) ) { PyObject * type, * value, * tback, * errstr ; if ( errstr ) { Py_DECREF ( type ) ; Py_DECREF ( value ) ; if ( errstr ) { Py_DECREF ( type ) ; Py_DECREF ( value ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF ( type ) ; Py_DECREF ( value ) ; Py_XDECREF ( tback ) ; } # endif return NULL ; } PyArena_AddPyObject ( c -> c_arena, str ) ; return Str ( str, kind, LINENO ( n ), n -> n_col_offset, c -> c_arena )",0
1499,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> } else if ( strcmp ( ""encoding-mode"", option_name ) == 0 ) { res = set_option_encoding_mode ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""layers"", option_name ) == 0 ) { svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_factors ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers-keyframe"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 ) ;",0
1500,<S2SV_ModStart>! head ) <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
1501,"<S2SV_ModStart> 0 ) { if ( len < 9 ) { output_error ( ""Not <S2SV_blank> enough <S2SV_blank> space <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> /FontName\\n"" ) ; return ; } <S2SV_ModStart> ++ s ; len = t - s ; if ( len < 1 ) { output_error ( ""Not <S2SV_blank> enough <S2SV_blank> space <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> /FontName\\n"" ) ; return ; } <S2SV_ModEnd> if ( * <S2SV_ModStart> ) ) t ++ ; if ( len < 1 ) { output_error ( ""Not <S2SV_blank> enough <S2SV_blank> space <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> /FontName\\n"" ) ; return ; } output_current_post ( ) ; blocktyp = POST_ASCII ; } if ( strncmp ( s, ""/FontName"", 9 ) == 0 ) { <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
1502,<S2SV_ModStart> ; if ( entry == NULL ) return EINVAL ; if ( <S2SV_ModStart> KADM5_POLICY ) && ( mask & KADM5_POLICY_CLR ) ) return KADM5_BAD_MASK ; if ( ( mask & KADM5_TL_DATA ) && ( entry -> tl_data_type < 256 ) ) return KADM5_BAD_TL_TYPE ; if ( ( mask & KADM5_POLICY ) && ( mask & KADM5_POLICY_CLR ) ) return KADM5_BAD_MASK ; if ( ( mask & KADM5_POLICY ) && ( mask & KADM5_POLICY_CLR ) ) return KADM5_BAD_MASK ; if ( ( mask & KADM5_POLICY ) && ( mask & KADM5_POLICY_CLR ) ) return KADM5_BAD_MASK ; if ( ( mask & KADM5_POLICY ) && ( mask & KADM5_POLICY_CLR ) ) return KADM5_BAD_MASK ; if ( ( mask & KADM5_POLICY ) && ( mask & KADM,0
1503,<S2SV_ModStart> frame -> data [ plane ] && frame -> linesize <S2SV_ModStart> [ plane ] && frame -> linesize [ plane ],1
1504,"<S2SV_ModStart> ) ; } fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. uv_mode ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; } fprintf ( mvs, ""\\n"" ) ; mb_index = 0 ; fprintf ( mvs, ""Mb <S2SV_blank> mv <S2SV_blank> ref <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. ref_frame ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; mb_index = 0 ; fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb",0
1505,<S2SV_ModStart> self ) { size_t <S2SV_ModEnd> i ; PyObject,1
1506,,1
1507,<S2SV_ModStart> : case 0x1a : case 0x1b : case 0x1c : case 0x1f : case 0x16 : case 0x17 : case 0x18 : case 0x19 : case 0x1a : case 0x1b : case 0x1c : case 0x1f :,0
1508,"<S2SV_ModStart> ) ) { if ( imp_dbh -> pmysql ) { do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; return FALSE ; }",0
1509,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( ioctl ( <S2SV_ModStart> ( need_close || TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) == - EAGAIN <S2SV_ModEnd> ) ) pthread_mutex_unlock <S2SV_ModStart> ( need_close || TEMP_FAILURE_RETRY ( <S2SV_ModStart> size )!= - EAGAIN <S2SV_ModEnd> ) BTA_JvRfcommWrite (,0
1510,<S2SV_ModStart> struct ieee_802_11_phdr phdr ; if ( len_remain < sizeof ( struct ieee_802_11_phdr ) ) return,0
1511,<S2SV_ModStart> ; sh = s_malloc0 <S2SV_ModEnd> ( hdrlen +,0
1512,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> BYTE a_val ; if (! context ) return FALSE ; <S2SV_ModEnd> rw = ( <S2SV_ModStart> ChromaSubsamplingLevel ; for ( y = 0 ; y < context -> height ; y ++ ) { src = data + ( y - context -> height - 1 ) * scanline ; yplane = context -> priv -> PlaneBuffers [ 0 ] + y * rw ; coplane = context -> priv -> PlaneBuffers [ 1 ] + y * rw ; cgplane = context -> priv -> PlaneBuffers [ 2 ] + y * rw ; aplane = context -> priv -> PlaneBuffers [ 3 ] + y * rw ; coplane = context -> priv -> PlaneBuffers [ 1 ] + y * rw ; coplane = context -> priv -> PlaneBuffers [ 2 ] + y * scanline ; cgplane = context -> priv -> PlaneBuffers [ 3 ] + y * rw ; aplane = context -> priv -> PlaneBuffers [ 3 ] + y * rw ; for ( x = 0 ; x < context -> width ; x,0
1513,<S2SV_ModStart> while ( offset > 0 && offset <S2SV_ModStart> < end_offset ) { <S2SV_ModStart> hf_keybuffer ) ; },1
1514,"<S2SV_ModStart> > nr_parens ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, str - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, str - str ) ; goto out_free ; }",0
1515,<S2SV_ModStart> cpi ) { const VP9EncoderConfig <S2SV_ModEnd> * rc = <S2SV_ModStart> = ( ( cpi <S2SV_ModEnd> -> oxcf. <S2SV_ModStart> > INT_MAX )? cpi -> oxcf. starting_buffer_level / 2 : <S2SV_ModEnd> cpi -> oxcf <S2SV_ModStart> > INT_MAX )? cpi -> oxcf. starting_buffer_level <S2SV_ModStart> )? INT_MAX : cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> ; } else <S2SV_ModStart> = 32 ; int kf_boost ; if ( rc -> frames_since_key < ( cpi -> output_framerate / 2 ) ) { kf_boost = ( int ) ( rc -> frames_since_key * rc -> frames_since_key / ( cpi -> output_framerate / 2 ) ) ; } else { kf_boost = ( int ) ( rc -> frames_since_key * rc -> frames_since_key / ( cpi -> output_framerate / 2 ) ; } target = ( ( 16 + kf_boost ) * rc -> av_per_frame_bandwidth ) >> 4 ; } <S2SV_ModEnd> return vp9_rc_clamp_iframe_target_size (,0
1516,<S2SV_ModStart> X86_EFLAGS_RF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1517,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> set_registers ( pegasus_t <S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmemdup ( data, size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
1518,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_bit_t <S2SV_ModEnd> read_tx_mode ( vpx_reader <S2SV_ModStart> r ) { vpx_bit_t <S2SV_ModEnd> tx_mode = vp9_read_literal <S2SV_ModStart> 2 ) ; if ( tx_mode == ALLOW_32X32 ) tx_mode = vpx_read_bit <S2SV_ModEnd> ( r ) <S2SV_ModStart> tx_mode += vpx_read_bit <S2SV_ModEnd> ( r ),0
1519,<S2SV_ModStart> op + OSPF6HDR_LEN ) ; ND_TCHECK_32BITS ( & hellop -> hello_options,1
1520,<S2SV_ModStart> { if ( datalen!= 1 ) return - EINVAL ; if (,1
1521,"<S2SV_ModStart> rc ) { struct task_struct * <S2SV_ModEnd> task = kthread_run <S2SV_ModStart> ; if ( IS_ERR ( task ) ) { <S2SV_ModStart> uwbd. task = NULL ; <S2SV_ModEnd> printk ( KERN_ERR <S2SV_ModStart> ""UWB <S2SV_blank> won\'t <S2SV_blank> work\\n"" ) ; } else { rc -> uwbd. task = task ; <S2SV_ModEnd> rc -> uwbd <S2SV_ModStart> pid ; } }",1
1522,"<S2SV_ModStart> : # line 101 ""re_grammar.y"" { yr_free ( ( ( * yyvaluep ). class_vector ) ) ; } <S2SV_ModEnd> break ; case <S2SV_ModStart> : # line 102 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1048 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 104 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1054 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 104 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1054 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 104 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1055 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 104 ""re_grammar.y"" { yr_re_node",0
1523,<S2SV_ModStart> : idx ; assert ( ptr >= gfx -> backendData && ptr < ( ( char * ) gfx -> backendData + pixelCount ) ) ;,0
1524,<S2SV_ModStart> = args -> cpi <S2SV_ModEnd> ; TOKENEXTRA * <S2SV_ModStart> 32 ] ; MACROBLOCK * const p = & cpi -> mb. plane [ plane ] ; MB_MODE_INFO * const mbmi = & xd -> mi [ 0 ] -> mbmi ; int pt ; int c ; int e ; int eob ; const PLANE_TYPE type = pd -> plane_type ; const int16_t * qcoeff <S2SV_ModEnd> = BLOCK_OFFSET ( <S2SV_ModStart> -> plane_type ; vp9_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] = cpi -> common. fc. coef_probs [ tx_size ] [ type ] [ ref ] ; unsigned int ( * const eob_branch ) [ COEFF_CONTEXTS ] = cpi -> common. counts. eob_branch [ tx_size ] [ ref ] ; unsigned int ( * const counts ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. fc. coef_probs [ tx_size ] [ type ] [ ref ] ; unsigned int ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] =,0
1525,<S2SV_ModStart> pSelect -> pSrc ; if ( pSelect -> selFlags & SF_View ) return WRC_Prune,1
1526,<S2SV_ModStart> { if ( ( <S2SV_ModStart> shmflg & SHM_RND ) && addr >= shmlba,1
1527,"<S2SV_ModStart> ; serv = svc_create ( & cb4_callback_program <S2SV_ModEnd>, NFS4_CALLBACK_BUFSIZE,",0
1528,"<S2SV_ModStart> point, const CurveZZ_p <S2SV_ModEnd> curve ) {",0
1529,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1530,<S2SV_ModStart> : case NPNVSupportsWindowless : case NPNVprivateModeBool : case NPNVsupportsAdvancedKeyHandling,1
1531,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
1532,"<S2SV_ModStart> s ) { if ( s < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } do { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
1533,"<S2SV_ModStart> = NULL ; const char * name = ( const char * ) crm_first_attr ( xml ) ; const char * value = ( const char * ) xIter -> value ; if ( strcmp ( name, ID ( xml ) ) == 0 ) { continue ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else { crm_trace ( ""Cannot <S2SV_blank> add <S2SV_blank> new <S2SV_blank> node <S2SV_blank> %s <S2SV_blank> at <S2SV_blank> %s"", crm_element_name ( xml ), path ) ; if ( xml!= xmlDocGetRootElement ( xml -> doc ) ) { xmlUnlinkNode ( xml ) ; xmlFreeNode ( xml ) ;",0
1534,"<S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"" <S2SV_ModEnd>, dirout ) <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"" <S2SV_ModEnd>, dirout ) <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"" <S2SV_ModEnd>, dirout )",0
1535,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> return ( SvcInternal_t <S2SV_ModEnd> * ) svc_ctx,0
1536,"<S2SV_ModStart> mq_flush_lock, flags ) ; fq -> flush_running_idx ^= 1",0
1537,"<S2SV_ModStart> s ) { uint32 length ; struct stream packet = * s <S2SV_ModEnd> ; ber_parse_header ( <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> consume <S2SV_blank> domain <S2SV_blank> params <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",1
1538,"<S2SV_ModStart> ; if (! Z_TYPE_IS_ARRAY ( hkey. type ) ) { zval tmp ; INIT_PZVAL_ARRAY ( & tmp, params ) ; fprintf ( stderr, ""params <S2SV_blank> = <S2SV_blank> "" ) ; zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_hash_update ( params, hkey. str, hkey. len, ( void * ) & tmp, sizeof ( tmp ), ( void * ) & tmp, sizeof ( tmp ) TSRMLS_CC ) ; fprintf ( stderr, ""params <S2SV_blank> = <S2SV_blank> "" ) ; zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_hash_update ( params, hkey. str, hkey. len, ( void * ) & tmp, sizeof ( tmp ), ( void * ) & tmp, sizeof ( tmp ) TSRMLS_CC ) ; fprintf ( stderr",0
1539,"<S2SV_ModStart> only_420 ) { <S2SV_ModEnd> int ret ; <S2SV_ModStart> = VPX_IMG_FMT_I420 ; if (! _y4m -> vpx_fmt ) { fprintf ( stderr, ""Input <S2SV_blank> video <S2SV_blank> is <S2SV_blank> not <S2SV_blank> interlaced; <S2SV_blank> "" ""only <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; return - 1 ; } <S2SV_ModStart> = 12 ; <S2SV_ModEnd> if ( strcmp <S2SV_ModStart> -> chroma_fmt = VPX_IMG_FMT_I420 ; } else { _y4m -> chroma_fmt = VPX_IMG_FMT_I420 ; } if (! _y4m -> vpx_bps ) { fprintf ( stderr, ""Input <S2SV_blank> video <S2SV_blank> is <S2SV_blank> not <S2SV_blank> interlaced; <S2SV_blank> "" ""only <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; return - 1 ; }",0
1540,"<S2SV_ModStart> obj * otmp ; if ( strlen ( buf ) >= sizeof ( zeroobj ) ) config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; else return FALSE",0
1541,"<S2SV_ModStart> { long long <S2SV_ModEnd> directory_table_end, table_start <S2SV_ModStart> 0 ) return FALSE <S2SV_ModEnd> ; if ( <S2SV_ModStart> == FALSE ) return FALSE ; if ( parse_exports_table ( & table_start ) == FALSE ) return FALSE ; if ( read_fragment_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read",0
1542,"<S2SV_ModStart> const struct rule * parent, const struct rule * next ) { struct envnode * node ; u_int count ; <S2SV_ModStart> root ) ; count = 0 ; for ( i = 0 ; i < ( u_int ) parent -> count ; i ++ ) { struct envnode * node ; if ( RB_INSERT ( envtree, & env -> root, node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } for ( i = 0 ; i < ( u_int ) parent -> count ; i ++ ) { struct envnode * node ; size_t len ; if ( len > sizeof ( keybuf ) - 1 ) continue ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf, eq + 1 ) ; if ( RB_INSERT ( envtree, & env -> root, node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } <S2SV_ModEnd> return env ;",0
1543,"<S2SV_ModStart> ; if ( unfrag_ip6hlen < 0 ) { pr_err ( ""unfrag <S2SV_blank> ip6 <S2SV_blank> fragment <S2SV_blank> too <S2SV_blank> short"" ) ; goto out ; } unfrag_ip6hlen = min_t ( u32, unfrag_ip6hlen, skb -> len - unfrag_hdr_sz ) ; unfrag_len = min_t ( u32, unfrag_ip6hlen, skb -> len - unfrag_hdr_sz ) ; if ( unfrag_ip6hlen < 0 ) { pr_err ( ""unfrag <S2SV_blank> ip6 <S2SV_blank> fragment <S2SV_blank> too <S2SV_blank> short"" ) ; unfrag_ip6hlen = min_t ( u32, unfrag_ip6hlen, skb -> len - unfrag_hdr_sz ) ; goto out ; }",0
1544,"<S2SV_ModStart> -> seg ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> seg ; vp9_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> { } } vp9_clear_segmentation ( seg ) ; vp9_clearall_segfeatures ( seg ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> frame_type, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vp9_set_segdata ( seg, segment, SEG_LVL_ALT_Q, qindex_delta ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> frame_type, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vp9_enable_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ; vp9_set_segdata",0
1545,"<S2SV_ModStart> ; Module_type = make_type ( ""Module"", mod_type, Module_fields, 1 ) ; if (! Module_type ) return 0 ; Interactive_type = make_type ( ""Interactive"", mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; Module_type = make_type ( ""Module"", mod_type, Module_fields, 1 ) ; if (! Module_type ) return 0 ; Interactive_type = make_type ( ""Interactive"", mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; stmt_type = make_type ( """,0
1546,"<S2SV_ModStart> } logfile_fd = open_as_other ( log_path, O_RDONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IWGRP | S_IROTH ) ; if ( logfile_fd == INVALID_FD ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, log_path, strerror ( errno ) ) ; is_logging = false ; return ; } <S2SV_ModStart> } write ( logfile_fd <S2SV_ModEnd>, ""btsnoop\\0\\0\\0\\1\\0\\0\\x3\\xea"",",0
1547,<S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 4 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> ; break ; } while ( context -> pass > 0 && context -> pass < 4 && context -> curY >= p -> height ) { switch ( ++ context -> pass ) { case 2 : context -> curY = i -> posY + 4 ; break ; case 3 : context -> curY = i -> posY + 2 ; break ; case 4 : context -> curY = i -> posY + 1 ; break ; },1
1548,<S2SV_ModStart> ) ; } ++ x -> ymode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ;,0
1549,"<S2SV_ModStart> ) ; } smb_ofile_flush <S2SV_ModEnd> ( sr, <S2SV_ModStart> f_mutex ) ; smb_ofile_flush <S2SV_ModEnd> ( sr,",1
1550,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> len > 0 && len > 0 <S2SV_ModStart> = pwcs ; if ( len < size ) return - EINVAL ; <S2SV_ModStart> PLANE_SIZE ) { if ( len < size ) return - EINVAL ; <S2SV_ModStart> -= PLANE_SIZE ; <S2SV_ModEnd> * op ++ <S2SV_ModStart> ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; } else { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ; } } else { * op ++ = ( wchar_t ) u ; } s += size ; len -= size ; } } return op - pwcs ; } <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1551,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> sscanf ( cp <S2SV_ModStart>, cp, & amt ) == 0 ) { run_err ( ""not <S2SV_blank> a <S2SV_blank> file"" ) ; exit ( 1 ) ; } if ( <S2SV_ModEnd> sscanf ( cp <S2SV_ModStart>, cp, & amt ) == 0 ) { run_err ( ""not <S2SV_blank> a <S2SV_blank> file"" ) ; exit ( 1 ) ; } if ( <S2SV_ModEnd> sscanf ( cp <S2SV_ModStart> ) == 0 ) { run_err ( ""not <S2SV_blank> a <S2SV_blank> file"" ) ; exit ( 1 ) ; } if ( <S2SV_ModEnd> sscanf ( cp <S2SV_ModStart> ) == 0 ) { run_err ( ""not <S2SV_blank> a <S2SV_blank> file"" ) ; exit ( 1 ) ; } if ( <S2SV_ModEnd> sscanf ( cp <S2SV_ModStart>, cp, & amt ) == 0 ) { run_err ( ""not <S2SV_blank> a <S2SV_blank> file"" ) ; exit ( 1 ) ; } if ( <S2SV_ModEnd> sscanf ( cp <S2SV_ModStart> ) == 0 ) { run_err ( ""not <S2SV_blank> a <S2SV_blank> file"" ) ; exit ( 1 ) ; } if ( <S2SV_ModEnd> sscanf ( cp <S2SV_ModStart> ) == 0 ) { run_err ( ""not <S2SV_blank> a <S2SV_blank> file"" ) ; exit ( 1 ) ; }",0
1552,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart> * t, * StartClean <S2SV_ModEnd> ; char * <S2SV_ModStart>, * argbuf <S2SV_ModEnd> ; SetDefaults ( <S2SV_ModStart> ; s = cinput ; while ( * s!= '[' ) s ++ ; t = s ; while ( * t!= ']' ) t ++ ; outpos = outputbuffer ; outpos += sprintf ( outpos, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", s, t, TERMCHAR ) ; if ( * s == '0' && s [ 1 ] == ']' ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf ( outfile, ""%s"", outputbuffer ) ; return ( 0 ) ; } else { fprintf ( stderr, ""%s: <S2SV_blank> Illegal <S2SV_blank> request <S2SV_blank> in <S2SV_blank> identification <S2SV_blank> string <S2SV_blank> [0]: <S2SV_blank> %s\\n"", axohelp, nameobject ) ; } } StartClean = outpos ; nameobject = t",0
1553,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : * ( size_t * ) val = ms -> elf_notes_max ; return 0 ;,1
1554,"<S2SV_ModStart> segs ) { <S2SV_ModEnd> u32 hash, <S2SV_ModStart>, id ; if ( unlikely ( siphash_key_is_zero ( & net -> ipv4. ip_id_key ) ) ) return <S2SV_ModStart> ; hash = siphash_3u32 <S2SV_ModEnd> ( ( __force <S2SV_ModStart> iph -> protocol, & net -> ipv4. ip_id_key <S2SV_ModEnd> ) ; id",0
1555,"<S2SV_ModStart> expr_ty step ; check_attr_id ( obj, & PyId_lower, & tmp ) ; if ( tmp == NULL ) goto failed ; Py_CLEAR ( tmp ) ; lower = NULL ; } if ( exists_not_none ( obj, & PyId_upper ) ) { int res ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( exists_not_none ( obj, & PyId_step ) ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { step = NULL ; } if ( exists_not_none ( obj, & PyId_step, & tmp ) ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { step = NULL ; } if ( exists_not_none ( obj, & PyId_dims,",0
1556,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
1557,"<S2SV_ModStart> ctl -> pw, ""chfn_finger_information"" <S2SV_ModEnd> ) ; printf",0
1558,<S2SV_ModStart> { if ( max_length < sizeof ( struct ieee80211_radiotap_header ) ) return - EINVAL ; if ( <S2SV_ModStart> iterator -> _rtheader + sizeof ( uint32_t ),1
1559,"<S2SV_ModStart> int err ; u32 handle ; <S2SV_ModStart> extack ) ) { err = - EOPNOTSUPP ; goto err_delete ; } handle = knode -> handle ; mask = be32_to_cpu ( knode -> sel -> keys [ 0 ]. mask ) >> tos_off & 0xff ; val = be32_to_cpu ( knode -> sel -> keys [ 0 ]. val ) >> tos_off & 0xff ; if ( handle == knode -> handle ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete <S2SV_ModEnd> ; } } <S2SV_ModStart>! match ) { err = - ENOMEM ; goto err_delete ; } match -> handle = knode -> handle ; match -> band = knode -> res -> classid ; match -> mask = mask ; match -> val = val ; err = nfp_abm_update_band_map ( alink ) ; if ( err ) goto err_delete ;",0
1560,"<S2SV_ModStart> NULL ; } for ( i = src -> curframe + 1 ; i <= dst_state -> curframe ; i ++ ) { free_func_state ( dst_state -> frame [ i ] ) ; dst_state -> frame [ i ] = NULL ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) return - ENOMEM ; dst_state -> frame [ i ] = dst ; } } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) return - ENOMEM ; dst_state -> frame [ i ] = dst ; } dst_state -> frame [ i ] = dst ; }",0
1561,"<S2SV_ModStart> return ; } if ( input <= 0.0 || output <= 0.0 ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Gamma <S2SV_blank> values <S2SV_blank> should <S2SV_blank> be <S2SV_blank> positive"" ) ; RETURN_FALSE ; }",1
1562,"<S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; } if ( global -> pass == 2 ) { if (! stats_open_file ( & stream -> stats, stream -> config. stats_fn, pass ) ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; } else { if (! stats_open_mem ( & stream -> stats, pass ) ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; } if ( global -> passes == 1 ) { if (! stats_open_file ( & stream -> stats, stream -> config. stats_fn, pass ) ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; } else { if (! stats_open_mem ( & stream -> stats, pass ) ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; } <S2SV_ModEnd> stream -> config <S2SV_ModStart>. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> cx_time = 0 ; stream -> nbytes = 0 ; stream -> frames_out = 0 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1563,<S2SV_ModStart> -> lun ) sas_eh_finish_cmd <S2SV_ModEnd> ( cmd ),1
1564,"<S2SV_ModStart>, error ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s.%s"", tmpfile_name, "".desktop"" ) ; g_auto ( GStrv ) groups = NULL ; g_auto ( GStrv ) new_data = NULL ; gsize new_data_len ; g_key_file_load_from_data ( keyfile, data, data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; for ( i = 0 ; i < new_data_len ; i ++ ) { g_assert ( new_data [ i ] == '\\0' ) ; new_data [ i ] = '\\0' ; } g_assert ( new_data [ i ]!= '\\0' ) ; g_assert ( new_data [ i ]!= '\\0' ) ; g_assert ( new_data [ i ]!= '\\0' ) ; g_assert ( new_",0
1565,"<S2SV_ModStart> data_end ) { <S2SV_ModEnd> const int aligned_cols <S2SV_ModStart> tile_col ; const int tile_rows = pbi -> log2_tile_rows ; TileBuffer tile_buffers [ 4 ] [ 1 << 6 ] ; int tile_row, tile_col ; const uint8_t * end = NULL ; vpx_reader <S2SV_ModEnd> r ; assert <S2SV_ModStart> 6 ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> tile_row ) { for ( tile_row = 0 ; tile_col < tile_cols ; ++ tile_col ) { const int last_tile = tile_row == tile_rows - 1 && tile_col == tile_cols - 1 ; const size_t size = get_tile ( data_end, last_tile, & cm -> error, & data ) ; TileBuffer * const buf = & tile_buffers [ tile_row ] [ tile_col ] ; buf -> data = data ; buf -> size = size ; data += size ; } } for ( tile_row = 0 ; tile_col < tile_cols ; ++ tile_row ) { const int col = pbi ->",0
1566,"<S2SV_ModStart> VP9Decoder * const pbi = vpx_memalign ( 32, sizeof ( * pbi ) ) ; VP9_COMMON * const cm = pbi? & pbi -> common : NULL ; if (! pbi ) return NULL ; vpx_zero ( * pbi ) ; if ( setjmp ( cm -> error. jmp ) ) { cm -> error. setjmp = 1 ; vp9_decoder_remove ( pbi ) ; return NULL ; } cm -> error. setjmp = 1 ; vpx_initialize_dec ( ) ; vpx_rtcd ( ) ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; cm -> decoded_key_frame = 0 ; vp9_init_dequantizer ( cm ) ; vp9_loop_filter_init ( cm ) ; cm -> error. setjmp = 0 ; vpx_worker_init ( & pbi -> lf_worker ) ; return pbi ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null",0
1567,"<S2SV_ModStart> { GF_LOG ( GF_LOG_ERROR <S2SV_ModEnd>, GF_LOG_CONTAINER, <S2SV_ModStart> GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" <S2SV_ModEnd> ) ) ; <S2SV_ModStart> -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } <S2SV_ModEnd> return GF_OK ;",0
1568,"<S2SV_ModStart> -> protocol_timeout = g_timeout_add_seconds <S2SV_ModEnd> ( 5,",0
1569,<S2SV_ModStart> -> count ; new_fpl -> user = get_uid ( fpl -> user ) ;,1
1570,<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> -> opt ; rcu_read_lock ( ) ; opt = req_inet -> opt ; <S2SV_ModStart> ( opt == NULL || opt -> opt. cipso ) { rcu_read_unlock ( ) ; return ; } <S2SV_ModEnd> cipso_v4_delopt ( &,0
1571,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> tree2tok ( struct <S2SV_ModStart> { const vpx_tree_index <S2SV_ModEnd> j = tree,0
1572,"<S2SV_ModStart> = VPX_CODEC_OK ; # if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModStart>, img ) ; # endif <S2SV_ModStart> VPX_CODEC_INVALID_PARAM ; } # endif <S2SV_ModStart> VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF | VP8_EFLAG_FORCE_GF | VP8_EFLAG_FORCE_ARF ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP9_ALT_FLAG ; vp9_use_as_reference ( ctx -> cpi, ref ) ; } if ( flags & VP8_EFLAG_NO_UPD_LAST ) upd ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_",0
1573,"<S2SV_ModStart> wqh ) ; init_waitqueue_func_entry ( & ctx -> wait, ctx_wake ) ;",0
1574,"<S2SV_ModStart> ) ; struct mnt_namespace * ns = dest_mnt -> mnt_ns ; struct <S2SV_ModStart> int err ; hlist_for_each_entry ( child, n, & ns -> mnt_mounts, mnt_hash ) { hlist_add_head ( & child -> mnt_hash, & ns -> mnt_mounts ) ; <S2SV_ModStart> goto out ; } if ( parent_path ) { attach_mnt ( source_mnt, parent_path ) ; touch_mnt_namespace ( dest_mnt -> mnt_ns ) ; } else { mnt_set_mountpoint ( dest_mnt, dest_mp, source_mnt ) ; commit_tree ( child, ns ) ; } unlock_mount_hash ( ) ; <S2SV_ModStart> ; out : hlist_for_each_entry_safe ( child, n, & ns -> mnt_mounts, mnt_hash ) { struct mount * q ; hlist_del_init ( & child -> mnt_hash ) ; q = __lookup_mnt_last ( & child -> mnt_parent -> mnt, child -> mnt_mountpoint ) ; commit_tree ( child, q )",0
1575,"<S2SV_ModStart>, & len, 0",1
1576,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = pair_set_epi16 ( ( int16_t ),0
1577,"<S2SV_ModStart> int frame_max_bits ( const RATE_CONTROL * rc, const VP9EncoderConfig <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> ) rc -> avg_frame_bandwidth <S2SV_ModEnd> * ( (",0
1578,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
1579,"<S2SV_ModStart> byte * fout, int maxlen <S2SV_ModStart> NULL ) { if ( maxlen < 1 ) { fprintf ( stderr, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> to <S2SV_blank> send <S2SV_blank> to <S2SV_blank> %d\\n"", ch ) ; exit ( EXIT_FAILURE ) ; } Huff_transmit ( huff, ch <S2SV_ModEnd>, fout ) <S2SV_ModStart> } else { if ( maxlen < 1 ) { fprintf ( stderr, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> to <S2SV_blank> send <S2SV_blank> to <S2SV_blank> %d\\n"", ch ) ; exit ( EXIT_FAILURE ) ; } send ( huff -> loc [ ch ], NULL, fout ) ; } } else { send ( huff -> loc [ ch ], NULL, fout, maxlen <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
1580,"<S2SV_ModStart> encode_superblock ( VP9_COMP * cpi, MACROBLOCK * const x, <S2SV_ModEnd> int mi_row, <S2SV_ModStart> BLOCK_SIZE bsize ) { VP9_COMMON * const cm = & cpi -> common ; MACROBLOCKD * const xd = & x -> e_mbd <S2SV_ModEnd> ; MODE_INFO * <S2SV_ModStart> -> mbmi ; <S2SV_ModEnd> const int mi_width <S2SV_ModStart> ] ; const int mi_height = num_8x8_blocks_wide_lookup [ bsize ] ; const int mi_width = num_8x8_blocks_high_lookup [ bsize ] ; const int mi_width = num_8x8_blocks_high_lookup [ bsize ] ; const int mi_height = num_8x8_blocks_high_lookup [ bsize ] ; x -> skip_recode =! x -> select_txfm_size && mbmi -> sb_type >= BLOCK_8X8 && cpi -> oxcf. allow_skip_recode ; x -> skip_optimize = ctx -> is_coded ; x -> use_lp32x32fdct = cpi -> sf. use_lp32x32fd",0
1581,"<S2SV_ModStart> iad_num ] ; if ( config -> desc. bNumInterfaces < nintf ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, nintf, USB_MAXINTERFACES ) ; nintf = USB_MAXINTERFACES ; } else if ( config -> desc. bNumInterfaces == nintf_orig ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, USB_MAXINTERFACES ) ; nintf = USB_MAXINTERFACES ; }",0
1582,"<S2SV_ModStart> key ) { <S2SV_ModEnd> unsigned char key2 <S2SV_ModStart> ] ; struct crypto_cipher * tfm_des <S2SV_ModEnd> ; str_to_key ( <S2SV_ModStart> 8 ] ; <S2SV_ModEnd> tfm_des = crypto_alloc_cipher <S2SV_ModStart> tfm_des ) ; if ( IS_ERR ( tfm_des ) ) { <S2SV_ModEnd> cifs_dbg ( VFS <S2SV_ModStart> ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; return PTR_ERR ( tfm_des ) ; } crypto_cipher_setkey <S2SV_ModEnd> ( tfm_des, <S2SV_ModStart> 8 ) ; crypto_cipher_encrypt_one ( tfm_des, out, in ) ; crypto_cipher_encrypt_one <S2SV_ModEnd> ( tfm_des, <S2SV_ModStart> tfm_des ) ; crypto_free_cipher <S2SV_ModEnd> ( tfm_des ) <S2SV_ModStart> tfm_des ) ; return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
1583,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1584,"<S2SV_ModStart> uint32_t value ; int position, zeroes, i, j ; char bits [ 65 ] ; if ( ctx -> trace_enable ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } position = get_bits_count ( gbc ) ; zeroes = i = 0 ; while ( 1 ) { if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits1 ( gbc ) ) {",0
1585,<S2SV_ModStart> i > pos + delta <S2SV_ModStart> off + 1 <= pos + delta <S2SV_ModEnd> ) insn ->,1
1586,<S2SV_ModStart> case EXIT_REASON_INVEPT : case EXIT_REASON_INVVPID :,1
1587,"<S2SV_ModStart> else if ( strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> } else if ( strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> } else if ( strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"",",0
1588,"<S2SV_ModStart> -> http_contentlen. ptr = NULL, packet -> http_contentlen.",0
1589,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
1590,"<S2SV_ModStart> ++ r ; if <S2SV_ModEnd> ( pow ( <S2SV_ModStart>, dim ) <= entries ) return - 1 ; if <S2SV_ModEnd> ( ( int <S2SV_ModStart> dim ) ) > entries ) return - 1 <S2SV_ModEnd> ; return r",1
1591,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> x ), MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> ; } } return ( <S2SV_ModStart> dds_info, 8 ) ) <S2SV_ModEnd> ; } <S2SV_null>",0
1592,"<S2SV_ModStart> == 5 ) goto inhdr_error ; if ( IPCB ( skb ) -> opt. optlen == 0 ) { IPCB ( skb ) -> opt. optlen = sizeof ( struct iphdr ) ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> opt. srr ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INHDRERRORS ) ; goto drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> srr ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INHDRERRORS ) ; goto drop ; } <S2SV_ModEnd> return 0 ;",0
1593,"<S2SV_ModStart> ; if (! Z_TYPE_IS_ARRAY ( hkey. type ) ) { zval tmp ; INIT_PZVAL_ARRAY ( & tmp, params ) ; fprintf ( stderr, ""params <S2SV_blank> = <S2SV_blank> "" ) ; zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_hash_update ( params, hkey. str, hkey. len, ( void * ) & tmp, sizeof ( tmp ), ( void * ) & tmp, sizeof ( tmp ) TSRMLS_CC ) ; fprintf ( stderr, ""params <S2SV_blank> = <S2SV_blank> "" ) ; zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_hash_update ( params, hkey. str, hkey. len, ( void * ) & tmp, sizeof ( tmp ), ( void * ) & tmp, sizeof ( tmp ) TSRMLS_CC ) ; fprintf ( stderr",0
1594,"<S2SV_ModStart> length ) { int ret ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) <S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL )",0
1595,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
1596,"<S2SV_ModStart> cfg ) { # ifdef CONFIG_DEBUG_FS cfg -> debug_file = open ( filename, O_WRONLY | O_APPEND | O_CLOEXEC | O_NOFOLLOW | O_NOCTTY ) ; if ( cfg -> debug_file == NULL ) cfg -> debug_file = open ( filename, O_WRONLY | O_APPEND | O_CLOEXEC | O_NOFOLLOW | O_NOCTTY | O_NOCTTY | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW <S2SV_ModStart> ( filename, O_WRONLY | O_APPEND | O_NOFOLLOW | O_NOFOLLOW | O_NOCTTY ) ; if ( cfg -> authpending_file == NULL ) cfg -> authpending_file = open ( filename, O_WRONLY | O_APPEND | O_CLOEXEC | O_NOFOLLOW | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOCTTY_NOFOLLOW | O_NOCTTY_NOFOLLOW | O_NOCTTY_NOCTTY",0
1597,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! f2fs_readonly (,1
1598,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart>. length ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
1599,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; sendClean ( outputbuffer ) ;",1
1600,"<S2SV_ModStart> return FALSE ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_VRB ( AUTODETECT_TAG, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" ) ; return FALSE ; }",0
1601,<S2SV_ModStart> user ) { cleanup_srcu_struct ( & user -> release_barrier ) ;,0
1602,<S2SV_ModStart> ; # endif # if CONFIG_TEMPORAL_DENOISING if ( ( cpi -> oxcf. noise_sensitivity & YV12_DENOISING_HIGHBITDEPTH ) && ( mb_row!= 0 ) ) { # if CONFIG_TEMPORAL_DENOISING if ( ( cpi -> oxcf. noise_sensitivity & YV12_DENOISING_HIGHBITDEPTH ) && ( mb_row!= 0 ) ) { # if CONFIG_TEMPORAL_DENOISING if ( ( cpi -> oxcf. noise_sensitivity & YV12_DENOISING_HIGHBITDEPTH ) && ( mb_row!= 0 ) ) { # if CONFIG_TEMPORAL_DENOISING if ( ( cpi -> oxcf. noise_sensitivity & YV12_DENOISING_HIGHBITDEPTH ) && ( mb_row!= 0 ) ) { # if CONFIG_TEMPORAL_DENOISING if ( ( cpi -> oxcf. noise_sensitivity & YV12_DENOISING_HIGHBITDEPTH ) && ( mb_row,0
1603,<S2SV_ModStart> == ARPHRD_ETHER ) { <S2SV_ModStart> ether_setup ) ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; },1
1604,"<S2SV_ModStart> * data ; struct stream packet = * s ; <S2SV_ModStart> ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } if (",1
1605,"<S2SV_ModStart> -> b_multithreaded_rd ) vpx_de_alloc_temp_buffers <S2SV_ModEnd> ( pbi,",0
1606,<S2SV_ModStart> 0 ) { if ( l -> type == FORM_TEXTAREA ) { if ( l -> prev == NULL ) break ; <S2SV_ModStart> 0 ) { if ( l -> type == FORM_TEXTAREA ) { if ( l -> prev -> type == FORM_TEXTAREA ) { if ( l -> prev -> type == FORM_TEXTAREA ) { if ( l -> prev -> type == FORM_TEXTAREA ) { if ( l -> prev -> type == FORM_TEXTAREA ) { break ; } } else { if ( l -> type == FORM_TEXTAREA ) { if ( l -> prev -> type == FORM_TEXT ) { if ( l -> prev -> type == FORM_TEXT ) { if ( l -> prev -> type == FORM_TEXTAREA ) { if ( l -> prev -> type == FORM_TEXT ) { if ( l -> prev -> type == FORM_TEXT ) { if ( l -> prev -> type == FORM_TEXT ) { if ( l -> prev -> type == FORM_TEXT ) { break ; } } else { if ( l -> type == FORM_TEXT ) { if ( l -> prev -> type == FORM_TEXT ) { if ( l -> prev -> type == FORM_TEXT ) { if ( l,0
1607,<S2SV_ModStart> { if ( ( <S2SV_ModStart> 0 ) { if ( ( xWantedSize + xHeapStructSize ) > xFreeBytesRemaining ) { xWantedSize = 0 ; } else { xWantedSize = 0 <S2SV_ModEnd> ; } } <S2SV_ModStart> 0x00 ) { if ( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) > xFreeBytesRemaining ) { xWantedSize = 0 ; } else { xWantedSize = 0 <S2SV_ModEnd> ; } },0
1608,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1609,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1610,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpDiff ( TIFF <S2SV_ModStart> cc ) ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> stride ) )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""fpDiff"", ""%s"", ""(cc%(bps*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> tmp ) return 0 <S2SV_ModStart> cp -- ) return 1 ;",1
1611,"<S2SV_ModStart> s ) { struct stream packet = * s ; <S2SV_ModStart> int i ; if (! s_check_rem ( s, 5 ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> bitmap <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s, 5 ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> bitmap <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
1612,"<S2SV_ModStart> -> valuelen < sizeof ( * sbp ) ) { error = context -> put_listent ( context, sfe -> flags, sfe -> nameval, 0, ( int ) sfe -> valuelen, & sbp [ nsbuf ] ) ; if ( error ) return error ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; } if (! context -> put_listent ) { error = context -> put_listent ( context, sfe -> flags, sfe -> nameval, 0, ( int ) sfe -> valuelen ) ; if ( context -> put_listent ( context, sfe -> flags, sfe -> nameval, 0, ( int ) sfe -> valuelen ) ; if ( context -> seen_enough ) break ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; } if (! context -> put_listent ) { error = context -> put_listent ( context, sfe -> flags, sfe -> nameval, 0, ( int ) sfe -> valuelen ) ; if ( context -> put_listent ( context, sfe -> flags,",0
1613,"<S2SV_ModStart> = 0 ; if ( msg_len_valid == 0 ) { goto trunc ; } ND_TCHECK ( * tptr, sizeof ( struct olsr_hello ) ) ; hello = ( const struct olsr_hello * ) tptr ; hello_link = ( const struct olsr_hello_link * ) tptr ; hello_link = ( const struct olsr_hello_link * ) tptr ; tc = ( const struct olsr_tc * ) tptr ; hna = ( const struct olsr_hna4 * ) tptr ; hna = ( const struct olsr_hna4 * ) tptr ; tc = ( const struct olsr_hna4 * ) tptr ; hna = ( const struct olsr_hna4 * ) tptr ; tc = ( const struct olsr_tc * ) tptr ; hna = ( const struct olsr_hna4 * ) tptr ; if ( hna!= NULL ) { ND_TCHECK2 ( * tptr, sizeof ( struct olsr_hna4 ) ) ; hna = ( const struct olsr_",0
1614,"<S2SV_ModStart> out ) { uint32 length ; uint32 width ; uint32 bitspersample ; uint32 samplesperpixel ; uint16 <S2SV_ModEnd> input_compression, input_photometric <S2SV_ModStart> uint16 input_compression, input_photometric ; if ( length < ( uint32 ) - 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> image <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short.\\n"", TIFFFileName ( in ) ) ; return FALSE ; } length = ( uint32 ) - 1 ; bitspersample = ( uint32 ) ( bitspersample * 8 ) ; samplesperpixel = ( uint32 ) ( samplesperpixel * 8 ) ; CopyField ( TIFFTAG_BITSPERSAMPLE, bitspersample ) ; CopyField ( TIFFTAG_SAMPLESPERPIXELEL, samplesperpixel ) ; if ( length < ( uint32 ) - 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> image <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short.\\n"", TIFFFileName ( in ) ) ; return FALSE ; }",0
1615,"<S2SV_ModStart> } else { if ( smatch ( option, ""format"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Format <S2SV_blank> option <S2SV_blank> is <S2SV_blank> \'%s\'"", option ) ; return MPR_ERR_BAD_SYNTAX ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Format <S2SV_blank> option <S2SV_blank> is <S2SV_blank> \'%s\'"", option ) ; return MPR_ERR_BAD_SYNTAX ; } } else if ( smatch ( option, ""format"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Format <S2SV_blank> option <S2SV_blank> is <S2SV_blank> \'%s\'"", option ) ; return MPR_ERR_BAD_SYNTAX ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Format <S2SV_blank> option <S2SV_blank> is <S2SV_blank> \'%s\'"", option ) ; return MPR_ERR_BAD_SYNTAX ; } }",0
1616,"<S2SV_ModStart> tx_size, vpx_coeff_stats <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model <S2SV_ModEnd> * coef_probs = <S2SV_ModStart> coef_probs = cpi <S2SV_ModEnd> -> frame_coef_probs [",0
1617,"<S2SV_ModStart> { } ; int len ; <S2SV_ModStart> name ) ; len = strlen ( name ) ; if ( len >= sizeof ( struct termios ) ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> UTF-8 <S2SV_blank> term <S2SV_blank> processing <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if ( len >= sizeof ( struct termios ) ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if ( len >= sizeof ( struct termios ) ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if ( len >= sizeof ( struct termios ) ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", name, len",0
1618,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x80 ; state -> data [ 2 ] = 0x0 ; if ( dvb_usb_generic_rw ( d, state -> data, 3, state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x02 ; state -> data [ 2 ] = 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; state -> data [ 1 ] = 0x83 ; state -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ;",0
1619,<S2SV_ModStart> filp ) { if (! capable ( CAP_SYS_RAWIO ) ) return - EPERM ;,0
1620,"<S2SV_ModStart> * iface, vpx_codec_enc_cfg_t <S2SV_ModEnd> cfg, vpx_codec_flags_t <S2SV_ModStart> VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) && ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) && ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODE",0
1621,"<S2SV_ModStart> int stride, int uv_block_size, <S2SV_ModEnd> int mv_row, <S2SV_ModStart> const kernel = vp9_get_interp_kernel ( xd -> mi [ 0 ] -> mbmi. interp_filter ) ; enum mv_precision mv_precision_uv ; int uv_stride ; if ( uv_block_size == 8 ) { uv_stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q4 ; } else { uv_stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q3 ; } vp9_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, mv_precision_uv, x, y ) ; vp9_build_inter_predictor ( v_mb_ptr, uv_stride, & pred [ 512 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, MV_PRECISION_Q",0
1622,"<S2SV_ModStart> = TRUE ; if ( strlen ( buf ) >= BUFSZ ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> too <S2SV_blank> long"" ) ; return FALSE ; } <S2SV_ModStart> ; } else if ( match_varname ( buf, ""VERSION"", 4 ) || match_varname ( buf, ""VERSION"", 4 ) ) { adjust_prefix ( bufp, VERSIONPREFIX ) ; } else if ( match_varname ( buf, ""VERSION"", 4 ) ) { adjust_prefix ( bufp, VERSIONPREFIX ) ; } else if ( match_varname ( buf, ""VERSION"", 4 ) ) { adjust_prefix ( bufp, VERSIONPREFIX ) ; } else if ( match_varname ( buf, ""BUILDDIR"", 4 ) || match_varname ( buf, ""BUILDS"", 4 ) ) { adjust_prefix ( bufp, BUILDPREFIX ) ; } else if ( match_varname ( buf, ""VERSION"", 4 ) ) { adjust_prefix ( bufp, VERSIONPREFIX ) ; } else if ( match_varname ( buf, ""VERSION"", 4 ) ) { adjust_prefix ( bufp, VERSIONPREFIX ) ;",0
1623,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> cJSON * <S2SV_ModEnd> cJSON_CreateFloatArray ( double <S2SV_ModStart> cJSON_CreateArray ( ) ; if ( count < 0 ) return 0 ; for ( i = 0 ; i < count ; ++ i ) { n = cJSON_CreateFloat ( numbers [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } return a ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1624,"<S2SV_ModStart> tk_status ) ; dprintk ( ""lockd: <S2SV_blank> unlock <S2SV_blank> failed\\n"" ) ; <S2SV_ModEnd> } if (",0
1625,"<S2SV_ModStart> inode ) ; <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct kernel_lb_addr loc <S2SV_ModStart>. extLength && ( bh = udf_read_ptagged ( inode -> i_sb, & iinfo -> i_location, 0, & ident ) ) ) { if ( udf_read_ptagged ( inode -> i_sb, & iinfo -> i_location, 1, & ident ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( udf_read_ptagged ( inode -> i_sb, & iinfo -> i_location, 0, & ident ) ) { if ( ident == TAG_IDENT_FE || ident == TAG_IDENT_EFE ) { memcpy ( & iinfo -> i_location, & loc, sizeof ( struct fileEntry ) ) ; make_bad_inode ( inode ) ; return ; } fe = ( struct fileEntry * ) bh -> b_data ; efe = ( struct extendedFileEntry * )",0
1626,"<S2SV_ModStart>, n ) ; if ( w == NULL ) return 0",1
1627,"<S2SV_ModStart> uint32 num_properties = GETUINT32 <S2SV_ModEnd> ( buf + <S2SV_ModStart> len >> 1 ) ; if (! num_properties ) return NULL ; for ( j = 0 ; j < ( a -> names [ i ]. len >> 1 ) ; j ++ ) { a -> names [ i ]. data [ j ] = 0 ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; } } else { size_t i ; a -> names = CHECKED_XMALLOC ( VarLenData, 1 ) ; copy_guid_from_buf ( a -> guid, buf + idx, len ) ; idx += sizeof ( GUID ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; for ( j = 0 ; j < a -> num_names ; j ++ ) { a -> names [ i ]. data [ j ] = ( buf + idx ) [ j",0
1628,"<S2SV_ModStart> data_end ) { const VP9EncoderConfig <S2SV_ModEnd> * const cm <S2SV_ModStart> int num_workers = MIN ( pbi -> tile_workers, MIN ( pbi -> oxcf. max_threads, tile_cols ) ) ; TileBuffer tile_buffers [ 1 << 6 ] ; int n ; int final_worker = - 1 ; if ( pbi -> num_tile_workers == 0 ) { for ( i = 0 ; i < num_workers ; ++ i ) { VP9Worker * const worker = & pbi -> tile_workers [ i ] ; ++ pbi -> num_tile_workers ; vpx_worker_init ( worker ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data2, vpx_malloc ( sizeof ( TileInfo ) ) ) ; if ( i < num_workers - 1 &&! vp9_worker_reset ( worker ) ) { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Tile <S2SV_blank> decoder <S2SV_blank> thread <S2SV_blank> creation <S2SV_blank> failed"" ) ;",0
1629,"<S2SV_ModStart> * 0x101 ; if ( len < 8 ) { fputc ( ifp, '\\0' ) ; return ; } <S2SV_ModStart> ; switch ( <S2SV_ModEnd> get4 ( ) <S2SV_ModStart> ; break ; # ifdef LIBRAW_LIBRARY_BUILD case 0x524946 : if ( strncasecmp ( model, ""DSLR-A100"", 9 ) ) { fseek ( ifp, 8, SEEK_CUR ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 0 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 1 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 2 ] = get2 ( ) ; break ; # endif break ; # ifdef LIBRAW_LIBRARY_BUILD case 0x524946 : if ( strncasecmp ( model, ""DSLR-A100"", 9 ) ) { fseek ( ifp, 8, SEEK_CUR ) ; imgdata. color. WB_Coeffs",0
1630,<S2SV_ModStart> fanout_mutex ) ; if ( list_empty ( & fanout_list ) ) goto out ; err = - EINVAL ; if ( type == PACKET_FANOUT_LB || type == PACKET_FANOUT_CPU : case PACKET_FANOUT_RND : case PACKET_FANOUT_CBPF : case PACKET_FANOUT_EBPF : return - EINVAL ; if ( ( type_flags & PACKET_FANOUT_FLAG_ROLLOVER ) ) { err = - EINVAL ; goto out ; },0
1631,"<S2SV_ModStart> -> common ; <S2SV_ModEnd> const double base_q <S2SV_ModStart> = SEGMENT_DELTADATA ; if ( cm -> frame_type == KEY_FRAME ) { vp9_enable_segmentation ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; } else { vp9_clear_system_state ( ) ; } for ( i = ENERGY_MIN ; i <= ENERGY_MAX ; i ++ ) { int qindex_delta, segment_rdmult ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; vp9_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vp9_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; segment_rdmult = vp9_compute_rd_mult ( cpi, cm -> base",0
1632,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
1633,"<S2SV_ModStart> ( void ) TIFFGetFieldNone ( in, TIFFTAG_PLANARCONFIG <S2SV_ModEnd>, & shortv <S2SV_ModStart> ( void ) TIFFGetFieldNone ( in, TIFFTAG_ROWSPERSTRIP, & irps ) ; if (! TIFFIsTiled ( out ) ) { if ( bias ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> tiled <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> bias <S2SV_blank> image\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } if (! TIFFIsTiled ( in ) ) { if ( bias ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> tiled <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> rowsperstrip <S2SV_blank> w/bias <S2SV_blank> image\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } } else { uint32 irps = ( uint32 ) - 1L ; TIFFGetField ( in, TIFFTAG_ROWSPERSTRIP, & irps ) ; if (! TIFFIsTiled ( out ) ) { if ( bias ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> tiled <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> bias <S2SV_blank> image\\n",0
1634,<S2SV_ModStart> -> error_code ) { const vpx_codec_err_t * detail = ctx -> base. err_detail ; if ( error -> has_detail ) * detail = error -> detail ; else * detail = NULL ; return error -> error_code ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1635,<S2SV_ModStart> [ i ] && j < sizeof ( buf ),0
1636,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1637,<S2SV_ModStart> : <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1638,"<S2SV_ModStart> ; if ( cpu_has_feature ( X86_FEATURE_ARCH_PERFMON ) && x86_pmu. num_counters > INTEL_MAX_PERFMON_EVENTS ) x86_pmu. num_counters_fixed = MIN ( INTEL_MAX_PERFMON_EVENTS, x86_pmu. num_counters ) ; else if ( x86_pmu. num_counters_fixed == INTEL_MAX_PERFMON_EVENTS ) x86_pmu. num_counters_fixed = MIN ( INTEL_MAX_PERFMON_EVENTS, x86_pmu. num_counters ) ; if ( x86_pmu. num_counters_fixed == MAX ( INTEL_MAX_PERFMON_EVENTS, x86_pmu. num_counters ) ) x86_pmu. num_counters_fixed = MAX ( INTEL_MAX_PERFMON_EVENTS, x86_pmu. num_counters ) ;",0
1639,<S2SV_ModStart> * ps_cur_slice ; pocstruct_t * ps_prev_poc ; pocstruct_t * ps_cur_poc ; <S2SV_ModStart> ps_cur_slice ) ; ps_prev_poc = ps_dec -> ps_prev_poc ; ps_cur_poc = ps_dec -> ps_cur_poc ;,0
1640,<S2SV_ModStart> ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,0
1641,"<S2SV_ModStart> ; krb5_key_data * key_data ; if ( n_key_data == 0 || key_data_in == NULL ) goto cleanup ; key_data = k5calloc ( n_key_data, sizeof ( * key_data ), & err ) ; if ( key_data == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data - 1 ; i ++ ) if ( key_data [ i ]. key_data_kvno!= key_data [ i + 1 ]. key_data_kvno ) num_versions ++ ; ret = ( struct berval * * ) k5calloc ( num_versions + 1, sizeof ( struct berval * ) ) ; if ( ret == NULL ) { err = ENOMEM ; goto cleanup ; } for ( i = 0 ; i < n_key_data - 1 ; i ++ ) if ( key_data [ i ]. key_data_kvno!= key_data [ i + 1 ]. key_data_kvno )",0
1642,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ),0
1643,<S2SV_ModStart> ; if ( task -> ptrace &&! dumpable <S2SV_ModEnd> &&! ptrace_has_cap,0
1644,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x80 ; state -> data [ 2 ] = 0x0 ; if ( dvb_usb_generic_rw ( d, state -> data, 3, state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x02 ; state -> data [ 2 ] = 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; state -> data [ 1 ] = 0x83 ; state -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ;",0
1645,<S2SV_ModStart> int getnum ( <S2SV_ModEnd> const char * <S2SV_ModStart> 0 ; do if ( * * fmt == '\\0' ) break ;,0
1646,"<S2SV_ModStart> ; markold ( g, g -> allgc, g -> survival, g -> reallyold ) ; markold ( g, g -> finobj, g -> finobjrold ) ; atomic ( L ) ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> finobj, g -> finobjrold ) ; g -> finobjrold = g -> finobjold ; g -> finobjold = * psurvival ; g -> allgc = g",0
1647,<S2SV_ModStart> else return - ENODEV <S2SV_ModEnd> ; deb_info (,0
1648,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModStart> ) ; if (! safe_memcmp ( buffer, ssl_request, sizeof ssl_request ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } s_write ( c, c -> local_wfd. fd, ssl_ok, sizeof ssl_ok ) ; return NULL ; } s_read ( c, c -> local_rfd. fd, buffer, sizeof buffer ) ; if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } s_write ( c, c -> local_wfd. fd, ssl_ok, sizeof ssl_ok ) ;",0
1649,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> cib_tls_signon ( cib_t <S2SV_ModStart> -> variant_opaque ; <S2SV_ModEnd> char * server <S2SV_ModStart> = private -> server <S2SV_ModEnd> ; int rc <S2SV_ModStart> ; char * server <S2SV_ModEnd> ; int rc <S2SV_ModStart> = 0 ; connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } bzero ( & hints, sizeof ( struct addrinfo ) ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_p",0
1650,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; cpi -> mb. ss = vpx_calloc ( sizeof ( search_site ), ( MAX_MVSEARCH_STEPS * 8 ) + 1 ) ; cpi_create_common ( & cpi -> mb ) ; memcpy ( cpi -> base_skip_false_prob, vp8cx_base_skip_false_prob, sizeof ( vp8cx_base_skip_false_prob ) ) ; <S2SV_ModStart> = 0 ; cpi -> mb. ss = vpx_calloc ( sizeof ( search_site ), ( MAX_MVSEARCH_STEPS * 8 ) + 1 ) ) ; cpi_create_common ( & cpi -> common ) ; memcpy ( cpi -> base_skip_false_prob, vp8cx_base_skip_false_prob, sizeof ( vp8cx_base_skip_false_prob ) ) ; cpi -> temporal_pattern_counter = 0 ; cpi -> gf_overspend_bits = 0 ; cpi -> non_gf_bitrate_adjustment = 0 ; cpi ->",0
1651,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
1652,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MIN, 1 <S2SV_ModEnd>, regs,",1
1653,"<S2SV_ModStart> ( bp [ 24 ] & 0x0f ) { ND_TCHECK ( bp [ 25 ] & 0x0f ) ; <S2SV_ModStart> ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ]",0
1654,"<S2SV_ModStart>, set_rtrn ) ; switch ( expr -> expr. op ) { case EXPR_ADD : case EXPR_SUBTRACT : case EXPR_SUBTRACT : if ( istreq ( ident, ""true"" ) || istreq ( ident, ""false"" ) || istreq ( ident, ""no"" ) || istreq ( ident, ""on"" ) ) { * set_rtrn = true ; return false ; } else if ( istreq ( ident, ""true"" ) || istreq ( ident, ""on"" ) ) { * set_rtrn = false ; return false ; } } <S2SV_ModStart> case EXPR_UNARY_PLUS : if ( istreq ( ident, ""true"" ) || istreq ( ident, ""true"" ) || istreq ( ident, ""false"" ) || istreq ( ident, ""on"" ) ) { * set_rtrn = true ; return true ; } else if ( istreq ( ident, ""false"" ) || istreq ( ident, ""on"" ) ) { * set_rtrn = false ; return false ; }",0
1655,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1656,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_command karg ; <S2SV_ModEnd> if ( copy_from_user <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command",0
1657,"<S2SV_ModStart> Image * image <S2SV_ModEnd> ; MagickBooleanType status <S2SV_ModStart>, length, padding, value, version, width ; image = DestroyImageList ( image ) ; if ( image == ( Image * ) NULL ) return ( DestroyImageList ( image ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModEnd> height = 0 <S2SV_ModStart> ( buffer, ""#define <S2SV_blank> %32s <S2SV_blank> %u"" <S2SV_ModEnd>, name, <S2SV_ModStart> ( buffer, ""#define <S2SV_blank> %32s <S2SV_blank> %u"" <S2SV_ModEnd>, name, <S2SV_ModStart> ( buffer, ""#define <S2SV_blank> %32s <S2SV_blank> %u"" <S2SV_ModEnd>, name, <S2SV_ModStart> ( buffer, ""#define <S2SV_blank> %32s <S2SV_blank> %u"" <S2SV_ModEnd>, name, <S2SV_ModStart> ( buffer, ""#define <S2SV_blank> %32s <S2SV_blank> %u"" <S2SV_ModEnd>, name, <S2SV_ModStart> ( buffer, ""#define <S2SV_blank> %32s <S2SV_blank> %u"" <S2SV_ModEnd>, name, <S2SV_ModStart> ( buffer, ""#define <S2SV_blank> %32s <S2SV_blank> %u"" <S2SV_ModEnd>, name, <S2SV_ModStart> ( buffer, ""#define <S2SV_blank> %32s <S2SV_blank> %u"" <S2SV_ModEnd>, name, <S2SV_ModStart> ( buffer, ""#define",0
1658,"<S2SV_ModStart> = 0 ; if ( siz -> width > JAS_UINTFAST16_MAX_WIDTH || siz -> height > JAS_UINTFAST16_MAX_HEIGHT ) { jas_eprintf ( ""image <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)\\n"", siz -> width, siz -> height ) ; jas_eprintf ( ""image <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)\\n"", siz -> height, JAS_UINTFAST16_MAX_BANDS ) ; jas_eprintf ( ""image <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)\\n"", JAS_UINTFAST16_MAX_WIDTH, JAS_UINTFAST16_MAX_HEIGHT ) ; return - 1 ; }",0
1659,"<S2SV_ModStart> } if ( chanmode_found ) { length = irc_mode_channel_parse_chanmode ( server, channel, str_modes, current_arg + 1, argument ) ; if ( length < 0 ) { fprintf ( stderr, ""Invalid <S2SV_blank> channel <S2SV_blank> mode: <S2SV_blank> %s\\n"", __func__ ) ; return ; } if ( length < 0 ) { fprintf ( stderr, ""Invalid <S2SV_blank> channel <S2SV_blank> mode: <S2SV_blank> %s\\n"", str_modes, current_arg + 1 ) ; return ; } if ( chanmode_found ) { length = irc_mode_channel_parse_chanmode ( server, channel, str_modes, current_arg + 1, argument ) ; if ( length < 0 ) { fprintf ( stderr, ""Invalid <S2SV_blank> channel <S2SV_blank> mode: <S2SV_blank> %s\\n"", __func__ ) ; return ; } if ( length < 0 ) { fprintf ( stderr, ""Invalid <S2SV_blank> channel <S2SV_blank> mode: <S2SV_blank> %s\\n"", str_modes, current_arg + 1 ) ; return ; } if ( length < 0 ) { fprintf ( stderr, ""Invalid <S2SV_blank> channel <S2SV_blank> mode: <S2SV_blank> %s\\n"",",0
1660,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - 1 ) ; vpx_read_bit ( r ) ;",0
1661,<S2SV_ModStart> ; int is_valid = ( error == GIT_OK ) <S2SV_ModStart> giterr_clear ( ) <S2SV_ModEnd> ; error =,1
1662,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
1663,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx <S2SV_ModStart> ] ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) ++ xd -> counts. high_comp_inter [ ctx ] [ mode ] ; # else if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH",0
1664,"<S2SV_ModStart> } } } eprintf ( ""E01"" ) ;",0
1665,"<S2SV_ModStart>! stream ) { <S2SV_ModEnd> fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" <S2SV_ModStart> fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; } <S2SV_ModEnd> if ( prev <S2SV_ModStart> ; res = vpx_codec_enc_config_default <S2SV_ModEnd> ( global -> <S2SV_ModStart> ( global -> codec -> interface ( ), & stream -> config. cfg, global -> usage ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; stream -> config. stereo_fmt = STEREO_FORMAT_MONO ; } else { vpx_codec_err_t res ; res = vpx_codec_enc_config_default ( global -> codec -> interface ( ), & stream -> config. cfg, global -> usage ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; stream -> config. stereo_fmt = STEREO_FORMAT_NONE ; stream -> config. write_webm = 1 ; } stream -> config. <S2SV_ModEnd> debug = global",0
1666,"<S2SV_ModStart> ) ) ; break ; case ND_OPT_ADVERTISE_INTERVAL : l = ( op -> nd_opt_len << 3 ) - 2 ; print_lladdr ( ndo, cp + 2, l ) ; break ; case ND_OPT_TLV_ADDR : l = ( op -> nd_opt_len << 3 ) - 2 ; print_lladdr ( ndo, cp + 2, l ) ; break ; case ND_OPT_TLV_ADDR : l = ( op -> nd_opt_len << 3 ) - 2 ; print_lladdr ( ndo, cp + 2, l ) ; break ; case ND_OPT_TLV_ADDR : l = ( op -> nd_opt_len << 3 ) - 2 ; print_lladdr ( ndo, cp + 2, l ) ; break ; case ND_OPT_TLV_ADDR : l = ( op -> nd_opt_len << 3 ) - 2 ; print_lladdr ( ndo, cp + 2, l ) ; break ; case ND_OPT_TLV_ADDR : l = ( op -> nd_opt_len << 3 ) - 2",0
1667,<S2SV_ModStart> -> root_node = ( yr_re_root_node * ) yr_malloc ( 1 ) ; if ( * re_ast ) -> root_node == NULL ) { yr_free ( * re_ast ) ; return ERROR_INSUFFICIENT_MEMORY ; },0
1668,"<S2SV_ModStart> ( sk ) ; if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLOUT ; <S2SV_ModStart> { if (! skb_queue_empty ( & sk -> sk_receive_queue ) ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; return mask ; } if ( <S2SV_ModStart> )!= sk ) { sock_poll_wait ( file, & unix_sk ( other ) -> peer_wait, wait ) ; if ( unix_recvq_full ( other ) ) writable = 0 ; } } else { if ( unix_peer ( sk )!= sk ) { sock_poll_wait ( file, & unix_sk ( other ) -> peer_wait, wait ) ; if ( unix_recvq_full ( other ) ) writable = 0 ; } sock_put ( other ) ; } if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; return mask <S2SV_ModEnd> ; } <",0
1669,"<S2SV_ModStart> ) ) ; if ( key -> key -> key!= NULL ) { <S2SV_ModStart>, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", str_c ( path ), error ) ; continue ; } <S2SV_ModStart> { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found, <S2SV_blank> using <S2SV_blank> default <S2SV_blank> value <S2SV_blank> %s"", str_c ( path ), key -> key -> default_value ) ; key -> value = key -> key -> default_value ; } else if ( key -> key -> default_value!= NULL ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB,",0
1670,<S2SV_ModStart> ; if ( skb -> len < sizeof ( struct nlattr ) ) return 0 ; if ( <S2SV_ModStart> -> nla_len > <S2SV_ModEnd> skb -> len <S2SV_ModStart> skb -> len - A,1
1671,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1672,"<S2SV_ModStart> ; stbbr_send ( ""<message <S2SV_blank> type=\'chat\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'stabber@localhost\'>"" <S2SV_ModEnd> ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost/mobile\'>""",1
1673,"<S2SV_ModStart> -> cac_id, serial -> len <S2SV_ModEnd> ) ; SC_FUNC_RETURN",1
1674,<S2SV_ModStart> = 0 ; # if defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ),0
1675,"<S2SV_ModStart> } if ( av1 -> emul_esd -> decoderConfig -> maxBitrate!= av1 -> emul_esd -> decoderConfig -> avgBitrate ) { gf_odf_desc_del ( ( GF_Descriptor * ) av1 -> emul_esd ) ; av1 -> emul_esd -> decoderConfig -> maxBitrate = av1 -> emul_esd -> decoderConfig -> maxBitrate ; av1 -> emul_esd -> decoderConfig -> <S2SV_ModStart> av1_config ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1 -> emul_esd -> decoderConfig ) ; if ( av1_cfg ) { gf_odf_av1_cfg_write ( av1_cfg, & av1 -> av1_config -> config, & av1 -> emul_esd -> decoderConfig -> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1676,"<S2SV_ModStart> { GF_LOG ( GF_LOG_ERROR <S2SV_ModEnd>, GF_LOG_CONTAINER, <S2SV_ModStart> GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" <S2SV_ModEnd> ) ) ; <S2SV_ModStart> -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } <S2SV_ModEnd> return GF_OK ;",0
1677,"<S2SV_ModStart> ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; if ( r < 0 ) { r = - 1 ; break ; }",0
1678,<S2SV_ModStart> dpbSize ) ; if ( dpb -> numRefFrames > MAX_NUM_REF_PICS ) return ( MEMORY_ALLOCATION_ERROR ) ;,0
1679,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> (! sock ||! addr ||! addrlen ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> ; if ( <S2SV_ModEnd> oe_syscall_getpeername_ocall ( & <S2SV_ModStart>, addrlen_in, & addrlen_out <S2SV_ModEnd> )!= OE_OK <S2SV_ModStart> ) ; } if ( addrlen_out > addrlen_in ) OE_RAISE_ERRNO ( OE_EINVAL ) ;",0
1680,,1
1681,"<S2SV_ModStart> FALSE ; } if (! <S2SV_ModStart>, s ) ) return FALSE",1
1682,"<S2SV_ModStart> ipv6_pinfo * np = rcu_dereference_protected ( np -> ipv6_opt, sock_owned_by_user ( sk ) ) <S2SV_ModStart> ; opt = rcu_dereference_protected ( np -> ipv6_opt, sock_owned_by_user ( sk ) ) ; opt_space = rcu_dereference_protected ( np -> ipv6_opt, sock_owned_by_user ( sk ) ) ; if ( opt_space ) txopt_free ( opt_space ) ;",0
1683,"<S2SV_ModStart> ; unsigned int <S2SV_ModEnd> found, upx_success <S2SV_ModStart> ; size_t fsize ; uint32_t valign ; uint32_t <S2SV_ModEnd> hdr_size, j <S2SV_ModStart> j ; } if ( fsize == 0 ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> fsize <S2SV_blank> == <S2SV_blank> 0\\n"" ) ; return CL_ENULLARG ; } <S2SV_ModStart>, j )!= 0 ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> fsize <S2SV_blank> == <S2SV_blank> 0\\n"" ) ; return CL_ENULLARG ; } <S2SV_ModStart>, j )!= 0 ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> fsize <S2SV_blank> == <S2SV_blank> 0\\n"" ) ; return CL_ENULLARG ; } <S2SV_ModStart>, j )!= 0 ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> fsize <S2SV_blank> == <S2SV_blank> 0\\n"" ) ; return CL_ENULLARG ; } <S2SV_ModStart>, j )!= 0 ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> fsize <S2SV_blank> == <S2SV_blank> 0\\n"" ) ; return CL_ENULLARG ; }",0
1684,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> { } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; usleep <S2SV_ModStart> ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; dm9000WriteReg <S2SV_ModStart> ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; }",0
1685,"<S2SV_ModStart> += 4 ; if ( t2p -> tiff_datasize % 4!= 0 ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> %lu <S2SV_blank> bytes <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } <S2SV_ModStart> += 4 ; if ( t2p -> tiff_datasize % 4!= 0 ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> %lu <S2SV_blank> bytes <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; }",0
1686,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",0
1687,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> BYTE a_val ; if (! context ) return FALSE ; <S2SV_ModEnd> rw = ( <S2SV_ModStart> ChromaSubsamplingLevel ; for ( y = 0 ; y < context -> height ; y ++ ) { src = data + ( y - context -> height - 1 ) * scanline ; yplane = context -> priv -> PlaneBuffers [ 0 ] + y * rw ; coplane = context -> priv -> PlaneBuffers [ 1 ] + y * rw ; cgplane = context -> priv -> PlaneBuffers [ 2 ] + y * rw ; aplane = context -> priv -> PlaneBuffers [ 3 ] + y * rw ; coplane = context -> priv -> PlaneBuffers [ 1 ] + y * rw ; coplane = context -> priv -> PlaneBuffers [ 2 ] + y * scanline ; cgplane = context -> priv -> PlaneBuffers [ 3 ] + y * rw ; aplane = context -> priv -> PlaneBuffers [ 3 ] + y * rw ; for ( x = 0 ; x < context -> width ; x,0
1688,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> isofs_read_inode ( struct <S2SV_ModStart> inode ) ; if ( de -> name_len > inode -> i_sb -> s_blocksize - offset ) { printk ( KERN_INFO ""%s: <S2SV_blank> directory <S2SV_blank> name <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", __func__, inode -> i_sb -> s_blocksize - offset ) ; goto fail ; } if ( de_len < 0 ) { printk ( KERN_INFO ""%s: <S2SV_blank> directory <S2SV_blank> record <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", __func__, inode -> i_sb -> s_blocksize - offset ) ; ret = - EIO ; goto fail ; } if ( de_len > inode -> i_sb -> s_blocksize - offset ) { printk ( KERN_INFO ""%s: <S2SV_blank> directory <S2SV_blank> record <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", __func__, inode -> i_sb -> s_blocksize -",0
1689,"<S2SV_ModStart> new_parent ) { <S2SV_ModEnd> __ptrace_link ( child <S2SV_ModStart>, new_parent, current_cred ( ) <S2SV_ModEnd> ) ; }",1
1690,<S2SV_ModStart> -> root_node = ( yr_re_root_node * ) yr_malloc ( 1 ) ; if ( * re_ast ) -> root_node == NULL ) { yr_free ( * re_ast ) ; return ERROR_INSUFFICIENT_MEMORY ; },0
1691,<S2SV_ModStart> pcmk_ok ) { if ( private -> command. session == NULL ) { private -> command. session = crm_new_session ( ) ; } else { private -> command. session = crm_new_session ( ) ; } <S2SV_ModEnd> } if ( <S2SV_ModStart> pcmk_ok ) { if ( private -> command. session == NULL ) { private -> command. session = crm_new_session ( ) ; } else { private -> command. session = crm_new_session ( <S2SV_ModEnd> private -> callback <S2SV_ModStart> callback ) ) ; },0
1692,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
1693,"<S2SV_ModStart> >> 3 } ; int num00, tmp_err, n, sr = 0 ; int new_mv_mode_penalty = 256 ; const int quart_frm = MIN ( cpi -> common. width, cpi -> common. height ) ; while ( ( quart_frm << sr ) < MAX_FULL_PEL_VAL ) ++ sr ; step_param += sr ; further_steps -= sr ; v_fn_ptr. vf = get_block_variance_fn ( bsize ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT",0
1694,"<S2SV_ModStart> { SET_ERRNO ( EPERM, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; } if ( h -> size == 0 ) { SET_ERRNO ( EPERM, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; } if ( h -> addr == NULL ) { SET_ERRNO ( EPERM, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; }",0
1695,<S2SV_ModStart> ; merged -> reqbody_no_files_limit = ( child -> reqbody_no_files_limit == NOT_SET? parent -> reqbody_no_files_limit : child -> reqbody_no_files_limit ; merged ->,0
1696,"<S2SV_ModStart> ( used_address && msg_sys -> msg_name && <S2SV_ModStart> -> name, msg_sys <S2SV_ModEnd> -> msg_name, <S2SV_ModStart> -> msg_namelen ; if ( msg_sys -> msg_name ) <S2SV_ModStart> -> name, msg_sys <S2SV_ModEnd> -> msg_name,",1
1697,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
1698,"<S2SV_ModStart> one, offset <S2SV_ModEnd> ; ssize_t count <S2SV_ModStart> -> rows ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) <S2SV_ModStart> -> columns ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> -> rows ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> -> rows ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> -> rows ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> -> rows ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> -> rows ; if ( number_planes_filled > GetBlobSize ( image ) )",0
1699,"<S2SV_ModStart>!= 0 || ( r = <S2SV_ModEnd> sshbuf_put_u32 ( b <S2SV_ModStart>!= 0 || ( r = <S2SV_ModEnd> sshbuf_put_cstring ( b <S2SV_ModStart> -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 ||",0
1700,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1701,<S2SV_ModStart> cib_client_t * client <S2SV_ModEnd> ; if ( <S2SV_ModStart> num_clients ) ; g_object_unref ( & client -> user ) ; <S2SV_ModStart> client ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1702,"<S2SV_ModStart> * uv ; luaL_checkstack ( g, 1, ""in <S2SV_blank> remarkupvals"" ) ; <S2SV_ModStart> uv ) { luaL_checkstack ( g, 1, ""in <S2SV_blank> remarkupvals"" ) ; <S2SV_ModStart> next ) { luaL_checkstack ( g, 1, ""in <S2SV_blank> remarkupvals"" ) ;",0
1703,<S2SV_ModStart> size ) ; if (! px -> ft ) { return FALSE ; },1
1704,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1705,<S2SV_ModStart> old_type ) ) { if ( d_unhashed ( old ) == d_unhashed ( new ) ) { err = - EPERM ; goto out ; } } else { if ( d_unhashed ( old ) == d_unhashed ( new ) ) { err = - EPERM ; goto out ; } } <S2SV_ModEnd> if ( cleanup_whiteout <S2SV_ModStart> old_type ) ) { if ( new_upperdir == old_dentry_lower ( old ) -> d_inode ) { if ( new_upperdir == new_upperdir ) { err = - EPERM ; goto out ; } } else { if ( new_upperdir == old_upperdir ) { err = - EPERM ; goto out ; } } else { if ( new_type == OVL_TYPE_UPPER ( new_type ) ) { if ( old_type == OVL_TYPE_UPPER ( old_type ) ) { if ( new_upperdir == ovl_dentry_lower ( new ) -> d_inode ) { err = - EPERM ; goto out ; } } else { if ( old_type == OVL_,0
