,raw_predictions,correctly_predicted
0,<S2SV_ModStart> ; if ( n2size < 1 ) <S2SV_ModEnd> { applog (,0
1,<S2SV_ModStart> case EAP_TYPE_TTLS : ND_TCHECK_8BITS ( tptr ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> 2 ) { ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> case EAP_TYPE_TTLS : ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> case EAP_TYPE_8BITS : ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr + 5 ) ;,0
2,<S2SV_ModStart> wmi_id ) ; ret =,0
3,"<S2SV_ModStart> - EOPNOTSUPP ; memset ( & yr, 0, sizeof ( * ) ) ;",0
4,<S2SV_ModStart> prevhdr ) < 0,0
5,"<S2SV_ModStart>, offset ; if ( avio_feof ( f ) ) { index -> item_count = 0 ; av_freep ( & index -> items ) ; return AVERROR_INVALIDDATA ; }",1
6,<S2SV_ModStart> * tpg ; u16 <S2SV_ModEnd> tpgt ; int <S2SV_ModStart> ; if ( kstrtou16 <S2SV_ModEnd> ( name + <S2SV_ModStart> ) || tpgt >= VHOST_SCSI_MAX_TARGET <S2SV_ModEnd> ) return ERR_PTR,1
7,<S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
8,"<S2SV_ModStart> { u32 data <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return ; kvm_read_guest_cached ( vcpu -> kvm, & <S2SV_ModEnd> vcpu -> arch <S2SV_ModStart>. apic -> vapic_cache, & data, sizeof ( u32 ) <S2SV_ModEnd> ) ; apic_set_tpr",1
9,<S2SV_ModStart> src ) ; __switch_to_tm ( src ) ; tm_recheckpoint_new_task ( src ) ;,1
10,<S2SV_ModStart> item ) { <S2SV_ModEnd> c = c <S2SV_ModStart> -> next ; <S2SV_ModEnd> if (!,0
11,"<S2SV_ModStart> ( sb, KERN_ERR,",1
12,"<S2SV_ModStart> ipv6_select_ident ( fptr, ( struct rt6_info * ) skb_dst ( skb )",1
13,"<S2SV_ModStart>, u64 nr <S2SV_ModEnd>, struct perf_sample_data",0
14,<S2SV_ModStart> < INDIRECT_BLOCKS ) { <S2SV_ModStart> ] ) ; } <S2SV_ModEnd> return 0 ;,0
15,"<S2SV_ModStart> int input, tran_low_t input, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> output ) { tran_low_t input, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> output ) { tran_low_t <S2SV_ModEnd> output [ 2 <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> output ) ; tran_low_t <S2SV_ModEnd> ; input [ <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> output ) ; tran_low_t <S2SV_ModEnd> output [ 2 <S2SV_ModStart> + 1 ] = ( tran_low_t ) <S2SV_ModStart> + 1 ] = ( tran_low_t ) <S2SV_ModEnd> ; input [",0
16,<S2SV_ModStart> == 0 ) sanitize_dead_code ( env ) ; if ( ret == 0 ),1
17,"<S2SV_ModStart> int i ; if (! config -> sample_rate ) { strcpy ( wpc -> error_message, ""sample <S2SV_blank> rate <S2SV_blank> cannot <S2SV_blank> be <S2SV_blank> zero!"" ) ; return FALSE ; }",1
18,"<S2SV_ModStart> ; unsigned char sense, * senseptr = NULL ; if ( cgc -> sense ) memcpy ( cgc -> sense, 0, sizeof ( * <S2SV_ModStart> cgc -> sense ) <S2SV_ModEnd> ) ; if",0
19,<S2SV_ModStart> ; # endif # ifdef LIBRAW_LIBEND : # endif,0
20,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> choose_loop_filter_frame ( const <S2SV_ModStart> * const VP9_COMMON * const cm, const MACROBLOCK * const <S2SV_ModStart> const char * const VP9_COMMON * const oxcf = & cpi -> common ; MACROBLOCK_SIZE tx_size = & cpi -> e_mbd ; <S2SV_ModStart> = 1 ; # if CONFIG_VP9_COMMON * const lf_level = & cpi -> common ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. flags & YV12_FLAG_HIGHBITDEPTH if ( cpi -> oxcf. noise_level > MAX_TH ) { vp9_loop_filter_filter_frame_err ( & YV12_FLAG_HIGHBITDEPTH ) ; <S2SV_ModStart> } else { vp9_highbitdepth = 1 ; } # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. noise_mode == KEY_FRAME ) { vp9_err ( cm -> flags & YV12_FLAG_",0
21,"<S2SV_ModStart> offset, offset, 0",0
22,"<S2SV_ModStart> void write_mv ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart>, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart>, vpx_writer <S2SV_ModEnd> ( w,",0
23,<S2SV_ModStart> ) ; return <S2SV_ModEnd> ralg -> seedsize,1
24,<S2SV_ModStart> ; if ( sockaddr_len < sizeof ( struct sockaddr_pppox ) ) return - EINVAL ; if (,1
25,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; } <S2SV_ModStart> ( ) ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; },0
26,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
27,"<S2SV_ModStart> esr ) { siginfo_t info ; void __user * info = ( void __user * ) info ; <S2SV_ModStart>, regs ) ; info = SIGILL ; info. si_errno = SIGILLERR ; info. si_code = SIGILL ; info. si_code = SIGILL ; info. si_addr = SIGILL ; info. si_addr = SIGILL ; info. si_signo",0
28,"<S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart>, length ) ) ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> if ( length < <S2SV_ModEnd> 2SV_null> <S2SV_null>",0
29,"<S2SV_ModStart> intf ) { struct usb_host_interface * <S2SV_ModEnd> alt ; alt <S2SV_ModStart> ; if (! alt ) return - ENODEV <S2SV_ModEnd> ; return usb_set_interface <S2SV_ModStart> ( udev, alt -> <S2SV_ModEnd> desc. bInterfaceNumber <S2SV_ModStart> bInterfaceNumber, alt -> desc. bAlternateSetting",1
30,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> p, int <S2SV_ModStart> = tolen ; int tolen ; <S2SV_ModStart> = 0 ; tolen = - ENAMETOOLONG ; <S2SV_ModStart> = 0 ; tolen ; tolen = tolen ; tolen -= 3 ; <S2SV_ModStart> = '/' ; tolen -- ; if ( tolen > tolen ) return - ENAMETOOLONG ; tolen -= 3 ; <S2SV_ModStart> case 2 : if ( tolen < 2 ) return - ENAMETOOLONG ; <S2SV_ModStart> = '/' ; tolen -= 3 ; <S2SV_ModStart> case 2 : if ( tolen < 2 ) return - ENAMETOOLONG ;",0
31,<S2SV_ModStart> == - 1 || class == NULL,0
32,<S2SV_ModStart> unsigned long flags ; if ( qid > NVMET_NR_QUEUES ) return NULL,1
33,"<S2SV_ModStart> -> bInterval ; <S2SV_ModEnd> interface = usb_info <S2SV_ModStart> ) ) ; if ( retval ) { dev_err ( & interface -> dev, ""Invalid <S2SV_blank> intfdata <S2SV_blank> endpoints\\n"" ) ; retval = - EINVAL ; goto error ; }",0
34,<S2SV_ModStart> < 1 || vstart + vstart < vstart <S2SV_ModEnd> ) { sdb_free,0
35,<S2SV_ModStart> keyring ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
36,<S2SV_ModStart> = create_spnego_ctx ( 1,1
37,"<S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_l2tpip <S2SV_ModEnd> ) ) return <S2SV_ModStart> ; if ( addr -> l2tp_family!= AF_INET <S2SV_ModEnd> ) return - <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> ret = - <S2SV_ModStart> ( sk ) ; if (! sock_flag ( sk, SOCK_ZAPPED ) ) goto out",1
38,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> int flags <S2SV_ModStart> ) { return 0 <S2SV_ModEnd> ; } <S2SV_null>,0
39,"<S2SV_ModStart>, _ ( ""_Cancel"" ), GTK_RESPONSE_OK ) ; gtk_dialog_set_response ( dialog, GTK_RESPONSE_OK <S2SV_ModEnd> ) ; if <S2SV_ModStart>, GTK_RESPONSE_OK ), GTK_RESPONSE_OK <S2SV_ModEnd> ) ; }",0
40,<S2SV_ModStart> char * str <S2SV_ModEnd> ; if (,0
41,<S2SV_ModStart>!= - 1 &&,0
42,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0x60 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> transfer <S2SV_blank> failed."" ) ; mutex_unlock ( & d -> data_mutex ) ; mutex_unlock <S2SV_ModEnd> -> i2c_mutex ) ;",0
43,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
44,,0
45,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horAcc8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
46,<S2SV_ModStart> tsample_t s ; uint16 bps = 0,0
47,"<S2SV_ModStart> ) ; struct hugepage_subpool * spool = ( struct hugepage_subpool <S2SV_ModEnd> * ) page_private <S2SV_ModStart> hugetlb_lock ) ; hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, 1 )",1
48,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) { return AVERROR_EOF ; } if (,1
49,<S2SV_ModStart> goto not_found ; if ( e - p > HOST_NAME_MAX - 1 ) goto not_found ;,0
50,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> bool <S2SV_ModEnd> generic_pipe_buf_get ( struct <S2SV_ModStart> buf ) { return try_get_page <S2SV_ModEnd> ( buf ->,1
51,"<S2SV_ModStart>, cp, ep2, map, nmap ) ; } else cp = ikev1_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) goto trunc ; } if <S2SV_ModStart> < ep2 ) <S2SV_ModEnd> ND_PRINT ( (",1
52,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",0
53,<S2SV_ModStart> ) ; return <S2SV_ModEnd> V_null> <S2SV_null>,0
54,<S2SV_ModStart> config -> pm_max_requests ; fpm_globals. listening_socket = dup ( wp -> listening_socket ),1
55,"<S2SV_ModStart> cpi, const TWO_PASS_PASS * twopass, const FIRSTPASS_ST * const twopass, const TWO_PASS_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> const FIRSTPASS_STATS * const twopass = & twopass -> stats_in <S2SV_ModEnd> ; const FIRSTPASS_ST <S2SV_ModStart> ) goto next_frame <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>",0
56,<S2SV_ModStart> 0 ; } err = handle -> h_err ; <S2SV_ModStart> h_transaction ) { rc <S2SV_ModEnd> = jbd2_journal_stop ( <S2SV_ModStart> ) ; return err? err : rc <S2SV_ModEnd> ; } sb <S2SV_ModStart> t_journal -> j_private <S2SV_ModEnd> ; rc =,1
57,<S2SV_ModStart> out ; } if ( flags & EINVAL ) goto out ;,0
58,<S2SV_ModStart> valuelen ) ; args -> rmtvaluelen = args -> valuelen ;,1
59,<S2SV_ModStart> ; if (!,0
60,"<S2SV_ModStart> 2 ) { ND_TCHECK2 ( * tptr, 2 ) ; <S2SV_ModStart> len - 2 ; if ( len < stlv_len ) goto trunc ; ND_TCHECK2 ( * ( tptr ), stlv_len ) <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ; stlv_len = stlv_len - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ; stlv_len = stlv_len - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ; <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> len = stlv_len <S2SV_ModEnd> ; ND_PRINT (",0
61,"<S2SV_ModStart>, goto end_buf <S2SV_ModEnd> ; if (",0
62,"<S2SV_ModStart> flags ) ; memset ( & ddi, 0, sizeof ( ddi ) ) ;",1
63,<S2SV_ModStart> == 12 && ( <S2SV_ModStart> flags & TH_SYN ),1
64,"<S2SV_ModStart> -> ipc_socket ; int procfd = payload -> procfd ; <S2SV_ModStart> & LXC_ATTACH_LSM ) && init_ctx -> lsm_label <S2SV_ModStart> int on_exec ; <S2SV_ModEnd> on_exec = options <S2SV_ModStart> : 0 ; if ( lsm_set_label_at ( procfd, on_exec, <S2SV_ModEnd> init_ctx -> lsm_label <S2SV_ModStart> init_label ) ; <S2SV_ModEnd> } } <S2SV_null>",0
65,<S2SV_ModStart> ; if (! line <S2SV_ModEnd> ) return 0,0
66,"<S2SV_ModStart> ( header -> biBitCount == 0 ) { fprintf ( stderr, ""Error, <S2SV_blank> invalid <S2SV_blank> biBitCount <S2SV_blank> %d\\n"", 0 ) ; return OPJ_FALSE ; } if ( header ->",1
67,<S2SV_ModStart> NULL ; } sas_probe_devices ( port ) ;,1
68,<S2SV_ModStart> 0 ) { if ( image -> colors < tga_info. colormap_index ) image -> colors = tga_info. colormap_index ;,1
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,"<S2SV_ModStart> ENOBUFS ; } memset ( & line, 0, sizeof ( line ) ) ;",1
71,"<S2SV_ModStart> arg ) { int ret ; ret = scsi_verify_ioctl ( bd, cmd ) ; if ( ret < 0 ) return ret ;",0
72,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
73,<S2SV_ModStart> * ureq ; unsigned <S2SV_ModStart> return - EFAULT ; if ( req_len > ( QETH_BUFSIZE - IPA_PDU_HEADER_SIZE - sizeof ( struct qeth_ipacmd_hdr ) - sizeof ( struct qeth_ipacmd_setadpparms_hdr ) ) ) return - EINVAL,1
74,"<S2SV_ModStart> int m ; if ( n < 0 ) { jas_deprecated ( ""negative <S2SV_blank> count <S2SV_blank> for <S2SV_blank> jas_stream_pad"" ) ; }",1
75,<S2SV_ModStart> j ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ;,0
76,<S2SV_ModStart> av_log ( mxf -> fc,1
77,"<S2SV_ModStart> mntent, path, rootfs",1
78,<S2SV_ModStart> + 10 ; if ( psf -> fileoffset < psf -> filelength ) { <S2SV_ModStart> ; } ; } ;,1
79,"<S2SV_ModStart> -> header_len ; ND_TCHECK ( p [ 0 ] ) ; <S2SV_ModStart> case LS_COOKIE_ID : ND_TCHECK2 ( p [ 0 ], 2 ) ; <S2SV_ModStart> case LS_COOKIE_ID : ND_TCHECK2 ( p [ 0 ], 2 ) ;",0
80,<S2SV_ModStart> NF_STOLEN ; return err == 0? NF_ACCEPT : NF_DROP <S2SV_ModEnd> ; } <S2SV_null>,1
81,"<S2SV_ModStart> * up ; int klen, ulen ; <S2SV_ModStart> rta ) ; klen = <S2SV_ModEnd> xfrm_replay_state_len ( pp <S2SV_ModStart> ( up, ulen ) ; ulen = klen <S2SV_ModStart> ( up, klen ) ; memcpy ( pp, up, sizeof ( up ) ) ; klen = klen <S2SV_ModStart> ; pp = klen <S2SV_ModEnd> ; klen =",0
82,<S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> ; } } io -> io_cleanup = io -> io_cleanup ;,0
83,<S2SV_ModStart> ) ; } return,0
84,"<S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ),",0
85,"<S2SV_ModStart> ( buf = jas_alloc3 ( bufsize, numcols <S2SV_ModEnd>, sizeof (",1
86,"<S2SV_ModStart>, vpx_codec_alg_priv_t * cfg <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ( cfg ) ) <S2SV_ModEnd> ; if (",0
87,"<S2SV_ModStart> size ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""GSO <S2SV_blank> size <S2SV_blank> must <S2SV_blank> be <S2SV_blank> not <S2SV_blank> zero.\\n"" ) ; netbk_fatal_tx_err ( vif",0
88,"<S2SV_ModStart> * object, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void * <S2SV_ModStart> < 0 ) <S2SV_ModEnd> bitmap_pos = ext_index_add_object <S2SV_ModStart> name ) ; <S2SV_ModEnd> bitmap_set ( base",1
89,"<S2SV_ModStart> xfr_cmd, fname <S2SV_ModEnd> ) ; free",1
90,<S2SV_ModStart> mixer ) { snd_usb_mixer_disconnect ( mixer ) ;,1
91,<S2SV_ModStart> ) { struct err * rollover = NULL ; struct <S2SV_ModStart> ->rollover = NULL ; mutex_lock ( & fanout_mutex ) ; err = - EINVAL ; if ( <S2SV_ModEnd> rollover -> num <S2SV_ModStart> ) ) goto out <S2SV_ModEnd> ; err = <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_rollover <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_long <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_long <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return err ;,0
92,<S2SV_ModStart> ; newinet -> inet_opt <S2SV_ModEnd> = NULL ;,0
93,<S2SV_ModStart> ; if ( page ) <S2SV_ModEnd> ) return 0,0
94,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
95,<S2SV_ModStart>!= 0 ) { <S2SV_ModStart> endif } },0
96,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON2 <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC28J60_ECON1_START <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_START <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON2 <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_TXIF <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_ECON2 <S2SV_ModEnd> ) ; }",0
97,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,0
98,<S2SV_ModStart> ; } else <S2SV_ModEnd> } else {,0
99,<S2SV_ModStart> ; if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) <S2SV_ModEnd> { ret =,0
100,<S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ;,1
101,"<S2SV_ModStart> if (! caller_may_see_dir ( fc -> pid, controller, cgroup ) ) { ret = - ENOENT ; goto out ; } if (!",1
102,"<S2SV_ModStart> * cm, vpx_writer <S2SV_ModEnd> * oxcf, <S2SV_ModStart>, INT_MAX ) { # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( oxcf -> y_stride >= 0 ) mb_highbit_width = 0 ; # else ( void ) mb_stride ; # else ( void ) mb_stride <S2SV_ModEnd> * oxcf -> <S2SV_ModStart> * 2 ; # else ( void ) mb_width = INT_MAX_FRAME ; # if CONFIG_VP9_HIGHBITDEPTH if ( oxcf -> y_stride > 0 ) mb_width = 0 ; # endif <S2SV_ModStart> * oxcf -> yv_stride ) vpx_free ( yv_stride ) ; # else if CONFIG_VPX_HIGHBITDEPTH if ( cm -> yv_stride ) vpx_free ( yv_stride ) ; # else ( void ) mb_stride <S2SV_ModEnd> * oxcf -> <S2SV_ModStart> vp9_stride ) ; # else if CONFIG_VP9_HIGHBITDEPTHRESHIGHBITDEPTH if ( oxcf -> yv12 -> y_str",0
103,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return ret ;,0
104,"<S2SV_ModStart> : if (! cap_issubset ( new -> cap_permitted, old -> cap_permitted ) ) bprm -> per_clear |= PER_CLEAR_ON_SETID ; if (",1
105,"<S2SV_ModStart> int error ; struct mb2_cache_entry <S2SV_ModStart> bh ) { <S2SV_ModEnd> int error ; <S2SV_ModStart> ) ) { <S2SV_ModEnd> int error ; <S2SV_ModStart> error ; } mb_cache_entry_free ( bh ) ; <S2SV_ModStart> error ; } mb2_cache_entry_delete <S2SV_ModEnd> ( bh, <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null>",0
106,<S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> static,0
107,<S2SV_ModStart> tf = ( <S2SV_ModEnd> luaY_parser ) (,1
108,<S2SV_ModStart> ; int err ; if ( protocol < 0 || protocol >= IPPROTO_MAX ) return - EINVAL,1
109,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> opt.",1
110,"<S2SV_ModStart> ; dl = kzalloc <S2SV_ModEnd> ( size,",1
111,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static u_int <S2SV_ModEnd> rpki_rpki_rtr ( const <S2SV_ModStart> length ) { ND_TCHECK_8BITS ( tptr, sizeof ( * tptr ) ) ; <S2SV_ModStart> * tptr ; ND_TCHECK_8BITS ( tptr, sizeof ( * tptr ) ) ; <S2SV_ModStart> pdu ) { ND_TCHECK_8BITS ( tptr, sizeof ( tptr ) ) ; ND_TCHECK_16BITS ( tptr ) ; <S2SV_ModStart> * tptr, len, len <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ) ) ; ND_PRINT ( ( ndo, ""%s"", ""(%u <S2SV_blank> %u)"", len ) ) ; if ( len < sizeof ( rpki_rpdu ) ) { ND_PRINT ( ( ndo, ""(%u <S2SV_blank> == <S2SV_blank> %u)"", len ) ) ) goto trunc ; } ND_PRINT ( ( ndo, ""(%u)"", len, sizeof ( rpki_rpki_rtr_pdu ) ) ) ; ND_PRINT ( ( ndo, ""(%u",0
113,"<S2SV_ModStart> ; int n <S2SV_ModEnd> ; skb -> <S2SV_ModStart> rose_facilities_struct ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> data + ROSE_CALL_REQ_FACILITIES_OFF, skb -> len - ROSE_CALL_REQ_FACILITIES_OFF, <S2SV_ModEnd> & facilities )",1
114,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr,1
115,<S2SV_ModStart> ; if ( ( char * ),0
116,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; } ret",0
117,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; int ret <S2SV_ModStart> ) ; } o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> cl_nodes_lock ) ; o2nm_unlock_subsystem ( ) ;,1
118,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; break",1
119,,0
120,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TPM_RC_RC ( <S2SV_ModEnd> tpm2SV_null> static <S2SV_ModStart> return TPM_RC_RC ) ; <S2SV_ModEnd> return TPM_RC_RC ( <S2SV_ModStart> ) ; } if (! md ) { LOG_ERR ( ""Algorithm <S2SV_blank> error: <S2SV_blank> %s"", hashAlg -> hashAlg ) ; HMAC_init_init ( & ctx ) ; HMAC_init ( & ctx ) ; if (! md ) { LOG_ERR ( ""HMAC <S2SV_blank> %s"", NULL ) ; return TPM_ERROR_RC_MEMORY ; } HMAC_init ( & md, hashAlg ) ; if (! md ) { LOG_ERR ( ""HMAC <S2SV_blank> not <S2SV_blank> error: <S2SV_blank> %s"", HMAC_init_init ( & ctx ) ; return TPM_RC_RC_MEMORY ; } HMAC_init ( & ctx ) ; int rc = TPM_RC_RC_DIGEST ; if (! md ) { LOG_ERR ( ""HMAC <S2SV_blank>",0
121,"<S2SV_ModStart> inmem )? jas_stream_memopen2 <S2SV_ModEnd> ( 0,",0
122,<S2SV_ModStart> s ) { if ( s == 0 ) return ( ( void * ) NULL ) ;,1
123,<S2SV_ModStart> ; if ( WARN_ON_ONCE (! ib_safe_file_access ( fp ) ) ) return - EACCES ; if (,1
124,"<S2SV_ModStart> ""MemoryAllocationFailed"" ) ; ( void ) ResetMagickMemory ( BImgBuff, 0, ldblk * sizeof ( double ) ) ;",1
125,<S2SV_ModStart> ( peer ) peer = maybe_get_net <S2SV_ModEnd> ( peer ),1
126,<S2SV_ModStart> } while ( ( i < ( int ) header_buf_used ) && ( <S2SV_ModStart> ] == '\\n' ),1
127,<S2SV_ModStart> m_family ) ; if ( proto == LLDP_MGMT_ADDR_NONE ) continue <S2SV_ModEnd> ; if (,1
128,"<S2SV_ModStart>, 1, <S2SV_ModEnd> ) ; if",0
129,<S2SV_ModStart> default_auto_asconf ) { spin_lock ( & sock_net ( sk ) -> sctp. addr_wq_lock ) ; <S2SV_ModStart> do_auto_asconf = 1 ; spin_unlock ( & sock_net ( sk ) -> sctp. addr_wq_lock ) <S2SV_ModStart> ; } else { <S2SV_ModStart> = 0 ; },1
130,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> profile ) { <S2SV_ModStart> ) { if ( s -> avctx -> profile == AV_LOG_ERROR * s -> avctx ) { vpx_log ( s -> avctx, ""invalid <S2SV_blank> profile\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> S2SV_null> <S2SV_null>",0
131,"<S2SV_ModStart> read ) { mpt_readend ( mpt -> dev, mpt -> dev, 0 <S2SV_ModEnd> ) ; if",0
132,<S2SV_ModStart> rule ) ; if (! entry -> lsm [ lsm_rule ]. rule ) return - EINVAL ;,1
133,<S2SV_ModStart> file ) ; <S2SV_ModEnd> file_free ( file,1
134,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
135,<S2SV_ModStart>,0
136,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> r_rcu32 ( struct <S2SV_ModStart> hdr_len ) { struct xdr_len * xdr ; unsigned int ret ; <S2SV_ModStart> - 1 ; unsigned int ret ; <S2SV_ModStart> ; if ( rdr_len > ( xdr_len ) || xdr_len > ( xdr_len ) ) return - EINVAL ; <S2SV_ModEnd> ret = xdr_len <S2SV_ModStart> - EINVAL ; if ( xdr_len ) <S2SV_ModEnd> return 0 ;,0
137,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,1
138,<S2SV_ModStart> ; while ( ( i < to_read ) && <S2SV_ModStart>!= 0 ) <S2SV_ModEnd> ) { i,1
139,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
140,<S2SV_ModStart> [ plane ] && in -> linesize [ plane ],1
141,"<S2SV_ModStart> ( szFileName, pszFileName, <S2SV_ModStart> ) - 5 <S2SV_ModEnd> ) ; }",1
142,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (,0
143,<S2SV_ModStart> >> 2 ; if ( q + o >= e ) goto out ;,0
144,"<S2SV_ModStart> __be32 new_saddr ; struct ip_options_rcu * inet_opt ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. srr ) daddr = inet_opt -> opt. <S2SV_ModEnd> faddr ; rt",1
145,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
146,"<S2SV_ModStart> return ; } if ( len < sizeof ( struct eigrp_common_header ) ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( len < sizeof ( struct eigrp_common_header ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short, <S2SV_blank> < <S2SV_blank> %u)"", ( ndo, sizeof ( struct eigrp_common_header ) ) ) ) ; return ; }",0
147,<S2SV_ModStart> = addr ; <S2SV_ModEnd> if ( addr,0
148,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int res =,0
149,"<S2SV_ModStart>, '/' ) ; if ( ptr == NULL ) return ( ENOENT ) ; ptr ++ <S2SV_ModEnd> ; rw_exit (",1
150,<S2SV_ModStart> |= EXT4_EXT_MARK_UNINIT2 ; if ( flags & EXT4_GET_BLOCKS_CONVERT ) split_flag |= EXT4_EXT_DATA_VALID2 ;,1
151,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; } ret",0
152,<S2SV_ModStart> NULL ) ; <S2SV_ModEnd> } else if,0
153,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ), & final ) ; rcu_read_unlock ( <S2SV_ModEnd> ) ; dst",1
154,<S2SV_ModStart> = 0.0 ; uint16 <S2SV_ModEnd> buff = 0,0
155,<S2SV_ModStart> arg ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> static <S2SV_ModStart> argv_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> argv_null> <S2SV_null> <S2SV_null>,0
156,<S2SV_ModStart> options. disable_forwarding ||! use_privsep,1
157,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
158,"<S2SV_ModStart> ) ; } if ( ( ( MagickSizeType ) image -> columns * image -> rows ) > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ;",1
159,"<S2SV_ModStart> errout ; } <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart>. value = ""xxxx"" ; <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart> -> gr_ctx. length = 4 <S2SV_ModEnd> ; gr ->",1
160,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> out ; } ext_size = sizeof ( EXT4_I ( inode ) -> i_data ) ; <S2SV_ModStart> -> i_data, ext_size ) ; memset ( bh -> b_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size <S2SV_ModEnd> ) ; neh",1
161,<S2SV_ModStart> -> c ; <S2SV_ModEnd> if ( c <S2SV_ModStart> == NULL ) return 0,0
162,<S2SV_ModStart> ; int ret ; if ( current_chrooted ( ) ) return - EPERM,1
163,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
164,<S2SV_ModStart> c -> nreslevels <= <S2SV_ModEnd> s -> reduction_factor,0
165,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
166,<S2SV_ModStart> ; bool is_drop_n_account = false ; bool do_vnet <S2SV_ModStart> -> has_vnet_hdr ) { <S2SV_ModStart> virtio_net_hdr ) ; do_vnet = false ; <S2SV_ModStart> -> do_vnet = false ; do_vnet = false ; do_vnet <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> do_vnet <S2SV_ModEnd> ) { if,0
167,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> sctp_auth_asoc_init_active_key ( asoc,1
168,<S2SV_ModStart> return false ; if ( ndp_msg_type_info ( msg_type ) -> addrto_validate ) return ndp_msg_type_type_type_type_info ( msg_type ) -> addrto_validate ) ; else,0
169,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> lsm_set_label_at ( int lsm_labelfd <S2SV_ModEnd>, int lsm_label <S2SV_ModStart> = - 1 <S2SV_ModEnd> ; int lsm_label <S2SV_ModStart> = - 1 <S2SV_ModEnd> ; int lsm_label <S2SV_ModStart> = 0 ; int lsm_labelfd = - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) return 0 <S2SV_ModEnd> ; out :",0
170,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
171,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
172,"<S2SV_ModStart> cpi, const VP9_COMP * cpi <S2SV_ModEnd> ) { const <S2SV_ModStart> = & cpi -> twopass. gf_group <S2SV_ModEnd> ; if ( <S2SV_ModStart> = 0 ; if ( cpi -> oxcf. gf_group. gf_group. gf_group!= cpi -> twopass. gf_group ) { cpi -> gf_group. gf_group. gf_group = & cpi -> gf_group. gf_group. gf_group. gf_group ; return ; } <S2SV_ModEnd> if ( cpi",0
173,"<S2SV_ModStart> } num ++ ; if ( num > MaxAllocSize / ITEMSIZE ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> levels <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", num, ( int ) ( MaxAllocSize / ITEMSIZE ) ) ) )",1
174,"<S2SV_ModStart> header, struct mb2_cache_entry <S2SV_ModEnd> * * pce <S2SV_ModStart> ) ; struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache = <S2SV_ModStart> header ) ; ce = mb2_cache_entry_find_first <S2SV_ModEnd> ( ext4_mb_cache, <S2SV_ModStart> ( ext4_mb_cache,",0
175,"<S2SV_ModStart> { gint64 offset <S2SV_ModEnd> ; char line <S2SV_ModStart> = offset ; return parse_cosine_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart> -> phdr, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart> wth -> frame_buffer, line",1
176,<S2SV_ModStart> = line_end ; <S2SV_ModEnd> error = add_push_report_pkt,1
177,<S2SV_ModStart> if ( left == 0 && extend ) return 0 ; if ( left,1
178,<S2SV_ModStart> < INDIRECT_BLOCKS ) { <S2SV_ModStart> ] ) ; } <S2SV_ModEnd> return 0 ;,0
179,<S2SV_ModStart> size_t ) ldblk + 1,0
180,"<S2SV_ModStart> * hdr ; memset ( hdr, 0, sizeof ( hdr ) ) ;",0
181,<S2SV_ModStart> int i ; jas_uchar <S2SV_ModEnd> bufsizeof ( buf,0
182,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
183,"<S2SV_ModStart> number_colormaps, number_planes, number_planes_filled <S2SV_ModStart> -> rows ; number_planes_filled = ( number_planes + 1 ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
184,<S2SV_ModStart> DQUOT_LIMITS_ENABLED ) ; if ( sbi -> s_mb_cache ) { ext2_xattr_destroy_cache ( sbi -> s_mb_cache ) ; sbi -> s_mb_cache = NULL ; } <S2SV_ModEnd> if (!,1
185,<S2SV_ModStart> ; return ; } <S2SV_ModEnd> if (!,0
186,"<S2SV_ModStart> ""setregid"" ) ; <S2SV_ModEnd> char * arg <S2SV_ModStart> 0 ] = ""/bin/sh"" <S2SV_ModEnd> ; arg [",1
187,<S2SV_ModStart> node ) { if ( node -> nd_item. ci_parent ) <S2SV_ModStart> ci_parent ) ; else return NULL ;,1
188,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { int <S2SV_ModStart>, fmode, fmode <S2SV_ModEnd> ) ; fmode",0
189,<S2SV_ModStart> ( pb ) ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA,1
190,<S2SV_ModStart> >> 2 ; if ( q + o >= e ) goto out ;,0
191,<S2SV_ModStart> protostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> cryptostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> timingstats ) ; <S2SV_ModEnd> step_callback = &,1
192,"<S2SV_ModStart> * tmpname, fd = NULL <S2SV_ModEnd> ) ; if",0
193,<S2SV_ModStart> prev ) ; n -> mounts += n -> pending_mounts ; n -> pending_mounts = 0 ;,1
194,"<S2SV_ModStart> ; savesegment ( fs, fs,",0
195,<S2SV_ModStart> dd ) ; <S2SV_ModEnd> } } <S2SV_null>,1
196,<S2SV_ModStart> 1 ) ; if ( ( IHEVCD_PARAMET_BITDEPTH ) > MAX_SUCCESS ) { return IHEVCD_SUCCESS ; },0
197,<S2SV_ModStart> 1u << DB_VECTOR ) | ( 1u << AC_VECTOR,1
198,"<S2SV_ModStart> sfsname ) { stringlen = stringlen ; <S2SV_ModStart>, sfsname, stringlen <S2SV_ModEnd> ) ; temp",0
199,"<S2SV_ModStart> unsigned int flags, struct rt6_info * rt <S2SV_ModStart> ( & fhdr, rt",1
200,<S2SV_ModStart> ( res ) goto err_add_port <S2SV_ModEnd> ; res = <S2SV_ModStart> port ) ; err_add_port : hsr_del_node ( & hsr -> self_node_db ) ;,1
201,<S2SV_ModStart> ; if ( cmd == NULL ||,0
202,<S2SV_ModStart> void vp9_buffer_variance ( const VP9_COMMON * const td <S2SV_ModEnd> const MACROBLOCKD * const <S2SV_ModStart> const MACROBLOCKD * const x = vpx_buffer <S2SV_ModEnd> ( x -> <S2SV_ModStart> const char * src <S2SV_ModEnd> ) { const <S2SV_ModStart> int src = vp9_buffer <S2SV_ModEnd> ; const uint16,0
203,<S2SV_ModStart> ; if (! p -> iov_base ) return 0,0
204,"<S2SV_ModStart> <S2SV_null> static inline int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> dst ) { return assign_eip_far ( ctxt, dst, ctxt -> mode == X86EMUL_MODE_PROT64 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",1
205,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
206,"<S2SV_ModStart> ; remaining = tvb_reported_length_remaining <S2SV_ModEnd> ( tvb,",1
207,"<S2SV_ModStart> inode -> i_dio_read_lock, flags <S2SV_ModEnd> ) ; if",0
208,<S2SV_ModStart> return rc ; <S2SV_ModEnd> copied = skb,1
209,<S2SV_ModStart> ; if ( strlen ( filename ) >= 0 ||,0
210,<S2SV_ModStart> ; if ( pmc_overflow ( val ) <S2SV_ModEnd> ) write_pmc (,1
211,"<S2SV_ModStart> ( * b + len, * avail - len <S2SV_ModEnd>, nl )",1
212,"<S2SV_ModStart> char * o_name, const char * * str <S2SV_ModStart>, o_name, L_INVAL_NOFOLLOW",0
213,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
214,"<S2SV_ModStart> string ) ) i ++, <S2SV_ModEnd> c = c",0
215,"<S2SV_ModStart> == 0 ) mark_key_instantiated ( key, 0 <S2SV_ModEnd> ) ; up_write",1
216,<S2SV_ModStart> <= * len && plen > 0,1
217,<S2SV_ModStart> ; args. rmtvaluelen = valuelen ; args.,1
218,<S2SV_ModStart> ; if ( <S2SV_ModEnd> timeout == NULL <S2SV_ModStart> ; if ( compat_get_timespec <S2SV_ModEnd> ( & ktspec <S2SV_ModStart> > 0 && compat_put_timespec <S2SV_ModEnd> ( & ktspec,1
219,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
220,<S2SV_ModStart> ndev ) ; <S2SV_ModEnd> assert ( skb <S2SV_ModStart> q_num ) ; return <S2SV_ModEnd> hns_nic_net_xmit_hw ( ndev <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
221,<S2SV_ModStart> |= MSG_TRUNC ; <S2SV_ModEnd> lock_sock ( sk,1
222,<S2SV_ModStart> } if ( <S2SV_ModEnd> udp_specified && settings,1
223,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
224,,0
225,<S2SV_ModStart> found = 0 <S2SV_ModEnd> ; const char <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( found,1
226,"<S2SV_ModStart> int validate_event ( struct pmu * pmu, <S2SV_ModStart> arm_pmu * armpmu <S2SV_ModEnd> ; struct hw_perf_event <S2SV_ModStart> -> pmu!= pmu ) return 0 ; if ( event -> pmu!=",0
227,"<S2SV_ModStart> bool new_idmap_permitted ( const struct file * file, <S2SV_ModStart>, cap_setid ) && file_ns_capable ( file, ns -> parent, cap_setid )",1
228,<S2SV_ModStart> j ++ ) { if ( a -> type == szMAPI_BINARY ) <S2SV_ModStart> ) ; } },1
229,"<S2SV_ModStart> hx ; u8 * buf <S2SV_ModEnd> ; int ret <S2SV_ModStart> = 0 ; buf = kmalloc ( sizeof ( * hx ), GFP_KERNEL ) ; if (! buf ) return - ENOMEM ; kfree ( buf <S2SV_ModEnd>, 1 ) <S2SV_ModStart> ; kfree ( buf <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; kfree ( buf <S2SV_ModEnd>, 1 )",0
230,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) ptr ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } ptr = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } ptr ++ ; ptr ++ ; length -= 2 <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> ) ) ; if ( ptr < 2 ) { ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> long"" ) ) ) ; return ; }",0
231,"<S2SV_ModStart> princ ) &&! data_eq_string ( * realm, <S2SV_ModEnd> princ -> realm",0
232,<S2SV_ModStart> ; if ( shader_rec_offset < args -> bin_cl_size ||,1
233,<S2SV_ModStart> endif # if HAVE_LZMA_H <S2SV_ModEnd> && HAVE_LIBLZMA if,1
234,<S2SV_ModStart> vma -> vm_file ) ; down_read ( & EXT4_I ( inode ) -> i_mmap_sem <S2SV_ModStart> ; out : up_read ( & EXT4_I ( inode ) -> i_mmap_sem ) ;,1
235,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
236,<S2SV_ModStart> arg ) { char ch = * arg ; switch ( ch <S2SV_ModEnd> ) { case,0
237,"<S2SV_ModStart> && nmap ) <S2SV_ModEnd> cp = ikev1_attrmap_print <S2SV_ModStart>, cp, ep2, map, nmap ) ; else cp = ikev1_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) goto trunc ; } if <S2SV_ModStart> < ep2 ) <S2SV_ModEnd> ND_PRINT ( (",1
238,<S2SV_ModStart> } <S2SV_null> <S2SV_null> <S2SV_null> static,0
239,<S2SV_ModStart> if ( ( skb_mac_header <S2SV_ModEnd> ( skb ) <S2SV_ModStart> skb ) < skb -> head +,1
240,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
241,<S2SV_ModStart>. val =!! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ; <S2SV_ModStart>. val =!! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ;,1
242,<S2SV_ModStart> & RCV_SHUTDOWN ) return 0 ; <S2SV_ModEnd> return err ; <S2SV_ModStart> msg_namelen ) ; <S2SV_ModEnd> } skb_free_datagram (,1
243,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
244,"<S2SV_ModStart> const buffers [ 3 <S2SV_ModEnd> ] = { <S2SV_ModStart> src -> vpx_buffer <S2SV_ModEnd> * stride, <S2SV_ModStart> src, int stride <S2SV_ModEnd> ) ; int",0
245,"<S2SV_ModStart>, j ; * md_get_name ( & <S2SV_ModEnd> md -> issuer_name <S2SV_ModStart> goto cleanup ; ret = rfc2253_name <S2SV_ModEnd> ( X509_get_subject_name ( <S2SV_ModStart> cert ), & <S2SV_ModEnd> md -> issuer_dn <S2SV_ModStart> md -> subject_name <S2SV_ModEnd> ) ; if",0
246,<S2SV_ModStart> (! npages || base_gfn!= old. base_gfn,1
247,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ru,1
248,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
249,"<S2SV_ModStart> * ni ; unsigned long j ; ND_TCHECK ( rp -> rip6_left ) ; <S2SV_ModStart> ni ) { ND_TCHECK ( rp -> rip6_nets ) ; length_left = sizeof ( struct rip6 ) - sizeof ( struct rip6 ) ) ; <S2SV_ModStart> ni ) ; length_left ) ; if ( length_left == 0 ) goto trunc ; ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %u)"", length_left ) ) goto trunc ; } ND_TCHECK ( rp -> rip6_nets ) ; length_left = length_left <S2SV_ModEnd> ; ND_TCHECK ( <S2SV_ModStart> ni ) ; if ( length_left!= 0 ) goto trunc ; length_left ) { ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %u]: <S2SV_blank> %u"", j, length_left ) ) ; if ( length_left!= 0 ) goto trunc ; } ND_TCHECK ( * sizeof ( rp -> rip6_nets ) length_left ) { ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %u"", length <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ni ) ; length_left <S2SV_ModEnd>",0
250,<S2SV_ModStart> < 0 ) goto error ; <S2SV_ModEnd> goto set ;,1
251,<S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( cpi ->,0
252,"<S2SV_ModStart> argc ++ ; retval = bprm_change_interp ( iname, bprm ) ; if ( retval < 0 ) goto _error <S2SV_ModEnd> ; interp_file =",1
253,<S2SV_ModStart> ; int iSrc <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; } } <S2SV_ModEnd> res -> ContribRow <S2SV_ModStart> u ]. Left = iLeft ; res -> ContribRow [ u ]. Right = iRight ; for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ].,1
254,"<S2SV_ModStart> user -> user, false",0
255,"<S2SV_ModStart> Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; return ; } if (! COM_CompareExtension ( filename, "".cfg"" ) ) { Com_Printf ( ""Com_WriteConfig_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".cfg\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n""",1
256,<S2SV_ModStart> data ) { size_t <S2SV_ModEnd> len = 0,0
257,"<S2SV_ModStart> ( mobj ) { size_t granularity = BIT ( tee_mm_sec_ddr. shift ) ; <S2SV_ModStart>, 0, ROUNDUP ( size, granularity ) ) ; } <S2SV_ModEnd> return mobj ;",1
258,<S2SV_ModStart> -> it_overrun += 1LL <S2SV_ModEnd> << i ;,1
259,"<S2SV_ModStart>, n_async_async_async ) ; int <S2SV_ModEnd> is_async_async_async_async ( const <S2SV_ModStart> ct_async ) { <S2SV_ModEnd> if (! <S2SV_ModStart>, CHILD ( n, 1 <S2SV_ModEnd> ) ) == <S2SV_ModStart>, n, 1 <S2SV_ModEnd> ) ; CHILD",0
260,<S2SV_ModStart> src ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
261,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_row, const VP9_COMMON * const MACROBLOCK * const xd = & xd -> mbmi_ext ; const MACROBLOCK * xd = & xd -> mi [ 0 ] -> mbmi. mbmi. sbmi ; const int bsize = xd -> mi [ 0 ]. mbmi ; const int xd = xd -> mi_cols + mi -> mi [ 0 ]. mbmi -> mi [ 0 ]. mbmi ; const PREDICTION_MODE <S2SV_ModEnd> y = mi <S2SV_ModStart> cm -> mbmi <S2SV_ModEnd> ; const PREDICTION_MODE <S2SV_ModStart> MODE_INFO * const PREDICTION_MODE <S2SV_ModEnd> y = &",0
262,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; saddr,1
263,"<S2SV_ModStart>, r -> qiov. size <S2SV_ModEnd> ) ; n <S2SV_ModStart> = r -> qiov. size <S2SV_ModEnd> / 512 ; <S2SV_ModStart>, r -> qiov. size <S2SV_ModEnd> ) ; }",1
264,<S2SV_ModStart> if ( cs >= <S2SV_ModEnd> CQSPI_MAX_CHIPSELECT ) {,1
265,<S2SV_ModStart> N1 ) { int i ; <S2SV_ModStart> ) ) ; } <S2SV_ModEnd> if (!,0
266,<S2SV_ModStart> ) break ; if ( l > ll ) l = ll ;,1
267,<S2SV_ModStart> out ; } } if ( free < 0 ) { err = - ENOMEM ; goto out ;,1
268,<S2SV_ModStart> >= 0 && <S2SV_ModEnd> ND_TTEST ( * <S2SV_ModStart> < ie && <S2SV_ModEnd> ND_TTEST ( *,0
269,<S2SV_ModStart> prev_rq ) <S2SV_ModEnd> return error ;,0
270,"<S2SV_ModStart> ret ; uint8_t * buffer ; uint8_t value ; buffer = kmalloc ( 1, GFP_KERNEL ) ; if (! buffer ) return - ENOMEM <S2SV_ModEnd> ; dev_dbg ( <S2SV_ModStart>, reg, buffer <S2SV_ModEnd>, 1, <S2SV_ModStart> 1000 ) ; if ( <S2SV_ModEnd> ret >= 0 <S2SV_ModStart> ret >= 0 ) { value = buffer [ 0 ] ; return <S2SV_ModEnd> ret ; }",0
271,<S2SV_ModStart> * pTab ; sqlite3_int64 <S2SV_ModEnd> nByte = sizeof,0
272,"<S2SV_ModStart> ; } } s -> append_char ( s, 0 ) ; strncpy <S2SV_ModEnd> ( outbuffer,",1
273,,0
274,<S2SV_ModStart> = 0 ; ( i + 3 ) <S2SV_ModEnd> < sec -> <S2SV_ModStart> = 0 ; ( i + 7 ) <S2SV_ModEnd> < sec ->,1
275,<S2SV_ModStart> case ISIS_SUBTLV_EXT_IS_REACH_BW_CONSTRAINTS_OLD : if ( subl == 0 ) break ; <S2SV_ModStart> ++ ) { <S2SV_ModEnd> bw. i,1
276,<S2SV_ModStart> ) goto out_err <S2SV_ModEnd> ; } if,0
277,"<S2SV_ModStart> ONIG_INFINITE_DISTANCE ) { if ( p - str < reg -> dmax ) { * low = ( UChar * ) str ; if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; } else { <S2SV_ModStart> low ) ; }",0
278,<S2SV_ModStart> -> bfq ) <S2SV_ModEnd> return 0 ; <S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> bqindex ) return bf_null> <S2SV_null>,0
279,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
280,<S2SV_ModStart> ) continue ; if ( vif -> tx. sring -> req_prod - vif -> tx. req_cons > XEN_NETIF_RING_TX_RING_SIZE ) continue ; <S2SV_ModStart> ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> 0 ) ; continue ; } <S2SV_ModEnd> if ( vif,0
281,<S2SV_ModStart> ; if ( cmd == NULL ||,0
282,<S2SV_ModStart> xfrm_dump_info <S2SV_ModEnd> ) ; return,0
283,<S2SV_ModStart> conn ) ; if ( <S2SV_ModStart> ( conn )!= 0 ) return,1
284,"<S2SV_ModStart> netbk, pending_idx <S2SV_ModEnd>, XEN_NETIF_RSP_OK ) <S2SV_ModStart> err ) { xen_idx = XEN_RSP_OKAY <S2SV_ModStart> XEN_OK ) ; <S2SV_ModEnd> err = XEN_NETIF_RSP_ERROR <S2SV_ModStart> XEN_RSP_ERROR ) ; <S2SV_ModEnd> if ( netbk",0
285,,1
286,"<S2SV_ModStart> ) NULL ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; }",0
287,"<S2SV_ModStart> len < 0 <S2SV_ModEnd> ) { syslog <S2SV_ModStart> 1 ; } if ( addr. nl_pid ) { syslog ( LOG_WARNING, ""Received <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> untrusted <S2SV_blank> pid:%u"", addr. nl_pid ) ; continue ; }",1
288,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
289,<S2SV_ModStart> ipc == NULL && client -> session == NULL,1
290,<S2SV_ModStart> ) ) { goto out <S2SV_ModEnd> ; } if,0
291,"<S2SV_ModStart>, nameptr, lfi, fname, UDF_NAME_LEN <S2SV_ModEnd> ) ; if",1
292,"<S2SV_ModStart> ip_vs_timeout_user t ; memset ( & t, 0, sizeof ( t ) ) ;",1
293,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
294,<S2SV_ModStart> ; ssize_t result ; if ( WARN_ON_ONCE (! ib_safe_file_access ( filp ) ) ) return - EACCES,1
295,"<S2SV_ModStart>, * controller, * next = NULL <S2SV_ModStart> if (! caller_is_in_ancestor ( fc -> pid, controller, path1, & next <S2SV_ModEnd> ) ) { <S2SV_ModStart> ) ) ; free ( next ) ;",0
296,<S2SV_ModStart> ) ) { put_disk ( disk ) ;,1
297,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
298,"<S2SV_ModStart> ) AcquireQuantumMemory ( MagickMax ( number_pixels, max_packets ), <S2SV_ModEnd> bytes_per_pixel * sizeof",0
299,<S2SV_ModStart> i ++ ) { if ( avio_feof ( s ) ) return AVERROR_INVAL ;,0
300,<S2SV_ModStart> ; rinfo = kzalloc <S2SV_ModEnd> ( SZ_SG_REQ_INFO *,1
301,"<S2SV_ModStart> ; # endif install_keyword ( ""umask"", & umask_handler ) ;",1
302,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, ctx )",0
303,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> kfree ( tmpbuf,1
304,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; }",1
305,"<S2SV_ModStart> info = boxinfo <S2SV_ModEnd> ; box -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> jas_eprintf ( ""cannot <S2SV_blank> copy <S2SV_blank> box <S2SV_blank> data\\n""",0
306,"<S2SV_ModStart> * new_size, size_t <S2SV_ModEnd> * new_size )",0
307,<S2SV_ModStart> ; int copylen = 0 <S2SV_ModStart> goto err ; err = - EMSGSIZE,0
308,<S2SV_ModStart> ( struct ipv6hdr <S2SV_ModEnd> ) ; unsigned <S2SV_ModStart> while ( offset <S2SV_ModEnd> <= packet_len ) <S2SV_ModStart> packet_len ) { struct ipv6_opt_hdr * exthdr ; <S2SV_ModStart> offset ; } if ( offset + sizeof ( struct ipv6_opt_hdr ) > packet_len ) return - EINVAL ; exthdr = ( struct ipv6_opt_hdr * ) ( skb_network_header ( skb ) + offset ) ; <S2SV_ModStart> -> nexthdr ; } return - EINVAL <S2SV_ModEnd> ; } <S2SV_null>,1
309,"<S2SV_ModStart> write_bit_buffer ( struct vpx_wb_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> w, struct vpx_wb_write_bit <S2SV_ModEnd> * wb, <S2SV_ModStart>, wb, vpx_wb ) vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
310,"<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( ref,",0
311,<S2SV_ModStart> msg_namelen ) { <S2SV_ModEnd> if ( msg,0
312,<S2SV_ModStart> } if ( <S2SV_ModEnd> djrcv_dev -> paired_dj_devices,1
313,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
314,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
315,<S2SV_ModStart> asconf ) { sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) sctp_addip_pass <S2SV_ModEnd> ; struct sctp_params <S2SV_ModStart> asconf ) { sctp_addip_chunk_t * addip = ( sctp_hdr. p -> sctp_hdr. p -> type ) ; if ( err_code == SCTP_PARAM_ERROR_ID_PARAM_ID && param. p -> type == SCTP_PARAM_IPV6_ADDRESS || param. p -> type == SCTP_ADDRESS || param. p -> type == SCTP_ERROR ) { sctp_code = SCTP_PARAM_ERROR_IPV4_ADDRESS ; <S2SV_ModEnd> err_code = sctp_addip <S2SV_ModStart> ) ; if ( asconf -> type == SCTP_ERROR_IP_IPV4_ADDRESS || param. p -> type == SCTP_ERROR_PARAM_IPV4_ADDRESS || param. p -> type == SCTP,0
316,"<S2SV_ModStart> 101, ( ""jas_realloc(%x, <S2SV_blank> %zu)\\n"" <S2SV_ModEnd>, ptr,",1
317,<S2SV_ModStart> exit ; } m -> msg_namelen = 0 ;,0
318,<S2SV_ModStart> CPU_FTR_TM_COMP ) && hv_enabled <S2SV_ModEnd> ; break ;,1
319,"<S2SV_ModStart> 1 ) ; if ( memset ( & mmc, 0, sizeof ( * mmci ) ) ) { return - ENOMEM ; }",0
320,"<S2SV_ModStart> key_name ), UTF16_HOST_ENDIAN, <S2SV_ModStart> data. key, HV_KVP_EXCHANGE_MAX_KEY_SIZE / 2 <S2SV_ModStart> value ), UTF16_HOST_ENDIAN, <S2SV_ModStart> data. value, HV_KVP_EXCHANGE_MAX_VALUE_SIZE / 2",1
321,"<S2SV_ModStart> ) ; } memset ( fd, 0 ) ;",0
322,<S2SV_ModStart> return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
323,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static void * _IOC_SIZE ( void * ) arg = NULL ; void * _IOC_SIZE parg = NULL ; if ( _IOC_SIZE ( cmd ) == NULL ) { _IOC_SIZE ( cmd ) ; return - ENOMEM ; } <S2SV_ModStart> arg = _IOC_SIZE ( cmd ) ; if ( _IOC_SIZE ( cmd ) == 0 ) { _IOC_SIZE ( cmd ), _IOC_SIZE ( cmd ) ) ; if ( _IOC_SIZE ( cmd ) == 0 ) { err = - EFAULT ; } else { if ( _IOC_WRITE ) { if ( _IOC_SIZE ( cmd ) < 0 ) { err = - EFAULT ; goto out ; } else { if ( _IOC_SIZE ( cmd ) == 0 ) { if ( _IOC_SIZE ( cmd ) memset ( parg, 0, n, n ) ) memset ( parg, 0, n, n ) ; } else { _IOC_DIR ( cmd ) ; } if ( _I",0
324,,0
325,"<S2SV_ModStart> data ) { void * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM ; ret = <S2SV_ModEnd> usb_control_msg ( dev <S2SV_ModStart>, 0, buf <S2SV_ModEnd>, size, <S2SV_ModStart> 500 ) ; if ( ret > 0 && ret <= size ) memcpy ( data, buf, ret ) ; kfree ( buf ) ; return ret ;",0
326,<S2SV_ModStart> ; return ; } <S2SV_ModEnd> if (!,0
327,"<S2SV_ModStart> ) { case GTK_RESPONSE_OK : { file = nautilus_file_get_location ( parameters -> file ) ; nautilus_file_set_metadata ( parameters -> file, NAUTILUS_METADATA_KEY_DESKTOP_FILE_TRUSTED, NULL, ""yes"" ) ; nautilus_file_invalidate_file_executable ( file, parameters -> file ) ; nautilus_file_invalidate_file_executable ( parameters -> file ) ; nautilus_file_unref ( parameters -> file ) ;",0
328,<S2SV_ModStart> ; if ( urb -> actual_length > 0 &&,1
329,"<S2SV_ModStart> char * server, struct smb_ses_list * vol <S2SV_ModEnd> ) { int <S2SV_ModStart> sssize ) { if ( server -> linux_uid!= smb_ses_list ) continue ; if ( strncmp ( vol -> username, vol -> username ) ) continue ; if ( strncmp ( vol -> password, vol -> password, vol -> password, vol -> username ) ) continue ; }",0
330,"<S2SV_ModStart> vpx_codec_err_t res ; const VPX_CONFIG * ctx = ctx -> cfg ; if ( ctx -> g_w!= ctx -> cfg. g_h || cfg -> g_w > ctx -> g_h. g_h ) { if ( cfg -> g_h > 1 || ( int ) cfg -> g_h. g_w!= VPX_RC_HIGHBITDEPTH ) cfg -> g_h = 1 ; } else if ( ctx -> cfg. g_height!= VPX_MAX_PASS ) { if ( cfg -> g_h > cpi -> cfg. g_h ) { if ( cfg -> cfg. g_h > cpi -> cpi -> cfg. g_w, cfg -> g_h, cfg -> g_w, cfg -> g_h, ctx -> g_h, cfg -> g_h, cfg -> g_h, cfg -> g_h, ( int ) cfg -> g_h, int ) cfg -> g_height ) ; if ( cpi -> g_",0
331,<S2SV_ModStart> =='<S2SV_blank>') { input ++ ; } <S2SV_ModStart> offset ) ) { <S2SV_ModStart> offset ) ) ; },0
332,"<S2SV_ModStart> inode ) ; struct hugepage_subpool * spool = subpool_inode ( inode ) ; <S2SV_ModStart> ; if ( hugepage_subpool_get_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> 0 ) { hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg )",1
333,<S2SV_ModStart> key * keyring ; if ( new -> thread_keyring ) return 0,1
334,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, 0 )",0
335,"<S2SV_ModStart> orig ) ; fptr_orig = io_get_open_fptr ( mrb, orig ) ; <S2SV_ModStart> mrb_io_alloc ( mrb <S2SV_ModEnd> ) ; DATA_TYPE",1
336,<S2SV_ModStart> error = 0 <S2SV_ModEnd> ; if (,0
337,<S2SV_ModStart> cpi ) { vpx_free ( cpi ) ; vpx_free ( cpi ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. noise_mode == 2 ) { vpx_free ( cpi -> oxcf. frame_mode ) ; vpx_free ( cpi -> frame_probs ) ; # else vpx_free ( cpi ) ; # else vpx_free ( cpi ) ; # if CONFIG_VP9_HIGHBITDEPTH vpx_free ( cpi ) ; # endif vpx_free ( cpi -> oxcf. frame_mode_probs ) ; # endif vpx_free ( cpi -> oxcf. noise_mode ) ; } # endif,0
338,"<S2SV_ModStart> return res ; res = utee_param_to_param ( utc, <S2SV_ModEnd> param, callee_params <S2SV_ModStart>, callee_params ) ; if ( res!= TEE_SUCCESS ) return res",1
339,"<S2SV_ModStart> int rc ; struct desc_struct old_desc, new_desc ; const struct x86_emulate_ops * ops = ctxt -> ops ; const struct x86_emulate_ops * ops = ctxt -> ctxt -> ops ; if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) ops -> get_segment ( ctxt, & old_cs, & old_desc, NULL, VCPU_SREG_CS ) ; <S2SV_ModStart>, ctxt -> mode!= X86EMUL_CONTINUE <S2SV_ModEnd> ) return X86EMUL_CONTINUE",0
340,<S2SV_ModStart> -> band = av_calloc <S2SV_ModEnd> ( reslevel -> <S2SV_ModStart> -> prec = av_calloc <S2SV_ModEnd> ( reslevel ->,1
341,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
342,<S2SV_ModStart> int res ; <S2SV_ModEnd> return 0 ;,0
343,<S2SV_ModStart> si_id ) { <S2SV_ModEnd> return - EINVAL,0
344,<S2SV_ModStart> * p_tx0 = ( OPJ_INT32 ) opj_uint_max <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_ty0 = ( OPJ_INT32 ) opj_uint_max <S2SV_ModEnd> ( p_cp ->,0
345,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * fname <S2SV_ModStart> * fname = ( char * fname [ 1 ] <S2SV_ModEnd> ) { char <S2SV_ModStart> char * fname ) fname = out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( * fname == '\\\\' <S2SV_ModEnd> ) return ( <S2SV_ModStart> ) p [ 1 ] = out <S2SV_ModEnd> ; } <S2SV_null>,0
346,"<S2SV_ModStart> classes = NULL ; zval * retval <S2SV_ModStart> ; } } retval = var_tmp_var ( & retval ) ; zval_unserialize_tmp ( retval <S2SV_ModEnd>, & p <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( retval",0
347,<S2SV_ModStart> goto __err ; tu -> qhead = tu -> qtail = tu -> qused = 0 ;,1
348,<S2SV_ModStart> ) ) { return GF_ISOM_INVALID_FILE ; zfound = GF_FALSE ;,0
349,"<S2SV_ModStart>. get_alg_priv ( ctx ) <S2SV_ModEnd>, ctx )",0
350,"<S2SV_ModStart> == 0 ) if ( received_protocol ) { fprintf ( stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; } else <S2SV_ModStart> { uschar * hn ; if ( received_protocol ) { fprintf ( stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; }",1
351,<S2SV_ModStart> si_id ) { <S2SV_ModEnd> return - EINVAL,0
352,"<S2SV_ModStart> -> off = strtoull <S2SV_ModEnd> ( p, <S2SV_ModStart> -> filesize = strtoull <S2SV_ModEnd> ( slash +",1
353,"<S2SV_ModStart> * cr ; size_t <S2SV_ModEnd> maxw, maxh <S2SV_ModStart> maxw, offx, loopmaxw, offx, loopmaxh ; size_t <S2SV_ModEnd> maxw = ( <S2SV_ModStart> maxw = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> maxw = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) ; offx = ( size_t ) img -> comps [ 0 ]. w ; offx = img -> comps [ 0 ]. w ; offx = img -> comps [ 0 ]. w ; offx = img -> comps [ 0 ]. w = img -> comps [ 0 ]. w ; ++ y = img -> comps [ 1 ]. data ; offx = img -> comps [ 2 ]. w = img -> comps [ 0 ]. w ; offx = img -> comps [ 0 ]. data ; y = img -> comps [ 0 ]. w = img -> comps [ 0 ]. w ; y = img -> comps [ 0 ]",0
354,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { int <S2SV_ModStart> = state ; <S2SV_ModEnd> mutex_unlock ( & <S2SV_ModStart> & state -> state, fmode <S2SV_ModEnd> ) ; if <S2SV_ModStart> state -> fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> state ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
355,"<S2SV_ModStart> return SSH_ERR_INVALID_ARGUMENT ; ssh_dispatch_set ( ssh, SSH2_MSG_KEXINIT, NULL ) ;",1
356,"<S2SV_ModStart> { assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> test <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.constants.constants.constants.constants.constants.foo"" ) ; assert_true_rule ( ""import <S2SV_blank> test <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> tests.constants.constants.foo <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ;",0
357,<S2SV_ModStart> read_info ) ; <S2SV_ModEnd> if ( EOFBlob,1
358,"<S2SV_ModStart> char lbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char lbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char strtest [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> ( lbase, ""%511[^\\r\\n]"" <S2SV_ModEnd>, strtest ) <S2SV_ModStart> ( nbase!= 511 <S2SV_ModEnd> && nbase!= <S2SV_ModStart> && ntest!= 511 <S2SV_ModEnd> ) ; if",0
359,<S2SV_ModStart> intf ) { <S2SV_ModEnd> if ( cdc_ncm_altsetting <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
360,<S2SV_ModStart> len ) { <S2SV_ModEnd> return 0 ;,0
361,<S2SV_ModStart> ) { return 0 <S2SV_ModEnd> ; } if,0
362,"<S2SV_ModStart>, e -> elems, e ->",1
363,<S2SV_ModStart> bpp <= 8 && c -> format!= CHUNKY,0
364,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
365,<S2SV_ModStart> q ) { mutex_lock ( & q -> timer_mutex ) ; <S2SV_ModStart> snd_seq_timer_close ( q ) ; mutex_unlock ( & q -> timer_mutex,1
366,<S2SV_ModStart> <S2SV_null> <S2SV_null> goto error <S2SV_ModEnd> ; struct bh_blks <S2SV_ModStart> = 0 ; error = gfs2_block <S2SV_ModEnd> ; if ( <S2SV_ModStart> = 0 ) ; if ( unlikely ( error ) ) return error ; error = gfs2_inode -> i_blks. bh_size = gfs2_inode -> i_blks. bh_size >> <S2SV_ModStart>. bh ) ; if ( unlikely ( error ) ) return error ; error = gfs2_inode -> i_blks = 0 ; nr_blks = gfs2_inode ( ip -> i_blks ) ; if ( error ) goto out ; } if ( ip -> i_state. bh_blks. bh_size ) { error = gfs2_move_inode ( ip -> i_blks ) ; if ( error ) goto out ; } if ( unlikely ( error ) ) { error = gfs2_inode -> i_state. bh. bh_blks ) goto out ; },0
367,<S2SV_ModStart> VIPS_FOREIGN_LOAD_GET_CLASS ( load ) ; if ( load -> error ) return ( NULL <S2SV_ModEnd> ) ; if,0
368,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
369,<S2SV_ModStart> ; if (! retval ) <S2SV_ModEnd> retval = context,1
370,<S2SV_ModStart> ; mutex_lock ( & state -> flags ) ; ret = - EINVAL ; goto fail_state <S2SV_ModEnd> ; } state,0
371,<S2SV_ModStart> miux_tlv_length ) ; if (! miux_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> miux_tlv_length ) ; if (! miux_tlv ) { err = - ENOMEM ; goto error_tlv ; },0
372,<S2SV_ModStart> void ) { <S2SV_ModEnd> return 0 ;,0
373,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx, sizeof ( vpx_codec_alg_priv_t ) <S2SV_ModEnd> ; if (",0
374,<S2SV_ModStart> unsigned int i,0
375,"<S2SV_ModStart> ( interface, TEMP_FAILED <S2SV_ModEnd> ) ; default",0
376,<S2SV_ModStart> ; if ( inet_opt <S2SV_ModEnd> ( skb ),0
377,<S2SV_ModStart> len ; } ND_TCHECK_32BITS <S2SV_ModEnd> ( p + <S2SV_ModStart> p + 2 <S2SV_ModEnd> ) ; ND_PRINT,1
378,<S2SV_ModStart> 0 ; } if ( unlikely ( IPCB ( skb ) -> opt. optlen ) ) skb_dst_force ( skb ) ; else,1
379,<S2SV_ModStart> private ) { struct skcipher_tfm * tfm = private ; crypto_free_skcipher ( tfm -> skcipher ) ; kfree ( tfm <S2SV_ModEnd> ) ; },1
380,<S2SV_ModStart> bprm ) { <S2SV_ModEnd> int retval ; <S2SV_ModStart> int retval ; bprm_fill_uid ( bprm ) ; <S2SV_ModEnd> retval = security_bprm_set_creds,1
381,<S2SV_ModStart> ( vq ) goto err <S2SV_ModEnd> ; if (,0
382,<S2SV_ModStart> ; dlen -= 3 <S2SV_ModEnd> ; for (,0
383,<S2SV_ModStart> { rq = tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; fn (,1
384,"<S2SV_ModStart> if (! vpx_codec_alg_priv_t <S2SV_ModEnd> ( cfg,",0
385,<S2SV_ModStart> - EOPNOTSUPP ; msg -> msg_namelen = 0 ; <S2SV_ModStart> goto out ; <S2SV_ModEnd> if ( msg,0
386,<S2SV_ModStart> ; if ( skb -> len < sizeof ( struct nlattr ) ) return 0 ; if (,0
387,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; return",0
388,"<S2SV_ModStart> bp, len ) ; break ; case ETHERTYPE_TEB : ether_print ( ndo, bp, len <S2SV_ModStart> ndo_snapend - bp <S2SV_ModEnd>, NULL,",1
389,<S2SV_ModStart> ; } } tile_buffsize = 0 ; tilebuf [ tile_buffsize ] = 0 ; tilebuf [ 0 ] = 0xFFFFU - 1 ] ; if (,0
390,<S2SV_ModStart> O_APPEND | O_CREAT | O_NOFOLLOW,1
391,"<S2SV_ModStart> type, error <S2SV_ModEnd> ) ; return",0
392,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if ( ret ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart> - EBUSY ; o2nm_lock_subsystem ( ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>,0
393,"<S2SV_ModStart>, pt_flags, false <S2SV_ModEnd> ) ; }",0
394,<S2SV_ModStart> opflags ) { <S2SV_ModEnd> if (!,0
395,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
396,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
397,<S2SV_ModStart> return - E_NOTHANDLED ; if ( ninst == 0 ) return - E_INVALID,1
398,"<S2SV_ModStart> ( ndo, ""%s"", __func__ )",0
399,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
400,"<S2SV_ModStart> return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> p + offset <S2SV_ModEnd>, tim.",0
401,"<S2SV_ModStart> 1 ) ; if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf = opipe",0
402,<S2SV_ModStart> ( ) ; if (! tbuf ) { return NULL ; },1
403,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
404,"<S2SV_ModStart> ) ) { memset ( a, 0, sizeof ( * flags ) ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
405,<S2SV_ModStart> ( <S2SV_ModEnd> ) ; if,0
406,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nsc_encode ( NSC_CONTEXT <S2SV_ModStart> rowstride ) { if (! context ||! bmpdata || ( rowstride == 0 ) ) return FALSE ; if (! <S2SV_ModStart> ( context ) ) return TRUE ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
407,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
408,<S2SV_ModStart> stringset == ETH_SS_STATS || stringset == ETH_SS_PRIV_FLAGS,1
409,<S2SV_ModStart> return ( ( ( <S2SV_ModStart> ) / 8 ) * GetPSDPacketSize ( image ),1
410,<S2SV_ModStart> p_id ) ; <S2SV_ModEnd> return ret ;,0
411,<S2SV_ModStart> bMasterInterface0 ) ; if (! pcu -> data_intf ) return - EINVAL ;,0
412,"<S2SV_ModStart> const char * devname = kstrdup ( dev_name ( & <S2SV_ModEnd> d -> udev <S2SV_ModStart> udev -> dev ), GFP_KERNEL ) ; const char * drvname = kstrdup ( dev, GFP_KERNEL ) ; const char * dev_name <S2SV_ModEnd> ) ; const <S2SV_ModStart>, KBUILD_MODNAME, devname <S2SV_ModEnd> ) ; kfree",0
413,"<S2SV_ModStart> pirlvl ) { if ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 || pirlvl -> prcheightexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 ) { return - 1 ; } <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << rpx ) <S2SV_ModStart> ) % ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << rpy )",0
414,<S2SV_ModStart> target_enc ) { return ONIGERR_NOT_SUPPORTED_ENCODING_COMBINATION <S2SV_ModEnd> ; } else,1
415,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static MagickBooleanType <S2SV_ModEnd> ( image, <S2SV_ModStart> image, ssize_t image <S2SV_ModStart> bit ) { SetImageExtent ( image, image, image, image, image -> columns, ssize_t ) ; if ( status == MagickFalse ) { SetPixelInfo ( image, exception, & ssize_t ) ; qindex = SetPixelInfo ( image, 1, image -> columns, exception ) ; return ( MagickFalse ) ; } <S2SV_ModEnd> return ( image <S2SV_ModStart> ; image -> columns <S2SV_ModEnd> ; } <S2SV_null>",0
416,"<S2SV_ModStart> u_char * tptr, const u_int length ) { u_int length ; u_int length ; u_int length ; u_int length ; hexdump = FALSE ; if ( length < 2 ) { ND_PRINT ( ndo, ""\\n\\t <S2SV_blank> Network <S2SV_blank> Network <S2SV_blank> (invalid <S2SV_blank> address <S2SV_blank> %u)"", length, length - 1 ) ) ; return FALSE ; } <S2SV_ModStart> case AFNUM_INET : if ( length < 2 ) { ND_PRINT ( ( ndo, ""(invalid <S2SV_blank> address <S2SV_blank> length <S2SV_blank> length <S2SV_blank> %u)"", length - 1 ) ) ; hexdump = TRUE ; break ; }",0
417,"<S2SV_ModStart> ; u16 reg_data, rcx, rdx <S2SV_ModStart> = X86EMUL_MODE_PROT64 ; rcx = reg_read ( ctxt, VCPU_REGS_RDX ) ; <S2SV_ModStart> = X86EMUL_CONTINUE ; rcx = reg_read ( ctxt, VCPU_REGS_REGS_RDX ) ; <S2SV_ModStart> ; if ( rcx ) return emulate_noncanonical_address ( ctxt, 0x ) ; if ( rcx ) return emulate_gp ( ctxt, VCPU_REGS_RDX ) ; <S2SV_ModStart> = 1 ; <S2SV_ModEnd> return 1 ;",0
418,<S2SV_ModStart> dev ) ; ssize_t len ; device_lock ( dev ) ; len = <S2SV_ModEnd> sprintf ( buf <S2SV_ModStart> driver_override ) ; device_unlock ( dev ) ; return len ;,1
419,<S2SV_ModStart> if (! tmpout <S2SV_ModEnd> ) { i,0
420,<S2SV_ModStart> = KRB5_PREAUTH_FAILED ; if ( retval == 0 ) rs. enc_tkt_reply -> flags |= TKT_FLG_PRE_AUTH ;,1
421,"<S2SV_ModStart> int i, vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * out, vpx_prob <S2SV_ModEnd> ) { const",0
422,"<S2SV_ModStart> = ""/tmp"" ; # endif",0
423,<S2SV_ModStart> = 0 ; size_t pathlen = 0 ; <S2SV_ModStart> case AF_UNIX : pathlen = sizeof ( <S2SV_ModEnd> ( ( pathlen ),0
424,"<S2SV_ModStart> * output, tran_low_t <S2SV_ModEnd> * output,",0
425,"<S2SV_ModStart> command + 1, c <S2SV_ModEnd> ) return -",0
426,"<S2SV_ModStart> ) { struct hugepage_subpool * spool = subpool_vma ( vma ) ; struct <S2SV_ModStart> page * page <S2SV_ModEnd> ; long chg <S2SV_ModStart> ) if ( hugepage_subpool_get_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> page ) { hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> unsigned long ) spool <S2SV_ModEnd> ) ; vma_commit_reservation",1
427,"<S2SV_ModStart> filegen_string ) ; if ( NULL == filegen ) { msyslog ( LOG_ERR, ""filegen <S2SV_blank> unrecognized"" ) ; continue ; }",0
428,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; timer_set_state",1
429,"<S2SV_ModStart> * input, tran_low_t input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> output ) { tran_high_t s1, tran_high_t <S2SV_ModEnd> * output, <S2SV_ModStart> 1 ] = ( tran_high_t ) <S2SV_ModStart> output ) ; tran_high_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> 1 ] = ( tran_high_t ) <S2SV_ModStart> 1 ] = ( tran_high_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 3 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 6 ] = input [ 3 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 6 ] = ( tran_low_t ) <S2SV_ModStart> 3 ] = ( tran_low_t ) <S2SV_ModStart> 5 ] = ( tran_low_t ) <S2SV_ModStart> 6 ] = ( tran_low_t ) <S2SV_ModStart> 5 ] = ( tran_low_t ) <S2SV_ModStart> 5 ] = ( tran_low_t ) <S2SV_ModStart> 6 ] = ( tran_low",0
430,<S2SV_ModStart> flags ) { <S2SV_ModEnd> flags |=,0
431,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
432,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF <S2SV_ModStart> wc ) ; return,1
433,"<S2SV_ModStart> tot_len ) ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
434,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> AVINDEX_KEYFRAME ) ; },1
435,"<S2SV_ModStart>, 1, <S2SV_ModEnd> ) ; if",0
436,"<S2SV_ModStart>, * controller, * next = NULL <S2SV_ModStart> out ; } if (! fc_may_access ( fc -> pid, controller, & next ) ) { ret = - ENOENT ; goto out ; } if (! fc_may_access ( fc, fpath, NULL, O_WRONLY, O_WRONLY, O_WRONLY, NULL, O_WRONLY <S2SV_ModEnd> ) ; if",0
437,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flag & CL_UNPRIVILEGED <S2SV_ModStart> & CL_UNPRIVILEGED ) mnt -> mnt. mnt_flags |= MNT_NODEV ; if <S2SV_ModEnd> ( mnt -> <S2SV_ModStart> mnt. mnt_flags & MNT_LOCK_NODEV ) mnt -> mnt. mnt_flags |= MNT_NOSUID ; if ( mnt -> mnt. mnt_flags & MNT_NOSUID ) mnt -> mnt. mnt. mnt_flags |= MNT_NOEXEC ; if ( mnt -> mnt. mnt. mnt_flags & MNT_NOSUID ) mnt -> mnt. mnt. mnt_flags |= MNT_NOEXEC ; if ( mnt -> mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt_flags |= MNT_NOSUID ; if ( mnt -> mnt. mnt. mnt. mnt. mnt. mnt_flags & MNT_NODEV ) mnt -> mnt. mnt,0
438,<S2SV_ModStart> rds_loop_transport ; } <S2SV_ModEnd> } conn ->,1
439,<S2SV_ModStart> * rsize >= 112 <S2SV_ModEnd> && rdesc [,1
440,<S2SV_ModStart> if ( ( ( <S2SV_ModStart> ) < bodyLength ) || ( bodyLength < sizeof ( EAPOL_RSN_KEY ) ),1
441,<S2SV_ModStart> ( likely ( serio <S2SV_ModEnd> &&! filtered,1
442,"<S2SV_ModStart>! er ) { ND_TCHECK ( <S2SV_ModEnd> dp [ 0 <S2SV_ModStart> 0 ] ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> c <S2SV_blank> %04x"", EXTRACT_32BITS ( & dp [ 0 ] ) ) ) ; } <S2SV_ModEnd> return ; case",1
443,"<S2SV_ModStart> * udfName, int udfLen, <S2SV_ModStart> * udfName, <S2SV_ModEnd> uint8_t * CRC_LEN <S2SV_ModStart> * udfName = newLen - CRC_LEN <S2SV_ModEnd> ; udfName [",0
444,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> choose_segs ( MACROBLOCKD * mi <S2SV_ModStart> int mi_row, MODE_INFO * mi <S2SV_ModEnd>, int mi_row, <S2SV_ModStart> BLOCK_SIZE bsize, MODE_INFO * mi <S2SV_ModEnd>, int mi <S2SV_ModStart> BLOCK_SIZE bsize ) { <S2SV_ModStart>, mi_row, mi <S2SV_ModEnd>, mi_row, <S2SV_ModStart> ) ) { if ( mi_row > mi_col ) { vp9_segs_segs ( cm -> mi_cols + mi_row, mi_col, mi_cols + mi_col, ctx, mi_col, mi_col, mi_col, mi_cols + mi_row, xd -> mi_cols ) ) ; assert ( cm -> mi_cols + mi_col ) ; <S2SV_ModStart> = mi_cols + mi_col ; <S2SV_ModEnd> if ( mi_cols",0
445,"<S2SV_ModStart> c -> type, c <S2SV_ModEnd> ) ) ;",0
446,<S2SV_ModStart> -> mb_blocks ; if ( le32_to_cpu ( ext4_blk ) ) return - EPERM,0
447,"<S2SV_ModStart> * s ; const unsigned char * p = sigbuf ; unsigned char * der = NULL ; int derlen = - 1 ; <S2SV_ModStart> s, & p <S2SV_ModEnd>, siglen ) <S2SV_ModStart> == NULL ) goto err ; derlen = i2d_SV_null> <S2SV_null>",0
448,"<S2SV_ModStart> NULL ) ; if (! _gdImageWBMPCtx <S2SV_ModEnd> ( im, <S2SV_ModStart>, out ) ) { <S2SV_ModEnd> rv = gdDPExtractData <S2SV_ModStart> size ) ; } else { rv = NULL ; }",0
449,<S2SV_ModStart> ) ; } if ( bprm -> interp!= bprm -> filename ) kfree ( bprm -> interp ) ;,1
450,"<S2SV_ModStart> int flags, <S2SV_ModEnd> struct oe_sockaddr * <S2SV_ModStart>, int p ; size_t oe_sock = 0 ; p -> oe_sock = 0 ; <S2SV_ModStart> p -> pno, & p -> addr_len, & p -> data_len, sizeof ( PTR_ERR_SSIZE_MAX ) ; if ( p -> oe_sockname ) { ret = - EINVAL ; oe_sock = p -> oe_sockname ; p -> oe_sock = p -> oe_sockname ; p -> oe_sock = p -> oe_sockaddr_len_out ; } <S2SV_ModStart>, & p -> name, <S2SV_ModEnd>, & p -> <S2SV_ModStart>, sizeof ( PTR_ERR_EINVAL ), <S2SV_ModEnd> ) ; }",0
451,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
452,"<S2SV_ModStart> ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, ""Invalid <S2SV_blank> image <S2SV_blank> dimensions"" ) ; goto done ; }",1
453,<S2SV_ModStart> cm -> fc <S2SV_ModEnd> ) { pc,0
454,"<S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; if ( ret <= size ) memcpy ( data, buf, ret ) ; kfree ( buf ) ; return ret ;",0
455,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
456,<S2SV_ModStart> destroy_list ) ; <S2SV_ModEnd> } } <S2SV_null>,1
457,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_row, vpx_writer <S2SV_ModEnd> * buf, <S2SV_ModStart> ; # if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModEnd> ( buf, <S2SV_ModStart> ) ) { # if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> buf_size >= sizeof ( ctx -> y_buf_y ) ) return AVERROR_INVALIDDATA ; memset ( & buf, buf, sizeof ( buf ) ) ; # endif return GF_LOG_ERROR ; <S2SV_ModStart> } else { # if CONFIG_HIGHBITDEPTH <S2SV_ModEnd> ( ctx -> <S2SV_ModStart>, buf, sizeof ( buf ) <S2SV_ModEnd> ) ) ; <S2SV_ModStart> } else { vpx_write_bit <S2SV_ModEnd> ( buf,",0
458,<S2SV_ModStart> ) ; } fuse_conn_put ( & cc -> fc ) ;,1
459,"<S2SV_ModStart> ( code ) { * status = ""DECODE_PA_S4U_X509_USER"" ; return code ; } <S2SV_ModEnd> code = verify_s4u_x509_user_checksum",1
460,<S2SV_ModStart> * r ; <S2SV_ModEnd> return 0 ;,0
461,<S2SV_ModStart> cur_pic. field_picture <S2SV_ModEnd> ) return 0,1
462,<S2SV_ModStart> off ) { uint8_t ret = <S2SV_ModStart> off ) ; goto out <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>,0
463,<S2SV_ModStart> buf ) ) { return 0 ; } <S2SV_ModEnd> ext_block = (,1
464,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = key_permission,1
465,<S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) ; ND_TCHECK_32BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> = IP6M_MINLEN ; ND_TCHECK_32BITS ( & bp [ hlen ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( & bp [ hlen ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> = IP6M_MINLEN ; ND_TCHECK_32BITS ( & bp [ hlen ] <S2SV_ModEnd> ) ;,0
466,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
467,"<S2SV_ModStart> = hmi_data ; uint32_t * hmi_tmp = 0 ; <S2SV_ModStart> += 4 ; hmi_tmp = hmi_track_offset <S2SV_ModStart> ; if ( hmi_tmp > data_size ) { _WM_GLOBAL_ERROR ( __LINE__, WM_NOT_GLOBAL_ERROR, WM_HMI, ""file <S2SV_blank> too <S2SV_blank> short"" ) ; goto _hmi_end ; } <S2SV_ModStart> += 4 ; hmi_tmp = hmi_tmp ; hmi_tmp = hmi_tmp ; <S2SV_ModStart> += 4 ; hmi_tmp += 4 ; <S2SV_ModStart> += 4 ; hmi_tmp = 4 ; hmi_tmp = hmi_tmp ; <S2SV_ModStart> += 4 ; hmi_tmp += 4 ; <S2SV_ModStart> += 4 ; hmi_tmp += 4 <S2SV_ModEnd> ; if ( <S2SV_ModStart> += 4 ; hmi_tmp += 4 ;",0
468,<S2SV_ModStart> -> id ; haddr -> hci_channel = 0 ;,1
469,<S2SV_ModStart> -> i_iget5_offset ; fh16 [ 3 ] = 0 ;,1
470,"<S2SV_ModStart> ( kdc_active_realm, client. princ <S2SV_ModEnd>, request ->",1
471,<S2SV_ModStart> break ; } <S2SV_ModEnd> dst_reg -> smin_value <S2SV_ModStart> = S64_MAX ; <S2SV_ModEnd> if ( src_known,1
472,"<S2SV_ModStart> ) { const VP9EncoderConfig <S2SV_ModEnd> * const oxcf <S2SV_ModStart> = cpi -> td. <S2SV_ModStart> cm -> oxcf ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. last_mode == 0 ) { vp9_high_set_level ( cm, cm -> oxcf, cm -> bit_depth, 0, cm -> bit_depth, 0, cm -> bit_depth ) ; } else { <S2SV_ModEnd> return ; }",0
473,,0
474,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
475,"<S2SV_ModStart> = getnum ( <S2SV_ModEnd> fmt, MAXALIGN",0
476,<S2SV_ModStart> void usage_exit ( void,1
477,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
478,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
479,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
480,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, ctx ->",0
481,<S2SV_ModStart> ; if ( * value == 0 ||,1
482,"<S2SV_ModStart> inode -> i_sb -> s_len, eofs",0
483,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
484,"<S2SV_ModStart> ( ndo, ""%s"", snpal <S2SV_ModEnd> ) ) ;",0
485,"<S2SV_ModStart> * outputbuffer, <S2SV_ModEnd> } else {",0
486,<S2SV_ModStart> } else { return false ; } <S2SV_ModEnd> } if (,0
487,<S2SV_ModStart> case IS_STRING : { zval dval ; dval = * * tmp ; zval_copy_ctor ( & dval ) ; convert_to_double ( & dval <S2SV_ModEnd> ) ; } <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval lval ; zval_copy_ctor ( & dval ) ; convert_to_double ( & dval <S2SV_ModEnd> ) ; } <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval ; zval = * * * tmp ; zval_copy_ctor ( & dval ) ; convert_to_long ( & dval ) ; convert_double ( & lval <S2SV_ModEnd> ) ; } <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval lval ; zval = * * tmp ; zval_copy_ctor ( & dval ) ; convert_to_long ( & lval ) ; convert_long ( & lval <S2SV_ModEnd> ) ; },0
488,<S2SV_ModStart> type ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
489,<S2SV_ModStart> SQL_DROP ) ; <S2SV_ModEnd> return 0 ;,1
490,"<S2SV_ModStart> ; r = __copy_from_user <S2SV_ModEnd> ( data,",1
491,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = ( line <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; isspace ( unsigned char ) <S2SV_ModStart> ; isspace ( ( unsigned char ) <S2SV_ModStart> && isdigit ( ( unsigned char ) <S2SV_ModStart> && isdigit ( unsigned char ),0
492,<S2SV_ModStart> = 0 ; info -> port = NULL ;,1
493,<S2SV_ModStart> -> ctx. <S2SV_ModEnd> pmu = pmu,1
494,"<S2SV_ModStart> iovec * nr_segs, struct iov_iter * iter ) { if ( len > MAX_RW_COUNT ) len = MAX_RW_COUNT ; <S2SV_ModStart> = MAX_RW_COUNT ; iovec = len ;",0
495,<S2SV_ModStart> ext4_group_t flex_group ; unsigned <S2SV_ModStart> -> s_log_groups_per_flex ; if ( sbi -> s_log_groups_per_flex < 1 || sbi -> s_log_groups_per_flex > 31 ) { sbi -> s_log_groups_per_flex = 0 ; return 1 ; } <S2SV_ModStart> -> s_log_groups_per_flex ; <S2SV_ModEnd> flex_group_count = (,1
496,<S2SV_ModStart> ( unlikely ( chunk -> pdiscard ) ) return 0 ; if ( unlikely (,1
497,,0
498,"<S2SV_ModStart> { if ( parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) return exit_client ( cptr, sptr, sptr, sptr, sptr, ""Malformed <S2SV_blank> AUTHENTICATE"" ) ; if (",0
499,<S2SV_ModStart> <= w - ( int ),1
500,<S2SV_ModStart> callback_args -> forward_matches ; assert ( match_offset + match_length <= callback_args -> data_size ),1
501,<S2SV_ModStart> options. disable_forwarding && use_privsep,1
502,"<S2SV_ModStart> { if ( length > SMKTREE_DECODE_MAX_RECURSION ) { av_log ( NULL, AV_LOG_ERROR, ""Maximum <S2SV_blank> tree <S2SV_blank> recursion <S2SV_blank> level <S2SV_blank> exceeded.\\n"" ) ; return AVERROR_INVALIDDATA ; } if (",1
503,<S2SV_ModStart> err ; } if ( m -> msg_name ),1
504,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_args, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> field"" ) ; return 1 ; } else <S2SV_ModEnd> { int res <S2SV_ModStart> ) ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_id, & tmp ) < 0 ) { Py_CLEAR ( tmp ) ; goto failed ; } if ( tmp == NULL ) { Py_CLEAR ( tmp ) ; } else { int res <S2SV_ModEnd> ; res = <S2SV_ModStart> ) ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_type, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL || tmp == Py_None ) { Py_CLEAR ( tmp ) ; type_ignores = obj2ast_string ( tmp, & tmp ) ; if ( tmp == NULL || tmp == Py_None ) { Py_CLEAR ( tmp ) ; type_ignores = NULL ; } if ( tmp ==",0
505,<S2SV_ModStart> m ; int hstartrow <S2SV_ModEnd> ; if ( <S2SV_ModStart> 2 ) { hstartrow <S2SV_ModEnd> = ( numrows <S2SV_ModStart> = numrows - hstartrow <S2SV_ModEnd> ; n = <S2SV_ModStart> & a [ hstartrow <S2SV_ModEnd> * stride ],1
506,"<S2SV_ModStart> ""REPLY_ADD_STA <S2SV_blank> PASSED\\n"" ) ; ret = iwl_sta_ucode_activate ( priv, sta_id ) <S2SV_ModEnd> ; break ;",1
507,"<S2SV_ModStart> ; log_file = fopen_safe <S2SV_ModEnd> ( file_name,",1
508,"<S2SV_ModStart> ""a\\0x"" ) ; assert_regexp_syntax_error ( ""\\\\x"" ) ;",0
509,"<S2SV_ModStart> & HB_LOCK ) spin_lock_irqsave ( & hashbin -> hb_spinlock, flags ) ; <S2SV_ModEnd> if ( hashbin <S2SV_ModStart> ++ ) { <S2SV_ModEnd> if ( free_func <S2SV_ModStart> & HB_LOCK ) <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( free_func ) spin_unlock_irqrestore ( & hashbin -> hb_spinlock, flags ) ; <S2SV_ModEnd> } } hashbin",0
510,<S2SV_ModStart> EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NODEV ) &&! ( mnt_flags & MNT_NODEV ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_NOEXEC ) &&! ( mnt. mnt_flags & MNT_NODEV ) ) { return - EPERM ; } if ( ( ( mnt -> mnt. mnt. mnt_flags & MNT_NOEXEC ) ) { return - EPERM ; } if ( ( ( mnt. mnt_flags & MNT_NOEXEC ) &&! ( mnt. mnt_flags & MNT_NOEXEC ) ) { return - EPERM ; } if ( ( ( ( mnt. mnt_flags & MNT_NOEXEC ) ) &&! ( ( ( mnt. mnt_flags & MNT_NOEXEC ) ) ) { return - EPERM ; },0
511,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int err = <S2SV_ModStart> msg -> msg_namel_name <S2SV_ModEnd> ; if ( <S2SV_ModStart> msg -> msg_namelen ) ; <S2SV_ModEnd> if ( msg_name <S2SV_ModStart> msg -> msg_namelen + copied,0
512,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
513,"<S2SV_ModStart> ( serial -> num_bulk_out <S2SV_ModEnd> < 2 ) <S2SV_ModStart> < 2 ) { dev_err ( & serial -> interface -> dev, ""missing <S2SV_blank> bulk <S2SV_blank> out <S2SV_blank> endpoints\\n"" ) ; return - ENODEV ; } <S2SV_ModEnd> port = serial",1
514,"<S2SV_ModStart> write_junk * cs64_chunk ; DS64_chunk = 0, sizeof ( table_length ) <S2SV_ModStart> ) ) ; if ( table_length > sizeof ( CS64_chunk ) ) { error_line ( CS64Chunk * sizeof ( CS64Chunk ) ) ; table_length * table_length ) ; if ( table_length > sizeof ( CS64_chunk ) ) { error_line ( CS64_chunk ) ; return DS64Chunk * sizeof ( CS64_junk ) ; } <S2SV_ModStart> + ds64_chunk ) ; if ( table_length > sizeof ( DS64Chunk ) ) { error_line ( CS64Chunk ) ) ; } if ( table_length > sizeof ( CS64_chunk. ckID ) ) ) { error_line ( ""not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> bytes"" ) ; return FALSE ; } if ( table_length * table_length * sizeof ( CS64Chunk ) ) { cs64_chunk. chunksizeof ( & cs64_chunk. table_length ) ) ; return FALSE ; }",0
515,"<S2SV_ModStart> ( msg_name, msg_sys <S2SV_ModEnd> ) goto <S2SV_ModStart> } if ( msg_name ) <S2SV_ModStart> -> msg_name, msg_name, msg_sys <S2SV_ModEnd> -> msg_name, <S2SV_ModStart> -> msg_name, msg_name, msg_namelen <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( msg_sys -> msg_name, msg_sys <S2SV_ModEnd> -> msg_name, <S2SV_ModStart> -> msg_name, msg_name <S2SV_ModEnd> ) ; if",0
516,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct bhdr * bs_blocks <S2SV_ModEnd> ; int bh = <S2SV_ModStart> ; unsigned int bs_blocks <S2SV_ModEnd> ; unsigned int bh,0
517,"<S2SV_ModStart> ; # endif CONFIG_VP9_HIGHBITDEPTH <S2SV_ModEnd> ( ctx,",0
518,<S2SV_ModStart> return FALSE ; if (! rc ) return FALSE ;,0
519,,0
520,"<S2SV_ModStart> ; if ( is_link ( fname ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank> %s <S2SV_blank> file\\n"", fname ) ; exit ( 1 ) ; } if ( <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> ; if ( is_link ( fname ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank> %s <S2SV_blank> file\\n"", fname ) ; exit ( 1 ) ; } if ( <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> } if ( is_link ( fname ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank> %s <S2SV_blank> file\\n"", fname ) ; exit ( 1 ) ; } if ( <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.bashrc"",",0
521,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> r_rcu32 ( struct <S2SV_ModStart> hdr_len ) { struct xdr_len * xdr ; unsigned int ret ; <S2SV_ModStart> - 1 ; unsigned int ret ; <S2SV_ModStart> ; if ( rdr_len > ( xdr_len ) || xdr_len > ( xdr_len ) ) return - EINVAL ; <S2SV_ModEnd> ret = xdr_len <S2SV_ModStart> - EINVAL ; if ( xdr_len ) <S2SV_ModEnd> return 0 ;,0
522,<S2SV_ModStart> ( sf -> ff.,0
523,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
524,<S2SV_ModStart> = timespec_to_ns ( & <S2SV_ModStart> = timespec_to_ns ( & <S2SV_ModStart> = timespec_to_ns ( &,1
525,"<S2SV_ModStart> if (! js_doregexec ( J, <S2SV_ModEnd> re -> prog",1
526,<S2SV_ModStart> value ) { size_t value ; <S2SV_ModStart> ++ ++ ; if ( value < sizeof ( value ) ) break ;,0
527,"<S2SV_ModStart> u64 content_length ; struct range_data * r = & clt -> clt_ranges ; <S2SV_ModStart> 0 ; int ret <S2SV_ModEnd> ; size_t content_length = <S2SV_ModStart> ( clt -> clt_ranges, <S2SV_ModEnd> range -> clt_length <S2SV_ModStart> ( & clt_ranges, nranges, sizeof ( clt -> clt_length ) <S2SV_ModEnd> ) ) ; <S2SV_ModStart> 0 ) { range_length = & clt -> clt_boundary ; <S2SV_ModEnd> if ( clt_length <S2SV_ModStart> ( clt -> clt_ranges, nranges, clt_length, clt -> clt_length <S2SV_ModEnd> ) ) ; <S2SV_ModStart> 0 ) { size_t -> clt_ranges = & r -> clt_length ; <S2SV_ModEnd> if ( nranges <S2SV_ModStart> ( clt -> clt_ranges, sizeof ( clt_length ) <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( clt -> clt_length, sizeof ( clt_length ) <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ; if ( nr -> clt_boundary = sizeof ( clt -> clt_length - 1 ) ) ) { range = 0 ; for ( ret = 0 ; i < 0 ; i ++",0
528,"<S2SV_ModStart> ( interface, KSZ8851_ISR, ( interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_R <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_R <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_R <S2SV_ModEnd> ) ; err <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_TXR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_IER_LINK_IE | KSZ8851_IER_IE | KSZ8851_IER_IER_LINKIF | KSZ8851_IE | KSZ8851_IE | KSZ8851_IER_IE <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_IE <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_IER_IER_IER_IER_IE | KSZ8851_IER_IER_IE | KSZ8851_IER_IER_IE | KSZ8851_IE <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_IER_IER_IE | KSZ8851",0
529,"<S2SV_ModStart> cm, struct vpx_write_bit_depth <S2SV_ModEnd> * wb ) <S2SV_ModStart> int bit_depth ) vpx_wb_write_bit_literal <S2SV_ModEnd> ( wb,",0
530,<S2SV_ModStart> bpp <= 8 && c -> format!= CHUNKY,0
531,"<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
532,<S2SV_ModStart> tmp ) { goto softfail <S2SV_ModEnd> ; } case <S2SV_ModStart> ) ) { goto softfail <S2SV_ModEnd> ; } state <S2SV_ModStart> end ) ; softfail : state -> offset = 0 ;,1
533,"<S2SV_ModStart> struct fb_vblank vblank ; memset ( & vblank, 0, sizeof ( vblank ) )",1
534,<S2SV_ModStart> flags ) { spin_lock ( & ctx -> cancel_lock ) ; <S2SV_ModStart> } } else { __timerfd_remove_cancel <S2SV_ModEnd> ( ctx ) <S2SV_ModStart> ) ; } spin_unlock ( & ctx -> cancel_lock ) ;,1
535,"<S2SV_ModStart> ) ) ; if ( c16 -> Curves [ i ] == NULL ) { for ( j = 0 ; j < i ; j ++ ) { _cmsFree ( ContextID, c16 -> Curves [ j ] ) ; } _cmsFree ( ContextID, c16 -> Curves ) ; _cmsFree ( ContextID, c16 ) ; return NULL ; }",1
536,<S2SV_ModStart> { if (! dev_name ||,1
537,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
538,<S2SV_ModStart> msg ) { if ( bus -> m_pdwGetRing + sizeof ( * msg ) - space_rem ) { <S2SV_ModEnd> if ( buf <S2SV_ModStart> -> m_rem ) { <S2SV_ModEnd> if ( buf,0
539,<S2SV_ModStart> TSRMLS_CC ) ; if ( new_len > INT_MAX ) { efree ( replaced ) ; RETURN_FALSE ; },1
540,<S2SV_ModStart> ; # endif <S2SV_ModEnd> return errno,0
541,"<S2SV_ModStart> ( ) ; alloc_array ( t1_line, strlen ( t1_buf_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) ; <S2SV_ModStart> t1_buf_array ) ; alloc_array ( t1_array, strlen ( t1_line, strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) + strlen ( t1_buf_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) + strlen ( t1_buf_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) + strlen ( t1_buf_array ) + strlen ( t1_buf_array, T1_BUF_SIZE ) + strlen ( t1_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) + strlen ( t1_buf_array ) + 1, t1_array ) ; alloc_array ( t1_array ) + strlen ( t",0
542,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_block ( VP9_COMMON * <S2SV_ModStart> bsize ) { VP9_COMMON * cm = BLOCK_SIZE bsize ; <S2SV_ModStart> bsize ) ; memset ( xd, bsize, 0, sizeof ( xd ) ) ; <S2SV_ModStart> bsize ) ; <S2SV_ModStart> bsize ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart>, bsize, bsize, <S2SV_ModStart> bsize ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> bsize ) ; <S2SV_ModEnd> } } <S2SV_null>",0
543,"<S2SV_ModStart> name ) ; if (! strcmp ( key, ""url"" ) && value && looks_like_command_line_option ( value ) ) data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_URL, ""disallowed <S2SV_blank> submodule <S2SV_blank> url: <S2SV_blank> %s"", value ) ;",1
544,<S2SV_ModStart> s -> chunksize!= UINT64_MAX ),0
545,<S2SV_ModStart> cnt ) { ssize_t <S2SV_ModEnd> n ; assert,1
546,<S2SV_ModStart> ; __be16 type ; if ( NAPI_GRO_CB ( skb ) -> encap_mark ) goto out ; NAPI_GRO_CB ( skb ) -> encap_mark = 1,1
547,<S2SV_ModStart> ; if ( numrows < 0 || numcols < 0 ) { return 0 ; } if (,1
548,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (,0
549,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = key_permission,0
550,<S2SV_ModStart> -> u4_first_slice_in_pic = 1,0
551,"<S2SV_ModStart> BPF_ALU64 ) { coerce_reg_to_size ( dst_reg, 4 ) ; coerce_reg_to_size <S2SV_ModEnd> ( & src_reg <S2SV_ModStart> ( & src_reg, 4",0
552,<S2SV_ModStart> ) ; goto out_lock <S2SV_ModEnd> ; } if,0
553,<S2SV_ModStart> vfio_irq_set_irq ; size_t size ; int max ; <S2SV_ModStart> ; if ( hdr. count > U32_MAX - hdr. count ) return - EINVAL ; if ( hdr. count > U32_MAX - hdr. flags ) { size = - EINVAL ; return - EINVAL ; } if ( hdr. flags & VFIO_SET_IRQ_DATA_TYPE_IRQ_MASK ) { if ( hdr. count > max ) return - EINVAL ; },0
554,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ext4_has_inline_data ( inode,1
555,<S2SV_ModStart> -> filesize = UINT64_MAX <S2SV_ModEnd> ; s ->,1
556,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
557,"<S2SV_ModStart> char * in, size_t olen <S2SV_ModStart> += 4 ; if ( len == olen ) return len ;",0
558,<S2SV_ModStart> gc ) ; <S2SV_ModEnd> return 0 ;,1
559,"<S2SV_ModStart> i ; size_t bytes, <S2SV_ModStart>, bytes, bytes <S2SV_ModEnd> ) ; cur_len",0
560,<S2SV_ModStart> & CP_RDESC_SWAPPED_MIN_MAX ) ) return rdesc ; if ( * rsize < 4,1
561,<S2SV_ModStart> vpx_codec_ctx_t * const VP9_COMMON * const si <S2SV_ModEnd> * const si <S2SV_ModStart> si = ( void ) ( svc -> oxcf <S2SV_ModEnd> * ) <S2SV_ModStart> i ) { svc_log2_context [ i ] = 0 ; for ( i = 0 ; i < num_frame_size ; ++ i ) { svc -> spatial_layer_idx [ i ] = 0 ; ++ i ; si -> svc_context [ i ] = 0 ; } <S2SV_ModEnd> if ( si,0
562,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decode ( BYTE <S2SV_ModStart> BYTE * out, UINT32 outSize <S2SV_ModStart> ) return FALSE <S2SV_ModEnd> ; } <S2SV_null>",0
563,<S2SV_ModStart> screen ) ) { if ( screen -> screen == NULL ) return NULL ;,0
564,"<S2SV_ModStart> str ) { char * str ; int is_start ; <S2SV_ModStart> char * str ; if (! str ) return 0 ; <S2SV_ModStart>, '\\0' ) { * str = '\\\\' ; } if ( * str == '\\0' ) { * end_start = '\\0' ; if ( * str == '\\0' || * end_start == '\\0' ) { * str = '\\\\' ; } else if ( * str == '\\0' || * str == '\\\\' || * end_start == '\\\\' ) continue ; } end_start = 0 ; if ( str == '\\0' || * end_start == '\\0' ) { char * str = 0 ; end_start = 0 ; if ( * str == '\\0' || * end == '\\0' ) { * end_start = 0 ; } else if ( str == '\\0' || * end_start == '\\0' ) { * err = '\\\\' ; end_start ++ ; } else if ( str == '\\0' || * end_start == '\\\\' ) { * end_start = 0 ; return 0 ; } if (",0
565,"<S2SV_ModStart> * m, size_t <S2SV_ModEnd> bufsize ) { <S2SV_ModStart> * buf, <S2SV_ModEnd>, & buf",0
566,<S2SV_ModStart> dd ) { <S2SV_ModEnd> return 0 ;,0
567,,0
568,<S2SV_ModStart> pcrypt_free ( struct aead_instance <S2SV_ModEnd> * inst ) <S2SV_ModStart> * ctx = aead_instance_ctx <S2SV_ModEnd> ( inst ),1
569,,0
570,"<S2SV_ModStart> } if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if (",1
571,<S2SV_ModStart> icmp6_hop_limit ) { if ( <S2SV_ModEnd> ra_msg -> icmph <S2SV_ModStart> icmp6_hop_limit ) { ra_msg -> icmph. hop_limit = ra_limit ; } <S2SV_ModEnd> if ( rt,0
572,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
573,<S2SV_ModStart> * up ; int ulen ; <S2SV_ModStart> rp ) ; ulen = xfrm_replay_state_esn_len ( up ) ; if ( nla_len ( rp ) < ulen || <S2SV_ModEnd> xfrm_replay_state_esn_len ( replay_esn <S2SV_ModStart> replay_esn )!= ulen <S2SV_ModEnd> ) return -,1
574,"<S2SV_ModStart> int ret = proc_dointvec_minmax <S2SV_ModEnd> ( table,",1
575,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",1
576,<S2SV_ModStart> opj_calloc ( size_t ) ( <S2SV_ModStart> -> numlayers + 1U <S2SV_ModEnd> ) * l_step_l,0
577,"<S2SV_ModStart> name ), ""crypto-%s"" <S2SV_ModEnd>, name )",1
578,"<S2SV_ModStart> ( kvm, i <S2SV_ModEnd> ) ) return",0
579,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> -> common ; MACROBLOCK * const xd = & td <S2SV_ModEnd> -> common ; <S2SV_ModStart> -> common ; MACROBLOCKD * const xd = & xd -> mi_row, mi_row, mi_row, xd -> mi_col, mi_col, int mi_col, mi_col, xd -> mi_col, mi_col, xd -> mi_col, xd -> mi_cols_col, xd <S2SV_ModEnd> ) ; int <S2SV_ModStart> mi_col ) { int <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> cpi -> <S2SV_ModStart> ( cpi -> tile_data -> tile_data <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( cpi -> tile_data <S2SV_ModEnd> ) { int <S2SV_ModStart> mi_row, mi_cols <S2SV_ModEnd>, cpi -> <S2SV_ModStart> mi_col ) ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> mi_col, & cpi -> tile_data -> tile_data <S2SV_ModEnd> ) ; }",0
580,"<S2SV_ModStart> 1 ) ; if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf = opipe",1
581,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
582,<S2SV_ModStart> } else { # endif,0
583,"<S2SV_ModStart> * tmpname, fd = NULL <S2SV_ModEnd> ) ; if",0
584,<S2SV_ModStart> blkg ) ) <S2SV_ModEnd> return PTR_ERR ( <S2SV_ModStart> blkg ) ; <S2SV_ModEnd> q -> root_blkg,1
585,<S2SV_ModStart> ; if ( bpp == 1 && <S2SV_ModStart> else if ( bpp == 8 &&,1
586,"<S2SV_ModStart> ; krb5_data rspac ; const char * tgt_realm = krb5_principal_get_realm ( context, krbtgt -> entry. principal ) <S2SV_ModStart>, cp, tgt_realm,",1
587,<S2SV_ModStart> mnt ) ; nd -> last_type = LAST_BIND ;,1
588,"<S2SV_ModStart> struct usbdevfs_connectinfo ci ; memset ( & ci, 0, sizeof ( ci ) ) ; ci <S2SV_ModEnd>. devnum = <S2SV_ModStart> dev -> devnum ; ci <S2SV_ModEnd>. slow = <S2SV_ModStart> speed == USB_SPEED_LOW <S2SV_ModEnd> ; if (",1
589,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * opt <S2SV_ModStart> * opt ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> opt.",0
590,<S2SV_ModStart> args -> rmtvaluelen <S2SV_ModEnd> ) ; args,0
591,<S2SV_ModStart> ) break ; size_t devicePathLen = 0 ; <S2SV_ModStart> -> devicePathLen = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) break ; if ( devicePathLen < sizeof ( devicePathLen ) || ( devicePathLen < 4 ) || ( devicePathLen < 4 ) || ( WCHAR * sizeof ( devicePathLen ) ) ) { <S2SV_ModStart> ) break ; } <S2SV_ModStart> ) ) { if (! readBuffer ) return 0 ; },0
592,<S2SV_ModStart> error = - 1,0
593,"<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> d ; uint16_t <S2SV_ModStart> ) ) ; if ( d >= sizeof ( d -> dev ) ) return - 1 ; if ( dlen > sizeof ( d -> dev ) ) { dev_err ( & d -> dev, ""Too <S2SV_blank> failed."" ) ; goto done ; } <S2SV_ModStart> ) ; if ( plen <S2SV_ModEnd> ) ; dprintf",0
594,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } if (,0
595,<S2SV_ModStart> ; x += 4 <S2SV_ModEnd> ) { index,1
596,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
597,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> skb -> opt_stats,0
598,"<S2SV_ModStart> 0 ) { if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""UnexpectedEndOfFile"" ) ;",0
599,"<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( bp [ 0 ], sizeof ( bp ) ) ;",0
600,,0
601,<S2SV_ModStart> ; if ( task <S2SV_ModEnd> ) return 0,0
602,<S2SV_ModStart> <= w - ( int ),1
603,<S2SV_ModStart> page ) ; <S2SV_ModEnd> memset ( addr,1
604,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,0
605,,0
606,"<S2SV_ModStart> * priv ; if (! port -> interrupt_out_urb ||! port -> interrupt_in_urb ) { dev_err ( & port -> dev, ""required <S2SV_blank> endpoint <S2SV_blank> is <S2SV_blank> missing\\n"" ) ; return - ENODEV ; }",1
607,"<S2SV_ModStart> ) ) ; memset ( & dd, 0, sizeof ( sd ) ) ;",0
608,<S2SV_ModStart> -> device_data ; cancel_autoload_drivers ( ) ;,1
609,"<S2SV_ModStart> char * name <S2SV_ModEnd>, void *",0
610,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> p == q ) || ( <S2SV_ModEnd> size < 16 <S2SV_ModStart> size > 256 ),0
611,"<S2SV_ModStart> uint dblocks = xfs_attr3_rmt_blocks <S2SV_ModEnd> ( mp,",1
612,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
613,,0
614,<S2SV_ModStart> ] == EOF || text [ 1 ] == 0,0
615,"<S2SV_ModStart> } else { <S2SV_ModEnd> http_request ( c <S2SV_ModStart>, c ) ; } <S2SV_ModEnd> if (!",0
616,"<S2SV_ModStart> vp9_fdct4x4_add_c ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart>, input, tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> 16 ] ; tran_low_t <S2SV_ModEnd> out [ 4 <S2SV_ModStart> ++ j ) out <S2SV_ModEnd> ; } <S2SV_null>",0
617,,0
618,"<S2SV_ModStart> fh_dentry ) ; error = fh_want_write ( fh ) ; if ( error ) <S2SV_ModEnd> goto out_errno ; <S2SV_ModStart> goto out_errno ; fh_lock ( fh ) ; error = set_posix_acl ( inode, ACL_TYPE_ACCESS <S2SV_ModEnd>, argp ->",0
619,<S2SV_ModStart> * ue ; if <S2SV_ModEnd> ( tree_root == <S2SV_ModStart> == NULL ) return 0,1
620,"<S2SV_ModStart> const char * fp, const char * name <S2SV_ModEnd> ) { int <S2SV_ModStart> ; fp = safe_mount ( <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ; if (! fp ) goto out ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } if (",0
621,<S2SV_ModStart> elen ) ; elen += sizeof ( struct pathComponent ) ; <S2SV_ModStart> > 0 ) { elen += pc -> lengthComponentIdent ; break ; } <S2SV_ModEnd> case 2 :,0
622,<S2SV_ModStart> ( dp [ 4 <S2SV_ModEnd> ] ) ;,0
623,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr ) ;,0
624,"<S2SV_ModStart> ( ctxt, 0",0
625,<S2SV_ModStart> ; bool slow <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ; * addr_len = sizeof ( * sin ) ;,1
626,"<S2SV_ModStart> len ) { <S2SV_ModEnd> if (! <S2SV_ModStart> } while ( len ) { u_int pdu_len = <S2SV_ModEnd> rpki_rtr_pdu_print ( ndo <S2SV_ModStart> ( ndo, pptr, len, 8 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
627,"<S2SV_ModStart> int tagval ; struct stream packet ; <S2SV_ModStart> return False ; packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_tsrequest(), <S2SV_blank> consume <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> return False ; s_check_rem ( s, length ) ;",0
628,"<S2SV_ModStart> 0 ; const u_int i ; int offset, max_offset ; if ( ( ndo_snapend - 1 )!= NULL ) return ( NULL ) ; offset = ( NULL ) - 1 ) ; if (! ND_TTEST2 ( * cp, i ) ) return ( - 1 ) ; max_offset = ( ndo, 0 ) ; if ( ( ndo_snapend - 1 ) == ( NULL ) ) return ( NULL ) ; if ( ( ndo_snapend - 1 ) < sizeof ( * l ) ) return ( NULL ) ; offset = * l ; i ++ ) { if (! ( ndo_snapend ) & INDIR_MASK ) ) { if (! ( i & INDIR_MASK ) & INDIR_MASK ) ) return ( - 1 ) ; } if ( offset >= max_offset ) { if ( ( ( i & 0 )!= 0 ) { ND_PRINT ( ( ndo, ""%s"" ) & INDIR_MASK ) & 0x3BITS ( ndo, 1 ) ) ; return ( - 1 ) ; } if ( offset >= max_offset ) { ND_PRINT ( ( ( n",0
629,"<S2SV_ModStart>, args -> rmtvaluelen <S2SV_ModEnd> ) ; error <S2SV_ModStart> = args -> rmtvaluelen <S2SV_ModEnd> ; while (",1
630,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
631,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ( src, dest <S2SV_ModEnd> ) ; unlink",0
632,"<S2SV_ModStart> fco ) ; memset ( fc, 0, sizeof ( fc ) ) ;",0
633,"<S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 0.0f,",0
634,"<S2SV_ModStart> PKT_LEN_SIZE ) { giterr_set_str ( GITERR_NET, ""Invalid <S2SV_blank> empty <S2SV_blank> packet"" ) ; return GIT_ERROR <S2SV_ModEnd> ; } if",1
635,<S2SV_ModStart> ; if ( vma -> vm_flags & VM_SHARED ) return VM_FAULT_SIGBUS ; if (,1
636,<S2SV_ModStart> = src -> sasl_username <S2SV_ModEnd> ; if (,0
637,<S2SV_ModStart> env -> insn_aux_data ; int i <S2SV_ModStart> ) ) ; for ( i = off ; i < off + cnt - 1 ; i ++ ) new_data [ i ]. seen = true ;,1
638,<S2SV_ModStart> ; ND_TCHECK ( * dp <S2SV_ModEnd> ) ; if,1
639,<S2SV_ModStart> trunc ; } ND_TCHECK_16BITS ( & bp [ i + 2 ] ) ;,1
640,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi ->,0
641,"<S2SV_ModStart> 0 ) { if <S2SV_ModEnd> (! <S2SV_ModStart>, rowsize ) ) return 0",0
642,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteCanonEntry ) ) ;",0
643,<S2SV_ModStart> ; if ( ctx -> terminated ||,1
644,<S2SV_ModStart> = NULL ; if ( sbi -> spool ) hugepage_put_subpool ( sbi -> spool ) ;,1
645,"<S2SV_ModStart> error = """" <S2SV_ModEnd> ; if (",0
646,"<S2SV_ModStart> int i, size_t <S2SV_ModEnd> out, int <S2SV_ModStart> out ) { size_t <S2SV_ModEnd> strlen ( o <S2SV_ModStart> ) ; } <S2SV_ModEnd> strcmp ( o",0
647,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
648,"<S2SV_ModStart> ( ) ; iov_iter_advance ( i, copied ) ; <S2SV_ModStart> again ; } <S2SV_ModEnd> pos += copied",1
649,<S2SV_ModStart> unlikely ( len + ring -> frameoffset,1
650,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
651,"<S2SV_ModStart> ( obj, <S2SV_ModEnd> name, &",0
652,<S2SV_ModStart> next ) { if (! sub ) return A ;,0
653,<S2SV_ModStart> src < zsize + ( sub_type!= 2 ) <S2SV_ModStart> bits ) { if ( src >= src_end ) return AVERROR_INVALIDDATA ;,1
654,<S2SV_ModStart> q ) ; spin_lock ( & q -> lock ) ;,0
655,<S2SV_ModStart> id_len ) { <S2SV_ModEnd> if ( optlen,0
656,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
657,<S2SV_ModStart> timer_lock ) ; spin_lock ( & timer -> timer_lock ) ; <S2SV_ModStart> list_del_init ( & timer -> timer_list ) ; spin_unlock ( & timer -> lock ) ;,0
658,<S2SV_ModStart> len ; } ND_TCHECK ( p [ 2 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT,1
659,"<S2SV_ModStart> -> arch ; <S2SV_ModEnd> char * arch <S2SV_ModStart> * arch = strdup ( info -> arch ) ; char * cpu = info -> cpu? strdup ( info -> cpu ) : NULL <S2SV_ModEnd> ; ut8 * <S2SV_ModStart> ; if ( <S2SV_ModEnd> cpu && * <S2SV_ModStart>, arch ) ; free ( arch",0
660,"<S2SV_ModStart> sas_probe_devices ( struct asd_sas_port * port <S2SV_ModEnd> ) { struct <S2SV_ModStart>, * n <S2SV_ModEnd> ; list_for_each_entry (",1
661,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
662,"<S2SV_ModStart> gint64 offset ; <S2SV_ModEnd> char line [ <S2SV_ModStart> line [ NETSCREEN_LINE_LENGTH <S2SV_ModEnd> ] ; offset <S2SV_ModStart> return FALSE ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! parse_netscreen_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart> wth -> fh <S2SV_ModEnd>, & wth <S2SV_ModStart> wth -> frame_buffer, line",1
663,<S2SV_ModStart> 0 ) ; if ( <S2SV_ModStart>. seq_num ) < 0 ) return - 1,1
664,<S2SV_ModStart> ; uint32_t width <S2SV_ModEnd> ; if (,0
665,"<S2SV_ModStart> : ret = - EOPNOTSUPP ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = <S2SV_ModStart> == 0 ) ret = <S2SV_ModEnd> key -> type <S2SV_ModStart> type -> read ( key, buffer, buflen ) ; up_read <S2SV_ModEnd> ( & key <S2SV_ModStart> sem ) ; <S2SV_ModEnd> } error2 :",1
666,<S2SV_ModStart> == 0 ) { <S2SV_ModStart> return 1 ; },0
667,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",1
668,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,0
669,<S2SV_ModStart> page ) ; rm -> atomic. op_active = 0 ;,1
670,<S2SV_ModStart> info * si <S2SV_ModEnd> ; pr_err (,0
671,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = 0 <S2SV_ModStart> ) ) ; msg -> msg_namelen = sizeof ( * sin ) ;",0
672,"<S2SV_ModStart> sizeof ( spath ) ) return - 1 ; if ( strstr ( name, "".."" ) || strchr ( name, '/'",1
673,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
674,"<S2SV_ModStart> -> bcache, cache_id ( <S2SV_ModStart> ] -> data )",1
675,<S2SV_ModStart> objp ) ; * objp = NULL ;,1
676,"<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
677,<S2SV_ModStart> return 1 ; consume_skb ( skb ) ; return 0 <S2SV_ModEnd> ; } if,1
678,<S2SV_ModStart> px_size ) ; <S2SV_ModEnd> return - EINVAL,0
679,<S2SV_ModStart> int err ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
680,<S2SV_ModStart> p ) { if ( p >= p ) return 0 ;,0
681,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> } if (! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if (",1
682,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
683,<S2SV_ModStart> 1 ) ; if ( strlen ( line ) == 0 ) return - 1 ;,1
684,<S2SV_ModStart> ; uid -> status = NULL <S2SV_ModEnd> ; if (,0
685,<S2SV_ModStart> ++ ) { if ( band -> prec ) { <S2SV_ModStart> ) ; } },1
686,<S2SV_ModStart> < 0 ) { xmlFreeInputStream ( input ) ; return ; } <S2SV_ModEnd> if ( entity,1
687,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart>, & final ) ; rcu_read_unlock ( <S2SV_ModStart> -> ir_v6_rmt_addr ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ), <S2SV_ModEnd> np -> tclass <S2SV_ModStart> np -> tclass ) ; rcu_read_unlock (",1
688,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> cpi -> frame_mode <S2SV_ModStart> ) { return VP9_COMP * const MACROBLOCKD * const xd = & cpi -> seg ; if ( cpi -> oxcf. mode_mode == 2 ) { MODE_MODE_INFO * const frame_mode = & cpi -> seg. sf_mode ; } else if ( cpi -> oxcf. mode_mode == 2 ) { LOCK_MODE_INFO * const frame_mode = & cpi -> sf_mode ; cpi -> oxcf. mode_mode ; break ; } <S2SV_ModEnd> if ( cpi <S2SV_ModStart> ) ) { if ( cpi -> oxcf. mode_mode == 2 ) { cpi -> oxcf. mode_mode == 2 && cpi -> oxcf. mode_mode == 2 ) { continue ; } else { if ( cpi -> oxcf. mode == 1 && cpi -> frame_mode == 1 ) continue ; } else if ( cpi -> oxcf. frame_mode == 2 ) { LOWER_MODE_PREDICTION_MODE mode = 1 ; },0
689,"<S2SV_ModStart> ( u32 size, u32 num ) { if ( size > UINT32_MAX / num ) { return NULL ; } <S2SV_ModEnd> return malloc ( <S2SV_ModStart> malloc ( size * num",1
690,<S2SV_ModStart> else if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1 <S2SV_ModStart> { if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1,1
691,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,1
692,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } if,0
693,"<S2SV_ModStart> scn, root_storage <S2SV_ModEnd> ) ) <",1
694,<S2SV_ModStart> info info = NULL <S2SV_ModEnd> ; if (,0
695,<S2SV_ModStart> (! eof && vars -> str. c!= vars -> ptr,1
696,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
697,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
698,"<S2SV_ModStart> -> _eip ; rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val ) ; if ( rc!= X86EMUL_CONTINUE ) break",0
699,"<S2SV_ModStart> size_t len, false",0
700,"<S2SV_ModStart> void * end <S2SV_ModEnd> ; void * <S2SV_ModStart> ) ) { void * dbuf = NULL ; void * ticket_buf ; void * ticket_buf ; void * ticket_buf ; <S2SV_ModStart>, end, & end <S2SV_ModEnd> ) ; if <S2SV_ModStart> bad ) ; kfree ( dbuf ) ;",0
701,"<S2SV_ModStart> count ) ; if ( pcount > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", inode ) ) ;",0
702,<S2SV_ModStart> prev_rq ) <S2SV_ModEnd> return error ;,0
703,<S2SV_ModStart> = 0 ; if ( s -> session -> session_flags & ( s -> session_ctx -> session_id_sess ) ) { SSL_SESSION_SESS_SESSION * s -> session_sess ; if ( i & s -> session_sess ; s -> session_id_sess = 0 ; i < 0 ) { s -> session_SESSION_SESSION_SESS_SESSION_SESSION_SESS_SESSION_SESSION_SESSION_SESS_SESSION_SESS ; if ( s -> session_sess == 0 ) { if ( i & SSL_SESSION_SESSION_SESSION_FAILURE ) { if ( s -> session_ctx -> session_sess = s -> session_ctx -> session_sess ; goto s -> session_ctx -> session_id_sess ; } else { if ( i & SSL_SESSION_SESSION_SESSION_SESSION_SESSION_SESSION_SESSION_SESSION_SESSION_SESSION_SESSION_NULL ) ) { s -> session_sess = s -> session ; s -> session_sess ; s -> session_s,0
704,"<S2SV_ModStart> ; r = safe_calloc ( <S2SV_ModEnd>, r )",0
705,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> if (!,0
706,<S2SV_ModStart> NULL ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_FIELD_REF,0
707,<S2SV_ModStart> command ) ; if ( cmd -> cmd!= NULL ) return,0
708,"<S2SV_ModStart>, annotation, bool type_comment, <S2SV_ModStart> n_comment ) ; string type_comment ; <S2SV_ModStart> } if ( has_type_comment ) { type_comment = NEW_TYPE_COMMENT ( CHILD ( n, 0 ) ) ; if (! type_comment ) return NULL ; } if (",0
709,<S2SV_ModStart> err = 0 ; if (! net_eq ( sock_net ( sk ) ) ) return - EINVAL,0
710,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
711,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,1
712,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
713,<S2SV_ModStart> -> rows = 1 <S2SV_ModEnd> ; image -> <S2SV_ModStart> ( BImgBuff ) <S2SV_ModEnd> ; break ;,1
714,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> == 0 ) rc = <S2SV_ModStart> ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>,0
715,,1
716,<S2SV_ModStart> ret ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
717,"<S2SV_ModStart> ( psf -> header. indx, psf -> header. indx, psf_bump_header_allocation ( psf -> header. indx, psf -> header. indx <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( psf -> header. indx, psf -> header. indx <S2SV_ModEnd> ) ) { <S2SV_ModStart> psf -> header. end <S2SV_ModEnd> ) ; } <S2SV_ModStart> = psf -> header. end <S2SV_ModEnd> ; if <S2SV_ModStart> ( psf -> header. end <S2SV_ModEnd> < psf -> <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ) ) { <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> += psf -> header. end <S2SV_ModStart> = psf -> header. indx <S2SV_ModEnd> ; } <S2SV_null>",0
718,<S2SV_ModStart> out_mutex ; } ext4_inode_block_unlocked_dio ( inode ) ; inode_dio_wait ( inode ) ; down_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart> ioffset ) ; <S2SV_ModEnd> credits = ext4_writepage_trans_blocks <S2SV_ModStart> ) ; goto out_mmap <S2SV_ModEnd> ; } down_write <S2SV_ModStart> handle ) ; out_mmap : up_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModEnd> ext4_inode_resume_unlocked_dio ( inode,1
719,"<S2SV_ModStart> uint32_t * track_size <S2SV_ModEnd> ; uint32_t * <S2SV_ModStart> uint8_t * midi_data <S2SV_ModEnd> ; uint32_t * <S2SV_ModStart> = * midi_val <S2SV_ModEnd> ; midi_data <S2SV_ModStart> ( midi_val <S2SV_ModEnd> = * midi_val <S2SV_ModStart> ( midi_data <S2SV_ModEnd> ) ; track_size <S2SV_ModStart> ( midi_data, track_size <S2SV_ModEnd> ) ; track_size <S2SV_ModStart> ( midi_size < tmp_val <S2SV_ModEnd> ) { uint8_t",0
720,"<S2SV_ModStart> = max_t ( int <S2SV_ModEnd>, val * <S2SV_ModStart> = max_t ( int <S2SV_ModEnd>, val *",1
721,<S2SV_ModStart> * bh ; unsigned int table_len ; <S2SV_ModStart> -> b_data ; table_len = le32_to_cpu ( lvd -> s_blocksize ) ; if ( sizeof ( * lvd ) + table_len > sb -> s_blocksize ) goto out_err ;,0
722,"<S2SV_ModStart> long n ; image = 0 ; info = 0 ; <S2SV_ModStart> ""cannot <S2SV_blank> get <S2SV_blank> header\\n"" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ""cannot <S2SV_blank> decode <S2SV_blank> info\\n"" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> info -> depth ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> 0 ; } JAS_CAST ( long ), JAS_CAST ( long, ( long ) ) ;",0
723,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> dev ), func <S2SV_ModEnd>, line, <S2SV_ModStart> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"", func <S2SV_ModEnd>, line,",1
724,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
725,"<S2SV_ModStart> g_tv_comment, FILENAME_COMMENT, 0",0
726,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int error =,0
727,,0
728,"<S2SV_ModStart>, extent, height, <S2SV_ModStart> ""UnableToReadImageData"" ) ; <S2SV_ModEnd> height = sun_info <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; if ( sun_info. type == RT_ENCODED ) <S2SV_ModStart> sun_data ) ; <S2SV_ModEnd> p = sun_pixels",0
729,"<S2SV_ModStart>, krb5_principal client_principal, const char * tgt_realm <S2SV_ModStart> principal ), tgt_realm <S2SV_ModEnd> ) ; if",1
730,<S2SV_ModStart> = MagickFalse ; break <S2SV_ModEnd> ; } image,0
731,<S2SV_ModStart> ; newinet -> inet_opt <S2SV_ModEnd> = ireq ->,1
732,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
733,"<S2SV_ModStart>!= 0 ) { int tend_off = skb_transport_offset ( skb ) + tlen ; <S2SV_ModStart> ( csum, skb_checksum ( skb, tend_off, <S2SV_ModEnd> offset, 0 <S2SV_ModStart> ) ) ; }",1
734,"<S2SV_ModStart> pfn, page_size >> PAGE_SHIFT",0
735,<S2SV_ModStart> 0x00 } ; if ( cmd -> msg_len > sizeof ( b ) - 4 ) return - EINVAL ;,1
736,<S2SV_ModStart> perf_event_context * ctx ; ctx = perf_event_ctx_unlock <S2SV_ModEnd> ( event ) <S2SV_ModStart> event ) ; perf_event_ctx_unlock ( event ) ; } <S2SV_ModEnd> } <S2SV_null>,0
737,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ; return ( <S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 8 ; return <S2SV_ModEnd> value & 0xffffffff <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ; return (,0
738,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> uid_out_nid_i <S2SV_ModEnd> i * nid <S2SV_ModStart> ; bool ret = true <S2SV_ModEnd> ; bool ret = <S2SV_ModStart> ) ) goto err_out_free_nid ; err = - EINVAL ; spin_lock_lock_lock <S2SV_ModEnd> ; goto err <S2SV_ModStart> ) ) ) goto err_unlock ; err = - EINVAL ; if ( nm_i -> nid_i -> nid_list ) goto err_out ; err_free_nid = true ; err_out : spin_unlock ( & e, nid_lock ) ; if ( err ) goto err_out ; err_free_nid_out ; err_out : kfree ( nm_nid ) ; err_out : spin_unlock ( & nm_nid_lock ) ; err = true ; err_tree_out : spin_unlock ( & nm_i -> nid_lock ) ; if ( err ) ) goto err_out ; err :",0
739,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int i ; # if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> flags & VPX_CODEC_ERROR_HIGHBITDEPTH ) { ctx -> cfgfn = 0 ; <S2SV_ModStart>, flags & VPX_CODEC_ERROR_TH )? ctx -> cfgid : 0 ; # endif",0
740,"<S2SV_ModStart> ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> ++ cons ; netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> extra. type ) ; netbk_fatal_tx_err ( vif",1
741,<S2SV_ModStart> ) ) ; hdr -> sadb_msg_reserved = 0 ;,1
742,"<S2SV_ModStart> ) return ; memset ( & r1, 0, sizeof ( r1 ) ) ;",1
743,"<S2SV_ModStart>, l ; luaL_argcheck ( L, 3, ""offset <S2SV_blank> too <S2SV_blank> short"" ) ; luaL_arg ( L, size_t <S2SV_ModEnd> size <= 0 <S2SV_ModStart> size - 1 <S2SV_ModEnd> ) ; lua_arg",0
744,"<S2SV_ModStart> 0 ) { ND_TCHECK2 ( * tptr, sizeof ( * tptr ) ) ;",0
745,<S2SV_ModStart> -> data ; unsigned <S2SV_ModStart> body -> unit_size || len < sizeof ( struct oz_multiple_fixed ) - 1 <S2SV_ModStart> ( len - ( <S2SV_ModStart> struct oz_multiple_fixed ) - 1 ) <S2SV_ModEnd> ) / body,1
746,<S2SV_ModStart> ) return ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
747,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ( src, dest, <S2SV_ModEnd> ) ; if",0
748,"<S2SV_ModStart>, uid, size <S2SV_ModEnd> ) ; if",0
749,<S2SV_ModStart> return res ; <S2SV_ModEnd> return 0 ;,1
750,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> ) ; } ext_size = sizeof ( struct ext4_extent_header ) + sizeof ( struct ext4_extent ) * le16_to_cpu ( neh -> eh_entries ) ; memset ( bh -> b_data + ext_size, 0, 0, sizeof ( struct ext4_extent ) ) ;",0
751,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
752,<S2SV_ModStart> ; cmap_len = get_tga_ushort <S2SV_ModEnd> ( & tga,0
753,<S2SV_ModStart> ; ssize_t ret ; if ( WARN_ON_ONCE (! ib_safe_file_access ( filp ) ) ) return - EACCES,1
754,"<S2SV_ModStart> cpup, timespec <S2SV_ModEnd> ) ; }",0
755,<S2SV_ModStart> ; uint32 nstrips <S2SV_ModEnd> ; nstrips =,1
756,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = 0 <S2SV_ModStart> ) ) ; msg -> msg_namelen = sizeof ( * sin ) ;",0
757,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
758,<S2SV_ModStart> ; int error = 0 <S2SV_ModStart> &= PAGE_MASK ; if ( address < mmap_min_addr ) return - EPERM <S2SV_ModEnd> ; prev =,1
759,"<S2SV_ModStart> { umode_t mode <S2SV_ModEnd> ; error = <S2SV_ModStart> ; error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & mode <S2SV_ModStart>, & mode, & acl <S2SV_ModStart> if ( error <S2SV_ModEnd> ) return error <S2SV_ModStart> return error ; <S2SV_ModEnd> error = xfs_set_mode",1
760,"<S2SV_ModStart>, int optional, const char * rootfs <S2SV_ModStart> endif if ( safe_mount <S2SV_ModEnd> ( fsname, <S2SV_ModStart> MS_REMOUNT, data, rootfs",0
761,"<S2SV_ModStart> ; if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if (",0
762,"<S2SV_ModStart> it_overrun = - 1LL <S2SV_ModEnd> ; ++ timr <S2SV_ModStart> info -> si_overrun = timer_overrun_to_int ( timr, info -> si_overrun ) <S2SV_ModEnd> ; } unlock_timer",1
763,<S2SV_ModStart> ) return 0 <S2SV_ModEnd> ; if (,0
764,<S2SV_ModStart> struct static_key * once_key <S2SV_ModEnd> ) { static <S2SV_ModStart> ; __net_random_once_disable_jump ( once_key <S2SV_ModEnd> ) ; return,1
765,<S2SV_ModStart> -> io_data ; if ( kiocb -> ki_has_eventfd && kiocb -> ki_eventfd > kiocb -> ki_eventfd ) ret = - EFAULT ; if ( io_has_eventfd ( io_data -> kiocb ) ) { ret = - EFAULT ; goto error_eventfd ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ki_eventfd ) <S2SV_ModEnd> ; if (,0
766,<S2SV_ModStart> ; if ( IPCB ( skb ) -> flags & IPSKB_DOREDIRECT <S2SV_ModEnd> &&! opt,1
767,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
768,"<S2SV_ModStart> struct trusted_key_payload * p ; struct trusted_key_payload * new_p ; struct trusted_key_p ; char * new_key = NULL ; int ret ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) return - ENOKEY ;",0
769,"<S2SV_ModStart> v |= ( JAS_CAST ( uint_fast32_t, c ) <S2SV_ModEnd> << 24 )",1
770,<S2SV_ModStart> NULL ) { if ( skb -> len < ROSE_MIN_LEN ) { kfree_skb ( skb ) ; continue ; } <S2SV_ModEnd> if ( skb,0
771,<S2SV_ModStart> (! npages || base_gfn!= old. base_gfn,0
772,<S2SV_ModStart> ; if ( newaddr == NULL ) return - EINVAL ; if (,0
773,<S2SV_ModStart> ; if ( name_len < 0 ) return - EINVAL ; if (,0
774,"<S2SV_ModStart> char * buff ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } buff",1
775,"<S2SV_ModStart> } if ( data_body == NULL && in_bio == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_NO_CONTENT ) ; goto err ; } if ( <S2SV_ModStart> } if ( <S2SV_ModEnd> in_bio!= NULL <S2SV_ModStart>!= NULL ) <S2SV_ModEnd> { bio =",1
776,<S2SV_ModStart> server. ds <S2SV_ModEnd> ) ; },0
777,"<S2SV_ModStart> } if ( options -> flags & ( UV_PROCESS_SETUID | UV_PROCESS_SETGID ) ) { SAVE_ERRNO ( setgroups ( 0, NULL ) ) ; } if (",1
778,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> EOPNOTSUPP ; } if ( rlen > MAX_SIZE ) { ret = - EOPNOTSUPP ; goto out ; } <S2SV_ModEnd> ret = d,0
779,<S2SV_ModStart> ; client -> protocol == NULL <S2SV_ModEnd> ) ; client,0
780,<S2SV_ModStart> book -> dim && i < n,1
781,"<S2SV_ModStart> r ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f"", r ) ; sendClean ( r ) ; }",0
782,<S2SV_ModStart> == - EEXIST || ret == - EOVERFLOW,1
783,<S2SV_ModStart> fp ) ; spin_lock ( & unix_gc_lock ) ; <S2SV_ModStart> unix_sk ( s <S2SV_ModEnd> ) ; fp <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
784,"<S2SV_ModStart> size_t chanmap_size = SF_MIN ( <S2SV_ModStart> sf. channels, layout_tag & 0xffff )",1
785,"<S2SV_ModStart> ( sf, vpx_writer <S2SV_ModEnd> ( sf ->",0
786,<S2SV_ModStart> ms ) { uint32_t <S2SV_ModEnd> nestsize = ( <S2SV_ModStart> nestsize = ( uint32_t <S2SV_ModEnd> ) ms ->,1
787,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
788,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
789,<S2SV_ModStart> -> xrefs = safe_calloc ( <S2SV_ModEnd> sizeof ( xref_t,1
790,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
791,"<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ) <S2SV_ModStart> ( opt ) { atomic_sub ( <S2SV_ModEnd> opt -> tot_len <S2SV_ModStart> opt -> tot_len, & sk -> sk_omem_alloc ) ; txopt_put ( opt <S2SV_ModEnd> ) ; }",0
792,"<S2SV_ModStart>, * tmpout <S2SV_ModEnd> ; if ( <S2SV_ModStart> = cms = NULL ; <S2SV_ModEnd> if (!",0
793,"<S2SV_ModStart> ( sk ) { struct ip_options_rcu * opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference ( sk, sock_owned_by_user ( sk ) ) ; <S2SV_ModEnd> break ; case",0
794,<S2SV_ModStart> sock_op ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> if ( sctp_default_acl_register <S2SV_ModEnd> ) ) ;,0
795,<S2SV_ModStart> cs_flags ) ; hook_del_nick_can_register ( me -> conf_flags ) ;,0
796,<S2SV_ModStart> ) { struct in_device * idev <S2SV_ModEnd> = ( ( <S2SV_ModStart> netdev -> netdev <S2SV_ModEnd> ) ; struct <S2SV_ModStart> netdev_notifier_info info ; if ( idev -> dead ) return 0,0
797,<S2SV_ModStart> -> page_buff ; unsigned int done ; <S2SV_ModStart> ) ) ; goto out <S2SV_ModEnd> ; },0
798,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
799,"<S2SV_ModStart> val ) { int temp_size = 500 ; char * temp = malloc ( temp_size ) <S2SV_ModEnd> ; int i <S2SV_ModStart> ; ) { if ( i >= temp_size ) { temp_size *= 2 ; temp = realloc ( temp, temp_size ) ; }",1
800,<S2SV_ModStart> task ) { <S2SV_ModEnd> del_timer ( & <S2SV_ModStart> -> timer ) <S2SV_ModEnd> ; complete (,1
801,<S2SV_ModStart> ; dname = safe_calloc <S2SV_ModEnd> ( strlen (,0
802,<S2SV_ModStart> == 1 ) <S2SV_ModEnd> return 1 ;,0
803,<S2SV_ModStart> object + size < * object || * object + size,0
804,"<S2SV_ModStart> ( interface, KSZ8851_MAHTR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_PTR <S2SV_ModEnd> ) ) ;",0
805,<S2SV_ModStart> all_channels_lock ) ; put_net ( pch -> chan_net ) ; pch -> chan_net = NULL ;,1
806,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> btrfs_item * di = NULL <S2SV_ModEnd> ; struct btrfs_item <S2SV_ModStart> - ENOMEM ; if ( flags & XATTR_REPLACE ) { ret = - 1 ; goto out ; } if ( flags & XATTR_REPLACE ) { ret = - ENOMEM ; goto out ; } ret = btrfs_get_item ( path, name, name, name, name, name, - 1 ) ; if (! path ) { ret = - ENOMEM ; goto out ; } if ( flags & XATTR_REPLACE ) { ret = - ENOMEM ; goto out ; } ret = btrfs_get_item ( path, name, name, name, name, name, name, 0 ) ; } ret = - ENODATA ; if (! path ) goto out ; } if ( flags & XATTR_REPLACE ) { if ( ret ) goto out ; } ret = btrfs_get_item <S2SV_ModEnd> ( path, <S2SV_ModStart>, path, path, name <S2SV_ModEnd> di ) ;",0
807,"<S2SV_ModStart> count ) ; char * txt = op -> txt ; int txtLen = strlen ( op -> txt ) ; int txtLeft = R_ASM_BUFSIZE - txtLen ; txt += txtLen ; <S2SV_ModStart> < count && txtLen <S2SV_ModEnd> + 10 < <S2SV_ModStart> ++ ) { snprintf ( txt, txtLeft <S2SV_ModEnd>, ""%d <S2SV_blank> "",",0
808,"<S2SV_ModStart> client -> proxy ) ; g_byte_array_free ( client -> auth_buffer, TRUE",1
809,"<S2SV_ModStart> x, x -> plane [ 0 ]",0
810,<S2SV_ModStart> ; if ( key_is_negative ( key <S2SV_ModEnd> ) ) return,1
811,"<S2SV_ModStart> ip, t_len, 8",0
812,<S2SV_ModStart> ; if ( len < 0 ) return - EINVAL ; <S2SV_ModEnd> if ( fit,0
813,<S2SV_ModStart> { vpn_packet_t outpkt ; if ( len > sizeof outpkt. data ) return,1
814,<S2SV_ModStart> vmx_vpid_bitmap ) ; <S2SV_ModEnd> for ( msr <S2SV_ModStart> 0x83f ) ; <S2SV_ModEnd> if ( enable_ept,1
815,<S2SV_ModStart> < 1 || vstart + vstart < vstart <S2SV_ModEnd> ) { sdb_free,0
816,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1, 0 )",0
817,<S2SV_ModStart> rc ; const VP9EncoderConfig <S2SV_ModEnd> * oxcf = <S2SV_ModStart> = rc -> avg_frame_bandwidth <S2SV_ModEnd> * oxcf -> <S2SV_ModStart> -> rc -> avg_frame_bandwidth <S2SV_ModEnd> ; } else,0
818,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
819,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
820,<S2SV_ModStart> INDENT_INCR ; } if ( tbl -> indent < 0 ) tbl -> indent = 0 ; <S2SV_ModStart> -= INDENT_INCR ; if ( offset < 0 ) offset = 0 ;,1
821,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> sst -> sst_standard_stream ( h, ss <S2SV_ModEnd> * sst ->",0
822,"<S2SV_ModStart> : # line 113 <S2SV_ModEnd> ""hex_grammar.y"" { RE_AST <S2SV_ModStart> } # line 1337 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""hex_grammar.y"" { ( <S2SV_ModStart> } # line 126 ""hex_grammar.y"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""hex_grammar.y"" { incr_ast_levels ( ) ; <S2SV_ModStart> } # line 126 ""hex_grammar.c""hex_grammar.c"" break ; <S2SV_ModEnd> ""hex_grammar.y"" { incr_ast_levels ( <S2SV_ModStart> } # line 126 ""hex_grammar.c"" break ; <S2SV_ModEnd> ""hex_grammar.y"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""hex_grammar.y"" { ( <S2SV_ModStart> } # line 126 ""hex_grammar.y"" break ; <S2SV_ModEnd> ""hex_grammar.y"" break ; <S2SV_ModStart> } # line 126 ""hex_grammar.y"" { incr_ast_levels ( ) ; <S2SV_ModStart> ( ) ; <S2SV_ModEnd> ( yyval.",0
823,<S2SV_ModStart> int e ; memset <S2SV_ModEnd> ( e ;,0
824,"<S2SV_ModStart> ), NULL <S2SV_ModEnd> ) ; }",0
825,<S2SV_ModStart> ; if ( key_is_positive ( key <S2SV_ModEnd> ) ) zap,1
826,"<S2SV_ModStart> ) -> filter ; memset ( & uf, 0, sizeof ( uf ) )",1
827,"<S2SV_ModStart> ; int i ; memset <S2SV_ModEnd> ( pbi,",0
828,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> ) ; } exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
829,<S2SV_ModStart> -> peer. auth_capable = new -> peer.,0
830,"<S2SV_ModStart> ( buflen, sizeof ( void ) )",0
831,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( cc0 <S2SV_ModStart> % rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""PredictorEncodeTile"", ""%s"", ""(cc0%rowsize)!=0"" ) ; return 0 ; } <S2SV_ModEnd> while ( cc",1
832,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
833,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> input_backwards_char ( input <S2SV_ModEnd>, char * <S2SV_ModStart> input, character_size <S2SV_ModEnd> ) { int <S2SV_ModStart> input_backwards_size <S2SV_ModEnd> ) { int <S2SV_ModStart> = 0 ; size_t input_backwards_size = MAX_LIMIT_SCAN_LIMIT : input_backwards_size <S2SV_ModEnd> ( input, <S2SV_ModStart> input_word, character_size <S2SV_ModEnd> ) ; int <S2SV_ModStart> = max_bytes_size <S2SV_ModEnd> ; input_bytes_matched =",0
834,"<S2SV_ModStart> * cpi, PREDICTION_MODE <S2SV_ModEnd> best_sse = <S2SV_ModStart>, best_rd, PREDICTION_MODE <S2SV_ModEnd>, best_sse = <S2SV_ModStart>, best_sse, PREDICTION_MODE <S2SV_ModEnd>, best_sse = <S2SV_ModStart>, best_sse = UINT_MAX <S2SV_ModEnd> ; best_sse = <S2SV_ModStart>, best_rd_sse = INT_MAX <S2SV_ModEnd>, best_rd_rd, <S2SV_ModStart>, best_rd_rd, <S2SV_ModStart>, best_sse = UINT_MAX <S2SV_ModEnd> ; best_sse =",0
835,"<S2SV_ModStart> svm, AC_VECTOR ) ; set_exception_intercept ( svm, DB_VECTOR",0
836,<S2SV_ModStart> ; int errno = - 1 <S2SV_ModStart> ; if ( h -> open_file )!= 0 <S2SV_ModEnd> ) goto,0
837,"<S2SV_ModStart> sst, const cdf_directory_t * root_storage <S2SV_ModEnd> ) { cdf_summary_info_header_t <S2SV_ModStart> break ; } if ( root_storage ) { <S2SV_ModStart> = cdf_clsid_to_mime ( root_storage -> d_storage_uuid <S2SV_ModEnd>, clsid2desc ) <S2SV_ModStart> - 2 ; } <S2SV_ModStart>, count, root_storage <S2SV_ModEnd> ) ; free",1
838,<S2SV_ModStart> IVD_STREAM_WIDTH_HEIGHT_NOT_SUPPORTED ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
839,<S2SV_ModStart> -> length ) ; if ( err ) return - EFAULT,1
840,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> vpx_codec_alg_priv_t * <S2SV_ModStart> vp9_calloc ( vpx_codec_alg_priv_t * ) vpx_calloc ( ctx, VPX_CODEC_OK ) ; if ( ctx -> common. fmt == VPX_CODEC_ERROR ) { return VPX_CODEC_ERROR_INVALID_PARAM ; } <S2SV_ModStart> * ) { vpx_codec_err_alg_priv_t * ctx = ( ctx -> cfg. sz_release_buffer ) ; if ( ctx -> common. type == VPX_CODEC_LOG_ERROR ) return VPX_CODEC_ERROR <S2SV_ModEnd> ; } <S2SV_null>",0
841,<S2SV_ModStart> if ( prev && <S2SV_ModEnd> ( FRAG6_CB ( <S2SV_ModStart> > 0 ) <S2SV_ModEnd> ) goto discard_fq ; <S2SV_ModStart> if ( fq ) goto discard_fq ; <S2SV_ModEnd> FRAG6_CB ( fq,0
842,<S2SV_ModStart> { uint16 bitspersample = 1,0
843,"<S2SV_ModStart> int a ; const size_t p ; int len ; <S2SV_ModStart> ) ) { if ( a -> archive_set_error ( & a -> archive, a -> flags ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_LENOMEM ) ; assert ( a -> archive, a -> archive, ARCHIVE_ERRNO_FILE_FORMAT ) ; return ( - 1 ) ; } <S2SV_ModStart> ) ) { if ( a -> archive == ARCHIVE_ERRNO_FILE_FORMAT ) { archive_set_error ( & a -> archive, a -> archive, ARCHIVE_ERM ) ; return ( - 1 ) ; } free ( p ) ;",0
844,"<S2SV_ModStart> ; if ( safe_mount <S2SV_ModEnd> ( path,",0
845,<S2SV_ModStart> ( inode -> i_lenEAttr > bs || iinfo -> bs_lenAlloc > bs ) goto out_file ; int bs <S2SV_ModStart> ; if ( einfo -> i_lenAlloc > bs ) goto out_file ; eof ( udf_file ) ; if ( einfo -> bs ) goto out_bad <S2SV_ModEnd> ; offset =,0
846,<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( lfm ->,0
847,"<S2SV_ModStart> dst_size ) { mutex_unlock ( & data_end - 1, data_size <S2SV_ModEnd> ) ; uint32_t <S2SV_ModStart> dst ) ; mutexception_unlock ( & data_end - data_size <S2SV_ModEnd> ) ; return",0
848,"<S2SV_ModStart> ( ) ; alloc_array ( t1_line, strlen ( t1_buf_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) ; <S2SV_ModStart> t1_buf_array ) ; alloc_array ( t1_array, strlen ( t1_line, strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) + strlen ( t1_buf_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) + strlen ( t1_buf_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) + strlen ( t1_buf_array ) + strlen ( t1_buf_array, T1_BUF_SIZE ) + strlen ( t1_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) + strlen ( t1_buf_array ) + 1, t1_array ) ; alloc_array ( t1_array ) + strlen ( t",0
849,<S2SV_ModStart> fq ) ; q -> mq_ops = NULL ;,0
850,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
851,<S2SV_ModStart> sub ) { if (! strcmp ( sub ) ) return A ;,0
852,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF <S2SV_ModStart> / 2 ; if (! <S2SV_ModStart>, cc ) ) return 0 <S2SV_ModStart> wc ) ; return 1 ;",1
853,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
854,"<S2SV_ModStart> ; int err ; struct ip_options_rcu * inet_opt <S2SV_ModStart> * inet_opt ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr <S2SV_ModStart> ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr =",0
855,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
856,<S2SV_ModStart> * mgr_hdl ; <S2SV_ModEnd> memset ( s_path <S2SV_ModStart> ( c_path ) <S2SV_ModEnd> ) ; switch,0
857,<S2SV_ModStart> ( replySize < 0 || replySize,0
858,"<S2SV_ModStart> ""`%s\'"", option ) ; geometry = DestroyString ( geometry",0
859,"<S2SV_ModStart> ( sk ) { struct ip_options_rcu * opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference ( sk, sock_owned_by_user ( sk ) ) ; <S2SV_ModEnd> break ; case",0
860,"<S2SV_ModStart> n_data, key_data_len <S2SV_ModEnd> ) ; }",0
861,"<S2SV_ModStart> OP_ENDCATCH ) ; emit ( J, F, OP_ENDTRY ) ;",1
862,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_row_idx <S2SV_ModStart> return ; } LIBXSMM_ASSERT ( 0!= l_row && 0!= l_column ) ;",1
863,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
864,<S2SV_ModStart> uint8 result ; uint32 <S2SV_ModEnd> length ; STREAM,0
865,"<S2SV_ModStart> ; cleanup : if ( status == NULL ) status = ""UNKNOWN_REASON"" <S2SV_ModEnd> ; if (",1
866,"<S2SV_ModStart> ( c ++, 10 <S2SV_ModEnd> ) ) ;",0
867,<S2SV_ModStart> ) ; } if ( i == NULL ) return - EIO ;,0
868,<S2SV_ModStart> * rsize >= 18 <S2SV_ModEnd> && rdesc [,1
869,<S2SV_ModStart> & new_map ) <S2SV_ModEnd> ) goto out,0
870,,0
871,"<S2SV_ModStart> sr ) { <S2SV_ModEnd> uint16_t StructSize ; <S2SV_ModStart> ) ; } smb_ofile_flush ( sr, <S2SV_ModEnd> sr -> fid_ofile <S2SV_ModStart> sr -> fid_ofile <S2SV_ModEnd> ) ; (",1
872,,0
873,"<S2SV_ModStart> 1 ) { memset <S2SV_ModEnd> ( pbi, <S2SV_ModStart> 16 ) ; memset <S2SV_ModEnd> ( pbi ->",0
874,"<S2SV_ModStart> addrtype = TIPC_ADDR_ID ; memset ( & addr -> addr, 0, sizeof ( addr -> addr ) )",1
875,"<S2SV_ModStart> ( user_alloc && ( <S2SV_ModStart> PAGE_SIZE - 1 ) ) ||! access_ok ( VERIFY_WRITE, mem -> userspace_addr, mem -> memory_size",1
876,"<S2SV_ModStart>, sizeof ( double <S2SV_ModEnd> ) ) ;",0
877,<S2SV_ModStart> } if ( tmp_line_len >= 1 && <S2SV_ModStart> ; if ( tmp_line_len >= 1 && <S2SV_ModStart> ; } } \\\n} <S2SV_ModEnd> if ( strncasecmp,1
878,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * p <S2SV_ModStart> char * p <S2SV_ModEnd> ; if ( <S2SV_ModStart> end ) { char * buf ; p = ( char * ) p ; if ( p == '\\0' ) { PyErr_calloc ( buf, p ) ; for ( ; i = 0 ; i < 2 ; i ++ ) { s ; ++ ; } if ( * p ) { s ; p = * p ; p ; p ; p ; char * p ; p ; p = * p ; p ; if ( p == '\\0' ) { PyErr_SetString ( buf, ""size"" ) ; if ( p == NULL ) { PyErr_SetString ( p, ""char ( p ) ; return ; } } } if ( p == NULL ) { PyErr_SetString ( buf, len ) ; p ++ ; } return ;",0
879,"<S2SV_ModStart> { if ( user_sid_size > ( record_data_size - 4 ) - user_sid_offset ) ) { libcerror_error_set ( error, LIBCERROR_ERROR_RUNTIME, LIBCERROR_DOMAIN_RUNTIME, LIBCERROR_RUNTIME, LIBCERROR_ERROR_RUNTIME, LIBCERROR_ERROR_RUNTIME, LIBCERROR_ERROR_RUNTIME, LIBCERROR_RUNTIME_RUNTIME_ERROR_RUNTIME_VALUE_OUT",0
880,"<S2SV_ModStart> WaveHeader WaveHeader ; int format_chunk = 0 ; <S2SV_ModStart>, format ; if ( format_chunk ++ ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",1
881,"<S2SV_ModStart> ; uint16_t numChannels = 0 <S2SV_ModStart> numChannels < 1 || numChannels > 256 <S2SV_ModStart> ) ) { if (! config -> num_channels ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
882,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr ) ;,0
883,<S2SV_ModStart> ~ SNDRV_TIMER_IFLG_RUNNING ; list_del_init ( & timeri -> ack_list ) ; list_del_init ( & timeri -> active_list ) ;,1
884,"<S2SV_ModStart> int tval, int64_t <S2SV_ModEnd> ; char * <S2SV_ModStart> = 0 ; <S2SV_ModEnd> len = 0 <S2SV_ModStart> = 0 ; <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> ( cp, ""%s"", __func__, <S2SV_ModStart> ) ; } <S2SV_ModEnd> stride == 0",0
885,<S2SV_ModStart> else if ( anope_flags_compat &&,0
886,<S2SV_ModStart> -> buffer ; if (! ctx -> gf128 ) return - ENOKEY ;,1
887,"<S2SV_ModStart> ; if ( strcmp ( sub_demuxer -> name, ""srt"" ) && strcmp ( sub_demuxer -> name, ""ass"" ) ) goto error ; if (",1
888,<S2SV_ModStart> ( karg ) { int ret = - EINVAL ; <S2SV_ModStart> = 0 ; if ( ret == 0 && ( krb5_data. data ) ) return ret = - EINVAL ; if ( retval < 0 ) goto out ; <S2SV_ModEnd> ; if (,0
889,"<S2SV_ModStart> int w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_write <S2SV_ModEnd> ( w,",0
890,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; } ret",1
891,<S2SV_ModStart> dptr ++ = ROSE_CALL_REQ_ADDR_LEN_VAL <S2SV_ModEnd> ; memcpy (,1
892,<S2SV_ModStart> = new_ns ; new_ns -> mounts ++ ;,1
893,<S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( oci ->,0
894,<S2SV_ModStart> ; zip_object_handlers. get_gc = php_zip_get_gc ; zip_object_handlers.,1
895,<S2SV_ModStart> case RXE_MEM_TYPE_FMR : if <S2SV_ModEnd> ( iova < <S2SV_ModStart> mem -> iova || length > mem -> length || iova > <S2SV_ModEnd> mem -> iova <S2SV_ModStart> mem -> length - length ) return - EFAULT ; return <S2SV_ModEnd> 0 ; default,1
896,"<S2SV_ModStart> ( ndo, ""%s"", icmp6_tstr <S2SV_ModEnd> ) ) ;",0
897,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",1
898,<S2SV_ModStart> sent = 0 <S2SV_ModEnd> ; smb_msg.,1
899,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> buffer_pipe_buf_get ( struct <S2SV_ModStart> -> private ; if ( ref -> ref > INT_MAX / 2 ) return false ; <S2SV_ModStart> ref ++ ; return true ;,1
900,<S2SV_ModStart> fs -> clusters + <S2SV_ModEnd> 1 ) get_fat,1
901,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
902,<S2SV_ModStart> sk_nulls_node ) ; sk_nulls_node_init ( & sk -> sk_nulls_node ) ;,1
903,<S2SV_ModStart> } } } <S2SV_ModEnd> } ps_dec ->,0
904,<S2SV_ModStart> (! mm ||! mm -> env_end,1
905,"<S2SV_ModStart> inode, int flags <S2SV_ModEnd> ) { int <S2SV_ModStart>, inode, flags <S2SV_ModEnd> ) ; }",0
906,<S2SV_ModStart> * inotify_new_group ( <S2SV_ModEnd> unsigned int max_events <S2SV_ModStart> -> inotify_data. fa = NULL <S2SV_ModEnd> ; group -> <S2SV_ModStart> -> inotify_data. user = get_current_user ( ) ; if ( atomic_inc_return ( & group -> inotify_data. user -> inotify_devs ) > inotify_max_user_instances ) { fsnotify_put_group ( group ) ; return ERR_PTR ( - EMFILE ) ; } <S2SV_ModEnd> return group ;,1
907,<S2SV_ModStart> [ p ] && in -> linesize [ p ],1
908,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
909,<S2SV_ModStart> buffer ) ; if ( screen -> free_buffer ) return NULL,0
910,"<S2SV_ModStart> SCALAR_VALUE ) { coerce_reg_to_size ( & <S2SV_ModStart> [ value_regno ], size <S2SV_ModEnd> ) ; }",1
911,"<S2SV_ModStart> uint16_t buf, uint32",0
912,<S2SV_ModStart> base_name ) ; char need_to_append_dot ; struct search_domain * dom ; if (! base_len ) return NULL ; <S2SV_ModEnd> need_to_append_dot = base_name <S2SV_ModStart> : 1 ; <S2SV_ModEnd> for ( dom,1
913,<S2SV_ModStart> error = 0 <S2SV_ModEnd> ; if (,0
914,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; skb =,0
915,"<S2SV_ModStart> number_colormaps, number_planes, number_planes_planes_filled <S2SV_ModStart> -> rows * number_planes_filled <S2SV_ModEnd> ; number_planes_filled =",0
916,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> UINT32 originalSize ; if (! context ) return FALSE ; <S2SV_ModStart> == 0 ) return FALSE ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
917,<S2SV_ModStart> policy ) { if (! inode_owner_or_capable ( inode ) ) return - EACCES ;,1
918,"<S2SV_ModStart> state -> value, false",0
919,"<S2SV_ModStart>, ctx, key_type_put <S2SV_ModEnd> ) ; if",0
920,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) -> iif ) ; * addr_len = sizeof ( * sin6,1
921,"<S2SV_ModStart> ) ) ) { applog ( LOG_WARNING, ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> header <S2SV_blank> to <S2SV_blank> got <S2SV_blank> convert <S2SV_blank> to <S2SV_blank> %s"", __func__, header ) ; pool_failed ( pool ) ; return false ; } <S2SV_ModEnd> cb1 = (",0
922,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
923,"<S2SV_ModStart> size ) { size_t res ; if ( check_mul_overflow ( num, size, & res ) ) abort ( ) ; void * ptr ; <S2SV_ModEnd> ptr = malloc <S2SV_ModStart> = malloc ( res <S2SV_ModEnd> ) ; if <S2SV_ModStart> = malloc ( res <S2SV_ModEnd> ) ; if",0
924,<S2SV_ModStart> ; ioc ( ioc <S2SV_ModEnd> ) ; ioc,0
925,<S2SV_ModStart> kw ) { Py_RETURN_NONE <S2SV_ModEnd> ; } if,0
926,<S2SV_ModStart> desc_err ; if (! udev ) return - EINVAL ;,0
927,"<S2SV_ModStart> arg ) { struct perf_event_context * ctx ; <S2SV_ModStart>, arg ) ; <S2SV_ModEnd> return ret ;",0
928,,0
929,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode ( VP9_COMMON <S2SV_ModStart> * cm, MACROBLOCKD * xd, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> * r, PREDICTION_MODE <S2SV_ModEnd> y_mode ) <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> y_mode_mode_mode ) { FRAME_COUNTS * counts = xd -> counts ; if ( counts ) ++ counts -> <S2SV_ModEnd> y_mode_mode [ ctx",0
930,<S2SV_ModStart> int err ; kfree ( skcipher ) ; return err ;,0
931,<S2SV_ModStart> 1 ) ; if ( ret == 0 ) return - EINVAL ;,0
932,"<S2SV_ModStart> c -> tile_width <S2SV_ModEnd>, 16 ) <S2SV_ModStart>, 16 ) * 3",1
933,"<S2SV_ModStart>, rkey, NULL <S2SV_ModEnd> ) ; }",0
934,,1
935,"<S2SV_ModStart> s ) ; memset ( s, 0, sizeof ( s ) ) ;",0
936,"<S2SV_ModStart> p ) { return <S2SV_ModEnd> chdlc_print ( ndo <S2SV_ModStart>, p, h -> len <S2SV_ModEnd> ) ; }",1
937,<S2SV_ModStart> (! rc <S2SV_ModEnd> && tcon ),1
938,<S2SV_ModStart> -> len && SKB_EXT_ERR ( skb ) -> opt_stats <S2SV_ModEnd> ) put_cmsg (,1
939,"<S2SV_ModStart> ) ) ; raptor_sax2_set_option ( rdf_xml_parser -> sax2, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES, NULL, RAPTOR_OPTIONS_GET_NUMERIC ( rdf_parser, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES ) ) ;",1
940,<S2SV_ModStart> { if (! SSL_C_IS_UNEXPECTED_MESSAGE <S2SV_ModEnd> ( s ->,0
941,<S2SV_ModStart> { return SECURE_ELEMENT_ERROR_NPE ; } if ( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE ) { return SECURE_ELEMENT_ERROR_BUF_SIZE,1
942,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
943,<S2SV_ModStart> = ucounts ; new_ns -> mounts = 0 ; new_ns -> pending_mounts = 0 ;,1
944,"<S2SV_ModStart> += dif ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
945,<S2SV_ModStart> x ; } <S2SV_ModEnd> if ( x,0
946,<S2SV_ModStart> -> actual_size < actual_size? r -> begin : actual_size,0
947,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { <S2SV_ModEnd> return 0 ;,0
948,"<S2SV_ModStart> struct llc_pktinfo info ; memset ( & info, 0, sizeof ( info ) )",1
949,"<S2SV_ModStart> int vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> p9_height = vpx_writer <S2SV_ModEnd> ( w, <S2SV_ModStart> p9 ) vpx_wb_write_literal <S2SV_ModEnd> ( w,",0
950,"<S2SV_ModStart> wp, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
951,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
952,"<S2SV_ModStart> ret, n ; int num_descriptors ; size_t offset = offsetof ( struct hid_descriptor ) <S2SV_ModStart> ; if ( n < sizeof ( struct hid_descriptor ) ) return - EINVAL ; n",0
953,"<S2SV_ModStart> uint32_t id ; ND_TCHECK ( cp [ 0 ] ) <S2SV_ModStart> ( ndo, len <S2SV_ModEnd> ) ) ;",0
954,<S2SV_ModStart> ) ; # ifdef CONFIG_TCHECK ( tsk ) ; if ( tsk -> exit_process ( tsk ) ; exit_process ( tsk ) ; group_dead ( tsk ) ; group_dead ( tsk ) ; exit_process ( tsk ) ; exit_mm ( tsk ) ; if ( tsk -> exec_process ( tsk ) ; exit_process ( tsk ) ; exit_sched_process ( tsk ) ; exit_sched ( tsk ) ; exit_mm ( tsk ) ; module_put ( tsk ) ; module_put ( tsk ) ; if ( tsk -> exec_exit ( tsk ) ; exit_process_process ( tsk ) ; if ( tsk -> exec_exit ( tsk ) ; exit_exit ( tsk ) ; exit_process ( tsk -> module_process ( tsk ) ; if ( tsk -> module ) module_process ( tsk -> module_process_process ( tsk ) ; tsk -> binfmt_exit ( tsk ) ; exit_process ( tsk ) ; exit_process ( tsk ) ; if ( tsk -> binfmt ->,0
955,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void * <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>",0
956,,0
957,<S2SV_ModStart> ) ; goto err_free_urb <S2SV_ModEnd> ; if (,0
958,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> x1_null> <S2SV_null> static int <S2SV_ModEnd> i2SV_null> <S2SV_null> <S2SV_null>,0
959,<S2SV_ModStart> ( tag == ASN1_EOC <S2SV_ModEnd> ) { if <S2SV_ModStart> <= 0x7f ) goto check_length ; <S2SV_ModEnd> if ( card,0
960,<S2SV_ModStart> ) val ; <S2SV_ModEnd> memset ( ptr,1
961,"<S2SV_ModStart> mnt, mnt -> root",0
962,"<S2SV_ModStart> PHP_SHA512_CTX context ; if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_SHA256_CTX context ; if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_SHA1_CTX context ; if ( sig_len < sizeof ( digest ) ) { spprintf ( error ) ; } return FAILURE ; }",0
963,<S2SV_ModStart> ] <= max && value [ n ] - min < field -> maxusage,0
964,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
965,<S2SV_ModStart> if ( argReg > <S2SV_ModEnd> regsz ) { <S2SV_ModStart> regsz ) { return ;,1
966,<S2SV_ModStart> ) ; } if ( req_val < res_val ) { <S2SV_ModStart> ) ; } rb_verify_close_val ; },0
967,<S2SV_ModStart> 0 ) ; args -> rmtvaluelen = args -> rmtvaluelen <S2SV_ModEnd> ; return 0 <S2SV_ModStart> -> rmtvaluelen <S2SV_ModEnd> = args ->,0
968,<S2SV_ModStart> info info = NULL <S2SV_ModEnd> ; if (,0
969,<S2SV_ModStart> ; int status <S2SV_ModEnd> ; if (,0
970,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) &&! test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) &&",1
971,"<S2SV_ModStart> ) ) ; if ( LTXTQUERY_TOO_BIG ( state. num, state. sumlen ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""ltxtquery <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large"" ) ) ) ;",1
972,<S2SV_ModStart> ) return 0 <S2SV_ModEnd> ; line [,0
973,<S2SV_ModStart> ; if (! EXT4_SB ( inode -> i_sb ) -> s_journal <S2SV_ModEnd> ) return 0,0
974,"<S2SV_ModStart> val ) { if ( strlen ( val ) > 1 ) { return 0 ; } <S2SV_ModEnd> char * str <S2SV_ModStart> ( str, ""Invalid <S2SV_blank> '\\"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ( str, ( len )",0
975,"<S2SV_ModStart> ( f, ""PG%c%31[ <S2SV_blank> \\t]%c%c%31[ <S2SV_blank> \\t]%c%31[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp,",0
976,<S2SV_ModStart> ( size + 1 <S2SV_ModEnd> ) ASSERT ( size,0
977,<S2SV_ModStart>!= 0 ) <S2SV_ModEnd> return 1 ;,0
978,"<S2SV_ModStart> len ) { strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str ) ; strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str ) ; char <S2SV_ModEnd> ( str, <S2SV_ModStart> str ) ; strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str ) ; strcpy <S2SV_ModEnd> ( str,",0
979,"<S2SV_ModStart> char * to = g. inf, g. memcpy <S2SV_ModEnd> ( g, <S2SV_ModStart> g. len ) ; <S2SV_ModEnd> if ( g. <S2SV_ModStart> = strlen ( sufx ) <S2SV_ModEnd> + 1 ) <S2SV_ModStart> = strlen ( sufx ) <S2SV_ModEnd> ( g. <S2SV_ModStart> + 1 ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> = strlen ( g. outf, <S2SV_ModEnd> max ) ;",0
980,,1
981,<S2SV_ModStart> * output ; MagickBooleanType status ; <S2SV_ModStart> ) ; } status = MagickFalse ; <S2SV_ModStart> i ++ ) { <S2SV_ModEnd> input = fopen_utf8 <S2SV_ModStart> input ) ) if ( fclose ( status )!= MagickFalse ) status = MagickFalse ; <S2SV_ModStart> ( void ) fclose ( output ) ;,0
982,"<S2SV_ModStart> svc_codec_alg_priv_t * si <S2SV_ModEnd>, si )",0
983,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
984,"<S2SV_ModStart> passwd * pwd, const char * prefix <S2SV_ModStart> = NULL ; <S2SV_ModEnd> pw_init ( ) <S2SV_ModStart> & tmpname, ""/etc"", prefix <S2SV_ModEnd> ) ) ==",1
985,,0
986,<S2SV_ModStart> string ) { return <S2SV_ModEnd> 1 ; },0
987,<S2SV_ModStart> jid ) ; Jid * my_jid = jid_create ( stanza_from ) ; Jid_jid_jid = jid_create ( stanza_from ) ; if ( stanza_from ) { log_warning ( stanza_from ) ; },0
988,<S2SV_ModStart> [ 1 ] <S2SV_ModEnd> ) ; client ->,0
989,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
990,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; default :,0
991,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; BT_DBG (,1
992,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
993,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } if (,0
994,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
995,<S2SV_ModStart> * zone ; size_t tilemap_size ; <S2SV_ModStart>. height ; tilemap_size = <S2SV_ModEnd> x_size *,0
996,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_printroute ( netdissect_options <S2SV_ModStart> ) ; return ( 0 ),0
997,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 2SV_null> static int <S2SV_ModEnd> pr_null> <S2SV_null>,0
998,<S2SV_ModStart> ( ctx -> num_pass <S2SV_ModEnd> ) ) if,0
999,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> + 1, ""prestring=%490s"" <S2SV_ModEnd>, buf )",0
1000,<S2SV_ModStart> if ( chunk_num >= <S2SV_ModEnd> chm -> num_chunks,1
1001,"<S2SV_ModStart>! validate_event ( event -> pmu, <S2SV_ModStart>! validate_event ( event -> pmu, <S2SV_ModStart>! validate_event ( event -> pmu,",1
1002,<S2SV_ModStart> str ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1003,<S2SV_ModStart> studio_profile ) { <S2SV_ModEnd> if (!,1
1004,<S2SV_ModStart> nsops < 1 || nsops > SEMOPM,1
1005,<S2SV_ModStart> ; i ++ i <S2SV_ModEnd> ; i <S2SV_null>,0
1006,<S2SV_ModStart> < INDIRECT_BLOCKS ) { <S2SV_ModStart> ] ) ; },1
1007,<S2SV_ModStart> i -> parent_parent ) ; if ( ( i -> width > i -> parent -> parent -> parent -> parent -> parent -> log ) ) return - EINVAL,0
1008,<S2SV_ModStart> >> 2 ; if ( q + o >= e ) goto out ;,0
1009,<S2SV_ModStart> ++ ) { <S2SV_ModEnd> if ( bytes_matched,0
1010,"<S2SV_ModStart> len ) { int len ; <S2SV_ModStart> case LEX_UNFINISHED : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""EOF"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""ID"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_STR : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""EOF"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_STR : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""FLOAT"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_STR : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""STRING"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED_STR : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> STRING"" <S2SV_ModEnd> ) ; return",0
1011,"<S2SV_ModStart> mnt_instance ) ; if ( unlikely (! list_empty ( & mnt -> mnt_mounts ) ) ) { struct mount * p, * tmp ; list_for_each_entry_safe ( p, tmp, & mnt -> mnt_mounts, mnt_child ) { umount_mnt ( p ) ; } }",1
1012,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_write_bit_buffer_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> w ) ; vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart>, w, wb, w, <S2SV_ModStart> ) ) ; vpx_write_literal <S2SV_ModEnd> ( w,",0
1013,,1
1014,<S2SV_ModStart> goto not_found ; if ( e - p > HOST_NAME_MAX - 1 ) goto not_found ;,0
1015,<S2SV_ModStart> ; int err <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> uint32_t pos ; if ( inode -> i_size > inode -> i_sb -> s_blocksize ) { err = - ENAMETOOLONG ; goto out_unmap ; } <S2SV_ModStart>! bh ) { err = - EIO ; goto out_unlock_inode ; } <S2SV_ModEnd> symlink = bh <S2SV_ModStart> return 0 ; out_unlock_inode <S2SV_ModEnd> : up_read ( <S2SV_ModStart> page ) ; out_unmap :,1
1016,<S2SV_ModStart> else if ( cpu_has_secondary_ctrls ( ) <S2SV_ModEnd> ) ) { if,0
1017,"<S2SV_ModStart> if ( ent == NULL ) { st = KRB5_KDB_NOENTRY ; <S2SV_ModEnd> goto cleanup ; <S2SV_ModStart> cleanup ; } st = populate_policy ( context, ld, ent, pol_name, * policy ) ;",1
1018,<S2SV_ModStart> 1 ) ; if ( ( IHEVCD_PARAMET_BITDEPTH ) > MAX_SUCCESS ) { return IHEVCD_SUCCESS ; },0
1019,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct bhdr * bs_blocks <S2SV_ModEnd> ; int bh = <S2SV_ModStart> ; unsigned int bs_blocks <S2SV_ModEnd> ; unsigned int bh,0
1020,<S2SV_ModStart> ) ) { if ( psf -> header. indx >= psf -> header. indx >= psf_break ; break ; case,0
1021,<S2SV_ModStart> ; if ( d -> msg_len > sizeof ( d -> msg ) ) return - EINVAL ; if ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( i,1
1022,"<S2SV_ModStart> break ; } memset ( & cinfo, 0, sizeof ( cinfo ) ) ;",1
1023,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
1024,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0644 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; unlink",0
1025,"<S2SV_ModStart> int num_items_scanned ; int pktnum_len ; int <S2SV_ModEnd> pktnum, hr <S2SV_ModStart> + 64, ""LEN=%9u"" <S2SV_ModEnd>, & pktnum",0
1026,<S2SV_ModStart> ; int err = 0 ; msg -> msg_namelen,1
1027,"<S2SV_ModStart> ; if ( zend_hash_find <S2SV_ModEnd> ( ht,",1
1028,<S2SV_ModStart> = TEMP_FAILURE_RETRY ( <S2SV_ModStart>!= true ),0
1029,<S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> ; } } io -> io_cleanup = io -> io_cleanup ;,0
1030,"<S2SV_ModStart> 1 ) ; if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf = opipe",0
1031,<S2SV_ModStart> p -> tokenpos >= ( <S2SV_ModEnd> p -> tokenlen <S2SV_ModStart> p -> tokenlen - 1 ),1
1032,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct vpx_write_x8_mv_x8_x8 <S2SV_ModEnd> * vpx_reader <S2SV_ModStart> ) { return vpx_reader <S2SV_ModEnd> ( vpx_writer <S2SV_ModEnd> ( vpx_reader, <S2SV_ModStart> ) ; return vpx_reader <S2SV_ModEnd> ) ; return <S2SV_ModStart> } return vpx_read_bit_depth_m8x8x8x8_mv12_bytes_long <S2SV_ModEnd> ( vpx_get_bytes_mvs, <S2SV_ModStart> ) ) ; return TRUE ;",0
1033,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
1034,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ; },0
1035,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
1036,"<S2SV_ModStart> ( NULL, EINVAL <S2SV_ModEnd>, NULL,",0
1037,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
1038,"<S2SV_ModStart> -> stratum_port ; snprintf ( address, 254 <S2SV_ModEnd>, ""%s:%s"",",1
1039,<S2SV_ModStart> ; } else <S2SV_ModEnd> } else {,0
1040,<S2SV_ModStart> + i ; unsigned int actual_size = r -> begin < actual_size? r -> begin : actual_size,0
1041,<S2SV_ModStart> head -> iov_base ; if ( hdr > head -> iov_len ) return 0,1
1042,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> cl_nodes_lock ) ; o2nm_unlock_subsystem ( ) ;,1
1043,<S2SV_ModStart> ; void vp9_rc_buf_len ( & vpx_reader <S2SV_ModEnd> ) ; if,0
1044,<S2SV_ModStart> size_t * ptr <S2SV_ModEnd> ) { size_t,0
1045,<S2SV_ModStart> ; ssize_t count ; if ( bytes == 0 || items == 0 ) return 0,1
1046,"<S2SV_ModStart>, rx, NULL <S2SV_ModEnd> ) ; return",0
1047,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = key_permission,0
1048,"<S2SV_ModStart> req_sock ) ; memset ( & sess, sizeof ( req_sock ) ) ;",0
1049,<S2SV_ModStart> ; sb -> rmtvaluelen = 0 ; if (,0
1050,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1051,<S2SV_ModStart> 0 ) ; hrtimer_try_to_cancel <S2SV_ModEnd> ( & stime,1
1052,"<S2SV_ModStart> ONIG_INFINITE_DISTANCE ) { if ( p - str < reg -> dmax ) { * low = ( UChar * ) str ; if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; } else { <S2SV_ModStart> low ) ; }",0
1053,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> r2SV_null> <S2SV_null>,0
1054,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, 0 )",0
1055,<S2SV_ModStart> -> chunksize = UINT64_MAX <S2SV_ModEnd> ; for (,1
1056,<S2SV_ModStart> -> u1_first_slice_in_pic = 0 <S2SV_ModEnd> ; ps_dec ->,0
1057,<S2SV_ModStart> ( tok + 1,0
1058,<S2SV_ModStart> } err = crypto_rng_alg ( tfm ) <S2SV_ModEnd> -> seed (,1
1059,<S2SV_ModStart> = uid ; <S2SV_ModEnd> new -> count <S2SV_ModStart> new -> count = 0 <S2SV_ModEnd> ; spin_lock_irq ( <S2SV_ModStart> } if ( <S2SV_ModEnd> ucounts -> count <S2SV_ModStart> ucounts -> count == INT_MAX ) ucounts = NULL ; else ucounts -> count += 1 <S2SV_ModEnd> ; spin_unlock_irq (,1
1060,<S2SV_ModStart> ) ; } if ( err == 0 ) goto out_put ; if ( datagrams <S2SV_ModEnd> == 0 ) <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1061,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1062,<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline void,0
1063,<S2SV_ModStart> ; if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) ) <S2SV_ModEnd> { if ( <S2SV_ModStart> ) ; } if ( ext4_should_dioread_nolock ( inode ) ) set_buffer_uninit ( bh_result ) ;,1
1064,"<S2SV_ModStart> * fmode_t fmode, fmode_t fmode <S2SV_ModStart>, fmode, fmode <S2SV_ModEnd> ) ; fmode",0
1065,"<S2SV_ModStart> ResourceLimitError, ""MemoryAllocationFailed"" ) ; ( void ) ResetMagickMemory ( global_colormap, 0, 256 )",0
1066,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
1067,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1068,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static const VP9_COMP9_COMP * const MACROBLOCK * const xd, const <S2SV_ModStart>, const MACROBLOCK * const xd, int64_t * pd, int64_t * out_plane, int64_t sse, int64_t sse ; int64_t sse ; const int64_t sse = pd -> mi [ 0 ] ; int64_t sse ; const int64_t sse = pd -> mi [ 0 ] ; int64_t sse ; int64_t * out_thresh = 0 ; const int64_t sse = 0 ; const int64_t * out_thred = 0 ; const int64_t * out_thred = 0 ; const int64_t sse = ( cpi -> mbmi. tx_size << 3 ) >> 3 ; if ( sse ) goto out_mode ; } else if ( xd -> plane [ 0 ] == TX_MODE_THRESHIGHBITDEPTH ) { const int64_t sse = ( c",0
1069,<S2SV_ModStart> ; if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),0
1070,"<S2SV_ModStart> ( ndo, ""%s"", snpal <S2SV_ModEnd> ) ) ;",0
1071,<S2SV_ModStart> return FALSE ; <S2SV_ModEnd> if (!,0
1072,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1073,<S2SV_ModStart> ; uint32_t backup_handle = 0 <S2SV_ModStart> ret == 0 ) { if ( <S2SV_ModEnd> res -> backup <S2SV_ModStart> goto out_unlock ; } else { backup_handle = req -> buffer_handle ; },1
1074,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool get_desc ( <S2SV_ModStart> struct desc_struct * out, <S2SV_ModEnd> unsigned short sel <S2SV_ModStart> SEGMENT_LDT ) { return false <S2SV_ModEnd> ; } success <S2SV_ModStart> ) ; return success <S2SV_ModEnd> ; } success <S2SV_ModStart> ) ; return success <S2SV_ModEnd> ; } <S2SV_null>",0
1075,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst_ptr1,",0
1076,"<S2SV_ModStart> final_p, final ; struct ipv6_txoptions * final ; <S2SV_ModStart> ) ; } final_p = fl6_update_dst ( fl6, final, final_p, final ) ; <S2SV_ModStart>, fl6, final_p <S2SV_ModEnd>, fl6, <S2SV_ModStart>, fl6, final_p <S2SV_ModEnd> ) ; return",0
1077,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1078,<S2SV_ModStart> ) ) { if ( len < 2 ) return NULL ;,0
1079,<S2SV_ModStart> ; client ->,0
1080,<S2SV_ModStart> >= 0 && <S2SV_ModEnd> ND_TTEST ( * <S2SV_ModStart> < ie && <S2SV_ModEnd> ND_TTEST ( *,1
1081,"<S2SV_ModStart> ( interface, ENC28J60_TXX <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( interface, KSZ8851_RX <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_EVENT_MASK <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_TR <S2SV_ModEnd> ) ; }",0
1082,"<S2SV_ModStart> NULL ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
1083,"<S2SV_ModStart> goto all_leaves_cluster_together ; pr_devel ( ""present <S2SV_blank> leaves <S2SV_blank> cluster <S2SV_blank> but <S2SV_blank> not <S2SV_blank> leaf\\n"" ) <S2SV_ModEnd> ; break ;",0
1084,<S2SV_ModStart>. udpport = 0 <S2SV_ModEnd> ; settings.,1
1085,<S2SV_ModStart> ) ; },0
1086,"<S2SV_ModStart>, y, n4_t i, <S2SV_ModStart> = 0 ; for ( i = 0 ; i < 4 ; i ++ ) { for ( i = 0 ; i < n0 ; i ++ ) { for ( i = 0 ; i < n_sz0 ; i ++ ) [ i ] = ( xd -> y_siz [ i ]. d_t ) [ i ] = 0 ; ++ ) [ i ] [ i ]. d_tok [ i ] = 0 ; for ( i ] = 0 ; i < n ++ ) { if ( nd_tok [ i ]. d_tok [ i ]. y ]. d_tok [ i ]. a1 ]. d_tok [ i ]. y = 0 ; ++ ) [ i ]. d_s [ i ] = ( int ) dq [ i ]. d_t ) [ i ] = ( int ) - 1 ]. d1_t ) [ i ]. dx ] = ( int ) - 1 ]. y = 0 ; for ( i = 0 ; i < n ++ ) { if ( i ++ ) nd_t ) goto out ; i ++ = (",0
1087,<S2SV_ModStart> clips_ptr ) { if ( num_clips < 0 ) { ret = - EINVAL ; goto out_err2 ; },0
1088,<S2SV_ModStart> ; if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1089,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1090,"<S2SV_ModStart> 0 ) ; int minsz = R_MIN ( len, 0 ) ; minsz = R_MAX ( minsz, len ) ; <S2SV_ModStart> ; j < minsz <S2SV_ModEnd> ; j ++ <S2SV_ModStart>!= UT64_MAX ) { <S2SV_ModStart>!= UT64_MAX ) { <S2SV_ModStart>!= UT64_MAX ) { <S2SV_ModStart> refptr ) ; } <S2SV_ModStart> 0 ) { <S2SV_ModStart> 0 ) ; } <S2SV_ModStart>!= UT64_MAX ) { <S2SV_ModStart> = UT64_MAX ) ; }",0
1091,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> outfile_en = 0 <S2SV_ModEnd> ; struct printf <S2SV_ModStart> ) ; goto out <S2SV_ModEnd> ; } int <S2SV_ModStart> ) ; out <S2SV_ModEnd> = 0 ; <S2SV_ModStart> ) ; return 0 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { fprintf ( stderr, ""error: <S2SV_blank> %s <S2SV_blank> file\\n"", outfile ) ; goto out ; } <S2SV_ModEnd> if ( fclose <S2SV_ModStart> ) ; return 0 <S2SV_ModEnd> ; } f",0
1092,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = tail ; head <S2SV_ModEnd> = tail ; <S2SV_ModStart> = tail ; head <S2SV_ModEnd> = tail ; <S2SV_ModStart> = tail ; head <S2SV_ModEnd> if ( chip,0
1093,<S2SV_ModStart> * opcode_desc ; if ( len < 2 ) { return NULL ; },1
1094,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1095,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
1096,<S2SV_ModStart> [ sizeof ( the_url <S2SV_ModEnd> ) - 1,0
1097,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } if,0
1098,"<S2SV_ModStart>, ctx, key_type_put <S2SV_ModEnd> ) ; if",0
1099,<S2SV_ModStart> vpx_codec_alg_priv_t * ctx ; vpx_codec_err_t * priv = ( vpx_codec_alg_cfg_t * ) priv <S2SV_ModEnd> ; priv -> <S2SV_ModStart> ctx -> priv <S2SV_ModEnd> ; vpx_codec_alg_priv_t * <S2SV_ModStart> ctx -> priv <S2SV_ModEnd> ; vpx_codec_alg_priv_t * <S2SV_ModStart> size_t * ) priv <S2SV_ModEnd> ; ctx -> <S2SV_ModStart> -> cfg ; priv = vpx_codec_alg_priv_t * priv <S2SV_ModEnd> ; priv -> <S2SV_ModStart> ctx -> cfg ; priv <S2SV_ModEnd> -> cfg = <S2SV_ModStart> ctx -> cfg = vpx_codec_alg_priv_t * sizeof ( priv <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ctx -> priv <S2SV_ModEnd> -> cfg ; <S2SV_ModStart> -> cfg = priv <S2SV_ModEnd> ; priv -> <S2SV_ModStart> -> cfg ; priv <S2SV_ModEnd> -> cfg =,0
1100,"<S2SV_ModStart> error ) { if ( bp && ( <S2SV_ModEnd> xfs_da_shrink_inode ( args <S2SV_ModStart>, bp )!= 0 ) <S2SV_ModEnd> ) goto out",1
1101,<S2SV_ModStart> ; if ( cct >= 0 &&,0
1102,<S2SV_ModStart> timer_lock ) ; spin_lock ( & timer -> timer_lock ) ; <S2SV_ModStart> list_del_init ( & timer -> timer_list ) ; spin_unlock ( & timer -> lock ) ;,0
1103,"<S2SV_ModStart> return err ; if (! <S2SV_ModEnd> attrs [ TIPC_NLA_SOCK <S2SV_ModStart> attrs [ TIPC_NLA_SOCK <S2SV_ModEnd> ] ) return <S2SV_ModStart> [ TIPC_NLA_SOCK ], TIPC_NLA_SOCK <S2SV_ModEnd> ) ; if",0
1104,<S2SV_ModStart> ctx ) { <S2SV_ModEnd> Vpx_null> <S2SV_null> <S2SV_null> static,0
1105,<S2SV_ModStart> = v ; if (! IS_ERR ( vma ) ),1
1106,<S2SV_ModStart> ) buffer ; if ( total_len < sizeof ( * cap ) || total_len < <S2SV_ModEnd> cap -> bLength <S2SV_ModStart> cap -> bLength ) { dev -> bos -> desc -> bNumDeviceCaps = i ; break ; } length = cap -> bLength <S2SV_ModEnd> ; total_len -=,1
1107,<S2SV_ModStart> task = current <S2SV_ModEnd> ; if (,1
1108,<S2SV_ModStart> ( iinfo -> i_lenEAttr > bs || iinfo -> i_lenAlloc > bs ) goto out ; if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenAlloc > bs ) goto out ; if ( iinfo ->,0
1109,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MIIRD <S2SV_ModEnd> ) ; while",0
1110,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1111,"<S2SV_ModStart> sk ) ; memset ( & sk, 0, sizeof ( sk ) ) ;",0
1112,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
1113,<S2SV_ModStart>! saw_digit ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart>!= '\\r' ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart>!= '\\n' ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart> ; trunc : * endp = bp ; <S2SV_ModStart> ; invalid : * endp = bp ;,1
1114,"<S2SV_ModStart> ; args -> rmtvaluelen = be32_to_cpu ( name_rmt -> valuelen ) ; args -> rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ( name_rmt -> <S2SV_ModEnd> valueblk ) ; <S2SV_ModStart>, args -> rmtvaluelen <S2SV_ModEnd> ) ; return",1
1115,<S2SV_ModStart> ) ) ; ut32 len = 0 ;,0
1116,<S2SV_ModStart> new_object ) ; if ( new_length < 0 ) { return NULL ; },0
1117,<S2SV_ModStart> < 1 || vstart + vdaux < vstart <S2SV_ModEnd> ) { sdb_free,0
1118,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
1119,<S2SV_ModStart> u8 label_len ; if ( j + label_len > label_len ) return - 1 ;,0
1120,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpAcc ( TIFF <S2SV_ModStart> cc ) ; if <S2SV_ModEnd> ( cc % <S2SV_ModStart> * stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""fpAcc"", ""%s"", ""cc%(bps*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> tmp ) return 0 <S2SV_ModStart> tmp ) ; return 1 ;",1
1121,"<S2SV_ModStart> -> vm_ops ) <S2SV_ModEnd> return do_fault ( <S2SV_ModStart>, pte, pmd, flags, entry ) ; <S2SV_ModEnd> return do_anonymous_page ( <S2SV_ModStart>, address, pte, pmd, <S2SV_ModEnd> flags ) ;",1
1122,"<S2SV_ModStart> s ) { size_t len = strlen ( s ) + 1 ; <S2SV_ModStart> = pool_alloc ( len ) ; memcpy <S2SV_ModEnd> ( r, <S2SV_ModStart> r, s, len",1
1123,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1124,"<S2SV_ModStart>! new_idmap_permitted ( file,",1
1125,,0
1126,<S2SV_ModStart> p_stream ) ; <S2SV_ModEnd> return 0 ;,0
1127,<S2SV_ModStart> ; if (! file -> fpath ) {,0
1128,<S2SV_ModStart> 0 ) { if ( len < sizeof ( * cp ) ) goto trunc ; <S2SV_ModStart> ip6 ) ; if ( advance < 0 ) return ; <S2SV_ModStart> ip6 ) ; if ( advance < 0 ) return ;,0
1129,"<S2SV_ModStart> * buf, size_t <S2SV_ModEnd> len ) { <S2SV_ModStart> len ) { size_t <S2SV_ModEnd> i ++ ; <S2SV_ModStart> ) ) { size_t <S2SV_ModEnd> i ++ ;",0
1130,<S2SV_ModStart> ( iinfo -> i_lenEAttr > bs || iinfo -> i_lenAlloc > bs ) goto out ; if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenAlloc > bs ) goto out ; if ( iinfo ->,0
1131,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
1132,"<S2SV_ModStart> y, sse <S2SV_ModEnd> ) ; if",0
1133,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_buf_line_array ) + strlen ( t1_line_array ) + 1, T1_BUF_SIZE ) ; <S2SV_ModStart> t1_buf_array ) ; alloc_array ( t1_array, strlen ( t1_line, T1_BUF_SIZE ) + 1, T1_BUF_SIZE ) + strlen ( t1_buf_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) + 1, T1_BUF_SIZE ) ;",0
1134,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ctx <S2SV_ModEnd>, va_list args",0
1135,<S2SV_ModStart> ctxt ) ; if (! ( ctxt ) ) return emulate_ud ( ctxt,0
1136,<S2SV_ModStart> ; if ( ctx -> data [ i ].,0
1137,,0
1138,"<S2SV_ModStart> int i, unsigned char * running_avg, int overflow_y_y_stride, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * running_y_y_stride, int motion_y_thresh <S2SV_ModEnd> ) { int <S2SV_ModStart> int running_avg_y_y_y_avg_y_y_stride, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> intra_y_y_y_stride, int increase_y_y_stride, int running_avg <S2SV_ModStart> ) ) { int increase_y_y_y_y_stride = 0 ; int increase_y_stride ; const uint8_y_y_stride = 0 ; const int shift = 0 ; int remaining_thresh = 0 ; int increase_y_avg_y_y_y_y_y_stride = 0 ; const int increase_y_y_stride = 0 ; const int shift = 0 ; const uint8_y_y_y_y_avg_y_y_y_stride_stride_y_y_stride, 2 ) ; const uint8_y_y_y_y_stride =",0
1139,<S2SV_ModStart> ) ) ; goto out <S2SV_ModEnd> ; } if,0
1140,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",0
1141,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
1142,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int op_dev_dev_dev ( <S2SV_ModStart> op ) ; <S2SV_ModEnd> rc. src_dev,0
1143,"<S2SV_ModStart> val, val, false",0
1144,<S2SV_ModStart> ; int error = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto out <S2SV_ModEnd> ; } if,0
1145,"<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp. <S2SV_ModStart>. type, ""compression"", sizeof ( rcomp. type ) <S2SV_ModEnd> ) ; if",1
1146,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
1147,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( rc ) return rc ; value = posix_acl_update_mode ( inode <S2SV_ModEnd>, & acl <S2SV_ModStart> inode -> acl ) ; if ( rc ) <S2SV_ModEnd> } break ;",0
1148,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1149,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
1150,<S2SV_ModStart> 3 * len + 8,1
1151,<S2SV_ModStart> SUCCESS ) { if ( Z_TYPE_PP ( var )!= IS_LONG ) { zval lval ; lval = * * var ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; points <S2SV_ModStart> ; convert_to_long ( & lval <S2SV_ModEnd> ) ; convert_to_long <S2SV_ModStart> var ) ; } else { points [ i ] = <S2SV_ModStart> var ) ; } <S2SV_ModStart> SUCCESS ) { if ( Z_TYPE_PP ( var )!= IS_LONG ) { zval lval ; lval = * * var ; zval_copy_ctor ( & lval <S2SV_ModEnd> ) ; convert_to_long <S2SV_ModStart> ; convert_to_long ( & lval <S2SV_ModEnd> ) ; points <S2SV_ModStart>. y = Z_LVAL ( lval ) ; } else { points [ i ]. y = <S2SV_ModStart> ) ; } },0
1152,<S2SV_ModStart> ; sig_none = <S2SV_ModEnd> timr -> it_sigev_notify <S2SV_ModStart> timr -> it_sigev_notify <S2SV_ModEnd> == SIGEV_NONE ;,1
1153,,0
1154,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_buf_line_array ) + strlen ( t1_line_array ) + 1, T1_BUF_SIZE ) ; <S2SV_ModStart> t1_buf_array ) ; alloc_array ( t1_array, strlen ( t1_line, T1_BUF_SIZE ) + 1, T1_BUF_SIZE ) + strlen ( t1_buf_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) + 1, T1_BUF_SIZE ) ;",0
1155,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, void",0
1156,"<S2SV_ModStart>. path ; return Curl_urldecode <S2SV_ModEnd> ( data, <S2SV_ModStart>, 0, & <S2SV_ModEnd> pop3c -> mailbox <S2SV_ModStart> pop3c -> mailbox, NULL, TRUE ) <S2SV_ModEnd> ; } <S2SV_null>",1
1157,<S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ; <S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ;,1
1158,"<S2SV_ModStart> gb ) ; if ( s -> ref && sh -> first_slice_in_pic_flag ) { av_log ( s -> avctx, AV_LOG_ERROR, ""Two <S2SV_blank> slices <S2SV_blank> reporting <S2SV_blank> being <S2SV_blank> the <S2SV_blank> first <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> frame.\\n"" ) ; return 1 ; }",1
1159,<S2SV_ModStart> } } } <S2SV_ModEnd> } ps_dec ->,0
1160,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> if ( ps_dec,0
1161,<S2SV_ModStart> <S2SV_null> <S2SV_null> static VPX_CODEC_ERROR_BUFFER_CONFIG * const cm = cm -> cfg ; <S2SV_ModStart> cm -> frame_type == VPX_CODEC_OK && cm -> cfg. frame_type == VPX_CODEC_ERROR ) { const uint8_t * const cm = cm -> frame_bufs = cm -> frame_bufs [ VPX_CODEC_USE_FRAME ] ; if ( cm -> last_frame_type == VPX_CODEC_OK && cm -> last_frame == VPX_FRAME ) { cm -> frame_bufs = cm -> frame_bufs [ VPX_CODEC_ERROR_FRAME ] ; return VPX_CODEC_ERROR ; },0
1162,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t,0
1163,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mbmi_width ( MACROBLOCKD * xd <S2SV_ModEnd>, int mi_row, <S2SV_ModStart> int mbmi_width <S2SV_ModEnd> ) ; const <S2SV_ModStart> ; MACROBLOCKD * const xd = xd -> plane [ 0 ] ; if ( xd -> plane [ 0 ]. mbmi ) { xd = xd -> plane [ 0 ] ; const int xd = xd -> plane [ 0 ] ; const int xd = 0 ; if ( xd -> plane [ 0 ] == 0 ) { mbmi_width = xd -> plane [ 0 ] ; return ; } memcpy <S2SV_ModEnd> ( xd -> <S2SV_ModStart> plane ] ; memcpy <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( xd ->",0
1164,<S2SV_ModStart> -> mmap_legacy_base = TASK_UNMAPPED_BASE + random_factor <S2SV_ModEnd> ; if (,1
1165,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 8 ) ; <S2SV_ModEnd> src += src_stride",1
1166,"<S2SV_ModStart> return getnum ( <S2SV_ModEnd> fmt, 1 <S2SV_ModStart> = getnum ( <S2SV_ModEnd> fmt, sizeof",1
1167,"<S2SV_ModStart>, row, row <S2SV_ModEnd> ) { uint32",0
1168,,0
1169,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1170,<S2SV_ModStart> ( upid == INT_MIN ) return - ESRCH ; if ( upid ==,1
1171,"<S2SV_ModStart> siocb -> scm, false",1
1172,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1173,"<S2SV_ModStart>, plane ) * ( ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH )? 2 : 1 )",0
1174,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> r_len ( struct <S2SV_ModStart> ; uint8_t * last_len <S2SV_ModEnd> ) { uint8_t <S2SV_ModStart> ] ; uint8_t <S2SV_ModEnd> ; uint8_t <S2SV_ModStart> ; uint8_t * last_len ; uint8_t best_len = <S2SV_ModStart> ; uint8_t * last_len <S2SV_ModEnd> ; uint8_t <S2SV_ModStart> ; uint8_t * buf_len <S2SV_ModEnd> ; uint8_t *,0
1175,"<S2SV_ModStart> -> private ; struct dm_dev * dev = lc -> dev ; int r = 0 ; if <S2SV_ModEnd> ( lc -> <S2SV_ModStart> ( lc -> start || ti -> len!= i_size_read ( dev -> bdev -> bd_inode ) >> SECTOR_SHIFT ) r = scsi_verify_blk_ioctl ( NULL, cmd ) ; return r? : __blkdev_driver_ioctl ( <S2SV_ModStart> -> bdev, <S2SV_ModEnd> dev -> mode",1
1176,<S2SV_ModStart> -> len = 0 <S2SV_ModEnd> ; if (,0
1177,<S2SV_ModStart> ; if (!,0
1178,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0 ) ;",0
1179,<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ;,1
1180,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1181,"<S2SV_ModStart> sa -> len, 0",0
1182,<S2SV_ModStart> ; if ( <S2SV_ModEnd>!= 0 ),0
1183,<S2SV_ModStart> NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC | NTLMSSP_NEGOTIATE_SEAL <S2SV_ModStart> -> sign ) <S2SV_ModEnd> flags |= NTLMSSP_NEGOTIATE_SIGN <S2SV_ModStart> |= NTLMSSP_NEGOTIATE_KEY_XCH ; <S2SV_ModEnd> tmp = *,1
1184,"<S2SV_ModStart>, ""STARTTLS"", conn <S2SV_ModEnd> ) ; mutt_socket_empty",0
1185,<S2SV_ModStart> crypto_report_p kncpy <S2SV_ModEnd> ( rcmpt.,0
1186,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horDiff8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
1187,<S2SV_ModStart> -> head <= 0 || ( unsigned char ) ( ( g -> sect << 2 ) >> FD_SIZECODE ( g ) ) ==,1
1188,<S2SV_ModStart> return 0 ; if ( len = 0 ;,0
1189,"<S2SV_ModStart>, & rlen, 0",1
1190,<S2SV_ModStart> char * data <S2SV_ModEnd> ; int ret <S2SV_ModStart> ( u8 ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { ret = - 1 ; <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> return ret ;,0
1191,"<S2SV_ModStart> mntent, path, rootfs -> mount",1
1192,"<S2SV_ModStart>, name, n <S2SV_ModEnd> ) ; assert",0
1193,<S2SV_ModStart> - offset ; unsigned short prev_bi_vcnt = bio -> bi_vcnt ; <S2SV_ModStart> ) break ; if ( bio -> bi_vcnt == prev_bi_vcnt ) put_page ( pages [ j ] ) ;,1
1194,,0
1195,"<S2SV_ModStart> state. path <S2SV_ModEnd> ; char localhost <S2SV_ModStart> ""localhost"" ; result = Curl_urldecode <S2SV_ModEnd> ( result,",0
1196,"<S2SV_ModStart> len ) { strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str ) ; strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str ) ; char <S2SV_ModEnd> ( str, <S2SV_ModStart> str ) ; strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str ) ; strcpy <S2SV_ModEnd> ( str,",0
1197,,0
1198,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
1199,"<S2SV_ModStart> off, ret <S2SV_ModEnd> ) ; } if",0
1200,<S2SV_ModStart> 0 ) ; if (! r ) return - EINVAL ;,1
1201,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1202,,1
1203,"<S2SV_ModStart> { r_cons_printf ( ""\\""k <S2SV_blank> bin/%s/%d=%d\\""\\n""k <S2SV_ModEnd>, module,",0
1204,"<S2SV_ModStart>, rqstp, res <S2SV_ModEnd> ) ; out",1
1205,"<S2SV_ModStart> mnt, mnt -> root",0
1206,"<S2SV_ModStart>, rkey, NULL <S2SV_ModEnd> ) ; }",0
1207,"<S2SV_ModStart> ) ) { * status = ""INVALID_S4U2SV_null> <S2SV_null>",0
1208,<S2SV_ModStart> thread -> tp_value [ 0 ] <S2SV_ModStart> childregs -> ARM_r3 ; thread -> tp_value [ 1 ] = get_tpuser ( ),1
1209,"<S2SV_ModStart> bufsize ) { char * new_buf ; size_t new_bufsize <S2SV_ModEnd> ; JAS_DBGLOG ( <S2SV_ModStart> ; if ( bufsize < 0 ) { jas_deprecated ( ""negative <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> for <S2SV_blank> jas_stream_memopen"" ) ; } <S2SV_ModEnd> if ( buf",0
1210,"<S2SV_ModStart> sshbuf * b = NULL <S2SV_ModStart> char * pkalg = NULL <S2SV_ModStart> char * pkalg = NULL <S2SV_ModStart> ; if (! authctxt -> valid ||! authctxt -> valid ||! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> because <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if (!",0
1211,<S2SV_ModStart> ; uint32_t bcount ; CLEAR ( WaveHeader ),1
1212,"<S2SV_ModStart> inode -> i_dio_read_lock, flags <S2SV_ModEnd> ) ; if",0
1213,,0
1214,<S2SV_ModStart> tn_buf ) ; return - EACCES ;,1
1215,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteOlympusEntry ) ) ;",0
1216,"<S2SV_ModStart> failed_mount3 ; } # ifdef CONFIG_EXT2_FS_XATTR sbi -> s_mb_cache = ext2_xattr_create_cache ( ) ; if (! sbi -> s_mb_cache ) { ext2_msg ( sb, KERN_ERR, ""Failed <S2SV_blank> to <S2SV_blank> create <S2SV_blank> an <S2SV_blank> mb_cache"" ) ; goto failed_mount3 ; } # endif <S2SV_ModStart> ; failed_mount3 : if ( sbi -> s_mb_cache ) ext2_xattr_destroy_cache ( sbi -> s_mb_cache ) ;",1
1217,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1218,<S2SV_ModStart> len < tcp_hdrlen || tcp_hdrlen < sizeof ( struct tcphdr ),0
1219,<S2SV_ModStart> int i ; size_t size ; <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } matrix <S2SV_ModStart> 0 ) { goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } matrix <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } matrix,0
1220,"<S2SV_ModStart> ipv6_select_ident ( fh, rt <S2SV_ModStart> ipv6_select_ident ( fh, rt",1
1221,"<S2SV_ModStart> int error ; struct mb2_cache_entry <S2SV_ModStart> bh ) { <S2SV_ModEnd> int error ; <S2SV_ModStart> ) ) { <S2SV_ModEnd> int error ; <S2SV_ModStart> error ; } mb_cache_entry_free ( bh ) ; <S2SV_ModStart> error ; } mb2_cache_entry_delete <S2SV_ModEnd> ( bh, <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null>",0
1222,<S2SV_ModStart> * req ; <S2SV_ModEnd> req = scsi_req_alloc <S2SV_ModStart> hba_private ) ; <S2SV_ModEnd> return req ;,1
1223,"<S2SV_ModStart> nmap ) { size_t <S2SV_ModEnd> noffset ; int <S2SV_ModStart> ; if ( len < 4 ) { avio_get_queue ( & buf, 4 ) ; ret = - ENOMEM ; goto fail ; }",0
1224,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1225,<S2SV_ModStart> ( ret ||! cm_id -> device ||,1
1226,<S2SV_ModStart> xfrm_policy_walk * ) <S2SV_ModEnd> cb -> args <S2SV_ModStart> cb -> args <S2SV_ModEnd> ; struct xfrm_dump_info <S2SV_ModStart> struct xfrm_dump_info info <S2SV_ModEnd> ; info. <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> ( void ),1
1227,<S2SV_ModStart> (! buf || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
1228,"<S2SV_ModStart> dentry * upper <S2SV_ModEnd> ; int err <S2SV_ModStart> I_MUTEX_PARENT ) ; upper = lookup_one_len ( dentry -> d_name. name, upperdir, dentry -> d_name. len ) ; err = PTR_ERR ( upper ) ; if ( IS_ERR ( upper ) ) goto out_unlock ; <S2SV_ModStart> if ( upper == d_dentry_upper ( upperdir ) ) { <S2SV_ModEnd> if ( upper <S2SV_ModStart> if ( upper ) goto out_dentry_upper ( upper ) ; err = PTR_ERR ( upper ) ; } out_unlock :",0
1229,<S2SV_ModStart> error_info ) ; if ( new_settings == NULL ) return EINVAL,0
1230,<S2SV_ModStart> * ptrptr && <S2SV_ModEnd> nmemb && size <S2SV_ModStart> nmemb && size <S2SV_ModEnd> ) return AVERROR,1
1231,<S2SV_ModStart> ( a -> type == szMAPI_BINARY && a -> <S2SV_ModStart> else if ( a -> type == szMAPI_BINARY &&,1
1232,<S2SV_ModStart> return FALSE ; if ( ( i -> parent -> parent. name == 1 ) || ( i -> parent -> parent -> width > i -> parent -> parent -> parent -> width ) ) return - 1 ; },0
1233,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : ms -> elf_notes_max = * ( const size_t * ) val ; return 0 ;,0
1234,"<S2SV_ModStart> { jas_eprintf ( ""got <S2SV_blank> box <S2SV_blank> type <S2SV_blank> %s\\n"" <S2SV_ModEnd>, box ->",1
1235,,1
1236,"<S2SV_ModStart> command + 1, c <S2SV_ModEnd> ) return -",0
1237,"<S2SV_ModStart> offset, page_index ( page ) <S2SV_ModEnd> ) ; }",0
1238,<S2SV_ModStart> 0 ) { if ( i >= sizeof ( entry ) ) { <S2SV_ModStart> = 0 ; },0
1239,<S2SV_ModStart> UINT32 nsc_rle_encode ( const,1
1240,"<S2SV_ModStart> ; int result = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1, 0 ) ) ; if (! strlen ( data ) ) return - 1 ; <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> if ( ret = <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1241,"<S2SV_ModStart> * dllhandle ; if ( COM_CompareExtension ( name, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", name ) ; return NULL ; }",1
1242,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } if (,0
1243,<S2SV_ModStart> ( n ) \\\n{ <S2SV_ModEnd> sum = ( <S2SV_ModStart> ++ ; } \\\n} <S2SV_ModEnd> typedef struct PCDTable <S2SV_ModStart> buffer ) ; for ( j = 0 ; j < i ; j ++ ) pcd_table [ j ] = ( PCDTable * ) RelinquishMagickMemory ( pcd_table [ j ] ) ; <S2SV_ModStart> RelinquishMagickMemory ( buffer ) ; for ( j = 0 ; j <= i ; j ++ ) pcd_table [ j ] = ( PCDTable * ) RelinquishMagickMemory ( pcd_table [ j ],1
1244,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1245,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } else if,0
1246,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> p = * 2 <S2SV_ModEnd> ; char * <S2SV_ModStart> p = NULL <S2SV_ModEnd> ; char * <S2SV_ModStart> p = NULL <S2SV_ModEnd> ; if ( <S2SV_ModStart> p ) * 2 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return 0 <S2SV_ModEnd> ; } <S2SV_null>,0
1247,<S2SV_ModStart> ) { return 0 <S2SV_ModEnd> ; } if,0
1248,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( src -> <S2SV_ModStart> src, src_stride ) ; memcpy <S2SV_ModEnd> ( src ->",0
1249,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1250,<S2SV_ModStart> == * ptr && ptr [ 1 ],1
1251,"<S2SV_ModStart> void vp9_context_row ( VP9_COMMON * const MACROBLOCKD * xd <S2SV_ModEnd>, int mi_row <S2SV_ModStart> -> common ; MACROBLOCKD * const xd = & xd -> mi_row ; <S2SV_ModStart> mi_row ) { <S2SV_ModEnd> int i ; <S2SV_ModStart> mi_row ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> mi_col ) ; memset <S2SV_ModEnd> ( xd ->",0
1252,"<S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
1253,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1254,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ),",0
1255,<S2SV_ModStart> ; size = 0 ; hdr ->,0
1256,<S2SV_ModStart> sta -> lock ) ; spin_lock_init ( & sta -> ps_lock,1
1257,<S2SV_ModStart> tp_event ) && perf_paranoid_tracepoint_raw <S2SV_ModEnd> ( ) &&,1
1258,<S2SV_ModStart> sock_op ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> if ( sctp_default_acl_register <S2SV_ModEnd> ) ) ;,0
1259,"<S2SV_ModStart>, 0 ) ; if (! data_interface ||! control_interface ) return - ENODEV",1
1260,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1261,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } if (,0
1262,"<S2SV_ModStart> * head ; <S2SV_ModEnd> newsk -> sk_sndbuf <S2SV_ModStart> -> sk_rcvbuf ; sctp_copy_descendant <S2SV_ModEnd> ( newsk,",1
1263,"<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) ) <S2SV_ModStart> ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1264,"<S2SV_ModStart> { struct desc_struct <S2SV_ModEnd> desc ; short <S2SV_ModStart> return sel ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! get_desc ( & desc, sel ) <S2SV_ModEnd> ) return - <S2SV_ModStart>! ( desc. <S2SV_ModEnd> type & BIT <S2SV_ModStart> ( ( desc. <S2SV_ModEnd> l << 1 <S2SV_ModStart> ) | desc. <S2SV_ModEnd> d ) {",1
1265,"<S2SV_ModStart> ctx ) { memset <S2SV_ModEnd> ( ctx,",0
1266,"<S2SV_ModStart> 1 ) { vpx_lpf_horizontal_16x16 <S2SV_ModEnd> ( s, <S2SV_ModStart> } else { vpx_lpf_horizontal_16 <S2SV_ModEnd> ( s,",0
1267,<S2SV_ModStart> return ret ; fsnotify_put_group ( group ) ;,1
1268,"<S2SV_ModStart> * ctx, void * status <S2SV_ModEnd> ) { i",0
1269,"<S2SV_ModStart> BPF_ALU64 ) { coerce_reg_to_size ( dst_reg, 4 ) ; coerce_reg_to_size <S2SV_ModEnd> ( & src_reg <S2SV_ModStart> ( & src_reg, 4",0
1270,,0
1271,<S2SV_ModStart> ; if ( ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ),0
1272,"<S2SV_ModStart>, size_t len, 0",0
1273,<S2SV_ModStart> ; if ( mono_return FALSE ; if (,0
1274,<S2SV_ModStart> ; size_t count ; if ( count > sizeof ( buf ) ) return - EINVAL ; if (,0
1275,,0
1276,"<S2SV_ModStart> } if ( le32_to_cpu ( raw_super -> segment_count ) > F2FS_MAX_SEGMENT ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> segment <S2SV_blank> count <S2SV_blank> (%u)"", le32_to_cpu ( raw_super -> segment_count ) ) ; return 1 ; } if (",1
1277,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1278,<S2SV_ModStart> } else { assert ( pdecode == 0 ) ;,0
1279,<S2SV_ModStart> len ) { struct ipv6_txoptions * opt_to_free = NULL ; <S2SV_ModStart>! opt ) { opt = txopt_get ( np ) ; opt_to_free = opt ; } <S2SV_ModEnd> if ( flowlabel <S2SV_ModStart> flowlabel ) ; txopt_put ( opt_to_free ) ;,1
1280,<S2SV_ModStart> : if ( skb -> inode == NULL <S2SV_ModEnd> ) goto,0
1281,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> } break ;",1
1282,,0
1283,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1284,<S2SV_ModStart> info = opend <S2SV_ModEnd> ; if (,0
1285,"<S2SV_ModStart> if (! js_doregexec ( J, <S2SV_ModEnd> re -> prog",1
1286,<S2SV_ModStart> ) break ; <S2SV_ModEnd> tp -> copied_seq <S2SV_ModStart> = seq ; } tp -> copied_seq = seq ;,1
1287,"<S2SV_ModStart> key_data, key_data_len <S2SV_ModEnd> ) ; }",0
1288,"<S2SV_ModStart> * obj, <S2SV_ModEnd> sizeof ( value",0
1289,,0
1290,<S2SV_ModStart> inode ) { return ret ;,0
1291,"<S2SV_ModStart> expr_ty returns, string type_comment, <S2SV_ModStart> ; p -> v. type_comment = type_comment ; p ->",0
1292,<S2SV_ModStart> char * name <S2SV_ModEnd> ; int ret <S2SV_ModStart> parameter -> filename <S2SV_ModEnd> ; if (,0
1293,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ),1
1294,"<S2SV_ModStart> ) { case AC_VECTOR : kvm_queue_exception_e ( vcpu, AC_VECTOR, error_code ) ; return 1 ; case",1
1295,<S2SV_ModStart> : if (! xstride <S2SV_ModEnd> ) { case,0
1296,<S2SV_ModStart> error ; struct stream packet = * s <S2SV_ModEnd> ; if (,0
1297,"<S2SV_ModStart> ( ps, ""%s"",",0
1298,<S2SV_ModStart> < 0 ) { ret = chg ; goto out_err ; } <S2SV_ModEnd> if ( hugepage_subpool_get_pages <S2SV_ModStart> chg ) ) { ret = <S2SV_ModEnd> - ENOSPC ; <S2SV_ModStart> - ENOSPC ; goto out_err ; } <S2SV_ModStart> chg ) ; goto out_err <S2SV_ModEnd> ; } if <S2SV_ModStart> return 0 ; out_err : resv_map_put ( vma ) ; return ret ;,1
1299,"<S2SV_ModStart> -> opt ; struct ipv6_tx_addr * opt = rcu_dereference ( <S2SV_ModStart> np -> opt ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, <S2SV_ModEnd> opt -> opt <S2SV_ModStart> & fl6, <S2SV_ModEnd> opt ) ;",0
1300,,0
1301,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1302,"<S2SV_ModStart>, sizeof ( double <S2SV_ModEnd> ) ) ;",0
1303,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> r, length - 1 <S2SV_ModEnd> ) ; if",0
1304,"<S2SV_ModStart> ret, last_pwd, n_new_keys",0
1305,"<S2SV_ModStart> int result = RLC_ERR ; bn_t t ; bn_len = RLC_OK ; <S2SV_ModStart> ) ; } bn_zero ( t ) ; bn_len = RLC_OK <S2SV_ModEnd> ; switch ( <S2SV_ModStart> ] ) { case RSA_SIG : bn_zero ( m, 8 ) ; bn_zero ( t, 8 ) ; bn_zero ( t ) ; bn_len = RLC_OK ; bn_zero ( t, 8 ) ; bn_zero ( t, 8 ) ; bn_len = RLC_OK <S2SV_ModEnd> ; break ; <S2SV_ModStart> ; } bn_zero ( t, m_len ) ; if ( pad == <S2SV_ModEnd> m_len ) { <S2SV_ModStart> 8 ) { <S2SV_ModEnd> return result = RLC_OK <S2SV_ModStart> ; } bn_zero ( t ) ; <S2SV_ModStart> 8 ) { <S2SV_ModEnd> if ( t",0
1306,"<S2SV_ModStart> -> length, 0,",1
1307,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1308,<S2SV_ModStart> { rq = <S2SV_ModEnd> hctx -> tags <S2SV_ModStart> hctx -> tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; if (,1
1309,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
1310,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1311,<S2SV_ModStart> } if ( strlen ( token ) > 4 &&,0
1312,<S2SV_ModStart> cpi ) { memset <S2SV_ModEnd> ( x -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( x ->,0
1313,<S2SV_ModStart> ; dname = safe_calloc <S2SV_ModEnd> ( strlen (,0
1314,"<S2SV_ModStart> } else { assert ( strlen ( hdr, false ) ;",0
1315,"<S2SV_ModStart> number_colormaps, number_planes, number_planes_filled <S2SV_ModStart> -> rows ; number_planes_filled = ( number_planes % 2 == 0 ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
1316,<S2SV_ModStart> ctl_files_rwlock ) ; mutex_init ( & card -> user_ctl_lock ) ;,1
1317,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1318,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
1319,<S2SV_ModStart> ; ps_dec -> u2_cur_slice_num = 0 ; ps_dec ->,0
1320,<S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata -> rbuf. buf!= NULL ) <S2SV_ModStart> OPENSSL_free ( rdata -> rbuf. buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata -> rbuf. buf!= NULL ) <S2SV_ModStart> OPENSSL_free ( rdata -> rbuf. buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; },1
1321,"<S2SV_ModStart> -> opt ; struct ipv6_tx_addr * opt = rcu_dereference ( <S2SV_ModStart> np -> opt ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, <S2SV_ModEnd> opt -> opt <S2SV_ModStart> & fl6, <S2SV_ModEnd> opt ) ;",0
1322,<S2SV_ModStart> arg2 ) ; if ( ret == 0 ) return ret ;,0
1323,"<S2SV_ModStart> int mptctl_ioctl_ioc ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_dev * ioc, <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } dctlprintk",0
1324,"<S2SV_ModStart> offset, offset, 0",0
1325,"<S2SV_ModStart> char * path, const char * rootfs <S2SV_ModStart> mntdata, optional, rootfs",1
1326,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1327,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> buf [ 1 <S2SV_ModEnd> ] ; struct <S2SV_ModStart> char buf, <S2SV_ModEnd> buf [ INT_MAX",0
1328,"<S2SV_ModStart> | O_NOCTTY, mode <S2SV_ModEnd> ) ; if",0
1329,<S2SV_ModStart> err_info ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> FALSE ; } <S2SV_ModEnd> if ( wth,0
1330,<S2SV_ModStart> * rq ) <S2SV_ModEnd> { int cpu <S2SV_ModStart> ; u64 irq_time ; if ( rq -> skip_clock_update ) return <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1331,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1332,"<S2SV_ModStart> sb ) ; if ( safe_calloc ( argv ) >= sizeof ( stderr ) ) { fprintf ( stderr, ""Error: <S2SV_blank> DATA"" ) ; return NULL ; }",0
1333,<S2SV_ModStart> { struct blkif_response * <S2SV_ModEnd> spin_lock_irqrestore ( & <S2SV_ModStart> case BLKIF_PROTOC_GET_RESPONSE : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> native. rsp_prod_pvt <S2SV_ModEnd> ) ; break <S2SV_ModStart> case BLKIF_32 : resp = <S2SV_ModEnd> RING_RESPONSE ( & <S2SV_ModStart> case BLKIF_X86_32 : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> RING_RESPONSE ) ) ; resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> native. rsp_prod_pvt <S2SV_ModEnd> ) ; break,0
1334,<S2SV_ModStart> ; if ( * key <S2SV_ModEnd> ) return 0,0
1335,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteOlympusEntry ) ) ;",0
1336,"<S2SV_ModStart>, pname, 0,",0
1337,<S2SV_ModStart> ndo -> ndo_snapend ; ND_TCHECK_16BITS ( & ip -> ip_len ),1
1338,<S2SV_ModStart> dentry * dir <S2SV_ModEnd> ; int dir_has_key <S2SV_ModStart> 0 ; } <S2SV_ModEnd> spin_lock ( & <S2SV_ModStart> 0 ) { <S2SV_ModEnd> inode ( dir,0
1339,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> sock ) { <S2SV_ModEnd> opt = NGS2SV_null>,0
1340,<S2SV_ModStart> ARCHIVE_WARN ; } if ( argc >= MAX_ARGS ) return ARCHIVE_WARN ;,0
1341,"<S2SV_ModStart> parent ) ; if ( ( i -> parent -> parent -> parent -> parent -> parent -> log ) > i -> parent -> parent -> log ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( NGIFLIB_NO_FILE, ""*** <S2SV_blank> Adjust <S2SV_blank> position\\n"" ) ; # if! defined ( NGIFLIB_NO_FILE ) if ( ( ( i -> parent -> parent -> parent -> parent -> log ) fprintf ( NGIFLIB_NO_FILE, ""*** <S2SV_blank> Adjusting <S2SV_blank> position\\n"" ) ; # endif return - 1 ; } if ( ( ( i -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> log ) > i -> parent -> log ) { # if! defined ( NGIFLIB_NO_FILE ) if ( ( i -> parent -> parent -> parent -> log ) fprintf ( NGIFLIB_NO_FILE ) ; # if! defined ( NGIFLIB_FILE ) if ( ( i -> parent -> log ) fprintf ( NGIFLIB_NO_FILE, ""*** <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank>",0
1342,<S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ),1
1343,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
1344,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> break ; } if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",0
1345,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1346,"<S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT6 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC6 <S2SV_ModEnd> ) ) ;",0
1347,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1348,"<S2SV_ModStart> error ; } memset ( newserv, 0, sizeof ( struct service ) ) ;",1
1349,<S2SV_ModStart> return ret ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1350,<S2SV_ModStart> ) -> tp_value [ 0 ],1
1351,"<S2SV_ModStart> ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; ret = - EINVAL ;",1
1352,"<S2SV_ModStart>, int fmt, printbuffer * p <S2SV_ModStart> = 0 ; if ( p ) out = 0 ; <S2SV_ModStart> ( out ) ; if ( p ) strcpy ( out, 10 ) ; else out = ensure ( p ) ; if (! out ) out = ensure ( char * ) cJSON_malloc ( p ) ; if ( out ) out = ensure ( char ) cJSON_malloc ( p ) ; if ( p ) strcpy <S2SV_ModEnd> ( out, <S2SV_ModStart> 1 ) ; if (! out ) out = ensure ( p ) ; if ( p ) cJSON_mstruct ( p ) ; if (! out ) { cJSON_malloc ( p, len ) ; return 0 ; } ptr = ensure ( char * ) cJSON_mstruct ( p ) ; if ( p ) out = ensure ( p ) ; if ( p ) cJSON_malloc ( p ) ; if ( p ) strcpy ( p, len, 1 ) ; if (! out ) return 0 ; child = ensure ( p ) ; if ( p ) strcpy ( p ) ; p ) { ptr = ensure ( child -> offset + 1 ) ; return 0 ; } ptr = ensure ( p ) ;",0
1353,"<S2SV_ModStart> uint32_t id ; ND_TCHECK ( cp [ 0 ] ) <S2SV_ModStart> ( ndo, len <S2SV_ModEnd> ) ) ;",0
1354,"<S2SV_ModStart> int tagval, uint32 <S2SV_ModEnd> * length )",1
1355,<S2SV_ModStart> = 0 ; int sk_locked ; <S2SV_ModStart> = 0 ; } <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1356,<S2SV_ModStart> value ) { unsigned int <S2SV_ModEnd> value ; value <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> value & 0xffff <S2SV_ModEnd> ; value |= <S2SV_ModStart> value & 0xffff <S2SV_ModEnd> ; value |,0
1357,"<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> h"", <S2SV_ModStart> y ) ; sendClean ( outputbuffer ) ;",0
1358,<S2SV_ModStart> ; size = 0 ; hdr ->,0
1359,<S2SV_ModStart> void exit_io_context ( struct task_struct * task <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; struct task_lock ( task <S2SV_ModEnd> ) ; ioc <S2SV_ModStart> -> io_context ; task <S2SV_ModEnd> -> io_context ; <S2SV_ModStart> ; task_unlock ( task <S2SV_ModEnd> ) ; if,0
1360,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",0
1361,<S2SV_ModStart> ; if ( ctx -> terminated ||,0
1362,"<S2SV_ModStart> ) { int ret = pci_read_config_word <S2SV_ModEnd> ( dev, <S2SV_ModStart> offset, value ) ; <S2SV_ModEnd> return ret ;",0
1363,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) ; vpx_codec_alg_priv_t <S2SV_ModEnd> ( ctx,",0
1364,<S2SV_ModStart> ] ) ; free_uid ( fpl -> user ) ;,1
1365,,0
1366,"<S2SV_ModStart> -> dwc ; dwc3_gadget_del_and_unmap_request ( dep, req, status <S2SV_ModEnd> ) ; spin_unlock <S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
1367,"<S2SV_ModStart> : # line 113 <S2SV_ModEnd> ""hex_grammar.y"" { ( <S2SV_ModStart> } # line 122 <S2SV_ModEnd> ""hex_grammar.y"" break ; <S2SV_ModStart> } # line 1037 <S2SV_ModEnd> ""hex_grammar.y"" { ( <S2SV_ModStart> } # line 126 ""hex_grammar.y"" break ; <S2SV_ModEnd> break ; case <S2SV_ModStart> : # line 126 ""hex_grammar.y"" { incr_ast_levels ( yyvsp [ ( yyvsp [ ( yyvsp [ ( 1 ]. String ) ], NULL ) ; } if ( yyvsp [ ( yyvsp [ ( yyvsp [ ( 1 ]. String ) == ( yyvsp [ ( yyvsp [ ( 1 ) ]. String ) ]. String ) { ( yyvsp [ ( 1 ) ]. String ) ; } # line 1029 <S2SV_ModEnd> ""hex_grammar.y"" break ; <S2SV_ModStart> } # line 1054 <S2SV_ModEnd> ""hex_grammar.y"" { ( <S2SV_ModStart> : yyvsp [ ( yyvsp [ ( yyvsp [ ( 1 ) ], ( 1 ) - ( yyvsp [ ( 1 ) ].",0
1368,"<S2SV_ModStart> sas_revalidate_domain, [ <S2SV_ModEnd> DISCE_SUSPEND ] = <S2SV_ModStart> ] = sas_resume_devices <S2SV_ModEnd>, } ;",1
1369,"<S2SV_ModStart>, int i, my_quick, 0 <S2SV_ModStart> 0 ) { no_copy_stat = 0 ; if ( no_stat ) flags |= MY_STAT ; <S2SV_ModStart>, no_copy_stat, 0 <S2SV_ModEnd> ) { no",0
1370,<S2SV_ModStart> ) ; return 0 <S2SV_ModEnd> ; } if,0
1371,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
1372,<S2SV_ModStart> sk -> sk_family <S2SV_ModEnd> ; struct sk_buff <S2SV_ModStart> goto out ; <S2SV_ModEnd> if ( flags <S2SV_ModStart> AF_INET ) { struct sockaddr_in * <S2SV_ModStart> ) ) ; * addr_len = sizeof ( * sin ) ; <S2SV_ModStart> skb ) ; <S2SV_ModEnd> struct sockaddr_in6 * <S2SV_ModStart> struct sockaddr_in6 * sin6 = ( struct sockaddr_in6 * <S2SV_ModStart> ) -> iif ) ; * addr_len = sizeof ( * sin6,1
1373,<S2SV_ModStart> = 0 ; unsigned int ret_inode_flag = EXT4_GET_BLOCKS_SIZE ; if (! ( mode & EXT4_GET_BLOCKS_KEEP_SIZE ) ) { ret = - EINVAL ; goto out_mutex ; } <S2SV_ModEnd> } if (,0
1374,<S2SV_ModStart> ) ) ; free_buf_size = 0 ;,0
1375,<S2SV_ModStart> return map ; map =,1
1376,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> char * cp <S2SV_ModStart> = '\\0' ; if ( <S2SV_ModEnd> ( * cp <S2SV_ModStart> == '\\0' ) return ( - 1 ) <S2SV_ModStart> ) ) { if ( * cp == '\\0' && * cp == '\\\\' ) { if ( * cp == '\\\\' ) return - 1 ; } <S2SV_ModEnd> if ( cp <S2SV_ModStart> == '\\0' ) return 0 ; <S2SV_ModStart> == '\\0' <S2SV_ModEnd> = '\\\\' ; <S2SV_ModStart> = '\\' ; } <S2SV_ModEnd> if ( cp <S2SV_ModStart> == '\\' ) { <S2SV_ModEnd> if ( cp <S2SV_ModStart> = '\\' ; } <S2SV_ModEnd> if ( cp <S2SV_ModStart> == '\\' ) <S2SV_ModEnd> if ( cp <S2SV_ModStart> == '\\0' ) { <S2SV_ModEnd> if ( cp <S2SV_ModStart> = '\\0' ; } <S2SV_ModEnd> if ( cp <S2SV_ModStart> == '\\' ) { if ( ( cp ++ )!= '.' ) { * ep = p ++ ; * cp ++ ; * ep = * ep = * cp ++ ; * cp ++ ; } else if ( * cp!= '\\0' ) return ( - 1 ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ( cp ++ ) <S2SV_ModEnd> if (! <S2SV_ModStart> == ',0
1377,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1378,<S2SV_ModStart> ; if ( <S2SV_ModEnd> size_left < 4,1
1379,"<S2SV_ModStart> pktmod ) { size_t lc = 0 ; <S2SV_ModStart>, ctx, & pcol, MAX ( pcol, 0, sizeof ( pcol ) ) <S2SV_ModEnd> ; if (",0
1380,<S2SV_ModStart> { int i ; int <S2SV_ModEnd> ubits = BN_num_bits <S2SV_ModStart> ( u ) ; int <S2SV_ModEnd> vbits = BN_num_bits,0
1381,<S2SV_ModStart> -> d_mv ; memset <S2SV_ModEnd> ( x ->,0
1382,<S2SV_ModStart> crypto_report_p kncpy <S2SV_ModEnd> ( rcmpt.,0
1383,<S2SV_ModStart> = alloc ; size_t <S2SV_ModEnd> strindex = 0,1
1384,"<S2SV_ModStart>, nbits ; if ( msg -> cursize << 3 ) { msg -> readcount = 0 ; return 0 ; } <S2SV_ModStart> ) ) ; if ( msg -> cursize > msg -> cursize << 3 ) { msg -> cursize << 3 ( msg -> cursize << 3 ) ; return 0 ; } <S2SV_ModStart> & 7 ; if ( msg -> cursize << 3 ) > msg -> cursize << 3 ) { msg -> cursize << 3 ( msg -> cursize << 3 ) ; return 0 ; }",0
1385,<S2SV_ModStart> int idx ; unsigned int count ; <S2SV_ModStart> -> count ; count = kcontrol -> count ; <S2SV_ModStart> ; idx < <S2SV_ModEnd> count ; idx,1
1386,<S2SV_ModStart> ; out1 : cancel_work_sync ( & dev -> kevent ) ; del_timer_sync ( & dev -> delay ) ;,1
1387,"<S2SV_ModStart>, int n, false",0
1388,,0
1389,<S2SV_ModStart> ) ; return 0 <S2SV_ModEnd> ; } if,0
1390,"<S2SV_ModStart> { value = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl <S2SV_ModEnd> ) ; if",0
1391,<S2SV_ModStart> header. types_size <S2SV_ModEnd> ) { continue,1
1392,<S2SV_ModStart> : case NPPVformValue : case NPPVpluginNativeAccessibleAtkPlugId <S2SV_ModStart> case NPPVpluginKeepLibraryInMemory : case NPPVpluginUrlRequestsDisplayedBool : case NPPVpluginWantsAllNetworkStreams : case NPPVpluginCancelSrcStream : case NPPVSupportsAdvancedKeyHandling :,1
1393,"<S2SV_ModStart> int i, size_t <S2SV_ModEnd> out, int <S2SV_ModStart> out ) { size_t <S2SV_ModEnd> strlen ( o <S2SV_ModStart> ) ; } <S2SV_ModEnd> strcmp ( o",0
1394,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1395,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1396,"<S2SV_ModStart> ( interface, TEMP_FAILURE_RETRY <S2SV_ModEnd> ) ; if",0
1397,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1398,<S2SV_ModStart> >= 0 && <S2SV_ModEnd> ND_TTEST ( * <S2SV_ModStart> < ie && <S2SV_ModEnd> ND_TTEST ( *,0
1399,"<S2SV_ModStart>, NULL, <S2SV_ModEnd> data ) ;",1
1400,<S2SV_ModStart> ret ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1401,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
1402,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int bit_depth, <S2SV_ModStart> int mi_colssegment_height <S2SV_ModEnd> ( 16, <S2SV_ModStart> int stride, memset <S2SV_ModEnd> ( 16,",0
1403,,0
1404,"<S2SV_ModStart> val ) { if ( strlen ( val ) > 1 ) { return 0 ; } <S2SV_ModEnd> char * str <S2SV_ModStart> ( str, ""Invalid <S2SV_blank> '\\"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ( str, ( len )",0
1405,"<S2SV_ModStart> * jas_iccprof_createfrombuf ( jas_uchar <S2SV_ModEnd> * buf,",1
1406,<S2SV_ModStart> i_inode ) { ei -> i_flags = 0 ;,0
1407,<S2SV_ModStart> ) ) ; if ( NULL ) goto out ;,0
1408,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct ion_handle * <S2SV_ModStart> ; handle = ion_handle_get_by_id_nolock ( client, id <S2SV_ModEnd> ) ; mutex_unlock <S2SV_ModStart> ; return handle <S2SV_ModEnd> ; } <S2SV_null>",1
1409,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm, struct vpx_wb_write_bit_buffer <S2SV_ModEnd> * wb ; <S2SV_ModStart> ) ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
1410,<S2SV_ModStart> : if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> : if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; },1
1411,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { p = osStrchr <S2SV_ModEnd> ( p +,0
1412,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1413,<S2SV_ModStart> ; memset <S2SV_ModEnd> ( pd ->,0
1414,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( interface, ENC624J600_EC_R1, ENC624J600_BUFFER <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC624J600_TXR_BUFFER <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC624J600_TXR_BUFFER_t, ENC624J600_BUFFER <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_OK <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EIR_BUFFER <S2SV_ModEnd> ) ) ; while <S2SV_ModStart> ( interface, ENC624J600_RUPTLSY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_RBUFFER <S2SV_ModEnd> ) ) ; while <S2SV_ModStart> ( interface, ENC624J600_EIR_TXRBUFFER <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( interface, ENC624J600_RTS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_",0
1415,<S2SV_ModStart> ] == 0x01 && i < gemsafe_cert_max,1
1416,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
1417,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv, VALUE * argv, VALUE ) { VALUE parse_options ; VALUE parse_options ; xmlRelaxNGParserCtxtPtr ctx ; xmlRelaxNGParserCtxtPtr schema ; VALUE rb_schema ; int scanned_args = rb_args ; int scanned_args = rb_args ; scanned_args = rb_args ; if ( scanned_args == 0 ) { parse_options = rb_const_get ( rb_const_const_get ( mNokogiriXml, rb_intern ( ""ParseOptions"" ) ), rb_intern ( ""ParseOptions"" ) ) ) ; return parse_options ; }",0
1418,"<S2SV_ModStart> * fbdev ; <S2SV_ModEnd> fbdev = to_au1100fb_device <S2SV_ModStart> ( fbi ) <S2SV_ModEnd> ; vma -> <S2SV_ModStart> 9 ) ; return vm_iomap_memory <S2SV_ModEnd> ( vma, <S2SV_ModStart> ( vma, fbdev -> fb_phys, fbdev -> fb_len <S2SV_ModEnd> ) ; }",0
1419,<S2SV_ModStart> == - 1 ||,0
1420,"<S2SV_ModStart> state -> size, 0 <S2SV_ModStart> state ) ; if ( state -> x >= 0 ) return NULL ;",0
1421,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
1422,<S2SV_ModStart> ; if ( <S2SV_ModEnd> arg >= cdi,1
1423,<S2SV_ModStart> ; err = - EINVAL <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto out <S2SV_ModEnd> ; err =,0
1424,<S2SV_ModStart> event ) { <S2SV_ModEnd> return lock ;,0
1425,<S2SV_ModStart> <S2SV_null> <S2SV_null> static u32_t <S2SV_ModEnd> u16BITS ( u16_t <S2SV_ModStart> ) { int len <S2SV_ModEnd> * p ; <S2SV_ModStart> ) return FALSE ; if ( len < 2 ) { if (! u ) return - 1 ; <S2SV_ModStart> ) return FALSE ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1426,"<S2SV_ModStart>, i ; if (! ( s -> bit_depth ) ) return AVERROR_INVALIDDATA ;",0
1427,<S2SV_ModStart> 0 ) ; if ( ret < 0 ) goto out ;,0
1428,<S2SV_ModStart> } dt -> proto = IP_GET_IPPROTO ( p ) ; dt ->,1
1429,"<S2SV_ModStart> ( interface, KSZ8851_R, status <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_R_RX <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_R, KSZ8851_R, KSZ8851_R_R <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( interface, KSZ8851_FMTR_R, KSZ8851_R_RX <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, KSZ8851_R_R, KSZ8851_R_R, KSZ8851_RX <S2SV_ModEnd> ) ; }",0
1430,,0
1431,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1432,"<S2SV_ModStart> ( AUDIT_APPARMOR_DENIED, __aa_current_profile ( ), GFP_KERNEL, & sa, NULL <S2SV_ModEnd> ) ; }",1
1433,<S2SV_ModStart> uint_fast8_t tmp ; siz -> height ; siz -> height = 0 ; <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } if,0
1434,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return 0 ;,0
1435,"<S2SV_ModStart>, xmi_data, xmi_size,",1
1436,"<S2SV_ModStart> size_t total_len ; struct iov_iter * iter ; <S2SV_ModStart> ) return 0 ; iov_iter_init ( & iter, iov, nr_segs, total_len, 0 ) <S2SV_ModStart> size_t chars ; <S2SV_ModEnd> size_t chars ; <S2SV_ModStart> buf -> page ; size_t chars ; <S2SV_ModStart> buf -> page ; size_t chars ; if ( unlikely (! iter ) ) ret = - EFAULT <S2SV_ModEnd> ; break ;",0
1437,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits <S2SV_ModStart> ) ; } \\\n} <S2SV_ModEnd> Quantum index ; <S2SV_ModStart> ++ ) { next_pixel = MagickFalse ; displacement = 1 ; <S2SV_ModStart> -= MaxHashTable ; if ( k < 0 ) continue <S2SV_ModEnd> ; if (,0
1438,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1439,<S2SV_ModStart> } if ( hdl -> sm_hdl ) { <S2SV_ModStart> ) ; goto cleanup ; } if ( hdl -> sm_hdl ) { if ( hdl -> sm_hdl ) { if ( hdl -> sm_path [ 0 ] ) unlink ( hdl -> pm_hdl ) ; goto cleanup ; } if ( hdl -> sm_hdl ) { if ( hdl -> sm_hdl -> pm_hdl ) { if ( hdl -> sm_hdl ) unlink ( hdl -> pm_hdl ) ; } if ( hdl -> pm_hdl ) { if ( hdl -> fe_hdl -> fe_hdl -> pm_hdl ) { if ( hdl -> fe_hdl ) unlink ( hdl -> sm_hdl ) ; } <S2SV_ModEnd> free ( hdl,0
1440,"<S2SV_ModStart> size_t max_mem ; size_t max_samples ; size_t max_samples ; <S2SV_ModStart> ) ) { jas_eprintf ( ""error: <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> name <S2SV_blank> %d\\n"", optstr, fmtname ) ; return 0 ; } <S2SV_ModStart> = max_samples ; max_samples = strlen ( fmtname, optstr, sizeof ( fmtname ) ) ; <S2SV_ModStart>, ""%s <S2SV_blank> %d <S2SV_blank> %d\\n"", optstr, max_image_samples ) ; max_samples = strlen ( optstr, optstr, fmtname ) ; break ; case",0
1441,<S2SV_ModStart> } # endif,0
1442,<S2SV_ModStart> == 0 ) { <S2SV_ModStart> return 1 ; },0
1443,<S2SV_ModStart> col ++ ) { if ( y >= 64 ) return 0 ; <S2SV_ModStart> ) ) ; for ( i = 0 ; i < 4 <S2SV_ModEnd> ; i ++,0
1444,<S2SV_ModStart> - arg ; if ( len < 0 ) goto out ;,0
1445,<S2SV_ModStart> 2 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,1
1446,"<S2SV_ModStart> ; if ( kvm_is_inode <S2SV_ModEnd> ( kvm, <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return - EINVAL",0
1447,<S2SV_ModStart> -> bfq ) <S2SV_ModEnd> ; if (,0
1448,<S2SV_ModStart> else { return false <S2SV_ModEnd> ; } case,1
1449,"<S2SV_ModStart> sa -> len, 0",0
1450,<S2SV_ModStart> (! handle ||! SecIsValidHandle ( handle ),1
1451,<S2SV_ModStart> ) ; return length <S2SV_ModEnd> ; } <S2SV_null>,0
1452,<S2SV_ModStart> dentry ) ; <S2SV_ModEnd> if (!,0
1453,<S2SV_ModStart> OP_EXACT1 ) ; <S2SV_ModEnd> DATA_ENSURE ( 1 <S2SV_ModStart> ++ ; s <S2SV_ModEnd> ++ ; MOP_OUT,1
1454,"<S2SV_ModStart> ( plane, vpx_reader <S2SV_ModEnd> * r )",0
1455,<S2SV_ModStart> = - EINVAL ; msg -> msg_namelen = 0,0
1456,"<S2SV_ModStart> mntent, path, rootfs",1
1457,<S2SV_ModStart> ( sr -> fd_id ) <S2SV_ModEnd> return 0 ;,0
1458,<S2SV_ModStart> keyring ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1459,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> -> common ; MACROBLOCK * const x = & cpi -> td. <S2SV_ModStart> mi_mode_offsets <S2SV_ModEnd> ( cpi, <S2SV_ModStart> bsize ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1460,<S2SV_ModStart> NETIF_F_HW_CSUM | NETIF_F_SG <S2SV_ModEnd> ; if (,0
1461,<S2SV_ModStart> (! file <S2SV_ModEnd> ) ; return,0
1462,"<S2SV_ModStart> pixel_info ) ; ( void ) ResetMagickMemory ( pixels, 0, pixel_info_length ) ;",1
1463,<S2SV_ModStart> ; size_t count ; if ( count > sizeof ( buf ) ) return - EINVAL ; if (,0
1464,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> return 0 ;,0
1465,<S2SV_ModStart> ; if ( is_daddr ) <S2SV_ModEnd> return 0 ;,0
1466,<S2SV_ModStart> ; if ( cct >= 0 &&,0
1467,,0
1468,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
1469,"<S2SV_ModStart>, sizeof ( double <S2SV_ModEnd> ) ) ;",1
1470,<S2SV_ModStart> event ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1471,"<S2SV_ModStart>, flags ; ND_TCHECK2 ( tptr [ 0 ], 5 ) ; <S2SV_ModStart> tlen = len <S2SV_ModEnd> ; ND_PRINT (",0
1472,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1473,"<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( dest_frame,",0
1474,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (,0
1475,<S2SV_ModStart> int u ; if ( n < 0 || n >= 32 ) { return - 1 ; } <S2SV_ModEnd> v = 0,1
1476,"<S2SV_ModStart> iovec, compat, & iter <S2SV_ModStart> len, iovec, & iter",0
1477,"<S2SV_ModStart> } if ( ptr - c -> rcurr > 100 || ( strncmp ( ptr, ""get <S2SV_blank> "", 4 ) && strncmp <S2SV_ModEnd> ( ptr, <S2SV_ModStart> ptr, ""gets <S2SV_blank> "", 5 )",0
1478,<S2SV_ModStart> desc_err ; if (! udev ) return - EINVAL ;,0
1479,"<S2SV_ModStart> ; if ( desc -> bNumEndpoints < 1 ) { dev_err ( & config -> dev, ""invalid <S2SV_blank> size <S2SV_blank> interface <S2SV_blank> %d\\n"", config -> desc. bNumEndpoints ) ; return - ENODEV ; } if (",0
1480,<S2SV_ModStart> ; ue -> card = card ; ue ->,0
1481,"<S2SV_ModStart> client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; return 0 ; } if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) { exit_client ( client_p, client_p, client_p, ""Malformed <S2SV_blank> AUTHENTICATE""",1
1482,<S2SV_ModStart> ctxt -> rip_relative && likely ( ctxt -> memopp ),1
1483,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0 ) ;",0
1484,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; random_ether_addr (,1
1485,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( x ->,0
1486,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_MAC_MAX <S2SV_ModEnd>, interface -> <S2SV_ModStart> ( interface, ENC624J600_EC_MAADR <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_MAADR1 <S2SV_ModEnd>, interface -> <S2SV_ModStart> ( interface, ENC624J600_MABITS2SV_null> <S2SV_null>",0
1487,"<S2SV_ModStart> * header ; size_t maxlen = 0 ; <S2SV_ModStart> ( psf, maxlen ) ) return 0 <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>",0
1488,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
1489,"<S2SV_ModStart> ) ) ) { applog ( LOG_WARNING, ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> header <S2SV_blank> to <S2SV_blank> got <S2SV_blank> convert <S2SV_blank> to <S2SV_blank> %s"", __func__, header ) ; pool_failed ( pool ) ; return false ; } <S2SV_ModEnd> cb1 = (",0
1490,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, ctx ) <S2SV_ModStart> ( ctx -> priv <S2SV_ModEnd> ) ; if",0
1491,<S2SV_ModStart> case EXIT_REASON_VMON : case EXIT_REASON_INVEPT :,1
1492,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> rate_interval = ( VP9_COMP <S2SV_ModStart> = 2 ; if ( cpi -> oxcf. mode_mode == 2 ) { VP9_COMP * cpi -> common. mb. frames_since_key = 1 ; <S2SV_ModStart> ; sf -> <S2SV_ModEnd> frame = sf -> <S2SV_ModStart> ; if ( cpi -> frame_type == KEY_FRAME ) { if ( cpi -> frames_since_key == KEY_FRAME ) { sf -> is_interval = 1 ; <S2SV_ModEnd> if ( cpi <S2SV_ModStart> = 2 ; } <S2SV_ModEnd> if ( cpi <S2SV_ModStart> ( cpi -> frame_type == LAST_FRAME ) <S2SV_ModEnd> ; sf -> <S2SV_ModStart> if ( cpi -> rc_interval <S2SV_null>,0
1493,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
1494,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1495,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1, 0 )",0
1496,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1497,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1498,"<S2SV_ModStart> * n, strlen ( n, <S2SV_ModStart> 0 ), n <S2SV_ModEnd> ) ; for",0
1499,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> * ) { int res = 1 ; if ( svc_ctx -> svc_context [ 1 ] == VPX_CODEC_ERROR ) { return ERROR_INVALID_PARAM_INVALID_PARAM ; } else <S2SV_ModStart> ) ; } switch ( svc_ctx ) { case VPX_CODEC_OK : if ( svc -> oxcf. <S2SV_ModEnd> == 0 ) <S2SV_ModStart> ) break ; case VPX_CODEC_ERROR : if ( svc_ctx -> svc. <S2SV_ModEnd> == NULL ) <S2SV_ModStart> ) break ; },0
1500,<S2SV_ModStart> event ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1501,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1502,<S2SV_ModStart> ; if ( entry == NULL ) return EINVAL ; if ( <S2SV_ModStart> KADM5_POLICY ) && entry -> policy == NULL <S2SV_ModEnd> ) return KADM5_BAD_MASK <S2SV_ModStart> ; if ( ( mask & KADM5_POLICY ) && ( mask & KADM5_POLICY_CLR ) ) return KADM5_BAD_MASK <S2SV_ModEnd> ; if (,1
1503,<S2SV_ModStart> frame -> data [ plane ] && frame -> linesize <S2SV_ModStart> [ plane ] && frame -> linesize [ plane ],1
1504,"<S2SV_ModStart> mbs, vpx_reader <S2SV_ModEnd> ) ; return",0
1505,"<S2SV_ModStart> * new_memo, size_t",0
1506,,1
1507,<S2SV_ModStart> opflags ) { <S2SV_ModEnd> if (!,0
1508,<S2SV_ModStart> ; if ( pmh -> pm!= NULL ),0
1509,<S2SV_ModStart> int running_lock ) ; <S2SV_ModEnd> spin_lock ( & <S2SV_ModStart> ) ; } <S2SV_ModEnd> spin_unlock ( & <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1510,<S2SV_ModStart> ; size_t <S2SV_ModEnd> len = 0,0
1511,<S2SV_ModStart> size + 1,0
1512,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_decode ( NSC_CONTEXT <S2SV_ModStart> ; UINT16 rw ; BYTE * context ; size_t pos = 0 ; if (! context ) return FALSE ; <S2SV_ModStart> ; } } return FALSE ;,0
1513,<S2SV_ModStart> while ( offset > 0 && offset <S2SV_ModStart> < end_offset ) { <S2SV_ModStart> hf_keybuffer ) ; },1
1514,,0
1515,"<S2SV_ModStart> cpi, const VP9EncoderConfig <S2SV_ModEnd> * const oxcf <S2SV_ModStart> -> oxcf ; const int cpi -> avg_frame_bandwidth <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; if ( cpi -> oxcf. avg_frame_bandwidth!= VP9_COMP * cpi -> oxcf. avg_frame_bandwidth ) { cpi -> oxcf. avg_frame_bandwidth = ( cpi -> oxcf. avg_frame_bandwidth * 100 ) / ( int ) ( int ) ( cpi -> oxcf. avg_frame_bandwidth = 0 ; } <S2SV_ModEnd> = ( int <S2SV_ModStart> ( cpi -> oxcf. avg_frame_bandwidth ) <S2SV_ModEnd> ; } <S2SV_null>",0
1516,<S2SV_ModStart> X86_EFLAGS_RF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1517,"<S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; if ( ret <= size ) memcpy ( data, buf, ret ) ; kfree ( buf ) ; return ret ;",0
1518,"<S2SV_ModStart> int vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> int r ) vpx_read_bit <S2SV_ModEnd> ( r ) <S2SV_ModStart> ) ; return vpx_read_bit <S2SV_ModEnd> ( r )",0
1519,<S2SV_ModStart> op + OSPF6HDR_LEN ) ; ND_TCHECK_32BITS ( & hellop -> hello_options,1
1520,<S2SV_ModStart> { if ( datalen!= 1 ) return - EINVAL ; if (,1
1521,"<S2SV_ModStart> rc ) { struct task_struct * <S2SV_ModEnd> task = kthread_run <S2SV_ModStart> ; if ( IS_ERR ( task ) ) { <S2SV_ModStart> uwbd. task = NULL ; <S2SV_ModEnd> printk ( KERN_ERR <S2SV_ModStart> ""UWB <S2SV_blank> won\'t <S2SV_blank> work\\n"" ) ; } else { rc -> uwbd. task = task ; <S2SV_ModEnd> rc -> uwbd <S2SV_ModStart> pid ; } }",1
1522,"<S2SV_ModStart> : # line 101 ""hex_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1036 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 102 ""hex_grammar.y"" { yr_re_node_destroy ( ( * yyvaluep ). re_node ) ; } # line 1036 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 104 ""hex_grammar.y"" { yr_re_re_node_node_re_re_node_destroy ( ( * yyvaluep ). re_node ) ; } # line 1036 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 104 ""hex_grammar.y"" { yr_re_re_node_node_re_node_destroy ( ( * yyvaluep ). re_node ) ) ; } # line 1048 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 107 ""hex_grammar.y"" { yr_re_re_node_node_node_re_node",0
1523,<S2SV_ModStart> : idx ; assert ( ptr >= gfx -> backendData && ptr < ( ( char * ) gfx -> backendData + graphicsGetMemoryRequired ( gfx ) ) ) ;,1
1524,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> coeffs ( MACROBLOCK * xd <S2SV_ModStart> ] ; const MACROBLOCK * const x = & td -> mb ; MACROBLOCKD * const xd = & td -> e_mbd ; MACROBLOCKD * const x = & td -> e_mbd ; const int bd = td -> e_mbd ; int bd = 0 ; <S2SV_ModStart> ] ; const int <S2SV_ModEnd> struct macroblock_plane [ plane <S2SV_ModStart> ] ; const uint8_t * cat4_id = & td -> mbmi ; const int64_t * tp = td -> mb ; const int64_t * cat6_ext = 0 ; const int bd = td -> mb ; const int64_t * cat2_ext = BLOCK_SIZE bsize ; const int64_t * tp = td -> bd ; const int64_t * tp = tp9_low_t ; const uint8_t * tp = & tp9_id ; const uint8_t * tp9_t * tp9_,0
1525,,0
1526,<S2SV_ModStart> { if ( ( <S2SV_ModStart> shmflg & SHM_RND ) && addr >= shmlba,1
1527,"<S2SV_ModStart> -> ctx, fmode_t <S2SV_ModEnd> ) ; if",0
1528,<S2SV_ModStart> tmp ) { if ( point2 == NULL ) { return ; },0
1529,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1530,<S2SV_ModStart> : case NPNVSupportsWindowless : case NPNVprivateModeBool : case NPNVsupportsAdvancedKeyHandling,1
1531,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1532,"<S2SV_ModStart> len = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, 0 )",0
1533,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static char * xml_create_item_name ( xml -> xml_path ) ; int actual_size = 0 ; <S2SV_ModStart> ) ) { if ( xml -> parent_path ) { if ( xml -> xml_path_len < 1 ) { xml_create_value ( ++ ) ; } else { <S2SV_ModEnd> if (! <S2SV_ModStart> ) ; } },0
1534,"<S2SV_ModStart>, pname, 0,",0
1535,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * const si,0
1536,<S2SV_ModStart> fq ) ; q -> mq_ops = NULL ;,0
1537,"<S2SV_ModStart> s ) { uint32 length ; struct stream packet = * s <S2SV_ModEnd> ; ber_parse_header ( <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> consume <S2SV_blank> domain <S2SV_blank> params <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",1
1538,"<S2SV_ModStart> ( zval <S2SV_ModEnd>, hash,",0
1539,"<S2SV_ModStart> char * strm <S2SV_ModStart> ; int ret <S2SV_ModStart> = '\\0' ; strcpy <S2SV_ModEnd> ( buf, <S2SV_ModStart> ) ) ; char <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> ] = _y4m -> y4m. y4m",0
1540,<S2SV_ModStart> char * buf <S2SV_ModEnd> ; if (,0
1541,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline int <S2SV_ModEnd> table_table_table_start_table_start ( table_start <S2SV_ModStart> = FALSE ; if (! s. table_start_start ) return FALSE <S2SV_ModStart> = FALSE ; if ( s. table_start_start_table_start_table_start ( table_start, table_start. table_start. table_start. table_start ) ) return FALSE ; <S2SV_ModStart> return FALSE ; <S2SV_ModEnd> return FALSE ;",0
1542,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1543,<S2SV_ModStart> prevhdr ) < 0,0
1544,"<S2SV_ModStart> cpi ) { memset <S2SV_ModEnd> ( seg, <S2SV_ModStart> SEG_FRAME ) ; memset <S2SV_ModEnd> ( seg, <S2SV_ModStart> } else { memset <S2SV_ModEnd> ( seg,",0
1545,"<S2SV_ModStart>, union_type, 0, <S2SV_ModStart> } if ( lookup_type_type_type, sizeof ( str ) ) < 0 ) { return 1 ; } if ( <S2SV_ModStart>, num_type_comment, 0 ) == 0 ) goto error_type ; } <S2SV_ModStart> } if ( <S2SV_ModEnd> < 0 ) <S2SV_ModStart> < 0 ) { <S2SV_ModEnd> if (! <S2SV_ModStart> } return 0 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1546,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1547,<S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 4 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 4 ; } while ( context -> pass > 0 && context -> pass < 4 && context -> curY >= p -> height ) { switch ( ++ context -> pass ) { case 2 : context -> curY = i -> posY + 2 ; break ; case 2 : context -> curY = i -> posY + 2 ; break ; case 2 : context -> curY = i -> posY + 1 ; break ; },0
1548,<S2SV_ModStart> ) { memset <S2SV_ModEnd> ( x ->,0
1549,"<S2SV_ModStart> ) ; } smb_ofile_flush <S2SV_ModEnd> ( sr, <S2SV_ModStart> f_mutex ) ; smb_ofile_flush <S2SV_ModEnd> ( sr,",1
1550,<S2SV_ModStart> <S2SV_null> <S2SV_null> static u32_t <S2SV_ModEnd> u16BITS ( u16_t <S2SV_ModStart> ) { int len <S2SV_ModEnd> * p ; <S2SV_ModStart> ) return FALSE ; if ( len < 2 ) { if (! u ) return - 1 ; <S2SV_ModStart> ) return FALSE ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1551,<S2SV_ModStart> ; if ( * cp == '\\0' || <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> )!= NULL || <S2SV_ModEnd> strcmp ( cp,0
1552,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> snprintf ( int <S2SV_ModStart> * outputbuffer <S2SV_ModEnd>, int num, <S2SV_ModStart> = 0 ; int len <S2SV_ModEnd> = 0 ; <S2SV_ModStart> } else { int len <S2SV_ModEnd> = 0 ; <S2SV_ModStart> ) ) { <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1553,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : ms -> elf_notes_max = * ( const size_t * ) val ; return 0 ;,0
1554,"<S2SV_ModStart> net. ipv4_id_key <S2SV_ModEnd>, hash, <S2SV_ModStart>, sizeof ( net -> ipv4. ip_id_key ) <S2SV_ModEnd> ) ; id",0
1555,"<S2SV_ModStart> } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lineno, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""return 1 ; } else { int res <S2SV_ModEnd> ; if (",0
1556,"<S2SV_ModStart> void vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, const vpx_prob <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, PREDICTION_MODE",0
1557,"<S2SV_ModStart> ctl -> pw, "".chfn""",1
1558,<S2SV_ModStart> { if ( max_length < sizeof ( struct ieee80211_radiotap_header ) ) return - EINVAL ; if (,0
1559,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if (!,0
1560,<S2SV_ModStart> src ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1561,"<S2SV_ModStart> return ; } if ( input <= 0.0 || output <= 0.0 ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Gamma <S2SV_blank> values <S2SV_blank> should <S2SV_blank> be <S2SV_blank> positive"" ) ; RETURN_FALSE ; }",1
1562,<S2SV_ModStart> case VPX_FIRST_PASS : 0 <S2SV_ModEnd> ; dev ->,0
1563,<S2SV_ModStart> command ) ; if ( cmd -> cmd!= NULL ) return,0
1564,,0
1565,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> int mi_row, <S2SV_ModStart> ) { vpx_read_tile_cols ( memset <S2SV_ModEnd> ( & tile_col, <S2SV_ModStart> ) ) ; vpx_writer <S2SV_ModEnd> ( & tile_cols <S2SV_ModStart> ) ) ; vpx_read_tile_row <S2SV_ModEnd> ( & tile_cols <S2SV_ModStart> -> tile_col ; memset <S2SV_ModEnd> ( & tile_cols, <S2SV_ModStart> -> tile_cols, tile_col ) <S2SV_ModEnd> ( & tile_cols <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & tile_cols <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( tile_cols, <S2SV_ModStart> ) ) ; vpx_read_tile_tile_cols <S2SV_ModEnd> ( & tile_cols <S2SV_ModStart> -> tile_col ) ; memset <S2SV_ModEnd> ( tile_col, <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( tile_cols,",0
1566,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> pbi ) { VP9_COMMON * <S2SV_ModStart> ) { VP9_COMMON * const MACROBLOCKD * const cm = & pbi -> common ; MACROBLOCKD * const VP9_COMMON * const cm = & pbi -> common ; MACROBLOCKD * const cm = & pbi -> common ; MACROBLOCKD * const cm = & <S2SV_ModEnd> cm -> xd <S2SV_ModStart> = 0 ; vpx_decode = & <S2SV_ModEnd> cm -> frame_parallel_decode <S2SV_ModStart> cm -> frame_parallel_decode ) ; vpx_decoder_get_frame_decoder ( & VP9_COMMON <S2SV_ModStart> cm ) ; vpx_free ( cm -> frame_data ) ; vpx_decode ) <S2SV_ModEnd> ( pbi -> <S2SV_ModStart> cpi ) ; vpx_get_frame_decoder_data <S2SV_ModEnd> ( & <S2SV_ModStart> cm, pbi -> frame_data <S2SV_ModEnd> ) ; vp9_decode",0
1567,<S2SV_ModStart> ) ) { return GF_IS_INVALID_FILE <S2SV_ModEnd> ; } if,0
1568,<S2SV_ModStart> ; client -> protocol == NULL <S2SV_ModEnd> ) ; client,0
1569,<S2SV_ModStart> -> count ; new_fpl -> user = get_uid ( fpl -> user ) ;,1
1570,"<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( ip_options_rcu, * opt <S2SV_ModEnd> ) ; if",0
1571,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1572,"<S2SV_ModStart>, vpx_codec_err_t * ) ctx ; # if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> flags & VPX_IMG_FMT_HIGHBITDEPTH ) { # if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> flags & VPX_IMG_FMT_HIGHBITDEPTH ) { vpx_codec_err_error ( ctx, VPX_IMG_FMT_HIGHBITDEPTH ) ; } # if CONFIG_VP9_HIGHBITDEPTH if ( img!= VPX_IMG_FMT_ERROR ) { ctx -> enc_err_err ( ctx, VPX_IMG_FMT_HIGHBITDEPTH ) ; } if ( img!= VPX_IMG_FMT_ERROR ) { vpx_err ( ctx, VPX_CODEC_ERROR, ""Invalid <S2SV_blank> large"" ) ; } # endif",0
1573,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) <S2SV_ModEnd> ; } <S2SV_null>",0
1574,"<S2SV_ModStart> ) ; struct mnt_namespace * ns = source_mnt -> mnt_ns ; struct <S2SV_ModStart> ; if (! parent_path ) { err = count_mounts ( ns, source_mnt <S2SV_ModEnd> ) ; if <S2SV_ModStart> goto out ; } if ( IS_MNT_SHARED ( dest_mnt ) ) { err = count_mounts ( source_mnt ) ; if ( err ) goto out ; <S2SV_ModStart> mnt_parent ) ; if ( err ) goto out ;",0
1575,"<S2SV_ModStart>, & len, 0",1
1576,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = _mm_set1_epi16 ( ( int16_t ),0
1577,<S2SV_ModStart> int rc ; const VP9EncoderConfig <S2SV_ModEnd> * oxcf =,0
1578,<S2SV_ModStart> char * buf [ 1024 <S2SV_ModEnd> ] ; int,0
1579,"<S2SV_ModStart> int * fout, int maxoffset <S2SV_ModStart> NULL, fout, NULL",0
1580,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> -> common ; MACROBLOCK * const x = & cpi -> td. <S2SV_ModStart> -> mb ; MACROBLOCK * const x = & td. mb ; <S2SV_ModStart> x = & cpi -> td. <S2SV_ModStart> -> mb ; MACROBLOCKD * const x = & td. mb ; <S2SV_ModStart> - mi_row ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. mb. flags & YV12_FLAG_HIGHBITDEPTH ) { <S2SV_ModEnd> if ( cpi <S2SV_ModStart>, cpi, 2 ) ; } # if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> last_mode == KEY_FLAG_FRAME ) { vpx_write_bit ( cpi -> flags & VP9_COMMON_HIGHBITDEPTH ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. flags & YV12_FLAG_HIGHBITDEPTH ) { vp9_set_highbd_mode_context ( cpi, x -> oxcf. mode_info ) ; if ( cpi ->",0
1581,"<S2SV_ModStart> ; if ( desc -> bNumEndpoints < 1 ) { dev_err ( & config -> dev, ""invalid <S2SV_blank> size <S2SV_blank> interface <S2SV_blank> %d\\n"", config -> desc. bNumEndpoints ) ; return - ENODEV ; } if (",0
1582,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> key2SV_null> static <S2SV_ModStart> key2 ) { <S2SV_ModEnd> ip2SV_null> <S2SV_null> 0 <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> ) ; return 0 <S2SV_ModEnd> ; } <SV_null>,0
1583,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1584,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> framerate = 0 <S2SV_ModStart> ) { return AVERROR_INVALIDDATA <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { if ( ctx -> bits_value > 0 ) { return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ) { if ( bits_to_bytes > 0 ) { av_log ( ctx, AV_LOG_ERROR, ""unknown <S2SV_blank> bytes <S2SV_blank> is <S2SV_blank> too <S2SV_blank> short"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ) ; } if ( bit_depth > 0 ) { ctx -> bits_left = GFP_LOG_ERROR ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> = 0 ; if ( size_t <S2SV_ModEnd> > 0 ) <S2SV_ModStart> ) { if ( ctx -> bit_depth > 0 ) { av_log ( ctx, AV_LOG_ERROR, ""maximum <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( bits",0
1585,<S2SV_ModStart> i > pos + delta <S2SV_ModStart> off + 1 <= pos + delta <S2SV_ModEnd> ) insn ->,1
1586,<S2SV_ModStart> case EXIT_REASON_INVEPT : case EXIT_REASON_INVVPID :,1
1587,<S2SV_ModStart> { if ( c &&,0
1588,<S2SV_ModStart> ; packet -> data_len = NULL ; if (,0
1589,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
1590,"<S2SV_ModStart> ++ r ; if <S2SV_ModEnd> ( pow ( <S2SV_ModStart>, dim ) <= entries ) return - 1 ; if <S2SV_ModEnd> ( ( int <S2SV_ModStart> dim ) ) > entries ) return - 1 <S2SV_ModEnd> ; return r",1
1591,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> x ), MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> ; } } return ( <S2SV_ModStart> dds_info, 8, exception ) ) <S2SV_ModEnd> ; } <S2SV_null>",1
1592,<S2SV_ModStart> : if ( skb -> inode == NULL <S2SV_ModEnd> ) goto,0
1593,"<S2SV_ModStart> ( zval <S2SV_ModEnd>, hash,",0
1594,"<S2SV_ModStart> error = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1, MSG_NOSIGNAL )",0
1595,"<S2SV_ModStart> w ) { sprintf ( outputbuffer, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.0f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f"", outputbuffer ) ; sendClean ( bd ) ;",0
1596,<S2SV_ModStart> cfg ) { struct stat st ; char * file = NULL ; int fd = - 1 ; <S2SV_ModStart> } else { if ( fd!= NULL || ( fd!= - 1 ) fclose ( fd ) ; fclose ( fd ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1597,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! f2fs_readonly (,1
1598,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
1599,"<S2SV_ModStart>, outputbuffer <S2SV_ModEnd>, 1,",0
1600,"<S2SV_ModStart>, rsize )!= 0",0
1601,"<S2SV_ModStart> user -> user, false",0
1602,<S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( cpi ->,0
1603,<S2SV_ModStart> == ARPHRD_ETHER ) { <S2SV_ModStart> ether_setup ) ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; },1
1604,"<S2SV_ModStart> * data ; struct stream packet = * s ; <S2SV_ModStart> ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } if (",1
1605,"<S2SV_ModStart> pbi ) ; memset <S2SV_ModEnd> ( pbi,",0
1606,<S2SV_ModStart> { if ( l == NULL ) break ; if (,1
1607,<S2SV_ModStart> { if ( ( <S2SV_ModStart> > 0 ) && ( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) > xWantedSize ) ) { xWantedSize = 0 ; } else { xWantedSize = 0 ; <S2SV_ModEnd> } if (,0
1608,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1609,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1610,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpDiff ( TIFF <S2SV_ModStart> cc ) ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> stride ) )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""fpDiff"", ""%s"", ""(cc%(bps*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> tmp ) return 0 <S2SV_ModStart> cp -- ) return 1 ;",1
1611,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1612,<S2SV_ModStart> ; sb -> rmtvaluelen = 0 ; if (,0
1613,"<S2SV_ModStart> 0 ) { ND_TCHECK2 ( * tptr, sizeof ( * tptr ) ) ;",0
1614,<S2SV_ModStart> { uint16 bitspersample = 1,0
1615,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1616,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> coeff_prob [ tx_size <S2SV_ModStart> = 0 ; vpx_prob <S2SV_ModEnd> ( coef_probs [,0
1617,"<S2SV_ModStart> ; r = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1618,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0x86 ; state -> data [ 1 ] = 0x0 ; if ( dvb_usb_generic_rw ( d, state -> data, 3, state -> data, 1, 3 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 2 ] = 0xe ; state -> data [ 1 ] = 0x86 ; state -> data [ 2 ] = 0x86 ; state -> data [ 1 ] = 0x80 ; state -> data [ 1 ] = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> 0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0xe ; state -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 2 ] = 0 <S2SV_ModEnd> ; if",0
1619,<S2SV_ModStart> inode ) { return ret ;,0
1620,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx, sizeof ( vpx_codec_alg_priv_t ) <S2SV_ModEnd> ; if (",0
1621,"<S2SV_ModStart> * mb, const VP9EncoderConfig <S2SV_ModEnd> * const MACROBLOCKD <S2SV_ModStart> * const mv = vpx_reader <S2SV_ModEnd> * mvpx_reader <S2SV_ModStart> * const mv = vpx_reader <S2SV_ModEnd> ( mb, <S2SV_ModStart>, subsize, vpx_reader <S2SV_ModEnd>, mbv_row, <S2SV_ModStart> uv_stride, uv_row, uv_param, uv_row, uv_height <S2SV_ModEnd> ) ; if",0
1622,"<S2SV_ModStart> ; bufp = safe_calloc ( buf, sizeof ( buf )",0
1623,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> c = ( <S2SV_ModStart> = n ) ; if ( <S2SV_ModEnd> c = c <S2SV_ModStart>, cJSON_String )",0
1624,<S2SV_ModStart> task ) ; tk_reset = 0 ;,0
1625,<S2SV_ModStart> ( inode -> i_lenEAttr > bs || iinfo -> bs_lenAlloc > bs ) goto out_file ; int bs <S2SV_ModStart> ; if ( einfo -> i_lenAlloc > bs ) goto out_file ; eof ( udf_file ) ; if ( einfo -> bs ) goto out_bad <S2SV_ModEnd> ; offset =,0
1626,"<S2SV_ModStart>, n ) ; if ( w == NULL ) return 0",1
1627,"<S2SV_ModStart> * buf, size_t <S2SV_ModEnd> len ) { <S2SV_ModStart> len ) { size_t <S2SV_ModEnd> i ++ ; <S2SV_ModStart> ) ) { size_t <S2SV_ModEnd> i ++ ;",0
1628,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int tile_bufs ( VP9_COMMON * tile_tile_info, VP9_COMMON * tile_info ) { VP9_COMMON * const TileInfo * const tile_tile_info = & tile_info -> tile_info ; TileInfo * tile_info = & tile_info -> tile_info ; TileInfo * tile_info = & tile_info -> tile_info <S2SV_ModStart> pbi -> tile_info ; tile_info = & tile_info -> tile_info <S2SV_ModStart> pbi -> tile_cols <S2SV_ModEnd> ) ) { <S2SV_ModStart> = 1 ; vpx_free ( pbi -> tile_bufs ) ; vpx_free ( pbi -> tile_bufs ) ; <S2SV_ModStart> ) ) { int tile_tile_info = 0 ; for ( i = 0 ; i < num_tile_cols ; ++ i ) { if ( pbi -> tile_cols [ i ]!= VPX_CODEC_OK ) { vpx_free ( pbi -> tile_bufs, tile_cols ) ; ++ i = 0 ;",0
1629,<S2SV_ModStart> ; if ( end <S2SV_ModEnd> ) return 0,0
1630,<S2SV_ModStart> ; err = - EINVAL <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto out <S2SV_ModEnd> ; err =,0
1631,"<S2SV_ModStart> * cpi, vpx_writer <S2SV_ModEnd> * seg, <S2SV_ModStart> int segment_id ; vpx_clear_system_seg <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ; int seg = get_seg_seg <S2SV_ModEnd> ( seg, <S2SV_ModStart> SEG_FRAME ) ; if ( segfeature_active ) { if ( segfeature_active ) segment_id = get_seg_se ( seg, seg, seg, cm -> seg, seg_active ) ; if ( segfeature_active ) segment_id = get_segfeature_active ( & cpi -> seg, seg ) ; if ( segfeature_active ) { if ( seg -> segfeature_active ) vp9_clear_se ( cm -> seg, seg ) ; } else { <S2SV_ModEnd> if ( seg <S2SV_ModStart> = KEY_FRAME_FRAME ) ; segfeature_active = get_seg <S2SV_ModEnd> ( seg, <S2SV_ModStart> int i, cm -> bit_depth",0
1632,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1633,"<S2SV_ModStart> ( void ) TIFFGetFieldDefaulted <S2SV_ModEnd> ( in,",1
1634,<S2SV_ModStart> ( error_code == NULL <S2SV_ModEnd> ) { if,0
1635,,0
1636,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1637,"<S2SV_ModStart> ""corrupt <S2SV_blank> BSON"" ) ; VALIDATE_TEST ( ""test59.bson"", BSON_VALIDATE_NONE, 9, BSON_VALIDATE_NONE, ""corrupt <S2SV_blank> BSON"" ) ;",1
1638,<S2SV_ModStart> x ; } <S2SV_ModEnd> if ( x,0
1639,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1640,<S2SV_ModStart> -> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock,0
1641,"<S2SV_ModStart> key_data, key_data_len <S2SV_ModEnd> ) ; }",0
1642,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1643,<S2SV_ModStart> ; if ( task <S2SV_ModEnd> ) return 0,0
1644,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0x86 ; state -> data [ 1 ] = 0x0 ; if ( dvb_usb_generic_rw ( d, state -> data, 3, state -> data, 1, 3 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 2 ] = 0xe ; state -> data [ 1 ] = 0x86 ; state -> data [ 2 ] = 0x86 ; state -> data [ 1 ] = 0x80 ; state -> data [ 1 ] = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> 0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0xe ; state -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 2 ] = 0 <S2SV_ModEnd> ; if",0
1645,"<S2SV_ModStart> int a, const char * a",0
1646,<S2SV_ModStart> L ) ; g -> gcstate = GCSswpallgc ;,0
1647,<S2SV_ModStart> -> priv ; if ( len > 4 ) return - EINVAL ;,0
1648,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] = s_log_init_connect <S2SV_ModEnd> ( c, <S2SV_ModStart>, NULL, ""session"" <S2SV_ModEnd>, NULL, <S2SV_ModStart> ) ; ssl_log ( c <S2SV_ModEnd> ) ; if",0
1649,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> connect = NULL <S2SV_ModEnd> ; struct sockaddr <S2SV_ModStart> ; int ret <S2SV_ModEnd> ; int recv <S2SV_ModStart> ; int ret <S2SV_ModEnd> ; struct sock <S2SV_ModStart> ) return - 1 <S2SV_ModEnd> ; int ret <S2SV_ModStart> return - 1 <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>,0
1650,<S2SV_ModStart> ) ; } memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi ->,0
1651,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
1652,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart> PERF_COUNT_SW_COUNT_FAULTS_MIN, 1 <S2SV_ModEnd>, regs,",0
1653,"<S2SV_ModStart> ( ndo, ""%s"", icmp6_tstr <S2SV_ModEnd> ) ) ;",0
1654,"<S2SV_ModStart> ctx, expr -> unary. child",1
1655,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1656,"<S2SV_ModStart> int mptctl_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_command karg ; <S2SV_ModEnd> if ( ioc",0
1657,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart>, image ) { if ( image -> columns, image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; ThrowReaderException ( CorruptImageError, ""InsufficientImageHeader"" ) ; if ( data == ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( image -> rows!= MagickMemory ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; ThrowReaderException ( CorruptImageError, ""InsufficientImageHeader"" ) ; return ( 1 ) <S2SV_ModEnd> ; } <S2SV_null>",0
1658,,0
1659,,0
1660,<S2SV_ModStart> int vpx_reader <S2SV_ModEnd> ( r ) <S2SV_ModStart> const vpx_read_bit <S2SV_ModEnd> ( r ) <S2SV_ModStart> ) { return vpx_read_bit <S2SV_ModEnd> ( r ),0
1661,<S2SV_ModStart> ; int is_valid = ( error == GIT_OK ) <S2SV_ModStart> giterr_clear ( ) <S2SV_ModEnd> ; error =,1
1662,"<S2SV_ModStart> * tree, vpx_prob <S2SV_ModEnd> tree, const",0
1663,"<S2SV_ModStart> int segment_id, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> cm -> fc = vpx_reader <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc <S2SV_ModEnd> ) ; if",0
1664,,0
1665,<S2SV_ModStart> ; vpx_codec_err_t raw_flags = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH flags & VPX_HIGHBITDEPTH ) { vpx_codec_err ( & VPX_HIGHBITDEPTH ) ; config -> config. flags &= 1 ; } # endif CONFIG_VPX_HIGHBITS2SV_null>,0
1666,<S2SV_ModStart> case 2 : ND_TCHECK_32BITS ( ip -> opt_len ) ;,0
1667,<S2SV_ModStart> NULL ; } return 0,0
1668,<S2SV_ModStart> = 0 ; int sk_locked ; <S2SV_ModStart> = 0 ; } <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1669,"<S2SV_ModStart> key ) { int ret = get_user ( key, key -> ) ; <S2SV_ModStart> } else { <S2SV_ModEnd> key -> ret =",0
1670,<S2SV_ModStart> ; if ( skb -> len < sizeof ( struct nlattr ) ) return 0 ; if ( <S2SV_ModStart> -> nla_len > <S2SV_ModEnd> skb -> len <S2SV_ModStart> skb -> len - A,1
1671,"<S2SV_ModStart> ]. size ; if ( ~ length < 16 ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" )",1
1672,"<S2SV_ModStart> ; stbbr_send ( ""<message <S2SV_blank> type=\'chat\'>"" ""<message <S2SV_blank> to=\'stabber@localhost/prof_send <S2SV_blank> xmlns=\'chat\' <S2SV_blank> xmlns=\'chat\'urn:xxmlns=\'chat\'chat\'>"" ""<message <S2SV_blank> xmlns=\'chat\'urn:xxmlns=\'chat\'>""",0
1673,"<S2SV_ModStart> -> cac_id, serial -> len <S2SV_ModEnd> ) ; SC_FUNC_RETURN",1
1674,<S2SV_ModStart> = NULL ; tok -> tok_ignore = NULL ;,0
1675,<S2SV_ModStart> ( vpx_codec_err <S2SV_ModEnd> ) ) ;,0
1676,<S2SV_ModStart> ) ) { return GF_IS_INVALID_FILE <S2SV_ModEnd> ; } if,0
1677,<S2SV_ModStart> ; size_t <S2SV_ModEnd> = 0 ;,0
1678,"<S2SV_ModStart>, dreturn - 1 <S2SV_ModEnd> ) ; if",0
1679,<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> (! addr ||! addr ||! addrlen ) OE_RAISE_ERRNO ( OE_EINVAL ) ; addrlen_in = * addrlen_in ; if ( addrlen_out > sizeof ( struct oe_storage ) OE_RAISE_ERRNO ( OE_EINVAL ) ; addrlen_in = 0 ; addrlen_in = addrlen_out ; if ( addrlen_out > sizeof ( struct oe_storage ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ; * addrlen = addrlen_out ; addrlen_out = addrlen_in = addrlen_out ;,0
1680,,1
1681,<S2SV_ModStart> ; if (! length ) return FALSE,0
1682,"<S2SV_ModStart> final_p, final ; struct ipv6_txoptions * opt <S2SV_ModStart> ) ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> & fl6, opt <S2SV_ModEnd> ) ; if",0
1683,"<S2SV_ModStart>, int nr_data ; uint32_t ndo, <S2SV_ModStart> 0 ) { uint32_t aux = 0 ; uint32_t aux = 0 ; <S2SV_ModStart> size ) { uint32_t aux = 0 ; <S2SV_ModStart> ( uint32_t ) <S2SV_ModEnd> ; int namelen <S2SV_ModStart> ; if ( plen < sizeof ( uint32_t ) <S2SV_ModEnd> ) { uint8_t",0
1684,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, DM9000_EPCR, <S2SV_ModStart>, dm9000_eprint <S2SV_ModEnd>, DM9000_EPCR, <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR <S2SV_ModEnd> ) ; }",0
1685,"<S2SV_ModStart>, buffer, t2p -> tiff_datasize,",1
1686,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",0
1687,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_decode ( NSC_CONTEXT <S2SV_ModStart> ; UINT16 rw ; BYTE * context ; size_t pos = 0 ; if (! context ) return FALSE ; <S2SV_ModStart> ; } } return FALSE ;,0
1688,"<S2SV_ModStart> inode -> i_sb -> s_len, eofs",0
1689,"<S2SV_ModStart> new_parent ) { <S2SV_ModEnd> __ptrace_link ( child <S2SV_ModStart>, new_parent, current_cred ( ) <S2SV_ModEnd> ) ; }",1
1690,<S2SV_ModStart> NULL ; } return 0,0
1691,<S2SV_ModStart> ) ; } if ( cib -> command. session ) { <S2SV_ModStart> = NULL ; },0
1692,"<S2SV_ModStart> size = INT_MAX ; if ( unlikely (! access_ok ( VERIFY_WRITE, size ) ) ) return - EFAULT",0
1693,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> mv_null> static <S2SV_ModStart>, int ret ; int <S2SV_ModEnd> step_param_mv_err ; int <S2SV_ModStart>, int ret ; if ( tmp_cost -> prev_mbd. mbmi. mv. sf. mbmi. sf. col!= NULL ) { tmp_err = - ENOMEM ; goto fail ; } <S2SV_ModStart> sad_mv ; memset <S2SV_ModEnd> ( x -> <S2SV_ModStart>, bsize, bsize, <S2SV_ModStart>, bsize, bsize, <S2SV_ModEnd> ) ; }",0
1694,<S2SV_ModStart> error = 0 <S2SV_ModEnd> ; if (,0
1695,"<S2SV_ModStart> ; if ( ctxt -> name ) == NULL ) { pr_log ( LOG_WARNING, ""ERROR"" ) ; } else",0
1696,"<S2SV_ModStart> ( used_address && msg_sys -> msg_name && <S2SV_ModStart> -> name, msg_sys <S2SV_ModEnd> -> msg_name, <S2SV_ModStart> -> msg_namelen ; if ( msg_sys -> msg_name ) <S2SV_ModStart> -> name, msg_sys <S2SV_ModEnd> -> msg_name,",1
1697,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
1698,"<S2SV_ModStart> number_colormaps, number_planes, number_planes_planes_filled <S2SV_ModStart> -> rows * number_planes_filled <S2SV_ModEnd> ; number_planes_filled =",0
1699,<S2SV_ModStart> -> priv_data ; r = <S2SV_ModEnd> ssh2_put ( ssh,0
1700,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1701,<S2SV_ModStart> client ) { <S2SV_ModEnd> if ( client <S2SV_ModStart> } <S2SV_null> <S2SV_null>,0
1702,<S2SV_ModStart> p ) { <S2SV_ModEnd> return 0 ;,0
1703,,0
1704,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1705,<S2SV_ModStart> dentry ) ; <S2SV_ModEnd> if (!,0
