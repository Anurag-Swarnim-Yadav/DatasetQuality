,raw_predictions,correctly_predicted
0,<S2SV_ModStart> ; return - ENOMEM <S2SV_ModEnd> ) ; },0
1,<S2SV_ModStart> ( skb ) <S2SV_ModEnd> ; if (,0
2,<S2SV_ModStart> w ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
3,<S2SV_ModStart> { if (! item ) return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
4,"<S2SV_ModStart> u64 nr <S2SV_ModEnd>, u64 nr",0
5,<S2SV_ModStart> ( buf ) { return 0 ; } <S2SV_ModEnd> } <S2SV_null>,0
6,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> 0, tran_low_t <S2SV_ModEnd> * output ; <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> ( input, <S2SV_ModStart> 0 ] ; tran_low_t ) { tran_low_t <S2SV_ModEnd> ( output, <S2SV_ModStart> 0 ] ; tran_low_t )",0
7,<S2SV_ModStart> -> senseptr <S2SV_ModEnd> ; memset (,0
8,<S2SV_ModStart> 0 ; } if ( LIBRAW_LIBRARY_LIBRARY_CORRUPT,0
9,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
10,,0
11,"<S2SV_ModStart> int w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_write_tree <S2SV_ModEnd> ( w ) <S2SV_ModStart> } else vpx_write_tree <S2SV_ModEnd> ( w, <S2SV_ModStart> } else vpx_write_tree <S2SV_ModEnd> ( w,",0
12,<S2SV_ModStart> == 64 ) { <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> == 64 ) { <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_32 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> == 64 ) { <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> == 512 ) { <S2SV_ModStart> == 512 ) { <S2SV_ModStart> == 512 ) { <S2SV_ModStart> == 512 ) { <S2SV_ModEnd> return COAP_BLOCK_64 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_SIZE_1024 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> == 512 ) { <S2SV_ModStart> == 512 ) { <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_1024 ; },0
13,"<S2SV_ModStart> ) ) { if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ; ptr ++ ; ptr ++ ; if ( length < 4 ) { ND_PRINT ( ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ) ; return ; }",0
14,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> ; struct <S2SV_ModStart> ; if ( res = key_keyring_key_key ( dest_keyring ) ; if (! dest_key ) return KEY_KEY ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null>,0
15,<S2SV_ModStart> = create_spnego_ctx ( 1,1
16,<S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_l2tpip <S2SV_ModEnd> ) ) goto,0
17,<S2SV_ModStart> char * tm <S2SV_ModEnd> ; str =,0
18,"<S2SV_ModStart> ; } else memcpy <S2SV_ModEnd> ( password,",0
19,<S2SV_ModStart> ( p ) <S2SV_ModEnd> ; if (,0
20,"<S2SV_ModStart> ) ||! capable_inode_uidgid <S2SV_ModEnd> ( inode,",0
21,"<S2SV_ModStart> NULL, NULL",0
22,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static TWO_PASS_PASS_PASS_PASS_FRAME <S2SV_ModEnd> * twopass, <S2SV_ModStart> ) { const TWO_PASS_PASS_PASS_PASS_PASS_PASS_PASS_FRAME <S2SV_ModEnd> * twopass <S2SV_ModStart> ) { const <S2SV_ModEnd> if ( twopass <S2SV_ModStart> ) { const <S2SV_ModEnd> if ( twopass <S2SV_ModStart> ( twopass, 1 ) { return - 1 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ( twopass, 1 ) { const <S2SV_ModStart> ) ) { return - 1 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { if (! <S2SV_ModStart> ) continue ; break ; } } <S2SV_ModEnd> } } }",0
23,<S2SV_ModStart> ) return ret <S2SV_ModEnd> ; if (,0
24,<S2SV_ModStart> { if ( <S2SV_ModEnd> ( name ),0
25,<S2SV_ModStart> ; if ( linelen == 0 ) { error = 0 ; goto out_err ; } if ( line ) { <S2SV_ModEnd> if ( line <S2SV_ModStart> goto out_err ; },0
26,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null,0
27,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ) ; },0
28,"<S2SV_ModStart> mntent, path, rootfs",1
29,<S2SV_ModStart> 0 ; } <S2SV_ModEnd> io -> regs,0
30,<S2SV_ModStart> ( size!= 0,0
31,"<S2SV_ModStart> ) ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL ) )",0
32,<S2SV_ModStart> vpx_codec_alg_alg_t * ctx <S2SV_ModEnd> ; if (,0
33,<S2SV_ModStart> ) { struct packet_rollover * rollover = NULL ; struct <S2SV_ModStart> 0 ) { mutex_lock ( & fanout -> fanout ) ; err = - EINVAL ; goto out ; } <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover ) ; <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover ) ; <S2SV_ModEnd> rollover = NULL <S2SV_ModStart> atomic_set ( & <S2SV_ModEnd> rollover ) ; <S2SV_ModEnd> atomic_set ( & <S2SV_ModEnd> rollover -> num <S2SV_ModStart> atomic_set ( & <S2SV_ModEnd> rollover -> num <S2SV_ModStart> atomic_set ( & <S2SV_ModEnd> rollover ) ; } <S2SV_ModStart> atomic_set ( & <S2SV_ModEnd> rollover ) ; <S2SV_ModEnd> atomic_set ( & <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover ) ;,0
34,<S2SV_ModStart> ) ; } new_page = NULL ;,0
35,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
36,"<S2SV_ModStart>, 0 ) ) { <S2SV_ModStart> return 0 ; } }",0
37,"<S2SV_ModStart> ( interface, ENC28J60_EIR <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd> ) ; enc28J60WriteReg ( interface <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_ECON1 <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR, ENC28J60_ERXRDPTL <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC28J60_ERXRDPTL <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_ERXRDPTL <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC28J60_ERXRDPTL <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC28J60_ERXRDPTL <S2SV_ModEnd> ) ; enc28J60WriteReg <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_ERXRDPTL <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC28J60",0
38,<S2SV_ModStart> o ) ; Py_RETURN_NONE <S2SV_ModEnd> ; } result,0
39,"<S2SV_ModStart> ( page_page_to_page ( page <S2SV_ModEnd> * page, <S2SV_ModStart> ( page_page ) ) { <S2SV_ModEnd> } if (",0
40,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> int mb_y ; <S2SV_ModStart> int mb_stride ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart>. mb_stride ) ; memset <S2SV_ModEnd> ( source -> <S2SV_ModStart> y_stride ) ; memset <S2SV_ModEnd> ( output -> <S2SV_ModStart> y_stride ) ; memset <S2SV_ModEnd> ( output ->,0
41,<S2SV_ModStart> ) return - EINVAL <S2SV_ModEnd> ; cmd.,0
42,"<S2SV_ModStart> int error ; <S2SV_ModEnd> struct mb2_cache * ce <S2SV_ModStart> ) ; <S2SV_ModEnd> struct mb2_cache_entry * ce <S2SV_ModStart> ) ; } <S2SV_ModEnd> int error = mb2_cache_mb_cache <S2SV_ModStart> ( bh, <S2SV_ModEnd>, bh ->",0
43,<S2SV_ModStart> ) ; } free ( s ) ;,0
44,<S2SV_ModStart> <S2SV_null> <S2SV_,0
45,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
46,,0
47,"<S2SV_ModStart> { ret = posix_acl_mode ( inode <S2SV_ModEnd>, & acl",0
48,"<S2SV_ModStart> size, 0, 0",0
49,<S2SV_ModStart> } while ( ( ( i < (,0
50,<S2SV_ModStart> if ( flags & ASN1_OK <S2SV_ModEnd> ) { if,0
51,"<S2SV_ModStart> uint32_t request_len, <S2SV_ModEnd> * req ; <S2SV_ModStart> = 0 ; size_t req_len <S2SV_ModEnd> = 0 ; <S2SV_ModStart> ) ) { if ( len < 0 ) return - EINVAL ; <S2SV_ModStart> ) ) ; } <S2SV_ModEnd> return - EINVAL ;",0
52,<S2SV_ModStart> * TICK_S2SV_null> <S2SV_null>,0
53,<S2SV_ModStart> { },0
54,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
55,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
56,<S2SV_ModStart> } },0
57,<S2SV_ModStart> ) ) ; rcu_read_unlock ( ) ;,0
58,<S2SV_ModStart> = 0.0 ; uint32 nstrips = 0 ; uint32,0
59,"<S2SV_ModStart> = 0 ; # else if CONFIG_VP9_COMMON * arg = 0 ; if CONFIG_VP9_HIGHBITDEPTH else if ( argi ) { arg = 0 ; } else if ( argi < 0 ) { return - EINVAL ; } <S2SV_ModStart> } else if CONFIG_VP9_VP9_HIGHBITDEPTH <S2SV_ModEnd> ( arg, <S2SV_ModStart> ) ) { if CONFIG_VP9_VP9_HIGHBITDEPTH <S2SV_ModEnd> ( arg, <S2SV_ModStart> } else { return - EIO_HIGHBITDEPTH <S2SV_ModEnd> ) ; }",0
60,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
61,<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> -> b_size = sizeof ( EXT4_I ( inode -> i_size - ext_size ) -> i_size ) ; <S2SV_ModStart> -> b_size - ext_size <S2SV_ModEnd> ) ; memset (,0
62,<S2SV_ModStart>,0
63,<S2SV_ModStart> ; if ( (,0
64,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
65,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
66,<S2SV_ModStart> ) { const cpi -> oxcf. gf_group = 0 ; if ( cpi -> gf_group. gf_group. gf_group. gf_group. gf_group. gf_level ) { cpi -> gf_group = 0 ; if ( cpi -> gf_group. gf_group. gf_group. gf_group. gf_group. gf_group. gf_group. gf_group. gf_group. gf_level ) { cpi -> gf_group = 0 ; cpi -> gf_group = 0 ; } else if ( cpi -> gf_group. gf_group. gf_group. gf_group. gf_group. gf_group. gf_group. gf_group. gf_group. gf_group. gf_group. gf_group. gf_group ) { cpi -> gf_group = cpi -> gf_group ; cpi -> gf_group = cpi -> gf_group ; } else if ( cpi -> gf_group. gf_group. gf_group. gf_group. gf_group && cpi -> gf_group. gf_group. gf_group. gf_group. gf_group. gf_group. gf_group. gf_,0
67,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> rows, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; break ; }",0
68,<S2SV_ModStart> = - 1 ; if ( usb_desc -> desc. bNumEndpoints < 0 ) { dev_err ( & usb_free ) ; dev_err ( & usb_free ) ; goto err ; },0
69,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { fmode <S2SV_ModStart> ) ; }",0
70,<S2SV_ModStart> char * dir <S2SV_ModEnd> ; if (,0
71,<S2SV_ModStart> i ; } if ( ps_codec -> i4_buf == 0 ) { return IHEVCD_ERROR ; },0
72,<S2SV_ModStart> NULL ; } # endif,0
73,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static MACROBLOCKD * <S2SV_ModEnd> int mi_stride, <S2SV_ModStart> int mi_stride, int mi_stride, int mi_stride, int mi_stride <S2SV_ModEnd> ) { <S2SV_ModStart> i ] ; const <S2SV_ModStart> i ] = get_stride <S2SV_ModEnd> ( src -> <S2SV_ModStart> i ], mi_stride <S2SV_ModEnd> ) ; const <S2SV_ModStart> i ) { <S2SV_ModEnd> const int",0
74,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> jmp_eip_near ( struct <S2SV_ModStart> dst ) { return ctxt ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
75,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
76,<S2SV_ModStart> ; if (! iter_block ) return 0 ;,0
77,<S2SV_ModStart> } else { if (,0
78,"<S2SV_ModStart> char * name, * type_name <S2SV_ModEnd> ) { char * <S2SV_ModStart> const char * type = NULL ; char * type_name = NULL ; char * type_string_name <S2SV_ModEnd> ; size_t <S2SV_ModStart>, _PyUnicode_t ) ; if (! _PyUnicode_string_string_type_name <S2SV_ModEnd> ) return NULL <S2SV_ModStart> ) ; } else { PyExc_TypeError = _PyObject_string_string_type <S2SV_ModEnd> ( o, <S2SV_ModStart> 1 ) ; if ( result == NULL ) { PyExc_TypeError = NULL ; } else { PyExc_TypeError ; return NULL ; } <S2SV_ModStart> ) ; } } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) ; if (! _PyUnicode_string_string_name = _PyObject ) ; if ( result == NULL ) { PyExc_string_name = NULL ; return NULL ; } }",0
79,<S2SV_ModStart> string ) { <S2SV_ModEnd> if (!,0
80,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (,0
81,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
82,"<S2SV_ModStart> u_char * dat, u_int val_l = EXTRACT_16BITS ( ptr ) ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } ptr = EXTRACT_16BITS ( ptr ) ; val_l = EXTRACT_16BITS ( ptr ) ; ND_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK ( ptr ++ ) ; ND_16BITS ( ptr ++ ) ; if ( ptr ++ ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ptr ++ ; ND_16BITS ( ptr ) ; val_l = EXTRACT_16BITS ( ptr ) ) ; val_16BITS ( ptr ) ; val_l = EXTRACT_16BITS ( ptr ) ) ; ptr ++ ; ND_16BITS ( ptr ) ; ptr ++ ; ND_16BITS ( ptr ) ; if ( ptr ) { ND_PRINT ( ptr ) ; return ; }",0
83,,0
84,<S2SV_ModStart> ) ) { if ( test_test ) { # endif <S2SV_ModStart> } else { # endif <S2SV_ModStart> } # endif # endif # endif # endif # endif # endif,0
85,<S2SV_ModStart> src -> uv_buffer <S2SV_ModEnd> ( src ->,0
86,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
87,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( cpi,",0
88,<S2SV_ModStart> user ) { <S2SV_ModEnd> if ( user,0
89,<S2SV_ModStart> { size = size_t <S2SV_ModEnd> len = 0,0
90,<S2SV_ModStart> ; int error = NULL <S2SV_ModEnd> ; if ( <S2SV_ModStart> return NULL ; if ( <S2SV_ModEnd> if (! <S2SV_ModStart> } if ( <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> return NULL ; <S2SV_ModEnd> if (!,0
91,<S2SV_ModStart> ( dst ) <S2SV_ModEnd> ) ; },0
92,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const MACROBLOCKD * const mi <S2SV_ModEnd>, const <S2SV_ModStart> mi, const MACROBLOCKD * mi <S2SV_ModEnd> ) { const <S2SV_ModStart> int mi = mi <S2SV_ModEnd> -> mbmi ; const <S2SV_ModStart> -> mbmi ; const MODE_INFO * const mbmi = mi <S2SV_ModEnd> -> mbmi <S2SV_ModStart> ) ; const PREDICTION_MODE <S2SV_ModEnd> int mode = <S2SV_ModStart> ) ; const PREDICTION_MODE",0
93,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> SV_null>,0
94,"<S2SV_ModStart> ndo, len <S2SV_ModEnd> ) ; return",0
95,<S2SV_ModStart> ) ; },0
96,"<S2SV_ModStart> * zModuleArgument * <S2SV_ModEnd>, void *",0
97,<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( *,0
98,<S2SV_ModStart> ; if ( reg -> dmax ) { if ( reg -> dmax ) { * low_prev = ( reg -> dmax ) ; } else { <S2SV_ModStart> enc ) ; } else { if ( reg -> dmax ) { <S2SV_ModStart> enc ) ; } },0
99,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
100,,1
101,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
102,<S2SV_ModStart> 1 ) ; if ( diff == NULL ) { Py_ValueError ; return NULL ; },0
103,<S2SV_ModStart> ) ) ; rcu_read_unlock ( ) ;,0
104,<S2SV_ModStart> NULL ) { status = MagickFalse ; break <S2SV_ModEnd> ; } image,0
105,<S2SV_ModStart> 0 ) ; if ( avio_feof ( s -> pb ) ) { ret = AVERROR_INVALIDDATA ; goto end ; },1
106,"<S2SV_ModStart> ( ctx, <S2SV_ModEnd> ctx ) {",0
107,"<S2SV_ModStart> * new_size, size_t <S2SV_ModEnd> new_size ) {",0
108,"<S2SV_ModStart> wb, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> 16 ) { vpx_wb_wb_write_bit_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) { vpx_wb_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_wb_wb_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_wb_literal <S2SV_ModEnd> ( wb,",0
109,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( mbmi,",0
110,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,0
111,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
112,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct sctp_param_param_param_param_param_param_param_param_t * addip_param_param_param_param_param_param_param_param_id <S2SV_ModEnd> ; int err_t <S2SV_ModStart> goto done ; sctp_param_param_param_param_param_param_param_param_param_param_id <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto done ; sctp_param_param_param_param_param_param_id <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto done <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto done ; sctp_param_param_param_param_param_param_param_param_id = addip_param_param_param_param_param_param_id <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto done <S2SV_ModEnd> ; if ( param. crr_id = sctp_param_param_param_param_param_param_param_id <S2SV_ModStart> ) goto done <S2SV_ModEnd> ; if (,0
113,<S2SV_ModStart> exit ; } m -> msg_namelen = 0 ;,0
114,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
115,"<S2SV_ModStart> -> flags, FALSE",0
116,,0
117,<S2SV_ModStart> cpi -> rc <S2SV_ModEnd> ; cpi ->,0
118,"<S2SV_ModStart> ; unsigned long old_desc, VCPU_SREG_CS <S2SV_ModEnd> ; const struct <S2SV_ModStart> ctxt ) ; if ( ctxt -> mode == X86EMUL_CONTINUE ) return X86EMUL_CONTINUE <S2SV_ModEnd> ( ctxt, <S2SV_ModStart> ) ; if ( rc!= X86EMUL_CONTINUE <S2SV_ModEnd> ( ctxt, <S2SV_ModStart>, VCPU_SREG_SREG_SREG_CS, & old_cs, VCPU_SREG_CS <S2SV_ModEnd> ) ; rc",0
119,<S2SV_ModStart> si_code ) { <S2SV_ModEnd> return - EPERM <S2SV_ModStart> - EPERM ; },0
120,<S2SV_ModStart> tmp_str ) ; if ( ptr -> size_t ) return GF_ISOM_FILE ;,0
121,<S2SV_ModStart>. get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },0
122,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int fmode_t fmode <S2SV_ModEnd> ) { int <S2SV_ModStart> ) { if ( fmode & ( fmode & ( fmode & ( fmode & ( FMODE_READ | FMODE_WRITE ) ) { if ( fmode & FMODE_WRITE ) { return - EINVAL ; } <S2SV_ModStart> ) ; state -> state -> state. state. state. state == 0 ) { if ( fmode & fmode & FMODE_WRITE ) { <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; },0
123,<S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ) break,0
124,<S2SV_ModStart> len + len <S2SV_ModEnd> ) ; return,0
125,<S2SV_ModStart> ) ; return 0 <S2SV_ModEnd> ; } if,0
126,<S2SV_ModStart> bpp == UINT8_MAX || c -> height,0
127,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
128,"<S2SV_ModStart>, name, fffset <S2SV_ModEnd> ) ; if",0
129,<S2SV_ModStart> = - ENOMEM ; goto err ; },0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> _null>,0
131,<S2SV_ModStart> ) ; },0
132,<S2SV_ModStart> ; if ( IPCF ( skb ) ) goto out ; if (,0
133,<S2SV_ModStart> err ; } if ( headcount < headcount ) return err ;,0
134,"<S2SV_ModStart> { rq = bin <S2SV_ModEnd> ( r,",0
135,<S2SV_ModStart>,0
136,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,0
137,<S2SV_ModStart> skb ) return 0,0
138,"<S2SV_ModStart>, arg -> count <S2SV_ModEnd> ) ; if",0
139,<S2SV_ModStart> ; } } } if ( tile_buffsize > 0 || tile_buffsize > 0 || tile_buffsize / 4,0
140,<S2SV_ModStart> ) ; return <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
141,"<S2SV_ModStart> ( fp, "" <S2SV_blank> size <S2SV_blank> %d"" <S2SV_ModEnd>, & n",0
142,<S2SV_ModStart> len ) ; if ( len < 0x08 ) { return ; },0
143,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
144,<S2SV_ModStart> ndo ) ; if ( len < 0 ) goto trunc ;,0
145,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",1
146,"<S2SV_ModStart> * tree, vpx_prob <S2SV_ModEnd> * tree,",0
147,<S2SV_ModStart> } } } TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd ),0
148,<S2SV_ModStart> ; u64 rdx <S2SV_ModEnd> ; u64 rcx <S2SV_ModStart> = 0 ; rdx = reg_read <S2SV_ModStart> ; rdx = reg_read <S2SV_ModEnd> ; if (,0
149,"<S2SV_ModStart> * probs, vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_prob <S2SV_ModEnd> * probs,",0
150,"<S2SV_ModStart> * output, tran_low_t <S2SV_ModEnd> * output,",0
151,<S2SV_ModStart> ; if ( len < 0 ||,0
152,"<S2SV_ModStart> int input, tran_low_t input, tran_low_t input, tran_low_t input <S2SV_ModStart> * input, tran_low_t s0, tran_high_t <S2SV_ModEnd> ; tran_low_t <S2SV_ModStart> * input ; tran_t s3 = input ; tran_low_t <S2SV_ModEnd> x0 ; <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> 0 ] ; tran_low_t s3 = input ; tran_low_t s3 = input ; tran_high_high_low_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 0 ] ; tran_high_high_high_high_low_t <S2SV_ModEnd> x3 = input <S2SV_ModStart> 0 ] ; tran_high_high_low_t <S2SV_ModEnd> x3 = input <S2SV_ModStart> 0 ] ; tran_high_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 0 ] ; tran_high_low_t <S2SV_ModEnd> x6 = input <S2SV_ModStart> 3 ] ; tran_high_low_t <S2SV_ModEnd> x6 = input <S2SV_ModStart> 1 ] ; tran_high_low_low_low_t <S2SV_ModEnd> x6 = input <S2SV_ModStart> 0 ] ; tran_low_low_low_low_t <S2SV_ModEnd> ( input <S2SV_ModStart> 3 ] ; tran_low",0
153,<S2SV_ModStart> flags |= HAVE_TS_ISING ; if ( flags & HAVE_ISING if ( flags & <S2SV_ModEnd> flags &,0
154,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
155,"<S2SV_ModStart> tot_len ) ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
156,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( mnt_flags &,0
157,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static VP9_COMMON * cpi <S2SV_ModEnd>, MACROBLOCKD * <S2SV_ModStart>, MACROBLOCKD * <S2SV_ModEnd>, MACROBLOCKD * <S2SV_ModStart> BLOCK_SIZE bsize, MACROBLOCKD * <S2SV_ModEnd>, MACROBLOCK_SIZE bsize, <S2SV_ModStart> BLOCK_SIZE bsize, MACROBLOCK_SIZE bsize, MACROBLOCK_SIZE bsize, <S2SV_ModEnd> ) { const <S2SV_ModStart>, bsize, <S2SV_ModEnd>, bsize, <S2SV_ModStart> ) ; if <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ) { if <S2SV_ModStart> ) { if <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ) { if <S2SV_ModEnd> return ; }",0
158,<S2SV_ModStart> ; if ( <S2SV_ModEnd> c -> flags,0
159,<S2SV_ModStart> ; if (,0
160,<S2SV_ModStart> ; size_t data_size = 0 ; size_t data_size = 0 ; <S2SV_ModStart> ) { if ( ret > OE_SSIZE_MAX ) { ret = OE_RAISE_EINVAL ; } if (,0
161,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
162,<S2SV_ModStart> ) { memcpy <S2SV_ModEnd> ( pc ->,0
163,"<S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = malloc ( size, GFP_KERNEL ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; } <S2SV_null>",0
164,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
165,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> encode_frame ( VP9_COMMON <S2SV_ModStart> ( src_COMMON * ctx, <S2SV_ModEnd> ) { int <S2SV_ModStart> = src_end ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( src_end ) return - 1 ; # endif <S2SV_ModStart> } else { if CONFIG_VP9_HIGHBITDEPTH if ( src_end ) { <S2SV_ModEnd> ( src_end, <S2SV_ModStart> ) ) ; } else { if CONFIG_VP9_HIGHBITDEPTH if <S2SV_ModEnd> ( src_end, <S2SV_ModStart> ) ; } else { <S2SV_ModEnd> ( src_end,",0
166,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
167,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> vp9_qindex_filter_qindex ( int64_t <S2SV_ModStart> ( cpi ) <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ; if <S2SV_ModEnd> ( cpi <S2SV_ModStart> ( cpi -> oxcf. <S2SV_ModEnd> ) ) { <S2SV_ModStart> ) ; },0
168,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
169,"<S2SV_ModStart> = getnum ( <S2SV_ModEnd> fmt, MAXALIGN",0
170,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
171,"<S2SV_ModStart> ( ctx -> priv_sz <S2SV_ModEnd>, data_sz,",0
172,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
173,"<S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f"", <S2SV_ModStart>, outputbuffer ) ; sendClean ( outputbuffer ) ;",0
174,<S2SV_ModStart> * self ) { <S2SV_ModEnd> return NULL ;,0
175,<S2SV_ModStart> ( cJSON_CreateNumber <S2SV_ModEnd> ) ; if,0
176,"<S2SV_ModStart> ; size_t i <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_id, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id ( obj, & PyId_id, & PyId_id, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_SetString ( PyExc_TypeError, ""required <S2SV_blank> "" ) ; return 1 ; } if ( tmp == PyExc_TypeError, arena ) { return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, arena ) < 0 ) { return 1 ; } <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ) ; res = obj2ast_id <S2SV_ModEnd> ( obj2ast_id <S2SV_ModEnd>, arena ) <S2SV_ModStart> ) ; } if ( lookup_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, arena ) < 0 ) { return 1 ; Py_None ) { return 1 ; } if ( tmp == Py_CLEAR ( tmp ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_SetString ( PyExc_TypeError",0
177,<S2SV_ModStart> ; if ( ( ( mnt_flags & MNT_READONLY <S2SV_ModEnd> ) { if,0
178,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
179,"<S2SV_ModStart> ds64Chunk * ds64 = 0, sizeof ( ds64Chunk ) / sizeof ( ds64Chunk ) <S2SV_ModStart> ds64Chunk * sizeof ( cs64Chunk ) ; ds64Chunk * sizeof ( cs64Chunk ) <S2SV_ModStart>, cs64Chunk * sizeof ( cs64Chunk * sizeof ( cs64Chunk ) <S2SV_ModEnd> ) ; cs64Chunk <S2SV_ModStart> ds64Chunk * sizeof ( cs64Chunk * sizeof ( cs64Chunk ) <S2SV_ModEnd> ) ; cs64Chunk <S2SV_ModStart> ; cs64ChunkSize = sizeof ( CS64Chunk <S2SV_ModEnd> ) ) ; if",0
180,"<S2SV_ModStart> -> msg_name ; memset ( & msg, sizeof ( msg_name ) ) ;",0
181,<S2SV_ModStart> ) = 0 <S2SV_ModEnd> ; int i <S2SV_ModStart> = 0 ; size = 0 <S2SV_ModEnd> ) { struct <S2SV_ModStart> ) ) { if ( unlikely <S2SV_ModStart> ) ) { break ; },0
182,"<S2SV_ModStart> ( stderr, "" <S2SV_blank> %s\\n"" <S2SV_ModEnd> ) ; #",0
183,,0
184,"<S2SV_ModStart> ; } } if ( strcmp ( fname ) ) { fprintf ( stderr, ""Error: <S2SV_blank> file\\n"", fname ) ; return - 1 ; } if ( <S2SV_ModStart> 0 ) { fprintf ( stderr, ""Error: <S2SV_blank> file <S2SV_blank> file\\n"", fname ) ; return - 1 ; } if ( <S2SV_ModStart> 0 ) { fprintf ( fname ) ; } if ( fname ) { fprintf ( stderr, ""Invalid <S2SV_blank> file <S2SV_blank> file <S2SV_blank> file\\n"", fname ) ; exit ( 1 ) ; } if ( fname ) { fprintf ( 1 ) ; } else <S2SV_ModStart> 0 ) ; } if ( fname ) { fprintf ( stderr, ""Invalid <S2SV_blank> file <S2SV_blank> file\\n"", fname ) ; exit ( 1 ) ; } else <S2SV_ModStart> 0 ) ; } else { <S2SV_ModEnd> } else { <S2SV_ModStart> 0 ) ; } else { fprintf ( fname ) ; } <S2SV_ModStart> 0 ) ; } if ( fname ) { fclose ( fname ) ; } else { fprintf ( fname ) ; } <S2SV_ModStart> 0 ) ; } if ( fname ) { fprintf ( fname ) ; }",0
185,<S2SV_ModStart> 1 ) { <S2SV_ModEnd> if ( size,0
186,"<S2SV_ModStart> { if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
187,<S2SV_ModStart> == 0 ) { <S2SV_ModEnd> } if (,0
188,"<S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR, KSZ8851_ISR ) ; if ( status & KSZ8851_ISR_ISR_ISR_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_E <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR_ISR_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_RXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR_RXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_ISR_ISR_IER <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR_RXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR_RXIS <S2SV_ModEnd> ) ) { if <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_RXIS <S2SV_ModEnd> ) ;",0
189,"<S2SV_ModStart> void write_buffer ( vpx_write_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> * wb, vpx_write_buffer <S2SV_ModEnd> * wb,",0
190,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY (,0
191,<S2SV_ModStart> len = - 1 <S2SV_ModEnd> ; if (,0
192,,0
193,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE_MODE_MODE_NONE <S2SV_ModEnd> ( x, <S2SV_ModStart>, bbs, int bbs, int mi_col, int mi_col, BLOCK_SIZE bsize, int mi_col ) <S2SV_ModStart>, bbs, subsize, <S2SV_ModEnd>, bbs, <S2SV_ModStart>, bbs, bsize, <S2SV_ModStart>, bbs, subsize, bsize, subsize <S2SV_ModEnd> ) ; if <S2SV_ModStart>, bbs, subsize, subsize, subsize, subsize, subsize, subsize, subsize ) ; if ( cm -> mi_col + mi_col + mi_col + mi_col + mi_col + mi_col + mi_col + mi_col + mi_col + mi_row, subsize ) ; if ( cm -> mi_col > BLOCK_SIZE ) { return 0 ; } <S2SV_ModStart> = BLOCK_SIZE ( cm -> mi_col + cm -> mi_col + mi_col + cm -> mi_col + cm -> mi_row, bsize + mi_row, bsize + 1 ) ; if ( bsize > 0 ) { return - 1 ; } } <S2SV_ModStart> case",0
194,<S2SV_ModStart> name ) ; if (! strcmp ( value ) ) return 0 ;,0
195,"<S2SV_ModStart> ret = key_ref_ref_ref ( key_ref, <S2SV_ModEnd> key ) ; if",0
196,"<S2SV_ModStart> 1, ret <S2SV_ModEnd> ) ; if",0
197,<S2SV_ModStart> break ; } <S2SV_ModEnd> dst_to_size ( dst_reg -> smin_size,0
198,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
199,<S2SV_ModStart> ; if ( skb -> opt.,0
200,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
201,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> va_t i <S2SV_ModStart> si_frame_count ; int i <S2SV_ModEnd> ; int i <S2SV_ModStart> ; int i <S2SV_ModEnd> ; int i <S2SV_ModStart> ; int i <S2SV_ModEnd> ; int i <S2SV_ModStart> = num_frame_frame_frame_frame_frame_frame_count ; int i <S2SV_ModEnd> ; i <S2SV_ModStart> [ i ] [ i ] [ i ] <S2SV_ModEnd> ] ; int,0
202,<S2SV_ModStart> ( screen ) <S2SV_ModEnd> ( screen ->,0
203,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
204,<S2SV_ModStart> pd ) ; <S2SV_ModEnd> char * dd,0
205,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
206,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
207,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",1
208,<S2SV_ModStart> ( name ) <S2SV_ModEnd> ) { return,0
209,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE_MODE <S2SV_ModEnd> ( cpi, <S2SV_ModStart> * cpi, MACROBLOCK_SIZE bsize, <S2SV_ModStart> * cpi, <S2SV_ModEnd>, BLOCK_SIZE <S2SV_ModStart>, & cpi -> td. <S2SV_ModStart> ; MACROBLOCK_SIZE bsize = & cpi -> mi_col ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ) ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ) ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart>, & cpi <S2SV_ModEnd>, mi_col, <S2SV_ModStart> ) ; memcpy <S2SV_ModEnd> ( cpi <S2SV_ModStart> ) ; memcpy <S2SV_ModEnd> ( cpi <S2SV_ModStart> ) ; memcpy <S2SV_ModEnd> ( cpi ->",0
210,"<S2SV_ModStart> ), & err <S2SV_ModEnd> ) ; if",0
211,<S2SV_ModStart> char * dir <S2SV_ModEnd> ; if (,0
212,<S2SV_ModStart> mnt ) ; error = NULL ;,0
213,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ip_options_options_options ( struct ip_options * opt, <S2SV_ModStart> * opt, struct ip_options_options_options * opt, <S2SV_ModEnd> ) { struct",0
214,<S2SV_ModStart> ) goto error <S2SV_ModEnd> ; if (,0
215,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( d <S2SV_ModStart> ( d -> name, <S2SV_ModEnd> ) ) { <S2SV_ModStart> return - EINVAL ; } <S2SV_ModEnd> if ( d",0
216,"<S2SV_ModStart> dir, NULL <S2SV_ModEnd> ) ; }",0
217,<S2SV_ModStart> -> columns - 2 <S2SV_ModEnd> ) ; x,0
218,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
219,"<S2SV_ModStart>!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
220,<S2SV_ModStart> ; if ( len < 4 ) goto trunc ; <S2SV_ModStart> ) ) ; } if ( len < 4 ) goto trunc ;,0
221,<S2SV_ModStart> ; if (! task_active ( task ) ) return - EPERM ; if (,0
222,<S2SV_ModStart> * rowstart ; jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_matind_t,0
223,,0
224,"<S2SV_ModStart> ), ret <S2SV_ModEnd> ) ; memset",0
225,"<S2SV_ModStart>, int ret, mi_ret <S2SV_ModEnd> ) { int",0
226,<S2SV_ModStart> ; if ( size_t <S2SV_ModEnd> ( size_t ),0
227,<S2SV_ModStart> ) ; } return ERROR ;,0
228,"<S2SV_ModStart> ), val",0
229,"<S2SV_ModStart> ( * h, <S2SV_ModEnd> ) ) {",0
230,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> 16 ] ; tran_low_t <S2SV_ModEnd> } <S2SV_null>",0
231,<S2SV_ModStart> ; g_string = g_string ( <S2SV_ModEnd> ) ; if,0
232,<S2SV_ModStart> { char * temp_filename = NULL <S2SV_ModStart> { if ( temp_filename ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; } <S2SV_ModStart> { TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ; } free ( temp_filename ) ; free ( temp_filename ) ; <S2SV_ModStart> ) ; } free ( temp_filename ) ; free ( temp_filename ) ;,0
233,<S2SV_ModStart> break ; } elen += pc -> length ; <S2SV_ModStart> break ; } <S2SV_ModEnd> } if (,0
234,"<S2SV_ModStart> ( tptr, ""%s"", length <S2SV_ModEnd> ) ) ;",0
235,<S2SV_ModStart> NULL ) { <S2SV_ModEnd> return ; },0
236,"<S2SV_ModStart> int length ; struct stream packet ; <S2SV_ModStart> length ) ; packet = * s ; <S2SV_ModStart> return FALSE ; if (! s_check_rem ( s, length ) ) { rdp_check_rem ( s, length ) ; }",0
237,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> sb_null> <S2SV_null>,0
238,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> S_IWUSR ) ; unlink ( ""clone"", dest <S2SV_ModEnd> ) ; unlink",0
239,"<S2SV_ModStart> -> fstats ; memset ( & finfo, NULL, NULL, NULL ) ;",0
240,"<S2SV_ModStart> -> x = MagickMin <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 1.0f, MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> x = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> x = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> x = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> x = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> x = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> x = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> x = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> x = MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> x = MagickMax <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 0.0f, MagickMax <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 0.0f, MagickMax <S2SV_ModEnd> ( 0",0
241,,0
242,<S2SV_ModStart> 1 ) ; memset <S2SV_ModEnd> ( cpi ->,0
243,<S2SV_ModStart> ; size_t dcount <S2SV_ModEnd> ; if (,0
244,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
245,"<S2SV_ModStart> char * res, size_t size <S2SV_ModEnd> ) { unsigned <S2SV_ModStart> size = NULL <S2SV_ModStart>, NULL ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( res",0
246,,0
247,<S2SV_ModStart> ; },0
248,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ref == 0,0
249,<S2SV_ModStart> ; idx = 0 <S2SV_ModEnd> ; if (,0
250,<S2SV_ModStart> || ( size_t ),0
251,<S2SV_ModStart> ) { mutex_lock ( & timeri -> timer_list ) ; spin_unlock ( & timeri ) ; <S2SV_ModStart> ) ; } spin_unlock <S2SV_ModEnd> ( & <S2SV_ModStart> ) ; spin_unlock,0
252,<S2SV_ModStart> -> u4_dpb_cmds = ps_dec ->,0
253,,0
254,<S2SV_ModStart> return ret ; <S2SV_ModEnd> if ( ret,0
255,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",1
256,<S2SV_ModStart> dev ) ; if <S2SV_ModEnd> ( bi ==,0
257,<S2SV_ModStart> ) ; } msg -> msg_namelen = 0,0
258,<S2SV_ModStart> * s = <S2SV_ModEnd> ; if (,0
259,"<S2SV_ModStart> = NULL ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL ) )",0
260,<S2SV_ModStart> ( devnum ) ; <S2SV_ModEnd> if ( msg,0
261,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( (,0
262,<S2SV_ModStart> <S2SV_null> static,0
263,<S2SV_ModStart> ) goto cleanup <S2SV_ModEnd> ; if (,0
264,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> & fl6, rcu_read_lock ) ; rcu_read_unlock ( <S2SV_ModStart> np -> opt ) ; rcu_read_unlock ( ) ; <S2SV_ModStart> & fl6, rcu_read_lock, <S2SV_ModEnd> ) ; rcu_unlock",0
265,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) { const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * cpi = cpi -> common ; const VP9_COMMON * const VP9_COMMON * cpi -> fc = cpi -> oxcf. tx_size_size_type ] ; if ( cpi -> cpi -> <S2SV_ModStart> ) ) { if ( cpi -> <S2SV_ModEnd> ) { return <S2SV_ModStart> } else { if ( cpi -> <S2SV_ModStart> ) ) { return PREDICTION_MODE_MODE <S2SV_ModEnd> ; } else { return <S2SV_ModStart> ) ; } else { return <S2SV_ModStart> } else { <S2SV_ModEnd> } else { <S2SV_ModStart> ) ; } } } else { if <S2SV_ModEnd> } else { return <S2SV_ModStart> } else { if <S2SV_ModEnd> } else { <S2SV_ModStart> } else { <S2SV_ModEnd> } else { <S2SV_ModStart> } else { return <S2SV_ModStart> } <S2SV_null>,0
266,<S2SV_ModStart> return - 1 <S2SV_ModEnd> ; } if,0
267,<S2SV_ModStart> buf == 0 && buf -> size == 0,0
268,<S2SV_ModStart> size_t size_t <S2SV_ModEnd> ; size =,0
269,,0
270,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
271,"<S2SV_ModStart> -> src ; rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src",0
272,"<S2SV_ModStart> list. name, true",1
273,<S2SV_ModStart> ) ; },0
274,<S2SV_ModStart> ; r = strncpy <S2SV_ModEnd> ( b ->,0
275,<S2SV_ModStart> ( error ) <S2SV_ModEnd> ; if (,0
276,<S2SV_ModStart> cmd -> sas_cmd <S2SV_ModEnd> ) ; },0
277,"<S2SV_ModStart>, name, true,",0
278,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
279,<S2SV_ModStart> Rec. RecordLength ) ; break,0
280,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>,0
281,,1
282,"<S2SV_ModStart> -> res ; memset ( & dev, 0, sizeof ( dev ) ) ;",0
283,<S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd> ) { if <S2SV_ModStart> ( psf -> header. end <S2SV_ModEnd> ) { if <S2SV_ModStart> ( psf -> header. end <S2SV_ModEnd> >,0
284,<S2SV_ModStart> ) ; return <S2SV_ModEnd> ) ; },0
285,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
286,<S2SV_ModStart> event ) { <S2SV_ModEnd> event_event_event ( event,0
287,<S2SV_ModStart> ( flags ) <S2SV_ModEnd> ; flags =,0
288,<S2SV_ModStart> ( tptr <S2SV_ModEnd> ) ; if,0
289,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
290,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src,",0
291,"<S2SV_ModStart> = 0 ; size_t ext_size = sizeof ( struct ext4_extent_size ) * sizeof ( struct ext4_size ) * ext4_size ) ; <S2SV_ModStart> ) ; } ext4_size = sizeof ( struct ext4_extent_size ) * ext4_size ) ; memset ( inode -> i_size, 0, 0, 0, sizeof ( struct ext4_size ) ; ext4_size ) { ext4_size = sizeof ( struct ext4_extent_size - ext4_size ) ; <S2SV_ModStart> ) ; } ext4_size = sizeof ( struct ext4_extent_size - ext4_size - ext4_size ) ; memset ( inode -> i_size - ext_size - ext_size ) ;",0
292,"<S2SV_ModStart>, ptr_t * ptr",0
293,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S,0
294,<S2SV_ModStart> ) break ; <S2SV_ModEnd> } } if,0
295,<S2SV_ModStart> return - 1 <S2SV_ModEnd> ; if (,0
296,<S2SV_ModStart> if ( len < 0 || len,0
297,,0
298,<S2SV_ModStart> ; client -> priv_timeout = 0,0
299,<S2SV_ModStart> ; j < 0,0
300,"<S2SV_ModStart> buffer ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3lf <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3lf <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3lf"",",0
301,,0
302,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
303,<S2SV_ModStart> ; if ( count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if (,0
304,"<S2SV_ModStart> = xchg ( ( <S2SV_ModEnd> opt -> tot_len <S2SV_ModStart> ( opt -> tot_len, & opt -> tot_len",0
305,<S2SV_ModStart> ; } return - EINVAL <S2SV_ModEnd> ; } else,0
306,<S2SV_ModStart> ( ) ; sctp_null> <S2SV_null>,0
307,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
308,<S2SV_ModStart> task ) { <S2SV_ModEnd> timer -> timer,0
309,<S2SV_ModStart> ; if ( <S2SV_ModEnd> dst_name [,0
310,"<S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_MAHTR1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_RTS <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_MAIS <S2SV_ModEnd> ) ) ;",0
311,"<S2SV_ModStart>, arg, vpx_writer <S2SV_ModEnd> ) ; }",0
312,"<S2SV_ModStart> NEED_OP ( 1, <S2SV_ModEnd> ) ) { <S2SV_ModStart> NEED_OP ( t, <S2SV_ModEnd> NEED_IP <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( t, <S2SV_ModEnd> ) ) ; <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 2, 0 <S2SV_ModStart> NEED_OP ( 2, 0 <S2SV_ModStart> NEED_OP ( 2, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP ( 2, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP (",0
313,"<S2SV_ModStart> ( fit_name, NULL <S2SV_ModEnd> ) ) { <S2SV_ModStart> return ENOMEM <S2SV_ModEnd> ; } }",0
314,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> _null>,0
315,<S2SV_ModStart> ( rc -> avg_bandwidth <S2SV_ModEnd> ( rc -> <S2SV_ModStart> ( rc -> avg_bandwidth <S2SV_ModEnd> ) ) ;,0
316,"<S2SV_ModStart> ) ) { strcpy <S2SV_ModEnd> ( 1,",0
317,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
318,"<S2SV_ModStart> ; # endif memset <S2SV_ModEnd> ( b,",0
319,<S2SV_ModStart> ; return - 1,0
320,,0
321,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> ) ; } exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
322,<S2SV_ModStart> -> peer.,0
323,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
324,<S2SV_ModStart> -> size = 0 <S2SV_ModEnd> ) ; h,0
325,<S2SV_ModStart> int i ; UINT32 i2_MAX_MAX_WIDTH ; WORD32 u2_num_coded = 0 <S2SV_ModStart> ) ; if (! ps_dec -> u2_idc ) { return NULL ; },0
326,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> vp9_null> <S2SV_null>,0
327,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
328,"<S2SV_ModStart> { if (! a -> name ) { archive_set_error ( & a -> name, ARCHIVE_ERROR, ""Failed <S2SV_blank> failed"" ) ; return ( & a -> name ) ; } if ( <S2SV_ModStart> == NULL ) { archive_set_error ( & a -> name, ARCHIVE_OK ) ; return ( - 1 ) ; } if ( a == '\\0' ) { archive_set_set_error ( & a -> name, ARCHIVE_OK ) ; return ( - 1 ) ; } if ( a!= 0 ) { archive_set_set_error ( & a -> name, ARCHIVE_OK ) ; } if ( a -> name, ARCHIVE_OK ) { archive_error ( & a -> name, ""Failed <S2SV_blank> failed"" ) ; return ( & a -> name, ARCHIVE_OK ) ; } } if ( a -> name [ 0 ] == '\\0' ) { archive_set_set_size ) { archive_set_error ( & a -> name, ARCHIVE_OK ) ; } <S2SV_ModEnd> } if ( <S2SV_ModStart> 0' ) { archive_set_set_error ( & a -> name, ""Failed <S2SV_blank> failed"" ) ; } } }",0
329,"<S2SV_ModStart>, * ei <S2SV_ModEnd> ; uint32_t inode <S2SV_ModStart>, & ei -> i_size <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> ) goto out ; if ( inode -> i_sb -> i_sb -> i_size > inode ) goto out ; if ( inode -> i_sb -> i_sb -> i_size <= inode ) goto out ; if ( inode -> i_sb -> i_size <= inode ) goto out ; if ( inode ) goto out ;",0
330,<S2SV_ModStart> ) { const memset <S2SV_ModEnd> ( & lfm,0
331,<S2SV_ModStart> mq_rq ) { <S2SV_ModEnd> spin_unlock ( &,0
332,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
333,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ref == 0,0
334,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
335,<S2SV_ModStart> ( void ) || replySize == NULL || <S2SV_ModStart> ) || replySize == NULL || replySize,0
336,"<S2SV_ModStart> ""`%s\'"", option ) ; geometry = DestroyString ( geometry",0
337,<S2SV_ModStart> ; } return - EINVAL <S2SV_ModEnd> ; } else,0
338,<S2SV_ModStart> ; if (,0
339,<S2SV_ModStart> ] ) ; if ( len < 0 ) { <S2SV_ModStart> ] ) ; },0
340,"<S2SV_ModStart> uint8 length ; struct stream packet ; <S2SV_ModStart> length ) ; struct stream packet = * s ; <S2SV_ModStart> length ) ; packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_error(), <S2SV_blank> overrun"", & packet ) ; }",0
341,"<S2SV_ModStart> ctx, ret <S2SV_ModEnd> ) ; if",0
342,<S2SV_ModStart> & new_map ) <S2SV_ModEnd> ) goto out,0
343,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } else {,0
344,<S2SV_ModStart> t ; size_t dataptr ; size_t,0
345,,0
346,"<S2SV_ModStart> ""MemoryAllocationFailed"" ) ; ( void ) NULL ;",0
347,"<S2SV_ModStart> * p ; char * p ; const char * p ; char * p ; char * p ; char * p ; char * p ; char * p ; char * p ; char * p ; char * p ; char * p ; if ( p == NULL || p == NULL ) { Py_SetString ( p ) ; return NULL ; } if (! p ) { Py_SetString ( u32 ) ; return NULL ; } if ( p == NULL ) { Py_SetString ( u32 ) { Py_SetString ( u32 ) ; return NULL ; } if (! <S2SV_ModStart> ) ) { return NULL ; } if ( p == NULL ) { PyUnicode_SetString ( u, p, p, 2 ) ; return NULL ; } if ( p == NULL ) { Py_SetString ( u32 ) { Py_SetString ( p, 2 ) ; } return NULL ; } if ( p == NULL ) { PyUnicode_SetString ( p ) { Py_SetString ( u32 ) ; } return NULL ; } return NULL ; } if ( buf == NULL ) { Py_SetString ( u32 ) { return NULL ; } return NULL ; } if ( s <S2SV_null> <S2SV_null> <",0
348,"<S2SV_ModStart> ret = 0 <S2SV_ModEnd> ; char * <S2SV_ModStart>, * cp <S2SV_ModEnd>, *",0
349,<S2SV_ModStart> -> buffer ; if (! ctx -> gf128 ) return - ENOKEY ;,1
350,"<S2SV_ModStart> write_literal ( const vpx_write_literal <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_write_literal <S2SV_ModEnd> ( w,",0
351,"<S2SV_ModStart> ; # endif memset <S2SV_ModEnd> ( cpi,",0
352,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
353,<S2SV_ModStart> } } } <S2SV_ModEnd> } else {,0
354,<S2SV_ModStart>,0
355,<S2SV_ModStart> ; err = - 1 <S2SV_ModEnd> ) ; },0
356,"<S2SV_ModStart> size_t number_planes, number_filled <S2SV_ModEnd> ) ; number_planes_filled <S2SV_ModStart> ( number_filled, number_planes_filled <S2SV_ModEnd> ) ) { number_planes_filled <S2SV_ModStart> ( number_planes, number_planes, number_planes_filled <S2SV_ModEnd> ) ; number_planes_filled <S2SV_ModStart> ( number_filled, number_planes_filled <S2SV_ModEnd> ) ) { number_planes_planes_filled <S2SV_ModStart> ( number_planes, number_planes, number_filled <S2SV_ModEnd> ) ) ; ThrowReaderException <S2SV_ModStart> ) ) ; }",0
357,<S2SV_ModStart> ) ; },0
358,<S2SV_ModStart>. type = <S2SV_ModEnd> ; if (,0
359,"<S2SV_ModStart> ( pool, false",0
360,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length ),0
361,<S2SV_ModStart> ioc ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
362,<S2SV_ModStart> * res ; <S2SV_ModEnd> return NULL ;,0
363,<S2SV_ModStart>,0
364,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
365,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> write_mode_mode_mode ( PREDICTION_MODE <S2SV_ModStart> * r, PREDICTION_MODE <S2SV_ModEnd> * cm, <S2SV_ModStart> * cm, PREDICTION_MODE <S2SV_ModEnd> mode, <S2SV_ModStart> ) { const PREDICTION_MODE <S2SV_ModStart> ) { const PREDICTION_MODE <S2SV_ModEnd> y_mode = vp9_mode_mode <S2SV_ModStart> ) ; const PREDICTION_MODE <S2SV_ModEnd> ( r,",0
366,<S2SV_ModStart> ) return - EINVAL ; if (,0
367,<S2SV_ModStart> ; return ( NULL <S2SV_ModEnd> ) ; },0
368,<S2SV_ModStart> s ) ; if ( s,0
369,,0
370,"<S2SV_ModStart> += dif ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
371,<S2SV_ModStart> return - 1,0
372,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static const vpx_writer_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * tp ; vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> t ) { const vpx_prob <S2SV_ModEnd> * tp =",0
373,"<S2SV_ModStart> cpi, struct vpx_write_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> data ; struct vpx_wb_wb_write_buffer <S2SV_ModEnd> * wb ; <S2SV_ModStart> = wb ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> size ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> size ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
374,<S2SV_ModStart> * net ; <S2SV_ModEnd> if (!,0
375,"<S2SV_ModStart> int id ; ND_TCHECK ( * ext, sizeof ( struct",0
376,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
377,<S2SV_ModStart> err ; } err = - ENOMEM ;,0
378,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> uint32 x2_h2_h2_h2_h2_h2_h2_h2_h2_h2_h2_h2 <S2SV_ModEnd> ( x2, <S2SV_ModStart>, x2, x1, x2, x2 <S2SV_ModEnd> ) ; WORD",0
379,"<S2SV_ModStart> mntent, const struct mount * mntent ; if (! mount ( mount -> mount ) ) return NULL ;",0
380,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> 16 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_wb_literal <S2SV_ModEnd> ( wb,",0
381,"<S2SV_ModStart> ( req_val ) ; rb_set ( req_val, req_val, req_val ) ; <S2SV_ModStart> ( req_val ) ; rb_new ( req_val",0
382,<S2SV_ModStart> ; int ret = NULL <S2SV_ModStart> NULL ) { * new_dbh = NULL <S2SV_ModEnd> ; if (,0
383,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
384,"<S2SV_ModStart> char len, <S2SV_ModEnd> val ) { <S2SV_ModStart> char len, <S2SV_ModEnd> ) ; }",0
385,"<S2SV_ModStart> ) ; } size_t size = 0 ; size = 0 ; size ; size_t size ; size_t length = size ; size_t size ; size_t length = size ; size_t length ; size = size ; size = size ; if ( size > 8 ) goto error ; size = size ; if ( size < 4 ) goto error ; if ( size!= 0 ) goto error ; if ( size!= 0 ) goto error ; if ( size!= 0 ) ASSERT ( buf ) ; ASSERT ( buf ) ; ASSERT ( size - 1 ) ; ASSERT ( buf ) ; ASSERT ( buf, 0 ) ; ASSERT ( buf ) ; ASSERT ( buf, 0 ) ; ASSERT ( size - 1 ) ; ASSERT ( buf ) ; ASSERT ( buf ) ;",0
386,<S2SV_ModStart> return ; } <S2SV_ModEnd> if (!,0
387,"<S2SV_ModStart> ( str, strlen ( str, <S2SV_ModStart> str, len, len <S2SV_ModEnd> ) ; }",0
388,,1
389,<S2SV_ModStart> * output ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
390,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
391,<S2SV_ModStart> * tmpname ; <S2SV_ModEnd> int tmpname = NULL <S2SV_ModStart> ) { char * tmpname = NULL ; <S2SV_ModEnd> if (! <S2SV_ModStart> return - 1 ; <S2SV_ModEnd> if (!,0
392,,0
393,<S2SV_ModStart>,0
394,<S2SV_ModStart> NULL ; } Jid * const stanza_get_jid ( stanza ) ; const stanza_from = jid * const stanza_from ) ; const stanza_get_from ( stanza ) ; const char * msg_from = jid * msg_from = jid * msg_from = jid *,0
395,"<S2SV_ModStart> ( argv, ""%s"", conf_options,",0
396,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
397,<S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> if ( md,0
398,<S2SV_ModStart> ; ps_dec -> u4_size = 0 ; ps_dec ->,0
399,<S2SV_ModStart> <S2SV_null> static,0
400,"<S2SV_ModStart> ( ctx -> priv, 0",0
401,<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l,0
402,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } } },0
403,"<S2SV_ModStart> ; i = 0 <S2SV_ModEnd> ( i,",0
404,<S2SV_ModStart> ; if ( i >= i <S2SV_ModEnd> ) break ;,0
405,"<S2SV_ModStart> <S2SV_null> <S2SV_null> else vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> <S2SV_null>",0
406,<S2SV_ModStart> if ( ent == NULL ) { st = NULL ; <S2SV_ModEnd> goto cleanup ;,0
407,,0
408,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
409,<S2SV_ModStart> ; if ( d -> msg_len > sizeof ( d -> msg ) ) return - EINVAL ; if ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( i,1
410,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; bytes_per_line = sun_line ;",0
411,<S2SV_ModStart> ) ; },0
412,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> vp9_null> static <S2SV_ModStart> case BLOCK_8_8_8_t <S2SV_ModEnd>  * <S2SV_ModStart> case BLOCK_8 : return vp9_mse_mse_d <S2SV_ModEnd> ; default : <S2SV_ModStart> case BLOCK_16_16_16_8x8x8 : return vp9_mse_mse_mse_mse_mse_mse_mse_mse <S2SV_ModEnd> ; } <S2SV_null>,0
413,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
414,<S2SV_ModStart> ; if ( krb5_data == NULL ) return NULL ; if (,0
415,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
416,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
417,<S2SV_ModStart> size ) { memset ( size_t ) ;,0
418,<S2SV_ModStart> ; ssize_t count ; if ( bytes == 0 ) return 0,0
419,,0
420,"<S2SV_ModStart> desc ) ; memset ( & usb_desc, sizeof ( desc ) ) ;",0
421,"<S2SV_ModStart>, sb, 0,",0
422,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2cap_encode_pi ( struct l2cap_pi ( sk ) ; struct l2cap_data * rc = L2CAP_MODE_MODE_MODE_MODE_MODE_MODE_MODE ; struct l2cap_to_id <S2SV_ModEnd> * req = <S2SV_ModStart> ( sk ) ; rc = L2CAP_MODE_MODE_MODE_MODE_MODE_MODE_MODE <S2SV_ModEnd> ( sk ) <S2SV_ModStart> ) ; rc = rc <S2SV_ModEnd> ( sk ) <S2SV_ModStart> ( sk ) ; rc = l2cap_to_id <S2SV_ModEnd> ( sk ) <S2SV_ModStart> ( sk ) ; rc = l2cap_to_to_id <S2SV_ModEnd> ( sk ),0
423,<S2SV_ModStart> { if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> int ) ),0
424,<S2SV_ModStart> u1_coded ; ps_dec -> u1_total_mbs_coded = 0 ;,0
425,<S2SV_ModStart> { if (! task <S2SV_ModEnd> ) { return,0
426,"<S2SV_ModStart> = ucounts ; spin_lock_lock_irq ( & new -> count, & new -> count ) <S2SV_ModEnd> ; spin_unlock_irq ( <S2SV_ModStart> ucounts -> count = 0 <S2SV_ModEnd> ; spin_unlock_irq (",0
427,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd>, fmode,",0
428,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
429,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
430,<S2SV_ModStart> ; if ( pmd_none_bad <S2SV_ModEnd> ( pmd ),0
431,<S2SV_ModStart> ( * ptr <S2SV_ModEnd> ) { return <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } while (,0
432,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
433,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst_ptr1,",0
434,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
435,"<S2SV_ModStart> ) buf2, len",0
436,"<S2SV_ModStart> ( interface, KSZ8851_ASSERT ( interface, KSZ8851_RTS <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_S2SV_null>",0
437,<S2SV_ModStart> NULL ) ;,0
438,<S2SV_ModStart>. udpport = 0 <S2SV_ModEnd> ; settings.,1
439,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> if (!,0
440,,0
441,"<S2SV_ModStart> clips_ptr, - EINVAL",0
442,<S2SV_ModStart> ; if ( pmd_bad <S2SV_ModEnd> ( pmd ),0
443,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
444,"<S2SV_ModStart> ) ; } # if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModEnd> ( out_height, <S2SV_ModStart> ) ) { printf ( ""Error: <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d\\n"", <S2SV_ModStart> ) ; goto outbuf [ 0 ] ) ; } if ( <S2SV_ModStart> ) ) { fprintf ( outbuf ) ; return 1 ; }",0
445,<S2SV_ModStart> int i ; if ( num_fields < 0 ) return 0 ;,0
446,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static vpx_codec_alg_alg_priv_t * ( void ) { vpx_codec_alg_alg_alg_alg_alg_t * cfg ; vpx_alg = 0 ; vpx_alg_alg_alg_alg_t * priv ; vpx_alg = vpx_alg_alg_alg_alg_alg_alg_t * priv ; priv = 0 ; priv -> cfg ; priv = 0 ; priv -> cfg ; priv = 0 ; priv -> cfg. cfg. cfg. cfg. cfg ; priv = 0 ; priv = 0 ; priv -> cfg -> cfg -> priv = 0 ; priv = 0 ; priv -> cfg.,0
447,<S2SV_ModStart> ) return 0 <S2SV_ModEnd> ; if (,0
448,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
449,"<S2SV_ModStart> ( vma, <S2SV_ModEnd> ) ; }",0
450,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
451,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, data ) <S2SV_ModStart> ( interface, ENC28J60_MIRDH <S2SV_ModEnd>, data ) <S2SV_ModStart> ( interface, ENC28J60_MIRDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MIRDH <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIRDH <S2SV_ModEnd> ) ) ;",0
452,"<S2SV_ModStart> * fmt, <S2SV_ModEnd> const char *",0
453,<S2SV_ModStart> ) ) ;,0
454,<S2SV_ModStart> ; if (,0
455,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
456,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
457,<S2SV_ModStart> -> i_pic_pic_pixel = 0 ;,0
458,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( mf,0
459,<S2SV_ModStart> int j = 0 ; int,0
460,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
461,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
462,<S2SV_ModStart> -> y_variance <S2SV_ModEnd> ( x ->,0
463,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ( ctx, <S2SV_ModEnd> va_list args )",0
464,<S2SV_ModStart> ; } } if (,0
465,,0
466,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> unsigned int mi_y_y_y_y_y_y_y_y_y_y_y_y_y <S2SV_ModEnd> unsigned char * <S2SV_ModStart> int max_y ; unsigned int max_y_y_y_y_y_y_y_y_y_size = min_y_y ; unsigned int max_y_y_y_y_y_y_y_y_y ; unsigned int max_y_y_y_y_y_y_y_y_y_y_size = max_y ; unsigned int max_y_y_y_y_y ; unsigned int max_y_y_y ; unsigned int max_y_y_y_size = max_y ; unsigned int max_y_y_y_y ; uint8_t max_t max_y_y_y_t max_y_y_y_y_size = min_y ; unsigned int max_t max_y_size ; unsigned int delta_size = max_size ; unsigned int max_,0
467,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } else {,0
468,<S2SV_ModStart> ; int ret = 0 <S2SV_ModEnd> ; ret =,0
469,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
470,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> rc_null> <S2SV_null>,0
471,"<S2SV_ModStart> = new_bh ; memset ( new_bh, 0, sizeof ( new_bh ) ) ; <S2SV_ModStart> new_bh ) ; free ( new_bh ) ;",0
472,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ( ctx, <S2SV_ModEnd> va_list args )",0
473,<S2SV_ModStart> = MagickFalse ; break,0
474,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
475,"<S2SV_ModStart>, background_index, NULL <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsy <S2SV_ModEnd> ) ; if",0
476,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ( ctx, <S2SV_ModEnd> va_list args )",0
477,<S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbs ++,0
478,<S2SV_ModStart> ; u4_num_in_mbs ( ps_dec -> u4_num_num_mbs_t ) <S2SV_ModStart> ; if ( 0 < ps_dec -> u4_num_mbs ) { return IMPEG2D_T ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( ps_dec,0
479,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
480,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
481,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
482,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 8 ) ; <S2SV_ModEnd> src += src_stride",1
483,"<S2SV_ModStart> = 0 ; if ( row < 0 ) { TIFFErrorExt ( tif -> rows, ""invalid <S2SV_blank> file"" ) ; continue ; }",0
484,,0
485,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
486,<S2SV_ModStart> ( size - 1,0
487,"<S2SV_ModStart>, y ; # if CONFIG_VP9_HIGHBITDEPTH if ( ( ( ( img -> fmt & VPX_FMT_FMT_HIGHBITDEPTH ) ) == 0 ) { vpx_err ( img -> fmt & VPX_IMG_FMT_FMT_HIGHBITDEPTH ) ; }",0
488,"<S2SV_ModStart> ; uint16_t prev_len ; uint8_t prev_len ; uint8_t len ; <S2SV_ModStart> ) ; } if ( len < 4 ) { log_err ( ""L2tp <S2SV_blank> length <S2SV_blank> length <S2SV_blank> length <S2SV_blank> length\\n"", avp -> length ) ; return - EINVAL ; } <S2SV_ModStart> -> length ; hdr. length = <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> length + len < 4",0
489,<S2SV_ModStart> ; if (,0
490,<S2SV_ModStart> { if ( <S2SV_ModEnd> ( name ),0
491,"<S2SV_ModStart> size, 0, 0 <S2SV_ModEnd> ) ; ret",0
492,<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ;,1
493,"<S2SV_ModStart> ( sock, sizeof ( sa )",0
494,"<S2SV_ModStart> ( cpkt. data <S2SV_ModEnd>, ""%s"",",0
495,<S2SV_ModStart>,0
496,"<S2SV_ModStart> skb ) ; strncpy <S2SV_ModEnd> ( skb,",0
497,<S2SV_ModStart> return - 1 <S2SV_ModEnd> ; if (,0
498,"<S2SV_ModStart>, & rlen, 0",1
499,"<S2SV_ModStart> ) ; char * data ; size_t md = 0 ; <S2SV_ModStart> = 0 ; len = sizeof ( int ) - 1 <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ) ) ; if ( len > sizeof ( struct mt_data ) ) { <S2SV_ModStart> ) ; }",0
500,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( name,",0
501,<S2SV_ModStart> ; j = 0,0
502,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
503,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
504,<S2SV_ModStart> ; return ( NULL <S2SV_ModEnd> ) ; },0
505,<S2SV_ModStart> char * b = NULL <S2SV_ModStart> u_char * b = NULL <S2SV_ModStart> u_char * authctxt <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ; if (! authctxt -> user == NULL ) { error = NULL ; goto done ; } <S2SV_ModStart> r ) ; <S2SV_ModEnd> } if (,0
506,"<S2SV_ModStart> ; uint32_t bcount ; if ( format_chunk == 0 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> is <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
507,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], sizeof ( buf_size ) ) ;",0
508,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
509,"<S2SV_ModStart> ( buf, <S2SV_ModEnd> len + 4 <S2SV_ModStart> ) ; if ( len < 4 ) goto error ; <S2SV_ModStart> sizeof ( buf )",0
510,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
511,<S2SV_ModStart> ( ret ||! cm_id -> device ||,1
512,<S2SV_ModStart> ; size_t ret = - 1 ; if ( ret > OE_SSIZE_MAX ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
513,"<S2SV_ModStart> ( new_options, & new_options, sizeof ( new_options ) )",0
514,<S2SV_ModStart> ; if ( i >= i <S2SV_ModEnd> ) break ;,0
515,<S2SV_ModStart> val : return 0,0
516,<S2SV_ModStart> * page = <S2SV_ModEnd> ; if (,0
517,<S2SV_ModStart> ; i = GF_ISOM_FILE <S2SV_ModEnd> ; if (,0
518,"<S2SV_ModStart> ) ; int i ; size_t len = 0 ; <S2SV_ModStart>, & md, sizeof ( data ) ) ; memset ( - 1, sizeof ( data ), sizeof ( data ), sizeof ( data ) ) ; <S2SV_ModStart> ; mb_data ) ; memset ( & <S2SV_ModEnd>, sizeof ( <S2SV_ModStart>, 5 ), sizeof ( data ) ) ; memcpy ( data, sizeof ( data ), sizeof ( data ) ) ; memcpy ( data, sizeof ( data ), sizeof ( data ), sizeof ( <S2SV_ModEnd> ) ) ; <S2SV_ModStart>, sizeof ( data <S2SV_ModEnd> ) ; if",0
519,<S2SV_ModStart> NULL ) { <S2SV_ModEnd> return NULL ;,0
520,<S2SV_ModStart> ( n ) \\\n{ <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
521,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
522,<S2SV_ModStart> ) ; } <S2SV_ModEnd> ) ; },0
523,"<S2SV_ModStart> dst ) { memcpy <S2SV_ModEnd> ( dst, <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst,",0
524,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> int mi_col ; <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( & cpi <S2SV_ModStart> mi_col ) ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi ->,0
525,"<S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
526,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
527,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ),",0
528,<S2SV_ModStart> ; if ( skb_free <S2SV_ModEnd> ( skb ),0
529,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
530,<S2SV_ModStart>,0
531,"<S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ), 0 ) <S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) <S2SV_ModStart> ) ; if ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
532,<S2SV_ModStart> ; if ( vpx_free_buffer <S2SV_ModEnd> ( ctx ),0
533,"<S2SV_ModStart> 1 ) { vpx_lpf_horizontal_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_horizontal_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_horizontal_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_horizontal_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> } else { vpx_lpf_dual <S2SV_ModEnd> ( s,",0
534,<S2SV_ModStart> ; ctx -> pctx = 0 ; ctx ->,0
535,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( DestroyImageList ( image ) ; }",0
536,<S2SV_ModStart> ( ps_stream -> u4_offset < ps_stream -> u4_offset,0
537,<S2SV_ModStart> ) return - EINVAL <S2SV_ModEnd> ; if (,0
538,<S2SV_ModStart>,0
539,<S2SV_ModStart> ; int ret ; if ( count > sizeof ( buf ) ) return - EINVAL ;,0
540,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> len_null> static <S2SV_ModStart> 2SV_null> 0 ; size_t len = 1 ; size_t len <S2SV_ModEnd> ( ( ( <S2SV_ModStart> ) ) ) ; if ( len < 2 ) { size_t ) { size_t ; <S2SV_ModStart> ) ) ; } else if ( len < 1 ) { size_t ) { <S2SV_ModEnd> = '\\0' ; <S2SV_ModStart> ) ) ; } },0
541,<S2SV_ModStart> ( 0 ) <S2SV_ModEnd> ) ; return,0
542,<S2SV_ModStart> len ) { struct ipv6_txoptions * opt_to_free = NULL ; <S2SV_ModStart> ( opt ) ; opt = opt_free ;,0
543,<S2SV_ModStart> ( skb ) <S2SV_ModEnd> ; if (,0
544,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
545,<S2SV_ModStart> goto errout ; if (! err ) goto err ;,0
546,"<S2SV_ModStart> { if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
547,<S2SV_ModStart> = seq ; tp -> copied_seq ;,0
548,<S2SV_ModStart> ; if (,0
549,,0
550,<S2SV_ModStart> ( zByte ),0
551,<S2SV_ModStart> inode ) { <S2SV_ModEnd> return 0 ;,0
552,"<S2SV_ModStart> expr_ty returns, string type_comment, <S2SV_ModStart> return NULL ; p -> v. type_comment = type_comment",0
553,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
554,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ),1
555,,0
556,"<S2SV_ModStart> int error ; memset ( s, sizeof ( s ) ) ;",0
557,<S2SV_ModStart> ] = 0 <S2SV_ModEnd> ; if (,0
558,"<S2SV_ModStart> final_p, final ; struct ipv6_txoptions * opt <S2SV_ModStart> ) ; rcu_read_unlock ( ) ; <S2SV_ModStart> ) ; } rcu_unlock ( ) ;",0
559,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
560,"<S2SV_ModStart>, sizeof ( double <S2SV_ModEnd> ) ) ;",0
561,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null,0
562,"<S2SV_ModStart> int result = RLC_ERR ; bn_t t ; bn_zero ( t ) ; bn_zero ( m ) ; bn_zero ( m ) ; bn_zero ( m ) ; bn_zero ( m ) ; bn_zero ( m ) ; bn_zero ( m ) ; bn_zero ( t ) ; bn_zero ( t ) ; bn_zero ( m, m ) ; bn_zero ( m, m, m, m, m ) ; bn_zero ( m ) ; bn_zero ( m, m ) ; bn_zero ( m ) ; bn_zero ( m ) ; bn_zero ( m ) ; }",0
563,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
564,<S2SV_ModStart> { rq = <S2SV_ModEnd> hctx -> tags <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; if (,0
565,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
566,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
567,<S2SV_ModStart> { token ++ ; } if (!,0
568,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> cm -> <S2SV_ModStart> 0 ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> 0 ) ; memset <S2SV_ModEnd> ( xd ->,0
569,"<S2SV_ModStart> NULL, retval <S2SV_ModEnd> ) ; }",0
570,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; break ; }",0
571,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> len ) ),0
572,<S2SV_ModStart> ; ps_dec -> ps_dec,0
573,"<S2SV_ModStart> int mptctl_ioctl_ioctl_ioctl_info ( MPT_ADAPTER * ioc, <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; if ( <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } dctlprintk",0
574,,0
575,"<S2SV_ModStart> ) AcquireQuantumMemory ( image, sizeof ( image ) ) ;",0
576,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
577,<S2SV_ModStart> ) ; } else { <S2SV_ModStart> } } } },0
578,"<S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size, 2 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size, buf_size, buf_size, 2 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; if ( CHECKOVERFLOW ( o + o + o, buf_size, buf_size, buf_size, buf_size, buf_size, 2 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; if ( o + o + o + o + o + o + o + o <S2SV_ModEnd> ) { exif_log",0
579,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> char * s,0
580,<S2SV_ModStart> dir * dir <S2SV_ModEnd> ; char * <S2SV_ModStart> 0 ; } <S2SV_ModEnd> if (!,0
581,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
582,<S2SV_ModStart> = 0 ; if ( i == i ) return 0 ;,0
583,,0
584,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [",0
585,<S2SV_ModStart> void ) { <S2SV_ModEnd> return NULL ;,0
586,"<S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT5 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT5_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT5 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT5 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT5 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT5 <S2SV_ModEnd> ) ) ;",0
587,<S2SV_ModStart> ) AcquireQuantumMemory ( image ) ;,0
588,<S2SV_ModStart> ; if ( <S2SV_ModEnd> socket == 0,0
589,<S2SV_ModStart> size ) { <S2SV_ModEnd> } <S2SV_null>,0
590,"<S2SV_ModStart> * out, <S2SV_ModEnd> const char * <S2SV_ModStart> * ptr, <S2SV_ModEnd> ; if ( <S2SV_ModStart> + 1 ) { if ( len == '\\n' ) { if ( len == '\\n' ) return 0 ; } <S2SV_ModEnd> return 0 ; <S2SV_ModStart> + 1 ; <S2SV_ModEnd> } if ( <S2SV_ModStart> == '\\0' ) { <S2SV_ModEnd> return 0 ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> return 0 ; <S2SV_ModStart> } } <S2SV_ModEnd> } while (",0
591,"<S2SV_ModStart> int tagval, uint32 <S2SV_ModEnd> * length )",1
592,<S2SV_ModStart> = 0 ; if ( unlikely ( sk ) ) return 0 ;,0
593,"<S2SV_ModStart> y ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f"", w ) ;",0
594,<S2SV_ModStart> * io ; <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
595,<S2SV_ModStart> ; int ret = 0 <S2SV_ModEnd> ; ret =,0
596,<S2SV_ModStart> ; if ( key_name == KRB5_S2SV_null>,0
597,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> <S2SV_null> <S2SV_null>",0
598,<S2SV_ModStart> ) ; } mutex_lock ( & batch ) ;,0
599,"<S2SV_ModStart>, int ret, flags <S2SV_ModEnd> ) { if",0
600,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
601,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
602,<S2SV_ModStart> ) ; } else if ( buf ) free ( buf ) ;,0
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> char * cp <S2SV_ModStart> = 0 ; if ( cp ++ ; if ( cp ++ ) return 0 ; <S2SV_ModStart> * cp ++ ; if ( cp ++ ) * cp ++ = * cp ++ ; if ( cp ++ > 0 ) { * cp ++ ; } <S2SV_ModStart> = cp ++ ; if ( cp ++ ; cp ++ ; if ( cp ++ ) { if ( cp ++ ] == '\\0' ) cp ++ ; cp ++ ; cp ++ ; if ( cp ++ ) { * cp ++ ; cp ++ = cp ++ ; cp ++ ; cp ++ ; } <S2SV_ModStart> = cp ++ ; if ( cp ++ ) { if ( cp ++ ] == '\\0' ) { if ( cp ++ ] == '\\0' ) { int ) cp ++ ; cp ++ ; cp ++ ; cp ++ = cp ++ ; cp ++ ; cp ++ ; } <S2SV_ModEnd> } if ( <S2SV_ModStart> = cp ++ ; if ( cp ++ ] == '\\0' ) { * cp ++ ; cp ++ ; if ( cp ++ ] == '\\0' ) cp ++ ; cp ++ = cp ++ ; cp ++ ; cp ++ ; } <S2SV_ModStart> ( cp ++ ; if ( cp ++ ] == '\\0',0
604,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
605,"<S2SV_ModStart> * pix, * pixp, * pixsize, <S2SV_ModStart> ) ) { if ( pixCount!= 0 ) return ( NULL ) ; }",0
606,"<S2SV_ModStart> -> v_mv ; memset <S2SV_ModEnd> ( cpi,",0
607,"<S2SV_ModStart> skb ) ; strncpy <S2SV_ModEnd> ( skb,",0
608,<S2SV_ModStart> int idx ; unsigned int count ; <S2SV_ModStart> -> count ; count = kcontrol -> count ; <S2SV_ModStart> ; idx < <S2SV_ModEnd> count ; idx,1
609,<S2SV_ModStart> int size ; size_t <S2SV_ModEnd> size = 0,0
610,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) ; return 0 <S2SV_ModEnd> ; } <S2SV_null>,0
611,,0
612,"<S2SV_ModStart> ( interface, 0,",0
613,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
614,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
615,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
616,<S2SV_ModStart> } else { if (,0
617,<S2SV_ModStart> ; ei -> i_inode = NULL ; ei ->,0
618,<S2SV_ModStart>,0
619,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
620,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> data ) { struct vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; } vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
621,<S2SV_ModStart> ] ) { <S2SV_ModEnd> return ; },0
622,"<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( p,",0
623,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
624,<S2SV_ModStart> ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,0
625,"<S2SV_ModStart> { uint8_t status ; uint8_t status ; uint8_t status ; uint8_t status = 0 <S2SV_ModStart> ( interface, ENC624J600_RPT <S2SV_ModEnd>, ENC624J600_ESTAT ) <S2SV_ModStart> ( interface, ENC624J600_R600_ESTAT )!= 0 <S2SV_ModStart> ( interface, ENC624J600_RPT <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_R600_RPT <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ( interface, ENC624J600_ERXEN | ENC624J600_ERXEN | ENC624J600_RPTL <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_RPTL <S2SV_ModEnd> ) ; status <S2SV_ModStart> ( interface, ENC624J600_RPTL <S2SV_ModEnd> ) ; }",0
626,<S2SV_ModStart> ] == 0x01 && i < gemsafe_cert_max,1
627,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
628,"<S2SV_ModStart> int scanned_document ( int argc, VALUE * argc, VALUE * argc, VALUE klass ) { VALUE parse_options ; VALUE parse_options ; VALUE scanned_args = 0 ; int scanned_args = 0 ; int scanned_args = 0 ; int scanned_args = 0 ; <S2SV_ModStart> ) ; if ( scanned_options == 0 ) { parse_options = rb_intern ( rb_options, & parse_options, & parse_options, rb_options ) ; if ( scanned_args == 0 ) { parse_options = rb_intern ( rb_options, rb_options, rb_options, rb_intern ( ""ParseOptions"" ), rb_intern ( ""ParseOptions"" ) ) ; }",0
629,"<S2SV_ModStart> ( config_opt, <S2SV_ModEnd> ) ; }",0
630,<S2SV_ModStart> ; out += 4 <S2SV_ModEnd> ; out +=,0
631,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
632,<S2SV_ModStart> out ; } if ( err == NULL ) return - EINVAL ;,0
633,<S2SV_ModStart> (! event -> event <S2SV_ModEnd> ) ; mutex_lock,0
634,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> S2SV_null> int len <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { if ( len <S2SV_null>,0
635,<S2SV_ModStart> = - 1 <S2SV_ModEnd> ) ; },0
636,"<S2SV_ModStart> ( interface, KSZ8851_RDF <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_RXIF <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_RSV_null> < 0 <S2SV_ModEnd> ) { <S2SV_ModStart> ( interface, KSZ8851_S2SV_null>",0
637,,0
638,"<S2SV_ModStart> ) ; } memset ( mm, 0, 0, 0 ) ;",0
639,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
640,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits <S2SV_ModStart> ) ; } \\\n} <S2SV_ModEnd> Quantum index ; <S2SV_ModStart> ++ ) { next_pixel = MagickFalse ; displacement = 0 ; <S2SV_ModStart> -= MaxHashTable ; if ( k < 0 ) continue <S2SV_ModEnd> ; if (,0
641,<S2SV_ModStart> ) ) { return - 1 ; } <S2SV_ModEnd> } if (,0
642,<S2SV_ModStart> col ++ ; <S2SV_ModEnd> } else if,0
643,<S2SV_ModStart> len = 0 <S2SV_ModEnd> ; if (,0
644,<S2SV_ModStart> 2 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,1
645,,0
646,<S2SV_ModStart> ; length =,0
647,<S2SV_ModStart> goto out ; <S2SV_ModEnd> if ( flags,0
648,"<S2SV_ModStart> ( plane, plane <S2SV_ModEnd> ) {",0
649,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const tile, MACROBLOCKD * const tile, MACROBLOCKD * const tile, <S2SV_ModStart> mi_col ) { MACROBLOCKD * const tile = & cpi -> mi_row, x <S2SV_ModStart> mi_row, x <S2SV_ModEnd>, mi_row, <S2SV_ModStart> -> mbmi_col ) ; <S2SV_ModEnd> if ( cpi",0
650,<S2SV_ModStart> ; return NULL <S2SV_ModEnd> ; } if,0
651,"<S2SV_ModStart> NULL ) { status = SetImageExtent ( image, image -> rows, image -> rows ) ; break ; }",0
652,"<S2SV_ModStart> ; pMap = malloc ( <S2SV_ModEnd>, sizeof (",0
653,<S2SV_ModStart> break ; } <S2SV_ModEnd> return fa ;,0
654,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( flags &,0
655,"<S2SV_ModStart>, sizeof ( double <S2SV_ModEnd> ) ) ;",1
656,<S2SV_ModStart> ( ) { <S2SV_ModEnd> return 0 ;,0
657,"<S2SV_ModStart> u_char * tptr, u_int length <S2SV_ModStart> len, length <S2SV_ModEnd> ) { if",0
658,"<S2SV_ModStart> -> outputbuffer, resbuffer <S2SV_ModEnd> ) ; if",0
659,"<S2SV_ModStart> src ) { memcpy <S2SV_ModEnd> ( src,",0
660,<S2SV_ModStart> ; if ( len < 4 ) { return false ; },0
661,<S2SV_ModStart> - sizeof ( ddev ) <S2SV_ModEnd> ; if (,0
662,"<S2SV_ModStart> = 0 ; memset ( info, 0, sizeof ( info ) ) ;",0
663,"<S2SV_ModStart>. size, 0 <S2SV_ModEnd>, 0,",0
664,<S2SV_ModStart> priv_flags &= ~ ( IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; dev ->,0
665,<S2SV_ModStart> ; memset <S2SV_ModEnd> ( xd ->,0
666,"<S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> ) ; }",0
667,<S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd> ) ; char <S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd> ) ; },0
668,<S2SV_ModStart>,0
669,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * cpi = cpi -> common ; VP9_COMMON * const VP9_COMMON * const VP9_COMMON * cpi = & cpi -> common ; VP9_COMMON * const VP9_COMMON * const VP9_COMMON * cpi = & cpi -> common ; const VP9_COMMON * cpi = & cpi -> common ; const VP9_COMMON * cpi = cpi -> vp9_enabled = cpi -> common ; if ( cpi -> frame_mode == KEY_FRAME ) { <S2SV_ModStart> ; sf -> <S2SV_ModEnd> sse = cpi <S2SV_ModStart> ; sf -> <S2SV_ModEnd> ; sf -> <S2SV_ModStart> = cpi -> <S2SV_ModEnd> ; sf -> <S2SV_ModEnd> ; sf -> <S2SV_ModStart> ; sf -> <S2SV_ModEnd> = 1 ; if CONFIG_VP9_HIGHBITDEPTH sf -> <S2SV_ModEnd> sf -> <S2SV_ModStart> ; sf -> <S2SV_ModEnd> sse = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> = 1 ; if CONFIG_VP9_HIGHBITDEPTH sf -> <S2SV_ModEnd> sf -> <S2SV_ModStart> ; sf -> <S2SV_ModEnd> sf -> <S2SV_ModEnd> sf -> <S2SV_ModStart> ; sf -> <S2SV_ModEnd> = 1 ; } else if CONFIG_VP9_VP9_,0
670,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
671,,0
672,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
673,,0
674,,0
675,<S2SV_ModStart> ( ) { <S2SV_ModEnd> return 0 ;,0
676,"<S2SV_ModStart> ; MB_MODE <S2SV_ModEnd> ( mvs, <S2SV_ModStart> ( mvs, ""%s\\n"" <S2SV_ModEnd> ) ) ;",0
677,<S2SV_ModStart> ; size_t i <S2SV_ModEnd> ; if (,0
678,,1
679,"<S2SV_ModStart> -> pmysql, false",0
680,<S2SV_ModStart> = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> & size ) ) <S2SV_ModStart> = size ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> & size ) ),0
681,<S2SV_ModStart> ) ; struct eth_hdr * phdr = NULL <S2SV_ModStart> ; if ( eth_len < 4 ) { break ; } phdr_len = NULL ; break ; } phdr,0
682,<S2SV_ModStart> == NULL ),0
683,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nsc_encode ( NSC_CONTEXT <S2SV_ModStart> ; UINT32 i ++ ; if (! context ) return FALSE ;,0
684,<S2SV_ModStart> ; return - EINVAL <S2SV_ModEnd> ; } else,0
685,,0
686,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_read_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> r ) { const vpx_read_read_read <S2SV_ModEnd> ( r, <S2SV_ModStart> ) ; const vpx_read_read <S2SV_ModEnd> ( r,",0
687,"<S2SV_ModStart> : # line 113 <S2SV_ModEnd> ""grammar.y"" { yr_re_grammar.re_grammar.y"" { yr_grammar.re_grammar.re_grammar.y"" break ; } # line 104 ""grammar.c"" { yr_grammar.y"" { yr_re_grammar.y"" { yr_grammar.y"" { yr_grammar.y"" { yr_grammar.y"" { yr_grammar.c"" break ; } # line 104 ""grammar.y"" { yr_grammar.y"" break ; } # line 104 ""re_grammar.c"" { yr_grammar.c"" break ; } # line 104 ""grammar.c"" break ; } # line 104 ""grammar.y"" { yr_grammar.c"" break ; } <S2SV_ModStart> : # line 104 ""grammar.c"" { yr_grammar.y"" { yr_grammar.y"" { yr_grammar.y"" break ; } <S2SV_ModStart> : # line 104 ""grammar.y"" { yr_grammar.y"" { yr_grammar.y"" break ; } # line 104 ""re_grammar.y"" { yr_grammar.y"" { yr_grammar.y"" break ; } <S2SV_ModStart> :",0
688,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
689,,0
690,<S2SV_ModStart> { if ( (,0
691,"<S2SV_ModStart> service_info, fmode <S2SV_ModEnd> ) ; }",0
692,<S2SV_ModStart> ) { return NULL ; },0
693,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
694,<S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg ) ),0
695,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, 0 )",0
696,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
697,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
698,<S2SV_ModStart> mq_rq ) { <S2SV_ModEnd> spin_lock ( &,0
699,"<S2SV_ModStart> s ) { struct stream packet = * s ; <S2SV_ModStart>, & packet ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_error(), <S2SV_blank> overrun"", & packet ) ; }",0
700,,0
701,<S2SV_ModStart> _stride ) { <S2SV_ModEnd> char buffer [ <S2SV_ModStart> ] ; } _y4m -> chroma,0
702,"<S2SV_ModStart> ( buf, 0 <S2SV_ModEnd> ) ; if",0
703,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> if ( table_table_table_table ( table_table_table ( table_start <S2SV_ModStart> ) ) return FALSE ; if (! file_table_table_table_table_table_table ( sBlk. sBlk. sBlk. sBlk. table_table ) ) return FALSE ; if (! file_table ) return FALSE ) return FALSE <S2SV_ModEnd> return FALSE ; <S2SV_ModStart> return FALSE ; <S2SV_ModEnd> } if (,0
704,<S2SV_ModStart> env ) { <S2SV_ModEnd> if ( env,0
705,"<S2SV_ModStart> ) { memset <S2SV_ModEnd> ( seg -> <S2SV_ModStart> ) ; } memset <S2SV_ModEnd> ( seg,",0
706,<S2SV_ModStart> _type_type_type_type ; if ( & Py_type_type_type_type_type_type_type_type_type = type_type_type_type_type_type ; if ( type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_t * ) ; if (! type_type_type_type_type_type_type_type_type_type ) return 0 ; if (! type_type_type_type_type_type_type_type_type_type_type_type_type ) return 0 ; if (! type_type_type_type ) return 0 ; if (! type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type_type <S2SV_ModEnd> ) ; <S2SV_ModStart> { if (! PyId_type_type_type_type_type_type_type_type_type_type_type_,0
707,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ), 0 )",0
708,<S2SV_ModStart> ; if ( context -> height > 8 ) break ; case 4 : context -> <S2SV_ModStart> break ; case 4 : context -> curY = i -> curY ; case 4 : context -> curY = i -> curY ; case 8 : context -> curY = i -> curY ; break ; case 4 : context -> curY = i -> curY ; break ; case 4 : context -> curY = i -> curY = i -> height ; break ; case 4 : context -> curY = i -> curY = context -> curY ; break ; case 4 : context -> curY = context -> curY = i -> curY ; case 4 : context -> curY = i -> curY = i -> curY ; break ; break ; case 4 : context -> curY = context -> curY ; break ; case 4 : context -> curY = context -> curY = i -> curY ; case 4 : context -> curY = context -> curY = context -> curY ; break ; case 4 : context -> curY = context -> curY = context -> curY ; break ; } if ( context -> curY > context -> curY ) break ; break ; context -> curY = context -> curY,0
709,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
710,<S2SV_ModStart> = - 1 <S2SV_ModEnd> ; if (,0
711,"<S2SV_ModStart> char * outputbuffer <S2SV_ModEnd> = 0 ; <S2SV_ModStart> ( outbuf, ""\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n"" <S2SV_ModEnd>, * <S2SV_ModStart> ) ) { const char * outbuffer <S2SV_ModEnd> = outputbuffer [ 0 <S2SV_ModStart> char * outbuffer ) ; if ( outbuffer == 0 ) return - 1 ; if ( outbuffer == 0 ) { outputbuffer [ 0 ] == 0 ] ) { outbuffer [ 0 ] = - 1 ; } if ( outbuffer == 0 ) { outbuffer [ 0 ] = outputbuffer [ 0 ] + 1 ] ; outbuf [ 0 ] = 0 ] ; outbuffer [ 0 ] = outputbuffer [ 0 ] ; char * out ; if ( outbuffer == 0 ] == 0 ] == 0 ) { outbuffer [ 0 ] = 0 ; outbuf ; outbuffer [ 0 ] = 0 ; if ( outbuffer [ 0 ] == 0 ] == 0 ] == 0 ) { outbuffer [ 0 ] = 0 ; } <S2SV_ModStart> ( outbuf <S2SV_ModEnd> ; }",0
712,<S2SV_ModStart> struct u32 id ; if (! net -> ipv4. ip_key <S2SV_ModEnd> ) ) {,0
713,"<S2SV_ModStart> ; if ( lookup_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_t i, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( tmp ) ; } if ( lookup_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_id <S2SV_ModEnd> ) ) <",0
714,"<S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w,",0
715,<S2SV_ModStart> )!= 0,0
716,<S2SV_ModStart> - EINVAL ; if ( err -> dnode -> dnode -> dnode ) { err = - EINVAL ; goto err ; } <S2SV_ModStart> ) ) { err = - EINVAL ; goto err ; },0
717,,0
718,<S2SV_ModStart> ; g_string = g_string ( <S2SV_ModEnd> ) ; if,0
719,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int16_t tile_col ; memset <S2SV_ModEnd> ( * <S2SV_ModStart>, 0, <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ; memset <S2SV_ModEnd> ( pbi <S2SV_ModStart> ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart>, 0, 0, 0, 0 ) ; memset <S2SV_ModEnd> ( pbi",0
720,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static VP9EncoderConfig <S2SV_ModEnd> * const cm <S2SV_ModStart> cm -> common ; const VP9_COMMON * const cm = & cm -> common ; vpx_read_decode = cm -> common ; vpx_read <S2SV_ModEnd> ( cm -> <S2SV_ModStart> cm ) ; vpx_free ( cm ) ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( cm -> frame_size == NULL ) { vpx_free ( cm ) ; vpx_free ( cm ) ; vpx_free ( cm ) ; vpx_error ( cm ) ; vpx_free ( cm ) ; vpx_read <S2SV_ModEnd> ( cm ->,0
721,<S2SV_ModStart> ) ) { GF_LOG_WARNING <S2SV_ModEnd> ( s ) <S2SV_ModStart> ) ; } <S2SV_ModEnd> } if (,0
722,<S2SV_ModStart> * opt ; struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt ) { if ( opt -> opt. <S2SV_ModStart> ) return ; } <S2SV_ModEnd> if ( opt,0
723,"<S2SV_ModStart> * tree, vpx_tree_index <S2SV_ModEnd> * tree,",0
724,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
725,"<S2SV_ModStart>, & len, 0",1
726,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
727,"<S2SV_ModStart> * oxcf, <S2SV_ModEnd> * oxcf )",0
728,<S2SV_ModStart> char buf [ MIF_MAGICLEN <S2SV_ModEnd> ] ; if,0
729,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static MACROBLOCK * const VP9_COMMON * const cm, MACROBLOCK * const x, MACROBLOCK * const x, MACROBLOCK * const x, MACROBLOCK * const x, <S2SV_ModStart> mi_SIZE bsize, MACROBLOCK * const x <S2SV_ModEnd> mi_SIZE bsize, <S2SV_ModStart> -> oxcf ; MACROBLOCKD * const <S2SV_ModStart> -> oxcf ; MACROBLOCKD * const <S2SV_ModStart> -> oxcf = & x <S2SV_ModEnd> -> oxcf <S2SV_ModStart> ; x -> <S2SV_ModEnd> ; x ->",0
730,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
731,"<S2SV_ModStart> ) { uint32_t value = 0 <S2SV_ModStart> ; if ( length < 0 ) { return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ) ) { if ( value == 0 ) { av_log_log_log ( ctx, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> (%d\\n"", 0 ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ; } if ( <S2SV_ModStart> ) ) { av_log ( ctx, 0 ) ; return AVERROR_INVALIDDATA ;",0
732,<S2SV_ModStart> case EXIT_FAILURE :,0
733,<S2SV_ModStart> } else { <S2SV_ModEnd> } else { <S2SV_ModStart> } else { <S2SV_ModEnd> } else { <S2SV_ModStart> } else { <S2SV_ModEnd> } else { <S2SV_ModStart> } else { <S2SV_ModEnd> } else { <S2SV_ModStart> } else { <S2SV_ModEnd> } else { <S2SV_ModStart> } else { char,0
734,<S2SV_ModStart>,0
735,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
736,<S2SV_ModStart> ( r ) <S2SV_ModEnd> return 0 ;,0
737,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> x ), exception ) <S2SV_ModEnd> ; return",0
738,<S2SV_ModStart> ( skb ) <S2SV_ModEnd> ; if (,0
739,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL )",0
740,<S2SV_ModStart> y ) { sprintf ( outputbuffer ) ;,0
741,<S2SV_ModStart> cfg ) { struct file * file = NULL ; int file = - 1 ; int file = - 1 ; <S2SV_ModStart> } else { file = - 1 ; if ( file == - 1 ) fclose ( file ) ; <S2SV_ModStart> } else { file = - 1 ; if ( file!= - 1 ) { fd = - 1 ; if ( file == - 1 ) { fd = - 1 ; } } <S2SV_ModStart> { file = - 1 ; if ( file!= - 1 ) fclose ( file ) ; <S2SV_ModStart> } } } },0
742,"<S2SV_ModStart> 0 ) { sprintf ( outputbuffer <S2SV_ModEnd>, 0, <S2SV_ModStart> ) ) ; }",0
743,<S2SV_ModStart> return FALSE ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
744,<S2SV_ModStart> ) ) ; if <S2SV_ModEnd> ( cpi ->,0
745,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ;,0
746,"<S2SV_ModStart> * data ; struct stream packet = * s ; <S2SV_ModStart> ; if (! s_check_rem ( s, length ) ) { if (",0
747,,0
748,<S2SV_ModStart>,0
749,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
750,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
751,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
752,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
753,"<S2SV_ModStart> cpi, const vpx_prob <S2SV_ModEnd> * coeff_probs )",0
754,<S2SV_ModStart> char * name <S2SV_ModEnd> ; r =,0
755,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> = 0x0 ; struct <S2SV_ModStart> [ 0 ] ; state -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> ] ; state -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart> ) ; state -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart> ""command <S2SV_blank> 0x0x0x0x0x0x0x0x0x0x0x0 ) ; state -> data <S2SV_ModEnd> [ 1 ] <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> 0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0 ; state -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; state -> data <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> ( d, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 3, state -> data",0
756,"<S2SV_ModStart> ( ctx, vpx_codec_alg_t * ctx <S2SV_ModEnd>, cfg )",0
757,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
758,"<S2SV_ModStart> ( bufp, TRUE",0
759,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
760,<S2SV_ModStart> break ; } <S2SV_ModEnd> if ( task,0
761,"<S2SV_ModStart>, n ) ; if ( w == NULL ) return 0",1
762,<S2SV_ModStart> int j ; size_t <S2SV_ModEnd> j ++ ;,0
763,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> VP9_COMMON * <S2SV_ModStart> int i ; uint8_t tile_rows = 0 <S2SV_ModStart> ) ) { int i ; int i ; int i ; int i = 0 ; <S2SV_ModStart> ) ) { int i ; int i ; int i = 0 ; <S2SV_ModStart> ) ) { if ( cm -> tile_worker_rows < pbi -> tile_rows ) { assert ( cm -> tile_worker_rows - 1 ) ; ++ ) { <S2SV_ModEnd> VP9_ERROR ( <S2SV_ModStart> ) ) ; } <S2SV_ModStart> ) ) { if ( cm -> tile_rows < pbi -> tile_workers && cm -> tile_worker_rows - 1 ) { if ( cm -> tile_rows - 1 ) { vp9_init ( cm -> tile_workers, & cm -> tile_workers, 0 ) ; } } <S2SV_ModStart> ) ) { vp9_init ( pbi -> tile_worker_workers, & cm -> tile_workers, 0 ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> ( pbi -> tile_worker_workers <S2SV_null>",0
764,<S2SV_ModStart> = 0 ; # ifdef LIBRAW_LIBRARY_LIBRARY_LIBRARY_LIBRARY_ERR ( <S2SV_ModStart> ) ) ; # ifdef LIBRAW_LIBRARY_LIBRARY_ERROR ),0
765,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> vpx_reader <S2SV_ModEnd> ( seg, <S2SV_ModStart> int i, vpx_prob <S2SV_ModEnd> ) { int i <S2SV_ModStart> i ] ; vpx_prob <S2SV_ModEnd> ( segindex, <S2SV_ModStart> i ] ; vpx_prob <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ) ; vpx_prob <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ; } vpx_prob <S2SV_ModEnd> ( seg,",0
766,<S2SV_ModStart> ( ctx -> error <S2SV_ModEnd> == NULL ),0
767,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
768,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
769,<S2SV_ModStart> -> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock,0
770,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len ) ),0
771,<S2SV_ModStart> < 0 ) <S2SV_ModEnd> return 0 ;,0
772,<S2SV_ModStart> L ) ; g -> gcstate = g -> gcstate ;,0
773,<S2SV_ModStart> ; return - EIO <S2SV_ModEnd> ; } if,0
774,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> NULL ) { struct ssl_error ( c -> ssl_options_t ) ; <S2SV_ModStart> ) ; } if (! SSL_WRITE_WRITE_ERR ( c -> ssl_socket ) ) { if (! SSL_WRITE ) return NULL ; },0
775,<S2SV_ModStart> struct int rc ; struct cib_connection * conn = NULL <S2SV_ModStart> ; int conn = NULL <S2SV_ModEnd> ; int rc <S2SV_ModStart> cib -> remote_connection = NULL <S2SV_ModEnd> ; cib_connection = <S2SV_ModStart> = NULL ; <S2SV_ModEnd> if (! conn <S2SV_ModStart> ) { cib_free <S2SV_ModStart> ) ; } } <S2SV_ModEnd> if (!,0
776,<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi ->,0
777,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
778,<S2SV_ModStart> ) ) ; ND_TCHECK ( bp [ 0 ] ) ;,0
779,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
780,"<S2SV_ModStart> int mptctl_ADAPTER * ioc, <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; if ( <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } dctlprintk",0
781,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
782,,0
783,<S2SV_ModStart> str ) ; if ( len < 0 ) return ;,0
784,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_read_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> int r, vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> ) ; return vpx_read_literal <S2SV_ModEnd> ( r,",0
785,"<S2SV_ModStart> * probs, vpx_prob <S2SV_ModEnd> * probs,",0
786,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> { if ( vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> ) ++ counts = vpx_read <S2SV_ModEnd> ( r,",0
787,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) { int res = 1 ; # if CONFIG_VP9_HIGHBITDEPTH int res = 1 ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH res = 1 ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH res = 1 ; },0
788,<S2SV_ModStart> ndo_opt ) ; ND_TCHECK ( cp ) ;,0
789,<S2SV_ModStart> ->,0
790,"<S2SV_ModStart> ), ret = - 1 <S2SV_ModStart> ), ret <S2SV_ModEnd> ) ; if",0
791,<S2SV_ModStart> -> len < <S2SV_ModEnd> skb -> len,0
792,<S2SV_ModStart> ) break ; break,0
793,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> if (!,0
794,"<S2SV_ModStart> -> cac_id, FALSE",0
795,<S2SV_ModStart> ; # endif tok ->,0
796,,0
797,<S2SV_ModStart> ) { GF_LOG_LOG_ERROR <S2SV_ModEnd> ( s ),0
798,<S2SV_ModStart> ; buff [ 512 <S2SV_ModEnd> ] = '\\0',0
799,<S2SV_ModStart> = 0 ; dpb -> size = 0 ;,0
800,<S2SV_ModStart> ; if ( addrlen_in > OE_SSIZE_MAX <S2SV_ModStart> )!= OE_RAISE_ERRNO ( OE_EINVAL ) ; if (! addrlen_in ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
801,,1
802,"<S2SV_ModStart> FALSE ; } if (! <S2SV_ModStart>, s ) ) return FALSE",1
803,<S2SV_ModStart> ) ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt <S2SV_ModStart> ) ) ; opt = rcu_unlock ( ) ; <S2SV_ModStart> ( opt ) ; rcu_unlock ( ) ;,0
804,"<S2SV_ModStart> uint32_t * fsize, uint32_t <S2SV_ModEnd> ; uint32_t <S2SV_ModStart> ; uint32_t max_size ; uint32_t max_size <S2SV_ModEnd> ; uint32_t <S2SV_ModStart> = 0, <S2SV_ModEnd> ; uint32_t max_size <S2SV_ModEnd> ; uint32_t <S2SV_ModStart> = 0, <S2SV_ModEnd> ; if (",0
805,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> if ( DM9000WriteReg ( DM9000WriteReg ( DM9000ReadReg ( DM9000_E <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ) ; dm9000WriteReg ( DM9000WriteReg ( DM9000_E <S2SV_ModEnd> ) ; dm9000WriteReg <S2SV_ModStart> ( DM9000ReadReg ( DM9000_E, DM9000_E <S2SV_ModEnd> ) ; dm9000WriteReg <S2SV_ModStart> ) ; dm9000WriteReg ( DM9000_E <S2SV_ModEnd> ) ; }",0
806,"<S2SV_ModStart>, buffer, t2p -> tiff_datasize,",1
807,"<S2SV_ModStart> child, new_parent <S2SV_ModEnd> ) ; }",0
808,<S2SV_ModStart> ; if ( <S2SV_ModEnd> cib -> command,0
809,<S2SV_ModStart> address = 0 <S2SV_ModEnd> ; if (,0
810,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
811,<S2SV_ModStart> ; if ( <S2SV_ModEnd> file -> flags,0
812,<S2SV_ModStart> } },0
813,<S2SV_ModStart> -> msg_sys <S2SV_ModEnd> ; if (,0
814,"<S2SV_ModStart> size_t number_planes, number_filled <S2SV_ModEnd> ) ; number_planes_planes_filled <S2SV_ModStart> ( number_planes, number_planes, number_filled <S2SV_ModEnd> ) ) { number_planes_planes_filled <S2SV_ModStart> ( number_planes, number_planes, number_planes_filled <S2SV_ModEnd> ) ; number_planes_planes_planes_filled <S2SV_ModStart> ( number_filled, number_planes_planes_filled <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( number_planes, number_planes_planes_filled <S2SV_ModEnd> ) ; }",0
815,<S2SV_ModStart> sshbuf_t r = 0,0
816,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
817,<S2SV_ModStart> client -> name <S2SV_ModEnd> ) { crm_unlock <S2SV_ModStart> ) ; },0
818,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV,0
