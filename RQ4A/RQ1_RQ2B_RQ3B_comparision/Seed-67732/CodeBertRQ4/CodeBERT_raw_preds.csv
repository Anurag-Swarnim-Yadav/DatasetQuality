,raw_predictions,correctly_predicted
0,<S2SV_ModStart> goto out ; <S2SV_ModEnd> return ret ;,0
1,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
2,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
3,,0
4,"<S2SV_ModStart> perf_data, <S2SV_ModEnd> struct perf_sample_data",0
5,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
6,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
7,,0
8,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> svc2S2SV_null> <S2SV_null> static int <S2SV_ModEnd> err_ratio_ratio_ratio_ratio_null> <S2SV_null>,0
9,,0
10,,0
11,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> s2S2SV_null> <S2SV_null> static <S2SV_ModStart> s2SV_null> static <S2SV_ModEnd> anch_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> s2SV_null> static <S2SV_ModStart> int64_null> static BOOL <S2SV_ModEnd> ; if ( <S2SV_ModStart> == NULL ) { return NULL ; } <S2SV_ModStart> = NULL ; } <S2SV_ModEnd> if (! <S2SV_ModStart> == NULL ) { <S2SV_ModEnd> if (! <S2SV_ModStart> == NULL ) { return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> == NULL ) { <S2SV_ModStart> == NULL ; } <S2SV_ModEnd> if (! <S2SV_ModStart> == NULL ) { <S2SV_ModEnd> if (! <S2SV_ModStart> == NULL ) { <S2SV_ModStart> == NULL ; } <S2SV_ModEnd> if (! <S2SV_ModStart> == NULL ) { <S2SV_ModEnd> if (! <S2SV_ModStart> == NULL ) { <S2SV_ModStart> == NULL ; } <S2SV_ModEnd> if (! <S2SV_ModStart> == NULL ) { <S2SV_ModEnd> if (! <S2SV_ModStart> == X86_X16X16BITS2SV_null>,0
12,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
13,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> keyring_keyring_keyring ( struct <S2SV_ModStart> keyring ) { if (! test_keyring_keyring_keyring_keyring &&! user_key_key_key_keyring ( keyring ) ) { if (! user_keyring_key_keyring ) goto out ; } if (! user_keyring_keyring_keyring_keyring_keyring_keyring_keyring &&! user_keyring_keyring_keyring_keyring_keyring_keyring_key ( keyring ) ) { return FALSE ; } if (! user_keyring_keyring_key_keyring_keyring_keyring_keyring_keyring ) goto out ; } if (! user_keyring_keyring_keyring_keyring_keyring_keyring_keyring_keyring_keyring ) { if (! user_keyring_keyring_keyring_keyring_keyring_keyring ) goto out ; if ( keyring_key_key_key_keyring_keyring_key_,0
14,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
15,,0
16,,0
17,,0
18,<S2SV_ModStart> ( inode -> i_inode <S2SV_ModEnd> ) ) { if,0
19,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> s ) ),0
20,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> null> <S2S2SV_null> <S2SV_null> static int <S2SV_ModEnd> i2SV_null> <S2SV_null>,0
21,<S2SV_ModStart> inode ) ; <S2SV_ModEnd> if ( inode,0
22,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flags &,0
23,<S2SV_ModStart> = line ; <S2SV_ModEnd> if (!,0
24,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
25,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ;,0
26,,0
27,<S2SV_ModStart> ( io ) ; <S2SV_ModEnd> if ( io,0
28,<S2SV_ModStart> ; if ( MagickFalse ) break ; if (,0
29,,0
30,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, sizeof (",0
31,,0
32,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
33,<S2SV_ModStart> NULL ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
34,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_BUFFER_ECON1, ENC28J60_ECON1 <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ERXST <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ERXST <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ERXST <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ERXST <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ERXST <S2SV_ModEnd>, MSB (",0
35,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,0
36,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
37,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> null> <S2S2SV_null> <S2SV_null> static int <S2SV_ModEnd> i2SV_null>,0
38,"<S2SV_ModStart> int error ; struct mb2_cache * mb2_entry <S2SV_ModEnd> * ext4_mb_cache = <S2SV_ModStart> int error ; struct mb2_cache = mb2_cache <S2SV_ModEnd> ( ext4_cache, <S2SV_ModStart> error ) ; <S2SV_ModEnd> } <SV_null>",0
39,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
40,<S2SV_ModStart> opt ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> opt.,0
41,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
42,<S2SV_ModStart> ) ) ; # endif,0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode",0
44,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
45,<S2SV_ModStart> ; if ( data_len < 0 ||,0
46,<S2SV_ModStart> return - EOPNOTSUPP ; struct ext4_len ; struct ext4_hdr * inode ; struct ext4_len ; struct ext4_attr_hdr * inode ; if (! ext4_len ) return - EINVAL ; if (! ( inode ) ) return - EINVAL ; <S2SV_ModEnd> if (!,0
47,<S2SV_ModStart> sec ) { <S2SV_ModEnd> rem ; return,0
48,<S2SV_ModStart> ; if (,0
49,"<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( addr,",0
50,<S2SV_ModStart> BLOCK_SIZE ) { size_t long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long long max_table_table. max_table. max_table. max_table. max_table. max_table. max_table. max_table. max_table. max_table. max_table. max_table. max_table. max_table. max_table. max_table. max_table. max_table. max_table. max_table. max_table. max_table. max_table. max_table. max_table. max_table. max_table. max_table. max_table. max_,0
51,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
52,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
53,<S2SV_ModStart> NULL ) ; <S2SV_ModEnd> } if (,0
54,,0
55,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
56,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> ; pixel_info =",0
57,<S2SV_ModStart> dev ) ; if (! bNumEndpoints ) return - ENODEV ;,0
58,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { fmode",0
59,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if (!,0
60,,0
61,<S2SV_ModStart> = - 1 <S2SV_ModEnd> ; if (,0
62,"<S2SV_ModStart> VP9_HIGHBITDEPTH if ( xd -> flags & YV12_FLAG_HIGHBITDEPTH ) { <S2SV_ModStart> i ] ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> flags & YV12_HIGHBITDEPTH ) { # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( xd -> flags & YV12_FLAG_HIGHBITDEPTH ) { vp9_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( xd -> flags & YV12_HIGHBITDEPTH ) { vp9_buffer ( xd -> flags & YV12_HIGHBITDEPTH ), cpi -> flags & YV12_HIGHBITDEPTH ) ; return NULL ; } # endif",0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,<S2SV_ModStart> ( inode ) ; <S2SV_ModEnd> if (!,0
65,<S2SV_ModStart> ; if ( osStrchr <S2SV_ModEnd> ( strlen (,0
66,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> i2S2SV_null> <S2SV_null> static <S2SV_ModStart> i2S2SV_null> static int <S2SV_ModEnd> i2SV_null> <S2SV_null>,0
67,,0
68,,0
69,"<S2SV_ModStart> ) ) ; if ( len < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } ND_PRINT ( ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ) ; ptr ++ ; <S2SV_ModStart> ) ) { ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",0
70,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
71,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
72,<S2SV_ModStart> ; msg -> msg_namelen = 0,0
73,<S2SV_ModStart> return ; memset <S2SV_ModEnd> ( cpi ->,0
74,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
75,,0
76,"<S2SV_ModStart>, n ; int n ; int n ; <S2SV_ModStart> is_async ) ; if ( n == 0 ) { n = CHILD ( n, n0 ) == 0 ) { n = CHILD ( CHILD ( n, ""async <S2SV_blank> is <S2SV_blank> is <S2SV_blank> is <S2SV_blank> is <S2SV_blank> async"" ), n0 ) ; if ( n0 ) == 0 ) { n = CHILD ( CHILD ( n, n, n, ""async"" ) ) ; if ( n0 ) == 0 ) { n = CHILD ( CHILD ( n, n, ""async\\n"" ) ) ; } else { n = CHILD ( n, n, n, n, n, n, 0 ) ) ; if ( n0 ) == 0 ) goto err_async = CHILD ( CHILD ( CHILD ( n, n, 0 ) ) ) ; if ( n0 ) goto err_async = CHILD ( CHILD ( CHILD ( n, ""async <S2SV_blank> is <S2SV_blank> is <S2SV_blank> is <S2SV_blank> is <S2SV_blank> is <S2SV_blank> is <S2SV_blank> async"" ), CHILD ( CHILD ( CHILD ( CHILD ( n, n, n, n, n, n, n,",0
77,,0
78,<S2SV_ModStart> <S2SV_null> <S2SV_null> static const VP9_COMMON * const VP9_COMMON * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const xd = xd -> mbmi ; const MACROBLOCKD * const MACROBLOCKD * const xd = xd -> mbmi ; const xd -> mi [ bw ] ; const xd = xd -> mbmi -> mbmi. mbmi. mbmi. mbmi. mbmi ; const PREDICTION_MODE <S2SV_ModEnd> mi <S2SV_ModStart> mbmi ) { const PREDICTION_MODE <S2SV_ModEnd> if ( xd <S2SV_ModStart> mbmi ) { const PREDICTION_MODE <S2SV_ModEnd> mode = xd <S2SV_ModStart> cm -> mbmi ; const xd <S2SV_ModStart> cm -> mbmi_ext = xd -> mi [ bw ] ; const PREDICTION_mode = xd -> mbmi -> mi [ mbmi -> mi [ bw ] ; const PREDICTION_mode ] ; const PREDICTION_mode = xd -> mi [ mi [ mi [,0
79,"<S2SV_ModStart>, n ; if ( n == 0 ) return ;",0
80,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
81,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
82,,0
83,,0
84,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
85,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,,0
89,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ;,0
90,,0
91,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
92,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
93,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
94,"<S2SV_ModStart> ) ) { memcpy <S2SV_ModEnd> ( dest,",0
95,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
96,<S2SV_ModStart> exit ; } m -> msg_namelen = 0 ;,0
97,,0
98,,0
99,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
100,<S2SV_ModStart> rc ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
101,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
102,<S2SV_ModStart> } if (! zfound && zfound == 0,0
103,,0
104,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static state <S2SV_ModStart> state state ) { int state = 0 ; <S2SV_ModStart> = 0 ; state -> state = 0 ; state -> state. state = 0 ; state -> state. state. state <S2SV_ModStart> == 0 ) { state = state -> state <S2SV_ModEnd> ; state <S2SV_ModStart> == 0 ) { state = state <S2SV_ModEnd> ; state <S2SV_ModStart> = state -> state <S2SV_ModEnd> ; state <S2SV_ModStart> = state -> state -> state <S2SV_ModStart> = state ) { state = state -> state <S2SV_ModEnd> ; state <S2SV_ModStart> = state -> state -> state <S2SV_ModEnd> ; state <S2SV_ModStart> = state -> state -> state <S2SV_ModEnd> ; state <S2SV_ModStart> = state -> state -> state -> state <S2SV_ModStart> state. state ) { state = state -> state <S2SV_ModEnd> ; state <S2SV_ModStart> = state -> state -> state <S2SV_ModStart> state. state ) ; state = state -> state <S2SV_ModEnd> ; state <S2SV_ModStart> state -> state = state <S2SV_ModEnd> ; state <S2SV_ModStart> state -> state <S2SV_ModStart> state ) { state = state <S2SV_ModStart> state ( state, state, state, state, state <S2SV_ModEnd> ) ; state <S2SV_ModStart> state -> state <S2SV_ModEnd> ) ; state",0
105,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) break ;",0
106,,0
107,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
108,,0
109,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; return",0
110,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
111,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
112,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
113,"<S2SV_ModStart> ( interface, ENC28J60_EIE <S2SV_ModEnd> ) ; }",0
114,<S2SV_ModStart> ; if ( unlikely (,0
115,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
116,<S2SV_ModStart> goto out ; <S2SV_ModEnd> if ( msg,0
117,,0
118,<S2SV_ModStart> dev ) ; <S2SV_ModEnd> if ( dev,0
119,,0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,<S2SV_ModStart> ) ) ; ND_TCHECK ( * tptr ) ;,0
122,<S2SV_ModStart> 1 ) ; if (! <S2SV_ModEnd> ) ) { ret,0
123,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
124,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
125,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
126,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
127,,0
128,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> s2SV_null> static <S2SV_ModStart> s2SV_null> <S2SV_null> static <S2SV_ModStart> s2SV_null> static tran_null> <S2SV_null> static tran_null> static <S2SV_ModStart> s2S2SV_null> static tran_null> <S2SV_null> static tran_null> ( tran_null>,0
129,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flags &,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
131,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
132,<S2SV_ModStart> } else { if (,0
133,<S2SV_ModStart> = 0 ; if ( ext4_inode -> i_sb ) return 0 ;,0
134,<S2SV_ModStart> = 0 ; size_t data_size = 0 ; size_t data_size = 0 ; <S2SV_ModStart> ; if ( data_size > OE_SSIZE_MAX ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_ERRNO ( OE_EINVAL ) ; return - EINVAL <S2SV_ModEnd> ; } if,0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
136,,0
137,"<S2SV_ModStart> data ) { u32 buf ; size = kmalloc ( size, GFP_KERNEL ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart> ret ) ; ret = <S2SV_ModEnd> - ENOMEM ;",0
138,,0
139,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
140,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
141,,0
142,"<S2SV_ModStart> = getnum ( L,",1
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
145,<S2SV_ModStart> if ( inode -> i_sb ) <S2SV_ModEnd> ; if (,0
146,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
147,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
148,,0
149,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lineno, & tmp ) < 0 ) { return 1 ; } if ( tmp == PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> field <S2SV_blank> \\"" ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> \\"" ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> from <S2SV_blank> \\"" ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, & PyExc_TypeError, ""\\"" ) ; return 1 ; } if ( tmp ) < 0 ) { PyErr_SetString ( tmp ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\"" <S2SV_blank> \\"" ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> from <S2SV_blank> from <S2SV_blank> from <S2SV_blank> from <S2SV_blank>",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ i,0
151,<S2SV_ModStart> -> msg_name ; <S2SV_ModEnd> if ( msg,0
152,"<S2SV_ModStart> = 0 ; uint32_t bsize = EXT4_BLOCK_SIZE * bsize ; uint8_t bsize = 0 ; uint8_t bsize = 0 ; uint8_t b_to_block ( bh, b_block, bsize, bh -> b_block, b_block, b_block, b_block, b_block, b_block <S2SV_ModEnd> ) ; int <S2SV_ModStart> = EXT4_BLOCK_SIZE ( b_BLOCK_SIZE, b_SIZE ) ; if (! bh ) goto out ;",0
153,"<S2SV_ModStart> ( input, ""%s"", regs <S2SV_ModEnd> ) ; return",0
154,,0
155,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
156,<S2SV_ModStart> msms_msci_ptr ) { <S2SV_ModEnd> msi ++ ;,0
157,"<S2SV_ModStart> { if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
158,<S2SV_ModStart> ; if ( value == NULL ) return ; if (,0
159,"<S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_ISR_ISR_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_ISR_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_ISR_ISR_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_ISR_ISR_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR_ISR_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & <S2SV_ModStart> ( status & KSZ8851_ISR_ISR_ISR, KSZ8851_ISR_ISR_ISR_ISR_ISR_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR, KSZ8851_ISR_ISR, KSZ8851_ISR_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_ISR, KSZ8851_ISR_IS",0
160,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
161,"<S2SV_ModStart> { if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
162,<S2SV_ModStart> ; if ( ( unsigned char ),0
163,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
164,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> x2S2SV_null> static MACROBLOCKD * const xd = xd -> mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_col, mi_row, mi_row, mi_col, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row ) ; if ( mi_row >= BLOCK_SIZE ) { if ( mi_row >= BLOCK_SIZE ) goto fail ; } } <S2SV_ModStart> ( bsize, mi_col, mi_row, mi_col, mi_col, mi_col, mi_col, mi_col, mi_row, mi <S2SV_ModEnd>",0
165,<S2SV_ModStart> ; ret = ret <S2SV_ModEnd> ; if (,0
166,<S2SV_ModStart> ) return ret <S2SV_ModEnd> ; } if (,0
167,<S2SV_ModStart> break ; } <S2SV_ModEnd> if (!,0
168,,0
169,"<S2SV_ModStart> & fl6, rcu_dereference (",0
170,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> i2S2SV_null> <S2SV_null> static <S2SV_ModStart> i ] ; if ( cpi -> log2SV_null> <S2SV_null>,0
171,,0
172,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> == NULL ) { const char * strlen ( * ) ; if (! strlen ( str ) ) return 0 ; <S2SV_ModStart> == '\\0' ; } if (! strlen ( * ) ) { <S2SV_ModStart> == '\\0' ) ; return 0 ; } <S2SV_ModStart> == '\\0' ; } if ( * end - 1 ) { <S2SV_ModStart> == '\\0' ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> == '\\0' ) { <S2SV_ModEnd> if (! <S2SV_ModStart> == '\\0' ) { <S2SV_ModStart> == '\\0' ) ; } return 0 ; } <S2SV_ModStart> == '\\0' ; } <S2SV_ModEnd> if (! <S2SV_ModStart> == '\\0' ) { <S2SV_ModStart> == '\\0' ) ; } return 0 ;,0
173,,0
174,,0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModEnd> ) dat ; if",0
176,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",1
177,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> ip2S2SV_null> static <S2SV_ModStart> int mi_row, MACROBLOCKD * xd, MACROBLOCKD * const xd, MACROBLOCKD * xd <S2SV_ModEnd>, BLOCKD * <S2SV_ModStart> MODE_INFO * const xd = xd -> mi_row <S2SV_ModEnd> ; BLOCKD * <S2SV_ModStart> MODE_INFO * const int mi_row, mi_row, mi_row, mi <S2SV_ModEnd>, mi_col, <S2SV_ModStart>, mi_row, mi <S2SV_ModEnd>, mi_row, <S2SV_ModStart>, mi_row, mi_row, mi <S2SV_ModEnd>, mi_row, <S2SV_ModStart>, mi_row, mi_row, mi_row, mi_col, mi_row, mi_row, mi_col, mi_row, mi_row, mi_col, mi_col, mi_row, mi_col, mi_col, mi_row, mi_col ) ; for ( i < 0 ; i = 0 ; i ++ i ++ i < 0 ; i ++ i ++ i ++ ) { if ( mi_row ++ ) {",0
178,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } if (,0
179,<S2SV_ModStart> <S2SV_null> static struct ip_options_rcu <S2SV_ModEnd> * opt =,0
180,<S2SV_ModStart> ; if (,0
181,"<S2SV_ModStart> 1 ] ; <S2SV_ModEnd> if (! <S2SV_ModStart> - ENOMEM ; goto out_free <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) { pr_err ( ""%s: <S2SV_blank> %d: <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d\\n"", __func__, __func__, __func__, __func__, __func__, pkt_len ) ; goto out ; } if ( <S2SV_ModStart> 0 ] == 0 ) { <S2SV_ModEnd> if (! <S2SV_ModStart> 0 ) { pr_warn ( ""%s: <S2SV_blank> %d\\n"", __func__, ""%s: <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d\\n"", __func__, __func__, __func__, __func__, __func__, __func__, __func__, __func__, __func__, __func__, NULL ) ; goto out ; } <S2SV_ModEnd> ; } <S2SV_null>",0
182,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } if (,0
183,<S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,<S2SV_ModStart>!= MagickFalse ) <S2SV_ModEnd> ThrowReaderException (,0
186,<S2SV_ModStart> ) ) ; ND_TCHECK ( bp [ 1 ] ) ;,0
187,<S2SV_ModStart> return false ; <S2SV_ModEnd> if (!,0
188,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t,0
189,,0
190,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
191,"<S2SV_ModStart>, int ret <S2SV_ModEnd> ; if (",0
192,,0
193,<S2SV_ModStart> s ; } <S2SV_ModEnd> if (!,0
194,<S2SV_ModStart> ) + 2 <S2SV_ModEnd> ; if (,0
195,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
196,,0
197,<S2SV_ModStart> * file ; <S2SV_ModEnd> if (! <S2SV_ModStart> file ) { <S2SV_ModEnd> return 0 ;,0
198,<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( tptr ) ;,0
199,,0
200,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
201,"<S2SV_ModStart> ) ; } copy_user <S2SV_ModEnd> ( src,",0
202,"<S2SV_ModStart> ( fc,",0
203,"<S2SV_ModStart> -> x = MagickMin <S2SV_ModEnd> ( 1.0f,",0
204,,0
205,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi ->,0
206,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
207,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flags &,0
208,<S2SV_ModStart> = alloc ; <S2SV_ModEnd> if (! <S2SV_ModStart> ) return 0 ; } <S2SV_ModEnd> if ( ptr,0
209,,0
210,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
211,<S2SV_ModStart> -> str ) <S2SV_ModEnd> ; if (,0
212,,0
213,,0
214,<S2SV_ModStart> list ) ; spin_lock ( & timer -> lock ) ;,0
215,,0
216,,0
217,<S2SV_ModStart> ; return ret <S2SV_ModEnd> ; if (,0
218,<S2SV_ModStart> dev ) ; <S2SV_ModEnd> if (!,0
219,<S2SV_ModStart> msg -> msg_namelen = 0,0
220,<S2SV_ModStart> ; if ( <S2SV_ModEnd> == 0 ),0
221,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
222,"<S2SV_ModStart> ] ) ; memset <S2SV_ModEnd> ( dev,",0
223,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
224,,0
225,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
226,<S2SV_ModStart> else if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1 <S2SV_ModStart> { if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1,1
227,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
228,,0
229,<S2SV_ModStart> ; return - EINVAL <S2SV_ModEnd> ; if (,0
230,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
231,,0
232,,0
233,<S2SV_ModStart> return ; } <S2SV_ModEnd> return res ;,0
234,"<S2SV_ModStart>, annotation, NULL,",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,,0
237,,1
238,<S2SV_ModStart> req ) ; <S2SV_ModEnd> return ret ;,0
239,<S2SV_ModStart> ) ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ) { <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header. indx <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; } } } <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header. indx <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; psf ->,0
240,,0
241,<S2SV_ModStart> ; if ( unlikely (,0
242,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
243,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> assert ( cpi,0
244,"<S2SV_ModStart> ( ndo, ""%s"",",0
245,<S2SV_ModStart> ; # endif <S2SV_ModEnd> <S2SV_null> <S2SV_null> static <S2SV_ModStart> v_null> <S2S2SV_null> <S2SV_null> static <S2SV_ModStart> v_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> v_null>,0
246,"<S2SV_ModStart> ( src, <S2SV_ModEnd> ) ; }",0
247,,0
248,"<S2SV_ModStart>, 1, <S2SV_ModEnd> ) ; }",0
249,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
250,"<S2SV_ModStart> if (! c <S2SV_ModEnd> ( c,",0
251,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( offset,0
252,<S2SV_ModStart> ( server. ds_enabled <S2SV_ModEnd> ) ; },0
253,<S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
254,<S2SV_ModStart> book -> dim && i < n,1
255,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
256,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
257,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
258,<S2SV_ModStart> if ( sk ) return - EINVAL,0
259,,0
260,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
261,,0
262,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> ( interface,",0
263,,0
264,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (,0
265,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
266,<S2SV_ModStart> -> rc = <S2SV_ModEnd> ; rc ->,0
267,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } if (,0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( e,",0
270,<S2SV_ModStart> ; } } <S2SV_ModEnd> if (,0
271,"<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( pbi,",0
272,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,0
273,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_null> PREDICTION_mode ( PREDICTION_MODE <S2SV_ModEnd>, int <S2SV_ModStart> ) { PREDICTION_MODE <S2SV_ModEnd> ) { PREDICTION_MODE <S2SV_ModStart> = 0 ; PREDICTION_MODE <S2SV_ModEnd> = 0 ; PREDICTION_MODE <S2SV_ModStart> MODE <S2SV_ModEnd> ) { PREDICTION_MODE <S2SV_ModStart> MODE mode ; PREDICTION_MODE <S2SV_ModEnd> ) { PREDICTION_MODE <S2SV_ModStart> MODE <S2SV_ModEnd> ) ) { PREDICTION_MODE <S2SV_ModStart> this_mode ) { PREDICTION_MODE <S2SV_ModEnd> ) { PREDICTION_MODE <S2SV_ModStart> MODE <S2SV_ModEnd> this_mode ) { PREDICTION_MODE <S2SV_ModStart> MODE <S2SV_ModEnd> ) ; PREDICTION_MODE <S2SV_ModStart> MODE <S2SV_ModEnd> ) ) { PREDICTION_MODE <S2SV_ModStart> 1 ] ; PREDICTION_MODE <S2SV_ModEnd> ) { PREDICTION_MODE",0
274,,0
275,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
276,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
277,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
278,"<S2SV_ModStart> -> archive, & a -> archive_string <S2SV_ModEnd> ) ; if",0
279,<S2SV_ModStart> ; if ( inode -> i_sb ) return AVERROR_INVALID ; if (,0
280,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( lfm,",0
281,<S2SV_ModStart> rq ) ; mutex_lock ( & q -> lock ) ;,0
282,<S2SV_ModStart> if ( addr + <S2SV_ModEnd> sizeof ( val,0
283,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
284,,0
285,,0
286,,0
287,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
288,<S2SV_ModStart> ) ) ; return,0
289,"<S2SV_ModStart> int i ; jas_memcnt <S2SV_ModEnd> ( buf,",0
290,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( pbi,",0
291,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
292,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> s2SV_null> static <S2SV_ModStart> realloc2SV_null> <S2SV_null> static <S2SV_ModStart> s2SV_null> static int <S2SV_ModEnd> ; if ( <S2SV_ModStart> * p ; if (! strlen ( * ) ) return NULL ; if (! buf ) return NULL ; if (! strlen ( * p ) return NULL ; if (! strlen ( * ) ) return NULL ; if ( * p ) return 0 ; if ( * buf ) return 0 ; if ( * buf == PyId ( * p ) ) return NULL ; if (! strlen ( * ) return NULL ; if ( * buf ) return 0 ; if (! buf ) return NULL ; if (! buf ) return 0 ; if ( * buf ) return 0 ; if ( * buf ) return NULL ; if ( * buf ) return 1 ; if ( * buf == PyId ( * p ) return NULL ; if ( * buf ) return 0 ; if (! strlen ( * buf ) return NULL ; if ( * p ) return 0 ; if ( * buf ) return NULL ; if (! strlen (,0
293,<S2SV_ModStart> ; int err = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { goto out <S2SV_ModEnd> ; } <S2SV_null>,0
294,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
295,"<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( buf,",0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,<S2SV_ModStart> } } } <S2SV_ModEnd> } else {,0
298,<S2SV_ModStart> -> buffer ) <S2SV_ModEnd> return NULL ;,0
299,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } else {,0
300,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> * sizeof ( <S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> ; pixels =",0
301,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
302,,0
303,"<S2SV_ModStart> ) ) ) { applog ( LOG_WARNING, ""%s:%s:%s"", __func__, __func__, __func__, __func__, __func__, __func__, __func__, __func__, __func__, __func__, __func__, __func__, __func__, __func__ ) ; <S2SV_ModStart> cb2 ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> cb2 ) ; __func__ ) ;",0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, length )",0
305,,0
306,<S2SV_ModStart> ; if ( <S2SV_ModEnd> dev -> desc.,0
307,"<S2SV_ModStart> ( event, <S2SV_ModEnd> struct perf_event_context *",0
308,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode ( PREDICTION_MODE <S2SV_ModStart> * mode, PREDICTION_MODE <S2SV_ModEnd> * mode, PREDICTION_MODE <S2SV_ModStart> mode ) { PREDICTION_MODE <S2SV_ModEnd> y_mode = vpx_read_mode",0
309,<S2SV_ModStart> return - EINVAL ; if (,0
310,,0
311,,0
312,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY (,0
313,,0
314,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> p2S2SV_null> <S2SV_null> static vpx_null> static vpx_codec_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> void vpx_null> static vpx_null> <S2SV_null> static vpx_null> static vpx_null>,0
315,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> void ) { struct vpx_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> write_literal <S2SV_ModEnd> ( wb,",0
316,"<S2SV_ModStart> * dev, <S2SV_ModEnd> const char *",0
317,<S2SV_ModStart> ; if ( len < 2 ) goto trunc ; if (,0
318,,0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
320,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
321,,0
322,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static vpx_write_bit <S2SV_ModEnd> ( wb,",0
323,"<S2SV_ModStart>, false, <S2SV_ModEnd> ) ) ;",0
324,<S2SV_ModStart> NULL ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
325,,0
326,"<S2SV_ModStart> val ) ; if ( strlen ( str, ""\\0' )!= 0 ) { PyErr_FALSE ; } else { PyErr_FALSE ; } <S2SV_ModEnd> if ( str <S2SV_ModStart> == '\\0' ) { if ( str",0
327,<S2SV_ModStart> ( buff ) <S2SV_ModEnd> ; if (,0
328,"<S2SV_ModStart> str ) ; strncpy ( str, str ) ;",0
329,,1
330,"<S2SV_ModStart> * si, <S2SV_ModEnd> vpx_codec_t",0
331,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
332,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
333,"<S2SV_ModStart> NULL ; } if ( LOG_INFO, NULL ) { log_printf ( LOG_TRUE ) ; return - 1 ; }",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,<S2SV_ModStart> ; return - 1 <S2SV_ModEnd> ; if (,0
336,,0
337,"<S2SV_ModStart> NULL, NULL, 0",0
338,"<S2SV_ModStart>, len ) <S2SV_ModEnd> ; if (",0
339,<S2SV_ModStart> == 1 ) <S2SV_ModEnd> return 0 ;,0
340,,0
341,<S2SV_ModStart> -> file = NULL <S2SV_ModEnd> ; if (,0
342,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
343,,0
344,<S2SV_ModStart>!= 0 ) { <S2SV_ModStart> ) ) ; },0
345,"<S2SV_ModStart> ( ResourceLimitError, ""ImproperImageHeader"" <S2SV_ModEnd> ) ; if",0
346,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src,",0
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
348,,0
349,<S2SV_ModStart> buf_buf + 1 <S2SV_ModEnd> ; if (,0
350,,0
351,,0
352,<S2SV_ModStart> 0 ) ; if ( len < 0 ) return - EINVAL ;,0
353,<S2SV_ModStart> ( args ->,0
354,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
355,<S2SV_ModStart> = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len ),0
356,,0
357,<S2SV_ModStart> ) ) ; if ( strlen ( p ) ) return ;,0
358,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if",0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int sse2SV_null> <S2SV_null> static int64_null> static int64_t sse2S2SV_null> static int64_null> static int64_t <S2SV_ModEnd> int64_t <S2SV_ModStart> case BLOCK_SIZE bmi ; const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * out_t * const uint8_t * out ; const uint8_t * out_t * out ; const uint8_t * out_t * out ; const int64_t * out ; const uint8_t * out ; const uint8_t * out ; const uint8_t * out ; const uint8_t * out ; const uint8_t * out ; const uint8_t * out_to_thrs = vp9_to_thrs [ 1 ] ; const uint8_to_mv ; const uint8_,0
361,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
362,<S2SV_ModStart> ( buf + 1 <S2SV_ModEnd> ) return 0,0
363,"<S2SV_ModStart> * r, vpx_reader <S2SV_ModEnd> * r )",0
364,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst_ptr2,",0
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,<S2SV_ModStart> ; buf += 2 <S2SV_ModEnd> ; if (,0
367,"<S2SV_ModStart> ( interface, ENC28J60_COMP <S2SV_ModEnd> ) ; return",0
368,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
369,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( x,",0
370,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
371,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 2S2SV_null> <S2SV_null>,0
372,,0
373,<S2SV_ModStart> vpx_codec_alg_priv_t * ctx = NULL <S2SV_ModEnd> ; priv ->,0
374,,0
375,<S2SV_ModStart> NULL ) { <S2SV_ModEnd> return 0 ;,0
376,,0
377,"<S2SV_ModStart> ( interface, ENC28J60_EIR <S2SV_ModEnd> ) ; if",0
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
379,,0
380,,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,,0
384,<S2SV_ModStart> ; } } if (,0
385,<S2SV_ModStart> ; if ( i < 8 ) goto err ; if (,0
386,,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
388,<S2SV_ModStart> ; if (,0
389,"<S2SV_ModStart>, annotation, NULL,",0
390,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModStart> i2S2SV_null> <S2SV_null> static int <S2SV_ModEnd> i2SV_null> static <S2SV_ModStart> i2SV_null> <S2SV_null> static int <S2SV_ModStart> i2SV_null> static int64_null> <S2SV_null> static int <S2SV_ModEnd> i2SV_null> static <S2SV_ModStart> i2SV_null> <S2SV_null> <SV_null> static int <S2SV_ModEnd> i2SV_null> static <S2SV_ModStart> i2SV_null> <SV_null>,0
391,<S2SV_ModStart> ; } } if (,0
392,<S2SV_ModStart> return ret ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
393,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
394,<S2SV_ModStart> dev ) ; <S2SV_ModEnd> return NULL ;,0
395,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
397,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( data",0
398,"<S2SV_ModStart> ( event, <S2SV_ModEnd> ) ; }",0
399,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( s,",0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
401,<S2SV_ModStart> } } } <S2SV_ModEnd> } else {,0
402,,0
403,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
405,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_row, vpx_block_block_block_tree <S2SV_ModEnd> ( BLOCK_SIZE bsize, <S2SV_ModStart> -> mbmi ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( xd -> mbmi ) return ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH break ; # if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( xd ) { vp9_highbit ( xd, xd -> mbmi, xd, xd -> mbmi, xd ) ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH break ; # endif vp9_highbd_highbd_highbd_highbd",0
406,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( src,",0
407,<S2SV_ModStart> row ) { uint32 temp ; <S2SV_ModEnd> if ( row,0
408,<S2SV_ModStart> ; assert ( 1 <S2SV_ModEnd> ) ; },0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr,0
410,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
411,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
412,<S2SV_ModStart> ; if ( key_len < 0 ) goto out ;,0
413,,0
414,<S2SV_ModStart> data ) ; <S2SV_ModEnd> } <S2SV_null>,0
415,,0
416,<S2SV_ModStart> ; if ( <S2SV_ModEnd>!= 0 ),0
417,<S2SV_ModStart> ) ; goto err <S2SV_ModEnd> ; } if,0
418,,0
419,,0
420,"<S2SV_ModStart>, & rlen, 0",1
421,<S2SV_ModStart> ret = 0 <S2SV_ModEnd> ; if (,0
422,,0
423,<S2SV_ModStart> return 0 ;,0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,,0
426,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
427,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
428,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header,0
430,<S2SV_ModStart> = 0 ; size_t data_size = 0 ;,0
431,<S2SV_ModStart> = - 1 <S2SV_ModEnd> ; if (,0
432,<S2SV_ModStart> return 0 ; return 0 ;,0
433,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
434,,0
435,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
436,,0
437,,0
438,,0
439,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
440,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static VP9_COMMON * const VP9_COMMON * const MACROBLOCKD * const MACROBLOCKD * const VP9_COMMON * const xd = & cpi -> common ; MACROBLOCKD * const xd -> common ; MACROBLOCKD * const xd = & cpi -> common ; MACROBLOCKD * const xd -> common ; MACROBLOCKD * const BLOCKD * const xd = & cpi -> common ; MACROBLOCKD * xd -> mi_cols = & cpi -> mi -> mi_cols ; <S2SV_ModStart>, mi_row, mi_row, mi_col ) ; memcpy <S2SV_ModEnd> ( xd -> <S2SV_ModStart> mi_row, mi_col ) ; memcpy <S2SV_ModEnd> ( xd -> <S2SV_ModStart> mi_col ) { memcpy <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( xd ->",0
441,<S2SV_ModStart> ) ) ; ND_TCHECK ( tptr ) ;,0
442,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
443,"<S2SV_ModStart> ( decoder -> codec_interface <S2SV_ModEnd> ( ),",0
444,<S2SV_ModStart> goto out ; <S2SV_ModEnd> return 0 ;,0
445,<S2SV_ModStart> str ) ; <S2SV_ModEnd> if (!,0
446,<S2SV_ModStart> dev ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
447,<S2SV_ModStart> ctx ) { <S2SV_ModEnd> if ( ctx,0
448,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
449,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
450,"<S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
451,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
452,<S2SV_ModStart> ) ) ; if ( len == 0 ) return - EINVAL ;,0
453,,0
454,<S2SV_ModStart> ( buf [ 1 ] <S2SV_ModEnd> ; if (,0
455,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
456,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } return,0
457,,0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,<S2SV_ModStart> ; if ( data == NULL ) { if (,0
460,"<S2SV_ModStart> ; if ( key_is_data <S2SV_ModEnd> ( key,",0
461,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
462,,0
463,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
464,"<S2SV_ModStart> expr_ty returns, string type_comment,",0
465,"<S2SV_ModStart>, int ret <S2SV_ModEnd> ; if (",0
466,,0
467,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
468,,0
469,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ;,0
470,"<S2SV_ModStart> == 0 ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
472,"<S2SV_ModStart> m ) { <S2SV_ModEnd> err = 0 <S2SV_ModStart> ; } } } if ( m_len == 0 ) { <S2SV_ModStart> m ) ; goto trunc ; } <S2SV_ModStart> ) ; } if ( mb_len!= 0 ) { r = ( m, m, m, m, m, m, m, m, m, m, m, m, m ) ; goto trunc ; } <S2SV_ModStart> ; } } if ( m_len!= 0 ) { if ( mb_err ( m, m, m, m, m, m, m, m, m, m, m, m, 0 ) ) ; goto trunc ; } <S2SV_ModStart> ; } } } } if ( m_len <S2SV_null> <S2SV_null>",0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
475,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
476,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> ip2S2SV_null> static,0
477,<S2SV_ModStart> ; return FALSE <S2SV_ModEnd> ; if (,0
478,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> ; pixel_info =",0
479,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> len ) ),0
480,,0
481,"<S2SV_ModStart> int mptctl_targetinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; if (",0
482,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
483,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
484,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
485,<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; char,0
486,<S2SV_ModStart> exit ; } <S2SV_ModEnd> if ( options,0
487,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
488,"<S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2, ENC624J600_EHT",0
489,"<S2SV_ModStart>, sizeof ( MagickFalse ) <S2SV_ModEnd> ; if (",0
490,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
491,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> malloc ( child <S2SV_ModStart> = 0 ; if (! child ) return 0 ; if (! child ) return 0 ; if (! child ) return 0 ; if (! child ) return 0 ;,0
492,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
493,"<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd>, outputbuffer )",0
494,,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
496,<S2SV_ModStart> return ; } <S2SV_ModEnd> if ( req,0
497,"<S2SV_ModStart>, int ret <S2SV_ModEnd> ; if (",0
498,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
499,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
500,<S2SV_ModStart> -> buffer ; <S2SV_ModEnd> free ( pool,0
501,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip2SV_null> static <S2SV_ModStart> ; if ( ( ( <S2SV_ModStart> )!= 0 ) { if ( <S2SV_ModEnd>!= '\\0' ) <S2SV_ModStart> == 0 ) { <S2SV_ModStart> == '\\0' ) { return 0 ; } <S2SV_ModEnd> if ( ( ( <S2SV_ModStart> == '\\0' ) ; <S2SV_ModStart> == '\\0' ) { <S2SV_ModEnd> if ( (! <S2SV_ModStart>!= '\\0' ) ) { <S2SV_ModStart> == '\\0' ) { <S2SV_ModEnd> = '\\0' ; <S2SV_ModStart> == '\\0' ) ; <S2SV_ModStart> == '\\0' ) { <S2SV_ModEnd> = '\\0' ; <S2SV_ModStart> == '\\0' ) { <S2SV_ModStart> == '\\0' ) { <S2SV_ModEnd> if (! <S2SV_ModStart>!= '\\0' ) { d ++ ; } <S2SV_ModEnd> if (! <S2SV_ModStart>!= '\\0' ) { <S2SV_ModStart> == '\\0' ) { if (! d ++ ) { if ( ( ( ( ( ( (! d ) ) ) ) ) { <S2SV_ModEnd> if ( (! <S2SV_ModStart> == '\\0' || ( ( ( (! d ) ) ) ) ) ) { <S2SV_ModStart> == '0' ) ) { if (!,0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> cols2SV_null> <S2S2SV_null>,0
504,"<S2SV_ModStart> mv ; memcpy <S2SV_ModEnd> ( ref,",0
505,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
507,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi,",0
508,,0
509,,0
510,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> VP9_HIGHBITDEPTH if,0
511,,0
512,,0
513,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static vpx_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) { vpx_write_literal <S2SV_ModEnd> ( wb,",0
514,<S2SV_ModStart> : if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; },0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context ->,0
516,,0
517,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi ->,0
518,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> encode_null> static <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_OK <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_OK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_OK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_OK <S2SV_ModEnd> ) ; return",0
519,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
520,<S2SV_ModStart> == 0 ) <S2SV_ModEnd> ; if (,0
521,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
522,<S2SV_ModStart> - EINVAL ; if ( err == 0 ) goto err ;,0
523,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
524,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> u_null> <S2S2SV_null> static <S2SV_ModStart> u32_null> <S2SV_null> static int <S2SV_ModEnd> s2SV_null> <S2SV_null>,0
525,<S2SV_ModStart> -> ctx = 0 <S2SV_ModEnd> ; if (,0
526,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( interface, KSZ8851_COMP <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ( interface, KSZ8851_COMP <S2SV_ModEnd> ) ; return",0
527,"<S2SV_ModStart>, int i, int i, <S2SV_ModStart> ; if (! is_async ) return NULL <S2SV_ModEnd> ; if (",0
528,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
529,,0
530,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } else {,0
531,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
532,,0
533,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
534,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
535,,0
536,,0
537,,0
538,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
539,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
540,,0
541,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, sizeof (",0
542,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
543,<S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
544,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
545,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
546,,0
547,<S2SV_ModStart> return - EINVAL <S2SV_ModEnd> ; if (,0
548,<S2SV_ModStart> if ( n >= <S2SV_ModEnd> sizeof ( int,0
549,<S2SV_ModStart> event ) ; <S2SV_ModEnd> } <S2SV_null>,0
550,<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( x ->,0
551,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ENC624J600_ECON <S2SV_ModEnd> ) ; interface -> <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_ESTAT_ECON2 <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_ENC624J600_ECON2 <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( interface, ENC624J600_EIE, ENC624J600_ECON2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> ) ) ; return <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> ) ; }",0
552,<S2SV_ModStart> f -> header. ptr <S2SV_ModEnd> ) ; return,0
553,<S2SV_ModStart> -> cfg ) <S2SV_ModEnd> ; if (,0
554,<S2SV_ModStart> int sf ; const VP9_COMMON * const cm = & cpi -> common ; MACROBLOCKD * const rd = & cpi -> common ; MACROBLOCKD * const rd = & cpi -> common. frame_flags |= 1 ; <S2SV_ModStart> ; if ( cpi -> frame_flags & cpi -> frame_type == KEY_FRAME ) { if ( cpi -> frames == KEY_FRAME ) { if ( cpi -> common. mb_ref == KEY_FRAME ) { if ( cpi -> thresh_FLAG_FRAME ] == KEY_FRAME ) { if ( cpi -> thresh_FRAME ) { cpi -> thresh_interval = 0 ; sf -> thresh_interval = 1 ; sf -> thresh_interval = 1 ; sf -> thresh_interval == KEY_FRAME ) { sf -> thresh_interval = 1 ; } else { if ( cpi -> thresh_frame == KEY_FRAME ) { if ( cpi -> thresh_FRAME ] == KEY_FRAME ) { if ( cpi -> thresh_FRAME ),0
555,"<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1, 0 )",0
556,,0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } if,0
559,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
560,,0
561,,0
562,,1
563,<S2SV_ModStart> return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
564,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
565,<S2SV_ModStart> = 0 ; if ( len < 0 ) return FALSE ;,0
566,<S2SV_ModStart> * s ; if ( s == NULL ) return - 1 ;,0
567,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
568,,0
569,<S2SV_ModStart> cpi ) { const VP9EncoderConfig * const VP9EncoderConfig <S2SV_ModEnd> * oxcf = <S2SV_ModStart> = ( cpi -> oxcf. rc <S2SV_ModEnd> -> oxcf. <S2SV_ModStart> KEY_FRAME ] ; if ( cpi -> oxcf. rc!= VPX_CBR ) || ( cpi -> oxcf. number_gf_gf_gf_gf_gf_gf_interval * ( cpi ) ) || ( cpi -> oxcf -> baseline_gf_gf_gf_gf_gf_gf_gf_interval * ( cpi ) ) ) { return - 1 ; } <S2SV_ModEnd> if ( cpi <S2SV_ModStart> = 1 ; } <S2SV_ModEnd> if ( cpi <S2SV_ModStart> ) { if ( cpi <S2SV_ModStart> = ( cpi -> oxcf -> oxcf -> oxcf. gf_interval - 1 ) ; } if ( ( ( ( ( ( cpi ) ) )!= KEY_FRAME ) ) ) ) { if ( ( ( ( ( ( ( cpi ) ) ) ) || ( ( ( ( cpi ) ) ) ) || ( cpi -> oxcf -> oxcf -> oxcf -> oxcf ->,0
570,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
571,"<S2SV_ModStart> ) ) ; if (! strcmp ( yyv1, ""invalid"" ) ) goto fail ;",0
572,<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> MACROBLOCKD * const <S2SV_ModStart> const MACROBLOCKD * const VP9_COMMON * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const xd = & ctx ; MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const xd = & ctx ; MACROBLOCKD * const tran_low_t * const tran_t * const tran_t * const tran_low_t * const tran_t * const tran_t * const tran_low_t * const tran_t * const tran_t * const dqcoeff = & dqcoeff ; const tran_low_t * const tran_t * const tran_t * const tran_low_t * const tran_t ; const tran_t * const tran_t * const tran_t * const tran_t *,0
573,,0
574,,0
575,,0
576,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
577,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
578,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len ),0
579,,0
580,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
581,<S2SV_ModStart> ; if ( zval <S2SV_ModEnd> ) { zval,0
582,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
583,,0
584,<S2SV_ModStart> return FALSE ; if (! entry ) return FALSE ;,0
585,<S2SV_ModStart> ; int ret = - 1 <S2SV_ModEnd> ; if (,0
586,"<S2SV_ModStart> -> seg ; memset <S2SV_ModEnd> ( seg,",0
587,"<S2SV_ModStart> ; if (! TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & name, & 0, <S2SV_ModStart> ) ) ) return 1 <S2SV_ModEnd> ; if (",0
588,,0
589,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
590,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static char <S2SV_ModStart> char * p ; char * strlen ( void ) { char * p ; char * p ; char * p ; char * p = strlen ( p ) ; if (! strlen ( p ) ) return NULL ; <S2SV_ModStart> = '\\0' ; if (! strlen ( p ) ) return 0 ; <S2SV_ModStart> = '\\0' ; if (! strlen ( strlen ( p ) ) ) return 0 ; <S2SV_ModStart> = '\\0' ; <S2SV_ModEnd> } if ( <S2SV_ModStart> == '\\0' ) { <S2SV_ModStart> = '\\0' ; return 0 ; } <S2SV_ModEnd> } } <S2SV_null>,0
591,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj,",0
592,"<S2SV_ModStart> void vpx_writer <S2SV_ModEnd> * w,",0
593,<S2SV_ModStart> err ; } if ( err == NULL ) { err = - EINVAL ; goto err ; } <S2SV_ModEnd> if (! <S2SV_ModStart> next ) ; goto out_errno <S2SV_ModEnd> ; } if (,0
594,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
595,,0
596,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> ge2S2SV_null> static <S2SV_ModStart> int tile_tile_set ( tile, tile_col, tile_col, tile_col, tile_col, tile_col ) ; <S2SV_ModStart> = 0 ; if ( tile_col < tile_col ) { int tile_cols = 0 ; tile_cols = & tile_cols -> tile_cols + tile_cols + tile_cols + tile_cols -> tile_cols + tile_cols + tile_cols + tile_cols + tile_cols -> tile_cols + 1 ) ; tile_cols = & tile_cols -> tile_cols -> tile_cols + tile_cols + tile_cols + tile_info -> tile_cols + tile_cols + tile_cols + ( tile_col, tile_col ) ; tile_cols + tile_cols + tile_cols + tile_cols + 1 ) ; tile_col * tile_cols + tile_cols + tile_",0
597,<S2SV_ModStart> <S2SV_null> <S2SV_null> static VP9_null> <S2S2S2SV_null> static VP9_null> static VP9_decode_null> static VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const cm = & cm -> common ; MACROBLOCKD * const MACROBLOCKD * const cm = & cm -> common ; MACROBLOCKD * const MACROBLOCKD * const cm -> common = & cm -> common ; MACROBLOCKD * const MACROBLOCKD * const int i = & ctx -> common ; FrameWorkerData * const cm -> common ; FrameWorkerData * const cm -> common = & cm -> common ; FrameWorkerData * const cm -> common ; FrameWorkerData * const cm -> common = & cm -> common ; FrameWorkerData * const cm -> common ; FrameWorkerData * const int <S2SV_ModStart> = NULL ; vpx_decode = & cm -> common ; vp9_decode -> common ; vpx_,0
598,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
599,<S2SV_ModStart> <S2SV_null> static struct ip_options_rcu <S2SV_ModEnd> * opt ;,0
600,,0
601,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> NULL ) ) ; memset ( ctx, 0, sizeof ( ctx ) ) ) ;",0
602,<S2SV_ModStart> ; if ( count > 0 &&,0
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
604,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
605,<S2SV_ModStart> { jas_uchar <S2SV_ModEnd> buf [ 0,0
606,<S2SV_ModStart> <S2SV_null> <S2SV_null> static VP9_COMMON * const VP9_COMMON * const xd = & cpi -> common ; MACROBLOCKD * const MACROBLOCKD * const xd = & cpi -> common ; MACROBLOCKD * const MACROBLOCKD * const xd ; const xd = & cpi -> common ; MACROBLOCKD * const xd -> common ; MACROBLOCKD * const xd -> common ; const xd = & cpi -> common ; MACROBLOCKD * const xd -> common ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_8X8X8X8X8X8X8X8X8X8X8X8X8X8X8X8X8X8X8X8X8X8X8X8X8X8X8X8X8X8_8X8X8X8X8X8X8X8X8X8X8X8X8X8X8X8,0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr,0
608,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
609,"<S2SV_ModStart> ; if ( osStrchr <S2SV_ModEnd> ( '\\"",",0
610,<S2SV_ModStart> ; } } if (,0
611,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4,",0
612,"<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL )",0
613,,0
614,,0
615,,0
616,<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi ->,0
617,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
618,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
621,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
622,<S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> coef_probs [,0
623,<S2SV_ModStart> = 0 ;,0
624,<S2SV_ModStart> = 0 ; mutex_lock ( & d -> data <S2SV_ModEnd> ) ; mutex_lock <S2SV_ModStart> = 0 ; mutex_lock ( & d -> data ) ; mutex_lock ( & d -> data ) ; mutex_lock ( & d -> data ) ; mutex_unlock ( & d -> data ) ; mutex_unlock ( & d -> data ) ; mutex ) ; mutex_unlock ( & d -> data ) ; mutex_unlock ( & d -> data ) ; mutex_unlock ( & d -> data ) ; mutex_unlock ( & d -> data ) ; mutex_unlock ( & mutex ) ; mutex_unlock ( & mutex ) ; mutex_unlock ( & d -> data ) ; mutex_unlock ( & d -> data ) ; mutex_unlock ( & d -> data ) ; mutex_unlock ( & mutex ) ; mutex_unlock ( & d -> data ) ; mutex_unlock ( & mutex ) ; mutex_unlock ( & d -> data ) ; mutex_unlock ( & mutex ) ; mutex_unlock (,0
625,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, sizeof (",0
626,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> mbmi ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH break ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH flags & YV12_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( xd -> flags & YV12_HIGHBITDEPTH ) return ;,0
627,<S2SV_ModStart> ; buf [ 1 <S2SV_ModEnd> ] ; } if,0
628,"<S2SV_ModStart> * n, <S2SV_ModEnd> const char *",0
629,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> <S2SV_null> static int <S2SV_ModEnd> void ( void <S2SV_ModStart> void vpx_codec_t * tile_id ) { VP9_COMMON * tile_info = & tile_data -> tile_info. tile_data -> tile_info. tile_info. tile_info. tile_info. tile_data <S2SV_ModEnd> ; TileInfo * <S2SV_ModStart> = 0 ; tile_info = & tile_data -> tile_data -> tile_data -> tile_data -> tile_info. tile_data <S2SV_ModEnd> ; ++ ; <S2SV_ModStart> ; if ( tile_idx > 0 ) { vpx_read_free ( & tile_id ) ; return - 1 ; } else { vpx_free ( & tile_id ) ;,0
630,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
631,"<S2SV_ModStart> ; if ( segfeature_active <S2SV_ModEnd> ( seg, <S2SV_ModStart> i ) ) { memset <S2SV_ModEnd> ( seg, <S2SV_ModStart> i ] ; memset <S2SV_ModEnd> ( seg, <S2SV_ModStart> i ] ; memset <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ; } memset <S2SV_ModEnd> ( seg,",0
632,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
633,<S2SV_ModStart> = ps_dec -> <S2SV_ModEnd> ; ps_dec ->,0
634,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY (,0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
636,,0
637,<S2SV_ModStart> ; return 0 ;,0
638,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> s2S2SV_null> <S2SV_null> static <S2SV_ModStart> s_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> ; return,0
639,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> void * socket = NULL ; struct ip_options_options_rcu64 <S2SV_ModEnd> ; struct <S2SV_ModStart> = NULL ; int <S2SV_ModStart> ; struct socket = NULL ; int <S2SV_ModEnd> ; struct socket = <S2SV_ModStart> = NULL ; <S2SV_ModEnd> if (! <S2SV_ModStart> ) { struct socket = - 1 ; <S2SV_ModStart> ) ; } if (! private -> socket ) { struct socket = NULL ; <S2SV_ModStart> = NULL ; <S2SV_ModEnd> if (!,0
640,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi ->,0
641,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
642,"<S2SV_ModStart> int mptctl_fw ( MPT_ADAPTER * ioc, <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } <",0
643,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
644,,0
645,<S2SV_ModStart> return ; } <S2SV_ModEnd> if (!,0
646,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_read_literal <S2SV_ModEnd> ( r,",0
647,,0
648,"<S2SV_ModStart> cm, vpx_reader <S2SV_ModEnd> * r )",0
649,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
650,"<S2SV_ModStart> ( ndo, ""%s"",",0
651,,0
652,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ->,0
653,,0
654,,0
655,,0
656,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
657,,1
658,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
659,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
660,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
661,"<S2SV_ModStart> <S2SV_null> <S2SV_null> dm9000_null> dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPCR, DM9000_EPCR_EPCR_EPCR_EPOS <S2SV_ModEnd> ) ; }",0
662,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if (!,0
663,<S2SV_ModStart> err ; } <S2SV_ModEnd> if ( msg,0
664,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> err2S2SV_null> <S2SV_null> static PREDICTION_null> <S2SV_null>,0
665,,0
666,,0
667,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> * sizeof (",0
668,<S2SV_ModStart> ; if (,0
669,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
670,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
671,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
