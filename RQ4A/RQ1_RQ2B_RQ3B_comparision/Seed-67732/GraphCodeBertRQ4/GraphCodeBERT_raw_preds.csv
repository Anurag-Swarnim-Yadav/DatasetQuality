,raw_predictions,correctly_predicted
0,"<S2SV_ModStart> 0 ) ; memset ( & wmi, 0, sizeof ( wmi ) ) ;",0
1,<S2SV_ModStart> skb ) { if ( unfrag_ip6hlen < 0 ) return 0 ;,0
2,,0
3,<S2SV_ModStart> c ) { <S2SV_ModEnd> return 0 ;,0
4,"<S2SV_ModStart> ( regs, <S2SV_ModEnd>, regs,",0
5,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> * ext4_null>,0
6,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModEnd> ; tran_low_t <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModEnd> ; tran_low_t <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModEnd> ; tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_low_t ) <S2SV_ModEnd> * output [ 3 ] <S2SV_ModStart> 1 ] = ( tran_low_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_low_low_t ) ; tran",0
7,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
8,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_level ( int64_err_tokens <S2SV_ModEnd>, int64_t <S2SV_ModStart> int mi_col, int64_err_tokens <S2SV_ModEnd> ; int64_err_tokens <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( sf, <S2SV_ModStart> int_err ) ; memset <S2SV_ModEnd> ( & cpi -> <S2SV_ModStart> = 1 ; memset <S2SV_ModEnd> ( & cpi -> <S2SV_ModStart> - 1 ; memset <S2SV_ModEnd> ( & cpi",0
9,<S2SV_ModStart> len += 1 <S2SV_ModEnd> ; if (,0
10,"<S2SV_ModStart> void vpx_write_literal <S2SV_ModEnd> ( w,",0
11,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_32 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } else { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } else { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } else { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; },0
12,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) ; if ( length < 4 ) { ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ( ( ndo, ""AVP <S2SV_blank> short"" ) ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ) ) ; return ; } if ( length < 4 ) ) { ND_PRINT ( ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ) ; return ; }",0
13,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
14,,0
15,<S2SV_ModStart> = malloc <S2SV_ModEnd> ; if (,0
16,,0
17,,0
18,<S2SV_ModStart> ( inode -> i_uidgid <S2SV_ModEnd> ) && inode,0
19,,0
20,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> frame_null> <S2SV_null> static <S2SV_ModStart> null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> frame_null> <S2SV_null>,0
21,"<S2SV_ModStart> ( io, size_t size <S2SV_ModEnd> ) ; if",0
22,<S2SV_ModStart> ; char * name <S2SV_ModEnd> ; if (,0
23,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> errstr ( p,0
24,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
25,,0
26,"<S2SV_ModStart> mnt, path, rootfs",0
27,<S2SV_ModStart> - ENOMEM ; } <S2SV_ModEnd> if ( io,0
28,<S2SV_ModStart> ; } } if (,0
29,,0
30,<S2SV_ModStart> ( cfg ) <S2SV_ModEnd> ; if (,0
31,,0
32,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
33,,0
34,"<S2SV_ModStart> ( interface, ENC28J60_BUFFER_BUFFER <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC28J60_BUFFER_START ) <S2SV_ModEnd> ( interface,",0
35,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,0
36,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> stride ) { <S2SV_ModStart> return - 1 ; } if ( strchr ( req, '\\n"" ) ) { return - 1 ; } <S2SV_ModStart> - ENOMEM ; } <S2SV_ModEnd> return res ;",0
37,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> intra_stride ) { int source_stride_stride <S2SV_ModEnd> ( source, <S2SV_ModStart> intra_stride, mb, mb_stride ) ; memset <S2SV_ModEnd> ( mb, <S2SV_ModStart> intra_stride, 0, <S2SV_ModStart> intra_stride ) ; memset <S2SV_ModEnd> ( mb, <S2SV_ModStart> intra_stride ) ; memset ( mb, 0, 0, <S2SV_ModStart> intra_stride, 0, 0, 0 ) ; memset <S2SV_ModEnd> ( mb, <S2SV_ModStart> intra_stride ) ; if ( mb_stride ) { memset ( mb, 0, 0, mb_stride, 0, 0, 0 ) ; memset ( mb, 0, 0, 0, 0, 0 ) ; memset <S2SV_ModEnd> ( mb_stride, <S2SV_ModStart> 16 ) ; memset <S2SV_ModEnd> ( mb_buffer ( mb_stride, <S2SV_ModStart> cm -> yv_stride ) ; memset <S2SV_ModEnd> ( mb_stride",0
38,"<S2SV_ModStart> <S2SV_null> <S2SV_null> struct mb2_cache * mb2_cache <S2SV_ModEnd> ; struct mb2_cache <S2SV_ModStart> int error ; struct mb_cache_entry * bh = mb2_cache_entry ( bh, bh -> bh ) ; mb_cache_cache_entry_block ( bh, bh -> bh ) ; error = mb_cache_block ( bh, bh -> bh, bh -> bh ) ; error = mb_cache_block ( bh, bh -> bh ) ; if ( bh -> bh -> bh ) { error = - EINVAL ; goto error ; } <S2SV_ModEnd> if ( bh <S2SV_ModStart> ( bh, bh, bh -> b_mb_cache, bh, bh -> bh_cache, bh -> bh -> b_mb_cache, bh, bh -> bh -> b_cache, bh -> bh -> b_mb_cache, bh ) ; error = b_cache_cache_cache <S2SV_ModEnd> ( bh ->",0
39,,0
40,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ip_options_options_rcu <S2SV_ModEnd> * opt =,0
41,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
42,<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> g ) ),0
43,<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd> ) ; if,0
44,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
45,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
46,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
47,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
48,"<S2SV_ModStart> { if ( osStrchr <S2SV_ModEnd> ( token,",0
49,"<S2SV_ModStart> ( addr ) ; memset <S2SV_ModEnd> ( addr,",0
50,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
51,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
52,<S2SV_ModStart> ; # endif # if CONFIG_VP9_HIGHBITDEPTH ifdef CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( ( argv ) == 0 ) { return - 1 ; } else <S2SV_ModStart> ; } } # ifdef CONFIG_VP9_ENCODEC_ENCODEC_ENCODEC_ENCODEC_ENCOD ; # else if CONFIG_VP9_HIGHBITDEPTH if ( ( argv ) ) return - 1 ; } # endif,0
53,<S2SV_ModStart> -> ssl ) { <S2SV_ModEnd> if ( c,0
54,,0
55,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = 0 ; if ( cpi -> twopass. gf_flags & cpi -> twopass. gf_flags & cpi -> twopass. frame_flags & cpi -> frames_flags & ( cpi -> frames_bits ) ) { if ( cpi -> oxcf. gf_bits == 0 ) { return 0 ; } else { if ( cpi -> oxcf. stride == 0 ) { cpi -> oxcf. stride = 0 ; return 0 ; } else { cpi -> oxcf. gf_group = 0 ; } else { cpi -> oxcf. stride = 0 ; } else if (! cpi -> oxcf. gf_bits ) { cpi -> oxcf. stride = 0 ; } else { cpi -> oxcf. stride = 0 ; },0
56,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
57,<S2SV_ModStart> ) ; goto out_free <S2SV_ModEnd> ; } if,0
58,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { int",0
59,<S2SV_ModStart> file ) ; <S2SV_ModEnd> if (!,0
60,,0
61,,0
62,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,,0
65,,0
66,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> null> <S2SV_null> <S2SV_null> <S2S2SV_null>,0
67,,0
68,<S2SV_ModStart> x ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
69,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
70,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
71,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
72,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
73,<S2SV_ModStart> ; memset <S2SV_ModEnd> ( & cpi,0
74,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
75,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
76,"<S2SV_ModStart> if (! n_async <S2SV_ModEnd> ) { const <S2SV_ModStart> n ) { const n = CHILD ( CHILD ( n, n, n, n, CHILD ( n, n ) ) ; if (! CHILD ( n ) ) { goto error ; } if ( CHILD ( CHILD ( n, CHILD ( n, 1 ) ) ) { n = CHILD ( n, 1 ) ; } else { if ( CHILD ( CHILD ( CHILD ( n, 1 ) ) ) ; } else { if ( CHILD ( CHILD ( n, CHILD ( n ) ) ) ) { n = CHILD ( n ) ; } else { n = CHILD ( n, CHILD ( n, CHILD ( n ) ) ) ; } else { if ( CHILD ( n, CHILD ( n, CHILD ( n ) ) ) ) ; return NULL ; } if ( CHILD ( CHILD ( CHILD ( CHILD ( n, n, 1 ) ) ) { CHILD ( CHILD ( n, CHILD ( CHILD ( CHILD ( n ) ) ) ) ; } if (! CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( n",0
77,"<S2SV_ModStart> ) ; } memset ( dst, 0, sizeof ( dst ) ) ;",0
78,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> const PREDICTION_MODE <S2SV_ModStart> mode_mode_mode ) { const MACROBLOCKD * const MACROBLOCKD * const xd = & cpi -> mbmi_mode ; const MACROBLOCKD * const xd = & cpi -> mbmi_mode ; const MACROBLOCK_SIZE bw = xd -> mi [ 0 ]. mbmi_ext4x8x8x8x8x8x8x8x8x8x8x8x8x8 ( cm, mi, mi_mode, mi_row, mi_row, mi_col, mi_row, mi_col, mi_col ) ; const int mi_row = mi_cols ( cm -> mi_cols, mi_col ) ; const int bw = mi_row * cm -> mi_col * cm -> mi_cols = mi_cols - mi_col ; const int mi_cols = mi_cols ( cm -> mi_cols - mi_cols ) ; const int",0
79,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
80,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
81,<S2SV_ModStart> = 1 ; if (,0
82,,0
83,<S2SV_ModStart> - EIO ; # ifdef CONFIG_HIGHBITDEPTH_buf_buf_buf_size < 0 ) { return - EINVAL,0
84,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
85,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,"<S2SV_ModStart> { if ( lookup_attr_id <S2SV_ModEnd> ( obj,",0
89,<S2SV_ModStart> ) ; } rcu_read_lock ( ) ;,0
90,<S2SV_ModStart> { if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( ( image,0
91,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
92,,0
93,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> 8 ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
94,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> msg_namelen = 0,0
97,"<S2SV_ModStart> 0 ) ; memset <S2SV_ModEnd> ( msr,",0
98,,0
99,,0
100,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
101,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
102,<S2SV_ModStart> if (! ISOM_DECREASE_SIZE <S2SV_ModEnd> ) { zfound <S2SV_ModStart> tmp_strsize ) { zfound = GF_TRUE ; return GF_INVALID_FILE ; },0
103,<S2SV_ModStart> ( ctx ) <S2SV_ModEnd> ; if (,0
104,"<S2SV_ModStart> * state, fmode_t state, fmode_t fmode <S2SV_ModEnd> ) { int <S2SV_ModStart> = state ; if ( state == 0 ) { state = fmode_t fmode ( FMODE_WRITE ) ; if ( state == 0 ) goto out_unlock ; } if ( state == 0 ) { fmode = FMODE_WRITE ; if ( state -> state == 0 ) goto out ; } if ( state == 0 ) goto out_unlock ; <S2SV_ModStart> ( state == fmode <S2SV_ModEnd> ) { fmode <S2SV_ModStart> ( state, state -> state == 0 <S2SV_ModEnd> ) ; }",0
105,<S2SV_ModStart> ( file ) <S2SV_ModEnd> ; if (,0
106,"<S2SV_ModStart> buf ) ; memset <S2SV_ModEnd> ( buf,",0
107,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
108,,0
109,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; break",0
110,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
111,<S2SV_ModStart> ret ; } if ( state == NULL ) return - EINVAL ;,0
112,<S2SV_ModStart> ( cfg ) <S2SV_ModEnd> ; if (,0
113,"<S2SV_ModStart> ( interface, TEMP_FAILURE_RETRY <S2SV_ModEnd> ) ; if",0
114,,0
115,<S2SV_ModStart> ( cfg ) <S2SV_ModEnd> ; if (,0
116,<S2SV_ModStart> - EOPNOTSUPP ; msg -> msg_namelen = 0 ;,0
117,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; return",0
118,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
119,<S2SV_ModStart> 1 ) { if ( len < 2 ) { return 0 ; },0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
122,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
123,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
124,<S2SV_ModStart> return ret ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
125,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> vpx_prob <S2SV_ModEnd> probs ( v,0
126,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output,",0
127,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
128,<S2SV_ModStart> <S2SV_null> <S2SV_null> static tran_high_t <S2SV_ModEnd> input ( tran_high_t <S2SV_ModStart> 1 ] = ( tran_high_t ) <S2SV_ModStart> 4 ] ; tran_high_t <S2SV_ModEnd> x5 = ( <S2SV_ModStart> 4 ] = ( tran_high_t ) <S2SV_ModStart> 0 ] = ( tran_high_t ) <S2SV_ModStart> 0 ] = ( tran_high_t ) <S2SV_ModStart> 0 ] = ( tran_high_t ) <S2SV_ModEnd> ; tran_high_high_t ) <S2SV_ModStart> 0 ] = ( tran_high_t ) ; tran_high_high_high_t * output = ( tran_high_t ) <S2SV_ModStart> 0 ] = ( tran_high_high_t ) ; tran_high_high_t ) <S2SV_ModStart> 0 ] = ( tran_high_t ) <S2SV_ModStart> 0 ] = ( tran_high_t ) <S2SV_ModStart> 0 ] = ( tran_high_high_t ) ; tran_high_high_t ) ; tran_high_high_t <S2SV_ModEnd> x0 = ( tran_high_high_high_t ) <S2SV_ModStart> 0 ] =,0
129,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
131,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_row, <S2SV_ModEnd> * mi_col, <S2SV_ModStart> int mi_col, mi_row, mi_col, mi_col, mi_col, mi_col, mi_row, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col ) ; if ( mi_seg_seg_seg_seg_seg_seg_seg_seg_seg_seg_seg_seg_seg_seg_seg_se ( & cpi -> mi_seg_seg_seg_seg_seg_seg_seg_seg_se ( & mi_seg_seg_seg_seg_seg_seg_seg_seg_seg_seg_se ( & mi_seg_seg_seg_se ( & mi_seg_seg_segment_se ( cm, mi_seg_seg_se ( mi_se",0
132,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
133,<S2SV_ModStart> 0 ) { if (! EXT4_GET_BLOCKS_SIZE ) return - EINVAL ;,0
134,<S2SV_ModStart> ; int oe_sockaddr ; struct oe_sockaddr_addr * <S2SV_ModStart> ; int oe_sockaddr ; struct oe_sockaddr = sizeof ( * oe_sockaddr ) ; if (! oe_sockaddr_addr ) { ret = - EINVAL ; goto out ; } if ( <S2SV_ModStart> EINVAL ) { ret = - EINVAL ; goto err = - EINVAL ; } if ( <S2SV_ModStart> E_EINVAL ) { ret = - EINVAL ; goto out ; } ret = <S2SV_ModEnd> ; } <S2SV_null>,0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
136,,0
137,"<S2SV_ModStart> * buf ; unsigned int ret ; buf = kmalloc ( size, GFP_KERNEL ) ; if (! buf ) { ret = kmalloc ( buf, GFP_KERNEL ) ; return - ENOMEM <S2SV_ModEnd> ; } <S2SV_null>",0
138,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
139,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> VP9_COMP_COMP * ctx = & ctx -> frame_colsz ; const frame_index = & ctx -> frame_index ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if (! ctx -> flags ) return NULL ; # endif <S2SV_ModStart> VP9_HIGHBITDEPTH <S2SV_ModEnd> # if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModStart> VP9_HIGHBITDEPTH ) return 0 ; # if CONFIG_VP9_VP9_HIGHBITDEPTH if ( ctx -> flags & YV12_FLAG_HIGHBITDEPTH ) { # if CONFIG_VP9_VP9_VP9_HIGHBITDEPTH ) return 0 ; } # endif <S2SV_ModStart> VP9_HIGHBITDEPTH ; # if CONFIG_VP9_VP9_VP9_HIGHBITDEPTH if ( ctx -> flags & YV12_FLAG_FLAG_HIGHBITDEPTH ) { vpx_set_set_set_set_,0
140,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
141,,0
142,,0
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,<S2SV_ModStart> ( ctx ) <S2SV_ModEnd> ; if (,0
145,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
146,<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd> ) ; },0
147,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
148,,0
149,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj,",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 0,0
151,<S2SV_ModStart> if ( msg -> msg_name <S2SV_ModEnd> ) { if,0
152,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> int bh ; uint8_t <S2SV_ModStart> * bh ; uint8_t bh ; uint8_t bh_t bh ; uint8_t * bh = 0 ; uint8_t * bh ; uint8_t * bh ; uint8_t * bh ; uint64_t bh ; uint8_t * b_t b_t * bh ; uint64_t b_t b_t * bh = 0 ; int b_to_cpu ( bh, bh, bh, bh, bh, b_blocks <S2SV_ModEnd>, bh, <S2SV_ModStart> ( bh, b_block, bh, bh, b_blocks <S2SV_ModEnd>, bh, <S2SV_ModStart>, bh, b_blocks <S2SV_ModEnd> ) ; uint8_t_t",0
153,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
154,,0
155,"<S2SV_ModStart> ; if ( fname == NULL ) { fprintf ( stderr, ""Error: <S2SV_blank> file\\n"" ) ; exit ( fname ) ; } if ( fprintf ( fname ) ) { fprintf ( fname, ""Error: <S2SV_blank> invalid <S2SV_blank> %s\\n"", fname ) ; exit ( fname ) ; } if ( fname ) { fprintf ( fname ) ; } if ( fprintf ( fname, fname ) { fprintf ( stderr, ""Error: <S2SV_blank> %s\\n"", ""Error: <S2SV_blank> %s\\n"", fname ) ; exit ( fname ) ; } if ( fprintf ( fname ) ) { fprintf ( fname ) ; } if ( fprintf ( fprintf ( fname, ""Error: <S2SV_blank> %s <S2SV_blank> %s\\n"", fname ) ; exit ( fname ) ; } if ( fprintf ( fname ) ) { fprintf ( fprintf ( stderr, fname ) ; } if ( fprintf ( fname ) ) { fprintf ( fprintf ( stderr, ""Error: <S2SV_blank> %s\\n"", fname ) ; } if ( f",0
156,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
157,"<S2SV_ModStart> { if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
158,,0
159,"<S2SV_ModStart> ( interface, EINVAL <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, EINVAL <S2SV_ModEnd> ) ; if",0
160,"<S2SV_ModStart> cm, struct vpx_writer * wb <S2SV_ModEnd> * wb )",0
161,"<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
162,<S2SV_ModStart> ; if ( id == NULL ||,0
163,<S2SV_ModStart> 1_array ) ; t1_array = t1_array ( t1_array ) ;,0
164,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE_mode_t subsize_context ( mi_row, mi_row, mi_row, mi_row, mi_row, xd, mi_row, mi_row, mi_row, mi_row, xoffset, mi_row, mi_row, bsize ) ; <S2SV_ModStart> = bsize ; if ( bsize!= BLOCK_8X8X8X8 ) { BLOCK_SIZE ( bsize, bsize, bsize, bsize, bsize, bsize ) ; return 0 ; } <S2SV_ModStart> ) ; } memset <S2SV_ModEnd> ( bsize, <S2SV_ModStart> ) ; } memset ( bsize, bsize, bsize, bsize, bsize, xd, mi_row, bsize, bsize, bsize, mi_row, bsize, bsize ) ; if ( bsize!= BLOCK_8X8X8X8X8 ) { bsize = BLOCK_log2_set ( bsize, bsize, bsize, bsize, bsize, bsize ) ;",0
165,<S2SV_ModStart> key ) ; ret = <S2SV_ModEnd> key_read ( key,0
166,,0
167,"<S2SV_ModStart> case BPF_ALU64 : { coerce_reg_reg_to_size ( & src_reg, 4 ) ; coerce_reg_reg_size ( dst_reg, 4 ) ; <S2SV_ModStart> ( dst_reg, 4 <S2SV_ModEnd> ) ; }",0
168,,0
169,,0
170,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> VP9EncoderConfig <S2SV_ModEnd> vp9_ctx ( VP9EncoderConfig <S2SV_ModEnd> * const VP9EncoderConfig <S2SV_ModStart> VP9_CODEC_COMMON * const VP9EncoderConfig <S2SV_ModEnd> * const VP9EncoderConfig <S2SV_ModStart> VP9_CODEC_COMMON * const VP9_COMMON * const VP9EncoderConfig <S2SV_ModEnd> * const VP9EncoderConfig <S2SV_ModStart> svc = & VP9_CODEC_COMPACK_ENCODEC_INVALID_ENCODEC_INVALIDX <S2SV_ModEnd> ; if ( <S2SV_ModStart> svc ) { size_t <S2SV_ModEnd> if ( i <S2SV_ModStart> svc ) { VPX_CODEC_ENCODEC_LOG_ERROR <S2SV_ModEnd> ( & <S2SV_ModStart> svc ) ; } return VPX_CODEC_ERROR_INVALID_INVALID_INVALIDDATA <S2SV_ModEnd> ; } <S2SV_null>,0
171,,0
172,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> char * <S2SV_ModStart> char * end ; int <S2SV_ModStart> char * end ; char * end_start = strlen ( str, char * str, char * end_start ) ; if ( strlen ( strlen ) == '\\n"" ) { char * end_end = NULL ; char * end_end = strncpy_end ; char * end_end = str ; char * end_end = str ; char * end_end = strlen ( char * ) ; if ( strlen ( str ) == '\\\\' ; if ( is_end == '\\n"" ) { if ( is_end == '\\n"" ) { return NULL ; } <S2SV_ModStart> == NULL ; } else { char * end = str_end ; if ( strlen ( str, str ) == '\\n"" ) { if ( is_end == '\\n"" ) { if ( is_end == '\\n"" ) { if ( is_end == '\\n"" ) { return NULL ; } <S2SV_ModEnd> if (! <S2SV_ModStart> == NULL ; } <S2SV_ModEnd> if (! <S2SV_ModStart> == NULL ;",0
173,,0
174,,0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
176,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",1
177,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> int mi_row, <S2SV_ModStart> int mi_row, mi_col, mi_row, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_row, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col ) ; if ( cpi -> mi_row > MODE_INFO * mi_col ) { MODE_INFO * mi_INFO * cm = & cpi -> mi_row, mi_row, mi_row, mi_col, mi_col ) ; if ( cpi -> mi_row > mi_col ) { MODE_INFO * mi_cols ( cm -> mi_cols, mi_cols, mi_row, mi_row, mi_col, mi_row, mi_col, mi_row, mi_row, mi_row, mi_col, mi_cols, mi_col, mi_col, mi_col, mi_col",0
178,,0
179,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ip_options_options_options_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( struct ip_options_options_rcu <S2SV_ModEnd> * optlen, <S2SV_ModStart> ) { struct ip_options_options_rcu <S2SV_ModEnd> * opt =",0
180,<S2SV_ModStart> ; if ( osStrchr <S2SV_ModEnd> ( info ->,0
181,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
182,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( g_debug,0
183,<S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; },0
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
186,<S2SV_ModStart> ) ; } ND_TCHECK ( & bp [ 0 ] ) ;,0
187,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
188,<S2SV_ModStart> * jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t,0
189,,0
190,,0
191,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
192,"<S2SV_ModStart> ( bufsize, UINT32_MAX / 4",0
193,<S2SV_ModStart> ( r ) <S2SV_ModEnd> ; if (,0
194,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
195,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static tran_low_t <S2SV_ModEnd> * tran_low_t <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> temp, tran_low_t <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> ) ; tran_low_t",0
196,"<S2SV_ModStart> else if ( g_str_prefix <S2SV_ModEnd> ( arg,",0
197,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> null> <S2SV_null> <S2SV_null> static,0
198,<S2SV_ModStart> 0 ) { ND_TCHECK2 ( * tptr ) ;,0
199,"<S2SV_ModStart> ( ctxt -> input, NULL <S2SV_ModEnd> ) ; }",0
200,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
201,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src,",0
202,"<S2SV_ModStart> ( fc ) ; memset ( fc, 0, sizeof ( fc ) ) ;",0
203,"<S2SV_ModStart> ( 1.0f = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMin <S2SV_ModEnd> ( 1.0f,",0
204,,0
205,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi ->,0
206,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
207,"<S2SV_ModStart>, NULL, <S2SV_ModEnd> ) ; }",0
208,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
209,,0
210,,0
211,,0
212,<S2SV_ModStart> { if ( rec_len > 0 &&,0
213,<S2SV_ModStart> ++ ) { <S2SV_ModEnd> if ( len,0
214,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
215,,0
216,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
217,<S2SV_ModStart> NULL ) { <S2SV_ModEnd> return ret ;,0
218,<S2SV_ModStart> bus ) ; if ( bi == NULL ) return ;,0
219,<S2SV_ModStart> msg -> msg_namelen <S2SV_ModEnd> ) ; },0
220,<S2SV_ModStart> ; char * t <S2SV_ModEnd> ; if (,0
221,"<S2SV_ModStart> ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
222,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
223,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
224,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
225,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> mode_mode_mode ( cpi <S2SV_ModStart> { if ( cpi <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> { if ( cpi -> oxcf. mode_mode == 0 && cpi -> oxcf. use_mode == KEY_FRAME ) return 0 ; } <S2SV_ModEnd> if ( cpi,0
226,<S2SV_ModStart> else if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1 <S2SV_ModStart> { if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1,1
227,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
228,,0
229,<S2SV_ModStart> ; return - EINVAL <S2SV_ModEnd> ; if (,0
230,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
231,,0
232,,0
233,,0
234,"<S2SV_ModStart>, type_comment, string type_comment",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) break ;",0
237,,1
238,<S2SV_ModStart> free_cl ) ; <S2SV_ModEnd> free_skb ( &,0
239,<S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; psf ->,0
240,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
241,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
242,"<S2SV_ModStart> perf_event ) { <S2SV_ModEnd> event_context * ctx <S2SV_ModStart> event ) ; perf_event_ctx_lock ( event, ctx ) ; perf_event_ctx_lock ( event, ctx ) ; perf_event_ctx_unlock ( event, ctx ) ; perf_event_ctx_unlock ( event, ctx ) ; perf_event_ctx_lock ( event, ctx ) ; perf_unlock ( event ) ;",0
243,<S2SV_ModStart> ; int i <S2SV_ModEnd> ; if (,0
244,<S2SV_ModStart> if ( tptr == 0,0
245,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
246,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src,",0
247,<S2SV_ModStart> ; if ( ( * ptr_txx < 0 ) && (,0
248,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
249,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
250,,0
251,<S2SV_ModStart> 0 ) { if ( len < offset ) return - EINVAL ;,0
252,<S2SV_ModStart> ( server. ds_enabled <S2SV_ModEnd> ) ; },0
253,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
254,<S2SV_ModStart> book -> dim && i < n,1
255,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
256,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> sb2SV_null> <S2SV_null>,0
257,,0
258,"<S2SV_ModStart> = 0 ; memset ( & sk, 0, sizeof ( * sk ) ) ;",0
259,<S2SV_ModStart> sock ) ; sctp_ret = 0 ; <S2SV_ModStart> sock ) ; sctp_free ( sctp_protocol ) ;,0
260,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
261,,0
262,"<S2SV_ModStart> ( interface, EINVAL <S2SV_ModEnd> ) ; if",0
263,<S2SV_ModStart> = arg ; memset <S2SV_ModEnd> ( & x ->,0
264,"<S2SV_ModStart> ; if ( safe_calloc <S2SV_ModEnd> ( name_name, <S2SV_ModStart>, sizeof ( name_name ) ) <S2SV_ModEnd> ; if (",0
265,,0
266,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> rc -> avg_frame_frame_frame_frame_interval <S2SV_ModStart> rc -> avg_frame_frame_frame_frame_frame_bandwidth <S2SV_ModEnd> ) ; },0
267,"<S2SV_ModStart> ( stderr, ""clone"" <S2SV_ModEnd> ) ; }",0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,<S2SV_ModStart> ; # endif # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( <S2SV_ModStart> ) ) { # if CONFIG_VP9_HIGHBITDEPTH,0
270,<S2SV_ModStart> ; if ( opt_is_fixed <S2SV_ModEnd> ( opt ->,0
271,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
272,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat,0
273,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> intra_sse ; PREDICTION_MODE <S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH PREDICTION_MODE <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_sse = 0 ; # if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_sse = 0 ; # endif # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_sse = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_sse = 0 ; # if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if (,0
274,<S2SV_ModStart> ; h = h <S2SV_ModEnd> ; h =,0
275,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
276,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
277,,0
278,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static char * a <S2SV_ModEnd> ; int <S2SV_ModStart> ; if ( * p = a -> path [ 1 ] == '\\0' || ( a -> name [ 1 ] == '\\0' ) || ( a -> name [ 1 ] == '\\0' ) || ( a -> name [ 1 ] == '\\0' || ( a -> name [ 1 ] == '\\0' ) == '\\0' || ( a -> name [ 1 ] == '\\0' && a -> path [ 1 ] == '\\0' && a -> name [ 1 ] == '\\0' && a -> name [ 1 ] == '\\0' && a -> name [ 1 ] == '\\0' || ( a -> name [ 1 ] == '\\n"" ) == '\\n"" ) ; if ( a -> name [ 1 ] == '\\0' || ( a -> name [ 1 ] == '\\0' || ( a -> name [ 1 ] == '\\n"" ) || ( a -> name [ 1 ] == '\\n"" ) ) ; if ( a -> name [",0
279,<S2SV_ModStart> struct iinfo * iinfo <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto out_len <S2SV_ModEnd> ; if (,0
280,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
281,"<S2SV_ModStart> q -> qctx, fq -> q",0
282,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
283,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
284,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
285,<S2SV_ModStart> key_data ) ; kfree ( key_data ) ;,0
286,<S2SV_ModStart> ] << 2 <S2SV_ModEnd> ; if (,0
287,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
288,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
289,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
290,<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( cpi ->,0
291,<S2SV_ModStart> image_info ) ; ( void ) NULL ;,0
292,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> * p ; int <S2SV_ModEnd> char * p <S2SV_ModStart> str ) { PyErr_DECREF ( ""Invalid <S2SV_blank> packet"" ) ; return NULL ; } if ( * p <S2SV_null> <S2SV_null>",0
293,"<S2SV_ModStart> char * cp, int <S2SV_ModEnd> ) { int <S2SV_ModStart> = 0 ; <S2SV_ModEnd> strchr ( cp <S2SV_ModStart> ) ; } <S2SV_ModEnd> strchr ( cp <S2SV_ModStart> ) ; if ( strchr <S2SV_ModEnd> ( stderr, <S2SV_ModStart> ) == 0 <S2SV_ModEnd> ) { int",0
294,"<S2SV_ModStart> void write_literal <S2SV_ModEnd> ( w,",0
295,"<S2SV_ModStart> 0 ) ; memset <S2SV_ModEnd> ( oci,",0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,<S2SV_ModStart> ) { return ERROR_INV_SLICE_T <S2SV_ModEnd> ; } },0
298,,0
299,<S2SV_ModStart> err ; } if ( err < 0 ) goto error ;,0
300,"<S2SV_ModStart> -> columns, number_filled <S2SV_ModEnd> ) ; }",0
301,<S2SV_ModStart> = state -> <S2SV_ModEnd> state -> state,0
302,"<S2SV_ModStart>, key_data, ret <S2SV_ModEnd> ) ; if",0
303,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
304,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, length )",0
305,<S2SV_ModStart> ) { Py_RETURN_NONE <S2SV_ModEnd> ; if (,0
306,<S2SV_ModStart> if (! dev ) return - EINVAL,0
307,"<S2SV_ModStart> int arg, <S2SV_ModEnd> struct perf_event_context * <S2SV_ModStart> return ret ; <S2SV_ModEnd> return ret ; <S2SV_ModStart> return ret ; <S2SV_ModEnd> } <S2SV_null>",0
308,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> intra_mode_mode_mode ( VP9_COMMON <S2SV_ModStart> * cm, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> intra_mode_mode_mode_mode_ext, FRAME_COUNTS * counts",0
309,"<S2SV_ModStart> cpi, NULL <S2SV_ModEnd> ) ; if",0
310,,0
311,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
312,,0
313,,0
314,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> t const VP9_COMMON_COMMON <S2SV_ModStart> * const vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> t ) ; vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> t ) ; vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> t ) ; vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> t ) ; vpx_write_bit <S2SV_ModEnd> ( w,",0
315,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct vpx_wb_write_buffer <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) { vpx_write_bit_buffer <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_write_buffer <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_write_buffer <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; memcpy <S2SV_ModEnd> ( wb,",0
316,,0
317,"<S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
318,<S2SV_ModStart> 0 ) { if ( mnt < 0 ) break ;,0
319,,0
320,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
321,,0
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb )",0
323,,0
324,,0
325,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
326,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> char *,0
327,"<S2SV_ModStart>, 1, <S2SV_ModEnd> ) ; }",0
328,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
329,,1
330,,0
331,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
332,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
333,"<S2SV_ModStart> ; if ( LOG_DEBUG ( LOG_DEBUG ) ) { log_warn ( LOG_DEBUG, ""ERROR"" ) ; exit ( LOG_DEBUG ) ; } else { log_warn ( LOG_DEBUG, ""ERROR"" ) ; } if ( LOG_DEBUG ) { LOG_ERROR_DEBUG ( LOG_DEBUG, ""WARNING: <S2SV_blank> DEFAULT_DEBUG"" ) ; return - 1 ; } else { log_warn ( LOG_DEBUG ) ; } else { log_warn ( LOG_DEBUG ) ; } else { LOG_ERROR ( LOG_DEBUG, ""ERROR: <S2SV_blank> ROBLOCK_DEBUG <S2SV_blank> ERROR: <S2SV_blank> ROOPTIONS"" ) ; }",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,<S2SV_ModStart> ; } } if (,0
336,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
338,,0
339,,0
340,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
341,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
342,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
343,,0
344,<S2SV_ModStart> ) ) ; if ( psf -> header. ptr < psf -> header. indx ) break ;,0
345,"<S2SV_ModStart> ( ResourceLimitError, ""ImproperImageHeader"" <S2SV_ModEnd> ) ; }",0
346,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src,",0
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> void vp9_m8x8x8_m8x8_m8x8x8x8_m8x8_m8_m8_m8x8x8 ( vpx_m8x8x8_m8_m8x8_m8 ( vpx_m8x8x8_m8x8x8x8_m8_m8x8_m8_m8 ( vp9_m8x8_m9_m8x8x8_m8_m8 ) ; vp9_m8x8_m8 ( vpx_m8x8_m8_m8x8x8x8_m8 ) ; vp9_m8_m8_m8_m8x8_m8_m8 ( vp9_m8_m8_m8_m8x8x8_m8_m8 ) ; vp9_m9_m8 ( vp9_m8,0
348,"<S2SV_ModStart> ( req, EINVAL <S2SV_ModEnd> ) ; if",0
349,<S2SV_ModStart> if (! vpx_bit_buffer <S2SV_ModEnd> ( & frame,0
350,<S2SV_ModStart> size ) { ASSERT_NO_SIZE_OVERFLOW ( size ) ;,1
351,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
352,"<S2SV_ModStart> ) ; } memset ( req, sizeof ( req ) ) ;",0
353,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } if (,0
354,"<S2SV_ModStart> = 0 ; memset ( & req, 0, sizeof ( req ) ) ;",0
355,"<S2SV_ModStart> ( ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, 0 )",0
356,,0
357,,0
358,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> fmode_t fmode_t fmode <S2SV_ModEnd>, fmode_t fmode <S2SV_ModStart>, fmode, fmode <S2SV_ModEnd> ) ; if",0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> * const tran_low_t <S2SV_ModStart> * const tran_low_t <S2SV_ModEnd>, int64_t <S2SV_ModStart> int64_t * const tran_low_t <S2SV_ModEnd>, int64_t <S2SV_ModStart> int64_t * sse ; const uint8_t * const uint8_t * const uint8_t * const sse = & cpi -> common ; const uint8_t * const uint8_t * const sse = & cpi -> common ; const int64_t * cpi -> common ; const uint8_t * const uint8_t * const int64_t * out_t * out_t * sse = & cpi -> common ; int64_t * const uint8_t * out_t * sse = & cpi -> common ; int64_t * sse = & cpi -> common ; int64_t * cpi -> common ; const uint8_t * const uint8_t * out_t * const uint8_t * out_t *",0
361,<S2SV_ModStart> ; if ( pmd_trans_huge_or_trans_huge_huge_or_huge_trans_huge_huge_or_huge_or_huge_huge_or_huge_huge_huge_huge_or_huge_huge_huge_huge_huge_huge_huge_huge_huge_or_huge_huge_huge_or_huge_huge_huge_huge_huge_or_huge_or_huge ( vma_huge_huge_huge_huge_huge_or_or_huge_huge_huge_or_or_huge_huge_huge_or_huge_or_huge_huge_huge_huge_huge_or_huge_huge_huge_or_or_or_huge_huge_or_or_or_huge_huge_huge_huge_or_or_or_huge ( vma_clear_huge ( vma_huge_huge_huge_huge_huge_huge_huge_huge_huge_huge_or_huge ( vma ) ) ;,0
362,<S2SV_ModStart> NULL ; return NULL <S2SV_ModEnd> ; if (,0
363,<S2SV_ModStart> void write_segmentation ( vpx_reader <S2SV_ModEnd> * r ),0
364,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr1,",0
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,,0
367,"<S2SV_ModStart> ( interface, EINVAL <S2SV_ModEnd> ) ; if",0
368,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
369,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
370,<S2SV_ModStart> ( pmd ) <S2SV_ModEnd> ; if (,0
371,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ] ) { int fprintf ( fprintf <S2SV_ModEnd>, argbuf, <S2SV_ModStart> arg ) ; if ( fprintf ( argbuf, argbuf, argbuf ) ) { fprintf ( stderr, 4 ) ; return 1 ; } <S2SV_ModStart> ] ) ; if ( fprintf ( fprintf ( stderr, 4 ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %d\\n"", argbuf ) ; return 1 ; } <S2SV_ModStart> 0 ) ; } if ( fprintf ( fprintf ( stderr, fprintf ( fname ) ) ) ; return 1 ; } <S2SV_ModStart> ) ; } if ( fprintf ( fprintf ( stderr, fd ) ) ; return 1 ; }",0
372,,0
373,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> vpx_codec_alg_priv_priv_t * ctx <S2SV_ModEnd> ) { VPX_CODEC_OK <S2SV_ModStart> cfg ) { VPX_CODEC_CODEC_OK <S2SV_ModEnd> ; vpx_codec_alg_alg_priv_priv_priv_t ( vpx_alg_priv_priv_t * sizeof ( ctx ) ) ; priv = ( priv ) ; vpx_codec_alg_alg_priv_priv_t ( vpx_t * ) ; priv = ( vpx_codec_alg_priv_priv_priv_t * ) priv ; if (! ( priv ) ) { priv = ( vpx_codec_alg_priv_priv_t * sizeof ( priv ) ) ; priv = ( priv -> cfg ) ; priv -> priv = ( vpx_codec_alg_priv_priv_t * ) ; if (! (! ( priv ) ) ) return VPX_CODEC_ENCODEC_CODEC_ENCODEC_OK ; priv = ( vpx_ENCODEC",0
374,,0
375,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
376,,0
377,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC28J60_MICMD <S2SV_ModEnd> ) ; if",0
378,<S2SV_ModStart> char * fmt <S2SV_ModEnd> ; if (,0
379,,0
380,<S2SV_ModStart> = NULL ; if ( new_type == NULL ) { free_object = - 1 ; },0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,<S2SV_ModStart> p_enc ) ; <S2SV_ModEnd> if (!,0
384,,0
385,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
386,<S2SV_ModStart> ; memset <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
388,<S2SV_ModStart> ; if (! data_size ) return AVERROR_INVALIDDATA ; if (,0
389,,0
390,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> unsigned char * <S2SV_ModStart> int mi_y_y_y_y, int motion_y_y, int motion_y_y, int motion_y, int motion_y, int motion_y, int motion_y_y, int motion_y_y_y, int motion_y, int motion_y, int motion_y_y_y ; int motion_y = 0 ; int motion_y = 0 ; int motion_y = 0 ; int motion_y = 0 ; int motion_y ; int motion_y = 0 ; int motion_y_y = 0 ; int motion_y = 0 ; int motion_y = 0 ; int motion_y_y = 0 ; int motion_y_y_y_y = 0 ; int motion_y_y_y_y_y_y ; int motion_y_y = 0 ; unsigned int motion_y_y = 0 ; int motion_y_y_y_y ; int motion_y_y_y = 0 ; int motion_y_y",0
391,,0
392,<S2SV_ModStart> ) ; } <S2SV_ModEnd> return 0 ;,0
393,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
394,<S2SV_ModStart> <S2SV_null> <S2SV_null,0
395,<S2SV_ModStart> { if ( inode -> i_sb ) { error = - EINVAL ; goto error ; },0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
397,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
398,"<S2SV_ModStart> ( event, <S2SV_ModEnd> event ) ;",0
399,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( image,0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
401,<S2SV_ModStart> ) { return ERROR_INV_SLICE_T <S2SV_ModEnd> ; } },0
402,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
403,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_matind_t,0
405,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> VP9_HIGHBITDEPTH if ( xd -> mb_ext == VP9_COMMON * xd ) { VP9_COMMON * const xd = & xd -> plane ; const xd = xd -> mb_ext ; const int bh = xd -> plane [ 0 ] ; const mb_ext = xd -> plane [ 0 ]. mb_ext ; const int xd = ( xd -> plane [ 0 ] >> 1 ] >> ( xd -> mb_mb_ext ) >> ( xd -> mb_ext ) >> ( xd ) >> 1 ) >> ( xd ) >> ( xd -> mb_mb_ext ) >> ( xd_h, mb_ext ) >> ( xd ) >> ( xd ) >> ( xd -> mb_mb_ext ) >> ( xd ) >> ( tx_size ) >> ( xd ) >> ( tx_size ) >> ( xd ) >> ( xd ) >> ( xd ) >> ( xd )",0
406,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 8 ) ; <S2SV_ModEnd> src += src_stride",1
407,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
408,,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; } <S2SV_null>,0
410,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
411,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
412,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> uint32_t <S2SV_ModStart>, struct l2p_t * <S2SV_ModStart> * ) ; if ( len < 0 ) return - 1 ; <S2SV_ModStart> len - 1 ; if ( len < 0 ) return - 1 ; <S2SV_ModStart> buf -> length - 1 ; if ( attr_len > 0 ) return - 1 ; if ( * ) return - 1 ;",0
413,,0
414,"<S2SV_ModStart> ( event, <S2SV_ModEnd> event ) ;",0
415,,0
416,<S2SV_ModStart> ; if ( cp == NULL ||,0
417,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
418,,0
419,,0
420,"<S2SV_ModStart>, & rlen, 0",1
421,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TEMP_FAILURE_FAILURE_RETRY ( <S2SV_ModStart> 0 ) ) ; <S2SV_ModEnd> if ( stderr,0
422,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
423,,0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
426,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
427,,0
428,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> <S2SV_null> <S2SV_null>,0
430,<S2SV_ModStart> ; if (! EINVAL ) return - EINVAL ; if (,0
431,<S2SV_ModStart> ( ssize_t ) if (! s_options ) return - 1 ; if (,0
432,<S2SV_ModStart> return 0 ; if ( val == 0 ) return 0 ;,0
433,<S2SV_ModStart> ( page ) <S2SV_ModEnd> ; if (,0
434,<S2SV_ModStart> if (! data [ i ] &&,0
435,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ; uint8_t data <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( buf, ""%s"", ""%s"", <S2SV_ModStart> ) ) ; if ( len < 0 ) { TEMP_FAILURE_FAILURE_ERROR ( ""%s:%d"", ""%s"", ""%s: <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d"", __func__, protocol ) ; goto err ; } if ( data [ 0 ] ) { ret = - 1 ; goto error ; } <S2SV_ModStart> ; } } if ( data [ 0 ] == 0 ] == 0 ) { pr_log ( ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", snprintf ( ""%s"", ""%s"", msg ) ; return ; } <S2SV_ModStart> ; } } } if (",0
436,,0
437,,0
438,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
439,"<S2SV_ModStart> src ) { memcpy <S2SV_ModEnd> ( dst,",0
440,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_row, MACROBLOCKD * mi <S2SV_ModEnd> ) { int <S2SV_ModStart> int mi_row, mi_row, mi_col, mi_col, mi_col, mi_row, mi_col, mi_col, mi_col, mi_col ) ; vp9_row * mi_col = xd -> mi_col ; if ( xd -> mi_col ) { MODE_INFO * mi = xd -> mi_col ; for ( i = 0 ; i = 0 ; i = 0 ; i < 0 ; i ++ mi_row ) { if ( xd -> mi_col ) { vp8x8x8x8x8x8x8x8x8x8x8x8x8x8x16 ( mi_col, mi_row, mi_col, mi_col, mi_col ) ; } # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( xd -> mi_row > mi_row ) { vp9_",0
441,"<S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
442,,0
443,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
444,<S2SV_ModStart> ; if ( skb_frag == NULL ||,0
445,"<S2SV_ModStart> ; if ( osStrchr <S2SV_ModEnd> ( env,",0
446,"<S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & fd )",0
447,<S2SV_ModStart> ctx ) ; <S2SV_ModEnd> free ( ctx,0
448,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
449,<S2SV_ModStart> ctx ) ; <S2SV_ModEnd> if ( ctx,0
450,,0
451,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
452,<S2SV_ModStart> return ret ; if ( ret < 0 ) return - EINVAL ;,0
453,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
454,<S2SV_ModStart> int ret = 0 <S2SV_ModEnd> ; if (,0
455,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> break ; } if ( len <S2SV_null> <S2SV_null>,0
456,,0
457,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
460,<S2SV_ModStart> key_data ) { kfree_data ; kfree ( key_data ) ;,0
461,,0
462,,0
463,<S2SV_ModStart> ) ; return 0,0
464,,0
465,"<S2SV_ModStart>, 1, <S2SV_ModEnd> ) ; }",0
466,,0
467,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
468,,0
469,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
470,<S2SV_ModStart> 0 ) { MATLAB_KO : clone_info = ( QuantumInfo * ) NULL ;,0
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
472,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int bn_zero ( <S2SV_ModStart> 8 ) { bn_len = RLC_OK ; bn_zero ( m, m, m, m, m, m, m, m, m, m, m, m, m, m, m, m, m, m, m, m, m, m, m, m, m, m_len ) ; bn_len = RLC_OK ; bn_zero ( m, m, m, m, m, m, m, m, m, m, m, m, m, m, m, m, m, m, m, m ) ; bn_len = RLC_OK ; bn_zero ( m, m, m, m ) ; bn_len = RLC_OK ; if ( m, m, m, m, m, m, m, m, m, m, m, m, m, m, m, m, m, m, m, m, m, m, m, m, m, m, m, m,",0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
475,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
476,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> VP9_COMMON * <S2SV_ModStart> mbd ; memset <S2SV_ModEnd> ( xd, <S2SV_ModStart> 0 ] ; memset <S2SV_ModEnd> ( xd, <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->",0
477,,0
478,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
479,"<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
480,<S2SV_ModStart> = 0 ; ps_dec -> pu4_ofsts = 0 ;,0
481,"<S2SV_ModStart> int mptctl_ioc ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_ioctl_ioctl_ioctl_ioctl <S2SV_ModEnd> ; if ( <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } <S2SV_null>",0
482,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
483,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
484,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
485,<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; if,0
486,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
487,,0
488,"<S2SV_ModStart> ( interface, ENC624J600_EIR <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC624J600_EIR_FAIL ) <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC624J600_EIR <S2SV_ModEnd> ) ; }",0
489,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
490,<S2SV_ModStart> ; WORD32 ret <S2SV_ModEnd> ; ps_dec ->,0
491,"<S2SV_ModStart> char * name, const char * strlen <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) { if ( strlen ( str ) == 0 ) { return 0 ; } if ( strlen ( str ) == 0 ) { return 0 ; } <S2SV_ModEnd> return 0 ; <S2SV_ModStart> } if ( <S2SV_ModEnd> ( strlen ( <S2SV_ModStart> ) ) ) { <S2SV_ModEnd> return 0 ; <S2SV_ModStart> 0 ; } <S2SV_ModEnd> } if (",0
492,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> spin_lock ( & <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null>,0
493,<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd> ) ; },0
494,,0
495,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
496,<S2SV_ModStart> ) ; } spin_lock_irq ( & ctx ) ;,0
497,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
498,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
499,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
500,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
501,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> cpi ; int <S2SV_ModStart> = 0 ; int <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) { if ( <S2SV_ModEnd> == 0 ) <S2SV_ModStart> == 0 ) { <S2SV_ModEnd> if ( cp <S2SV_ModStart> ) return - 1 ; <S2SV_ModEnd> } if ( <S2SV_ModStart> == 0 ) { <S2SV_ModEnd> if (! <S2SV_ModStart> == 0 ) { <S2SV_ModEnd> if (! <S2SV_ModStart> ) return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> == 0 ) { <S2SV_ModEnd> if (! <S2SV_ModStart> == 0 ) return 0 ; } <S2SV_ModEnd> if ( cp <S2SV_null> <S2SV_null>,0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; p,0
504,"<S2SV_ModStart> ) ; } memset <S2SV_ModEnd> ( cpi,",0
505,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
507,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int bit_depth_depth ; int bit_depth ; int bit_depth = bit_depth ; int bit_depth ; int bit_depth = bit_depth ; bit_depth = bit_depth [ bit_depth ] ; bit_depth [ bit_depth ] ; bit_depth = bit_depth [ bit_depth [ bit_depth ] ; bit_depth [ bit_depth ] = bit_depth [ bit_depth ] ; bit_depth [ bit_depth ] ; bit_depth [ bit_depth ] = bit_depth [ bit_depth [ bit_depth ] ; bit_depth [ bit_depth ] = bit_depth [ bit_depth [ bit_depth ] ; bit_depth [ bit_depth ] = bit_depth [ bit_depth ] ; bit_depth [ bit_depth ] = bit_depth [ bit_depth [ bit_depth ] ; bit_depth [ bit_depth ] ; bit_depth [ bit_depth [ bit_depth ] ; bit_depth [ bit_depth ] = bit_depth [ bit_depth [ bit_depth,0
508,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
509,"<S2SV_ModStart> ; if ( CHILD ( n, n, NCH ( CHILD ( n ) ) ) { if ( CHILD ( CHILD ( CHILD ( n, CHILD ( n ) ) ) == TYPE_COMMENT ) ) { return NULL ; } if (",0
510,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> VP9_HIGHBITDEPTH const <S2SV_ModStart> VP9_HIGHBITDEPTH if ( flags & YV12_FLAG_HIGHBITDEPTH ) { memset <S2SV_ModEnd> ( xd, <S2SV_ModStart> 16 ) ; memset <S2SV_ModEnd> ( y_stride, <S2SV_ModStart> 16 ) ; memset <S2SV_ModEnd> ( y_stride, <S2SV_ModStart> 16 ) ; memset <S2SV_ModEnd> ( dst_stride, <S2SV_ModStart> 16 ) ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( xd -> flags & YV12_FLAG_HIGHBITDEPTH ) { # if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH ) { memset ( dst_HIGHBITDEPTH ) ; } # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( xd -> flags & YV12_FLAG_FLAG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH ) { memset (",0
511,,0
512,"<S2SV_ModStart> i ) ; memset ( & ei, 0, sizeof ( ei ) ) ;",0
513,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> 8 ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_write_bit_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
514,<S2SV_ModStart> { if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; },0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context ->,0
516,"<S2SV_ModStart> ; if ( CHILD ( n, i ) == NULL ) { goto error ; } if ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( n, i ) ) == TYPE_COMMENT ) ) goto error ; } if (",0
517,<S2SV_ModStart> ; memset <S2SV_ModEnd> ( xd ->,0
518,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( interface, ENC624J600_TX_BUFFER_BUFFER <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_TX_RBUFFER_RBUFFER_BUFFER <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_TXRBUFFER_BUFFER, ENC624J600_BUFFER, ENC624J600_TX_BUFFER <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_TXRBUFFER_BUFFER <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_RBUFFER_TXRBUFFER <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_RBUFFER_TXRBUFFER <S2SV_ModEnd> ) ; }",0
519,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
520,,0
521,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
522,<S2SV_ModStart> size_t err ; if ( err < 0 ) goto out ;,0
523,<S2SV_ModStart> event ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
524,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> u32_t <S2SV_ModStart> SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> u16_t <S2SV_ModStart> SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> SV_null> static <S2SV_ModEnd> u16_null> <S2SV_null> static <S2SV_ModStart> S2SV_null> static int <S2SV_ModEnd> u_null> <SV_null>,0
525,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
526,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> status <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC624J600_R_RBUF_R_R_RBUF_RX <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_R_RBUF_R_RBUFFER ) ; if ( ( ( status & KSZ8851_R_R_R_RBUFFER )!= 0 ) return 0 ; <S2SV_ModStart> ( interface, ( interface, KSZ8851_R_R_R_R_R_RBUFFER <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, KSZ8851_R_R_R_RX <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ( interface, KSZ8851_R_R_R_R_RXF_R_RBUF_R_RBUFFER <S2SV_ModEnd> ) ; }",0
527,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
528,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
529,<S2SV_ModStart> 0 ) { if ( len < 0 ) goto invalid_coap_coap_coap_coap_coap_coap_coap_coap_coap_coap_coap_coap_coap_len <S2SV_ModEnd> ) ; },0
530,,0
531,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
532,<S2SV_ModStart> - ENOMEM ; if ( nl_buf ) return - EINVAL,0
533,<S2SV_ModStart> 2 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,1
534,<S2SV_ModStart> b2 ) ; goto out_unlock <S2SV_ModEnd> ; } <S2SV_null>,0
535,,0
536,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
537,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
538,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> * cpi, <S2SV_ModStart> int mi_row, MACROBLOCKD * const tile, MACROBLOCKD * const xd, MACROBLOCKD * const xd = & cpi -> common ; MACROBLOCKD * const xd = & cpi -> mi_row ; MACROBLOCKD * const xd = & cpi -> mbmi_mode ; MACROBLOCK_SIZE bsize = & cpi -> mbmi_mode ;",0
539,,0
540,<S2SV_ModStart> ptr ) ; memset ( * ) ;,0
541,<S2SV_ModStart> ( ctx ) <S2SV_ModEnd> ; if (,0
542,<S2SV_ModStart> 0 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
543,<S2SV_ModStart> event ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
544,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
545,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
546,,0
547,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( len,0
548,,0
549,<S2SV_ModStart> perf_event * event <S2SV_ModEnd> ; if (,0
550,"<S2SV_ModStart> ) ; } memset <S2SV_ModEnd> ( dst,",0
551,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( interface, ENC624J600_ECON2SV_null> <S2SV_null> static <S2SV_ModStart> ( interface, ENC624J600_ECON2SV_null> <S2SV_null> static <S2SV_ModEnd> enc624j600_null> <S2SV_null>",0
552,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> psf ( psf <S2SV_ModStart> psf -> header. indx,0
553,<S2SV_ModStart> ctx ) { <S2SV_ModEnd> if ( ctx,0
554,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> vp9EncoderConfig <S2SV_ModStart> ; const VP9EncoderConfig <S2SV_ModEnd> * const VP9EncoderConfig * <S2SV_ModStart> ; const VP9EncoderConfig <S2SV_ModEnd> ; const VP9EncoderConfig * <S2SV_ModStart> ; const VP9EncoderConfig * const VP9EncoderConfig <S2SV_ModEnd> ; const VP9EncoderConfig * <S2SV_ModStart> ; const VP9EncoderConfig * const VP9_COMP_COMP_COMMON * const cm = & cpi -> common ; cpi -> segf = & cpi -> frame_type == KEY_FRAME <S2SV_ModEnd> ; sf -> <S2SV_ModStart> ; if ( cpi -> flags & cpi -> frame_type == KEY_FRAME ) { if ( cpi -> frame_type == KEY_FRAME ) { if ( cpi -> frame_type == KEY_FRAME_FRAME && cpi -> frame_key == KEY_FRAME ) { vf = 1 ; } else if ( cpi -> frame_type == KEY_FRAME_FRAME == KEY_FRAME ) { vp9_rd_rd_rd_rd_,0
555,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY (,0
556,"<S2SV_ModStart> ( L, 1 <S2SV_ModEnd> ) ; return",0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,"<S2SV_ModStart> char * n, Py_RETURN_NONE <S2SV_ModEnd> ; if (",0
559,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
560,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
561,<S2SV_ModStart> { size_t <S2SV_ModEnd> ; if (,0
562,,1
563,,0
564,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> size, 0 )",0
565,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> pdupkt_len ( struct <S2SV_ModStart> uint_t * pkt_len ) ; if (! fd_len ) return - EINVAL,0
566,,0
567,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
568,<S2SV_ModStart> out_free ; } if (! str ) goto out_free ;,0
569,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> rc -> avg_frame_frame_frame_frame_frame_boost <S2SV_ModStart> rc ) { if ( cpi -> avg_frame_frame_frame_frame_frame_frame_frame == KEY_FRAME ) return VP9EncoderConfig <S2SV_ModEnd> ; } <S2SV_null>,0
570,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct vpx_read_bit <S2SV_ModEnd> * r, <S2SV_ModStart> * r ) vpx_read_read_bit <S2SV_ModEnd> ( r, <S2SV_ModStart> ) ) ; vpx_read_bit <S2SV_ModEnd> ( r,",0
571,"<S2SV_ModStart> : # line 113 <S2SV_ModEnd> ""grammar.y"" { ( * yy""grammar.y"" { yr_grammar.y"" { yr_grammar.y"" { yr_grammar.y"" { yr_grammar.y"" { yr_grammar.c"" { yr_node_node_grammar.c"" { yr_grammar.c"" break ; } } } <S2SV_ModEnd> ""grammar.c"" { <S2SV_ModStart> : # line 6 <S2SV_ModEnd> ""grammar.y""grammar.y"" { yr_grammar.y""grammar.y"" { yr_grammar.c"" { yr_grammar.y"" { yr_grammar.y"" { yr_node_grammar.c"" { yr_grammar.c"" { yr_grammar.y"" break ; } } } } } } } } } } } } } } <S2SV_ModEnd> ""grammar.c_grammar.y"" { <S2SV_ModStart> : # line 6 <S2SV_ModEnd> ""grammar.y""grammar.y"" { yr_grammar.y"" { yr_grammar.y"" { yr_grammar.y"" { yr_grammar.y""",0
572,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> VP9_COMMON * const <S2SV_ModStart> const l ; MACROBLOCKD * const MACROBLOCK * const xd = & cpi -> common ; MACROBLOCKD * const xd = & cpi -> common ; MACROBLOCKD * const tile_info = & cpi -> common ; MACROBLOCKD * const xd = & cpi -> common ; MACROBLOCK_SIZE tx_size = & cpi -> common ; MACROBLOCKD * const mb = & cpi -> common ; MACROBLOCK_SIZE tx_size_t * const coeff = & cpi -> common ; MACROBLOCK_SIZE tx_size_size_t * const coeff = & cpi -> common ; MACROBLOCK_SIZE tx_size_size_t * const coeff = & cpi -> common ; MACROBLOCK_SIZE tx_size_size = BLOCK_SIZE tx_size ; const uint8_t * const frame_t * const frame_t * const,0
573,,0
574,,0
575,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
576,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
577,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY (,0
578,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, 0 )",0
579,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
580,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
581,<S2SV_ModStart> NULL ) { if ( * tmp == NULL ) { zval_cache_hash ( & zval ) ; zval_hashval <S2SV_ModEnd> ) ; },0
582,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
583,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
584,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void ( void ) goto error <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) goto error <S2SV_ModEnd> ; if (,0
585,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
586,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> VP9_COMP_COMP ( VP9_COMP_COMP_COMMON * cm, cm -> seg, cm -> seg, cm -> seg, cm -> seg, cm -> seg_mode_ref_mode_ref_ref_frame_mode_mode ) ; if ( cpi -> seg_mode == KEY_FRAME ) { vp9_seg_seg_frame_seg_seg_seg ( cm, cm -> seg_seg_mode_seg_seg_seg_mode_ref_mode_seg_seg_mode_mode_mode_seg_seg_mode_mode_t <S2SV_ModEnd> ( cm, <S2SV_ModStart> ) ) ; } memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ; } memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> } } memset <S2SV_ModEnd> ( cm ->",0
587,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
588,<S2SV_ModStart> { if ( TEMP_FAILURE_RETRY (,0
589,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
590,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> char input ) { int <S2SV_ModEnd> char strlen ( <S2SV_ModStart> 0 ) ; char * name = strlen ( void ) ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> ( strlen ( <S2SV_ModStart> ) ) { strlen ( ""\\n"" ) ; return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
591,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj,",0
592,"<S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w )",0
593,<S2SV_ModStart> int err ; struct ip_options_rcode * hdr ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> err = - EINVAL,0
594,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static,0
595,"<S2SV_ModStart> else if ( g_str_prefix <S2SV_ModEnd> ( arg,",0
596,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int tile_tile_cols ( VP9_COMMON <S2SV_ModEnd> * tile_col, <S2SV_ModStart> int tile_col, tile_col, tile_col, tile_col, tile_col, tile_col, tile_col, tile_col, tile_col, tile_col, tile_col * tile_col ) { VP9_COMMON * tile_col = & tile_cols -> tile_col ; tile_col * tile_cols = & tile_col ; int tile_col * tile_col ; int tile_col = ( tile_col, tile_col, tile_col ) tile_col ; tile_col = tile_col * tile_col * tile_col ; tile_col * tile_col = tile_col ; tile_col * tile_col = tile_col * tile_col ; tile_col = tile_data -> tile_col ; tile_col = 0 <S2SV_ModEnd> ( tile_col ) <S2SV_ModStart> ( tile_col, tile_col, tile_col, tile_col, tile_col ) <S2SV_ModEnd> ( tile_col",0
597,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> frame_decode ) { VP9_COMMON * const cm = NULL ; MACROBLOCKD * const cm = & cm -> common ; MACROBLOCKD * const cm = & cm -> frame_decode ) ; vp9_decode = NULL ; vp9_decode = 0 ; vp9_decode_decode ( cm, & cm -> frame_decode ) ; vp9_decode_decode = 0 ; if ( cm -> frame_decode ) { VP9_CODEC_CONFIG * const cm = & cm -> frame_decode ) ; vpx_decode = NULL ; vpx_decode = & cm -> frame_decode ) ; vpx_decode = NULL ; vp9_decode = 0 ; } # if CONFIG_VP9_CONFIG_VP9_CONFIG * const cm -> frame_decode = NULL ; # if CONFIG_VP9_VP9_VP9_ENCODES <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ( cm, cm, cm ->",0
598,<S2SV_ModStart> ) ) { return GF_ISOM_ERROR <S2SV_ModEnd> ; } if,0
599,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ipcip_options_options_rcu ( struct ip_options_options_rcu <S2SV_ModEnd> * opt ) <S2SV_ModStart> ) ; opt -> opt = rcu_dereference_protected ( opt -> opt -> opt ) ; if ( opt -> opt -> opt. <S2SV_ModStart> ) opt -> opt. <S2SV_ModEnd> opt -> opt,0
600,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
601,<S2SV_ModStart> ; vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> ; if (,0
602,"<S2SV_ModStart>, & len, 0",1
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
604,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
605,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
606,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static VP9_COMMON * const MACROBLOCK * const x = & cpi -> common ; MACROBLOCK * const x = & cpi -> common ; MACROBLOCK * const x = & cpi -> common ; MACROBLOCKD * const x = & cpi -> common ; MACROBLOCK_SIZE bsize = & cpi -> common ; MACROBLOCK * const mb_ext = & cpi -> common ; MACROBLOCK_SIZE bsize = & cpi -> common ; if ( cpi -> common. subsize == BLOCK_8X8_8X8_8X8X8X8_8X8_8X8X8_8_8_8_8_8x8x8_8_highbd_8x8x8x8x8_lookup ( cpi, x -> common. stride, cpi ) ; if ( cpi -> common. stride == BLOCK_8_8_8_8_8_8_8x8_8_8_8_8_8x8_8",0
607,<S2SV_ModStart> psf ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header. indx,0
608,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> int bit_depth_depth_t bit_depth <S2SV_ModStart> int bit_depth ; int bit_depth = 0 ; int bit_depth = 0 ; int bit_depth = 0 ; if ( bit_depth > 0 ) { int64_depth = 0 ; for ( i = 0 ; i < 0 ; i < 0 ; i ++ ) { if ( i ++ ) return AVERROR_INVALIDDATA ; } if ( GFP_INVALIDDATA ; for ( i < 0 ; i = 0 ; i < 0 ; i ++ ) { if ( i < 0 ; i ++ ) { if ( GFP_KERNEL ) return AVERROR_INVALIDDATA ; } if ( GFP_INVALIDDATA ; } else { if ( g_INVALIDDATA_INVALIDDATA ; } if ( <S2SV_ModStart> ) { int64_t ) return AVERROR_INVALIDDATA ; if ( g_INVALIDDATA ; } if ( i < 0 ) return AVERROR_INVALIDDATA ; if ( g_INVALID,0
609,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
610,,0
611,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
612,<S2SV_ModStart> ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len < 0 ),0
613,<S2SV_ModStart> f ) { sprintf ( outputbuffer <S2SV_ModEnd> ) ; },0
614,<S2SV_ModStart> f ) { sprintf ( outputbuffer <S2SV_ModEnd> ) ; },0
615,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
616,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi,",0
617,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( pbi,",0
618,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
621,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
622,"<S2SV_ModStart> * cpi, vpx_writer <S2SV_ModEnd> * w )",0
623,<S2SV_ModStart> ; r = TEMP_FAILURE_RETRY (,0
624,"<S2SV_ModStart> = 0 ; mutex_lock ( & d -> data_mutex ) ; mutex_lock ( & d -> data_mutex ) ; mutex_unlock ( & d -> data ) ; mutex_lock ( & d -> data_mutex ) ; mutex_lock ( & d -> data1, & d -> data_mutex ) ; mutex_lock ( & d -> data_mutex ) ; state -> data_mutex ) ; state -> data [ 0 ] = 0x80 ; state -> data [ 0 ] = 0x80 ; state -> data [ 0 ] = 0x80 ; state -> data [ 0 ] = 0x80 ; state -> data [ 0 ] = 0x80 ; state -> data [ 0 ] = 0x80 ; state -> data [ 0 ] = 0x80 ; state -> data <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> ( d, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ( d, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ( d -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ( d -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, <S2SV_ModStart> ( d, state -> data <S2SV_ModEnd> ) ; state -> <S2SV_ModStart> ( d -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ( d, <S2SV_ModStart>",0
625,<S2SV_ModStart> ( cfg ) <S2SV_ModEnd> ; if (,0
626,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> int mi_row, <S2SV_ModStart> int mi_row, int mi_row, int mi_row, int mi_row, int mi_row, mi_row, int mi_row, mi_col, mi_col ) ; const int mi_row = 0 ; const int mi_col ; const int mi_col ; const int mi_row = 0 ; const int mbmi_col ; const int mi_row = 0 ; const int mi_cols = 0 ; const uint8_mv_mv = 0 ; const int y_mb_mb_mb ( y_mb ) ; if ( y_mb_stride ) { if ( y_mb_stride ) memset ( y_stride, uv, uv, uv, uv_mb_stride, uv, uv, uv, uv, uv, uv_stride, uv_stride, uv_stride, uv_stride, uv_stride, uv_stride, uv,",0
627,"<S2SV_ModStart> buf ) ; if ( buf == '\\n"" ) { buf_free ( buf ) ; <S2SV_ModStart> buf ) ; }",0
628,<S2SV_ModStart> * cJSON_CreateNumber <S2SV_ModEnd> ( const int,0
629,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int i ; vpx_codec_tile_t * tile_buffers = 0 ; vpx_alloc ( TileInfo * tile_data, tile_data, TileInfo * tile_data, tile_data, tile_data, tile_data -> tile_cols ) ; vpx_buffers = 0 ; tile_tile_data -> tile_buffers = 0 ; tile_data -> tile_data [ 1 ] = 0 ; tile_data -> tile_data = 0 ; tile_data -> tile_data [ 1 ] = 0 ; tile_data -> tile_data [ tile_data -> tile_data. tile_data ] = 0 ; tile_data -> tile_data [ 1 ]. tile_data -> tile_data [ 1 ] = 0 ; tile_data -> tile_buffers = 0 ; tile_data -> tile_buffers = 0 ; tile_data -> tile_buffers = 0 ; tile_data -> tile_buffers [ i ]. tile_tile_tile_data [ tile_data [ 1 ]. tile_",0
630,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
631,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_mode_mode_t seg ( VP9_COMMON * cpi, seg, cpi, seg, seg, cpi -> seg_seg_mode_seg_seg_seg_mode_seg_seg_mode_seg_seg_seg ( & cpi, cm -> seg_seg_seg_mode_seg_seg_seg_seg_seg_seg_seg_seg_seg_se ( seg_r, seg_mode ) ; if ( seg_seg_r_mode == KEY_CONTEXT * cpi ) { int i = get_segment_segment_se ( cm -> seg_segment_segment_se ( cpi, seg, cm -> seg_mode ) ; } else if ( seg_mode == KEY_mode == KEY_FRAME ) { int i = get_se ( seg_seg_se ( seg_",0
632,,0
633,,0
634,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> b ) ) ),0
635,<S2SV_ModStart> return 0 ; if ( * ) return 0 ;,0
636,,0
637,<S2SV_ModStart> ret ; } kfree ( buf ) ;,0
638,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
639,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> opt = 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd> optlen <S2SV_null> <S2SV_null>,0
640,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi ->,0
641,<S2SV_ModStart> 0 ) ; if ( len < 4 ) goto trunc ;,0
642,"<S2SV_ModStart> int mptctl_eventprintk ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_targetinfo <S2SV_ModEnd> ; int ioc",0
643,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
644,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
645,,0
646,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> vpx_read_bit <S2SV_ModEnd> ( r, <S2SV_ModStart> int r, vpx_read_bit <S2SV_ModEnd> ( r, <S2SV_ModStart> 1 ) ; vpx_read_bit <S2SV_ModEnd> ( r,",0
647,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
648,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r )",0
649,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> g_null> <S2SV_null>,0
650,"<S2SV_ModStart> ( ndo, ""%s"", icmp6_tstr <S2SV_ModEnd> ) ) ;",1
651,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
652,<S2SV_ModStart> key ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
653,<S2SV_ModStart> ; tok -> type_comments = 0 ;,0
654,,0
655,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
656,<S2SV_ModStart> = 0 ; size_t addrlen_in = 0 ; <S2SV_ModStart> OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen > OE_RAISE_ERRNO ( OE_EINVAL ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if (! addrlen_out ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
657,,1
658,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
659,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ipv6_txoptions ( struct ipv6_txoptions * ) { struct ipv6_txoptions * opt = np -> opt_to_dereference ( np -> opt ) ; memset ( & final ) ; },0
660,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = 0 ; # if CONFIG_VP9_HDROPT_HIGHBITDEPTH if ( ext4_t ) { # endif <S2SV_ModStart> - EINVAL ; # ifdef CONFIG_HIGHBITDEPTH if ( ext4_t ) { # endif <S2SV_ModStart> - 1 ; # ifdef CONFIG_VP9_HIGHBITDEPTH ) { # ifdef CONFIG_HIGHBITDEPTH ifdef CONFIG_HIGHBITDEPTH ) { # endif <S2SV_ModStart> - EINTERNAL_HIGHBITDEPTH ; break ; } # endif <S2SV_ModStart> ] ; # ifdef CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( xd_t ) { # endif <S2SV_ModStart> - EINTERNAL_HIGHBITDEPTH ) ; # endif <S2SV_ModStart> ] ; # endif <S2SV_ModStart> - 1 ; # endif # ifdef CONFIG_VP9_HIGHBITDEPTH ifdef CONFIG_HOST_HIGHBITDEPTH ifdef CONFIG_HIGHBITDEPTH if ( ( uint32_t ) { size_t ) { if (,0
661,"<S2SV_ModStart> { dm9000WriteReg ( DM9000ReadReg ( DM9000ReadReg ( DM9000_EPCR <S2SV_ModEnd> ) ; dm9000WriteReg ( DM9000_EPCR <S2SV_ModEnd> ) ; dm9000WriteReg <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR ) ; dm9000WriteReg ( DM9000_EPCR_EPCR, DM9000_EPCR_EPCR ) ; dm9000WriteReg ( DM9000_EPCR_EPCR <S2SV_ModEnd> ) ; dm9000WriteReg ( DM9000WriteReg <S2SV_ModStart> ; dm9000WriteReg ( DM9000WriteReg ( DM9000_EPCR ), DM9000_EPCR_EPCR_EPCR <S2SV_ModEnd> ) ; dm9000WriteReg <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR <S2SV_ModEnd> ) ; dm9000WriteReg <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR_EPCR <S2SV_ModEnd> ) ; }",0
662,<S2SV_ModStart> cib ) ; if (! rc ) return - ENOMEM ;,0
663,<S2SV_ModStart> size_t ret = 0 <S2SV_ModEnd> ; if (,0
664,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> step_mv ( int <S2SV_ModStart> intra_err ; int <S2SV_ModEnd> step_mv_mv_mv_mv = get_err ( & cpi -> common. mv, & cpi -> common. mv_err, & cpi -> common. mv_mv_mv_mv_mv_err <S2SV_ModEnd> ) ; int <S2SV_ModStart> ( & cpi -> mv_mv_mv_err <S2SV_ModEnd> ) ; int <S2SV_ModStart> this_mv_mv <S2SV_ModEnd> ) { int <S2SV_ModStart> int64_err ; } memset <S2SV_ModEnd> ( bsize, <S2SV_ModStart> this_mv, old_mv, mbmi_mv, & cpi -> mbmi_mv, new_mv_mv_mv_mv_mv_err <S2SV_ModEnd> ) ; }",0
665,<S2SV_ModStart> hdr ) ; <S2SV_ModEnd> hdr -> h,0
666,<S2SV_ModStart> == 0 ) {,0
667,"<S2SV_ModStart> -> columns, number_filled <S2SV_ModEnd> ) ; }",0
668,<S2SV_ModStart> ( r = <S2SV_ModEnd> ; if (,0
669,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
670,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
671,,0
