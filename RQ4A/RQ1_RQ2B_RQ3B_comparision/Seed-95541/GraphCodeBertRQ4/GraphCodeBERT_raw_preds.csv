,raw_predictions,correctly_predicted
0,<S2SV_ModStart> ; goto out_free <S2SV_ModEnd> ; } <S2SV_null>,0
1,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
2,,0
3,<S2SV_ModStart> c ) { <S2SV_ModEnd> return c ;,0
4,,0
5,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
6,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> 4 ] ; tran_low_t <S2SV_ModEnd> * output [ <S2SV_ModStart> 4 ] ; tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> 4 ] ; tran_low_t <S2SV_ModEnd> * output [ <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] ; tran_low_t <S2SV_ModEnd> ( input, <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tr",0
7,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
8,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> int64_t vp9_err ; int <S2SV_ModStart> int64_err ; int64_t filt filt <S2SV_ModEnd> ; int filt filt <S2SV_ModStart> ; int filt filt filt filt filt <S2SV_ModEnd> ; int filt filt <S2SV_ModStart> ; int filt filt filt <S2SV_ModEnd> ; int filt_err ; int <S2SV_ModStart> = 0 ; int64_t filt filt filt filt <S2SV_ModEnd> ; int <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH break ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH break ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH break ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if",0
9,,0
10,,0
11,<S2SV_ModStart> == 1 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_SIZE_SIZE_SIZE ; <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_SIZE_SIZE_SIZE ; <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_SIZE_BLOCK_SIZE_SIZE_SIZE_SIZE_SIZE_SIZE ; <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_BLOCK_SIZE_SIZE_SIZE_SIZE_SIZE_SIZE_SIZE_SIZE ; <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_SIZE_SIZE_BLOCK_SIZE_SIZE_SIZE_SIZE ; <S2SV_ModStart> ( ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_SIZE_SIZE_SIZE ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE ; <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_SIZE_SIZE_BLOCK_SIZE_SIZE_SIZE_SIZE_SIZE_SIZE_SIZE_SIZE ; <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_SIZE_SIZE_BLOCK_SIZE_SIZE_SIZE_SIZE_SIZE_SIZE,0
12,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> 2SV_null> <S2S2SV_null> <S2SV_null> <S2SV_null>",0
13,<S2SV_ModStart> keyring ) { int dest_keyring ; <S2SV_ModStart> keyring ) ; <S2SV_ModEnd> red -> dest_key <S2SV_ModStart> keyring ) ; <S2SV_ModEnd> red -> dest_key,0
14,,0
15,,0
16,,0
17,,0
18,<S2SV_ModStart> { uid_t inode <S2SV_ModEnd> ; if (,0
19,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
20,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> this_frame ) { const TWO_PASS_PASS <S2SV_ModEnd> * twopass = <S2SV_ModStart> ( twopass, twopass, TWO_PASS_PASS <S2SV_ModEnd> * twopass <S2SV_ModStart> ( twopass, twopass, twopass, twopass, twopass, twopass, twopass, twopass -> twopass, twopass, twopass, twopass, twopass, twopass <S2SV_ModEnd> ) ; double <S2SV_ModStart> ( twopass, twopass, twopass, twopass, twopass <S2SV_ModStart> ( twopass, twopass, twopass, twopass <S2SV_ModStart> ( twopass, twopass, twopass, twopass, twopass <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( twopass, twopass, twopass, twopass <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( twopass, twopass, twopass ) ; }",0
21,<S2SV_ModStart> ; int ret = <S2SV_ModEnd> ; if (,0
22,<S2SV_ModStart> crypto ) ; <S2SV_ModEnd> if ( name,0
23,<S2SV_ModStart> ; line = 0 <S2SV_ModEnd> ; if (,0
24,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
25,<S2SV_ModStart> ] ) ; avio_feof ( pb ) ;,0
26,"<S2SV_ModStart> path, path, path",0
27,<S2SV_ModStart> - EIO ; memset <S2SV_ModEnd> ( io ->,0
28,,0
29,,0
30,<S2SV_ModStart> vpx_codec_alg_priv_t * priv <S2SV_ModEnd> ; switch (,0
31,,0
32,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
33,,0
34,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_START <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_START ) <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_START <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd> ) ; enc28J60_ECON1 <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1, ENC28J60_START <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC28J60_ST <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC28J60_",0
35,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,0
36,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
37,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> yv12_stride ) { <S2SV_ModStart> intra_stride ) { vpx_stride ; memcpy <S2SV_ModEnd> ( ybf -> <S2SV_ModStart> 8 ) ; memcpy <S2SV_ModEnd> ( source, <S2SV_ModStart> 8 ) ; memcpy <S2SV_ModEnd> ( source -> <S2SV_ModStart> 8 ) ; memcpy <S2SV_ModEnd> ( source -> <S2SV_ModStart> 8 ) ; memcpy <S2SV_ModEnd> ( source -> <S2SV_ModStart> 8 ) ; memcpy <S2SV_ModEnd> ( source,",0
38,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> b2S2SV_null> <S2SV_null>,0
39,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (,0
40,<S2SV_ModStart> * opt ; struct ip_options_rcu <S2SV_ModEnd> * opt =,0
41,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
42,,0
43,<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd> ) ; if,0
44,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
45,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
46,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int ret = <S2SV_ModStart> int ret ; if ( ret == 0 ) { ret = - ENOMEM ; <S2SV_ModStart> xattr ) ; <S2SV_ModEnd> return ret ; <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> return ret ;,0
47,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
48,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
49,<S2SV_ModStart> * addr ) <S2SV_ModEnd> ; if (,0
50,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
51,,0
52,<S2SV_ModStart> arg ) ; <S2SV_ModEnd> return 1 ;,0
53,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
54,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
55,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( & cpi,0
56,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> rows ) ; return ( DestroyImageList ( image ) ) ; }",0
57,<S2SV_ModStart> ; if ( <S2SV_ModEnd> dev -> desc.,0
58,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) ; spin_lock",0
59,<S2SV_ModStart> tmp ) { <S2SV_ModEnd> if ( fpath <S2SV_ModStart> ) ; } <S2SV_ModEnd> } if (,0
60,,0
61,"<S2SV_ModStart> ( ndo, ""%s"" <S2SV_ModEnd> ) ; if",0
62,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_stride, vp9_stride <S2SV_ModEnd> ( src, <S2SV_ModStart> src, vpx_buffer <S2SV_ModEnd> ) { const <S2SV_ModStart> src = vpx_buffer <S2SV_ModEnd> ( src,",0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,,0
65,,0
66,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> c_null> <S2SV_null> <S2SV_ModStart> ( obj_null> <S2SV_null>,0
67,,0
68,,0
69,"<S2SV_ModStart> 0 ) { if ( length < 2 ) { ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> 2 ) ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> case L2 : if ( length < 4 ) { ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ) ; return ; } <S2SV_ModStart> case L2 : if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ) ; return ; } <S2SV_ModStart> case L2 : if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; break ; } <S2SV_ModStart> case L2 : if ( length < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> too <S2SV_blank> short"" ) ) ; break ; } <S2SV_ModStart> case L2SV_PRINT ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ; val_16BITS ( ndo, ""AVP <S2SV_blank> short"" ) ; break ;",0
70,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
71,<S2SV_ModStart>,0
72,<S2SV_ModStart> skb ) ; msg -> msg_namelen = 0,0
73,<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi ->,0
74,<S2SV_ModStart> ) ; },0
75,,0
76,<S2SV_ModStart> * c ; const int n = 0 ; <S2SV_ModStart> is_async ) { <S2SV_ModEnd> if (! <S2SV_ModStart> is_async ) { <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( CHILD,0
77,,0
78,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_col ; const VP9_COMMON * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const xd = & cm -> mbmi ; MACROBLOCKD * const xd = xd -> mbmi ; const mbmi_ext = mi -> mi [ 0 ] ; const int mi_cols = mi -> mi_cols ; const int mi_cols = mi_cols ; const int mi_cols = 0 ; const int bh = cm -> mi_cols ; const int bw = cm -> mi_cols ; const int bw = cm -> mi_cols ; const int bw = cm -> mi_ext ; const int bw = cm -> mi_cols ; const int bw = cm -> mi_cols ; const int bh = cm -> mi_cols ; const int bw = cm -> mi_cols ; const int bh = cm -> mi_cols ; const int bw = cm -> mi_mis,0
79,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
80,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
81,<S2SV_ModStart> ; if (,0
82,,0
83,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( ptr,",0
84,<S2SV_ModStart> prev ) { if ( low < low ) return - 1 ;,0
85,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> ic_null> <S2SV_null>,0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,<S2SV_ModStart> ( tmp ) <S2SV_ModEnd> ; if (,0
89,<S2SV_ModStart> ) ; } rcu_read_lock ( ) ;,0
90,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
91,"<S2SV_ModStart> ( ctx, <S2SV_ModEnd> ) ; }",0
92,,0
93,"<S2SV_ModStart> vpx_write_bit_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) { vpx_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_write_literal <S2SV_ModEnd> ( wb,",0
94,<S2SV_ModStart> ) ; memset <S2SV_ModEnd> ( cm ->,0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } m -> msg_namelen = 0 ;,0
97,<S2SV_ModStart> dev ) { <S2SV_ModEnd> return 0 ;,0
98,,0
99,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> g ) { if ( vpx_codec_err_err ( ctx -> ctx -> g_mode == 0 ) && ( ctx -> g_mode == 0 && ( ctx -> g_mode == 0 ) && ( ctx -> ctx -> ctx -> ctx -> g_mode == 0 ) && ( ctx -> g_mode == 0 && ( ctx -> ctx -> g_mode == 0 ) && ( ctx -> g_mode == 0 ) && ( ctx -> g_mode == 0 ) && ( ctx -> g_mode == 0 ) && ( cpi -> ctx -> g_mode == 0 ) && ( ctx -> ctx -> ctx -> ctx -> ctx -> g_mode == 0 ) && ( ctx -> ctx -> g_mode == 0 ) && ( ctx -> g_mode == 0 ) && ( cpi -> cpi -> ctx -> ctx -> ctx -> cpi -> g_mode == ctx -> cpi -> g_mode == 0 ) || ( cpi,0
100,,0
101,<S2SV_ModStart> ; int ret = 0,0
102,<S2SV_ModStart> ; } } if (! zfound = GF_ISOM_FALSE ) { zfound = GF_TRUE ; zfound = GF_ISOM_FILE ; zfound = GF_FALSE ; zfound = GF_TRUE ; zfound = GF_TRUE ; zfound = GF_FALSE ; zfound = GF_TRUE ; zfound = GF_ISOM_FALSE ; zfound = GF_TRUE ; zfound = GF_ISOM_TRUE ; zfound = GF_TRUE ; zfound = GF_TRUE ; zfound = GF_TRUE ; zfound = GF_TRUE ; zfound = GF_TRUE ; zfound = GF_ISOM_FALSE ; zfound = GF_TRUE ; zfound = GF_TRUE ; zfound = GF_TRUE ; zfound = GF_TRUE ; zfound = GF_TRUE ; zfound = GF_TRUE ; zfound = GF_FALSE ; zfound = GF_TRUE ; zfound = GF_TRUE ; zfound = GF_ISOM_TRUE ; break ; },0
103,<S2SV_ModStart>. get_alg_priv_priv ( ctx ) <S2SV_ModEnd> ; if (,0
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> * state ; state = fmode_t fmode <S2SV_ModEnd> ( state, <S2SV_ModStart> ( state, state, fmode <S2SV_ModEnd> ) ; spin_unlock <S2SV_ModStart> ( state, state, fmode <S2SV_ModEnd> ) ; spin_unlock",0
105,<S2SV_ModStart> ) break ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
106,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
107,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
108,<S2SV_ModStart> ; if ( c -> width < 4 ||,0
109,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
110,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
111,<S2SV_ModStart> ) { return <S2SV_ModEnd> ; } <S2SV_null>,0
112,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list )",0
113,"<S2SV_ModStart> ( interface, EINVAL <S2SV_ModEnd> ) ; }",0
114,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
115,,0
116,<S2SV_ModStart> goto out ; <S2SV_ModEnd> if ( msg,0
117,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
118,<S2SV_ModStart> : return ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
119,"<S2SV_ModStart> } else { memset <S2SV_ModEnd> ( 0,",0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
122,<S2SV_ModStart> if (! ret ) { ret = - EFAULT ; } if (,0
123,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
124,<S2SV_ModStart> ; } } if (,0
125,,0
126,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output,",0
127,"<S2SV_ModStart> ( ctx,",0
128,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> x8 ( tran_low_t <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> x8 ] ; tran_low_t <S2SV_ModEnd> * input, tran_high_t <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> x8 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] ; tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_",0
129,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
130,,0
131,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> int mi_cols, <S2SV_ModStart> int mi_col, int mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col ) ; <S2SV_ModStart> segs, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col",0
132,,0
133,"<S2SV_ModStart> = 0 ; memset ( & 0, 0, 0 ) ;",0
134,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModEnd> ; struct oe_addrinfo <S2SV_ModStart> ; struct oe_addr_addr * oe_addr ; struct oe_name = oe_addrinfo * oe_sockaddr ; struct oe_addr * oe_name = sizeof ( struct oe_addr ) OEINVAL ; oe_E_RAISE_ERRNO ( oe_EINVAL ) ; if ( oe_EINVAL ) { ret = - EINVAL ; oe_EINVAL ; goto out ; } memset ( & oe, oe -> oe_addr, & oe -> oe_addr_addr, oe, & oe -> oe_sockaddr, & oe -> oe_sockaddr, & oe -> oe_name ) ; <S2SV_ModStart> return - EINVAL ;",0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
136,<S2SV_ModStart> ) ) { memcpy <S2SV_ModEnd> ( c ->,0
137,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int ret ; int ret ; int ret = kmalloc ( buf, GFP_KERNEL ) ; if (! buf ) return - ENOMEM ; <S2SV_ModStart>, buf, buf <S2SV_ModEnd>, buf, <S2SV_ModStart>, size, buf <S2SV_ModEnd>, size, <S2SV_ModStart> size ) ; if ( buf ) return - ENOMEM ;",0
138,,0
139,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> break ; # if CONFIG_VP9_HIGHBITS2SV_null> <S2SV_null> static,0
140,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
141,,0
142,"<S2SV_ModStart> = getnum ( L,",1
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,<S2SV_ModStart> ( ctx -> priv <S2SV_ModEnd> ) ; if,0
145,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
146,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
147,,0
148,,0
149,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lineno, & PyId_seq ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""lineno\\"" ) ; return 1 ; } else { PyErr_SetString ( PyExc_TypeError, & PyId_TypeError, & PyId_TypeError, & PyId_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\"" ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, & PyExc_TypeError, ""required <S2SV_blank> \\"" <S2SV_blank> field <S2SV_blank> \\"" <S2SV_blank> \\"" <S2SV_blank> \\"" <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; return 1 <S2SV_ModEnd> ; } if",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ i,0
151,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
152,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
153,<S2SV_ModStart> ; # endif # if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModStart> ( ) ; # if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModStart> ( ) ; # if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModStart> ( ) ) ; # if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModStart> ( ) ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( ( ) ) break ;,0
154,,0
155,"<S2SV_ModStart> } if ( fname == NULL ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank> %s\\n"", fname ) ; exit ( fname ) ; } if ( fclose ( fname ) ) { fprintf ( fname ) ; exit ( fname ) ; } if ( fname == 0 ) { fprintf ( fname ) ; return - 1 ; } if ( fname ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank> %s\\n"", fname ) ; return - 1 ; } if ( fname ) { fprintf ( fname ) ; exit ( fname ) ; } if ( fname ) { fprintf ( fname ) ; } fname ) { fprintf ( stderr, ""Error: <S2SV_blank> %s\\n"", fname ) ; exit ( fname ) ; } fprintf ( fname ) ; if ( fname ) { fprintf ( fname ) ; exit ( fname ) ; } if ( fname ) { fprintf ( fname ) ; fprintf ( fname ) ; } if ( fclose ( fname ) { fname ) { fprintf ( fname ) ;",0
156,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
157,"<S2SV_ModStart> { if ( js_doregexec ( J,",0
158,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
159,"<S2SV_ModStart> ( interface, KSZ8851_IS <S2SV_ModEnd> ) ; int <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_IS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR_ISR, KSZ8851_IS <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, KSZ8851_ISR_ISR_IS <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_IS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR_ISR_IS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR_ISR, KSZ8851_IS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR_ISR_ISR_IS <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( interface, KSZ8851_ISR_ISR_ISR_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_IS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR_ISR_ISR_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, KSZ",0
160,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
161,"<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
162,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( sig,0
163,"<S2SV_ModStart> ( t1_array, t1_buf_array ) ; t1_line_buf_buf_array ( t1_buf_buf_array ) ; t1_buf_buf_array ( t1_buf_buf_array, t1_buf_array ) ;",0
164,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> int mi_row, <S2SV_ModStart> BLOCK_SIZE bsize, MACROBLOCKD * bsize, <S2SV_ModStart> BLOCK_SIZE bsize ) { MACROBLOCKD * xd = xd -> mi_row ; MACROBLOCKD * xd = xd -> mi_row ; <S2SV_ModStart>, bsize, mi_row, bsize, bsize, mi_row <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( bsize, bsize, bsize, bsize, mi_row, mi_col ) ; if ( bsize > BLOCK_MODE_MODE_FRAME ) { <S2SV_ModStart> ) ) ; } <S2SV_ModEnd> if ( bsize <S2SV_ModStart> ( bsize, bsize, bsize, bsize, mi_row <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( bsize, mi_col, mi_row, bsize, mi_col, bsize, bsize, bsize, bsize, bsize ) ; if ( bsize > BLOCK_MODE_MODE_MODE_FRAME ) { <S2SV_ModEnd> ( bsize, <S2SV_ModStart> ) ) ; }",0
165,<S2SV_ModStart> key_read ) ; <S2SV_ModEnd> if ( key,0
166,<S2SV_ModStart> u4_first_slice_in_pic = 1 <S2SV_ModEnd> ; ps_dec ->,0
167,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
168,<S2SV_ModStart> dentry ) ; <S2SV_ModEnd> if ( dir,0
169,"<S2SV_ModStart> & fl6, rcu_dereference (",0
170,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int i ; int i ; int svc_frame_count = 0 ; int svc_t svc_ctx -> svc_frame_count = 0 ; uint8_t svc_t svc_buffer [ i ] ; int i ] = 0 ; int i ; int i = 0 ; int i = 0 ; int i = 0 ; int i < svc -> svc_ctx -> svc_frame_count ) svc_count = 0 ; if ( svc -> svc_ctx -> svc. svc. svc_ctx -> svc_ctx -> svc_ctx -> svc_ctx [ i ] == 0 ) svc_ctx -> svc_ctx -> svc_ctx -> svc_ctx [ i ] = 0 ; svc_ctx -> svc. svc_ctx -> svc_ctx [ i ] = 0 ; svc_ctx -> svc_ctx -> svc_ctx -> svc_ctx [ i ] = 0 ; svc_ctx -> svc_ctx -> svc_,0
171,<S2SV_ModStart> ; if ( screen == NULL ) return NULL,0
172,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * end_end ) { if ( * end_end == '\\0' ) { char * end = NULL ; <S2SV_ModStart> == '\\0' ; if ( * end_end == '\\0' ) return NULL ; <S2SV_ModStart> == '\\0' ) { * end = strlen ( * end_end - 1 ) ; if ( * end_end == '\\0' ) return - 1 ; <S2SV_ModStart> == '\\0' ; <S2SV_ModEnd> } else <S2SV_ModStart> == '\\0' ) { * end = str ; <S2SV_ModStart> == '\\0' ; <S2SV_ModEnd> return 0 ; <S2SV_ModStart> == '\\0' ; } <S2SV_ModEnd> return 0 ; <S2SV_ModStart> == '\\0' ; <S2SV_ModEnd> } else { <S2SV_ModStart> } else { * end_start = str ; <S2SV_ModStart> } else { * end = str ; <S2SV_ModStart> } else { * end = str ; } if ( strlen ( str ) == '\\0' ; if (! str ) return 0 ; <S2SV_ModStart> } else { * end = str ; } <S2SV_ModStart> } else { * end = str ; <S2SV_ModStart> } else { * end = str ; } <S2SV_ModStart> } else { * end = str ; } <S2SV_ModEnd> for = str ; <S2SV_ModStart> } else { if (",0
173,,0
174,"<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ptr,",0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
176,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",1
177,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_col ; MACROBLOCKD * mi_col ; MACROBLOCKD * mi_col ; MACROBLOCKD * mi_col ; MACROBLOCKD * mi_col = mi_col ; MACROBLOCKD * mi_col ; MACROBLOCKD * mi_col ; <S2SV_ModStart>, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col ) ; <S2SV_ModStart> ) ; MODE_INFO * mi_col = mi_col ; mi_col = mi_col ; <S2SV_ModStart> -> mi_col, mi_col, mi_col, mi_col, mi_col, mi_col ) ; memset ( mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col ) ;",0
178,<S2SV_ModStart> ) ; return 0 <S2SV_ModEnd> ; if (,0
179,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_options_rcu ( struct <S2SV_ModStart> * ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> * opt ; struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> - EINVAL ; struct ip_options_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> * opt = <S2SV_ModStart> - EINVAL ; if ( opt -> opt. <S2SV_ModStart> + opt. <S2SV_ModEnd> optlen <S2SV_null> <S2SV_null>,0
180,<S2SV_ModStart> ; if (,0
181,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( addr <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( addr,0
182,"<S2SV_ModStart> ) ; } if ( g_settings_privatereports ) { g_warning ( g_copy_file, G_INVALID_INVALID_FILE_FILE_FILE ) ; g_copy_file_name ( ) ; g_file_file_name = g_strdup_file_name ( g_directory, G_INVALID ) ; g_WARNING <S2SV_ModEnd> } if (",0
183,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,,0
186,<S2SV_ModStart> ( bp [ 0 ] <S2SV_ModEnd> ] ; if,0
187,,0
188,,0
189,,0
190,<S2SV_ModStart> dev ) ; <S2SV_ModEnd> } if (,0
191,"<S2SV_ModStart> * data, size_t i <S2SV_ModEnd> ) { int <S2SV_ModStart> ; int i <S2SV_ModEnd> ; if (",0
192,<S2SV_ModStart> ( buf [ 0 ] <S2SV_ModEnd> ) ; if,0
193,<S2SV_ModStart> ; if (! strlen ( r ),0
194,<S2SV_ModStart> { char * p = c -> remote_len <S2SV_ModEnd> ; if (,0
195,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>",0
196,,0
197,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
198,"<S2SV_ModStart> ( tptr, tptr <S2SV_ModEnd> ) ) ;",0
199,,0
200,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
201,<S2SV_ModStart> ) ; } <S2SV_ModEnd> S_null> <S2SV_null>,0
202,<S2SV_ModStart> -> fc ; <S2SV_ModEnd> if ( fc,0
203,"<S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f,",0
204,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } else {,0
205,<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi ->,0
206,"<S2SV_ModStart> ; memset <S2SV_ModEnd> ( buf,",0
207,<S2SV_ModStart> ; } } if (,0
208,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
209,<S2SV_ModStart> ; } } if (,0
210,,0
211,<S2SV_ModStart> * out ; if (! str ) return 0 ;,0
212,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
213,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
214,<S2SV_ModStart> ) ; } spin_lock_irq ( & timer -> lock ) ;,0
215,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
216,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
217,<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY (,0
218,<S2SV_ModStart> di ; } <S2SV_ModEnd> if ( bi,0
219,<S2SV_ModStart> ) ; } msg -> msg_namelen = 0 ;,0
220,<S2SV_ModStart> * s ; <S2SV_ModEnd> while ( s,0
221,"<S2SV_ModStart> = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
222,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
223,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
224,,0
225,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) { # if CONFIG_VP9_HIGHBITS2SV_null> <S2SV_null> static,0
226,<S2SV_ModStart> else if ( bad_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1,0
227,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
228,<S2SV_ModStart> ; size = 0 <S2SV_ModEnd> ; if (,0
229,<S2SV_ModStart> ) { return - EINVAL ; } if (,0
230,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
231,<S2SV_ModStart> ; r = TEMP_FAILURE_RETRY (,0
232,,0
233,,0
234,,0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) break",0
237,,1
238,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } return ;,0
239,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd>, psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> = psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; break ; <S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd> > <S2SV_null>",0
240,,0
241,<S2SV_ModStart> ; line = 0 <S2SV_ModEnd> ; if (,0
242,<S2SV_ModStart> event_context * ctx <S2SV_ModEnd> ; ctx =,0
243,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
244,,0
245,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( & cpi,0
246,"<S2SV_ModStart> ) ; } copy_as_user <S2SV_ModEnd> ( src,",0
247,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } return ;,0
248,<S2SV_ModStart> lua_list ) { <S2SV_ModEnd> return - 1 ; <S2SV_ModStart> ; } } <S2SV_ModEnd> if (!,0
249,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
250,<S2SV_ModStart> ; } } if (,0
251,<S2SV_ModStart> break ; } if ( len < 0 ) return - EINVAL ;,0
252,<S2SV_ModStart> ( server. ds_enabled <S2SV_ModEnd> ) server.,0
253,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
254,<S2SV_ModStart> book -> dim && i < n,1
255,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
256,"<S2SV_ModStart> ; vpx_prob <S2SV_ModEnd> ( s, <S2SV_ModStart> ) ) ; vpx_free <S2SV_ModEnd> ( s )",0
257,<S2SV_ModStart> ; size_t data_size = 0 ; if ( OE_RAISE_ERRNO ( OEINVAL ) OEINVAL,0
258,"<S2SV_ModStart> sk ) ; memset ( & sk, 0, sizeof ( sk ) ) ;",0
259,<S2SV_ModStart> SV_null> <S2SV_null> static,0
260,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
261,,0
262,"<S2SV_ModStart> ( interface, EINVAL <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, KSZ8851_P <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, KSZ8851_P <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, KSZ8851_IS <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, KSZ8851_PRINT32BITS ( interface, KSZ8851_PRINT32BITS ( interface, KSZ8851_P ) <S2SV_ModEnd> ) ; interface",0
263,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
264,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> if ( ret <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( ret,0
265,"<S2SV_ModStart> ) ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
266,<S2SV_ModStart>,0
267,"<S2SV_ModStart> ( path, ""none"" <S2SV_ModEnd> ) ; if",0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
270,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } else {,0
271,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
272,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat,0
273,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> intra_sse ; PREDICTION_MODE <S2SV_ModEnd> intra_sse ; int <S2SV_ModStart> intra_sse ; # if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModStart> intra_sse ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH # if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH break ; # if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH break ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH break ; # if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH break ; # if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH break ; # if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH break ; # if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEP,0
274,<S2SV_ModStart> h -> h = 0 <S2SV_ModEnd> ; if (,0
275,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
276,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
277,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
278,<S2SV_ModStart> ; int a <S2SV_ModEnd> ; if (,0
279,<S2SV_ModStart> - EINVAL ; if ( inode -> i_offset + i_len > inode -> i_len ) goto out ; if ( inode -> i_bytes > inode ) goto out_bytes ; if ( inode -> i_len ) goto out_bytes ; if ( inode -> i_len > b_len ) goto out_len ; if ( inode -> i_bytes > b_len ) goto out_free ; if ( inode ) goto out_free ( inode ) ; if ( inode -> i_len > bs ) goto out_len ; if ( inode -> i_bytes > b_len ) goto out_len ; if ( inode -> i_len ) goto out_len ; if ( inode -> i_bytes > inode -> i_len ) goto out_bytes ; if ( inode -> i_len ) goto out_len = b_len ; if ( inode -> i_len > b_len ) goto out_len ; if ( inode -> i_len > inode -> i_bytes ) goto out_len ; if ( inode -> i_len > b_len ) goto out_len,0
280,<S2SV_ModStart> ] ) { memset <S2SV_ModEnd> ( & lfm,0
281,<S2SV_ModStart> q ) ; <S2SV_ModEnd> return q ;,0
282,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
283,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
284,,0
285,,0
286,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
287,,0
288,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
289,,0
290,<S2SV_ModStart> 1 ) { memset <S2SV_ModEnd> ( ( pbi,0
291,<S2SV_ModStart> ) break ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
292,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> u8 * p <S2SV_ModEnd> ) { int <S2SV_ModStart> u8 ) { Py_DECREF ( u, u, u, u, u, u, u, u, u, u, u, len ) ; if (! buf ) { return 1 ; } else { Py_DECREF ( * ) ; } else { Py_DECREF ( * ) ; } if (! buf ) { return 1 ; } else { PyErr_DECREF ( * ) ; } if (! buf ) { PyErr_DECREF ( * p ) ; } if (! buf ) { PyErr_DECREF ( p ) ; return 1 ; } else { Py_DECODE_NONE ; } <S2SV_ModStart> ) ; } } else { Py_DECREF ( * p, p, p, p, p, p, p ) ; } else { Py_DECREF ( p, p ) ; } } } else { Py_DECREF ( p, p, p ) ; } } if (! buf ) { Py_DECODEV_NONE ) { return 0 ; }",0
293,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
294,<S2SV_ModStart> void write_bit ( vpx_write_bit <S2SV_ModEnd> * w ),0
295,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( & cpi,0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,<S2SV_ModStart> } } } <S2SV_ModEnd> } ps_dec ->,0
298,<S2SV_ModStart> buffer ) ; if ( buffer == NULL ) return NULL ;,0
299,<S2SV_ModStart> ; int err = 0,0
300,"<S2SV_ModStart> ( number_planes, number_planes, number_planes_filled <S2SV_ModEnd> ) ; number_planes_planes_filled",0
301,<S2SV_ModStart> ( state ->,0
302,<S2SV_ModStart> ; if ( key_len == NULL ) return - EINVAL,0
303,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
304,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
305,,0
306,<S2SV_ModStart> ) ; } if (! dev -> desc. bNumEndpoints ) return - ENODEV ;,0
307,<S2SV_ModStart> arg ) { <S2SV_ModEnd> return ret ;,0
308,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> intra_mode_mode_mode ( VP9_COMMON <S2SV_ModStart> * cm, MACROBLOCKD * xd, PREDICTION_MODE <S2SV_ModEnd> ) { PREDICTION_MODE <S2SV_ModStart> intra_mode = vpx_read_mode <S2SV_ModEnd> ( r, <S2SV_ModStart> intra_mode, PREDICTION_MODE <S2SV_ModEnd> * r, <S2SV_ModStart> intra_mode_mode_mode, counts <S2SV_ModEnd> ) ; FRAME",0
309,<S2SV_ModStart> -> ctx ; <S2SV_ModEnd> if ( ctx,0
310,,0
311,<S2SV_ModStart> dev ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
312,,0
313,<S2SV_ModStart> ] ; } if ( eidx < 0 ) return - EINVAL ;,0
314,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int i, vpx_write_bit ( vpx_tree <S2SV_ModEnd> * w, <S2SV_ModStart> int i, vpx_tree, vpx_prob <S2SV_ModEnd> * w, <S2SV_ModStart> p ) { vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> p ) ; vpx_write_bit <S2SV_ModEnd> ( w,",0
315,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> vpx_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> write_bit ) { vpx_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; memcpy <S2SV_ModEnd> ( & cpi",0
316,<S2SV_ModStart> name ) ; <S2SV_ModEnd> if ( name,0
317,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
318,,0
319,,0
320,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> x8 ) { tran_low_t <S2SV_ModEnd> ( w1, <S2SV_ModStart> 2 ) ; tran_low_t <S2SV_ModEnd> ( w1, <S2SV_ModStart> 1 ) ; tran_low_t <S2SV_ModEnd> ( w1, <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] ; tran_low_t ) ; tran_low_t <S2SV_ModEnd> ( w1,",0
321,"<S2SV_ModStart> mnt, false",0
322,"<S2SV_ModStart> cm, struct vpx_write_bit_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm ) { vpx_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 2 ) ; vpx_write_literal <S2SV_ModEnd> ( wb,",0
323,,0
324,,0
325,<S2SV_ModStart> ; int i <S2SV_ModEnd> ; if (,0
326,<S2SV_ModStart> len ) { size_t len = 0 ; <S2SV_ModStart> } else { if ( len < 2 ) { return 0 ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> } else { <S2SV_ModStart> } else { if ( len <S2SV_null>,0
327,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return 1 ;,0
328,"<S2SV_ModStart> len, len, len",0
329,,1
330,<S2SV_ModStart> vpx_codec_alg_priv_t * si,0
331,,0
332,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
333,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,<S2SV_ModStart> ; } } if (,0
336,,0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
338,<S2SV_ModStart>,0
339,,0
340,,0
341,<S2SV_ModStart> i ] ; if ( i -> width > i -> width ) return - 1 ;,0
342,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> literal ( vpx_bit <S2SV_ModStart> ) ) { vpx_write_bit <S2SV_ModEnd> ( w,",0
343,,0
344,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
345,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; break ; }",0
346,"<S2SV_ModStart> ) ; } copy_as_user <S2SV_ModEnd> ( src,",0
347,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> return vpx_writer <S2SV_ModEnd> ( vpx_write_bit_bit ( vpx_bit <S2SV_ModEnd> ( vpx_tree, <S2SV_ModStart> ) ) { return vpx_write_bit <S2SV_ModEnd> ( vpx_bit <S2SV_ModEnd> ( vpx_tree, <S2SV_ModStart> ) ; return vpx_write_bit <S2SV_ModEnd> ( vpx_bit <S2SV_ModEnd> ( vpx_bitstride, <S2SV_ModStart> ) ; return vpx_bit <S2SV_ModEnd> ( vpx_tree, <S2SV_ModStart> ) ; } return vpx_write_bit <S2SV_ModEnd> ( r,",0
348,"<S2SV_ModStart> ( arg, EINVAL <S2SV_ModEnd> ) ; if",0
349,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
350,<S2SV_ModStart> size ) { ASSERT_NO_SIZE_OVERFLOW ( size ) ;,1
351,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
352,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( req,0
353,,0
354,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
355,<S2SV_ModStart> ; int ret = 0,0
356,,0
357,,0
358,"<S2SV_ModStart> * fmode_t fmode_t fmode, <S2SV_ModStart> -> open_flags ; fmode = fmode_t fmode",0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_row, int64_t bsize, int64_t bsize, int64_t bsize, int64_t mi_row, int64_t bsize, int64_t bsize, int64_t bsize, int64_t bsize, int64_t bsize, int64_t bsse ; const int64_t bsse ; const int64_t bsse ; const int64_t bsse = 0 ; int64_t bsse ; const int64_t bsse = 0 ; int64_t bsse ; int64_t dist_t bsse ; const int64_t bsse = bsize ; int64_t bsse ; const int64_t bsse = bsse ; int64_t bsse ; int64_t dist_t bsize ; const int64_t bsse ; const int64_t bdelta_t bsse = bsse ; const uint8_t",0
361,,0
362,<S2SV_ModStart> ; int retval = 0 <S2SV_ModEnd> ; if (,0
363,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
364,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst_ptr1,",0
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,,0
367,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( interface, KSZ8851_TXS2SV_null> 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_TXS2SV_null> <S2SV_null> <S2SV_null>",0
368,,0
369,"<S2SV_ModStart> x0 ) { if ( xd_u8 ( xd_dirqcoeff, xd_t )!= 0 ) { return - EINVAL ; } <S2SV_ModStart> 1 ] ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
370,<S2SV_ModStart> ; if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
371,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
372,,0
373,<S2SV_ModStart> vpx_codec_alg_priv_t * priv <S2SV_ModEnd> ; priv = <S2SV_ModStart> vpx_codec_alg_priv_t priv <S2SV_ModEnd> ; vpx_codec_alg_priv_t * priv <S2SV_ModStart> vpx_codec_priv_t * priv <S2SV_ModEnd> ; priv =,0
374,,0
375,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, data. <S2SV_ModStart> data ) { if ( data == 0 || ( ctx -> data. size == 0 ) || ( ctx -> data. size == 0 ) || ( ctx -> data. size == 0 ) || ( ctx -> data. data. data. size == 0 ) || ( ctx -> data. size == 0 ) || ( ctx -> data. size == 0 ) || ( data. data. size == 0 ) || ( ctx -> data. size == 0 ) || ( ctx -> data. size == 0 ) || ( ctx -> data == 0 ) || ( ctx -> data. data. size == 0 ) || ( ctx -> data. data. size == 0 ) ) return 0 ;",0
376,,0
377,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC28J60_MISTAT, ENC28J60_MIREGADR <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) <S2SV_null>",0
378,<S2SV_ModStart> char * ptr <S2SV_ModEnd> ; if (,0
379,,0
380,,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,,0
384,,0
385,"<S2SV_ModStart> i ] ; memset ( buf, 0, 0, sizeof ( a ) ) ;",0
386,<S2SV_ModStart> ) ; memset <S2SV_ModEnd> ( cpi ->,0
387,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
388,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
389,,0
390,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> intra_yv_yv_stride, int <S2SV_ModStart> intra_yv_y, int motion_y, int motion_y_y <S2SV_ModEnd> ) { int <S2SV_ModStart> intra_y = 0 ; int <S2SV_ModEnd> intra_y = 0 <S2SV_ModStart> 0 ] ; int <S2SV_ModEnd> intra_y = 0 <S2SV_ModStart> 0 ] ; int running_y = 0 ; int running_avg_y = 0 ; int increase_y = 0 ; int increase_y = 0 ; int running_avg_y = 0 ; int running_avg_y = 0 ; int increase_y = 0 ; int increase_y = 0 ; int increase_y = 0 ; int running_avg_y = 0 ; int increase_y = 0 ; int increase_y = 0 ; int64_y = 0 ; int increase_y = 0 ; int is_y = 0 ; int64_y = c -> avg_y = 0 ; int64_y = 0 ; int is_y = 0 ; int64_y = 0 ; if ( c -> avg_y",0
391,,0
392,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return 0 ;,0
393,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
394,<S2SV_ModStart> goto out_dev ; <S2SV_ModEnd> null> <S2SV_null>,0
395,"<S2SV_ModStart> ; new_mb_cache = <S2SV_ModEnd> ( new_cache,",0
396,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
397,<S2SV_ModStart> ) break ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
398,<S2SV_ModStart> size = 0 <S2SV_ModEnd> ; if (,0
399,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
400,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
401,<S2SV_ModStart> } } } <S2SV_ModEnd> } ps_dec ->,0
402,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
403,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
404,<S2SV_ModStart> n ) { jas_seqent_t <S2SV_ModEnd> j ; jas_seqent_t,0
405,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> vp9_block_block ( vp9_block_block_block <S2SV_ModStart> TX_8x8x8x8 ( vp9_block_block_block ( bw, BLOCK_SIZE tx_size, tx_size, int64_t * rd_width, int64_t <S2SV_ModEnd> ) { int <S2SV_ModStart> -> mbmi ; const int bw = ( xd -> mbmi, xd -> mbmi, xd -> mbmi ) ; if ( xd -> mbmi ) > 0 ) { # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> mbmi ) { # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( xd -> mbmi. mbmi ) { # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH ) { # if ( xd -> mbmi_ext4x8x8x8x8x8x8x8",0
406,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 8 ) ; <S2SV_ModEnd> src += src_stride",1
407,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
408,,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header,0
410,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
411,"<S2SV_ModStart>, 1 ) <S2SV_ModEnd> ; if (",0
412,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
413,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( len,0
414,<S2SV_ModStart> value ) ; <S2SV_ModEnd> if ( event,0
415,,0
416,,0
417,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
418,,0
419,,0
420,"<S2SV_ModStart>, & rlen, 0",1
421,<S2SV_ModStart> ; mutex_lock ( & mutex_unlock <S2SV_ModEnd> ) ; mutex_unlock,0
422,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
423,,0
424,<S2SV_ModStart> int i ; jas_uchar <S2SV_ModEnd> buf [ j,0
425,<S2SV_ModStart> ) ; return FALSE,0
426,"<S2SV_ModStart> ; memset <S2SV_ModEnd> ( buf,",0
427,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
428,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> [ psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> [ psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ) ; },0
430,<S2SV_ModStart> (! ret || count > 0,0
431,,0
432,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
433,<S2SV_ModStart> ( page ) <S2SV_ModEnd> ; if (,0
434,,0
435,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
436,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
437,<S2SV_ModStart> ; i += 2 <S2SV_ModEnd> ; break ;,0
438,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
439,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst,",0
440,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_row, int mi_col ; int mi_row <S2SV_ModEnd> -> mb ; <S2SV_ModStart> int mi_col ; int mi_col ; int mi_col ; int mi_row ; int mi_col ; int mi_col ; int mi_col ; int mi_cols ; <S2SV_ModStart> -> mb ; int mi_row, mi_row, mi_col, mi_col, mi_col ) ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( x -> none_HIGHBITDEPTH ) { memset ( x -> mb, xd, x -> mbmi_rows, mi_row, x -> mbmi_col ) ; memcpy ( x -> mb, mi_row, mi_col, 0, 0, 0 ) ; memset ( x -> mb, 0 ) ; memset ( cpi, 0, 0, 0 ) ; memcpy <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ) ) ; memcpy",0
441,"<S2SV_ModStart> ) ) { ND_TCHECK <S2SV_ModEnd> ( ndo, <S2SV_ModStart> len ) ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",0
442,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
443,<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ),0
444,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
445,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
446,"<S2SV_ModStart> int fd ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> = 0 ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> 2 ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> 2, 0 ) <S2SV_ModStart> 2 ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
447,<S2SV_ModStart> ctx ) ; memset <S2SV_ModEnd> ( ctx ->,0
448,"<S2SV_ModStart> 1 ) { vpx_bit_depth <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) ; vpx_lpf_horizontal_4 <S2SV_ModEnd> ( s,",0
449,,0
450,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( screen,0
451,<S2SV_ModStart> ) == ps_stream -> u4_offset,0
452,<S2SV_ModStart> sizeof ( size_t <S2SV_ModEnd> ) ; if,0
453,,0
454,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
455,"<S2SV_ModStart> { if ( name [ 1 ] == '\\0' || ( name [ 0 ] == '\\0' ) && <S2SV_ModStart> case '\\0' : if ( name [ 0 ] == '\\0' || str [ name ] == '\\0' && name [ name ] == '\\0' || ( name [ 1 ] == '\\' || name [ name ] == '\\"" ) || ( name [ 1 ] == '\\' || strncmp ( name [ 1 ] == '\\0' ) ) || ( name [ 0 ] == '\\0' || ( name [ 0 ] == '\\0' ) || ( name [ 0 ] == '\\"" ) ) || ( name [ 0 ] == '\\0' ) || ( name [ 0 ] == '\\0' ) || ( name [ 0 ] == '\\0' || ( name [ 1 ] == '\\0' ) || ( name [ 1 ] == '\\"" ) || ( name [ 1 ] == '\\0' ) || strncmp_path [ 0 ] == '\\0' || ( name [ 1 ] == '\\0' ) || ( name [ name [ 1 ] == '\\0'",0
456,,0
457,<S2SV_ModStart> ; if ( ip_options_rcu <S2SV_ModEnd> ( skb ),0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,<S2SV_ModStart> ; if ( info -> bitmap == 0 ) return 0 ; if (,0
460,,0
461,,0
462,,0
463,<S2SV_ModStart> inode ) ; <S2SV_ModEnd> return 0 ;,0
464,,0
465,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if (,0
466,,0
467,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
468,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return 0 ;,0
469,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> sk ) { struct rcu_dereference ( <S2SV_ModStart> sk ) ; rcu_read_lock ( sk ) ; rcu_dereference ( <S2SV_ModStart> sk ) ; rcu_read_unlock ( ) ; rcu_dereference ( <S2SV_ModStart> sk ) ; },0
470,<S2SV_ModStart> 0 ) ; quantum_info = ( QuantumInfo * ) NULL ;,0
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
472,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int result = RLC_S2SV_null>,0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
475,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
476,<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( x ->,0
477,<S2SV_ModStart> & h ) <S2SV_ModEnd> ; if (,0
478,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> rows ) ; return ( DestroyImageList ( image ) ) ; }",0
479,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
480,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } ps_dec ->,0
481,<S2SV_ModStart> int mptctl_return - EFAULT <S2SV_ModEnd> ; int i,0
482,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
483,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
484,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
485,<S2SV_ModStart> 3 ) ; <S2SV_ModEnd> } if (,0
486,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
487,<S2SV_ModStart> ) { return false,0
488,"<S2SV_ModStart> ( interface, ENC624J600_BUFFER_LEN <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_EIR_LEN <S2SV_ModEnd> ) ; }",0
489,,0
490,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
491,<S2SV_ModStart> char * name <S2SV_ModEnd> ) { char * <S2SV_ModStart> char * name ; if (! strlen ( name ) ) { return 0 ; } <S2SV_ModEnd> char * <S2SV_ModStart> 0 ) { if (! strlen ( str ) ) return 0 ; <S2SV_ModStart> - 1 ; <S2SV_ModEnd> } if (,0
492,<S2SV_ModStart> sk ) ; <S2SV_ModEnd> return sk ;,0
493,,0
494,,0
495,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
496,,0
497,"<S2SV_ModStart> * data, size_t <S2SV_ModEnd> ) { int",0
498,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
499,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
500,<S2SV_ModStart> ; } else if (,0
501,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> char * cp <S2SV_ModStart> ( cp, char * cp, char * cp, int <S2SV_ModEnd> ) { int <S2SV_ModStart> ] ) { if ( cp == '\\n"" ) { if ( cp == '\\n"" ) { if ( cp == '\\n"" ) { if ( cp == '\\n"" ) { cp ++ ; } else { cp ++ ; } else { if ( cp == '\\n"" ) continue ; } else { cp ++ ; } <S2SV_ModEnd> if ( cp ++ <S2SV_ModStart> == '\\n"" ) { if ( cp == '\\n"" ) cp ++ ; } else if ( cp == '\\n"" ) { if ( cp == '\\n"" ) { if ( cp == '\\n"" ) continue ; } else { if ( cp == '\\n"" ) { if ( cp == '\\n"" ) cp ++ ) { cp ++ ; } else { cp ++ ; } else { cp ++ ; } else cp ++ ; } <S2SV_ModEnd> } else <S2SV_ModStart> } else { <S2SV_ModStart> } else { <S2SV_ModEnd> } else { <S2SV_ModStart> } else if ( cp ++ ) cp ++ ; <S2SV_ModStart> } else { if ( cp ++ )",0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,"<S2SV_ModStart>, pix, 0 <S2SV_ModEnd> ) ; if",0
504,"<S2SV_ModStart> best_mv ; memset <S2SV_ModEnd> ( in,",0
505,,0
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
507,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
508,"<S2SV_ModStart> ( interface, EINVAL <S2SV_ModEnd> ) ; }",0
509,"<S2SV_ModStart> ; int i ; if ( TYPE ( CHILD ( n, i ) == TYPE_COMMENT ) i += 1 ; <S2SV_ModStart> ; i += 1 <S2SV_ModEnd> ; if (",0
510,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModEnd> ( xd, <S2SV_ModStart> intra_bufs, <S2SV_ModEnd> ) { DECLARE_AL <S2SV_ModStart> intra_ALIGNEDICTION_AL ) { memset <S2SV_ModEnd> ( xd, <S2SV_ModStart> intra_bufs ) ; memset <S2SV_ModEnd> ( xd, <S2SV_ModStart> 8 ) ; memset <S2SV_ModEnd> ( xd, <S2SV_ModStart> 8 ) ; memcpy <S2SV_ModEnd> ( xd, <S2SV_ModStart> int ) ; memset <S2SV_ModEnd> ( xd, <S2SV_ModStart> int ) ; memset <S2SV_ModEnd> ( xd, <S2SV_ModStart> 8 ) ; memset <S2SV_ModEnd> ( xd,",0
511,,0
512,,0
513,"<S2SV_ModStart> cm, struct vpx_write_bit_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm ) { vpx_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 2 ) ; vpx_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 2 ) ; vpx_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 2 ) ; vpx_write_bit <S2SV_ModEnd> ( wb,",0
514,<S2SV_ModStart> ( optarg ) { <S2SV_ModEnd> return ; },0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context ->,0
516,,0
517,<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,0
518,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( interface, ENC624J600_ECON1 ) { <S2SV_ModStart> ( interface, ENC624J600_ECON1, ENC624J600_ECON2 ) ; <S2SV_ModStart> ( interface, ENC624J600_ECONCE <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_ECONCE ( interface, ENC624J600_EIR, ENC624J600_EIR, ENC624J600_EIR, ENC624J600_TIF <S2SV_ModEnd> ) ; <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_EIR, ENC624J600_ST <S2SV_ModEnd> ) ; <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_ST <S2SV_ModEnd> ) ; <S2SV_ModStart> ( interface, ENC624J600_ECONCE <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_R, ENC624J600_EIR, ENC624J600_",0
519,"<S2SV_ModStart> * rb ; int scanned_args ; int rb_args ; int scanned_args ; int rb_args = rb_args ; int scanned_args ; int rb_args = rb_args ; int scanned_args = rb_args ; int scanned_args = rb_args ; int scanned_args = rb_args ( rb_args ) ; if ( rb_args == 0 ) { rb_args = rb_args -> scanned_args ; rb_args = rb_args ; rb_args = rb_args -> scanned_args = rb_args ( rb_args ) ; rb_args = rb_const_args ( rb_args, & VALUE ) ; } if ( rb_args == 0 ) { int rb_args = rb_args ; rb_args = rb_set ( rb_args, rb_args ) ; rb_args = rb_intern ( rb_const_args ) ; rb_set ( rb_const_args ) ; rb_set ( rb_const_args, rb_",0
520,,0
521,<S2SV_ModStart> out ; } if ( bytes < 4 ) return 0 ;,0
522,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
523,<S2SV_ModStart> handle ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
524,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> c = ( int <S2SV_ModStart> 8 ) { if ( len <S2SV_null>,0
525,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return false ;,0
526,"<S2SV_ModStart> ( interface, EINVAL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_P <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_P <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_RXS2SV_null> <S2SV_null>",0
527,,0
528,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
529,<S2SV_ModStart> 0 ; } <S2SV_ModEnd> } else {,0
530,<S2SV_ModStart> path ) ; <S2SV_ModEnd> } if (,0
531,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
532,,0
533,<S2SV_ModStart> ) break ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
534,<S2SV_ModStart> bq ) ; <S2SV_ModEnd> if ( bq,0
535,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
536,<S2SV_ModStart> ) ; goto out_dentry <S2SV_ModEnd> ; if (,0
537,,0
538,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_col ; PREDICTION_mode_mode ( cpi, mi_row, mi_row, mi_col, mi_col, mi_row, mi_col, mi_row, mi_col, mi_col, mi_row, mi_col, mi_col, mi_col, mi_col, mi_row, mi_col, mi_col, mi_col ) ; if ( cpi -> mi_col > mi_col ) { vpx_free ( bsize, mi_row, mi_col, mi_col, mi_col, mi_col, mi_col, bsize, mi_col, mi_col, mi_col, mi_col, mi_col ) ; }",0
539,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return NULL ;,0
540,,0
541,"<S2SV_ModStart> ( ctx, <S2SV_ModEnd> ) ) ;",0
542,<S2SV_ModStart> ) break ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
543,<S2SV_ModStart> lock ) ; <S2SV_ModEnd> } if (,0
544,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
545,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
546,"<S2SV_ModStart> ) ) { memcpy <S2SV_ModEnd> ( dst,",0
547,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
548,<S2SV_ModStart> length ) { if (! config -> desc. bNumEndpoints < 1 ) { bNumEndpoints = - ENODEV ; goto out ; },0
549,<S2SV_ModStart> size ) ; <S2SV_ModEnd> if ( event,0
550,<S2SV_ModStart> ) ; } memset <S2SV_ModEnd> ( xd ->,0
551,"<S2SV_ModStart> ( interface, ENC624J600_MACROBLOCKD <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC624J600_MAADRING <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC624J600_BUSY <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC624J600_MACON2 ) <S2SV_ModEnd> ) ; interface",0
552,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
553,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, vpx_codec_alg_priv_priv_t priv <S2SV_ModStart> ; if ( priv -> priv <S2SV_ModEnd> == NULL )",0
554,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> vp9_filter ) { const VP9_COMMON * const cm = & cpi -> common ; <S2SV_ModStart> -> common ; vp9_filter = vp9_filter_interval <S2SV_ModEnd> ( sf -> <S2SV_ModStart>, sf -> <S2SV_ModEnd>, sf -> <S2SV_ModStart>, sf -> <S2SV_ModEnd> ; sf ->",0
555,"<S2SV_ModStart> ; int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
556,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,,0
559,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
560,"<S2SV_ModStart> * mb ; memset <S2SV_ModEnd> ( mb,",0
561,,0
562,,1
563,,0
564,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
565,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
566,,0
567,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> n2SV_null> <S2SV_null> static,0
568,<S2SV_ModStart> out_free ; } if (!,0
569,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> int64_t cpi <S2SV_ModStart> ( cpi -> avg_frame_frame_frame_bandwidth <S2SV_ModEnd> ) { int <S2SV_ModStart> = 0 ; if ( cpi -> avg_frame_bandwidth > 0 && cpi -> avg_frame_bandwidth > 0 && cpi -> avg_frame_frame_bandwidth > 0 && cpi -> avg_frame_frame_bandwidth > 0 && cpi -> avg_frame_frame_bandwidth && cpi -> avg_frame_frame_bandwidth > 0 && cpi -> avg_frame_frame_frame_frame_bandwidth > 0 && cpi -> avg_frame_frame_bandwidth > 0 && cpi -> avg_frame_frame_bandwidth > 0 && cpi -> avg_frame_frame_frame_bandwidth > ( cpi -> avg_frame_frame_bandwidth )? 2 : 0 ; } else if ( cpi -> avg_frame_frame_bandwidth * cpi -> avg_frame_frame_bandwidth = ( cpi -> avg_frame_frame_frame_,0
570,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> read_mode ( vpx_reader <S2SV_ModStart> * r, vpx_write_bit <S2SV_ModEnd> ( r, <S2SV_ModStart> ) ; vpx_read_bit <S2SV_ModEnd> ( r,",0
571,"<S2SV_ModStart> } # line 126 ""hex_grammar.y"" { yr_re_node_node_node_node_node_node_node ( * yyvalue_node ) ; <S2SV_ModStart> } # line 107 <S2SV_ModEnd> ""hex_node_grammar.y"" break ; <S2SV_ModStart> : # line 107 <S2SV_ModEnd> ""hex_grammar.y"" break ; <S2SV_ModStart> : # line 11 ""hex_grammar.y"" { yr_re_node_node_node_node_node_node_node_node_node_node_node ( * yyvalue_node ) ; <S2SV_ModStart> ( yyval ) ; }",0
572,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> intra_coef_prob ( MACROBLOCKD * const <S2SV_ModStart> TX_SIZE tx_size ) { MACROBLOCKD * const tran_low_t * const xd = & cpi -> common ; MACROBLOCKD * const xd = & td -> mb ; MACROBLOCKD * const tran_low_prob ; MACROBLOCKD * const x = & ctx -> mb ; MACROBLOCKD * const tran_low_prob ; MACROBLOCKD * const xd = & td -> mb ; tran_low_t * const tran_low_t * const tran_low_t * const xd = xd -> plane [ 0 ] ; tran_low_t * const int64_t * const int64_t * const int64_t * tp9_prob ; const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * tp,",0
573,,0
574,,0
575,,0
576,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
577,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_DONTWAIT )",0
578,"<S2SV_ModStart> len = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, 0 )",0
579,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
580,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
581,<S2SV_ModStart> (! zend ||! zend_null>,0
582,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
583,<S2SV_ModStart> char * buf <S2SV_ModEnd> ; if (,0
584,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
585,<S2SV_ModStart> * st ; <S2SV_ModEnd> const char *,0
586,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> cpi ) { vpx_writer <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ; vpx_writer <S2SV_ModEnd> ( seg,",0
587,"<S2SV_ModStart> ; const struct type_type_type_type_type_type = 0 ; <S2SV_ModStart> ; if (! type_type_type_type ( <S2SV_ModStart> ; if ( type_type_type_type_type_type ( <S2SV_ModStart> ) ) { const int type_type_type_type_type_type_type_type_type_type_type = 1 ; <S2SV_ModStart> ; if (! type_type_type_type_type_type_comment ) return 0 ; <S2SV_ModStart> ; if ( type_type_type_type_type_type_type_type ( <S2SV_ModStart> ; if (! type_type_type_type_type_type_type_type_type ) return 0 ; <S2SV_ModStart> ; if (! type_type_type_type_type_type_type_type ) return 0 ; <S2SV_ModStart> ; if (! type_type_type_type_type_type_type_type_type_type_type_type_type ( <S2SV_ModStart> ) ) ; if (! type_type_type_type_type_type_comment, type_type_type_type_type_type_type_type ) return 1 ; <S2SV_ModStart> ; if ( type_type_type_type_type_",0
588,,0
589,<S2SV_ModStart> ) { memset <S2SV_ModEnd> ( x ->,0
590,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> ( void <S2SV_ModStart> ( void ) { int <S2SV_ModEnd> char * <S2SV_ModStart> 0 ) { if ( void ) { <S2SV_ModStart> char ) ; } <S2SV_ModEnd> char outputbuffer = <S2SV_ModStart> ( void ) { <S2SV_ModEnd> char * <S2SV_ModStart> 0 ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { <S2SV_ModEnd> if (! <S2SV_ModStart> 0 ) { <S2SV_ModEnd> } else { <S2SV_ModStart> } else { <S2SV_ModEnd> } else { <S2SV_ModStart> ] ) ; } <S2SV_ModEnd> } else { <S2SV_ModStart> 0 ) ; } <S2SV_ModEnd> } else { <S2SV_ModStart> } else { <S2SV_ModEnd> } else { <S2SV_ModStart> 0 ) { <S2SV_ModEnd> } else { <S2SV_ModStart> 1 ) ; } <S2SV_ModEnd> } else { <S2SV_ModStart> } } <S2SV_ModEnd> } } } <S2SV_ModStart> } else { <S2SV_ModEnd> } } <S2SV_ModStart> } else { <S2SV_ModStart> } else { <S2SV_ModEnd> } else { <S2SV_ModStart> } } <S2SV_ModStart> } else { <S2SV_ModEnd> } } <S2SV_ModStart> } } <S2SV_ModStart> } else { <S2SV_ModEnd> char ( ) ; <S2SV_ModStart> } else { <S2SV_ModStart> } } <S2SV_ModEnd> char ( ) ;,0
591,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj,",0
592,,0
593,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
594,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
595,,0
596,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> tile_cols ( int <S2SV_ModStart> tile_cols ) { int tile_cols ; <S2SV_ModStart> int tile_tile_col, tile_col, tile_col, tile_col, tile_data -> tile_data, tile_data, tile_col, tile_col, tile_col, tile_col, tile_data -> tile_data, tile_data, tile_col, tile_col, tile_data -> tile_cols ) ; <S2SV_ModStart> ; vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> - 1 ) ; memset <S2SV_ModEnd> ( & tile_tile_cols",0
597,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> vp9_frame_decode ) { VP9_COMMON * const cm = NULL ; MACROBLOCK * const cm = & pbi -> mb ; vpx_codec_get_frame_frame_decode ; vpx_decode = & pbi -> common ; vpx_codec_get_frame_frame ( ) ; vpx_decode_frame_decode = 0 ; vpx_read_decode_decode_frame_decode ( & cm -> last_frame ) ; vpx_decode = 0 ; if ( cm -> last_frame_frame_frame_frame_decode ) { vpx_decode = 0 ; } <S2SV_ModStart> p9_get_frame_decode ) ; vpx_decode = vpx_decode <S2SV_ModEnd> ( cm -> <S2SV_ModStart> p9_decode ) ; # if CONFIG_VP9_VP9_GET_FRAME ) cm -> frame_decode = NULL ; vpx_codec_get_frame_frame_frame_frame_frame_frame_,0
598,,0
599,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> * opt ; struct ip_options_rcu <S2SV_ModEnd> * opt =,0
600,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
601,<S2SV_ModStart> ; # if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> flags & ctx -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( ctx -> flags & ( ctx -> flags & VP9_IMG_FMT_HIGHBITDEPTH ) ) ; <S2SV_ModStart> ) ) ; } else { <S2SV_ModEnd> if ( ctx <S2SV_ModStart> ) ) ; } else { <S2SV_ModEnd> if ( ctx <S2SV_ModStart> ) ; } else { <S2SV_ModEnd> if (! <S2SV_ModStart> ) continue ; } } <S2SV_ModEnd> if ( ctx,0
602,"<S2SV_ModStart>, & len, 0",1
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
604,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
605,"<S2SV_ModStart> ) ) { jas_uchar <S2SV_ModEnd> ( buf,",0
606,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_col ; const VP9_COMMON * const cm = & cpi -> common ; MACROBLOCKD * const xd = & cpi -> mbmi ; MACROBLOCKD * const xd = & cpi -> mbmi ; MACROBLOCKD * const x -> mbmi = & cpi -> mbmi_ext ; MACROBLOCKD * const mbmi = & cpi -> mbmi ; MACROBLOCKD * const x -> mbmi = & cpi -> mbmi ; MACROBLOCKD * const xd = & cpi -> mbmi_ext ; cpi -> mbmi_ext = & cpi -> mbmi_ext ; cpi -> sf = & cpi -> mbmi_ext ; cpi -> oxcf. mbmi_ext = & cpi -> oxcf. mbmi_ext ; vp9_mode_mode_mode_mode = & cpi -> mbmi_mode ; cpi -> sf,0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> [ psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> [ psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> [ psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ) ; },0
608,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> g ) { if ( gb_read_bit_buffer ( gb, GFP_KERNEL ) ) { return AVERROR_INVALIDDATA ; }",0
609,<S2SV_ModStart> { p = osStrchr <S2SV_ModEnd> ( p +,0
610,,0
611,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
612,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
613,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
614,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
615,,0
616,<S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( cpi ->,0
617,<S2SV_ModStart> pbi ) { <S2SV_ModEnd> return 0 ;,0
618,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
621,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
622,<S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> coef_probs [ TX_SIZE,0
623,,0
624,<S2SV_ModStart> * d ; mutex_mutex_lock ( & d -> data_mutex ) ; mutex_mutex_unlock ( & d -> data_mutex ) ; mutex_mutex_unlock ( & d -> data -> data_mutex ) ; mutex_mutex_unlock ( & d -> data_mutex ) ; mutex ( & d -> data_mutex ) ; mutex_mutex ) ; mutex_unlock ( & d -> data_mutex ) ; mutex_mutex_mutex_unlock ( & d -> data_mutex ) ; mutex ( & d -> data -> data_mutex ) ; mutex_mutex_unlock ( & d -> data -> data_mutex ) ; mutex_mutex ) ; mutex_mutex_unlock ( & d -> data_mutex ) ; mutex_mutex_mutex_mutex ( & d -> data -> data -> data_mutex ) ; state -> data [ 0 ] = 0 ; state -> data [ 1 ] = 0 ; state -> data [ 1 ] = 0 ; state -> data [ 1 ] = 0 ; state ->,0
625,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, cfg )",0
626,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mv_ext, vpx_writer <S2SV_ModEnd> * mv_ext, <S2SV_ModStart> int mi_col, vpx_ext, vpx_probs <S2SV_ModEnd> * w, <S2SV_ModStart> intra_stride, vpx_probs [ 0 ] ; vpx_probs [ 0 ] ; vpx_free ( xd ) ; vpx_probs [ 0 ] ; vpx_prob_write_bit <S2SV_ModEnd> ( w,",0
627,<S2SV_ModStart> ; buf = 0 <S2SV_ModEnd> ; if (,0
628,,0
629,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int tile_buffer ) { VP9_COMMON * const tile_buffers = & tile_data -> tile_buffer [ tile_data -> tile_data [ tile_data ] ; vpx_write_buffer ( & pbi -> tile_info ) ; vpx_reader -> tile_info = 0 ; vpx_reader -> tile_info = 0 ; vpx_reader -> tile_info = 0 ; vpx_write_bit_buffer ( ) ; vpx_write_bit_buffer ( ) ; vpx_tile_buffer ( & tile, tile_tile_info -> tile_tile_data, tile, tile, & tile_data -> tile, tile, tile_data -> tile_info ) ; vpx_data -> tile_info = 0 ; vpx_write_buffer ( ) ; vpx_buffer ( & tile_data -> tile_info ) ; vpx_tile_data -> tile_info = 0 ; vpx_data -> tile_info = 0 ; vpx_data ->",0
630,<S2SV_ModStart> if ( len < 0 || len < 0,0
631,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> vp9_convert_q ( VP9_COMPRESSION_REFERENCE_FRAME <S2SV_ModEnd> ) { int <S2SV_ModStart> i ) { int i ; <S2SV_ModStart> i ] ; vpx_prob <S2SV_ModEnd> int i ; <S2SV_ModStart> i ) { vpx_prob <S2SV_ModEnd> i ] ; <S2SV_ModStart> i ) { vpx_prob <S2SV_ModEnd> if ( cpi <S2SV_ModStart> i ) ; vpx_write_bit <S2SV_ModEnd> ( i, <S2SV_ModStart> ) ; vpx_bit <S2SV_ModEnd> ( i, <S2SV_ModStart> i ) ; vpx_write_bit <S2SV_ModEnd> ( i, <S2SV_ModStart> i ) ; vpx_bit <S2SV_ModEnd> ( i, <S2SV_ModStart> i ) ; <S2SV_ModEnd> if ( i <S2SV_ModStart> i ) ; vpx_write_bit <S2SV_ModEnd> ( i, <S2SV_ModStart> i ) ; vpx_bit <S2SV_ModEnd> ( i",0
632,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
633,<S2SV_ModStart> = 0 ; ps_dec -> ps_dec ->,0
634,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> len ) ),0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
636,,0
637,<S2SV_ModStart> ; if ( ret < 0 ) return - EINVAL ;,0
638,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
639,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int rc_socket = 0 <S2SV_ModEnd> ; struct sockaddr_socket <S2SV_ModStart> ; struct sockaddr_socket * <S2SV_ModEnd> ; struct sockaddr_socket * <S2SV_ModStart> ; struct sockaddr_socket * <S2SV_ModEnd> ; struct sockaddr <S2SV_ModStart> ; struct sockaddr_socket * ) { struct sockaddr ; struct sockaddr_rcu * <S2SV_ModStart> ; struct sockaddr ; struct sockaddr_socket * ( sockaddr ) ; struct sockaddr * ) { struct sockaddr ; struct sockaddr_rcu * ( sockaddr * ) ; struct sockaddr_socket = NULL ; struct sockaddr_rcu * ) { struct sockaddr ; struct sockaddr ; struct sockaddr_socket * ( sockaddr ; struct sockaddr_rcu * ) ; struct sockaddr_rcu * ) { struct sockaddr ; struct sockaddr ; struct sock_info = NULL ; struct sockaddr_socket * ) { struct sockaddr_info = NULL ; struct sockaddr_rcu * ( sockaddr_in6 * ) ; struct sock_socket = NULL ; struct sockaddr_rcu = NULL ; struct sockaddr ; struct sockaddr_,0
640,<S2SV_ModStart> ; memset <S2SV_ModEnd> ( cpi ->,0
641,<S2SV_ModStart> ( bp [ 0 ] <S2SV_ModEnd> ) ; if,0
642,<S2SV_ModStart> int mptctl_targetinfo <S2SV_ModEnd> ; int i,0
643,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
644,<S2SV_ModStart> ; if ( jas_uchar <S2SV_ModEnd> ( jas ->,0
645,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } } },0
646,,0
647,"<S2SV_ModStart> * tree, vpx_prob <S2SV_ModEnd> * tree,",0
648,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r )",0
649,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModStart> goto error ; # if CONFIG_VP9_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModStart> ; # if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_VP9_HIGHBITDEPTH switch ( stream -> config ) { switch ( - 1 ) { stream -> config. error = 1 ; } # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_IMG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH ) { break ; } # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_VP9_HIGHBITDEPTH if ( stream -> config.,0
650,"<S2SV_ModStart> ( ndo, ""%sndo_n"" <S2SV_ModEnd> ) ; if",0
651,,0
652,<S2SV_ModStart> key ) ; <S2SV_ModEnd> } if (,0
653,<S2SV_ModStart> ; # endif tok -> type_comments = 0 ;,0
654,,0
655,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
656,<S2SV_ModStart> ; size_t addrlen = OE_RAISE_ERRNO ( OEINVAL ) ; if ( addrlen_out > OE_RAISE_ERRNO ( OEINVAL ) OEINVAL,0
657,,1
658,<S2SV_ModStart> if (! s ) return FALSE ;,0
659,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
660,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( uint32_t ) { int i ; <S2SV_ModStart> int i ; uint32_tried = 0 ; int i = 0 ; <S2SV_ModStart> = 0 ; if ( uint32_t ) { pr_warn ( ""too <S2SV_blank> too <S2SV_blank> short"" ) ; goto error ; } <S2SV_ModEnd> if (! <S2SV_ModStart> int ) { pr_warn ( ""too <S2SV_blank> short"" ) ; goto fail ; } <S2SV_ModStart> ) ; } # if CONFIG_VP9_HDR_HDR_HDR_HIGHBITS ( ""too <S2SV_blank> too <S2SV_blank> short"" ) ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HDR_HIGHBITDEPTH if ( ndo, ""too <S2SV_blank> short"" ) goto out ; break ; break ; } # ifdef CONFIG_VP9_HDR_HIGHBITDEPTH ifdef CONFIG_HDR_HIGHBITDEPTH ) { pr_error ( ""\\n"", ""\\n"" ) ; goto out ; } # ifdef CONFIG_HIGHBITDEPTH ifdef CONFIG_HIGHBITDEPTH if ( <S2SV_ModStart> (",0
661,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> dm9000WriteReg ( DM9000_EPCR_EPCR <S2SV_ModEnd>, dm9000WriteReg ( <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR ) <S2SV_ModEnd> ; dm9000WriteReg ( <S2SV_ModStart> ; dm9000WriteReg ( DM9000WriteReg ( DM9000_EPCR, DM9000_EPCR, DM9000_EPCR_EPCR_EPCR_EPCR <S2SV_ModEnd> ) ; dm9000WriteReg <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPCR_EPCR <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR_EPCR, DM9000_EPCR_EPCR <S2SV_ModEnd> ) ; dm9000WriteReg ( DM9000_EPCR_EPCR_EPCR <S2SV_ModEnd> ) ; } <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR_EPCR",0
662,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
663,<S2SV_ModStart> size = 0 <S2SV_ModEnd> ; if (,0
664,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> intra_err ; const vp9_err_mv_err_p9_cost ( & cpi -> mv. mv_err, & cpi -> mb_cost. mb_err ) ; # if CONFIG_VP9_HIGHBITS2SV12_null>",0
665,<S2SV_ModStart> h = 0 <S2SV_ModEnd> ; if (,0
666,<S2SV_ModStart> ) ; },0
667,"<S2SV_ModStart> ( number_planes, number_planes, number_planes_filled <S2SV_ModEnd> ) ; number_planes_planes_filled",0
668,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
669,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
670,<S2SV_ModStart> client ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
671,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
