,raw_predictions,correctly_predicted
0,<S2SV_ModStart> ; return - EINVAL ; if (,0
1,<S2SV_ModStart> ; if ( unlikely (,0
2,,0
3,<S2SV_ModStart>,0
4,"<S2SV_ModStart> perf_event * regs <S2SV_ModEnd>, void",0
5,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> data ) { return 0 ; } <S2SV_ModStart> data ) { if (! buf ) { return - 1 ; } <S2SV_ModStart> - 1 ; },0
6,<S2SV_ModStart> <S2SV_null> <S2SV_null,0
7,"<S2SV_ModStart> -> sense ; memset ( & cgc -> sense, 0, sizeof ( * sense ) <S2SV_ModEnd> ) ; if",0
8,<S2SV_ModStart> ; if ( len < 0 ||,0
9,<S2SV_ModStart> <S2SV_null> <S2SV_null,0
10,,0
11,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
12,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> = COAP_SIZE_32 ; } <S2SV_ModStart> == 16 ) { <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> = COAP_32 ; } <S2SV_ModStart> = COAP_SIZE_32 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> = COAP_SIZE_32 ; },0
13,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 4 ) { ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ( ( ndo, "" <S2SV_blank> short"" ) ) ) ) ; return ; } <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null>",0
14,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> * dest_keyring_keyring_keyring_keyring_key_keyring ( dest_keyring, dest_keyring ) <S2SV_ModEnd> ) ; if ( dest_keyring_keyring <S2SV_ModStart> ) break ; if ( dest_keyring_keyring_keyring_key_key_key_keyring ) { if ( dest_key_key_key_key_keyring ( dest_keyring ) == NULL ) { if ( dest_keyring ( dest_keyring ) continue ; }",0
15,<S2SV_ModStart> = NULL ;,0
16,<S2SV_ModStart> ; if ( addr_len < sizeof ( sk ) ) return - EINVAL ; if (,0
17,,0
18,,0
19,<S2SV_ModStart> goto,0
20,"<S2SV_ModStart> ) ||! capable_uid_uidgid <S2SV_ModEnd> ( inode,",0
21,"<S2SV_ModStart>, NULL, NULL )",0
22,<S2SV_ModStart> <S2SV_null>,0
23,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; ret =,0
24,"<S2SV_ModStart> ( name <S2SV_ModEnd>, ""%s"",",0
25,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ptr,0
26,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> int length ; if (!,0
27,<S2SV_ModStart> pb ) ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ;,0
28,"<S2SV_ModStart> path, path, NULL",0
29,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if (,0
30,<S2SV_ModStart> ; } break <S2SV_ModEnd> ; } break,0
31,<S2SV_ModStart> ( FALSE ) &&,0
32,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
33,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct <S2SV_ModEnd> spin_lock ( struct <S2SV_ModStart> rollover ) ; mutex_lock_lock ( & fanout_mutex ) ; mutex_lock ( & fanout_lock ) ; goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> if (! rollover ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> sizeof ( rollover ) ) goto out <S2SV_ModEnd> ; if (,0
34,<S2SV_ModStart> ) ; },0
35,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
36,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY (,0
37,"<S2SV_ModStart> ( interface, ENC28J60_ESTAT ) { <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd>, buffer ) <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd> ) ; }",0
38,<S2SV_ModStart> o ) ; Py_RETURN_NONE <S2SV_ModEnd> ; } switch,0
39,<S2SV_ModStart> ) ) { <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( page <S2SV_ModStart> ) ) ; } else { <S2SV_ModEnd> if (!,0
40,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
41,<S2SV_ModStart> * cmd = NULL <S2SV_ModEnd> ; cmd,0
42,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct mb2SV_null> <S2SV_ModEnd> struct mb2SV_cache_cache_cache_cache_entry ( struct <S2SV_ModStart> bh ) ; <S2SV_ModEnd> struct mb2_cache_cache_cache_cache_cache_cache_cache_cache ( bh <S2SV_ModStart> bh ) ; <S2SV_ModEnd> error = mb2SV_null>,0
43,<S2SV_ModStart> 1 ) ; return NULL ;,0
44,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct ip_options_options_options ( struct ip_rcu <S2SV_ModEnd> * opt, <S2SV_ModStart> * opt, & opt, 0 <S2SV_ModEnd> ) ; if",0
45,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
46,,0
47,"<S2SV_ModStart> { ret = posix_acl_mode ( inode <S2SV_ModEnd>, & acl",0
48,<S2SV_ModStart> size ) { jas_uchar <S2SV_ModEnd> jas_stream_t,0
49,,0
50,<S2SV_ModStart>,0
51,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null,0
52,<S2SV_ModStart> -> tv_rem ; u32 <S2SV_ModEnd> rem ; u64,0
53,<S2SV_ModStart> ; if ( ( <S2SV_ModEnd> == 0 ) {,0
54,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( addr,0
55,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
56,<S2SV_ModStart> ; return NULL ; } if (,0
57,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ;,0
58,"<S2SV_ModStart> = 0.0 ; uint32 nstrips = 0, nstrips",0
59,<S2SV_ModStart> ; # endif # if CONFIG_VP9_HIGHBITDEPTH # endif # else if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH endif # endif # endif # endif # else if CONFIG_VP9_VP9_HIGHBITDEPTH # endif # endif # endif # endif # endif # endif # endif # endif # endif # else if CONFIG_VP9_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_VP9_VP9_HIGHBITDEPTH # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif # else if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif # ifdef CONFIG_VP9_VP9_HIGHBITDEPTH # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif # ifdef CONFIG_VP9_VP9_,0
60,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
61,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( inode,0
62,<S2SV_ModStart> ) return <S2SV_ModEnd> ; if (,0
63,<S2SV_ModStart>,0
64,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
65,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
66,<S2SV_ModStart> ) ) { VP9_null> <S2SV_null> <S2SV_null>,0
67,"<S2SV_ModStart> ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> rows ) ; return ( exception ) ; }",0
68,<S2SV_ModStart> 0 ) ; ret = - EINVAL ;,0
69,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd>, int state",0
70,"<S2SV_ModStart> char * dir <S2SV_ModEnd>, dir,",0
71,,0
72,<S2SV_ModStart> ; if ( ( 1 <S2SV_ModEnd> ) == 0,0
73,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
74,<S2SV_ModStart> <S,0
75,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
76,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
77,<S2SV_ModStart> ( str ) <S2SV_ModEnd> ) ; if,0
78,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
79,<S2SV_ModStart> string ) { <S2SV_ModEnd> c = c,0
80,<S2SV_ModStart> } if ( <S2SV_ModEnd> udp_specified && settings,1
81,,0
82,"<S2SV_ModStart> ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } ptr ++ ; if ( length < 4 ) { ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> short"" ) ) ) ; return ; } ptr ++ ; ptr ++ ; val_h = EXTRACT_16BITS ( ptr ++ ) ptr ++ ; if ( ptr ++ ) { ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ) ; return ; } val_h = EXTRACT_16BITS ( ptr ++ ) ; val_h = EXTRACT_16BITS ( ptr ++ ) ; if ( ptr ++ ) { ND_PRINT ( ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ) ) ; return ; } ptr ++ ; ptr ++ ; ptr ++ = EXTRACT_16BITS ( ptr ++ ; ptr ++ ; ptr ++ = EXTRACT_16BITS ( ptr ++ ) ; ptr ++ ; ptr ++ ; ptr ++ = EXTRACT_16BITS ( ptr ++ ) ; if ( ptr ++ ) { ND_PRINT ( ndo, ""AVP <S2SV_blank> short"" ) ) ) { ND_PRINT ( ( ndo, """,0
83,,0
84,<S2SV_ModStart> ( ) { <S2SV_ModEnd> char * test_test,0
85,<S2SV_ModStart> * src ; vpx_buffer <S2SV_ModEnd> ( src ->,0
86,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
87,"<S2SV_ModStart> { memset <S2SV_ModEnd> ( cpi,",0
88,<S2SV_ModStart> user ) { <S2SV_ModEnd> struct user,0
89,,0
90,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> NCH ( NCH ( NCH ( NCH ( NCH ( NCH ( NCH ( n, 1 ) ) == NCH ( NCH ( NCH ( n, 1 ) ) == NCH ( n, NCH ( NCH ( NCH ( n, NCH ( n, 1 ) ) ) == 0 ) ) { n = 1 ; } else { n = NCH ( NCH ( NCH ( n, 1 ) - 1 ) - 1 ) - 1 ; n = NCH ( NCH ( n, NCH ( n, NCH ( n, NCH ( n, NCH ( n, NCH ( n, NCH ( n, NCH ( n, NCH ( n, NCH ( n, NCH ( n, NCH ( n, NCH ( n, NCH ( n, NCH ( n ) ), NCH ( n, NCH ( n, NCH ( n, NCH ( n, NCH ( n, NCH ( n, NCH ( n, NCH ( n )",0
91,,0
92,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static MACROBLOCKD <S2SV_ModEnd> const MACROBLOCKD * const MACROBLOCK * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const mbmi, MACROBLOCKD * const MACROBLOCKD * const mbmi, MACROBLOCKD * const x, MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const mbmi_mode = & cpi -> mi [ 0 ] ; const MACROBLOCKD * const mbmi_mode = & cpi -> mi [ 0 ] ; const MACROBLOCKD * const MACROBLOCKD * cm -> mbmi_mode_mode = cm -> mbmi_mode ; const PREDICTION_INFO *",0
93,<S2SV_ModStart> ) ) { size_t <S2SV_ModEnd> n = 0,0
94,<S2SV_ModStart> ( len < 1 <S2SV_ModEnd> ) ; ND_TCHECK,0
95,<S2SV_ModStart> } <S2SV_null> <S2SV_null>,0
96,<S2SV_ModStart> * y ; sqlite3_int64,0
97,,0
98,,0
99,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int,0
100,,1
101,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
102,<S2SV_ModStart>,0
103,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
104,<S2SV_ModStart> NULL ) { status = MagickFalse ; break <S2SV_ModEnd> ; } image,0
105,<S2SV_ModStart> 0 ) ; if ( avio_feof ( s -> pb ) ) { ret = AVERROR_INVALIDDATA ; goto end ; },1
106,<S2SV_ModStart> ctx ) { ( void ) ctx ;,0
107,"<S2SV_ModStart> * new, size_t <S2SV_ModEnd> size, size_t",0
108,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> vpx_write_bit_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) { vpx_write_bit_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) vpx_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) { vpx_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_write_bit <S2SV_ModEnd> ( wb,",0
109,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
110,<S2SV_ModStart> 0 ; } msg -> msg_namelen = 0 ;,0
111,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
112,<S2SV_ModStart> <S2SV_null> <S2SV_null,0
113,<S2SV_ModStart> exit ; } m -> msg_namelen = 0 ;,0
114,<S2SV_ModStart> dev ) ; if <S2SV_ModEnd> ( buf,0
115,<S2SV_ModStart> <S2SV_null> <S,0
116,,0
117,<S2SV_ModStart> cpi ) { memset <S2SV_ModEnd> ( cpi ->,0
118,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct x86EMUL_CONTINUE <S2SV_ModEnd> ; rc = <S2SV_ModStart> return X86EMUL_CONTINUE ; rc = assign_eip_segment_eip ( ctxt, & old_desc, VCPU_SREG_CS ) ; if ( ctxt -> src. l ) return X86EMUL_CONTINUE ; if ( rc!= X86EMUL_CONTINUE ) return X86EMUL_CONTINUE ; rc = assign_eip = ctxt -> src. val ; if ( rc!= X86EMUL_CONTINUE ) return X86EMUL_CONTINUE ; rc = assign_eip = ctxt -> src. val ; if ( ctxt -> src. val!= X86EMUL_CONTINUE ) return X86EMUL_CONTINUE ; if ( ctxt -> src. val == X86EMUL_CONTINUE ) return X86EMUL_CONTINUE ; if ( rc!= X86EMUL_CONTINUE ; rc!= X86EMUL_CONTINUE ; rc!= X86EMUL_CONTINUE ; if ( rc!= X86EMUL_CONTINUE ) return X86EMUL_CONTINUE ; if ( rc!= X86EMUL_CONTINUE ; rc!= X86EMUL_CONTINUE )",0
119,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( info,0
120,"<S2SV_ModStart> tmp_strsize ) { ISOM_DECREASE_DECREASE_SIZE ( ptr, 1 ) <S2SV_ModStart> tmp_strsize ; } ISOM_DECREASE_DECREASE_DECREASE_DECREASE_DECREASE_SIZE ( ptr, 1 )",0
121,,0
122,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { switch <S2SV_ModStart> -> state & fmode <S2SV_ModEnd> ) ; }",0
123,<S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( c,0
124,"<S2SV_ModStart>, buf, <S2SV_ModEnd> len )",0
125,,0
126,<S2SV_ModStart> ++ ) { if ( c -> height <= 8 ) return AVERROR_INVALIDDATA ;,0
127,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; return",0
128,"<S2SV_ModStart>, * name <S2SV_ModEnd> ) ; if",0
129,<S2SV_ModStart> ; ret = - EINVAL ; if (,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
131,,0
132,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
133,<S2SV_ModStart> ; if (,0
134,<S2SV_ModStart> ; rq = <S2SV_ModEnd> off + rqs,0
135,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( cfg,0
136,<S2SV_ModStart> msg -> msg_namelen = 0,0
137,<S2SV_ModStart> ; if ( skb -> len < sizeof ( skb ) ) return 0 ; if (,0
138,"<S2SV_ModStart>, arg -> flags &",0
139,<S2SV_ModStart> ; tile_buffsize =,0
140,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
141,"<S2SV_ModStart> ( fp ) <S2SV_ModEnd> ( fp,",0
142,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
143,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
144,<S2SV_ModStart> ) ) { ND_TCHECK_16BITS ( 2 ) ;,0
145,<S2SV_ModStart> 1 ) ; if (!,0
146,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
147,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
148,"<S2SV_ModStart> ; u16 ) ; u64 <S2SV_ModEnd> = X86EMUL_REGS_PROT64 <S2SV_ModStart> = X86EMUL_REGS_PROT64 ; rcx = rcx = rcx -> rdx <S2SV_ModStart> = X86EMUL_REGS_REGS_REGS_REGS_REGS_PROT64 ; rcx = rcx <S2SV_ModEnd> ( ctxt,",0
149,"<S2SV_ModStart> int probs, vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_prob <S2SV_ModEnd> p ) {",0
150,"<S2SV_ModStart> * output, tran_low_t <S2SV_ModEnd> * output,",0
151,<S2SV_ModStart> ; if ( len < 0 ||,0
152,<S2SV_ModStart> <S2SV_null,0
153,<S2SV_ModStart> flags ; } <S2SV_ModEnd> if ( flags,0
154,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
155,"<S2SV_ModStart> tot_len ) ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
156,<S2SV_ModStart> ; if ( mnt -> mnt. mnt. mnt. mnt.,0
157,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null,0
158,,0
159,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
160,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> OE_RAISE_EINVAL ; ret = 0 ; if ( ssize_t ) ret = 0 ; if ( ret > OE_EINVAL ) { ret = - EINVAL ; OE_RAISE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( ssize_t ) ret = 0 ;,0
161,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
162,<S2SV_ModStart> size ) { memcpy <S2SV_ModEnd> ( pc ->,0
163,"<S2SV_ModStart> data ) { u8 * buf ; int ret ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, size, buf <S2SV_ModEnd>, buf",0
164,<S2SV_ModStart> * body ; if ( p == NULL ) return NULL ;,0
165,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null,0
166,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
167,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> vp9_filter_filter_filter_level ( cpi <S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. spatial_level == 0 ) { vp9_filter_filter_level = 0 ; } else { vp9_filter_filter_level ( cpi, cm -> oxcf. layer ) ; } else { vp9_filter_level = 0 ; } else { vp9_filter_level = 0 ; } else { vp9_filter_filter_filter_filter_level ( cpi, cm, cm -> oxcf. layer ) ; } else { vp9_filter_filter_filter_level = 0 ; } else { vp9_filter_level ( cpi -> oxcf. layer ) ; } else { vp9_filter_level = vp9_level ( cpi -> oxcf. layer_level ) ; } else { vp9_level = vp9_filter_level ( cpi -> oxcf. layer ) ; } else { vp9_level = vp9_filter_filter_level ( cpi -> oxcf.",0
168,<S2SV_ModStart> ( int ret ; if (,0
169,,0
170,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
171,<S2SV_ModStart> ( void ) <S2SV_ModEnd> ; if (,0
172,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct,0
173,"<S2SV_ModStart> y2 ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f"", outputbuffer ) ;",0
174,,0
175,,0
176,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_None ) < 0 ) { return 1 ; } if ( <S2SV_ModStart> ) goto failed ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_id, & PyId_type, & PyId_t ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> field <S2SV_blank> field <S2SV_blank> missing <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> from <S2SV_blank> from <S2SV_blank> from <S2SV_blank> from <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> from <S2SV_blank> from <S2SV_blank> from <S2SV_blank> from <S2SV_blank> from <S2SV_blank> from <S2SV_blank> missing"" ) ; return 1 ; } if ( tmp == NULL ) { Py_SetString ( Py_TypeError, arena ) ; return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ( obj, & PyId_type, & PyId_type, & PyId_type, & PyId_type, & PyId_type, & PyId_type, & PyId_type, & PyId_t ) <S2SV_ModEnd> ) ; <S2SV_ModStart> ) < 0 ) { return 1 ; } else <S2SV_ModEnd> { int res <S2SV_ModEnd> ; } if",0
177,<S2SV_ModStart>. mnt_flags & MNT_MASK <S2SV_ModEnd> ; if (,0
178,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
179,"<S2SV_ModStart>, ds64_chunk, & ds64_chunk <S2SV_ModStart> size + sizeof ( ds64_chunk ), sizeof ( cs64_chunk <S2SV_ModStart> ds64_chunk ), sizeof ( cs64_chunk ) <S2SV_ModEnd> ) )",0
180,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null,0
181,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
182,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
183,,0
184,"<S2SV_ModStart> ; if ( ( fname ) ) { fprintf ( ""Invalid <S2SV_blank> file\\n"", fname ) ; exit ( 1 ) ; } if ( <S2SV_ModStart> 0 ) { fprintf ( ""Error: <S2SV_blank> file\\n"", fname ) ; exit ( 1 ) ; } if (",0
185,<S2SV_ModStart> ( size < 0,0
186,"<S2SV_ModStart> { if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
187,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
188,"<S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR, KSZ8851_ISR, KSZ8851_ISR, KSZ8851_ISR_ISR_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_ISR, KSZ8851_ISR, KSZ8851_ISR_P1 <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_P1 <S2SV_ModEnd> ) ; status <S2SV_ModStart> ( interface, KSZ8851_E <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_P1SR_IS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_E <S2SV_ModEnd> ) ; }",0
189,"<S2SV_ModStart> * wb, vpx_writer <S2SV_ModEnd> * wb )",0
190,"<S2SV_ModStart> ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
191,,0
192,<S2SV_ModStart>,0
193,<S2SV_ModStart> <S2SV_null> <S2SV_null,0
194,,0
195,"<S2SV_ModStart> ret = key_read <S2SV_ModEnd> ( key,",0
196,,0
197,<S2SV_ModStart> dst_val ) ; <S2SV_ModEnd> if ( insn,0
198,<S2SV_ModStart> ; if ( i < 0 ||,0
199,<S2SV_ModStart> ; if ( sk ),0
200,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
201,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null,0
202,,0
203,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> char * str, str <S2SV_ModStart> char * str, str, str, str, str, str, str, str ) { char * str ; if ( * str ) { char * str ; * str = * str ; const char * str ; * str ; const char * str = * str ; const char * str ; * str = * str ; const char * str ; const char * str ; * str == '\\\\' <S2SV_ModEnd> * str ) <S2SV_ModStart> * str ; <S2SV_ModEnd> if (! <S2SV_ModStart> * str ) { char * str = * str ; <S2SV_ModStart> * str ; <S2SV_ModEnd> = str ; <S2SV_ModStart> * str ; <S2SV_ModEnd> if (! <S2SV_ModStart> * str ) { <S2SV_ModStart> * str ; <S2SV_ModEnd> return 0 ; <S2SV_ModStart> * str ; } <S2SV_ModEnd> * str = str_end ++ ; <S2SV_ModStart> * str ; <S2SV_ModEnd> = str ; <S2SV_ModStart> * str ; <S2SV_ModEnd> = str ; <S2SV_ModStart> * str ; <S2SV_ModEnd> } else <S2SV_ModStart> * str ; <S2SV_ModEnd> return 0 ; <S2SV_ModStart> * str ; <S2SV_ModStart> * str ; <S2SV_ModEnd> return 0 ; <S2SV_ModStart> * str ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
204,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
205,,0
206,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
207,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",1
208,"<S2SV_ModStart>, const char * name <S2SV_ModEnd> ; if (",0
209,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static MACROBLOCKD <S2SV_ModEnd> int mi_col ; <S2SV_ModStart> int mi_col ; MACROBLOCKD * mi_col ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi <S2SV_ModStart> ) ; memset <S2SV_ModEnd> ( cpi <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( cpi <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi",0
210,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; if",0
211,"<S2SV_ModStart> char * dir <S2SV_ModEnd>, dir,",0
212,<S2SV_ModStart> mnt ) ; nd -> path = NULL ;,0
213,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct ip_options_options_options ( struct ip_options_options_options * opt, <S2SV_ModStart> * opt, & opt, & opt_options_options_options_rcu <S2SV_ModEnd> ) ; if <S2SV_ModStart> return - EINVAL ; } <S2SV_null>",0
214,,0
215,<S2SV_ModStart> ; if ( len < 0 || <S2SV_ModStart> ) return - EINVAL ; } if (,0
216,<S2SV_ModStart>,0
217,<S2SV_ModStart> -> columns - 1,0
218,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
219,,0
220,<S2SV_ModStart> ) ) ; ND_TCHECK ( bp [ 0 ],0
221,<S2SV_ModStart> ; if ( task_lock <S2SV_ModEnd> ( task ),0
222,<S2SV_ModStart> val ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_matind_t,0
223,<S2SV_ModStart> } else { if ( i4_t == 0 &&,0
224,,0
225,<S2SV_ModStart> <S2SV_null> <S,0
226,,0
227,,0
228,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } else,0
229,<S2SV_ModStart> { if ( <S2SV_ModEnd> b -> buf,0
230,,0
231,,0
232,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null,0
233,<S2SV_ModStart> break ; } <S2SV_ModEnd> } if (,0
234,<S2SV_ModStart> ) ) ; ND_TCHECK2 ( tptr + 4 ) ;,0
235,,0
236,<S2SV_ModStart> int tagval ; struct stream packet ; <S2SV_ModStart> length ) ; packet = * s ; if (!,0
237,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> char *,0
238,"<S2SV_ModStart> ) ; } copy_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ( src, <S2SV_ModEnd> ) ; unlink",0
239,<S2SV_ModStart> ) ) ; rc = NULL ;,0
240,"<S2SV_ModStart> -> x = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> x = MagickMin <S2SV_ModEnd> ( 1.0f,",0
241,<S2SV_ModStart> ( src -> sas_username ) <S2SV_ModEnd> ; } else,0
242,<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi ->,0
243,,0
244,,0
245,<S2SV_ModStart> len ) { size_t <S2SV_ModEnd> len = 0 <S2SV_ModStart> ; if ( len > sizeof ( size ) ) return NULL ; <S2SV_ModStart> ) ; if ( len < 0 ) return NULL ; <S2SV_ModEnd> return NULL ;,0
246,<S2SV_ModStart> = 0 ;,0
247,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( i,0
248,<S2SV_ModStart> pos ) ; if ( e == NULL ) return ;,0
249,<S2SV_ModStart> <S2SV_null> <S2SV_null> < 0,0
250,<S2SV_ModStart> ( size_t ) <S2SV_ModEnd> ; if (,0
251,<S2SV_ModStart> ) ) { mutex_lock ( & timer_lock ) ; <S2SV_ModStart> ; } <S2SV_null>,0
252,,0
253,<S2SV_ModStart> ; size_t format = 0,0
254,<S2SV_ModStart> ) return ret <S2SV_ModEnd> ; if (,0
255,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",1
256,<S2SV_ModStart> bus ] ; <S2SV_ModEnd> if ( bi,0
257,"<S2SV_ModStart>, size ) ; msg -> msg_namelen = 0",0
258,<S2SV_ModStart> ; if ( ( s ++ ),0
259,"<S2SV_ModStart> NULL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL ) )",0
260,<S2SV_ModStart> size ) ; if <S2SV_ModEnd> ( msg,0
261,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( (,0
262,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> vpx_read_literal <S2SV_ModEnd> ( rb,",0
263,<S2SV_ModStart> ; if ( <S2SV_ModEnd> == NULL ),0
264,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> ( fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> np -> opt ) ; rcu_read_unlock ( <S2SV_ModStart> np -> opt ) ; rcu_read_unlock ( ) ;",0
265,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
266,<S2SV_ModStart> ) { if <S2SV_ModEnd> return - 1,0
267,,0
268,<S2SV_ModStart> = size_t <S2SV_ModEnd> ; size_t,0
269,<S2SV_ModStart> ( sk ) return - EINVAL,0
270,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
271,"<S2SV_ModStart> ; rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val ) ; if ( rc!= X86EMUL_CONTINUE ) break",0
272,"<S2SV_ModStart> list. name, true",1
273,<S2SV_ModStart> = 0 ;,0
274,<S2SV_ModStart> ; r = TEMP_FAILURE_RETRY (,0
275,,0
276,"<S2SV_ModStart>, cmd, cmd",0
277,"<S2SV_ModStart>, annotation, type_comment,",0
278,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
279,<S2SV_ModStart> Rec. RecordLength ) ; if ( status == MagickFalse ) break,0
280,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> ) ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>,0
281,,1
282,<S2SV_ModStart>,0
283,<S2SV_ModStart> psf -> header. end <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr,0
284,,0
285,,0
286,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> perf_event_event_event_event_event ( event <S2SV_ModStart> event_event_event_event_event_event ( event <S2SV_ModEnd> ) ; return,0
287,<S2SV_ModStart> flags ) ; <S2SV_ModEnd> if ( flags,0
288,"<S2SV_ModStart> ( tptr, tptr <S2SV_ModEnd> ) ) {",0
289,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( cm <S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
290,"<S2SV_ModStart> ( src, NULL <S2SV_ModEnd> ) ; if",0
291,"<S2SV_ModStart> ) ; } memset <S2SV_ModEnd> ( inode,",0
292,,0
293,<S2SV_ModStart> arg ) ; if ( l == NULL ) { <S2SV_ModStart> return APLOG_ERROR ; },0
294,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
295,,0
296,<S2SV_ModStart> return - 1 ; if ( len < 0 ) return - 1,0
297,<S2SV_ModStart> ( server. ds_enabled <S2SV_ModEnd> ) ) {,0
298,,0
299,,0
300,<S2SV_ModStart> y3 ) { sendClean ( outputbuffer ) ;,0
301,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
302,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
303,<S2SV_ModStart> (! buf || count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ;,0
304,<S2SV_ModStart> ; opt = rcu_dereference ( <S2SV_ModStart> ( sk ),0
305,<S2SV_ModStart> ; if ( opt <S2SV_ModEnd> opt. opt,0
306,<S2SV_ModStart> ; sctp_sock <S2SV_ModEnd> ( ),0
307,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
308,<S2SV_ModStart> task ) { <S2SV_ModEnd> timer_timer ( &,0
309,"<S2SV_ModStart> ; if ( safe_name <S2SV_ModEnd> ( dst_name,",0
310,"<S2SV_ModStart> ( interface, KSZ8851_MAHTR <S2SV_ModEnd> ) ; status <S2SV_ModStart> ( interface -> <S2SV_ModStart> ( interface, KSZ8851_MAHTR1 <S2SV_ModEnd> ) ; status <S2SV_ModStart> ( interface, KSZ8851_MAHTR1 <S2SV_ModEnd> ) ; }",0
311,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
312,"<S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_IP ( 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_IP ( 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_IP ( 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_IP",0
313,<S2SV_ModStart> ; if ( <S2SV_ModEnd> == 0 ),0
314,"<S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
315,<S2SV_ModStart> = rc ; if ( rc -> avg_rate > rc -> avg_rate ) <S2SV_ModEnd> rc ->,0
316,<S2SV_ModStart> ; if ( res == NULL ) return - 1 ; if (,0
317,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
318,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
319,"<S2SV_ModStart> ( buff, sizeof ( buff )",0
320,<S2SV_ModStart> ; int nbi <S2SV_ModEnd> ; if (,0
321,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> ) ; } exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_handle ( handle",0
322,<S2SV_ModStart> -> peer. auth_capable = new -> peer.,0
323,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
324,<S2SV_ModStart> ; if ( h -> size < 0 ) goto error ; if (,0
325,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
326,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>S2SV_null>S2SV_null>S2SV_null>S2SV_null>S2SV_null>S2SV_null>,0
327,<S2SV_ModStart> { uint16 bitsize = 0,0
328,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> strncpy <S2SV_ModEnd> ( a -> <S2SV_ModStart> ) { assert ( a -> archive_name_size ) ; if ( a -> archive_size == '\\0' ) ) { archive_error ( a -> archive, ""%s"", a -> archive_name <S2SV_ModEnd> ) ; return (",0
329,<S2SV_ModStart> struct i_sb ; struct i_sb * i_sb ; struct i_info * i_sb = inode -> i_info -> i_offset ; if ( inode -> i_offset < sizeof ( inode ) -> i_offset ) goto out ; if ( inode -> i_info -> i_len > inode -> i_len ) goto out ; if ( inode -> i_len = inode -> i_sb -> i_sb -> i_sb -> i_sb -> i_sb -> i_sb -> i_len -= sizeof ( struct i_sb ) -> i_sb -> i_sb -> i_offset ; if ( inode -> i_sb -> i_len > inode -> i_len ) goto out ; },0
330,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
331,"<S2SV_ModStart> mq_mq_rq_rq ( q,",0
332,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
333,<S2SV_ModStart> ptr ) ; if ( iter == NULL ) return ;,0
334,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
335,,0
336,,0
337,<S2SV_ModStart> ; if ( opt <S2SV_ModEnd> opt. opt,0
338,<S2SV_ModStart> ; ret = k2SV_null> <S2SV_null>,0
339,<S2SV_ModStart> ; if ( len > 0 ||,0
340,"<S2SV_ModStart> int length ; struct stream packet = * s ; <S2SV_ModStart> length ) ; struct stream packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) )",0
341,<S2SV_ModStart>,0
342,<S2SV_ModStart> & new_map ) <S2SV_ModEnd> ) goto out,0
343,,0
344,,0
345,<S2SV_ModStart> ; memset <S2SV_ModEnd> ( pbi ->,0
346,<S2SV_ModStart>,0
347,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * s <S2SV_ModStart> char * s ; if ( void * s == NULL ) return NULL ; <S2SV_ModStart> * p ; if (! * s == NULL ) { Py_SetString ( p ) ; return NULL ; } if (! char * s ) { Py_SetString ( p ) ; return NULL ; } if (! p ) { Py_SetString ( p ) ; return NULL ; } * s = _PyObject_SetString ( p + 1 ; p ++ ; <S2SV_ModStart> * p ++ ; if (! buf ) { return NULL ; } * s = _PyObject_TypeError, & p ; } if (! p ) { return NULL ; } if (! char * s ) { return NULL ; } if (! char * s == NULL ) { return NULL ; } * s = p ++ ; } * s = p = p ++ ;",0
348,"<S2SV_ModStart> ; char * cp = NULL <S2SV_ModEnd> ; char * <S2SV_ModStart> ; char * cp = <S2SV_ModEnd> ; char * <S2SV_ModStart> ; char * cp = <S2SV_ModEnd> ; if ( strcmp ( cp, <S2SV_ModStart> ( cp, <S2SV_ModEnd> ) == 0 || strcmp ( cp, <S2SV_ModStart> ) == 0 || <S2SV_ModEnd> ( cp,",0
349,<S2SV_ModStart> -> buffer ; if (! ctx -> buffer ) return - EINVAL,0
350,"<S2SV_ModStart> int w, vpx_write_literal <S2SV_ModEnd> ( w,",0
351,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( ),0
352,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
353,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } else {,0
354,,0
355,<S2SV_ModStart> ; err = TEMP_FAILURE_RETRY (,0
356,<S2SV_ModStart> image_info -> rows * rows <S2SV_ModEnd> ; number_planes =,0
357,,0
358,,0
359,<S2SV_ModStart>,0
360,<S2SV_ModStart> return - 1,0
361,<S2SV_ModStart> ioc ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
362,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
363,<S2SV_ModStart> ) & desc -> bNumEndpoints,0
364,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int perf_event_event_event_event_event_event_event_event_event ( <S2SV_ModEnd> ( event, <S2SV_ModStart> event_event_event_event_event_event_event_event_event ( event, <S2SV_ModEnd> ) ) return",0
365,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_mode_mode ( VP9_MODE <S2SV_ModStart> * r, PREDICTION_mode, PREDICTION_MODE <S2SV_ModEnd> * r, <S2SV_ModStart> * r, vpx_mode_mode_mode_mode_mode_mode_mode, PREDICTION_MODE <S2SV_ModStart> * r, PREDICTION_mode, vpx_mode_mode_mode_mode_mode_mode <S2SV_ModEnd> * r )",0
366,<S2SV_ModStart> return - 1 <S2SV_ModEnd> ; } if (,0
367,<S2SV_ModStart> NULL ) ; if ( key_len == NULL ) ocipher = 0 ;,0
368,<S2SV_ModStart>,0
369,,0
370,"<S2SV_ModStart> ( opt2, sizeof ( opt2 )",0
371,<S2SV_ModStart> ; if ( unsigned long ) return - EINVAL,0
372,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null,0
373,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
374,"<S2SV_ModStart> * name, <S2SV_ModEnd> const char *",0
375,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
376,<S2SV_ModStart> if ( cmpt = 0,0
377,<S2SV_ModStart> err ) ; usb_free ( urb ) ;,0
378,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
379,<S2SV_ModStart> mntS2SV_null> <S2SV_null> <S2SV_null>,0
380,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static vpx_write_buffer <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb_literal <S2SV_ModEnd> ( wb,",0
381,"<S2SV_ModStart> ) ; } rb_literal <S2SV_ModEnd> ( req,",0
382,<S2SV_ModStart> char * str <S2SV_ModEnd> ; char *,0
383,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
384,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> char * len ; if ( len > len - 1 ) { <S2SV_ModEnd> char * <S2SV_ModStart> ( str, ""%s"", ""%s"", str <S2SV_ModEnd> ) ; return",0
385,<S2SV_ModStart> ) ; } size_t size ; size_t length = sizeof ( size_t ) ; if ( size_t )!= sizeof ( size_t ) - 1 ; <S2SV_ModStart> ) ; if ( size < sizeof ( size_t )!= 0 ) { ASSERT ( buf + 1 ) ; ASSERT ( result!= 0 ) ; ASSERT ( result!= 0 ) ; ASSERT ( result = 0 ; ASSERT ( result!= NULL ) ; ASSERT ( result!= 0 ) ; ASSERT ( result!= 0 )!= 0 ) ; ASSERT ( result = 0 ; ASSERT ( result!= 0 ; ASSERT ( buf + 1 )!= 0 ; ASSERT ( result!= 0 ; ASSERT ( buf + 1 )!= 0 ; ASSERT ( result!= 0 )!= 0 ) ; ASSERT ( result!= 0 ; ASSERT ( result!= 0 )!= 0 ) ; ASSERT ( buf + 1 ) ; ASSERT ( buf + 1 ) ; ASSERT ( result!= 0 ; ASSERT ( result!= 0 ; ASSERT ( buf + 1 ) ; ASSERT ( buf + 1 )!= 0 ; ASSERT ( buf + 1 ) ; ASSERT ( buf + 1 )!= 0 ; ASSERT ( buf + 1 ) ; ASSERT ( buf + 1 )!= 0 ; ASSERT ( buf + 1 ; ASSERT ( buf ) ; ASSERT (,0
386,<S2SV_ModStart> ) ) return false,0
387,"<S2SV_ModStart> ( str, ""%s"", len <S2SV_ModEnd> ( str, <S2SV_ModStart> len ) ) ; if",0
388,,1
389,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static MagickFalse <S2SV_ModStart> output ) { <S2SV_ModEnd> input = MagickFalse ; <S2SV_ModStart> * output = MagickFalse ; } <S2SV_ModStart> output ) { <S2SV_ModEnd> input = MagickFalse ; <S2SV_ModStart> ( void ) output = MagickFalse ; } <S2SV_ModEnd> output = MagickFalse ;,0
390,,0
391,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * <S2SV_ModStart> char * tmpname = NULL <S2SV_ModStart> char * tmpname ; <S2SV_ModEnd> char * tmpname <S2SV_ModStart> char * tmpname = NULL <S2SV_ModStart> ; if (! tmpname ) { err = NULL ; } <S2SV_ModEnd> if (!,0
392,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
393,<S2SV_ModStart> s2 ) { size_t s2 = 0 ; if (,0
394,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S_null>,0
395,<S2SV_ModStart> TRUE ; } if ( arg2 == NULL ) return NULL,0
396,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
397,<S2SV_ModStart> ; if ( s_len < 1 &&,0
398,,0
399,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
400,,0
401,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_int32 <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd>, ""%s"",",0
402,<S2SV_ModStart> 1 ) ; if (,0
403,,0
404,,0
405,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 8 ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 0 ) { vpx_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 0 ) ; vpx_write_literal <S2SV_ModEnd> ( w,",0
406,<S2SV_ModStart> goto cleanup ; <S2SV_ModEnd> goto cleanup ;,0
407,,0
408,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
409,<S2SV_ModStart> ; if ( d -> msg_len > sizeof ( d -> msg ) ) return - EINVAL ; if ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( i,1
410,,0
411,"<S2SV_ModStart> ( src, NULL <S2SV_ModEnd> ) ; }",0
412,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
413,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
414,<S2SV_ModStart> ) return EINVAL <S2SV_ModEnd> ; if (,0
415,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
416,<S2SV_ModStart> = NULL ; },0
417,"<S2SV_ModStart> size ) { memset <S2SV_ModEnd> ( size,",0
418,<S2SV_ModStart> ; bytes = 0,0
419,,0
420,<S2SV_ModStart> - EINVAL ; if (! assoc_len ) return - EINVAL ;,0
421,,0
422,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct l2CAP_conf_conf_mode <S2SV_ModEnd> ; struct l2CAP_conf_mode <S2SV_ModStart> ) { struct l2CAP_REQ ) { struct l2CAP_REQ_REQ_MODE_REQ ; l2cap_mode = l2cap_mode ( l2cap_req ( l2cap_req ( struct l2cap_req ), L2CAP_REQ, L2CAP_REQ ) ; if ( pi -> mode == L2CAP_REQ ) { struct l2CAP_conf_mode = L2CAP_ERR ( l2CAP_ERR ( l2CAP_REQ, L2CAP_REQ, L2CAP_REQ, L2CAP_REQ, L2CAP_REQ, sizeof ( struct l2CAP_REQ_REQ, L2CAP_REQ ), L2CAP_MODE_REQ_REQ ) ; if ( pi -> mode == L2CAP_CONF_REQ_REQ_REQ_REQ_REQ_REQ_REQ_REQ_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MIN_MAX_MAX_MAX_",0
423,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ret, 0 )",0
424,,0
425,,0
426,<S2SV_ModStart> newcounts = NULL <S2SV_ModEnd> ; if (,0
427,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModStart> = fmode ; fmode_t fmode = fmode_t fmode ; fmode = fmode_t fmode ; if ( fmode & fmode & fmode ) goto out ;",0
428,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
429,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int64_t <S2SV_ModEnd> q, int64_t rate, int64_t rate, int64_t rate, int64_t rate, int64_t rate, int64_t rate_t rate, int64_t rate, int64_t dist, int64_t rate, int64_t dist, int64_t dist, int64_t dist, int64_t dist, int64_t dist, int64_t rate_t dist, int64_t rate, int64_t rate, int64_t dist, int64_t dist, int64_t dist, int64_t dist, int64_t dist, int64_t dist, int64_t rate, int64_t rate_t rate_t rate, rate, rate_t dist, int64_t dist, unsigned int64_t rate_t dist, int64_t * rate_t dist, int64_t dist, int64_t rate_t <S2SV_ModEnd> ; int64_t <S2SV_ModStart> 0 ] = ( int64_t *",0
430,<S2SV_ModStart> ( pmd ) <S2SV_ModEnd> if ( pmd,0
431,<S2SV_ModStart> ; if ( ( <S2SV_ModEnd> == '\\0' ),0
432,"<S2SV_ModStart> * r, vpx_reader <S2SV_ModEnd> * r,",0
433,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",0
434,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
435,,0
436,"<S2SV_ModStart> ( interface, KSZ8851_ISR ) ; if ( ( ( length > KSZ8851_FRAME ) ) { <S2SV_ModStart> ( interface, KSZ8851_MASK ) ; }",0
437,,0
438,<S2SV_ModStart>. udpport = 0 <S2SV_ModEnd> ; settings.,1
439,,0
440,"<S2SV_ModStart> x1, x1, x = x2 <S2SV_ModEnd> x2 <S2SV_ModStart> x2 ) ; x = x = x2 <S2SV_ModEnd> x2 <S2SV_ModStart> x2 ) ; x = x = x2 <S2SV_ModEnd>",0
441,,0
442,<S2SV_ModStart> ( pmd ) <S2SV_ModEnd> if ( pmd,0
443,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
444,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
445,,0
446,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> vpx_codec_alg_alg_alg_alg_alg_priv ( vpx_alg_alg_t * ) <S2SV_ModEnd> ; vpx_codec_alg_alg_alg_alg_priv ( <S2SV_ModStart> priv_t * ) ; priv = get_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_priv ( ) <S2SV_ModEnd> ) ;,0
447,,0
448,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
449,<S2SV_ModStart> = v ; <S2SV_ModEnd> return v ;,0
450,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
451,"<S2SV_ModStart> ( interface, ENC28J60_MISTAT )!= 0 <S2SV_ModEnd> ) { interface <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) ; }",0
452,<S2SV_ModStart> char * str <S2SV_ModEnd> ) { return,0
453,<S2SV_ModStart> ; },0
454,<S2SV_ModStart>,0
455,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
456,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
457,,0
458,,0
459,,0
460,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
461,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
462,,0
463,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
464,,0
465,,0
466,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
467,,0
468,,0
469,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
470,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
471,<S2SV_ModStart> ; int error ; struct mb2_cache * new_bh = NULL ; struct mb2_bh = EXT2_SB ( new_bh ) -> b_bh <S2SV_ModStart> ; if (! new_bh ) -> h_bh -> h_bh -> h_bh -> h_bh_bh -> h_bh_bh_bh ) { ext2_cache = NULL ; goto out ; } sb2_cache = NULL ; <S2SV_ModEnd> if (!,0
472,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
473,,0
474,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
475,<S2SV_ModStart> NULL ; } if ( size_t ),0
476,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
477,<S2SV_ModStart> ) { return ret <S2SV_ModEnd> ; } ps_dec ->,0
478,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> 0 <S2SV_ModStart> = ps_dec -> u4_num_size ; ps_dec -> u2d_size = ps_dec -> u2_size ; ps_dec -> u2_num_mbs_size = ps_dec -> u2_frame_size ; ps_size = ps_size = ps_dec -> u2_frame_size ; ps_size = ps_dec -> u2_frame_size = ps_size ; ps_dec -> u2_size = ps_dec -> u2_mbs_size = ps_size ; ps_dec -> u2_size = ps_dec -> u2_mbs_size = ps_size ; ps_size = ps_dec -> u2_dec -> u2_mbs_size = ps_size ; ps_size = ps_dec -> u2_dec -> u2_size = ps_dec -> u2_size ; ps_dec -> u2_dec -> u2_frame_size = ps_size = ps_dec -> u2_size ; if ( ps_dec -> u2_,0
479,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
480,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
481,<S2SV_ModStart>,0
482,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 8 ) ; <S2SV_ModEnd> src += src_stride",1
483,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( y,0
484,,0
485,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr,0
486,<S2SV_ModStart> ( num < 0 ) { if (,0
487,<S2SV_ModStart> ( buf ) <S2SV_ModEnd> ; if (,0
488,<S2SV_ModStart> ; uint16_t data_t <S2SV_ModEnd> ; uint16_t,0
489,<S2SV_ModStart> ; if ( (,0
490,<S2SV_ModStart> ; if ( <S2SV_ModEnd>  name,0
491,"<S2SV_ModStart>, 0, <S2SV_ModEnd> size ) ;",0
492,<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ;,1
493,"<S2SV_ModStart>, sa, sizeof ( sa )",0
494,"<S2SV_ModStart>, cpkt. size <S2SV_ModEnd> ) ; if",0
495,"<S2SV_ModStart>,",0
496,<S2SV_ModStart> crypto_kfree ; strncpy <S2SV_ModEnd> ( skb.,0
497,,0
498,"<S2SV_ModStart>, & rlen, 0",1
499,<S2SV_ModStart> ) ) { size_t <S2SV_ModEnd> data ; size <S2SV_ModStart> ) ; size = sizeof ( unsigned <S2SV_ModStart> ) + 2 <S2SV_ModEnd> ) ; if,0
500,<S2SV_ModStart> ; if ( c == NULL ) return 0 ; if (,0
501,,0
502,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
503,<S2SV_ModStart> credssp ) ; credssp = NULL ;,0
504,<S2SV_ModStart> NULL ) ; if ( key_len == NULL ) return NULL ;,0
505,"<S2SV_ModStart> * authctxt ; <S2SV_ModEnd> char * authctxt <S2SV_ModStart> char * authctxt = NULL <S2SV_ModStart> char * authctxt ; if (! authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> user"", __func__ ) ; goto done",0
506,<S2SV_ModStart> ; uint32_t bcount = 0,0
507,,0
508,<S2SV_ModStart> ( dp_addr ) < 0,0
509,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
510,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr,0
511,<S2SV_ModStart> ; ret = - EINVAL ;,0
512,<S2SV_ModStart> (! ret || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) { ret = - 1 ; },0
513,<S2SV_ModStart> ; if ( * section == NULL || * section == NULL ) if (,0
514,,0
515,,0
516,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
517,,0
518,<S2SV_ModStart> ) ) { <S2SV_ModEnd> char * data <S2SV_ModStart> = malloc ( size_t ) <S2SV_ModEnd> ; memset (,0
519,,0
520,<S2SV_ModStart> ( n ) \\\n{ <S2SV_ModEnd> if ( pcd,0
521,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
522,<S2SV_ModStart> ) ) ; g_free ( header ) ;,0
523,"<S2SV_ModStart> dst_ybc ) { memcpy <S2SV_ModEnd> ( dst,",0
524,<S2SV_ModStart>,0
525,"<S2SV_ModStart> ; u_int length, tstr <S2SV_ModEnd> ) ) ;",0
526,<S2SV_ModStart> <S2SV_null> <S2SV_null,0
527,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ),",0
528,<S2SV_ModStart> ; if ( <S2SV_ModEnd> skb -> flags,0
529,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
530,"<S2SV_ModStart> char * env, NULL",0
531,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null,0
532,,0
533,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
534,<S2SV_ModStart> ctx ) { <S2SV_ModEnd> int ctx =,0
535,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
536,<S2SV_ModStart> ( ps_stream -> u4_offset,0
537,<S2SV_ModStart> ) return - ENOMEM <S2SV_ModEnd> ; if (,0
538,,0
539,"<S2SV_ModStart> * buf, sizeof ( buf )",0
540,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char *,0
541,,0
542,<S2SV_ModStart> ipv6_txoptions * opt,0
543,<S2SV_ModStart> ; if ( ip_opt <S2SV_ModEnd> ( skb ),0
544,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
545,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
546,"<S2SV_ModStart> ; if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
547,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; } tp ->,0
548,<S2SV_ModStart> ; if ( k2 == NULL &&,0
549,,0
550,<S2SV_ModStart> ( sqlite3_int64 ),0
551,<S2SV_ModStart> ) { struct sockaddr_lock <S2SV_ModEnd> ( inode ),0
552,,0
553,"<S2SV_ModStart>, int ret <S2SV_ModEnd> ; if (",0
554,<S2SV_ModStart> = xchg ( ( ( struct ipv6_txoptions * ),0
555,,0
556,<S2SV_ModStart> ( s,0
557,<S2SV_ModStart> = 0 ;,0
558,<S2SV_ModStart> <S6SV_null> <S2SV_null> static struct ipv6_txoptions * np -> opt = rcu_dereference ( <S2SV_ModStart> np -> opt ) ; rcu_read_unlock ( ) ; rcu_unlock ( ) ;,0
559,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
560,,0
561,<S2SV_ModStart> int length < 0,0
562,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd>  bn_2SV_null> <S2SV_null> <S2SV_null>,0
563,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
564,<S2SV_ModStart>,0
565,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
566,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
567,,0
568,<S2SV_ModStart> ) { memset <S2SV_ModEnd> ( x -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( x -> <S2SV_ModStart> ) ; memset <S2SV_ModEnd> ( x ->,0
569,<S2SV_ModStart>  retval ) ; retval = NULL ;,0
570,"<S2SV_ModStart> ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> rows ) ; return ( exception ) ; }",0
571,<S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ret ) ),0
572,,0
573,<S2SV_ModStart> int mptctl_ADAPTERS2SV_null> <S2SV_null> <S2SV_null>,0
574,,0
575,,0
576,<S2SV_ModStart> * rq ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
577,<S2SV_ModStart> ; } } if ( str [ 0 ] == NULL ) { stderr = - 1 ; } else if (,0
578,"<S2SV_ModStart> ; if ( CHECKOVERFLOW ( datao, buf_size, 8 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; if ( CHECKOVERFLOW ( data_size, buf_size, buf_size, 8 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; if ( CHECKOVERFLOW ( buf_size, buf_size, buf_size, buf_size, buf_size, buf_size ) ) { exif_log ( en -> log, EXIF_LOG_CODE_ERROR, ""ExifMnoteNote"", EXIF_CODE_CODE_CODE_DATA, ""ExifMnoteNote"" ) ; break ; } n -> entries [ tcount ]. tag = exif_get_short ( buf + o + o + o + o + o + o + o + s -> entries [ tcount ]. entries [ tcount ]. order ) ; n -> entries [ tcount ]. order = exif_get_short ( buf + 1, n -> order ) ) ; n -> entries [ tcount ]. order = exif_get_short ( en -> entries [ tcount ]. order ) ; n -> entries [ tcount ]. order = exif_log ( en -> log, EXIF_LOG_CODE_CODE_CODE_CODE",0
579,,0
580,<S2SV_ModStart> inode * dir <S2SV_ModEnd> ; int dir_key <S2SV_ModStart> 0 ; } <S2SV_ModEnd> int dir_key =,0
581,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
582,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> break ; if,0
583,"<S2SV_ModStart>, & next_op ) ;",0
584,"<S2SV_ModStart>, message ) \\",0
585,,0
586,"<S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ;",0
587,,0
588,<S2SV_ModStart> ; if ( ( <S2SV_ModEnd> sock ),0
589,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
590,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null,0
591,"<S2SV_ModStart> int tagval, uint32 <S2SV_ModEnd> * length )",1
592,<S2SV_ModStart> = 0 ; sock_lock ( sk ) ;,0
593,"<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> w"", outputbuffer",0
594,<S2SV_ModStart> void task_context ( struct task <S2SV_ModEnd> ; struct <S2SV_ModStart> ; task_lock ( task <S2SV_ModEnd> ) ; task <S2SV_ModStart> ; task_lock ( task <S2SV_ModEnd> ) ; task <S2SV_ModStart> ; task <S2SV_ModEnd> -> io_context =,0
595,,0
596,<S2SV_ModStart> ; if ( len < 0 ||,0
597,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
598,<S2SV_ModStart> ctx ) ; <S2SV_ModEnd> return ret,0
599,"<S2SV_ModStart>, int flags <S2SV_ModEnd> ; if (",0
600,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
601,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
602,<S2SV_ModStart> ; } } else { free ( buf ) ; },0
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> 0 <S2SV_ModStart> * cp [ 1 ] ; * cp [ 1 ] = 0 ; * cp ++ ; if ( * cp [ 1 ] == '\\0' ) p ++ ; if ( * cp [ 1 ] == '\\0' ) p ++ ; p ++ ; if ( * cp [ 1 ] == '\\0' || * cp [ 0 ] == '\\0' || * cp [ 1 ] == '\\0' ) p ++ ; if ( * cp [ 1 ] == '\\0' && * cp [ 1 ] == '\\0' && * cp [ 1 ] == '\\0' && * cp [ 1 ] = 0x' && * cp ++ ; if ( * cp [ 0 ] == '\\0' ) { * cp [ 0 ] = 0 ] = 0 ; * cp [ 0 ] = 0 ; * cp ++ ; * cp [ 1 ] = 0 ] = 0 ; * cp ++ ; * cp [ 0 ] = 0 ] = 0 ; * cp ++ ; * cp ++ ; if ( * cp == '\\0' && * cp [ 0 ] == '\\\\' <S2SV_ModEnd> == '\\0' ) <S2SV_ModStart> ; if ( <S2SV_ModStart>,0
604,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
605,<S2SV_ModStart> DCT * pix = NULL,0
606,<S2SV_ModStart> best_mv ; vpx_mv = 0 ;,0
607,<S2SV_ModStart> crypto_kfree ; strncpy <S2SV_ModEnd> ( skb.,0
608,<S2SV_ModStart> -> count ; unsigned int count ; <S2SV_ModStart> -> count ; idx < <S2SV_ModEnd> count ; idx,0
609,<S2SV_ModStart> ; size_t <S2SV_ModEnd> size ; size_t,0
610,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModStart> ; if (! Stream_GetRemainingLength ( s ) ) return FALSE,0
611,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
612,"<S2SV_ModStart> ( interface, NULL",0
613,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
614,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
615,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null,0
616,,0
617,<S2SV_ModStart> = NULL ; ret = NULL ;,0
618,<S2SV_ModStart> ( ) ; free ( ) ;,0
619,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
620,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm ) ; vpx_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm ) ; vpx_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_write_bit <S2SV_ModEnd> ( wb,",0
621,<S2SV_ModStart> : if ( optarg ) { <S2SV_ModEnd> return ; },0
622,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context ->,0
623,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
624,<S2SV_ModStart> 0 ) ; memset <S2SV_ModEnd> ( p -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( pbi ->,0
625,"<S2SV_ModStart> int status ; uint16_t status ; uint16_t status ; uint16_t status ; uint16_t status ; uint16_t status ; uint16_t status ; size_t status ; size_t status ; status = sizeof ( status & ENC624J600_ESTAT )!= 0 ) { status = <S2SV_ModEnd> ; status = <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) ; status = <S2SV_ModEnd> ; status <S2SV_ModStart> ( interface, ENC624J600_EN <S2SV_ModEnd> ) ; status <S2SV_ModStart> ( interface, ENC624J600_ECON2 )!= 0 ) { status = ENC624J600_EN <S2SV_ModEnd> ; status <S2SV_ModStart> ( interface, ENC624J600_EN <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ( interface, ENC624J600_TXIF <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ( interface, ENC624J600_START ) <S2SV_ModEnd> ) ; return",0
626,<S2SV_ModStart> ] == 0x01 && i < i,0
627,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
628,"<S2SV_ModStart> VALUE args ) { VALUE rb_args = rb_options ; int parse_args ( rb_options, rb_options ) ; int scanned_args = rb_const_args ( rb_args ( rb_args, rb_options ) ) ; if (! rb_options ) { parse_options = rb_get ( rb_options ), rb_options ; parse_options = rb_options = rb_get ( rb_args ( rb_options ), rb_options ) ) ; if ( scanned_options = rb_args ( scanned_args ( rb_options ) ) ) rb_get ( rb_intern ( rb_options ), rb_intern ( rb_options ), rb_options ) ) ;",0
629,,0
630,<S2SV_ModStart> ++ ; } if ( bytes < 0 ) return 0 ;,0
631,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
632,<S2SV_ModStart> ; if ( err < 0 ) goto out ; err = - EINVAL ; if (,0
633,<S2SV_ModStart> -> event = handle <S2SV_ModEnd> ; mutex_unlock ( <S2SV_ModStart> ) ; } <S2SV_null>,0
634,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> char * s ; int <S2SV_ModStart> len ; <S2SV_ModEnd> len = ( u8_t <S2SV_ModStart> len ) { if ( len <S2SV_null> <S2SV_null>,0
635,<S2SV_ModStart> ) ) ; if ( cib -> session == NULL ) { <S2SV_ModStart> ) continue ; },0
636,"<S2SV_ModStart> ( interface, KSZ8851_ISR ) ; if ( ( status & KSZ8851_RXIF <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_E <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_RXS2SV_null>",0
637,"<S2SV_ModStart> const char * n_seq <S2SV_ModEnd>, int",0
638,<S2SV_ModStart> ) ) ; ret = 0 ;,0
639,<S2SV_ModStart> ; } } if (,0
640,<S2SV_ModStart> ( code ) \\,0
641,<S2SV_ModStart> ) ; return false,0
642,<S2SV_ModStart> ; if ( i >= width ) return 0,0
643,<S2SV_ModStart> ( n ) <S2SV_ModEnd> ; } <S2SV_null>,0
644,"<S2SV_ModStart>, sizeof ( double <S2SV_ModEnd> ) ) ;",0
645,,0
646,,0
647,<S2SV_ModStart> out ; } <S2SV_ModEnd> if (!,0
648,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
649,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> int mi_row, <S2SV_ModStart> cpi, MACROBLOCKD * const tile, MACROBLOCKD * const tile, MACROBLOCKD * const x <S2SV_ModStart> mi_row, MACROBLOCKD * const x, <S2SV_ModEnd> mi_col ) <S2SV_ModStart> mi_row ) { <S2SV_ModEnd> if ( cpi <S2SV_ModStart> ( cpi, xd <S2SV_ModEnd>, mi_col )",0
650,,0
651,<S2SV_ModStart> pixel_info -> rows * rows <S2SV_ModEnd> ; number_planes =,0
652,,0
653,<S2SV_ModStart> break ; } if ( fa ) return fa ;,0
654,"<S2SV_ModStart>, flags ) <S2SV_ModEnd> ; if (",0
655,"<S2SV_ModStart>, sizeof ( double <S2SV_ModEnd> ) ) ;",1
656,<S2SV_ModStart> ( event ) ; <S2SV_ModEnd> if ( event,0
657,"<S2SV_ModStart> int len ; ND_TCHECK2 ( tptr [ 0 ], sizeof ( int ) ) ;",0
658,<S2SV_ModStart> -> outputbuffer ; <S2SV_ModEnd> if ( res,0
659,"<S2SV_ModStart> dest ) { memcpy <S2SV_ModEnd> ( dest,",0
660,<S2SV_ModStart> ) ) ; return <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
661,<S2SV_ModStart> ; int ret = 0,0
662,<S2SV_ModStart> ) return - EINVAL <S2SV_ModEnd> ; if (,0
663,"<S2SV_ModStart>, 0, <S2SV_ModEnd> size ) ;",0
664,<S2SV_ModStart> priv_flags &= ~ ( IFF_SHARING ) <S2SV_ModEnd> ; dev ->,0
665,<S2SV_ModStart> ; # endif memcpy <S2SV_ModEnd> ( b ->,0
666,"<S2SV_ModStart> ( interface, ENC624J600_EIR <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_EIR <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_EIR <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MACON2 <S2SV_ModEnd> ) ; status <S2SV_ModStart> ( interface -> <S2SV_ModStart> ( interface, ENC624J600_MACON2 <S2SV_ModEnd> ) ; status <S2SV_ModStart> ( interface -> <S2SV_ModStart> ( interface, ENC624J600_MACON2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MACON2 <S2SV_ModEnd> ) ; } }",0
667,<S2SV_ModStart> char * header <S2SV_ModEnd> ; char *,0
668,<S2SV_ModStart> ctx -> priv <S2SV_ModEnd> ; if (,0
669,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
670,"<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1, 0 )",0
671,<S2SV_ModStart> S2SV_null> < 0,0
672,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
673,,0
674,<S2SV_ModStart> ; int res = 0 <S2SV_ModStart> ; if ( option_type == NULL ) { if ( option_type == NULL ) return VPX_CODEC_FORMAT ; } else if ( <S2SV_ModStart> ) return VPX_CODEC_ERROR ; } <S2SV_ModEnd> if ( <S2SV_ModStart> ; } else if ( option_type == 0 ) ) { if ( opt_type == 0 ) { res = 1 ; } else if ( <S2SV_ModStart> == VPX_CODEC_FACTORS2SV_null> 0 ) ) { vp9_null>,0
675,<S2SV_ModStart> ( event ) ; <S2SV_ModEnd> if ( event,0
676,"<S2SV_ModStart> ) ) ; memset ( mb_col, 1 ) ;",0
677,,0
678,,1
679,<S2SV_ModStart> return false,0
680,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
681,<S2SV_ModStart> = 0 ; struct hhdr_len = 0 ; <S2SV_ModStart> struct eth ; phdr = 0,0
682,"<S2SV_ModStart>, s + 1 <S2SV_ModEnd> ) ; if",0
683,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL,0
684,,0
685,<S2SV_ModStart> ) { const VP9EncoderConfig <S2SV_ModEnd> * const <S2SV_ModStart> ) { const VP9EncoderConfig <S2SV_ModEnd> * oxcf = <S2SV_ModStart> ) ; const VP9EncoderConfig <S2SV_ModEnd> * oxcf = <S2SV_ModStart> -> oxcf ; const VP9EncoderConfig * oxcf = & cpi -> gf_boosting ; const VP9EncoderConfig <S2SV_ModEnd> = cpi -> <S2SV_ModStart> -> oxcf ; const VP9EncoderConfig <S2SV_ModEnd> = cpi -> <S2SV_ModStart> = 0 ; if ( cpi -> baseline == KEY_FRAME ) <S2SV_ModEnd> == KEY_FRAME ) <S2SV_ModStart> ) / 2 ; if ( cpi -> oxcf. avg_frame_frame_frame_boost = ( cpi ) <S2SV_ModEnd> == KEY_FRAME ) <S2SV_ModStart> ; if ( cpi <S2SV_ModEnd> == KEY_FRAME ),0
686,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> = vpx_reader <S2SV_ModEnd> ( r,",0
687,,0
688,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null,0
689,<S2SV_ModStart>,0
690,<S2SV_ModStart> ; if ( (,0
691,,0
692,,0
693,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
694,,0
695,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, 0 )",0
696,<S2SV_ModStart> ) ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
697,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
698,"<S2SV_ModStart> mq_mq_rq_rq ( q,",0
699,"<S2SV_ModStart> int length ; struct stream packet = * s ; <S2SV_ModStart> length ) { if (! s_check_rem ( s, length ) ) return FALSE ;",0
700,,0
701,<S2SV_ModStart> int buffer [ 8 <S2SV_ModEnd> ] ; int,0
702,<S2SV_ModStart> ( buf ) <S2SV_ModEnd> ; if (,0
703,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> inode_table_table_start ( int ) <S2SV_ModStart> ; if (! sBlk. table_start <S2SV_ModEnd> ) return FALSE <S2SV_ModStart> ; if ( <S2SV_ModEnd> ) return FALSE <S2SV_ModStart> ) return FALSE ; } return FALSE <S2SV_ModStart> ; } if (! s_start ) return FALSE <S2SV_ModEnd> ; } if (,0
704,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
705,"<S2SV_ModStart> ; memset <S2SV_ModEnd> ( seg,",0
706,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
707,<S2SV_ModStart> ) ; } TEMP_FAILURE_RETRY (,0
708,<S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> ; break ; case 4 : context -> pass = <S2SV_ModEnd> break ; case <S2SV_ModStart> ; break ; case 2 : context -> pass = <S2SV_ModEnd> break ; case 2 : context -> pass <S2SV_ModStart> ; break ; case 2 : context -> pass = context -> height + 1 ; break ; case 2 : context -> pass = i -> height + 1 ; break ; case 4 : context -> pass = i -> height + 1 ; break ; break ; break ; } else if ( context -> pass == 0 ) { context -> pass = i -> height ) { context -> pass = i -> pass = i -> height ; break ; } else { case 2 ; case 4 : context -> pass = i -> height ; } else { case 4 : context -> pass = i -> posY + 1 ; } else { context -> pass = i -> posY + 1 ; break ; } else { context -> pass = i -> posY + 1 ; },0
709,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
710,<S2SV_ModStart> ; if ( * cp == NULL || <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> )!= NULL || <S2SV_ModEnd> strcmp ( cp,0
711,<S2SV_ModStart> char * s <S2SV_ModEnd> ; char * <S2SV_ModStart> const char * c ; char * c ; char * c ; char * c ; char * c ; if ( ( ( ( ( * ) == '\\0' ) == '\\0' ) ) return 0 ; if ( ( ( * ) == '\\0' ) || ( ( * s == '\\0' ) == '\\0' || ( * s == '\\0' || ( * s == '\\0' ) ) outputbuffer [ 1 ] = '\\0' ; char * s ++ ] = 0 ; if ( ( ( * ) == '\\0' || ( * s == '\\0' || ( * s == '\\0' ) ) || ( ( * s2 [ 0 ] == '\\0' ) || ( ( * s2 [ 0 ] == '\\0' ) == '\\0' ) ) ; if ( ( ( ( * s == '\\0' ) ) == '\\0' || ( ( char * s2 [ 1 ] = 1 ) == '\\0' || ( ( ( * ) == '\\0' ) == '\\0' ) ) ; if ( ( ( ( * ) == '\\0' || ( ( ( * ) == '\\0' ) == '\\0',0
712,"<S2SV_ModStart> net * net <S2SV_ModEnd> ; u32 id <S2SV_ModStart> ; u32 ip_id_key <S2SV_ModEnd> ( net, <S2SV_ModStart>, sizeof ( struct ip_key <S2SV_ModEnd> ) ; net",0
713,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lineno, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { Py_CLEAR ( tmp ) ; } if ( tmp == NULL ) { PyErr_SetString ( PyId_None ) ; return 1 ; } else { int res = NULL ; } else { int res ; res = obj2ast_expr ( tmp, & tmp, & tmp, & tmp ) ; if ( tmp == NULL ) { Py_CLEAR ( tmp ) ; } if ( tmp == NULL ) { Py_CLEAR ( tmp ) ; } else { Py_CLEAR ( tmp ) ; } else { int res = NULL ; Py_CLEAR ( tmp ) ; } else { int res = obj2ast_expr ( tmp, & tmp, & tmp ) ; } else { int res = obj2ast_expr ( tmp, & tmp, & tmp, & tmp ) ; if ( tmp == NULL ) goto failed ; } else { int res = NULL ; } if ( tmp == Py_CLEAR ( tmp ) goto failed ; } else { int res = NULL ; } else { int res = NULL ; } else { int res = NULL",0
714,"<S2SV_ModStart> void write_mode ( vpx_writer <S2SV_ModEnd> * w,",0
715,<S2SV_ModStart> ) return - 1 <S2SV_ModEnd> ; if,0
716,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null,0
717,<S2SV_ModStart> == 0 ) { <S2SV_ModStart> = 0 ; },0
718,,0
719,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null,0
720,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void vpx_writer <S2SV_ModEnd> * pbi <S2SV_ModStart> * pbi ; VP9_COMMON * pbi = & pbi -> common ; VP9_COMMON * pbi = & pbi -> common ; VP9_COMMON * pbi = & pbi -> common ; VP9_COMMON * pbi = & pbi -> common ; VP9_COMMON * pbi = & pbi -> last_frame_frame_frame_frame_frame_data ; vpx_write_frame_frame_data ( & pbi -> frame_frame_data, cm ) ; vp9_data = NULL ; cm -> frame_data = NULL ; vpx_write_frame_frame_data = NULL ; pbi -> frame_frame_data = NULL ; vpx_free ( pbi ) ; cm -> frame_data = NULL ; vpx_write_frame_data = 0 ; pbi -> frame_frame_frame_data = 0 ; pbi -> last_frame_frame_frame_frame_frame_frame_frame = pbi -> last_frame_frame_frame_frame_frame_frame_frame",0
721,<S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( s,0
722,<S2SV_ModStart> opt ; struct ip_options_rcu <S2SV_ModEnd> * opt =,0
723,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
724,<S2SV_ModStart> <S2SV_null> <S2SV_null,0
725,"<S2SV_ModStart>, & len, 0",1
726,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
727,<S2SV_ModStart> ) { const VP9EncoderConfig <S2SV_ModEnd> * oxcf =,0
728,<S2SV_ModStart> char jas_uchar <S2SV_ModEnd> ; if (,0
729,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> { VP9_COMMON * const VP9_COMMON * x = & cpi -> common ; VP9_COMMON * const x = & cpi -> common ; MACROBLOCKD * const x -> common ; MACROBLOCKD * const x = & cpi -> common ; MACROBLOCKD * const x -> mb ; x -> mbmi_mode = & cpi -> mb ; x -> mbmi_mode = & cpi -> mbmi_mode_mode ; <S2SV_ModStart> -> oxcf. mbmi_mode_mode = & cpi -> mbmi_mode_mode_mode ; <S2SV_ModStart> ; } # if CONFIG_VP9_VP9_HIGHBITDEPTH if CONFIG_VP9_8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8 ; if ( cpi -> mode_mode == BLOCK_8X8X8X8X8X8X8X8X8X8X,0
730,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr,0
731,"<S2SV_ModStart>, & 1, <S2SV_ModEnd> ) { int",0
732,<S2SV_ModStart> case EXIT_REASON_NONE :,0
733,<S2SV_ModStart> { if ( c == NULL &&,0
734,<S2SV_ModStart> = 0 ; packet -> header. len = 0 ;,0
735,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
736,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> uint32 ( int,0
737,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4,",0
738,<S2SV_ModStart> ; if ( ip_hdr <S2SV_ModEnd> ( skb ),0
739,<S2SV_ModStart> int ret ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> length ),0
740,<S2SV_ModStart> y3 ) { sendClean ( outputbuffer ) ;,0
741,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null,0
742,"<S2SV_ModStart> y12 ; sprintf ( outputbuffer <S2SV_ModEnd>, outputbuffer )",0
743,"<S2SV_ModStart>, rdp, NULL",0
744,<S2SV_ModStart> ) ) { memcpy <S2SV_ModEnd> ( cpi ->,0
745,<S2SV_ModStart> ; if ( <S2SV_ModEnd> dev -> priv_flags &,0
746,"<S2SV_ModStart> * data ; struct stream packet = * s ; <S2SV_ModStart> ; if (! s_check_rem ( s, length ) ) { if (",0
747,,0
748,<S2SV_ModStart> } if ( (,0
749,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
750,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
751,"<S2SV_ModStart> uint16 size, sizeof ( s )",0
752,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
753,"<S2SV_ModStart> cpi, vpx_writer <S2SV_ModEnd> * probs,",0
754,<S2SV_ModStart> r = 0 <S2SV_ModEnd> ; r =,0
755,<S2SV_ModStart> <S2SV_null> <S2SV_null,0
756,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
757,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null,0
758,"<S2SV_ModStart> buf, buf <S2SV_ModEnd> ) ; if",0
759,<S2SV_ModStart> <S2SV_null> <S2SV_null,0
760,<S2SV_ModStart> break ; } if ( task -> tk_status == NULL ) goto error ;,0
761,"<S2SV_ModStart>, n ) ; if ( w == NULL ) return 0",1
762,,0
763,<S2SV_ModStart> <S2SV_null> <S2SV_null,0
764,<S2SV_ModStart> ; if ( len < 1 ) return 0,0
765,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
766,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
767,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
768,,0
769,,0
770,"<S2SV_ModStart> ; int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
771,<S2SV_ModStart> char * a <S2SV_ModEnd> ) { char,0
772,<S2SV_ModStart> g ) ; g -> gcstate = Ggc ;,0
773,<S2SV_ModStart> return - ENOMEM <S2SV_ModEnd> ; ret =,0
774,"<S2SV_ModStart> ) ; memset <S2SV_ModEnd> ( buffer, <S2SV_ModStart> ) ; } <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>",0
775,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
776,<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi ->,0
777,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
778,<S2SV_ModStart> i ; } if ( len < 4 ) goto trunc ;,0
779,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
780,"<S2SV_ModStart> int mptctl_init ( MPT_ADAPTER * ioc, <S2SV_ModStart> return MPT_ADAPTER * ioc, <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } dctl ;",0
781,"<S2SV_ModStart>, size_t length, <S2SV_ModEnd> buffer ) ; image",0
782,,0
783,,0
784,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> int r, vpx_read_literal <S2SV_ModEnd> ( r,",0
785,"<S2SV_ModStart> * probs, vpx_prob <S2SV_ModEnd> * probs,",0
786,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r )",0
787,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
788,"<S2SV_ModStart> ndo, cp <S2SV_ModEnd> ) ; if",0
789,,0
790,<S2SV_ModStart> return - 1 <S2SV_ModEnd> ; if (,0
791,<S2SV_ModStart> ; if ( skb -> len < sizeof ( skb ) ) return 0 ; if (,0
792,,0
793,,0
794,"<S2SV_ModStart> -> cac_id, serial -> len <S2SV_ModEnd> ) ; SC_FUNC_RETURN",1
795,<S2SV_ModStart> ; tok -> type_comments = 0 ; tok ->,0
796,,0
797,<S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( s,0
798,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> char buf [ 0,0
799,,0
800,<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> (! addrlen ) OE_RAISE_ERRNO ( OE_EINVAL ) ; * addrlen = * addrlen ; OE_RAISE_ERRNO ( OE_EINVAL ) ;,0
801,,1
802,<S2SV_ModStart> ; if (! s ) return FALSE,0
803,<S2SV_ModStart> ) ) { struct ipv6_txoptions * opt = NULL ; <S2SV_ModStart> * opt = rcu_dereference (,0
804,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
805,<S2SV_ModStart> ; dm9000WriteReg ( DM9000ReadReg ( DM9000WriteReg <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; dm9000WriteReg ( DM9000ReadReg ( DM9000WriteReg <S2SV_ModEnd> ) ; dm9000WriteReg <S2SV_ModStart> ) ; dm9000WriteReg ( DM9000WriteReg ( DM9000WriteReg ( DM9000ReadReg ( DM9000_RSR ) ) ; dm9000WriteReg ( DM9000ReadReg ( DM9000ReadReg ( DM9000ReadReg ( DM9000_RSR ) ) ; dm9000ReadReg ( DM9000ReadReg ( DM9000ReadReg ( DM9000ReadReg ( DM9000ReadReg ( DM9000_R ) ) ) ; dm9000ReadReg ( DM9000ReadReg ( DM9000ReadReg ( DM9000ReadReg ( DM9000_RSR ) ) <S2SV_ModEnd> ) ;,0
806,"<S2SV_ModStart>, buffer, t2p -> tiff_datasize,",1
807,<S2SV_ModStart> new_parent ) ; <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
808,<S2SV_ModStart> 0 ) ; if ( private -> session == NULL ) { <S2SV_ModStart> ) ; rc = NULL ; },0
809,<S2SV_ModStart> data -> msg_namelen = 0,0
810,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
811,<S2SV_ModStart> ; goto error <S2SV_ModEnd> ; } if,0
812,,0
813,"<S2SV_ModStart> -> name ; if ( msg_sys <S2SV_ModEnd> -> name, <S2SV_ModStart> -> name, msg_sys <S2SV_ModEnd> -> name,",0
814,<S2SV_ModStart> pixel_info -> rows * rows <S2SV_ModEnd> ; number_planes =,0
815,<S2SV_ModStart> comp -> type <S2SV_ModEnd> ) )!=,0
816,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
817,<S2SV_ModStart> client ) { <S2SV_ModEnd> if ( client,0
818,<S2SV_ModStart> ; p = 0,0
