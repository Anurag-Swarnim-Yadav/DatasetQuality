,raw_predictions,correctly_predicted
0,<S2SV_ModStart> ; if ( n2size < 1 ) <S2SV_ModEnd> { applog (,0
1,<S2SV_ModStart> case EAP_FRAME_TYPE_PACKET : ND_TCHECK_8BITS ( tptr ) ; <S2SV_ModStart> * ( tptr ) { ND_TCHECK_8BITS ( tptr + 4 ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr + 4 ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> case EAP_TYPE_8BITS ( tptr + 5 ) { ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr + 6 ) ;,0
2,<S2SV_ModStart> ; return - EINVAL ; if (,0
3,<S2SV_ModStart> return - EINVAL ; if ( void ) return - EINVAL,0
4,<S2SV_ModStart> if ( ( skb_hdr <S2SV_ModEnd> ( skb ),0
5,"<S2SV_ModStart>, offset ; if ( avio_feof ( f ) ) { index -> item_count = 0 ; av_freep ( & index -> items ) ; return AVERROR_INVALIDDATA ; }",1
6,<S2SV_ModStart> * tpg ; u16 <S2SV_ModEnd> tpgt ; u16,0
7,,0
8,"<S2SV_ModStart> { u32 data <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return ; kvm_read_guest_cached ( vcpu -> kvm, & <S2SV_ModEnd> vcpu -> arch <S2SV_ModStart>. apic -> vapic_cache, & data, sizeof ( u32 ) <S2SV_ModEnd> ) ; apic_set_tpr",1
9,<S2SV_ModStart> src ) ; __switch_to_tm ( src ) ;,0
10,"<S2SV_ModStart> ( c ) i ++, <S2SV_ModEnd> c = c <S2SV_ModStart> -> next ; <S2SV_ModEnd> if ( c",0
11,"<S2SV_ModStart> ( sb, KERN_ERR,",1
12,"<S2SV_ModStart> ipv6_select_ident ( fptr, ( struct rt6_info * )",0
13,"<S2SV_ModStart> u64 nr, <S2SV_ModEnd> struct perf_event_context * <S2SV_ModStart>, regs <S2SV_ModEnd>, regs,",0
14,<S2SV_ModStart> < EXT2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> len ) { char * data = ( <S2SV_ModEnd> struct grub_block ) ; <S2SV_ModStart> data_size ) { <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { return grub_error = EXT_ERR ( inode -> data ) ; break ; } <S2SV_ModStart> i_block ) { <S2SV_ModEnd> } },0
15,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static tran_high_t <S2SV_ModEnd> x0, tran_low_t <S2SV_ModStart> output ) { tran_high_t <S2SV_ModEnd> x1 = input <S2SV_ModStart>, input, tran_high_t <S2SV_ModEnd> x1 ; tran_low_t <S2SV_ModStart> ] = ( tran_low_t ) <S2SV_ModStart> output ) { tran_low_t <S2SV_ModEnd> x0 ] = ( tran_low_t ) <S2SV_ModStart> ; tran_low_t <S2SV_ModEnd> x1 = ( tran_low_t ) <S2SV_ModStart> 7 ] = ( tran_low_t ) <S2SV_ModStart> 7 ] = ( tran_low_t )",0
16,<S2SV_ModStart> == 0 ) sanitize_dead_code ( env ) ; if ( ret == 0 ),1
17,"<S2SV_ModStart> int i ; if (! config -> sample_rate ) { strcpy ( wpc -> error_message, ""sample <S2SV_blank> rate <S2SV_blank> cannot <S2SV_blank> be <S2SV_blank> zero!"" ) ; return FALSE ; }",1
18,"<S2SV_ModStart> = 0 ; unsigned char sense_buffer [ cgc -> sense ], * senseptr = NULL ; <S2SV_ModStart> cgc -> sense ) ; if ( cgc -> sense ) sense ) memset ( & cgc -> sense, 0, 0, 0, sizeof ( * <S2SV_ModEnd> ) ) ; if",0
19,<S2SV_ModStart> ) ; },0
20,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
21,"<S2SV_ModStart> c. offset = 0,",0
22,"<S2SV_ModStart> write_mv_class, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> { vpx_writer <S2SV_ModEnd> ( w, <S2SV_ModStart> } else vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> } else vpx_write_literal <S2SV_ModEnd> ( w,",0
23,<S2SV_ModStart> ) ; return <S2SV_ModEnd> ralg -> seedsize,1
24,<S2SV_ModStart> ; if ( sockaddr_len < sizeof ( struct sockaddr_pppox ) ) return - EINVAL ; if (,1
25,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } else { <S2SV_ModStart> ( ) ; },0
26,<S2SV_ModStart> char * fmtname ; int debug <S2SV_ModStart> = 0 ; debug = 0 ; <S2SV_ModStart> break ; case OPT_DEBUG : debug = 0 ;,0
27,<S2SV_ModStart> esr ) { __user * pc = ( void __user * ) info ; <S2SV_ModStart> esr ) ; info. si_errno = ( regs ) ; info. si_errno = 0 ; info. si_errno = SIGERR ; info. si_errno = 0 ; info. si_errno = 0 ;,0
28,"<S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModEnd> if ( length <S2SV_ModStart> ) ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",0
29,"<S2SV_ModStart> intf ) { struct usb_host_interface * <S2SV_ModEnd> alt ; alt <S2SV_ModStart> ; if (! alt ) return - ENODEV <S2SV_ModEnd> ; return usb_set_interface <S2SV_ModStart> ( udev, alt -> <S2SV_ModEnd> desc. bInterfaceNumber <S2SV_ModStart> bInterfaceNumber, alt -> desc. bAlternateSetting",1
30,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> memcpy ( struct <S2SV_ModStart> char * el, int tolen <S2SV_ModStart> p, int tolen <S2SV_ModStart> = - ENAMETOOLONG ; int tolen ; if ( tolen == 0 ) return - ENAMETOOLONG ; <S2SV_ModStart> case 3 : if ( tolen < 2 ) return - ENAMETOOLONG ; tolen -= 3 ; <S2SV_ModStart> = '\\0' ; tolen -- ; tolen -- <S2SV_ModStart> case 3 : if ( tolen < 2 ) return - ENAMETOOLONG ; tolen -- ; <S2SV_ModStart> case 3 : if ( tolen < 2 ) return - ENAMETOOLONG ; tolen -- ; tolen -- <S2SV_ModStart> += 2 ; tolen -= comp_len ; tolen -= comp_len ; tolen -= comp_len ; <S2SV_ModStart> case 3 : if ( tolen == 0 ) return - ENAMETOOLONG ; tolen -- <S2SV_ModStart> = '\\0' ; tolen -- ; tolen -= 2 ; tolen -= 2 ;",0
31,<S2SV_ModStart> == - 1 || class == CLIENT_TYPE_MASTER ) { err = - 1 ; goto err ; },0
32,<S2SV_ModStart> unsigned long flags ; if ( qid > NVMET_QUEUES ) return NULL,0
33,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( interface <S2SV_ModStart> ) ) ; usb_err ( interface -> minor ) ;,0
34,<S2SV_ModStart> < 1 || vstart + vdaux < vstart <S2SV_ModEnd> ) { sdb_free,1
35,"<S2SV_ModStart> dest_keyring ) { struct key_keyring * dest_keyring = get_keyring ( dest_keyring ) ; <S2SV_ModStart> dest_keyring ) ; if ( dest_keyring ) { ret = key_put ( dest_keyring, dest_keyring ) ; goto invalid_keyring ; } <S2SV_ModEnd> } <S2SV_null>",0
36,<S2SV_ModStart> = create_spnego_ctx ( 1,1
37,"<S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_l2tpip <S2SV_ModEnd> ) ) return <S2SV_ModStart> ; if ( addr -> l2tp_family!= AF_INET <S2SV_ModEnd> ) return - <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> ret = - <S2SV_ModStart> ( sk ) ; if (! sock_flag ( sk, SOCK_ZAPPED ) ) goto out",1
38,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> max_max_max_max_size ( <S2SV_ModStart> return 0 ; <S2SV_ModEnd> max_size = <S2SV_ModStart> ) return 0,0
39,"<S2SV_ModStart>,",0
40,<S2SV_ModStart> = NULL ; strl = NULL ;,0
41,,0
42,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0x51 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 0x51 )",0
43,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
44,,0
45,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horAcc8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
46,"<S2SV_ModStart> tsample_t s ; uint16 bps = 0 ; ( void ) TIFFGetField ( in, TIFFTAG_BITSPERSAMPLE, & bps ) ; if ( bps!= 8 ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> can <S2SV_blank> only <S2SV_blank> handle <S2SV_blank> BitsPerSample=8 <S2SV_blank> in <S2SV_blank> %s"", ""cpContig2SeparateByRow"" ) ; return 0 ; }",1
47,"<S2SV_ModStart> ) ; struct hugepage_subpool * spool = ( struct hugepage_subpool <S2SV_ModEnd> * ) hugepage_subpool_subpool ( spool <S2SV_ModEnd>, 1 )",0
48,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) { return AVERROR_EOF ; } if (,1
49,<S2SV_ModStart> goto not_found ; if ( e - p > HOST_NAME_MAX - p ) goto not_found ;,0
50,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct,0
51,"<S2SV_ModStart>, cp, ep2, map, nmap ) ; } else cp = ikev1_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) goto trunc ; } if <S2SV_ModStart> < ep2 ) <S2SV_ModEnd> ND_PRINT (",0
52,"<S2SV_ModStart> ; if ( capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) ) ||! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) ) return - EPERM",0
53,"<S2SV_ModStart> ( reader, NULL,",0
54,<S2SV_ModStart> config -> pm_max_requests ; fpm_socket = fpm_socket ;,0
55,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> frame_null> <S2SV_null> static <S2SV_ModStart> next_stats ( TWO_PASS <S2SV_ModEnd> ) { const <S2SV_ModStart> next_PASS <S2SV_ModEnd> * const <S2SV_ModStart> next_frame ) { const FIRSTPASS_STATS * <S2SV_ModStart> next_frame ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
56,<S2SV_ModStart> 0 ; } err =,0
57,<S2SV_ModStart> ret ; } <S2SV_ModEnd> if ( inode,0
58,<S2SV_ModStart> valuelen ) ; args -> rmtvaluelen = args -> valuelen ;,1
59,<S2SV_ModStart> ; if ( <S2SV_ModEnd> name ) {,0
60,"<S2SV_ModStart> 2 ) { ND_TCHECK2 ( * tptr, 2 ) ; <S2SV_ModStart> len - 2 ; if ( len < stlv_len ) goto trunc ; ND_TCHECK2 ( * ( tptr ), stlv_len ) <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < stlv_len ) goto trunc ; stlv_len = stlv_len - ISIS_SUBTLV_SPB_INSTANCE_INSTANCE_SPB_INSTANCE_INSTANCE_INSTANCE ; stlv_len = stlv_len ; <S2SV_ModStart> case ISIS_SUBTLV_SPB_SPB_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_SPB_INSTANCE_INSTANCE_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> break ; } stlv_len = stlv_len - ISIS_SUBTLV_SUBTLV_SPB_INSTANCE_INSTANCE_LEN ; stlv_len = stlv_len - ISIS_SUBTLV_SUBTLV_SPB_SPB_INSTANCE_INSTANCE_INSTANCE_LEN ; stlv_len = stlv_len",0
61,"<S2SV_ModStart>, b_size - 1 <S2SV_ModEnd> ) ; if",0
62,"<S2SV_ModStart> flags ) ; memset ( & ddi, 0, sizeof ( ddi ) ) ;",1
63,<S2SV_ModStart> == 12 && ( <S2SV_ModStart> flags & TH_SYN ),1
64,"<S2SV_ModStart> -> ipc_socket ; <S2SV_ModEnd> lxc_socket = ipc ( ipc ( <S2SV_ModStart> -> ipc_socket ; int procfd ; int procfd = 0, <S2SV_ModEnd> on_exec ; <S2SV_ModStart> { ERROR ( ""Error <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> process <S2SV_blank> IPC <S2SV_blank> process <S2SV_blank> (0."" ) ; shutdown ( ipc ( ipc_socket, strerror ( ipc_socket, SHUT_RDWR ) <S2SV_ModEnd> ) ; shutdown <S2SV_ModStart> { ERROR ( ""Error <S2SV_blank> to <S2SV_blank> process <S2SV_blank> process <S2SV_blank> process <S2SV_blank> process <S2SV_blank> process <S2SV_blank> init <S2SV_blank> process <S2SV_blank> (0."" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; shutdown ( - 1 ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; close ( ipc_socket ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; close ( ipc_socket, SHUT_RDWR ) ;",0
65,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( len <S2SV_ModStart> goto line, len - 1",0
66,"<S2SV_ModStart> ( header -> biBitCount == 0 ) { fprintf ( stderr, ""Error, <S2SV_blank> invalid <S2SV_blank> biBitCount <S2SV_blank> %d\\n"", 0 ) ; return OPJ_FALSE ; } if ( header ->",1
67,<S2SV_ModStart> NULL ; } sas_probe_devices ( port ) ;,1
68,<S2SV_ModStart> 0 ) { if ( image -> colors < tga_info. colormap_index ) image -> colors = tga_info. colormap_index ;,1
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,"<S2SV_ModStart> ENOBUFS ; } memset ( & line, 0, sizeof ( line ) ) ;",1
71,"<S2SV_ModStart> arg ) { int ret ; ret = scsi_verify_blk_ioctl ( bd, cmd ) ; if ( ret < 0 ) return ret ;",1
72,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> p ) { if (! stream ) return FALSE ; } return TRUE ;,0
73,<S2SV_ModStart> * ureq ; unsigned,0
74,"<S2SV_ModStart> int m ; if ( n < 0 ) { jas_deprecated ( ""negative <S2SV_blank> count <S2SV_blank> for <S2SV_blank> jas_stream_pad"" ) ; }",1
75,<S2SV_ModStart> j ++ ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ;,0
76,<S2SV_ModStart> av_log ( mxf -> fc,1
77,"<S2SV_ModStart> path, path, rootfs -> mount",0
78,<S2SV_ModStart> + 10 ; if ( psf -> fileoffset < psf -> filelength ) { <S2SV_ModStart> ; } ; } ;,1
79,<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( p + l2info -> cookie_len ) ;,1
80,<S2SV_ModStart> NF_STOLEN ; return err == 0? NF_ACCEPT : NF_DROP <S2SV_ModEnd> ; } <S2SV_null>,1
81,"<S2SV_ModStart> * up ; int klen, ulen ; <S2SV_ModStart> rta ) ; klen = <S2SV_ModEnd> xfrm_replay_state_len ( up <S2SV_ModStart> out ) ; klen = rcu_replay_state_len ( klen ) ; memcpy ( up, up, ulen ) ;",0
82,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> break ;,0
83,<S2SV_ModStart> case 0,0
84,<S2SV_ModStart> ret ) ; if ( ret < 0 ) return false ;,0
85,"<S2SV_ModStart> ( buf = jas_alloc3 ( bufsize, numcols <S2SV_ModEnd>, sizeof (",1
86,<S2SV_ModStart> * map ; <S2SV_ModEnd> vpx_codec_cfg_t res,0
87,"<S2SV_ModStart> size ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""GSO <S2SV_blank> size <S2SV_blank> is <S2SV_blank> not <S2SV_blank> zero.\\n"" ) ; netbk_fatal_tx_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> gso. type ) { netdev_err <S2SV_ModEnd> ( vif <S2SV_ModStart> dev ) ; netbk_fatal_tx_err ( vif",0
88,"<S2SV_ModStart> * object, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void *",0
89,"<S2SV_ModStart> xfr_cmd, fname <S2SV_ModEnd> ) ; free",1
90,<S2SV_ModStart> mixer ) { snd_usb_mixer_disconnect ( mixer ) ;,1
91,<S2SV_ModStart> ) { struct packet_rollover * rollover = NULL ; struct <S2SV_ModStart> ) ) { err = - EINVAL ; goto out ; <S2SV_ModStart> -> fanout ) goto out ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { err = - EINVAL ; <S2SV_ModStart> -> rollover ) goto out <S2SV_ModEnd> ; atomic_long_set ( & <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num <S2SV_ModStart> atomic_long_long_long_set ( & <S2SV_ModEnd> rollover -> num <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_long_set ( & <S2SV_ModStart> atomic_set ( & <S2SV_ModEnd> rollover ) ;,0
92,<S2SV_ModStart> ( newnp -> ipv6_len <S2SV_ModEnd> ) ; },0
93,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
94,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
95,<S2SV_ModStart> conhh ) ; ret = 0 ;,0
96,"<S2SV_ModStart> ( interface, ENC28J60_ECON1 ) & ENC28J60_ECON1 <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1 ) & ENC28J60_ECON1 <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd>, ENC28J60_ECON1 ) <S2SV_ModStart> ( interface, ENC28J60_ECON1 ) ; enc28J60WriteReg ( interface, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd> ) ; enc28J60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1 ) <S2SV_ModEnd> ) ; enc28j60WriteReg ( interface, ENC28J60_ECON1 <S2SV_ModEnd> ) ; enc28J60WriteReg ( <S2SV_ModStart> ( interface, ENC28J60",0
97,<S2SV_ModStart> o ) ; Py_RETURN_NONE <S2SV_ModEnd> ; } value,0
98,<S2SV_ModStart> = page ; if (! page_is_good ( page ) ) { return 0 ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( page_name <S2SV_ModStart> ) ) { return false ; },0
99,<S2SV_ModStart> ; if ( ( flags & EXT4_GET_BLOCKS_CONVERT ) ) <S2SV_ModEnd> { ret,0
100,<S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ;,1
101,"<S2SV_ModStart> if (! caller_may_see_dir ( fc -> pid, controller, cgroup ) ) { ret = - ENOENT ; goto out ; } if (!",1
102,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
103,<S2SV_ModStart> ) ptr = ptr -> buffer_size,0
104,"<S2SV_ModStart> : if (! cap_issubset ( new -> cap_permitted, old -> cap_permitted ) ) bprm -> per_clear |= PER_CLEAR_ON_SETID ; if (",1
105,"<S2SV_ModStart> int error ; struct mb2_cache_entry * ce ; struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache = <S2SV_ModStart> ( ext4_mb_cache, <S2SV_ModEnd> hash ) ; <S2SV_ModStart> ( ext4_mb_cache, <S2SV_ModEnd> hash ) ; <S2SV_ModStart> if ( error ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ) ; } <S2SV_ModEnd> } } <S2SV_null>",0
106,<S2SV_ModStart> ) ) ; return NULL ;,0
107,<S2SV_ModStart> tf = ( <S2SV_ModEnd> luaY_parser ) (,1
108,<S2SV_ModStart> ; int err ; if ( protocol < 0 || protocol >= IPPROTO_MAX ) return - EINVAL,1
109,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> opt.",1
110,"<S2SV_ModStart> ; dl = kzalloc <S2SV_ModEnd> ( size,",1
111,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static u_int <S2SV_ModEnd> rtr_char pdu_str ( u_char <S2SV_ModStart> * tptr, const u_int len, const u_int len ) { ND_TCHECK2 ( * tptr ) ; <S2SV_ModStart> * tptr ; ND_TCHECK2 ( * tptr ) ; if ( len < sizeof ( * tptr ) ) { ND_PRINT ( ( ndo, ""%s <S2SV_blank> is <S2SV_blank> rtr_pdu)"", len ) ) ; return len ; } if ( len < sizeof ( rpki_pdu ) { ND_PRINT ( ( ndo, ""%s"", len ) ) ; return len ; } ND_PRINT ( ( ndo, sizeof ( rpki_pdu ) ) ) ; <S2SV_ModStart> case RPKI4 : ND_PRINT ( ndo, sizeof ( rpki_rtr_pdu ) ) ; <S2SV_ModStart> pdu ) { ND_PRINT ( ndo, sizeof ( rpki_pdu ) ) ; return len ; }",0
113,<S2SV_ModStart> ; int n <S2SV_ModEnd> ; skb -> <S2SV_ModStart> rose_facilities_struct ) <S2SV_ModEnd> ; skb ->,0
114,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr,1
115,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } else (,0
116,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret ;",0
117,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; int ret <S2SV_ModStart> ) ; } o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> cl_node ( ) ; o2nm_unlock_subsystem ( ) ;,0
118,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; break",1
119,<S2SV_ModStart> == '/' ) {,0
120,"<S2SV_ModStart> tpm, TPM_RC TPM_RC TPM_DIGEST <S2SV_ModEnd> ) { TPM_RC ; const <S2SV_ModStart> ) { TPM2B_DIGEST <S2SV_ModEnd> tpm2B_RC ; const <S2SV_ModStart> = TPM_DIGEST * md ; if (! rc ) { TPM_ERR ( & ctx ) ; return TPM_DIGEST * ) ; } TPM2B_HASH ( & ctx, key -> size, NULL ) ; if (! rc ) { LOG_ERR ( ""Algorithm <S2SV_blank> not <S2SV_blank> to <S2SV_blank> bytes\\n"" ) ; return TPM_DIGEST ) ; } TPM_HASH ( & ctx, key -> size, key -> size, key -> size, NULL ) ; if (! rc ) { LOG_ERR ( ""HMAC <S2SV_blank> %s"", NULL ) ; return TPM2B_DIGEST, NULL ) ; } <S2SV_ModStart> bytes ) { TPM_DIGEST ) ; return TPM_HASH ; }",0
121,"<S2SV_ModStart> inmem )? jas_stream_memopen2 <S2SV_ModEnd> ( 0,",0
122,<S2SV_ModStart> s ) { if ( s == 0 ) return ( ( void * ) NULL ) ;,1
123,<S2SV_ModStart> ; if ( WARN_ON_ONCE (! ib_safe_file_access ( fp ) ) ) return - EACCES ; if (,1
124,"<S2SV_ModStart> ""MemoryAllocationFailed"" ) ; ( void ) ResetMagickMemory ( BImgBuff, 0, ldblk * sizeof ( double ) ) ;",1
125,<S2SV_ModStart> ( peer ) peer = maybe_get_net <S2SV_ModEnd> ( peer ),1
126,<S2SV_ModStart> } while ( ( i < ( int ) header_buf_used ) && ( <S2SV_ModStart> ] == '\\n' ),1
127,<S2SV_ModStart> m_family ) ; if ( proto == LLDP_MGMT_ADDR_NONE ) continue <S2SV_ModEnd> ; if (,1
128,<S2SV_ModStart> ; if ( datalen >= 4 &&,0
129,<S2SV_ModStart> get_conf ) { spin_lock ( & sock_net ( sk ) -> sctp. addr_wq_lock ) ; },0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> S2SV_null> static <S2SV_ModEnd> profile ) {,0
131,<S2SV_ModStart> flags ) ; <S2SV_ModEnd> rem < 0 <S2SV_ModStart> ) ; } memset <S2SV_ModEnd> ( mpu -> <S2SV_ModStart> ) ) ; if <S2SV_ModEnd> (! mpuData,0
132,<S2SV_ModStart> rule ) ; if (! entry -> lsm [ lsm_rule ]. rule ) return - EINVAL ;,1
133,<S2SV_ModStart> file ) ; <S2SV_ModEnd> file_free ( file,1
134,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
135,"<S2SV_ModStart> ""\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\n"" ""\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> {\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\n"" ""\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\n"" ""\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\n"" ""\\n""",0
136,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> unsigned <S2SV_ModStart> - EOPNOTSUPP ; uint8_t data ; uint16_t datalen ; size_len = sizeof ( struct xdr ) ; <S2SV_ModStart> * reqp, attr_len ) ; if ( status == 0 ) return - EINVAL ; <S2SV_ModStart> ) ) { <S2SV_ModEnd> if (! <S2SV_ModStart>, reqlen ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { if ( status == 0 ) goto out ; * iov_len = xdr_buf ;",0
137,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,1
138,<S2SV_ModStart> ; while ( ( i < to_read ) && <S2SV_ModStart>!= 0 ) <S2SV_ModEnd> ) { i,1
139,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
140,<S2SV_ModStart> [ plane ] && in -> linesize [ plane ],1
141,"<S2SV_ModStart> ( szFileName, pszFileName, <S2SV_ModStart> ) - 5 <S2SV_ModEnd> ) ; }",1
142,<S2SV_ModStart> ; if ( ( flags == 0 ) {,0
143,<S2SV_ModStart> if ( q < p || q,0
144,"<S2SV_ModStart> __be32 new_saddr ; struct ip_options_rcu * inet_opt ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. srr ) daddr = inet_opt -> opt. <S2SV_ModEnd> faddr ; rt",1
145,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
146,"<S2SV_ModStart> return ; } if ( len < sizeof ( struct eigrp_common_header ) ) { return ; } <S2SV_ModStart> return ; } if ( len < sizeof ( struct eigrp_tlv_header ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %u <S2SV_blank> (too <S2SV_blank> short, <S2SV_blank> short, <S2SV_blank> %u)"", "" <S2SV_blank> short, <S2SV_blank> short, <S2SV_blank> %u)"", len, len, sizeof ( struct eigrp_header ) ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( eigrp_tlv_len < sizeof ( struct eigrp_tlv_header ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short, <S2SV_blank> short, <S2SV_blank> %u)"", ( u_int ) sizeof ( struct eigrp_tlv_tlv_header ) ) sizeof ( struct eigrp_tlv_tlv_header ) ) ; return ; } <S2SV_ModStart> ) tlv_len ; if ( eigrp_tlv_header ) { ND_PRINT ( ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short, <S2SV_blank> short, <S2SV_blank> short, <S2SV_blank> %u)"", ( sizeof ( struct eigrp_tlv_tlv_tlv_header ) + sizeof ( struct eig",0
147,<S2SV_ModStart> = address ; <S2SV_ModEnd> for ( addr,0
148,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> read_table_table_index ( int <S2SV_ModStart>, sBlk, indexes ) <S2SV_ModEnd> ; int res",0
149,"<S2SV_ModStart>, '/' ) ; if ( ptr == NULL ) return ( ENOENT ) ; ptr ++ <S2SV_ModEnd> ; rw_exit (",1
150,<S2SV_ModStart> |= EXT4_EXT_MARK_UNINIT2 ; if ( flags & EXT4_GET_BLOCKS_CONVERT ) split_flag |= EXT4_EXT_DATA_VALID2 ;,1
151,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret ;",0
152,<S2SV_ModStart> ; return false ; } if (,0
153,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ), & final ) ; rcu_read_unlock ( <S2SV_ModEnd> ) ; dst",1
154,"<S2SV_ModStart> = 0.0 ; uint32 nstrips = 0, nstrips = 0 ; uint32 ntiles = 0, ntiles = 0 ; uint32 nstrips = 0 ; uint32 nstrips = 0, nstrips = 0 ; uint32 nstrips = 0, ntiles = 0, ntiles + 1, ntiles",0
155,"<S2SV_ModStart> arg ) { <S2SV_ModEnd> } else { <S2SV_ModStart> arg ) ; } else { int i ; <S2SV_ModStart> arg ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> arg ; } else { <S2SV_ModEnd> } else { <S2SV_ModStart> arg, arg_len ; }",0
156,<S2SV_ModStart> options. disable_forwarding ||! use_privsep,1
157,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
158,"<S2SV_ModStart> ) ; } if ( ( ( MagickSizeType ) image -> columns * image -> rows ) > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ;",1
159,"<S2SV_ModStart> errout ; } <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart>. value = ""xxxx"" ; <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart> -> gr_ctx. length = 4 <S2SV_ModEnd> ; gr ->",1
160,<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> out ; } ext_size = sizeof ( inode ) ;,0
161,<S2SV_ModStart> ; int use_key <S2SV_ModEnd> = 0 ; <S2SV_ModStart> ) ; } if <S2SV_ModEnd> ( c -> options.,0
162,<S2SV_ModStart> ; int ret ; if ( current_chrooted ( ) ) return - EPERM,1
163,<S2SV_ModStart> ( ) ) <S2SV_ModEnd> if ( data,0
164,<S2SV_ModStart>,0
165,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
166,<S2SV_ModStart> ; bool is_valid = false ; bool do_vnet <S2SV_ModStart> < 0 ) { do_vnet = false ; do_vnet_vnet_hdr = false ; } <S2SV_ModStart> = false ; do_vnet_vnet = false ; do_vnet = false ;,0
167,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> sctp_auth_asoc_init_active_key ( asoc,1
168,<S2SV_ModStart> return false ; if ( ndp_msg_info ( msg_type ) -> addrto_validate ) return ndp_msg_info ( msg_type ) -> addrto_validate ) ; else,0
169,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> * lsm_exec ( int lsm_labelfd <S2SV_ModEnd>, int lsm_label <S2SV_ModStart> * lsm_label ) { int lsm_label = - 1 <S2SV_ModEnd> ; int lsm_set_label <S2SV_ModStart> == 0 ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) return 0 <S2SV_ModEnd> ; lsm_set ( <S2SV_ModStart> ( lsm_label, lsm_labelfd <S2SV_ModEnd>, lsm_label ) <S2SV_ModStart> == 0 ) return 0 <S2SV_ModEnd> ; lsm_set ( <S2SV_ModStart> ( lsm_label, lsm_label ) ; <S2SV_ModEnd> goto out ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> goto out ; <S2SV_ModStart> } else if ( lsm_label ) < 0 ) { if ( strcmp ( lsm_label ) < 0 ) { if ( strcmp ( lsm_label ) < 0 ) { SYSERROR ( ""Unable <S2SV_blank> to <S2SV_blank> LSM <S2SV_blank> label: <S2SV_blank> %s."", command ) ; goto out ; } else if ( strcmp ( lsm_label, lsm_label ) < 0 ) { <S2SV_ModStart> ( write ( lsm_label, lsm_",0
170,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
171,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
172,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> cpi <S2SV_ModEnd> ; cpi -> <S2SV_ModStart> cpi -> twopass. gf_group_group <S2SV_ModStart> ; if ( cpi -> gf_group. gf_group. count - cpi -> oxcf. count - cpi -> twopass. gf_group. count ) { cpi -> twopass. gf_group = & cpi -> twopass. gf_group. count ; } else { cpi -> twopass. gf_group_group. count = 0 ; } else { cpi -> twopass. gf_group. gf_group -> twopass. gf_group. gf_group. count ; } else { vp9_group_group -> gf_group. gf_group_group. gf_group_group ) { cpi -> twopass = & cpi -> gf_group. gf_group ; } else { vp9_group_group_group = 0 ; } <S2SV_ModEnd> cpi -> gf_group <S2SV_ModStart> rc -> gf_group_group_group_group ) ; } <S2SV_ModEnd> <S2SV_null>,0
173,<S2SV_ModStart> } num ++ ; if ( num > MaxAllocSize / ITEMSIZE ),0
174,"<S2SV_ModStart> header, struct mb2_cache_entry <S2SV_ModEnd> * * pce <S2SV_ModStart> ) ; struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache = <S2SV_ModStart> ( ext4_mb_cache, <S2SV_ModEnd> hash ) ; <S2SV_ModStart> bh ) ; <S2SV_ModEnd> if ( ce",0
175,"<S2SV_ModStart> { gint64 offset <S2SV_ModEnd> ; char line <S2SV_ModStart> = offset ; return parse_cosine_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart> -> phdr, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart> wth -> frame_buffer, line",1
176,<S2SV_ModStart> = line_end ; <S2SV_ModEnd> error = add_push_report_pkt,1
177,<S2SV_ModStart> if ( left == 0 && extend ) return 0 ; if ( left,1
178,<S2SV_ModStart> < EXT2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> len ) { char * data = ( <S2SV_ModEnd> struct grub_block ) ; <S2SV_ModStart> data_size ) { <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { return grub_error = EXT_ERR ( inode -> data ) ; break ; } <S2SV_ModStart> i_block ) { <S2SV_ModEnd> } },0
179,<S2SV_ModStart> size_t ) ldblk + 1,0
180,"<S2SV_ModStart> - ENOMEM ; * ( ( struct vbg_ioctl_hdr * ) buf ) = hdr ; <S2SV_ModStart> copy_from_user ( buf + sizeof ( hdr ) <S2SV_ModStart> * ) arg + sizeof ( hdr ), hdr. size_in - sizeof ( hdr ) <S2SV_ModEnd> ) ) {",1
181,<S2SV_ModStart> m ; int hstartrow <S2SV_ModEnd> ; if ( <S2SV_ModStart> 2 ) { hstartrow <S2SV_ModEnd> = ( numrows <S2SV_ModStart> = numrows - hstartrow <S2SV_ModEnd> ; n = <S2SV_ModStart> & a [ hstartrow <S2SV_ModEnd> * stride ] ;,0
182,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
183,"<S2SV_ModStart> = 0 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
184,<S2SV_ModStart> DQUOT_LIMITS_ENABLED ) ; if ( sbi -> s_mb_cache ) { ext2_xattr_destroy_cache ( sbi -> s_mb_cache ) ; sbi -> s_mb_cache = NULL ; } <S2SV_ModEnd> if (!,1
185,<S2SV_ModStart> interface ) ; if (! desc -> bNumEndpoints < 1 ) { dev_err ( & desc. bNumEndpoints ) ; goto error ; },0
186,"<S2SV_ModStart> ""setregid"" ) ; <S2SV_ModEnd> char * arg <S2SV_ModStart> 0 ] = ""/bin/sh"" <S2SV_ModEnd> ; arg [",1
187,<S2SV_ModStart> node ) { if ( node -> nd_item. ci_parent ) <S2SV_ModStart> ci_parent ) ; else return NULL ;,1
188,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
189,<S2SV_ModStart> ( pb ) ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA,1
190,<S2SV_ModStart> if ( q < p || q,1
191,<S2SV_ModStart> protostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> cryptostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> timingstats ) ; <S2SV_ModEnd> step_callback = &,1
192,<S2SV_ModStart> ( dir ) <S2SV_ModEnd> return NULL,0
193,<S2SV_ModStart> prev ) ; n -> mounts += n -> pending_mounts ; n -> pending_mounts = 0 ;,1
194,"<S2SV_ModStart> ; savesegment ( fs, ds",0
195,<S2SV_ModStart> dd ) ; <S2SV_ModEnd> } } <S2SV_null>,1
196,<S2SV_ModStart> ; ret = ret <S2SV_ModEnd> ; } if,0
197,<S2SV_ModStart> 1u << DB_VECTOR ) | ( 1u << AC_VECTOR,1
198,"<S2SV_ModStart> sfsname ) { <S2SV_ModEnd> char temp [ <S2SV_ModStart> 1 ] ; u_int stringlen ; stringlen = len ; if ( stringlen > NFSX_V3FHMAX ) stringlen = NFSX_V3FHMAX ; <S2SV_ModStart>, sfsname, stringlen <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ; temp [ stringlen <S2SV_ModEnd> ] = '\\0'",1
199,"<S2SV_ModStart> unsigned int flags, struct rt6_info * rt <S2SV_ModStart> ( & fhdr, rt",1
200,<S2SV_ModStart> ( res ) goto err_add_port <S2SV_ModEnd> ; res = <S2SV_ModStart> port ) ; err_add_port : hsr_add_port <S2SV_ModEnd> ( &,0
201,<S2SV_ModStart> && n < 0 <S2SV_ModEnd> ) { cmd,0
202,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> const MACROBLOCKD <S2SV_ModEnd> const vpx_write_plane_buffer ( const <S2SV_ModStart> * const mb_buffer <S2SV_ModEnd> * const <S2SV_ModStart> src -> uv_buffer <S2SV_ModEnd> } ; MACROBLOCKD *,0
203,<S2SV_ModStart> ; if (! xdr_arg ) return 0,0
204,"<S2SV_ModStart> <S2SV_null> static inline int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> dst ) { return assign_eip_far ( ctxt, dst, ctxt -> mode == X86EMUL_MODE_PROT64 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",1
205,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
206,"<S2SV_ModStart> ; remaining = tvb_reported_length_remaining <S2SV_ModEnd> ( tvb,",1
207,<S2SV_ModStart> ( iter ) ; <S2SV_ModEnd> return ret ;,0
208,<S2SV_ModStart> return rc ; <S2SV_ModEnd> copied = skb,1
209,<S2SV_ModStart> } if ( str &&,0
210,<S2SV_ModStart> ; if ( pmc_overflow ( val ) <S2SV_ModEnd> ) write_pmc (,1
211,"<S2SV_ModStart> ( * b + len, * avail - len <S2SV_ModEnd>, nl )",1
212,"<S2SV_ModStart> char * o_end, NULL <S2SV_ModStart> len = NULL ; char * type_end = NULL <S2SV_ModStart> str ) ; if (! res!= NULL ) { PyErr_SetString ( NULL ) ; return NULL ; } <S2SV_ModStart> obj, ""\\n"", type_ignores. type_end_end_end_end_end_end <S2SV_ModEnd> ) ; } <S2SV_ModStart> if (! type_end <S2SV_ModEnd> ( o",0
213,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
214,"<S2SV_ModStart> string ) ) i ++, <S2SV_ModEnd> c = c",0
215,"<S2SV_ModStart> == 0 ) mark_key_instantiated ( key, 0 <S2SV_ModEnd> ) ; up_write",1
216,<S2SV_ModStart> <= * len && plen > 0,1
217,<S2SV_ModStart> ; args. rmtvaluelen = valuelen ; args.,1
218,<S2SV_ModStart> ; if ( <S2SV_ModEnd> timeout == NULL <S2SV_ModStart> ; if ( compat_get_timespec <S2SV_ModEnd> ( & ktspec <S2SV_ModStart> > 0 && compat_put_timespec <S2SV_ModEnd> ( & ktspec,1
219,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
220,<S2SV_ModStart> q ) ; <S2SV_ModEnd> return ret ;,0
221,<S2SV_ModStart> |= MSG_TRUNC ; <S2SV_ModEnd> lock_sock ( sk,1
222,<S2SV_ModStart> } if ( <S2SV_ModEnd> udp_specified && settings,1
223,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
224,<S2SV_ModStart> ) ; return FALSE ;,0
225,<S2SV_ModStart> found = 0 <S2SV_ModEnd> ; const char <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( found,1
226,<S2SV_ModStart> int release_event ( struct pmu * armpmu <S2SV_ModEnd> ; struct <S2SV_ModStart> -> pmu ) return 0 ; if ( is_perf_event ( event ) ) return 1 ;,0
227,"<S2SV_ModStart> bool new_idmap_permitted ( const struct file * file, <S2SV_ModStart>, cap_setid ) && file_ns_capable ( file, ns -> parent, cap_setid )",1
228,<S2SV_ModStart> j ++ ) { if ( a -> type == szMAPI_BINARY ) <S2SV_ModStart> ) ; } },1
229,"<S2SV_ModStart> hx ; u8 * buf <S2SV_ModEnd> ; int ret <S2SV_ModStart> = 0 ; u16 cpu_cs_register = kmalloc ( sizeof ( * hx ), GFP_KERNEL ) ; if (! buf ) return - ENOMEM ; buf = ( udev, cpu_cs_cs_register, GFP_KERNEL ) ; if (! buf ) return - ENOMEM ; buf = 0 ; buf [ 0 ] = 0 ; <S2SV_ModStart> 0 ) { buf [ 0 ] = 0 ; kfree ( udev, cpu_cs_cs_register, buf <S2SV_ModEnd> ) ; return",0
230,"<S2SV_ModStart> u_char * ptr, u_int ptr, length ) ; ND_TCHECK ( ptr ) ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; } ptr ++ ; length -= 3 ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; val_l = EXTRACT_16BITS ( ptr ) ; val_h = EXTRACT_16BITS ( ptr ) ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ) ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ <S2SV_ModEnd> ; }",0
231,"<S2SV_ModStart> princ ) ; error = data_eq_string ( * realm, <S2SV_ModEnd> princ ) ; if",0
232,<S2SV_ModStart> ; if ( shader_rec_offset < args -> bin_cl_size ||,1
233,<S2SV_ModStart> endif # if HAVE_LZMA_H <S2SV_ModEnd> && HAVE_LIBLZMA if,1
234,<S2SV_ModStart> vma -> vm_file ) ; down_read ( & EXT4_I ( inode ) -> i_mmap_sem <S2SV_ModStart> ; out : up_read ( & EXT4_I ( inode ) -> i_mmap_sem ) ;,1
235,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
236,<S2SV_ModStart> arg ) { char ch = * arg ; switch ( ch <S2SV_ModEnd> ) { case <S2SV_ModStart> ';' : case '=' : case <S2SV_ModStart> b ++ = ch <S2SV_ModEnd> ; break ;,1
237,<S2SV_ModStart> && nmap ) <S2SV_ModEnd> ND_PRINT ( (,0
238,<S2SV_ModStart>,0
239,<S2SV_ModStart> if ( ( skb_header <S2SV_ModEnd> ( skb ),0
240,<S2SV_ModStart> ) { # endif <S2SV_ModEnd> # endif,0
241,<S2SV_ModStart>,0
242,<S2SV_ModStart> & RCV_SHUTDOWN ) return 0 ; <S2SV_ModEnd> return err ; <S2SV_ModStart> msg_namelen ) ; <S2SV_ModEnd> } skb_free_datagram (,1
243,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
244,<S2SV_ModStart> const buffers [ 3 <S2SV_ModEnd> ] = { <S2SV_ModStart> src -> v_buffer <S2SV_ModEnd> } ; int,0
245,"<S2SV_ModStart>, j ; * md_out = NULL ; md = calloc ( 1, sizeof ( <S2SV_ModEnd> * md ) <S2SV_ModStart> goto cleanup ; ret = rfc2253_name <S2SV_ModEnd> ( X509_get_sans",0
246,<S2SV_ModStart> (! npages || base_gfn!= old. base_gfn,1
247,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ru,1
248,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
249,<S2SV_ModStart> * ni ; unsigned int length_left ; u_int j ; u_int j ; ND_TCHECK ( rp -> rip6_nets ) ; length_left = length_left ; ND_TCHECK ( rp -> rip6 ) ; <S2SV_ModStart> ni ) { ND_TCHECK ( rp -> rip6 ) ; } length_left -= ( sizeof ( struct netinfo6 ) - sizeof ( struct netinfo6 ) ) ; length_left <S2SV_ModEnd> j = length <S2SV_ModStart> ni ) ; length_left = length_left <S2SV_ModEnd> -> rip6_left <S2SV_ModEnd> + sizeof ( <S2SV_ModStart> ni ) ; length_left = length_left <S2SV_ModEnd> if ( length_left <S2SV_ModStart> ni ) { if ( length_left > length_left ) goto trunc ; } <S2SV_ModStart> ni ) { if ( length_left <= sizeof ( length_left ) ) { ND_TCHECK ( * ni ) ; <S2SV_ModStart> ni ) ; } if ( length_left!= length_left ) goto trunc ; length_left <S2SV_ModEnd> ND_PRINT ( <S2SV_ModStart> ni ) ; },0
250,<S2SV_ModStart> < 0 ) goto error ; <S2SV_ModEnd> goto set ;,1
251,<S2SV_ModStart> cpi ) ; memset <S2SV_ModEnd> ( cpi ->,0
252,"<S2SV_ModStart> argc ++ ; retval = bprm_change_interp ( iname, bprm ) ; if ( retval < 0 ) goto _error <S2SV_ModEnd> ; interp_file =",1
253,<S2SV_ModStart> ; int iSrc <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; } } <S2SV_ModEnd> res -> ContribRow <S2SV_ModStart> u ]. Left = iLeft ; res -> ContribRow [ u ]. Right = iRight ; for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ].,1
254,<S2SV_ModStart> ) { memset <S2SV_ModEnd> ( & user,0
255,"<S2SV_ModStart> Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; return ; } if (! COM_CompareExtension ( filename, "".cfg"" ) ) { Com_Printf ( ""Com_WriteConfig_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".cfg\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n""",1
256,<S2SV_ModStart> ; int len <S2SV_ModEnd> ; if (,0
257,"<S2SV_ModStart> ( mobj ) { size_t granularity = NULL ; <S2SV_ModStart>, 0, ROUNDUP ( size, granularity ) ) ; } <S2SV_ModEnd> return mobj ;",0
258,<S2SV_ModStart> -> it_overrun += 1LL <S2SV_ModEnd> << i ;,1
259,"<S2SV_ModStart> ; int n, n, true <S2SV_ModStart> ; if (! n ) { <S2SV_ModStart> return NULL ; } } <S2SV_ModEnd> for ( n <S2SV_ModStart> return NULL ; n = n, n, true",0
260,<S2SV_ModStart> src -> cur_frames ; },0
261,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static const VP9_COMMON * const MACROBLOCKD * xd, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> * w ) { const MACROBLOCKD * const mbmi = xd -> mbmi_id ; <S2SV_ModEnd> const MODE_INFO * <S2SV_ModStart> mi ; const MB_MODE_INFO * const mbmi_ext = mi -> mbmi ; const MB_MODE_INFO * const mbmi_ext = mbmi -> mbmi_ext ; const mbmi_ext = mi -> mbmi ; const MB_MODE_INFO * mi = mi = mbmi -> mbmi_ext ; const MB_MODE_INFO * mi = mi -> mbmi_ext ; const mbmi_ext = mbmi_ext <S2SV_ModStart> -> mbmi_ext ) { const PREDICTION_MODE <S2SV_ModEnd> mbd_mode = mi <S2SV_ModStart> -> mbmi ; const PREDICTION_MODE <S2SV_ModEnd> ( w,",0
262,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; saddr,1
263,"<S2SV_ModStart>, r -> qiov. size <S2SV_ModEnd> ) ; n <S2SV_ModStart> = r -> qiov. size <S2SV_ModEnd> / 512 ; <S2SV_ModStart>, r -> qiov. size <S2SV_ModEnd> ) ; }",1
264,<S2SV_ModStart> if ( cs >= <S2SV_ModEnd> CQSPI_MAX_CHIPSELECT ) {,1
265,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
266,<S2SV_ModStart> ) break ; if ( l > ll ) l = ll ;,1
267,<S2SV_ModStart> out ; } } if ( free < 0 ) { err = - ENOMEM ; goto out ;,1
268,<S2SV_ModStart> <= 0 && <S2SV_ModEnd> ND_TTEST ( *,0
269,<S2SV_ModStart> * rq ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
270,"<S2SV_ModStart> ret ; uint8_t * buffer ; uint8_t value ; buffer = kmalloc ( 1, GFP_KERNEL ) ; if (! buffer ) return - ENOMEM <S2SV_ModEnd> ; dev_dbg ( <S2SV_ModStart>, reg, buffer <S2SV_ModEnd>, 1, <S2SV_ModStart> ret <= 0 <S2SV_ModEnd> ) ; kfree (",0
271,"<S2SV_ModStart> * pModule, const sqlite3_int32",0
272,"<S2SV_ModStart> ; } } s -> append_char ( s, 0 ) ; strncpy <S2SV_ModEnd> ( outbuffer,",1
273,,0
274,<S2SV_ModStart> = 0 ; ( i + 3 ) <S2SV_ModEnd> < sec -> <S2SV_ModStart> = 0 ; ( i + 7 ) <S2SV_ModEnd> < sec ->,1
275,<S2SV_ModStart> case ISIS_SUBTLV_EXT_IS_OLD : if ( subl == 0 ) break ; <S2SV_ModStart> ++ ) { <S2SV_ModEnd> bw. i,0
276,<S2SV_ModStart> ; if ( i < 4 ) { <S2SV_ModStart> ) i ; } <S2SV_ModEnd> } while (,0
277,<S2SV_ModStart> ONIG_INFINITE_DISTANCE ) {,0
278,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> ; if ( <S2SV_ModStart> flags ) return false ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
279,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
280,"<S2SV_ModStart> ) continue ; if ( vif -> tx. sring -> req_cons > XEN_NETIF_TX_RING_RING_SIZE ) { netdev_err ( vif -> dev, ""req_cons <S2SV_blank> req_cons <S2SV_blank> size <S2SV_blank> %d, <S2SV_blank> req_cons <S2SV_blank> %d, <S2SV_blank> req_cons <S2SV_blank> "", vif -> req_prod, vif -> req_prod, vif -> req_prod, vif -> req_cons, XEN_NETIF_TX_RING_RING_RING_SIZE ) ; netbk_fatal_tx_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> 0 ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> ) ) ; continue ; }",0
281,<S2SV_ModStart> && n < 0 <S2SV_ModEnd> ) { cmd,0
282,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
283,<S2SV_ModStart> conn ) ; if ( <S2SV_ModStart> ( conn )!= 0 ) return,1
284,"<S2SV_ModStart> netbk, pending_idx, XEN_NETIF_RSP_ERROR <S2SV_ModEnd> ) ; struct <S2SV_ModStart> netbk, pending_idx, pending_idx <S2SV_ModEnd>, XEN_NETIF_RSP_ERROR ) <S2SV_ModStart> netbk, pending_idx, XEN_NETIF_RSP_ERROR ; <S2SV_ModEnd> pending_OKAY <S2SV_ModStart> ) ; } xen_release ( netbk, pending_idx <S2SV_ModEnd>, XEN_NETIF_RSP_RSP_OKAY <S2SV_ModStart> netbk, XEN_NETIF_RSP_OKAY",0
285,,1
286,"<S2SV_ModStart> ) NULL ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> ) NULL ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> NULL ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ;",1
287,"<S2SV_ModStart> len < 0 <S2SV_ModEnd> ) { syslog <S2SV_ModStart> 1 ; } if ( addr. nl_pid ) { syslog ( LOG_WARNING, ""Received <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> untrusted <S2SV_blank> pid:%u"", addr. nl_pid ) ; continue ; }",1
288,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
289,<S2SV_ModStart> ipc == NULL && client -> session == NULL,1
290,<S2SV_ModStart> } + 1 <S2SV_ModEnd> ; if (,0
291,"<S2SV_ModStart>, nameptr, lfi, fname, UDF_NAME_LEN <S2SV_ModEnd> ) ; if",1
292,"<S2SV_ModStart> ip_vs_timeout_user t ; memset ( & t, 0, sizeof ( t ) ) ;",1
293,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ;,0
294,<S2SV_ModStart> ; ssize_t result ; if ( WARN_ON_ONCE (! ib_safe_file_access ( inode ) ) ) return - EACCES,0
295,<S2SV_ModStart>,0
296,<S2SV_ModStart> ) ) { put_disk ( disk ) ;,1
297,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
298,<S2SV_ModStart> NULL ) { status = MagickFalse ; break <S2SV_ModEnd> ; } image,0
299,<S2SV_ModStart> i ++ ) { if ( avio_feof ( s -> pb ) == 0 ) { av_log ( AVERROR_INVALIDDATA ; return AVERROR_INVALIDDATA ; },0
300,<S2SV_ModStart> ; rinfo = kzalloc <S2SV_ModEnd> ( SZ_SG_REQ_INFO *,1
301,"<S2SV_ModStart> ; # endif install_keyword ( ""umask"", & umask_handler ) ;",1
302,<S2SV_ModStart> ctx ) { ( void ) ctx ;,0
303,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> kfree ( tmpbuf,1
304,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; }",1
305,<S2SV_ModStart> ( box = jp2_box_create0 ( ) ) ) { goto error ; } <S2SV_ModEnd> if ( jp2_copy,0
306,"<S2SV_ModStart> * self, size_t",0
307,<S2SV_ModStart> ; int copylen = 0 <S2SV_ModStart> goto err ; err = - EMSGSIZE ; if ( unlikely ( count > UIO_MAXIOV ) ) goto err ; <S2SV_ModStart> goto err ; } if ( copylen < vnet_hdr_len ),0
308,<S2SV_ModStart> ( struct ipv6hdr <S2SV_ModEnd> ) ; unsigned <S2SV_ModStart> offset ) { struct ipv6_opt_hdr <S2SV_ModEnd> * exthdr ; <S2SV_ModStart> ; } return - EINVAL <S2SV_ModEnd> ; } <S2SV_null>,0
309,"<S2SV_ModStart> write_q ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> bit_q ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; } vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; }",0
310,<S2SV_ModStart> break ; } if ( void ),0
311,<S2SV_ModStart> 0 ) ; msg -> msg_namelen = 0 ;,0
312,<S2SV_ModStart> } if ( <S2SV_ModEnd> djrcv_dev -> paired_dj_devices,1
313,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
314,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
315,"<S2SV_ModStart> asconf ) { sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) asconf -> chunk_hdr ; bool addip ; <S2SV_ModEnd> chunk_len = false <S2SV_ModStart> goto done ; <S2SV_ModEnd> chunk_len = ( sctp_addip <S2SV_ModStart> -> crr_hdr. addip ; <S2SV_ModEnd> chunk_len = sctp_len <S2SV_ModStart> -> crr_hdr. addip, addip, addip_hdr. addip_len = false <S2SV_ModEnd> ; if ( <S2SV_ModStart> goto done ; <S2SV_ModEnd> chunk_len = sctp_addip ( <S2SV_ModStart> -> crr_hdr. addip, addip, addip )",0
316,"<S2SV_ModStart> 101, ( ""jas_realloc(%x, <S2SV_blank> %zu)\\n"" <S2SV_ModEnd>, ptr,",1
317,<S2SV_ModStart> exit ; } <S2SV_ModEnd> if ( msg,0
318,<S2SV_ModStart> CPU_FTR_TM_COMP ) && hv_enabled <S2SV_ModEnd> ; break ;,1
319,<S2SV_ModStart> msg ) ; if ( msgnum ) return - EINVAL ;,0
320,"<S2SV_ModStart> key_name ), UTF16_HOST_ENDIAN, <S2SV_ModStart> data. value, UTF16_HOST_SIZE / 2",0
321,<S2SV_ModStart> = 0 ; mutex_lock ( & d -> log_file ) ;,0
322,<S2SV_ModStart> return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
323,<S2SV_ModStart> * parg = - EINVAL ; int len = 0,0
324,<S2SV_ModStart>,0
325,"<S2SV_ModStart> data ) { void * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM ; ret = <S2SV_ModEnd> usb_msg ( dev <S2SV_ModStart>, size, buf <S2SV_ModEnd>, size, <S2SV_ModStart> 500 ) ; kfree ( buf ) ; return ret ;",0
326,<S2SV_ModStart> interface ) ; if (! desc -> bNumEndpoints < 1 ) { dev_err ( & desc. bNumEndpoints ) ; goto error ; },0
327,<S2SV_ModStart> ) { case GTK_RESPONSE_OK : { file = nautilus_file_get_metadata ( parameters -> file ) ; nautilus_file_set_metadata ( parameters -> file ) ; nautilus_file_free ( parameters -> file ) ; nautilus_file_unlock ( file ) ; <S2SV_ModEnd> g_free ( file,0
328,<S2SV_ModStart> ; if ( urb -> actual_length > 0 &&,1
329,"<S2SV_ModStart> <S2SV_null> <S2SV_null> struct cifsS2SV_S2SV_null> <S2SV_ModEnd> struct cifsS2SV_S2SV_null> <S2SV_ModStart> * server, struct cifsS2SV_null> <S2SV_ModEnd> struct cifsS2SV_null>",0
330,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> g_pass ; if ( cfg -> g_w <S2SV_ModStart> cfg ) { if (! cfg -> g_w == ctx -> g_w && ( cfg -> g_w!= ctx -> g_w!= ctx -> g_h ) || ( cfg -> g_h == ctx -> g_w > ctx -> g_h ) || ( cfg -> g_pass!= ctx -> g_w!= ctx -> g_h ) || ( cfg -> g_w > ctx -> g_w!= ctx -> g_h ) || ( cfg -> g_w > ctx -> g_h ) || ( int ) cfg -> g_w > ctx -> g_w > ctx -> g_w ) || ( int ) cfg -> g_key == ctx -> g_key == ctx -> g_key && ( cfg -> g_key!= ctx -> g_key!= ctx -> g_h ) || ( cfg -> g_w > ctx -> g_w ) && ( int ) cfg -> g_key!= ctx -> g_key && ( int ) cfg -> g_key!= VPX_RC_RC_PASS,0
331,<S2SV_ModStart> =='<S2SV_blank>') { input ++ ; } <S2SV_ModEnd> ptr = strchr <S2SV_ModStart> off ) ) { <S2SV_ModStart> ) ; } },0
332,"<S2SV_ModStart> inode ) ; struct hugepage_subpool * spool = subpool_inode ( inode ) ; <S2SV_ModStart> ; if ( hugepage_subpool_get_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> 0 ) { hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg )",1
333,<S2SV_ModStart> key * keyring ; if ( new -> thread_keyring ) return 0,1
334,<S2SV_ModStart> size ) { int ret ; <S2SV_ModStart> return - 1 ; size_t,0
335,"<S2SV_ModStart> orig ) ; fptr_orig = io_get_open_fptr ( mrb, orig ) ; <S2SV_ModStart> mrb_io_alloc ( mrb <S2SV_ModEnd> ) ; DATA_TYPE",1
336,<S2SV_ModStart>. cmp = 0 <S2SV_ModEnd> ; if (,0
337,<S2SV_ModStart> cpi ) { memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ; } vpx_free <S2SV_ModEnd> * cpi,0
338,"<S2SV_ModStart> return res ; res = utee_param_to_param ( utc, <S2SV_ModEnd> param, callee_params <S2SV_ModStart>, callee_params ) ; if ( res!= TEE_SUCCESS ) return res",1
339,"<S2SV_ModStart> int rc ; struct desc_struct old_desc, new_desc ; struct x86_emulate_ops * ops = ctxt -> ops ; u8 cpl = ctxt -> cpl ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) goto fail ; rc = assign_eip_eip <S2SV_ModEnd> ( ctxt, <S2SV_ModStart>, VCPU_SREG_SREG_CS, cpl, & old_desc, NULL <S2SV_ModEnd>, VCPU_SREG_CS ) <S2SV_ModStart>, VCPU_SREG_CS ) <S2SV_ModEnd> ; memcpy (",0
340,<S2SV_ModStart> -> band = av_calloc <S2SV_ModEnd> ( reslevel -> <S2SV_ModStart> -> prec = av_calloc <S2SV_ModEnd> ( reslevel ->,1
341,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
342,<S2SV_ModStart> -> hdr ; size_t <S2SV_ModEnd> count = n,0
343,<S2SV_ModStart> { if ( info -> si_code == 0 ) return - EPERM ; if (,0
344,"<S2SV_ModStart> * p_tx0 = ( OPJ_INT32 ) opj_uint_max <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdx, <S2SV_ModEnd> p_image -> x0 <S2SV_ModStart> * p_tx1 = ( OPJ_INT32 ) opj_uint_max <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdy, <S2SV_ModEnd> p_cp -> x1 <S2SV_ModStart> * p_image -> tdy, <S2SV_ModEnd> p_ty1",0
345,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
346,<S2SV_ModStart> php_unserialize_data ) { zval * retval <S2SV_ModEnd> ; zval * <S2SV_ModStart> return NULL ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> RETURN_FALSE ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> RETURN_FALSE ; },0
347,<S2SV_ModStart> goto __err ; tu -> qhead = tu -> qtail = tu -> qused = 0 ;,1
348,<S2SV_ModStart> ] ) ; if (! zfound ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> -> size ; zfound = 0 ; zfound = 0 ; <S2SV_ModStart> -> size ; if (! zfound ) return GF_ISOM_INVALID_FILE ;,0
349,"<S2SV_ModStart>. get_alg_alg_priv ( ctx ) <S2SV_ModEnd>, ctx ->",0
350,"<S2SV_ModStart> == 0 ) if ( received_protocol ) { fprintf ( stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> is <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; }",0
351,<S2SV_ModStart> { if ( info -> si_code == 0 ) return - EPERM ; if (,0
352,"<S2SV_ModStart> -> off = strtoull <S2SV_ModEnd> ( p, <S2SV_ModStart> -> filesize = strtoull <S2SV_ModEnd> ( slash +",1
353,"<S2SV_ModStart> * cr ; size_t <S2SV_ModEnd> maxw, maxh <S2SV_ModStart> maxw, upb, loopmaxw <S2SV_ModStart> ) img -> comps [ 0 ]. w ; loopmaxw = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> maxw = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> maxw = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> goto fails ; offx = ( size_t ) * <S2SV_ModEnd> max ) * <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> maxw = ( int <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> maxw = ( int <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) { sycc_to_rgb <S2SV_ModStart> int ) ; ++ b",0
354,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state ) { fmode = fmode_t fmode <S2SV_ModEnd> ( state, <S2SV_ModStart> -> state ) ; fmode = fmode <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
355,"<S2SV_ModStart> return SSH_ERR_INVALID_ARGUMENT ; ssh_dispatch_set ( ssh, SSH2_MSG_KEXINIT, NULL ) ;",1
356,"<S2SV_ModStart> { assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\\n <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\\n <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\\n <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> }"", NULL ) ; assert_rule ( ""import <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\""tests\\""tests\\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> }"", NULL ) ; assert_true_rule ( """,0
357,<S2SV_ModStart> read_info ) ; <S2SV_ModEnd> if ( EOFBlob,1
358,"<S2SV_ModStart> char lbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char lbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char lbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char lbase [ 512 <S2SV_ModEnd> ] ; if <S2SV_ModStart> ( lbase, ""%511[^\\r\\n]"" <S2SV_ModEnd>, strtest ) <S2SV_ModStart> ( lbase, ""%511[^\\r\\n]"" <S2SV_ModEnd>, strtest ) <S2SV_ModStart> ( nbase!= 511 <S2SV_ModEnd> && ntest!= <S2SV_ModStart> && ntest!= 511 <S2SV_ModEnd> ) ; if",0
359,<S2SV_ModStart> intf ) { <S2SV_ModEnd> return ret ; <S2SV_ModStart> 0 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
360,<S2SV_ModStart> len ) ; <S2SV_ModEnd> return 0 ;,0
361,<S2SV_ModStart> 1 ) ;,0
362,"<S2SV_ModStart>, e -> elems, e ->",1
363,<S2SV_ModStart> bpp <= 8 && c -> format!= CHUNKY,0
364,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
365,<S2SV_ModStart> q ) { mutex_lock ( & q -> timer_mutex ) ; <S2SV_ModStart> close ( q ) ; mutex_unlock ( & q -> timer_mutex,0
366,"<S2SV_ModStart> int error ; unsigned int nr_blks ; size_t lblock <S2SV_ModEnd> = offset >> <S2SV_ModStart> = offset >> inode -> i_blkbits ; error = gfs2_inode_map ( ip, & bh_map ) ; if ( unlikely ( unlikely ( error ) ) return error ; error = gfs2_new ( ip -> i_blks >> inode, & bh_map ) ; if ( unlikely ( error ) ) return error ; if ( unlikely ( unlikely ( unlikely ( & inode -> i_sb, 1 ) ) ) ) goto out ; mb2_write ( & bh_map ) ; if ( unlikely ( unlikely ( ip -> i_size!= nr_blks ) ) goto out ;",0
367,<S2SV_ModStart> VIPS_LOAD_GET_CLASS ( load ) ; if ( load -> error ) return ( NULL ) ; if ( load -> error ) return ( NULL <S2SV_ModStart> -> out ) ) return ( NULL,0
368,"<S2SV_ModStart>, name, NULL,",0
369,<S2SV_ModStart> ; if (! retval ) <S2SV_ModEnd> retval = context,1
370,<S2SV_ModStart> ) ; goto out_free <S2SV_ModEnd> ; } <S2SV_null>,0
371,<S2SV_ModStart> service_name_tlv_length ) ; if (! service_name_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> miux_tlv_length ) ; if (! miux_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> rw_tlv_length ) ; if (! rw_tlv ) { err = - ENOMEM ; goto error_tlv ; },1
372,<S2SV_ModStart> ssh_flags ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
373,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
374,,0
375,"<S2SV_ModStart> ( interface, rate1 ) ; status = 0 ; value = 0 ;",0
376,<S2SV_ModStart>,0
377,<S2SV_ModStart> len ; } ND_TCHECK_32BITS <S2SV_ModEnd> ( p + <S2SV_ModStart> p + 2 <S2SV_ModEnd> ) ; ND_PRINT,1
378,<S2SV_ModStart> 0 ; } if ( unlikely ( IPCB ( skb ) -> opt. optlen ) ) skb_dst_force ( skb ) ; else,1
379,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
380,<S2SV_ModStart> bprm ) { <S2SV_ModEnd> int retval ; <S2SV_ModStart> int retval ; bprm_fill_uid ( bprm ) ; <S2SV_ModEnd> retval = security_bprm_set_creds,1
381,<S2SV_ModStart> ( headcount - 1 <S2SV_ModEnd> ) ; err,0
382,<S2SV_ModStart> ; dlen -= 3 <S2SV_ModEnd> ; for (,0
383,<S2SV_ModStart> { rq = tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; fn (,1
384,<S2SV_ModStart> ; } else (,0
385,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
386,<S2SV_ModStart> skb -> nla_name <S2SV_ModEnd> ; if (,0
387,"<S2SV_ModStart>, arg -> arg ; if <S2SV_ModEnd> ( arg ->",0
388,"<S2SV_ModStart> bp, len ) ; break ; case ETHERTYPE_TEB : ether_print ( ndo, bp, len <S2SV_ModStart> ndo_snapend - bp <S2SV_ModEnd>, NULL,",1
389,<S2SV_ModStart> ; } } tilebuf [ tilesize + 1 ] =,0
390,<S2SV_ModStart> O_APPEND | O_CREAT | O_NOFOLLOW,1
391,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
392,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart> -> nd_num ) { ret = <S2SV_ModEnd> - EBUSY ; <S2SV_ModStart> - EBUSY ; goto out ; } <S2SV_ModStart> ( ret ) goto out <S2SV_ModEnd> ; } ret <S2SV_ModEnd> ; } <S2SV_null>,0
393,<S2SV_ModStart> ; if ( len < 0 ||,0
394,<S2SV_ModStart> },0
395,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
396,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
397,<S2SV_ModStart> return - E_NOTHANDLED ; if ( ninst == 0 ) return - E_INVALID,1
398,<S2SV_ModStart> ; if ( len < 4 ) goto trunc ; ND_TCHECK ( * ) ;,0
399,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
400,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> p + offset <S2SV_ModEnd> ) ; p,0
401,"<S2SV_ModStart> 1 ) { if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf = opipe",0
402,<S2SV_ModStart> ( ) ; if (! tbuf ) { return NULL ; },1
403,<S2SV_ModStart> * rsize ; int err = - EFAULT <S2SV_ModEnd> ; if ( <S2SV_ModStart> u64 ) return err <S2SV_ModEnd> ; err =,0
404,"<S2SV_ModStart> ( user_ uid,",0
405,<S2SV_ModStart> ( <S2SV_ModEnd> ) == NULL,0
406,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nsc_encode ( NSC_CONTEXT <S2SV_ModStart> rowstride ) { if (! context ) return FALSE ; if (! <S2SV_ModStart> ( context ) ) return TRUE ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
407,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
408,<S2SV_ModStart> stringset == ETH_SS_STATS || stringset == ETH_SS_PRIV_FLAGS,1
409,<S2SV_ModStart> return ( ( ( <S2SV_ModStart> ) / 8 ) * GetPSDPacketSize ( image ),1
410,"<S2SV_ModStart> int fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
411,<S2SV_ModStart> bMasterInterface0 ) ; if (! pcu -> data_intf ) return - EINVAL ;,0
412,<S2SV_ModStart> const char * devname = d -> udev,0
413,"<S2SV_ModStart> pirlvl ) { if ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 || pirlvl -> prcheightexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 ) { return - 1 ; } <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> ) % ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << rpx ) <S2SV_ModStart> ) % ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << rpy )",1
414,<S2SV_ModStart> target_enc ) { return ONIGERR_NOT_SUPPORTED_ENCODING_COMBINATION <S2SV_ModEnd> ; } else,1
415,<S2SV_ModStart> <S2SV_null> <S2SV_null,0
416,"<S2SV_ModStart> u_char * tptr, u_int length ) { u_int <S2SV_ModEnd> hexdump = FALSE <S2SV_ModStart> = FALSE ; u_int hexdump = TRUE ; if ( length < 1 ) { ND_PRINT ( ( ndo, ""(invalid <S2SV_blank> address <S2SV_blank> type <S2SV_blank> %u)"", length - 1 ) ) ; return hexdump ; } <S2SV_ModStart> break ; }",0
417,"<S2SV_ModStart> ; u64 msr_data, rdx <S2SV_ModStart> = X86EMUL_MODE_PROT64 ; rdx = rdx",0
418,<S2SV_ModStart> dev ) ; ssize_t len ; device_lock ( dev ) ; len = <S2SV_ModEnd> sprintf ( buf <S2SV_ModStart> driver_override ) ; device_unlock ( dev ) ; return len ;,1
419,"<S2SV_ModStart> BIO * tmpout ; tmpout = cms_get_bio ( in, buf, flags ) ; if (! tmpout ) { CMSerr ( CMS_F_CMS_CMS_CONTENT, ERR_R_R_FAILURE ) ; goto err ; } for ( ; ) { i = BIO_read ( in, buf, sizeof ( buf ) ) ; if ( i < 0 ) { if ( BIO_type ( i )!= i ) { if ( BIO_type ( BIO_type ( in )!= i ) ) { if ( i < 0 ) goto err ; goto err ; } if ( i ) goto err ; } if ( i < 0 ) { <S2SV_ModEnd> if ( i <S2SV_ModStart> CMS_TEXT )!= i ) { <S2SV_ModEnd> if (!",0
420,<S2SV_ModStart> = KRB5_PREAUTH_FAILED ; if ( retval == 0 ) rs. enc_tkt_reply -> flags |= TKT_AUTH ;,0
421,"<S2SV_ModStart> output, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_prob <S2SV_ModEnd> probs [",0
422,"<S2SV_ModStart> = ""/tmp"" ; # endif",0
423,<S2SV_ModStart> = 0 ; size_t pathlen = 0 ; <S2SV_ModStart> case AF_UNIX : pathlen = sizeof ( <S2SV_ModEnd> ( ( struct <S2SV_ModStart> ) -> sun_path ) ; addr_text [ pathlen <S2SV_ModEnd> ) ; },0
424,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
425,<S2SV_ModStart> ; err = - 1,0
426,"<S2SV_ModStart> ) { struct hugepage_subpool * spool = subpool_vma ( vma ) ; struct <S2SV_ModStart> page * page <S2SV_ModEnd> ; unsigned long chg <S2SV_ModStart> ) if ( hugepage_subpool_subpool_put_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> ) { hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> ) ; } hugepage_subpool_subpool_put_pages ( spool <S2SV_ModEnd>, chg )",0
427,"<S2SV_ModStart> filegen_string ) ; if ( NULL == filegen ) { msyslog ( LOG_ERR, ""info -> filegen <S2SV_blank> unrecognized"" ) ; continue ; }",0
428,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; timer_set_state",1
429,"<S2SV_ModStart> fadst8 ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> output ) { tran_high_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 1 ] = input <S2SV_ModEnd> x8 = input <S2SV_ModStart> 4 ] ; tran_high_high_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> 2 ] ; tran_high_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> 3 ] ; tran_high_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> 1 ] = input <S2SV_ModEnd> x7 = input <S2SV_ModStart> 3 ] = input <S2SV_ModEnd> x7 ; tran_high_high_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> 6 ] = input <S2SV_ModEnd> [ 3 ] = input <S2SV_ModStart> [ 3 ] = input <S2SV_ModEnd> [ 3 ] = input <S2SV_ModStart> 6 ] = input <S2SV_ModEnd> [ 3 ] = input <S2SV_ModEnd> ; tran_low_t <S2SV_ModStart> 3 ] = ( tran_low_low_t ) <S2SV_ModStart> 6 ] = ( tran_low_t ) <S2SV_ModStart> 6 ] = ( tran_low_low_t ) <S2SV_ModStart> 6 ] = ( tran",0
430,<S2SV_ModStart> flags ) } <S2SV_ModEnd> if ( flags,0
431,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
432,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF <S2SV_ModStart> wc ) ; return,1
433,"<S2SV_ModStart> tot_len ) ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
434,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> AVINDEX_KEYFRAME ) ; },1
435,<S2SV_ModStart> ; if ( datalen >= 4 &&,0
436,"<S2SV_ModStart>, * controller, * next = NULL <S2SV_ModStart> out ; } <S2SV_ModEnd> if (! <S2SV_ModStart>, controller, & next <S2SV_ModEnd> ) ) { <S2SV_ModStart> out ; } ret = - EACCES ; free ( next ) ;",0
437,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flag & CL_UNPRIVILEGED,0
438,<S2SV_ModStart> rds_loop_transport ; } <S2SV_ModEnd> } conn ->,1
439,<S2SV_ModStart> * rsize >= 112 <S2SV_ModEnd> && rdesc [,1
440,<S2SV_ModStart> if ( ( ( <S2SV_ModStart> ) < bodyLength ) || ( bodyLength < sizeof ( EAPOL_RSN_KEY ) ),1
441,<S2SV_ModStart> ( likely ( serio <S2SV_ModEnd> &&! filtered,1
442,"<S2SV_ModStart>! er ) { ND_TCHECK ( <S2SV_ModEnd> dp [ 0 <S2SV_ModStart> 0 ] ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> c <S2SV_blank> %04x"", EXTRACT_32BITS ( & dp [ 0 ] ) ) ) ; } <S2SV_ModEnd> return ; case",1
443,"<S2SV_ModStart> * newName, int newLen, <S2SV_ModStart> * udfLen, int udfLen, <S2SV_ModEnd> uint8_t * fidName <S2SV_ModStart> ( newIndex < newLen <S2SV_ModEnd> ) newName [",0
444,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static const <S2SV_ModEnd> int mi_col, VP9_COMMON * const <S2SV_ModStart> * cpi, MACROBLOCKD * td, MACROBLOCKD * xd, <S2SV_ModEnd>, int mi_col, <S2SV_ModStart> int mi_col ; if ( mi_col > 0 && mi_col ) { <S2SV_ModEnd> ( cpi, <S2SV_ModStart> BLOCK_SIZE bsize, mi [ 0 ], mi_col + mi_col8x8x8 ( mi <S2SV_ModEnd>, mi_col, <S2SV_ModStart>, bh, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col ) ; if ( mi [ 0 ] && mi [ 0 ] -> mi_cols > 0 && mi_cols > 0 ) { <S2SV_ModEnd> cm -> <S2SV_ModStart> cm, mi_col, mi_col ; } <S2SV_ModStart> 1 ; } vpx_prob [ 0 ] ;",0
445,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flags == NULL,0
446,<S2SV_ModStart> ; if (! EXT4_GET_BLOCKS_SIZE,0
447,"<S2SV_ModStart> * s ; const unsigned char * p = sigbuf ; unsigned char * p = NULL ; int derlen = - 1 ; <S2SV_ModStart> s, & p <S2SV_ModEnd>, siglen ) <S2SV_ModStart> == NULL ) goto err ; derlen = i2d_ECDSA_SIG ( s, & der ) ; if ( derlen!= siglen || memcmp ( sigbuf, der, derlen ) ) <S2SV_ModStart> ; err : if ( derlen > 0 ) { OPENSSL_free ( der ) ; }",0
448,<S2SV_ModStart> NULL ) ; if (! r ) { rv = NULL ; },0
449,<S2SV_ModStart> ) ; } if ( bprm -> interp!= bprm -> filename ) kfree ( bprm -> interp ) ;,1
450,"<S2SV_ModStart> ; int ip_family = 0 ; memset ( & p -> ai_family, 0, sizeof ( * p ) ) ; if ( data ) { ret = - ENOMEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) goto done <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ; } if (! alt -> ai_namelen > OE_SSIZE_MAX ) { ret = ( OE_RAISE_ERRNO ( OE_EINVAL ) ; goto fail ; }",0
451,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
452,"<S2SV_ModStart> ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, ""Invalid <S2SV_blank> image <S2SV_blank> dimensions"" ) ; goto done ; }",1
453,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
454,"<S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
455,"<S2SV_ModStart> * body, struct Module * p <S2SV_ModEnd> * p ) <S2SV_ModStart> ; if (! p ) return - EINVAL <S2SV_ModEnd> ; p",0
456,<S2SV_ModStart> destroy_list ) ; <S2SV_ModEnd> } } <S2SV_null>,1
457,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> vpx_write <S2SV_ModEnd> ( src -> <S2SV_ModStart> src, uint8_t, int64_t <S2SV_ModEnd> flags, int <S2SV_ModStart> flags ) { const vpx_write_buffer <S2SV_ModEnd> ( src -> <S2SV_ModStart> flags ) ; # endif vpx_write_buffer <S2SV_ModEnd> ( src,",0
458,<S2SV_ModStart> ) ; } fuse_conn_put ( & cc -> fc ) ;,1
459,"<S2SV_ModStart> ( code ) { * status = ""DECODE_PA_X509_USER"" ; return code ; } <S2SV_ModEnd> code = verify_x509_checksum",0
460,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> disk_emulate_disk_command ( req,0
461,<S2SV_ModStart> cur_pic. field_picture <S2SV_ModEnd> ) return 0,1
462,<S2SV_ModStart> off ) { int ret ; <S2SV_ModStart> 0 ) ; return ret <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>,0
463,<S2SV_ModStart> buf ) ) { return 0 ; } <S2SV_ModEnd> ext_block = (,1
464,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = key_permission,1
465,<S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; },0
466,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
467,"<S2SV_ModStart> = hmi_data ; uint32_t data_siz ; <S2SV_ModStart> += hmi_siz ; if ( hmi_track_offset [ i ] >= hmi_siz ) { _WM_ERROR ( __LINE__, __LINE__, WM_ERR_ERR_ERR_NOT_HMI, ""file <S2SV_blank> too <S2SV_blank> short"", 0 ) ; goto _hmi_end ; } <S2SV_ModStart> += hmi_offset [ i ] -= hmi_data, hmi_siz, 0 ) ; if ( <S2SV_ModStart> += 4 ) { hmi_tmp = 4 ; } data_siz -= hmi_siz ; <S2SV_ModStart> += 4 ; } data_offset [ i ] -= hmi_data <S2SV_ModEnd> ; if ( <S2SV_ModStart> += hmi_siz -= hmi_data <S2SV_ModEnd> ; if ( <S2SV_ModStart> += 4 ; hmi_siz -= hmi_siz -= hmi_data",0
468,<S2SV_ModStart> -> id ; haddr -> hci_channel = 0 ;,1
469,<S2SV_ModStart> -> i_iget5_offset ; fh16 [ 3 ] = 0 ;,1
470,"<S2SV_ModStart> ( kdc_active_realm, client. princ <S2SV_ModEnd>, request ->",1
471,<S2SV_ModStart> break ; } <S2SV_ModEnd> dst_reg -> smin_value <S2SV_ModStart> = S64_MAX ; <S2SV_ModEnd> if ( src_known,1
472,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int y_filter_depth ; const VP9_COMMON * const VP9EncoderConfig <S2SV_ModEnd> * const <S2SV_ModStart> = get_layer_level ( xd -> bit_depth <S2SV_ModStart> = get_filter_level ( cm -> bit_depth )? 1 : 1 : 1 ; if ( cpi -> oxcf. max_depth ) { <S2SV_ModEnd> if ( <S2SV_ModStart> = 1 ; } else { <S2SV_ModEnd> return get_filter_level ( ) ; },0
473,<S2SV_ModStart> ; return false,0
474,"<S2SV_ModStart> ) length ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; <S2SV_ModStart> ""UnableToReadImageData"" ) ; }",0
475,"<S2SV_ModStart> = getnum ( <S2SV_ModEnd> fmt, MAXALIGN",0
476,<S2SV_ModStart> void usage_exit ( void,1
477,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
478,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
479,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
480,"<S2SV_ModStart>. data ; ( vpx_codec_alg_priv ( ctx ) <S2SV_ModEnd>, data, <S2SV_ModStart> data ) ; if (!",0
481,<S2SV_ModStart> ; if ( * value == 0 ||,1
482,<S2SV_ModStart> inode -> i_ext <S2SV_ModEnd> ) { struct,0
483,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
484,"<S2SV_ModStart> ; if ( snpal == 6 ) ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> SNPA <S2SV_blank> (length: <S2SV_blank> %s"", snpa ) ) ; else ND_PRINT ( ndo, ""\\n\\t <S2SV_blank> SNPA <S2SV_ModEnd> ) <S2SV_blank> (length: <S2SV_blank> %u)""",0
485,"<S2SV_ModStart> y2 ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> h"", <S2SV_ModStart> y2 ) ; sendClean ( outputbuffer ) ;",0
486,<S2SV_ModStart> } else { return false ; } } } else if ( r -> CRn == 0 && r -> CRm == 8 ) return false ; <S2SV_ModEnd> ; } if,0
487,<S2SV_ModStart> case IS_STRING : { zval dval ; dval = * * tmp ; zval_copy_ctor ( & lval ) ; zval_ctor ( & lval ) ; convert_to_double ( & lval <S2SV_ModEnd> ) ; convert_to_double ( & lval <S2SV_ModStart> i ] = Z_LVAL ( lval ) ; } <S2SV_ModEnd> break ; default <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; convert_double ( & lval <S2SV_ModStart>. x = Z_LVAL ( lval ) ; } else { zval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; convert_to_long <S2SV_ModStart>. x = Z_LVAL ( lval ) ; } <S2SV_ModStart> ) ) { zval ; },0
488,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
489,<S2SV_ModStart> SQL_DROP ) ; <S2SV_ModEnd> return 0 ;,1
490,"<S2SV_ModStart> ; r = __copy_from_user <S2SV_ModEnd> ( data,",1
491,"<S2SV_ModStart>, * q <S2SV_ModEnd> ; Clp_Parser * <S2SV_ModStart> ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992.\\n"" <S2SV_ModEnd> ) ; exit <S2SV_ModStart> && isspace ( ( unsigned char ) <S2SV_ModStart> ; isspace ( ( unsigned char ) <S2SV_ModStart> 0 )",0
492,<S2SV_ModStart> = 0 ; info -> port = NULL ;,1
493,<S2SV_ModStart> -> ctx. <S2SV_ModEnd> pmu = pmu,1
494,"<S2SV_ModStart> iovec * iov, struct iov_iter * iter ) { if ( len > MAX_RW_COUNT ) len = MAX_RW_COUNT ; <S2SV_ModEnd> if ( iov_iter",0
495,<S2SV_ModStart> ext4_group_t flex_group ; unsigned <S2SV_ModStart> -> s_log_groups_per_flex ; if ( sbi -> s_log_groups_per_flex < 1 || sbi -> s_log_groups_per_flex > 31 ) { sbi -> s_log_groups_per_flex = 0 ; return 1 ; } <S2SV_ModStart> -> s_log_groups_per_flex ; <S2SV_ModEnd> flex_group_count = (,1
496,<S2SV_ModStart> ( unlikely ( chunk -> pdiscard ) ) return 0 ; if ( unlikely (,1
497,<S2SV_ModStart> == 0 ) i ++ ; <S2SV_ModEnd> c = c,0
498,,0
499,<S2SV_ModStart> <= w - ( int ),1
500,<S2SV_ModStart> callback_args -> data_length = match_size,0
501,<S2SV_ModStart> options. disable_forwarding && use_privsep,1
502,"<S2SV_ModStart> { if ( length > SMKTREE_DECODE_MAX_RECURSION ) { av_log ( NULL, AV_LOG_ERROR, ""Maximum <S2SV_blank> tree <S2SV_blank> recursion <S2SV_blank> level <S2SV_blank> exceeded.\\n"" ) ; return AVERROR_INVALIDDATA ; } if (",1
503,<S2SV_ModStart> err ; } if ( m -> msg_name ),1
504,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_args, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> \\"" <S2SV_blank> \\"" <S2SV_blank> \\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> from <S2SV_blank> from <S2SV_blank> "" ) ; return 1 ; } else { int res <S2SV_ModEnd> ; res = <S2SV_ModStart> ) ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, arena ) < 0 ) { return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ) ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & PyId_ignores <S2SV_ModEnd> ) < <S2SV_ModStart> ) { return 1 ; } if ( tmp == NULL ) { Py_CLEAR ( tmp ) ; } if ( tmp == NULL ) { Py_CLEAR ( tmp ) ; } if ( lookup_attr_id ( obj, & PyId_name, & PyId__ ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\"" <S2SV_blank> \\"" <S2SV_blank> \\"" <S2SV_blank> \\"" <S2SV_blank> \\"" <S2SV_blank> \\"" <S2SV_blank>",0
505,<S2SV_ModStart> m ; int hstartrow <S2SV_ModEnd> ; if ( <S2SV_ModStart> 2 ) { hstartrow <S2SV_ModEnd> = ( numrows <S2SV_ModStart> = numrows - hstartrow <S2SV_ModEnd> ; n = <S2SV_ModStart> & a [ hstartrow <S2SV_ModEnd> * stride ],1
506,"<S2SV_ModStart> ""REPLY_ADD_STA <S2SV_blank> PASSED\\n"" ) ; ret = iwl_sta_ucode_activate ( priv, sta_id ) <S2SV_ModEnd> ; break ;",1
507,"<S2SV_ModStart> ; log_file = fopen_safe <S2SV_ModEnd> ( file_name,",1
508,,0
509,<S2SV_ModStart> & HB_LOCK ) spin_lock_irqsave ( & hashbin -> hb_lock ) ; <S2SV_ModEnd> for ( i <S2SV_ModStart> ++ ) { if (! queue ) break ; <S2SV_ModEnd> if ( free_func <S2SV_ModStart> ++ ) { if ( free_func ) break ; <S2SV_ModEnd> if ( free_func <S2SV_ModStart> flags ) { if ( free_func ( & hashbin -> hb_type ) hashbin <S2SV_ModStart> & HB_LOCK ) ; <S2SV_ModEnd> } } hashbin,0
510,<S2SV_ModStart> ; if ( mnt -> mnt. mnt. mnt_flags & MNT_LOCK_MASK <S2SV_ModEnd> ) { return,0
511,"<S2SV_ModStart> copied, err <S2SV_ModEnd> ; int vnet_hdr_len <S2SV_ModStart> out_free ; } msg -> msg_namelen = 0 ; msg -> msg_namelen <S2SV_ModStart> msg -> msg_namelen <S2SV_ModEnd> ; } copied",0
512,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
513,"<S2SV_ModStart> ( serial -> num_bulk_out <S2SV_ModEnd> < 2 ) <S2SV_ModStart> < 2 ) { dev_err ( & serial -> interface -> dev, ""missing <S2SV_blank> bulk <S2SV_blank> out <S2SV_blank> endpoints\\n"" ) ; return - ENODEV ; } <S2SV_ModEnd> port = serial",1
514,"<S2SV_ModStart> { ds64_chunk ; cs64_chunk <S2SV_ModStart>, cs64_chunk ) ; cs64_chunk <S2SV_ModStart> ds64_chunk ) ; cs64_chunk = & cs64_chunk <S2SV_ModStart> data_chunk ) ; if ( table_length * sizeof ( CS64Chunk ) ) { free ( ds64_chunk ) ; return FALSE ; } cs64_chunk = table_chunk",0
515,"<S2SV_ModStart> ) err = NULL <S2SV_ModEnd> ; if ( <S2SV_ModStart>, flags ) { if (! msg -> msg_sys ) { err = - EPERM ; goto out_unlock ; } else { <S2SV_ModStart> msg -> msg_name, msg_name ) ; } <S2SV_ModEnd> if (!",0
516,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> unsigned int <S2SV_ModStart> int nblocks ; int len ; size_t <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> = 0 ; size_t dblk_blocks = sizeof ( inode ) ; if ( unlikely ( inode ) ) return 0 ;,0
517,"<S2SV_ModStart> ( ) ; memset ( input, 0, sizeof ( input ) ) ;",0
518,<S2SV_ModStart> return FALSE ; { BOOL rc ; <S2SV_ModStart> -> prof_nsc_rle_decompress_data ) rc = <S2SV_ModStart> -> prof_nsc_rle_decompress_data ) if (! rc ) return FALSE ; } { BOOL rc ; <S2SV_ModStart> -> prof_nsc_decode ) rc = <S2SV_ModStart> -> prof_nsc_decode ) if (! rc ) return FALSE ; },1
519,<S2SV_ModStart> -> dict ) == 0,0
520,"<S2SV_ModStart> } if ( is_link ( fname ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank> %s <S2SV_blank> file\\n"", fname ) ; exit ( 1 ) ; } if ( <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> ; } else { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> 0 ) ; } }",0
521,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> unsigned <S2SV_ModStart> - EOPNOTSUPP ; uint8_t data ; uint16_t datalen ; size_len = sizeof ( struct xdr ) ; <S2SV_ModStart> * reqp, attr_len ) ; if ( status == 0 ) return - EINVAL ; <S2SV_ModStart> ) ) { <S2SV_ModEnd> if (! <S2SV_ModStart>, reqlen ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { if ( status == 0 ) goto out ; * iov_len = xdr_buf ;",0
522,<S2SV_ModStart> f ) ) return ;,0
523,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
524,<S2SV_ModStart> = timespec_to_ns ( & <S2SV_ModStart> = timespec_to_ns ( &,0
525,"<S2SV_ModStart> ; if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
526,<S2SV_ModStart> 1 ) { if ( ptr == 0 ) break ;,0
527,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct clt_media <S2SV_ModEnd> struct clt_media <S2SV_ModStart> rlt_media ; size_t content_length = 0 <S2SV_ModEnd> ; struct clt_range <S2SV_ModStart> 0 ) { char * r -> clt_ranges ; size_t ( clt_size = 0, sizeof ( clt -> clt ) ) ; <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> if ( ( nranges <S2SV_ModStart> 1 ) { range = & r -> clt_range_range [ 0 ] ; <S2SV_ModStart> 1 ) ; range = & r -> range [ 0 ] ; <S2SV_ModEnd> } else { <S2SV_ModStart> } else { range [ 0 ] ; <S2SV_ModEnd> } else { <S2SV_ModStart> 1 ] ; if ( r -> clt_boundary ) { range = & r -> clt_boundary, sizeof ( clt -> clt_ranges ) ) ; for ( i < nranges ; i ++ ) { range = & r -> range [ i ] ; for ( i ++ ) { range = - 1 ; i ++ ) { char * r -> range = & r -> range [ i ] ; for ( i ++ ) ; i ++ ) { range = & r -> range [ i ] ;",0
528,"<S2SV_ModStart> ( interface, KSZ8851_ISR ) ; int status <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_ISR ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( interface, KSZ8851_ISR_P1SR )!= 0 ) { <S2SV_ModEnd> return 0 ; <S2SV_ModStart> ( interface, KSZ8851_P1SR ) ; } else if ( ( status & KSZ8851_P1 )!= 0 ) { <S2SV_ModEnd> return 0 ; <S2SV_ModStart> ( interface, KSZ8851_P1SR_RXIS <S2SV_ModEnd> ) ; <S2SV_ModStart> ( interface, KSZ8851_ISR_RXIS <S2SV_ModEnd> ) ; }",0
529,"<S2SV_ModStart> void write_bit_buffer ( vpx_writer <S2SV_ModEnd> * wb, <S2SV_ModStart> cm, vpx_write_bit <S2SV_ModEnd> * wb )",0
530,<S2SV_ModStart> bpp <= 8 && c -> format!= CHUNKY,0
531,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
532,<S2SV_ModStart> tmp ) { goto softfail <S2SV_ModEnd> ; } case <S2SV_ModStart> ) ) { goto softfail <S2SV_ModEnd> ; } state <S2SV_ModStart> end ) ; softfail : state -> offset = 0 ;,1
533,"<S2SV_ModStart> struct fb_vblank vblank ; memset ( & vblank, 0, sizeof ( vblank ) )",1
534,<S2SV_ModStart> flags ) { spin_lock ( & ctx -> cancel_lock ) ; <S2SV_ModStart> } } else { __timerfd_remove_cancel <S2SV_ModEnd> ( ctx ) <S2SV_ModStart> ) ; } spin_unlock ( & ctx -> cancel_lock ) ;,1
535,"<S2SV_ModStart> ) ) ; if ( c16 -> Curves [ i ] == NULL ) { for ( j = 0 ; j < i ; j ++ ) { _cmsFree ( ContextID, c16 -> Curves [ j ] ) ; } _cmsFree ( ContextID, c16 -> Curves ) ; _cmsFree ( ContextID, c16 ) ; return NULL ; }",1
536,<S2SV_ModStart> { if (! dev_name ||,1
537,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
538,"<S2SV_ModStart> -> msg_rem ; memcpy_fromio ( buf, & msg_rem, sizeof ( * msg ) ) ; <S2SV_ModStart> ) ) { if ( buf ) memcpy_fromio ( buf <S2SV_ModEnd>, bus -> <S2SV_ModStart> -> m_pdwGetRing + sizeof ( * msg ), buf_size ) ; memcpy_fromio ( buf_rem - sizeof ( * msg ), space_rem, buf ) ; } else if ( buf ) memcpy_fromio ( buf <S2SV_ModEnd>, bus -> <S2SV_ModStart> -> m_pdwGetRing, space_rem - sizeof ( * msg ), buf_rem - sizeof ( * msg ) ) ; memcpy_fromio ( buf <S2SV_ModEnd> buf",0
539,<S2SV_ModStart> TSRMLS_CC ) ; if ( new_len > INT_MAX ) { efree ( replaced ) ; RETURN_FALSE ; },1
540,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> else if (,0
541,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_line_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) ; <S2SV_ModStart> t1_buf_array, t1_line_array ) ; alloc_array ( t1_line, strlen ( t1_buf_array ) + 1, T1_BUF_SIZE",1
542,"<S2SV_ModStart> * bsl ; FRAME_SIZE bsize = get_block_info <S2SV_ModEnd> ( cm <S2SV_ModStart>, bh ) <S2SV_ModEnd> ; int <S2SV_ModStart> case PARTITION_MODE_INFO * mi_col ; if ( mi_col > BLOCK_SIZE ) { get_block ( cm, bsize, mi_row, bsize ) ; break ; } <S2SV_ModStart> case PARTITION_NONE : vpx_subsize = get_subsize ( cm, x -> plane [ 0 ], subsize ) ; if ( mi_rows ( mi_col ) ) { <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; } <S2SV_ModStart> case PARTITION_NONE : vpx_set ( cm, x, subsize, x -> mi_rows",0
543,<S2SV_ModStart> name ) ; <S2SV_ModEnd> if (!,0
544,"<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> int i ; <S2SV_ModStart> = 0 ; for ( i = 0 ; i < frame_size ; i ) { av_log ( AV_LOG_ERROR, ""Invalid <S2SV_blank> plane\\n"" ) ; return AV_LOG_ERROR ; }",0
545,<S2SV_ModStart> cnt ) { ssize_t <S2SV_ModEnd> n ; assert,1
546,<S2SV_ModStart> ; __be16 type ; if ( NAPI_GRO_CB ( skb ) -> encap_mark ) goto out ; NAPI_GRO_CB ( skb ) -> encap_mark = 1,1
547,<S2SV_ModStart> ; if ( numrows < 0 || numcols < 0 ) { return 0 ; } if (,1
548,<S2SV_ModStart> return NULL ; <S2SV_ModEnd> } if (,0
549,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = key_read,0
550,<S2SV_ModStart> u4_first_slice_in_pic = 1 <S2SV_ModEnd> ; ps_dec ->,0
551,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> dst_reg -> smin_value <S2SV_ModStart> break ; } <S2SV_ModEnd> if ( BPF_CLASS,0
552,<S2SV_ModStart> ) - 1 <S2SV_ModEnd> ; if (,0
553,"<S2SV_ModStart> vfio_irq_set hdr ; size_t size ; <S2SV_ModStart> NULL ; int max, <S2SV_ModStart> NULL, hdr. count > max",0
554,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ext4_has_inline_data ( inode,1
555,<S2SV_ModStart> -> filesize = UINT64_MAX <S2SV_ModEnd> ; s ->,1
556,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
557,"<S2SV_ModStart> char * in, size_t olen <S2SV_ModStart> += 4 ; if ( len == olen ) return len ; <S2SV_ModStart> '=' ) { if ( len == olen ) return len ; <S2SV_ModStart> '=' ) { if ( len == olen ) return len ;",1
558,<S2SV_ModStart> gc ) ; <S2SV_ModEnd> return 0 ;,1
559,"<S2SV_ModStart> i ; size_t bytes, <S2SV_ModStart> ++ ) { bytes <S2SV_ModEnd> = min_t ( <S2SV_ModStart>, 0, bytes <S2SV_ModEnd> ) ; cur_len <S2SV_ModStart> copied ) ; for ( i = 0 ; i < nr_pages ; i ++ ) { for ( i = 0 ; i < nr_pages ; i ++ ) put_page ( wdata -> pages [ i ] ) ; kfree ( wdata ) ; kfree ( wdata ) ; rc = - EFAULT ; break ; }",0
560,<S2SV_ModStart> & CP_RDESC ) ) return rdesc ; if ( * rsize < 4,0
561,<S2SV_ModStart> { int i <S2SV_ModEnd> ; VP9_CONFIG * <S2SV_ModStart> ; int i ; int i ; for ( i = 0 ; i = 0 ; i < num_frame_frame_count / sizeof ( svc_ctx ) <S2SV_ModEnd> ; si -> <S2SV_ModStart> { for ( i = 1 ; i < 2 ; i ++ i ++ i <S2SV_ModEnd> ; i <S2SV_ModStart> ) { for ( i = 1 ; i < 2 ; i ++ num_frame_count ; i ++ i <S2SV_ModEnd> ; } for ( <S2SV_ModStart> ; i = 1 ; i < 2 ; i <S2SV_ModEnd> ; i <S2SV_ModStart> ; i <S2SV_ModEnd> ; } <S2SV_null>,0
562,<S2SV_ModStart> <S2SV_null> <S2SV_null,0
563,<S2SV_ModStart> ; if ( screen -> sb_buffer == NULL ),0
564,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> * str ; char * str ; char * str ; int end_start_end = ( char * str, str ) { char * str ; char * str ; char * str ; char * str ; char * end_end = ( str ) str ; <S2SV_ModStart> * str ; <S2SV_ModEnd> if (! <S2SV_ModStart> * str ) { const char * str = str ; if ( * str == '\\0' && * str == '\\\\' ) { * str = str ; return - 1 ; } else { const char * str ; * str = str ; if ( str == '\\\\' ) is_error ( c, "" <S2SV_blank> \'"" ) ; return - 1 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> str ) { * str = str_end && * str == '\\0' <S2SV_ModStart> str ) { * str = str ; <S2SV_ModEnd> if ( str <S2SV_ModStart> == NULL ) { <S2SV_ModStart> == NULL ) { * str = str_end <S2SV_ModEnd> ( c, <S2SV_ModStart> str, str_end ) ; return end_start_end = str ; } <S2SV_ModEnd> if ( str <S2SV_ModStart> str, str, str ) { <S2SV_ModStart> str, str ) ; return result = str ;",0
565,"<S2SV_ModStart> * m, size_t <S2SV_ModEnd> bufsize ) { <S2SV_ModStart> * buf ; <S2SV_ModEnd> if (! bufsize",0
566,<S2SV_ModStart> p ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
567,<S2SV_ModStart> true ; } <S2SV_ModEnd> return false ;,0
568,<S2SV_ModStart> pcrypt_free ( struct aead_instance <S2SV_ModEnd> * inst ) <S2SV_ModStart> * ctx = aead_instance_ctx <S2SV_ModEnd> ( inst ),1
569,,0
570,"<S2SV_ModStart> } if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if (",1
571,<S2SV_ModStart> icmp6_hop_limit ) { if ( <S2SV_ModStart> icmph. hop_limit < <S2SV_ModEnd> ra_hop_limit,0
572,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
573,"<S2SV_ModStart> * up ; int ulen ; <S2SV_ModStart> rp ) ; ulen = ulen ; memset ( up, ulen ) ;",0
574,"<S2SV_ModStart> int ret = proc_dointvec_minmax <S2SV_ModEnd> ( table,",1
575,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",1
576,<S2SV_ModStart> opj_calloc ( ( size_t ) ( <S2SV_ModStart> -> numlayers + 1U <S2SV_ModEnd> ) * l_step_l,0
577,"<S2SV_ModStart> name ), ""crypto-%s"" <S2SV_ModEnd>, name )",1
578,<S2SV_ModStart> ps -> channels <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return 0,0
579,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart>, & xd -> td. <S2SV_ModStart> -> mi_col ; <S2SV_ModEnd> int mi_col ; <S2SV_ModStart> -> mi_col ; memcpy <S2SV_ModEnd> ( cpi, <S2SV_ModStart>, & td, mi_col, mi_col, mi_col, mi_col, mi_col ) ; if ( mi_col > 0 ) { vp9_sad8x8x8 <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ) ) ; } memcpy <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ( cpi, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col ) ; }",0
580,"<S2SV_ModStart> 1 ) ; if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf = opipe",1
581,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
582,<S2SV_ModStart> } else { # ifdef UPNP_ENABLE_POST_WRITE <S2SV_ModStart> return HTTP_UNAUTHORIZED ; # else return HTTP_NOT_FOUND ; # endif,1
583,<S2SV_ModStart> ( dir ) <S2SV_ModEnd> return NULL ;,0
584,<S2SV_ModStart> blkg ) ) <S2SV_ModEnd> return PTR_ERR ( <S2SV_ModStart> blkg ) ; <S2SV_ModEnd> q -> root_blkg,1
585,<S2SV_ModStart> ; if ( bpp == 1 && <S2SV_ModStart> else if ( bpp == 8 &&,1
586,"<S2SV_ModStart> ; krb5_realm, tgt_realm,",0
587,<S2SV_ModStart> mnt ) ; nd -> last_type = LAST_BIND ;,1
588,"<S2SV_ModStart> struct usbdevfs_connectinfo ci ; memset ( & ci, 0, sizeof ( ci ) ) ; ci <S2SV_ModEnd>. devnum = <S2SV_ModStart> dev -> devnum ; ci <S2SV_ModEnd>",0
589,<S2SV_ModStart> <S2SV_null> static struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * optp = <S2SV_ModStart> -> opt.,0
590,<S2SV_ModStart> ; args -> rmtvaluelen2 = args -> rmtvaluelen,0
591,"<S2SV_ModStart> ) break ; size_t devicePath = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) break ; if ( (! TC_MAX_SECTOR_SIZE ) || ( devicePathLen < 64 * sizeof ( devicePath ) ) || ( devicePathLen > TC_MAX_SECTOR_MAX_SIZE ) || ( devicePathLen < 64 ) || ( devicePathLen > 4 * sizeof ( TC_MAX_SECTOR_SIZE ) ) { cpi -> DevicePath = 0 ; return 0 ; } else { <S2SV_ModStart> ) ) ; } else { size = 0 ; } <S2SV_ModStart> ) break ; } if (! readBuffer, offset <S2SV_ModEnd> ) ) { <S2SV_ModStart> ) ) { if ( readBuffer ) { <S2SV_ModStart> ) break ; }",0
592,<S2SV_ModStart> ; if (! entry &&,0
593,<S2SV_ModStart> ; int n <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return 0 ; } <S2SV_ModEnd> if ( plen,0
594,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } else {,0
595,,0
596,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
597,"<S2SV_ModStart>, int tstype, bool opt_stats",0
598,"<S2SV_ModStart> 0 ) { if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""UnexpectedEndOfFile"" ) ;",0
599,"<S2SV_ModStart> len ; } if ( len < 4 ) goto trunc ; <S2SV_ModStart> ndo_v2 ( bp, 2 <S2SV_ModEnd> ) ) ; len",0
600,"<S2SV_ModStart>, CONST_STR_LEN ( ""%2f?"" ), CONST_STR_LEN ( ""/?"" ) ) ; run_burl_normalize ( psrc, ptmp, __LINE__, CONST_STR_LEN (",0
601,<S2SV_ModStart> return - mode <S2SV_ModEnd> ; if (,0
602,<S2SV_ModStart> <= w - ( int ),1
603,<S2SV_ModStart> page ) ; <S2SV_ModEnd> memset ( addr,1
604,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t,0
605,<S2SV_ModStart> ; ps_codec -> s_parse. iHE <S2SV_ModEnd> = 1 ;,0
606,"<S2SV_ModStart> * priv ; if (! port -> interrupt_out_urb ||! port -> interrupt_in_urb ) { dev_err ( & port -> dev, ""required <S2SV_blank> endpoint <S2SV_blank> is <S2SV_blank> missing\\n"" ) ; return - ENODEV ; }",1
607,<S2SV_ModStart> ) ) ; dat [ 0 ] = 0 ;,0
608,<S2SV_ModStart> -> device_data ; cancel_autoload_drivers ( ) ;,1
609,"<S2SV_ModStart>, int src, const char * tmp",0
610,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> p == q ) || ( <S2SV_ModEnd> size < 16 <S2SV_ModStart> size < 16 ) || ( <S2SV_ModEnd> size > 256 <S2SV_ModStart> size > 256 ),1
611,"<S2SV_ModStart> uint dblocks = xfs_attr3_rmt_blocks <S2SV_ModEnd> ( mp,",1
612,"<S2SV_ModStart>, sizeof ( pcount ) <S2SV_ModEnd> ; } if",0
613,"<S2SV_ModStart> ( val, ""Strchr <S2SV_ModEnd> ) ; if",0
614,<S2SV_ModStart> ] == EOF || text [ 1 ] == 0 <S2SV_ModStart> ; if (! isxdigit ( <S2SV_ModStart> [ 2 ] ) <S2SV_ModEnd> ) return 0,0
615,<S2SV_ModStart> } if (,0
616,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> ) { const tran_low_t <S2SV_ModEnd> temp_in [ j <S2SV_ModStart> = input ; tran_low_t <S2SV_ModEnd> temp_out [ j <S2SV_ModStart> ] ; tran_low_t <S2SV_ModEnd> temp_in [ j <S2SV_ModStart> } } <S2SV_null>",0
617,<S2SV_ModStart> ; if ( value == 0 &&,0
618,"<S2SV_ModStart> fh_dentry ) ; error = fh_want_write ( fh ) ; if ( error ) <S2SV_ModEnd> goto out_errno ; <S2SV_ModStart> goto out_errno ; fh_lock ( fh ) ; error = set_posix_acl ( inode, ACL_TYPE_ACCESS, argp -> acl_access <S2SV_ModEnd> ) ; if <S2SV_ModStart> error ) goto out_drop_lock ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT <S2SV_ModEnd>, argp -> <S2SV_ModStart> argp -> acl_default ) ; out_drop_lock : fh_unlock ( fh ) ; <S2SV_ModEnd> fh_drop_write ( fh",1
619,<S2SV_ModStart> * ue ; if <S2SV_ModEnd> ( tree_root == <S2SV_ModStart> == NULL ) return 0,1
620,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char *,0
621,<S2SV_ModStart> elen ) ; elen += sizeof ( struct pathComponent ) ; <S2SV_ModStart> break ; } <S2SV_ModEnd> } if (,0
622,<S2SV_ModStart> ( dp [ 3 <S2SV_ModEnd> ] ),0
623,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr ) ;,0
624,<S2SV_ModStart> -> type == NULL,0
625,<S2SV_ModStart> ; bool slow <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ; * addr_len = sizeof ( * sin ) ;,1
626,"<S2SV_ModStart> len ) { <S2SV_ModEnd> if (! <S2SV_ModStart> } while ( len ) { u_int pdu_len = <S2SV_ModEnd> rpki_rtr_pdu_print ( ndo <S2SV_ModStart> ( ndo, pptr, 1, 1 <S2SV_ModEnd>, 8 ) <S2SV_ModStart>, 8 ) ; len <S2SV_ModEnd> -= pdu_len ; <S2SV_ModStart> pdu_len ; pptr <S2SV_ModEnd> += pdu_len ; <S2SV_ModStart> pdu_len ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>",0
627,"<S2SV_ModStart> int tagval ; struct stream packet ; <S2SV_ModStart> length ) ; packet = * s ; <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> overrun"", & packet ) ; }",0
628,"<S2SV_ModStart> 0 ; int offset ; u_int offset ; if ( ( ( l = 0 ) & INDIR_MASK ) == 0 ) return ( NULL ) ; if (! ND_TTEST2 ( * cp ), 1 ) ) return ( u_int ) ; if ( i = * cp < <S2SV_ModEnd> ndo -> ndo_snapend <S2SV_ModStart> 0 ) { if ( i ) return ( i ) ; if ( ( i & INDIR_MASK ) & INDIR_MASK ) == INDIR_MASK ) { ND_PRINT ( ndo, 0 ) ; return ( ndo, 1 ) ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ndo -> ndo_snapend <S2SV_ModEnd> ) == 0 ) { <S2SV_ModStart> ndo -> ndo_snapend <S2SV_ModEnd> ) ; }",0
629,"<S2SV_ModStart>, args -> rmtvaluelen <S2SV_ModEnd> ) ; error <S2SV_ModStart> = args -> rmtvaluelen <S2SV_ModEnd> ; while (",1
630,"<S2SV_ModStart>, ""%s"", __func__, const char * data <S2SV_ModEnd>, ""%s\\n"", <S2SV_ModStart> data? ""%s"" <S2SV_ModEnd>, data,",0
631,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> S_IWUSR ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; unlink",0
632,<S2SV_ModStart> ( fc ) ) return NULL ;,0
633,"<S2SV_ModStart> -> x = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> x = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> -> x = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> x = MagickMin <S2SV_ModEnd> ( 1.0f,",0
634,"<S2SV_ModStart> PKT_LEN_SIZE ) { giterr_set_str ( GITERR_NET, ""Invalid <S2SV_blank> empty <S2SV_blank> packet"" ) ; return GIT_ERROR <S2SV_ModEnd> ; } if",1
635,<S2SV_ModStart> ; if ( vma -> vm_flags & VM_SHARED ) return VM_FAULT_SIGBUS ; if (,1
636,<S2SV_ModStart> src -> sasl_username = g_copy,0
637,<S2SV_ModStart> env -> insn_data ; int i <S2SV_ModStart> ) ) ; for ( i = off + cnt - 1 ; i < off + cnt - 1,0
638,<S2SV_ModStart> ; ND_TCHECK ( * dp <S2SV_ModEnd> ) ; if,1
639,<S2SV_ModStart> trunc ; } ND_TCHECK_16BITS ( & bp [ i + 2 ] ) ; ND_TCHECK_16BITS ( & bp [ i + 4 ] ) ;,0
640,<S2SV_ModStart> flags ) ; memset <S2SV_ModEnd> ( cpi ->,0
641,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( occ0 <S2SV_ModStart> % rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""PredictorDecodeTile"", ""%s"", ""occ0%rowsize <S2SV_blank>!= <S2SV_blank> 0"" ) ; return 0 ; } <S2SV_ModEnd> assert ( sp <S2SV_ModStart> 0 ) { if (! <S2SV_ModStart>, rowsize ) ) return 0",1
642,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteCanonEntry ) ) ;",0
643,<S2SV_ModStart> ; if ( ctx -> terminated ||,1
644,<S2SV_ModStart> = NULL ; if ( sbi -> spool ) hugepage_put_subpool ( sbi -> spool ) ;,1
645,<S2SV_ModStart> ) ) ; if ( mi -> mi_flags & TH_NO_ONCE,0
646,<S2SV_ModStart> len ) { size_t nlen = sizeof ( size_t ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) <S2SV_ModEnd> return NULL ;,0
647,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
648,"<S2SV_ModStart> ( ) ; iov_iter_advance ( i, copied ) ; <S2SV_ModStart> again ; } <S2SV_ModEnd> pos += copied",1
649,<S2SV_ModStart> unlikely ( len + ring -> frameoffset,1
650,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
651,"<S2SV_ModStart> ( obj, <S2SV_ModEnd> name, data <S2SV_ModStart>, show_object, & base <S2SV_ModEnd>, path,",1
652,<S2SV_ModStart>  ; return NULL ;,0
653,<S2SV_ModStart> src < src > 2,0
654,<S2SV_ModStart> q ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
655,<S2SV_ModStart> } if ( <S2SV_ModEnd> idx == 0,0
656,<S2SV_ModStart> ; } } if (,0
657,<S2SV_ModStart> timeri -> timer_lock ) ; spin_lock ( & timer -> timeri -> timer ) ; <S2SV_ModStart> slave_active_head ) ; spin_unlock ( & timeri -> lock ) ;,0
658,<S2SV_ModStart> len ; } ND_TCHECK ( p [ 2 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT,0
659,<S2SV_ModStart> -> arch ; <S2SV_ModEnd> char * arch <S2SV_ModStart> * arch = calloc ( info -> cpu ) ; char * arch = malloc ( info -> cpu ) <S2SV_ModEnd> ; ut16 bits <S2SV_ModStart> ; if ( <S2SV_ModEnd> cpu && * <S2SV_ModStart> cpu && * <S2SV_ModEnd> cpu && *,0
660,"<S2SV_ModStart> sas_probe_devices ( struct asd_sas_port * port <S2SV_ModEnd> ) { struct <S2SV_ModStart>, * n <S2SV_ModEnd> ; list_for_each_entry (",1
661,<S2SV_ModStart> ; WORD32 ret <S2SV_ModEnd> ; if (,0
662,"<S2SV_ModStart> gint64 offset ; <S2SV_ModEnd> char line [ <S2SV_ModStart> line [ NETSCREEN_LINE_LENGTH <S2SV_ModEnd> ] ; offset <S2SV_ModStart> return FALSE ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! parse_netscreen_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart> wth -> fh <S2SV_ModEnd>, & wth <S2SV_ModStart> wth -> frame_buffer, line",1
663,<S2SV_ModStart> 0 ) ; if ( <S2SV_ModStart>. seq_num ) < 0 ) return - 1,1
664,<S2SV_ModStart> ) ) { size_t width = gmi -> image -> image ; <S2SV_ModStart> = 0 ; if ( <S2SV_ModEnd>!= 0 &&,0
665,<S2SV_ModStart> : ret = - EOPNOTSUPP ; if ( key -> type -> read ) goto error <S2SV_ModEnd> ; ret <S2SV_ModStart> == 0 ) ret = <S2SV_ModEnd> key -> read,0
666,<S2SV_ModStart> return NULL ; if ( conn -> type == NULL ||,0
667,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",1
668,"<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if <S2SV_ModStart> - JAS_CAST ( jas_longlong <S2SV_ModEnd>, ( ( <S2SV_ModStart> : JAS_CAST ( jas_longlong <S2SV_ModEnd>, tmp )",1
669,<S2SV_ModStart> page ) ; rm -> atomic. op_active = 0 ;,1
670,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> has <S2SV_blank> wrong <S2SV_blank> bus <S2SV_blank> %d <S2SV_blank> info!\\n"", __func__, dev -> name, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",1
671,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = 0 <S2SV_ModStart> ) ) ; msg -> msg_namelen = sizeof ( * sin ) ;",0
672,"<S2SV_ModStart> sizeof ( spath ) ) return - 1 ; if ( strstr ( name, "".."" ) || strchr ( name, '/'",1
673,<S2SV_ModStart> ) ) { if ( ( s == '\\0' ),0
674,"<S2SV_ModStart> -> bcache, cache_id ( <S2SV_ModStart> ] -> data )",1
675,<S2SV_ModStart> objp ) ; * objp = NULL ;,1
676,"<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL ) )",1
677,<S2SV_ModStart> return 1 ; consume_skb ( skb ) ; return 0 <S2SV_ModEnd> ; } if,1
678,"<S2SV_ModStart> devnum ) ; if <S2SV_ModEnd> ( devnum ) <S2SV_ModStart> devnum ) ; pr_err ( ""%S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>",0
679,"<S2SV_ModStart> dentry ) { if ( dentry -> d_dentry ) return ERR_PTR ( dentry ) ; <S2SV_ModStart>, dentry ) <S2SV_ModEnd> ; err =",0
680,<S2SV_ModStart> p ) { if ( p >= ( char * p ) p ++ ;,0
681,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( (,0
682,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_read_bit_buffer <S2SV_ModEnd> ( rb, <S2SV_ModStart> max ) vpx_read_buffer <S2SV_ModEnd> ( rb,",0
683,<S2SV_ModStart> 1 ) ; if ( strlen ( line ) == 0 ) return - 1 ;,1
684,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> } if (,0
685,<S2SV_ModStart> ++ ) { if ( band -> prec ) { <S2SV_ModStart> ) ; } },1
686,<S2SV_ModStart> < 0 ) { xmlFreeInputStream ( input ) ; return ; } <S2SV_ModEnd> if ( entity,1
687,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart>, & final ) ; rcu_read_unlock ( <S2SV_ModStart> -> ir_v6_rmt_addr ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ), <S2SV_ModEnd> np -> tclass <S2SV_ModStart> np -> tclass ) ; rcu_read_unlock (",1
688,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> cpi ) { const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * cpi -> td. tx_mode = & cpi -> oxcf. tx_mode_type ; <S2SV_ModStart> ) { const <S2SV_ModEnd> if ( cpi <S2SV_ModStart> ) return ; } else { if ( cpi -> rd_mode == KEY_COUNTS2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
689,"<S2SV_ModStart> ( u32 size, u32 num ) { if ( size > UINT32_MAX / num ) { return NULL ; } <S2SV_ModEnd> return malloc ( <S2SV_ModStart> malloc ( size * num",1
690,<S2SV_ModStart> else if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1 <S2SV_ModStart> { if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1,1
691,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,1
692,<S2SV_ModStart> } if ( ( buf1 -> size!= 2 ) return - 1,0
693,"<S2SV_ModStart> scn, root_storage <S2SV_ModEnd> ) ) <",1
694,<S2SV_ModStart> ; size_t size <S2SV_ModEnd> ; if (,0
695,<S2SV_ModStart> (! eof && vars -> str. c!= vars -> ptr,1
696,<S2SV_ModStart> ( * sk ) return - EINVAL ; if (,0
697,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, regs",0
698,"<S2SV_ModStart> -> _eip ; rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val )",0
699,"<S2SV_ModStart> -> name, sizeof ( url ) - 1",0
700,"<S2SV_ModStart> void * end <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; void * dbuf = NULL ; void * <S2SV_ModStart> struct ceph_crypto_key old_buf ; void * ticket_buf = NULL <S2SV_ModStart>, end, & old_buf, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart> bad ) ; if (! ticket_buf ) { dout ( ticket_buf, & old_buf, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart> bad ) ; } tp = ticket_buf ;",0
701,"<S2SV_ModStart> ; if ( count > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR,",0
702,<S2SV_ModStart> * rq ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
703,<S2SV_ModStart>,0
704,"<S2SV_ModStart> ( b, b -> fd",0
705,<S2SV_ModStart> ; error = NULL <S2SV_ModEnd> ; if (,0
706,<S2SV_ModStart> NULL ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_FIELD_REF,0
707,<S2SV_ModStart> -> dev ; cmd = cmd -> dev ;,0
708,"<S2SV_ModStart>, body, type_comment, string type_comment ; string type_comment ; string type_comment ; <S2SV_ModStart> ; if ( has_type_comment ) == TYPE ( CHILD ( n, 2 ) == TYPE_COMMENT ) ; type_comment = NEW_TYPE_COMMENT ( CHILD ( n, 2 ) ) ; if (! type_comment ) return NULL ; type_comment = type_comment",0
709,<S2SV_ModStart> err = 0 ; if (! net_active ( id ) ) return - EINVAL,0
710,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
711,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,1
712,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
713,<S2SV_ModStart> -> rows = 1 <S2SV_ModEnd> ; image -> <S2SV_ModStart> ( BImgBuff ) <S2SV_ModEnd> ; break ;,1
714,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>,0
715,,1
716,"<S2SV_ModStart> ( req, <S2SV_ModEnd> dev ) ;",0
717,<S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ) { if <S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd> > psf -> <S2SV_ModStart> > psf -> header. indx <S2SV_ModEnd> ) ) { <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; if ( <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> > psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> > psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ) ) { <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> = psf -> header. indx <S2SV_ModEnd> ; psf -> <S2SV_ModStart> psf -> header. end <S2SV_ModEnd> ; break ;,0
718,<S2SV_ModStart> out_mutex ; } ext4_inode_block_unlocked_dio ( inode ) ; inode_dio_wait ( inode ) ; down_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart> ioffset ) ; <S2SV_ModEnd> inode_write ( & EXT4_I ( inode,0
719,"<S2SV_ModStart> uint32_t track_size ; uint32_t * track_size ; uint32_t * * track_size <S2SV_ModStart> = * track_size <S2SV_ModEnd> ; uint32_t track_size <S2SV_ModStart> no_tracks ; track_size [ tmp_size [ tmp_size [ tmp_size [ tmp_val <S2SV_ModEnd> ] ++ ] <S2SV_ModStart> = * midi_val <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( midi_data [ tmp_val <S2SV_ModEnd> - 2 ] <S2SV_ModStart> ( midi_data [ tmp_val <S2SV_ModEnd> - 3 ] <S2SV_ModStart> ( midi_data [ tmp_val <S2SV_ModEnd> - 3 ] <S2SV_ModStart> ( midi_val <S2SV_ModEnd> - 4 ] <S2SV_ModStart> ( midi_data [ tmp_val <S2SV_ModEnd> - 3 ] <S2SV_ModStart> ( midi_val <S2SV_ModEnd> - 3 ] <S2SV_ModStart> ( midi_data [ tmp_val <S2SV_ModEnd> - 3 ] <S2SV_ModStart> ( midi_val <S2SV_ModEnd> - 3 ] <S2SV_ModStart> ( midi_data [ tmp_val <S2SV_ModEnd> - 3 ] <S2SV_ModStart> ( midi_data [ i ], track_size [ i ] <S2SV_ModStart> = tmp_val <S2SV_ModEnd> ; midi_val <S2SV_ModEnd> ; midi_val [ <S2SV_ModStart> ( midi_val <S2SV_ModEnd> - 3 ] <S2SV_ModStart> i ] -- ; track_size [ i ] -- ; track_size [ i ]",0
720,"<S2SV_ModStart> = max_t ( int <S2SV_ModEnd>, val * <S2SV_ModStart> = max_t ( int <S2SV_ModEnd>, val *",1
721,<S2SV_ModStart> * bh ; unsigned int table_len ; <S2SV_ModStart> -> b_data ; table_len = le32_to_cpu ( lvd -> mapTableLength ) ; if ( sizeof ( * lvd ) - lvd -> s_blocksize ) goto out_bh <S2SV_ModEnd> ; } else,0
722,"<S2SV_ModStart> long n ; image = 0 ; info = 0 ; <S2SV_ModStart> ""cannot <S2SV_blank> get <S2SV_blank> header\\n"" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ""cannot <S2SV_blank> to <S2SV_blank> info\\n"" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> "" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> 1, ( ""BMP <S2SV_blank> %ld; <S2SV_blank> %ld; <S2SV_blank> %ld; <S2SV_blank> info\\n"", JAS_CAST ( long <S2SV_ModStart> info -> depth ), JAS_CAST ( long <S2SV_ModEnd> info -> len )",0
723,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> dev ), func <S2SV_ModEnd>, line, <S2SV_ModStart> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"", func <S2SV_ModEnd>, line,",1
724,<S2SV_ModStart> UCD_ERROR ) ; if ( ( ps_dec -> u4_cur_bits!= 0 ) { return IHEVCD_ERROR ; },0
725,"<S2SV_ModStart> g_tv_comment, NULL <S2SV_ModEnd> ) ; }",0
726,<S2SV_ModStart> entity ) ; <S2SV_ModEnd> return - EINVAL,0
727,,0
728,"<S2SV_ModStart>, extent, height, <S2SV_ModStart> ""UnableToReadImageData"" ) ; <S2SV_ModEnd> height = sun_info <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; if ( sun_info. type == RT_ENCODED ) <S2SV_ModStart> sun_data ) ; <S2SV_ModEnd> p = sun_pixels",0
729,"<S2SV_ModStart>, krb5_principal client_principal, const char * tgt_realm <S2SV_ModStart> principal ), tgt_realm <S2SV_ModEnd> ) ; if",1
730,"<S2SV_ModStart> ReadBlobLSBLong ( image ) ; if ( bmp_info. number_colors > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
731,<S2SV_ModStart> ; newinet -> inet_opt <S2SV_ModEnd> = ireq ->,1
732,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
733,<S2SV_ModStart>!= 0 ) { int tend_off = skb_off_off ( skb ) + tlen ; <S2SV_ModStart> ) ) ) ; },0
734,"<S2SV_ModStart> gfn, page_size >> PAGE_SHIFT <S2SV_ModStart> pfn, gfn, gfn",0
735,<S2SV_ModStart> 0x00 } ; if ( cmd -> msg_len > sizeof ( b ) - 4 ) return - EINVAL ;,1
736,"<S2SV_ModStart> perf_event_context * ctx ; ctx = perf_event_ctx_lock <S2SV_ModEnd> ( event ) <S2SV_ModStart> event ) ; perf_event_disable ( event, ctx <S2SV_ModEnd> ) ; }",0
737,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ; return ( <S2SV_ModStart> ; return ( <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> & 0xffffffff ) <S2SV_ModEnd> ; return (,0
738,"<S2SV_ModStart> free_nid * i, * e <S2SV_ModStart> ; int err = - EINVAL ; int err = - EINVAL ; int err = false <S2SV_ModStart> return false ; if ( e ) goto err_free_nid_out ; i -> nid = nid ; i -> nid = nid ; i -> state = nid ; <S2SV_ModStart> ; if ( e ) goto err <S2SV_ModEnd> ; err = <S2SV_ModStart> ) ) goto err_out_out <S2SV_ModEnd> ; } } <S2SV_null>",0
739,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> flags = ctx,0
740,"<S2SV_ModStart> ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> ++ cons ; netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> extra. type ) ; netbk_fatal_tx_err ( vif",1
741,<S2SV_ModStart> ) ) ; hdr -> sadb_msg_reserved = 0 ;,1
742,"<S2SV_ModStart> ) return ; memset ( & r1, 0, sizeof ( r1 ) ) ;",1
743,"<S2SV_ModStart>, 1 ) ; luaL_argcheck ( L, 1, 1, ""0x"" ) ; luaL_argcheck ( L, & data, 1, <S2SV_ModEnd>, 1 <S2SV_ModStart> len ) ; luaL_check ( L, 1, <S2SV_ModEnd> 1, sizeof ( L <S2SV_ModStart> 1 ) - 1 <S2SV_ModEnd> 1 ) ;",0
744,"<S2SV_ModStart> ) ) { ND_TCHECK2 ( * tptr, sizeof ( struct optr ) ) ; <S2SV_ModStart> * msg ; }",0
745,<S2SV_ModStart> ; int n ; if (! body -> unit_size ) break ; n,0
746,<S2SV_ModStart> end ) { <S2SV_ModEnd> const uint8_t * <S2SV_ModStart> = 0 ; # endif <S2SV_ModEnd> ( res -> <S2SV_ModStart> end ) ; # if CONFIG_VP8_HIGHBITDEPTH if ( h < 0 ) { return - 1 ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> return - 1 ; },0
747,"<S2SV_ModStart> ) ) { copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ( src, getuid <S2SV_ModEnd>, 0,",0
748,"<S2SV_ModStart>, s = 0",0
749,<S2SV_ModStart> return res ; <S2SV_ModEnd> return 0 ;,1
750,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> ) ; } ext_size = sizeof ( struct ext_header ) * le16_to_cpu ( neh -> eh_data + ext_size, inode -> eh_size ) ; memset ( bh -> eh_data + ext_size, 0, inode -> b_size ) ; <S2SV_ModStart> ) ; } ext_size = sizeof ( struct ext_size ) * le16_size ) * le16_cpu ( neh -> eh_size ) + ext_size ) ; memset ( & ext_size, 0, inode -> b_size ) ; memset ( & ext_size - ext_size ) ;",0
751,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } if (,0
752,<S2SV_ModStart> ; cmap_len = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> ( & tga,0
753,<S2SV_ModStart> ; ssize_t ret ; size_t <S2SV_ModEnd> ret ; if,0
754,<S2SV_ModStart> == CPUCLOCK_SCHED ) * tp = ns_to_timespec <S2SV_ModEnd> ( cpu. <S2SV_ModStart> cpu. sched ) ; else <S2SV_ModEnd> cputime_to_timespec ( cpu <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
755,<S2SV_ModStart> ; uint32 nstrips <S2SV_ModEnd> ; nstrips =,1
756,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = 0 <S2SV_ModStart> ) ) ; msg -> msg_namelen = sizeof ( * sin ) ;",0
757,"<S2SV_ModStart> lua_parser * l ; int i ; lua_parse_spec <S2SV_ModEnd> ; APLOG_ERR ( <S2SV_ModStart> * lua_parse ) <S2SV_ModEnd> ; ap = <S2SV_ModStart> 0 ) { ap ; ap_log_err ( APLOG_ERROR, ""Invalid <S2SV_blank> initialization"" ) ; }",0
758,<S2SV_ModStart> ; int error = 0 <S2SV_ModStart> &= PAGE_MASK ; if ( address < mmap_min_addr ) return - EPERM <S2SV_ModEnd> ; prev =,1
759,"<S2SV_ModStart> { umode_t mode <S2SV_ModEnd> ; error = <S2SV_ModStart> ; error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & mode <S2SV_ModStart>, & mode, & acl <S2SV_ModStart> if ( error <S2SV_ModEnd> ) return error <S2SV_ModStart> return error ; <S2SV_ModEnd> error = xfs_set_mode",1
760,"<S2SV_ModStart>, int optional, const char * rootfs <S2SV_ModStart> endif if ( safe_mount <S2SV_ModEnd> ( fsname, <S2SV_ModStart>, data ) < 0",0
761,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
762,"<S2SV_ModStart> it_overrun = - 1LL <S2SV_ModEnd> ; ++ timr <S2SV_ModStart> info -> si_overrun = timer_overrun_to_int ( timr, info -> si_overrun ) <S2SV_ModEnd> ; } unlock_timer",1
763,<S2SV_ModStart> ) { return - 1 <S2SV_ModEnd> ; } if,0
764,<S2SV_ModStart> struct static_key * once_key <S2SV_ModEnd> ) { static <S2SV_ModStart> ; __net_key <S2SV_ModEnd> ; } <S2SV_null>,0
765,"<S2SV_ModStart> -> read_data ) { ret = <S2SV_ModEnd> io_has_eventfd <S2SV_ModStart> ki_eventfd, ret <S2SV_ModEnd>, ret",0
766,<S2SV_ModStart> ; if ( IPCB ( skb ) -> flags & IPSKB_DOREDIRECT <S2SV_ModEnd> &&! opt,1
767,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
768,"<S2SV_ModStart> struct trusted_key_payload * p ; struct trusted_key_payload * new_p ; struct trusted_key_payload * new_p ; struct trusted_o ; size_t datalen = datalen -> datalen ; int ret = 0 ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) return - ENOKEY ; <S2SV_ModStart> 0 ] ; <S2SV_ModEnd> if (!",0
769,"<S2SV_ModStart> v |= ( JAS_CAST ( uint_fast32_t, c ) <S2SV_ModEnd> << 24 )",1
770,<S2SV_ModStart> NULL ) { if ( skb -> len < ROSE_MAX_ADDR_LEN ) { kfree_skb ( skb ) ; continue ; } <S2SV_ModStart> 1 ] ; if ( skb -> len <= ROSE_CALL_REQ_ADDR_LEN ) { kfree_skb ( skb ) ; continue ; } <S2SV_ModStart> 1 ] ; kfree_skb ( skb ) ;,0
771,"<S2SV_ModStart> out_free ; } else kvm_unmap_pages ( kvm, & old ) ;",0
772,<S2SV_ModStart> == NULL ) <S2SV_ModEnd> == NULL ),0
773,"<S2SV_ModStart> = 0 ; char * len = fdt ; <S2SV_ModStart> next_offset + offset, offset + 1",0
774,"<S2SV_ModStart> ; uint16_t numChannels = 0 <S2SV_ModStart> numChannels < 1 || numChannels > 256 <S2SV_ModStart> ) ) { if (! config -> num_channels ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
775,<S2SV_ModStart> } if ( data_body == NULL &&,0
776,<S2SV_ModStart> ( server. ds_enabled <S2SV_ModEnd> ) server.,0
777,<S2SV_ModStart> } if ( options -> flags <S2SV_ModEnd> ) return,0
778,"<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> EFAULT ; } if ( rlen > MAX_XFER_SIZE ) { warn ( ""i2c <S2SV_blank> len=%d <S2SV_blank> too <S2SV_blank> big!\\n"", st -> data, rlen ) ; return - EOPNOTSUPP ; } <S2SV_ModEnd> mutex_lock ( & <S2SV_ModStart> wlen, rlen",0
779,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
780,<S2SV_ModStart> book -> dim && i < n,1
781,<S2SV_ModStart> rbuf ) { sprintf ( outputpos ) ;,0
782,<S2SV_ModStart> == - EEXIST || ret == - EOVERFLOW,1
783,<S2SV_ModStart> fp ) ; spin_lock ( & unix_lock ) ; <S2SV_ModStart> unix_sk ( s <S2SV_ModEnd> ) ; } <S2SV_ModStart> unix_sk ( s <S2SV_ModEnd> ) ; },0
784,<S2SV_ModStart> size_t chanmap_size = SF_MAX,0
785,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
786,<S2SV_ModStart> ms ) { uint32_t <S2SV_ModEnd> nestsize = ( <S2SV_ModStart> nestsize = ( uint32_t <S2SV_ModEnd> ) ms ->,1
787,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
788,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
789,<S2SV_ModStart> -> xrefs = safe_calloc ( <S2SV_ModEnd> sizeof ( xref_t,1
790,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
791,"<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ) <S2SV_ModStart> ( opt ) { atomic_sub ( <S2SV_ModEnd> opt -> tot_len <S2SV_ModStart> opt -> tot_len, & sk -> sk_omem_alloc ) ; txopt_put ( opt <S2SV_ModStart> ) ; } }",1
792,"<S2SV_ModStart>, * tmpin = NULL, * tmpout <S2SV_ModStart> = dcont ; if (! ( flags & SMIME_TEXT ) && dcont ) { tmpout = cms_get_bio ( dcont, flags ) ; if ( flags & SMIME_TEXT ) { if (! SMIME_TEXT ) { CMSerr ( CMS_F_VERIFY, err ) ; goto err ; } <S2SV_ModStart> = dcont ; if (! ( flags & SMIME_TEXT_TEXT ) && dcont ) { CMS_R_R_VERIFY, flags & SMIME_TEXT ) ; goto err ; } } <S2SV_ModStart> = dcont ; if ( flags & SMIME_TEXT ) { if ( flags & SMIME_TEXT ) { if ( flags & SMIME_TEXT_TEXT_TEXT ) { if ( flags & ~ SMIME_TEXT ) { if (! SMIME_TEXT ) goto err ; } <S2SV_ModStart> = dcont ; if ( flags & ~ SMIME_TEXT ) { if ( flags & SMIME_TEXT ) { if ( tmpin!= dcont ) { CMS_free ( tmpin ) ; goto err ; } <S2SV_ModStart> cmsbio ) ; } else { if ( tmpin!= dcont ) { if (",0
793,<S2SV_ModStart> = 0 ; atomic -> opt.,0
794,<S2SV_ModStart> ( ) ; sctp_net_init_out <S2SV_ModEnd> ( ) ;,0
795,<S2SV_ModStart> cs_flags ) ; hook_register ( check_keywords ) ; hook_del_register ( check_registration_keywords ) ;,0
796,<S2SV_ModStart> ) { struct in_device * idev <S2SV_ModEnd> = ( (,0
797,<S2SV_ModStart> -> mm ) { <S2SV_ModEnd> fail ; },0
798,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
799,"<S2SV_ModStart> val ) { int temp_size = 500 ; char * temp = malloc ( temp_size ) <S2SV_ModEnd> ; int i <S2SV_ModStart> ; ) { if ( i >= temp_size ) { temp_size *= 2 ; temp = realloc ( temp, temp_size ) ; }",1
800,<S2SV_ModStart> task ) { <S2SV_ModEnd> del_timer ( & <S2SV_ModStart> -> timer ) <S2SV_ModEnd> ; complete (,1
801,"<S2SV_ModStart> ; if ( x = safe_calloc <S2SV_ModEnd> ( dst_name,",0
802,"<S2SV_ModStart> NULL ) { if <S2SV_ModEnd> ( errno == <S2SV_ModStart> == ENOMEM ) <S2SV_ModEnd> log_warn ( ""lldp""",0
803,<S2SV_ModStart> object + size < * object || <S2SV_ModStart> object + size < * object || * object + size,0
804,,0
805,<S2SV_ModStart> all_channels_lock ) ; put_net ( pch -> chan_net ) ; pch -> chan_net = NULL ;,1
806,"<S2SV_ModStart> btrfs_dir_item * di = NULL <S2SV_ModStart> - ENOMEM ; di = btrfs_ino ( NULL, name_len ( NULL, name_len, path -> i_len ) ; if (! di && <S2SV_ModEnd> ( trans -> <S2SV_ModStart>, name_len ) ) { ret = btrfs_xattr_add_ino ( inode, name, name, name_len, name_len, name_len, name_len, name_len ) ; else if (! di && <S2SV_ModEnd> if ( flags & <S2SV_ModStart> & XATTR_REPLACE ) ) { ret = btrfs_delete_dir_name <S2SV_ModEnd> ( trans, <S2SV_ModStart> out ; } di = btrfs_xattr ( inode, name, name, name_len, name, name_len, name_len, name_len, name_len ) ; else if (! <S2SV_ModEnd> if (! <S2SV_ModStart> out ) ) { ret = btrfs_dereference ( inode <S2SV_ModEnd> ( trans, <S2SV_ModStart>, name, name, name, name_len, name_len, name <S2SV_ModEnd> ) ; }",0
807,"<S2SV_ModStart> > 0xbf ) { <S2SV_ModStart> return 1 ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> buf_len ) ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> buf_len = strlen ( op -> txt ) ; txtLen = strlen ( op -> txt ) ; txtLen = strlen ( txt ) ; txtLen = strlen ( txt ) ; txtLen = strlen ( txt ) ; txtLeft -= txtLen ; txtLen ; <S2SV_ModStart> } snprintf ( txt, txt, txt, txtLeft - 1 <S2SV_ModEnd>, ""%d <S2SV_blank> "", <S2SV_ModStart>, txt, txt ) ) ; txtLen = strlen ( txtLen <S2SV_ModEnd>, txt )",0
808,"<S2SV_ModStart> client -> proxy ) ; g_byte_array_free ( client -> auth_buffer, TRUE",1
809,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
810,<S2SV_ModStart> ; if ( key_is_negative ( key <S2SV_ModEnd> ) ) return,1
811,<S2SV_ModStart> ( unlikely ( t + 3 <S2SV_ModEnd> ) >> <S2SV_ModStart> ) ; } if ( unlikely ( t > ( t + 3 ) ) goto done ; <S2SV_ModStart> ) ; },0
812,"<S2SV_ModStart> ( fat_name, ""%S2SV_null> <S2SV_null>",0
813,<S2SV_ModStart> { vpn_packet_t outpkt ; if ( len > sizeof outpkt. data ) return,1
814,<S2SV_ModStart> vmx_vpid_bitmap ) ; <S2SV_ModEnd> for ( msr <S2SV_ModStart> 0x83f ) ; <S2SV_ModEnd> if ( enable_ept,1
815,<S2SV_ModStart> < 1 || vstart + vdaux < vstart <S2SV_ModEnd> ) { sdb_free,0
816,"<S2SV_ModStart> { TEMP_FAILURE_RETRY ( <S2SV_ModStart> ), 0 )",0
817,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } #,0
818,<S2SV_ModStart> ) return - 1 <S2SV_ModEnd> ; } if,0
819,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
820,<S2SV_ModStart> INDENT_INCR ; } if ( tbl -> indent < 0 ) tbl -> indent = 0 ; <S2SV_ModStart> -= INDENT_INCR ; if ( offset < 0 ) offset = 0 ;,1
821,<S2SV_ModStart>,0
822,"<S2SV_ModStart> } # line 113 <S2SV_ModEnd> ""hex_grammar.y"" { RE_AST <S2SV_ModStart> } # line 113 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> } # line 122 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> } # line 126 ""hex_grammar.c"" break ; <S2SV_ModEnd> "" { ( <S2SV_ModStart> } # line 122 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> } # line 126 ""hex_grammar.c"" break ; <S2SV_ModStart> } # line 126 ""hex_grammar.c"" break ; <S2SV_ModEnd> "" break ; <S2SV_ModStart> : # line 122",0
823,<S2SV_ModStart> ; #,0
824,"<S2SV_ModStart> ( buff, sizeof ( buff )",0
825,<S2SV_ModStart> ; if ( key_is_positive ( key <S2SV_ModEnd> ) ) zap,1
826,"<S2SV_ModStart> ) -> filter ; memset ( & uf, 0, sizeof ( uf ) )",1
827,"<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( data, <S2SV_ModStart> ( nbi, ( int )",0
828,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> ) ; } exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
829,<S2SV_ModStart> -> peer. auth_capable = new -> peer. auth_capable ; asoc -> peer.,1
830,<S2SV_ModStart> ; } } <S2SV_ModEnd> if ( udev,0
831,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( cc0 <S2SV_ModStart> % rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""PredictorEncodeTile"", ""%s"", ""(cc0%rowsize)!=0"" ) ; return 0 ; } <S2SV_ModEnd> while ( cc",1
832,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
833,"<S2SV_ModStart> input_data, size_t input_backwards_size, size_t input_forwards_size <S2SV_ModEnd>, int flags <S2SV_ModStart>, int max_bytes_matched, size_t max_bytes_matched, size_t input_forwards_size <S2SV_ModEnd> ) { <S2SV_ModStart> ) { max_bytes_size <S2SV_ModEnd> = 0 ; <S2SV_ModStart> >= max_bytes_matched ) { <S2SV_ModEnd> - 1 ; <S2SV_ModStart> >= max_bytes_matched ) { <S2SV_ModStart> >= max_bytes_matched ) { <S2SV_ModEnd> - 1 ; <S2SV_ModStart> ) { max_bytes_matched = RE_SCAN_SCAN_LIMIT ; } <S2SV_ModStart> >= max_bytes_bytes_matched ) { <S2SV_ModEnd> ( ( input_matched, RE_SCAN_LIMIT ) <S2SV_ModStart> RE_SCAN_LIMIT ) ; } <S2SV_ModStart> >= max_bytes_backwards_matched ) { <S2SV_ModEnd> if ( input_size < character_size ) { <S2SV_ModStart> >= max_bytes_size ) { <S2SV_ModEnd> return TRUE ; } <S2SV_ModStart> = TRUE ; }",0
834,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
835,"<S2SV_ModStart> svm, AC_VECTOR ) ; set_intercept ( svm, DB_VECTOR",0
836,<S2SV_ModStart> ; if ( h -> size > INT_MAX ) { error = NULL ; goto error <S2SV_ModEnd> ; } if,0
837,"<S2SV_ModStart> sst, const cdf_directory_t * root_storage <S2SV_ModEnd> ) { cdf_summary_info_header_t <S2SV_ModStart> break ; } if ( root_storage ) { <S2SV_ModStart> = cdf_clsid_to_mime ( root_storage -> d_storage_uuid <S2SV_ModEnd>, clsid2desc ) <S2SV_ModStart> - 2 ; } <S2SV_ModStart>, count, root_storage <S2SV_ModEnd> ) ; free",1
838,<S2SV_ModStart> return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
839,<S2SV_ModStart> -> length ) ; if ( err ) return - EFAULT,1
840,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { const VP9_COMMON * const VP9_COMMON * const vpx_codec_codec_alg_priv_t * const ctx ; vpx_codec_alg_priv_t * const ctx ; <S2SV_ModStart> args = ( vpx_codec_alg_priv_t * ) <S2SV_ModEnd> ; ctx -> <S2SV_ModStart> ctx -> svc. src_idx = ( vpx_codec_alg_priv_t * ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> return VPX_CODEC_INVALID_FACTOR ; if ( <S2SV_ModStart> ( params ) <S2SV_ModEnd> == NULL ) return VPX_CODEC_ERROR ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> == NULL ) <S2SV_ModStart> ) return VPX_CODEC_OK <S2SV_ModEnd> = ctx ->",0
841,<S2SV_ModStart> if ( prev && <S2SV_ModEnd> ( fq -> <S2SV_ModStart> < 0 ) goto discard_fq ; discard_fq ( fq ) ;,0
842,<S2SV_ModStart> { uint16 bitspersample = 1,0
843,"<S2SV_ModStart> { int r ; struct archive_set * s ; <S2SV_ModStart> } if (! a -> p [ 0 ] == '\\0' ) { archive_set_error ( & a -> archive, ""%s"", & a -> archive_set_mode ) ; if ( r == '\\0' ) { archive_set_error ( & a -> p, a -> p, ""%s"", a -> name ) ; return ( EINVAL ) ; } else { archive_set_error ( & a -> p, ""%s"", a -> type == NULL ) ; } else { archive_set_error ( & a -> p, a -> p ) ; } if ( r == '\\0' ) { archive_set_error ( & a -> p, a -> p ) ; if (! a -> p [ i ] == '\\0' ) { archive_set_error ( & a -> p, a -> p, '\\0' ) ; } } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { archive_set_error ( & a -> p <S2SV_ModEnd> ) ; } free",0
844,"<S2SV_ModStart> ; if ( safe_mount ( hostpath, path, 0, MS_BIND, NULL, rootfs -> path? rootfs -> mount : <S2SV_ModEnd> NULL )!=",1
845,<S2SV_ModStart> ; int iinfo -> i_len <S2SV_ModEnd> ; struct bs <S2SV_ModStart> goto out_offset ; if ( i_len < bs ) goto out ; bs = bs ->,0
846,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> block_size ) ; memset <S2SV_ModEnd> ( lfm,0
847,<S2SV_ModStart> dst_size ) { uint32_t data ; <S2SV_ModStart> ; if ( data == 0 ) return - 1 ; <S2SV_ModStart> dst_end - <S2SV_ModEnd> ; } <S2SV_null>,0
848,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_line_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) ; <S2SV_ModStart> t1_buf_array, t1_line_array ) ; alloc_array ( t1_line, strlen ( t1_buf_array ) + 1, T1_BUF_SIZE",1
849,<S2SV_ModStart> fq ) ; kfree ( q ) ;,0
850,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
851,<S2SV_ModStart> NULL ) return NULL ;,0
852,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF <S2SV_ModStart> / 2 ; if (! <S2SV_ModStart>, cc ) ) return 0 <S2SV_ModStart> wc ) ; return 1 ;",1
853,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
854,"<S2SV_ModStart> ; int err ; struct ip_options_rcu * inet_opt ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_opt ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr = inet_opt",0
855,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
856,"<S2SV_ModStart> * mgr_hdl ; <S2SV_ModEnd> memset ( s_path <S2SV_ModStart> ( c_path ) <S2SV_ModEnd> ) ; switch <S2SV_ModStart> ( c_path, ""%s%s%d_C_XXXXXX"" <S2SV_ModEnd>, HSM_FM_SCK_PREFIX, <S2SV_ModStart> hdl -> instance <S2SV_ModEnd> ) ; if",1
857,<S2SV_ModStart> ( uint32_t ) || <S2SV_ModEnd> if ( <S2SV_ModStart> ( pCmdData == NULL || replySize <S2SV_ModStart> ) || replySize > * replySize,0
858,"<S2SV_ModStart> ""`%s\'"", option ) ; page_geometry = DestroyString ( page_geometry",1
859,<S2SV_ModStart> = 0 ; atomic -> opt.,0
860,<S2SV_ModStart> ; if ( key_data == NULL ) goto err ; if (,0
861,"<S2SV_ModStart> OP_ENDCATCH ) ; emit ( J, F, OP_ENDTRY ) ;",1
862,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_row_idx <S2SV_ModStart> return ; } LIBXSMM_ASSERT ( 0!= l_row && 0!= l_column ) ;",1
863,<S2SV_ModStart> ; size_t len ; if ( len < sizeof ( len ) &&,0
864,"<S2SV_ModStart> uint8 result ; struct stream packet ; <S2SV_ModStart> length ) ; packet = * s ; <S2SV_ModStart> ; packet = * s ; if (! s_check_rem ( s, length ) ) return FALSE",0
865,"<S2SV_ModStart> ; cleanup : if ( status == NULL ) status = ""UNKNOWN_REASON"" <S2SV_ModEnd> ; if (",1
866,<S2SV_ModStart> ( l ++ <S2SV_ModEnd> ( l +,0
867,<S2SV_ModStart> ) ; goto out3 <S2SV_ModEnd> ; } if,0
868,<S2SV_ModStart> * rsize >= 18 <S2SV_ModEnd> && rdesc [,1
869,<S2SV_ModStart> & new_map ) <S2SV_ModEnd> ) return,0
870,"<S2SV_ModStart> ; } ; set_msg ( g, 0,",0
871,"<S2SV_ModStart> sr ) { <S2SV_ModEnd> uint16_t StructSize ; <S2SV_ModStart> ) ; } smb_ofile_flush ( sr, <S2SV_ModEnd> sr -> fid_ofile <S2SV_ModStart> sr -> fid_ofile <S2SV_ModEnd> ) ; (",1
872,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> data ) ;,0
873,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
874,"<S2SV_ModStart> addrtype = TIPC_ADDR_ID ; memset ( & addr -> addr, 0, sizeof ( addr -> addr ) )",1
875,<S2SV_ModStart> ( user_alloc && ( <S2SV_ModStart> PAGE_SIZE - 1 ) ) ) goto out ;,0
876,"<S2SV_ModStart> 2 ) ) { MATLAB_KO : clone_info = DestroyImageInfo ( clone_info ) ; <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart> ""ImproperImageHeader"" ) ; }",0
877,<S2SV_ModStart> } if ( tmp_line_len >= 1 && <S2SV_ModStart> ; if ( tmp_line_len >= 1 && <S2SV_ModStart> ; } } \\\n} <S2SV_ModEnd> if ( strncasecmp,1
878,<S2SV_ModStart> * p ; char * p ; <S2SV_ModStart> * p ; <S2SV_ModEnd> if (! <S2SV_ModStart> * p ) { <S2SV_ModStart> return NULL ; } <S2SV_ModStart> ) ) { <S2SV_ModEnd> if (! <S2SV_ModStart> * p ) { <S2SV_ModStart> return NULL ; },0
879,<S2SV_ModStart> { if ( user_sid_offset > ( ( record_data_size - 4 ) - user_offset ) - user_error ) { libcerror_error_error_error_error_error_error ; goto on_error ; } <S2SV_ModStart> { if ( ( record_data_size > ( ( ( record_data_size - 4 ) - data_size - 4 ) - user_offset ) ) ) { libcerror_error_error_error_error ; goto on_error ; } <S2SV_ModStart> = ( ( ( ( record_data_size - data_size - data_size - 4 ) - data_size - data_size - data_size - data_size - user_offset ) ) ) <S2SV_ModStart> ; goto on_error ; } if (,0
880,"<S2SV_ModStart> WaveHeader WaveHeader ; int format_chunk = 0 ; <S2SV_ModStart>, format ; if ( format_chunk ++ ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",1
881,"<S2SV_ModStart> ; uint16_t numChannels = 0 <S2SV_ModStart> numChannels < 1 || numChannels > 256 <S2SV_ModStart> ) ) { if (! config -> num_channels ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
882,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr ) ;,0
883,<S2SV_ModStart> ) ) ; list_del_init ( & timeri -> active_list ) ;,0
884,"<S2SV_ModStart>, char * s <S2SV_ModEnd> ; int ret <S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( strcmp ( cp <S2SV_ModStart> )!= 0 <S2SV_ModEnd> ) { int",0
885,<S2SV_ModStart> else if ( anope_flags_compat && <S2SV_ModStart> else if ( anope_compat &&,0
886,<S2SV_ModStart> -> buffer ; if (! ctx -> gf128 ) return - ENOKEY ;,1
887,"<S2SV_ModStart> ; if ( strcmp ( sub_demuxer -> name, ""srt"" ) && strcmp ( sub_demuxer -> name, ""ass"" ) ) goto error ; if (",1
888,"<S2SV_ModStart> ; int err = 0, GFP_KERNEL <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return 0 ; } if ( retval == 0 ) { size_t res = kbuf ; <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> if (!",0
889,"<S2SV_ModStart> void write_literal ( vpx_write_bit <S2SV_ModEnd> * w, <S2SV_ModStart> w ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> w, vpx_write_literal <S2SV_ModEnd> ( w,",0
890,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; } ret",1
891,<S2SV_ModStart> dptr ++ = ROSE_CALL_REQ_ADDR_LEN_VAL <S2SV_ModEnd> ; memcpy (,1
892,<S2SV_ModStart> = new_ns ; new_ns -> mounts ++ ;,1
893,,0
894,<S2SV_ModStart> ; zip_object_handlers.,0
895,<S2SV_ModStart> case RXE_MEM_TYPE_FMR : if <S2SV_ModEnd> ( mem -> <S2SV_ModStart> mem -> length > mem -> length || length > mem -> length ) return - EFAULT ; return <S2SV_ModEnd> 0 ;,0
896,"<S2SV_ModStart> ( ndo, ""%s"", icmp6_tstr <S2SV_ModEnd> ) ) ;",0
897,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",1
898,<S2SV_ModStart> sent = 0 <S2SV_ModEnd> ; smb_msg.,1
899,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> buffer_pipe_buf_get ( struct <S2SV_ModStart> -> private ; if ( ref -> ref > INT_MAX / 2 ) return false ; <S2SV_ModStart> ref ++ ; return true ;,1
900,<S2SV_ModStart> fs -> clusters + <S2SV_ModEnd> 1 ) get_fat,1
901,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
902,<S2SV_ModStart> sk_nulls_node ) ; sk_nulls_node_init ( & sk -> sk_nulls_node ) ;,1
903,<S2SV_ModStart> } ret ; <S2SV_ModEnd> } else {,0
904,<S2SV_ModStart> (! mm ||! mm -> env_end,1
905,"<S2SV_ModStart> inode * inode, int relocated ) { int flags = relocated? RR_RELOC_DE : 0 ; <S2SV_ModEnd> int result = <S2SV_ModStart>, inode, flags <S2SV_ModEnd> ) ; if <S2SV_ModStart>, inode, flags | RR_REGARD_XA <S2SV_ModEnd> ) ; }",1
906,<S2SV_ModStart> * inotify_new_group ( <S2SV_ModEnd> unsigned int max_events <S2SV_ModStart> -> inotify_data. user = NULL <S2SV_ModEnd> ; group ->,0
907,<S2SV_ModStart> [ p ] && in -> linesize [ p ],1
908,"<S2SV_ModStart>, sizeof ( pcount ) <S2SV_ModEnd> ; } if",0
909,<S2SV_ModStart> NULL ) ; if ( screen -> buffers [ 0 ]!= NULL ),0
910,"<S2SV_ModStart> SCALAR_VALUE ) { coerce_reg_to_size ( & <S2SV_ModStart> [ value_regno ], size <S2SV_ModEnd> ) ; }",1
911,<S2SV_ModStart> ; uint32 nstrips <S2SV_ModEnd> ; int strip,0
912,<S2SV_ModStart> base_name ) ; char need_to_append_dot ; struct search_domain * dom ; if (! base_len ) return NULL ; <S2SV_ModEnd> need_to_append_dot = base_name <S2SV_ModStart> : 1 ; <S2SV_ModEnd> for ( dom,1
913,<S2SV_ModStart> ; err = 0 <S2SV_ModEnd> ; } while,0
914,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; memset (,0
915,"<S2SV_ModStart> number_colormaps, number_planes, number_planes_filled <S2SV_ModStart> -> rows ; number_planes_filled = ( number_planes % 2 == 0 ) <S2SV_ModStart> -> rows * number_planes_filled <S2SV_ModEnd> ; pixel =",0
916,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> UINT32 originalSize ; if (! context ) return FALSE ; <S2SV_ModStart> == 0 ) { if (! context -> PlaneBuffersLength > context -> PlaneBuffersLength ) return FALSE ; <S2SV_ModStart> 0xFF ) ; } <S2SV_ModStart> < originalSize ) { if ( context -> PlaneBuffersLength < originalSize ) return FALSE ; <S2SV_ModEnd> } else {,0
917,<S2SV_ModStart> policy ) { if (! inode_owner_or_capable ( inode ) ) return - EACCES ;,1
918,<S2SV_ModStart> ( value ) ; i++ ;,0
919,<S2SV_ModStart>. cmp = false <S2SV_ModEnd> ; if (,0
920,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) -> iif ) ; * addr_len = sizeof ( * sin6,1
921,"<S2SV_ModStart> ) ) { applog ( LOG_WARNING, ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> failed.\\n"", header ) ; pool_failed ( pool ) ; return false ; } <S2SV_ModEnd> cb1 = (",0
922,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
923,"<S2SV_ModStart> size ) { size_t res ; if ( check_mul_overflow ( num, size, & res ) ) abort ( ) ;",0
924,<S2SV_ModStart> ; ioc -> io_context <S2SV_ModEnd> ; task =,0
925,"<S2SV_ModStart> * obj ; size_t res ; <S2SV_ModStart> return NULL ; } if ( Py_SetString ( PyId__, & PyId__ ) < 0 ) { Py_TypeError ; return NULL ; } else { Py_TypeError ; } <S2SV_ModEnd> if ( Py_None ) { <S2SV_ModStart> ) ; } <S2SV_ModEnd> return Py_TypeError ; }",0
926,<S2SV_ModStart> * desc ; if ( desc -> desc. bLength < ENOMEM ) return - EINVAL ;,0
927,"<S2SV_ModStart> int ret ; struct perf_event_event_context * ctx = perf_event_event_event_event <S2SV_ModEnd> ; break ; <S2SV_ModStart> case perf_event_event_event : perf_event_enable ( event, <S2SV_ModEnd> ) ; return",0
928,<S2SV_ModStart> sacked_out ) ; if ( newly_acked_sacked <= 0 || WARN_ON_ONCE (! tp -> prior_cwnd ) ) return ;,1
929,<S2SV_ModStart> <S2SV_,0
930,<S2SV_ModStart> <S2SV_null> <S2SV_null> struct skcipher_key <S2SV_ModEnd> ; struct,0
931,<S2SV_ModStart> ; return - 1 <S2SV_ModEnd> ; } if (,0
932,"<S2SV_ModStart> c -> tile_width <S2SV_ModEnd>, 16 ) <S2SV_ModStart>, 16 ) * 3",1
933,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
934,,1
935,"<S2SV_ModStart> ( s, <S2SV_ModEnd> len > 0",0
936,"<S2SV_ModStart> p ) { return <S2SV_ModEnd> chdlc_print ( ndo <S2SV_ModStart>, p, h -> len <S2SV_ModEnd> ) ; }",1
937,<S2SV_ModStart> (! rc <S2SV_ModEnd> && tcon ),1
938,<S2SV_ModStart> ; if ( skb_is_err_queue ( skb ) &&,0
939,"<S2SV_ModStart> ) ) ; raptor_sax2_set_option ( rdf_parser -> sax2, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES, NULL, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES ) ;",0
940,<S2SV_ModStart> { if (! SSL_F_UNEXPECTED_MESSAGE ) { s -> s3 -> tmp. new_cipher = NULL ; goto f_err ; },0
941,<S2SV_ModStart> { return SECURE_ELEMENT_ERROR_SIZE <S2SV_ModEnd> ; } if,0
942,<S2SV_ModStart>,0
943,<S2SV_ModStart> = ucounts ; new_ns -> mounts = 0 ; new_ns -> pending_mounts = 0 ;,1
944,"<S2SV_ModStart> += dif ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
945,<S2SV_ModStart> ) return - 1,0
946,<S2SV_ModStart>,0
947,<S2SV_ModStart> ; int wait_count = 0,0
948,"<S2SV_ModStart> struct llc_pktinfo info ; memset ( & info, 0, sizeof ( info ) )",1
949,"<S2SV_ModStart> void update ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * b, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> ) { const vpx_write_bit_tree <S2SV_ModEnd> * w, <S2SV_ModStart> ) } vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) ; vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> = b ; vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ; vpx_write_bit <S2SV_ModEnd> ( w,",0
950,"<S2SV_ModStart> cpi, struct vpx_write_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_write_buffer <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_write_buffer <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_buffer <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_write_bit <S2SV_ModEnd> ( wb,",0
951,<S2SV_ModStart> * dev ; if (! dev ) return - EINVAL ;,0
952,"<S2SV_ModStart> ret, n ; int num_descriptors ; size_t offset = min_descriptor -> bLength",0
953,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> uint32_t id ; <S2SV_ModStart> id_len ; const u_int id_len ; ND_TCHECK ( id_16BITS ( ext ) <S2SV_ModEnd> ) ; ND_TCHECK,0
954,<S2SV_ModStart> ) exit_io_context ( tsk,0
955,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void * <S2SV_ModStart> data ) { <S2SV_ModEnd> add_object ( name <S2SV_ModStart> |= OBJECT_ADDED ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
956,<S2SV_ModStart> ( cmpt = 0,0
957,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
958,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
959,<S2SV_ModStart> ( tag == ASN1_EOC <S2SV_ModEnd> ) { if <S2SV_ModStart> > sizeof ( len <S2SV_ModEnd> ) ) goto data_overrun_error ; <S2SV_ModStart> goto data_error ; len = 0 ; len ;,0
960,<S2SV_ModStart> ) val ; <S2SV_ModEnd> memset ( ptr,1
961,<S2SV_ModStart> mnt_mnt ) { if ( mnt -> mnt. mnt. mnt_root ) { return - EPERM ; },0
962,<S2SV_ModStart> php,0
963,<S2SV_ModStart> ] <= max && value [ n ] - min < field -> maxusage <S2SV_ModStart> && field -> value [ n ] - min < field -> maxusage && field -> <S2SV_ModStart> <= max && value [ n ] - min < field -> maxusage &&,1
964,"<S2SV_ModStart> wb, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> 16 ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
965,<S2SV_ModStart> if ( argReg > <S2SV_ModEnd> regsz ) { <S2SV_ModStart> regsz ) { return ;,1
966,"<S2SV_ModStart> ( req, false, false",0
967,"<S2SV_ModStart> 0 ) ; args -> rmtvaluelen <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> -> i_mount, args -> rmtvaluelen <S2SV_ModEnd> ) ; if <S2SV_ModStart> -> valuelen = args -> rmtvaluelen <S2SV_ModEnd> ; return 0 <S2SV_ModStart> -> valuelen < args -> rmtvaluelen ) { args -> valuelen = args -> rmtvaluelen <S2SV_ModEnd> ; return XFS_ERROR <S2SV_ModStart> -> valuelen = args -> rmtvaluelen <S2SV_ModEnd> ; } return",1
968,<S2SV_ModStart> ; size_t size <S2SV_ModEnd> ; if (,0
969,<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> sta_size = 0,0
970,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) &&! test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) &&",1
971,"<S2SV_ModStart> ) ) ; if ( ltxtquery == NULL ) ereport ( ERROR, ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""ltxtquery <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large"" ) ) ) ;",0
972,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
973,<S2SV_ModStart> ; if (! EXT4_SB ( inode -> i_sb ) -> s_journal <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd>! handle ),1
974,"<S2SV_ModStart> ( str, ""%s"" <S2SV_ModEnd> ) { char <S2SV_ModStart> ( str, len <S2SV_ModEnd> ) ; }",0
975,,0
976,<S2SV_ModStart> ( size < 1 <S2SV_ModEnd> ) ASSERT ( <S2SV_ModStart> ) ; },0
977,<S2SV_ModStart> ) ; return <S2SV_ModEnd> ; if (,0
978,"<S2SV_ModStart> len ) { if ( len < 0 ) { <S2SV_ModStart> ( str, ""str"", len <S2SV_ModEnd> ( str, <S2SV_ModStart> ) ; } strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> len ) ; }",0
979,"<S2SV_ModStart> char * pre = g. inf, * sufx = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> g. hname ) { if ( <S2SV_ModEnd> ( g. <S2SV_ModStart> g. hname ) { if ( g. inf ) sufx = g. hname ( <S2SV_ModEnd> g. hname <S2SV_ModStart> g. hname ) sufx ; } else if ( <S2SV_ModEnd> ( g.",0
980,,1
981,<S2SV_ModStart> * output ; MagickBooleanType status ; <S2SV_ModStart> ) ; } status = MagickFalse ; <S2SV_ModStart> i ++ ) { <S2SV_ModEnd> input = fopen_utf8 <S2SV_ModStart> output ) ) { <S2SV_ModEnd> output ) ; <S2SV_ModStart> ( void ) fclose ( <S2SV_ModEnd> output ) ; <S2SV_ModStart> ( void ) fclose ( <S2SV_ModEnd> output ) ; <S2SV_ModStart> ( void ) fclose ( void ) ;,0
982,<S2SV_ModStart> si ) { SvcInternal_t <S2SV_ModEnd> * const si,0
983,<S2SV_ModStart> sb ) ; if ( sb ) return err ;,0
984,"<S2SV_ModStart> passwd * pwd, const char * prefix <S2SV_ModStart> = NULL ; <S2SV_ModEnd> pw_init ( ) <S2SV_ModStart> & tmpname, ""/etc"", prefix <S2SV_ModEnd> ) ) ==",1
985,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
986,<S2SV_ModStart> s1 ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
987,<S2SV_ModStart> TRUE ; } Jid * my_jid = jid_create ( stanza_get_jid ( ) ) ; const stanza_create ( stanza_from ) ; Jid * msg_create ( stanza ) ; Jid * msg_jid = jid_create ( stanza_from ) ; if ( jid_create ( stanza_from )!= 0 ) { jid_create ( stanza_from ( stanza_get_from ) ; return TRUE ; },0
988,<S2SV_ModStart> ( s -> dat. ds_mode <S2SV_ModEnd> ) ; if,0
989,<S2SV_ModStart> * dev ; if (! dev ) return - EINVAL ;,0
990,"<S2SV_ModStart> ( argv, <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( arg1, NULL <S2SV_ModEnd> ) ; }",0
991,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; BT_DBG (,1
992,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
993,<S2SV_ModStart> ) ) { st -> st_etm = 0 ; <S2SV_ModStart> ) ) ; } <S2SV_ModEnd> ( s ->,0
994,,0
995,<S2SV_ModStart> * zone ; size_t tilemap_size ; <S2SV_ModStart>. height ; tilemap_size = <S2SV_ModEnd> x_tilemap_size,0
996,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_printroute ( netdissect_options <S2SV_ModStart> ) ; return ( 0 ) <S2SV_ModStart> ) ) { ND_TCHECK ( cp [ 2 ] <S2SV_ModStart> ) ; } return ( 0 ) ; trunc : return ( 0 ) ;,0
997,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> char *,0
998,"<S2SV_ModStart> ( ctx, 0 <S2SV_ModEnd> ) ; }",0
999,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> ) ) == L_BUFSIZE <S2SV_ModEnd> ( buf, <S2SV_ModStart> ) ) { L_BUFSIZE <S2SV_ModEnd> + 1,",0
1000,<S2SV_ModStart> if ( chunk_num >= <S2SV_ModEnd> chm -> num_chunks,1
1001,"<S2SV_ModStart>! validate_event ( event -> pmu, <S2SV_ModStart>! validate_event ( event -> pmu, <S2SV_ModStart>! validate_event ( event -> pmu,",1
1002,<S2SV_ModStart> 1 ; } if ( args [ 0 ] == NULL ) return ; <S2SV_ModStart> 1 ; } },0
1003,<S2SV_ModStart> studio_profile ) { <S2SV_ModEnd> if (!,1
1004,<S2SV_ModStart> nsops < 1 || nsops > SEMOPM,1
1005,<S2SV_ModStart> ; i = 2 <S2SV_ModEnd> ( i +,0
1006,<S2SV_ModStart> < INDIRECT_BLOCKS ) { <S2SV_ModStart> ] ) ; },1
1007,<S2SV_ModStart> break ; } if ( i -> width > 7 ) { # if ( i -> log ) { # endif i = i ; break ; } if ( i -> parent -> log ) { # ifdef HAVE_FILE | NGIFLIB_FILE ) { # endif i = i -> log ; break ; },0
1008,<S2SV_ModStart> if ( q < p || q,0
1009,<S2SV_ModStart> ++ ) { <S2SV_ModEnd> if ( bytes_matched,0
1010,"<S2SV_ModStart> len ) { memset <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""ID"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_REGEX : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""ID"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_REGEX : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""ID"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_LITERAL : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> STRING"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_REGEX : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""ID"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_REGEX : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""REGEX"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_REGEX : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""REGEX"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_REGEX : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""REGEX"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_REGEX : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""REGEX"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_REGEX : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""REGEX"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_REGEX : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""REGEX"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_REGEX : strcpy <S2SV_ModEnd> ( str,",0
1011,"<S2SV_ModStart> mnt_instance ) ; if ( unlikely (! list_empty ( & mnt -> mnt_mounts ) ) ) { struct mount * p, * tmp ; list_for_each_entry_safe ( p, tmp, & mnt -> mnt_mounts, mnt_child ) { umount_mnt ( p ) ; } }",1
1012,"<S2SV_ModStart> w, vpx_write_bit_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> w ) { vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> } else { vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> w ) ; vpx_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ; } vpx_write_bit <S2SV_ModEnd> ( w,",0
1013,,1
1014,<S2SV_ModStart> goto not_found ; if ( e - p > HOST_NAME_MAX - p ) goto not_found ;,0
1015,<S2SV_ModStart> ; int err <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> uint32_t pos ; if ( inode -> i_size > inode -> i_size ) { err = - EIO ; goto out_unlock_inode ; } <S2SV_ModStart> if ( bh ) { err = - EIO ; goto out_unlock_inode ; } <S2SV_ModStart> if ( bh ) goto out_unlock_inode <S2SV_ModEnd> ; out_unlock_inode,0
1016,<S2SV_ModStart> else if ( cpu_has_secondary_secondary_ctrls ( ) <S2SV_ModEnd> ) { if,0
1017,<S2SV_ModStart> if ( ent == NULL ) { st = KRB5_S2SV_null>,0
1018,<S2SV_ModStart> 1 ) ; if ( ( value!= ps_codec -> i4_cur_slice_flag ) { return IHEVCD_ERROR ; },0
1019,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> unsigned int <S2SV_ModStart> int nblocks ; int len ; size_t <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> = 0 ; size_t dblk_blocks = sizeof ( inode ) ; if ( unlikely ( inode ) ) return 0 ;,0
1020,<S2SV_ModStart> 0 ) { if ( psf -> header. len == 0 ) break ;,0
1021,<S2SV_ModStart> ; if ( d -> msg_len > sizeof ( d -> msg ) ) return - EINVAL ; if ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( i,1
1022,"<S2SV_ModStart> break ; } memset ( & cinfo, 0, sizeof ( cinfo ) ) ;",1
1023,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
1024,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; return",0
1025,"<S2SV_ModStart> int num_items_scanned ; int pkt_len, <S2SV_ModEnd> pktnum, hr <S2SV_ModStart> + 64, ""LEN=%9u"" <S2SV_ModEnd>, & hdr",0
1026,<S2SV_ModStart> ; int err = 0 ; msg -> msg_namelen,1
1027,"<S2SV_ModStart> ; if ( zend_hash_find <S2SV_ModEnd> ( ht,",1
1028,<S2SV_ModStart> - EINVAL ; memcpy <S2SV_ModEnd> ( link [,0
1029,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> break ;,0
1030,"<S2SV_ModStart> 1 ) ; if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf = opipe",0
1031,<S2SV_ModStart> p -> tokenpos >= ( <S2SV_ModEnd> p -> tokenlen <S2SV_ModStart> p -> tokenlen - 1 ),1
1032,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1033,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
1034,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> & 0xFFFF ; },1
1035,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
1036,<S2SV_ModStart> ( status == NULL <S2SV_ModEnd> ) { ret =,0
1037,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
1038,"<S2SV_ModStart> -> stratum_port ; snprintf ( address, 254 <S2SV_ModEnd>, ""%s:%s"",",1
1039,<S2SV_ModStart> = page ; if (! page_is_good ( page ) ) { return 0 ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( page_name <S2SV_ModStart> ) ) { return false ; },0
1040,<S2SV_ModStart> + i ; unsigned int actual_size = f -> begin < actual_size? r -> begin : actual_size ; unsigned int limit_r_end = r -> begin < actual_size? r -> end : actual_size ; unsigned int limit_end = r -> end < actual_size? r -> end : actual_size ; <S2SV_ModStart> int n_read = limit_r_begin <S2SV_ModEnd> ; int n_read,0
1041,<S2SV_ModStart> head -> iov_base ; if ( hdr > head -> iov_len ) return 0,1
1042,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> cl_nodes_lock ) ; o2nm_unlock_subsystem ( ) ;,1
1043,<S2SV_ModStart> frame -> vlock ) { <S2SV_ModEnd> if ( input <S2SV_ModStart> ) ) ; return ; },0
1044,<S2SV_ModStart> size ) { size_t res ;,0
1045,<S2SV_ModStart> ; ssize_t count ; if ( bytes == 0 || items == 0 ) return 0,1
1046,<S2SV_ModStart> -> serviceId = EXTRACT_16BITS,0
1047,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = key_read,0
1048,"<S2SV_ModStart> ( dev, sizeof ( dev_info ) ) ;",0
1049,,0
1050,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1051,<S2SV_ModStart> 0 ) ; hrtimer_try_to_cancel <S2SV_ModEnd> ( & stime,1
1052,<S2SV_ModStart> ONIG_INFINITE_DISTANCE ) {,0
1053,"<S2SV_ModStart> ) { struct l2cap_mode_t req ; struct l2cap_req_req req ; memset ( & req, 0, sizeof ( req ) ) ; <S2SV_ModStart> ; if ( pi -> mode == L2CAP_MAX_MIN_RSP ) return - EIO_ON ( pi -> dcid, sizeof ( req ), & req -> dcid ) ; req. mode = cpu_to_bit ( req, sizeof ( req -> dcid ), sizeof ( req ), & req -> dcid ) ; req. mode = cpu_to_bit ( req, sizeof ( req ) )",0
1054,"<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_WAIT ) )",0
1055,<S2SV_ModStart> -> chunksize = UINT64_MAX <S2SV_ModEnd> ; for (,1
1056,,0
1057,<S2SV_ModStart> ( buf ) { sclone ( buf ) ; },0
1058,<S2SV_ModStart> } err = crypto_rng_alg ( tfm ) <S2SV_ModEnd> -> seed (,1
1059,<S2SV_ModStart> = uid ; <S2SV_ModEnd> new -> count <S2SV_ModStart> new -> count = 0 <S2SV_ModEnd> ; spin_lock_irq ( <S2SV_ModStart> } if ( <S2SV_ModEnd> ucounts -> count <S2SV_ModStart> ucounts -> count == INT_MAX ) ucounts = NULL ; else ucounts -> count += 1 <S2SV_ModEnd> ; spin_unlock_irq (,1
1060,<S2SV_ModStart> ) ; } if ( err == 0 ) goto out_put ; if ( sock -> file ) goto out_put ;,0
1061,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1062,<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline <S2SV_ModStart> = 0 ; len - i += 16 ; },0
1063,<S2SV_ModStart> ; if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) ) <S2SV_ModEnd> { if ( <S2SV_ModStart> ) ; } if ( ext4_should_dioread_nolock ( inode ) ) set_buffer_uninit ( bh_result ) ;,1
1064,"<S2SV_ModStart> * delegid, fmode_t fmode <S2SV_ModEnd> ) { int <S2SV_ModStart>, fmode_t fmode <S2SV_ModEnd> ) { u32 <S2SV_ModStart>, open_state, fmode <S2SV_ModEnd> ) ; if",0
1065,"<S2SV_ModStart> Memory ( global_colormap, 0",0
1066,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
1067,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1068,<S2SV_ModStart> int sse_d ; const tran_low_t * const tran_low_t <S2SV_ModEnd> * const tran_low_t <S2SV_ModStart> sse ) { const tran_low_t * sse ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( sse_high_y!= ( sse ) ) { xd -> dequant [ 0 ] ; # endif <S2SV_ModStart> = 0 ; # if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( sse_HIGHBITDEPTH ) -> dequant [ 1 ] == 0 && cpi -> dequant. src. src. src. src. src. src. src. src. src. src. src. stride [ 0 ]. src. stride ]. stride [ 0 ] -> dequant [ 1 ]. stride ]. src. stride ]. src. src. src. src. stride ]. src. src_size = cpi -> dequant ; const int64_t * ( xd -> dequant [ 0 ]. src. src. src. stride ]. stride ]. stride [ 0 ]. src. src. src. src. src. src. src. stride ]. stride ] ; const int64_t,0
1069,<S2SV_ModStart> } if ( pmd_none_or_bad <S2SV_ModEnd> ( pmd ),0
1070,"<S2SV_ModStart> ; if ( snpal == 6 ) ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> SNPA <S2SV_blank> (length: <S2SV_blank> %s"", snpa ) ) ; else ND_PRINT ( ndo, ""\\n\\t <S2SV_blank> SNPA <S2SV_ModEnd> ) <S2SV_blank> (length: <S2SV_blank> %u)""",0
1071,"<S2SV_ModStart> ( * ptr, p_name <S2SV_ModEnd> ) ; } ptr",0
1072,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> int segment_id ; return vpx_read <S2SV_ModEnd> ( r,",0
1073,<S2SV_ModStart> ; uint32_t backup_handle = 0 <S2SV_ModStart> ret == 0 ) { if ( <S2SV_ModEnd> res -> backup <S2SV_ModStart> goto out_unlock ; } else { backup_handle = req -> buffer_handle ; },1
1074,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool get_desc ( <S2SV_ModStart> struct * out, <S2SV_ModEnd> struct desc_struct * out, <S2SV_ModEnd> unsigned char * out <S2SV_ModStart> size ) { * out = false <S2SV_ModEnd> ; struct ldt_struct <S2SV_ModStart> size ) { * out = <S2SV_ModEnd> ( struct ldt_desc <S2SV_ModStart> size ) ; return false ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1075,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr1 +",0
1076,,0
1077,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1078,"<S2SV_ModStart> char * buf, * buf2 <S2SV_ModEnd> ) ; if",0
1079,<S2SV_ModStart> -> priv_timeout ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1080,<S2SV_ModStart> >= 0 && <S2SV_ModEnd> ND_TTEST ( * <S2SV_ModStart> < ie && <S2SV_ModEnd> ND_TTEST ( *,1
1081,"<S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_TX_SIZE <S2SV_ModEnd> ) ; data += <S2SV_ModStart> ( interface, KSZ8851_TX_SIZE <S2SV_ModEnd> ) ; ksz8851_t <S2SV_ModStart> ( interface, Ksz, KSZ8851_TX_SIZE",0
1082,"<S2SV_ModStart> NULL ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
1083,"<S2SV_ModStart> goto all_leaves_cluster_together ; pr_devel ( ""present <S2SV_blank> leaves <S2SV_blank> leaf\\n"" ) <S2SV_ModEnd> ; } pr_devel",0
1084,<S2SV_ModStart>. udpport = 0 <S2SV_ModEnd> ; settings.,1
1085,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } #,0
1086,"<S2SV_ModStart> x3 ) { tran_low_t x3 = 0 ; tran_low_t <S2SV_ModEnd> ( x1, <S2SV_ModStart> x0 ) ; tran_high_t <S2SV_ModEnd> x0, x1 <S2SV_ModStart> ; x3 = 0x7 <S2SV_ModEnd> ( x3, <S2SV_ModStart> x00 ) ; x3 = x3 -> x3 ; x3 <S2SV_ModEnd> x0, x3 <S2SV_ModStart> x7 ) { x3 = 0 ; }",0
1087,<S2SV_ModStart> clips_ptr ) { if ( num_clips > DRM_MODE_CLIPS ) { ret = - EINVAL ; goto out_err1 ; },0
1088,<S2SV_ModStart> ) ) return 0,0
1089,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1090,"<S2SV_ModStart> 0 ) ; int minsz = R_MAX ( len, size ) ; minsz = R_MAX ( minsz, 0 ) ; <S2SV_ModStart> ; j < minsz <S2SV_ModEnd> ; j ++ <S2SV_ModStart> ; j < minsz <S2SV_ModEnd> ; j ++",0
1091,"<S2SV_ModStart> char outbuf [ 1 ] ; const char * outbuf [ height <S2SV_ModEnd> ] ; int <S2SV_ModStart> ) ; return <S2SV_ModStart> 0 ] ; } printf ( ""%s: <S2SV_blank> %s\\n"", out_size, out_size <S2SV_ModEnd>, inbuf -> <S2SV_ModStart> ) ; return ( <S2SV_ModEnd> ] ; }",0
1092,"<S2SV_ModStart> + JQS_wTail ; head, tail, tail, size ; size_t <S2SV_ModEnd> = size ; <S2SV_ModStart> + JQS_wTail ) ; tail = kmalloc ( chip -> DSPQ + JQS_wTail ) ; if ( head > size || head > size || head > size ) goto out ; out ; out : kfree ( chip -> DSPQData ) ; } out :",0
1093,<S2SV_ModStart> * opcode_desc ; if ( len < 2 ) { return NULL ; },1
1094,<S2SV_ModStart> * kvm ; <S2SV_ModEnd> ACPI_OBJECT * next ; <S2SV_ModStart> ) ; } spin_unlock_unlock ( & next ) ;,0
1095,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
1096,<S2SV_ModStart> [ sizeof ( the_url <S2SV_ModEnd> ) - 1,0
1097,"<S2SV_ModStart> i, i < 0",0
1098,<S2SV_ModStart>. cmp = false <S2SV_ModEnd> ; if (,0
1099,<S2SV_ModStart> vpx_codec_alg_priv_t * ctx ; vpx_codec_alg_priv_t * priv = ( vpx_codec_alg_priv_t * ) priv <S2SV_ModEnd> ; if ( <S2SV_ModStart> NULL_priv ) { priv <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return VPX_CODEC_ERROR <S2SV_ModEnd> ; priv -> <S2SV_ModStart> -> cfg ; priv -> enc_cfg. sz = ( priv -> cfg. cfg. cfg. cfg. cfg. cfg ; priv -> decrypt_cfg. cfg = 0 <S2SV_ModEnd> ; ctx ->,0
1100,"<S2SV_ModStart> error ) { if ( <S2SV_ModEnd> xfs_da_shrink_inode ( args <S2SV_ModStart>, bp )!= 0 ) <S2SV_ModEnd> ) goto out",0
1101,<S2SV_ModStart> } if ( c -> fc ->,0
1102,<S2SV_ModStart> timeri -> timer_lock ) ; spin_lock ( & timer -> timeri -> timer ) ; <S2SV_ModStart> slave_active_head ) ; spin_unlock ( & timeri -> lock ) ;,0
1103,<S2SV_ModStart> return err ; if (! <S2SV_ModEnd> attrs [ <S2SV_ModStart> attrs [ EINVAL ] ) return err ; if (!,0
1104,<S2SV_ModStart> > 0 ) { memset <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> ; } memset <S2SV_ModEnd> ( ctx ->,0
1105,<S2SV_ModStart> = v ; if (! IS_ERR ( vma ) ),1
1106,<S2SV_ModStart> ) buffer ; if ( total_len < <S2SV_ModEnd> cap -> bLength,0
1107,<S2SV_ModStart> task = current <S2SV_ModEnd> ; if (,1
1108,<S2SV_ModStart> ( iinfo -> i_lenEAttr > bs || iinfo ->,0
1109,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, data ) <S2SV_ModStart> ( interface, ENC28J60_MISTAT_BUSY <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) ; enc28j60ReadReg ( interface, ENC28J60_MISTAT_BUSY <S2SV_ModEnd>, data ) <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) ; enc28J60ReadReg ( interface, ENC28J60_MIRDL <S2SV_ModEnd> ) ; }",0
1110,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char *,0
1111,<S2SV_ModStart> ) ; } rcu_dereference ( <S2SV_ModEnd> sk ) ;,0
1112,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
1113,<S2SV_ModStart>! saw_digit ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart>!= '\\r' ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart>!= '\\n' ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart> ; trunc : * endp = bp ; <S2SV_ModStart> ; invalid : * endp = bp ;,1
1114,<S2SV_ModStart> ; args -> rmtvaluelen = args -> rmtvaluelen ; args ->,0
1115,,0
1116,<S2SV_ModStart> object_length > 0 <S2SV_ModEnd> ) { r,0
1117,"<S2SV_ModStart>, j ) int vdaux = verdef -> vd_aux ; if ( vdaux < 1 ) { sdb_free ( sdb_verdef ) ; goto out_error ; } vstart += vdaux <S2SV_ModEnd> ; if (",0
1118,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
1119,<S2SV_ModStart> u8 label_len ; <S2SV_ModEnd> GET8 ( label_len <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ;,1
1120,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpAcc ( TIFF <S2SV_ModStart> cc ) ; if <S2SV_ModEnd> ( cc & cc <S2SV_ModStart> stride ) )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""fpAcc"", ""%s"", ""(cc%(bps*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> tmp ) return 1 ;",0
1121,"<S2SV_ModStart> -> vm_ops ) <S2SV_ModEnd> return do_fault ( <S2SV_ModStart>, pte, pmd, flags, pmd, <S2SV_ModEnd> flags, flags",0
1122,"<S2SV_ModStart> s ) { size_t len = strlen ( s ) + 1 ; <S2SV_ModStart> = pool_alloc ( len ) ; memcpy <S2SV_ModEnd> ( r, <S2SV_ModStart> r, s, len",1
1123,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1124,"<S2SV_ModStart>! new_idmap_permitted ( file,",1
1125,,0
1126,<S2SV_ModStart> p_pic ) ; <S2SV_ModEnd> } <S2SV_null>,0
1127,,0
1128,<S2SV_ModStart> 0 ) { if ( len < ( u_int ) advance ) return ; <S2SV_ModStart> ip6 ) ; if ( advance < 0 ) return ;,0
1129,<S2SV_ModStart> ; if ( ( n + 4 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ) ) ; n },0
1130,<S2SV_ModStart> ( iinfo -> i_lenEAttr > bs || iinfo ->,0
1131,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
1132,<S2SV_ModStart> x -> stride [ 0 ],0
1133,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_buf_array ) + strlen ( t1_buf_buf_array ) + 1, T1_BUF_SIZE",0
1134,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ctx, <S2SV_ModEnd>, ctx ->",0
1135,"<S2SV_ModStart> ctxt ) ; if (! ( efer & EFER_SCE ) ) return emulate_ud ( ctxt ) ; <S2SV_ModStart>, & efer & <S2SV_ModEnd> ) ) ; if",0
1136,,0
1137,"<S2SV_ModStart> ), type_comment, true",0
1138,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
1139,<S2SV_ModStart> = 0 ; if ( sz == 0 ),0
1140,"<S2SV_ModStart> ret, ret",0
1141,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
1142,<S2SV_ModStart> -> dst_dev ; unsigned int ret <S2SV_ModStart> -> src_dev ) { <S2SV_ModEnd> if (! <S2SV_ModStart> -> dst_dev ) { xop = xop -> src_dev ; },0
1143,"<S2SV_ModStart> ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_RECVHOPLIMIT."" ) ; err = - EINVAL ; goto close_sock ; } ret = 1 ; ret = setsockopt ( sock, IPPROTO_IPV6, IPV6_RECVHOPLIMIT, & val, sizeof ( val ) ) ; if ( ret == - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_RECVHOPLIMIT,.""",0
1144,<S2SV_ModStart> new_bh ) { <S2SV_ModEnd> struct ext2_bh <S2SV_ModStart> ) ; } struct mb2_cache_cache <S2SV_ModEnd> * ext2_bh = <S2SV_ModStart> new_bh ) ; mb2_cache_insert_bh ( new_bh -> b_bh ) ; memset ( new_bh -> b_bh ) ;,0
1145,"<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp. <S2SV_ModStart>. type, ""compression"", sizeof ( rcomp. type ) <S2SV_ModEnd> ) ; if",1
1146,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ( ctx -> <S2SV_ModEnd> va_list args )",0
1147,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( rc ) return rc ; inode -> i_ctime = NULL ;",0
1148,"<S2SV_ModStart> ; if ( ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
1149,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
1150,<S2SV_ModStart> 3 * len + 8,1
1151,<S2SV_ModStart> SUCCESS ) { if ( Z_TYPE_PP ( var )!= IS_LONG ) { zval lval ; lval = * * var ; zval_copy_ctor ( & lval <S2SV_ModEnd> ) ; convert_to_long <S2SV_ModStart> ; convert_to_long ( & lval <S2SV_ModEnd> ) ; points <S2SV_ModStart>. x = Z_LVAL ( lval ) ; } else { points [ i ]. x = <S2SV_ModStart> ) ; } },0
1152,<S2SV_ModStart> ; sig_none = <S2SV_ModEnd> timr -> it_sigev_notify <S2SV_ModStart> timr -> it_sigev_notify <S2SV_ModEnd> == SIGEV_NONE ;,1
1153,<S2SV_ModStart> ; if ( imbuf == NULL ),0
1154,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_buf_array ) + strlen ( t1_buf_buf_array ) + 1, T1_BUF_SIZE",0
1155,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; ( void ) ctx ;",0
1156,"<S2SV_ModStart>. path ; return Curl_urldecode <S2SV_ModEnd> ( data, <S2SV_ModStart>, 0, & <S2SV_ModEnd> pop3c -> mailbox <S2SV_ModStart> pop3c -> mailbox, NULL, TRUE ) <S2SV_ModEnd> ; } <S2SV_null>",1
1157,<S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ; <S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ;,1
1158,<S2SV_ModStart> g -> get_pic_flag <S2SV_ModEnd> ) ; if,0
1159,<S2SV_ModStart> } ret ; <S2SV_ModEnd> } else {,0
1160,<S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( ps_dec,0
1161,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
1162,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
1163,<S2SV_ModStart>,0
1164,<S2SV_ModStart> -> mmap_legacy_base = TASK_UNMAPPED_BASE + random_factor <S2SV_ModEnd> ; if (,1
1165,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 8 ) ; <S2SV_ModEnd> src += src_stride",1
1166,"<S2SV_ModStart> return getnum ( <S2SV_ModEnd> fmt, 1 <S2SV_ModStart> = getnum ( <S2SV_ModEnd> fmt, sizeof",1
1167,<S2SV_ModStart> ( row + row + <S2SV_ModEnd> row + <S2SV_ModStart> ; offset = ( size_t ),0
1168,"<S2SV_ModStart> ; for ( <S2SV_ModEnd> ch, 0",0
1169,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1170,<S2SV_ModStart> ( upid == INT_MIN ) return - ESRCH ; if ( upid ==,1
1171,"<S2SV_ModStart> siocb -> scm, false",1
1172,<S2SV_ModStart> ( ( 1 ) ) {,0
1173,"<S2SV_ModStart>, plane ) * ( ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH )? 2 : 1 )",0
1174,<S2SV_ModStart> ; uint16_t * attr_len <S2SV_ModEnd> ; uint16_t <S2SV_ModStart> ; uint16_t attr_len <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto out_len <S2SV_ModEnd> ; if ( <S2SV_ModStart> 1 ) ; } if ( len < 4 ) { log_err_err_error = - EINVAL ; },0
1175,"<S2SV_ModStart> -> private ; struct dm_dev * dev = lc -> dev ; int r = 0 ; if <S2SV_ModEnd> ( lc -> <S2SV_ModStart> ( lc -> start || ti -> len!= i_size_read ( dev -> bdev -> bd_inode ) >> SECTOR_SHIFT ) r = scsi_verify_blk_ioctl ( NULL, cmd ) ; return r? : __blkdev_driver_ioctl ( <S2SV_ModStart> -> bdev, <S2SV_ModEnd> dev -> mode",1
1176,<S2SV_ModStart> ; if ( actx -> alg_size < 0 ) return 0,0
1177,<S2SV_ModStart> ; if ( <S2SV_ModEnd> name ) {,0
1178,"<S2SV_ModStart> size, size <S2SV_ModEnd> ) ; if",0
1179,<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ;,1
1180,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1181,"<S2SV_ModStart> = 0 ; memset ( sa, 0, sizeof ( struct sockaddr_rc ) ) ;",0
1182,<S2SV_ModStart> else if ( ( cpkt. data. data. data. data. data. data == NULL ) continue &&,0
1183,<S2SV_ModStart> NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC | NTLMSSP_NEGOTIATE_SEAL <S2SV_ModStart> -> sign ) <S2SV_ModEnd> flags |= NTLMSSP_NEGOTIATE_SIGN <S2SV_ModStart> |= NTLMSSP_NEGOTIATE_KEY_XCH ; <S2SV_ModEnd> tmp = *,1
1184,"<S2SV_ModStart>,",0
1185,<S2SV_ModStart> crypto_report_kpppp ) ; strncpy <S2SV_ModEnd> ( skb.,0
1186,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horDiff8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
1187,<S2SV_ModStart> -> head <= 0 || ( unsigned char ) ( ( g -> sect << 2 ) >> FD_SIZECODE ( g ) ) ==,1
1188,<S2SV_ModStart> ; line = 0 <S2SV_ModEnd> ; if (,0
1189,"<S2SV_ModStart>, & rlen, 0",1
1190,<S2SV_ModStart> * state = - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return ; <S2SV_ModEnd> tmp2SV_null> <S2SV_null>,0
1191,"<S2SV_ModStart> mntent, path, rootfs -> mount",1
1192,"<S2SV_ModStart>, name, true <S2SV_ModEnd> ) ; if",0
1193,<S2SV_ModStart> - offset ; unsigned short prev_bi_vcnt = bio -> bi_vcnt ; <S2SV_ModStart> ) break ; if ( bio -> bi_vcnt == prev_bi_vcnt ) put_page ( pages [ j ] ) ;,1
1194,,0
1195,<S2SV_ModStart> state. path <S2SV_ModEnd> ; char localhost,0
1196,"<S2SV_ModStart> len ) { if ( len < 0 ) { <S2SV_ModStart> ( str, ""str"", len <S2SV_ModEnd> ( str, <S2SV_ModStart> ) ; } strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> len ) ; }",0
1197,,0
1198,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
1199,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1200,<S2SV_ModStart> 0 ) ; if (! r ) return - EINVAL ;,1
1201,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1202,,1
1203,"<S2SV_ModStart> { r_cons_printf ( ""\\""k <S2SV_blank> bin/pe/%s\\""\\n"" <S2SV_ModEnd>, module,",0
1204,"<S2SV_ModStart>, rqstp, res <S2SV_ModEnd> ) ; out",1
1205,<S2SV_ModStart> mnt_mnt ) { if ( mnt -> mnt. mnt. mnt_root ) { return - EPERM ; },0
1206,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1207,"<S2SV_ModStart> ) ) { * status = ""INVALID_S4U2PROXY_OPTIONS"" ; <S2SV_ModStart> ) ) { * status = ""EVIDENCE_TICKET_MISMATCH"" ;",1
1208,<S2SV_ModStart> thread -> tp_value [ 0 ],0
1209,"<S2SV_ModStart> bufsize ) { size_t new_bufsize <S2SV_ModEnd> ; JAS_DBGLOG ( <S2SV_ModStart> ; if ( bufsize < 0 ) { jas_deprecated ( ""negative <S2SV_blank> size <S2SV_blank> jas_stream_memopen"" ) ; } if ( bufsize < 0 ) { jas_deprecated ( buf, new_bufsize ) ; new_bufsize <S2SV_ModEnd> ; } else <S2SV_ModStart> ; } } if ( bufsize <S2SV_null> <S2SV_null>",0
1210,"<S2SV_ModStart> char * pkbuf <S2SV_ModEnd> ; char * <S2SV_ModStart> b = NULL <S2SV_ModStart> b = NULL ; } if (! authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done <S2SV_ModStart> b ) ; } if (! authctxt -> user ) { debug2 ( ""%s: <S2SV_blank> because <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done <S2SV_ModStart> b ) ; }",0
1211,<S2SV_ModStart> ; uint32_t bcount ; CLEAR ( WaveHeader ),1
1212,<S2SV_ModStart> ( iter ) ; <S2SV_ModEnd> return ret ;,0
1213,<S2SV_ModStart> = 0 ; _sx_msg = NULL ;,0
1214,<S2SV_ModStart> tn_buf ) ; return - EACCES ;,1
1215,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteCanonEntry ) ) ;",0
1216,<S2SV_ModStart> failed_mount2_mount3 ( sbi -> s_mb_cache ) ;,0
1217,<S2SV_ModStart> ) return false,0
1218,<S2SV_ModStart> len < tcp_hdrlen || tcp_hdrlen < sizeof ( struct tcphdr ) <S2SV_ModStart> ; if ( tcp_hdrlen >= 15 * 4 ) return 0 ; if (,1
1219,<S2SV_ModStart> int i ; size_t size ; matrix = 0 ; <S2SV_ModStart> 0 ) { goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } } matrix <S2SV_ModStart> -> datasize_ = size_t <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } matrix <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } } },0
1220,"<S2SV_ModStart> ipv6_select_ident ( fh, rt <S2SV_ModStart> ipv6_select_ident ( fh, rt",1
1221,"<S2SV_ModStart> int error ; struct mb2_cache_entry * ce ; struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache = <S2SV_ModStart> ( ext4_mb_cache, <S2SV_ModEnd> hash ) ; <S2SV_ModStart> ( ext4_mb_cache, <S2SV_ModEnd> hash ) ; <S2SV_ModStart> if ( error ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ) ; } <S2SV_ModEnd> } } <S2SV_null>",0
1222,<S2SV_ModStart> * req ; <S2SV_ModEnd> req = scsi_req_alloc <S2SV_ModStart> hba_private ) ; <S2SV_ModEnd> return req ;,1
1223,"<S2SV_ModStart> len, buf <S2SV_ModEnd> ; int len",0
1224,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1225,<S2SV_ModStart> ( ret ||! cm_id -> device ||,1
1226,<S2SV_ModStart> xfrm_policy_walk * ) <S2SV_ModEnd> cb -> args <S2SV_ModStart> cb -> args <S2SV_ModEnd> ; struct xfrm_dump_info <S2SV_ModStart> struct xfrm_dump_info info <S2SV_ModEnd> ; info.,0
1227,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> ) ; } if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
1228,<S2SV_ModStart> dentry * upper <S2SV_ModEnd> ; int err <S2SV_ModStart> NULL ; } upper = dentry -> d_name. dentry -> d_name. len ; err = PTR_ERR ( upper ) ; if ( IS_ERR ( upper ) ) goto out_unlock ; <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> if ( upper <S2SV_ModStart> ) ; goto out_unlock ; } dput ( upper ) ;,0
1229,,0
1230,<S2SV_ModStart> * ptrptr && <S2SV_ModEnd> nmemb && size <S2SV_ModStart> nmemb && size <S2SV_ModEnd> ) return AVERROR,1
1231,<S2SV_ModStart> ( a -> type == szMAPI_BINARY && a -> <S2SV_ModStart> else if ( a -> type == szMAPI_BINARY &&,1
1232,<S2SV_ModStart> break ; } if ( i -> width > 7 ) { # if ( i -> log ) { # endif i = i ; break ; },0
1233,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : ms -> elf_notes_max = ms -> elf_notes_max ;,0
1234,"<S2SV_ModStart> { jas_eprintf ( ""got <S2SV_blank> box <S2SV_blank> type <S2SV_blank> %s\\n"" <S2SV_ModEnd>, box ->",1
1235,,1
1236,<S2SV_ModStart> ; err = - 1,0
1237,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
1238,<S2SV_ModStart> ; if ( me -> motion &&,0
1239,<S2SV_ModStart> UINT32 nsc_rle_encode ( const,1
1240,<S2SV_ModStart> ; unsigned char * data = malloc ( <S2SV_ModStart> ( ) + 1 <S2SV_ModEnd> ; memset ( <S2SV_ModStart> ) ) ; if (! data ) return ;,0
1241,"<S2SV_ModStart> * dllhandle ; if ( COM_CompareExtension ( name, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", name ) ; return NULL ; }",1
1242,<S2SV_ModStart>,0
1243,<S2SV_ModStart> ( n ) \\\n{ <S2SV_ModEnd> buf = ( <S2SV_ModStart> ++ ; } \\\n} <S2SV_ModEnd> MagickMemory ( pcd_table,0
1244,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1245,<S2SV_ModStart> state ) ; g_strdup ( header ) <S2SV_ModEnd> ( header,0
1246,"<S2SV_ModStart> # ifdef HAVE_IPV6 <S2SV_ModEnd> ( p + <S2SV_ModStart> + 2 ) { char * <S2SV_ModStart> * portno = strtol <S2SV_ModEnd> ( p + <S2SV_ModStart> p + 2, & estrndup <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) { if ( e && * e && * e ) { char * e { char * e = NULL ; } <S2SV_ModEnd> if ( get_err <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( e",0
1247,<S2SV_ModStart> 1 ) ;,0
1248,<S2SV_ModStart> srcb -> y_width <S2SV_ModEnd> ) { memcpy,0
1249,<S2SV_ModStart> AVERROR_INVALIDDATA ; } if ( c -> log2_cblk_width > 6 || c -> log2_cblk_height > 6 || c -> log2_cblk_height > 4,0
1250,<S2SV_ModStart> == * ptr && ptr [ 1 ],1
1251,"<S2SV_ModStart> void update_context ( VP9_COMMON * x <S2SV_ModEnd>, MACROBLOCKD <S2SV_ModStart> BLOCKD * x <S2SV_ModEnd>, int mi_col <S2SV_ModStart> -> mi_col ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> i ] ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( cpi,",0
1252,"<S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
1253,<S2SV_ModStart> <S2SV_null>,0
1254,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ) ; } <S2SV_ModEnd> ( ),",0
1255,<S2SV_ModStart> ( skb -> len,0
1256,<S2SV_ModStart> sta -> lock ) ; spin_lock_init ( & sta -> ps_lock,1
1257,<S2SV_ModStart> tp_event ) && perf_paranoid_tracepoint_raw <S2SV_ModEnd> ( ) &&,1
1258,<S2SV_ModStart> ( ) ; sctp_net_init_out <S2SV_ModEnd> ( ) ;,0
1259,"<S2SV_ModStart>, 0 ) ; if (! data_interface ||! control_interface ) return - ENODEV",1
1260,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1261,<S2SV_ModStart> ; if ( <S2SV_ModEnd> entry == 0,0
1262,"<S2SV_ModStart> * head ; <S2SV_ModEnd> newsk -> sk_sndbuf <S2SV_ModStart> -> sk_rcvbuf ; sctp_copy_descendant <S2SV_ModEnd> ( newsk,",1
1263,"<S2SV_ModStart> ( fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) ) <S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) ) )",0
1264,"<S2SV_ModStart> { struct desc_struct <S2SV_ModEnd> desc ; short <S2SV_ModStart> return sel ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! get_desc ( & desc, sel ) <S2SV_ModEnd> ) return - <S2SV_ModStart>! ( desc. <S2SV_ModEnd> d ) {",0
1265,<S2SV_ModStart> ; # endif vpx_free <S2SV_ModEnd> ( ctx ->,0
1266,"<S2SV_ModStart> 1 ) { vpx_lpf_horizontal_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> } else { vpx_lpf_horizontal_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) ; vpx_lpf_horizontal_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_horizontal_16 <S2SV_ModEnd> ( s,",0
1267,<S2SV_ModStart> return ret ; fsnotify_put_group ( group ) ;,1
1268,<S2SV_ModStart> ctx ) { <S2SV_ModEnd> int ctx =,0
1269,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> dst_reg -> smin_value <S2SV_ModStart> break ; } <S2SV_ModEnd> if ( BPF_CLASS,0
1270,<S2SV_ModStart> == NULL ) <S2SV_ModEnd> ; status =,0
1271,<S2SV_ModStart> ) == START_CODE && ps_stream -> u4_offset < ps_stream -> u4_offset,0
1272,<S2SV_ModStart> ( count ) ; if (! <S2SV_ModStart> ) return - EINVAL ; },0
1273,,0
1274,"<S2SV_ModStart> ; size_t tmp ; memset ( buf, 0, sizeof ( buf ) ) ;",0
1275,<S2SV_ModStart> input -> options + 1,0
1276,"<S2SV_ModStart> } if ( le32_to_cpu ( raw_super -> segment_count ) > F2FS_MAX_SEGMENT ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> segment <S2SV_blank> count <S2SV_blank> (%u)"", le32_to_cpu ( raw_super -> segment_count ) ) ; return 1 ; } if (",1
1277,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> len ) { if ( ( ( ( * name ) == '\\0' || ( ( * name ) == '\\0' || ( * name == '\\\\' ) ) ) && ( ( * name [ len ] == '\\0' ) ) ) && ( * name [ len ] == '\\0' && ( * name [ len ] == '\\0' || ( * name [ len == '\\0' || ( * name [ 1 ] == '\\0' || ( * name [ len ] == '\\0' || ( * name [ len ] == '\\0' || ( * name [ len ] == '\\0' || ( ( * name [ len ] == '\\0' || ( * name [ len ] == '\\0' || ( ( * name [ len ] == '\\0' || ( * name [ len ] == '\\0' ) == '\\0' || ( ( ( ( * name [ len ] == '\\0' ) == '\\0' ) ) ) && (! '\\0' && ( ( name [ len ] == '\\0' || ( name [ len ] == '\\0' || ( ( (,0
1278,,0
1279,<S2SV_ModStart> len ) { struct ipv6_txoptions * opt_to_free = NULL ; <S2SV_ModStart>! opt ) { opt = txopt_get ( np ) ; opt_to_free = opt ; } <S2SV_ModEnd> if ( flowlabel <S2SV_ModStart> flowlabel ) ; txopt_put ( opt_to_free ) ;,1
1280,<S2SV_ModStart> ; if ( skb -> opt.,0
1281,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> } break ;",1
1282,<S2SV_ModStart> = 0 ; if ( tcp -> opt.,0
1283,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1284,<S2SV_ModStart> ; if ( <S2SV_ModEnd> info -> file <S2SV_ModStart> ) return 0,0
1285,"<S2SV_ModStart> { if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
1286,<S2SV_ModStart> ) break ; <S2SV_ModEnd> tp -> copied_seq <S2SV_ModStart> = seq ; } tp -> copied_seq = seq ;,1
1287,<S2SV_ModStart> goto error ; if ( key_data == NULL ) goto cleanup ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( key_data. key_size <S2SV_ModStart> goto cleanup ; <S2SV_ModEnd> for ( i,0
1288,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx ) {",0
1289,<S2SV_ModStart> ] == MIN ( sqlite3_int64 ),0
1290,<S2SV_ModStart> inode ) { <S2SV_ModEnd> return 0 ;,0
1291,"<S2SV_ModStart> expr_ty body, string type_comment, <S2SV_ModStart> ; p -> v. type_comment = type_comment",0
1292,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> UINT_MAX <S2SV_ModEnd> ; const char *,0
1293,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ),1
1294,"<S2SV_ModStart> ) { case AC_VECTOR : kvm_queue_exception_e ( vcpu, AC_VECTOR, error_code ) ; return 1 ; case",1
1295,,0
1296,"<S2SV_ModStart> ( s, buf, 0",0
1297,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 0,0
1298,<S2SV_ModStart> < 0 ) { ret = chg ; goto out_err ; } <S2SV_ModEnd> if ( hugepage_subpool_get_pages <S2SV_ModStart> chg ) ) { ret = <S2SV_ModEnd> - ENOSPC ; <S2SV_ModStart> - ENOSPC ; goto out_err ; } <S2SV_ModStart> chg ) ; goto out_err <S2SV_ModEnd> ; } if <S2SV_ModStart> return 0 ; out_err : resv_map_put ( vma ) ; return ret ;,1
1299,"<S2SV_ModStart> ) ) ; struct fl6_txoptions * opt ; <S2SV_ModStart> -> opt ; rcu_read_lock ( ) ; opt = rcu_dereference ( np -> opt, & np -> opt, & final ) ; <S2SV_ModStart> -> opt ; rcu_read_unlock ( ) ;",0
1300,<S2SV_ModStart> = EPERM ; s -> s_stack_depth = 1 ; s -> s_stack_depth = - EINVAL ; goto out_free ;,0
1301,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1302,"<S2SV_ModStart> 6 ) ) { MATLAB_KO : clone_info = DestroyImageInfo ( clone_info ) ; <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart> ""ImproperImageHeader"" ) ; }",0
1303,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModStart> ; if (! stream ) return ERROR_FAILURE_RETRY (,0
1304,"<S2SV_ModStart> ret, n_new_keys <S2SV_ModEnd>, kdb ->",0
1305,"<S2SV_ModStart> int result = RLC_ERR ; bn_t t ; bn_zero ( m ) ; bn_lsh ( t ) ; bn_zero ( m, m, m ) ; bn_len = RLC_OK <S2SV_ModEnd> ; break ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> bn_is_zero ( m <S2SV_ModStart> ) ) { bn_zero ( m, 8 ) ; bn_zero ( m, 8 ) ; bn_dig ( m, m, m, m, m, 8 ) ; bn_len = RLC_OK <S2SV_ModEnd> ; break ; <S2SV_ModStart> ; } bn_zero ( m, m, 8 ) ; if ( len == <S2SV_ModEnd> * p_len == <S2SV_ModStart> ) ) { <S2SV_ModEnd> bn_is_zero ( m <S2SV_ModStart> ) ) ; } bn_zero ( m, m, 8 ) ; }",0
1306,"<S2SV_ModStart> -> length, 0,",1
1307,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1308,<S2SV_ModStart> { rq = <S2SV_ModEnd> hctx -> tags <S2SV_ModStart> hctx -> tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; if (,1
1309,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
1310,<S2SV_ModStart> cm -> interp [ i ] [ j ],0
1311,"<S2SV_ModStart> { token ++ ; } if ( operand >= MAX_OPERANDS ) { eprintf ( ""Too <S2SV_blank> many <S2SV_blank> operands\\n"" ) ; return false",1
1312,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( x -> <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( x -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,0
1313,"<S2SV_ModStart> ; if ( x = safe_calloc <S2SV_ModEnd> ( dst_name,",0
1314,<S2SV_ModStart> return 0 ; retval = daddr <S2SV_ModEnd> ) ; },0
1315,"<S2SV_ModStart> = 0 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1316,<S2SV_ModStart> ctl_files_rwlock ) ; mutex_init ( & card -> user_ctl_lock ) ;,1
1317,<S2SV_ModStart> ) ) { const u_char * p ; const u_len = 0 ; const u_char * p ; p ++ ) * p ; if ( padlen > pbuf_ffs ) return NULL ;,0
1318,<S2SV_ModStart> ret ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> len ),0
1319,<S2SV_ModStart> ; ps_dec -> <S2SV_ModEnd> u2_cur_num = 0,0
1320,<S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata -> rbuf. buf!= NULL ) <S2SV_ModStart> OPENSSL_free ( rdata -> rbuf. buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata -> rbuf. buf!= NULL ) <S2SV_ModStart> OPENSSL_free ( rdata -> rbuf. buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; },1
1321,"<S2SV_ModStart> ) ) ; struct fl6_txoptions * opt ; <S2SV_ModStart> -> opt ; rcu_read_lock ( ) ; opt = rcu_dereference ( np -> opt, & np -> opt, & final ) ; <S2SV_ModStart> -> opt ; rcu_read_unlock ( ) ;",0
1322,<S2SV_ModStart> return - EINVAL ; return ret ;,0
1323,"<S2SV_ModStart> int mptctl_ioctl_info ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_info data <S2SV_ModEnd> ; if ( <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } dctlprintk",0
1324,"<S2SV_ModStart> c. offset = 0,",0
1325,"<S2SV_ModStart> char * path, const char * rootfs <S2SV_ModStart> mntdata, optional, rootfs",1
1326,"<S2SV_ModStart> NULL ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1327,"<S2SV_ModStart> * b ; size_t <S2SV_ModEnd> len ; int <S2SV_ModStart> ) { const memset ( buf, 0, sizeof ( * p ) ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) return err ;",0
1328,"<S2SV_ModStart> | O_NOCTTY, ( mode == 0 || mode == MODE_INVALID )? 0644 : mode <S2SV_ModEnd> ) ; if",1
1329,<S2SV_ModStart> err_info ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> line [ NETSCREEN_LINE_LENGTH <S2SV_ModEnd> ] ; },0
1330,<S2SV_ModStart> * rq ) <S2SV_ModEnd> { int cpu <S2SV_ModStart> ; u64 irq_time ; if ( rq -> skip_clock_update ) return <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1331,<S2SV_ModStart> ; } } if (,0
1332,<S2SV_ModStart> ; } } if ( strlen ( argv ) ) { err = - 1 ; break ; },0
1333,<S2SV_ModStart> { struct blkif_response * <S2SV_ModStart> size = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> case BLKIF_16 : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> x86_prod_prod_prod_pvt <S2SV_ModEnd> ) ; break <S2SV_ModStart> case BLKIF_PROTOCOL_X86_32 : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> x86_32. rsp_prod_pvt <S2SV_ModEnd> ) ; break <S2SV_ModStart> case BLKIF_PROTOCOL_X86_32 : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> ) ; break <S2SV_ModEnd> } break ;,0
1334,<S2SV_ModStart> ; if ( entry == NULL ) return 0 ; if (,0
1335,"<S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size, buf_size, 12 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size, buf_size, 12 ) ) return <S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size, buf_size, buf_size, n -> entries [ tcount ]. tag_size, n -> entries [ tcount ]. entries [ tcount ]. entries [ tcount ]. entries [ tcount ], n -> entries [ tcount ]. order ) ; n -> entries [ tcount ]. order = exif_get_short ( n -> order, n -> order ) ; n -> entries [ tcount ]. order = exif_get_short ( n -> order ) ; n -> entries [ tcount ]. entries [ tcount ]. order = exif_get_short ( buf + 2, n -> entries [ tcount ]. order ) ; n -> entries [ tcount ]. entries [ tcount ]. order = exif_get_short ( n -> entries [ tcount ]. order ) ; exif_log ( en -> entries [ tcount ]. order ) ; exif_log ( en -> log, EX_",0
1336,<S2SV_ModStart> char * stat <S2SV_ModEnd> ; if (,0
1337,<S2SV_ModStart> ndo -> ndo_snapend ; ND_TCHECK_16BITS ( & ip -> ip_len ),1
1338,<S2SV_ModStart> dentry * dir <S2SV_ModEnd> ; int dir_has_key <S2SV_ModStart> 0 ; } <S2SV_ModEnd> spin_lock ( & <S2SV_ModStart> dir_has_key = ( d_inode ( dir ) -> i_crypt_info <S2SV_ModEnd>!= NULL ),1
1339,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void server ->,0
1340,"<S2SV_ModStart> ARCHIVE_WARN ; } if ( argc >= MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } <S2SV_ModStart> p ) ; <S2SV_ModEnd> } if (",1
1341,"<S2SV_ModStart> break ; } if ( i -> width > i -> width ) { # if ( i -> parent -> parent -> parent -> height ) { # if! defined ( i -> parent -> parent -> parent -> parent -> parent -> parent. width ) ) if ( i -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> parent ) if ( i, i -> parent -> parent -> parent -> height ) if ( i -> height > i -> height ) { # if! defined ( i -> parent -> parent -> parent -> height ) ) { # if! defined ( i -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> height ) { # if ( i -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> parent ; } if ( i -> height > i -> height ) { # if! defined ( i -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> height ) { # if ( i -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> parent, i -> parent -> parent -> parent -> parent -> parent -> parent",0
1342,<S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ),0
1343,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
1344,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> break ; } if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",0
1345,<S2SV_ModStart> void ) { recovery_started = 0 ;,0
1346,"<S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [",0
1347,"<S2SV_ModStart> image ) ; status = ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
1348,"<S2SV_ModStart> error ; } memset ( newserv, 0, sizeof ( struct service ) ) ;",1
1349,<S2SV_ModStart> ++ ) { <S2SV_ModEnd> if ( ai,0
1350,<S2SV_ModStart> ) -> tp_value [ 0 ],1
1351,"<S2SV_ModStart> ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; ret = - EINVAL ;",1
1352,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> char * <S2SV_ModStart>, char * p, fmt <S2SV_ModStart>, char * numentries * numentries = 0 <S2SV_ModStart> len ; if ( out ) numentries * numentries = ( out, numentries * ) numentries = 0 ; if (! numentries ) cJSON_malloc ( out ) { cJSON_malloc ( out, len ) ; if (! out ) return 0 ; } else out = ensure ( p ) ; if (! ptr ) { cJSON_malloc ( out, fmt, len ) ; * ptr = ensure ( char ) ; if ( fmt ) p ) p = ensure ( fmt, len ) ; if ( fmt == 0 ) cJSON_malloc ( fmt ) cJSON_malloc ( fmt, fmt, 2 ) ; if (! ptr ) return 0 ; * ptr = ensure ( fmt, ptr ) ; if ( fmt == 0 && ptr ) { cJSON_malloc ( fmt, fmt ) ; * ptr = ensure ( char <S2SV_ModEnd> * )",0
1353,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> uint32_t id ; <S2SV_ModStart> id_len ; const u_int id_len ; ND_TCHECK ( id_16BITS ( ext ) <S2SV_ModEnd> ) ; ND_TCHECK,0
1354,"<S2SV_ModStart> int tagval, uint32 <S2SV_ModEnd> * length )",1
1355,"<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return 0 ; } unix_dgram_peer ( sk, other ) ;",0
1356,<S2SV_ModStart> 4 ] ; unsigned int <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 <S2SV_ModEnd> ; value |= <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart>. unsigned int ) <S2SV_ModStart>. unsigned_value = <S2SV_ModEnd> value & 0xffffffff <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ; return (,0
1357,"<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> w"", <S2SV_ModStart> y3 ) ; sendClean ( outputbuffer ) ;",0
1358,<S2SV_ModStart> ( skb -> len,0
1359,<S2SV_ModStart> void exit_io_context ( struct task_struct * task <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; task_lock ( task <S2SV_ModEnd> ) ; ioc <S2SV_ModStart> ; ioc = task <S2SV_ModEnd> -> io_context ; <S2SV_ModStart> -> io_context ; task <S2SV_ModEnd> -> io_context = <S2SV_ModStart> ; task_unlock ( task <S2SV_ModEnd> ) ; if,1
1360,"<S2SV_ModStart> ret, ret",0
1361,<S2SV_ModStart> ; if ( ctx -> terminated ||,0
1362,"<S2SV_ModStart> ) { int ret = pci_read_config_word <S2SV_ModEnd> ( dev, <S2SV_ModStart> offset, value ) ; <S2SV_ModEnd> return ret ;",0
1363,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vp9_get_internal ( ctx ) ; VPX_CODEC_OK <S2SV_ModEnd> * ) <S2SV_ModStart> { return VPX_CODEC_ERROR <S2SV_ModEnd> ; } #",0
1364,<S2SV_ModStart> ] ) ; free_uid ( fpl -> user ) ;,1
1365,<S2SV_ModStart> blk_ctx ) ; <S2SV_ModEnd> return ret ;,0
1366,"<S2SV_ModStart> -> dwc ; dwc3_gadget_del_and_unmap_request ( dep, req, status <S2SV_ModEnd> ) ; spin_unlock <S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
1367,"<S2SV_ModStart> } # line 113 <S2SV_ModEnd> ""hex_grammar.c"" { ( <S2SV_ModStart> } # line 2419 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 1024 ""hex_grammar.c"" break ; <S2SV_ModEnd> "" { ( <S2SV_ModStart> } # line 122 <S2SV_ModEnd> "" break ; <S2SV_ModStart> } # line 122 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> "" break ; <S2SV_ModStart> } # line 2455 <S2SV_ModEnd> ""hex_grammar.c"" break ;",0
1368,"<S2SV_ModStart> sas_revalidate_domain, [ <S2SV_ModEnd> DISCE_SUSPEND ] = <S2SV_ModStart> ] = sas_resume_devices <S2SV_ModEnd>, } ;",1
1369,"<S2SV_ModStart>, int no_copy_entry, const <S2SV_ModStart> 0 ) { myf flags = 0 ; <S2SV_ModStart> 0 ) flags = 0 ; if ( param -> testflag & M_COPY_DATA ) flags |= MY_REDEL_COPY_DATA ; if ( param. name ) flags |= MY_REDEL_BACKUP ; <S2SV_ModStart>, name, flags <S2SV_ModEnd> ) break ; if",0
1370,<S2SV_ModStart> ) ; },0
1371,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
1372,<S2SV_ModStart> sk -> sk_family <S2SV_ModEnd> ; struct sockaddr_in,0
1373,<S2SV_ModStart> = 0 ; size_t lblk = 0 ; <S2SV_ModStart> = max_size_t <S2SV_ModEnd> ; if (,0
1374,<S2SV_ModStart> ) ; } free ( buf ) ;,0
1375,<S2SV_ModStart> return map ; map =,1
1376,"<S2SV_ModStart> 0 ) { const char * cp ; <S2SV_ModEnd> * cp = <S2SV_ModStart> } if ( ( cp == '\\0' ) && cp [ 1 ] == '\\0' ) { cp = ( cp [ 1 ], cp ) ; } if ( * cp == '\\0' ) return 0 ] = ( cp == '\\0' ) ; cp ++ ) { cp = ( cp [ 1 ], cp ) ; } if ( * cp == '\\0' || cp == '\\0' ) return ( cp [ 1 ] == '\\0' ) ; cp ++ ; } else if (! cp [ 1 ] && cp [ 1 ] == '\\0' && cp [ 1 ] == '\\0' ) { cp ++ ) ; } if ( cp == '\\0' ) return ( cp == '\\0' ) ; } if (! cp [ 1 ] == '\\0' ) { if ( cp == '\\0' && cp [ 1 ] == '\\0' && cp [ 1 ] == '\\0' ) ; cp ++ ; } else if ( cp == '\\0' && cp == '\\0' ) return ( cp ) ; } <S2SV_ModStart> ; if ( cp == '\\0' ) { cp ++ ; } if ( cp == '\\0' &&",0
1377,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1378,<S2SV_ModStart> ; if ( <S2SV_ModEnd> size_left < 4,1
1379,<S2SV_ModStart> * palette ; * h ; <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null>,0
1380,<S2SV_ModStart> { int i ; int <S2SV_ModEnd> ubits = BN_num_bits <S2SV_ModStart> ( u ) ; int <S2SV_ModEnd> vbits = BN_num_bits <S2SV_ModStart> ( v ) ; int <S2SV_ModEnd> ubits = BN_num_bits <S2SV_ModStart> ( v ) ; if ( <S2SV_ModEnd> udp [ 0,0
1381,<S2SV_ModStart> 1 ) ; ( void ) mv ;,0
1382,<S2SV_ModStart> crypto_report_kpppp ) ; strncpy <S2SV_ModEnd> ( rl.,0
1383,<S2SV_ModStart> = alloc ; size_t <S2SV_ModEnd> strindex = 0,1
1384,"<S2SV_ModStart>, nbits ; if ( msg -> readcount > msg -> cursize ) { return 0 ; } <S2SV_ModStart> bytes << 3 ; if ( msg -> readcount + ( bits >> 3 ) > msg -> cursize ) { msg -> readcount = msg -> cursize + 1 ; return 0 ; } <S2SV_ModStart> msg -> cursize << 3 <S2SV_ModStart> ) ) { msg -> cursize << 3 ; return 0 ; }",0
1385,<S2SV_ModStart> int idx ; unsigned int count ; <S2SV_ModStart> -> count ; count = kcontrol -> count ; <S2SV_ModStart> ; idx < <S2SV_ModEnd> count ; idx,1
1386,<S2SV_ModStart> ; out1 : cancel_sync ( & dev -> delay ) ; cancel_sync ( & dev -> delay ) ;,0
1387,<S2SV_ModStart> ) { size_t <S2SV_ModEnd> size = 0,0
1388,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return - 1,0
1389,<S2SV_ModStart> sizeof ( len <S2SV_ModEnd> ) ; if,0
1390,"<S2SV_ModStart> acl ) { struct iattr iattr ; retval = posix_acl_update_mode ( inode, & iattr. ia_mode, & acl ) ; if ( retval <S2SV_ModEnd> ) goto err_out <S2SV_ModStart> goto err_out ; if (! acl ) { value = NULL ; size = 0 ; } <S2SV_ModEnd> iattr. ia_valid <S2SV_ModStart> iattr ) ; <S2SV_ModEnd> } break ;",1
1391,<S2SV_ModStart> header. types_size <S2SV_ModEnd> ) { continue,1
1392,,0
1393,<S2SV_ModStart> len ) { size_t nlen = sizeof ( size_t ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) <S2SV_ModEnd> return NULL ;,0
1394,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct,0
1395,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> q_max_mbd ; const vpx_bit_depth_t bit_depth ; int bit_depth = 0 ; int bit_depth = ( target_depth )? 1 : 1 ; for ( i = i = i -> bit_depth ; i < max_bits ; i <S2SV_ModEnd> q -- <S2SV_ModStart> ) break ; } <S2SV_ModEnd> for_bit_depth,0
1396,"<S2SV_ModStart> ( interface, TRUE <S2SV_ModEnd> ) ; value",0
1397,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1398,<S2SV_ModStart> <= 0 && <S2SV_ModEnd> ND_TTEST ( *,0
1399,"<S2SV_ModStart>, NULL, <S2SV_ModEnd> data ) ;",1
1400,"<S2SV_ModStart> ( req, <S2SV_ModEnd> dev ) ;",0
1401,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
1402,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
1403,<S2SV_ModStart> } if ( end == NULL ||,0
1404,"<S2SV_ModStart> ( str, ""%s"" <S2SV_ModEnd> ) { char <S2SV_ModStart> ( str, len <S2SV_ModEnd> ) ; }",0
1405,"<S2SV_ModStart> * jas_iccprof_createfrombuf ( jas_uchar <S2SV_ModEnd> * buf,",1
1406,<S2SV_ModStart> ; ei -> i_sem = NULL ; if (,0
1407,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S,0
1408,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct ion_handle * <S2SV_ModStart> ; handle = ion_handle_get_by_id_nolock ( client, id <S2SV_ModEnd> ) ; mutex_unlock <S2SV_ModStart> ; return handle <S2SV_ModEnd> ; } <S2SV_null>",1
1409,"<S2SV_ModStart> cm, struct vpx_write_literal <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb ) <S2SV_ModStart> wb ) ; vpx_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; } vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
1410,<S2SV_ModStart> : if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> : if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; },1
1411,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context ->,0
1412,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1413,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,0
1414,"<S2SV_ModStart> ( interface, ENC624J600_ERD <S2SV_ModEnd> ) ; uint16_t <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_EIR <S2SV_ModEnd> ) ; enc624J600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ECON1, ENC624J600_ESTAT ) ; enc624J600WriteReg ( interface, ENC624J600_RRD <S2SV_ModEnd> ) ; enc624J600WriteReg <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_RRD <S2SV_ModEnd> ) ; enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) <S2SV_ModEnd> ) ; enc624J600_t",0
1415,<S2SV_ModStart> ] == 0x01 && i < gemsafe_cert_max,1
1416,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
1417,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv, VALUE * argv, VALUE klass ) { VALUE parse_options ; VALUE errors ; VALUE parse_options ; VALUE errors ; VALUE rb_schema ; int scanned_schema ; int scanned_args = 0 ; if ( scanned_args == 0 ) { parse_options = rb_const_const_get ( rb_intern ( ""ParseOptions"" ), & parse_options ) ; if ( scanned_options ) { parse_options = rb_intern ( ""ParseOptions"" ), rb_intern ( ""ParseOptions"" ) ) ; if ( scanned_intern ( content ) ) ) { parse_options = rb_intern ( ""ParseOptions"", rb_intern ( ""DEFAULT_SCHEMA"" ) ) ; } ctx ;",0
1418,"<S2SV_ModStart> vma ) { <S2SV_ModEnd> struct au1200fb_device * <S2SV_ModStart> info -> par <S2SV_ModEnd> ; vma -> <S2SV_ModStart> _CACHE_MASK ; return vm_iomap_memory <S2SV_ModEnd> ( vma, <S2SV_ModStart> ( vma, fbdev -> fb_phys, fbdev -> fb_len <S2SV_ModEnd> ) ; }",1
1419,<S2SV_ModStart> } if ( config_str &&,0
1420,<S2SV_ModStart> stride ) ; if ( state -> bytes < 4 ) return 0 ;,0
1421,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
1422,<S2SV_ModStart> ; if ( <S2SV_ModEnd> arg >= cdi,1
1423,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; err =,0
1424,<S2SV_ModStart> handle ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1425,<S2SV_ModStart> <S2SV_null> <S2SV_null> static uint8_t <S2SV_ModEnd> char_t <S2SV_ModStart> char * s ; size_t <S2SV_ModEnd> u8_t <S2SV_ModStart> int len ; unsigned char * out ; size_t len = ( u8_t ) <S2SV_ModEnd> char * <S2SV_ModStart> * ) { size_t len = ( unsigned char * ) strlen ( u8_t ) ; if ( u8_t ) return - 1 ; <S2SV_ModStart> } else { if ( <S2SV_ModEnd> ( u16_t ) <S2SV_null>,0
1426,"<S2SV_ModStart>, s -> state == 0",0
1427,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1,0
1428,<S2SV_ModStart> } dt -> proto = IP_GET_IPPROTO ( p ) ; dt ->,1
1429,"<S2SV_ModStart> ( interface, KSZ8851_ISR ) ; if ( ( status & KSZ8851_P0 )!= 0 ) { <S2SV_ModEnd> return ERROR <S2SV_ModStart> ( interface, KSZ8851_RXIS <S2SV_ModEnd> ) ; <S2SV_ModStart> ( interface, KSZ8851_P1SR ) ; } <S2SV_ModStart> ( interface, KSZ8851_P1 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1430,"<S2SV_ModStart> const node * n, bool <S2SV_ModEnd> type_seq, bool <S2SV_ModStart> is_async ) { const type_async ) ; <S2SV_ModStart> == TYPE ( n, NILD ( n, 0 ) ) == type_comment ; <S2SV_ModStart> isILD ( n, true <S2SV_ModEnd> ) ; if",0
1431,<S2SV_ModStart> pbi ) ; <S2SV_ModEnd> return 0 ;,0
1432,"<S2SV_ModStart> ( AUDIT_APPARMOR_DENIED, __aa_current_profile ( ), GFP_KERNEL, & sa, NULL <S2SV_ModEnd> ) ; }",1
1433,"<S2SV_ModStart> uint_fast8_t tmp ; siz -> comps = 0 ; <S2SV_ModStart> ) ) { goto error ; } if (! siz -> tileheight ) { jas_eprintf ( ""tile <S2SV_blank> area\\n"" ) ; goto error ; } if (! siz -> tileheight ) { jas_eprintf ( ""tile <S2SV_blank> invalid <S2SV_blank> area\\n"" ) ; goto error ; } if (! siz -> tilewidth || siz -> tilewidth || siz -> tileheight > siz -> tileheight ) { jas_eprintf ( ""area\\n"" ) ; goto error ; } if (! siz -> tileheight ) { jas_eprintf ( ""xoff ++ ) ; goto error ; } if (! siz -> tileheight ) { jas_eprintf ( ""xoff > siz -> tilexoff ) ; goto error ; } if ( siz -> tileheight ) { jas_eprintf ( ""xoff >= siz -> tilexoff + siz -> tilexoff + siz -> tilexoff + siz -> tilexoff + siz -> height ) { jas_eprintf ( ""xoff ) ; goto error ; }",0
1434,<S2SV_ModStart> return - 1 <S2SV_ModEnd> ; if (,0
1435,"<S2SV_ModStart>, xmi_data, xmi_size,",1
1436,<S2SV_ModStart> size_t total_len ; struct iov_iter ops ; <S2SV_ModStart> ) return 0,0
1437,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits <S2SV_ModStart> ) ; } \\\n} <S2SV_ModEnd> Quantum index ; <S2SV_ModStart> ++ ) { next_pixel = MagickFalse ; displacement = 1 ; <S2SV_ModStart> -= MaxHashTable ; if ( k < 0 ) continue <S2SV_ModEnd> ; if (,0
1438,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1439,<S2SV_ModStart> { res = <S2SV_ModEnd> ; goto cleanup <S2SV_ModStart> ) ; goto cleanup <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto cleanup <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto cleanup <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; free ( hdl ) ;,0
1440,"<S2SV_ModStart> size_t max_samples ; size_t max_samples ; char optstr [ 64 ] ; <S2SV_ModStart> 0 ] ; max_samples = max_samples ; <S2SV_ModStart> break ; case OPT_MAXSAMPLES : max_samples = sizeof ( optstr ) ; <S2SV_ModStart> ) ; } snprintf ( optstr, sizeof ( optstr ), 0 ) ;",0
1441,<S2SV_ModStart> ) ; return - 1,0
1442,<S2SV_ModStart> return NULL ; if ( conn -> type == NULL ||,0
1443,<S2SV_ModStart> = 0 ; ND_TBITS ( ) ;,0
1444,<S2SV_ModStart> s ++ ) <S2SV_ModEnd> ; if (,0
1445,<S2SV_ModStart> 2 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,1
1446,<S2SV_ModStart> ) return - EINVAL <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto out_irq,0
1447,<S2SV_ModStart> ( bb ),0
1448,<S2SV_ModStart> else { return false <S2SV_ModEnd> ; } case,1
1449,"<S2SV_ModStart> = 0 ; memset ( sa, 0, sizeof ( struct sockaddr_rc ) ) ;",0
1450,<S2SV_ModStart> (! handle ||! SecIsValidHandle ( handle ),1
1451,<S2SV_ModStart> ) & 1 <S2SV_ModEnd> ) ; length,0
1452,,0
1453,<S2SV_ModStart> OP_EXACT1 ) ; <S2SV_ModEnd> DATA_ENSURE ( 1 <S2SV_ModStart> ++ ; s <S2SV_ModEnd> ++ ; MOP_OUT,1
1454,"<S2SV_ModStart> ) { switch ( plane, plane",0
1455,<S2SV_ModStart> = - EINVAL ; <S2SV_ModEnd> msg -> msg_namelen,0
1456,"<S2SV_ModStart> path, path, rootfs -> mount",0
1457,<S2SV_ModStart> -> fd = get_fdt <S2SV_ModEnd> ; } return,0
1458,"<S2SV_ModStart> dest_keyring ) { struct key_keyring * dest_keyring = get_keyring ( dest_keyring ) ; <S2SV_ModStart> dest_keyring ) ; if ( dest_keyring ) { ret = key_put ( dest_keyring, dest_keyring ) ; goto invalid_keyring ; } <S2SV_ModEnd> } <S2SV_null>",0
1459,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart>, bsize, MACROBLOCKD * const x <S2SV_ModEnd>, MACROBLOCKD * <S2SV_ModStart> bsize ) { <S2SV_ModEnd> int mi_row = <S2SV_ModStart> bsize ) ; vpx_prob <S2SV_ModEnd> ( cpi, <S2SV_ModStart> bsize ) ; <S2SV_ModEnd> } } <S2SV_null> <S2SV_null>",0
1460,<S2SV_ModStart> NETIF_F_SG <S2SV_ModEnd> ; if ( <S2SV_ModStart> NETIF_F_HW_SG <S2SV_ModEnd> ; if (,0
1461,<S2SV_ModStart>,0
1462,"<S2SV_ModStart> pixel_info ) ; ( void ) ResetMagickMemory ( pixels, 0, pixel_info_length ) ;",1
1463,"<S2SV_ModStart> ; size_t tmp ; memset ( buf, 0, sizeof ( buf ) ) ;",0
1464,,0
1465,<S2SV_ModStart> ; if ( mp -> m_inode.,0
1466,<S2SV_ModStart> } if ( c -> fc ->,0
1467,<S2SV_ModStart> ( cmpt = 0,0
1468,<S2SV_ModStart> = 0 ; if ( ( flags & VPX_CODEC_ID ) && (,0
1469,"<S2SV_ModStart>, sizeof ( double <S2SV_ModEnd> ) ) ;",1
1470,<S2SV_ModStart> ( event ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1471,"<S2SV_ModStart> int flags ; ND_TCHECK2 ( tptr [ 0 ], 3 ) ; <S2SV_ModStart> tlen = len <S2SV_ModEnd> ; ND_PRINT (",0
1472,"<S2SV_ModStart> -> outputbuffer, NULL <S2SV_ModEnd> ) ; }",0
1473,"<S2SV_ModStart> src ) ; memcpy <S2SV_ModEnd> ( src,",0
1474,"<S2SV_ModStart> ) ) ; if ( msg -> data_overflow ( msg -> data_bytes, 8 ) > <S2SV_ModEnd> ) {",0
1475,<S2SV_ModStart> int u ; if ( n < 0 || n >= 32 ) { return - 1 ; } <S2SV_ModEnd> v = 0,1
1476,"<S2SV_ModStart> iovec, iovec, & iter <S2SV_ModStart> len, iter",0
1477,"<S2SV_ModStart> } if ( ptr - c -> rcurr > 100 || ( strncmp ( ptr, ""get <S2SV_blank> "", 4 ) && strncmp <S2SV_ModEnd> ( ptr, <S2SV_ModStart> ptr, ""gets <S2SV_blank> "", 4 )",0
1478,<S2SV_ModStart> * desc ; if ( desc -> desc. bLength < ENOMEM ) return - EINVAL ;,0
1479,<S2SV_ModStart> ; size < 2,0
1480,<S2SV_ModStart> ; ue -> card = card ; ue ->,0
1481,"<S2SV_ModStart> client_p, ""Malformed <S2SV_blank> AUTHENTICATE""",0
1482,<S2SV_ModStart> OpMask ) ; <S2SV_ModEnd> if ( ctxt <S2SV_ModStart> -> _eip ; done :,0
1483,"<S2SV_ModStart> size, size <S2SV_ModEnd> ) ;",0
1484,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; random_ether_addr (,1
1485,<S2SV_ModStart> b. stride <S2SV_ModEnd> ) ; },0
1486,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_MAADR2, ENC624J600_MAADR3 <S2SV_ModEnd>, interface -> <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd>, interface -> <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd>, interface -> <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd>, interface -> <S2SV_ModStart> ( interface, ENC624J600_MACON2 <S2SV_ModEnd>, interface -> <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; enc624j600_MAADR3",0
1487,<S2SV_ModStart> size ) { <S2SV_ModEnd> return 0 ; <S2SV_ModStart> ) ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
1488,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
1489,"<S2SV_ModStart> ) ) { applog ( LOG_WARNING, ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> failed.\\n"", header ) ; pool_failed ( pool ) ; return false ; } <S2SV_ModEnd> cb1 = (",0
1490,<S2SV_ModStart>. priv ; ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) {,0
1491,<S2SV_ModStart> case EXIT_REASON_VMON : case EXIT_REASON_INVEPT :,1
1492,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> cpi <S2SV_ModEnd> ; sf -> <S2SV_ModStart> } if ( VP9_COMMON * cpi <S2SV_ModEnd> ) { VP9_COMMON * <S2SV_ModStart> ] { VP9_COMMON * cpi -> common = & cpi -> td. frame_type = & cpi -> frame_type == KEY_FRAME ) { VP9_COMMON * cpi -> common ; sf -> common ; sf -> frames_type = INTRA_FRAME ; <S2SV_ModEnd> sf -> frames_type = 0 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> sf -> frame_type = 0 <S2SV_ModStart> ; sf -> mbmi ; } else { <S2SV_ModEnd> sf -> frames_type = INTRA_FRAME ; <S2SV_ModStart> } else { <S2SV_ModEnd> sf -> frame_type = ( cpi <S2SV_ModStart> ] ) ; <S2SV_ModEnd> sf -> frames_type = ( cpi <S2SV_ModStart> ; sf -> td. <S2SV_ModStart> ; sf -> ref_mode == KEY_FRAME ) { <S2SV_ModEnd> sf -> oxcf. <S2SV_ModStart> ; sf -> rc_stride = INTRA_FRAME ; <S2SV_ModEnd>  sf,0
1493,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
1494,<S2SV_ModStart>,0
1495,"<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> p, 0 )",0
1496,<S2SV_ModStart> = getin <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ),0
1497,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1498,"<S2SV_ModStart> 0 ) { char type_printf ( CHILD <S2SV_ModEnd> * ) ; <S2SV_ModStart> * c ; str = _PyObject_SetInfo ( n, n, n, nstr <S2SV_ModEnd> ) ; if",0
1499,"<S2SV_ModStart> ; if ( option_mode == VPX_CODEC_MAX_FACTOR ) { svc_ctx = get_pixel_ctx ( ) ; } else if ( strlen ( input ) == 0 ) { res = VPX_CODEC_OK ; } else if ( strchr ( option_val, option_val, option_val, option_val ) == 0 ) { svc_err_err_err_err_t * const char * const char * const char * const char * const char * const char * const char * const char * const char * const char * const char * const char * const char * const char * const char * const char * oxcf ; if ( strcmp ( option_value == 0 ) ) { if ( svc_ctx -> option_type == VPX_CODEC_TYPE_FACTOR ) ; break ; } else if ( strlen ( option_type == NULL ) ) { if ( svc_ctx -> option_type == VPX_FACTOR ) { svc_type == VPX_CODEC_TYPE_FACTOR ) ; } else if ( strlen ( option_type == 0 ) > 0 ) { if ( strlen ( svc_mode ) - 1 ) break ; } else { if ( strlen (",0
1500,<S2SV_ModStart> ( event ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1501,<S2SV_ModStart> ) ) { if ( ( s == '\\0' ),0
1502,<S2SV_ModStart> ; if ( entry == NULL ) return EINVAL ; if ( <S2SV_ModStart> KADM5_POLICY ) && entry -> policy == NULL <S2SV_ModEnd> ) return KADM5_BAD_MASK <S2SV_ModStart> ; if ( ( mask & KADM5_POLICY ) && ( mask & KADM5_POLICY_CLR ) ) return KADM5_BAD_MASK <S2SV_ModEnd> ; if (,1
1503,<S2SV_ModStart> frame -> data [ plane ] && frame -> linesize <S2SV_ModStart> [ plane ] && frame -> linesize [ plane ],1
1504,"<S2SV_ModStart> ""\\",0
1505,<S2SV_ModStart> * self ; size_t new_memo_size = 0 <S2SV_ModEnd> ; if (,0
1506,,1
1507,<S2SV_ModStart> },0
1508,<S2SV_ModStart> ; if ( imp_dbh ->pm = 0 &&,0
1509,<S2SV_ModStart> { TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ; <S2SV_ModEnd> } },0
1510,"<S2SV_ModStart> ; uint16_t thdr ; memset ( phdr, 0, sizeof ( phdr ) ) ;",0
1511,<S2SV_ModStart> + hdr ; size_t <S2SV_ModEnd> = 0 ;,0
1512,<S2SV_ModStart> int ret ; if (! context -> width ) return FALSE,0
1513,<S2SV_ModStart> while ( offset > 0 && offset <S2SV_ModStart> < end_offset ) { <S2SV_ModStart> hf_keybuffer ) ; },1
1514,<S2SV_ModStart> len = 0 ;,0
1515,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> q ; const VP9EncoderConfig <S2SV_ModEnd> * oxcf <S2SV_ModStart> int oxcf = ( int ) <S2SV_ModEnd> ; const int oxcf <S2SV_ModStart> ; int oxcf -> avg_frame_bandwidth <S2SV_ModEnd> = ( <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> ) ; const int <S2SV_ModStart> = cpi -> avg_frame_bandwidth <S2SV_ModEnd> = ( int ) <S2SV_ModStart> ; if ( rc -> baseline_framerate <S2SV_ModEnd> == INT_MAX_FRAME ) <S2SV_ModStart> ; if ( cpi <S2SV_ModEnd> > 0 && ( <S2SV_ModStart> == INT_MAX_FRAME ) <S2SV_ModEnd> == 0 ) <S2SV_ModStart> == 0 ) { const int kf = ( cpi -> output_boost_boost = ( cpi -> output_frame_bandwidth <S2SV_ModEnd> -> output_boost_boost = <S2SV_ModStart> ; } } },0
1516,<S2SV_ModStart> X86_EFLAGS_RF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1517,"<S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
1518,"<S2SV_ModStart> * r, vpx_read_mode <S2SV_ModEnd> * r ) <S2SV_ModStart> { if ( vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) ) ; return vpx_read_bit <S2SV_ModEnd> ( r,",0
1519,<S2SV_ModStart> op + OSPF6HDR_LEN ) ; ND_TCHECK_32BITS ( & hellop -> hello_options,1
1520,<S2SV_ModStart> { if ( datalen!= 1 ) return - EINVAL ; if (,1
1521,<S2SV_ModStart> rc ) { struct task_struct * <S2SV_ModEnd> task = NULL <S2SV_ModStart> ; if ( WARN_ON ( task ) { rc -> uwbd. task = NULL ; <S2SV_ModEnd> rc -> uwbd <S2SV_ModStart> = NULL ; <S2SV_ModEnd> pid = task,0
1522,,0
1523,,0
1524,<S2SV_ModStart> <S2SV_null> <S2SV_null> static MACROBLOCKD <S2SV_ModEnd> * const <S2SV_ModStart> tx_size ; tran_low_t * td = get_plane [ BLOCK_SIZE tx_size ] ; MACROBLOCKD * const <S2SV_ModStart> tx_size = get_size ( xd -> mbmi. tx_size <S2SV_ModEnd> ) ; const <S2SV_ModStart> tx_size ) ; tran_low_t * const <S2SV_ModStart> tx_size ) ; tran_low_t * const <S2SV_ModEnd> plane_low_t * const <S2SV_ModStart> block ) ; const tran_low_t * const tran_low_t * const tran_low_t * const <S2SV_ModStart> tx_size ) ; const tran_low_t * const tran_t * const tran_low_t * const tran_low_t * const <S2SV_ModStart> block ) ; const tran_low_t * const tran_low_t * const tran_low_t * const tran_low_t * const tran_low_t * const uint8x = get_t <S2SV_ModEnd> ; const uint8_t <S2SV_ModStart> tx_size ; tran_low_t * const uint8_t * t ; const uint8_t * t ; const uint8_t,0
1525,<S2SV_ModStart> ; if ( pSelect == 0 ||,0
1526,<S2SV_ModStart> { if ( ( <S2SV_ModStart> shmflg & SHM_RND ) && addr >= shmlba,1
1527,<S2SV_ModStart> == NULL ) {,0
1528,,0
1529,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1530,<S2SV_ModStart> : case NPNVSupportsWindowless : case NPNVprivateModeBool : case NPNVsupportsAdvancedKeyHandling,1
1531,"<S2SV_ModStart>, MSG_DONTWAIT ; msg -> msg_namelen = 0",0
1532,"<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, 0 )",0
1533,<S2SV_ModStart>,0
1534,<S2SV_ModStart> char * stat <S2SV_ModEnd> ; if (,0
1535,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1536,<S2SV_ModStart> fq ) ; kfree ( q ) ;,0
1537,<S2SV_ModStart> s ) { uint32 length ; struct stream packet = * s <S2SV_ModEnd> ; STREAM,0
1538,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1539,<S2SV_ModStart> int ret ; int ret = _y4m -> codec_type = _y4m -> bits [ VPX4M_IMG_FMT ; int i ] = _y4m -> bit_type = _y4m -> bit_type = 0x4m -> planes [ VPX_IMG_FMT ; if ( void ) _y4m -> bit_type = _y4m -> bit_type = _y4m -> bit_type ; <S2SV_ModStart> -> bit_type = 0x4m -> bit_depth <S2SV_ModEnd> ; } if,0
1540,<S2SV_ModStart> obj ) { if ( otmp == 0 ) return FALSE ;,0
1541,"<S2SV_ModStart> ; int read_table_start <S2SV_ModEnd> ( ) <S2SV_ModStart> ( table_start, <S2SV_ModEnd> ) ) { <S2SV_ModStart> return FALSE ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ( file ) return TRUE ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1542,<S2SV_ModStart> = 0 ; const struct env * env ; <S2SV_ModStart> ; if (! env ) return 0 ;,0
1543,<S2SV_ModStart> if ( ( skb_hdr <S2SV_ModEnd> ( skb ),0
1544,"<S2SV_ModStart> ; int segment_cols ; memset <S2SV_ModEnd> ( seg, <S2SV_ModStart> seg_type ) ; memset <S2SV_ModEnd> ( seg, <S2SV_ModStart> 0 ) ; memset <S2SV_ModEnd> ( seg,",0
1545,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> func_type_type_type, type_types, 0 <S2SV_ModStart>, type_type_type, ++, <S2SV_ModStart> \\n"" ) ; if (! get_type_type_type ( cm, 0 ) ) { return 0 ; } <S2SV_ModStart>, ""Module <S2SV_blank> Type"", desc_type_type_type_type_type ( cm -> type, 0 ) ; <S2SV_ModStart> \\n"" ) ; if (! get_type ) return 0 <S2SV_ModStart> \\n"" <S2SV_ModEnd> ; if ( <S2SV_ModStart> "" ) <S2SV_ModEnd> return 0 ;",0
1546,<S2SV_ModStart> = O_CREAT | O_TRUNC <S2SV_ModEnd> ; if (,0
1547,,0
1548,<S2SV_ModStart> } # endif memset <S2SV_ModEnd> ( x ->,0
1549,"<S2SV_ModStart> ) ; } smb_ofile_flush <S2SV_ModEnd> ( sr, <S2SV_ModStart> f_mutex ) ; smb_ofile_flush <S2SV_ModEnd> ( sr,",1
1550,<S2SV_ModStart> <S2SV_null> <S2SV_null> static uint8_t <S2SV_ModEnd> char_t <S2SV_ModStart> char * s ; size_t <S2SV_ModEnd> u8_t <S2SV_ModStart> int len ; unsigned char * out ; size_t len = ( u8_t ) <S2SV_ModEnd> char * <S2SV_ModStart> * ) { size_t len = ( unsigned char * ) strlen ( u8_t ) ; if ( u8_t ) return - 1 ; <S2SV_ModStart> } else { if ( <S2SV_ModEnd> ( u16_t ) <S2SV_null>,0
1551,"<S2SV_ModStart> ; if ( * cp == '\\0' || <S2SV_ModEnd> strchr ( cp <S2SV_ModStart> )!= NULL || <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> ( cp, ""."" ) == 0 || strcmp ( cp, <S2SV_ModStart> ) == 0 <S2SV_ModEnd> ) { run_err",1
1552,"<S2SV_ModStart> * output ; <S2SV_ModEnd> const char * <S2SV_ModStart> * out ; unsigned int num = 0 <S2SV_ModStart>, argbuf ; unsigned int num2 <S2SV_ModEnd> = 0 ; <S2SV_ModStart> * out = 0 ; printf ( "" <S2SV_blank> \\n"" ) ; exit ( c, arg1 <S2SV_ModEnd> == '\\0' ) <S2SV_ModStart> ) ) { printf ( ""%4.\\n"", c ) ; free ( c ) ; return ( c, c ) ; } <S2SV_ModStart> } return ( <S2SV_ModEnd> arg2 ) ;",0
1553,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : ms -> elf_notes_max = ms -> elf_notes_max ;,0
1554,"<S2SV_ModStart> segs ) { <S2SV_ModEnd> u32 hash, <S2SV_ModStart>, id ; if ( unlikely ( siphash_key_is_zero ( & net -> ipv4. ip_id_key ) ) ) get_random_key ( & net -> ipv4. ip_id_key <S2SV_ModEnd>, sizeof ( <S2SV_ModStart>, sizeof ( net -> ipv4. ip_id_key <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ; hash = siphash_4. ip_key <S2SV_ModEnd> ; hash =",0
1555,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { Py_CLEAR ( tmp ) ; } if ( lookup_attr_id ( obj, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> \\"" <S2SV_blank> \\"" <S2SV_blank> \\"" <S2SV_blank> \\"" <S2SV_blank> "" ) ; return 1 ; } if ( lookup_attr_id ( obj, & tmp ) < 0 ) { int res <S2SV_ModEnd> ; res = <S2SV_ModStart> ) ; } if ( lookup_attr_id ( obj, & PyId ( obj, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( Py_CLEAR ( tmp ) ; } else { int res ;",0
1556,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
1557,"<S2SV_ModStart> ctl -> pw, "".chfn""",1
1558,<S2SV_ModStart> { if ( max_length < sizeof ( struct ieee80211_radiotap_header ) ) return - EINVAL ; if ( <S2SV_ModStart> iterator -> _rtheader + sizeof ( uint32_t ),1
1559,<S2SV_ModStart> <S2SV_null> <S2SV_null,0
1560,<S2SV_ModStart> src -> cur_frames ; },0
1561,"<S2SV_ModStart> return ; } if ( input <= 0.0 || input <= 0.0 ) { php_error_docref ( NULL TSRMLS_CC, E_FALSE ; RETURN_FALSE ; }",0
1562,<S2SV_ModStart> S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> vpx -> stats. stats <S2SV_ModEnd> g_in_pass = 0,0
1563,<S2SV_ModStart> -> dev ; cmd = cmd -> dev ;,0
1564,<S2SV_ModStart> ; if ( value == 0 &&,0
1565,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
1566,<S2SV_ModStart> <S2SV_null> <S2SV_null> static VP9EncoderConfig <S2SV_ModEnd> * const VP9EncoderConfig <S2SV_ModStart> * const cm = & pbi -> frame_data ; struct vpx_codec_init_init <S2SV_ModEnd> * const cm <S2SV_ModStart> = 0 ; vpx_codec_init_init <S2SV_ModEnd> ( ) ; <S2SV_ModStart> return NULL ; vpx_codec_init_init <S2SV_ModEnd> ( ) ; <S2SV_ModStart> = 1 ; vpx_codec_init_init <S2SV_ModEnd> ( ) ;,0
1567,<S2SV_ModStart> ) ) { if ( s -> df ) return GF_FALSE ; } if (,0
1568,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1569,<S2SV_ModStart> -> count ; new_fpl -> user = get_uid ( fpl -> user ) ;,1
1570,<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> opt -> inet_opt <S2SV_ModEnd> ; if (,0
1571,"<S2SV_ModStart> tree, const vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> * tree, vpx_tree <S2SV_ModEnd> * tree )",0
1572,"<S2SV_ModStart> vpx_codec_alg_priv_t res ; vpx_codec_alg_priv ( ctx ) ; <S2SV_ModStart>, & ctx ) <S2SV_ModEnd> ; if (",0
1573,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 0 ;,0
1574,<S2SV_ModStart> ) ; struct mnt_namespace * ns = dest_mnt -> mnt_ns ; struct <S2SV_ModStart> ; if (! parent_ns ) { err = count_mounts ( dest_mnt <S2SV_ModEnd> ) ; if <S2SV_ModStart> goto out ; } if ( ns -> mnt_ns ) goto out ;,0
1575,"<S2SV_ModStart>, & len, 0",1
1576,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = _mm_set1_epi16 ( ( int16_t ),0
1577,"<S2SV_ModStart> int oxcf, const VP9_COMMON * oxcf <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> max_bandwidth <S2SV_ModEnd> * oxcf )",0
1578,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ int,0
1579,"<S2SV_ModStart> int n, maxoffset <S2SV_ModEnd> ) { return",0
1580,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart>, BLOCK_SIZE bsize, MACROBLOCKD * x <S2SV_ModEnd> ) { int <S2SV_ModStart> -> common ; MACROBLOCKD * const x = & cpi -> td. <S2SV_ModStart> -> mbmi_mode_mode ; MACROBLOCKD * const x -> common ; MACROBLOCKD * const x = & cpi -> common ; MACROBLOCKD * const x -> mbmi_cols = & cpi -> common ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. skip && cm -> oxcf. mbmi_ext!= VP9_COMMON * x -> oxcf. mbmi_MODE_HIGHBITDEPTH ) { x -> mbmi_ext = x -> mbmi_ext_ext_ext ; vpx_read <S2SV_ModEnd> ( cpi <S2SV_ModStart> ) ) ; } # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. flags & YV12_FLAG_HIGHBITDEPTH ) { x -> mbmi_ext = vp9_get_error <S2SV_ModEnd> ( cpi, <S2SV_ModStart> frame ) ; } # if CONFIG_VP9_HIGHBITDEPTH vp9_",0
1581,<S2SV_ModStart> ; size < 2,0
1582,"<S2SV_ModStart> key ) { <S2SV_ModEnd> char * tfm_des <S2SV_ModStart> ] ; struct crypto_cipher * tfm_des <S2SV_ModEnd> ; tfm_des = <S2SV_ModStart> ; tfm_des <S2SV_ModEnd> ( tfm_des, <S2SV_ModStart>, 0, out <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
1583,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1584,"<S2SV_ModStart> ) { int i ; int <S2SV_ModEnd> = 0 ; <S2SV_ModStart> ) ) { av_log ( ctx, AV_LOG_ERROR, ""invalid <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> %d\\n"", value ) ; return AVERROR ( 1 ) ; } <S2SV_ModStart> ; } if ( <S2SV_ModEnd> value <S2SV_null> <S2SV_null>",0
1585,<S2SV_ModStart> i > pos + delta <S2SV_ModStart> off + 1 <= pos + delta <S2SV_ModEnd> ) insn ->,1
1586,<S2SV_ModStart> case EXIT_REASON_INVEPT : case EXIT_REASON_INVVPID :,1
1587,<S2SV_ModStart> } if ( ( c == NULL ) &&,0
1588,"<S2SV_ModStart> = NULL, memcpy <S2SV_ModEnd> (PACKET,",0
1589,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
1590,"<S2SV_ModStart> ++ r ; if <S2SV_ModEnd> ( pow ( <S2SV_ModStart>, dim ) <= entries ) return - 1 ; if <S2SV_ModEnd> ( ( int <S2SV_ModStart> dim ) ) > entries ) return - 1 <S2SV_ModEnd> ; return r",1
1591,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> ; } } return ( <S2SV_ModStart> dds_info, exception ) ) <S2SV_ModEnd> ; } <S2SV_null>",0
1592,<S2SV_ModStart> ; if ( skb -> opt.,0
1593,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1594,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL )",0
1595,<S2SV_ModStart> y3 ) { sprintf ( outputpos ) ;,0
1596,"<S2SV_ModStart> cfg ) { struct stat st ; FILE * file = NULL ; int fd = - 1 ; <S2SV_ModStart> } else { fd = open ( filename, O_WRONLY | O_WRONLY | O_CLOEXEC | O_NOFOLLOW | O_NOCTTY ) ; file = - 1 ; if ( fstat ( fd <S2SV_ModEnd>, & st <S2SV_ModStart> == 0 ) { fd = 1 ) fclose ( fd <S2SV_ModEnd>, ""a"" ) <S2SV_ModStart> } } } if ( fd!= - 1 ) close ( fd ) ; file = - 1 ; file = - 1 ; file = - 1 ; file = - 1 ; if ( fd!= - 1 ) fclose ( fd <S2SV_ModEnd> ) ;",0
1597,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! f2fs_readonly (,1
1598,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
1599,"<S2SV_ModStart> ( outputbuffer ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f\\n"" <S2SV_ModEnd>, outputbuffer ) <S2SV_ModStart> ( outputbuffer ) ; sendClean ( outputbuffer ) ;",0
1600,<S2SV_ModStart> wdp ) ; if ( rdp -> type == 0 ) return FALSE ;,0
1601,<S2SV_ModStart> ) { memset <S2SV_ModEnd> ( & user,0
1602,<S2SV_ModStart>,0
1603,<S2SV_ModStart> == ARPHRD_ETHER ) { <S2SV_ModStart> ether_setup ) ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; },1
1604,"<S2SV_ModStart> * data ; struct stream packet = * s ; <S2SV_ModStart> ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } if (",1
1605,<S2SV_ModStart> ( pbi ) ; if ( void ),0
1606,<S2SV_ModStart> { if ( l == NULL ) break ; if (,1
1607,<S2SV_ModStart> } if ( ( xWantedSize > 0 ) &&,0
1608,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1609,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1610,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpDiff ( TIFF <S2SV_ModStart> cc ) ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> stride ) )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""fpDiff"", ""%s"", ""(cc%(bps*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> tmp ) return 0 <S2SV_ModStart> cp -- ) return 1 ;",1
1611,<S2SV_ModStart> int i ; uint 8 <S2SV_ModEnd> = 0 ; <S2SV_ModStart> 0 ) { if (! s ) return ; },0
1612,,0
1613,"<S2SV_ModStart> ) ) { ND_TCHECK2 ( * tptr, sizeof ( struct optr ) ) ; <S2SV_ModStart> * msg ; }",0
1614,<S2SV_ModStart> { uint16 bitspersample = 1,0
1615,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1616,"<S2SV_ModStart> coef_probs, vpx_coef_probs <S2SV_ModEnd> ) { const <S2SV_ModStart> ] ; vpx_prob <S2SV_ModEnd> * coef_probs [",0
1617,"<S2SV_ModStart> ( fd, NULL <S2SV_ModEnd> ) ; r",0
1618,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 2 ] = 0x80 ; state -> data [ 2 ] = 0x0 ; if ( dvb_usb_generic_rw ( d, state -> data, state -> data, state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x80 ; state -> data [ 2 ] = 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; state -> data [ 1 ] = 0x80 ; state -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 2 ] = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state",0
1619,<S2SV_ModStart> inode ) { <S2SV_ModEnd> return 0 ;,0
1620,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1621,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> vpx_encode <S2SV_ModEnd> ( x, <S2SV_ModStart> uv_stride, vpx_prob <S2SV_ModEnd> ( y, <S2SV_ModStart> ) ) ; vpx_prob <S2SV_ModEnd> ( y,",0
1622,<S2SV_ModStart> ; if (! bufp ) return FALSE,0
1623,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int n, cJSON_Number, cJSON_Number, cJSON_Number, cJSON_Number, cJSON_New_Number, cJSON_Number <S2SV_ModStart> = 0 ; if ( n ) cJSON_New ( n ) ; <S2SV_ModEnd> for ( i <S2SV_ModStart> == 0 ) { cJSON_New ( c, n ) ; <S2SV_ModEnd> for ( i = c",0
1624,,0
1625,<S2SV_ModStart> ; int iinfo -> i_len <S2SV_ModEnd> ; struct bs <S2SV_ModStart> goto out_offset ; if ( i_len < bs ) goto out ; bs = bs ->,0
1626,"<S2SV_ModStart>, n ) ; if ( w == NULL ) return 0",1
1627,<S2SV_ModStart> ; if ( ( n + 4 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ) ) ; },0
1628,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
1629,<S2SV_ModStart> 1 ) { if ( <S2SV_ModEnd> ( start <S2SV_ModStart> ) ) return ; # ifdef LIBRAW_BUILD,0
1630,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; err =,0
1631,"<S2SV_ModStart> -> seg ; vpx_reader <S2SV_ModEnd> * seg ; <S2SV_ModStart> ) return ; vpx_write_bit <S2SV_ModEnd> ( seg, <S2SV_ModStart> i ) { vpx_read_bit <S2SV_ModEnd> ( seg, <S2SV_ModStart> i ) ; vpx_write_bit <S2SV_ModEnd> ( seg, <S2SV_ModStart> ; if ( segfeature_active_active ( i ) ) { vpx_set_segdata <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ; } vpx_read_bit <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ; } vpx_write_bit <S2SV_ModEnd> ( seg,",0
1632,<S2SV_ModStart> ( * sk ) return - EINVAL ; if (,0
1633,"<S2SV_ModStart> ( void ) TIFFGetFieldDefaulted <S2SV_ModEnd> ( in,",1
1634,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
1635,,0
1636,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1637,"<S2SV_ModStart> ""corrupt <S2SV_blank> BSON"" ) ; VALIDATE_TEST ( ""corrupt <S2SV_blank> BSON"" ) ;",0
1638,<S2SV_ModStart> ) return - 1,0
1639,<S2SV_ModStart> * ps_dec ) <S2SV_ModEnd> ; ps_dec ->,0
1640,<S2SV_ModStart> -> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock,0
1641,<S2SV_ModStart> goto error ; if ( key_data == NULL ) goto cleanup ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( key_data. key_size <S2SV_ModStart> goto cleanup ; <S2SV_ModEnd> for ( i,0
1642,"<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1643,<S2SV_ModStart> return - mode <S2SV_ModEnd> ; if (,0
1644,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 2 ] = 0x80 ; state -> data [ 2 ] = 0x0 ; if ( dvb_usb_generic_rw ( d, state -> data, state -> data, state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x80 ; state -> data [ 2 ] = 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; state -> data [ 1 ] = 0x80 ; state -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 2 ] = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state",0
1645,<S2SV_ModStart> int getnum ( <S2SV_ModEnd> t ),0
1646,<S2SV_ModStart> L ) ; g -> gcstate = GCSswpallgc ;,0
1647,<S2SV_ModStart> ; int ret = - 1 <S2SV_ModEnd> ; if (,0
1648,"<S2SV_ModStart> } else { memset ( c, 0, sizeof ( * buffer ) ;",0
1649,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> cib_socket = 0 ; int disconnected = 0 ; int <S2SV_ModEnd> cib_remote_socket = 0 <S2SV_ModStart> cib_conn_id ; int ret = 0 ; int ret = 0 ; port -> session_id = 0 ; if (! remote_addr ) return - EINVAL ; <S2SV_ModStart> cib_socket = 0 ; <S2SV_ModEnd> cib -> peer,0
1650,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ) ; } memcpy <S2SV_ModEnd> ( cpi ->,0
1651,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
1652,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
1653,"<S2SV_ModStart> p, len <S2SV_ModEnd> ) ; }",0
1654,"<S2SV_ModStart> ctx, expr -> unary. child",1
1655,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1656,"<S2SV_ModStart> int mptctl_ioctl_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; if ( <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } dctlprintk",0
1657,"<S2SV_ModStart> image_info ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { image -> exception ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; return ( CorruptImageError, ""ImproperImageHeader"" ) ; }",0
1658,,0
1659,<S2SV_ModStart> = 0 ; new_mode [ i ] = true ;,0
1660,"<S2SV_ModStart> void update ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> ) { const vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) ; return vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) ; } <S2SV_null> <S2SV_null> <S2SV_null>",0
1661,<S2SV_ModStart> ; int is_valid = ( error == GIT_OK ) <S2SV_ModStart> giterr_clear ( ) <S2SV_ModEnd> ; error =,1
1662,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
1663,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> ) { const PREDICTION_MODE <S2SV_ModEnd> cm -> fc",0
1664,"<S2SV_ModStart> ; } ; set_msg ( g, 0,",0
1665,<S2SV_ModStart>. stream ) <S2SV_ModEnd> ; vpx_codec_ctx ( <S2SV_ModStart> config ) ; <S2SV_ModEnd> stream -> config <S2SV_ModStart> = 1 ; # if CONFIG_VP9_HIGHBITDEPTH,0
1666,<S2SV_ModStart> ND_TCHECK ( ep ) ;,0
1667,<S2SV_ModStart> 0 ) ; yr_address = 0 ;,0
1668,"<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return 0 ; } unix_dgram_peer ( sk, other ) ;",0
1669,<S2SV_ModStart> if ( iter == NULL <S2SV_ModEnd> ) { str,0
1670,<S2SV_ModStart> ; if ( skb -> len < sizeof ( struct nlattr ) ) return 0 ; if ( <S2SV_ModStart> -> nla_len > <S2SV_ModEnd> skb -> len <S2SV_ModStart> skb -> len - A,1
1671,"<S2SV_ModStart> ]. size ; if ( ~ length < 16 ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" )",1
1672,,0
1673,"<S2SV_ModStart> -> cac_id, serial -> len <S2SV_ModEnd> ) ; SC_FUNC_RETURN",1
1674,<S2SV_ModStart> = 0 ; tok -> token = NULL ; tok -> token = NULL ; tok -> token = 0 ;,0
1675,<S2SV_ModStart> ; av_assert ( av_decode ) ; if (,0
1676,<S2SV_ModStart> ) ) { if ( s -> dref &&,0
1677,<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> buffer = 0,0
1678,<S2SV_ModStart> ; if ( ddp -> picSize > 1024 ) { return 0,0
1679,<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> (! sock ||! addrlen ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_in > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> ) ; } if ( addrlen_in > sizeof ( struct oe_sockaddr_sockaddr_in ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ;,0
1680,,1
1681,"<S2SV_ModStart> s ) ; if (! <S2SV_ModStart>, length ) ) return FALSE",0
1682,"<S2SV_ModStart> sk, final ; struct ipv6_txoptions * opt <S2SV_ModStart> ) ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( ) ) ;",0
1683,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> uint64_t <S2SV_ModEnd> uint32_t * <S2SV_ModStart> int minsize, minsize, size_t * maxsize <S2SV_ModStart> = 0 ; uint32_t * maxsize = maxsize ; uint32_t * psize = 0 ; uint32_t * maxsize = 0 ; uint32_t rsize = maxsize ; uint32_t * psize = 0 ; uint32_t * psize = 0 ; uint32_t * psize = max_image_size ; uint32_t * psize = malloc ( 0, 0, sizeof ( * psize ) - 1 ) ; <S2SV_ModStart> = malloc ( u32_t ) <S2SV_ModEnd> ; int",0
1684,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPCR, DM9000ReadReg ( DM9000_EPCR ) ; dm9000ReadReg ( DM9000_EPCR ) ; <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPOS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPCR_ERPR <S2SV_ModEnd> ) ; }",0
1685,"<S2SV_ModStart>, buffer, t2p -> tiff_datasize,",1
1686,"<S2SV_ModStart> ; if ( capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) ) ||! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) ) return - EPERM",0
1687,<S2SV_ModStart> int ret ; if (! context -> width ) return FALSE,0
1688,<S2SV_ModStart> inode -> i_ext <S2SV_ModEnd> ) { struct,0
1689,"<S2SV_ModStart> new_parent ) { <S2SV_ModEnd> __ptrace_link ( child <S2SV_ModStart>, new_parent, current_cred ( ) <S2SV_ModEnd> ) ; }",1
1690,<S2SV_ModStart> 0 ) ; yr_address = 0 ;,0
1691,<S2SV_ModStart> rc ) { rc = 0 ; <S2SV_ModStart> } else { rc = <S2SV_ModEnd> rc -> callback,0
1692,<S2SV_ModStart> size = 0 ; if ( unlikely (! address ) ) return - EFAULT,0
1693,"<S2SV_ModStart> -> mv_mv ; const VP9_COMMON * x -> mv_mv = & x -> mv_mv ; struct MV_mv_mv ; memset <S2SV_ModEnd> ( x -> <S2SV_ModStart> x, 0, 0, sizeof ( x -> mv_mv ) ) ; for ( n_mv = 0 ; i < max_mv -> bit_type ; ++ ) { for ( i = 0 ; i < BLOCK_SIZE bsize ; ++ ) { for ( i = 0 ; i < MAX ( cpi -> max_mv. stride <S2SV_ModEnd> ) ; <S2SV_ModStart> 1 ) { 0 ; }",0
1694,<S2SV_ModStart> ; if ( h -> fd == NULL ) { goto error ; } if (,0
1695,<S2SV_ModStart> ; # ifdef APLOG_INFO == NULL ) if (,0
1696,"<S2SV_ModStart> ( msg_sys && msg_sys -> msg_sys <S2SV_ModEnd> -> name,",0
1697,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
1698,"<S2SV_ModStart> number_colormaps, number_planes, number_planes_filled <S2SV_ModStart> -> rows ; number_planes_filled = ( number_planes + 1 ) > 0 ) ThrowReaderException ( CorruptImageError, ""MemoryAllocationFailed"" ) ;",0
1699,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> if (!,0
1700,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1701,<S2SV_ModStart> client ) { <S2SV_ModEnd> if ( client,0
1702,<S2SV_ModStart> == 0 ) <S2SV_ModEnd> return 1 ;,0
1703,<S2SV_ModStart> ) ; return FALSE ;,0
1704,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1705,,0
