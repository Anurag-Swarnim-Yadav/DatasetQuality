,raw_predictions,correctly_predicted
0,<S2SV_ModStart> goto out ; <S2SV_ModEnd> if (!,0
1,<S2SV_ModStart> ; if (,0
2,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
3,,0
4,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",0
5,<S2SV_ModStart> buf ) { if ( len < 1 ) { return 0 ; } <S2SV_ModStart> outbuf ) ; },0
6,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
7,<S2SV_ModStart> = 0 ; senseptr -> senseptr = sense ; senseptr -> senseptr = sense ; senseptr -> senseptr = senseptr -> senseptr <S2SV_ModEnd> ; senseptr,0
8,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
9,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> intra_t * <S2SV_ModStart> int intra_err_filter_filter_frame ; int filt filt filt * cpi <S2SV_ModEnd> ; int filt <S2SV_ModStart> -> oxcf -> oxcf. <S2SV_ModStart> -> oxcf. sf_log2 ; int filt_log2 = 0 ; int filt * oxcf -> oxcf -> oxcf. sf_log2 ; int filt_err_frame = 0 ; int filt_err_off = 0 ; int filt filt_err_off = 0 ; int filt_offset = 0 ; int filt_err_offsets <S2SV_ModEnd> ; int <S2SV_ModStart> ; int filtok_offsets <S2SV_ModEnd> ; int filtok <S2SV_ModStart> break ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( cpi ) { int filt_err_err_err ( cpi ) ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if (,0
10,"<S2SV_ModStart> ++ ) { luaL_checkstack <S2SV_ModEnd> ( L,",0
11,"<S2SV_ModStart> int vpx_reader <S2SV_ModEnd> * w, <S2SV_ModStart> ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ; vpx_write_literal <S2SV_ModEnd> ( w,",0
12,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
13,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",0
14,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
15,<S2SV_ModStart> = 0 ;,0
16,<S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_l2tpaddr ) ) return - EINVAL ; if ( addr_len < 0 ) goto out <S2SV_ModEnd> ; if (,0
17,,0
18,,0
19,,0
20,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",0
21,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
22,"<S2SV_ModStart> ( const FIRSTPASS_STATS * twopass, const FIRSTPASS_STATS * twopass, const FIRSTPASS_STATS * twopass, twopass, const FIRSTPASS_STATS * twopass ) { const FIRSTPASS_STATS * const FIRSTPASS_STATS * twopass = & twopass -> twopass -> twopass -> twopass. twopass. twopass. twopass -> twopass. twopass. twopass. twopass. twopass, twopass -> twopass. twopass -> twopass. twopass. twopass. twopass, twopass -> twopass. twopass -> twopass -> twopass. twopass -> twopass. twopass. twopass, twopass -> twopass -> twopass. twopass -> twopass. twopass. twopass -> stats <S2SV_ModEnd> ) && FIRSTPASS_rate",0
23,<S2SV_ModStart> inode ) ; spin_lock_irqsave ( & EXT4_I ( inode -> i_mmap ) ;,0
24,<S2SV_ModStart> mask ) ; if ( len < 0 ) return false ;,0
25,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ptr,0
26,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
27,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ;,0
28,"<S2SV_ModStart> ; if ( safe_mount <S2SV_ModEnd> ( path,",0
29,<S2SV_ModStart> -> io = io_cleanup <S2SV_ModEnd> ( io ->,0
30,,0
31,,0
32,,0
33,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> rolloverflow_rollover ) { <S2SV_ModStart> rollover ) { err = - EINVAL ; goto out_err ; } <S2SV_ModStart> rollover ) ; err = - EINVAL ; goto out_rollover = - EINVAL ; err = - EINVAL ; if ( rolloverflow ( rolloverflow ( rollover ) ) goto out ; err = - EINVAL ; err = - EINVAL ; err = - EINVAL ; if ( rollover ) goto out ; err = - EINVAL ; err = - EINVAL ; err = - EINVAL ; err = - EINVAL ; goto out_rolloverflow ( rollover ) ; err = - EINVAL ; if ( rollover ) goto out_rollover = - EINVAL ; err = - EINVAL ; err = - EINVAL ; if ( rolloverflow ( rollover ) goto out_rolloverflow ( rollover ) ; err = - EINVAL ; rollover = - EINVAL ; if ( rollover ) goto out_rolloverflow ( rollover ),0
34,,0
35,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
36,<S2SV_ModStart> ; int i <S2SV_ModEnd> ; if (,0
37,"<S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd>, interface, ENC28J60_ECON1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC28J60_ECON2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd>, interface, ENC28J60_ECON2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC28J60_ECON2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC28J60_ECON2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC28J60_ECON2 <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_ECON2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC28J60_ECON2 <S2SV_ModEnd> ) ) ; interface <S2SV_ModStart> ( interface, ENC28J60_ECON2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC28J60_ECON2 <S2SV_ModEnd> ) ) ; interface <S2SV_ModStart> ( interface, ENC28J60_ECON2 <S2SV_ModEnd> ) ) ; interface <S2SV_ModStart> ( interface, ENC28J60_ECON2 <S2SV_ModEnd> ) ; interface, ENC28",0
38,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,0
39,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
40,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
41,"<S2SV_ModStart> ; cmd = cmd <S2SV_ModEnd> ( cmd,",0
42,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> int error <S2SV_ModStart> int error ; mb2_cache_cache_cache_cache_entry_cache ( bh, mb2_cache, mb2_cache, mb2_cache, mb2_cache_cache, mb2_cache, mb2_cache <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( bh -> b_cache, b_cache, b_cache <S2SV_ModEnd> ) ; }",0
43,,0
44,<S2SV_ModStart> { struct ip_options_rcu <S2SV_ModEnd> * opt_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> opt.,0
45,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
46,,0
47,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & acl",0
48,"<S2SV_ModStart> ; if ( jas_eprintf ( jas_stream_size, jas_stream_size <S2SV_ModEnd> ) ) { jas_memopen2",0
49,,0
50,,0
51,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> ipvdup_inc ( hdr <S2SV_ModStart> ; if ( hdr_hdrlen < 1 ) return - EINVAL ; if ( hdrlen < 0 ) return - EINVAL ;,0
52,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
53,,0
54,"<S2SV_ModStart> ( memset <S2SV_ModEnd> ( addr,",0
55,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
56,<S2SV_ModStart> ; if ( cmd == NULL ||,0
57,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) ; rcu_read_unlock ( ) ;",0
58,,0
59,,0
60,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
61,<S2SV_ModStart> = 0 ; size_t ext_size = 0 ;,0
62,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
63,,0
64,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
65,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
66,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
67,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) * number_planes_filled <S2SV_ModEnd> ; pixels =",0
68,<S2SV_ModStart> ) ) ; if ( alt -> desc. bNumEndpoints < 1 ) return - ENODEV ;,0
69,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { switch",0
70,"<S2SV_ModStart> ( tmpname, NULL <S2SV_ModEnd> ) ; }",0
71,,0
72,,0
73,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static const vpx_reader <S2SV_ModEnd> * const <S2SV_ModStart> int src_stride, const int src_stride <S2SV_ModEnd> * const <S2SV_ModStart> stride ) { const int src_stride ; const int src_stride ; const int src_stride <S2SV_ModEnd> ( src_stride, <S2SV_ModStart> stride ) ; const int src_stride ; const int src_stride = src_stride ; const int src_stride ; const int src_stride = vpx_buffer_buffer ( src_src, src_stride, src_stride, src_stride, src_stride, src_stride, src_stride, dst_stride, src_stride, src_stride, src_stride, dst_stride, src_stride, dst_stride, src_stride, src_stride, src_stride, src_stride, dst_stride, dst_stride, src_stride, src_stride, src_stride, dst_stride, src_stride, src_stride, dst_stride, src",0
74,<S2SV_ModStart> <S2SV_null> static inline,0
75,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
76,<S2SV_ModStart> ; int ret = 0 <S2SV_ModEnd> ; if (,0
77,,0
78,"<S2SV_ModStart> * f ; Py_RETURN_NONE, 1 ) ; if (! strlen ) { Py_DECREF ( Py_TYPE_COMMENT ) ; return 1 ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { Py_DECREF ( strlen ) ; } <S2SV_ModStart> ) ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) return 1 <S2SV_ModEnd> ; } <S2SV_null>",0
79,,0
80,,0
81,,0
82,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) ) ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",0
83,<S2SV_ModStart> ) ) ; if (!,0
84,<S2SV_ModStart> ) ) { <S2SV_ModEnd> if (!,0
85,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
86,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
87,<S2SV_ModStart> ) ) { memcpy <S2SV_ModEnd> ( cpi ->,0
88,<S2SV_ModStart> ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
89,,0
90,"<S2SV_ModStart> * n ; int n_async = 0 ; int n0, n0, n0, n0, n0 ) ; if ( n0 ) == 0 ) { n = 0 ; n0 ; n0 = ( n0, n0, n0, n0 ) ; if ( n0 ) == 0 ) { n_async_async_async_async_async_async ( n, ""async"" ) ; } else <S2SV_ModStart> n_async_async_async_async ( n, n, n, n, n0 ) ; for ( i = 0 ; i = 0 ; n0 ; i = 0 ; i = 0 ; n0 ; i = 0 ; i < n0 ) { for ( i = 0 ; i = 0 ; i = 0 ; i = 0 ; i < n0 ; n0 ; i ++ i ++ ) { if ( n0 ( n, n, n, n, n0 ) == 0 ) { n0 = 0 ; n0 ( n0 ) ; for ( i = 0 ; i = 0 ; i = 0 ; i = 0 ; i = 0 ; n0 ; i = 0",0
91,,0
92,"<S2SV_ModStart> * cpi, ThreadData * td, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, & xd -> mb ; MACROBLOCKD * xd -> mb ; const xd -> mbmi_ext = x -> mbmi ; const MB_MODE_INFO * xd -> mbmi_ext = xd -> mbmi ; const MB_INFO * const xd -> mbmi_ext = xd -> mbmi_ext ; const PREDICTION_MODE_INFO * mbmi_ext = xd -> mbmi_ext ; const int xd -> mbmi_ext = xd -> mi_ext ; const PREDICTION_MODE_INFO * xd -> mbmi_ext = xd -> mi ; const PREDICTION_MODE_ext = MIN ( mbmi_ext ) ; const PREDICTION_MODE mode ; const PREDICTION_MODE mode_MODE mode = mi -> mbmi ; const PREDICTION_MODE mode ; const PREDICTION_MODE mode ; const PREDICT",0
93,,0
94,,0
95,,0
96,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
97,,0
98,,0
99,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
100,,1
101,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
102,,0
103,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
104,<S2SV_ModStart> NULL ) { status = MagickFalse ; break <S2SV_ModEnd> ; } image,0
105,,0
106,<S2SV_ModStart> ( ctx -> <S2SV_ModEnd> ) ) {,0
107,,0
108,"<S2SV_ModStart> write_bit_buffer ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
109,"<S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( cpi,",0
110,,0
111,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
112,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> S2SV_t * sctp_chunk_asconf_addip_chunk_t * sctp_chunk_t * sctp_hdr <S2SV_ModEnd> ; sctp_addip_chunk_t addip_hdr <S2SV_ModStart> -> sctp_chunk_hdr ; if ( sctp_addip_hdr. addip_hdr. addip_hdr. addip_hdr. p -> sctp_chunk_hdr. addip_hdr. addip_hdr. addip_hdr. addip_hdr ( sctp_hdr. p -> sctp_hdr. addip_hdr. addip_hdr. p ) { sctp_hdr = SCTP_PARAM_PARAM_ADDRESS ; sctp_hdr = SCTP_ADDRESS ; sctp_hdr ( err_hdr. p -> sctp_hdr. p -> sctp,0
113,<S2SV_ModStart> exit ; } m -> msg_namelen = 0 ;,0
114,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
115,,0
116,,0
117,<S2SV_ModStart> cpi ) { memset <S2SV_ModEnd> ( & cpi,0
118,"<S2SV_ModStart> ctxt ) { int rc ; ueip ; rc = assign_eip ( ctxt, ctxt, old_desc, old_desc, & old_desc, ctxt, ctxt, rc ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; if ( rc!= X86EMUL_CONTINUE ) return rc ; if ( rc!= X86EMUL_CONTINUE ) return rc ; rc = assign_eip_eip ( ctxt, old_desc, old_desc, & old_desc, ctxt, ctxt, old_desc, ctxt, old_desc, ctxt, & old_desc, ctxt, old_desc, & old_desc, old_desc, ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ;",0
119,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
120,,0
121,,0
122,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { fmode <S2SV_ModStart> ( state, fmode <S2SV_ModEnd> ) ; }",0
123,,0
124,,0
125,,0
126,,0
127,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; break",0
128,,0
129,<S2SV_ModStart> ) ; goto out2 <S2SV_ModEnd> ; } <SV_null>,0
130,<S2SV_ModStart> ; if ( <S2SV_ModEnd> cmp ( ctx,0
131,,0
132,<S2SV_ModStart> ; if ( err &&,0
133,,0
134,,0
135,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( ctx ->,0
136,<S2SV_ModStart> goto out ; msg -> msg_namelen = 0 ;,0
137,,0
138,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; }",0
139,<S2SV_ModStart> ; if ( tilebufsize > 0 || tilebufsize > 0,0
140,<S2SV_ModStart> ; err = <S2SV_ModEnd> memcpy ( &,0
141,<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] =,0
142,,0
143,<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( connection ->,0
144,,0
145,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",1
146,,0
147,,0
148,<S2SV_ModStart> ctxt ) ; if (! X86EMUL_CONTINUE ) return rdx ;,0
149,,0
150,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output,",0
151,,0
152,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> output ) { tran_high_high_high_t <S2SV_ModEnd> x8x8x8x8x8x8 ( tran_low_t <S2SV_ModStart> 8 ] ; tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> 8 ] ; tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> 8 ] ; tran_high_high_t <S2SV_ModEnd> x8 = input <S2SV_ModStart> 8 ] ; tran_low_t <S2SV_ModEnd> 8 = input <S2SV_ModStart> 8 ] ; tran_high_high_high_high_t <S2SV_ModEnd> ( input, <S2SV_ModStart> 8 ] ; tran_high_high_high_t ) ; tran_low_t <S2SV_ModEnd> ( input, <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 8 ] = ( tran_low_t ) <S2SV_ModStart> 8 ] = ( tran_low_t ) <S2SV_ModStart> 8 ] = ( tran_low_t ) <S2SV_ModStart> 8 ] = ( tran_low_t ) ; tran_low_high_high_t ) ; tran_high_low_t ) ; tran_low_t",0
153,<S2SV_ModStart> ) ; return 0 <S2SV_ModEnd> ; if (,0
154,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
155,,0
156,<S2SV_ModStart> mnt_flags |= MNT_LOCK_NODEV ; if ( mnt -> mnt_flags & MNT_READONLY ) { if ( ( mnt. mnt. mnt. mnt. mnt. mnt. mnt_flags & MNT_READONLY ) ) return - EPERM ; } if ( ( mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt_flags & MNT ) ) return - EPERM ; if ( ( mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt_flags & MNT ) && ( mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt_flags & MNT ) ; if ( mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt,0
157,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> y2SV_null> static <S2SV_ModStart> int mi_cols ( VP9_COMMON * xd, MACROBLOCKD * xd, const MACROBLOCKD * xd, const int bsize, xd -> mi_col ) { const int bsl = get_segment_segment_id ( mi, mi, bsize ) ; const int bsize = get_segment_segment_id ( & cm -> mi_cols + mi_cols + mi_cols + mi_cols - mi_col ) ; if ( xd -> mi == BLOCK_SIZE bsize ) { get_segment_segment_id = get_segment_segment_id ( cm, xd, xd, mi, mi_col ) ; return ; } else if ( get_segment_segment_segment_id <S2SV_ModEnd> ( bsize, <S2SV_ModStart> ) ) { get_segment_segment_segment_segment_id <S2SV_ModEnd> ( cm, <S2SV_ModStart> ) ; }",0
158,<S2SV_ModStart> ; if ( c == 0 &&,0
159,<S2SV_ModStart> ; int err = 0 <S2SV_ModEnd> ; if (,0
160,"<S2SV_ModStart> = 0 ; size_t addrlen = 0 ; <S2SV_ModStart>, & addrlen, & addrlen ) ; if ( addrlen > sizeof ( OE_SSIZE_MAX ) { OE_RAISE_ERRNO ( OE_RAISE_ERRNO ( OEINVAL ) ; } memcpy ( & addr, & addrlen, & addrlen, & addrlen, & addrlen, 0, 0, sizeof ( addr ) ) ; if ( addrlen ) { if ( addrlen < 0 ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart> = 0 ; } memcpy ( & addrlen, & addrlen, & addrlen, & addrlen, 0, 0, & addrlen, 0, 0, 0, sizeof ( addrlen ) ; if ( addrlen ) { ret = 0 ; goto out ; } <S2SV_ModStart> ) ; } memcpy ( & addrlen, & addrlen, & addrlen, & addr, & addrlen, & addr, & addrlen, & addr ) ; if ( addrlen < 0 ) { if ( addrlen < 0 ) { if ( addrlen ( addrlen ) { if ( addrlen ( addrlen (",0
161,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( line,",0
162,<S2SV_ModStart> c ) { memcpy <S2SV_ModEnd> ( & cpi,0
163,"<S2SV_ModStart> * buf ; int ret ; buf = kmemdup ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
164,,0
165,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
166,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
167,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
168,,0
169,"<S2SV_ModStart> = getnum ( L,",1
170,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
171,,0
172,<S2SV_ModStart> ; if (! EXT4_SB ( inode -> i_sb ),0
173,"<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n"" ) ;",0
174,,0
175,,0
176,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj,",0
177,<S2SV_ModStart> ; if ( mnt_flags & MNT_LOCK_MASK ) { if ( mnt -> mnt_flags & MNT_NODEV ) return - EPERM ; } if (,0
178,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
179,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
180,"<S2SV_ModStart> -> msg_name ; if ( msg_sys -> msg_name, msg_sys -> msg_namelen ) <S2SV_ModStart> -> msg_namelen = msg_namelen <S2SV_ModEnd> ; if (",0
181,"<S2SV_ModStart> ( bp, bsize <S2SV_ModEnd> ) ; if",0
182,<S2SV_ModStart> ; } } # if CONFIG_VP9_HIGHBITDEPTH_HIGHBITDEPTH ) { ERROR_BUFSIZE_BUFSIZE = 0 ; break ; },0
183,,0
184,"<S2SV_ModStart> * fname, fname, fname <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( fname, fname ) { fprintf ( stderr, ""Error: <S2SV_blank> %s\\n"", fname ) ; exit ( fname ) ; } if (",0
185,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
186,"<S2SV_ModStart> { if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
187,,0
188,"<S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_IR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_R, KSZ8851_IR <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISRXS2SV_null> <S2SV_null>",0
189,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
190,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_DONTWAIT ) )",0
191,<S2SV_ModStart> ; default : if (,0
192,,0
193,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> static,0
194,,0
195,"<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key,",0
196,,0
197,"<S2SV_ModStart>, BPF_ALU64 ) { coerce_reg_to_size ( src_reg, 4 ) ; coerce_reg_to_size <S2SV_ModEnd> ) ; }",0
198,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if (!,0
199,"<S2SV_ModStart> & fl6, rcu_dereference (",0
200,,0
201,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> log2SV_log2SV_log2SV_log2SV_log2SV_log2SV_log2SV_null> <SV_log2SV_null>,0
202,<S2SV_ModStart> ; if ( screen -> screen == NULL ||,0
203,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> bool <S2SV_ModEnd> char * <S2SV_ModStart> char * strlen = NULL <S2SV_ModEnd> ; if ( <S2SV_ModStart> char * str ) { if ( * str ) return NULL ; if ( * end == '\\"" ) { char * end_char * end - 1 ; if ( * end == '\\"" ) return NULL ; } if ( * end == '\\"" ) return NULL ; * end = * str ; if ( * ptr == '\\0' ) return NULL ; * str = * str ; if ( * ptr == '\\"" ) { if ( * ptr == '\\"" ) return NULL ; } else if ( * str ) { if ( * end == '\\"" ) return NULL ; } * const char * str ; if ( * str ) { if ( * str == '\\"" ) { if ( * end == '\\"" ) return NULL ; } if ( * str == '\\"" ) { if ( * str == '\\"" ) return NULL ; } if ( * str == '\\"" ) return NULL ; * str ; } else if ( * str ) { if ( * str ) {",0
204,,0
205,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
206,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
207,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",1
208,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
209,"<S2SV_ModStart> void encode_context ( VP9_COMMON * cm, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd <S2SV_ModEnd>, MODE_INFO * <S2SV_ModStart> BLOCKD * mi <S2SV_ModEnd>, int mi_row <S2SV_ModStart> mi_col ) { VP9_COMMON * const <S2SV_ModStart> BLOCKD * const xd = & xd -> mi_row <S2SV_ModEnd> ; MB_INFO * <S2SV_ModStart> MODE_INFO * mi <S2SV_ModEnd> -> mi_col ; const int <S2SV_ModStart> BLOCK_INFO * mi_col ) { VP9_COMMON * const int mi_row, mi_col, mi_col, mi_row, mi_col, mi_col, mi_col ) ; if ( xd -> mi_col == 0 && cpi -> mi_col == 0 && cpi -> mi_cols == KEY_FRAME ) { MODE_INFO * const PREDICTION_INFO * const PREDICTION_MODE_INFO * cm -> mi_cols = & cpi -> mi_row, mi_col, mi_col ) ; if ( cpi -> mi_colsensitivity == BLOCK_col ) {",0
210,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; if",0
211,"<S2SV_ModStart> ( tmpname, NULL <S2SV_ModEnd> ) ; }",0
212,<S2SV_ModStart> mnt ) ; nd -> last_type = LAST_BIND ;,1
213,"<S2SV_ModStart> opt_len, const struct ip_options_rcu <S2SV_ModEnd> * opt_rcu <S2SV_ModStart> opt ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> opt -> opt. opt_rcu <S2SV_ModEnd> ; opt ->",0
214,,0
215,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> sockaddr ; struct <S2SV_ModStart> err ; if ( addr_len < 0 ) { if ( rdp_hdrlen < 0 ) { err = - ENOMEM ; goto error ; } <S2SV_ModStart> - ENOMEM ; if (! daddr ) { if ( err ) { err = - ENOMEM ; goto error ; } <S2SV_ModStart> NULL ; } if ( err ) { if (! daddr ) { if ( err ) { err = - ENOMEM ; goto error ; } <S2SV_ModStart> - ENOMEM ; if ( daddr ) { if (! daddr ) { if ( err ) { err = - ENOMEM ) { err = - ENOMEM ; goto error ; },0
216,,0
217,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
218,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
219,"<S2SV_ModStart> ; if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
220,,0
221,,0
222,<S2SV_ModStart> * jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_matind_t,0
223,,0
224,,0
225,"<S2SV_ModStart>, int mi_data, MODE_INFO_INFO <S2SV_ModEnd> ) { int <S2SV_ModStart>, ""%s"", mi_row <S2SV_ModEnd> ) ; }",0
226,<S2SV_ModStart> ; if ( <S2SV_ModEnd> size < 16,0
227,,0
228,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
229,<S2SV_ModStart> ; int len <S2SV_ModEnd> ; if (,0
230,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * input,",0
231,,0
232,"<S2SV_ModStart> ( fname = safe_calloc ( <S2SV_ModEnd> ( fname,",0
233,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
234,,0
235,,0
236,"<S2SV_ModStart> uint32 length ; struct stream packet ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""stream <S2SV_blank> overrun"", & packet ) ; }",0
237,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
238,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> "", dest <S2SV_ModEnd> ) ; if",0
239,<S2SV_ModStart> ) ; } if <S2SV_ModEnd> ( fc ->,0
240,"<S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f,",0
241,,0
242,<S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cpi ->,0
243,,0
244,<S2SV_ModStart> ) ; } m_commands = 1 ;,0
245,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
246,,0
247,,0
248,,0
249,,0
250,,0
251,<S2SV_ModStart> i ) ; mutex_lock ( & timer -> timer_list ) ;,0
252,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
253,,0
254,"<S2SV_ModStart>!= NULL ) { if ( strcmp ( password, NULL ) == NULL ) { ret = - EINVAL ; goto error ; }",0
255,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
256,<S2SV_ModStart> bus ] ; if ( bi == NULL ) return NULL ;,0
257,<S2SV_ModStart> ; msg -> msg_namelen = 0,0
258,<S2SV_ModStart> ; if ( s == 0 &&,0
259,"<S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
260,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
261,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
262,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_read_bit <S2SV_ModEnd> ( r,",0
263,<S2SV_ModStart> ; } } if (,0
264,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) ; rcu_read_unlock ( ) ;",0
265,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
266,<S2SV_ModStart> return - 1 <S2SV_ModEnd> ; if (,0
267,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
268,<S2SV_ModStart> ; if ( info. size > 0 ||,0
269,,0
270,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
271,<S2SV_ModStart> ctxt ) { if ( rc!= X86EMUL_CONTINUE ) return rc ;,0
272,"<S2SV_ModStart> list. name, true",1
273,,0
274,,0
275,<S2SV_ModStart> ; if (,0
276,<S2SV_ModStart> ; if ( cmd == NULL ||,0
277,"<S2SV_ModStart> comment, string type_comment, int i, <S2SV_ModStart> ; for_comment = type_comment ; i = type_comment <S2SV_ModEnd> ; i =",0
278,,0
279,"<S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
280,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> ) ) ) rc = <S2SV_ModStart> ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>,1
281,,1
282,,0
283,"<S2SV_ModStart> + psf -> header. indx ; psf -> header. indx = psf -> header. indx ; <S2SV_ModStart> ) ) { if ( psf -> header. indx >= psf -> header. indx ) { psf -> header. indx = psf -> header. indx ; psf -> header. indx = psf -> header. indx ; psf -> header. indx ; psf -> header. indx = psf -> header. indx ; psf -> header. indx ; psf -> header. indx = psf -> header. indx ; psf -> header. indx ; psf -> header. indx = psf -> header. indx ; } <S2SV_ModStart> ( psf -> header. indx, psf -> header. indx, psf -> header. indx <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd> ) ; }",0
284,,0
285,,0
286,"<S2SV_ModStart> perf_event ) ; perf_event_lock ( event, ctx <S2SV_ModEnd> ) ; }",0
287,,0
288,<S2SV_ModStart> ) ) ; if ( len < 4 ) goto trunc ;,0
289,<S2SV_ModStart> ; # if CONFIG_VP9_HIGHBITDEPTH # endif # endif # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH # endif # endif # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH # endif # endif # endif # endif # endif # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH # endif # endif # endif # endif # endif # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH # endif # endif # endif # endif # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH # endif # endif # endif # endif # endif # endif # endif # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH # endif # endif # endif # endif # endif # endif # endif # endif # if CONFIG_VP8_HIGHBITDEPTH # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif # endif #,0
290,"<S2SV_ModStart> ) ; } copy_user <S2SV_ModEnd> ( src,",0
291,<S2SV_ModStart> = 0 ; size_t ext_size = 0 ;,0
292,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
293,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
294,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
295,,0
296,,0
297,<S2SV_ModStart> ( server. ds_enabled <S2SV_ModEnd> ) ; },0
298,,0
299,<S2SV_ModStart> book -> dim && i < n,1
300,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
301,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( x ->,0
302,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
303,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
304,<S2SV_ModStart> ( sk ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> tot_omem_alloc ) ; txopt_put ( sk ) ; },0
305,<S2SV_ModStart> ( sk ) ; memset ( & skb ) ;,0
306,<S2SV_ModStart> current_policy ) ; spin_lock_bh ( & sctp_lock_bh ) ;,0
307,,0
308,<S2SV_ModStart> task ) { <S2SV_ModEnd> del_timer ( & <S2SV_ModStart> -> timer ) <S2SV_ModEnd> ; complete (,1
309,,0
310,,0
311,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
312,"<S2SV_ModStart> NEED_IP ( t, <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModEnd> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED",0
313,,0
314,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1, 0 )",0
315,<S2SV_ModStart> rc ; const VP9EncoderConfig <S2SV_ModEnd> * oxcf ->,0
316,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if (!,0
317,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
318,"<S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( im, <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( mb,",0
319,,0
320,<S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( & pbi,0
321,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> ) ; } exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
322,,0
323,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE PREDICTION_MODE <S2SV_ModEnd> intra_costsse ; PREDICTION_MODE <S2SV_ModStart> best_costsse = vp9_costsse ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( best_sse > 0 ) { UINT_MAX ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITS2SV_HIGHBITDEPTH if ( best_sse > 0 ) { UINT_MAX ; # endif # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH ) { UINT_MAX ; # if CONFIG_VP9_HIGHBITS2SV_HIGHBITSV_HIGHBITSV_HIGHBITDEPTHRESHIGHBITDEPTH if ( best_s > UINT_MAX ) { UINT_MAX ; memset <S2SV_ModEnd> ( best_mv, <S2SV_ModStart> best_mv, best_mv, best_mv,",0
324,,0
325,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
326,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
327,<S2SV_ModStart> { uint16 bitspersample = 1,0
328,"<S2SV_ModStart> ; if ( r == NULL ) { archive_set_error ( & error_number, & error_t ) ; if ( r!= ARCHIVE_MAX ) { archive_set_error ( & error_error, & error_snprintf ( & error_t ) ; } if ( r!= ARCHIVE_FAILURE ) { archive_error ( & error_set_error ( & error_error, & error_number, & error_number, & error_number, & error_t ) ; if ( r < 0 ) { archive_error ( & error_copy ) ; return error_error ( & error_snprintf ( & error_t ) ; } if ( r < 0 ) { error_error ( & error_copy ) { error_error ( & error_error ( & error_t ) ; return error_snprintf ( & error, & error_t ) ; } if ( r!= 0 ) { error_error ( & error_copy ) { error_error ( & error_error ( & error_copy, & error, & error_copy ) ; } if ( error_error ( & error_copy ) { archive_error ( & error_",0
329,<S2SV_ModStart> = NULL ; if ( inode -> i_len > INT_MAX ) goto out ; if ( inode -> i_sb ) goto out ;,0
330,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
331,<S2SV_ModStart> q ) ; if ( q -> mq -> mq ) continue ;,0
332,<S2SV_ModStart> if ( addr + <S2SV_ModEnd> sizeof ( val,0
333,,0
334,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
335,<S2SV_ModStart> ; if ( cmd == NULL ||,0
336,"<S2SV_ModStart> ""`%s\'"", option ) ; geometry = DestroyString ( geometry",0
337,<S2SV_ModStart> ( sk ) ; memset ( & skb ) ;,0
338,,0
339,,0
340,,0
341,,0
342,,0
343,,0
344,,0
345,<S2SV_ModStart> ] ) { memcpy <S2SV_ModEnd> ( xd ->,0
346,<S2SV_ModStart> ) ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
347,"<S2SV_ModStart> * p ; ND_TCHECK2 ( * p ) ; if ( * p == NULL ) { Py_DECREF ( p ) ; return - 1 ; } if ( <S2SV_ModStart> * ) { Py_Printf ( p, ""c"" ) ; } else { Py_CMD2SV_null>",0
348,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
349,<S2SV_ModStart> -> buffer ; if (! ctx -> gf128 ) return - ENOKEY ;,1
350,,0
351,<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi ->,0
352,<S2SV_ModStart> * tl ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,0
353,<S2SV_ModStart> -> u4_first_slice_in_pic = 0,0
354,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
355,,0
356,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) * number_planes_filled <S2SV_ModEnd> ; pixels =",0
357,,0
358,<S2SV_ModStart>. key = 0 <S2SV_ModEnd> ; if (,0
359,,0
360,"<S2SV_ModStart> length ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, length )",0
361,<S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
362,,0
363,,0
364,"<S2SV_ModStart> event_event * event <S2SV_ModEnd> ; int ret <S2SV_ModStart> = perf_event_ctx_lock ( event, <S2SV_ModEnd> ) ; if",0
365,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> intra_mode_mode_mode ( VP9_COMMON <S2SV_ModStart> * cm, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * const PREDICTION_MODE <S2SV_ModEnd> ) { const PREDICTION_MODE <S2SV_ModStart> * r, vpx_read_tree <S2SV_ModEnd> ( r,",0
366,<S2SV_ModStart> ; if ( cmd == NULL ||,0
367,,0
368,<S2SV_ModStart> dev ) ; spin_lock ( & iov ) ;,0
369,,0
370,<S2SV_ModStart> ; if (,0
371,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
372,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static vpx_write_literal ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> * w, vpx_write_bit_literal <S2SV_ModEnd> ( w,",0
373,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
374,,0
375,,0
376,,0
377,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
379,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
380,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
381,,0
382,,0
383,<S2SV_ModStart> ; } } if (,0
384,,0
385,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
386,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs ) ;",0
387,,0
388,,1
389,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
390,,0
391,<S2SV_ModStart> ; const char * prefix <S2SV_ModEnd> ; if (,0
392,,0
393,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
394,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
395,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> return 0 ;,0
396,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
397,<S2SV_ModStart> ; if ( cache_id (,0
398,,0
399,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> char *,0
400,,0
401,<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; char,0
402,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
403,,0
404,"<S2SV_ModStart> ; if (! defined ( image -> width ) ) { if (! defined ( image -> log ) ) { if (! defined ( LOG_ERROR, ""Failed <S2SV_blank> Img\\n"" ) ; return - 1 ; } if (",0
405,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
406,,0
407,,0
408,<S2SV_ModStart> ( arg + 1 <S2SV_ModEnd> ) ; },0
409,<S2SV_ModStart> ; if ( d -> msg_name ) return - EINVAL ; if (,0
410,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
411,"<S2SV_ModStart> ) ; } copy_file_user <S2SV_ModEnd> ( src,",0
412,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
413,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
414,,0
415,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
416,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
417,,0
418,<S2SV_ModStart> ; if ( count == 0 ||,0
419,,0
420,,0
421,<S2SV_ModStart> ( args -> rmtvaluelen <S2SV_ModEnd> ) ; if,0
422,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
423,"<S2SV_ModStart> ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, 0 )",0
424,,0
425,,0
426,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int count -> count <S2SV_ModStart> new_lock ) ; spin_unlock_irq ( & ucounts -> count, ucounts ) ; spin_unlock_irq ( & ucounts -> count ) ; spin_unlock_irq ( & ucounts -> count ) ; spin_unlock_unlock_irq ( & ucounts -> count ) ; spin_unlock_unlock_irq ( & ucounts -> count ) ; spin_unlock_irq ( & ucounts -> count ) ; spin_unlock_unlock_irq ( & ucounts -> count ) ; <S2SV_ModEnd> } else",0
427,"<S2SV_ModStart> * fmode_t fmode, fmode <S2SV_ModEnd> ) { switch",0
428,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
429,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> vp9_pick_r ( VP9_COMMON <S2SV_ModStart> * xd, int64_t * rd, int64_t * rd, int64_t bsize, int64_t * bsize, int64_t * bd_t * bd_cost, int64_t * bd_cost, int64_t * bd_cost, int64_t * bd_t <S2SV_ModEnd>, int64_t * <S2SV_ModStart> = 0 ; const int64_t bd_t bd_cost_costsse ; const int64_t max_dist = 0 ; const int64_t max_t best_sse ; const int64_t max_t best_sse ; const int64_t max_sse ; const int64_t bsize = 0 ; const int64_t bd -> bsse ; const int64_t best_thrs [ 0 ] ; const int64_thr ; const int64_t best_thr = 0 ; const int64_",0
430,,0
431,<S2SV_ModStart> ; if ( * p == NULL ) return - 1 ; if (,0
432,,0
433,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dest_ptr1,",0
434,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
435,<S2SV_ModStart> ( buf + 1,0
436,"<S2SV_ModStart> ( interface, KSZ8851_ISRXS2SV_null> <S2SV_null> <S2SV_null>",0
437,"<S2SV_ModStart> NULL ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
438,<S2SV_ModStart>. udpport = 0 <S2SV_ModEnd> ; settings.,1
439,<S2SV_ModStart> exit ) ;,0
440,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
441,,0
442,<S2SV_ModStart> ; if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
443,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
444,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
445,,0
446,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> vpx_codec_t * ) vpx_codec_alg_priv_t * ) <S2SV_ModEnd> ; vpx_t * <S2SV_ModStart> vpx_codec_alg_priv_t * ) vpx_codec_t * ( vpx_codec_t * ) vpx_codec_alg_priv_t * ) vpx_codec_t * ) vpx_codec_codec_alg_priv_t * cfg ; if (! ( cfg ) { vpx_codec_err_t * ) vpx_codec_alg_priv_t * ) ; vpx_codec_t cfg = vpx_codec_t * cfg ; vpx_codec_codec_alg_priv_t * cfg ; vpx_t cfg = vpx_codec_t * cfg ; vpx_codec_t * cfg ; vpx_codec_codec_t cfg =",0
447,,0
448,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
449,<S2SV_ModStart> = v ; if (! IS_ERR ( vma ) ),1
450,,0
451,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC28J60_MICMD <S2SV_ModEnd>, interface,",0
452,,0
453,,0
454,,0
455,<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( context ->,0
456,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
457,<S2SV_ModStart> ; if (,0
458,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( m,0
459,,0
460,,0
461,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
462,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
463,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
464,,0
465,"<S2SV_ModStart>, annotation, false,",0
466,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> int MAX_BLOCK_BLOCK_SIZE ( int64_t <S2SV_ModStart> int i, int i, int i, int max_avg_avg_avg_out_out_out_out_out_out_out_err_out_out_err ( int ) <S2SV_ModEnd> = ( <S2SV_ModStart> int ) - 1 ; if ( ( unsigned int ) >= MAX_BLOCK_THRESHIGHBITDEPTHRESHIGHBITDEPTHRESHOLD ) { const int i = ( unsigned int ) - 1 ; if ( ( ( ( unsigned int ) > MAX_BLOCK_BLOCK_BLOCK_THRESHOLD ) { const int i = ( unsigned int ) - 1 ; ++ = ( unsigned int ) - 1 ; const uint8_t ) = ( unsigned int ) - 1 ; if ( ( ( unsigned int ) >= MAX_BLOCK_BLOCK_THRESHOLD ) { const uint8_t ) ( ( unsigned int ) ( unsigned int ) ( ( unsigned int ) ( unsigned int ) ( unsigned int ) ( unsigned int ) (",0
467,,0
468,,0
469,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
470,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
471,<S2SV_ModStart> header ) ; <S2SV_ModEnd> if ( bh,0
472,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
473,<S2SV_ModStart> ( size_t ) floor,0
474,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
475,"<S2SV_ModStart> AcquireQuantumMemory ( imx, background_color_color_color_color_color_color <S2SV_ModEnd> ) ; if",0
476,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
477,<S2SV_ModStart> -> u4_first_slice_in_pic = 0,0
478,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
479,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
480,<S2SV_ModStart> * jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_matind_t,0
481,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int tx_size_size ) { vp9_get_block ( xd, bd -> mbmi, bw, int64_t * bw, bw, bsize ) ; const int bw = ( bd -> mbmi. bd -> mbmi. mbmi. bw ) ; const int64_t * bd = bd -> bd ; const int bw = 0 ; const int64_t * bd -> bd ; const int64_t * bd = bd -> bd -> bd. bd ; if ( bd -> bd -> bd -> bd. bd -> bd. bd. bd ) { xd -> bd = INTRA_MAX ; } else { if ( bd -> bd -> bd -> bd -> bd. bd ) { if ( xd -> b_type == INT64_MAX ( bd -> bd, bd ) ; } else { xd -> bd -> bd -> bd",0
482,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( src,",0
483,<S2SV_ModStart> ; if ( scanline < 0 ||,0
484,,0
485,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] =,0
486,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
487,,0
488,<S2SV_ModStart> ) ) ; if ( len < 0 ) return - EINVAL ;,0
489,<S2SV_ModStart> ; if (,0
490,<S2SV_ModStart> mask ) ; if ( len < 0 ) return false ;,0
491,,0
492,<S2SV_ModStart> file ) ; fclose ( RUN_FILE ) ;,0
493,<S2SV_ModStart> ( sk ),0
494,,0
495,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if (,0
496,,0
497,,0
498,"<S2SV_ModStart>, & rlen, 0",1
499,<S2SV_ModStart> return - 1 <S2SV_ModEnd> ; if (,0
500,,0
501,,0
502,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
503,<S2SV_ModStart> ) ; return TRUE,0
504,,0
505,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
506,,0
507,,0
508,,0
509,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
510,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] =,0
511,,0
512,<S2SV_ModStart> ( ret = - EINVAL,0
513,,0
514,"<S2SV_ModStart> ; if (! defined ( image -> width ) ) { if (! defined ( image -> log ) ) { if (! defined ( LOG_ERROR, ""Failed <S2SV_blank> Img\\n"" ) ; return - 1 ; } if (",0
515,,0
516,,0
517,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
518,<S2SV_ModStart> ; if ( fmode == 0 ||,0
519,,0
520,<S2SV_ModStart> ( j ; j = ( jas_table [ j ] ) RelinquishMagickMemory ( j ] ) ;,0
521,<S2SV_ModStart> ; i += 1 <S2SV_ModEnd> ; if (,0
522,,0
523,"<S2SV_ModStart> ) { memcpy <S2SV_ModEnd> ( dst_stride,",0
524,"<S2SV_ModStart> * cpi, ThreadData * td, MACROBLOCKD * const x, MACROBLOCKD * const xd -> mi_row * const xd <S2SV_ModEnd>, int <S2SV_ModStart> BLOCKD * const int mi_row, int mi_row, int mi_cols ) { VP9_COMMON * const tile_info = & cpi -> mi_cols ; MACROBLOCKD * const xd = & xd -> mi_row, mi_cols + mi_cols - mi_cols + mi_cols - mi_cols + mi_cols - mi_cols - mi_col ) { MODE_INFO * const int mi_INFO * const int mi_cols = vp9_variance ( xd ) ; vpx_free ( xd ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> mb_HIGHBITDEPTH ) { vpx_free ( xd ) ; vp9_variance ( xd ) ; vpx_free ( xd -> mb_variance ) ; } # if CONFIG_VP9_HIGHBITDEPTH if",0
525,"<S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
526,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
527,<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ),0
528,<S2SV_ModStart> ) ) ; goto out_free ;,0
529,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
530,"<S2SV_ModStart> ; if (! strlen ( env, '\\n"" ) &&",0
531,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
532,<S2SV_ModStart> ctx ) { memset <S2SV_ModEnd> ( ctx ->,0
533,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
534,,0
535,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ; }",0
536,,0
537,,0
538,,0
539,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
540,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
541,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
542,<S2SV_ModStart> opt_len ) ; struct ipv6_txoptions * opt_to_alloc ; if ( opt_len < sizeof ( flowlabel ) ) { err = - EINVAL ; },0
543,,0
544,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
545,<S2SV_ModStart> ; if ( length > 1 ) return AVERROR_INVALIDDATA ; if (,0
546,"<S2SV_ModStart> { if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
547,<S2SV_ModStart> ) break ; <S2SV_ModEnd> tp -> seq,0
548,<S2SV_ModStart> ; if ( key_len < 0 ) return 0 ; if (,0
549,,0
550,,0
551,"<S2SV_ModStart> ) ; } memset ( inode, 0, 0 ) ;",0
552,,0
553,<S2SV_ModStart> ) { int i <S2SV_ModEnd> ; for (,0
554,<S2SV_ModStart> ) ; } rcu_dereference ( np ) ;,0
555,,0
556,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
557,,0
558,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
559,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
560,,0
561,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
562,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
563,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
564,,0
565,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
566,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
567,,0
568,<S2SV_ModStart> void xd ; memset <S2SV_ModEnd> ( x ->,0
569,<S2SV_ModStart> ) ; return <S2SV_ModEnd> ; } <S2SV_null>,0
570,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) * number_planes_filled <S2SV_ModEnd> ; pixels =",0
571,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
572,,0
573,"<S2SV_ModStart> int mptctl_ioctl_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mptctl_ioctl_ioctl_ioctlprintk ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mptctl_ioctl_ioctl_ioctl_malloc <S2SV_ModEnd> ) { if <S2SV_ModStart> return - EFAULT ; } <S2SV_ModEnd> break ; } if",0
574,"<S2SV_ModStart> ++ ) { luaL_checkstack <S2SV_ModEnd> ( L,",0
575,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
576,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
577,"<S2SV_ModStart> ) ; } if ( strlen ( name ) == 0 ) { fprintf ( stderr, ""U"" ) ; return - 1 ; }",0
578,,0
579,<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; char,0
580,<S2SV_ModStart> NULL ; } <S2SV_ModEnd> if (!,0
581,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
582,"<S2SV_ModStart> ; if ( ( i -> parent -> log ) > i -> log ) { if ( i -> log -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> ***\\n"" ) ; # if (! defined ( i -> parent -> parent -> log ) if ( i -> log, i -> log ) if ( i -> log ) if ( i -> log, ""*** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> ***\\n"" ) ; # if ( i -> parent -> log ) log -> log -> log2 ( i -> log, i -> log ) ; # if ( i -> log, ""*** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> ***\\n"" ) ; # if ( i -> parent -> parent -> parent -> parent -> log ) if ( i -> log, i -> log ) if ( i -> log, i -> parent -> log ) if ( i -> log -> log, i -> log ) if ( i -> log ) if ( i -> log ) # if ( i -> log -> log ) # if ( i -> log -> log ) if ( i -> log",0
583,,0
584,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [",0
585,,0
586,"<S2SV_ModStart> ( interface, ENC28J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC28J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC28J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J60_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; } <S2SV_ModStart> ( interface, ENC624J600_EHT2, ENC6",0
587,,0
588,<S2SV_ModStart> ; if ( <S2SV_ModEnd> len > n,0
589,,0
590,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> int64_t <S2SV_ModStart> size ) { int len = 0 ; int len = 0 ; <S2SV_ModStart> = 0 ; if ( len == 0 ) cJSON_malloc ( p ) cJSON_malloc ( p, 1 ) cJSON_malloc ( p ) ; if ( p ) return 0 ; if ( p ) cJSON_malloc ( p, p ) cJSON_malloc ( p, 1 ) ; if ( p ) return 0 ; if ( ( p ) cJSON_malloc ( p, 1 ) cJSON_malloc ( p, 1 ) ; if ( p ) return 0 ; if ( ( ( p ) cJSON_malloc ( p, 1 ) cJSON_malloc ( p, p ) ; if ( p ) return 0 ; if ( p ) cJSON_malloc ( p, 1 ) return 0 ; if ( p ) cJSON_malloc ( p ) cJSON_malloc ( p, 1 ) ; if ( p ) return 0 ; if ( p ) return 0 ;",0
591,"<S2SV_ModStart> int tagval, uint32 <S2SV_ModEnd> * length )",1
592,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
593,"<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n"" )",0
594,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct task <S2SV_ModEnd> struct <S2SV_ModStart> struct io_context ) { task_lock_irqrestore ( task <S2SV_ModEnd> ) ; task <S2SV_ModStart> ; if ( task ) { task_unlock ( task, task <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; } task <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
595,,0
596,,0
597,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
598,<S2SV_ModStart> ; } } if (!,0
599,"<S2SV_ModStart>, size_t data_len, INT_MAX <S2SV_ModEnd> ) { if",0
600,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
601,,0
602,<S2SV_ModStart> ; } } if (,0
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> const char <S2SV_ModStart> { if ( ( ( ( cp [ 0 ] == '\\0' ) || strcmp ( c ) == '\\0' ) { <S2SV_ModStart> ) return 0 ; } <S2SV_ModEnd> if ( ( ( ( c <S2SV_ModStart> ) == '\\0' ) { if ( c == '\\0' ) { <S2SV_ModStart> ) return 0 ; } <S2SV_ModStart> case '\\0' : if ( strcmp ( c ) == '\\0' ) { return 0 ; } <S2SV_ModStart> case '\\0' : if ( strcmp ( c ) == '\\0' ) { if ( ( c == '\\0' ) { if ( ( isdigit ( c ) == '\\0' ) { if ( ( ( str ) == '\\0' ) { continue ; } } } <S2SV_ModStart> == '\\0' ) { if ( ( strcmp ( str ) == '\\0' ) { if ( ( ( strcmp ( c ) == '\\0' ) { if ( ( isdigit ( c ) == '\\0' ) { return 0 ; } } } } <S2SV_ModStart> == '\\0' ) { if ( str ) {,0
604,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
605,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
606,,0
607,,0
608,<S2SV_ModStart> -> id ; unsigned int count ; <S2SV_ModStart> -> count ; idx = idx,0
609,,0
610,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
611,<S2SV_ModStart> ; if ( cpi -> oxcf.,0
612,,0
613,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
614,"<S2SV_ModStart> ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == TYPE ( CHILD ( n, i ) ) ) == TYPE_COMMENT ) i += 1 ; if ( CHILD ( n, i < NCH ( CHILD ( n, i ) ) ) && TYPE_COMMENT ( n, i < NCH ( n ) ) ) ) { ast_error ( n, i ) ; return 1 ; } if ( CHILD ( CHILD ( n, i ) == TYPE_COMMENT ) { ast_COMMENT ( n, i, i ) ; if ( CHILD ( n, i < NCH ( n, i ) && TYPE_COMMENT ) goto error ; } if ( n, i ) == TYPE_COMMENT ) { i += 1 ; if ( CHILD ( CHILD ( n, i ) == TYPE_COMMENT ) goto error ; if ( n, i < NCH ( n, i ) && TYPE_COMMENT ) goto error ; i += 1 ; i += 1 ; i += 1 ; i += 1 ; i += 1 ; if ( n, i < n, i ) goto error_COMMENT ( n, i )",0
615,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
616,,0
617,,0
618,<S2SV_ModStart> ; if (! thresholds ) goto unlock ;,0
619,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
620,"<S2SV_ModStart> cm ) { vpx_write_bit_buffer <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
621,<S2SV_ModStart> : if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> : if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; },1
622,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context ->,0
623,<S2SV_ModStart> ; i += 1 <S2SV_ModEnd> ; if (,0
624,<S2SV_ModStart> ; memset <S2SV_ModEnd> ( xd ->,0
625,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( interface, ENC624J600_ECON2SV_null> <S2SV_null> <S2SV_ModEnd> ( interface, ENC624J600_ECON2SV_null>",0
626,,0
627,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
628,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
629,,0
630,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
631,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
632,<S2SV_ModStart> ) goto out_err <S2SV_ModEnd> ; if (,0
633,<S2SV_ModStart> lock ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
634,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static S2SV_null> static <S2SV_ModStart> * w ) { if ( ( ( ( UINT32_MAX / 2 ) > UINT32_MAX / 2 ) return UINT32_MAX ; <S2SV_ModStart> * w ; if ( ( ( ( ( * ) > UINT32_MAX / 2 ) ) return - 1 ; <S2SV_ModStart> * w ) return - 1 ; <S2SV_ModStart> + 1 ; } if ( ( ( ( * ) > UINT32_MAX / 2 ) return - 1 ;,0
635,<S2SV_ModStart> cs ) ; <S2SV_ModEnd> } else {,0
636,"<S2SV_ModStart> ( interface, KSZ8851_ISRXRXRXRXRXRXRXR_PTR <S2SV_ModEnd> ) ; KSZ8851_PTR <S2SV_ModEnd> ( interface, KSZ8851_PTR <S2SV_ModStart> ( interface, KSZ8851_ISRXR, KSZ8851_PTR <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, KSZ8851_RXRXRXS2SV_null> <S2SV_null>",0
637,,0
638,<S2SV_ModStart> < 0 ) goto out <S2SV_ModEnd> ; } <S2SV_null>,0
639,,0
640,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( k,0
641,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if (!,0
642,<S2SV_ModStart> ( j = 0 <S2SV_ModEnd> ; if (,0
643,,0
644,<S2SV_ModStart> 2 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,1
645,,0
646,,0
647,,0
648,"<S2SV_ModStart>, plane, vpx_writer <S2SV_ModEnd> * w,",0
649,,0
650,<S2SV_ModStart> ; } } if (,0
651,,0
652,,0
653,<S2SV_ModStart> case fa : fa = fa ; break ; default : fa = fa ; if ( fa == fa ) { fa = fa ; return fa ; } fa = fa ; } fa = fa = fa ; if ( fa ) { fa = fa = fa ; return fa ; } fa = fa ; } fa = fa = fa ; if ( fa ) fa ) { fa = fa = fa ; return fa ; } fa = fa ; } fa = fa = fa ; return fa ; } fa = fa ; } fa = fa ; if ( fa ) { fa = fa = fa = fa = fa ; return fa ; } fa ; } fa = fa = fa = fa ; break ; } fa = fa = fa = fa ) { fa = fa = fa = fa = fa ; default : fa = fa = fa ; return fa ; } fa ; } fa = fa = fa = fa = fa ; } fa = fa ; fa = fa = fa = fa ; fa = fa = fa = fa = fa? fa? fa? fa : fa : fa? fa ) ; fa : fa : fa : fa ; fa = fa ) ; fa = fa = fa = fa = fa ) ; fa = fa : fa = fa <S2SV_ModEnd>,0
654,<S2SV_ModStart> ; if (,0
655,"<S2SV_ModStart>, sizeof ( double <S2SV_ModEnd> ) ) ;",1
656,<S2SV_ModStart> ) ; },0
657,,0
658,"<S2SV_ModStart> ( buf, ""%s"",",0
659,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
660,,0
661,<S2SV_ModStart> ; if ( bLength < 2 ) return - ENOMEM ; if (,0
662,,0
663,,0
664,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; dev ->,0
665,,0
666,"<S2SV_ModStart> ( interface, ENC624J600_EIR <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ECON1, ENC624J600_ECON2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ECON1, ENC624J600_ECON2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2 <S2SV_ModEnd> ( interface,",0
667,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
668,,0
669,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
670,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
671,,0
672,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
673,,0
674,,0
675,<S2SV_ModStart> ) ; },0
676,"<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( m,",0
677,,0
678,,1
679,<S2SV_ModStart> return NULL ; <S2SV_ModEnd> if ( p,0
680,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> size, 0 )",0
681,,0
682,,0
683,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rsc_r ( int <S2SV_ModStart> n ) { if (! context ) return FALSE ; <S2SV_ModStart> ; } return FALSE ; <S2SV_ModStart> case 0 ; if (! context ) return FALSE ;,0
684,,0
685,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> rc -> oxcf <S2SV_ModStart> -> oxcf. rc_frame_bandwidth <S2SV_ModEnd> ) { const int,0
686,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_read_bit <S2SV_ModEnd> ( r,",0
687,<S2SV_ModStart> ) ) { if ( strncpy ( void ) == NULL ) { <S2SV_ModStart> ) ) ; } <S2SV_ModStart> ) ) ; } <S2SV_ModStart> break ; },0
688,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
689,,0
690,<S2SV_ModStart> shm_perm ) ; if ( shm_perm == NULL ) goto out_unlock ;,0
691,,0
692,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
693,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
694,,0
695,"<S2SV_ModStart> ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, 0 )",0
696,,0
697,<S2SV_ModStart> * svcInternal_t <S2SV_ModEnd> * const si,0
698,<S2SV_ModStart> q ) ; if ( q -> q -> mq == 0 ) continue ;,0
699,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
700,,0
701,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
702,<S2SV_ModStart> ( buf ) { <S2SV_ModEnd> return NULL ;,0
703,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> S2SV_null> <S2SV_null>,0
704,,0
705,"<S2SV_ModStart> ; if ( segfeature_active <S2SV_ModEnd> ( seg,",0
706,"<S2SV_ModStart> ; if ( type_type == NULL ) return 0 ; if ( <S2SV_ModStart>, sizeof ( const int ), type_type == 0 ) || type_type == 0 ) return 0 ; if (",0
707,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
708,<S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case,0
709,<S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( x ->,0
710,<S2SV_ModStart> ; if ( cp == 0 ||,0
711,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
712,"<S2SV_ModStart> ipv4_select_ident ( & net -> ipv4_idents_key <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( net -> ipv4. ipv4. ip_key <S2SV_ModEnd>, sizeof (",0
713,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj,",0
714,"<S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w,",0
715,"<S2SV_ModStart> ctl -> pw, "".chfn""",1
716,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
717,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
718,,0
719,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
720,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
721,,0
722,<S2SV_ModStart> ; struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> opt.,0
723,,0
724,,0
725,,0
726,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
727,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
728,,0
729,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> -> common ; MACROBLOCK * const x = & td -> mb ; <S2SV_ModStart> x = & td -> mb ; MACROBLOCKD * const x -> mb ; const x -> mbmi_ext = & x -> mbmi_ext ; const x -> mb ; const int b_ext = x -> mbmi_ext ; const x -> mb_ext = cpi -> oxcf. mb_ext ; if ( x -> oxcf. mb_type == BLOCK_OFFSET_type && cpi -> oxcf. subsampling_type == BLOCK_8X8X8X8 ) { cpi -> oxcf. subsize = & cpi -> oxcf. subsampling_type ; } # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( xd -> oxcf. subsampling_type == BLOCK_HIGHBITDEPTH ) { return ; } # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_VP9",0
730,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] =,0
731,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
732,,0
733,,0
734,,0
735,<S2SV_ModStart> ; if (! fmode <S2SV_ModEnd> ) return error,0
736,<S2SV_ModStart> ++ ) return - 1 <S2SV_ModEnd> ; if (,0
737,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
738,,0
739,"<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, MSG_NOSIGNAL )",0
740,"<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f\\n"", outputbuffer ) ; sendClean ( outputbuffer ) ;",0
741,<S2SV_ModStart> ; if ( fmode == O_RDONLY | O_CLOEXEC | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOCTTY <S2SV_ModStart> ) ; } if ( fd!= 0 ) { fclose ( fd ) ; return - 1 ; },0
742,,0
743,,0
744,<S2SV_ModStart> ; # endif memset <S2SV_ModEnd> ( p ->,0
745,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,0
746,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
747,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
748,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
749,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
750,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
751,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
752,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
753,"<S2SV_ModStart> cm, vpx_writer <S2SV_ModEnd> * w,",0
754,,0
755,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static state_null> <S2SV_null>,0
756,,0
757,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> vp9_pred_pred_pred ( const <S2SV_ModStart> int mi_col, vp9_stride, vpx_variance16x8x8_high_t <S2SV_ModEnd> ) ; const <S2SV_ModStart> int i, vpx_variance16x8_high_t <S2SV_ModEnd>, bd_stride, <S2SV_ModStart> struct macroblock ) { vpx_variance8x8x8x8x8x8x8x8x8_stride <S2SV_ModEnd> ( input, <S2SV_ModStart> ) ; } vpx_high_t <S2SV_ModEnd> ( input, <S2SV_ModStart> ) ; const uint8_t <S2SV_ModEnd> struct macroblock_stride, <S2SV_ModStart> break ; vp8x8x8x8x8x8x8x8x8x8x8x8x8 ( bd ) ; const uint8_t <S2SV_ModEnd> ( sse, <S2SV_ModStart> ) ; const uint8_t <S2SV_ModEnd> ( sse,",0
758,<S2SV_ModStart> ; bufsize = 0 <S2SV_ModEnd> ; if (,0
759,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
760,<S2SV_ModStart> break ; } if ( task -> tk_rebind ) { ret = - EIO ; goto out ; },0
761,,0
762,,0
763,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
764,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
765,"<S2SV_ModStart> * seg ; memset <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ; memset <S2SV_ModEnd> ( seg,",0
766,,0
767,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
768,,0
769,<S2SV_ModStart> -> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock,0
770,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
771,,0
772,,0
773,<S2SV_ModStart> ; if ( kfree ( buf ),0
774,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
775,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> <S2SV_null> <S2SV_null>,0
776,<S2SV_ModStart> ) ; } memset <S2SV_ModEnd> ( cpi ->,0
777,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
778,<S2SV_ModStart> ) ) ; ND_TCHECK2 ( bp [ 0 ] ) ;,0
779,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
780,"<S2SV_ModStart> int mptctl_eventenable ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mptctl_ioctl_ioctl_eventenable ( iocp, <S2SV_ModStart> return mptctl_eventenable ( iocp,",0
781,"<S2SV_ModStart> * c ; if ( c < 0 ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
782,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
783,,0
784,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_read_bit <S2SV_ModEnd> ( r,",0
785,,0
786,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r )",0
787,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
788,,0
789,,0
790,"<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key, <S2SV_ModStart> 0 ) ) { <S2SV_ModEnd> if (!",0
791,,0
792,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
793,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
794,,0
795,<S2SV_ModStart> case TEMP_FAILURE_RETRY : if (,0
796,<S2SV_ModStart> ; } } if (,0
797,,0
798,,0
799,,0
800,<S2SV_ModStart> <S2SV_null> <S2SV_null> static OE_RAISE_ERRNO ( OE_E_EINVAL <S2SV_ModStart> ) ; OE_RAISE_ERRNO ( OE_E_EINVAL ) ; OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> ) ; } if ( ret > ( ssize_t ) OE_t ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; OE_E_EINVAL <S2SV_ModStart> ) ; } if ( ret > ( ret ) oe_sockaddrlen_sockaddr ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_E_EINVAL ) ; },0
801,,1
802,,0
803,<S2SV_ModStart> opt_len ) { struct ipv6_txoptions * opt ; struct ipv6_txoptions * opt = rcu_dereference_protected ( np ) ; if ( np -> opt_len < 0 ) return - EINVAL ;,0
804,<S2SV_ModStart> ) { uint32_t hdr ; uint32_t sizeof ( uint32_t sizeof ( uint32_t ) <S2SV_ModStart> ) ) { uint32_t tmp_t sizeof ( uint32_t ) <S2SV_ModStart> ) ) { uint32_t sizeof ( uint32_t ) ; uint32_t sizeof ( uint32_t ) <S2SV_ModStart> break ; } if ( uint32_t ) { uint32_t sizeof ( uint32_t ) == NULL || ( uint32_t ) sizeof ( uint32_t ) { uint32_t * sizeof ( uint32_t ) - 1 ) ; <S2SV_ModStart> break ; } if ( ( uint32_t ) { uint32_t tmp_t ) { uint32_t sizeof ( uint32_t ) <S2SV_ModStart> break ; } if ( ( uint32_t ) >= sizeof ( uint32_t ) { uint32_t ) { if ( ( uint32_t ) { uint32_t ) { uint32_t ) <S2SV_ModStart> break ; } } if ( ( ( uint32_t ) { if ( ( ( ( ( uint32_t ) >= sizeof ( uint32_t ) { uint32_t ) { uint32_t ),0
805,"<S2SV_ModStart> ; dm9000WriteReg ( DM9000_ISR_ERR <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ; dm9000WriteReg ( DM9000_ISR_ERR, DM9000_ERR ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_ERR ) ; dm9000WriteReg ( DM9000_EPOS ) ; dm9000WriteReg ( DM9000_ERR, DM9000_EPOS ) ; dm9000WriteReg ( DM9000_EPCR ) ; dm9000WriteReg ( DM9000_EPOS ) ; dm9000WriteReg ( DM9000_EPOS ) ; dm9000WriteReg ( DM9000_ERR_EPOS ) ; dm9000WriteReg ( DM9000_EPOS ) ; dm9000WriteReg ( DM9000_EPOS ) ; dm9000WriteReg ( DM9000_ERR_ERR, DM9000_EPOS ) ; dm9000WriteReg ( DM9000WriteReg ( DM9000_EPCR, DM9000_",0
806,,0
807,"<S2SV_ModStart> * parent, <S2SV_ModEnd> ) ; }",0
808,<S2SV_ModStart> cib -> session = 0,0
809,<S2SV_ModStart> ; size = INT_MAX <S2SV_ModEnd> ; if (,0
810,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> VP9_COMMON * mbmi_cost_costsse = get_cost_costs ( mbmi, int64_cost, int64_t * mbmi, int64_cost, int64_cost, int64_t * mbmi_cost, int64_cost, int64_cost, ref_cost, ref_cost, ref_cost, ref_cost, ref_cost, ref_cost, ref_cost, ref_cost, ref_cost, ref_cost, ref_cost, ref_cost, ref_cost, ref_cost, ref_cost, ref_cost, mbmi_cost, ref_cost, ref_cost, ref_cost, ref_cost, ref_cost, ref_cost, ref_cost, ref_mv, ref_cost, ref_cost, ref_mv, ref_cost, ref_costs ) ; if ( cpi ) { err_cost_cost_cost_cost_cost_cost_cost_cost_cost_costs (",0
811,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( h,0
812,,0
813,"<S2SV_ModStart> -> msg_name ; if ( msg_sys -> msg_sys, msg_sys -> msg_sys, msg_sys <S2SV_ModEnd> -> msg_sys,",0
814,,0
815,<S2SV_ModStart> ; if (,0
816,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
817,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
818,<S2SV_ModStart> = 0 ; if (!,0
