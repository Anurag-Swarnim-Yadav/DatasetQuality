,raw_predictions,correctly_predicted
0,<S2SV_ModStart> ) ; return ret <S2SV_ModEnd> ; },0
1,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( skb_hdr,0
2,,0
3,"<S2SV_ModStart> * item, <S2SV_ModEnd> c = c",0
4,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
5,<S2SV_ModStart> size ) { uint8_t data_size = 0 ; <S2SV_ModStart> ) ) { if (! file_size ) return 0 ; } <S2SV_ModStart> ) ) { return - 1 ; },0
6,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart>",0
7,<S2SV_ModStart> ; if ( len < 0 ) return 0 ;,0
8,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> const VP9_null> const VP9EncoderConfig <S2SV_ModEnd> * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const sf <S2SV_ModStart> = & cpi -> common ; MACROBLOCKD * const sf = & cpi -> common ; <S2SV_ModStart> = 1 ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi,",0
9,<S2SV_ModStart> offset ) ; int offset = 0 ;,0
10,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
11,<S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_32 ; } <S2SV_ModStart> = COAP_16 ; } <S2SV_ModStart> = COAP_BLOCK_16 ; } <S2SV_ModStart> = COAP_16 ; } <S2SV_ModStart> = COAP_BLOCK_16 ; },0
12,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
13,<S2SV_ModStart> <S2SV_null> <S2SV_,0
14,,0
15,<S2SV_ModStart> ( t ),0
16,,0
17,,0
18,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> inode_mode ( inode_t i_uid <S2SV_ModEnd>, inode, <S2SV_ModStart>, inode, inode_uid <S2SV_ModEnd>, inode, <S2SV_ModStart> ) ) ) ) return ret ;",0
19,"<S2SV_ModStart>, 0, 0",0
20,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
21,<S2SV_ModStart> inode -> flags <S2SV_ModEnd> ; if (,0
22,"<S2SV_ModStart> ( name, NULL <S2SV_ModEnd> ) ) {",0
23,<S2SV_ModStart> ; line = 0 <S2SV_ModEnd> ; line =,0
24,<S2SV_ModStart>,0
25,,0
26,<S2SV_ModStart> path ) ; return false,0
27,<S2SV_ModStart> io ) ; if (! io -> iosize ) return - EIO ;,0
28,<S2SV_ModStart> ; } break <S2SV_ModEnd> ; break ;,0
29,<S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY (,0
30,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
31,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
32,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
33,,0
34,"<S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd> ) ; enc28J60 <S2SV_ModStart> ( interface, ENC28J60_ECON2 <S2SV_ModEnd> ) ; enc28J60ReadReg <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd> ) ; enc28J60ReadReg <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_ECON1 <S2SV_ModEnd> ) ; }",0
35,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,0
36,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
37,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( void ) { memset <S2SV_ModEnd> ( void, <S2SV_ModStart> int mb_col ) ; memset <S2SV_ModEnd> ( void, <S2SV_ModStart> int ) ; memset <S2SV_ModEnd> ( output_stride, <S2SV_ModStart> ; } ; memset <S2SV_ModEnd> ( output_stride,",0
38,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct mb2SV_null> struct mb2_mb_cache_entry <S2SV_ModEnd> * bh ; <S2SV_ModStart> int error ; if ( ext4_mb_mb_entry ) { mb2_mb_entry_entry_entry_entry ( bh, ""error"" ) ; goto error ; } <S2SV_ModStart> error ) ; <S2SV_ModEnd> if ( bh <S2SV_ModStart> error ) { <S2SV_ModEnd> error = mb2_put ( bh <S2SV_ModStart> error ) ; }",0
39,"<S2SV_ModStart> ) ; } if <S2SV_ModEnd> ( s,",0
40,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ip_options_get_options ( struct ip_options_options <S2SV_ModEnd> * opt, <S2SV_ModStart> * opt ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ; if ( opt.",0
41,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
42,,0
43,<S2SV_ModStart> { return ret <S2SV_ModEnd> ; } ret,0
44,<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> size = 0 <S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> size_t,0
45,,0
46,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> unsigned int <S2SV_ModEnd> hdr_len <S2SV_ModStart> ; unsigned char * hdrlen <S2SV_ModEnd> len <S2SV_ModStart> - EINVAL ; if (! acl_len ) return - EINVAL ; <S2SV_ModStart> ) ) return - EINVAL <S2SV_ModEnd> ; } if,0
47,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
48,,0
49,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
50,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
51,<S2SV_ModStart> ; },0
52,<S2SV_ModStart> = 0 ; # if CONFIG_VP9_VP9_HIGHBITDEPTH if (! ( arg_mode ) ) return - 1 ; <S2SV_ModStart> ; } else if (! ( arg_args ) ) return 1 ;,0
53,<S2SV_ModStart> ) return 0 <S2SV_ModEnd> ; if (,0
54,<S2SV_ModStart> ; if (,0
55,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
56,"<S2SV_ModStart> = 0 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
57,<S2SV_ModStart> interface ; } <S2SV_ModEnd> return - EINVAL,0
58,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if",0
59,<S2SV_ModStart> char * dir = NULL <S2SV_ModEnd> ; char *,0
60,<S2SV_ModStart> ; } <S2SV_null>,0
61,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
62,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,<S2SV_ModStart> = get_block ( inode ) ;,0
65,,0
66,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart>, NULL <S2SV_ModEnd> ) { Py_null> <S2SV_null> <S2SV_null>",0
67,<S2SV_ModStart> string ) ) c,0
68,<S2SV_ModStart>,0
69,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
70,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
71,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
72,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0,0
73,<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & cpi,0
74,,0
75,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
76,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
77,,0
78,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static vpx_writer <S2SV_ModEnd> * const VP9_COMMON <S2SV_ModStart> cm, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> cm ) { const PREDICTION_INFO * const PREDICTION_INFO * const mbmi = xd -> mbmi_ext = xd -> mbmi. mbmi. mbmi_ext ; const MB_INFO * xd -> mbmi_ext = xd -> mbmi. mbmi. mbmi_ext ; const int mbmi_ext = xd -> mbmi_ext ; const int bw = xd -> mbmi. mbmi_mode ; const int mbmi_ext = xd -> mbmi_ext ; const int bw = xd -> mbmi_ext_mode ; const int bw = xd -> mbmi_ext_mode_mode ; const int bw = xd -> mbmi_mode_mode_mode ; const int bw = xd -> mbmi_mode_mode ; const int bw = xd -> mbmi_mode_mode_mode_mode ; const int bw = get_mode_mode_mis <S2SV_ModEnd> ( w, <S2SV_ModStart> cm, bw <S2SV_ModEnd>, mi_mode,",0
79,<S2SV_ModStart> n ] ; if ( n < 2 ) return 0 ;,0
80,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
81,<S2SV_ModStart> = 0 ;,0
82,<S2SV_ModStart>,0
83,,0
84,<S2SV_ModStart> 1 ) { if ( reg -> enc ) return - 1,0
85,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct,0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,<S2SV_ModStart> = - 1 <S2SV_ModEnd> ; if (,0
89,"<S2SV_ModStart> & fl6, rt",0
90,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
91,<S2SV_ModStart> ; return ctx <S2SV_ModEnd> ; } <S2SV_null>,0
92,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
93,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
94,<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( mv.,0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,0
97,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
98,<S2SV_ModStart> ; if ( <S2SV_ModEnd> c -> server.,0
99,<S2SV_ModStart> ; if (! cfg -> g_mode && ( cfg -> g_mode == VPX_PASS && ( cfg -> cfg -> cfg. g_mode == VPX_PASS && ( cfg -> cfg -> cfg. g_mode == VPX_PASS <S2SV_ModEnd> ) ) <S2SV_ModStart> ( cfg -> <S2SV_ModEnd> ) return,0
100,"<S2SV_ModStart> cpi, cpi <S2SV_ModEnd> ) ; }",0
101,<S2SV_ModStart> return - EPERM <S2SV_ModEnd> ; if (,0
102,"<S2SV_ModStart> tmp_strsize ) { ISOM_FILE_SIZE ( ptr, 1 ) <S2SV_ModStart> ptr -> size <S2SV_ModEnd> ; if (",0
103,<S2SV_ModStart>,0
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { <S2SV_ModStart> ( state, fmode <S2SV_ModEnd> ) ; }",0
105,<S2SV_ModStart> ) break ; status =,0
106,"<S2SV_ModStart> len ) ; memcpy <S2SV_ModEnd> ( buf,",0
107,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
108,<S2SV_ModStart> ; if ( <S2SV_ModEnd> c -> height,0
109,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; break",0
110,,0
111,<S2SV_ModStart> ; if (! state ) return - EINVAL,0
112,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> ; if (",0
113,<S2SV_ModStart> ) ; },0
114,<S2SV_ModStart>,0
115,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
116,<S2SV_ModStart> ; msg -> msg_namelen = 0 ;,0
117,<S2SV_ModStart> ) ) ; if <S2SV_ModEnd> ( arg ->,0
118,<S2SV_ModStart> return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
119,<S2SV_ModStart> 0 ) ; } },0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,<S2SV_ModStart> len + 1 <S2SV_ModEnd> ) ; if,0
122,<S2SV_ModStart> } if (!,0
123,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
124,<S2SV_ModStart>,0
125,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> const vpx_tree_tree <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree_tree, vpx_tree_tree_tree_tree_tree_tree_tree_tree ( vpx_tree_tree, vpx_tree_tree, vpx_tree_prob <S2SV_ModEnd> * b, <S2SV_ModStart> = vp9_tree_tree_tree_tree_tree_tree_tree_tree_prob <S2SV_ModEnd> ( b,",0
126,,0
127,"<S2SV_ModStart> ; err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & buf )",0
128,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static tran_high_t <S2SV_ModEnd> x4, tran_high_low_t <S2SV_ModEnd> x4, tran_low_t <S2SV_ModEnd> x4, tran_high_low_t <S2SV_ModStart> = input ; tran_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> = input ; tran_high_low_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> = input ; tran_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> = input ; tran_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> = input ; tran_low_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> = input ; tran_low_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 1 ] ; tran_low_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> = input ; tran_low_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 2 ] ; tran_low_low_t <S2SV_ModEnd> x4 = ( tran_low_low_t ) <S2SV_ModStart> 2 ] = ( tran_low_t ) <S2SV_ModStart> 2 ] = ( tran_low_low_t ) <S2SV_ModStart> 2 ] = ( tran_low_low_t ) <S2SV_ModStart> 2 ] = ( tran_t ) <S2SV_ModStart>",0
129,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
131,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null>,0
132,<S2SV_ModStart> ; if ( <S2SV_ModEnd> c -> flags,0
133,<S2SV_ModStart> -> b_flag = 0,0
134,<S2SV_ModStart> & OE_EINVAL ; if ( ret == 0 ) { ret = - EERRNO ( OE_EINVAL ) ; goto error ; } if ( ret!= 0 ) { ret = - E_ERRNO ( OE_EINVAL ; goto err ; } ret = - E_EINVAL ; } if ( ret == - E_EINVAL ) { ret = - E_EINVAL ; goto out ; } if ( ret == - E_EINVAL ) { ret = - E_EINVAL ; goto out ; } if ( ret == - E_EINVAL ) { ret = - E_ERRNO ( OE_ERRNO ( OE_EINVAL ) ; } ret = - EINVAL ; goto out ; } if ( ret == - E_EINVAL ) { ret = - E_EINVAL ; goto out ; } if ( ret == - 1 ) { ret = - 1 ; ret = - 1 ; ret = - E_ERRNO ( ret ) ; ret = - E_EINVAL ; } if ( ret == - 1 ) goto out ; } if ( ret == - 1 ) goto out ; },0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
136,<S2SV_ModStart> ) ) { memcpy <S2SV_ModEnd> ( pc ->,0
137,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> buf ) { kfree ( buf ) ; <S2SV_ModStart>, size, buf ) ; if (! buf ) return - EINVAL ;",0
138,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
139,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> * ctx ; vpx_read_frame ( & ctx -> flags & ctx -> flags ) ; <S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if (! ctx -> flags & ctx -> frame_size ) return 0 ;,0
140,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
141,<S2SV_ModStart> ; },0
142,<S2SV_ModStart> = - 1,0
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,"<S2SV_ModStart>, data_sz, NULL, NULL,",0
145,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> inode_inode_inode_inode ( inode <S2SV_ModStart> inode ) ; if ( inode ) goto out ;,0
146,<S2SV_ModStart> y3f ) { sprintf ( out ;,0
147,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
148,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
149,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_SetString ( PyExc_SetString ( PyExc_TypeError, ""required <S2SV_blank> missing <S2SV_blank> missing <S2SV_blank> missing <S2SV_blank> missing <S2SV_blank> missing <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> field <S2SV_blank> from <S2SV_blank> from <S2SV_blank> from <S2SV_blank> field <S2SV_blank> from <S2SV_blank> field <S2SV_blank> field <S2SV_blank> from <S2SV_blank> field <S2SV_blank> field <S2SV_blank> field <S2SV_blank> field <S2SV_blank> field <S2SV_blank> from <S2SV_blank> from <S2SV_blank> field <S2SV_blank> field <S2SV_blank> field <S2SV_blank> field <S2SV_blank> type"" ) ; return 1 ; } if ( tmp == NULL ) { PyExc_CLEAR ( tmp ) ; return 1 ; } if ( tmp == NULL ) { Py_CLEAR ( tmp ) ; return 1 ; } if ( tmp == NULL ) { int res = NULL ; } if ( tmp == NULL ) { int res = NULL ; Py_CLEAR ( tmp ) ; Py_CLEAR ( tmp ) ; res = NULL ; } if ( tmp == NULL ) { Py_CLEAR ( tmp ) ; return 1 ; } if ( tmp == NULL ) { int res = NULL ; } if ( tmp == NULL ) { Py_CLEAR ( obj2ast",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> msg -> msg_,0
152,<S2SV_ModStart> <S2SV_null> > 0,0
153,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
154,,0
155,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
156,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
157,,0
158,<S2SV_ModStart> == 0 ) return ;,0
159,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
160,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
161,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
162,<S2SV_ModStart> ; if ( len < 0 ) goto out ;,0
163,,0
164,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
165,,0
166,<S2SV_ModStart> u4_first_pic = 0 ; ps_dec -> u4_size = 1,0
167,<S2SV_ModStart> = 0 ; if (! src_reg_reg_reg_reg ) return - EINVAL ;,0
168,<S2SV_ModStart> ) ) { if (! d_name ) return - EINVAL ;,0
169,<S2SV_ModStart> = 0 ;,0
170,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int i ; VP9SV_null> <S2SV_null>,0
171,<S2SV_ModStart> ; } } },0
172,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
173,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
174,,0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
176,"<S2SV_ModStart> best_what_stride <S2SV_ModEnd>, in_what_stride,",0
177,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static VP9_COMMON <S2SV_ModEnd> VP9_COMMON * <S2SV_ModStart> * cpi, MACROBLOCKD * mi_row, <S2SV_ModStart> BLOCKD * mi_col ; MACROBLOCKD * mi_col ; MACROBLOCKD * const mi_col = & cpi -> mi_col ; <S2SV_ModStart> BLOCKD * mi_col ; MACROBLOCKD * const mi_row ; MACROBLOCKD * const mi_col = & cpi -> mi_col ; MACROBLOCKD * const mi_col = & cpi -> mi_col ; <S2SV_ModStart> ( cpi, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col <S2SV_ModEnd>, mi_col, <S2SV_ModStart>, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_row, mi_col <S2SV_ModEnd>, mi_col, <S2SV_ModStart>, mi_row, mi_row, mi_row, mi_row, mi_row, mi_col, mi_col <S2SV_ModEnd>",0
178,"<S2SV_ModStart> ), 0",0
179,<S2SV_ModStart>,0
180,<S2SV_ModStart> ) goto error <S2SV_ModEnd> ; if (,0
181,<S2SV_ModStart> = 0 ; uint32 name [ 0 ] ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart> ( d ) ) { <S2SV_ModStart> - 1 ; } <S2SV_ModEnd> if (!,0
182,"<S2SV_ModStart> ( file, ""%s"",",0
183,<S2SV_ModStart> -> columns - 4 <S2SV_ModEnd> ) ; x,0
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,,0
186,<S2SV_ModStart> ) goto trunc ; if ( len < 4 ) goto trunc ;,0
187,,0
188,<S2SV_ModStart> * jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_matind_t,0
189,,0
190,,0
191,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
192,,0
193,,0
194,,0
195,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
196,,0
197,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
198,"<S2SV_ModStart> ( ndo, ""%s"", tptr <S2SV_ModEnd> ) ) ;",0
199,"<S2SV_ModStart>, 0, 0",0
200,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
201,"<S2SV_ModStart> ) ; } copy_user <S2SV_ModEnd> ( src, <S2SV_ModStart> S2SV_null> <S2SV_null> <S2SV_null>",0
202,<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & fc,0
203,"<S2SV_ModStart> -> y = MagickMax <S2SV_ModEnd> ( 1.0f,",0
204,<S2SV_ModStart> = strlen ( src -> sas_username ) ;,0
205,<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi ->,0
206,"<S2SV_ModStart> size_t o ; memset ( & buf, sizeof ( tcount ) ) ;",0
207,<S2SV_ModStart> ) ) { kfree ( param ) ;,0
208,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> unsigned char * <S2SV_ModStart> len ) { char * outlen = '\\0' ; <S2SV_ModStart> ) ; } if (! out ) return NULL ;,0
209,,0
210,,0
211,<S2SV_ModStart>,0
212,<S2SV_ModStart> = - 1 <S2SV_ModEnd> ; if (,0
213,<S2SV_ModStart> ; } } if ( length < 4 ) return (,0
214,<S2SV_ModStart> timeri ) { mutex_unlock <S2SV_ModEnd> ( & timer,0
215,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
216,<S2SV_ModStart> = 0 ; size_t,0
217,,0
218,<S2SV_ModStart> i ] ; if ( bi == NULL ) return - EINVAL ;,0
219,<S2SV_ModStart> ) ) ; msg -> msg_namelen = 0 ;,0
220,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
221,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL )",0
222,<S2SV_ModStart> <S2SV_null> <S,0
223,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
224,<S2SV_ModStart> ; if ( <S2SV_ModEnd> == NULL ),0
225,<S2SV_ModStart> <S2SV_null>,0
226,<S2SV_ModStart> return - 1 <S2SV_ModEnd> ; if (,0
227,<S2SV_ModStart> ) return 0 <S2SV_ModEnd> ; if (,0
228,<S2SV_ModStart> size = size_t size ; size_t,0
229,<S2SV_ModStart> ( sk ) return - EINVAL,0
230,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
231,"<S2SV_ModStart> ; r = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
232,<S2SV_ModStart>,0
233,,0
234,"<S2SV_ModStart>, NULL, NULL,",0
235,<S2SV_ModStart> src ) ; <S2SV_ModEnd> if (!,0
236,,0
237,,1
238,<S2SV_ModStart>,0
239,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> psf -> header <S2SV_ModStart> ( psf, <S2SV_ModStart> ( psf -> header. end <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; break ; } if ( psf -> header. end <S2SV_ModEnd> psf -> header <S2SV_ModStart> ( psf -> header. header. end <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( psf -> header. <S2SV_ModStart> ; break ; } if ( psf -> header. end <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
240,<S2SV_ModStart> } <S2SV_null> <S2SV_null> static,0
241,,0
242,<S2SV_ModStart> perf_event * event <S2SV_ModEnd> ; ctx =,0
243,<S2SV_ModStart> ; ctx -> flags &= <S2SV_ModEnd> ; ctx ->,0
244,<S2SV_ModStart> ( * tptr <S2SV_ModEnd> ) ; if,0
245,<S2SV_ModStart> ; # endif memset <S2SV_ModEnd> ( & cpi,0
246,"<S2SV_ModStart> ) ; } copy_user <S2SV_ModEnd> ( src,",0
247,"<S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( ptr,",0
248,"<S2SV_ModStart> * r ; uint32_t * p ; uint32_t * p ; <S2SV_ModStart> ; if (! r ) { lua_LOG_LOG_LOG_LOG_ERROR ( L, ""Invalid <S2SV_blank> %d\\n"", l ) ; return - 1 ; }",0
249,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> rows ) ;",0
250,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
251,<S2SV_ModStart> len = 0 <S2SV_ModEnd> ; char *,0
252,<S2SV_ModStart> ( server. ds_enabled <S2SV_ModEnd> ) server.,0
253,"<S2SV_ModStart>, client, NULL <S2SV_ModEnd> ) ; }",0
254,<S2SV_ModStart> ; i < n,0
255,<S2SV_ModStart> 0 ) { sprintf ( outputbuffer ) ;,0
256,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
257,<S2SV_ModStart> ; size_t count = 0 ; size_t count = 0 ; size_t,0
258,"<S2SV_ModStart> = 0 ; memset ( & sk, sizeof ( sk ) ;",0
259,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
260,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
261,<S2SV_ModStart> = - 1 <S2SV_ModEnd> ; if (,0
262,<S2SV_ModStart>,0
263,<S2SV_ModStart>,0
264,"<S2SV_ModStart> ) ) { if ( fit_name_name_name == NULL ) { log_error ( ""invalid <S2SV_blank> %s\\n"", __func__, __func__ ) ; return - EINVAL ; }",0
265,<S2SV_ModStart> ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ),0
266,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
267,<S2SV_ModStart> ) return 0 <S2SV_ModEnd> ; if (,0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,<S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH,0
270,,0
271,"<S2SV_ModStart>, data_size = 0",0
272,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func :,0
273,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( is_mv ( <S2SV_ModEnd> ) { <S2SV_ModStart> = 1 ; # endif # endif # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_VP9_VP9_HIGHBITDEPTH if CONFIG_VP9_VP9_VP9_VP9_HIGHBITDEPTH if ( is_sse ) { # if CONFIG_VP9_VP9_HIGHBITDEPTH if CONFIG_VP9_VP9_VP9_VP9_HIGHBITDEPTH if ( is_,0
274,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) - 1 ),0
275,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
276,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
277,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
278,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 1SV_null> <S2SV_null> static <S2SV_ModStart> 1SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 1SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 1SV_null> <S2SV_null> static,0
279,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct ipv4_sb_sb_sb_sb_sb_sb_sb ) ; struct ipv4_sb_sb_sb_sb_sb <S2SV_ModEnd> * bh ; <S2SV_ModStart> ) ) ; if (! bs ) goto out ; if ( inode -> i_len <S2SV_ModEnd> ) goto out_sb,0
280,<S2SV_ModStart> ) { const memset <S2SV_ModEnd> ( & lfm,0
281,<S2SV_ModStart> q ) { if ( q -> mq_flags & q -> mq_rq ) {,0
282,"<S2SV_ModStart> uint32_t val ; memset ( val, sizeof ( val )",0
283,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
284,<S2SV_ModStart>,0
285,<S2SV_ModStart> = 0 ;,0
286,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } 0,0
287,<S2SV_ModStart> = 0 ;,0
288,<S2SV_ModStart> ; } } else {,0
289,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
290,<S2SV_ModStart> ) ) { memcpy <S2SV_ModEnd> ( pc ->,0
291,<S2SV_ModStart> = 0 ; status = SetImageExtent ( image ) ;,0
292,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * <S2SV_ModStart> * s ; <S2SV_ModEnd> return NULL ; <S2SV_ModStart> * s ; <S2SV_ModEnd> if (! <S2SV_ModStart> ) return NULL <S2SV_ModEnd> ; } if,0
293,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> SV_null> <S2SV_null>,0
294,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
295,"<S2SV_ModStart> = 0 ; memset ( & cpi, 0, 0 ) ;",0
296,<S2SV_ModStart> * t_above ; memcpy <S2SV_ModEnd> ( & t_left,0
297,<S2SV_ModStart> ; } return 0 ;,0
298,<S2SV_ModStart> ; } <S2SV_null> <S2SV_null>,0
299,<S2SV_ModStart> ; } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
300,"<S2SV_ModStart> = 0 ; number_planes_filled = ( number_filled * number_planes_planes_filled, number_planes_filled ) ;",0
301,,0
302,<S2SV_ModStart> key. type ; if (! key_key. type ) return - EINVAL ;,0
303,<S2SV_ModStart> ) ) { if (!,0
304,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, length )",0
305,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
306,<S2SV_ModStart> ) return - EINVAL,0
307,<S2SV_ModStart> * event ; struct perf_event_event_event_event * ) event = perf_event_event_event_event_event ( event ) ; if ( event ) return 0 ;,0
308,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
309,<S2SV_ModStart> ; if ( <S2SV_ModEnd> == NULL ),0
310,<S2SV_ModStart> ) ; },0
311,<S2SV_ModStart> dev ) ;,0
312,<S2SV_ModStart> = - 1 <S2SV_ModEnd> ; if (,0
313,<S2SV_ModStart> = 0 ;,0
314,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> const vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> b ; vpx_writer <S2SV_ModEnd> * w =",0
315,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
317,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SVV2SV_null> static int <S2SV_ModEnd> ndo_v2SV_null> static <S2SV_ModStart> uint32BITS ( ndo, ep ) ) ; if (! ND_PRINT ( ndo, id ) ) goto trunc <S2SV_ModEnd> ; ND_TCHECK2SV_null>",0
318,<S2SV_ModStart> == 0 ) {,0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
320,"<S2SV_ModStart>, x, x, x, x = 0",0
321,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
322,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
323,<S2SV_ModStart> ) ) ; rb_null> <S2SV_null>,0
324,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
325,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
326,<S2SV_ModStart> len ) { <S2SV_ModEnd> return 0 ;,0
327,,0
328,"<S2SV_ModStart> len ) { memset <S2SV_ModEnd> ( str,",0
329,,1
330,<S2SV_ModStart> svc_ctx ) { SvcInternal_t <S2SV_ModEnd> * const si,0
331,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
332,<S2SV_ModStart> ) ) { if (!,0
333,<S2SV_ModStart>,0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,<S2SV_ModStart> = - 1 <S2SV_ModEnd> ; if (,0
336,<S2SV_ModStart> = ps_dec -> u4_size = 1,0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
338,"<S2SV_ModStart>, get_alg_priv ( ctx,",0
339,<S2SV_ModStart> ; } } if ( cmd == NULL ) break ;,0
340,,0
341,<S2SV_ModStart> ; if ( i < i ) return - 1 ; if (,0
342,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static vpx_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ; } vpx_literal <S2SV_ModEnd> ( w,",0
343,<S2SV_ModStart> ; } <S2SV_null>,0
344,<S2SV_ModStart> ; break ; case,0
345,"<S2SV_ModStart> ( image ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
346,"<S2SV_ModStart> ) ; } copy_user <S2SV_ModEnd> ( src,",0
347,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
348,<S2SV_ModStart> ; if ( ret == NULL ) return NULL ;,0
349,<S2SV_ModStart> ; if ( <S2SV_ModEnd> frame -> frame_buf,0
350,<S2SV_ModStart> size ) { size_t size ;,0
351,,0
352,"<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( addr,",0
353,<S2SV_ModStart> 0 ) ; if (!,0
354,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct l2cap_rsp * req ; <S2SV_ModStart> * req ; struct l2cap_rsp * req ; struct l2cap_rsp * req ; struct l2cap_rsp * req ; struct l2cap_mode = l2cap_rsp * req ; struct l2cap_rsp * req ; struct l2cap_mode = l2cap_rsp * req ; struct l2cap_mode = l2cap_rsp * req ; struct l2cap_mode = l2cap_mode ( l2cap_mode ) ; l2cap_mode = l2cap_mode ( l2cap_mode ) ; l2cap_mode ( l2cap_mode ) -> mode = l2cap_mode ; <S2SV_ModStart> = l2cap_mode = l2cap_mode ( l2cap_mode ) ; if ( l2cap_mode ( l2cap_mode ( l2cap_mode ) & l2cap_mode ( l2cap_mode ) & l2cap_mode ) -> mode = l2CAP_CONTROL ) ; if (! l2CAP_,0
355,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> len ) ),0
356,<S2SV_ModStart> ; } } if ( ( ( ps_dec -> u2_num_mbs ) > ps_dec -> u2_num_mbs ) { return ERROR_FRAME ; },0
357,<S2SV_ModStart> == 0 ) {,0
358,"<S2SV_ModStart> * fmode, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> ( fmode & fmode <S2SV_ModEnd> ) { goto",0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_VP9_VP9_HIGHBITDEPTH if ( cpi -> flags & cpi -> common. tx_size_size_size_size_size_size_size_size_t <S2SV_ModEnd> ) { int64_t <S2SV_ModStart> ; # endif # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( sse_VP9_HIGHBITDEPTH ) { return - 1 ; } # endif <S2SV_ModStart> ; } } # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_VP9_VP9_VP9_VP9_VP9_VP9_HIGHBITDEPTH ) return ; } # endif <S2SV_ModStart> ; } } } # if CONFIG_VP9_HIGHBITDEPTH,0
361,,0
362,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
363,"<S2SV_ModStart> * seg, vpx_reader <S2SV_ModEnd> * r )",0
364,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",0
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,"<S2SV_ModStart>, buf, 0",0
367,<S2SV_ModStart> ( interface ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
368,,0
369,"<S2SV_ModStart> x1 ) { tran_low_t x0, x1, x1, x0, x0, x0, x0, x0, x0, x0, x0, x ++ ; x0 = 0 <S2SV_ModStart> x3 ; x ++ ; x ++ ; x ++ ; x ++ ; x ++ ; x = x1 [ x ++ ] = x0 ; x ++ ] = x0 ; x ++ ; x ++ ; x = x ++ ; x ++ ; x ++ ; x ++ ; x ++ ; x ++ ; x ++ ; x ++ ; x ++ ; x ++ ; x ++ ; x ++ ; x = x0 ; x ++ ; x ++ ; x ++ ; x ++ ; x ++ ; x ++ ; x ++ ; x ++ ; x = x ++ ; x ++ ; x ++ ; x ++ ; x ++ ; x ++ ; x = x ++ ; x ++ ) x ++ ; x ++ ; x ++ ; x ++ ; x ++ ; x ++ ; x ++ ; x ++ ; x ++ ; x ++ ; x ++ ; x ++ ; x ++ ) x ++ ; x ++ ; x ++ ; x ++ ; x ++ ; x ++ ; x ++ ; x ++ ; x ++",0
370,,0
371,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
372,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
373,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
374,<S2SV_ModStart> ) return ret,0
375,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
376,<S2SV_ModStart> * iinfo ; if ( iinfo -> iinfo -> i_len > iinfo -> i_len ) goto out ; if ( iinfo -> iinfo -> i_len < iinfo -> iinfo -> i_len ) goto out ; if ( iinfo -> i_len > bs ) goto out ; if ( iinfo -> iinfo -> i_size ) goto out ; if ( iinfo -> iinfo -> i_len < iinfo -> iinfo -> iinfo -> iinfo -> i_len ) goto out ; if ( iinfo -> iinfo -> i_size ) goto out ; },0
377,"<S2SV_ModStart> ( interface, ENC28J60_MIRDL <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MIRDL <S2SV_ModEnd>, data ) <S2SV_ModStart> ( interface, ENC28J60_MISTAT, ENC28J60_MIRDL <S2SV_ModEnd> ) ; }",0
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
379,,0
380,,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,,0
384,<S2SV_ModStart> ; } } if (!,0
385,<S2SV_ModStart> = 0 ; size_t idx = 0,0
386,<S2SV_ModStart> ; } <S2SV_null> <S2SV_null>,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
388,<S2SV_ModStart> -> data_size - 1,0
389,,0
390,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int bit_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_avg_y_y_y_y_y_y_y_y_y_y_y_y ; const uint8_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_stride ( ) ) { const unsigned char * 2 ; const unsigned char * 2 ; const int,0
391,<S2SV_ModStart> ) - 1 <S2SV_ModEnd> ) ; if,0
392,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; ret =,0
393,<S2SV_ModStart> ; message -> interface = queueItem ->,0
394,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
395,"<S2SV_ModStart> ) ) { struct ext2_bh <S2SV_ModEnd> * ext2_bh = <S2SV_ModStart> new_bh ) ; ext2_bh = ext2_bh_bh ( inode ) ; if ( ext2_bh -> i_bh ) { ext2_bh = - 1 ; goto error ; } ext2_bh = - 1 ; ext2_bh -> b_bh ; ext2_bh = ext2_bh -> b_bh -> b_bh ; ext2_bh -> b_bh -> b_bh ; ext2_bh = - 1 ; ext2_bh = NULL ; ext2_bh = - 1 ; if ( ext2_bh -> b_bh -> b_bh ) { ext2_bh -> b_sb, new_bh -> b_bh ) ; goto error ; } if ( ext2_bh ) { ext2_bh -> b_bh ; if ( ext2_bh -> b_bh ) { ext2_ext2_bh -> b_bh -> b_bh ) ; goto error ; } if ( ext2_bh ) goto error :",0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
397,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
398,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
399,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
401,<S2SV_ModStart> u1_num_num ++ ; ps_dec -> u2_num_num = 1 ; ps_dec -> u2_mbs ++ ;,0
402,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> ps_dec -> u4_mb_size ; ps_dec -> u4_mb_left = 0 ; ps_dec -> u4_left = 1 ; ps_dec -> u4_mb_left = 1 ; ps_dec -> u4_dec -> u4_mb_mb_mb_num ; ps_dec -> u4_mb_dec -> u4_mb_num = 0 ; ps_dec -> u2_dec -> u4_mb_mb_num = 1 ; },0
403,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
404,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
405,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
406,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst,",0
407,"<S2SV_ModStart> ( row * row <S2SV_ModEnd>, int",0
408,,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
410,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
411,<S2SV_ModStart> ( img -> fmt & VPX_IMG_HIGHBITDEPTH ),0
412,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
413,<S2SV_ModStart> = 0 ;,0
414,"<S2SV_ModStart> size, size <S2SV_ModEnd> ) ; return",0
415,"<S2SV_ModStart> sock, sock -> sk )",0
416,<S2SV_ModStart> ) ) { if <S2SV_ModEnd> ( cpkt.,0
417,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
418,<S2SV_ModStart> = - EINVAL <S2SV_ModEnd> ; if (,0
419,,0
420,"<S2SV_ModStart>, & rlen, 0",1
421,"<S2SV_ModStart> * data ; size_t size ; <S2SV_ModStart>, 0, 0",0
422,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
423,,0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,<S2SV_ModStart> ; return false,0
426,"<S2SV_ModStart> size_t o ; memset ( o, sizeof ( o ) ) ;",0
427,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
428,"<S2SV_ModStart> * buf ; memset ( buf, sizeof ( buf ) ) <S2SV_ModEnd> ) ;",0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
430,"<S2SV_ModStart> = 0 ; size_t count = 0 ; <S2SV_ModStart> ( ret = - 1 <S2SV_ModEnd>, &",0
431,<S2SV_ModStart> ; if ( section == NULL ) return - 1 ; if (,0
432,<S2SV_ModStart> = 0 ;,0
433,,0
434,<S2SV_ModStart> ) ) { <S2SV_ModEnd> if (!,0
435,"<S2SV_ModStart> = 0 ; memset ( & md, 0, 0, 0",0
436,,0
437,<S2SV_ModStart> ; i += 2 <S2SV_ModEnd> ; i +=,0
438,<S2SV_ModStart>,0
439,<S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( row ),0
440,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static VP9_COMMON <S2SV_ModEnd> * const VP9_COMMON * const VP9_COMMON <S2SV_ModStart> * cpi -> common ; MACROBLOCKD * const mi_col ; MACROBLOCKD * const xd = & cpi -> common ; <S2SV_ModStart> int i ; MACROBLOCKD * const mi_col ; MACROBLOCKD * const xd = & cpi -> common ; <S2SV_ModStart> -> common ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if <S2SV_ModEnd> ( xd -> <S2SV_ModStart> i ) { if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_VP9_HIGHBITDEPTH ) { <S2SV_ModEnd> ( xd ->,0
441,"<S2SV_ModStart> ) ) ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> short)"" ) ) ; return ; }",0
442,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
443,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
444,<S2SV_ModStart> ( skb ) goto out_free ;,0
445,"<S2SV_ModStart>, - 1 <S2SV_ModEnd> ) ; if",0
446,"<S2SV_ModStart> int i = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) ) <S2SV_ModStart> = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
447,<S2SV_ModStart> ctx ) ; vpx_free <S2SV_ModEnd> ( ctx ),0
448,"<S2SV_ModStart> & 1 ) { vpx_lpf_lpf_lpf_4 <S2SV_ModEnd> ( s, <S2SV_ModStart> } else { vpx_lpf_lpf_lpf_4 <S2SV_ModEnd> ( s,",0
449,"<S2SV_ModStart>, & ctx -> ctx",0
450,<S2SV_ModStart> ) ; } status = DestroyImageList ( image ) ;,0
451,<S2SV_ModStart> ; } <S2SV_null> <S2SV_null> <S2SV_null>,0
452,<S2SV_ModStart> (,0
453,,0
454,<S2SV_ModStart> ; int count ; if ( count > sizeof ( buf ) ) return - EINVAL ;,0
455,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> ( ( char ) <S2SV_ModStart> (! name [ 1 ] ) && ( ( ( ( * ) ) ) == '\\0' || ( ( ( * ) ) ) == '\\0' || ( ( ( ( ( * ) ) == '\\0' ) ) ) == '\\0' || ( ( ( * ) ) ) == '\\0' || ( ( ( * ) == '\\0' ) ) == '\\0' ) ) && ( ( * ) == '\\0' ) == '\\0' || ( ( * ) == '\\0' || ( * ) == '\\0' ) ) == '\\0' || ( ( ( ( * ) == '\\0' ) == '\\0' ) ) ) && ( ( ( ( ( * ) == '\\0' ) ) ) == '\\0' ) ) ) { if ( ( ( ( ( ( * ) == '\\0' ) == '\\0' ) ) ) == '\\0' || ( ( ( name [ 1 ] == '\\0' ) ) ) == '\\0' || ( ( ( ( ( len ) ) ) ) == '\\0' || ( ( ( ( (,0
456,,0
457,<S2SV_ModStart> ; if ( strncpy <S2SV_ModEnd> ( skb ),0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
460,"<S2SV_ModStart> ; int key_data_data_data ; if ( key_data_data_data_data_data_data_data_data = 0, key_data_data_data_data_data_data_data_data_data_data_data_data ) ) ; if ( key_data_data_data_data_data == - 1 ) goto out ;",0
461,,0
462,,0
463,"<S2SV_ModStart> * inode, <S2SV_ModEnd> flags &",0
464,"<S2SV_ModStart> arg, int <S2SV_ModEnd> lineno, int",0
465,<S2SV_ModStart> <S2SV_null> <S,0
466,,0
467,<S2SV_ModStart> char * data ; if (! dataLength ) return - 1,0
468,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
469,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
470,"<S2SV_ModStart> ""MemoryAllocationFailed"" ) ; ( void ) NULL ;",0
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
472,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> bn_t <S2SV_ModEnd> m2SV_null> <S2SV_null> <S2SV_null>,0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,<S2SV_ModStart> ( psf = <S2SV_ModEnd> ( psf =,0
475,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
476,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( x -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( x ->,0
477,<S2SV_ModStart> ) ; return ret <S2SV_ModEnd> ; } return,0
478,"<S2SV_ModStart> = 0 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
479,<S2SV_ModStart> len = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len ),0
480,<S2SV_ModStart> ; ps_dec ->,0
481,"<S2SV_ModStart> int mptctl_eventinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_eventinfo * ioc, <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } dctlprintk",0
482,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> rows ) ;",0
483,"<S2SV_ModStart> ; } } if ( stderr == NULL ) { log ( ""Error"" ) ; return - 1 ; }",0
484,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ; if ( exif_get_get_size ( buf_size ( buf_size ( buf_size ) ) ) { exif_log ( n -> entries [ tcount ]. entry_size ) ; n -> entries [ tcount ]. entries [ tcount ]. tag = exif_log ( n -> entries [ tcount ]. order ) ; n -> entries [ tcount ]. entries [ tcount ]. tag = exif_log ( n -> entries [ tcount ]. order ) ; n -> entries [ tcount ]. tag = exif_log ( n -> entries [ tcount ]. order ) ; n -> entries [ tcount ]. tag = exif_log ( n -> entries [ tcount ]. order ) ; n -> entries [ tcount ; n -> entries [ tcount ] = exif_log ( n -> entries [ tcount ]. order ) ; n -> entries [ tcount ]. tag = exif_log ( n -> entries [ tcount ]. entries [ tcount ]. order ) ; n -> entries [ tcount ; n -> entries [ tcount ],0
485,,0
486,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static struct sock_options * opt_options <S2SV_ModEnd> ; struct <S2SV_ModStart> * opt ; struct sock_options = get_options_options_options ( opt ) ; if ( opt_options ( opt ) ) return - EINVAL ;,0
487,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
488,"<S2SV_ModStart> ( interface, ENC624J2 <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC624J1 ), ENC624J600_ECON2 <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC624J600_ECON2 ), ENC624J600_ECON2 <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC624J600_ECON2 ), ENC624J600_ECON2 <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC624J600_ECON2 ), ENC624J600_ECON2 <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> ) ; }",0
489,"<S2SV_ModStart> ( Image * image <S2SV_ModEnd>, image ->",0
490,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
491,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> S2SV_null> <S2SV_null>,0
492,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; if (,0
493,,0
494,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
496,<S2SV_ModStart> ; } } kiocb :,0
497,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
498,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
499,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
500,<S2SV_ModStart> ; } } else free ( buf ) ;,0
501,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> { const char * cp ++ ; char * cp ++ ; char * cp ++ ; char * cp ++ ; <S2SV_ModStart> = cp = cp <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( cp ) return 0 <S2SV_ModEnd> ; } <S2SV_null>,0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( pix,0
504,"<S2SV_ModStart> 1 ) ; memcpy <S2SV_ModEnd> ( cpi,",0
505,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
506,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
507,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
508,"<S2SV_ModStart> ( interface, NULL,",0
509,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
510,"<S2SV_ModStart> * xd, MACROBLOCKD * xd <S2SV_ModEnd>, int",0
511,,0
512,<S2SV_ModStart> ; ei -> i_inode = NULL ; ei ->,0
513,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
514,,0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context ->,0
516,<S2SV_ModStart> ; i += 2 <S2SV_ModEnd> ; if (,0
517,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( pc ->,0
518,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
519,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
520,<S2SV_ModStart> ; # endif # ifdef TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ),0
521,<S2SV_ModStart> ++ ) ; if ( state == 0 ) return 0 ;,0
522,<S2SV_ModStart> = 0 ; err = 0 ;,0
523,<S2SV_ModStart> event ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
524,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
525,<S2SV_ModStart> ) { return - 1,0
526,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
527,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
528,<S2SV_ModStart> ; err = 0 <S2SV_ModEnd> ; if (,0
529,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
530,,0
531,<S2SV_ModStart> ++ ) { <S2SV_ModEnd> if ( row,0
532,,0
533,<S2SV_ModStart> ( void ) AcquireQuantum_info ;,0
534,<S2SV_ModStart> ) break ; },0
535,,0
536,<S2SV_ModStart> ; if (! new_dir ) goto out ; if (,0
537,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
538,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> const VP9_COMMON <S2SV_ModEnd> VP9_COMMON <S2SV_ModStart> * cpi, MACROBLOCKD * <S2SV_ModEnd>, MACROBLOCKD * <S2SV_ModStart> mi_SIZE bsize, MACROBLOCKD * const tile, MACROBLOCKD * const mi_row, MACROBLOCKD * const mi_row, MACROBLOCKD * const xd <S2SV_ModEnd>, MACROBLOCKD * <S2SV_ModStart> plane [ bsize ] ; if ( bsize < 0 ) return ;",0
539,<S2SV_ModStart>,0
540,<S2SV_ModStart> = 0 ; TEMP_FAILURE_RETRY (,0
541,<S2SV_ModStart> = vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> ; if (,0
542,<S2SV_ModStart> ( void ) AcquireQuantum_info ;,0
543,<S2SV_ModStart> event ) ; <S2SV_ModEnd> return 0 ;,0
544,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
545,<S2SV_ModStart> -> outputbuffer ) ; memcpy <S2SV_ModEnd> ( res ->,0
546,"<S2SV_ModStart> ; } } memcpy <S2SV_ModEnd> ( src,",0
547,<S2SV_ModStart> ; } <S2SV_null>,0
548,<S2SV_ModStart> ; if ( <S2SV_ModEnd> desc -> bNumEndpoints < 2,0
549,"<S2SV_ModStart> event, size <S2SV_ModEnd> ) ; }",0
550,<S2SV_ModStart> ) ; } memset <S2SV_ModEnd> ( b ->,0
551,<S2SV_ModStart>,0
552,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
553,<S2SV_ModStart>,0
554,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
555,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
556,,0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
559,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
560,"<S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( mvs,",0
561,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
562,,1
563,,0
564,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> flags & size ),0
565,<S2SV_ModStart> * phdr ; unsigned <S2SV_ModStart> phdr ) ; phdr = 0,0
566,<S2SV_ModStart> ) ) ; slen = s ;,0
567,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
568,<S2SV_ModStart> ) ) { goto out_free ; },0
569,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> VP9EncoderConfig <S2SV_ModEnd> * const VP9EncoderConfig <S2SV_ModStart> ) ) { const VP9EncoderConfig <S2SV_ModEnd> ( cpi <S2SV_ModStart> ) ) ; return rc <S2SV_ModEnd> ; } <S2SV_ModStart> ; } return <S2SV_ModEnd> ; } <S2SV_null>,0
570,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
571,"<S2SV_ModStart> ""hex_grammar.c"" { yr_grammar.c"" break ; } # line 8""hex_grammar.c""hex_grammar.c""hex_grammar.c""hex_grammar.c"" { yr_grammar.c"" break ; } <S2SV_ModEnd> ""hex_grammar.c""hex_grammar.c"" break ;",0
572,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> const VP9_COMMON <S2SV_ModEnd> * const <S2SV_ModStart> int tx_size ; MACROBLOCKD * const BLOCK_SIZE tx_size = & cpi -> plane [ BLOCK_SIZE tx_size ] ; const BLOCK_SIZE tx_SIZE tx_size = BLOCK_SIZE tx_size,0
573,,0
574,,0
575,,0
576,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
577,<S2SV_ModStart> = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg ),0
578,<S2SV_ModStart> size = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len ),0
579,<S2SV_ModStart> { } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
580,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
581,<S2SV_ModStart> ) ) { if ( zend_type == 0 ) { zend_error ( 1 ) ; },0
582,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
583,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
584,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> buffer_table_table_table_table_table_table_table ( <S2SV_ModStart> ; if (! table_table_table_table ) return FALSE ; if (! table_table_table ) return FALSE ; <S2SV_ModStart> return FALSE ; if (! table_table_table_table ) return FALSE ;,0
585,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
586,"<S2SV_ModStart> * seg ; memset <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( seg,",0
587,"<S2SV_ModStart> ; if ( obj_type == NULL ) return 0 ; <S2SV_ModStart> } if ( obj_type == NULL ) return 1 ; <S2SV_ModStart> ; if ( obj_type == NULL ) return 0 ; <S2SV_ModStart> ( obj_type, ""Type_type_type ) ; if ( obj_type == NULL ) return 1 ; <S2SV_ModStart> ; if ( obj_type == NULL ) return 1 ; if ( obj_type == NULL ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( obj_type, type_type, type_type ) < 0 ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( obj_type ) return 1 ; if ( obj_type == NULL ) return 1 ; if ( obj_type == NULL ) return - 1 ; <S2SV_ModStart> ( obj_type ) { if ( obj_type == NULL ) return 1 ; } if ( obj_type == NULL ) { <S2SV_ModStart> ; if ( obj_type == NULL ) { if ( obj_type == NULL ) { <S2SV_ModStart> ; if ( obj_type == NULL ) return 1 ; } if ( obj_type == NULL ) { <S2SV_ModStart>",0
588,<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ),0
589,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
590,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> s2SV_null> <S2SV_null>,0
591,"<S2SV_ModStart> ; if ( lookup_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & tmp ) < 0 ) { return 1 ; } if ( lookup_id ( obj, & PyId_id ) < 0 ) { return 1 ; } if ( lookup_id ( lookup_id ( obj, & PyId_id ) < 0 ) { return 1 ;",0
592,"<S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w )",0
593,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { err = - EINVAL ; goto out ; },0
594,<S2SV_ModStart> ; # if CONFIG_PASS <S2SV_ModEnd> ( stream ->,0
595,,0
596,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> memset <S2SV_ModEnd> ( VP9_null> <S2SV_null>,0
597,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void vpx_writer <S2SV_ModEnd> * const VP9_COMMON <S2SV_ModStart> cm ) { VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const cm = & cm -> common ; VP9_COMMON * const VP9_COMMON * const cm = & cm -> oxcf = & cm -> common ; cm -> frame_id = 0 ; cm -> frame_id = 0 ; cm -> frame_id = 0 ; cm -> last_frame_frame_frame_frame_frame_frame = 0 ; cm -> last_frame_frame_frame_frame = 0 ; cm -> last_frame_frame_frame_frame_frame_frame_id = NULL ; vpx_write ( cm -> last_frame_frame_frame_frame_frame <S2SV_ModEnd> ) ;,0
598,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
599,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ip_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> opt -> opt = opt -> opt -> opt,0
600,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
601,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
602,"<S2SV_ModStart>, & len, 0",1
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
604,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
605,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> JAS_DBGLOG ( JAS_DBGLOG ( ""%s\\n"", size ) ) { jas_eprintf ( ""%s\\n"", size ) ; goto error <S2SV_ModEnd> ; } if",0
606,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> VP9EncoderConfig <S2SV_ModEnd> * const VP9_COMMON <S2SV_ModStart> * cpi, MACROBLOCKD * x, MACROBLOCKD * const x, MACROBLOCKD * x, MACROBLOCKD * const x, MACROBLOCKD * x, MACROBLOCKD * const x = & cpi -> oxcf <S2SV_ModStart> ; x = & cpi -> oxcf ; if ( x -> oxcf. flags & cpi -> oxcf. bsize ) { x = & cpi -> oxcf. mb ; } else { x = & cpi -> oxcf. mbmi_ext ; } else { x -> oxcf = x -> oxcf. mbmi_mode_type ; } else { x -> oxcf = x -> oxcf. mbmi_mode_mode ; } if ( x -> oxcf. mode_mode == BLOCK_SIZE bsize ) { x -> oxcf = 0 ; } if ( x -> oxcf. mode == KEY_FRAME ) { x -> oxcf = x -> oxcf. bsize = x -> oxcf. mbmi_mode_mode_type ; } if ( x -> oxcf.",0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
608,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = 0 ; uint32_t bit_t i ; uint32_t i ; uint32_t bit_size = 0 ; <S2SV_ModStart> = 0 ; offset = 0 ; offset [ i ] = 0 ; if (! bit_size ) return 0 ;,0
609,<S2SV_ModStart> { if ( ( is_char * ),0
610,<S2SV_ModStart> client -> data_line = 0 ;,0
611,"<S2SV_ModStart>, y, <S2SV_ModEnd> ) ) return",0
612,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> buffer, 0 )",0
613,<S2SV_ModStart> y3 ) { sprintf ( outputbuffer ) ;,0
614,<S2SV_ModStart> y3f ) { sprintf ( outputbuffer <S2SV_ModEnd> ) ;,0
615,,0
616,<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( cm ->,0
617,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
618,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> xWantedSize ) { xWantedSize = xWantedSize ; } if ( xWantedSize > xWantedSize ) { xWantedSize = 0 ; } } else { xWantedSize = xWantedSize ; } else { xWantedSize = xWantedSize ; } if ( xWantedSize > xWantedSize ) { xWantedSize = 0 ; } else { xWantedSize ; } else { xWantedSize = 0 ; } } else { xWantedSize = xWantedSize ; } else { xWantedSize = 0 ; } } } else { xWantedSize = xWantedSize ; } } else { xWantedSize = xWantedSize ; } else { xWantedSize ; } } } else { xWantedSize = xWantedSize ; } } else { xWantedSize = xWantedSize ; } } } } } else { xWantedSize = xWantedSize ; } } } else { xWantedSize = xWantedSize ; } else { xWantedSize,0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
621,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
622,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
623,<S2SV_ModStart> ( fd ) <S2SV_ModEnd> ; r =,0
624,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
625,"<S2SV_ModStart>,",0
626,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int vp9_block_stride <S2SV_ModEnd> ( xd, <S2SV_ModStart> = vp9_block_stride <S2SV_ModEnd> ( xd, <S2SV_ModStart> = vp9_block_stride <S2SV_ModEnd> ( xd, <S2SV_ModStart> ; vp9_block_stride <S2SV_ModEnd> ( xd,",0
627,"<S2SV_ModStart> bufp, ""\\n"" <S2SV_ModEnd> ) ; buf",0
628,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
629,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModStart> void ) { VP9_null> <S2SV_null> <S2SV_null>,0
630,<S2SV_ModStart> ; if ( len < 4 ) return - 1 ; <S2SV_ModStart> ) ) return ;,0
631,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
632,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
633,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
634,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> buffer ),0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
636,<S2SV_ModStart> g ) ;,0
637,,0
638,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return 0 ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
639,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> ipv6SV_null> <S2SV_null>,0
640,"<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi,",0
641,<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( & bp [ 0 ] ) ;,0
642,"<S2SV_ModStart> int mptctl_eventarg ( MPT_ADAPTER * ioc, <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } dctlprintk",0
643,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
644,,0
645,<S2SV_ModStart> = 0 ; if ( new_mode == NULL ) return ;,0
646,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> r ) { const vpx_read_bit <S2SV_ModEnd> ( r, <S2SV_ModStart> r ) ; return 1 <S2SV_ModEnd> ; } <S2SV_null>",0
647,"<S2SV_ModStart> * probs, vpx_prob <S2SV_ModEnd> * probs )",0
648,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r )",0
649,<S2SV_ModStart> ; # if CONFIG_VP9_CODEC_HIGHBITDEPTH if ( stream. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. cfg = 0 ; if (! config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config. config,0
650,<S2SV_ModStart> ) ) { ND_TCHECK_16BITS ( cp + 1 ) ;,0
651,,0
652,"<S2SV_ModStart> key, key <S2SV_ModEnd> ) ; ret",0
653,<S2SV_ModStart> ; tok -> type_comment = 0 ;,0
654,,0
655,,0
656,<S2SV_ModStart> = 0 ; size_t addrlen_t addrlen_out = 0 ; <S2SV_ModStart> (! addrlen_out ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if (! addrlen_out ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_RAISE_ERRNO ( OE_EINVAL ) ; } if (! addrlen_out ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if (! addrlen_out ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_ERRNO ( OE_RAISE_ERRNO ( OE_ERRNO ( OE_ERRNO ( OE_EINVAL ) ) ; } if (! addrlen_out ) ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
657,,1
658,<S2SV_ModStart> ; } return FALSE,0
659,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct ipv6_txoptions * opt ; <S2SV_ModStart> ) ) { if ( opt ) return - EINVAL ; },0
660,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> unsigned int <S2SV_ModEnd> uint32_t <S2SV_ModStart> = 0 ; int err_size = 0 <S2SV_ModStart> = 0 ; uint32_t err_size = 0 ; <S2SV_ModStart> = 0 ; uint32_t max_size = 0 ; <S2SV_ModStart> ; int err_size = 0 ; uint32_t err_size = 0 ; <S2SV_ModStart> = 0 ; if ( unsigned int maxsize > MAX ( unsigned char * sizeof ( unsigned int ) ) ) ) goto out ; <S2SV_ModStart> = 0 ; if ( unsigned int i < sizeof ( unsigned int ) ) { if ( unsigned char * ) return - 1 ; } <S2SV_ModStart> = 0 ; if ( unsigned int i < sizeof ( unsigned int ) ) return - 1 ;,0
661,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_PR <S2SV_ModEnd> ; dm9000WriteReg <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR ) ; dm9000WriteReg ( DM9000_EPCR ) ; if ( DM9000WriteReg ( DM9000_EPCR )!= 0 ) { dm9000WriteReg ( DM9000_EPCR ) ; return - 1 ; } if ( DM9000WriteReg ( DM9000_EPCR_EPCR_EPCR_EPCR_EPCR_PR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR_EPCR, DM9000_EPCR_EPCR_PR <S2SV_ModEnd> ) ; }",0
662,<S2SV_ModStart> rc ) ; cib -> command = 0 ;,0
663,<S2SV_ModStart> ; msg. msg_namelen = 0,0
664,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
665,<S2SV_ModStart> ; if ( <S2SV_ModEnd>  h,0
666,,0
667,"<S2SV_ModStart> = 0 ; number_planes_planes_filled = ( number_filled * number_planes_planes_planes_planes_filled, number_planes_planes_planes_planes_filled ) ;",0
668,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( r =,0
669,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
670,<S2SV_ModStart> client ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
671,<S2SV_ModStart> =,0
