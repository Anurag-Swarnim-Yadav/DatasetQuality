,raw_predictions,correctly_predicted
0,<S2SV_ModStart> ; if ( n2size < 1 ) <S2SV_ModEnd> { applog (,0
1,<S2SV_ModStart> case EAP_FRAME_TYPE_PACKET : ND_TCHECK_8BITS ( tptr ) ; <S2SV_ModStart> 2 ) { ND_TCHECK_8BITS ( tptr + 2 ) ; <S2SV_ModStart> * ( tptr + 4 ) ; ND_TCHECK_8BITS ( tptr + 5 ) ;,0
2,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
3,"<S2SV_ModStart>. mask & ( YAM_IRQ | YAM_BITRATE ) &&! capable ( CAP_NET_ADMIN ) ) return - EPERM ; if ( ( ym = kmalloc ( sizeof ( struct yamdrv_mcs ), GFP_KERNEL ) ) == NULL ) return - ENOBUFS ; if ( ( ym -> bits > 255 ) || ( ym -> bitrate > YAM_MAXBITRATE ) ) { kfree ( ym ) ; return - EINVAL ; } add_mcs ( ym -> bits, ym -> bitrate, 0 ) ; kfree ( ym ) ; break ; } if ( ( ym = kmalloc ( sizeof ( struct yamdrv_mcs ), GFP_KERNEL ) ) == NULL ) return - ENOBUFS ; kfree ( ym ) ; break ; case SIOCYAMSMCS : if (! capable ( CAP_SYS_RAWIO ) ) return - EPERM ; if ( copy_from_user ( & yi, ifr -> ifr_data, sizeof ( struct yamdrv_ioctl_cfg ) ) ) return - EFAULT",0
4,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,0
5,"<S2SV_ModStart>, offset ; if ( avio_feof ( f ) ) { index -> item_count = 0 ; av_freep ( & index -> items ) ; return AVERROR_INVALIDDATA ; }",1
6,<S2SV_ModStart> * tpg ; u16 <S2SV_ModEnd> tpgt ; int <S2SV_ModStart> ; if ( kstrtou16 <S2SV_ModEnd> ( name + <S2SV_ModStart> ) || tpgt >= VHOST_SCSI_MAX_TARGET <S2SV_ModEnd> ) return ERR_PTR,1
7,<S2SV_ModStart> writer = ( TrackWriter <S2SV_ModEnd> * ) gf_list_get,0
8,"<S2SV_ModStart> { u32 data <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return ; kvm_read_guest_cached ( vcpu -> kvm, & <S2SV_ModEnd> vcpu -> arch <S2SV_ModStart>. apic -> vapic_cache, & data, sizeof ( u32 ) <S2SV_ModEnd> ) ; apic_set_tpr",1
9,<S2SV_ModStart> src ) ; switch ( src -> state ) { case TIF_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
10,<S2SV_ModStart> item ) { return <S2SV_ModEnd> array -> child <S2SV_ModStart> -> child ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
11,"<S2SV_ModStart> ',' ) { if ( * options == '.' ) { ext3_msg ( sb, KERN_ERR, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> \'%s\'"", ( char * ) * data ) ; return 1 ; } } if ( * options == ',' ) { ext3_msg ( sb, KERN_ERR, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> \'%s\'"", ( char * ) * data ) ; return 1 ; } if ( * options == ',' ) { ext3_msg ( sb, KERN_ERR, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> \'%s\'"", ( char * ) * data ) ; return 1 ; } if ( * options == ',' ) { ext3_msg ( sb, KERN_ERR, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> \'%s\'"", ( char * ) * data ) ; return 1 ; } if ( * options == ',' ) { ext3_msg ( sb, KERN_ERR, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> \'%s\'"", ( char * ) * data ) ; return 1 ;",0
12,"<S2SV_ModStart> ipv6_select_ident ( fptr, rt6_select_ident ( fptr, rt6_select_ident ( fptr, rt6_select_ident ( fptr, rt6_select_ident ( fptr, rt6_select_ident ( fptr, rt6_select_ident ( fptr, rt6_select_ident ( skb ) ) ) ) ) ; if ( unlikely ( unfrag_ip6hlen > rt6_select_ident ( fptr, rt6_select_ident ( fptr, rt6_select_ident ( fptr, rt6_select_ident ( fptr, rt6_select_ident ( fptr, rt6_select_ident ( fptr, rt6_select_ident ( fptr, rt6_select_ident ( fptr, rt6_select_ident ( skb ) ) ) ) ) ) ) ) goto out ;",0
13,"<S2SV_ModStart> u32 event_id, <S2SV_ModEnd> int nmi, <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",0
14,"<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { char * buf = grub_malloc ( <S2SV_ModEnd> EXT2_BLOCK_SIZE ( data <S2SV_ModStart> ( data ) ) ; if (! buf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } <S2SV_ModStart> leaf ) { <S2SV_ModEnd> grub_error ( GRUB_ERR_BAD_FS <S2SV_ModStart> ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } <S2SV_ModStart> 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
15,"<S2SV_ModStart> fdct16 ( const tran_low_t <S2SV_ModEnd> in [ 16 <S2SV_ModStart> 16 ] ) { tran_high_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> input [ 8 ] ; tran_high_t <S2SV_ModEnd> temp1, temp2 <S2SV_ModStart> { int s0, s1, s2, s3, s4, s5, s6, s7 ; tran_high_t x0, x1, x2, x3 ; input [ 0 ] = in [ 0 ] + in [ 15 ] ; input [ 1 ] = in [ 1 ] + in [ 14 ] ; input [ 2 ] = in [ 2 ] + in [ 13 ] ; input [ 3 ] = in [ 3 ] + in [ 14 ] ; input [ 4 ] = in [ 4 ] + in [ 11 ] ; input [ 5 ] = in [ 5 ] + in [ 12 ] ; input [ 6 ] = in [ 6 ] + in [ 8 ] ; input [ 7 ] = input [ 0 ] + input [ 7 ] + input [",0
16,<S2SV_ModStart> ; skip_full_check : kfree ( env -> insn_aux_data ) ; <S2SV_ModStart> err_unlock ; } if ( ( attr -> log_level || attr -> log_buf ) || ( attr -> log_size ) ) { ret = - EINVAL ; log -> level = attr -> log_level ; log -> ubuf = ( char __user * ) ( unsigned long ) attr -> log_buf ; if ( ret ) goto err_unlock ; } <S2SV_ModStart> skip_full_check : free ( env -> insn_aux_data ) ; err_free_env : kfree ( env -> insn_aux_data ) ; err_free_env : kfree ( env ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>,0
17,"<S2SV_ModStart> int i ; if (! config -> sample_rate ) { strcpy ( wpc -> error_message, ""sample <S2SV_blank> rate <S2SV_blank> cannot <S2SV_blank> be <S2SV_blank> zero!"" ) ; return FALSE ; }",1
18,"<S2SV_ModStart> = 0 ; unsigned char sense_buffer [ SCSI_SENSE_BUFFERSIZE ], * senseptr = NULL ; <S2SV_ModStart> cd -> device ; if ( cgc -> sense ) senseptr = sense_buffer <S2SV_ModStart> -> buflen, senseptr, & sshdr, cgc -> timeout, IOCTL_RETRIES, 0, 0, NULL ) ; if ( cgc -> sense ) memcpy ( cgc -> sense, sense_buffer, sizeof ( * <S2SV_ModEnd> cgc -> sense <S2SV_ModStart> cgc -> sense ) <S2SV_ModEnd> ) ; if",1
19,"<S2SV_ModStart> ; if ( hlen < len ) { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; # endif parse_ciff ( save + hlen, len - hlen, 0 ) ; } else if ( get4 ( ) == 0x48454150 ) { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; # endif",0
20,"<S2SV_ModStart> void search_filter_level ( VP9_COMMON * cm, YV12_BUFFER_CONFIG * sd, <S2SV_ModStart> partial_frame ) { <S2SV_ModEnd> struct loopfilter * <S2SV_ModStart> lf = & cm -> lf ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; int best_err ; int filt_best ; int filt_low ; int bias ; if ( cm -> tx_mode!= ONLY_4X4 ) { if ( cpi -> twopass. section_intra_rating < 20 ) bias = ( best_err >> ( 15 - ( filt_mid / 8 ) ) ) * cpi -> twopass. section_intra_rating / 20 ; else bias = ( best_err >> ( 15 - ( filt_mid / 8 ) ) ) * filter_step ; if ( cpi -> twopass. section_intra_rating < 20 ) bias = bias * cpi -> twopass. section_intra_rating / 20 ; if ( cpi -> twopass. section_intra_rating < 20 )",0
21,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
22,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> if ( usehp ) vpx_write <S2SV_ModEnd> ( w,",0
23,<S2SV_ModStart> ) ; return <S2SV_ModEnd> ralg -> seedsize,1
24,<S2SV_ModStart> ; if ( sockaddr_len < sizeof ( struct sockaddr_pppox ) ) return - EINVAL ; if (,1
25,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } else { <S2SV_ModEnd> request -> rxBlockSzx <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; } <S2SV_ModStart> ( ) ) { <S2SV_ModStart> ( ) ; },1
26,"<S2SV_ModStart> char * fmtname ; int verbose_level <S2SV_ModStart> = 0 ; verbose_level = 0 ; <S2SV_ModStart> break ; case OPT_VERBOSE : verbose_level = 1 ; break ; case <S2SV_ModStart> break ; case OPT_INFILE : infile = jas_optarg ; break ; case <S2SV_ModStart> } } if ( ( fmtid = jas_image_getfmtid ( instream ) ) < 0 ) { fprintf ( stderr, ""unknown <S2SV_blank> image <S2SV_blank> format\\n"" ) ; } if (! ( image = jas_image_decode ( image, fmtid, 0 ) ) ) { fprintf ( stderr, ""cannot <S2SV_blank> decode <S2SV_blank> image <S2SV_blank> file <S2SV_blank> %s\\n"", fmtname ) ; return EXIT_FAILURE ; } jas_stream_close ( instream ) ; if ( ( fmtid = jas_image_getfmtid ( image ) ) < 0 ) { fprintf ( stderr, ""unknown <S2SV_blank> image <S2SV_blank> format\\n"" ) ; } if (! ( image = jas_image_decode ( image, fmtid, 0 ) ) ) { fprintf ( stderr, ""cannot <S2SV_blank> decode <S2SV_blank> image <S2SV_blank> file <S2SV_blank> %s\\n"", fmtname ) ; return EXIT_FAILURE",0
27,"<S2SV_ModStart> esr ) { # ifdef CONFIG_X86_64 <S2SV_ModEnd> pr_crit ( ""Bad <S2SV_blank> mode <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> handler <S2SV_blank> detected, <S2SV_blank> code <S2SV_blank> 0x%08x\\n"" <S2SV_ModStart> esr ) ; # endif",0
28,"<S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; length -= 4 ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ptr, length <S2SV_ModEnd> ) ; }",0
29,"<S2SV_ModStart> intf ) { struct usb_host_interface * <S2SV_ModEnd> alt ; alt <S2SV_ModStart> ; if (! alt ) return - ENODEV <S2SV_ModEnd> ; return usb_set_interface <S2SV_ModStart> ( udev, alt -> <S2SV_ModEnd> desc. bInterfaceNumber <S2SV_ModStart> bInterfaceNumber, alt -> desc. bAlternateSetting",1
30,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> udf_pc_to_char ( struct <S2SV_ModStart> char * to, int tolen <S2SV_ModStart> = 0 ; int comp_len <S2SV_ModStart> = 0 ; if ( tolen == 0 ) return - ENAMETOOLONG ; <S2SV_ModStart> case 2 : if ( tolen < 3 ) return - ENAMETOOLONG ; <S2SV_ModStart> = '/' ; tolen -= 3 ; <S2SV_ModStart> case 3 : if ( tolen < 2 ) return - ENAMETOOLONG ; <S2SV_ModStart> += 3 ; tolen -= 2 ; <S2SV_ModStart> case 4 : if ( tolen < 2 ) return - ENAMETOOLONG ; <S2SV_ModStart> += 2 ; tolen -= 2 ; <S2SV_ModStart> case 5 : comp_len = udf_get_filename ( sb, pc -> componentIdent, pc -> lengthComponentIdent, p, tolen ) ; p += comp_len ; tolen -= comp_len ; tolen -= comp_len ; if ( tolen == 0 ) return - ENAMETOOLONG <S2SV_ModEnd> ; * p <S2SV_ModStart> = '\\0' ; return 0 ;",0
31,"<S2SV_ModStart> } else { if ( server. protected_mode == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'no\'"" ; goto loaderr ; } } else if ( argc == 3 ) { if ( ( server. protected_mode = yesnotoi ( argv [ 1 ] ) ) == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'no\'"" ; goto loaderr ; } } else if ( argc == 4 ) { if ( ( server. protected_mode = yesnotoi ( argv [ 1 ] ) ) == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'no\'"" ; goto loaderr ; } } else if ( argc == 5 ) { if ( ( server. protected_mode = yesnotoi ( argv [ 1 ] ) ) == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'no\'"" ; goto loaderr ; } } else if ( ( server. protected_mode == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'no\'"" ; goto",0
32,<S2SV_ModStart> unsigned long flags ; if ( qid > NVMET_NR_QUEUES ) return NULL,1
33,"<S2SV_ModStart> bInterval ; } usb_set_intfdata ( interface, dev ) ; retval = usb_register_dev ( interface, & tower_class ) ; if ( retval ) { dev_err ( idev, ""Not <S2SV_blank> able <S2SV_blank> to <S2SV_blank> get <S2SV_blank> a <S2SV_blank> minor <S2SV_blank> for <S2SV_blank> this <S2SV_blank> device\\n"" ) ; usb_set_intfdata ( interface, NULL ) ; goto error ; }",0
34,"<S2SV_ModStart> out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; goto out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; goto out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; goto out_error ; }",0
35,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; if ( * _dest_keyring ) return - EINVAL ; <S2SV_ModStart> } else { if ( cred -> request_key_auth ) { <S2SV_ModStart> dest_keyring ) ; goto out ; } } case KEY_REQKEY_DEFL_THREAD_KEYRING : dest_keyring = key_get ( cred -> thread_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_PROCESS_KEYRING : dest_keyring = key_get ( cred -> process_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_USER_SESSION_KEYRING : dest_keyring = key_get ( cred -> user -> session_keyring ) ; break ; case KEY_REQKEY_DEFL_GROUP_KEYRING : dest_keyring = key_get ( cred -> group -> session_keyring ) ; break ; case KEY_REQKEY_DEFL_USER_SESSION_KEYRING : dest_keyring = key,0
36,<S2SV_ModStart> = create_spnego_ctx ( 0,0
37,"<S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_l2tpip <S2SV_ModEnd> ) ) return <S2SV_ModStart> ; if ( addr -> l2tp_family!= AF_INET <S2SV_ModEnd> ) return - <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> ret = - <S2SV_ModStart> ; read_lock_bh ( & l2tp_ip_lock ) ; if ( sk -> sk_state!= TCP_CLOSE || addr -> l2tp_conn_id ) goto out_in_use ; ret = - EADDRINUSE ; read_unlock_bh ( & l2tp_ip_lock ) ; if ( __l2tp_ip_bind_lookup ( net, addr -> l2tp_addr. s_addr, sk -> sk_bound_dev_if, addr -> l2tp_conn_id ) ) goto out_in_use ; ret = - EADDRINUSE ; if ( addr -> l2tp_addr. s_addr && chk_addr_ret!= RTN_LOCAL && chk_addr_ret!= RTN_MULTICAST && chk_addr_ret!= RTN_BROADCAST ) goto out ; if ( addr -> l2tp_addr. s_",0
38,<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline size_t <S2SV_ModEnd> stack_maxrandom_size ( void <S2SV_ModStart> void ) { size_t <S2SV_ModEnd> max = 0 <S2SV_ModStart> = 0 ; if ( ( current -> flags & PF_RANDOMIZE ) &&! ( current -> personality & ADDR_NO_RANDOMIZE ) ) { max = ( ( - 1U ) & STACK_RND_MASK ) << PAGE_SHIFT ; } else { max = ( ( - 1U ) & STACK_RND_MASK ) << PAGE_SHIFT ; } return max <S2SV_ModEnd> ; } <S2SV_null>,0
39,"<S2SV_ModStart>, _ ( ""_Cancel"" ), GTK_RESPONSE_CANCEL ) ; gtk_dialog_set_default_response ( GTK_DIALOG ( dialog ), GTK_RESPONSE_CANCEL <S2SV_ModEnd> ) ; if <S2SV_ModStart>, _ ( ""Trust <S2SV_blank> and <S2SV_blank> _Launch"" ), GTK_RESPONSE_OK <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> g_signal_connect ( dialog",1
40,<S2SV_ModStart> t ) ; if ( t == 0 ) return NULL,0
41,<S2SV_ModStart> password ) ) ; if ( type == PW_PASSWORD ) { vector = request -> vector ; } else { vector = attr -> data ; },0
42,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0x51 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> 0x51 <S2SV_blank> transfer <S2SV_blank> failed."" ) ; mutex_unlock ( & d -> data_mutex ) ; adap <S2SV_ModEnd> -> fe_adap [ <S2SV_ModStart> & d -> <S2SV_ModEnd> i2c_adap ) ; <S2SV_ModStart> ; if ( adap <S2SV_ModEnd> -> fe_adap [ <S2SV_ModStart> ( ts2020_attach, adap <S2SV_ModEnd> -> fe_adap [ <S2SV_ModStart>, & d <S2SV_ModEnd> -> i2c_adap )",1
43,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
44,"<S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> value <S2SV_blank> \'%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w ->",0
45,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horAcc8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
46,"<S2SV_ModStart> tsample_t s ; uint16 bps = 0 ; ( void ) TIFFGetField ( in, TIFFTAG_BITSPERSAMPLE, & bps ) ; if ( bps!= 8 ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> can <S2SV_blank> only <S2SV_blank> handle <S2SV_blank> BitsPerSample=8 <S2SV_blank> in <S2SV_blank> %s"", ""cpContig2SeparateByRow"" ) ; return 0 ; }",1
47,"<S2SV_ModStart> ) ; struct hugepage_subpool * spool = ( struct hugepage_subpool <S2SV_ModEnd> * ) page_private <S2SV_ModStart> hugetlb_lock ) ; hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, 1 )",1
48,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) { return AVERROR_EOF ; } if (,1
49,<S2SV_ModStart> ; if ( e - p > HOST_NAME_MAX - 1 <S2SV_ModEnd> ) goto not_found,0
50,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> bool <S2SV_ModEnd> generic_pipe_buf_get ( struct <S2SV_ModStart> buf ) { return try_get_page <S2SV_ModEnd> ( buf ->,1
51,"<S2SV_ModStart> if ( cp == NULL ) cp = ikev2_attr_print ( ndo, cp, ep2 ) ; else cp = ikev2_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) cp = ikev2_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) cp = ikev2_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) cp = ikev2_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) cp = ikev2_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) cp = ikev2_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) cp = ikev2_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) cp = ikev2_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) cp = ikev2_attr_print ( ndo, cp, ep2",0
52,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",1
53,"<S2SV_ModStart> 0 ; if (! FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { FD_SET ( reader -> bytes_available_fd, & read_fds ) ; return false ; } if (! select ( reader -> bytes_available_fd + 1, & read_fds, NULL, NULL, & timeout ) ) { FD_SET ( reader -> bytes_available_fd, & read_fds ) ; return false ; }",0
54,<S2SV_ModStart> config -> pm_max_requests ; fpm_globals. listening_socket = NULL,0
55,"<S2SV_ModStart> detect_transition_to_still ( struct twopass_rc <S2SV_ModEnd> * twopass, <S2SV_ModStart> last_decay_rate ) { const FIRSTPASS_STATS * const <S2SV_ModEnd> position = twopass <S2SV_ModStart> 0 ; int trans_to_still = 0 ; if ( frame_interval < MIN_GF_INTERVAL && loop_decay_rate >= 0.999 && last_decay_rate < 0.9 ) { int j ; const FIRSTPASS_STATS tmp_next_frame ; for ( j = 0 ; j < still_interval ; ++ j ) { if ( EOF == input_stats ( twopass, & tmp_next_frame ) ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 <S2SV_ModEnd> ) break ; <S2SV_ModStart> } reset_fpf_position ( twopass, position ) ; } <S2SV_ModEnd> trans_to_still = 1 <S2SV_ModStart> trans_to_still ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
56,<S2SV_ModStart> 0 ; } err = handle -> h_err ; <S2SV_ModStart> h_transaction ) { rc <S2SV_ModEnd> = jbd2_journal_stop ( <S2SV_ModStart> ) ; return err? err : rc <S2SV_ModEnd> ; } sb <S2SV_ModStart> t_journal -> j_private <S2SV_ModEnd> ; rc =,1
57,"<S2SV_ModStart> ; if ( unlikely ( <S2SV_ModStart> inode ) ) ) { ret = ext4_convert_unwritten_extents ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten <S2SV_blank> extents"" ""to <S2SV_blank> written <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" ""\\n"", __func__, ret ) ; goto out ; } } ret = ext4_write_unwritten_extents ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten <S2SV_blank> extents"" ""to <S2SV_blank> written <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" ""\\n"", __func__, ret ) ; goto out ; }",0
58,<S2SV_ModStart> valuelen ) ; args -> rmtvaluelen = args -> valuelen ;,1
59,<S2SV_ModStart> alg ) { if ( type == <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
60,"<S2SV_ModStart> 2 ) { ND_TCHECK2 ( * tptr, 2 ) ; <S2SV_ModStart> len - 2 ; if ( len < stlv_len ) goto trunc ; ND_TCHECK2 ( * ( tptr ), stlv_len ) <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ; stlv_len = stlv_len - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ; <S2SV_ModStart> tmp ) { if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_VLAN_TUPLE_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> tmp ) { if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_VLAN_TUPLE_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> tmp ) ; stlv_len = stlv_len - ISIS_SUBTLV_SPB_INSTANCE_VLAN_",0
61,"<S2SV_ModStart> { return reply_msg ( c, MSG_JOB_TOO_BIG ) ; } if ( name [ 0 ]!= '\\0' ) { twarnx ( ""server <S2SV_blank> error: <S2SV_blank> """,0
62,"<S2SV_ModStart> flags ) ; memset ( & ddi, 0, sizeof ( ddi ) ) ;",1
63,<S2SV_ModStart> == 12 && ( <S2SV_ModStart> flags & TH_SYN ),1
64,"<S2SV_ModStart> -> ipc_socket ; <S2SV_ModEnd> lxc_attach_options_t * options <S2SV_ModStart> int fd ; <S2SV_ModEnd> int status ; <S2SV_ModStart> { ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (0): <S2SV_blank> %s"", strerror ( errno ) <S2SV_ModEnd> ) ; shutdown <S2SV_ModStart> { ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (1): <S2SV_blank> %s"", strerror ( errno ) <S2SV_ModEnd> ) ; shutdown <S2SV_ModStart> { ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (2): <S2SV_blank> %s"", strerror ( errno ) ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } status = lxc_read_nointr_expect ( ipc_socket, & status, sizeof ( status ), & expected ) ; if ( ret <= 0 ) { ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (2): <S2SV_blank> %s"", strerror ( errno ) ) ; shutdown ( ipc_socket, SHUT_RD",0
65,"<S2SV_ModStart> = GIT_PKT_NG ; if ( strlen ( line ) > 3 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } <S2SV_ModStart> += 3 ; if ( strlen ( line ) > 3 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } <S2SV_ModStart> = '\\0' ; line = ptr + 1 ; if ( strlen ( line ) > 3 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } <S2SV_ModEnd> len = ptr <S2SV_ModStart> += 3 ; if ( strlen ( line ) > 1 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } <S2SV_ModEnd> pkt -> ref <S2SV_ModStart> pkt -> ref ) ; memcpy ( pkt -> ref, line, len ) ; pkt -> msg = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> msg ) ; memcpy ( pkt -> msg, line, len ) ; pkt -> msg [ len ] = '\\0' ;",0
66,"<S2SV_ModStart> ( header -> biBitCount == 0 ) { fprintf ( stderr, ""Error, <S2SV_blank> invalid <S2SV_blank> biBitCount <S2SV_blank> %d\\n"", 0 ) ; return OPJ_FALSE ; } if ( header ->",1
67,<S2SV_ModStart> NULL ; } sas_probe_devices ( port ) ;,1
68,"<S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,"<S2SV_ModStart> ENOBUFS ; } memset ( & line, 0, sizeof ( line ) ) ;",1
71,"<S2SV_ModStart> arg ) { int ret ; ret = scsi_verify_blk_ioctl ( bd, cmd ) ; if ( ret < 0 ) return ret ;",1
72,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nego_process_negotiation_request ( rdpNego <S2SV_ModStart> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nego_process_negotiation_request ( rdpNego <S2SV_ModStart> = NEGO_STATE_FINAL ; return TRUE ;,0
73,<S2SV_ModStart> * ureq ; unsigned <S2SV_ModStart> return - EFAULT ; if ( req_len > ( QETH_BUFSIZE - IPA_PDU_HEADER_SIZE - sizeof ( struct qeth_ipacmd_hdr ) - sizeof ( struct qeth_ipacmd_setadpparms_hdr ) ) ) return - EINVAL,1
74,"<S2SV_ModStart> int m ; if ( n < 0 ) { jas_deprecated ( ""negative <S2SV_blank> count <S2SV_blank> for <S2SV_blank> jas_stream_pad"" ) ; }",1
75,<S2SV_ModStart> ; } } if ( avio_feof ( pb ) ) return AVERROR_EOF ;,0
76,"<S2SV_ModStart> av_log ( mxf -> fc <S2SV_ModEnd>, AV_LOG_INFO, <S2SV_ModStart> AV_LOG_ERROR, ""could <S2SV_blank> not <S2SV_blank> resolve <S2SV_blank> material <S2SV_blank> track <S2SV_blank> strong <S2SV_blank> ref\\n"" ) ; return AVERROR_INVALIDDATA ; } if (! ( source_track = mxf_resolve_strong_ref ( mxf, & mxf -> tracks_refs [ i ], MXFTrack ) ) ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""could <S2SV_blank> not <S2SV_blank> resolve <S2SV_blank> track <S2SV_blank> strong <S2SV_blank> ref\\n"" ) ; return AVERROR_INVALIDDATA ; } if (! ( temp_track = mxf_resolve_strong_ref ( mxf, & mxf -> tracks_refs [ i ], MXFTrack ) ) ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""could <S2SV_blank> not <S2SV_blank> resolve <S2SV_blank> material <S2SV_blank> track <S2SV_blank> strong <S2SV_blank> ref\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
77,"<S2SV_ModStart> mntent, path, 0",0
78,<S2SV_ModStart> + 10 ; if ( psf -> fileoffset < psf -> filelength ) { <S2SV_ModStart> ; } ; } ;,1
79,"<S2SV_ModStart> case LS_COOKIE_ID : ND_TCHECK2 ( p [ 0 ], 2 ) ; <S2SV_ModStart> case LS_COOKIE_ID : ND_TCHECK2 ( p [ 0 ], 2 ) ; <S2SV_ModStart> += jnx_ext_len ; if ( l2info -> cookie_len > l2info -> length ) { ND_PRINT ( ( ndo, ""cookie <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", l2info -> cookie_len ) ) ; l2info -> cookie_len = l2info -> length ; } else { ND_PRINT ( ( ndo, ""cookie <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", l2info -> cookie_len ) ) ; if ( l2info -> cookie_len > l2info -> length ) { ND_PRINT ( ( ndo, ""cookie <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", l2info -> cookie_len ) ) ; return 0 ; }",0
80,<S2SV_ModStart> NF_STOLEN ; return err == 0? NF_ACCEPT : NF_DROP <S2SV_ModEnd> ; } <S2SV_null>,1
81,"<S2SV_ModStart> * up ; int klen, ulen ; <S2SV_ModStart> rta ) ; klen = <S2SV_ModEnd> xfrm_replay_state_esn_len ( up <S2SV_ModStart> ( up ) ; ulen = nla_len ( rta ) ; p = kzalloc ( klen <S2SV_ModStart> ; pp = kzalloc ( klen <S2SV_ModEnd>, GFP_KERNEL ) <S2SV_ModStart> ENOMEM ; } memcpy ( p, up, ulen ) ; memcpy ( pp, up, ulen ) ; memcpy ( pp, up, ulen ) ;",0
82,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } io -> io_cleanup = mem_cleanup ;,1
83,<S2SV_ModStart> ; result = ( MagickRealType ) <S2SV_ModStart> ; result = ( MagickRealType ) <S2SV_ModStart> ; result = ( MagickRealType ) <S2SV_ModStart> ; result = ( MagickRealType ) <S2SV_ModEnd> ( ( size_t <S2SV_ModStart> ; result = ( MagickRealType ) <S2SV_ModEnd> ( ( size_t <S2SV_ModStart> ; result = ( MagickRealType ) <S2SV_ModEnd> ( ( size_t <S2SV_ModStart> ; result = ( MagickRealType ) <S2SV_ModEnd> ( ( size_t <S2SV_ModStart> ; result = result <S2SV_ModEnd> << ( size_t,0
84,<S2SV_ModStart> LINK_KEY ) ) ; if ( ret == 0 ) { btif_storage_invalidate_all ( remote_bd_addr ) ; return BT_STATUS_FAIL ; },0
85,"<S2SV_ModStart> ( buf = jas_alloc3 ( bufsize, numcols <S2SV_ModEnd>, sizeof (",1
86,<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; if (! cfg ) return VPX_CODEC_INVALID_PARAM ; if ( iface -> enc. cfg_maps == NULL ) return VPX_CODEC_INCAPABLE <S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; if (! iface -> enc. cfg_maps ) return VPX_CODEC_INCAPABLE ; if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else { res = VPX_CODEC_INVALID_PARAM ; } for ( map = iface -> enc. cfg_maps ; map -> usage >= 0 ; map ++ ) { if ( map -> cfg -> usage == ( int ) usage ) { * cfg = map -> cfg ; cfg -> g_usage = usage ; res = VPX_CODEC_OK ; break ; } } return res <S2SV_ModEnd> ; } <S2SV_,0
87,"<S2SV_ModStart> size ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""GSO <S2SV_blank> size <S2SV_blank> must <S2SV_blank> not <S2SV_blank> be <S2SV_blank> zero.\\n"" ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> gso. type ) ; netbk_fatal_tx_err ( vif",1
88,"<S2SV_ModStart> * object, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void * <S2SV_ModStart> < 0 ) <S2SV_ModEnd> bitmap_pos = ext_index_add_object <S2SV_ModStart> name ) ; <S2SV_ModEnd> bitmap_set ( base",1
89,"<S2SV_ModStart> xfr_cmd, fname <S2SV_ModEnd> ) ; free",1
90,<S2SV_ModStart> mixer ) { snd_usb_mixer_disconnect ( mixer ) ;,1
91,"<S2SV_ModStart> type_flags ) { struct packet_rollover * rollover = NULL ; struct <S2SV_ModStart> EINVAL ; } mutex_lock ( & fanout_mutex ) ; err = - EINVAL ; <S2SV_ModStart> -> running ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> fanout ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { err = - ENOMEM ; <S2SV_ModEnd> rollover = kzalloc <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_huge <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_failed <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_failed <S2SV_ModStart> 0 ) ; po -> rollover = rollover ; } <S2SV_ModEnd> match = NULL <S2SV_ModStart> list ) { list_for_each_entry ( f, & fanout_list, list ) { if ( f -> id == id && read_pnet ( & f -> net ) == sock_net ( sk ) ) { list_for_each_entry ( f, & fanout_list, list ) { if ( f -> id == id && read_pnet ( & f -> net ) == sock_net ( sk ) ) { list_",0
92,"<S2SV_ModStart> newsk ) ; memset ( newnp, 0, sizeof ( struct ipv6_pinfo ) ) ;",0
93,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
94,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
95,"<S2SV_ModStart> fields ) ; if ( imp_dbh -> async_query_in_flight ) { if ( imp_sth -> fetch_done ) { do_error ( sth, JW_ERR_SEQUENCE, ""fetch() <S2SV_blank> but <S2SV_blank> fetch <S2SV_blank> already <S2SV_blank> done"", NULL ) ; return Nullav ; } if ( imp_sth -> done_desc ) { if ( DBIc_describe ( imp_sth ) ) { do_error ( sth, JW_ERR_SEQUENCE, ""Error <S2SV_blank> while <S2SV_blank> describe <S2SV_blank> result <S2SV_blank> set."", NULL ) ; return Nullav ; } } } else { if (! imp_sth -> fetch_done ) { do_error ( sth, JW_ERR_SEQUENCE, ""fetch() <S2SV_blank> but <S2SV_blank> fetch <S2SV_blank> already <S2SV_blank> done"", NULL ) ; return Nullav ; } if ( imp_sth -> done_desc ) { if (! dbd_describe ( imp_sth, imp_sth ) ) { do_error ( sth, JW_ERR_SEQUENCE, ""Error <S2SV_blank> while <S2SV_blank> describe <S2SV_blank> result <S2SV_blank> set."", NULL ) ; return Nullav ; } }",0
96,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTL, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_EWRPTL, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_EWRPTH, MSB ( ENC28J60_TX_BUFFER_START",0
97,"<S2SV_ModStart> ; value = ast2obj_int ( o -> lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; <S2SV_ModStart> ; value = ast2obj_int ( o -> col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o ->",0
98,"<S2SV_ModStart> ( page && (! access ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_",0
99,"<S2SV_ModStart> ; if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) ) <S2SV_ModEnd> { ret = <S2SV_ModStart> inode, EXT4_STATE_DIO_UNWRITTEN ) ; if ( ext4_should_dioread_nolock ( inode ) ) set_buffer_uninit ( bh_result <S2SV_ModStart> } if ( ( flags & EXT4_GET_BLOCKS_CONVERT ) <S2SV_ModEnd> ) { ret",1
100,<S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ;,1
101,"<S2SV_ModStart> if (! caller_may_see_dir ( fc -> pid, controller, cgroup ) ) { ret = - ENOENT ; goto out ; } if (!",1
102,"<S2SV_ModStart> flag ) { ( void ) post ; ( void ) low_var_thresh ; ( void ) flag ; int mb_rows = source -> y_width >> 4 ; int mb_cols = source -> y_height >> 4 ; unsigned char * limits = cm -> pp_limits_buffer ; int mbr, mbc ; ( void ) post ; ( void ) low_var_thresh ; ( void ) flag ; memset ( limits, ( unsigned char ) ppl, 16 * mb_rows ) ; for ( mbr = 0 ; mbr < mb_rows ; mbr ++ ) { vpx_post_proc_down_and_across_mb_row ( source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_stride, source -> y_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> u_buffer + 8 * mbr * source -> uv_stride, source -> uv_stride, source -> uv_width, limits, 8 ) ; vpx_post_proc_down_and_across_mb_row ( source -> v_buffer +",0
103,"<S2SV_ModStart> { ret = __copy_to_user <S2SV_ModEnd> ( param,",0
104,"<S2SV_ModStart> : if (! cap_issubset ( new -> cap_permitted, old -> cap_permitted ) ) bprm -> per_clear |= PER_CLEAR_ON_SETID ; if (",1
105,"<S2SV_ModStart> void ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; error = mb2_cache_entry_alloc ( ext4_mb_cache, GFP_NOFS, hash <S2SV_ModEnd> ) ; if <S2SV_ModStart> int error ; error = mb2_cache_entry_insert ( ext4_mb_cache, <S2SV_ModEnd> bh -> b_bdev <S2SV_ModStart> bh -> b_blocknr <S2SV_ModEnd>, hash ) <S2SV_ModStart> error ) { <S2SV_ModEnd> if ( error <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> hash ) ; <S2SV_ModEnd> } } <S2SV_null>",0
106,"<S2SV_ModStart> ) ) ; char * resp = r_socket_read ( s ) ; if (! resp ) { free ( uri ) ; return NULL ; } resp = r_socket_read ( s ) ; if (! resp ) { free ( uri ) ; return NULL ; } r_socket_printf ( s, ""%s <S2SV_blank> HTTP/1.0\\r\\n"" ""User-Agent: <S2SV_blank> radare2 <S2SV_blank> "" R2_VERSION ""\\r\\n"" ""Content-Length: <S2SV_blank> %i\\r\\n"", path, ( int ) strlen ( data ) ) ; r_socket_write ( s, ( void * ) resp, strlen ( resp ) ) ; free ( uri ) ; return resp <S2SV_ModEnd> ; } <S2SV_null>",0
107,<S2SV_ModStart> tf = ( <S2SV_ModEnd> luaY_parser ) (,1
108,<S2SV_ModStart> ; int err ; if ( protocol < 0 || protocol >= IPPROTO_MAX ) return - EINVAL,1
109,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int ip_options_get_from_user ( <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> opt.,0
110,"<S2SV_ModStart> ; dl = kzalloc <S2SV_ModEnd> ( size,",1
111,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static u_int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> * tptr, const u_int len, const <S2SV_ModStart> * msg ; ND_TCHECK2 ( * tptr, len ) ; ND_TCHECK_16BITS ( msg ) ; ND_PRINT ( ( ndo, ""%sRPKI-RTRv%u, <S2SV_blank> %s <S2SV_blank> PDU <S2SV_blank> (%u), <S2SV_blank> length: <S2SV_blank> %u"", indent_string ( 8 ), * tptr, msg, pdu_len ) ) ; switch ( pdu_type ) { case RPKI_RTR_SERIAL_NOTIFY_PDU : case RPKI_RTR_SERIAL_QUERY_PDU : case RPKI_RTR_RESET_QUERY_PDU : case RPKI_RTR_CACHE_RESET_PDU : break ; case RPKI_RTR_END_OF_DATA_PDU :",0
113,"<S2SV_ModStart> ; int n <S2SV_ModEnd> ; skb -> <S2SV_ModStart> rose_facilities_struct ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> & facilities, skb -> len - ROSE_CALL_REQ_FACILITIES_OFF, ROSE_CALL_REQ_FACILITIES_OFF, ROSE_CALL_REQ_FACILITIES_OFF, ROSE_CALL_REQ_FACILITIES_OFF, ROSE_CALL_REQ_FACILITIES_OFF, ROSE_CALL_REQ_FACILITIES_OFF, ROSE_CALL_REQ_FACILITIES_OFF, ROSE_CALL_REQ_FACILITIES_OFF, ROSE_CALL_REQ_FACILITIES_OFF, ROSE_CALL_REQ_FACILITIES_OFF, ROSE_CALL_REQ_FACILITIES_OFF, ROSE_CALL_REQ_FACILITIES_OFF, ROSE_CALL_REQ_FACILITIES_OFF, ROSE_CALL_REQ_FACILITIES_OFF, ROSE_CALL_REQ_FACILITIES_OFF, ROSE_CALL_REQ_FACILITIES",0
114,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr,1
115,"<S2SV_ModStart> & P_CHARTAB ) { if ( ( options [ opt_idx ]. flags & P_NOCHARTAB ) == FALSE ) { if ( ( options [ opt_idx ]. flags & P_NOCHARTAB ) == FALSE ) { errmsg = ( char_u * ) N_ ( ""E532: <S2SV_blank> Option <S2SV_blank> \'chartab\' <S2SV_blank> is <S2SV_blank> disabled"" ) ; } else { if ( ( options [ opt_idx ]. flags & P_NOCHARTAB ) == FALSE ) { errmsg = ( char_u * ) N_ ( ""E533: <S2SV_blank> Option <S2SV_blank> \'chartab\' <S2SV_blank> is <S2SV_blank> disabled"" ) ; } else { if ( ( options [ opt_idx ]. flags & P_NOCHARTAB ) == FALSE ) { errmsg = ( char_u * ) N_ ( ""E532: <S2SV_blank> Option <S2SV_blank> \'chartab\' <S2SV_blank> is <S2SV_blank> disabled"" ) ; } else { if ( ( options [ opt_idx ]. flags & P_NOCHARTAB ) == FALSE ) { errmsg = ( char_u * ) N_ ( ""E533: <S2SV_blank> Option <S2SV_blank> \'chartab\' <S2SV_blank> is <S2SV_blank> disabled"" ) ; }",0
116,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret ) goto out <S2SV_ModEnd> ; } break",0
117,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; int ret <S2SV_ModStart> ) ; } o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> cl_nodes_lock ) ; o2nm_unlock_subsystem ( ) ;,1
118,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; break",1
119,"<S2SV_ModStart> == '/' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> is <S2SV_blank> absolute"" ) ; return ( ARCHIVE_FAILED ) ; } separator = * src ++ ; } <S2SV_ModEnd> for ( ;",1
120,"<S2SV_ModStart> TPM_RC tpm_kdfa ( <S2SV_ModEnd> TPMI_ALG_HASH hashAlg, <S2SV_ModStart> { TPM2B_DIGEST tpm2bLabel, tpm2bBits, tpm2b_i_2 ; <S2SV_ModEnd> TPM2B_DIGEST tpm2bLabel <S2SV_ModStart> ; TPM_RC rval = TPM_RC_SUCCESS <S2SV_ModStart> ; TPM_RC rval = TPM_RC_FAILURE <S2SV_ModEnd> ; int i <S2SV_ModStart> 1 ; while ( resultKey -> t. size < bytes ) { i_Swizzled = string_bytes_endian_convert_32 ( i ) ; * ( UINT32 * ) tpm2b_i_2Ptr = i_Swizzled ; bufferList [ j ++ ] = ( TPM2B_DIGEST * ) & ( tpm2bLabel. b ) ; bufferList [ j ++ ] = ( TPM2B_DIGEST * ) & ( tpm2bBits. b ) ; bufferList [ j ++ ] = ( TPM2B_DIGEST * ) & ( tpm2bBits. b ) ; bufferList [ j ++ ] = ( TPM2B_DIGEST *",0
121,"<S2SV_ModStart> size_t size ; if ( width == 0 || height == 0 ) { goto error ; } if (! jas_safe_intfast32_add ( tlx, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ) { goto error ; } if (! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ) { goto error ; } if (! <S2SV_ModStart> / 8 ; jas_safe_size_mul ( size, cmpt -> width_, & size ) ||! jas_safe_size_mul ( size, cmpt -> height_, & size ) ) { goto error ; }",0
122,<S2SV_ModStart> s ) { if ( s == 0 ) return ( 0 ) ;,0
123,<S2SV_ModStart> ; if ( WARN_ON_ONCE (! ib_safe_file_access ( fp ) ) ) return - EACCES ; if (,1
124,"<S2SV_ModStart> ""MemoryAllocationFailed"" ) ; ( void ) ResetMagickMemory ( BImgBuff, 0, ldblk * sizeof ( double ) ) ;",1
125,<S2SV_ModStart> ( peer ) peer = maybe_get_net <S2SV_ModEnd> ( peer ),1
126,<S2SV_ModStart> } while ( ( i < ( int ) header_buf_used ) && ( <S2SV_ModStart> '\\n' ) ) { if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\r' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { endofheaders = i + 1 ; } } else if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\r' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { endofheaders = i + 1 ; } } } else if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { endofheaders = i + 1 ; } } else if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\r' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { endofheaders = i + 1 ; } },0
127,<S2SV_ModStart> m_family ) ; if ( proto == LLDP_MGMT_ADDR_NONE ) continue <S2SV_ModEnd> ; if (,1
128,"<S2SV_ModStart> == datalen && ( pc + asn1_op_lengths [ op ] > datalen ) ) { pc -= asn1_op_lengths [ op ] ; flags &= ~ FLAG_LAST_MATCHED ; } else if ( ( op & ASN1_OP_MATCH__COND && flags & FLAG_MATCHED ) || ( dp + asn1_op_lengths [ op ] > datalen ) ) { pc += asn1_op_lengths [ op ] ; } else if ( ( dp + asn1_op_lengths [ op ] > datalen ) ) { pr_debug ( ""next_op: <S2SV_blank> pc=\\e[32m%zu\\e[m/%zu <S2SV_blank> dp=\\e[33m%zu\\e[m/%zu <S2SV_blank> C=%d <S2SV_blank> J=%d\\n"", pc, datalen, csp, jsp ) ; goto machine_overrun_error ; }",0
129,<S2SV_ModStart> default_auto_asconf ) { spin_lock ( & sock_net ( sk ) -> sctp. addr_wq_lock ) ; <S2SV_ModStart> = 0 ; spin_unlock ( & sock_net ( sk ) -> sctp. addr_wq_lock ) ;,0
130,"<S2SV_ModStart> int mpeg4_decode_profile_level ( MpegEncContext <S2SV_ModEnd> * s, <S2SV_ModStart> gb ) { if ( s -> avctx -> profile == 0 && s -> avctx -> level == 8 ) { s -> avctx -> level = 0 ; return 1 ; } <S2SV_ModStart> 4 ) ; <S2SV_ModEnd> return 0 ;",0
131,"<S2SV_ModStart> + MIDQ_DATA_BUFF ; readw ( mpu -> dev -> MIDQ + JQS_wTail )!= readw ( mpu -> dev -> MIDQ + JQS_wHead ) ) { u16 wTmp, val ; val = readw ( pwMIDQData + 2 * readw ( mpu -> dev -> MIDQ + JQS_wTail ) ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if (",0
132,<S2SV_ModStart> rule ) ; if (! entry -> lsm [ lsm_rule ]. rule ) return - EINVAL ;,1
133,<S2SV_ModStart> file ) ; <S2SV_ModEnd> file_free ( file,1
134,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
135,"<S2SV_ModStart> "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
136,"<S2SV_ModStart> * req, u32 * acl_len, bool raw <S2SV_ModStart> acl_len ) { __be32 * savep = req -> rq_rcv_buf. head <S2SV_ModEnd> ; int status <S2SV_ModStart> int status ; if ( ( status = decode_op_hdr ( xdr, OP_GETATTR ) )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & savep, & acl_len ) )!= 0 ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" <S2SV_ModEnd> "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen <S2SV_ModStart> ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" <S2SV_ModEnd> "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen, recvd ) ; * acl_len = attrlen ; } else status = - EOPNOTSUPP ; <S2SV_ModEnd> out : return",0
137,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,1
138,<S2SV_ModStart> ; while ( ( i < to_read ) && <S2SV_ModStart>!= 0 ) <S2SV_ModEnd> ) { i,1
139,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
140,"<S2SV_ModStart> [ plane ] && in -> fmt == AV_FORMAT_YUV420P || in -> fmt == AV_FORMAT_YUV420P ) memcpy ( out -> data [ 1 ], in -> data [ 1 ], AVPALETTE_SIZE ) ; for ( plane = 0 ; plane < 4 && in -> data [ plane ] ; plane ++ ) { const int width = ( plane == 1 || plane == 2 )? FF_CEIL_RSHIFT ( inlink -> w, s -> hsub ) : inlink -> w ; const int height = ( plane == 1 || plane == 2 )? FF_CEIL_RSHIFT ( inlink -> h, s -> vsub ) : inlink -> h ; step = s -> max_step [ plane ] ; outrow = out -> data [ plane ] + ( width - 1 ) * step ; inrow += ( height - 1 ) * step ; } break ; case 4 : { uint32_t * outrow16 = ( uint32_t * ) outrow ; for ( j = 0 ; j < width ; j ++ ) outrow16 [ j ] = inrow16 [ - j ] ; for ( j =",0
141,"<S2SV_ModStart> ( szFileName, pszFileName, <S2SV_ModStart> ) - 5 <S2SV_ModEnd> ) ; }",1
142,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth, <S2SV_ModStart>, & tok ) ; if ( owner && * owner ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else { uid = 0 ; } } if ( owner && * owner ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { uid = HTTP -> uid ; } else { uid = userToID ( owner ) ; } } if ( group && * group ) { if ( snumber ( group ) ) { gid = ( int ) stoi ( group ) ; } else { gid = groupToID ( group ) ; } } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; }",0
143,"<S2SV_ModStart> if ( q < p ) { DPRINTF ( ( ""Wrapped <S2SV_blank> around <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> %p\\n"", q, p ) ) ; goto out ; } if ( q",0
144,"<S2SV_ModStart> __be32 new_saddr ; struct ip_options_rcu * inet_opt ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. srr ) daddr = inet_opt -> opt. <S2SV_ModEnd> faddr ; rt",1
145,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
146,"<S2SV_ModStart> return ; } if ( len < sizeof ( struct eigrp_common_header ) ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> %s, <S2SV_blank> length: <S2SV_blank> %u <S2SV_blank> (too <S2SV_blank> short, <S2SV_blank> < <S2SV_blank> %u)"", tok2str ( eigrp_opcode_values, ""unknown <S2SV_blank> (%u)"", eigrp_com_header -> opcode ), len ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( eigrp_tlv_len > sizeof ( struct eigrp_tlv_header ) ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> %s, <S2SV_blank> length: <S2SV_blank> %u <S2SV_blank> (too <S2SV_blank> short, <S2SV_blank> < <S2SV_blank> %u)"", tok2str ( eigrp_opcode_values, ""unknown <S2SV_blank> (%u)"", eigrp_com_header -> opcode ), len ) ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( eigrp_tlv_len > sizeof ( struct eigrp_tlv_header ) ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> %s, <S2SV_blank> length: <S2SV_blank> %u",0
147,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> number_aau = ( <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; if ( addr == NULL ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) return NULL ; } <S2SV_ModEnd> number_aau = ( <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; if ( addr == NULL ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) return NULL ; }",0
148,"<S2SV_ModStart> int res ; unsigned int inodes = SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) ; long long export_index_table [ SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ) ] ; res = read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } SQUASHFS_INSWAP_LOOKUP_BLOCKS ( export_index_table, indexes ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; }",0
149,"<S2SV_ModStart> ) ; } ptr ++ ; ( void ) devname_lookup_func ( sdvp, ""dsk"", & vp, cred, devzvol_create_pool_dirs, SDEV_VATTR ) ; VN_RELE ( vp ) ; ( void ) devname_lookup_func ( sdvp, ""rdsk"", & vp, cred, devzvol_create_pool_dirs, SDEV_VATTR ) ; VN_RELE ( vp ) ; ( void ) devname_lookup_func ( sdvp, ""dsk"", & vp, cred, devzvol_create_pool_dirs, SDEV_VATTR ) ; VN_RELE ( vp ) ; ( void ) devname_lookup_func ( sdvp, ""rdsk"", & vp, cred, devzvol_create_pool_dirs, SDEV_VATTR ) ; VN_RELE ( vp ) ; rw_enter ( & sdvp -> sdev_contents, RW_READER ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_exit (",0
150,<S2SV_ModStart> |= EXT4_EXT_MARK_UNINIT2 ; if ( flags & EXT4_GET_BLOCKS_CONVERT ) split_flag |= EXT4_EXT_DATA_VALID2 ;,1
151,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret ) goto out <S2SV_ModEnd> ; } break",0
152,"<S2SV_ModStart> HASH_DISABLED ; } else { return apr_psprintf ( cmd -> pool, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"", p1 ) ; } <S2SV_ModEnd> return NULL ;",0
153,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ), & final ) ; rcu_read_unlock ( <S2SV_ModEnd> ) ; dst",1
154,"<S2SV_ModStart> = 0.0 ; uint32 nstrips = 0, ntiles = 0 ; uint16 <S2SV_ModEnd> planar = 0 <S2SV_ModStart> read_buff ) ; if ( buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""loadImage"", ""Unable <S2SV_blank> to <S2SV_blank> allocate/reallocate <S2SV_blank> read <S2SV_blank> buffer"" ) ; return ( - 1 ) ; } <S2SV_ModStart> buffsize ) ; if ( buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""loadImage"", ""Unable <S2SV_blank> to <S2SV_blank> allocate/reallocate <S2SV_blank> read <S2SV_blank> buffer"" ) ; return ( - 1 ) ; } <S2SV_ModStart> buffsize ) ; if ( buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""loadImage"", ""Unable <S2SV_blank> to <S2SV_blank> allocate/reallocate <S2SV_blank> read <S2SV_blank> buffer"" ) ; return ( - 1 ) ; } <S2SV_ModStart> buffsize ) ; if ( buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""loadImage"", ""Unable <S2SV_blank> to <S2SV_blank> allocate/reallocate <S2SV_blank> read <S2SV_blank> buffer"" ) ; return ( - 1 ) ; }",0
155,"<S2SV_ModStart> 0 ; if ( global -> codec -> codec_type == VPX_CODEC_8 ) { ctrl_args = vp8_args ; ctrl_args_map = vp8_arg_ctrl_map ; # endif } else if ( global -> codec -> codec_type == VPX_CODEC_9 ) { ctrl_args = vp9_args ; ctrl_args_map = vp9_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp10"" ) == 0 ) { ctrl_args = vp10_args ; ctrl_args_map = vp10_arg_ctrl_map ; # endif } else if ( arg_match ( & arg, & codec_type, argi ) ) { config -> codec_type = arg. val ; } else if ( arg_match ( & arg, & codec_type, argi ) ) { config -> codec_type = arg. val ; } else if ( arg_match ( & arg, & codec_type, argi ) ) { config -> codec_type = arg. val ; } else if ( arg_match ( & arg, & codec_type, arg",0
156,<S2SV_ModStart> options. disable_forwarding ||! the_authctxt -> valid,0
157,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
158,"<S2SV_ModStart> ""UnableToReadImageData"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
159,"<S2SV_ModStart> errout ; } <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart>. value = ( void * ) gss_calloc ( 1, sizeof ( gss_union_ctx_id_desc ) ) ; <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart>. value = ( void * ) gss_calloc ( 1, sizeof ( gss_union_ctx_id_desc ) ) ; <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart>. value = ( void * ) gss_calloc ( 1, sizeof ( gss_union_ctx_id_desc ) ) ; <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart>. value = ( void * ) gss_calloc ( 1, sizeof ( gss_union_ctx_id_desc ) ) ; <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart>. value = ( void * ) gss_calloc ( 1, sizeof ( gss_union_ctx_id_desc ) ) ; <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart>. value = ( void * ) gss_calloc ( 1, sizeof ( gss_union_ctx_id_desc ) ) ; <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart>. value = ( void * ) gss_calloc ( 1, sizeof ( gss_",0
160,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> out ; } ext_size = sizeof ( EXT4_I ( inode ) -> i_data ) ; <S2SV_ModStart> -> i_data, ext_size ) ; memset ( bh -> b_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size <S2SV_ModEnd> ) ; neh",1
161,"<S2SV_ModStart> 1 ; } int ret = 0 ; <S2SV_ModStart> 1 ; } ret = verify_checks ( c, preverify_ok, callback_ctx ) ; if ( ret < 0 ) { SSL_SESSION * sess = SSL_get_session ( c -> ssl ) ; if (! sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } if ( ret < 0 ) { SSL_SESSION * sess = SSL_get1_session ( c -> ssl ) ; if ( sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } return ret <S2SV_ModEnd> ; } <S2SV_null>",0
162,<S2SV_ModStart> ; int ret ; if ( current_chrooted ( ) ) return - EPERM,1
163,"<S2SV_ModStart> ; if (! memcmp ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE ) ) goto exit ; } if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) goto exit ;",0
164,"<S2SV_ModStart> c -> nreslevels < <S2SV_ModEnd> s -> reduction_factor <S2SV_ModStart> -> reduction_factor ) { avpriv_request_sample ( s -> avctx, ""reduction_factor <S2SV_blank> too <S2SV_blank> large"" ) ; return AVERROR_PATCHWELCOME ; } c -> log2_cblk_width = ( c -> log2_cblk_width > 6 || c -> log2_cblk_height > 6 ) { avpriv_request_sample ( s -> avctx, ""cblk <S2SV_blank> size <S2SV_blank> > <S2SV_blank> 64"" ) ; return AVERROR_PATCHWELCOME ; } c -> log2_cblk_height = ( c -> log2_cblk_height > 6 )? 6 : c -> log2_cblk_width ; c -> log2_cblk_width = ( c -> log2_cblk_width + c -> log2_cblk_height ) ; if ( c -> log2_cblk_height > 6 ) { avpriv_request_sample ( s -> avctx, ""cblk <S2SV_blank> size <S2SV_blank> > <S2SV_blank> 64"" ) ; return AVERROR_PATCHW",0
165,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
166,<S2SV_ModStart> ; bool is_drop_n_account = false ; bool do_vnet <S2SV_ModStart> ; do_vnet = false <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( do_vnet <S2SV_ModEnd> ) goto drop_n_restore,0
167,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> sctp_auth_asoc_init_active_key ( asoc,1
168,<S2SV_ModStart> return false ; if ( ndp_msg_type_info ( msg_type ) -> addrinfo ) return ndp_msg_type_info ( msg_type ) -> addrinfo ;,0
169,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> lsm_set_label_at ( int lsm_labelfd <S2SV_ModEnd>, int on_exec <S2SV_ModStart> { int labelfd <S2SV_ModEnd> = - 1 <S2SV_ModStart> = - 1 <S2SV_ModEnd> ; const char <S2SV_ModStart> == 0 ) return lsm_labelfd <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) return lsm_labelfd <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) return lsm_labelfd <S2SV_ModEnd> ; if ( <S2SV_ModStart> = 0 ; labelfd = openat ( procfd, ""self/attr/exec"", O_RDWR ) ; } else { labelfd = openat ( procfd, ""self/attr/current"", O_RDWR ) ; } if ( labelfd < 0 ) { SYSERROR ( ""Unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> LSM <S2SV_blank> label"" ) ; goto out ; } size = sprintf ( command, ""changeprofile <S2SV_blank> %s"", lsm_label ) ; if ( size < 0 ) { SYSERROR ( ""Failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> apparmor <S2SV_blank> profile"" ) ; ret = - 1 ; goto out ; } command = malloc ( strlen ( lsm_",0
170,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
171,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
172,"<S2SV_ModStart> cpi ) { # ifdef DISABLE_RC_LONG_TERM_MEM const uint64_t bits_used = cpi -> rc. this_frame_target ; # else const uint64_t bits_used = cpi -> rc. projected_frame_size ; # endif <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> KEY_FRAME ) { cpi -> twopass. gf_group_bits += cpi -> rc. this_frame_target - bits_used ; } else { cpi -> twopass. gf_group_bits -= bits_used ; cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; } <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
173,"<S2SV_ModStart> } num ++ ; if ( num > MaxAllocSize / ITEMSIZE ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> levels <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", num, ( int ) ( MaxAllocSize / ITEMSIZE ) ) ) )",1
174,"<S2SV_ModStart> header, struct mb2_cache_entry <S2SV_ModEnd> * * pce <S2SV_ModStart> ) ; struct mb2_cache_entry * ce ; struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache = <S2SV_ModStart> hash ) ; ce = mb2_cache_entry_find_first <S2SV_ModEnd> ( ext4_mb_cache, <S2SV_ModStart> hash ) ; bh = sb_bread ( inode -> i_sb, ce -> e_block ) ; if (! bh ) { EXT4_ERROR_INODE ( inode, ""block <S2SV_blank> %lu <S2SV_blank> read <S2SV_blank> error"", ( unsigned long ) ce -> e_block ) ; } else if ( le32_to_cpu ( BHDR ( bh ) -> h_refcount ) >= EXT4_XATTR_REFCOUNT_MAX ) { ea_idebug ( inode, ""block <S2SV_blank> %lu <S2SV_blank> refcount <S2SV_blank> %d>==%d"", le32_to_cpu ( BHDR ( bh ) -> h_refcount, EXT4_XATTR_REFCOUNT_MAX ) ) ; } else if ( ext4_xattr_cmp ( header, BHDR ( bh ) ) == 0 ) { * pce = ce ; return bh",0
175,"<S2SV_ModStart> { gint64 offset <S2SV_ModEnd> ; char line <S2SV_ModStart> = offset ; return parse_cosine_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart> -> phdr, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart> wth -> frame_buffer, line",1
176,<S2SV_ModStart> = line_end ; <S2SV_ModEnd> error = add_push_report_pkt,1
177,"<S2SV_ModStart> > 0 && extend ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } if ( left == 0 ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } if ( extend ) { if ( left == 0 ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } left = left ; } if ( left >= n ) { s -> packet_length += n ; rb -> left = left - n ; return ( n ) ; } len = s -> packet_length ; if ( len + left > ( int ) ( rb -> len - rb -> offset ) ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } if ( extend ) { if ( left > ( int ) ( rb -> len - rb -> offset ) ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; }",0
178,"<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { char * buf = grub_malloc ( <S2SV_ModEnd> EXT2_BLOCK_SIZE ( data <S2SV_ModStart> ( data ) ) ; if (! buf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } <S2SV_ModStart> leaf ) { <S2SV_ModEnd> grub_error ( GRUB_ERR_BAD_FS <S2SV_ModStart> ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } <S2SV_ModStart> 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
179,"<S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
180,"<S2SV_ModStart> - ENOMEM ; size_t copied_size = hdr. size_in ; if ( copy_from_user ( & copied_size, ( void * ) arg, copied_size ) ) { ret = - EFAULT ; goto out ; } if ( copied_size < size ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in < copied_size ) { ret = - EINVAL ; goto out ; } if ( copied_size < size ) { ret = - EINVAL ; goto out ; } if ( ( ( struct vbg_ioctl_hdr * ) buf ) -> size_out - copied_size ) ) { vbg_debug ( ""%s: <S2SV_blank> too <S2SV_blank> much <S2SV_blank> output <S2SV_blank> data <S2SV_blank> %zu <S2SV_blank> > <S2SV_blank> %zu\\n"", __func__, returned_size, size - copied_size ) ; goto out ; } if ( copied_size < size ) memset ( buf + copied_size, 0, size - copied_size ) ) { vbg_debug ( ""%s: <S2SV_blank> too <S2SV_blank> much <S2SV_blank> output <S2SV_blank> data <S2SV_blank> %zu <S2SV_blank> > <S2SV_blank> %zu\\n"", __func",0
181,<S2SV_ModStart> int m ; jpc_fix_t * buf ; int hstartrow ; int hstartcol ; if ( bufsize < QMFB_SPLITBUFSIZE ) { abort ( ) ; } if ( numrows >= 2 ) { hstartrow = ( numrows + 1 - parity ) >> 1 ; m = numrows - hstartrow ; n = m ; dstptr = buf ; srcptr = & a [ hstartrow * stride ] ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr = & a [ hstartrow * stride ] ; srcptr = buf ; n = m ; dstptr = & a [ hstartrow * stride ] ; n = numrows - hstartrow ; srcptr = & a [ hstartrow * stride ] ; dstptr = & a [ hstartrow * stride ] ; srcptr = buf ; n = m ; dstptr = buf ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2,0
182,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ;",0
183,"<S2SV_ModStart> 0x07 # define MagickMemoryType 0x08 <S2SV_ModEnd> Image * image <S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
184,<S2SV_ModStart> DQUOT_LIMITS_ENABLED ) ; if ( sbi -> s_mb_cache ) { ext2_xattr_destroy_cache ( sbi -> s_mb_cache ) ; sbi -> s_mb_cache = NULL ; } <S2SV_ModEnd> if (!,1
185,"<S2SV_ModStart> endpoint = & usbinterface -> altsetting [ 0 ]. desc ; dev_dbg ( & usbinterface -> dev, ""gtco <S2SV_blank> # <S2SV_blank> interfaces: <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""gtco <S2SV_blank> # <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ;",0
186,"<S2SV_ModStart> ""setregid"" ) ; <S2SV_ModEnd> char * arg <S2SV_ModStart> ""setregid"" ) ; arg = asprintf ( & arg, ""/run/firejail/network/%d-binmap"", ( int ) pid ) ; if ( arg == NULL ) { fprintf ( stderr, ""Error: <S2SV_blank> cannot <S2SV_blank> setregid\\n"" ) ; exit ( 1 ) ; } if ( strcmp ( arg, ""setregid"" ) == 0 ) arg = asprintf ( & arg, ""/run/firejail/network/%d-binmap"", ( int ) pid ) ; arg = asprintf ( & arg, ""/run/firejail/network/%d-binmap"", ( int ) pid ) ; if ( arg == NULL ) { fprintf ( stderr, ""Error: <S2SV_blank> cannot <S2SV_blank> setregid\\n"" ) ; exit ( 1 ) ; } if ( strcmp ( arg, ""setregid"" ) == 0 ) arg = asprintf ( & arg, ""/run/firejail/network/%d-binmap"", ( int ) pid ) ; arg = asprintf ( & arg, ""/run/firejail/network/%d-binmap"", (",0
187,<S2SV_ModStart> node ) { if ( node -> nd_item. ci_parent ) <S2SV_ModStart> ci_parent ) ; else return NULL ;,1
188,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
189,<S2SV_ModStart> ( pb ) ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA,1
190,"<S2SV_ModStart> if ( q < p ) { DPRINTF ( ( ""Wrapped <S2SV_blank> around <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> %p\\n"", q, p ) ) ; goto out ; } if ( q",0
191,<S2SV_ModStart> protostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> cryptostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> timingstats ) ; <S2SV_ModEnd> step_callback = &,1
192,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart>, dir ) ) == NULL ) { ulckpwdf ( ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( strcmp ( tmpname, ""."" ) == 0 ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; }",0
193,<S2SV_ModStart> prev ) ; n -> mounts += n -> pending_mounts ; n -> pending_mounts = 0 ;,1
194,"<S2SV_ModStart> ; savesegment ( fs, fsindex ) ; savesegment ( gs, gsindex ) ; load_TLS ( next, cpu ) ; arch_end_context_switch ( next_p ) ; savesegment ( <S2SV_ModStart> next -> ds <S2SV_ModEnd> ) ; if",1
195,<S2SV_ModStart> dd ) ; <S2SV_ModEnd> } } <S2SV_null>,1
196,<S2SV_ModStart> ; if ( ps_codec -> i4_pic_done ) return IHEVCD_UNSUPPORTED_PPS_ID ; if ( ps_codec -> ps_sps_base + ps_pps -> i1_sps_id >= MAX_SPS_CNT ) { ps_codec -> ps_sps_base + ps_pps -> i1_sps_id = 0 ; ps_codec -> i4_pic_done = 1 ; return IHEVCD_INVALID_HEADER ; } if ( ps_codec -> i4_pic_done ) return IHEVCD_UNSUPPORTED_PPS_ID ; if ( ps_codec -> ps_sps_base + ps_pps -> i1_sps_id >= MAX_SPS_CNT ) { ps_codec -> ps_sps_base + ps_pps -> i1_sps_id = 0 ; ps_codec -> i4_pic_done = 1 ; return IHEVCD_INVALID_HEADER ; },0
197,<S2SV_ModStart> 1u << DB_VECTOR ) | ( 1u << AC_VECTOR,1
198,"<S2SV_ModStart> sfsname ) { <S2SV_ModEnd> char temp [ <S2SV_ModStart> 1 ] ; if ( strlen ( sfsname ) > NFSX_V3FHMAX ) { ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", temp [ sizeof ( temp ) - 1 ], fsid. Fsid_dev. Major, fsid. Fsid_dev. Minor ) ) ; } else { ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", temp, fsid. Fsid_dev. Minor ) ) ; } if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %s/"", temp ) ) ; } else { ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", fsid. Fsid_dev. Major ) ) ; } if ( fsid. Fsid_dev. Minor == 257 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", fsid. Fsid_dev. Minor ) ) ; } if ( ndo -> ndo_uflag ) { u_int i",0
199,"<S2SV_ModStart> int transhdrlen, unsigned int flags, struct rt6_info * rt <S2SV_ModStart> skb_shinfo ( skb ) -> gso_type = SKB_GSO_UDP ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; __skb_queue_tail ( & sk -> sk_write_queue, skb ) ; return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
200,<S2SV_ModStart> ( res ) goto err_add_port <S2SV_ModEnd> ; res = <S2SV_ModStart> port ) ; err_add_port : hsr_del_node ( & hsr -> self_node_db ) ;,1
201,"<S2SV_ModStart> n ++ ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n < cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 4",0
202,"<S2SV_ModStart> void vp9_setup_dst_planes ( <S2SV_ModEnd> const YV12_BUFFER_CONFIG * <S2SV_ModStart> src ) { const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; int i ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y <S2SV_ModEnd> ) ; }",0
203,"<S2SV_ModStart> ++ ) ; if (! xdr_decode_bool ( p, & args -> stable ) ) return 0 ; <S2SV_ModStart> p ++ ) ; if (! args -> stable ) return 0",0
204,"<S2SV_ModStart> <S2SV_null> static inline int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> dst ) { return assign_eip_far ( ctxt, dst, ctxt -> mode == X86EMUL_MODE_PROT64 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",1
205,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
206,"<S2SV_ModStart> ; remaining = tvb_reported_length_remaining <S2SV_ModEnd> ( tvb,",1
207,"<S2SV_ModStart> == READ ) { int ret ; <S2SV_ModStart> = ocfs2_dio_get_block ; ret = blockdev_direct_IO ( iocb, inode, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; } else ret = 0 <S2SV_ModEnd> ; return __blockdev_direct_IO",0
208,<S2SV_ModStart> return rc ; <S2SV_ModEnd> copied = skb,1
209,"<S2SV_ModStart> ( f, ""%79s <S2SV_blank> %s\\n"" <S2SV_ModEnd>, def,",0
210,<S2SV_ModStart> ; if ( pmc_overflow ( val ) <S2SV_ModEnd> ) write_pmc (,1
211,"<S2SV_ModStart> ( * b + len, * avail - len <S2SV_ModEnd>, nl )",1
212,"<S2SV_ModStart> n ) { <S2SV_ModEnd> int all_whitespace = <S2SV_ModStart> ; int kind <S2SV_ModEnd> ; void * <S2SV_ModStart> ; PyCompilerFlags cf <S2SV_ModEnd> ; char * <S2SV_ModStart> * str ; <S2SV_ModEnd> PyObject * o <S2SV_ModStart> * o, * fstring_name ; Py_ssize_t len ; Py_ssize_t i ; assert ( expr_start <= expr_end ) ; assert ( * ( expr_start - 1 ) == '{' ) ; assert ( * ( expr_end - expr_start ) == ':' ) ; o = PyUnicode_DecodeUTF8 ( expr_start, expr_end - expr_start, NULL ) ; if ( o == NULL ) return NULL ; len = expr_end - expr_start ; kind = PyUnicode_KIND ( o ) ; data = PyUnicode_DATA ( o ) ; for ( i = 0 ; i < len ; i ++ ) { if ( PyUnicode_ISSPACE ( PyUnicode_READ ( kind, data, i ) ) ) { if (! Py_Unicode_ISSPACE ( PyUnicode_READ ( kind, data, i ) ) ) { str [ i + 1 ] = '(' ; memcpy ( str + 1, expr_start, len ) ;",0
213,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
214,"<S2SV_ModStart> string ) { for ( ; ; ) { if (! cJSON_strcasecmp ( c -> string, string ) ) return NULL ; c = c -> next ; } <S2SV_ModEnd> while ( c",0
215,"<S2SV_ModStart> == 0 ) mark_key_instantiated ( key, 0 <S2SV_ModEnd> ) ; up_write",1
216,<S2SV_ModStart> <= * len && plen > 0,1
217,<S2SV_ModStart> ; args. rmtvaluelen = valuelen ; args.,1
218,<S2SV_ModStart> ; if ( <S2SV_ModEnd> timeout == NULL <S2SV_ModStart> ; if ( compat_get_timespec <S2SV_ModEnd> ( & ktspec <S2SV_ModStart> > 0 && compat_put_timespec <S2SV_ModEnd> ( & ktspec,1
219,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart> ( size_t ) MagickMax ( <S2SV_ModStart>. length, bytes_per_line * sun_info. width ) ; if ( bytes_per_line * sun_info. height > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
220,<S2SV_ModStart> ndev ) ; <S2SV_ModEnd> assert ( skb <S2SV_ModStart> q_num ) ; return <S2SV_ModEnd> hns_nic_net_xmit_hw ( ndev <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
221,<S2SV_ModStart> |= MSG_TRUNC ; <S2SV_ModEnd> lock_sock ( sk,1
222,"<S2SV_ModStart>, NO_HASHEXPAND, <S2SV_ModEnd> SLAB_REASSIGN, SLAB_AUTOMOVE_RATIO <S2SV_ModStart>, NO_HASHEXPAND, <S2SV_ModEnd> SLAB_AUTOMOVE_WINDOW, TAIL_REPAIR_TIME <S2SV_ModStart>, NO_HASHEXPAND, <S2SV_ModEnd> SLAB_AUTOMOVE_RATIO, SLAB_AUTOMOVE_WINDOW",0
223,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
224,<S2SV_ModStart> size ) ; if (! px -> ft ) return FALSE ;,0
225,<S2SV_ModStart> found = 0 <S2SV_ModEnd> ; const char <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( found,1
226,"<S2SV_ModStart> int validate_event ( struct pmu * pmu, <S2SV_ModStart> arm_pmu * armpmu <S2SV_ModEnd> ; struct hw_perf_event <S2SV_ModStart> -> pmu!= pmu <S2SV_ModEnd> ) return 1 <S2SV_ModStart> return 1 ; armpmu = to_arm_pmu ( event -> pmu ) ; <S2SV_ModStart> ( armpmu -> get_event_idx <S2SV_ModEnd> ( hw_events,",0
227,"<S2SV_ModStart> bool new_idmap_permitted ( const struct file * file, <S2SV_ModStart>, cap_setid ) && file_ns_capable ( file, ns -> parent, cap_setid )",1
228,<S2SV_ModStart> j ++ ) { if ( a -> type == szMAPI_BINARY ) <S2SV_ModStart> ) ; } },1
229,"<S2SV_ModStart> hx ; u8 * buf <S2SV_ModEnd> ; int ret <S2SV_ModStart> = 0 ; u16 cpu_cs_register = <S2SV_ModEnd> cypress [ type <S2SV_ModStart> ]. cpu_cs_register ; buf = kmalloc ( sizeof ( * hx ), GFP_KERNEL ) ; if (! buf ) return - ENOMEM ; hx = ( struct hexline * ) buf ; buf [ 0 ] = 1 ; if ( usb_cypress_writemem ( udev, cpu_cs_register, buf, 1 <S2SV_ModEnd> )!= 1 <S2SV_ModStart> ; kfree ( buf <S2SV_ModEnd> ) ; return <S2SV_ModStart> 0 ) { buf [ 0 ] = 0 ; if ( <S2SV_ModEnd> usb_cypress_writemem ( udev <S2SV_ModStart> ( udev, cpu_cs_register, buf <S2SV_ModEnd>, 1 ) <S2SV_ModStart> ; kfree ( buf <S2SV_ModEnd> ) ; return",1
230,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModEnd> val_h = EXTRACT_16BITS <S2SV_ModStart> val_l ) ) ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 2 ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 2 ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 2 ; val_l = EXTRACT_16BITS (",0
231,"<S2SV_ModStart> princ ) ; success = data_eq_string ( * realm, handle -> params. realm ) && data_eq_string ( * c1, ""kadmin"" ) ; <S2SV_ModEnd> fail_princ : if",0
232,<S2SV_ModStart> ; if ( shader_rec_offset < args -> bin_cl_size ||,1
233,<S2SV_ModStart> endif # if HAVE_LZMA_H <S2SV_ModEnd> && HAVE_LIBLZMA if,1
234,<S2SV_ModStart> vma -> vm_file ) ; down_read ( & EXT4_I ( inode ) -> i_mmap_sem <S2SV_ModStart> ; out : up_read ( & EXT4_I ( inode ) -> i_mmap_sem ) ;,1
235,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
236,<S2SV_ModStart> arg ) { char ch = * arg ; <S2SV_ModStart> case ';' : ch <S2SV_ModEnd> = * arg <S2SV_ModStart> * b ++ = ch <S2SV_ModEnd> ; break ; <S2SV_ModStart> ; default : ch <S2SV_ModEnd> ++ = * <S2SV_ModStart> b ++ = ch <S2SV_ModEnd> ; break ;,0
237,"<S2SV_ModStart> if ( cp < ep2 ) { ND_PRINT ( ( ndo, ""%s"", cp ) ) ; cp = ikev1_attrmap_print ( ndo, cp, ep2, map, nmap ) ; } else cp = ikev1_attr_print ( ndo, cp, ep2, map, nmap ) ; if ( cp == NULL ) { ND_PRINT ( ( ndo, ""%s"", cp ) ) ; cp = ikev1_attr_print ( ( ndo, ""%s"", cp ) ) ; } if ( cp == NULL ) { ND_PRINT ( ( ndo, ""%s"", cp ) ) ; cp = ikev1_attr_print ( ndo, cp, ep2 ) ; cp = ikev1_attr_print ( ndo, cp ) ; } if ( cp == NULL ) { ND_PRINT ( ( ndo, ""%s"", cp ) ) ; cp = ikev1_attr_print ( ndo, cp ) ; } if ( cp == NULL ) { ND_PRINT ( ( ndo, ""%s"", cp ) )",0
238,<S2SV_ModStart> } GsmIceConnectionData ; typedef struct { guint watch_id ; guint protocol_timeout ; } GsmIceConnectionWatch ; static void disconnect_ice_connection ( IceConn ice_conn ) { IceCloseConnection <S2SV_ModEnd> ( ice_conn ) <S2SV_ModStart> ice_conn ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
239,<S2SV_ModStart> if ( ( skb_mac_header <S2SV_ModEnd> ( skb ) <S2SV_ModStart> skb ) < skb -> head +,1
240,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
241,<S2SV_ModStart>. val =!! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ; <S2SV_ModStart>. val =!! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ;,1
242,<S2SV_ModStart> & RCV_SHUTDOWN ) return 0 ; <S2SV_ModEnd> return err ; <S2SV_ModStart> msg_namelen ) ; <S2SV_ModEnd> } skb_free_datagram (,1
243,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
244,"<S2SV_ModStart> int i ; const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_buffer, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ] <S2SV_ModEnd>, buffers [",0
245,"<S2SV_ModStart>, j ; * md_out = NULL ; md = calloc ( 1, sizeof ( <S2SV_ModEnd> * md ) <S2SV_ModStart> goto cleanup ; ret = crypto_retrieve_X509_subject_name ( context, plg_cryptoctx, req_cryptoctx, cert, & pkinit_sans, & upn_sans, NULL ) ; if ( ret ) goto cleanup ; ret = crypto_retrieve_X509_issuer_name ( context, plg_cryptoctx, req_cryptoctx, cert, & upn_sans, & <S2SV_ModEnd> md -> issuer_dn <S2SV_ModStart> md -> subject_dn <S2SV_ModEnd> ) ; if <S2SV_ModStart> cleanup ; } ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx, cert, & pkinit_sans, & upn_sans, NULL ) ; if ( ret ) goto cleanup ; j = 0 ; if ( pkinit_sans!= NULL ) { for ( i = 0 ; i < upn_sans -> length ; i ++ ) j ++ ; } if ( j!= 0 ) { for ( i = 0 ; i < upn_sans -> length ; i ++ ) j ++",0
246,<S2SV_ModStart> (! npages || base_gfn!= old. base_gfn,1
247,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ru,1
248,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; for (,1
249,"<S2SV_ModStart> * ni ; ND_TCHECK ( rp -> rip6_cmd ) ; <S2SV_ModStart> case RIP6_REQUEST : ND_TCHECK ( rp -> rip6_nets ) ; <S2SV_ModStart> == 1 && ( rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %u[%u]:"", j, length ) ) ; break ; } <S2SV_ModEnd> if ( j <S2SV_ModStart> j == 1 && ( rp -> rip6_nets <S2SV_ModEnd> -> rip6_metric == <S2SV_ModStart> break ; } ND_TCHECK ( rp -> rip6_nets ) ; <S2SV_ModStart> ni ) { ND_TCHECK ( rp -> rip6_nets ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ), ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo, ""\\n\\t"" ) ) ; rip6_entry_print ( ndo, ni, 0 ) ; } break ; case RIP6_RESPONSE : if",0
250,<S2SV_ModStart> < 0 ) goto error ; <S2SV_ModEnd> goto set ;,1
251,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
252,"<S2SV_ModStart> argc ++ ; retval = bprm_change_interp ( iname, bprm ) ; if ( retval < 0 ) goto _error <S2SV_ModEnd> ; interp_file =",1
253,<S2SV_ModStart> ; int iSrc <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; } } <S2SV_ModEnd> res -> ContribRow <S2SV_ModStart> u ]. Left = iLeft ; res -> ContribRow [ u ]. Right = iRight ; for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ].,1
254,<S2SV_ModStart> user ) { cleanup_srcu_struct ( & user -> release_barrier ) ;,0
255,"<S2SV_ModStart> Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; return ; } if (! COM_CompareExtension ( filename, "".cfg"" ) ) { Com_Printf ( ""Com_WriteConfig_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".cfg\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n""",1
256,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen <S2SV_ModStart> + 1 ; size_t <S2SV_ModEnd> limit = 0,0
257,"<S2SV_ModStart> ( mobj ) { size_t res ; <S2SV_ModStart> ( mobj ) { res = <S2SV_ModEnd> mobj_get_va ( mobj <S2SV_ModStart> 0 ), res <S2SV_ModEnd>, size ) <S2SV_ModStart> size ) ; }",0
258,<S2SV_ModStart> -> it_overrun += 1LL <S2SV_ModEnd> << i ;,1
259,"<S2SV_ModStart> * for_ch ; asdl_seq * ifs ; <S2SV_ModStart>, comp_for ) ; if ( c -> c_feature_version < 6 ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } if ( c -> c_feature_version < 6 ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } for_ch = CHILD ( n, 1 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; expression = ast_for_expr ( c, CHILD ( n, 3 + is_async ) ) ; if (! expression ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if ( NCH ( for_ch ) == 1 ) comp = comprehension ( Tuple ( t, Store, first -> lineno, first -> col_",0
260,<S2SV_ModStart> NULL ; } dst_state -> speculative = src -> speculative ;,1
261,"<S2SV_ModStart> void write_mb_modes_kf ( const VP9_COMMON * const cm, const MACROBLOCKD * const xd, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> w ) { <S2SV_ModEnd> const MODE_INFO * <S2SV_ModStart> 0 ] ; const MODE_INFO * const above_mi = mi_8x8 [ - xd -> mi_stride ] ; const MODE_INFO * const left_mi = mi_8x8 [ - xd -> left_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
262,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; saddr,1
263,"<S2SV_ModStart> } DPRINTF ( ""Data <S2SV_blank> ready <S2SV_blank> tag=0x%x <S2SV_blank> len=%zd\\n"" <S2SV_ModEnd>, r -> <S2SV_ModStart>. tag, r -> qiov. size <S2SV_ModEnd> ) ; n <S2SV_ModStart> = r -> qiov. size <S2SV_ModEnd> / 512 ; <S2SV_ModStart> -> req, r -> qiov. size <S2SV_ModEnd> ) ; }",0
264,<S2SV_ModStart> if ( cs >= <S2SV_ModEnd> CQSPI_MAX_CHIPSELECT ) {,1
265,"<S2SV_ModStart> { if ( n < 0 ) { <S2SV_ModStart> SWF_error ( ""Action <S2SV_blank> overflow!!"" ) ; } <S2SV_ModStart>. ActionCode ) ) { case SWFACTION_END : return 0 ; case SWFACTION_CONSTANTPOOL : decompileCONSTANTPOOL ( & actions [ n ] ) ; return 0 ; case SWFACTION_GOTOFRAME : decompileGOTOFRAME ( n, actions, maxn, 0 ) ; case SWFACTION_GETURL2 : decompileGETURL2 ( & actions [ n ] ) ; return 0 ; case SWFACTION_PUSHDUP : decompilePUSHDUP ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETPROPERTY2 : decompileGETPROPERTY2 ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n, actions, maxn ) ; return 0 ; case SWFACTION_TRACE : decompileTRACE ( n, actions, maxn ) ; return 0 ; case SWFACTION_CALLFRAME2 : decompileCALLFRAME2 ( n, actions, maxn ) ; return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_",0
266,<S2SV_ModStart> ) break ; if ( l > ll ) l = ll ;,1
267,<S2SV_ModStart> out ; } } if ( free < 0 ) { err = - ENOMEM ; goto out ;,1
268,"<S2SV_ModStart> ( len < 4 <S2SV_ModEnd> ) { return <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> n = EXTRACT_32BITS <S2SV_ModStart> ( & prep -> pp_n ) ; while ( -- n >= 0 && ND_TTEST ( * ps ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %u/%s:%u"", ps -> slot, ps -> page. p_nid ) ) ; io = ( const struct id_off * ) ( io + ps -> nid ) ; if ( io < ie ) { ND_PRINT ( ( ndo, "" <S2SV_blank> c%s:%u"", c, ipaddr_string ( ndo, & io -> id ) ) ; c = ',' ; } ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( const struct pgstate * ) io ; <S2SV_ModEnd> } return (",0
269,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
270,"<S2SV_ModStart> ret ; uint8_t * buffer ; uint8_t value ; buffer = kmalloc ( 1, GFP_KERNEL ) ; if (! buffer ) return - ENOMEM <S2SV_ModEnd> ; dev_dbg ( <S2SV_ModStart>, reg, buffer <S2SV_ModEnd>, 1, <S2SV_ModStart> 1000 ) ; if ( <S2SV_ModEnd> ret >= 0 <S2SV_ModStart> ret >= 0 ) { value = buffer [ 0 ] ; kfree ( buffer ) ; return value ; } else { kfree ( buffer ) ; return <S2SV_ModEnd> ret ; } <S2SV_ModStart> ret ; } }",1
271,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static sqlite3_int64 <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { sqlite3_int64 nBytes = 2 * ( sqlite3_int64 ) pTable -> nModuleArg ; sqlite3_int64 * azModuleArg ; if ( nBytes == 0 ) { nBytes = sizeof ( char * ) * ( 2 + pTable -> nModuleArg ) ; } else { nBytes = sizeof ( char * ) * ( 2 + pTable -> nModuleArg ) ; } if ( nBytes > sizeof ( char * ) * ( 2 + pTable -> nModuleArg ) ) { sqlite3_int64 nBytes = sizeof ( char * ) * ( 2 + pTable -> nModuleArg ) ; char * * azModuleArg ; if ( azModuleArg == 0 ) { sqlite3DbFree ( db, zArg ) ; return 0 ; } azModuleArg = sqlite3DbRealloc ( db, pTable -> azModuleArg, nBytes ) ; if ( azModuleArg == 0 ) { sqlite3DbFree ( db, zArg ) ; return 0 ; } i = pTable -> nModuleArg ++",0
272,"<S2SV_ModStart> ; } } s -> append_char ( s, 0 ) ; strncpy <S2SV_ModEnd> ( outbuffer,",1
273,"<S2SV_ModStart> { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATES, ""Adaptation <S2SV_blank> states <S2SV_blank> array <S2SV_blank> is <S2SV_blank> empty"" ) ; goto Error ; } if (",0
274,<S2SV_ModStart> = 0 ; ( i + 3 ) <S2SV_ModEnd> < sec -> <S2SV_ModStart> = 0 ; ( i + 7 ) <S2SV_ModEnd> < sec ->,1
275,<S2SV_ModStart> case ISIS_SUBTLV_EXT_IS_REACH_BW_CONSTRAINTS_OLD : if ( subl == 0 ) break ; <S2SV_ModStart> ++ ) { <S2SV_ModEnd> bw. i,1
276,<S2SV_ModStart> 0.0 ) ; if ( ptr_hbe_txposer -> noise_sensitivity > 0 ) { if ( ptr_hbe_txposer -> noise_sensitivity > 0 ) { if ( ptr_hbe_txposer -> noise_sensitivity > 0 ) { if ( ptr_hbe_txposer -> noise_sensitivity > 0 ) { if ( ptr_hbe_txposer -> noise_sensitivity > 0 ) { ptr_hbe_txposer -> noise_sensitivity = ptr_hbe_txposer -> noise_sensitivity ; } } else { if ( ptr_hbe_txposer -> noise_sensitivity > 0 ) { if ( ptr_hbe_txposer -> noise_sensitivity > 0 ) { if ( ptr_hbe_txposer -> noise_sensitivity > 0 ) { if ( ptr_hbe_txposer -> noise_sensitivity > 0 ) { ptr_hbe_txposer -> noise_sensitivity = ptr_hbe_txposer -> noise_sensitivity ; } },0
277,"<S2SV_ModStart> < q ) { <S2SV_ModStart> enc, p ) ; } if ( p - str < reg -> dmax ) { * low = ( UChar * ) str ; if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; } else { <S2SV_ModStart> low ) ; }",0
278,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> bfq_idle_slice_timer_body ( struct <S2SV_ModStart> bfqq ) { <S2SV_ModEnd> enum bfqq_expiration reason <S2SV_ModStart> unsigned long flags ; if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_queued [ 0 ] == 0 && bfq_bfqq_queued [ 1 ] == 0 ) reason = BFQQE_TOO_IDLE ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_queued [ 0 ] == 0 && bfq_bfqq_queued [ 1 ] == 0 ) reason = BFQQE_TOO_IDLE ;,0
279,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
280,"<S2SV_ModStart> ) continue ; if ( vif -> tx. sring -> req_prod - vif -> tx. req_cons > XEN_NETIF_TX_RING_SIZE ) { netdev_err ( vif -> dev, ""Impossible <S2SV_blank> number <S2SV_blank> of <S2SV_blank> requests, <S2SV_blank> req_cons <S2SV_blank> %d, <S2SV_blank> size <S2SV_blank> %ld\\n"", vif -> tx. sring -> req_prod, vif -> tx. req_cons, XEN_NETIF_TX_RING_SIZE ) ; netbk_fatal_tx_err ( vif ) ; continue ; }",0
281,"<S2SV_ModStart> n ++ ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n < cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 4",0
282,<S2SV_ModStart> cb -> args <S2SV_ModEnd> ; struct net,0
283,<S2SV_ModStart> conn ) ; if ( <S2SV_ModStart> ( conn )!= 0 ) return,1
284,"<S2SV_ModStart> ) ; struct <S2SV_ModEnd> skb_shared_info * shinfo <S2SV_ModStart> err ) ) xen_netbk_idx_release ( netbk, pending_idx, XEN_NETIF_RSP_OKAY <S2SV_ModStart> XEN_NETIF_RSP_ERROR ) ; <S2SV_ModEnd> start = ( <S2SV_ModStart>, newerr ; <S2SV_ModEnd> pending_idx = frag_get_pending_idx <S2SV_ModStart> netbk, pending_idx, XEN_NETIF_RSP_OKAY <S2SV_ModStart> continue ; } xen_netbk_idx_release ( netbk, pending_idx, XEN_NETIF_RSP_OKAY <S2SV_ModStart> netbk, pending_idx, XEN_NETIF_RSP_OKAY <S2SV_ModEnd> ) ; if <S2SV_ModStart> netbk, pending_idx, XEN_NETIF_RSP_OKAY <S2SV_ModStart> netbk, pending_idx, XEN_NETIF_RSP_OKAY",0
285,,1
286,<S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagick,0
287,"<S2SV_ModStart> len < 0 <S2SV_ModEnd> ) { syslog <S2SV_ModStart> 1 ) { struct sockaddr * addr_p = ( struct sockaddr * ) & addr ; error = bind ( fd, ( struct sockaddr * ) & addr, sizeof ( addr ) ) ; if ( error < 0 ) { syslog ( LOG_ERR, ""bind <S2SV_blank> failed; <S2SV_blank> error:%d"", error ) ; close ( fd ) ; exit ( EXIT_FAILURE ) ; } addr_p = ( struct sockaddr * ) & addr ; len = bind ( fd, ( struct sockaddr * ) & addr, sizeof ( addr ) ) ; if ( len < 0 ) { syslog ( LOG_ERR, ""bind <S2SV_blank> failed; <S2SV_blank> error:%d"", len ) ; close ( fd ) ; exit ( EXIT_FAILURE ) ; } addr_p = ( struct sockaddr * ) & addr ; len = bind ( fd, ( struct sockaddr * ) & addr, sizeof ( addr ) ) ; error = bind ( fd, ( struct sockaddr * ) & addr, sizeof ( addr ) ) ; if ( error < 0 ) { syslog ( LOG_ERR, ""bind <S2SV_blank> failed; <S2SV_blank> error:%d"", error ) ; close ( fd ) ; exit ( EXIT",0
288,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
289,<S2SV_ModStart> ipc == NULL && client -> session == NULL,1
290,"<S2SV_ModStart> newDataLength || diffPtr + ( x + 1 ) <S2SV_ModEnd> > diffBlock + <S2SV_ModStart> diffBlock + diffBlockLength || extraPtr + ( y + 1 ) <S2SV_ModEnd> > extraBlock + <S2SV_ModStart> NULL ; } if ( diffPtr + ( x + 1 ) > diffBlock + diffBlockLength || extraPtr + ( y + 1 ) > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, diffPtr, x ) ; diffPtr += x ; extraPtr += y ; if ( extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; }",0
291,"<S2SV_ModStart>, nameptr, lfi, fname, UDF_NAME_LEN <S2SV_ModEnd> ) ; if",1
292,"<S2SV_ModStart> ip_vs_timeout_user t ; memset ( & t, 0, sizeof ( t ) ) ;",1
293,"<S2SV_ModStart> pktopts ) ; rcu_read_lock ( ) ; <S2SV_ModStart>, fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
294,<S2SV_ModStart> ; ssize_t result ; if ( WARN_ON_ONCE (! ib_safe_file_access ( filp ) ) ) return - EACCES,1
295,"<S2SV_ModStart>, * controller, * next = NULL <S2SV_ModStart> if (! caller_is_in_ancestor ( fc -> pid, controller, path1, & next <S2SV_ModEnd>, O_RDWR ) <S2SV_ModStart> O_RDWR ) ) { if ( fpath && strcmp ( next, fpath ) == 0 ) ret = - EEXIST ; else ret = - ENOENT <S2SV_ModEnd> ; goto out <S2SV_ModStart> if (! fc_may_access ( fc, controller, path1, NULL, O_RDWR ) ) { ret = - EACCES ; goto out ; } if (! fc_may_access ( fc, controller, path1, NULL, O_RDWR ) ) { ret = - EACCES ; goto out ; } if (! fc_may_access ( fc, controller, path1, NULL, O_RDWR ) ) { ret = - EACCES ; goto out ; } ret = cgfs_create ( controller, cgroup, fc -> uid, fc -> gid, fc -> uid, fc -> gid ) ; printf ( ""cgfs_create <S2SV_blank> returned <S2SV_blank> %d <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> %s\\n"", ret, controller, cgroup ) ; free ( next ) ;",0
296,<S2SV_ModStart> ) ) { put_disk ( disk ) ;,1
297,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
298,"<S2SV_ModStart> == VFF_TYP_BIT ) { if ( CheckMemoryOverflow <S2SV_ModEnd> ( ( image <S2SV_ModStart> ) >> 3UL, <S2SV_ModEnd> image -> rows <S2SV_ModStart> image -> rows )!= MagickFalse ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" ) ; max_packets = ( ( image -> columns + 7UL ) >> 3UL ) * image -> rows ; } else { if ( CheckMemoryOverflow ( number_pixels, max_packets )!= MagickFalse ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" ) ; <S2SV_ModEnd> max_packets = ( <S2SV_ModStart> number_data_bands ) ; }",0
299,<S2SV_ModStart> pktnum ; int64_t index_pts ; if ( avio_feof ( s -> pb ) ) { goto end ; },0
300,<S2SV_ModStart> ; rinfo = kzalloc <S2SV_ModEnd> ( SZ_SG_REQ_INFO *,1
301,"<S2SV_ModStart> ; # endif install_keyword ( ""umask"", & umask_handler ) ;",1
302,<S2SV_ModStart> data ) { ( void ) data ;,0
303,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> kfree ( tmpbuf,1
304,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; }",1
305,"<S2SV_ModStart> ( box = jp2_box_create0 ( ) ) ) { goto error ; } <S2SV_ModEnd> if ( jp2_getuint32 <S2SV_ModStart> 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, \'""\', <S2SV_ModStart> 1 ) { JAS_DBGLOG ( 10, ( ""large <S2SV_blank> box <S2SV_blank> length\\n"" ) ) ;",0
306,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
307,"<S2SV_ModStart> ; int copylen = 0 <S2SV_ModStart> goto err ; err = - EMSGSIZE ; if ( unlikely ( count > MAX_SKB_FRAGS ) ) goto err ; <S2SV_ModStart> zerocopy ) { if ( count > MAX_SKB_FRAGS ) { copylen = iov_length ( iv, count - MAX_SKB_FRAGS ) ; if ( copylen < vnet_hdr_len ) copylen = 0 ; else copylen -= vnet_hdr_len ; } if ( copylen < vnet_hdr_len )",0
308,<S2SV_ModStart> ( struct ipv6hdr <S2SV_ModEnd> ) ; unsigned <S2SV_ModStart> while ( offset <S2SV_ModEnd> <= packet_len ) <S2SV_ModStart> packet_len ) { struct ipv6_opt_hdr * exthdr ; <S2SV_ModStart> offset ; } if ( offset + sizeof ( struct ipv6_opt_hdr ) > packet_len ) return - EINVAL ; exthdr = ( struct ipv6_opt_hdr * ) ( skb_network_header ( skb ) + offset ) ; <S2SV_ModStart> -> nexthdr ; } return - EINVAL <S2SV_ModEnd> ; } <S2SV_null>,1
309,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
310,<S2SV_ModStart> ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & Y,0
311,"<S2SV_ModStart> sll ) ; <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> out_free ; } copied = skb_copy_datagram_iovec ( skb, 0, msg -> msg_namelen ) ; if ( copied > len ) { copied = len ; err = sock_recv_ts_and_drops ( msg, sk, skb, 0, & sll, copied ) ; if ( err ) goto out_free ; } if ( msg -> msg_namelen!= 0 ) { err = - EMSGSIZE ; goto out_free ; } <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> msg -> msg_namelen = copied ; } <S2SV_ModEnd> msg -> msg_namelen",0
312,<S2SV_ModStart> } if ( <S2SV_ModEnd> djrcv_dev -> paired_dj_devices,1
313,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
314,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
315,"<S2SV_ModStart> asconf ) { sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) asconf -> chunk_hdr ; bool all_param_pass = 1 ; union sctp_params param ; <S2SV_ModStart> __u32 serial ; <S2SV_ModEnd> chunk_len = ntohs <S2SV_ModStart> goto done ; chunk_len = ntohs ( asconf -> chunk_hdr -> length ) - sizeof ( sctp_chunkhdr_t ) ; if ( chunk_len > 0 ) { err_code = sctp_process_asconf_param ( asoc, asconf, param ) ; if ( err_code!= SCTP_ERROR_NO_ERROR <S2SV_ModEnd> ) all_param_pass = <S2SV_ModStart> ( asconf_ack, param. addip, err_code, param. addip ) ; if ( err_code == SCTP_ERROR_RSRC_LOW <S2SV_ModEnd> ) goto done <S2SV_ModStart> goto done ; <S2SV_ModEnd> } done : <S2SV_ModStart> ( asconf_ack, param. addip <S2SV_ModEnd> -> crr_id, <S2SV_ModStart> -> crr_id, err_code, param. addip ) ; if ( err_code!= SCTP_ERROR_",0
316,"<S2SV_ModStart> 101, ( ""jas_realloc(%x, <S2SV_blank> %zu)\\n"" <S2SV_ModEnd>, ptr,",1
317,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
318,<S2SV_ModStart> CPU_FTR_TM_COMP ) && hv_enabled <S2SV_ModEnd> ; break ;,1
319,"<S2SV_ModStart> msicap ; if (! pci_populate_msicap ( & msicap, msgnum, 1 ) ) return - EINVAL",0
320,"<S2SV_ModStart> key_name ), UTF16_HOST_ENDIAN, <S2SV_ModStart> data. key, HV_KVP_EXCHANGE_MAX_KEY_SIZE / 2 <S2SV_ModStart> data. key, HV_KVP_EXCHANGE_MAX_KEY_SIZE / 2 <S2SV_ModStart> value ), UTF16_HOST_ENDIAN, <S2SV_ModStart> data. value, HV_KVP_EXCHANGE_MAX_VALUE_SIZE / 2 <S2SV_ModStart> data. value, HV_KVP_EXCHANGE_MAX_VALUE_SIZE / 2, HV_KVP_EXCHANGE_MAX_VALUE_SIZE / 2 <S2SV_ModStart> data. value, HV_KVP_EXCHANGE_MAX_VALUE_SIZE / 2",0
321,<S2SV_ModStart> -> log_file ; <S2SV_ModEnd> d -> log_ctx,0
322,<S2SV_ModStart> return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
323,"<S2SV_ModStart> * parg = ( void * ) arg ; long err = - EINVAL ; int is_ext_ctrl ; size_t ctrls_size = 0 ; void __user * user_ptr = NULL ; if ( _IOC_DIR ( cmd )!= _IOC_NONE ) { parg = sbuf ; } else { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) return - ENOMEM ; parg = mbuf ; } err = - EFAULT ; if ( _IOC_DIR ( cmd ) & _IOC_WRITE ) { parg = sbuf ; } else { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) return - ENOMEM ; parg = mbuf ; } err = - EFAULT ; if ( _IOC_DIR ( cmd ) & _IOC_WRITE ) { parg = sbuf ; } else { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) return",0
324,"<S2SV_ModStart> psubscribeCommand ) { addReplyError ( c, ""only <S2SV_blank> (P)SUBSCRIBE <S2SV_blank> / <S2SV_blank> (P)UNSUBSCRIBE <S2SV_blank> / <S2SV_blank> QUIT <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> this <S2SV_blank> context"" ) ; return REDIS_OK ; } if (",0
325,"<S2SV_ModStart> u16 size, const <S2SV_ModStart> data ) { void * buf ; int ret ; buf = kmemdup ( data, size, GFP_NOIO ) ; if (! buf ) return - ENOMEM ; ret = <S2SV_ModEnd> usb_control_msg ( dev <S2SV_ModStart>, 0, buf <S2SV_ModEnd>, size, <S2SV_ModStart> 500 ) ; kfree ( buf ) ; return ret ;",1
326,"<S2SV_ModStart> endpoint = & usbinterface -> altsetting [ 0 ]. desc ; dev_dbg ( & usbinterface -> dev, ""gtco <S2SV_blank> # <S2SV_blank> interfaces: <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""gtco <S2SV_blank> # <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ;",0
327,"<S2SV_ModStart> ) { case GTK_RESPONSE_OK : { file = nautilus_file_get_location ( parameters -> file ) ; nautilus_file_set_metadata ( parameters -> file, NAUTILUS_METADATA_KEY_DESKTOP_FILE_TRUSTED, NULL ) ; nautilus_file_mark_desktop_file_untrusted ( file, parameters -> parent_window, TRUE, NULL, NULL ) ; nautilus_file_set_metadata ( parameters -> file, NAUTILUS_METADATA_KEY_DESKTOP_FILE_TRUSTED, NULL, NULL ) ; nautilus_file_set_metadata ( parameters -> file, NAUTILUS_METADATA_KEY_DESKTOP_FILE_TRUSTED, NULL ) ; } break ; case GTK_RESPONSE_OK : { screen = gtk_widget_get_screen ( GTK_WIDGET ( parameters -> parent_window ) ) ; uri = nautilus_file_get_uri ( parameters -> file ) ; nautilus_file_set_metadata ( parameters -> file, NAUTILUS_METADATA_KEY_DESKTOP_FILE_TRUST",0
328,<S2SV_ModStart> ; if ( urb -> actual_length > 0 &&,1
329,"<S2SV_ModStart> * server, struct smb_vol * vol ) { <S2SV_ModEnd> struct cifsSesInfo * <S2SV_ModStart> cifs_tcp_ses_lock ) ; list_for_each_entry ( ses <S2SV_ModEnd>, & server <S2SV_ModStart> server -> smb_ses_list, smb_ses_list ) { if ( strncmp ( ses -> userName <S2SV_ModEnd>, username, <S2SV_ModStart> ) continue ; }",0
330,"<S2SV_ModStart> vpx_codec_err_t res ; # if CONFIG_VP9_HIGHBITDEPTH if ( ( ( cfg -> g_w!= ctx -> cfg. g_w ) || ( ( cfg -> g_h!= ctx -> cfg. g_h ) ) && ( cfg -> g_lag_in_frames > 1 || ( cfg -> g_pass!= VPX_RC_ONE_PASS <S2SV_ModEnd> ) ) ) <S2SV_ModStart> ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; # endif if ( ( cfg -> g_w!= ctx -> cfg. g_w ) || ( cfg -> g_h!= ctx -> cfg. g_h ) ) ) { if ( ( cfg -> g_w > ctx -> cfg. g_w || ( cfg -> g_w > ctx -> cfg. g_w ) || ( cfg -> g_h > ctx -> cfg. g_h ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; } else { if ( ( cfg -> g_w > ctx -> cfg. g_w ) || ( cfg -> g_h > ctx -> cfg. g_h ) )",0
331,"<S2SV_ModStart> =='<S2SV_blank>') { input ++ ; } <S2SV_ModEnd> ptr = strchr <S2SV_ModStart> off ) ) { <S2SV_ModStart> ) ; } } <S2SV_ModStart> offset ) ) { <S2SV_ModStart> ""Unknown <S2SV_blank> filesystem <S2SV_blank> type\\n"" ) ; } <S2SV_ModStart> offset ) ) { <S2SV_ModStart> input ) ; }",0
332,"<S2SV_ModStart> inode ) ; struct hugepage_subpool * spool = subpool_inode ( inode ) ; <S2SV_ModStart> ; if ( hugepage_subpool_get_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> 0 ) { hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg )",1
333,<S2SV_ModStart> key * keyring ; if ( new -> thread_keyring ) return 0,1
334,"<S2SV_ModStart> = 0 ; size_t scanned = 0 ; static size_t readnbd ; if ( readnbd > ( size_t ) 0U ) { readnbd -= scanned ; memmove ( cmd + scanned, readnbd ) ; scanned = ( size_t ) 0U ; } if ( readnb <= ( ssize_t ) 0 && errno == EINTR ) { return - 2 ; } if ( readnb <= ( ssize_t ) 0 && errno == EINTR ) { while ( ( readnb = read ( clientfd, cmd + scanned, cmdsize - scanned ) ) < ( ssize_t ) 0 && errno == EINTR ) ; } if ( readnb <= ( ssize_t ) 0 && errno == EINTR ) { while ( readnb <= ( ssize_t ) 0 && errno == EINTR ) { while ( readnb <= ( ssize_t ) 0 && errno == EINTR ) ) { while ( readnb <= ( ssize_t ) 0 && errno == EINTR ) ) { read ( clientfd, cmd + scanned, cmdsize - scanned ) ) < ( ssize_t ) 0 && errno ==",0
335,"<S2SV_ModStart> orig ) ; fptr_orig = io_get_open_fptr ( mrb, orig ) ; <S2SV_ModStart> mrb_io_alloc ( mrb <S2SV_ModEnd> ) ; DATA_TYPE",1
336,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
337,"<S2SV_ModStart> cpi ) { # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. noise_sensitivity > 0 ) { cpi -> oxcf. noise_sensitivity = 0 ; } # endif <S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. noise_sensitivity > 0 ) { vpx_init_plane_quantizers <S2SV_ModEnd> ( cpi, <S2SV_ModStart> cpi -> mb ) ; } # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. noise_sensitivity > 0 ) { vp9_init_plane_quantizers ( cpi, & cpi -> bw ) ; } # endif vp9_init_plane_quantizers ( cpi, & cpi -> bw ) ; } # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. noise_sensitivity > 0 ) { vp9_init_plane_quantizers ( cpi, & cpi -> bw ) ; } # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. noise_sensitivity > 0 ) {",0
338,"<S2SV_ModStart> return res ; res = utee_param_to_param ( utc, <S2SV_ModEnd> param, callee_params <S2SV_ModStart>, callee_params ) ; if ( res!= TEE_SUCCESS ) return res",1
339,"<S2SV_ModStart> int rc ; struct desc_struct old_desc, new_desc ; const struct x86_emulate_ops * ops = ctxt -> ops ; int cpl = ctxt -> ops -> cpl ( ctxt ) ; old_eip = ctxt -> _eip ; ops -> get_segment ( ctxt, & old_cs, & old_desc, NULL <S2SV_ModEnd>, VCPU_SREG_CS ) <S2SV_ModStart>, VCPU_SREG_CS ) <S2SV_ModEnd> ; memcpy ( <S2SV_ModStart> 2 ) ; rc = __load_segment_descriptor <S2SV_ModEnd> ( ctxt, <S2SV_ModStart> sel, VCPU_SREG_CS, cpl, false, & new_desc ) ; if ( rc!= X86EMUL_CONTINUE <S2SV_ModEnd> ) return X86EMUL_CONTINUE <S2SV_ModStart> return X86EMUL_CONTINUE ; rc = assign_eip_far ( ctxt, ctxt -> src. val, new_desc. l ) ; if ( rc!= X86EMUL_CONTINUE ) goto fail ; ctxt -> src. val = old_cs ; rc = em_push ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) goto fail ; ctxt -> src. val = old_eip",1
340,<S2SV_ModStart> -> band = av_calloc <S2SV_ModEnd> ( reslevel -> <S2SV_ModStart> -> prec = av_calloc <S2SV_ModEnd> ( reslevel ->,1
341,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
342,"<S2SV_ModStart> amount ; } amount = n_got * sizeof ( ut32 ) ; <S2SV_ModStart> } struct reloc_struct_t * table = calloc ( 1, n_got * sizeof ( ut32 ) ) ; if (! table ) { r_list_free ( list ) ; return NULL ; } struct reloc_struct_t * got_table = calloc ( 1, n_got * sizeof ( ut32 ) ) ; if (! table ) { r_list_free ( list ) ; return NULL ; } <S2SV_ModStart> 0 ) { ut32 got_entry ; if (! VALID_GOT_ENTRY ( got_entry ) ||! VALID_GOT_ENTRY ( got_entry ) ||! VALID_GOT_ENTRY ( got_entry ) ||! VALID_GOT_ENTRY ( got_entry ) ||! VALID_GOT_ENTRY ( got_entry ) ||! VALID_GOT_ENTRY ( got_entry ) ||! VALID_GOT_ENTRY ( got_entry ) ||! VALID_GOT_ENTRY ( got_entry ) ||! VALID_GOT_ENTRY ( got_entry ) ||! VALID_GOT_ENTRY ( got_entry ) ||! VALID",0
343,<S2SV_ModStart> info -> si_code!= SI_QUEUE ) { WARN_ON_ONCE ( info -> si_code < 0 ) ; <S2SV_ModEnd> return - EPERM <S2SV_ModStart> - EPERM ; },1
344,"<S2SV_ModStart> * p_tx0 = ( OPJ_INT32 ) opj_uint_max <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdx, <S2SV_ModEnd> p_image -> x0 <S2SV_ModStart> * p_tx1 = ( OPJ_INT32 ) opj_uint_min <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdx, <S2SV_ModEnd> p_image -> x1 <S2SV_ModStart> * p_ty0 = ( OPJ_INT32 ) opj_uint_max <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdy, <S2SV_ModEnd> p_image -> y0 <S2SV_ModStart> * p_ty1 = ( OPJ_INT32 ) opj_uint_min <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdy, <S2SV_ModEnd> p_image -> y1",1
345,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> char * create_output_name <S2SV_ModStart> * create_output_name ( <S2SV_ModEnd> char * fname <S2SV_ModStart> * fname, <S2SV_ModEnd> int lower, <S2SV_ModStart> * dir, <S2SV_ModEnd> int utf8 ) <S2SV_ModStart> ; if ( ( c = * fname ++ ) < 0xC0 ) && ( c < 0xE0 ) ) { if ( c >= 0xC0 ) && ( c < 0xF0 ) ) { x = ( c & 0x1F ) << 6 ; x |= ( * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xC0 ) && ( c < 0xE0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ; } else x = '?' ; } if ( x == sep ) x = '\\\\' ; else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; if ( x < 0x800 ) { * p ++ = 0xC0 | ( x >> 6 ) ; * p ++ = 0x80 | (",0
346,"<S2SV_ModStart> classes = NULL ; zval * return_value <S2SV_ModStart> ; } } return_value = var_hash ; <S2SV_ModStart> } if (! php_var_unserialize_ex ( return_value, & p, p + buf_len, & var_hash, class_hash ) ) { PHP_VAR_UNSERIALIZE_DESTROY ( var_hash ) ; <S2SV_ModStart> RETURN_FALSE ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
347,<S2SV_ModStart> goto __err ; tu -> qhead = tu -> qtail = tu -> qused = 0 ;,1
348,"<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if ( ( ptr -> size % tmp_strsize )!= 0 ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, GF_LOG_CONTAINER_ERROR, GF_LOG_CONTAINER_ERROR, GF_LOG_CONTAINER_ERROR ) ; return GF_ISOM_INVALID_FILE ; } <S2SV_ModEnd> tmp_str = gf_malloc <S2SV_ModStart> ( bs ) ; if (! tmp_str [ i ] ) break GF_ISOM_INVALID_FILE ; if ( ( ptr -> size % tmp_strsize )!= 0 ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, GF_LOG_CONTAINER_ERROR, GF_LOG_CONTAINER_ERROR, GF_LOG_CONTAINER_ERROR ) ; return GF_ISOM_INVALID_FILE ; } <S2SV_ModStart> j ] ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, GF_LOG_CONTAINER_ERROR, GF_LOG_CONTAINER_ERROR, GF_LOG_CONTAINER_ERROR, GF_LOG_CONTAINER",0
349,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
350,"<S2SV_ModStart> == 0 ) { if ( received_protocol ) { fprintf ( stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; } if ( received_protocol ) { fprintf ( stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; } if ( received_protocol ) { fprintf ( stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; } if ( received_protocol ) { fprintf ( stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; } if ( received_protocol ) { fprintf ( stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; } if ( received_protocol ) { fprintf ( stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; } if ( received_protocol ) { fprintf ( stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; }",0
351,<S2SV_ModStart> info -> si_code!= SI_QUEUE ) { WARN_ON_ONCE ( info -> si_code < 0 ) ; <S2SV_ModEnd> return - EPERM <S2SV_ModStart> - EPERM ; },1
352,"<S2SV_ModStart> -> off = strtoull <S2SV_ModEnd> ( p, <S2SV_ModStart> -> filesize = strtoull <S2SV_ModEnd> ( slash +",1
353,"<S2SV_ModStart> * cr ; size_t <S2SV_ModEnd> maxw, maxh <S2SV_ModStart> maxh, max, offx, loopmaxw <S2SV_ModStart>, upb ; size_t i, j ; maxw = ( size_t ) img -> comps [ 0 ]. w ; maxh = ( size_t ) img -> comps [ 0 ]. h ; max = maxw * maxh ; y = img -> comps [ 0 ]. data ; cb = img -> comps [ 1 ]. data ; cr = img -> comps [ 2 ]. data ; d0 = r = ( int * ) malloc ( sizeof ( int ) * max ) ; d1 = g <S2SV_ModEnd> = ( int <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> goto fails ; offx = img -> x0 & 1U ; loopmaxw = maxw - offx ; offy = img -> y0 & 1U ; loopmaxh = maxh - offy ; for ( j = 0U ; j < ( maxw & ~ ( size_t ) 1U ) ; j += 2U ) { sycc_to_rgb",0
354,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state == fmode <S2SV_ModEnd> ) return ; <S2SV_ModStart> if ( ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> & FMODE_WRITE ) ) { if ( state -> state & FMODE_WRITE ) list_move ( & state -> open_states, & state -> owner -> so_states ) ; else list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } else state -> state = mode ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
355,"<S2SV_ModStart> return SSH_ERR_INVALID_ARGUMENT ; ssh_dispatch_set ( ssh, SSH2_MSG_KEXINIT, NULL ) ;",1
356,"<S2SV_ModStart> { assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
357,"<S2SV_ModStart> if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModEnd> if ( length <S2SV_ModStart> if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModEnd> if ( length <S2SV_ModStart> if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length <S2SV_ModStart> if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModEnd> if ( length <S2SV_ModStart> if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
358,"<S2SV_ModStart> char lbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char strbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char ltest [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char strtest [ 512 <S2SV_ModEnd> ] ; if <S2SV_ModStart> ( lbase, ""%511[^\\r\\n]"" <S2SV_ModEnd>, strbase ) <S2SV_ModStart> ( ltest, ""%511[^\\r\\n]"" <S2SV_ModEnd>, strtest ) <S2SV_ModStart> ( nbase!= 511 <S2SV_ModEnd> && ntest!= <S2SV_ModStart> && ntest!= 511 <S2SV_ModEnd> ) ; if",1
359,<S2SV_ModStart> intf ) { <S2SV_ModEnd> if ( cdc_ncm_select_altsetting <S2SV_ModStart> - ENODEV ; return <S2SV_ModEnd> cdc_ncm_bind_common ( dev <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
360,<S2SV_ModStart> 0 ; } if ( elem. in_sg [ 0 ]. iov_len!= len ) { return 0 ; },0
361,"<S2SV_ModStart>, i, JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; if ( i % 2 == 0 ) { fprintf ( out, ""expn[%d] <S2SV_blank> = <S2SV_blank> 0x%04x; <S2SV_blank> mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", i, ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; } else { fprintf ( out, ""expn[%d] <S2SV_blank> = <S2SV_blank> 0x%04x; <S2SV_blank> mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", i, ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; }",0
362,"<S2SV_ModStart>, e -> elems, e ->",1
363,"<S2SV_ModStart> = AV_PIX_FMT_PAL8 ; if ( c -> format == CHUNKY ) avctx -> pix_fmt = AV_PIX_FMT_YUV422 ; else avctx -> pix_fmt = AV_PIX_FMT_YUV422 ; } else if ( c -> format == CHUNKY ) { avctx -> pix_fmt = AV_PIX_FMT_YUV422 ; } else if ( c -> format == CHUNKY ) { avctx -> pix_fmt = AV_PIX_FMT_YUV422 ; } else { avctx -> pix_fmt = AV_PIX_FMT_YUV422 ; } else { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_INVALIDDATA ; }",0
364,"<S2SV_ModStart> 1 ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, ""[|osi]"" ) ) ; length = caplen - 1 ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, ""[|osi]"" ) ) ; return ( length ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, ""[|osi]"" ) ) ; return ( length ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, ""[|osi]"" ) ) ; length = caplen - 1 ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, ""[|osi]"" ) ) ; return ( length ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, ""[|osi]"" ) ) ; return ( length ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, ""[|osi]"" ) ) ; return ( length ) ; }",0
365,<S2SV_ModStart> q ) { mutex_lock ( & q -> timer_mutex ) ; <S2SV_ModStart> snd_seq_timer_close ( q ) ; mutex_unlock ( & q -> timer_mutex,1
366,"<S2SV_ModStart> int error ; unsigned int nr_blks ; sector_t lblock <S2SV_ModEnd> = offset >> <S2SV_ModStart> = offset >> inode -> i_blkbits ; error = gfs2_meta_inode_buffer ( ip, & dibh ) ; if ( unlikely ( error ) ) return error ; error = gfs2_meta_inode_buffer ( ip, & dibh ) ; if ( unlikely ( error ) ) goto out ; if ( gfs2_is_stuffed ( ip ) ) { error = gfs2_unstuff_dinode ( ip, NULL ) ; if ( unlikely ( error ) ) goto out ; } curr = start ; offset = start << PAGE_CACHE_SHIFT ; end = ( offset + len - 1 ) & ~ PAGE_CACHE_MASK ; if (! end_offset ) end_offset = PAGE_CACHE_SIZE ; error = write_empty_blocks ( page, from, to, mode ) ; if (! error && offset + to > inode -> i_size &&! ( mode & FALLOC_FL_KEEP_SIZE ) ) { i_size_write ( inode, offset + to ) ; } unlock_page (",0
367,<S2SV_ModStart> VIPS_FOREIGN_LOAD_GET_CLASS ( load ) ; if ( load -> error ) return ( NULL <S2SV_ModStart> -> real ) || <S2SV_ModEnd> vips_foreign_load_iscompat ( load <S2SV_ModStart> out ) ) { vips_operation_invalidate ( VIPS_OPERATION ( load ) ) ; load -> error = TRUE ; return ( NULL ) ; } <S2SV_ModEnd> vips_image_pipelinev ( load,1
368,"<S2SV_ModStart> { const char * name_start = fit_get_name ( fit, noffset, NULL ) ; const char * name = fit_get_name ( fit, noffset, NULL ) ; if (! strncmp ( name_start, FIT_SIG_NODENAME, strlen ( FIT_SIG_NODENAME ) ) ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) { puts ( ""- <S2SV_blank> "" ) ; } else { puts ( ""+ <S2SV_blank> "" ) ; verified = 1 ; break ; } } if ( noffset == - FDT_ERR_TRUNCATED || noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; }",0
369,<S2SV_ModStart> ; args. rmtvaluelen = valuelen ; args.,0
370,"<S2SV_ModStart> ; if ( kfifo_alloc ( & state -> rx_kfifo, CX23888_IR_RX_KFIFO_SIZE, GFP_KERNEL ) ) return - ENOMEM ; state -> dev = dev ; state -> sd = & state -> sd ; v4l2_subdev_init ( & state -> v4l2_dev, & dev -> v4l2_dev ) ; snprintf ( sd -> name, sizeof ( sd -> name ), ""%s/888-ir"", dev -> name ) ; sd -> grp_id = CX23885_HW_888_IR ; ret = v4l2_device_register_subdev ( & dev -> v4l2_dev, sd ) ; if ( ret == 0 ) { cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_tx_params ; v4l2_subdev_call ( sd, ir, tx_s_parameters, & default_params",0
371,<S2SV_ModStart> service_name_tlv_length ) ; if (! service_name_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> miux_tlv_length ) ; if (! miux_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> rw_tlv_length ) ; if (! rw_tlv ) { err = - ENOMEM ; goto error_tlv ; },1
372,"<S2SV_ModStart> ssh * ssh = NULL <S2SV_ModStart> ; if (! IS_ERR ( active_state ) ) { mon = active_state ; } else { mon = xcalloc ( 1, sizeof ( * mon ) ) ; } if ( options. compression ) { mon -> m_zback = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; } else { mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; } if ( ssh ) { ssh_packet_set_compress_hooks ( ssh, ( ssh_packet_alloc_func * ) mm_zalloc, ( ssh_packet_free_func * ) mm_zfree ) ; } return mon ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
373,"<S2SV_ModStart> * iface, int iface_version, <S2SV_ModStart> = VPX_CODEC_ABI_MISMATCH ; if ( iface -> abi_version!= VPX_CODEC_INTERNAL_ABI_VERSION ) res = VPX_ABI_MISMATCH ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) &&! ( iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_",0
374,"<S2SV_ModStart> unsigned int channo ; if (! ( cdef -> ents = jas_alloc2 ( cdef -> numchans, sizeof ( jp2_cdefent_t ) )",0
375,<S2SV_ModStart> value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
376,<S2SV_ModStart> icmp_param. data ; icmp_param. data [ sizeof ( struct icmphdr ) ]. code = code ; ipc. data [ sizeof ( struct icmp_bxm ) ]. data [ sizeof ( struct icmphdr ) ]. code = code ; ipc. data [ sizeof ( struct icmphdr ) ]. data [ sizeof ( struct icmphdr ) ]. data [ sizeof ( struct icmphdr ) ]. data [ sizeof ( struct icmphdr ) ]. data [ sizeof ( struct icmphdr ) ]. code = code ; ipc. data [ sizeof ( struct icmp_bxm ) ]. data [ sizeof ( struct icmphdr ) ]. code = code ; ipc. data [ sizeof ( struct icmp_bxm ) ]. data [ sizeof ( struct icmphdr ) ]. data [ sizeof ( struct icmphdr ) ]. data [ sizeof ( struct icmphdr ) ]. data [ sizeof ( struct icmphdr ) ]. data ; ipc. data [ sizeof ( struct icmp_bxm ) ]. data [ sizeof ( struct icmph,0
377,<S2SV_ModStart> len ; } ND_TCHECK_32BITS <S2SV_ModEnd> ( p +,0
378,<S2SV_ModStart> 0 ; } if ( unlikely ( IPCB ( skb ) -> opt. optlen ) ) skb_dst_force ( skb ) ; else,1
379,<S2SV_ModStart> private ) { struct skcipher_tfm * tfm = private ; crypto_free_skcipher ( tfm -> skcipher ) ; kfree ( tfm <S2SV_ModEnd> ) ; },1
380,<S2SV_ModStart> bprm ) { <S2SV_ModEnd> int retval ; <S2SV_ModStart> int retval ; bprm_fill_uid ( bprm ) ; <S2SV_ModEnd> retval = security_bprm_set_creds,1
381,<S2SV_ModStart> = nlogs ; if ( unlikely (! headcount ) ) { r = - ENOBUFS ; goto err ; },0
382,<S2SV_ModStart> ) ) { if ( dlen < 2 ) break ;,0
383,<S2SV_ModStart> { rq = tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; fn (,1
384,<S2SV_ModStart> else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) && ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_,0
385,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
386,<S2SV_ModStart> ; if (! skb_is_nonlinear ( skb ) ||,0
387,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; RESERVE_SPACE",1
388,"<S2SV_ModStart> bp, len ) ; break ; case ETHERTYPE_TEB : if ( len < 4 ) goto trunc ; ND_TCHECK_16BITS ( bp ) ; bp += 2 ; len -= 2 ; ND_TCHECK_16BITS ( bp ) ; bp += 2 ; len -= 2 ; ND_TCHECK_16BITS ( bp ) ; bp += 2 ; len -= 2 ; ND_TCHECK_16BITS ( bp ) ; bp += 2 ; len -= 2 ; ND_TCHECK_16BITS ( bp ) ; bp += 2 ; len -= 2 ; ND_TCHECK_16BITS ( bp ) ; bp += 2 ; len -= 2 ; ND_TCHECK_16BITS ( bp ) ; bp += 2 ; len -= 2 ; ND_TCHECK_16BITS ( bp ) ; bp += 2 ; len -= 2 ; if ( len < 2 ) goto trunc ; if ( flags & GRE_SP ) { ND_TCHECK2 ( * bp, 4 ) ; if ( len < 4 ) goto trunc ; ND_PRINT ( ( ndo, "", <S2SV_blank> seq <S2SV_blank> %u"", EXTRACT_32BITS ( bp ) ) ) ;",0
389,"<S2SV_ModStart> } if ( tile_buffsize > 0xFFFFFFFFU - 1 ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> calculating <S2SV_blank> buffer <S2SV_blank> size"" ) ; exit ( - 1 ) ; } tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize -",0
390,"<S2SV_ModStart> # endif { ""umask"", required_argument, NULL, 'u' }, # if defined _WITH_BFD_ { ""no_umask"", no_argument, NULL, 'G' }, { ""umask"", required_argument, NULL, 'P' }, # if defined _WITH_LVS_ { ""dont-release-ipvs"", no_argument, NULL, 'I' }, { ""umask"", required_argument, NULL, 'G' }, { ""umask"", required_argument, NULL, 'u' }, # if defined _WITH_BFD_ { ""no_bfd"", no_argument, NULL, 'B' }, { ""umask"", required_argument, NULL, 'G' }, # if defined _WITH_LVS_ { ""dont-release-ipvs"", no_argument, NULL, 'L' }, # endif",0
391,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ""modify_bar_registration: <S2SV_blank> bypass <S2SV_blank> for <S2SV_blank> pci-gvt\\n"" ) ; return 0 <S2SV_ModEnd> ; } switch <S2SV_ModStart> break ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
392,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart> -> nd_num ) { ret = <S2SV_ModEnd> - EBUSY ; <S2SV_ModStart> - EBUSY ; goto out ; } <S2SV_ModStart> ( ret ) goto out <S2SV_ModEnd> ; } if <S2SV_ModStart> nd_num ; } ret = count ; out : o2nm_unlock_subsystem ( ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>,1
393,"<S2SV_ModStart> ( fp, ""\\n <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %s\\n"" <S2SV_ModEnd>, & n",0
394,<S2SV_ModStart> 0x95 : case 0x6a : case 0x6b : case 0x6f : case 0x7a : case 0x7b : case 0x7c : case 0x7f : case 0x8a : case 0x8b : case 0x8f : case 0x9a : case 0x10 : case 0x11 : case 0x12 : case 0x13 : case 0x14 : case 0x9f : case 0x10 : case 0x11 : case 0x12 : case 0x13 : case 0x14 : case 0x15 : case 0x16 : case 0x17 : case 0x18 : case 0x19 : case 0x1a : case 0x1b : case 0x1c : case 0x1f : case 0x1f : case 0x18 : case 0x19 : case 0x20 : case 0x21 : case 0x22 : case 0x23 : case 0x23 : case 0x24 : case 0x25 : case 0x26 : case 0x27 : case,0
395,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
396,"<S2SV_ModStart> return ERROR_INVALID_REQUEST ; if ( osStrcasecmp ( token, '?' ) ) { error = httpDecodePercentEncodedString ( token, connection -> request. uri, HTTP_SERVER_URI_MAX_LEN ) ; if ( error ) return ERROR_INVALID_REQUEST ; if ( osStrlen ( s + 1 ) > HTTP_SERVER_QUERY_STRING_MAX_LEN ) return ERROR_INVALID_REQUEST ; osStrcpy ( connection -> request. queryString, s + 1 ) ; } else { error = httpDecodePercentEncodedString ( token, connection -> request. uri, HTTP_SERVER_URI_MAX_LEN ) ; if ( error ) return ERROR_INVALID_REQUEST ; if ( osStrlen ( s + 1 ) > HTTP_SERVER_QUERY_STRING_MAX_LEN ) return ERROR_INVALID_REQUEST ; if ( osStrlen ( s + 1 ) > HTTP_SERVER_QUERY_STRING_MAX_LEN ) return ERROR_INVALID_REQUEST ; osStrcpy ( connection -> request. queryString, s + 1 ) ; } else { error = httpDecodePercentEncodedString ( token, connection -> request. uri, HTTP_SERVER_URI_MAX_LEN ) ; if ( error",0
397,<S2SV_ModStart> return - E_NOTHANDLED ; if ( ninst == 0 ) return - E_INVALID,1
398,"<S2SV_ModStart> goto trunc ; if ( lshp -> ls_type == LS_TYPE_UNSPEC ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_router ), lshp -> ls_seq, lshp -> ls_age ) ) ; } else { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_seq ), lshp -> ls_age ) ) ) ; }",0
399,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
400,<S2SV_ModStart> ; if ( pbody -> ds_present && pbody -> cf_present ) break ; if ( <S2SV_ModStart> pbody -> tim_present && pbody -> cf_present ) break ; if ( pbody -> cf_length < 1 ) return 0 ; if ( pbody -> tim_length < 1 ) return 0 ; if ( pbody -> cf_length < 1 ) return 0 ; if ( pbody -> cf_length < 1 ) return 0 ; if ( pbody -> cf_length < 1 ) return 0 ; if ( pbody -> tim_length = 1 ; if ( pbody -> cf_length < 1 ) return 0 ; if ( pbody -> cf_length < 1 ) return 0 ; if ( pbody -> cf_length < 1 ) return 0 ; if ( pbody -> cf_length < 1 ) return 0 ; if ( pbody -> cf_length < 1 ) return 0 ; if ( pbody -> cf_length < 1 ) return 0 ; if ( pbody -> cf_length < 1 ) return 0 ; if ( pbody -> cf_length < 1 ) return 0 ; if ( pbody -> cf_length < 1 ) return 0 ; if ( pbody -> cf_length,0
401,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { if (! ret ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf -> flags <S2SV_ModStart> -> flags &= ~ PIPE_BUF_FLAG_GIFT ; opipe -> nrbufs ++ ; * obuf = * ibuf ; obuf -> len = len ; ret += obuf -> len ; } while ( len ) { if (! ret ) ret = - EFAULT ; break ; } if ( ret ) break ; if ( ret ) break ; if ( flags & SPLICE_F_NONBLOCK ) { if ( ret ) break ; ret = - EAGAIN ; break ; } <S2SV_ModEnd> ret += obuf",0
402,<S2SV_ModStart> ( ) ; if (! tbuf ) { return NULL ; },1
403,"<S2SV_ModStart> long ret, err2 <S2SV_ModEnd> ; if ( <S2SV_ModStart>, options, & err2 <S2SV_ModEnd> ) ; if <S2SV_ModStart> = 0 ; err2 |= __put_user ( r. ru_utime. tv_sec, & ur -> ru_utime. tv_sec ) ; err |= __put_user ( r. ru_utime. tv_usec, & ur -> ru_utime. tv_usec ) ; err |= __put_user ( r. ru_stime. tv_sec, & ur -> ru_stime. tv_sec ) ; err |= __put_user ( r. ru_maxrss, & ur -> ru_maxrss ) ; err |= __put_user ( r. ru_ixrss, & ur -> ru_ixrss ) ; err |= __put_user ( r. ru_idrss, & ur -> ru_idrss ) ; err |= __put_user ( r. ru_isrss, & ur -> ru_isrss ) ; err |= __put_user ( r. ru_nswap, & ur -> ru_nswap ) ; err |= __put_user ( r. ru_inblock, & ur",0
404,"<S2SV_ModStart> NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys/net"", ""%r/proc/net"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys"", ""%r/proc/sys"", ""%r/proc/sys"", ""%r/proc/sys"", ""%r/proc/sys"", ""%r/proc/net"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sysrq-trigger"", ""%r/proc/sysrq-trigger"", ""%r/proc/sysrq-trigger"", NULL, MS_REMOUNT | MS_BIND | MS_RDONLY, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_RW, ""proc"", ""%r/proc"", ""proc""",0
405,"<S2SV_ModStart> LEMPTY )? "" <S2SV_blank> with <S2SV_blank> policy="" : """", ( policy!= LEMPTY )? bitnamesof ( sa_policy_bit_names, policy ) : """" ) ; } else if ( addrinsubnet ( & md -> sender, & c -> spd. that. client ) && ( c == NULL ||! subnetinsubnet ( & c -> spd. that. client, & d -> spd. that. client ) ) ) { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"" "" <S2SV_blank> but <S2SV_blank> no <S2SV_blank> connection <S2SV_blank> has <S2SV_blank> been <S2SV_blank> authorized%s%s"", ip_str ( & md -> iface -> ip_addr ), ntohs ( portof ( & md -> iface -> ip_addr ) ), ( policy!= LEMPTY )? "" <S2SV_blank> with <S2SV_blank> policy="" : """", ( policy!= LEMPTY )? "" <S2SV_blank> with <S2SV_blank> policy="" : """" ), ( policy!= LEMPTY )? bitnamesof ( sa_policy_bit_names, policy ) : """" ) ; } else { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank>",0
406,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nsc_encode ( NSC_CONTEXT <S2SV_ModStart> rowstride ) { if (! context ||! bmpdata || ( rowstride == 0 ) ) return FALSE ; if (! <S2SV_ModStart>, rowstride ) ) return FALSE <S2SV_ModStart> ChromaSubsamplingLevel ) { if (! <S2SV_ModStart> ( context ) ) return FALSE ; } return TRUE ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
407,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
408,<S2SV_ModStart> stringset == ETH_SS_STATS || stringset == ETH_SS_PRIV_FLAGS,1
409,<S2SV_ModStart> return ( ( ( <S2SV_ModStart> ) / 8 ) * GetPSDPacketSize ( image ),1
410,"<S2SV_ModStart> { p_dev -> fd = open_as_other ( dev_path, O_RDWR | O_CLOEXEC | O_NOFOLLOW, p_dev -> attr_mask | O_CLOEXEC ) ; if ( p_dev -> fd == - 1 ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%d"", __FUNCTION__, p_dev -> err ) ; break ; } p_dev -> fd = open ( dev_path, O_RDWR | O_CLOEXEC | O_CLOEXEC | O_CLOEXEC, p_dev -> attr_mask | p_dev -> sub_class ) ; if ( p_dev -> fd == - 1 ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%d"", __FUNCTION__, p_dev -> dev_status ) ; break ; } <S2SV_ModStart> fd = open_as_other ( dev_path, p_dev -> fd, p_dev -> attr_mask, p_dev -> sub_class, p_dev -> app_id ) ;",0
411,<S2SV_ModStart> bMasterInterface0 ) ; if (! pcu -> ctrl_intf ) return - EINVAL ; <S2SV_ModStart> bSlaveInterface0 ) ; if (! pcu -> data_intf ) return - EINVAL ;,1
412,<S2SV_ModStart> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
413,"<S2SV_ModStart> pirlvl ) { if ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 || pirlvl -> prcheightexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 ) { return - 1 ; } <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> ) % ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << rpx ) <S2SV_ModStart> ) % ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << rpy )",1
414,<S2SV_ModStart> target_enc ) { return ONIGERR_NOT_SUPPORTED_ENCODING_COMBINATION <S2SV_ModEnd> ; } else,1
415,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> InsertRow ( Image <S2SV_ModStart> image, ssize_t columns, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> exception ) { int bit ; Quantum index <S2SV_ModEnd> ; register Quantum <S2SV_ModStart> register Quantum * q <S2SV_ModEnd> ; switch ( <S2SV_ModStart> 1 : { q = QueueAuthenticPixels ( image, 0, y, image -> columns, 1, exception ) ; if ( q == ( Quantum * ) NULL ) break ; for ( x = 0 ; x < ( ( ssize_t ) ( image -> columns - 7 ) ; x += 8 ) { index = ( Quantum ) ( ( ( * p ) & ( 0x80 >> bit ) )? 0x01 : 0x00 ) ; SetPixelIndex ( image, index, q ) ; } p ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( image -> columns % 8 ) ; bit ++ ) { index = ( Quantum ) ( ( ( ( * p ) & ( 0x80 >> bit ) )? 0x01 : 0x00 ) ; SetPixelIndex ( image, index, q",0
416,"<S2SV_ModStart> u_char * tptr, const u_int length <S2SV_ModStart> network_addr_type ; u_int <S2SV_ModEnd> hexdump = FALSE <S2SV_ModStart> = FALSE ; if ( length < 1 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Network <S2SV_blank> Address <S2SV_blank> Type <S2SV_blank> (unknown)"" ) ) ; return hexdump ; } <S2SV_ModStart> case AFNUM_INET : if ( length!= 1 + 16 ) { ND_PRINT ( ( ndo, ""(invalid <S2SV_blank> IPv4 <S2SV_blank> address <S2SV_blank> length <S2SV_blank> %u)"", length - 1 ) ) ; hexdump = TRUE ; break ; } <S2SV_ModStart> case AFNUM_INET6 : if ( length!= 1 + 16 ) { ND_PRINT ( ( ndo, ""(invalid <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> length <S2SV_blank> %u)"", length - 1 ) ) ; hexdump = TRUE ; break ; }",0
417,"<S2SV_ModStart> ; u64 msr_data, rcx <S2SV_ModStart> = X86EMUL_MODE_PROT32 ; rcx = reg_read ( ctxt, VCPU_REGS_RCX ) ; <S2SV_ModStart> = X86EMUL_MODE_PROT64 ; if ( ( rcx & 3 )!= 0x0 ) return emulate_gp ( ctxt, 0 ) ; <S2SV_ModStart> = 1 ; rcx = reg_read ( ctxt, VCPU_REGS_RCX ) ; <S2SV_ModStart> -> _eip = rcx <S2SV_ModEnd> ; * reg_write <S2SV_ModStart> VCPU_REGS_RSP ) = rcx <S2SV_ModEnd> ; return X86EMUL_CONTINUE",0
418,<S2SV_ModStart> dev ) ; ssize_t len ; device_lock ( dev ) ; len = <S2SV_ModEnd> sprintf ( buf <S2SV_ModStart> driver_override ) ; device_unlock ( dev ) ; return len ;,1
419,"<S2SV_ModStart> BIO * tmpout ; tmpout = cms_get_text_bio ( out, flags ) ; if (! tmpout ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, ERR_R_MALLOC_FAILURE ) ; goto err ; } for ( ; ; ) { i = BIO_read ( in, buf, sizeof ( buf ) ) ; if ( i <= 0 ) { if ( BIO_method_type ( in ) == BIO_TYPE_CIPHER ) { if (! BIO_get_cipher_status ( in ) ) goto err ; } if ( i < 0 ) goto err ; break ; } if ( tmpout && ( BIO_write ( tmpout, buf, i )!= i ) ) goto err ; } <S2SV_ModEnd> if ( flags <S2SV_ModStart> CMS_TEXT ) { <S2SV_ModEnd> if (!",1
420,<S2SV_ModStart> = KRB5_PREAUTH_FAILED ; if ( retval == 0 ) rs. enc_tkt_reply -> flags |= TKT_FLG_PRE_AUTH ;,1
421,"<S2SV_ModStart> costs, vpx_tree <S2SV_ModEnd> * tree, <S2SV_ModStart> c ) { vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> i / 2 ] ; vpx_tree_index ii = tree [ i + b <S2SV_ModStart> ] ; if ( ii <= 0 ) costs [ - ii ] = cc ; else costs [ - ii ] = cc ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
422,"<S2SV_ModStart> = ""/tmp"" ; # ifdef HAVE_MKDTEMP tmp_dir = mkdtemp ( ) ; if ( tmp_dir == NULL ) tmp_dir = rc_dir ; # endif",0
423,"<S2SV_ModStart> = 0 ; size_t pathlen = 0 ; <S2SV_ModStart> case AF_UNIX : pathlen = sizeof ( <S2SV_ModEnd> ( ( struct <S2SV_ModStart> ) -> sun_path ) ; if ( MAXPATHLEN <= pathlen ) { pathlen = MAXPATHLEN - 1 ; } strncpy ( addr_text, ( ( struct sockaddr_un * ) sock_addr ) -> sun_path, pathlen ) ; addr_text [ pathlen <S2SV_ModEnd> ] = '\\0'",1
424,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
425,"<S2SV_ModStart> & 0xffff ; if ( fmt == SEQ_EXTENDED ) { if (! seq_playing ) seq_startplay ( ) ; return count - c ; } err = synth_devs [ dev ] -> load_patch ( dev, fmt, buf, p + 4, c, 0 ) ; if ( err < 0 ) return err ; if ( err < count ) return err ; return count - c ; } if ( ev_code >= 128 ) { if ( seq_mode == SEQ_2 ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> 4 <S2SV_blank> byte <S2SV_blank> event <S2SV_blank> in <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> mode\\n"" ) ; return - EINVAL ; } ev_size = 8 ; if ( c < ev_size ) { if (! seq_playing ) seq_startplay ( ) ; return count - c ; } if ( copy_from_user ( ( char * ) & event_rec [ 4 ], & ( buf ) [ p + 4 ], 4 ) ) return - EINVAL ; }",0
426,"<S2SV_ModStart> ) { struct hugepage_subpool * spool = subpool_vma ( vma ) ; struct <S2SV_ModStart> page * page <S2SV_ModEnd> ; long chg <S2SV_ModStart> ) if ( hugepage_subpool_get_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> page ) { hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> unsigned long ) spool <S2SV_ModEnd> ) ; vma_commit_reservation",1
427,<S2SV_ModStart> filegen_string ) ; if ( NULL == filegen ) continue ; <S2SV_ModStart> filegen_file ) ; if ( NULL == filegen ) continue ; <S2SV_ModStart> filegen_file ) ; if ( NULL == filegen ) continue ;,0
428,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; timer_set_state",1
429,"<S2SV_ModStart> fadst16 ( const tran_low_t * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> 15 ] ; tran_high_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x2 = input <S2SV_ModStart> 13 ] ; tran_high_t <S2SV_ModEnd> x3 = input <S2SV_ModStart> 2 ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 11 ] ; tran_high_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 4 ] ; tran_high_t <S2SV_ModEnd> x6 = input <S2SV_ModStart> 7 ] ; tran_high_t <S2SV_ModEnd> x8 = input <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 10 ] ; tran_high_t <S2SV_ModEnd> x11 = input <S2SV_ModStart> 12 ] ; tran_high_t <S2SV_ModEnd> x14 = input <S2SV_ModStart> 1 ] ; tran_high_t <S2SV_ModEnd> x15 = input <S2SV_ModStart> 2 ] ; tran_high_t",0
430,<S2SV_ModStart> ; # if HAVE_EDSP flags |= HAS_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON <S2SV_ModStart> ; # endif <S2SV_ModEnd> return flags &,0
431,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
432,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF <S2SV_ModStart> wc ) ; return,1
433,"<S2SV_ModStart> tot_len ) ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
434,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> AVINDEX_KEYFRAME ) ; },1
435,"<S2SV_ModStart> == datalen && ( pc + asn1_op_lengths [ op ] > datalen ) ) { pc -= asn1_op_lengths [ op ] ; flags &= ~ FLAG_LAST_MATCHED ; } else if ( ( op & ASN1_OP_MATCH__COND && flags & FLAG_MATCHED ) || ( dp + asn1_op_lengths [ op ] > datalen ) ) { pc += asn1_op_lengths [ op ] ; } else if ( ( dp + asn1_op_lengths [ op ] > datalen ) ) { pr_debug ( ""next_op: <S2SV_blank> pc=\\e[32m%zu\\e[m/%zu <S2SV_blank> dp=\\e[33m%zu\\e[m/%zu <S2SV_blank> C=%d <S2SV_blank> J=%d\\n"", pc, datalen, csp, jsp ) ; goto machine_overrun_error ; }",0
436,"<S2SV_ModStart>, * controller, * next = NULL <S2SV_ModStart> out ; } <S2SV_ModEnd> if (! <S2SV_ModStart>, cgroup, & next ) ) { if (! fc_may_access ( fc, controller, cgdir, NULL, O_WRONLY ) ) { ret = - EACCES ; goto out ; } if (! caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if (! <S2SV_ModStart> cgdir ) ; free ( next ) ;",0
437,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flag & CL_UNPRIVILEGED <S2SV_ModStart> & CL_UNPRIVILEGED ) { mnt -> mnt. mnt_flags |= MNT_LOCK_ATIME ; if ( mnt -> mnt. mnt_flags & MNT_READONLY ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; else mnt -> mnt. mnt_flags |= MNT_LOCK_ATIME ; } if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_NODEV ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_NODEV ; if ( mnt -> mnt. mnt_flags & MNT_NOSUID ) mnt -> mnt. mnt_flags |= MNT_LOCK_NOSUID ; if ( mnt -> mnt. mnt_flags & MNT_NOEXEC ) mnt -> mnt. mnt_flags |= MNT_LOCK_NOEXEC ; if ( mnt -> mnt. mnt_flags & MNT_NOEXEC ) mnt,0
438,<S2SV_ModStart> rds_loop_transport ; } <S2SV_ModEnd> } conn ->,1
439,<S2SV_ModStart> * rsize >= 112 <S2SV_ModEnd> && rdesc [,1
440,"<S2SV_ModStart> if ( bodyLength < sizeof ( EAPOL_RSN_KEY ) ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Invalid <S2SV_blank> EAPOL-Key <S2SV_blank> length"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_INVALID_DATA ; } if ( <S2SV_ModStart> if ( bodyLength < sizeof ( EAPOL_RSN_KEY ) ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Invalid <S2SV_blank> EAPOL-Key <S2SV_blank> length"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_INVALID_DATA ; } if ( bodyLength < sizeof ( EAPOL_RSN_KEY ) ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Invalid <S2SV_blank> EAPOL-Key <S2SV_blank> length"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_INVALID_DATA ; }",0
441,"<S2SV_ModStart> & I8042_STR_AUXERR ) { dbg ( ""AUX <S2SV_blank> error, <S2SV_blank> status <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> data <S2SV_blank> is <S2SV_blank> %02x\\n"", str, data ) ; serio = NULL ; break ; } <S2SV_ModEnd> if ( str <S2SV_ModStart> & I8042_STR_AUXDATA ) { dbg ( ""AUX <S2SV_blank> data <S2SV_blank> is <S2SV_blank> %02x\\n"", str, data ) ; serio = NULL ; break ; } else if ( str & I8042_STR_AUXERR ) { dbg ( ""AUX <S2SV_blank> error, <S2SV_blank> status <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> data <S2SV_blank> is <S2SV_blank> %02x\\n"", str, data ) ; serio = NULL ; break ; }",0
442,"<S2SV_ModStart> ( er ) { ND_PRINT ( ( ndo, "" <S2SV_blank> er <S2SV_blank> %d"", er ) ) ; if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } } else { if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } } else { if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } } else { if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr",0
443,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> udf_translate_to_linux ( uint8_t <S2SV_ModStart> * udfName, int udfLen, <S2SV_ModEnd> uint8_t * fidName <S2SV_ModStart> * fidName, int fidNameLen, int newNameLen <S2SV_ModStart> ( newIndex < newNameLen <S2SV_ModEnd> ) newName [ <S2SV_ModStart> } maxFilenameLen = newNameLen - EXT_SIZE - localExtIndex ; if ( newIndex > newNameLen - EXT_SIZE ) newIndex = maxFilenameLen - EXT_SIZE ; <S2SV_ModStart> } maxFilenameLen = newNameLen - EXT_SIZE - localExtIndex ; if ( newIndex > maxFilenameLen ) newIndex = maxFilenameLen ; newName [ newIndex ] = curr ; else needsCRC = 1 ; } } if ( needsCRC ) { uint8_t ext [ EXT_SIZE ] ; int localExtIndex = 0 ; for ( index = 0 ; index < EXT_SIZE && extIndex + index + 1 < udfLen ; index ++ ) { curr = udfName [ extIndex + index + 1 ] ; if ( curr == EXT_MARK && ( index + 1 ) < udfLen ) index ++ ; } if ( curr == EXT_MARK && ( index + 1 ) < EXT",0
444,"<S2SV_ModStart> void count_segs_sb ( const VP9_COMMON * cm, TileDataEnc * tile_data, <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd>, int * <S2SV_ModStart> bsize ) { <S2SV_ModEnd> const int bw <S2SV_ModStart> ] ; bh = num_8x8_blocks_wide_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; if ( bw < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, bs, mi_row, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, bs, hbs, mi_row, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor",0
445,<S2SV_ModStart> flags & CLIENT_CLOSE_AFTER_REPLY ||! ( c -> flags & CLIENT_ESTABLISHED ),0
446,"<S2SV_ModStart> = 0 ; err = 0 ; <S2SV_ModStart> get_blocks_flags = EXT4_GET_BLOCKS_RESERVE ; if ( mpd -> b_state & ( 1 << BH_Mapped ) ) { if ( mpd -> b_state & ( 1 << BH_Unwritten ) ) { mpd -> retval = err ; goto out_bad_handle ; } mpd -> retval = err ; goto out_bad_handle ; } err = ext4_get_blocks ( handle, mpd -> inode, next, max_blocks, & new, get_blocks_flags ) ; if ( err ) { ext4_msg ( mpd -> inode -> i_sb, KERN_CRIT, ""delayed <S2SV_blank> block <S2SV_blank> allocation <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> at <S2SV_blank> "" ""logical <S2SV_blank> offset <S2SV_blank> %llu <S2SV_blank> with <S2SV_blank> max <S2SV_blank> blocks <S2SV_blank> %zd <S2SV_blank> "" ""error <S2SV_blank> %d\\n"", mpd -> inode -> i_ino, ( unsigned long long ) next, mpd -> b_size >> mpd -> inode -> i_blkbits, err ) ; mpd -> retval = err ; goto out_bad_handle",0
447,"<S2SV_ModStart> * s ; const unsigned char * p = sigbuf ; unsigned char * der = NULL ; int derlen = - 1 ; <S2SV_ModStart> s, & p <S2SV_ModEnd>, siglen ) <S2SV_ModStart> == NULL ) goto err ; derlen = i2d_DSA_SIG ( s, & der ) ; if ( derlen!= siglen || memcmp ( sigbuf, der, derlen ) ) <S2SV_ModStart> ; err : if ( derlen > 0 ) { OPENSSL_cleanse ( der, derlen ) ; OPENSSL_free ( der ) ; }",1
448,"<S2SV_ModStart> NULL ) ; if (! _gdImageGifCtx <S2SV_ModEnd> ( im, <S2SV_ModStart>, out ) ) { <S2SV_ModEnd> rv = gdDPExtractData <S2SV_ModStart> size ) ; } else { rv = NULL ; }",1
449,<S2SV_ModStart> ) ; } if ( bprm -> interp!= bprm -> filename ) kfree ( bprm -> interp ) ;,1
450,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> struct oe_addrinfo * <S2SV_ModStart> ( p = oe_calloc ( 1, <S2SV_ModEnd> sizeof ( struct <S2SV_ModStart> struct oe_addrinfo ) ) ) ) { retval = OE_EAI_FAIL ; if ( oe_syscall_getaddrinfo_read_ocall ( & retval, handle, & p -> ai_flags, & p -> ai_family, & p -> ai_socktype, & p -> ai_protocol, p -> ai_addrlen, NULL, & canonnamelen, & canonnamelen, NULL )!= OE_OK ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; goto done ; } if ( p -> ai_flags & OE_AAI_REGISTERED ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; goto done ; } if ( p -> ai_flags & OE_AAI_REGISTERED ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( O",0
451,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
452,"<S2SV_ModStart> ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, ""Invalid <S2SV_blank> image <S2SV_blank> dimensions"" ) ; goto done ; }",1
453,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
454,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( pegasus_t <S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmemdup ( data, size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
455,"<S2SV_ModStart> asdl_seq * body, asdl_seq * type_ignores <S2SV_ModStart> = body ; p -> v. Module. type_ignores = type_ignores ;",1
456,<S2SV_ModStart> destroy_list ) ; <S2SV_ModEnd> } } <S2SV_null>,1
457,"<S2SV_ModStart> * src, <S2SV_ModEnd> unsigned int flags <S2SV_ModStart> >> 4 ; # else ( void ) flags ; # <S2SV_ModStart> >> 4 ; # endif if ( ctx -> sz + 1 + MAX_PRE_FRAMES > ctx -> max_sz ) return 1 ; ctx -> sz ++ ; buf = pop ( ctx, & ctx -> write_idx ) ; # if USE_PARTIAL_COPY if ( ctx -> max_sz == 1 && active_map &&! flags ) { for ( row = 0 ; row < mb_rows ; ++ row ) { for ( col = 0 ; col < mb_cols ; ++ col ) { if ( active_map [ active_end ] ) break ; active_map += mb_cols ; } } else { vpx_copy_and_extend_frame ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) << 4 ) ; } } else { vpx_copy_and_extend_frame ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) << 4 ) ; } # else vpx_copy_and_extend_frame ( src, & buf -> img",0
458,<S2SV_ModStart> ) ; } fuse_conn_put ( & cc -> fc ) ;,1
459,"<S2SV_ModStart> ( code ) { * status = ""DECODE_PA_S4U_X509_USER"" ; return code ; } <S2SV_ModEnd> code = verify_s4u_x509_user_checksum",1
460,"<S2SV_ModStart> int scsi_disk_emulate_command ( SCSIRequest * req, uint8_t * outbuf ) { SCSIDiskState * s = DO_UPCAST ( SCSIDiskState, qdev, req -> dev ) ; <S2SV_ModStart> goto illegal_request ; buflen = scsi_disk_emulate_read_geometry_10 ( r, outbuf ) ; if ( buflen < 0 ) goto illegal_request ; break ; case READ_SENSE : buflen = scsi_disk_emulate_read_toc ( r, outbuf ) ; if ( buflen < 0 ) goto illegal_request ; break ; case READ_SENSE_10 : buflen = scsi_disk_emulate_read_toc ( r, outbuf ) ; if ( buflen < 0 ) goto illegal_request ; break ;",0
461,<S2SV_ModStart> cur_pic. field_picture <S2SV_ModEnd> ) return 0,1
462,"<S2SV_ModStart> off ) { struct scatterlist * sgp = & rm -> data. op_sg [ sg ] ; int ret = sizeof ( struct rds_header ) + be32_to_cpu ( rm -> m_inc. i_hdr. h_len ) ; <S2SV_ModStart> 0 ) ; ret = min_t ( int, ret, sgp -> length - conn -> c_xmit_data_off ) ; goto out <S2SV_ModEnd> ; } BUG_ON <S2SV_ModStart> m_inc ) ; out : return ret <S2SV_ModEnd> ; } <S2SV_null>",1
463,<S2SV_ModStart> buf ) ) { return 0 ; } <S2SV_ModEnd> ext_block = (,1
464,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = key_permission,1
465,<S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> + 4 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen ] <S2SV_ModEnd> ) ; N,0
466,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
467,"<S2SV_ModStart> = hmi_data ; uint32_t data_siz ; <S2SV_ModStart> } * note <S2SV_ModEnd> ; if ( <S2SV_ModStart> += 4 ; data_siz = hmi_tmp ; <S2SV_ModStart> += 4 ; if ( data_siz < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> in <S2SV_blank> HMI <S2SV_blank> file"", 0 ) ; return NULL ; } <S2SV_ModStart> += 4 ; if ( hmi_tmp > data_siz ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> in <S2SV_blank> HMI <S2SV_blank> file"", 0 ) ; return NULL ; } <S2SV_ModStart> += 4 ; if ( data_siz < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> in <S2SV_blank> HMI <S2SV_blank> file"", 0 ) ; return NULL ; } <S2SV_ModStart> += 4 ; if ( hmi_tmp > data_siz ) { _WM_GLOBAL_",0
468,<S2SV_ModStart> -> id ; haddr -> hci_channel = 0 ;,1
469,<S2SV_ModStart> -> i_iget5_offset ; fh16 [ 3 ] = 0 ;,1
470,"<S2SV_ModStart> status = ""CLIENT <S2SV_blank> KEY <S2SV_blank> EXPIRED"" ; if ( server. pw_expiration && server. pw_expiration < kdc_time ) { * status = ""CLIENT <S2SV_blank> KEY <S2SV_blank> EXPIRED"" ; if ( vague_errors ) return ( KRB_ERR_GENERIC ) ; else return ( KDC_ERR_KEY_EXP ) ; } if ( isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) ) { * status = ""REQUIRED <S2SV_blank> PWCHANGE"" ; return ( KDC_ERR_KEY_EXP ) ; } if ( isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) && isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) ) { * status = ""REQUIRED <S2SV_blank> PWCHANGE"" ; return ( KDC_ERR_KEY_EXP ) ; } if ( isflagset ( client. attributes",0
471,"<S2SV_ModStart> break ; } <S2SV_ModEnd> dst_reg -> smin_value <S2SV_ModStart> if (! src_known ||! dst_known ) { verbose ( env, ""R%d <S2SV_blank> tried <S2SV_blank> to <S2SV_blank> add <S2SV_blank> from <S2SV_blank> different <S2SV_blank> pointers <S2SV_blank> or <S2SV_blank> scalars\\n"", dst_reg -> smin_value ) ; fprintf ( stderr, ""R%d <S2SV_blank> tried <S2SV_blank> to <S2SV_blank> add <S2SV_blank> from <S2SV_blank> different <S2SV_blank> pointers <S2SV_blank> or <S2SV_blank> scalars\\n"", dst_reg -> smin_value ) ; } else { warn ( env, ""R%d <S2SV_blank> tried <S2SV_blank> to <S2SV_blank> add <S2SV_blank> from <S2SV_blank> different <S2SV_blank> pointers <S2SV_blank> or <S2SV_blank> scalars\\n"", dst_reg -> smin_value ) ; fprintf ( stderr, ""R%d <S2SV_blank> tried <S2SV_blank> to <S2SV_blank> add <S2SV_blank> from <S2SV_blank> different <S2SV_blank> pointers <S2SV_blank> or <S2SV_blank> scalars\\n"", dst_reg -> smin_value ) ; fprintf ( stderr, ""R%d <S2SV_blank> tried <S2SV_blank> to <S2SV_blank> add <S2SV_blank> from <S2SV_blank> different <S2SV_blank> pointers <S2SV_blank> or <S2SV_blank> scalars\\n"", dst_reg -> smin_value ) ; fprintf ( stderr, ""R%d <S2SV_blank> tried <S2SV_blank> to <S2SV_blank> %",0
472,"<S2SV_ModStart> ( method == LPF_PICK_FROM_Q || method == LPF_PICK_FROM_SUBIMAGE <S2SV_ModStart> cpi ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> common. bit_depth > 1 ) { const int q = vp9_ac_quant_high ( cm -> base_qindex, 0 ) ; int filt_guess ; filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; } else { const int q = vp9_ac_quant_high ( cm -> base_qindex, 0 ) ; int filt_guess ; filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( cpi -> common. bit_depth > 1 ) { filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; } else { search_filter_level ( sd, cpi, method == LPF_PICK_FROM_SUBIMAGE ) ; } } # else { search_filter_level ( sd, cpi, method",0
473,<S2SV_ModStart> BT_STATUS_SUCCESS ) { <S2SV_ModEnd> BTIF_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_DISABLED <S2SV_ModStart> BT_STATUS_SUCCESS ) { <S2SV_ModEnd> BTIF_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_DISABLED <S2SV_ModStart> BT_STATUS_SUCCESS ) { <S2SV_ModEnd> BTIF_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_DISABLED,0
474,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
475,"<S2SV_ModStart> = getnum ( <S2SV_ModEnd> fmt, MAXALIGN",0
476,<S2SV_ModStart> void usage_exit ( void,1
477,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
478,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
479,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
480,"<S2SV_ModStart> vpx_codec_err_t res ; # if CONFIG_VP9_HIGHBITDEPTH if (! data || data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_INVALID_PARAM ; else # endif <S2SV_ModStart>. decode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, data, <S2SV_ModStart>, data, data_sz, user_priv, deadline ) ; if ( res!= VPX_CODEC_OK ) { res = VPX_CODEC_ERROR ; } # if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> flags & VPX_CODEC_HIGHBITDEPTH ) { if ( ctx -> flags & VPX_CODEC_HIGHBITDEPTH ) res = ctx -> priv -> decode_high ( ctx -> priv -> alg_priv, data, data_sz, user_priv, deadline ) ; else res = ctx -> iface -> dec. decode ( NULL, data, data_sz, user_priv, deadline ) ; } # if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> flags & VPX_CODEC_HIGHBITDEPTH ) { if ( ctx -> flags & V",0
481,<S2SV_ModStart> ; if ( * value == 0 ||,1
482,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
483,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
484,"<S2SV_ModStart> return ; } if ( ND_TTEST ( * optr ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> indicator <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size:"", ND_TTEST ( * optr ) ) ) ; break ; } if ( ND_TTEST ( * optr ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> indicator <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size:"", ND_TTEST ( * optr ) ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"", * pptr ++ ) ) ; ND_TCHECK ( * optr ++ ) ; if ( ND_TTEST ( * optr ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> indicator <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size:"", ND_TTEST ( * optr ) ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"", * pptr ++ ) ) ;",0
485,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> ) ; } sendClean ( outputbuffer ) ;",1
486,<S2SV_ModStart> } else { return false ; } } else if ( r -> CRn == 0 && r -> CRm == 9 ) { if ( pmu_access_event_counter_el0_disabled ( vcpu ) ) return false ; idx = ARMV8_PMU_CYCLE_IDX ; <S2SV_ModEnd> } else if <S2SV_ModStart> } else { return false <S2SV_ModEnd> ; } if,1
487,<S2SV_ModStart> case IS_STRING : { zval dval ; dval = * * zval_affine_elem ; zval_copy_ctor ( & dval ) ; convert_to_double ( & dval <S2SV_ModEnd> ) ; affine <S2SV_ModStart> i ] = Z_DVAL ( dval ) ; } <S2SV_ModEnd> break ; default <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; rect <S2SV_ModStart>. x = Z_LVAL ( lval ) ; } else { rect. x = <S2SV_ModStart> ) ; } } <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; rect <S2SV_ModStart>. y = Z_LVAL ( lval ) ; } else { rect. y = <S2SV_ModStart> ) ; } } <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval,1
488,<S2SV_ModStart> self ) { if ( self -> dict ) Py_CLEAR ( self -> dict ) ;,0
489,<S2SV_ModStart> SQL_DROP ) ; <S2SV_ModEnd> return 0 ;,1
490,"<S2SV_ModStart> ; r = __copy_from_user <S2SV_ModEnd> ( data,",1
491,"<S2SV_ModStart>, * q <S2SV_ModEnd> ; Clp_Parser * <S2SV_ModStart> ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\nThis <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\nThere <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\nparticular <S2SV_blank> purpose.\\n"" <S2SV_ModEnd> ) ; exit <S2SV_ModStart> ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\nThis <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\nThere <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\nparticular",0
492,<S2SV_ModStart> = 0 ; info -> port = NULL ;,1
493,<S2SV_ModStart> -> ctx. <S2SV_ModEnd> pmu = pmu,1
494,"<S2SV_ModStart> iovec * iovec, struct iov_iter * iter ) { if ( len > MAX_RW_COUNT ) len = MAX_RW_COUNT ; <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> = 1 ; iov_iter_init ( iter, rw, iovec, * nr_segs, len ) ;",1
495,<S2SV_ModStart> ext4_group_t flex_group ; unsigned <S2SV_ModStart> -> s_log_groups_per_flex ; if ( sbi -> s_log_groups_per_flex < 1 || sbi -> s_log_groups_per_flex > 31 ) { sbi -> s_log_groups_per_flex = 0 ; return 1 ; } <S2SV_ModStart> -> s_log_groups_per_flex ; <S2SV_ModEnd> flex_group_count = (,1
496,<S2SV_ModStart> ( unlikely ( chunk -> pdiscard ) ) return 0 ; if ( unlikely (,1
497,"<S2SV_ModStart> ( ) ; if ( a ) { <S2SV_ModStart> ] ) ; } <S2SV_ModEnd> ++ i ) <S2SV_ModStart> ; if ( a ) { if ( p ) p -> child = n ; } else suffix_object ( p, n ) ; p = n ; } <S2SV_ModEnd> return a ;",0
498,"<S2SV_ModStart> { if ( strchr ( parv [ 1 ],'<S2SV_blank>') ) { if ( strchr ( parv [ 1 ],'<S2SV_blank>') ) { if ( strchr ( parv [ 1 ],'<S2SV_blank>') ) { if ( strchr ( parv [ 1 ],'<S2SV_blank>') ) { if ( strchr ( parv [ 1 ],'<S2SV_blank>') ) { if ( strchr ( parv [ 1 ],'' ) ) { if ( strchr ( parv [ 1 ],'<S2SV_blank>') ) { if ( strchr ( parv [ 1 ],'<S2SV_blank>') ) { if ( strchr ( parv [ 1 ],'<S2SV_blank>') ) { if ( strchr ( parv [ 1 ],'<S2SV_blank>') ) { if ( strchr ( parv [ 1 ],'<S2SV_blank>') ) { if ( strchr ( parv [ 1 ],'<S2SV_blank>') ) { if ( strchr ( parv [ 1 ],'<S2SV_blank>') ) { if ( strchr ( parv [ 1 ],'<S2SV_blank>') ) { if ( strchr ( parv [ 1 ],'<S2SV_blank>')",0
499,<S2SV_ModStart> <= w - ( int ),1
500,<S2SV_ModStart> callback_args -> forward_matches ; assert ( match_offset + match_length <= callback_args -> data_size ),1
501,<S2SV_ModStart> options. disable_forwarding || ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 <S2SV_ModEnd> ) { c,0
502,"<S2SV_ModStart> { if ( length > SMKTREE_DECODE_MAX_RECURSION ) { av_log ( NULL, AV_LOG_ERROR, ""Maximum <S2SV_blank> tree <S2SV_blank> recursion <S2SV_blank> level <S2SV_blank> exceeded.\\n"" ) ; return AVERROR_INVALIDDATA ; } if (",1
503,<S2SV_ModStart> err ; } if ( m -> msg_name ),1
504,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } else { int res ; Py_ssize_t len ; Py_ssize_t i ; if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ;",0
505,<S2SV_ModStart> m ; int hstartrow <S2SV_ModEnd> ; if ( <S2SV_ModStart> 2 ) { hstartrow <S2SV_ModEnd> = ( numrows <S2SV_ModStart> = numrows - hstartrow <S2SV_ModEnd> ; n = <S2SV_ModStart> & a [ hstartrow <S2SV_ModEnd> * stride ],1
506,"<S2SV_ModStart> ""REPLY_ADD_STA <S2SV_blank> PASSED\\n"" ) ; ret = iwl_sta_ucode_activate ( priv, sta_id ) <S2SV_ModEnd> ; break ;",1
507,"<S2SV_ModStart> ; log_file = fopen_safe <S2SV_ModEnd> ( file_name,",1
508,"<S2SV_ModStart> ""a\\0x\\0x\\0b\\0"" ) ; assert_true_rule_blob ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /\\\\babc/ <S2SV_blank> wide <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""a\\0b\\0c\\0"" ) ; assert_true_rule_blob ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /\\\\babc/ <S2SV_blank> wide <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""\\0a\\0b\\0c\\0"" ) ; assert_true_rule_blob ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /\\\\babc/ <S2SV_blank> wide <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""\\ta\\0b\\0c\\0"" ) ; assert_true_rule_blob ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /\\\\babc/ <S2SV_blank> wide <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""x\\0a\\0b\\0c\\0"" ) ; assert_true_rule_blob ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /\\\\",0
509,"<S2SV_ModStart> & HB_LOCK ) spin_lock_irqsave ( & hashbin -> hb_spinlock, flags ) ; <S2SV_ModEnd> for ( i <S2SV_ModStart> ++ ) { while ( 1 ) { <S2SV_ModStart> ] ) ; if (! queue ) break ; <S2SV_ModEnd> if ( free_func <S2SV_ModStart> ( free_func ) { if ( hashbin -> hb_type & HB_LOCK ) spin_unlock_irqrestore ( & hashbin -> hb_spinlock, flags ) ; free_func ( queue ) ; if ( hashbin -> hb_type & HB_LOCK ) spin_lock_irqsave ( & hashbin -> hb_spinlock, flags ) ; } <S2SV_ModEnd> } } hashbin <S2SV_ModStart> & HB_LOCK ) <S2SV_ModEnd> spin_unlock_irqrestore ( & <S2SV_ModStart> flags ) ; <S2SV_ModEnd> kfree ( hashbin",1
510,<S2SV_ModStart> EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NODEV ) &&! ( mnt_flags & MNT_NODEV ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOSUID ) &&! ( mnt_flags & MNT_NOSUID ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) &&! ( mnt_flags & MNT_NOEXEC ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) &&! ( mnt_flags & MNT_NOEXEC ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) &&! ( mnt_flags & MNT_NOEXEC ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC,0
511,"<S2SV_ModStart> copied, err <S2SV_ModEnd> ; int vnet_hdr_len <S2SV_ModStart> out_free ; } copied = skb -> len ; if ( copied > len ) { copied = len ; err = sock_recv_ts_and_drops ( msg, skb, 0 <S2SV_ModEnd>, & sll",0
512,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
513,"<S2SV_ModStart> ( serial -> num_bulk_out <S2SV_ModEnd> < 2 ) <S2SV_ModStart> < 2 ) { dev_err ( & serial -> interface -> dev, ""missing <S2SV_blank> bulk <S2SV_blank> out <S2SV_blank> endpoints\\n"" ) ; return - ENODEV ; } <S2SV_ModEnd> port = serial",1
514,"<S2SV_ModStart> write_junk = 1, do_rf64 = 0 <S2SV_ModStart> riffhdr ; DS64Chunk ds64_chunk ; JunkChunk junkchunk <S2SV_ModStart> ds64_chunk ) { if ( write_junk ) { error_line ( ""can\'t <S2SV_blank> write <S2SV_blank> junk <S2SV_blank> chunk!"" ) ; return FALSE ; } } <S2SV_ModStart> ds64_chunk ) ; if ( do_rf64 ) { error_line ( ""can\'t <S2SV_blank> write <S2SV_blank> rf64 <S2SV_blank> chunk!"" ) ; return FALSE ; } if ( ds64_chunk. NumChannels!= num_channels ) { error_line ( ""can\'t <S2SV_blank> create <S2SV_blank> valid <S2SV_blank> RIFF <S2SV_blank> wav <S2SV_blank> header!"" ) ; return FALSE ; } if ( write_junk ) { error_line ( ""can\'t <S2SV_blank> write <S2SV_blank> junk <S2SV_blank> chunk!"" ) ; return FALSE ; } if ( do_rf64 ) { error_line ( ""can\'t <S2SV_blank> write <S2SV_blank> rf64 <S2SV_blank> chunk!"" ) ; return FALSE ; } if ( ds64_chunk. NumChannels!= num_channels ) { error_line ( ""can\'t <S2SV_blank> create <S2SV_blank> valid <S2SV_blank> RIFF <S2SV_blank> wav <S2SV_blank> header!"" ) ; return FALSE ; }",0
515,"<S2SV_ModStart> msg ) ; err = - EINVAL ; if ( msg_sys -> msg_name ) { <S2SV_ModStart> ) ; } else { err = verify_iovec ( msg_sys, iov, & addr, VERIFY_WRITE, msg_sys -> msg_name, uaddr_len ) ; if ( err < 0 ) goto out_freeiov ; } <S2SV_ModStart> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( msg_sys -> msg_flags & MSG_CMSG_COMPAT ) { if ( msg_sys -> msg_flags & MSG_CMSG_CLOEXEC ) msg_sys -> msg_flags |= MSG_CMSG_COMPAT ; } else if ( msg_sys -> msg_flags & MSG_CMSG_COMPAT ) { err = verify_iovec ( msg_sys, iov, & addr, VERIFY_READ ) ; } else { err = verify_iovec ( msg_sys, iov, & addr, VERIFY_READ ) ; } else { err = verify_iovec ( msg_sys, iov, & addr,",0
516,"<S2SV_ModStart> inode ) ; <S2SV_ModEnd> u64 bn, <S2SV_ModStart> unsigned end_of_metadata = ( height > 1 )? height - 1 : 0 <S2SV_ModEnd> ; int eob <S2SV_ModStart> - 1 ; if ( height == 1 ) { struct buffer_head * bh ; ptr = metapointer ( end_of_metadata, mp ) ; dblks = min ( maxlen, ptrs_per_blk - mp -> mp_list [ end_of_metadata ] ) ; if (! bh ) { struct buffer_head * bh ; bh = mp -> mp_bh [ end_of_metadata ] ; zero_bn = gfs2_extent_length ( bh -> b_data, bh -> b_size, ptr, maxlen, & eob ) ; BUG_ON ( dblks < 1 ) ; state = ALLOC_DATA ; } else if ( height > 1 ) { bh = mp -> mp_bh [ end_of_metadata ] ; ptr = metapointer ( end_of_metadata, mp ) ; dblks = min ( maxlen, ptrs_per_blk - mp -> mp_list [ end_of_metadata ] ) ; BUG_ON ( db",0
517,"<S2SV_ModStart> ( global -> codec -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, input -> <S2SV_ModStart> input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> next ) ; SHOW ( g_h ) ; SHOW ( g_w ) ; SHOW ( g_h ) ; SHOW ( g_lag_in_frames ) ; SHOW ( rc_dropframe_thresh ) ; SHOW ( rc_resize_allowed ) ; SHOW ( rc_resize_up_thresh ) ; SHOW ( rc_resize_down_thresh ) ; SHOW ( rc_end_usage ) ; SHOW ( rc_undershoot_pct ) ; SHOW ( rc_overshoot_pct ) ; SHOW ( rc_buf_pct ) ; SHOW ( rc_2pass_vbr_bias_pct ) ; SHOW ( rc_2pass_vbr_minsection_pct ) ; SHOW ( rc_2pass_vbr_maxsection",0
518,<S2SV_ModStart> return FALSE ; { BOOL rc ; <S2SV_ModStart> -> prof_nsc_rle_decompress_data ) rc = <S2SV_ModStart> -> prof_nsc_rle_decompress_data ) if (! rc ) return FALSE ; } { BOOL rc ; <S2SV_ModStart> -> prof_nsc_decode ) rc = <S2SV_ModStart> -> prof_nsc_decode ) if (! rc ) return FALSE ; },1
519,"<S2SV_ModStart> -> dict ) { if ( ( xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ) == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> dictionary <S2SV_blank> of <S2SV_blank> the <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } } else { if ( ( xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ) == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> dictionary <S2SV_blank> of <S2SV_blank> the <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } } else { if ( ( xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ) == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> dictionary <S2SV_blank> of <S2SV_blank> the <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank>",0
520,"<S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> } } } free ( fname ) ; } else if ( strcmp ( cfg. shell, ""/usr/bin/csh"" ) == 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ( ""/etc/skel/.cshrc"", fname, u, g, 0644 ) == 0 ) { copy_file_as_user <S2SV_ModEnd> (",0
521,"<S2SV_ModStart> * req, u32 * acl_len, bool raw <S2SV_ModStart> acl_len ) { __be32 * savep = req -> rq_rcv_buf. head <S2SV_ModEnd> ; int status <S2SV_ModStart> int status ; if ( ( status = decode_op_hdr ( xdr, OP_GETATTR ) )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & savep, & acl_len ) )!= 0 ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" <S2SV_ModEnd> "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen <S2SV_ModStart> ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" <S2SV_ModEnd> "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen, recvd ) ; * acl_len = attrlen ; } else status = - EOPNOTSUPP ; <S2SV_ModEnd> out : return",0
522,<S2SV_ModStart> fv -> b ) { if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 2 ) return ( false ) ; else SFClearAutoSave ( sf ) ; } } else if ( fv -> b. sf -> fv!= & fv -> b ) { } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 2 ) return ( false ) ; } else if ( fv -> b. nextsame!= NULL || fv -> b. sf -> fv!= & fv -> b ) { } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 2 ) return ( false ) ; else SFClearAutoSave ( sf ) ; },0
523,<S2SV_ModStart> % 4096 == 0 <S2SV_ModEnd> ) ; bzero,0
524,<S2SV_ModStart> = timespec_to_ns ( & <S2SV_ModStart> = timespec_to_ns ( & <S2SV_ModStart> = timespec_to_ns ( &,1
525,"<S2SV_ModStart> ; if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog <S2SV_ModStart> 0 ) ) <S2SV_ModEnd> js_pushnumber ( J",0
526,"<S2SV_ModStart> : if ( <S2SV_ModEnd> Field ( ( <S2SV_ModStart> 1 ) ) == 0 ) { Assert ( 0 ) ; caml_set_oo_id ( ( value ) dest ) ; } else { Assert ( 0 ) ; caml_set_oo_id ( ( value ) dest ) ; } sp -- ; break ; case OFreshOID : if ( Int_val ( Field ( ( value ) dest, 1 ) ) >= 0 ) { Assert ( 0 ) ; caml_set_oo_id ( ( value ) dest ) ; } else { v = Val_int ( code & 0x3F ) ; } sp -> op = OFreshOID ; sp -> dest ++ ; if ( -- ( sp -> arg ) == 0 ) { v = Atom ( tag ) ; } else { v = Val_int ( code & 0x3F ) ; } else { v = Val_int ( code & 0x3F ) ; } if ( size == 0 ) { v = Val_int ( code & 0x3F ) ; } else { v = Val_int ( code & 0x3F ) ; } if ( intern_obj_table!= NULL ) intern_obj_table [ obj_counter ++",0
527,"<S2SV_ModStart> multipart_media ; struct range_data * r = & clt -> clt_ranges ; struct range_data * r = & clt -> clt_ranges ; struct range * range <S2SV_ModEnd> ; size_t content_length <S2SV_ModStart> ; size_t content_length = 0 <S2SV_ModStart> nranges, ret <S2SV_ModEnd> ; char content_range <S2SV_ModStart> path ) ; nranges = strlen ( range_str ) ; if ( nranges == 0 ) { code = 416 ; ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> */%lld"", st -> st_size ) ; errstr = content_range ; goto abort ; } if ( ( nranges = parse_ranges ( clt, <S2SV_ModEnd> range_str, st <S2SV_ModStart> st -> st_size, & nranges ) ) == NULL ) { code = 416 ; ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> %lld-%lld/%lld"", range -> start, range -> end, st -> st_size ) ; if ( kv_add ( & resp -> http_headers, ""Content-Range"", content_range ) <S2SV_ModEnd> ; if ( <S2SV_ModStart>",0
528,"<S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ier <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, KSZ8851_ISR ) ; if ( ( isr & KSZ8851_ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> { ier |= KSZ8851_IER_LCIE <S2SV_ModEnd> ; interface -> <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_LCIS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( isr & KSZ8851_ISR_TXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_TXIS <S2SV_ModEnd> ) ; n <S2SV_ModStart> ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( interface, KSZ8851_IER, ier <S2SV_ModEnd> ) ; flag <S2SV_ModStart> ( interface, KSZ8851_IER, ier <S2SV_ModEnd> ) ; return",0
529,"<S2SV_ModStart> void encode_quantization ( VP9_COMMON * const <S2SV_ModEnd> cm, struct <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> QINDEX_BITS ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
530,"<S2SV_ModStart> = AV_PIX_FMT_PAL8 ; if ( c -> format == CHUNKY ) avctx -> pix_fmt = AV_PIX_FMT_YUV422 ; else avctx -> pix_fmt = AV_PIX_FMT_YUV422 ; } else if ( c -> format == CHUNKY ) { avctx -> pix_fmt = AV_PIX_FMT_YUV422 ; } else if ( c -> format == CHUNKY ) { avctx -> pix_fmt = AV_PIX_FMT_YUV422 ; } else { avctx -> pix_fmt = AV_PIX_FMT_YUV422 ; } else { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_INVALIDDATA ; }",0
531,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> msglen ) ) ),0
532,<S2SV_ModStart> tmp ) { goto parse_scheme_end <S2SV_ModEnd> ; } case <S2SV_ModStart> ) ) { goto parse_scheme_end <S2SV_ModEnd> ; } state <S2SV_ModStart> end ) ; parse_scheme_end : state -> offset = 0 ;,0
533,"<S2SV_ModStart> struct fb_vblank vblank ; memset ( & vblank, 0, sizeof ( vblank ) )",1
534,<S2SV_ModStart> flags ) { spin_lock ( & ctx -> cancel_lock ) ; <S2SV_ModStart> } } else { __timerfd_remove_cancel <S2SV_ModEnd> ( ctx ) <S2SV_ModStart> ) ; } spin_unlock ( & ctx -> cancel_lock ) ;,1
535,"<S2SV_ModStart> ) ) ; if ( c16 -> Curves [ i ] == NULL ) { for ( j = 0 ; j < i ; j ++ ) { _cmsFree ( ContextID, c16 -> Curves [ j ] ) ; _cmsFree ( ContextID, c16 ) ; return NULL ; }",0
536,<S2SV_ModStart> { if (! dev_name ||,1
537,"<S2SV_ModStart> 1 ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, ""[|osi]"" ) ) ; length = caplen - 1 ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, ""[|osi]"" ) ) ; return ( length ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, ""[|osi]"" ) ) ; return ( length ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, ""[|osi]"" ) ) ; length = caplen - 1 ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, ""[|osi]"" ) ) ; return ( length ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, ""[|osi]"" ) ) ; return ( length ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, ""[|osi]"" ) ) ; return ( length ) ; }",0
538,"<S2SV_ModStart> peekonly ) { if ( buf ) memcpy ( msg, & msg_tmp, sizeof ( * msg ) ) ; else memcpy ( msg, & msg_tmp, sizeof ( * msg ) ) ; } else { if ( buf ) memcpy_fromio ( buf <S2SV_ModEnd>, bus -> <S2SV_ModStart> -> m_pdwGetRing + curr_grp, buf_size ) ; } else { if ( buf ) memcpy_fromio ( buf <S2SV_ModEnd>, bus -> <S2SV_ModStart> -> m_pdwGetRing + curr_grp + sizeof ( * msg ), buf_size ) ; } } else { if ( buf ) memcpy_fromio ( buf <S2SV_ModEnd>, bus -> <S2SV_ModStart> -> m_pdwGetRing + curr_grp, buf_size ) ; } else { if ( buf ) memcpy_fromio ( buf, bus -> m_pdwGetRing + curr_grp, buf_size ) ; } else { if ( buf ) memcpy_fromio ( buf, bus -> m_pdwGetRing + curr_grp + sizeof ( * msg ), buf_size ) ; } else { if ( buf ) memcpy_fromio ( buf",0
539,<S2SV_ModStart> TSRMLS_CC ) ; if ( new_len > INT_MAX ) { efree ( replaced ) ; RETURN_FALSE ; },1
540,"<S2SV_ModStart> if ( ( localrsa = ikev2_get_rsa_bio ( env, id, NULL ) ) == NULL || ( localec = ikev2_get_ec_pubkey_bio ( env, id, NULL ) ) == NULL ) { log_debug ( ""%s: <S2SV_blank> invalid <S2SV_blank> public <S2SV_blank> key <S2SV_blank> type <S2SV_blank> %s"", __func__, print_map ( id -> id_type, ikev2_id_map ) ) ; goto sslerr ; } if ( ( localrsa = ikev2_get_rsa_bio ( env, id, NULL ) ) == NULL || ( localec = ikev2_get_ec_pubkey_bio ( env, id, NULL ) ) == NULL ) { log_debug ( ""%s: <S2SV_blank> invalid <S2SV_blank> public <S2SV_blank> key <S2SV_blank> type <S2SV_blank> %s"", __func__, print_map ( id -> id_type, ikev2_id_map ) ) ; goto sslerr ; }",0
541,"<S2SV_ModStart> ( ) ; if ( strlen ( t1_line_array ) >= T1_MAX_LINE_LEN ) { t1_error ( ""t1_check_unusual_charstring"" ) ; t1_log ( 0, ""t1_check_unusual_charstring"" ) ; t1_log ( 0, ""t1_check_unusual_charstring"" ) ; t1_line_ptr = eol ( t1_line_array ) ; } } else { t1_error ( ""t1_check_unusual_charstring"" ) ; t1_line_ptr = eol ( t1_line_array ) ; t1_log ( 0, ""t1_check_unusual_charstring"" ) ; t1_getline ( ) ; if ( strlen ( t1_buf_array ) >= T1_MAX_LINE_LEN ) { t1_error ( ""t1_check_unusual_charstring"" ) ; t1_line_ptr = eol ( t1_line_array ) ; t1_line_ptr = eol ( t1_line_array ) ;",0
542,"<S2SV_ModStart> BLOCK_SIZE subsize, int partition <S2SV_ModStart> int bsl = b_width_log2_lookup [ partition ] <S2SV_ModEnd>, hbs = <S2SV_ModStart> / 4 ; assert ( subsize <= BLOCK_8X8 ) ; <S2SV_ModStart> case PARTITION_NONE : set_mode_info_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; <S2SV_ModStart> case PARTITION_VERT : set_mode_info_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; <S2SV_ModEnd> if ( mi_col <S2SV_ModStart> mi_cols ) { set_mode_info_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) <S2SV_ModEnd> -> mic ; <S2SV_ModStart> -> mic ; set_mode_info_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x",0
543,"<S2SV_ModStart> name ) ; if (! strcmp ( key, ""url"" ) && value && looks_like_command_line_option ( value ) ) data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_URL, ""disallowed <S2SV_blank> submodule <S2SV_blank> url: <S2SV_blank> %s"", value ) ;",1
544,<S2SV_ModStart> = 0 ; int block_ptr = 0 ; int pixel_y = 0 ; int row_ptr = 0 ; int col_ptr = 0 ; int row_j = 0 ; int col_j = 0 ; int row_j = 0 ; int col_j = 0 ; int row_j = 0 ; int col_j = 0 ; int row_j = 0 ; int col_j = 0 ; int row_j = 0 ; int col_j = 0 ; int row_j = 0 ; int col_j = 0 ; int row_j = 0 ; int col_j = 0 ; int row_j = 0 ; int col_j = 0 ; int row_j = 0 ; int col_j = 0 ; int row_j = 0 ; int col_j = 0 ; int row_j = 0 ; int col_j = 0 ; int row_j = 0 ; int col_j = 0 ; int row_j = 0 ; int col_j = 0 ; int row_j = 0 ; int col_j = 0 ; int row_j = 0 ; int col_j = 0 ; int row_j = 0 ; int col_j =,0
545,<S2SV_ModStart> cnt ) { ssize_t <S2SV_ModEnd> n ; assert,1
546,<S2SV_ModStart> ; __be16 type ; if ( NAPI_GRO_CB ( skb ) -> encap_mark ) goto out ; NAPI_GRO_CB ( skb ) -> encap_mark = 1,1
547,<S2SV_ModStart> ; if ( numrows < 0 || numcols < 0 ) { return 0 ; } if (,1
548,"<S2SV_ModStart> { bool result = string_bytes_concat_buffer ( ( TPM2B_MAX_BUFFER * ) & key, & ( session -> sessionKey. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TPM2B_MAX_BUFFER * ) & key, & ( session -> nonceNewer. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TPM2B_MAX_BUFFER * ) & key, & ( session -> nonceOlder. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TPM2B_MAX_BUFFER * ) & key, & ( session -> nonceNewer. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TPM2B_MAX_BUFFER * ) & key, & ( session ->",0
549,<S2SV_ModStart> key_ref ) ; if ( key -> state == KEY_IS_UNINSTANTIATED <S2SV_ModEnd> ) goto can_read_key,0
550,"<S2SV_ModStart>, buflen, u4_first_slice_in_pic, ps_dec -> u4_first_slice_in_pic, ps_dec -> u4_first_slice_in_pic, ps_dec -> u4_first_slice_in_pic, ps_dec -> u4_first_slice_in_pic, ps_dec -> u4_first_slice_in_pic, ps_dec -> u4_first_slice_in_pic, ps_dec -> u4_first_slice_in_pic, ps_dec -> u4_first_slice_in_pic, ps_dec -> u4_first_slice_in_pic, ps_dec -> u4_first_slice_in_pic, ps_dec -> u4_first_slice_in_pic, ps_dec -> u4_first_slice_in_pic, ps_dec -> u4_first_slice_in_pic, ps_dec -> u4_first_slice_in_pic, ps_dec -> u4_first_slice_in_pic, ps_dec -> u4_first_slice_in_",0
551,"<S2SV_ModStart> var_off ) ; if (! src_known ||! dst_known ) { verbose ( env, ""R%d <S2SV_blank> tried <S2SV_blank> to <S2SV_blank> add <S2SV_blank> from <S2SV_blank> different <S2SV_blank> pointers <S2SV_blank> or <S2SV_blank> scalars\\n"", dst_reg -> var_off ) ; return - EINVAL ; }",0
552,"<S2SV_ModStart> ; if ( cifs_sb -> mnt_cifs_flags & CIFS_MOUNT_POSIX_PATHS ) { int len = direntry -> d_name. len ; strncpy ( full_path, direntry -> d_name. name, sizeof ( full_path ) ) ; rc = - EINVAL ; goto lookup_out ; } len = direntry -> d_name. len ; for ( i = 0 ; i < len ; i ++ ) if ( direntry -> d_name. name [ i ] == '\\\\' || direntry -> d_name. name [ i ] == '\\\\' || direntry -> d_name. name [ i ] == '\\\\' || direntry -> d_name. name [ i ] == '\\\\' ) { if ( cifs_sb -> mnt_cifs_flags & CIFS_MOUNT_POSIX_PATHS ) { int i ; for ( i = 0 ; i < len ; i ++ ) if ( direntry -> d_name. name [ i ] == '\\\\' || direntry -> d_name. name [ i ] == '\\\\'",0
553,<S2SV_ModStart>. flags = VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO_FLAG_WRITE ; break ; case VFIO_PCI_CONFIG_REGION_INDEX : info. offset = VFIO_PCI_INDEX_TO_OFFSET ( info. index ) ; info. size = pdev -> cfg_size ; break ; case VFIO_PCI_BAR0_REGION_INDEX... VFIO_PCI_BAR5_REGION_INDEX : info. offset = VFIO_PCI_INDEX_TO_OFFSET ( info. index - VFIO_PCI_BAR0_REGIONS ) ; break ; case VFIO_PCI_BAR5_REGION_INDEX : info. offset = VFIO_PCI_INDEX_TO_OFFSET ( info. index - VFIO_PCI_BAR0_REGIONS ) ; break ; case VFIO_PCI_BAR5_REGION_INDEX : info. offset = VFIO_PCI_INDEX_TO_OFFSET ( info. index - VFIO_PCI_BAR5_REGIONS ) ; break ; case VFIO_,0
554,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ext4_has_inline_data ( inode,1
555,<S2SV_ModStart> -> filesize = UINT64_MAX <S2SV_ModEnd> ; s ->,1
556,"<S2SV_ModStart> & rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> & rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ) ) <S2SV_ModEnd> ; rt = <S2SV_ModStart> & rcu_dereference_protected ( rt, sock_owned_by_user ( sk ) ) ; if ( rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ) ) == 0 ) { rcu_dereference ( tp -> opt ) ; tp -> opt = & rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ) ) ; } rt = rcu_dereference_protected ( rt, sock_owned_by_user ( sk ) ) ; if ( rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ) ) == 0 ) { rcu_dereference ( tp -> opt ) ; tp -> opt = NULL ; }",0
557,"<S2SV_ModStart> char * in, size_t olen <S2SV_ModStart> += 4 ; if ( len == olen ) return len ; <S2SV_ModStart> '=' ) { if ( len == olen ) return len ; <S2SV_ModStart> '=' ) { if ( len == olen ) return len ;",1
558,<S2SV_ModStart> gc ) ; <S2SV_ModEnd> return 0 ;,1
559,"<S2SV_ModStart> i ; size_t bytes, <S2SV_ModStart> ++ ) { bytes <S2SV_ModEnd> = min_t ( <S2SV_ModStart>, cur_len, bytes <S2SV_ModEnd> ) ; cur_len <S2SV_ModStart> copied ; } if (! cur_len ) { for ( i = 0 ; i < nr_pages ; i ++ ) put_page ( wdata -> pages [ i ] ) ; kfree ( wdata ) ; rc = - EFAULT ; break ; } for ( ; i < nr_pages ; i ++ ) put_page ( wdata -> pages [ i ] ) ;",0
560,<S2SV_ModStart> & CP_RDESC_SWAPPED_MIN_MAX ) ) return rdesc ; if ( * rsize < 4,1
561,"<S2SV_ModStart> ) { int number_of_frames, number_of_keyframes <S2SV_ModEnd>, encode_frame_count ; <S2SV_ModStart> ( svc_ctx ) <S2SV_ModEnd> ; svc_log_reset ( <S2SV_ModStart> ; si = get_svc_internal ( svc_ctx <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( svc_ctx ) <S2SV_ModEnd> ; svc_log ( <S2SV_ModStart> ""\\n"" ) ; number_of_frames = encode_frame_count ; number_of_keyframes = encode_frame_count / si -> kf_dist + 1 ; if ( svc_ctx -> encoding_mode == ALT_INTER_LAYER_PREDICTION_IP && ( i == 1 || i == 3 ) ) { number_of_frames -= number_of_keyframes ; } svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes=[%u]\\n"", i, ( double ) si -> psnr_sum [ i ] [ 0 ] / number_of_frames, ( double ) si -> psnr_sum [ i ]",0
562,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decode ( BYTE <S2SV_ModStart> BYTE * out, UINT32 outSize <S2SV_ModStart> 5 ) { if ( outSize < 1 ) return FALSE ; outSize -- ; <S2SV_ModStart> 4 ; } if ( outSize < len ) return FALSE ; outSize -= len ; <S2SV_ModStart> } else { if ( outSize < 1 ) return FALSE ; outSize -- ; * out ++ = value ; left -- ; } } return true <S2SV_ModEnd> ; } <S2SV_null>",0
563,<S2SV_ModStart> ; if ( is_altscreen &&,0
564,<S2SV_ModStart> ) { const char * literal_start = * str ; const char * literal_end = 0 ; int result = 0 ; assert ( * literal == NULL ) ; assert ( * str < end <S2SV_ModEnd> ) ; for <S2SV_ModStart> str < end <S2SV_ModEnd> ; ( * <S2SV_ModStart> ) ++ ) <S2SV_ModEnd> { char ch <S2SV_ModStart> == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' <S2SV_ModEnd> && * ( <S2SV_ModStart> == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '{' || ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; *,0
565,"<S2SV_ModStart> * m, size_t <S2SV_ModEnd> bufsize ) { <S2SV_ModStart> * buf ; <S2SV_ModEnd> JAS_DBGLOG ( 100 <S2SV_ModStart> 100, ( ""mem_resize(%p, <S2SV_blank> %zu)\\n"" <S2SV_ModEnd>, m, <S2SV_ModStart> m, bufsize <S2SV_ModEnd> ) ) ;",0
566,"<S2SV_ModStart> = create_dump_dir_from_problem_data ( pd <S2SV_ModEnd>, g_settings_dump_location )",0
567,"<S2SV_ModStart> ; if (! LookupString ( symInterpretMatchMaskNames, pred_txt, pred_rtrn ) ) { log_err ( info -> ctx, ""Illegal <S2SV_blank> modifier <S2SV_blank> predicate <S2SV_blank> \\""%s\\""; <S2SV_blank> Ignored\\n"", pred_txt ) ; return false ; } expr = expr -> action. args ; } else if ( expr -> expr. op == EXPR_IDENT ) { const char * pred_txt = xkb_ident_text ( info -> ctx, expr -> ident. ident ) ; if (! pred_txt && istreq ( pred_txt, ""any"" ) ) { * pred_rtrn = MATCH_ANY ; * mods_rtrn = MOD_REAL_MASK_ALL ; return true ; } <S2SV_ModEnd> return ExprResolveModMask (",0
568,<S2SV_ModStart> pcrypt_free ( struct aead_instance <S2SV_ModEnd> * inst ) <S2SV_ModStart> * ctx = aead_instance_ctx <S2SV_ModEnd> ( inst ),1
569,<S2SV_ModStart> ; if ( ( x1 + w1 ) > ( ptr -> width ) || ( x1 + h1 ) > ( ptr -> height ) ) { if ( x1 == 0 ) w1 = ptr -> width ; else w1 = ptr -> height ; } if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( y1 == 0 ) h1 = ptr -> height ; else h1 = ptr -> width - h1 ; } if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( x1 == 0 ) w1 = ptr -> width ; else x1 = ptr -> width - w1 ; } if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( y1 == 0 ) h1 = ptr -> height - h1 ; } if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( x1 == 0 ) w1 = ptr -> width - w1 ; else x1 = ptr -> width - w1 ; } if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( y1 == 0 ) h1 =,0
570,"<S2SV_ModStart> image ) ; count = <S2SV_ModEnd> ReadBlob ( image <S2SV_ModStart> iris_info. name ) ; if ( count!= sizeof ( iris_info. name ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> filler ) ; if ( count!= sizeof ( iris_info. filler ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> filler ) ; if ( count!= sizeof ( iris_info. filler ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
571,"<S2SV_ModStart> icmp6_hop_limit ) { if ( <S2SV_ModStart> icmp6_hop_limit ) { if ( <S2SV_ModStart> icmp6_hop_limit ) { if ( <S2SV_ModStart> icmp6_hop_limit ) { if ( <S2SV_ModStart> icmp6_hop_limit ) { if ( <S2SV_ModStart> icmp6_hop_limit ) { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> hop <S2SV_blank> limit <S2SV_blank> exceeded\\n"" ) ; } else { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> hop <S2SV_blank> limit <S2SV_blank> exceeded\\n"" ) ; } } } else { if ( <S2SV_ModStart> icmp6_hop_limit ) { if ( <S2SV_ModStart> icmp6_hop_limit ) { if ( <S2SV_ModStart> icmp6_hop_limit ) { if ( <S2SV_ModStart> icmp6_hop_limit ) { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> hop <S2SV_blank> limit <S2SV_blank> exceeded\\n"" ) ; } else { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> hop <S2SV_blank> limit <S2SV_blank> exceeded\\n"" ) ; } } }",0
572,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
573,<S2SV_ModStart> * up ; int ulen ; <S2SV_ModStart> rp ) ; ulen = xfrm_replay_state_esn_len ( up ) ; if ( nla_len ( rp ) < ulen || <S2SV_ModEnd> xfrm_replay_state_esn_len ( replay_esn <S2SV_ModStart> replay_esn )!= ulen <S2SV_ModEnd> ) return -,1
574,"<S2SV_ModStart> int ret = proc_dointvec_minmax <S2SV_ModEnd> ( table,",1
575,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost",0
576,<S2SV_ModStart> opj_calloc ( ( size_t ) ( <S2SV_ModStart> -> numlayers + 1U <S2SV_ModEnd> ) * l_step_l,0
577,"<S2SV_ModStart> name ), ""crypto-%s"" <S2SV_ModEnd>, name )",1
578,"<S2SV_ModStart> ps ) { u32 prev_count, cur_count ; <S2SV_ModStart> -> flags ; prev_count = kvm -> arch. vpit -> pit_state. channels [ 0 ]. count ; cur_count = ps -> flags & KVM_PIT_FLAGS_LOAD_COUNT ; if ( prev_count || cur_count ) start = 1 <S2SV_ModEnd> ; mutex_unlock (",0
579,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> mi_col_start ; const <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * prev_mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> idx_str ; BLOCK_SIZE bsize ; cpi -> mb. source_variance = UINT_MAX ; vp9_zero ( cpi -> mb. pred_mv ) ; switch ( cpi -> sf. partition_search_type ) { case VAR_BASED_PARTITION : choose_partitioning ( cpi, tile, mi_row, mi_col ) ; nonrd_use_partition ( cpi, tile, mi_row, mi_col, BLOCK_64X64, & dummy_rate, & dummy_dist ) ; break ; case SOURCE_VAR_BASED_PARTITION : set_offsets ( cpi, tile, mi_row, mi_col, BLOCK_64X64 ) ; set_source_var_based_partition ( cpi, tile, mi_",0
580,"<S2SV_ModStart> 1 ) ; if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf = opipe",1
581,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
582,<S2SV_ModStart> } else { # ifdef UPNP_ENABLE_POST_WRITE <S2SV_ModStart> return HTTP_UNAUTHORIZED ; # else return HTTP_NOT_FOUND ; # endif,1
583,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart>, dir ) ) == NULL ) { ulckpwdf ( ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( strcmp ( tmpname, ""."" ) == 0 ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; }",0
584,<S2SV_ModStart> blkg ) ) <S2SV_ModEnd> return PTR_ERR ( <S2SV_ModStart> blkg ) ; <S2SV_ModEnd> q -> root_blkg,1
585,"<S2SV_ModStart> if ( bpp!= 8 || bpp == 16 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> bit <S2SV_blank> order\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ncolors ; } if ( bpp!= 8 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> bit <S2SV_blank> order\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
586,"<S2SV_ModStart> ; krb5_data rspac ; const char * tgt_realm = krb5_principal_get_realm ( context, krbtgt -> entry. principal ) <S2SV_ModStart>, cp, tgt_realm,",1
587,<S2SV_ModStart> mnt ) ; nd -> last_type = LAST_BIND ;,1
588,"<S2SV_ModStart> struct usbdevfs_connectinfo ci ; memset ( & ci, 0, sizeof ( ci ) ) ; ci <S2SV_ModEnd>. devnum = <S2SV_ModStart> dev -> devnum ; ci <S2SV_ModEnd>. slow = <S2SV_ModStart> speed == USB_SPEED_LOW <S2SV_ModEnd> ; if (",1
589,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> * opt, u_int16_t <S2SV_ModEnd> optlen ) { <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> IPOPT_END ; } opt -> optlen = optlen ; if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( opt ) ; return - EINVAL ; } kfree ( * optp ) ; * optp = opt ; return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
590,<S2SV_ModStart> ; args -> rmtvaluelen2 = args -> rmtvaluelen ; args -> rmtvaluelen = args -> rmtvaluelen ;,0
591,<S2SV_ModStart> LARGE_INTEGER result ; if (! NT_SUCCESS ( RtlUnalignedStringCchLengthIrp ( & result ) ) ) { Irp -> IoStatus. Status = STATUS_INVALID_PARAMETER ; Irp -> IoStatus. Information = 0 ; break ; } <S2SV_ModStart> ) break ; if (! NT_SUCCESS ( RtlUnalignedStringCchLengthIrp ( & result ) ) ) { Irp -> IoStatus. Status = STATUS_INVALID_PARAMETER ; Irp -> IoStatus. Information = 0 ; break ; } <S2SV_ModStart> LARGE_INTEGER result ; if (! NT_SUCCESS ( RtlUnalignedStringCchLengthIrp ( & result ) ) ) { Irp -> IoStatus. Status = STATUS_INVALID_PARAMETER ; break ; } <S2SV_ModStart> ) break ; if (! NT_SUCCESS ( RtlUnalignedStringCchLengthIrp ( & result ) ) ) { Irp -> IoStatus. Status = STATUS_INVALID_PARAMETER ; Irp -> IoStatus. Information = 0 ; break ; } <S2SV_ModStart> LARGE_INTEGER result ; if (! NT_SUCCESS ( RtlUnalignedStringCchLengthIrp ( & result ) ) ) { Irp -> IoStatus. Status,0
592,"<S2SV_ModStart> ; if ( connection == NULL || strcmp ( connection, ""close"" )!= 0",0
593,"<S2SV_ModStart> uint16 nif = 0 ; uint32 len <S2SV_ModStart> 0 ; } len = 0 ; <S2SV_ModStart> } for ( d = alldevs ; d!= NULL ; d = d -> next ) { nif ++ ; if ( d -> description ) len += strlen ( d -> description ) ; if ( d -> name ) len += strlen ( d -> name ) ; else len += sizeof ( struct rpcap_sockaddr ) * 4 ; <S2SV_ModStart> -> description ) len += strlen ( d -> description ) ; if ( d -> name ) len += strlen ( d -> name ) ; len += sizeof ( struct rpcap_findalldevs_if ) ; for ( address = d -> addresses ; address!= NULL ; address = address -> next ) { switch ( address -> addr -> sa_family ) { case AF_INET : case AF_INET6 : # endif break ; default : break ; } } } if ( sock_bufferize ( NULL, sizeof ( struct rpcap_header ), NULL, & sendbufidx, RPCAP_NETBUF_SIZE, SOCK_STREAM, 0, sendbuf ) ) == - 1 ) goto error ; if ( sock_bufferize ( NULL, sizeof ( struct rpcap_header ),",0
594,"<S2SV_ModStart> ; struct dump_dir * <S2SV_ModEnd> dd = dd_create <S2SV_ModStart> DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } dd_create_basic_files ( dd, client_uid, NULL ) ; dd_save_text ( dd, FILENAME_ABRT_VERSION, VERSION ) ; dd_save_text ( dd, FILENAME_CMDLINE, cmdline ) ; g_hash_table_iter_next ( & iter, & gpkey, & gpvalue ) ; if ( g_hash_table_iter_next ( & iter, & gpkey, & gpvalue ) ) { dd_save_text ( dd, FILENAME_CMDLINE, cmdline ) ; free ( cmdline ) ; }",0
595,"<S2SV_ModStart> 1 ) ; if ( ( image -> columns % 2 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 2 ) ; bit ++ ) { index = ( ( * p ) & 0x80 >> bit )? 0x01 : 0x00 ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p <S2SV_ModEnd> ++ ; } <S2SV_ModStart> % 2 ) { index = ( ( * p ) & 0x80 >> bit )? 0x01 : 0x00 ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p <S2SV_ModEnd> ++ ; } <S2SV_ModStart> % 2 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 2 ) ; bit ++ ) { index = ( ( * p ) & 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; p <S2SV_ModEnd> ++ ; }",0
596,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
597,<S2SV_ModStart> tstype ) { <S2SV_ModEnd> struct sock_exterr_skb * <S2SV_ModStart> int err ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee. ee_data -= sk -> sk_tskey ; } else { serr -> ee. ee_errno = ENOMSG ; } serr -> ee_info = tstype ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( skb_shinfo ( skb ) -> tskey > sk -> sk_tskey ) serr -> ee. ee_data -= sk -> sk_tskey ; } else { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) serr ->,0
598,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
599,<S2SV_ModStart> = len ; bp [ 0 ] = 0 ;,0
600,"<S2SV_ModStart>, CONST_STR_LEN ( <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
601,<S2SV_ModStart> ; if ( task -> ptrace &&,0
602,<S2SV_ModStart> <= w - ( int ),1
603,<S2SV_ModStart> page ) ; <S2SV_ModEnd> memset ( addr,1
604,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
605,<S2SV_ModStart> SEI_USER_DATA_REGISTERED_ITU_T_T36 : ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; if ( ps_parse -> s_cur_buf -> i1_cur_buf -> i1_cur_buf -> i1_cur_buf -> i1_cur_buf -> i1_cur_buf -> i1_cur_buf -> i1_cur_buf -> i1_cur_buf -> i1_cur_buf -> i1_cur_buf -> i1_cur_buf -> i1_cur_buf -> i1_cur_buf -> i1_cur_buf -> i1_cur_buf -> i1_cur_buf -> i1_cur_buf -> i1_cur_buf -> i1_cur_buf -> i1_cur_buf -> i1_cur_buf -> i1_cur_buf -> i1_cur_buf -> i1_cur_buf -> i1_cur_buf -> i1_cur_buf -> i1_cur_buf -> i1_cur_buf -> i1_,0
606,"<S2SV_ModStart> * priv ; if (! port -> interrupt_out_urb ||! port -> interrupt_in_urb ) { dev_err ( & port -> dev, ""required <S2SV_blank> endpoint <S2SV_blank> is <S2SV_blank> missing\\n"" ) ; return - ENODEV ; }",1
607,"<S2SV_ModStart> -> sdma_descq_cnt ; if ( num_engines > MAX_SDMA_ENGINES ) { dd_dev_err ( dd, ""SDMA <S2SV_blank> engine <S2SV_blank> count <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", num_engines, ( u32 ) ( num_vls - SDMA_MIN_ENGINES ) ) ; ret = - EINVAL ; goto err_free_per_sdma ; } if ( ret ) { dd_dev_err ( dd, ""SDMA <S2SV_blank> engine <S2SV_blank> count <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", num_engines, ( u32 ) ( num_vls - SDMA_MIN_ENTRIES ) ) ; goto err_free_per_sdma ; } ret = - EINVAL ; if ( ret ) { dd_dev_err ( dd, ""SDMA <S2SV_blank> engine <S2SV_blank> count <S2SV_blank> (%u) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", num_engines, ( u32 ) ( num_vls - SDMA_MIN_ENTRIES ) ) ; goto err_free_per_sdma ; }",0
608,<S2SV_ModStart> -> device_data ; cancel_autoload_drivers ( ) ;,1
609,"<S2SV_ModStart>, int rep_quick, my_bool verbose <S2SV_ModStart> ; if ( verbose && ( param -> testflag & T_VERBOSE ) ) { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; } else { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; }",0
610,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> p == q ) || ( <S2SV_ModEnd> size < 16 <S2SV_ModStart> size < 16 ) || ( <S2SV_ModEnd> size > 256 <S2SV_ModStart> size > 256 ),1
611,"<S2SV_ModStart> uint dblocks = xfs_attr3_rmt_blocks <S2SV_ModEnd> ( mp,",1
612,"<S2SV_ModStart> ) ; } if ( pcount > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, ( int ) ( MaxAllocSize / sizeof ( Pairs ) ) ) ) ) ;",0
613,"<S2SV_ModStart> val ) ; if (! strcmp ( var, ""command"" ) &&! strcmp ( var, ""rspfile"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> command"", r -> name ) ; if (! strcmp ( var, ""rspfile_content"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if ( strcmp ( var, ""command"" ) == 0 ) hascommand = true ; else if ( strcmp ( var, ""rspfile"" ) == 0 ) hasrspfile = true ; else if ( strcmp ( var, ""rspfile_content"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name )",0
614,<S2SV_ModStart> ] == EOF || text [ 1 ] == 0 <S2SV_ModStart> ; if (! isxdigit ( <S2SV_ModStart> [ 2 ] ) <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if (! isxdigit ( <S2SV_ModStart> [ 3 ] ) <S2SV_ModEnd> ) return 0,1
615,"<S2SV_ModStart> query ) ) { if ( * qend == '\\0' ) { agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> kind, c -> id, c -> buf ) ; } else { agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> id, c -> buf ) ; } } else if ( 4 == b - c -> buf && 0 == strncmp ( ""PUT"", c -> buf, 4 ) ) { agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> kind, c -> id, c -> buf ) ; } else if ( 4 == b - c -> buf && 0 == strncmp ( ""POST"", c -> buf, 4 ) ) { return bad_request ( c, 400, __LINE__ ) ; } method = AGOO_POST ; if ( 0 == strncmp ( ""PUT"", c -> buf, 4 ) ) { return bad_request ( c, 400,",0
616,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; <S2SV_ModEnd> int i, <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16 <S2SV_ModStart> ++ j ) out <S2SV_ModEnd> [ j *",1
617,"<S2SV_ModStart> if (! g_key_file_get_contents ( keyfile, tmpfile_name, & new_data_len, error ) ) goto out ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s.tmp"", tmpfile_name ) ; g_autoptr ( GString ) new_exec = g_strdup_printf ( ""%s.exec"", tmpfile_name ) ; g_autoptr ( GString ) groups = NULL ; g_auto ( GStrv ) new_argv = g_strv_new ( ) ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, data, data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, data, data_len, error ) ) goto out ; g_key_file_free ( keyfile )",0
618,"<S2SV_ModStart> fh_dentry ) ; error = fh_want_write ( fh ) ; if ( error ) <S2SV_ModEnd> goto out_errno ; <S2SV_ModStart> goto out_errno ; fh_lock ( fh ) ; error = set_posix_acl ( inode, ACL_TYPE_ACCESS, argp -> acl_access <S2SV_ModEnd> ) ; if <S2SV_ModStart> error ) goto out_drop_lock ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT <S2SV_ModEnd>, argp -> <S2SV_ModStart> argp -> acl_default ) ; out_drop_lock : fh_unlock ( fh ) ; <S2SV_ModEnd> fh_drop_write ( fh",1
619,<S2SV_ModStart> * ue ; if <S2SV_ModEnd> ( tree_root == <S2SV_ModStart> == NULL ) return 0,1
620,"<S2SV_ModStart> char * temp_filename = osi_calloc ( <S2SV_ModEnd> strlen ( filename <S2SV_ModStart> ( filename ) + 1 <S2SV_ModEnd> ) ; if <S2SV_ModStart> (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; goto error ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } for ( const list_node_t * node = list_begin ( section -> entries ) ; node!= list_end ( section -> entries ) ; node = list_next ( node ) ) { const entry_t * entry = ( const entry_t * ) list_node ( enode ) ; fprintf ( fp, ""%s <S2SV_blank> = <S2SV_blank> %s\\n"", entry -> key, entry -> value ) ; } if ( list_next ( node )!= list_end (",0
621,<S2SV_ModStart> elen ) ; elen += sizeof ( struct pathComponent ) ; <S2SV_ModStart> > 0 ) { elen += pc -> lengthComponentIdent ; break ; } <S2SV_ModEnd> case 2 : <S2SV_ModStart> case 5 : elen += pc -> lengthComponentIdent ; if ( elen > fromlen ) return - EIO ; <S2SV_ModStart> break ; } <S2SV_ModEnd> } if (,1
622,"<S2SV_ModStart> case NFSPROC_GETATTR : if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefhn ( ndo, dp, v3 )!= NULL ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %s"", tok2str ( nfsv3_attr_str, ""attr-%u"", EXTRACT_32BITS ( & dp -> rm_call. cb_name ) ) ) ) ; } else { ND_PRINT ( ( ndo, "" <S2SV_blank> %s"", tok2str ( nfsv3_attr_str, ""attr-%u"", EXTRACT_32BITS ( & dp -> rm_call. cb_name ) ) ) ; } break ; case NFSPROC_SETATTR : if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefhn ( ndo, dp, v3 )!= NULL ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %s"", tok2str ( nfsv3_attr_str, ""attr-%u"", EXTRACT_32BITS ( & dp -> rm_call. cb",0
623,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ;,0
624,"<S2SV_ModStart> userData, target, ctxt",0
625,<S2SV_ModStart> ; bool slow <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ; * addr_len = sizeof ( * sin ) ;,1
626,"<S2SV_ModStart> len ) { <S2SV_ModEnd> if (! <S2SV_ModStart> } while ( len ) { u_int pdu_len = <S2SV_ModEnd> rpki_rtr_pdu_print ( ndo <S2SV_ModStart>, 8 ), len <S2SV_ModStart> -= pdu_len ; pptr <S2SV_ModEnd> += pdu_len ; <S2SV_ModStart> pdu_len ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
627,"<S2SV_ModStart> int tagval ; struct stream packet ; <S2SV_ModStart> length ) ; packet = * s ; <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> type <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> type <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
628,"<S2SV_ModStart> 0 ; int elt ; u_int offset, max_offset ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; if ( ( ( i = * cp ++ ) & INDIR_MASK )!= INDIR_MASK ) { compress = 0 ; rp = cp + l ; } if ( i!= 0 ) while ( i && cp < <S2SV_ModEnd> ndo -> ndo_snapend <S2SV_ModStart> ndo -> ndo_snapend ) { if ( ( i & INDIR_MASK ) == INDIR_MASK ) { compress = 0 ; rp = cp + l ; } if ( i!= 0 ) while ( i && cp < <S2SV_ModEnd> ndo -> ndo_snapend <S2SV_ModStart> ndo -> ndo_snapend ) { if ( ( i & INDIR_MASK ) == INDIR_MASK ) { if (! compress ) { rp = cp + 1 ; compress = 1 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> NULL ) ; offset = ( ( i << 8 ) | * cp ) & 0x3fff ) ; if ( offset",0
629,<S2SV_ModStart> ; blkcnt = args -> rmtvaluelen <S2SV_ModEnd> ; error =,0
630,"<S2SV_ModStart> ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" <S2SV_ModEnd> ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModStart> ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd> ""%s"" ""\\r\\n"" ""%s"",",0
631,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ( src, <S2SV_ModEnd> dest, getuid <S2SV_ModStart> getgid ( ) <S2SV_ModEnd>, S_IRUSR | <S2SV_ModStart> | S_IWUSR ) ; fs_logger2 ( ""clone"", dest <S2SV_ModEnd> ) ; unlink",1
632,<S2SV_ModStart> if ( rc!= BFA_STATUS_OK && fcstats -> fc. secs_reset > 0 ) { hstats -> seconds_since_last_reset = fcstats -> fc. secs_reset ; hstats -> tx_frames = fcstats -> fc. tx_frames ; hstats -> tx_words = fcstats -> fc. tx_words ; hstats -> nos_frames = fcstats -> fc. nos_frames ; hstats -> nos_words = fcstats -> fc. nos_words ; wait_for_completion ( & fcomp. comp ) ; } else { hstats -> seconds_since_last_reset = fcstats -> fc. secs_reset ; hstats -> tx_frames = fcstats -> fc. tx_frames ; hstats -> tx_words = fcstats -> fc. tx_words ; hstats -> nos_frames = fcstats -> fc. nos_frames ; hstats -> nos_words = fcstats -> fc. nos_words ; hstats -> error_frames = fcstats -> fc. error_frames ; hstats -> dumped_frames = fcstats -> fc. dumped_frames ; hstats -> dropped_words = fcstats -> fc,0
633,"<S2SV_ModStart> -> x = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> -> y = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> -> z = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 0.0f,",1
634,"<S2SV_ModStart> PKT_LEN_SIZE ) { giterr_set_str ( GITERR_NET, ""Invalid <S2SV_blank> empty <S2SV_blank> packet"" ) ; return GIT_ERROR <S2SV_ModEnd> ; } if",1
635,<S2SV_ModStart> ; if ( vma -> vm_flags & VM_SHARED ) return VM_FAULT_SIGBUS ; if (,1
636,<S2SV_ModStart> -> sasl_mechanism ; rec -> sasl_username = g_strdup ( src -> sasl_username ) ; rec -> sasl_password = g_strdup ( src -> sasl_password ) ; <S2SV_ModStart> -> sasl_username = g_strdup ( src -> sasl_username ) ; rec -> <S2SV_ModEnd> sasl_password = src <S2SV_ModStart> -> sasl_password = g_strdup ( src -> sasl_password ) ;,0
637,<S2SV_ModStart> env -> insn_aux_data ; int i <S2SV_ModStart> ) ) ; for ( i = off ; i < off + cnt - 1 ; i ++ ) new_data [ i ]. seen = true ;,1
638,<S2SV_ModStart> ; ND_TCHECK ( * dp <S2SV_ModEnd> ) ; if,1
639,<S2SV_ModStart> trunc ; } ND_TCHECK_16BITS ( & bp [ i + 2 ] ) ) ; ND_TCHECK_16BITS ( & bp [ i + 4 ] ) ;,0
640,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
641,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( occ0 <S2SV_ModStart> % rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""PredictorDecodeTile"", ""%s"", ""occ0%rowsize <S2SV_blank>!= <S2SV_blank> 0"" ) ; return 0 ; } <S2SV_ModEnd> assert ( sp <S2SV_ModStart> 0 ) { if (! <S2SV_ModStart>, rowsize ) ) return 0",1
642,"<S2SV_ModStart>, o, datao ; if ( CHECKOVERFLOW ( 0, 6, 2 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. info = exif_mem_alloc ( ne -> mem, sizeof ( MnoteCanonEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( ne -> log, ""ExifMnoteCanon"", sizeof ( MnoteCanonEntry ) * c ) ; break ; } n -> entries [ tcount ]. entries = exif_mem_alloc ( ne -> mem, sizeof ( MnoteCanonEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( ne -> log, ""ExifMnoteCanon"", sizeof ( MnoteCanonEntry ) * c ) ; break ; } exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ;",0
643,<S2SV_ModStart> ; if ( ctx -> terminated ||,1
644,<S2SV_ModStart> = NULL ; if ( sbi -> spool ) hugepage_put_subpool ( sbi -> spool ) ;,1
645,<S2SV_ModStart> 0 ) { my_errno = HA_ERR_NO_FILE ; if ( my_errno == HA_ERR_NO_FILE ) { my_errno = HA_ERR_NO_FILE ; if ( my_errno == HA_ERR_NO_FILE ) { my_errno = HA_ERR_NO_FILE ; if ( my_errno == HA_ERR_NO_FILE ) { my_errno = HA_ERR_NO_FILE ; if ( my_errno == HA_ERR_NO_FILE ) { my_errno = HA_ERR_NO_FILE ; if ( my_errno == HA_ERR_NO_FILE ) { my_errno = HA_ERR_NO_FILE ; if ( my_errno == HA_ERR_NO_FILE ) { my_errno = HA_ERR_NO_FILE ; if ( my_errno == HA_ERR_NO_FILE ) { my_errno = HA_ERR_NO_FILE ; if ( my_errno == HA_ERR_NO_FILE ) { my_errno = HA_ERR_NO_FILE ; if ( my_errno == HA_ERR_NO_FILE ) { my_errno = HA_ERR,0
646,<S2SV_ModStart> len ) { size_t alloc = ( * ( int ) strlen ( string ) ) + 1 <S2SV_ModEnd> ; char * <S2SV_ModStart> CURLcode res ; if ( alloc > ( length? length : ( int ) strlen ( string ) ) ) { free ( ns ) ; return NULL ; } <S2SV_ModStart> ( olen ) { * olen = strindex ; return NULL ; } string += 2 ; alloc -= 2 ; } ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ; return ns ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
647,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
648,"<S2SV_ModStart> ( ) ; iov_iter_advance ( i, copied ) ; <S2SV_ModStart> again ; } <S2SV_ModEnd> pos += copied",1
649,<S2SV_ModStart> unlikely ( len + ring -> frameoffset,1
650,"<S2SV_ModStart> -> pdu_free_state_ref = usm_free_usmStateReference ; SNMP_REGISTER_CALLBACK ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_POST_PREMIB_READ_CONFIG, init_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; unregister_config_handler ( ""snmp"", ""defPrivType"", snmpv3_authtype_conf, NULL, ""MD5|SHA|SHA-512|SHA-384|SHA-256|SHA-224"" ) ; unregister_config_handler ( ""snmp"", ""defAuthType"", snmpv3_authtype_conf, NULL, ""MD5|SHA|SHA-512|SHA-384|SHA-256|SHA-224"" ) ; unregister_config_handler ( ""snmp"", ""defPrivType"", snmpv3_privtype_conf, NULL, ""MD5|SHA|SHA-512|SHA-384|SHA-256|SHA-224"" ) ;",0
651,"<S2SV_ModStart>, show_object, & base <S2SV_ModEnd>, name, <S2SV_ModStart>, show_object, & base <S2SV_ModEnd>, path,",0
652,"<S2SV_ModStart> NULL ; return sub -> sub [ i ]. start = prog -> start ; if ( prog -> flags & eflags ) { if ( sub -> sub [ i ]. sp ) strcpy ( sub -> sub [ i ]. sp, prog -> start + prog -> nsub ) ; } else if ( sub -> sub [ i ]. sp ) strcpy ( sub -> sub [ i ]. sp, prog -> start + prog -> nsub ) ; if (! match ( prog -> start, sp, sp + prog -> nsub, sub -> sub [ i ]. flags | eflags, sub ) ) { if ( sub -> sub [ i ]. sp ) strcpy ( sub -> sub [ i ]. sp, prog -> start ) ; else strcpy ( sub -> sub [ i ]. ep, prog -> flags | eflags, sub ) ; } else { if ( prog -> flags & eflags ) strcpy ( sub -> sub [ i ]. sp, prog -> flags ) ; else strcpy ( sub -> sub [ i ]. ep, prog ) ; } else { if ( sub -> sub [ i ]. sp ) strcpy ( sub -> sub",0
653,"<S2SV_ModStart> src < zsize + ( sub_type!= 2 ) <S2SV_ModStart> bits ) { for ( j = 0 ; j < width ; j ++, dst += c -> framebuf_stride ) for ( i = 0 ; i < j ; i ++, dst += c -> framebuf_stride ) for ( j = 0 ; j < height ; j ++, dst += c -> framebuf_stride ) for ( j = 0 ; j < j ; j ++, dst += c -> framebuf_stride ) for ( j = 0 ; j < width ; j ++, dst += c -> framebuf_stride ) for ( j = 0 ; j < height ; j ++, dst += c -> framebuf_stride ) for ( i = 0 ; i < j ; i ++, dst += c -> framebuf_stride ) for ( j = 0 ; j < width ; j ++, dst += c -> framebuf_stride ) for ( j = 0 ; j < j ; j ++, dst += c -> framebuf_stride ) for ( j = 0 ; j < height ; j ++, dst += c -> framebuf_stride ) for ( j = 0 ; j < height ; j ++, dst += c ->",0
654,<S2SV_ModStart> lock_ptr ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
655,<S2SV_ModStart> idx ] ; if ( idx >= <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
656,<S2SV_ModStart> 255U ; * pixels ++ = ( unsigned char ) ( pixel >> 0 ) & 0x07 ; * pixels ++ = ( unsigned char ) ( pixel >> 1 ) & 0x07 ; * pixels ++ = ( unsigned char ) ( pixel >> 0 ) & 0x07 ; * pixels ++ = ( unsigned char ) ( pixel >> 0 ) & 0x07 ; * pixels ++ = ( unsigned char ) ( pixel >> 0 ) & 0x07 ; * pixels ++ = ( unsigned char ) ( pixel >> 1 ) & 0x07 ; * pixels ++ = ( unsigned char ) ( pixel >> 0 ) & 0x07 ; * pixels ++ = ( unsigned char ) ( pixel >> 2 ) & 0x07 ; * pixels ++ = ( unsigned char ) ( pixel >> 3 ) & 0x07 ; * pixels ++ = ( unsigned char ) ( pixel >> 0 ) & 0x07 ; * pixels ++ = ( unsigned char ) ( pixel >> 1 ) & 0x07 ; * pixels ++ = ( unsigned char ) ( pixel >> 0 ) & 0x07 ; * pixels ++ = ( unsigned char ) ( pixel >> 0 ) & 0x07 ; * pixels ++ = ( unsigned char ) ( pixel >>,0
657,<S2SV_ModStart> timer ) ; spin_lock ( & timeri -> lock ) ; <S2SV_ModStart> open_list ) { <S2SV_ModEnd> _snd_timer_stop ( slave <S2SV_ModStart> timer = NULL ; spin_unlock ( & timeri -> lock ) ; } mutex_unlock ( & register_mutex ) ;,0
658,<S2SV_ModStart> len ; } ND_TCHECK ( p [ 2 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT,0
659,"<S2SV_ModStart> -> has_va ; <S2SV_ModEnd> char * arch <S2SV_ModStart> * arch = strdup ( info -> arch ) ; char * cpu = info -> cpu? strdup ( info -> cpu ) : NULL <S2SV_ModEnd> ; ut16 bits <S2SV_ModStart> ; if ( <S2SV_ModEnd> cpu && * <S2SV_ModStart> cpu && * <S2SV_ModEnd> cpu ) { <S2SV_ModStart>, ""anal.cpu"", <S2SV_ModEnd> cpu ) ; <S2SV_ModStart> r, binfile ) ; free ( cpu ) ; free ( arch",1
660,"<S2SV_ModStart> sas_probe_devices ( struct asd_sas_port * port <S2SV_ModEnd> ) { struct <S2SV_ModStart>, * n <S2SV_ModEnd> ; list_for_each_entry (",1
661,<S2SV_ModStart> u1_dpb_commands_read ) { if ( ps_dec -> u4_bitoffset == 0 ) ps_dec -> u4_bitoffset = ih264d_read_mmco_commands ( ps_dec ) ; else ps_dec -> ps_bitstrm -> u4_ofst += ps_dec -> u4_bitoffset ;,0
662,"<S2SV_ModStart> gint64 offset ; <S2SV_ModEnd> char line [ <S2SV_ModStart> line [ NETSCREEN_LINE_LENGTH <S2SV_ModEnd> ] ; offset <S2SV_ModStart> return FALSE ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! parse_netscreen_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart> wth -> fh <S2SV_ModEnd>, & wth <S2SV_ModStart> wth -> frame_buffer, line",1
663,<S2SV_ModStart> 0 ) ; if ( <S2SV_ModStart>. seq_num ) < 0 ) return - 1,1
664,<S2SV_ModStart> decode ) { uint_fast32_t originalWidth = gifFilePtr -> Image. Width ; uint_fast32_t originalHeight = gifFilePtr -> Image. Height ; if ( originalWidth > info -> originalWidth || originalHeight > info -> originalHeight ) { gifFilePtr -> Image. Width = originalWidth ; gifFilePtr -> Image. Height = originalHeight ; } <S2SV_ModStart> originalHeight ; const uint_fast32_t rasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( originalWidth > info -> rasterSize || originalHeight > info -> rasterSize ) { gifFilePtr -> Image. Width = originalWidth ; gifFilePtr -> Image. Height = originalHeight ; } if ( decode ) { uint_fast32_t widthOverflow = gifFilePtr -> Image. Width - gifFilePtr -> originalWidth ; int_fast32_t heightOverflow = gifFilePtr -> Image. Height - gifFilePtr -> Image. Height ; uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( widthOverflow > 0 && heightOverflow > 0 ) { gifFilePtr -> Image. Width = width,0
665,"<S2SV_ModStart> : ret = - EOPNOTSUPP ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = <S2SV_ModStart> == 0 ) ret = <S2SV_ModEnd> key -> type <S2SV_ModStart> type -> read ( key, buffer, buflen ) ; up_read <S2SV_ModEnd> ( & key <S2SV_ModStart> sem ) ; <S2SV_ModEnd> } error2 :",1
666,"<S2SV_ModStart> || cherokee_buffer_is_empty ( <S2SV_ModEnd> conn -> validator <S2SV_ModStart> user ) ) { ldap_msgfree ( message ) ; return ret_error ; } size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) { LOG_ERROR ( CHEROKEE_ERROR_VALIDATOR_LDAP_SEARCH, props -> basedn. buf, attrs, 0, & message ) ; if ( re!= LDAP_SUCCESS ) { LOG_ERROR ( CHEROKEE_ERROR_VALIDATOR_LDAP_SEARCH, props -> basedn. buf, LDAP_SCOPE_SUBTREE, props -> filter. buf, attrs, 0, & message ) ; if ( re!= 1 ) { ldap_msgfree ( message ) ; return ret_not_found ; } dn = ldap_get_dn ( ldap -> conn, first ) ; if ( dn == NULL ) { ret = ret_not_found ; } ret = validate_dn ( props, dn, conn -> validator -> passwd. buf ) ; if ( ret!= ret_ok ) return ret_error ; } ldap_msg",0
667,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ReadBlobMSBShort ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length <S2SV_ModStart> ReadBlobMSBShort ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlobMSBShort ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlobMSBShort ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlobMSBShort ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlobMSBShort ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( Corrupt",0
668,"<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if <S2SV_ModStart> - JAS_CAST ( jas_longlong <S2SV_ModEnd>, ( ( <S2SV_ModStart> & 0x7fffffff ) <S2SV_ModEnd> + 1 ) <S2SV_ModStart> JAS_CAST ( longlong <S2SV_ModEnd>, tmp )",0
669,<S2SV_ModStart> page ) ; rm -> atomic. op_active = 0 ;,1
670,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> has <S2SV_blank> wrong <S2SV_blank> bus <S2SV_blank> %d <S2SV_blank> info!\\n"", __func__, dev -> name, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",1
671,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = 0",0
672,"<S2SV_ModStart> sizeof ( spath ) ) return - 1 ; if ( strstr ( name, "".."" ) || strchr ( name, '/'",1
673,<S2SV_ModStart> 0 ) { const char * s = ++ s ; <S2SV_ModStart> while ( * s <S2SV_ModEnd> &&! isspace <S2SV_ModStart> * t ) ) t ++ ; if ( * s == '/' ) { const char * t = ++ s ; while ( * t &&! isspace ( * t ) ) t ++ ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; if (! font_name ) free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; if (! font_name ) free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; if (! font_name ) free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t -,0
674,"<S2SV_ModStart> -> bcache, cache_id ( <S2SV_ModStart> ] -> data )",1
675,<S2SV_ModStart> objp ) ; * objp = NULL ;,1
676,"<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL ) )",1
677,<S2SV_ModStart> return 1 ; dcb -> dccpd_reset_code = DCCP_RESET_CODE_NO_CONNECTION ; return 0 <S2SV_ModEnd> ; } if,0
678,"<S2SV_ModStart> msixcap msixcap ; if ( msgnum < 1 || msgnum > MAX_MSIX_TABLE_ENTRIES ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> msix <S2SV_blank> table <S2SV_blank> entries\\n"", __func__ ) ; return - EINVAL ; } <S2SV_ModEnd> tab_size = roundup2 <S2SV_ModStart> msgnum ) ; <S2SV_ModEnd> pci_populate_msixcap ( &",0
679,"<S2SV_ModStart> goto out ; err = inode_change_nolock ( dentry -> d_inode, attr, upperdentry ) ; if ( err ) goto out ; <S2SV_ModStart> if ( upperdentry ) { err = notify_change ( upperdentry, attr, NULL ) ; mutex_unlock ( & upperdentry -> d_inode -> i_mutex ) ; } else { err = ovl_copy_up_last ( dentry, attr, false ) ; } <S2SV_ModEnd> ovl_drop_write ( dentry",0
680,<S2SV_ModStart> ( isspace ( ( unsigned char ),1
681,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart> if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank>",0
682,"<S2SV_ModStart> int decode_unsigned_max ( vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> max ) { vpx_read_bit_buffer <S2SV_ModEnd> data = vp9_rb_read_literal",0
683,<S2SV_ModStart> 1 ) ; if ( strlen ( line ) == 0 ) return - 1 ;,1
684,"<S2SV_ModStart> == NULL ) { retval = KRB5KDC_ERR_NO_SUCH_CERT ; goto cleanup ; } status = X509_NAME_cmp ( X509_get_issuer_name ( kdc_cert ), is -> issuer ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) * valid_kdcPkId = 1 ; } retval = 0 ; cleanup : X509_NAME_free ( is -> issuer ) ; ASN1_INTEGER_free ( is -> serial ) ; free ( is ) ; return retval <S2SV_ModEnd> ; } <S2SV_null>",0
685,<S2SV_ModStart> ++ ) { if ( band -> prec ) { <S2SV_ModStart> ) ; } },1
686,"<S2SV_ModStart> == 0 ) { if ( ( ctxt -> validate ) && ( ( ctxt -> vctxt. error!= NULL ) ) ) { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""PEReference: <S2SV_blank> %%%s; <S2SV_blank> not <S2SV_blank> found\\n"", name, NULL ) ; } else { xmlWarningMsg ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""Internal: <S2SV_blank> %%%s; <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> parameter <S2SV_blank> entity\\n"", name, NULL ) ; } } else if ( ( entity -> etype == XML_EXTERNAL_PARAMETER_ENTITY ) && ( entity -> etype!= XML_INTERNAL_PARAMETER_ENTITY ) ) { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""Internal: <S2SV_blank> %%%s; <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> parameter <S2SV_blank> entity\\n"", name, NULL ) ; } else if ( ( entity -> etype == XML_EXTERNAL_PARAMETER_ENTITY ) && ( entity -> etype == XML_INTERNAL_PARAMETER_ENTITY ) ) { xmlWarningMsg ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""Internal: <S2SV_blank> %%%s; <S2SV_blank> is <S2SV_blank>",0
687,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart>, & final ) ; rcu_read_unlock ( <S2SV_ModStart> -> ir_v6_rmt_addr ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ), <S2SV_ModEnd> np -> tclass <S2SV_ModStart> np -> tclass ) ; rcu_read_unlock (",1
688,<S2SV_ModStart> <S2SV_null> <S2SV_null> static TX_MODE <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart> cpi ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL || cpi -> sf. tx_size_search_method == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] ; } else if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL || cpi -> sf. tx_size_search_method == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] ; } else if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL ) { return,0
689,"<S2SV_ModStart> ( u32 size, u32 num ) { if ( size > UINT32_MAX / num ) { return NULL ; } <S2SV_ModEnd> return malloc ( <S2SV_ModStart> malloc ( size * num",1
690,<S2SV_ModStart> { if ( bad_format <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1 <S2SV_ModStart> return - 1 <S2SV_ModEnd> ; } } <S2SV_ModStart> { if ( bad_format <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1,0
691,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,1
692,<S2SV_ModStart> ) b ; const size_t buf_size = buf1 -> size ; if ( buf_size < buf2 -> size ) { return - 1 ; } else if ( buf1 -> size > buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 0 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 0 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else { return - 1 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
693,"<S2SV_ModStart> scn ) ; if ( root_storage == NULL ) { const char * corrupt_str = cdf_read_corrupt_string ( ms, fd, buf, nbytes ) ; if ( corrupt_str == NULL ) { const char * corrupt_str = cdf_read_corrupt_string ( ms, fd, buf, nbytes ) ; if ( corrupt_str == NULL ) { const char * corrupt_str = cdf_read_corrupt_string ( ms, fd, buf, nbytes ) ; if ( corrupt_str == NULL ) { const char * corrupt_str = cdf_read_corrupt_string ( ms, fd, buf, nbytes ) ; if ( corrupt_str == NULL ) { const char * corrupt_str = cdf_read_corrupt_string ( ms, fd, buf, nbytes ) ; if ( corrupt_str == NULL ) { const char * corrupt_str = cdf_read_corrupt_string ( ms, fd, buf, nbytes ) ; if ( corrupt_str == NULL ) { const char * corrupt_str = cdf_read_corrupt_string ( ms, fd, buf, nbytes ) ; if ( corrupt_str == NULL ) { return 0",0
694,"<S2SV_ModStart> = NULL ; unsigned int totalram_pages ; if ( SMP_ALIGN ( size ) > totalram_pages ) return NULL ; totalram_pages = ( size >> PAGE_SHIFT ) + 2 ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) { info = vmalloc ( sz ) ; if (! info ) return NULL ; } <S2SV_ModEnd> if ( (",0
695,<S2SV_ModStart> (! eof && vars -> str. c!= vars -> ptr,1
696,<S2SV_ModStart> ; if ( protocol < 0 || protocol > AX25_MAX_PROTOCOL ) return - EINVAL ; if (,0
697,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs,",0
698,"<S2SV_ModStart> -> _eip ; rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val ) ; if ( rc!= X86EMUL_CONTINUE ) break <S2SV_ModStart> case 4 : rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val )",1
699,"<S2SV_ModStart> url ) ; if ( strcmp ( url. path, list. name ) == 0 ) { mutt_debug ( 1, ""Error <S2SV_blank> adding <S2SV_blank> subscribed <S2SV_blank> mailbox: <S2SV_blank> %s\\n"", errstr ) ; return ; }",0
700,"<S2SV_ModStart> void * end <S2SV_ModEnd> ) { struct <S2SV_ModStart> * th ; <S2SV_ModEnd> int dlen ; <S2SV_ModStart> struct ceph_crypto_key old_key ; void * ticket_buf = NULL <S2SV_ModStart> bad ) ; if ( is_enc ) { dout ( "" <S2SV_blank> encrypted <S2SV_blank> ticket\\n"" ) ; dlen = ceph_x_decrypt ( & old_key, p, end, & ticket_buf, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart> out ; } ticket_buf = kmalloc ( dlen, GFP_NOFS ) ; if (! ticket_buf ) { ret = - ENOMEM ; goto out ; } dout ( "" <S2SV_blank> decrypted <S2SV_blank> %d <S2SV_blank> bytes\\n"", dlen ) ; tp = ticket_buf ; <S2SV_ModStart> bad ) ; ticket_buf = kmalloc ( dlen, GFP_NOFS ) ; if (! ticket_buf ) { ret = - ENOMEM ; goto out ; } tp = ticket_buf ; <S2SV_ModStart> bad ) ; ticket_buf = kmalloc ( dlen, GFP_NOFS ) ; if (! ticket_buf ) { ret = - ENOMEM ; goto out ; } tp = ticket_buf ; <S2SV_ModStart> bad ) ; ticket_buf = ticket_",0
701,"<S2SV_ModStart> / 2 ; if ( count > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", count, ( int ) ( MaxAllocSize / sizeof ( Pairs ) ) ) ) ) ;",1
702,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
703,"<S2SV_ModStart> -> init_msg ; if ( s -> session -> session_id_length!= 0 ) { al = SSL_AD_INTERNAL_ERROR ; SSLerr ( SSL_F_SSL3_GET_NEW_SESSION_TICKET, ERR_R_MALLOC_FAILURE ) ; goto err ; }",0
704,"<S2SV_ModStart> ; r = sd_event_add_io ( & b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } r = <S2SV_ModEnd> sd_event_add_io ( b",0
705,<S2SV_ModStart> ( errors ) return TEST_ERR_MAJOR_BAD ; else <S2SV_ModEnd> return 0 ;,0
706,<S2SV_ModStart> NULL ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_FIELD_REF <S2SV_ModStart> entry ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; default :,0
707,<S2SV_ModStart> -> lun ) sas_eh_finish_cmd <S2SV_ModEnd> ( cmd ),1
708,"<S2SV_ModStart>, end_col_offset ; int type_comment ; assert ( TYPE ( CHILD ( n, name_i ) ) == TYPE_COMMENT ) ; type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 1 ) ) ; if (! type_comment ) return NULL ; <S2SV_ModStart> += 3 ; type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 2 ) ) ; if (! type_comment ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 3 ) ) == TYPE_COMMENT ) { type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 3 ) ) ; if (! type_comment ) return NULL ; } body = ast_for_suite ( c, n, name_i + 3 ) ) ; if (! body ) return NULL ; get_last_end_pos ( body, & type_comment, & end_lineno, & end_col_offset ) ; body = ast_for_suite ( c, CHILD ( n, name_i + 4 ) ) ; if (! body ) return NULL ; get_last_end_pos",0
709,"<S2SV_ModStart> err = 0 ; if (! net_eq ( current -> nsproxy -> net_ns, sock_net ( sk ) ) ) return - EINVAL",1
710,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
711,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,1
712,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
713,"<S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
714,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> ) ) ) rc = <S2SV_ModStart> ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>,1
715,,1
716,<S2SV_ModStart> 0 ) ; if ( res ) { if (! res ) return - EINVAL ; return - EINVAL ; } <S2SV_ModEnd> freq_reg = devm_ioremap,0
717,"<S2SV_ModStart> : if ( position < 0 ) break ; if ( psf -> header. indx + position >= SIGNED_SIZEOF ( psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; <S2SV_ModStart> : if ( position < 0 ) break ; if ( psf -> header. indx + position >= SIGNED_SIZEOF ( psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf -> header. indx + position >= SIGNED_SIZEOF ( psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf_fseek ( psf, position, whence ) ; return ; case SEEK_SET : if ( position < 0 ) break ; if ( psf -> header. indx + position >= SIGNED_SIZEOF ( psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf -> header. indx + position >= SIGNED_SIZEOF ( psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf_fseek ( psf, position, whence ) ; return",0
718,<S2SV_ModStart> out_mutex ; } ext4_inode_block_unlocked_dio ( inode ) ; inode_dio_wait ( inode ) ; down_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart> ioffset ) ; <S2SV_ModEnd> credits = ext4_writepage_trans_blocks <S2SV_ModStart> ) ; goto out_mmap <S2SV_ModEnd> ; } down_write <S2SV_ModStart> handle ) ; out_mmap : up_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModEnd> ext4_inode_resume_unlocked_dio ( inode,1
719,<S2SV_ModStart> uint32_t midi_type ; uint8_t * * tracks ; uint32_t * track_size <S2SV_ModEnd> ; uint32_t end_of_tracks <S2SV_ModStart> no_tracks ) ; track_size = midi_data ; <S2SV_ModStart> * midi_data ++ ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 24 ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 16 ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 8 ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 0 ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 0 ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 0 ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 0 ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 24 ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 16 ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 8 ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 0 ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 0 ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 0,0
720,"<S2SV_ModStart> = max_t ( int <S2SV_ModEnd>, val * <S2SV_ModStart> = max_t ( int <S2SV_ModEnd>, val *",1
721,"<S2SV_ModStart> * bh ; unsigned int table_len ; <S2SV_ModStart> -> b_data ; table_len = le32_to_cpu ( lvd -> mapTableLength ) ; if ( table_len + offset > sb -> s_blocksize ) { udf_err ( sb, ""error <S2SV_blank> loading <S2SV_blank> logical <S2SV_blank> volume <S2SV_blank> descriptor: <S2SV_blank> "" ""Partition <S2SV_blank> table <S2SV_blank> too <S2SV_blank> large <S2SV_blank> (%u <S2SV_blank> > <S2SV_blank> %lu)\\n"", table_len, sb -> s_blocksize - offset ) ; goto out_bh ; } for ( i = 0 ; i < sbi -> s_partitions && offset < table_len ; i ++, offset += gpm -> partitionMapLength ) { struct udf_part_map * map = & sbi -> s_partmaps [ i ] ; if ( map -> s_partition_type!= UDF_TYPE1_MAP15 ) map -> s_partition_type = UDF_TYPE1_MAP15 ; map -> s_volumeseqnum = le16_to_cpu ( gpm1 -> volSeqNum ) ; map -> s_partition_num = le16_to_cpu ( gpm1 -> partitionNum ) ; map -> s_",0
722,"<S2SV_ModStart> long n ; image = 0 ; info = 0 ; <S2SV_ModStart> ""cannot <S2SV_blank> get <S2SV_blank> header\\n"" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ""cannot <S2SV_blank> get <S2SV_blank> info\\n"" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ""cannot <S2SV_blank> get <S2SV_blank> info\\n"" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> 1, ( ""BMP <S2SV_blank> information: <S2SV_blank> len <S2SV_blank> %ld; <S2SV_blank> width <S2SV_blank> %ld; <S2SV_blank> height <S2SV_blank> %ld; <S2SV_blank> numplanes <S2SV_blank> %ld; <S2SV_blank> "" ""depth <S2SV_blank> %ld; <S2SV_blank> enctype <S2SV_blank> %ld; <S2SV_blank> siz <S2SV_blank> %ld; <S2SV_blank> hres <S2SV_blank> %ld; <S2SV_blank> vres <S2SV_blank> %ld; <S2SV_blank> numcolors <S2SV_blank> %ld; <S2SV_blank> "" ""mincolors <S2SV_blank> %ld\\n"", JAS_CAST ( long <S2SV_ModEnd>, info -> <S2SV_ModStart> info -> len ), JAS_CAST ( long <S2SV_ModStart> info -> width ), JAS_CAST ( long <S2SV_ModStart> info -> height ), JAS_CAST ( long <S2SV_ModStart> info -> numplanes ), JAS_CAST ( long <S2SV_ModStart> info -> enctype ), JAS_CAST ( long <S2SV_ModStart> info -> enctype ), JAS",0
723,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> dev ), func <S2SV_ModEnd>, line, <S2SV_ModStart> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"", func <S2SV_ModEnd>, line,",1
724,<S2SV_ModStart> u4_ofst ) ; if ( ps_cabac -> u4_nxt_word < 9 ) { IHEVCD_ERROR_T e = IHEVCD_INVALID_PARAMETER ; ps_cabac -> u4_nxt_word = 0 ; ps_cabac -> au1_ctxt_models = NULL ; return ( IHEVCD_ERROR_T ) IHEVCD_INVALID_PARAMETER ; } <S2SV_ModStart> ) IHEVCD_SUCCESS ) { if ( ps_cabac -> u4_nxt_word < 9 ) { IHEVCD_ERROR_T e = IHEVCD_INVALID_PARAMETER ; ps_cabac -> au1_ctxt_models = NULL ; return ( IHEVCD_ERROR_T ) IHEVCD_INVALID_PARAMETER ; } return ( IHEVCD_ERROR_T ) IHEVCD_INVALID_PARAMETER ; },0
725,"<S2SV_ModStart> g_tv_comment, FILENAME_COMMENT ) ; update_gui_state_from_problem_data ( ) ; update_gui_state_from_problem_data (",0
726,"<S2SV_ModStart> media_pad_desc pad ; if ( copy_to_user ( & links -> pads [ p ], & pad, sizeof ( pad ) ) ) return - EFAULT ;",0
727,<S2SV_ModStart> } if ( line -> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
728,"<S2SV_ModStart> extent, height, depth <S2SV_ModStart> ""UnableToReadImageData"" ) ; depth = sun_info. depth ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; if ( depth > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""MemoryAllocationFailed"" ) ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""MemoryAllocationFailed"" ) ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; if ( depth > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""MemoryAllocationFailed"" ) ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""MemoryAllocationFailed"" ) ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; bytes_per_line = sun_info. width * GetBlobSize ( image ) ; height = sun_info. height * GetBlobSize ( image ) ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""MemoryAllocationFailed"" ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImage",0
729,"<S2SV_ModStart>, krb5_principal client_principal, const char * tgt_realm <S2SV_ModStart> principal ), tgt_realm <S2SV_ModEnd> ) ; if",1
730,"<S2SV_ModStart> ReadBlobLSBLong ( image ) ; if ( bmp_info. number_colors > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
731,<S2SV_ModStart> ; newinet -> inet_opt <S2SV_ModEnd> = ireq ->,1
732,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
733,"<S2SV_ModStart>!= 0 ) { int tend_off = skb_transport_offset ( skb ) + tlen ; <S2SV_ModStart> ( csum, skb_checksum ( skb, tend_off, <S2SV_ModEnd> offset, 0 <S2SV_ModStart>, 0 ) ) ; } <S2SV_ModEnd> put_cmsg ( msg",0
734,"<S2SV_ModStart> pfn ) ; kvm_unpin_pages ( kvm, pfn, page_size ) ; <S2SV_ModStart> base_gfn, gfn - slot -> base_gfn",1
735,<S2SV_ModStart> 0x00 } ; if ( cmd -> msg_len > sizeof ( b ) - 4 ) return - EINVAL ;,1
736,<S2SV_ModStart> perf_event_context * ctx ; ctx = perf_event_ctx_lock <S2SV_ModEnd> ( event ) <S2SV_ModStart> -> state = PERF_EVENT_STATE_OFF <S2SV_ModEnd> ; } raw_spin_unlock_irq,0
737,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ; return ( <S2SV_ModStart> ; return ( <S2SV_ModEnd> value & 0xffffffff <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ) ; } <S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> [ 3 ] ; return <S2SV_ModEnd> ( value & <S2SV_ModStart> & 0xffffffff ) <S2SV_ModEnd> ; } <S2SV_null>,1
738,"<S2SV_ModStart> free_nid * i, * ne <S2SV_ModStart> ; int err = - EINVAL <S2SV_ModStart> return false ; i = f2fs_kmem_cache_alloc ( free_nid_slab, GFP_NOFS ) ; i -> nid = nid ; i -> state = NID_NEW ; spin_lock ( & nm_i -> nid_list_lock ) ; i -> nid = nid ; i -> state = NID_NEW ; if ( radix_tree_preload ( GFP_NOFS ) ) { spin_unlock ( & nm_i -> nid_list_lock ) ; radix_tree_preload_end ( ) ; err = __insert_nid_to_list ( sbi, i, FREE_NID_LIST, true ) ; spin_unlock ( & nm_i -> nid_list_lock ) ; radix_tree_preload_end ( ) ; err = __insert_nid_to_list ( sbi, i, FREE_NID_LIST, true ) ; if ( err ) return false ; spin_unlock ( & nm_i -> nid_list_lock ) ; radix_tree_preload_end ( ) ;",0
739,<S2SV_ModStart> -> post_proc_flag ; flags -> color_ref_frame_flag = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_display_mv_flag? VP9D_DEBUG_DRAW_MV : 0 ) ; <S2SV_ModStart>. noise_level ; <S2SV_ModEnd> flags -> display_ref_frame_flag,0
740,"<S2SV_ModStart> ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> ++ cons ; netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> extra. type ) ; netbk_fatal_tx_err ( vif",1
741,<S2SV_ModStart> ) ) ; hdr -> sadb_msg_reserved = 0 ;,1
742,"<S2SV_ModStart> ) return ; memset ( & r1, 0, sizeof ( r1 ) ) ;",1
743,"<S2SV_ModStart> - 1 ; luaL_checkstack ( L, 1, ""too <S2SV_blank> many <S2SV_blank> results"" ) ; <S2SV_ModStart> 1, ""too <S2SV_blank> many <S2SV_blank> results"" ) ; size = optsize ( L, pos, & h, size ) ; pos += gettoalign ( pos, & h, opt, size ) ; if ( pos + size > ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> short"" ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""too <S2SV_blank> many <S2SV_blank> results"" ) ; switch ( opt ) { case 'b' : case 'B' : case 'H' : case 'L' : case 'T' : case 'I' : { lua_Number res = getinteger ( data + pos, h. endian, issigned, size ) ; lua_pushnumber ( L, res ) ; } break ; } case 'x' : { float x ; memcpy ( & x, data + pos, size ) ; correctbytes ( ( char * ) & x, sizeof ( x ) ) ; correctbytes ( ( char * ) & x, sizeof ( x ) ), h. endian ) ; lua_pushnumber ( L, x ) ;",0
744,<S2SV_ModStart> = 0 ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) { goto trunc ; } <S2SV_ModStart> struct olsr_msg4 ) ) ; if ( msg_len < sizeof ( struct olsr_msg6 ) ) { goto trunc ; },0
745,"<S2SV_ModStart> -> data ; unsigned <S2SV_ModStart> body -> unit_size || len < sizeof ( struct oz_multiple_fixed ) - 1 <S2SV_ModStart> -> unit_size ) { n = ( len - sizeof ( struct oz_multiple_fixed ) + 1 ) / body -> unit_size ; while ( n -- ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; data += body -> unit_size ; } } break ; case OZ_DATA_F_ISOC_FIXED : { struct oz_isoc_fixed * body = ( struct oz_isoc_fixed * ) data_hdr ; u8 * data = body -> data ; int count ; int i ; if (! unit_size ) break ; count = ( data_len - sizeof ( struct oz_isoc_fixed ) + 1 ) / body -> unit_size ; for ( i = 0 ; i < count ; i ++ ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, data_len ) ; data += data_len ; } } break ; case OZ_",0
746,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,1
747,"<S2SV_ModStart> ) ) { char * f = fopen ( src, ""r"" ) ; if ( f == NULL ) { fprintf ( stderr, ""Error: <S2SV_blank>.Xauthority <S2SV_blank> file <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist\\n"" ) ; exit ( 1 ) ; } if ( is_link ( src ) ) { <S2SV_ModEnd> fprintf ( stderr <S2SV_ModStart> ( stderr, ""Error: <S2SV_blank>.Xauthority <S2SV_blank> is <S2SV_blank> a <S2SV_blank> symlink <S2SV_blank> file\\n"" ) ; exit ( 1 ) ; } <S2SV_ModEnd> copy_file ( src <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> chown ( dest <S2SV_ModStart> ( dest, getuid ( ), getgid ( ), 0600 ) ; if ( chown ( dest, getuid ( ), getgid ( ), 0600 ) == - 1 ) errExit ( ""chown"" ) ; if ( chmod ( dest, 0600 ) == - 1 ) errExit ( ""chmod"" ) ; return 1 ; } unlink ( f ) ; <S2SV_ModEnd> return 1 ;",0
748,<S2SV_ModStart> IMAP_FATAL ; return ; } if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { idata -> status = IMAP_FATAL ; return ; } mailbox = idata -> buf ; s = mailbox + litlen ; SKIPWS ( s ) ;,0
749,<S2SV_ModStart> return res ; <S2SV_ModEnd> return 0 ;,1
750,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> ) ; } ext_size = sizeof ( struct ext4_extent_header ) + sizeof ( struct ext4_extent ) * le16_to_cpu ( neh -> eh_entries ) ; memset ( bh -> b_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size ) ; <S2SV_ModStart> ) ; } ext_size = sizeof ( struct ext4_extent_header ) + ( sizeof ( struct ext4_extent ) * le16_to_cpu ( neh -> eh_entries ) ) ; memset ( bh -> b_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size ) ;",1
751,<S2SV_ModStart> case 1 : if ( ptr_hbe_txposer -> band_type == IXHEAACD_BAND_4 ) { if ( ptr_hbe_txposer -> band_type == IXHEAACD_BAND_4 ) { if ( ptr_hbe_txposer -> band_type == IXHEAACD_BAND_4 ) { if ( ptr_hbe_txposer -> band_type == IXHEAACD_BAND_4 ) { if ( ptr_hbe_txposer -> band_type == IXHEAACD_BAND_4 ) { if ( ptr_hbe_txposer -> band_type == IXHEAACD_BAND_4 ) { if ( ptr_hbe_txposer -> band_type == IXHEAACD_BAND_4 ) { if ( ptr_hbe_txposer -> band_type == IXHEAACD_BAND_4 ) { if ( ptr_hbe_txposer -> band_type == IXHEAACD_BAND_4 ) { if ( ptr_hbe_,0
752,"<S2SV_ModStart> ; cmap_len = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> 0 x_origin = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> 0 y_origin = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> # if 0 image_w = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> # endif image_h = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> 12 ] ) ; pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len >= TGA_HEADER_SIZE ) { fprintf ( stderr, ""\\nError: <S2SV_blank> tga_readheader: <S2SV_blank> number <S2SV_blank> of <S2SV_blank> elements <S2SV_blank> different <S2SV_blank> from <S2SV_blank> the <S2SV_blank> expected.\\n"" ) ; return 0 ; } if ( id_len >= TGA_HEADER_SIZE ) { fprintf ( stderr, ""\\nError: <S2SV_blank> tga_readheader: <S2SV_blank> number <S2SV_blank> of <S2SV_blank> elements <S2SV_blank> different <S2SV_blank> from <S2SV_blank> the <S2SV_blank> expected.\\n"" ) ; return 0 ; }",0
753,<S2SV_ModStart> ; ssize_t ret ; if ( WARN_ON_ONCE (! ib_safe_file_access ( filp ) ) ) return - EACCES,1
754,"<S2SV_ModStart> ( which_clock ) == CPUCLOCK_SCHED ) { <S2SV_ModEnd> tp -> tv_sec <S2SV_ModStart> cpu. sched, NSEC_PER_SEC, & tp -> tv_nsec <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
755,<S2SV_ModStart> ; uint32 nstrips <S2SV_ModEnd> ; nstrips =,1
756,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = 0",0
757,"<S2SV_ModStart> lua_module ) ; luaLuaFunction * function_ptr = NULL ; luaLuaFunction * function_ptr = NULL ; luaLuaFunction * function_ptr = NULL <S2SV_ModEnd> ; int result <S2SV_ModStart> r ) ; function_ptr = lua_getglobal ( L, prov_spec -> function_name ) ; if ( function_ptr == NULL ) { lua_log_rerror ( APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO ( 02319 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", prov_spec -> function_name, prov_spec -> file_name ) ; function_ptr = lua_getglobal ( L, prov_spec -> function_name ) ; if (! function_ptr ) { lua_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02318 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", prov_spec -> function_name, prov_spec ->",0
758,<S2SV_ModStart> ; int error = 0 <S2SV_ModStart> &= PAGE_MASK ; if ( address < mmap_min_addr ) return - EPERM <S2SV_ModEnd> ; prev =,1
759,"<S2SV_ModStart> { umode_t mode <S2SV_ModEnd> ; error = <S2SV_ModStart> ; error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & mode <S2SV_ModStart>, & mode, & acl <S2SV_ModStart> if ( error <S2SV_ModEnd> ) return error <S2SV_ModStart> return error ; <S2SV_ModEnd> error = xfs_set_mode",1
760,"<S2SV_ModStart>, int optional, const char * rootfs <S2SV_ModStart> endif if ( safe_mount <S2SV_ModEnd> ( fsname, <S2SV_ModStart> MS_REMOUNT, data, rootfs <S2SV_ModStart>, data ) < 0",1
761,"<S2SV_ModStart> ""UnableToReadImageData"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
762,"<S2SV_ModStart> it_overrun = - 1LL <S2SV_ModEnd> ; ++ timr <S2SV_ModStart> info -> si_overrun = timer_overrun_to_int ( timr, info -> si_overrun ) <S2SV_ModEnd> ; } unlock_timer",1
763,"<S2SV_ModStart> if (! proto_end ) { check_url_component ( url, quiet, ""path"", c -> path ) < 0 || check_url_component ( url, quiet, ""protocol"", c -> protocol ) < 0 || check_url_component ( url, quiet, ""username"", c -> username ) < 0 || check_url_component ( url, quiet, ""password"", c -> password ) < 0 || check_url_component ( url, quiet, ""username"", c -> username ) < 0 || check_url_component ( url, quiet, ""password"", c -> password ) < 0 || check_url_component ( url, quiet, ""username"", c -> username ) < 0 || check_url_component ( url, quiet, ""password"", c -> password ) < 0 || check_url_component ( url, quiet, ""username"", c -> password ) < 0 || check_url_component ( url, quiet, ""password"", c -> password ) < 0",0
764,"<S2SV_ModStart> struct static_key * once_key <S2SV_ModEnd> ) { static <S2SV_ModStart> flags ) ; once_key <S2SV_ModEnd> = __net_random_once_disable_jump ( <S2SV_ModStart> ( done_key ) ; spin_lock_irqsave ( & lock, flags ) ; __net_random_once_disable_jump ( once_key <S2SV_ModEnd> ) ; return",0
765,"<S2SV_ModStart> -> actual ; bool kiocb_has_eventfd = <S2SV_ModEnd> io_data -> kiocb <S2SV_ModStart> ki_flags & IOCB_EVENTFD ; if ( io_data -> read && ret > 0 ) { use_mm ( io_data -> mm ) ; ret = copy_to_iter ( io_data -> buf, ret, & io_data -> data ) ; if ( iov_iter_count ( & io_data -> data ) ) ret = - EFAULT ; unuse_mm ( io_data -> mm ) ; } io_data -> kiocb -> ki_complete ( io_data -> kiocb, ret, ret ) ; if ( io_data -> ffs -> ffs_eventfd &&! kiocb_has_eventfd <S2SV_ModEnd> ) eventfd_signal ( <S2SV_ModStart> -> req ) <S2SV_ModEnd> ; if (",1
766,<S2SV_ModStart> ; if ( IPCB ( skb ) -> flags & IPSKB_DOREDIRECT <S2SV_ModEnd> &&! opt,1
767,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
768,"<S2SV_ModStart> struct trusted_key_payload * p ; struct trusted_key_payload * new_p ; struct trusted_key_options * new_o ; size_t datalen = prep -> datalen ; char * datablob ; int ret = 0 ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) return - ENOKEY ; <S2SV_ModStart> 0 ] ; <S2SV_ModEnd> if (!",1
769,"<S2SV_ModStart> v |= ( JAS_CAST ( uint_fast32_t, c ) <S2SV_ModEnd> << 24 )",1
770,<S2SV_ModStart> NULL ) { if ( skb -> len < ROSE_MIN_LEN ) { kfree_skb ( skb ) ; continue ; } <S2SV_ModStart> 2 ] ; if ( frametype == ROSE_CALL_REQUEST && ( skb -> len <= ROSE_CALL_REQ_FACILITIES_OFF || skb -> data [ ROSE_CALL_REQ_ADDR_LEN_OFF ]!= ROSE_CALL_REQ_ADDR_LEN_VAL ) ) { kfree_skb ( skb ) ; continue ; } <S2SV_ModStart> -> data + ROSE_CALL_REQ_DEST_ADDR_OFF <S2SV_ModEnd> ) ; lci_o,1
771,"<S2SV_ModStart> out_free ; } kvm_iommu_unmap_pages ( kvm, & old ) ;",0
772,<S2SV_ModStart> indev!= NULL && <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
773,"<S2SV_ModStart> fdt ) ; const char * const name = fdt_get_name ( fdt, offset, & len ) ; if ( end - path < path_len ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> nextoffset ; switch ( tag ) { case FDT_PROP : include = want >= 2 ; stop_at = offset ; break ; case FDT_NOP : include = want >= 2 ; break ; case FDT_BEGIN_NODE : depth ++ ; name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_BADSTRUCTURE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 1 + count >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 1 + count >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 1 + count >= path_len ) return - FDT_ERR_NO",0
774,"<S2SV_ModStart> char * buff ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } buff",1
775,"<S2SV_ModStart> } if ( in_bio == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_NO_CONTENT ) ; goto err ; } if ( <S2SV_ModStart> } if ( in_bio == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_NO_CONTENT ) ; goto err ; } if ( <S2SV_ModStart> } if ( in_bio == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_NO_CONTENT ) ; goto err ; } if ( <S2SV_ModStart> } if ( in_bio <S2SV_ModEnd> == NULL ) <S2SV_ModStart> == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_NO_CONTENT ) ; goto err ; } if ( bio == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_NO_CONTENT ) ; goto err ; }",0
776,"<S2SV_ModStart> ( server. bgsavechildpid == - 1 && server. bgrewritechildpid == - 1 ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; closeTimedoutClients ( ) ; } if ( ( loops % 50 ) ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ) - listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; } if (! ( loops % 50 ) ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ) - listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; closeTimedoutClients ( ) ; }",0
777,"<S2SV_ModStart> } if ( options -> flags & ( UV_PROCESS_SETUID | UV_PROCESS_SETGID ) && setgid ( options -> gid, 0 ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setgid()"" ) ; _exit ( 127 ) ; } if ( options -> flags & ( UV_PROCESS_SETUID | UV_PROCESS_SETGID ) && setuid ( options -> uid, 0 ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setuid()"" ) ; _exit ( 127 ) ; } if ( options -> flags & ( UV_PROCESS_SETUID | UV_PROCESS_SETGID ) && setgid ( options -> uid, 0 ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setuid()"" ) ; _exit ( 127 ) ; } if ( ( options -> flags & UV_PROCESS_SETUID ) && setuid ( options -> uid, 0 ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setuid()"" ) ; _exit ( 127 ) ; }",0
778,"<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> EOPNOTSUPP ; } if ( rlen > MAX_XFER_SIZE ) { warn ( ""i2c <S2SV_blank> rd: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", rlen ) ; return - EOPNOTSUPP ; } <S2SV_ModEnd> mutex_lock ( & <S2SV_ModStart> wlen ) ; <S2SV_ModEnd> ret = dvb_usb_generic_rw <S2SV_ModStart> + wlen, st -> data <S2SV_ModEnd>, rlen, <S2SV_ModStart> rlen, 0 ) ; if (! ret && rbuf && rlen ) memcpy ( rbuf, st -> data, rlen",1
779,<S2SV_ModStart> channel ) ; <S2SV_ModEnd> client -> priv,0
780,<S2SV_ModStart> book -> dim && i < n,1
781,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
782,<S2SV_ModStart> == - EEXIST || ret == - EOVERFLOW,1
783,<S2SV_ModStart> fp ) ; spin_lock ( & unix_gc_lock ) ; <S2SV_ModStart> unix_sk ( s <S2SV_ModEnd> ) ; BUG_ON <S2SV_ModStart> unix_tot_inflight -- ; } fp -> f_cred -> user -> unix_inflight -- ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
784,"<S2SV_ModStart> size_t chanmap_size = SF_MIN ( <S2SV_ModStart> sf. channels, layout_tag & 0xffff )",1
785,"<S2SV_ModStart> this_h ) { # if CONFIG_VP9_HIGHBITDEPTH if ( check_highbitdepth_scale_factors ( other_w, other_h, this_w, this_h ) || check_highbitdepth_scale_factors ( other_w, other_h, this_w, this_h ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; if ( vp9_is_scaled ( sf ) ) { sf -> predict [ 0 ] [ 0 ] = vp9_convolve_copy ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve_avg ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve8_horiz ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve8_horiz ; } else { sf -> predict [ 0 ] [ 0 ] = vp9_convolve8_vert ; sf -> predict",0
786,<S2SV_ModStart> ms ) { uint32_t <S2SV_ModEnd> nestsize = ( <S2SV_ModStart> nestsize = ( uint32_t <S2SV_ModEnd> ) ms ->,1
787,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
788,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
789,<S2SV_ModStart> -> xrefs = safe_calloc ( <S2SV_ModEnd> sizeof ( xref_t,1
790,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
791,"<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ) <S2SV_ModStart> ( opt ) { atomic_sub ( <S2SV_ModEnd> opt -> tot_len <S2SV_ModStart> opt -> tot_len, & sk -> sk_omem_alloc ) ; txopt_put ( opt <S2SV_ModStart> ) ; } }",1
792,"<S2SV_ModStart>, * tmpin = NULL, * tmpout <S2SV_ModStart>, tmpout ) ; if (! cmsbio ) { CMSerr ( CMS_F_CMS_VERIFY, CMS_R_MALLOC_FAILURE ) ; goto err ; } cmsbio = CMS_get1_bio ( cms ) ; if (! cmsbio ) { cmserr ( CMS_F_CMS_VERIFY, CMS_R_MALLOC_FAILURE ) ; goto err ; } if (! ( flags & CMS_NOCRL ) ) crls = CMS_get1_crls ( cms ) ; for ( i = 0 ; i < sk_CMS_SignerInfo_num ( sinfos ) ; i ++ ) { si = sk_CMS_SignerInfo_value ( sinfos, i ) ; if (! cms_signerinfo_verify_cert ( si, store, cms_certs, crls, flags ) ) goto err ; } } if (! ( flags & CMS_NOCRL ) ) crls = CMS_get1_crls ( cms ) ; for ( i = 0 ; i < sk_CMS_SignerInfo_num ( sinfos ) ; i ++ ) { if (! cms_",0
793,"<S2SV_ModStart> = 0 ; memset ( & src_info, 0, sizeof ( src_info ) ) ;",0
794,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> sctp_v6_protosw_exit ( ) <S2SV_ModStart> ( ) ; sctp_v4_protosw_exit ( ) ; unregister_pernet_subsys ( & sctp_net_ops ) ;,0
795,<S2SV_ModStart> cs_flags ) ; hook_del_nick_can_register ( check_registration_keywords ) ; hook_add_user_can_register ( check_registration_keywords ) ; hook_add_user_can_register ( check_registration_keywords ) ; hook_add_user_can_register ( check_registration_keywords ) ;,0
796,"<S2SV_ModStart> ) { struct in_device * idev <S2SV_ModEnd> = ( ( <S2SV_ModStart> ) -> ifa_dev <S2SV_ModEnd> ; struct netdev_notifier_info <S2SV_ModStart> netdev_notifier_info info ; if ( idev -> dead ) return NOTIFY_DONE ; <S2SV_ModStart> & info, idev ->",1
797,"<S2SV_ModStart> current -> active_mm <S2SV_ModEnd>!= mm ) <S2SV_ModStart> goto out ; if (! mmget_still_valid ( mm ) ) { leave_mm ( smp_processor_id ( ) ) ; base_pages_to_flush = ( end - start ) >> PAGE_SHIFT ; } if ( base_pages_to_flush > tlb_single_page_flush_ceiling ) { base_pages_to_flush = TLB_FLUSH_ALL ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ) ; if ( vmflag & VM_HUGETLB ) base_pages_to_flush = ( end - start ) >> PAGE_SHIFT ; if ( base_pages_to_flush > tlb_single_page_flush_ceiling ) { base_pages_to_flush = TLB_FLUSH_ALL ; count_vm_tlb_event ( NR_TLB_LOCAL_SHOOTDOWN, base_pages_to_flush ) ; __flush_tlb_single ( addr ) ; } else { trace_tlb_shootdown ( TLB_LOCAL_MM_SHOOTDOWN, base_pages_to_",0
798,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> index ) ; if ( stream -> psnr_sse_total ) { <S2SV_ModStart> ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; } else { ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; }",0
799,"<S2SV_ModStart> val ) { int temp_size = 500 ; char * temp = malloc ( temp_size ) <S2SV_ModEnd> ; int i <S2SV_ModStart> ; ) { if ( i >= temp_size ) { temp_size *= 2 ; temp = realloc ( temp, temp_size ) ; }",1
800,<S2SV_ModStart> task ) { <S2SV_ModEnd> del_timer ( & <S2SV_ModStart> -> timer ) <S2SV_ModEnd> ; complete (,1
801,"<S2SV_ModStart> name ) { if (! ( dst = fopen ( name, ""r"" ) ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ; } if (! ( dst = fopen ( dst_name, ""w"" ) ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ; } <S2SV_ModEnd> strcpy ( dst_name <S2SV_ModStart> + 16 ) ; if ( ( c = strrchr ( dst_name, '.' ) ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ; } if ( ( c = strrchr ( dst_name, '.' ) ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ; }",0
802,"<S2SV_ModStart> = 0 ; if ( addr_str_length > sizeof ( addr_str_buffer ) ) { log_warn ( ""lldp"", ""too <S2SV_blank> large <S2SV_blank> management <S2SV_blank> address <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; addr_str_length = sizeof ( addr_str_buffer ) ; addr_str_buffer [ addr_str_length - 1 ] = 0 ; } <S2SV_ModStart> = 0 ; if ( addr_str_length > sizeof ( addr_str_buffer ) ) { log_warn ( ""lldp"", ""too <S2SV_blank> large <S2SV_blank> management <S2SV_blank> address <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; addr_str_length = sizeof ( addr_str_buffer ) ; addr_str_buffer [ addr_str_length - 1 ] = 0 ; } <S2SV_ModStart> = 0 ; if ( addr_str_length > sizeof ( addr_str_buffer ) ) { log_warn ( ""lldp"", ""too <S2SV_blank> large <S2SV_blank> management <S2SV_blank> address <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; addr_str_length = sizeof ( addr_str_buffer ) ; addr_str_buffer [ addr_str_length",0
803,"<S2SV_ModStart> object + size <= bplist -> offset_table ) { PLIST_BIN_ERR ( ""%s: <S2SV_blank> BPLIST_DICT <S2SV_blank> data <S2SV_blank> bytes <S2SV_blank> point <S2SV_blank> outside <S2SV_blank> of <S2SV_blank> valid <S2SV_blank> range\\n"", __func__ ) ; return NULL ; } if ( * object + size <S2SV_ModStart> object + size <= bplist -> offset_table ) { PLIST_BIN_ERR ( ""%s: <S2SV_blank> BPLIST_DATA <S2SV_blank> data <S2SV_blank> bytes <S2SV_blank> point <S2SV_blank> outside <S2SV_blank> of <S2SV_blank> valid <S2SV_blank> range\\n"", __func__ ) ; return NULL ; } if ( * object + size <S2SV_ModStart> object + size <= bplist -> offset_table ) { PLIST_BIN_ERR ( ""%s: <S2SV_blank> BPLIST_DICT <S2SV_blank> data <S2SV_blank> bytes <S2SV_blank> point <S2SV_blank> outside <S2SV_blank> of <S2SV_blank> valid <S2SV_blank> range\\n"", __func__ ) ; return NULL ; } size = UINT_TO_HOST ( * object, size ) ; ( * object ) += size ; if ( * object + size <= bplist -> offset_table ) { PLIST_BIN_ERR ( ""%s: <S2SV_blank> BPLIST_DICT <S2SV_blank> data <S2SV_blank> bytes <S2SV_blank> point <S2SV_blank> outside <S2SV_blank> of <S2SV_blank> valid <S2SV_blank> range\\n"", __func__ )",0
804,<S2SV_ModStart> ( ) ; # if <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
805,<S2SV_ModStart> all_channels_lock ) ; put_net ( pch -> chan_net ) ; pch -> chan_net = NULL ;,1
806,"<S2SV_ModStart> btrfs_dir_item * di = NULL <S2SV_ModStart> - ENOMEM ; path -> skip_release_on_error = 1 ; <S2SV_ModStart> & XATTR_REPLACE ) { di = btrfs_lookup_xattr ( trans, root, path, btrfs_ino ( inode ), name, name_len, - 1 ) ; if (! di ) { ret = - ENODATA ; goto out ; } else if ( di ) { ret = btrfs_delete_one_dir_name <S2SV_ModEnd> ( trans, <S2SV_ModStart>, path, <S2SV_ModEnd> di ) ; <S2SV_ModStart> out ; } } if ( flags & XATTR_REPLACE ) { di = btrfs_lookup_xattr ( NULL, root, path, btrfs_ino ( inode ), name, name_len, 0 ) ; if ( IS_ERR ( di ) ) { ret = PTR_ERR ( di ) ; goto out ; } ret = btrfs_delete_one_dir_name <S2SV_ModEnd> ( trans, <S2SV_ModStart>, path, <S2SV_ModEnd> di ) ; <S2SV_ModStart> out ; } di = btrfs_lookup_xattr ( NULL, root, path, btrfs_ino ( inode ), name, name_",0
807,<S2SV_ModStart> > 0xbf ) { <S2SV_ModStart> return 1 ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto err ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto err ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto beach ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto beach ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto beach ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto beach ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto beach ; } <S2SV_ModStart> goto beach ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto beach ; } <S2SV_ModStart> goto beach ; } <S2SV_ModStart> goto beach ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto beach ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto beach ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto beach ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto beach ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto beach ; } <S2SV_ModStart> buf_len ) ; beach : <S2SV_ModStart> goto beach ; } <S2SV_ModStart> buf_len ) ; beach : <S2SV_ModStart> goto beach ; } <S2SV_ModStart> buf_len ) ; beach :,0
808,"<S2SV_ModStart> client -> proxy ) ; g_byte_array_free ( client -> auth_buffer, TRUE",1
809,"<S2SV_ModStart>. skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
810,<S2SV_ModStart> ; if ( key_is_negative ( key <S2SV_ModEnd> ) ) return,1
811,"<S2SV_ModStart> ip ++ ; if ( unlikely ( * ip == 0 ) ) { goto input_overrun ; } <S2SV_ModStart> endif { # if defined ( CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS ) if ( likely ( * ip == 0 ) ) { while ( * ip == 0 ) { t += 255 ; ip ++ ; } ip ++ ; } t += 3 ; copy_literal_run : # if defined ( CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS ) if ( likely ( HAVE_IP ( t + 15 ) && HAVE_OP ( t + 15 ) ) ) { const unsigned char * ie = ip + t ; do { COPY8 ( op, ip ) ; ip += 8 ; ip += 8 ; ip += 8 ; ip += 8 ; } while ( ip < ie ) ; ip = ie ; } while ( ip < ie ) ; ip = ie ; op = oe ; } else <S2SV_ModStart> endif { # if defined ( CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS ) if ( likely ( HAVE_IP ( t + 3 ) && HAVE_OP ( t + 3 ) ) ) { unsigned char *",0
812,"<S2SV_ModStart> ; if ( fit == NULL ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; goto error ; } if ( <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT ) ; goto error <S2SV_ModEnd> ; } bootstage_mark <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; goto error <S2SV_ModEnd> ; } bootstage_mark <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; error : printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; return - EINVAL <S2SV_ModEnd> ; } bootstage_mark <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT ) ; goto error <S2SV_ModEnd> ; } bootstage_mark <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT_OK ) ; if ( fit_uname ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> unit <S2SV_blank> name!\\n"", prop_name ) ; goto error ; } noffset = fit_image_get_node ( fit, fit_uname_config ) ; noffset = fit_image_get_node ( fit, fit_",0
813,<S2SV_ModStart> { vpn_packet_t outpkt ; if ( len > sizeof outpkt. data ) return,1
814,<S2SV_ModStart> vmx_vpid_bitmap ) ; <S2SV_ModEnd> for ( msr <S2SV_ModStart> 0x83f ) ; <S2SV_ModEnd> if ( enable_ept,1
815,"<S2SV_ModStart> out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; goto out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; goto out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; goto out_error ; }",0
816,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ),0
817,<S2SV_ModStart> )? ( rc <S2SV_ModEnd> -> baseline_gf_interval * <S2SV_ModStart> -> baseline_gf_interval * ( rc <S2SV_ModEnd> -> baseline_gf_interval + <S2SV_ModStart> -> baseline_gf_interval + ( rc <S2SV_ModEnd> -> baseline_gf_interval + <S2SV_ModStart> -> baseline_gf_interval + ( rc <S2SV_ModEnd> -> baseline_gf_interval + <S2SV_ModStart> -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + (,0
818,"<S2SV_ModStart> if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) { errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; break ; } if ( strchr ( argv [ i ],'<S2SV_blank>') == 0 ) { errx ( 1, ""%s: <S2SV_blank> untrusted <S2SV_blank> option"", ""--allow-untrusted"" ) ; break ; } if ( strcmp ( argv [ i ],'<S2SV_blank>') == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; break ; } if ( strcmp ( argv [ i ],",0
819,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
820,<S2SV_ModStart> INDENT_INCR ; } if ( tbl -> indent < 0 ) tbl -> indent = 0 ; <S2SV_ModStart> -= INDENT_INCR ; if ( offset < 0 ) offset = 0 ;,1
821,"<S2SV_ModStart> + tail ; size_t ss = sst -> sst_len ; <S2SV_ModStart> b ) <= ss <S2SV_ModEnd> * sst -> <S2SV_ModStart> b ), ss <S2SV_ModEnd> * sst -> <S2SV_ModStart> b ), ss <S2SV_ModEnd> * sst -> <S2SV_ModStart> -> sst_len, ss <S2SV_ModEnd>, sst ->",0
822,"<S2SV_ModStart> : # line 113 <S2SV_ModEnd> ""hex_grammar.y"" { ( <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""hex_grammar.y"" { ( <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""hex_grammar.y"" { ( <S2SV_ModStart> } # line 126 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""hex_grammar.y"" { ( <S2SV_ModStart> } # line 126 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""hex_grammar.y"" { ( <S2SV_ModStart> } # line 126 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""hex_grammar.y"" { ( <S2SV_ModStart> } # line 126 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""hex_grammar.y"" { ( <S2SV_ModStart> } # line 126 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 126 ""hex_grammar.y"" { ( <S2SV_ModStart> } # line 126 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""hex_grammar.y"" {",0
823,"<S2SV_ModStart> ib ] ; if ( d -> dequant == NULL ) { # if CONFIG_VP9_HIGHBITDEPTH if ( mb -> e_mbd. mode_info_context -> mbmi. high_bit_depth > 1 ) { # endif vp8_strict_quantize_b ( b, d ) ; # endif } else { # if CONFIG_VP9_HIGHBITDEPTH if ( mb -> e_mbd. mode_info_context -> mbmi. high_bit_depth > 1 ) { # endif vp8_strict_quantize_b ( b, d ) ; # endif dequant_ptr = d -> dequant ; coeff_ptr = b -> coeff ; dqcoeff_ptr = d -> dqcoeff ; i0 =! type ; eob = * d -> eob ; }",0
824,<S2SV_ModStart> FN_REFLEN ] ; if ( strlen ( opt_basedir ) > FN_REFLEN ) { error = - 1 ; goto exit ; },0
825,<S2SV_ModStart> ; if ( key_is_positive ( key <S2SV_ModEnd> ) ) zap,1
826,"<S2SV_ModStart> ) -> filter ; memset ( & uf, 0, sizeof ( uf ) )",1
827,"<S2SV_ModStart> int n = MIN ( <S2SV_ModStart> data ) ; if ( n > ( int ) ( data_end - data ) ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; }",0
828,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
829,<S2SV_ModStart> -> peer. auth_capable = new -> peer. auth_capable ; asoc -> peer.,1
830,"<S2SV_ModStart> cleanup ; } if ( fibsize > dev -> max_fibsize ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> Fibsize <S2SV_blank> too <S2SV_blank> large <S2SV_blank> to <S2SV_blank> send <S2SV_blank> raw <S2SV_blank> srb\\n"" ) ) ; rcode = - EINVAL ; goto cleanup ; } status = aac_fib_send ( dev, srbfib, sizeof ( struct aac_srb ), sg_list, sizeof ( u32 ) ) ; if ( status ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> Fibsize <S2SV_blank> too <S2SV_blank> large <S2SV_blank> to <S2SV_blank> send <S2SV_blank> raw <S2SV_blank> srb\\n"" ) ) ; rcode = - EINVAL ; goto cleanup ; }",0
831,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( cc0 <S2SV_ModStart> % rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""PredictorEncodeTile"", ""%s"", ""(cc0%rowsize)!=0"" ) ; return 0 ; } <S2SV_ModEnd> while ( cc",1
832,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
833,"<S2SV_ModStart> input_data, size_t input_forwards_size, size_t input_backwards_size <S2SV_ModEnd>, int flags <S2SV_ModStart> # define prolog { if ( <S2SV_ModEnd> bytes_matched >= max_bytes_matched <S2SV_ModStart> { action = ACTION_KILL_TAIL ; break ; } <S2SV_ModEnd> } # define <S2SV_ModStart> # define fail_if_error ( e ) { case ERROR_INSUFFICIENT_MEMORY : return - 2 ; case ERROR_TOO_MANY_RE_FIBERS : return - 4 ; } if ( _yr_re_alloc_storage ( & storage )!= ERROR_SUCCESS ) return - 2 ; if ( flags & RE_FLAGS_WIDE ) character_size = 2 ; else character_size = 1 ; } <S2SV_ModStart> RE_FLAGS_BACKWARDS ) { int max_bytes_matched = ( int ) yr_min ( input_backwards_size, RE_SCAN_LIMIT ) ; <S2SV_ModStart> input_incr ; } if ( flags & RE_FLAGS_BACKWARDS ) { <S2SV_ModStart> RE_FLAGS_BACKWARDS ) { max_bytes_matched = ( int ) yr_min ( input_backwards_size, RE_SCAN_",0
834,"<S2SV_ModStart> * returnrate, RATE_DISTORTION * returndistortion, int * returnintra, int * returnintra_skip <S2SV_ModStart>, best_sse = ( unsigned int ) INT_MAX, best_rd_sse = ( unsigned int ) INT_MAX, <S2SV_ModEnd> best_rd_sse = INT_MAX <S2SV_ModStart>, best_rd_sse = ( unsigned int ) INT_MAX, <S2SV_ModEnd> best_sse = INT_MAX <S2SV_ModStart> INT_MAX ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> common. use_highbitdepth ) { unsigned int zero_mv_sse = ( unsigned int ) INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; } else { unsigned int zero_mv_sse = ( unsigned int ) INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; unsigned int zero_mv_sse = ( unsigned int ) INT_MAX, best_rd_sse = INT_MAX ; unsigned int zero_mv_sse = ( unsigned int ) INT_MAX, best_sse = INT",0
835,"<S2SV_ModStart> svm, MC_VECTOR ) ; set_exception_intercept ( svm, DB_VECTOR",0
836,<S2SV_ModStart> goto error ; if ( statbuf. st_size < 0 ) { h -> size = 0 ; goto error ; } <S2SV_ModStart>. st_size ; if ( h -> size <= 0 ) { h -> size = 0 ; goto error ; },0
837,"<S2SV_ModStart> sst, const cdf_directory_t * root_storage <S2SV_ModEnd> ) { cdf_summary_info_header_t <S2SV_ModStart> break ; } if ( root_storage ) { <S2SV_ModStart> = cdf_clsid_to_mime ( root_storage -> d_storage_uuid <S2SV_ModEnd>, clsid2desc ) <S2SV_ModStart> - 2 ; } <S2SV_ModStart>, count, root_storage <S2SV_ModEnd> ) ; free",1
838,"<S2SV_ModStart> u1_profile_idc, u1_level_idc, u1_seq_parameter_set_id ; WORD32 u4_num_reorder_frames ; WORD32 i4_pic_wd, i4_cropped_wd, u4_cropped_ht ; UWORD32 u4_temp ; WORD32 pic_height_in_map_units_minus1 ; WORD32 u4_num_reorder_frames ; u4_num_reorder_frames = 0 ; i4_pic_wd = 0 ; u4_pic_ht = 0 ; u4_crop_offset_y = 0 ; u4_crop_offset_uv = 0 ; u4_num_reorder_frames = ih264d_get_num_reorder_frames ( ps_bitstrm, i4_pic_wd, u4_pic_ht, u4_num_reorder_frames, u4_num_reorder_frames, u4_num_reorder_frames, u4_num_reorder_frames, u4_num_reorder_frames, u4_num_reorder_frames",0
839,<S2SV_ModStart> -> length ) ; if ( err ) return - EFAULT,1
840,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; const vpx_svc_parameters_t * const svc_params = <S2SV_ModEnd> va_arg ( args <S2SV_ModStart> ; if ( svc_params <S2SV_ModEnd> == NULL ) <S2SV_ModStart> return VPX_CODEC_INVALID_PARAM ; <S2SV_ModEnd> cpi -> svc <S2SV_ModStart>. spatial_layer_id = svc_params -> spatial_layer ; cpi -> svc. temporal_layer_id = svc_params -> temporal_layer ; cpi -> lst_fb_idx = params -> lst_fb_idx ; cpi -> gld_fb_idx = params -> gld_fb_idx ; cpi -> alt_fb_idx = params -> alt_fb_idx ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ; set_encoder_config ( & ctx -> oxcf, & ctx -> extra_cfg ) ; set_encoder_config (",0
841,"<S2SV_ModStart> if ( prev && <S2SV_ModEnd> ( ntohs ( <S2SV_ModStart> ipv6_hdr ( skb ) -> payload_len + offset ) > IPV6_MAXPLEN ) { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_INHDRERRORS ) ; icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - skb_network_header ( skb ) - nhoff ) ) ; goto err ; } if ( <S2SV_ModEnd> ( ntohs ( <S2SV_ModStart> ( skb ) -> payload_len + offset ) > IPV6_MAXPLEN ) { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_INHDRERRORS ) ; icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - skb_network_header ( skb ) - nhoff",0
842,"<S2SV_ModStart> out ) { <S2SV_ModEnd> uint16 bitspersample, <S2SV_ModStart> samplesperpixel ; uint16 <S2SV_ModEnd> input_compression, input_photometric <S2SV_ModStart> input_compression, input_photometric ; uint32 width, length ; uint16 bitspersample = TIFFGetFieldDefaulted ( in, TIFFTAG_BITSPERSAMPLE, & bitspersample ) ; uint32 length = TIFFGetFieldDefaulted ( in, TIFFTAG_IMAGELENGTH, & length ) ; CopyField ( TIFFTAG_BITSPERSAMPLE, bitspersample ) ; CopyField ( TIFFTAG_SAMPLESPERPIXELEL, samplesperpixel ) ; if ( bitspersample!= ( uint16 ) - 1 ) { TIFFSetField ( out, TIFFTAG_BITSPERSAMPLE, bitspersample ) ; TIFFSetField ( out, TIFFTAG_BITSPERSAMPLE, bitspersample ) ; TIFFSetField ( out, TIFFTAG_BITSPERSAMPLE, samplesperpixel ) ; } else if ( bitspersample == ( uint16 ) - 1 ) { TIFFSetField ( out, TIFFTAG_BITSPERSAMPLE, samplesperpixel ) ; TIFFSetField ( out, TIFFTAG_BITSPERSAMPLE, bitspersample )",0
843,"<S2SV_ModStart> a ) { if (! ( a -> flags & ARCHIVE_EXTRACT_LSTAT ) ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else { if ( S_ISLNK ( st. st_mode ) ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED",0
844,"<S2SV_ModStart> ; if ( safe_mount ( hostpath, path, 0, MS_BIND, NULL, rootfs -> path? rootfs -> mount : <S2SV_ModEnd> NULL )!=",1
845,"<S2SV_ModStart> ; unsigned int entries_count <S2SV_ModEnd> ; bh = <S2SV_ModStart> ibh ) { entries_count = udf_read_ptagged ( inode -> i_sb, & iinfo -> i_location, 0, & ident ) ; if ( entries_count > 1 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> inode\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( entries_count > 1 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> inode\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( entries_count > 1 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> inode\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( entries_count > 1 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> inode\\n"", inode -> i_ino ) ; make_bad",0
846,"<S2SV_ModStart> = get_uv_tx_size ( mbmi, block_size <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> filter_level, w ) ; index += 8 ; } } * above_y |= above_prediction_mask [ block_size ] << shift_y ; * above_uv |= above_prediction_mask_uv [ block_size ] << shift_uv ; * left_y |= left_prediction_mask_uv [ block_size ] << shift_uv ; if ( mbmi -> skip && is_inter_block ( mbmi ) ) { uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_y = & lfm -> int_4x4_y [ tx_size_y ]",0
847,"<S2SV_ModStart> dst_size ) { uint16_t namelen ; <S2SV_ModStart> data < data_end <S2SV_ModEnd> ) { len <S2SV_ModStart> if ( len >= data_end <S2SV_ModEnd> - data ; <S2SV_ModStart> - 1 ; namelen = ff_amf_tag_size ( data, data_end ) ; if ( len < 0 ) len = data_end - data ; data += len ; } for ( ; ; ) { int size = bytestream_get_be16 ( & data ) ; if (! size ) break ; if ( size == namelen &&! memcmp ( data, name, namelen ) ) { switch ( * data ++ ) { case AMF_DATA_TYPE_NUMBER : snprintf ( dst, dst_size, ""%g"", av_int2double ( AV_RB64 ( data ) ) ) ; break ; case AMF_DATA_TYPE_BOOL : snprintf ( dst, dst_size, ""%s"", * data ) ; break ; case AMF_DATA_TYPE_STRING : len = ff_amf_tag_size ( data, data_end ) ; if ( len < 0 ) len = data_end - data ; data += len ; }",0
848,"<S2SV_ModStart> ( ) ; if ( strlen ( t1_line_array ) >= T1_MAX_LINE_LEN ) { t1_error ( ""t1_check_unusual_charstring"" ) ; t1_log ( 0, ""t1_check_unusual_charstring"" ) ; t1_log ( 0, ""t1_check_unusual_charstring"" ) ; t1_line_ptr = eol ( t1_line_array ) ; } } else { t1_error ( ""t1_check_unusual_charstring"" ) ; t1_line_ptr = eol ( t1_line_array ) ; t1_log ( 0, ""t1_check_unusual_charstring"" ) ; t1_getline ( ) ; if ( strlen ( t1_buf_array ) >= T1_MAX_LINE_LEN ) { t1_error ( ""t1_check_unusual_charstring"" ) ; t1_line_ptr = eol ( t1_line_array ) ; t1_line_ptr = eol ( t1_line_array ) ;",0
849,"<S2SV_ModStart> mq_flush_lock, flags ) ; fq -> flush_rq = flush_rq",0
850,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
851,"<S2SV_ModStart> NULL ; return sub -> sub [ i ]. start = prog -> start ; if ( prog -> flags & eflags ) { if ( sub -> sub [ i ]. sp ) strcpy ( sub -> sub [ i ]. sp, prog -> start + prog -> nsub ) ; } else if ( sub -> sub [ i ]. sp ) strcpy ( sub -> sub [ i ]. sp, prog -> start + prog -> nsub ) ; if (! match ( prog -> start, sp, sp + prog -> nsub, sub -> sub [ i ]. flags | eflags, sub ) ) { if ( sub -> sub [ i ]. sp ) strcpy ( sub -> sub [ i ]. sp, prog -> start ) ; else strcpy ( sub -> sub [ i ]. ep, prog -> flags | eflags, sub ) ; } else { if ( prog -> flags & eflags ) strcpy ( sub -> sub [ i ]. sp, prog -> flags ) ; else strcpy ( sub -> sub [ i ]. ep, prog ) ; } else { if ( sub -> sub [ i ]. sp ) strcpy ( sub -> sub",0
852,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF <S2SV_ModStart> / 2 ; if (! <S2SV_ModStart>, cc ) ) return 0 <S2SV_ModStart> wc ) ; return 1 ;",1
853,"<S2SV_ModStart> ) ) { if (! smatch ( option, "" <S2SV_blank> =\\t,"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Invalid <S2SV_blank> SessionCookie <S2SV_blank> option"" ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim <S2SV_ModEnd> ( ovalue,",0
854,"<S2SV_ModStart> __be32 daddr ; struct ip_options_rcu * inet_opt ; <S2SV_ModStart> return 0 ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> inet_daddr ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr <S2SV_ModStart> -> inet_daddr ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr",0
855,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
856,"<S2SV_ModStart> * mgr_hdl ; <S2SV_ModEnd> memset ( s_path <S2SV_ModStart> ( c_path ) <S2SV_ModEnd> ) ; switch <S2SV_ModStart> ( c_path, ""%s%s%d_C_XXXXXX"" <S2SV_ModEnd>, HSM_FM_SCK_PREFIX, <S2SV_ModStart> hdl -> instance <S2SV_ModEnd> ) ; if",1
857,"<S2SV_ModStart> == NULL || ( void * ) pReplyData!= ( effect_param_t * ) pCmdData ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( <S2SV_ModStart> NULL || ( void * ) pReplyData!= ( effect_param_t * ) pCmdData ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( * replySize < sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } effect_param_t * p = ( effect_param_t * ) pCmdData ; if ( * replySize < sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; }",0
858,"<S2SV_ModStart> ""`%s\'"", option ) ; page_geometry = DestroyString ( page_geometry",1
859,"<S2SV_ModStart> = 0 ; memset ( & src_info, 0, sizeof ( src_info ) ) ;",0
860,<S2SV_ModStart> berval ) ; if (! ret [ j ] ) { err = ENOMEM ; goto cleanup ; },0
861,"<S2SV_ModStart> OP_ENDCATCH ) ; emit ( J, F, OP_ENDTRY ) ;",1
862,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_row_idx <S2SV_ModStart> return ; } LIBXSMM_ASSERT ( 0!= l_row && 0!= l_column ) ;",1
863,<S2SV_ModStart> 0x02 ) ; if ( crgram_len > SC_MAX_APDU_BUFFERSIZE - 1 ) { r = - 1 ; break ; },0
864,"<S2SV_ModStart> uint8 result ; uint32 <S2SV_ModEnd> length ; STREAM <S2SV_ModStart> STREAM s ; struct stream packet <S2SV_ModStart> return False ; packet = * s ; <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> connect <S2SV_blank> id <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> connect <S2SV_blank> id <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
865,"<S2SV_ModStart> status ) { if ( status == NULL ) { status = ""UNKNOWN_REASON"" ; retval = KRB5_KDC_REP_INCOMPLETE ; } else if ( status == ""UNKNOWN_REASON"" ) { status = ""UNKNOWN_REASON"" ; } else if ( status == ""UNKNOWN_REASON"" ) { retval = KRB5_KDC_REP_INCOMPLETE ; } else if ( status == ""UNKNOWN_REASON"" ) { status = ""UNKNOWN_REASON"" ; } else if ( status == ""UNKNOWN_REASON"" ) { if ( status == ""UNKNOWN_REASON"" ) retval = KRB5_KDC_REP_INCOMPLETE ; } else if ( status == ""UNKNOWN_REASON"" ) { status = ""UNKNOWN_REASON"" ; } else if ( status == ""UNKNOWN_REASON"" ) { retval = KRB5_KDC_REP_INCOMPLETE ; } else if ( status == ""UNKNOWN_REASON"" ) { status = ""UNKNOWN_REASON"" ; } else if ( status == ""UNKNOWN_REASON"" ) retval = KRB5_KDC_REP_INCOMPLETE ; }",0
866,<S2SV_ModStart> { if ( ( len > MAX_XML_NAME_LEN - 1 ) || ( ( len > MAX_XML_NAME_LEN - 1 ) || ( ( len > MAX_XML_NAME_LEN - 1 ) ) || ( ( len > MAX_XML_NAME_LEN - 1 ) || ( ( len > MAX_XML_NAME_LEN - 1 ) ) || ( ( len > MAX_XML_NAME_LEN - 1 ) ) || ( ( len > MAX_XML_NAME_LEN - 1 ) ) || ( ( len > MAX_XML_NAME_LEN - 1 ) && ( ( len > MAX_XML_NAME_LEN - 1 ) ) || ( ( len > MAX_XML_NAME_LEN - 1 ) ) ) || ( ( len > MAX_XML_NAME_LEN - 1 ) ) || ( ( len > MAX_XML_NAME_LEN - 1 ) ) ) || ( ( len > MAX_XML_NAME_LEN - 1 ) ) || ( ( len > MAX_XML_NAME_LEN - 1 ) ) || ( ( len > MAX_XML_NAME_LEN - 1 ) && ( len > MAX_XML_NAME_LEN - 1 ) ),0
867,"<S2SV_ModStart> ( ret ) { dev_err ( & vsi -> back -> dev, ""Invalid <S2SV_blank> MAC <S2SV_blank> VLAN <S2SV_blank> list: <S2SV_blank> %d\\n"", ret ) ; return ret ; } if ( ctxt. uplink_seid ) { dev_err ( & vsi -> back -> dev, ""Invalid <S2SV_blank> Uplink <S2SV_blank> SEID: <S2SV_blank> %d\\n"", ctxt. uplink_seid ) ; return ret ; } <S2SV_ModEnd> ch = i40e_channel_new <S2SV_ModStart> ( ret ) { dev_err ( & vsi -> back -> dev, ""Invalid <S2SV_blank> MAC <S2SV_blank> VLAN <S2SV_blank> list: <S2SV_blank> %d\\n"", ret ) ; return ret ; } if ( ctxt. uplink_seid ) { dev_err ( & vsi -> back -> dev, ""Invalid <S2SV_blank> Uplink <S2SV_blank> SEID: <S2SV_blank> %d\\n"", ctxt. uplink_seid ) ; return ret ; }",0
868,<S2SV_ModStart> * rsize >= 18 <S2SV_ModEnd> && rdesc [,1
869,<S2SV_ModStart> & new_map ) <S2SV_ModEnd> ) goto out <S2SV_ModStart> lower_first ; } ret = sort_idmaps ( & new_map ) ; if ( ret < 0 ) goto out ;,1
870,"<S2SV_ModStart> ; } } eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; switch ( action [ 0 ] ) { case 'i' : if ( cmd_cb ( core_ptr, ""ic"", NULL, 0 ) < 0 ) { send_msg ( g, ""E01"" ) ; return - 1 ; } return send_msg ( g, ""E01"" ) ; } <S2SV_ModStart> ; } } eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; switch ( action [ 0 ] ) { case 'i' : if ( cmd_cb ( core_ptr, ""ic"", NULL, 0 ) < 0 ) { send_msg ( g, ""E01"" ) ; return - 1 ; } return send_msg ( g, ""E01"" ) ; } eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; switch ( action [ 0 ] ) { case's' : if ( cmd_cb ( core_ptr, ""ds"", NULL, 0 ) < 0 ) { send_msg ( g, ""E01"" ) ; return - 1 ; } return send_msg ( g, ""E01"" ) ;",0
871,"<S2SV_ModStart> sr ) { <S2SV_ModEnd> uint16_t StructSize ; <S2SV_ModStart> ) ; } smb_ofile_flush ( sr, <S2SV_ModEnd> sr -> fid_ofile <S2SV_ModStart> sr -> fid_ofile <S2SV_ModEnd> ) ; (",1
872,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
873,<S2SV_ModStart> ; # if CONFIG_VP9_HIGHBITDEPTH if ( pbi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( pbi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( pbi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( pbi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( pbi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( pbi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( pbi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( pbi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( pbi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( pbi -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( pbi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( pbi,0
874,"<S2SV_ModStart> addrtype = TIPC_ADDR_ID ; memset ( & addr -> addr, 0, sizeof ( addr -> addr ) )",1
875,"<S2SV_ModStart> ( user_alloc && ( <S2SV_ModStart> PAGE_SIZE - 1 ) ) ||! access_ok ( VERIFY_WRITE, mem -> userspace_addr, mem -> memory_size",1
876,<S2SV_ModStart> NULL ) ; } quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
877,"<S2SV_ModStart> ; if ( tmp_line_len >= 1 && <S2SV_ModStart> ; if ( tmp_line_len >= 1 && <S2SV_ModStart> ; if ( tmp_line_len >= 1 && <S2SV_ModStart> ; } } if ( tmp_line_len >= 1 && <S2SV_ModStart> ; if ( tmp_line_len >= 1 && <S2SV_ModStart> ; if ( tmp_line_len >= 1 && <S2SV_ModStart> ; if ( tmp_line_len >= 1 && <S2SV_ModStart> ; if ( tmp_line_len >= 1 && <S2SV_ModStart> ; } } if ( tmp_line_len >= 1 && <S2SV_ModStart> ; if ( tmp_line_len >= 1 && <S2SV_ModStart> ; if ( tmp_line_len >= 1 && <S2SV_ModStart> ; if ( tmp_line_len >= 1 && <S2SV_ModStart> ; } } if ( tmp_line_len >= 1 && <S2SV_ModStart> ; if ( tmp_line_len >= 1 && <S2SV_ModStart> ; if ( tmp_line_len >= 1 && php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Transfer-Encoding <S2SV_blank> limit <S2SV_blank> reached, <S2SV_blank> aborting"" ) ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Transfer-Encoding <S2SV_blank> limit <S2SV_blank> reached, <S2SV_blank>",0
878,"<S2SV_ModStart> len ) { <S2SV_ModEnd> if ( len <S2SV_ModStart> ) { PyObject <S2SV_ModEnd> * u ; <S2SV_ModStart> * p ; Py_ssize_t i ; PyObject * w ; int kind ; void * data ; Py_ssize_t len, i ; w = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) { Py_DECREF ( w ) ; return NULL ; } kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = p - buf ; assert ( p - buf <= Py_SIZE ( u ) ) ; assert ( p - buf <= Py_SIZE ( u ) ) ; Py_DECREF ( w ) ; } else { * p ++ = * s ++ ; } } if ( * s & 0x80 ) { PyObject * w ; int kind ; data = PyUnicode_DATA ( w ) ; len = PyUnicode_GET_LENGTH ( w ) ; for ( i = 0 ; i < len ; i ++ ) { Py_UCS4 chr = PyUnicode_READ ( kind, data, len ) ; p += 10 ; } assert ( p - buf <= Py_SIZE ( u ) )",0
879,"<S2SV_ModStart> 0 ) { if ( user_sid_size > ( ( record_data_size - 4 ) - user_sid_offset ) ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_RUNTIME, LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS, ""%s: <S2SV_blank> user <S2SV_blank> SID <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds."", function ) ; goto on_error ; } if ( <S2SV_ModStart> 0 ) { if ( strings_size > ( ( record_data_size - 4 ) - strings_offset ) ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_RUNTIME, LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS, ""%s: <S2SV_blank> strings <S2SV_blank> size <S2SV_blank> value <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds."", function ) ; goto on_error ; } <S2SV_ModStart> 0 ) { if ( strings_size > ( ( record_data_size - 4 ) - strings_offset ) ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_RUNTIME, LIBCERROR_RUNTIME_ERROR_VALUE",0
880,"<S2SV_ModStart> WaveHeader WaveHeader ; int format_chunk = 0 ; <S2SV_ModStart>, format ; if ( format_chunk ++ ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",1
881,"<S2SV_ModStart> char * buff ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } buff",0
882,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ;,0
883,<S2SV_ModStart> ~ SNDRV_TIMER_IFLG_RUNNING ; list_del_init ( & timeri -> ack_list ) ; list_del_init ( & timeri -> active_list ) ;,1
884,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart>, setimes, targisdir, wrerrno = 0 ; <S2SV_ModEnd> char ch, <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ; off_t size <S2SV_ModStart> ( off_t, 0 <S2SV_ModEnd> ) ) SCREWUP <S2SV_ModStart> ""unexpected <S2SV_blank> off_t/time_t <S2SV_blank> size"" ) ; if ( stat ( targ, & stb )!= 0 || <S2SV_ModEnd> S_ISDIR ( stb <S2SV_ModStart>. st_mode ) <S2SV_ModEnd> ) fatal ( <S2SV_ModStart> ""could <S2SV_blank> not <S2SV_blank> expand <S2SV_blank> pattern"" ) ; if ( Tflag ) { if ( brace_expand ( src, & patterns, & npatterns )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> expand <S2SV_blank> pattern"", __func__ ) ; } if ( targetshouldbedirectory ) verifydir ( targ ) ; else if ( Tflag ) { if ( brace_expand ( patterns, & npatterns, & tv )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> expand <S2SV_blank> patterns"", __func__ ) ; } if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> expand <S2SV_blank> patterns"", __func__ ) ; } if",0
885,"<S2SV_ModStart> else if ( chanacs_source_has_flag ( mc, si, CA_FOUNDER ) ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> not <S2SV_blank> restricted <S2SV_blank> to <S2SV_blank> all <S2SV_blank> channels."" ), channel ) ; return ; } if ( <S2SV_ModStart> else if ( chanacs_source_has_flag ( mc, si, CA_CLEAR ) ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> restricted <S2SV_blank> to <S2SV_blank> all <S2SV_blank> channels."" ), channel ) ; return ; } if ( <S2SV_ModStart> else if ( chanacs_source_has_flag ( mc, si, CA_LIST <S2SV_ModEnd> ) && myentity_find_ext <S2SV_ModStart> else if ( chanacs_source_has_flag ( mc, si, CA_CLEAR <S2SV_ModEnd> ) && myentity_find_ext <S2SV_ModStart> else if ( chanacs_source_has_flag ( mc, si, CA_CLEAR <S2SV_ModEnd> ) && myentity_find_ext <S2SV_ModStart> else if ( chanacs_source_has_flag ( mc, si, CA_FOUNDER ) ) { command_fail ( si",0
886,<S2SV_ModStart> -> buffer ; if (! ctx -> gf128 ) return - ENOKEY ;,1
887,"<S2SV_ModStart> goto error ; ret = avio_get_str16le ( pb, desc_len, ""type"", & time_base, sizeof ( time_base ) ) ; if ( ret < 0 ) goto error ; ret = avio_get_str16le ( pb, desc_len, desc, sizeof ( desc ) ) ; if ( ret < 0 ) goto error ; ret = avio_get_str16le ( pb, desc_len, desc, sizeof ( desc ) ) ; if ( ret < 0 ) goto error ; ret = avio_get_str16le ( pb, desc_len, desc, sizeof ( desc ) ) ; if ( ret < 0 ) goto error ; ret = avio_get_str16le ( pb, desc_len, desc, sizeof ( desc ) ) ; if ( ret < 0 ) goto error ; ret = avio_get_str16le ( pb, desc_len, desc, sizeof ( desc ) ) ; if ( ret < 0 ) goto error ; ret = avio_get_str16le ( pb, desc_len, desc, sizeof ( desc ) ) ; if ( ret <",0
888,"<S2SV_ModStart> null_server ; int <S2SV_ModEnd> need_error_free = 0 <S2SV_ModStart> retval ) ; <S2SV_ModEnd> if ( flags <S2SV_ModStart>. data, sendauth_version ) ) { if (! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } } if ( flags & KRB5_RECVAUTH_BADAPPLVERS ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } <S2SV_ModEnd> if ( version <S2SV_ModStart>. data, appl_version ) ) { if (! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } } if ( version &&! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; } if (! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } } if (! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; } if ( flags & KRB5_RECVAUTH_SKIP_TICKETS ) { if (! problem ) { problem = KRB5_RECVAUTH_SKIP_TICKETS ; response = flags & K",0
889,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
890,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; } ret",1
891,<S2SV_ModStart> dptr ++ = ROSE_CALL_REQ_ADDR_LEN_VAL <S2SV_ModEnd> ; memcpy (,1
892,<S2SV_ModStart> = new_ns ; new_ns -> mounts ++ ;,1
893,<S2SV_ModStart> = 0 ; if ( ( width & 0xfc )!= 0 ) width = 16 - ( width & 0xfc ) ; if ( ( height & 0xfc )!= 0 ) height = 16 - ( height & 0xfc ) ; if ( ( width & 0xf0 )!= 0 ) width = 16 - ( width & 0xf0 ) ; if ( ( height & 0xf0 )!= 0 ) height = 16 - ( height & 0xf0 ) ; if ( ( width & 0xf0 )!= 0 ) width = 16 - ( width & 0xf0 ) ; if ( ( height & 0xf0 )!= 0 ) height = 16 ; if ( ( width & 0xf0 )!= 0 ) width = 16 - ( width & 0xf0 ) ; if ( ( height & 0xf0 )!= 0 ) height = 16 - ( height & 0xf0 ) ; if ( ( width & 0xf0 )!= 0 ) width = 16 - ( width & 0xf0 ) ; if ( ( height & 0xf0 )!= 0 ) height = 16 - ( height & 0xf0 ) ; if ( ( width & 0xf0 )!= 0 ) width = 16 ; if ( ( height & 0,0
894,<S2SV_ModStart> ; zip_object_handlers. get_gc = php_zip_get_gc ; zip_object_handlers.,1
895,<S2SV_ModStart> case RXE_MEM_TYPE_FMR : if <S2SV_ModEnd> ( iova < <S2SV_ModStart> mem -> iova || length > mem -> length || iova > <S2SV_ModEnd> mem -> iova <S2SV_ModStart> mem -> length - length ) return - EFAULT ; return <S2SV_ModEnd> 0 ; default,1
896,"<S2SV_ModStart> ( ndo, ""%s"", icmp6_tstr <S2SV_ModEnd> ) ) ;",0
897,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",1
898,<S2SV_ModStart> sent = 0 <S2SV_ModEnd> ; smb_msg.,1
899,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> buffer_pipe_buf_get ( struct <S2SV_ModStart> -> private ; if ( ref -> ref > INT_MAX / 2 ) return false ; <S2SV_ModStart> ref ++ ; return true ;,1
900,<S2SV_ModStart> fs -> clusters + <S2SV_ModEnd> 1 ) get_fat,1
901,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
902,<S2SV_ModStart> sk_nulls_node ) ; sk_nulls_node_init ( & sk -> sk_nulls_node ) ;,1
903,<S2SV_ModStart> if (! ps_dec -> ps_dec_err_status -> u1_err_flag ) { ps_dec -> ps_dec_err_status -> u1_err_flag |= ERROR_INV_SLICE ; ps_dec -> ps_dec_err_status -> u1_err_flag |= ERROR_INV_SLICE ; ps_dec -> ps_dec_err_status -> u1_err_flag &= ~ ERROR_INV_SLICE ; ps_dec -> ps_dec_err_status -> u1_err_flag = 0 ; ps_dec -> ps_dec_err_status -> u1_err_flag |= ERROR_INV_SLICE ; ps_dec -> ps_dec_err_status -> u1_err_flag |= ERROR_INV_SLICE ; ps_dec -> ps_dec_err_status -> u1_err_flag &= ~ ERROR_INV_SLICE ; ps_dec -> ps_dec_err_status -> u1_err_flag = 0 ; ps_dec -> ps_dec_err_status -> u1_err_flag,0
904,<S2SV_ModStart> (! mm ||! mm -> env_end,1
905,"<S2SV_ModStart> inode * inode, int relocated <S2SV_ModStart> inode, 0, relocated <S2SV_ModStart>, inode, relocated <S2SV_ModEnd> ) ; if <S2SV_ModStart>, inode, relocated <S2SV_ModEnd> ) ; }",0
906,<S2SV_ModStart> * inotify_new_group ( <S2SV_ModEnd> unsigned int max_events <S2SV_ModStart> -> inotify_data. fa = NULL <S2SV_ModEnd> ; group -> <S2SV_ModStart> -> inotify_data. user = get_current_user ( ) ; if ( atomic_inc_return ( & group -> inotify_data. user -> inotify_devs ) > inotify_max_user_instances ) { fsnotify_put_group ( group ) ; return ERR_PTR ( - EMFILE ) ; } <S2SV_ModEnd> return group ;,1
907,<S2SV_ModStart> [ p ] && in -> linesize [ p ],1
908,"<S2SV_ModStart> ) ; } if ( pcount > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, ( int ) ( MaxAllocSize / sizeof ( Pairs ) ) ) ) ) ;",0
909,<S2SV_ModStart> screen -> buffers [ <S2SV_ModEnd> 1 ] ),0
910,"<S2SV_ModStart> SCALAR_VALUE ) { coerce_reg_to_size ( & <S2SV_ModStart>, size ) ; coerce_reg_to_size ( & <S2SV_ModStart>, size ) ;",0
911,"<S2SV_ModStart> uint16 strip, nstrips ; uint32 rows = 0 ; if ( TIFFGetFieldDefaulted ( in, TIFFTAG_ROWSPERSTRIP, & rows ) == 0 ) { TIFFError ( """", ""TIFF <S2SV_blank> scanline <S2SV_blank> size <S2SV_blank> is <S2SV_blank> zero!"" ) ; return 0 ; } nstrips = TIFFNumberOfStrips ( in ) ; stripsize = TIFFStripSize ( in ) ; if ( nstrips == 0 ) { TIFFError ( """", ""TIFF <S2SV_blank> number <S2SV_blank> of <S2SV_blank> strips <S2SV_blank> is <S2SV_blank> zero!"" ) ; return 0 ; }",0
912,<S2SV_ModStart> base_name ) ; char need_to_append_dot ; struct search_domain * dom ; if (! base_len ) return NULL ; <S2SV_ModEnd> need_to_append_dot = base_name <S2SV_ModStart> : 1 ; <S2SV_ModEnd> for ( dom,1
913,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
914,<S2SV_ModStart> goto out ; <S2SV_ModEnd> err = -,1
915,"<S2SV_ModStart> one, offset <S2SV_ModEnd> ; ssize_t count <S2SV_ModStart> ( number_pixels * MagickMax ( number_planes_filled, number_colormaps ) ) <S2SV_ModStart> ( number_pixels * MagickMax ( number_planes_filled, number_colormaps ) ) ; if ( ( number_pixels * MagickMax ( number_planes_filled, number_planes_filled ) ) > pixel_info_length ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; number_pixels = ( number_pixels * MagickMax ( number_pixels, number_planes_filled ) ) ; pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixel_info ) ) ; if ( pixel_info!= ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixel_info ) ; if ( pixel_info!= ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixel_info ) ) ; if ( exception!= ( ExceptionInfo * ) NULL ) ThrowReaderException ( CorruptImageError, ""ImproperImage",0
916,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> UINT32 originalSize ; if (! context ) return FALSE ; <S2SV_ModStart> == 0 ) { if ( context -> priv -> PlaneBuffersLength < originalSize ) return FALSE ; <S2SV_ModStart> 0xFF ) ; } <S2SV_ModStart> < originalSize ) { if (! <S2SV_ModStart> i ], context -> priv -> PlaneBuffersLength, originalSize ) ) return FALSE ; } else { if ( context -> priv -> PlaneBuffersLength < originalSize ) return FALSE ; <S2SV_ModEnd> CopyMemory ( context <S2SV_ModStart> originalSize ) ; } <S2SV_ModStart> planeSize ; } return TRUE ;",1
917,<S2SV_ModStart> policy ) { if (! inode_owner_or_capable ( inode ) ) return - EACCES ;,1
918,"<S2SV_ModStart> { httpSetHostName ( state <S2SV_ModEnd>, stok ( <S2SV_ModStart> ( value ), "" <S2SV_blank> \\t,"", NULL ) ) ; httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } else if ( value ) { httpSetHostName ( state -> host, stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) ; httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } else {",0
919,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
920,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) -> iif ) ; * addr_len = sizeof ( * sin6,1
921,"<S2SV_ModStart> if (! job_id ||! prev_hash ||! coinbase1 ||! coinbase2 ||! bbversion ||! nbit ||! ntime ) { if ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ; goto out ; } cg_wlock ( & pool -> data_lock ) ; job_id = json_array_string ( val, 0 ) ; prev_hash = json_array_string ( val, 1 ) ; bbversion = json_array_string ( val, 2 ) ; nbit = __json_array_string ( val, 3 ) ; ntime = json_array_string ( val, 4 ) ; if (! json_is_true ( json_array_get ( val, 8 ) ) ) { if (! job_id ) free ( prev_hash ) ; if (! coinbase1 ||! bbversion ||! nbit ||! ntime ) { if ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ; if ( ntime )",0
922,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
923,"<S2SV_ModStart> size ) { size_t res ; if ( check_mul_overflow ( num, size, & res ) ) abort ( ) ; <S2SV_ModStart> = malloc ( res <S2SV_ModEnd> ) ; if <S2SV_ModStart> { memset ( res <S2SV_ModEnd>, '\\0',",0
924,<S2SV_ModStart> cfq_exit ( ioc ) ; ioc -> nr_tasks -- ; if (! ioc -> nr_tasks ) { atomic_dec ( & ioc -> nr_tasks ) ; exit_io_context ( ioc ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
925,"<S2SV_ModStart> unused ) { _Py_IDENTIFIER ( __func__ ) ; <S2SV_ModStart> * dict = _PyObject_GetAttrId <S2SV_ModEnd> ( self, <S2SV_ModStart>, & PyId___dict__, NULL ) ; if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) return NULL ; else return NULL ; } <S2SV_ModEnd> if ( dict <S2SV_ModStart> { res = Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; res = Py_BuildValue ( ""O()"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res <S2SV_ModEnd> ; } <S2SV_null>",0
926,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
927,"<S2SV_ModStart> -> private_data ; <S2SV_ModEnd> u32 flags = <S2SV_ModStart> arg ) ; return __perf_event_ioctl ( event, cmd, arg <S2SV_ModEnd> ) ; case <S2SV_ModStart> case PERF_EVENT_IOC_PERIOD : { u64 period = perf_event_period ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & period, sizeof ( period ) ) ) return - EFAULT ; return 0 ; } case PERF_EVENT_ID : { u64 id = primary_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; return 0 ; } case PERF_EVENT_SET_FILTER : return perf_event_set_filter ( event, filter ) ; default : return - ENOTTY ; } <S2SV_ModEnd> return perf_event_for_each_child (",0
928,<S2SV_ModStart> sacked_out ) ; if ( newly_acked_sacked <= 0 || WARN_ON_ONCE (! tp -> prior_cwnd ) ) return ;,1
929,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> ] ) ; FRAME_COUNTS * counts = cm -> counts ; if ( counts ) ++ counts -> <S2SV_ModEnd> uv_mode [ y_mode",0
930,<S2SV_ModStart> mask ) { struct skcipher_tfm * tfm = NULL ; if (! tfm ) { tfm = crypto_alloc_skcipher ( type ) ; if (! tfm ) return NULL ; } return tfm ;,0
931,<S2SV_ModStart> EINVAL ; } if ( cmd_q -> ccp -> vdata -> security!= NULL ) { if ( cmd_q -> ccp -> vdata -> security!= NULL ) { if ( cmd_q -> ccp -> vdata -> security!= NULL ) { if ( cmd_q -> ccp -> vdata -> security!= NULL ) { if ( cmd_q -> ccp -> vdata -> security!= NULL ) { if ( cmd_q -> ccp -> vdata -> security!= NULL ) { if ( cmd_q -> ccp -> vdata -> security!= NULL ) { if ( cmd_q -> ccp -> vdata -> security!= NULL ) { if ( cmd_q -> ccp -> vdata -> security!= NULL ) { if ( cmd_q -> ccp -> vdata -> security!= NULL ) { if ( cmd_q -> ccp -> vdata -> security!= NULL ) { if ( cmd_q -> ccp -> vdata -> security!= NULL ) { if ( cmd_q -> ccp -> vdata -> security!= NULL ) { if ( cmd_q -> ccp -> vdata -> security!= NULL ) { if ( cmd_q -> ccp -> v,0
932,"<S2SV_ModStart> c -> tile_width <S2SV_ModEnd>, 16 ) <S2SV_ModStart>, 16 ) * 3",1
933,"<S2SV_ModStart> iv ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
934,"<S2SV_ModStart> jas_alloc3 ( bufsize, JPC_QMFB_COLGRPSIZE, sizeof ( jpc_fix_t ) ) ) ; } n = numrows - hstartcol ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr += 2 * stride ; srcptr += stride ; } dstptr += stride ; n = numrows - hstartcol ; while ( n -- > 0 ) { jas_alloc3 ( bufsize, JPC_QMFB_COLGRPSIZE, sizeof ( jpc_fix_t ) ) ) ; if (! ( buf = jas_alloc3 ( bufsize, JPC_QMFB_COLGRPSIZE, sizeof ( jpc_fix_t ) ) ) ) { abort ( ) ; }",0
935,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
936,"<S2SV_ModStart> p ) { return <S2SV_ModEnd> chdlc_print ( ndo <S2SV_ModStart>, p, h -> len <S2SV_ModEnd> ) ; }",1
937,<S2SV_ModStart> (! rc <S2SV_ModEnd> && tcon ),1
938,<S2SV_ModStart> -> len && SKB_EXT_ERR ( skb ) -> opt_stats <S2SV_ModEnd> ) put_cmsg (,1
939,"<S2SV_ModStart> ) ) ; raptor_sax2_set_option ( rdf_xml_parser -> sax2, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES, NULL, RAPTOR_OPTIONS_GET_NUMERIC ( rdf_parser, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES ) ) ;",1
940,"<S2SV_ModStart> OPENSSL_AD_UNEXPECTED_MESSAGE ; } if ( alg_k & ( SSL_kDHE | SSL_kECDHE ) ) { al = SSL_AD_UNEXPECTED_MESSAGE ; SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; goto f_err ; } if ( alg_k & ( SSL_kECDHE | SSL_kECDHE ) ) { al = SSL_AD_UNEXPECTED_MESSAGE ; SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; goto f_err ; } if ( alg_k & ( SSL_kECDHE | SSL_kECDHE ) ) { al = SSL_AD_UNEXPECTED_MESSAGE ; SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; goto f_err ; }",0
941,<S2SV_ModStart> { return SECURE_ELEMENT_ERROR_NPE ; } if ( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE ) { return SECURE_ELEMENT_ERROR_BUF_SIZE,1
942,"<S2SV_ModStart> + 1 ; if ( iframe -> max_settings > session -> max_settings ) { rv = nghttp2_session_terminate_session_with_reason ( session, NGHTTP2_ENHANCE_SETTINGS ) ; if ( nghttp2_is_fatal ( rv ) ) { return rv ; } return ( ssize_t ) inlen ; } if ( iframe -> max_settings > session -> max_settings ) { rv = nghttp2_session_terminate_session_with_reason ( session, NGHTTP2_ENHANCE_SETTINGS ) ; if ( nghttp2_is_fatal ( rv ) ) { return rv ; } return rv ; } if ( iframe -> max_settings > session -> max_settings ) { rv = nghttp2_session_terminate_session_with_reason ( session, NGHTTP2_ENHANCE_SETTINGS ) ; if ( nghttp2_is_fatal ( rv ) { return rv ; } return ( ssize_t ) inlen ; }",0
943,<S2SV_ModStart> = ucounts ; new_ns -> mounts = 0 ; new_ns -> pending_mounts = 0 ;,1
944,"<S2SV_ModStart> += dif ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
945,"<S2SV_ModStart> pmu_constraints ) ; if ( cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERFMON ) ) { if ( cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERFMON ) ) x86_pmu. intel_cap. capabilities |= PERF_CAP_IA32_PERF ; else x86_pmu. intel_cap. capabilities |= PERF_CAP_IA32_PERF ; } else if ( version == 2 ) { if ( cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERFMON ) ) { if ( cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERFMON ) ) x86_pmu. intel_cap. capabilities |= PERF_CAP_IA32_PERF ; } else { u32 capabilities ; if ( x86_pmu. intel_cap. capabilities & PERF_CAP_IA32_PERF_CAPABILITIES ) x86_pmu. intel_cap. capabilities |= PERF_CAP_IA32_",0
946,"<S2SV_ModStart>. dimensions ; # ifndef STB_VORBIS_DIVIDES_IN_RESIDUE uint16 * * part_classdata = ( uint8 * * * ) temp_block_array ( f, f -> channels, part_read * sizeof ( * * part_classdata ) ) ; # else int * * classifications = ( int * * ) temp_block_array ( f, f -> channels, part_read * sizeof ( * * classifications ) ) ; # endif CHECK ( f ) ;",0
947,"<S2SV_ModStart> ; u32 now <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { challenge_timestamp <S2SV_ModEnd> = now ; <S2SV_ModStart> = now ; } if ( ++ challenge_count <= sysctl_tcp_challenge_ack_limit ) { NET_INC_STATS ( sock_net ( sk ), LINUX_MIB_TCPCHALLENGEACK ) ; }",0
948,"<S2SV_ModStart> struct llc_pktinfo info ; memset ( & info, 0, sizeof ( info ) )",1
949,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, const TOKENEXTRA * * tp, const TOKENEXTRA * stop ) { const TOKENEXTRA * p = * tp ; for ( p < stop ; p ++ ) { const int t = p -> token ; const struct vp9_token * const a = & vp9_coef_encodings [ t ] ; const struct vp9_extra_bit * const b = & vp9_extra_bits [ t ] ; int i = 0 ; int v = a -> value ; int n = a -> len ; if ( p -> skip_eob_node ) { n -= p -> skip_eob_node ; i = 2 * p -> skip_eob_node ; } if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int bits = v >> ( n - len ) & 1 ; int n = n - len ; i = 2 * p -> skip_eob_node ; } if ( t >= EOB_TOKEN && t < EOB_TOKEN ) { int len",0
950,"<S2SV_ModStart>, uncompressed_hdr_size ; write_uncompressed_header ( cpi, & wb ) ; struct vp9_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> wb ; struct vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> += uncompressed_hdr_size ; vpx_compute_update_table ( ) ; vpx_clear_system_state ( ) ; first_part_size = write_compressed_header ( cpi, & saved_wb ) ; data += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb",0
951,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
952,"<S2SV_ModStart> ret, n ; int num_descriptors <S2SV_ModStart> ENODEV ; } if ( hdesc -> bLength < sizeof ( struct hid_descriptor ) ) { dbg_hid ( ""hid <S2SV_blank> descriptor <S2SV_blank> is <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return - EINVAL ; } <S2SV_ModStart> hdesc -> bCountryCode ; num_descriptors = min_t ( int, hdesc -> bNumDescriptors, sizeof ( struct hid_descriptor ) ) ; for ( n = 0 ; n < hdesc -> bNumDescriptors ; n ++ ) if ( hdesc -> desc [ n ]. bDescriptorType == HID_DT_REPORT ) rsize = le16_to_cpu ( hdesc -> desc [ n ]. wDescriptorLength ) ; if (! rsize || rsize > HID_MAX_DESCRIPTOR_SIZE ) { dbg_hid ( ""weird <S2SV_blank> size <S2SV_blank> of <S2SV_blank> report <S2SV_blank> descriptor <S2SV_blank> (%u)\\n"", rsize ) ; return - EINVAL ; }",0
953,"<S2SV_ModStart> struct ikev2_id id <S2SV_ModEnd> ; int id_len <S2SV_ModStart> ND_TCHECK ( * ikev2_id ) <S2SV_ModEnd> ; UNALIGNED_MEMCPY ( <S2SV_ModStart> ext ) ; if ( item_len < 4 ) goto trunc ; <S2SV_ModStart> * typedata ; if ( item_len < idtype_len ) goto trunc <S2SV_ModEnd> ; ikev2_pay_print ( <S2SV_ModStart> ndo, NPSTR ( tpay ), id. h. critical ) ; id_len = ntohs ( id. h. len ) ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; } if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ;",0
954,<S2SV_ModStart> group_dead ) ; exit_io_context ( tsk ) ; # ifdef CONFIG_X86_64 if ( unlikely ( tsk -> robust_list ) ) exit_robust_list ( tsk ) ; # ifdef CONFIG_COMPAT if ( unlikely ( tsk -> compat_robust_list ) ) compat_exit_robust_list ( tsk ) ; # endif exit_mm ( tsk ) ; module_put ( tsk -> module ) ; exit_io_context ( tsk ) ; module_put ( tsk -> module ) ; module_put ( tsk -> module ) ; module_put ( tsk -> module ) ; module_put ( tsk -> module ) ; module_put ( tsk -> module ) ; exit_thread ( tsk ) ; if ( group_dead && tsk -> signal -> leader ) module_put ( tsk -> signal -> leader ) ; module_put ( tsk -> module ) ; module_put ( tsk -> module ) ; module_put ( tsk -> module ) ; module_put ( tsk -> module ) ; module_put ( tsk -> module ) ; module_put ( tsk,0
955,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void * <S2SV_ModStart> data ) { <S2SV_ModEnd> add_preferred_base_object ( name <S2SV_ModStart> |= OBJECT_ADDED ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
956,"<S2SV_ModStart> : if (! jas_safe_size_mul3 ( cmpt -> width, cmpt -> height, 4 ) ) { jas_eprintf ( ""invalid <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> %d\\n"", cmpt -> width, cmpt -> height ) ; goto error ; } <S2SV_ModStart> : if (! jas_safe_size_mul3 ( cmpt -> width, cmpt -> height, 4 ) ) { jas_eprintf ( ""invalid <S2SV_blank> height <S2SV_blank> %d\\n"", cmpt -> height, ( cmpt -> width + cmpt -> width ) ) ) { jas_eprintf ( ""invalid <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> %d\\n"", cmpt -> width, ( cmpt -> height ) ) ; goto error ; } <S2SV_ModStart> : if (! jas_safe_size_mul3 ( cmpt -> width, cmpt -> height, 4 ) ) ) { jas_eprintf ( ""invalid <S2SV_blank> height <S2SV_blank> %d\\n"", cmpt -> height ) ; goto error ; }",0
957,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
958,"<S2SV_ModStart>, yt2_0 ; WORD32 xh0_0, xh1_0, xh20_0, xh21_0, xl0_0, xl1_0, xl20_0, xl21_0 ; WORD32 x_0, x_1, x_l1_0 ; x_l1_1 = x [ l1 ] ; x_l2 = & x [ l2 ] ; x_h2_0 = x [ h2 ] ; x_h2_1 = x [ h2 ] ; x_h2_0 = x [ h2 ] ; x_h2_1 = x [ h2 ] ; x_l1 = & ( x [ l1 ] ) ; x_l2 = & ( x [ l2 ] ) ; x_h2 = & ( x [ l1 ] ) ; x_l1 = & ( x [ l1 ] ) ; x_l2 = & ( x [ l2 ] ) ; x_h2 = & ( x [ h2 ] ) ; } fft_jmp = 4 * ( index ) ; for ( i = 0 ; i < index1 ;",0
959,<S2SV_ModStart> ( tag == ASN1_EOC <S2SV_ModEnd> ) { if <S2SV_ModStart> { if ( unlikely ( ( tag & ASN1_INDEFINITE_LENGTH ) ) ) { if ( unlikely ( datalen - dp < 1 ) ) goto data_overrun_error ; indef_level ++ ; goto next_tag ; } if ( unlikely ( len <= 0x7f ) ) goto indefinite_len_primitive ; indef_level ++ ; goto next_tag ; } if ( unlikely ( ( tag & ASN1_CONS_BIT ) == ASN1_PRIM << 5 ) ) goto indefinite_len_primitive ; indef_level ++ ; goto next_tag ; } if ( unlikely ( len == ASN1_INDEFINITE_LENGTH ) ) { if ( unlikely ( ( tag & ASN1_CONS_BIT ) == ASN1_PRIM << 5 ) ) goto indefinite_len_primitive ; indef_level ++ ; goto next_tag ; } n = len - 0x80 ; if ( unlikely ( n > sizeof ( size_t ) - 1 ) ) goto data_overrun_error ; for ( len = 0 ; n > 0,0
960,<S2SV_ModStart> ) val ; <S2SV_ModEnd> memset ( ptr,1
961,"<S2SV_ModStart> mntent -> mnt_dir, NULL",1
962,"<S2SV_ModStart> PHP_MD_CTX context ; if ( sig_len < sizeof ( buf ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_MD_CTX context ; if ( sig_len < sizeof ( buf ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_MD_CTX context ; if ( sig_len < sizeof ( buf ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_MD_CTX context ; if ( sig_len < sizeof ( buf ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_MD_CTX context ; if ( sig_len < sizeof ( buf ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_MD_CTX context ; if ( sig_len < sizeof ( buf ) ) { read_len",0
963,<S2SV_ModStart> ] <= max && value [ n ] - min < field -> maxusage <S2SV_ModStart> && field -> value [ n ] - min < field -> maxusage && field -> <S2SV_ModStart> <= max && value [ n ] - min < field -> maxusage &&,1
964,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
965,<S2SV_ModStart> if ( argReg > <S2SV_ModEnd> regsz ) { <S2SV_ModStart> regsz ) { return ;,1
966,"<S2SV_ModStart> ) ) ; rb_hash_aset ( env, server_name_val, req_server_name ( req ) ) ; rb_hash_aset ( env, server_port_val, req_server_port ( req ) ) ; fill_headers ( req, env ) ; rb_hash_aset ( env, rack_name_val, rack_name_val_val ) ; rb_hash_aset ( env, rack_url_scheme_val, rack_url_scheme_val ) ; rb_hash_aset ( env, rack_input_val, req_rack_input ( req ) ) ; rb_hash_aset ( env, rack_output_val, Qnil ) ;",0
967,"<S2SV_ModStart> 0 ) ; args -> rmtvaluelen <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> -> i_mount, args -> rmtvaluelen <S2SV_ModEnd> ) ; if <S2SV_ModStart> -> valuelen < args -> rmtvaluelen <S2SV_ModEnd> ) { args",0
968,"<S2SV_ModStart> = NULL ; unsigned int totalram_pages ; if ( SMP_ALIGN ( size ) > totalram_pages ) return NULL ; totalram_pages = ( size >> PAGE_SHIFT ) + 2 ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) { info = vmalloc ( sz ) ; if (! info ) return NULL ; } <S2SV_ModEnd> if ( (",0
969,"<S2SV_ModStart> endif # endif int <S2SV_ModEnd> prepare_retval ; MYSQL_BIND <S2SV_ModStart>, prepare_retval ; # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION imp_sth -> use_server_side_prepare = ( imp_dbh -> use_server_side_prepare ) ; if ( imp_sth -> is_async ) { imp_sth -> is_async = FALSE ; do_error ( sth, 2000, ""Async <S2SV_blank> support <S2SV_blank> was <S2SV_blank> not <S2SV_blank> built <S2SV_blank> into <S2SV_blank> this <S2SV_blank> version <S2SV_blank> of <S2SV_blank> DBD::mysql"", ""HY000"" ) ; return 0 ; } # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION imp_sth -> use_server_side_prepare = ( svp )? SvTRUE ( * svp ) : imp_dbh -> use_server_side_prepare ; if ( ( svp ) && SvTRUE ( * svp ) ) { # if MYSQL_ASYNC imp_sth -> is_async = TRUE ; # else do_error ( sth, 2000, ""Async <S2SV_blank> support <S2SV_blank> was <S2SV_blank> not <S2SV_blank> built <S2SV_blank> into <S2SV_blank> this <S2SV_blank> version <S2SV_blank> of <S2SV_blank> DBD::mysql"", ""HY000"" ) ;",0
970,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) &&! test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) &&",1
971,"<S2SV_ModStart> ) ) ; if ( LTXTQUERY_TOO_BIG ( state. num, state. sumlen ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""ltxtquery <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large"" ) ) ) ;",1
972,"<S2SV_ModStart> int need = 0 <S2SV_ModEnd> ; CELL first <S2SV_ModStart> screen, { int width ; int height ; <S2SV_ModStart> need *= 4 ; width = length ( screen, first. row, first. col ) ; height = length ( screen, last. row, last. col ) ; if ( width < screen -> width || height < screen -> height ) { TRACE ( ( ""SaltTextAway <S2SV_blank> which=%d, <S2SV_blank> first=%d,%d, <S2SV_blank> last=%d,%d\\n"", which, first. row, last. col, width, screen -> height ) ) ; return ; } if ( width < screen -> width || height < screen -> height ) { TRACE ( ( ""SaltTextAway <S2SV_blank> which=%d, <S2SV_blank> first=%d,%d, <S2SV_blank> last=%d, <S2SV_blank> width <S2SV_blank> %d, <S2SV_blank> height <S2SV_blank> %d\\n"", which, first. row, last. col, width ) ) ; return ; }",0
973,<S2SV_ModStart> ; if (! EXT4_SB ( inode -> i_sb ) -> s_journal <S2SV_ModEnd> ) return 0 <S2SV_ModStart> i_orphan ) ; <S2SV_ModEnd> err = ext4_reserve_inode_write,0
974,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 0.0000001 ; if ( len <= 0 ) { * str = 0 ; return ; } if (! isFinite ( val ) ) { if ( val < 0 ) strcpy ( str, ""-NaN"", len ) ; else strcpy ( str, ""Infinity"", len ) ; } else { if ( val < 0 ) strcpy ( str, ""NaN"", len ) ; } else { if ( val < 0 ) strcpy ( str, ""-Infinity"", len ) ; else strcpy ( str, ""Infinity"", len ) ; } } else { if ( val < 0 ) { if ( -- len <= 0 ) { * str = 0 ; return ; } * ( str ++ ) = '-' ; val = - val ; } if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ) ) ; d *= radix ; while ( d >= 1 ) { int v = ( int ) ( val / d ) ; val -= v * d ; while ( d >= 1 ) {",0
975,"<S2SV_ModStart> ( f, ""PG%31[ <S2SV_blank> \\t]%c%c%31[ <S2SV_blank> \\t+-]%d%31[ <S2SV_blank> \\t]%d%31[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp,",1
976,"<S2SV_ModStart> ( size < 5 + 1 <S2SV_ModEnd> ) ASSERT ( <S2SV_ModStart> ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; char * result ; memcpy ( buf, ""DEADBEEF"", 8 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( result!= NULL ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( length == 5 ) ; if ( size < 6 ) ASSERT ( result!= buf ) ; ASSERT ( memcmp ( buf + size, & ""DEADBEEF"" [ size ], 8 - size ) == 0 ) ; if ( result!= buf ) free ( result ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; char * result ; memcpy ( buf, ""DEADBEEF"", 8 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( result!= NULL ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASS",0
977,<S2SV_ModStart> ; if ( unlikely ( fast_pool -> count >= 64 ) ) { fast_pool -> count = 0 ; fast_pool -> last = now ; return ; } if (,0
978,"<S2SV_ModStart> LEX_ID ) { jsl_strncat <S2SV_ModEnd> ( str, <S2SV_ModStart> ( str, ""ID:"" <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, ""String:"" <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, ""String:"" <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, ""String:"" <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, ""String:"" <S2SV_ModEnd>, len )",0
979,"<S2SV_ModStart> char * tmp = g. inf, * sufx = NULL ; if ( <S2SV_ModEnd> strcmp ( tmp <S2SV_ModStart>, "".tgz"" ) == 0 ) { strcpy ( tmp <S2SV_ModEnd>, g. <S2SV_ModStart> g. inf, "".tgz"" ) ; sufx = tmp ; } else if ( <S2SV_ModEnd> strcmp ( tmp <S2SV_ModStart> g. inf, "".tgz"" ) == 0 ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device"", tmp ) ; } else if ( ( st. st_mode & ( S_IFMT | S_IFREG ) == 0 ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device"", g. inf ) ; sufx = tmp ; } else if ( <S2SV_ModEnd> strcmp ( tmp <S2SV_ModStart> g. inf, "".tgz"" ) == 0 ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device"", tmp ) ; } else if ( ( st. st_mode & ( S_IFMT | S_IFREG ) == 0 ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device"", g. inf",0
980,,1
981,"<S2SV_ModStart> * output ; MagickBooleanType status ; <S2SV_ModStart> ) ; } status = MagickTrue ; <S2SV_ModStart> i ++ ) { <S2SV_ModEnd> input = fopen_utf8 <S2SV_ModStart> input ) ) if ( fputc ( ( char ) c, output )!= c ) status = MagickFalse ; <S2SV_ModStart> ( void ) fclose ( input <S2SV_ModEnd> ) ; ( <S2SV_ModStart> ( void ) remove_utf8 ( argv [ i ] ) ; } ( void ) fclose ( <S2SV_ModEnd> output ) ; <S2SV_ModStart> ; return ( status <S2SV_ModEnd> ) ; }",1
982,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
983,"<S2SV_ModStart> fail : ext3_msg ( sb, KERN_ERR, ""error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> journal <S2SV_blank> device <S2SV_blank> %s: <S2SV_blank> %ld"", __bdevname ( dev, b ) ) ;",0
984,"<S2SV_ModStart> passwd * pwd, const char * prefix <S2SV_ModStart> = NULL ; <S2SV_ModEnd> pw_init ( ) <S2SV_ModStart> ( fp = fopen_safe <S2SV_ModEnd> ( & tmpname <S2SV_ModStart> & tmpname, ""/etc"", prefix <S2SV_ModEnd> ) ) ==",0
985,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, branch_ct",0
986,"<S2SV_ModStart> s2 ) { const size_t len = strlen ( s1 ) + 1U ; return memcmp ( s1, s2, len <S2SV_ModEnd> ) ; }",0
987,"<S2SV_ModStart> TRUE ; } Jid * const stanza_to = xmpp_stanza_get_to ( stanza ) ; const char * const stanza_from = xmpp_stanza_get_from ( stanza ) ; Jid * const stanza_from = xmpp_stanza_get_from ( stanza ) ; if ( g_strcmp0 ( stanza_from, ""from"" )!= 0 ) { log_warning ( ""Invalid <S2SV_blank> carbon <S2SV_blank> received, <S2SV_blank> from: <S2SV_blank> %s"", stanza_from ) ; return TRUE ; } char * const stanza_from = xmpp_stanza_get_from ( stanza ) ; const char * const stanza_from = xmpp_stanza_get_from ( stanza ) ; if (! stanza_from ) { log_warning ( ""Invalid <S2SV_blank> carbon <S2SV_blank> received, <S2SV_blank> from: <S2SV_blank> %s"", stanza_from ) ; return TRUE ; } char * const stanza_from = xmpp_stanza_get_from ( stanza ) ; if (! stanza_from ) { log_warning ( ""Invalid <S2SV_blank> carbon <S2SV_blank> received, <S2SV_blank> from: <S2SV_blank> %s"", stanza_from ) ; return TRUE ; } <S2SV_ModStart> jid_",0
988,<S2SV_ModStart> [ 0 ] && sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) { zfree ( server. rdb_filename ) ; server. rdb_filename = NULL ; } else if ( sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) { zfree ( server. rdb_filename ) ; server. rdb_filename = zstrdup ( o -> ptr ) ; } else if ( sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) { zfree ( server. rdb_filename ) ; server. rdb_filename = zstrdup ( o -> ptr ) ; } else if ( sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) { zfree ( server. rdb_filename ) ; server. rdb_filename = zstrdup ( o -> ptr ) ; } else { if ( sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) { zfree ( server. rdb_filename ) ; server. rdb_filename = zstrdup ( o -> ptr ),0
989,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
990,"<S2SV_ModStart> ) ) { # ifdef HAVE_REALPATH real_path = malloc ( MAXPATHLEN ) ; if (! real_path ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> name <S2SV_blank> \\""%s\\"""", name ) ; ioerror ( ""realpath"" ) ; return 1 ; } real_path = realpath ( name ) ; if (! real_path ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> name <S2SV_blank> \\""%s\\"""", name ) ; ioerror ( ""realpath"" ) ; return 1 ; } configuration_file = str_dup ( real_path ) ; if (! configuration_file ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> name <S2SV_blank> \\""%s\\"""", name ) ; ioerror ( ""realpath"" ) ; return 1 ; } } else { # ifdef HAVE_REALPATH real_path = malloc ( MAXPATHLEN ) ; if (! real_path ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> name <S2SV_blank> \\""%s\\"""", name ) ; ioerror ( ""realpath"" ) ; return",0
991,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; BT_DBG (,1
992,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
993,<S2SV_ModStart> md -> hdr. isa_flags & ISAKMP_FLAGS_v1_SIGNING ) { if ( md -> hdr. isa_flags & ISAKMP_FLAGS_v1_SIGNING ) { if ( md -> hdr. isa_flags & ISAKMP_FLAGS_v1_SIGNING ) { if ( md -> hdr. isa_flags & ISAKMP_FLAGS_v1_SIGNING ) { if ( md -> hdr. isa_flags & ISAKMP_FLAGS_v1_SIGNING ) { if ( md -> hdr. isa_flags & ISAKMP_FLAGS_v1_SIGNING ) { if ( md -> hdr. isa_flags & ISAKMP_FLAGS_V1_SIGNING ) { if ( md -> hdr. isa_flags & ISAKMP_FLAGS_V1_SIGNING ) { if ( md -> hdr. isa_flags & ISAKMP_FLAGS_V1_SIGNING ) { if ( md -> hdr. isa_flags & ISAKMP_FLAGS_V1_SIGNING ) { if ( md -> hdr. isa_flags & ISAKMP_,0
994,<S2SV_ModStart> } if ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; },0
995,<S2SV_ModStart> * zone ; size_t tilemap_size ; <S2SV_ModStart>. height ; tilemap_size = <S2SV_ModEnd> x_size * y_size <S2SV_ModStart> struct map_tile ) ; if ( x_size == 0 || tilemap_size / x_size / sizeof ( struct map_tile )!= y_size ||! ( tilemap = malloc ( tilemap_size,1
996,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_printroute ( netdissect_options <S2SV_ModStart> ) ; return ( 0 ) <S2SV_ModStart> 3 ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> length <S2SV_blank> %u]"", length ) ) ; return ( - 1 ) ; } if ( ( length + 1 ) & 3 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> length <S2SV_blank> %u]"", length ) ) ; return ( - 1 ) ; } <S2SV_ModEnd> ptr = cp <S2SV_ModStart> 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %s"", ipaddr_string ( ndo, & cp [ len ] ) ) ) ; <S2SV_ModStart> ) ; } return ( 0 ) ;",0
997,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> print_string ( cJSON <S2SV_ModStart> item ) { const char * p = print_string_ptr ( item -> valuestring ) ; if ( p ) return PTR_ERR ( p ) ; return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
998,"<S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img, <S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img,",1
999,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> + 1, ""prestring=%490s"" <S2SV_ModEnd>, buf ) <S2SV_ModStart> + 1, ""protos=%490s"" <S2SV_ModEnd>, buf ) <S2SV_ModStart> + 1, ""protos=%490s"" <S2SV_ModEnd>, buf ) <S2SV_ModStart> + 1, ""protos=%490s"" <S2SV_ModEnd>, buf ) <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd> - 3 ) <S2SV_ModStart> + 1, ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; } if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; } else { L_WARNING ( ""protos <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; } } } else if (! strncmp ( argv [ i ], ""-prestring"", 10 ) ) { nflags ++ ; ret = sscanf ( argv [ i ] + 1, ""prestring=%s"", buf ) ; if ( ret!= 1 ) { fprintf (",0
1000,<S2SV_ModStart> if ( chunk_num >= <S2SV_ModEnd> chm -> num_chunks,1
1001,"<S2SV_ModStart>! validate_event ( event -> pmu, <S2SV_ModStart>! validate_event ( event -> pmu, <S2SV_ModStart>! validate_event ( event -> pmu,",1
1002,<S2SV_ModStart> ) ; } else { # if defined ( CONFIG_X86_64 ) && defined ( CONFIG_X86_64 ) && defined ( CONFIG_X86_64 ) && defined ( CONFIG_X86_64 ) && defined ( CONFIG_X86_64 ) && defined ( CONFIG_X86_64 ) && defined ( CONFIG_X86_64 ) && defined ( CONFIG_X86_64 ) && defined ( CONFIG_X86_64 ) && defined ( CONFIG_X86_64 ) && defined ( CONFIG_X86_64 ) && defined ( CONFIG_X86_64 ) && defined ( CONFIG_X86_64 ) && defined ( CONFIG_X86_64 ) && defined ( CONFIG_X86_64 ) && defined ( CONFIG_X86_64 ) && defined ( CONFIG_X86_64 ) && defined ( CONFIG_X86_64 ) && defined ( CONFIG_X86_64 ) && defined ( CONFIG_X86_64 ) && defined ( CONFIG_X86_64 ) && defined ( CONFIG_X86_64 ) && defined ( CONFIG_X86_64 ) && defined ( CONFIG_X86_64 ) && defined ( CONFIG_X86,0
1003,<S2SV_ModStart> studio_profile ) { switch ( s -> studio_profile ) { case FF_PROFILE_MPEG4_SIMPLE_STUDIO : s -> avctx -> profile = FF_PROFILE_MPEG4_SIMPLE_STUDIO ; break ; case FF_PROFILE_MPEG4_SIMPLE_STUDIO : s -> avctx -> profile = FF_PROFILE_MPEG4_SIMPLE_STUDIO ; break ; case FF_PROFILE_MPEG4_SIMPLE_STUDIO : s -> avctx -> profile = FF_PROFILE_MPEG4_SIMPLE_STUDIO ; break ; case FF_PROFILE_MPEG4_SIMPLE_STUDIO : s -> avctx -> profile = FF_PROFILE_MPEG4_SIMPLE_STUDIO ; break ; case FF_PROFILE_MPEG4_SIMPLE_STUDIO : s -> avctx -> profile = FF_PROFILE_MPEG4_SIMPLE_STUDIO ; break ; },0
1004,<S2SV_ModStart> nsops < 1 || nsops > SEMOPM,1
1005,<S2SV_ModStart> ++ ) s [ i ] = 0 ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( i = 0 ; i < cols + 17 ; i ++ ) s [ i ] = s [ cols - 1 ] ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( c = 0 ; c < cols + 8 ; c ++ ) { int x = s [ c + 7 ] - s [ c - 8 ] ; int y = s [ c + 7 ] + s [ c - 8 ] ; if ( sumsq * 15 - sum * 15 < flimit ) { d [ c & 15 ] = ( 8 + sum + s [ c ] ) >> 4 ; } s [ c - 8 ] = d [ ( c - 8 ) & 15 ] ; if ( x * x < flimit ) { d [ c & 15 ] = ( 8 + sum + s [ c ] ) >> 4 ; } s [ c - 8 ] = d [ (,0
1006,"<S2SV_ModStart> ( inode -> i_sb -> s_blocksize > blksz ) { grub_error ( GRUB_ERR_BAD_FS, ""block <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", inode -> i_sb -> s_blocksize - blksz ) ; return - 1 ; } if ( inode -> i_sb -> s_blocksize < blksz ) { grub_error ( GRUB_ERR_BAD_FS, ""block <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", inode -> i_sb -> s_blocksize - blksz ) ; return - 1 ; }",0
1007,<S2SV_ModStart> ( <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1008,"<S2SV_ModStart> if ( q < p ) { DPRINTF ( ( ""Wrapped <S2SV_blank> around <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> %p\\n"", q, p ) ) ; goto out ; } if ( q",0
1009,"<S2SV_ModStart> ++ ; } if ( bytes_matched >= max_bytes_matched ) { FAIL_ON_ERROR ( callback ( 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534",0
1010,"<S2SV_ModStart> len ) { assert ( len >= 4 ) ; <S2SV_ModStart> case LEX_EOF : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""EOF"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_ID : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""ID"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_INT : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""INT"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_FLOAT : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""FLOAT"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_STR : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""STRING"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED_STR : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> STRING"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_TEMPLATE_LITERAL : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""TEMPLATE <S2SV_blank> LITERAL"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED_TEMPLATE_LITERAL : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> TEMPLATE <S2SV_blank> LITERAL"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_REGEX : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""REGEX"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case L",0
1011,"<S2SV_ModStart> mnt_instance ) ; if ( unlikely (! list_empty ( & mnt -> mnt_mounts ) ) ) { struct mount * p, * tmp ; list_for_each_entry_safe ( p, tmp, & mnt -> mnt_mounts, mnt_child ) { umount_mnt ( p ) ; } }",1
1012,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
1013,,1
1014,<S2SV_ModStart> ; if ( e - p > HOST_NAME_MAX - 1 <S2SV_ModEnd> ) goto not_found,0
1015,<S2SV_ModStart> ; int err <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> uint32_t pos ; if ( inode -> i_size > inode -> i_sb -> s_blocksize ) { err = - ENAMETOOLONG ; goto out_unmap ; } <S2SV_ModStart>! bh ) { err = - EIO ; goto out_unlock_inode ; } <S2SV_ModEnd> symlink = bh <S2SV_ModStart> return 0 ; out_unlock_inode <S2SV_ModEnd> : up_read ( <S2SV_ModStart> page ) ; out_unmap :,1
1016,<S2SV_ModStart> else if ( cpu_has_secondary_exec_ctrls ( ) && ( vmcs_read32 ( SECONDARY_VM_EXEC_CONTROL ) & SECONDARY_EXEC_VIRTUALIZE_X2APIC_MODE ) <S2SV_ModEnd> ) { if,1
1017,"<S2SV_ModStart> if ( ent == NULL ) { st = KRB5_KDB_NOENTRY ; <S2SV_ModEnd> goto cleanup ; <S2SV_ModStart> cleanup ; } st = populate_policy ( context, ld, ent, pol_name, * policy ) ;",1
1018,<S2SV_ModStart> ; if ( ps_codec -> i4_pic_done ) return IHEVCD_UNSUPPORTED_PPS_ID ; if ( ps_codec -> ps_sps_base + ps_pps -> i1_sps_id >= MAX_SPS_CNT ) { ps_codec -> ps_sps_base + ps_pps -> i1_sps_id = 0 ; ps_codec -> i4_pic_done = 1 ; return IHEVCD_INVALID_HEADER ; } if ( ps_codec -> i4_pic_done ) return IHEVCD_UNSUPPORTED_PPS_ID ; if ( ps_codec -> ps_sps_base + ps_pps -> i1_sps_id >= MAX_SPS_CNT ) { ps_codec -> ps_sps_base + ps_pps -> i1_sps_id = 0 ; ps_codec -> i4_pic_done = 1 ; return IHEVCD_INVALID_HEADER ; },0
1019,"<S2SV_ModStart> inode ) ; <S2SV_ModEnd> u64 bn, <S2SV_ModStart> unsigned end_of_metadata = ( height > 1 )? height - 1 : 0 <S2SV_ModEnd> ; int eob <S2SV_ModStart> - 1 ; if ( height == 1 ) { struct buffer_head * bh ; ptr = metapointer ( end_of_metadata, mp ) ; dblks = min ( maxlen, ptrs_per_blk - mp -> mp_list [ end_of_metadata ] ) ; if (! bh ) { struct buffer_head * bh ; bh = mp -> mp_bh [ end_of_metadata ] ; zero_bn = gfs2_extent_length ( bh -> b_data, bh -> b_size, ptr, maxlen, & eob ) ; BUG_ON ( dblks < 1 ) ; state = ALLOC_DATA ; } else if ( height > 1 ) { bh = mp -> mp_bh [ end_of_metadata ] ; ptr = metapointer ( end_of_metadata, mp ) ; dblks = min ( maxlen, ptrs_per_blk - mp -> mp_list [ end_of_metadata ] ) ; BUG_ON ( db",0
1020,"<S2SV_ModStart> ) ) { if ( psf -> header. indx + count >= psf -> header. len && psf_bump_header_allocation ( psf, 4 ) ) return - 1 ; <S2SV_ModStart> break ; case 'z' : psf -> header. indx = va_arg ( argptr, unsigned int ) ; header_put_marker ( psf, data ) ; count += 1 ; break ; case 'n' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be64 ( psf, data ) ; } else { header_put_le64 ( psf, data ) ; } ; count += 5 ; break ; case 'P' : psf -> header. indx = va_arg ( argptr, unsigned int ) ; header_put_marker ( psf, data ) ; count += 1 ; break ; case 'P' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be64 ( psf, data ) ; } else { header_put_le64 ( psf, data ) ; } ; count += 6",0
1021,<S2SV_ModStart> ; if ( d -> msg_len > sizeof ( d -> msg ) ) return - EINVAL ; if ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( i,1
1022,"<S2SV_ModStart> break ; } memset ( & cinfo, 0, sizeof ( cinfo ) ) ;",1
1023,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart> ( size_t ) MagickMax ( <S2SV_ModStart>. length, bytes_per_line * sun_info. width ) ; if ( bytes_per_line * sun_info. height > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
1024,"<S2SV_ModStart> 0 ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0600 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; return",1
1025,"<S2SV_ModStart> int num_items_scanned ; int pkt_len ; int <S2SV_ModEnd> pktnum, hr <S2SV_ModStart> + 64, ""LEN=%9u"" <S2SV_ModEnd>, & pkt_len <S2SV_ModStart> g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } if ( pkt_len > WTAP_MAX_PACKET_SIZE ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> File <S2SV_blank> has <S2SV_blank> %u-byte <S2SV_blank> packet"", pkt_len ) ; return FALSE ; } if ( pkt_len < 0 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> File <S2SV_blank> has <S2SV_blank> %u-byte <S2SV_blank> packet"" ) ; return FALSE ; } <S2SV_ModStart> ( buf, pkt_len <S2SV_ModEnd> ) ; pd",0
1026,<S2SV_ModStart> err = 0 ; msg -> msg_namelen,0
1027,"<S2SV_ModStart> ; if ( zend_hash_find <S2SV_ModEnd> ( ht,",1
1028,<S2SV_ModStart> ) ) ; strncpy <S2SV_ModEnd> ( link_info.,0
1029,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } io -> io_cleanup = mem_cleanup ;,1
1030,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf = <S2SV_ModStart> -> len ; if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> ret += obuf",0
1031,<S2SV_ModStart> p -> tokenpos >= ( <S2SV_ModEnd> p -> tokenlen <S2SV_ModStart> p -> tokenlen - 1 ),1
1032,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> case BLOCK_8X8 : return vpx_mse8x8 ; case BLOCK_16X8 : return vpx_mse16x8 ; case BLOCK_8X16 : return vpx_mse8x16 ; case BLOCK_16X16 : return vpx_mse16x16 ; default : return vpx_mse8x16 ; } } <S2SV_null> static vpx_variance_fn_t get_block_variance_fn ( BLOCK_SIZE bsize ) { switch ( bsize ) { case BLOCK_8X8 : return vpx_mse8x8 ; case BLOCK_16X8 : return vpx_mse16x8 ; case BLOCK_8X16 : return vpx_mse8x16 ; default : return vpx_mse16x16 ; },0
1033,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
1034,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA,0
1035,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
1036,<S2SV_ModStart> } if ( out_data!= NULL && <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1037,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
1038,"<S2SV_ModStart> -> stratum_port ; snprintf ( address, 254 <S2SV_ModEnd>, ""%s:%s"",",1
1039,"<S2SV_ModStart> ( page && (! access ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_",0
1040,"<S2SV_ModStart> + 1 ; if ( f -> blocksize_1 < f -> blocksize_0 ) return error ( f, VORBIS_invalid_setup ) ; if ( <S2SV_ModStart> + 1 ; if ( f -> blocksize_1 < f -> blocksize_1 ) return error ( f, VORBIS_invalid_setup ) ;",0
1041,<S2SV_ModStart> head -> iov_base ; if ( hdr > head -> iov_len ) return 0,1
1042,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> cl_nodes_lock ) ; o2nm_unlock_subsystem ( ) ;,1
1043,"<S2SV_ModStart> flags ) ; if ( vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } <S2SV_ModStart> v4l2_buf ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> vb ) { <S2SV_ModEnd> dev_dbg ( & <S2SV_ModStart> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", frame_len",0
1044,"<S2SV_ModStart> size ) { if ( check_mul_overflow ( size, PREFIX_SIZE ) ) { zmalloc_oom_handler ( size ) ; return NULL ; } <S2SV_ModEnd> void * ptr",0
1045,<S2SV_ModStart> ; ssize_t count ; if ( bytes == 0 || items == 0 ) return 0,1
1046,<S2SV_ModStart> -> serviceId == EXTRACT_16BITS <S2SV_ModEnd> ( & rxh,1
1047,<S2SV_ModStart> key_ref ) ; if ( key -> state == KEY_IS_UNINSTANTIATED <S2SV_ModEnd> ) goto can_read_key,0
1048,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > IEEE80211_MAX_SSID_LEN ) { mwifiex_dbg ( adapter, INFO, ""info: <S2SV_blank> ADHOC_S_CMD: <S2SV_blank> SSID <S2SV_blank> = <S2SV_blank> %s\\n"", req_ssid -> ssid ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( bss_desc -> ssid. ssid, req_ssid -> ssid, req_ssid -> ssid_len ) ; } else { memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( bss_desc -> ssid. ssid, req_ssid ->",0
1049,"<S2SV_ModStart> valuelen ) ; if (! context -> put_listent ) { error = context -> put_listent ( context, sfe -> flags, sfe -> nameval, ( int ) sfe -> namelen, ( int ) sfe -> valuelen, & sfe -> nameval [ sfe -> namelen ] ) ; if ( context -> seen_enough ) break ; if ( error ) return error ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; } if (! context -> put_listent ) { error = context -> put_listent ( context, sfe -> flags, sfe -> nameval, ( int ) sfe -> namelen, ( int ) sfe -> valuelen, & sfe -> nameval [ sfe -> namelen ] ) ; if ( context -> seen_enough ) break ; if ( error ) return error ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; } if ( context -> put_listent ( context, sfe -> flags, sfe -> nameval, ( int ) sfe -> namelen, ( int ) sfe ->",0
1050,<S2SV_ModStart> r ) { if ( a == NULL ) return - 1 ;,0
1051,<S2SV_ModStart> 0 ) ; hrtimer_try_to_cancel <S2SV_ModEnd> ( & stime,1
1052,"<S2SV_ModStart> < q ) { <S2SV_ModStart> enc, p ) ; } if ( p - str < reg -> dmax ) { * low = ( UChar * ) str ; if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; } else { <S2SV_ModStart> low ) ; }",0
1053,"<S2SV_ModStart> l2cap_conf_rfc rfc = { } <S2SV_ModStart> ) ; switch ( pi -> mode ) { case L2CAP_MODE_ERTM : rfc. mode = L2CAP_MODE_ERTM ; rfc. txwin_size = L2CAP_DEFAULT_RX_WINDOW ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; l2cap_add_conf_opt ( & ptr, L2CAP_CONF_RFC, sizeof ( rfc ), ( unsigned long ) & rfc ) ; break ; } req -> dcid = cpu_to_le16 ( pi -> dcid ) ; req -> flags = cpu_to_le16 ( 0 ) ; return <S2SV_ModEnd> - data ;",0
1054,"<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_WAITALL ) )",0
1055,<S2SV_ModStart> -> chunksize = UINT64_MAX <S2SV_ModEnd> ; for (,1
1056,<S2SV_ModStart> == 1 ) { if ( ( ps_dec -> u2_total_mbs_coded!= 0 ) && ( ps_dec -> u2_total_mbs_coded!= 0 ) && ( ps_dec -> u2_total_mbs_coded!= 0 ) && ( ps_dec -> u2_total_mbs_coded!= 0 ) && ( ps_dec -> u2_total_mbs_coded!= 0 ) && ( ps_dec -> u2_total_mbs_coded!= 0 ) && ( ps_dec -> u2_total_mbs_coded!= 0 ) ) && ( ps_dec -> u2_total_mbs_coded!= 0 ) && ( ps_dec -> u2_total_mbs_coded!= 0 ) && ( ps_dec -> u2_total_mbs_coded!= 0 ) && ( ps_dec -> u2_total_mbs_coded!= 0 ) && ( ps_dec -> u2_total_mbs_coded!= 0 ) ),0
1057,<S2SV_ModStart> while ( pair!= NULL <S2SV_ModEnd> ) { mprAddItem,0
1058,<S2SV_ModStart> } err = crypto_rng_alg ( tfm ) <S2SV_ModEnd> -> seed (,1
1059,<S2SV_ModStart> = uid ; <S2SV_ModEnd> new -> count <S2SV_ModStart> new -> count = 0 <S2SV_ModEnd> ; spin_lock_irq ( <S2SV_ModStart> } if ( <S2SV_ModEnd> ucounts -> count <S2SV_ModStart> ucounts -> count == INT_MAX ) ucounts = NULL ; else ucounts -> count += 1 <S2SV_ModEnd> ; spin_unlock_irq (,1
1060,"<S2SV_ModStart> datagrams ; } if ( datagrams <S2SV_ModEnd> == 0 ) <S2SV_ModStart> == 0 ) { datagrams = err ; goto out_put ; } <S2SV_ModEnd> if ( err <S2SV_ModStart> datagrams ; } out_put : fput_light ( sock -> file, fput_needed ) ; <S2SV_ModStart> datagrams ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1061,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1062,<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline <S2SV_ModStart> = 0 ; len - i >= 8 * 32 <S2SV_ModEnd> ; i += <S2SV_ModStart> ] ; } for ( ; i < len ; i += 32 ) { ( void ) tab [ i ] ; },1
1063,<S2SV_ModStart> ) ) { if ( ext4_should_dioread_nolock ( inode ) ) { if ( ext4_should_dioread_nolock ( inode ) ) { if ( ext4_should_dioread_nolock ( inode ) ) { if ( ext4_should_dioread_nolock ( inode ) ) { if ( ext4_should_dioread_nolock ( inode ) ) { err = ext4_dioread_nolock ( inode ) ; if ( ext4_should_dioread_nolock ( inode ) ) { if ( ext4_should_dioread_nolock ( inode ) ) { if ( ext4_should_dioread_nolock ( inode ) ) { if ( ext4_should_dioread_nolock ( inode ) ) { if ( ext4_should_dioread_nolock ( inode ) ) { ext4_dioread_nolock ( inode ) ; if ( ext4_should_dioread_nolock ( inode ) ) { if ( ext4_should_dioread_,0
1064,"<S2SV_ModStart> * open_stateid, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; fmode = fmode & ( FMODE_READ | FMODE_WRITE ) ; <S2SV_ModStart> -> type & fmode <S2SV_ModEnd> )!= open_flags <S2SV_ModStart>, open_stateid, fmode <S2SV_ModEnd>, open_flags ) <S2SV_ModStart>, open_stateid, fmode <S2SV_ModEnd>, open_flags )",0
1065,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1066,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
1067,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void oidc_scrub_headers (,1
1068,"<S2SV_ModStart> * xd, tran_low_t <S2SV_ModEnd> * out_rate_sum, <S2SV_ModStart> int sse ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { * out_rate_sum = 0 ; * out_dist_sum = 0 ; return ; } # endif <S2SV_ModStart>. vf ( p -> src. buf, p -> src. stride, pd -> dst. buf, pd -> dst. stride, & sse ) ; if ( i == 0 ) x -> pred_sse [ ref ] = sse ; if ( cpi -> speed > 4 ) { int64_t rate ; int64_t dist ; int64_t square_error ; int quantizer ; if ( pd -> dequant [ 1 ] >> 3 ) rate = ( sse * pd -> dequant [ 1 ] >> 3 ) ; else rate = 0 ; dist = ( sse * pd -> dequant [ 1 ] >> 3 ) ; else rate = 0 ; dist = ( sse * pd -> dequant [ 1 ] >> 3 ) ; } else { int rate ; int64_t dist ; vp9_model_rd_from_var_lapnd",0
1069,<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1070,"<S2SV_ModStart> return ; } if ( ND_TTEST ( * optr ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> indicator <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size:"", ND_TTEST ( * optr ) ) ) ; break ; } if ( ND_TTEST ( * optr ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> indicator <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size:"", ND_TTEST ( * optr ) ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"", * pptr ++ ) ) ; ND_TCHECK ( * optr ++ ) ; if ( ND_TTEST ( * optr ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> indicator <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size:"", ND_TTEST ( * optr ) ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"", * pptr ++ ) ) ;",0
1071,<S2SV_ModStart> { if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( <S2SV_ModStart> } if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( <S2SV_ModStart> ( * ret_username = malloc ( <S2SV_ModEnd> index + 1 <S2SV_ModStart> + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( * ret_username == '\\0' ) { if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; } <S2SV_ModStart> } if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( ( * ptr =='<S2SV_blank>') || ( * ptr == '\\t' ) ) ) break ; else username [ index ] = * ptr ; index ++ ; ptr ++ ; } <S2SV_ModEnd> return ( PAM_SUCCESS,0
1072,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { vpx_read_tree <S2SV_ModEnd> ( r, <S2SV_ModStart> seg ) { vpx_read_tree <S2SV_ModEnd> ( r,",0
1073,"<S2SV_ModStart> ; uint32_t backup_handle = 0 <S2SV_ModStart> ret ; } if ( <S2SV_ModEnd> res -> backup <S2SV_ModStart> res -> backup ) { if ( <S2SV_ModEnd> res -> backup <S2SV_ModStart> res -> backup -> handle!= backup_handle ) { ret = - EBUSY ; goto out_unlock ; } else { backup_handle = req -> backup -> handle ; } } ret = ttm_read_lock ( & dev_priv -> res_sem, true ) ; if ( unlikely ( ret!= 0 ) ) goto out_unlock ; backup_handle = ttm_round_pot ( sizeof ( * srf ), size ) ; if ( unlikely ( backup_handle!= res -> backup -> handle ) ) { WARN_ON ( 1 ) ; backup_handle = res -> backup -> handle ; goto out_unlock ; } ret = ttm_read_unlock ( & dev_priv -> res_sem, true ) ; if ( unlikely ( ret!= 0 ) ) goto out_unlock ; } ret = ttm_read_unlock ( & dev_priv -> res_sem, true ) ; if ( ret!= 0 ) goto out_unlock ;",0
1074,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool get_desc ( <S2SV_ModStart> struct desc_struct * out, <S2SV_ModStart> SEGMENT_LDT ) { bool success = false <S2SV_ModEnd> ; struct ldt_struct <S2SV_ModStart> -> nr_entries ) { success = true ; <S2SV_ModStart> sel ] ; } <S2SV_ModStart> ) ; return success <S2SV_ModEnd> ; } # <S2SV_ModStart> size ) return false ; * out = <S2SV_ModEnd> ( struct desc_struct <S2SV_ModStart> desc_base ) ; return true ;",0
1075,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",1
1076,"<S2SV_ModStart> bp ; struct ipv6_pinfo * np = inet6_sk ( sk ) ; union sctp_addr dst_saddr ; __u8 matchlen = 0 ; __u8 bmatchlen = 0 ; memset ( fl6, 0, sizeof ( struct flowi6 ) ) ; fl6 -> daddr = daddr -> v6. sin6_addr ; fl6 -> fl6_dport = daddr -> v6. sin6_port ; fl6 -> flowi6_proto = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> fl6_oif = daddr -> v6. sin6_scope_id ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_proto = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> fl6_dport =",0
1077,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1078,"<S2SV_ModStart>, maxbuf, unicodestr ) ; if ( depth == 0 ) { ND_PRINT ( ( ndo, ""No <S2SV_blank> data <S2SV_blank> for <S2SV_blank> this <S2SV_blank> format\\n"" ) ) ; return ( NULL ) ; } buf = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf == NULL ) return ( NULL ) ; fmt = p + 1 ; buf = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf == NULL ) return ( NULL ) ; } strncpy ( s, fmt, p - fmt ) ; s [ p - fmt ] = '\\0' ; fmt = p + 1 ; buf = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf == NULL ) return ( NULL ) ; break ; default : ND_PRINT ( ( ndo, ""No <S2SV_blank> data <S2SV_blank> for <S2SV_blank> this <S2SV_blank> format\\n"" ) ) ; return ( NULL ) ; } <S2SV_ModEnd> return ( buf",0
1079,<S2SV_ModStart> = conn ; <S2SV_ModEnd> g_source_remove ( client <S2SV_ModStart> -> protocol_timeout ) ; callbacks_ret -> disconnect. callback = disconnect_callback ; callbacks_ret -> disconnect. manager_data = client ; * mask_ret |= SmsSaveYourselfP2RequestProcMask ; callbacks_ret -> save_yourself_phase2_request. callback = save_yourself_phase2_request_callback ; callbacks_ret -> save_yourself_phase2_request. manager_data = client ; * mask_ret |= SmsSaveYourselfP2DoneProcMask ; callbacks_ret -> save_yourself_done. manager_data = client ; * mask_ret |= SmsSaveYourselfP2RequestProcMask ; callbacks_ret -> save_yourself_phase2_request. callback = save_yourself_phase2_request_callback ; callbacks_ret -> save_yourself_phase2_request. manager_data = client ; * mask_ret |= SmsSaveYourselfP2DoneProcMask ; callbacks_ret -> save_yourself_done. callback = save_yourself_done_callback ; callbacks_ret,0
1080,<S2SV_ModStart> >= 0 && <S2SV_ModEnd> ND_TTEST ( * <S2SV_ModStart> < ie && <S2SV_ModEnd> ND_TTEST ( *,1
1081,"<S2SV_ModStart> ERROR_INVALID_LENGTH ; } if ( ancillary ) { osSetEvent ( & interface -> nicTxEvent ) ; return NO_ERROR ; } n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; } <S2SV_ModStart> length ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; } netBufferRead ( context -> txBuffer, buffer, offset, length ) ; header. controlWord = htole16 ( TX_CTRL_TXIC | ( context -> frameId ++ & TX_CTRL_TXFID ) ) ; header. byteCount = htole16 ( length ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, KSZ88",0
1082,"<S2SV_ModStart> NULL ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
1083,"<S2SV_ModStart> goto no_new_n0 ; <S2SV_ModEnd> pr_devel ( ""inserting <S2SV_blank> into <S2SV_blank> terminal <S2SV_blank> node\\n"" <S2SV_ModStart> goto no_new_n1 ; <S2SV_ModEnd> pr_devel ( ""inserting <S2SV_blank> into <S2SV_blank> terminal <S2SV_blank> node\\n"" <S2SV_ModStart> goto no_new_n0 ; <S2SV_ModEnd> pr_devel ( ""inserting <S2SV_blank> into <S2SV_blank> terminal <S2SV_blank> node\\n"" <S2SV_ModStart> goto no_new_n1 ; <S2SV_ModEnd> pr_devel ( ""<--%s() <S2SV_blank> = <S2SV_blank> ok <S2SV_blank> [replace]\\n""",0
1084,<S2SV_ModStart>. udpport = 0 <S2SV_ModEnd> ; settings.,1
1085,<S2SV_ModStart> ; # endif g_signal_connect ( ) ;,0
1086,"<S2SV_ModStart>, x_7 ; WORD32 x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 n00, n10, n11, n12, n22, n32, n03, n13, n23, n33 ; WORD32 n00, n10, n11, n12, n22, n32, n03, n13, n23, n33 ; n00 = x_0 + x_2 ; n01 = x_1 + x_3 ; n10 = x_0 - x_2 ; n11 = x_1 - x_3 ; n12 = x_0 - x_2 ; n13 = x_1 - x_3 ; n13 = x_2 - x_3 ; n12 = x_1 - x_2 ; n13 = x_1 - x_3 ; n13 = x_1 - x_3 ; n12 = x_0 - x_2 ; n13 = x_1 - x_3 ; n12 = x_0 - x_2 ; n13 = x_1 -",0
1087,<S2SV_ModStart> clips_ptr ) { if ( num_clips < 0 || num_clips > DRM_MODE_FB_DIRTY_MAX_CLIPS ) { ret = - EINVAL ; goto out_err1 ; },1
1088,<S2SV_ModStart> ; if ( pmd_trans_huge <S2SV_ModEnd> ( * pmd,0
1089,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1090,"<S2SV_ModStart> + 1 ; int minsz = R_MIN ( len, size ) ; int maxsz = R_MAX ( len, size ) ; <S2SV_ModStart> + 1 ; minsz = R_MAX ( len, minsz ) ; <S2SV_ModStart> + 1 ; minsz = R_MAX ( len, minsz ) ; <S2SV_ModStart> + 1 ; minsz = R_MIN ( len, maxsz ) ; <S2SV_ModStart> + 1 ; minsz = R_MAX ( len, minsz ) ; <S2SV_ModStart> + 1 ; minsz <S2SV_ModEnd> = ut64_MAX ( <S2SV_ModStart> + 1, minsz <S2SV_ModEnd> ) ; <S2SV_ModStart> + 1 ; minsz <S2SV_ModEnd> = ut64_MAX ( <S2SV_ModStart> + 1, minsz <S2SV_ModEnd> ) ; <S2SV_ModStart> + 1 ; minsz <S2SV_ModEnd> = ut64_MAX ( <S2SV_ModStart> + 1 ; minsz <S2SV_ModEnd> = ut64_MAX ( <S2SV_ModStart> + 1, minsz <S2SV_ModEnd> ) ; <S2SV_ModStart> + 1 ; minsz <S2SV_ModEnd> = ut64_MAX ( <S2SV_ModStart> + 1, minsz <S2SV_ModEnd> ) ; <S2SV_ModStart> + 1 ; minsz <S2SV_ModEnd> = ut64_MAX ( <S2SV_ModStart> + 1, minsz <S2SV_ModEnd> ) ; <S2SV_ModStart> + 1 ; minsz <S2SV_ModEnd> = ut64_MAX ( <S2SV_ModStart> + 1, minsz <S2SV_ModEnd> ) ; <S2SV_ModStart> + 1 ; minsz <S2SV_ModEnd> = ut64_",0
1091,"<S2SV_ModStart>, frames ; size_t width, height ; size_t target_width, target_height ; if ( argc < 4 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; if (! parse_dim ( argv [ 3 ], & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpout = fopen ( fout, ""wb"" ) ; if ( fpout == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to",0
1092,"<S2SV_ModStart> + DSPQ_DATA_BUFF ; u16 head, tail, size ; head <S2SV_ModEnd> = readw ( <S2SV_ModStart> + JQS_wHead ) ; tail = readw ( chip -> DSPQ + JQS_wTail ) ; size = <S2SV_ModEnd> readw ( chip <S2SV_ModStart> + JQS_wSize ) ; if ( head > size || tail > size ) goto out ; while ( head!= tail ) { snd_msnd_eval_dsp_msg ( chip, readw ( pwDSPQData + 2 * head ) ) ; if ( ++ head > size ) head = 0 ; writew ( head <S2SV_ModEnd>, chip -> <S2SV_ModStart> ) ; } out :",1
1093,<S2SV_ModStart> * opcode_desc ; if ( len < 2 ) { return NULL ; },1
1094,<S2SV_ModStart> acpi_status status ; <S2SV_ModEnd> next = acpi_gbl_module_code_list <S2SV_ModStart> * prev ; acpi_operand_object * next ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> acpi_ns_delete_namespace_subtree ( acpi_gbl_root_node,0
1095,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
1096,"<S2SV_ModStart> + 1 ; if ( strlen ( url_arg ) >= sizeof ( the_url ) ) { strncpy ( the_url, url_arg, sizeof ( the_url ) - 1 ) ; the_url [ sizeof ( the_url ) - 1 ] = 0 ; } <S2SV_ModStart> + 1 ; if ( strlen ( url_arg ) >= sizeof ( the_url ) ) { strncpy ( the_url, url_arg, sizeof ( the_url ) - 1 ) ; the_url [ sizeof ( the_url ) - 1 ] = 0 ; } <S2SV_ModStart> url_arg ) { strncpy <S2SV_ModEnd> ( the_url, <S2SV_ModStart> url_arg, sizeof ( the_url ) - 1 ) ; the_url [ sizeof ( the_url ) - 1 ] = 0 ; } else if ( strlen ( url_arg ) >= sizeof ( the_url ) ) { strncpy ( the_url, url_arg, sizeof ( the_url ) - 1 ) ; the_url [ sizeof ( the_url ) - 1 ] = 0 ; }",0
1097,<S2SV_ModStart> num_fields ) { <S2SV_ModEnd> _Py_IDENTIFIER ( _attributes,0
1098,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
1099,<S2SV_ModStart> = VPX_CODEC_OK ; <S2SV_ModEnd> vpx_codec_alg_priv * priv <S2SV_ModStart> vpx_codec_alg_priv * priv <S2SV_ModEnd> ; vpx_codec_enc_cfg_t * <S2SV_ModStart> { priv = vpx_calloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> -> base ; priv -> sz = sizeof ( * priv ) ; ctx -> priv -> iface = ctx -> iface ; priv -> init_flags = ctx -> init_flags ; } cfg = & ctx -> config. enc ; for ( i = 0 ; extracfg_map [ i ]. usage && extracfg_map [ i ]. usage ; i ++ ) ; priv -> cfg = & extracfg_map [ i ]. cfg ; priv -> vp8_cfg = extracfg_map [ i ]. cfg ; priv -> cx_data_sz = priv -> cfg. g_w * priv -> cfg. g_h * priv -> cfg. g_w * priv -> cfg. g_h * 3 / 2 ; priv -> cx_data_sz = 32768 ; priv -> cx_data = malloc ( priv -> cx_data_sz ) ; if (! priv -> cx_data,0
1100,"<S2SV_ModStart> error ) { if ( bp && ( <S2SV_ModEnd> xfs_da_shrink_inode ( args <S2SV_ModStart>, bp )!= 0 ) <S2SV_ModEnd> ) goto out",1
1101,<S2SV_ModStart> } if ( cnt_c > BOT ) { totfr = 0 ; for ( i = 0 ; i < 16 ; i ++ ) sum += pixel -> freq [ i ] ; for ( j = 0 ; j < i ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; for ( j = 0 ; j < i ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; for ( j = 0 ; j < 16 ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; for ( j = 0 ; j < 4 ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; for ( j = 0 ; j < i ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; for ( j = 0 ; j < i ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; for ( j = 0 ; j < 16 ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; for ( j = 0 ; j < 4 ; j ++ ) sum += pixel -> freq [ i,0
1102,<S2SV_ModStart> timer ) ; spin_lock ( & timeri -> lock ) ; <S2SV_ModStart> open_list ) { <S2SV_ModEnd> _snd_timer_stop ( slave <S2SV_ModStart> timer = NULL ; spin_unlock ( & timeri -> lock ) ; } mutex_unlock ( & register_mutex ) ;,0
1103,"<S2SV_ModStart> return err ; if (! <S2SV_ModEnd> attrs [ TIPC_NLA_SOCK <S2SV_ModStart> attrs [ TIPC_NLA_SOCK <S2SV_ModEnd> ] ) return <S2SV_ModStart> - EINVAL ; err = nla_parse_nested ( sock, TIPC_NLA_SOCK_MAX, attrs [ TIPC_NLA_SOCK ], tipc_nl_sock_policy ) ; if ( err ) return err ; if (! sock <S2SV_ModEnd> [ TIPC_NLA_SOCK_REF ] <S2SV_ModStart> [ TIPC_NLA_SOCK_REF ] <S2SV_ModEnd> ) return - <S2SV_ModStart> - EINVAL ; tsk_portid = nla_get_u32 ( sock [ TIPC_NLA_SOCK_REF ] ) ; } if ( done ) return 0 ; tsk = tipc_sk_lookup ( net, tsk_portid ) ; if (! tsk ) return - EINVAL ;",1
1104,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> ( ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. count = 0 ; * res = VPX_CODEC_INVALID_PARAM ; return - 1 ; } if ( ctx -> fragments. count > 1 << EIGHT_PARTITION ) + 1 ) { ctx -> fragments. count = 0 ; return 0 ; } if (! ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; } else { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count = 1 ; } return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1105,<S2SV_ModStart> = v ; if (! IS_ERR ( vma ) ),1
1106,<S2SV_ModStart> ) buffer ; if ( total_len < sizeof ( * cap ) || total_len < <S2SV_ModEnd> cap -> bLength <S2SV_ModStart> cap -> bLength ) { dev -> bos -> desc -> bNumDeviceCaps = i ; break ; } length = cap -> bLength <S2SV_ModEnd> ; total_len -=,1
1107,<S2SV_ModStart> task = current <S2SV_ModEnd> ; if (,1
1108,"<S2SV_ModStart> { if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_len > inode -> i_sb -> s_blocksize ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> inode <S2SV_blank> %d\\n"", inode -> i_ino ) ; goto out ; } if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_len > inode -> i_sb -> s_blocksize - iinfo -> i_len ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> inode <S2SV_blank> %d\\n"", inode -> i_ino ) ; goto out ; } if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_len > inode -> i_sb -> s_blocksize - iinfo -> i_len ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> inode <S2SV_blank> %d\\n"", inode -> i_ino ) ; goto out ; }",0
1109,"<S2SV_ModStart> data ) { uint16_t status ; <S2SV_ModStart> ( interface, ENC28J60_MIREGADR, ENC28J60_MIREGADR_DEFAULT <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",0
1110,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> bad_format_imginfo ( char <S2SV_ModStart> fmt ) { <S2SV_ModEnd> int n =,0
1111,<S2SV_ModStart> sk_forward_alloc ) ; inet -> opt = NULL ;,0
1112,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
1113,<S2SV_ModStart>! saw_digit ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart>!= '\\r' ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart>!= '\\n' ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart> ; trunc : * endp = bp ; <S2SV_ModStart> ; invalid : * endp = bp ;,1
1114,"<S2SV_ModStart> ; args -> rmtvaluelen = be32_to_cpu ( name_rmt -> valuelen ) ; args -> rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ( name_rmt -> <S2SV_ModEnd> valueblk ) ; <S2SV_ModStart>, args -> rmtvaluelen <S2SV_ModEnd> ) ; return",1
1115,"<S2SV_ModStart> ""DefragIPv4NoDataTest"", DefragIPv4NoDataTest ) ; UtRegisterTest ( ""DefragIPv4TooLargeTest"", DefragIPv4TooLargeTest ) ;",0
1116,"<S2SV_ModStart> ; if (! IS_ERR ( object_data ) && object_length > 0 && object_length + add_v1_record ) { new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { return SC_ERROR_OUT_OF_MEMORY ; } if ( object_length > 0 && object_length + add_v1_record ) { new_object. length = object_length + add_v1_record ; } if ( object_data ) { new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { return SC_ERROR_OUT_OF_MEMORY ; } if ( add_v1_record ) { new_object. data [ 0 ] = COOLKEY_V1_OBJECT ; new_object. length ++ ; } memcpy ( & new_object. data [ add_v1_record ], object_data, object_length ) ; } r = sc_cardctl_coolkey_add_object_to_list ( & priv -> objects_",0
1117,"<S2SV_ModStart> out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; goto out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; goto out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; goto out_error ; }",0
1118,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
1119,<S2SV_ModStart> u8 label_len ; <S2SV_ModEnd> GET8 ( label_len <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ;,1
1120,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpAcc ( TIFF <S2SV_ModStart> cc ) ; if <S2SV_ModEnd> ( cc % <S2SV_ModStart> * stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""fpAcc"", ""%s"", ""cc%(bps*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> tmp ) return 0 <S2SV_ModStart> tmp ) ; return 1 ;",1
1121,"<S2SV_ModStart> -> vm_ops ) <S2SV_ModEnd> return do_fault ( <S2SV_ModStart>, pte, pmd, flags, entry ) ; <S2SV_ModEnd> return do_anonymous_page ( <S2SV_ModStart>, address, pte, pmd, <S2SV_ModEnd> flags ) ;",1
1122,"<S2SV_ModStart> s ) { size_t len = strlen ( s ) + 1 ; <S2SV_ModStart> = pool_alloc ( len ) ; memcpy <S2SV_ModEnd> ( r, <S2SV_ModStart> r, s, len",1
1123,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1124,"<S2SV_ModStart> ; } } if ( new_map. nr_extents == 0 ) new_map. nr_extents = max ( map -> nr_extents, <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
1125,"<S2SV_ModStart> ) ; } if ( cu -> dies [ cu -> length ]. tag == 0 || cu -> dies [ cu -> length ]. tag == 0 || cu -> dies [ cu -> length ]. tag == 0 || cu -> dies [ cu -> length ]. tag == 0 ||! cu -> dies [ cu -> length ]. tag ) { eprintf ( ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> tag <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; break ; } if ( cu -> dies [ cu -> length ]. tag == 0 || cu -> dies [ cu -> length ]. tag == 0 || cu -> dies [ cu -> length ]. tag == 0 || cu -> dies [ cu -> length ]. tag == 0 ||! cu -> dies [ cu -> length ]. tag ) { eprintf ( ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> tag <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; break ; }",0
1126,"<S2SV_ModStart> NULL ; } if ( p_sys -> p_format -> interlaced ) { schro_encoder_setting_set_double ( p_sys -> p_schro, ""interlaced_coding"",! p_enc -> b_auto_field_coding ) ; } else if ( p_sys -> p_format -> interlaced ) { schro_encoder_setting_set_double ( p_sys -> p_schro, ""interlaced_coding"",! p_enc -> b_auto_field_coding ) { schro_encoder_setting_set_double ( p_sys -> p_schro, ""interlaced_coding"", p_enc -> b_auto_field_coding ) ; } else { if ( p_sys -> p_format -> interlaced ) { schro_encoder_setting_set_double ( p_sys -> p_schro, ""interlaced_coding"", p_enc -> b_auto_field_coding ) { schro_encoder_setting_set_double ( p_sys -> p_schro, ""interlaced_coding",0
1127,"<S2SV_ModStart>, '\\0' ) ) { if (! mp_path_exists ( fname. name ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", fname. name ) ; break ; } mp_tarray_append ( mf, mf -> names, mf -> nr_of_files, entry ) ; mp_info ( log, ""number <S2SV_blank> of <S2SV_blank> files: <S2SV_blank> %d\\n"", mf -> nr_of_files ) ; } else if ( bstrchr ( fname, '\\0' ) ) { if (! mp_path_exists ( fname. name ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", fname. name ) ; break ; } mp_tarray_append ( mf, mf -> names, mf -> nr_of_files, entry ) ; mp_info ( log, ""number <S2SV_blank> of <S2SV_blank> files: <S2SV_blank> %d\\n"", mf -> nr_of_files ) ; mp_info ( log, ""number <S2SV_blank> of <S2SV_blank> files: <S2SV_blank> %d\\n"", count ) ; goto exit_mf ; }",0
1128,<S2SV_ModStart> case IPPROTO_ROUTING : ND_TCHECK ( * cp ) ; <S2SV_ModStart> ip6 ) ; if ( advance!= 0 ) advance = 0 ; <S2SV_ModStart> ip6 ) ; if ( advance!= 0 ) advance = 1 ; <S2SV_ModStart> ip6 ) ; if ( advance!= 0 ) advance = 1 ; <S2SV_ModStart> ip6 ) ; if ( advance!= 0 ) advance = 0 ;,0
1129,"<S2SV_ModStart> 4 ) ; if ( idx + 4 > len ) return NULL ; <S2SV_ModStart> ]. len ) ; CHECKINT32 ( idx, len ) ; a -> properties = CHECKED_XMALLOC ( uint32, num_properties ) ; for ( j = 0 ; j < ( a -> properties [ i ]. len >> 1 ) ; j ++ ) a -> properties [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> properties [ i ]. len ) ; j ++ ) a -> properties [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> properties [ i ]. len ) ; } } else { size_t i ; a -> properties = CHECKED_XCALLOC ( VarLenData, a -> num_properties ) ; for ( i = 0 ; i < a -> num_properties ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> names [ i ]. data = CHECKED_XMALLOC ( unsigned char, a -> names [ i ]. len ) ; for ( j = 0 ; j < a ->",0
1130,"<S2SV_ModStart> { if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_len > inode -> i_sb -> s_blocksize ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> inode <S2SV_blank> %d\\n"", inode -> i_ino ) ; goto out ; } if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_len > inode -> i_sb -> s_blocksize - iinfo -> i_len ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> inode <S2SV_blank> %d\\n"", inode -> i_ino ) ; goto out ; } if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_len > inode -> i_sb -> s_blocksize - iinfo -> i_len ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> inode <S2SV_blank> %d\\n"", inode -> i_ino ) ; goto out ; }",0
1131,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
1132,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
1133,"<S2SV_ModStart> ( ) ; strcpy ( t1_buf_array, t1_line_array ) ; strcpy ( t1_line_array, charstringname ) ; t1_line_ptr = eol ( t1_line_array ) ; } else if ( strlen ( p ) == strlen ( charstringname ) ) { strcpy ( t1_buf_array, t1_line_array ) ; * ( strend ( t1_buf_array ) - 1 ) ='<S2SV_blank>'; t1_getline ( ) ; strcpy ( t1_line_array, t1_buf_array ) ; t1_line_ptr = eol ( t1_line_array ) ; } else if ( strlen ( p ) == strlen ( charstringname ) ) { strcpy ( t1_buf_array, p ) ; strcpy ( t1_line_array, t1_buf_array ) ; * ( strend ( t1_buf_array ) - 1 ) ='<S2SV_blank>'; t1_getline ( ) ; }",0
1134,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; YV12_BUFFER_CONFIG * fb ; if ( ctx -> frame_parallel_decode ) { vp9_get_reference_dec <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> idx, & fb ) ; yuvconfig2image ( & data -> img, fb, NULL ) ; return VPX_CODEC_OK ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1135,"<S2SV_ModStart> ctxt ) ; if (! ( em_syscall_is_enabled ( ctxt ) ) ) return emulate_ud ( ctxt ) ; <S2SV_ModStart>, & ss ) ; if (! ( efer & EFER_SCE ) ) return emulate_ud ( ctxt",1
1136,"<S2SV_ModStart> if ( ++ next_marker < 0 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> SOI.\\n"", next_marker ) ; return AVERROR_INVALIDDATA ; } if ( next_marker!= JPEG_MARKER_EOI ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> EOI.\\n"", next_marker ) ; return AVERROR_INVALIDDATA ; } if ( next_marker < 0 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> SOI.\\n"", next_marker ) ; return AVERROR_INVALIDDATA ; }",0
1137,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == testlist ) e = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; if (! e ) return NULL ; if (! set_context ( c, e, Store, ch ) ) return NULL ; switch ( TYPE ( CHILD ( n, 1 ) ) ) { case Name_kind : case Attribute_kind : break ; default : ast_error ( c, ch, ""illegal <S2SV_blank> expression <S2SV_blank> for <S2SV_blank> augmented <S2SV_blank> assignment"" ) ; return NULL ; } ch = CHILD ( n, 2 ) ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; switch ( expr1 -> kind ) { case Name_kind : expr1 = ast_for_expr ( c, ch ) ; if (! expr1 ) return NULL ; break ; default : ast_error ( c, ch, ""illegal <S2SV_blank> expression <S2SV_blank> for <S2SV_blank> augmented <S2SV_blank> assignment"" ) ; return NULL ; } ch = CHILD ( n, 3 ) ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; switch ( expr1 -> kind )",0
1138,"<S2SV_ModStart> int vp8_denoiser_filter_c ( <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * mc_running_avg_y, int mc_avg_y_stride, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * running_avg_y, int avg_y_stride, int r, c, i ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( i = 0 ; i < 3 ; i ++ ) adj_val [ i ] += 1 ; } for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 16 ; ++ c ) { int diff = mc_running_avg_y [ c ] - sig [ c ] ; int absdiff = abs ( diff ) ; if ( absdiff >= 0 && absdiff <= 3 ) { running_avg_y [ c ] = mc_running_avg_y [ c ] ; sum_diff += diff ; } else { if ( absdiff >= 4 && absdiff <= 7 ) adjustment = adj_val [ 0 ] ; else adjustment = adj_",0
1139,"<S2SV_ModStart> ) == 0 && ( ( reqPtr -> avail - 1 ) == 0 ) ) { Ns_Log ( Ns_LogRequestDebug, ""request <S2SV_blank> header <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long"" ) ; continue ; } if ( ( reqPtr -> avail - 1 ) == 0 ) { Ns_Log ( Ns_LogRequestDebug, ""request <S2SV_blank> header <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long"" ) ; continue ; } if ( ( reqPtr -> avail - 1 ) == 0 ) { Ns_Log ( Ns_LogRequestDebug, ""request <S2SV_blank> header <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long"" ) ; continue ; } if ( ( reqPtr -> avail - 1 ) == 0 ) { Ns_Log ( Ns_LogRequestDebug, ""request <S2SV_blank> header <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long"" ) ; continue ; } if ( ( reqPtr -> avail - 1 ) == 0 ) { Ns_Log ( Ns_LogRequestDebug, ""request <S2SV_blank> header <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long"" ) ; continue ; }",0
1140,"<S2SV_ModStart> ret = 0 ; if ( xtregs -> cp0 & XTREGS_CP0_BITSP ) { ret |= __copy_from_user ( & xtregs -> cp0, & xtregs -> cp0, sizeof ( xtregs -> cp0 ) ) ; } <S2SV_ModEnd> # if XTENSA_HAVE_COPROCESSORS",0
1141,<S2SV_ModStart> size ) ; # if ( ETH_SUPPORT == ENABLED ) message -> srcIpAddr = queueItem -> srcIpAddr ; message -> srcPort = queueItem -> srcPort ; message -> destIpAddr = queueItem -> destIpAddr ; message -> ttl = queueItem -> ancillary. ttl ; # endif # if ( ETH_PORT_TAGGING_SUPPORT == ENABLED ) message -> switchPort = queueItem -> ancillary. port ; # endif # if ( ETH_TIMESTAMP_SUPPORT == ENABLED ) message -> timestamp = queueItem -> ancillary. timestamp ; # endif,0
1142,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" <S2SV_ModStart> -> dst_dev ; <S2SV_ModEnd> else remote_dev = <S2SV_ModStart> -> src_dev ; <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for""",0
1143,"<S2SV_ModStart> ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_MULTICAST_HOPS."" ) ; err = - errno ; goto close_sock ; } val = 1 ; ret = setsockopt ( sock, IPPROTO_IPV6, IPV6_RECVHOPLIMIT, & val, sizeof ( val ) ) ; if ( ret == - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_RECVHOPLIMIT,.""",1
1144,<S2SV_ModStart> int error ; size_t size ; <S2SV_ModStart> get_bh ( new_bh ) ; size = bh_size ( new_bh ) ; if ( size > inode -> i_sb -> s_blocksize - EXT2_XATTR_CACHE_SIZE ) { error = - EIO ; goto cleanup ; } <S2SV_ModStart> new_bh ) ; size = inode -> i_sb -> s_blocksize - EXT2_XATTR_CACHE_SIZE ; if ( size > inode -> i_sb -> s_blocksize - EXT2_XATTR_CACHE_SIZE ) { error = - EIO ; goto cleanup ; } <S2SV_ModStart> cleanup : if ( size > inode -> i_sb -> s_blocksize - EXT2_XATTR_CACHE_SIZE ) { unlock_buffer ( new_bh ) ; goto cleanup ; } size = inode -> i_sb -> s_blocksize - EXT2_XATTR_CACHE_SIZE ; if ( size > inode -> i_sb -> s_blocksize - EXT2_XATTR_CACHE_SIZE ) { unlock_buffer ( new_bh ) ; goto cleanup ; } <S2SV_ModStart> cleanup : if ( size > inode -> i_sb ->,0
1145,"<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp. <S2SV_ModStart>. type, ""compression"", sizeof ( rcomp. type ) <S2SV_ModEnd> ) ; if",1
1146,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> { if ( vp9_set_active_map <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> map -> active_map <S2SV_ModEnd>, map ->",0
1147,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( rc ) return rc ; inode -> i_ctime = CURRENT_TIME ; mark_inode_dirty ( inode ) ; } break ; case ACL_TYPE_DEFAULT : ea_name = XATTR_NAME_POSIX_ACL_DEFAULT ; break ; default : return - EINVAL ; } if ( acl ) { size = posix_acl_xattr_size ( acl -> a_count ) ; value = kmalloc ( size, GFP_KERNEL ) ; if (! value ) return - ENOMEM ; rc = posix_acl_to_xattr ( & init_user_ns, acl, value, size <S2SV_ModStart> < 0 ) <S2SV_ModEnd> goto out ;",1
1148,<S2SV_ModStart> ( <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1149,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
1150,<S2SV_ModStart> 3 * len + 8,1
1151,<S2SV_ModStart> SUCCESS ) { if ( Z_TYPE_PP ( var )!= IS_LONG ) { zval lval ; lval = * * var ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; points <S2SV_ModStart>. x = Z_LVAL ( lval ) ; } else { points [ i ]. x = <S2SV_ModStart> var ) ; } <S2SV_ModStart> SUCCESS ) { if ( Z_TYPE_PP ( var )!= IS_LONG ) { zval lval ; lval = * * var ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; points <S2SV_ModStart>. y = Z_LVAL ( lval ) ; } else { points [ i ]. y = <S2SV_ModStart> var ) ; } <S2SV_ModStart> SUCCESS ) { if ( Z_TYPE_PP ( var )!= IS_LONG ) { zval lval ; lval = * * var ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; points <S2SV_ModStart>. y = Z_LVAL ( lval ) ; } else { points [ i ]. y = <S2SV_ModStart> var ) ;,0
1152,<S2SV_ModStart> ; sig_none = <S2SV_ModEnd> timr -> it_sigev_notify <S2SV_ModStart> timr -> it_sigev_notify <S2SV_ModEnd> == SIGEV_NONE ;,1
1153,"<S2SV_ModStart> unsigned char * ) AcquireQuantumMemory ( imsx * imsy, 1 ) ; if ( imbuf == NULL ) { return ( MagickFalse ) ; } <S2SV_ModStart> n ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( n = 0 ; n < 16 ; n ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( i = 0 ; i < 24 ; i ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( i = 0 ; i < 24 ; i ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( i = 0 ; i < 24 ; i ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( i = 0 ; i < 24 ; i ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( i = 0 ; i < 24 ; i ++ ) { sixel",0
1154,"<S2SV_ModStart> ( ) ; strcpy ( t1_buf_array, t1_line_array ) ; strcpy ( t1_line_array, charstringname ) ; t1_line_ptr = eol ( t1_line_array ) ; } else if ( strlen ( p ) == strlen ( charstringname ) ) { strcpy ( t1_buf_array, t1_line_array ) ; * ( strend ( t1_buf_array ) - 1 ) ='<S2SV_blank>'; t1_getline ( ) ; strcpy ( t1_line_array, t1_buf_array ) ; t1_line_ptr = eol ( t1_line_array ) ; } else if ( strlen ( p ) == strlen ( charstringname ) ) { strcpy ( t1_buf_array, p ) ; strcpy ( t1_line_array, t1_buf_array ) ; * ( strend ( t1_buf_array ) - 1 ) ='<S2SV_blank>'; t1_getline ( ) ; }",0
1155,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { <S2SV_ModEnd> vpx_ref_frame_t * data <S2SV_ModStart> * ) ; if ( ctx -> frame_parallel_decode ) { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; <S2SV_ModStart> vp9_copy_reference_dec ( ctx <S2SV_ModEnd>, ( VP9_REFFRAME",0
1156,"<S2SV_ModStart>. path ; return Curl_urldecode <S2SV_ModEnd> ( data, <S2SV_ModStart>, 0, & <S2SV_ModEnd> pop3c -> mailbox <S2SV_ModStart> pop3c -> mailbox, NULL, TRUE ) <S2SV_ModEnd> ; } <S2SV_null>",1
1157,<S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ; <S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ;,1
1158,"<S2SV_ModStart> gb ) ; if ( sh -> first_slice_in_pic_flag ) { av_log ( s -> avctx, AV_LOG_ERROR, ""First <S2SV_blank> slice <S2SV_blank> in <S2SV_blank> pic <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> frame.\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
1159,<S2SV_ModStart> if (! ps_dec -> ps_dec_err_status -> u1_err_flag ) { ps_dec -> ps_dec_err_status -> u1_err_flag |= ERROR_INV_SLICE ; ps_dec -> ps_dec_err_status -> u1_err_flag |= ERROR_INV_SLICE ; ps_dec -> ps_dec_err_status -> u1_err_flag &= ~ ERROR_INV_SLICE ; ps_dec -> ps_dec_err_status -> u1_err_flag = 0 ; ps_dec -> ps_dec_err_status -> u1_err_flag |= ERROR_INV_SLICE ; ps_dec -> ps_dec_err_status -> u1_err_flag |= ERROR_INV_SLICE ; ps_dec -> ps_dec_err_status -> u1_err_flag &= ~ ERROR_INV_SLICE ; ps_dec -> ps_dec_err_status -> u1_err_flag = 0 ; ps_dec -> ps_dec_err_status -> u1_err_flag,0
1160,"<S2SV_ModStart>, u4_y_offset ; IMPEG2D_TRACE_MB_START ( ps_dec -> u2_mb_x, ps_dec -> u2_mb_y ) ; <S2SV_ModStart> B_PIC ) { if ( ps_dec -> s_cur_frm_buf -> u4_x_dst_offset!= 0 || ps_dec -> s_cur_frm_buf -> u4_y_dst_offset!= 0 || ps_dec -> u2_cur_frm_buf -> u4_x_dst_offset!= ps_dec -> u2_frame_width ) { break ; } <S2SV_ModStart> ps_dec ) ; } else { if ( ps_dec -> e_pic_type == B_PIC ) { if ( ps_dec -> s_cur_frm_buf -> u4_x_dst_offset!= 0 || ps_dec -> s_cur_frm_buf -> u4_x_dst_offset!= 0 || ps_dec -> u4_y_dst_offset!= ps_dec -> u2_frame_width ) { break ; } ps_dec -> u2_prev_intra_mb",0
1161,"<S2SV_ModStart> VP9_LAST_FLAG ) { VP9_COMMON * const cm = & pbi -> common ; YV12_BUFFER * const cfg = cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if ( cfg == NULL ) { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Missing <S2SV_blank> buffer <S2SV_blank> configuration"" ) ; } else if ( equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; } else if ( ref_frame_flag == VP9_FIRST_FLAG ) { const YV12_BUFFER_CONFIG * const cfg = cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ] ; if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_",0
1162,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
1163,<S2SV_ModStart> -> mbmi ; <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1164,<S2SV_ModStart> -> mmap_legacy_base = TASK_UNMAPPED_BASE + random_factor <S2SV_ModEnd> ; if (,1
1165,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 4 ) ; <S2SV_ModEnd> src += src_stride",0
1166,"<S2SV_ModStart> return getnum ( <S2SV_ModEnd> fmt, 1 <S2SV_ModStart> = getnum ( <S2SV_ModEnd> fmt, sizeof",1
1167,"<S2SV_ModStart> nrow ) { if ( ( row + img -> row_offset ) % rowsperstrip!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""gtStripSeparate"", ""%s"", ""(row+img->row_offset)%rowsperstrip!=0"" ) ; return ( 0 ) ; } <S2SV_ModStart> -> row_offset ; } if ( ( row + img -> row_offset ) % rowsperstrip!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""gtStripSeparate"", ""%s"", ""(row+img->row_offset)%rowsperstrip!=0"" ) ; return ( 0 ) ; } <S2SV_ModStart> buf == NULL ) { TIFFErrorExt ( tif -> tif_clientdata, ""gtStripSeparate"", ""%s"", ""(row+img->row_offset)%rowsperstrip!=0"", ""(row+img->row_offset)%rowsperstrip!=0"" ) ; return ( 0 ) ; }",0
1168,"<S2SV_ModStart> } } } if ( TYPE ( n ) == TYPE_COMMENT ) { char buf [ 128 ] ; assert ( 0 ) ; n = CHILD ( n, 0 ) ; i = 2 ; l = 0 ; if ( TYPE ( CHILD ( n, 1 ) ) == TYPE_COMMENT ) i += 2 ; l += num_stmts ( CHILD ( n, 1 ) ) ; } else { char buf [ 128 ] ; assert ( 0 ) ; n = CHILD ( n, 1 ) ; } if ( TYPE ( CHILD ( n, 2 ) ) == TYPE_COMMENT ) i += 2 ; l = 0 ; if ( TYPE ( CHILD ( n, 2 ) ) == TYPE_COMMENT ) i += 2 ; if ( TYPE ( CHILD ( n, 3 ) ) == TYPE_COMMENT ) i += 2 ; if ( TYPE ( CHILD ( n, 3 ) ) == TYPE_COMMENT ) i += 2 ; if ( TYPE ( CHILD ( n, 3 ) ) == TYPE_COMMENT ) i += 2 ; if ( TYPE ( CHILD ( n, 3 ) ) == TYPE_COMMENT ) i += 2 ; for ( ; i < NCH ( n ) - 1 ; i ++ ) l +=",0
1169,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1170,<S2SV_ModStart> ( upid == INT_MIN ) return - ESRCH ; if ( upid ==,1
1171,"<S2SV_ModStart> siocb -> scm, false",1
1172,<S2SV_ModStart> ; if ( num < 0 ) return 0 ; if ( <S2SV_ModEnd> num & ( <S2SV_ModStart> 1 ) )!= 0 ) return 0 ; if ( num & ( 1 << ( number - 1 ) ) ) return num - ( 1 << number ) ; else return num <S2SV_ModEnd> - ( 1,0
1173,"<S2SV_ModStart>, plane ) * ( ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH )? 2 : 1 ) <S2SV_ModStart> ( buf, 1, stride <S2SV_ModEnd>, file )",0
1174,"<S2SV_ModStart> ; uint16_t attr_len <S2SV_ModEnd> ; uint16_t orig_attr_len <S2SV_ModStart> avp -> length > L2TP_MAX_AVP_LEN ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; <S2SV_ModStart> - 1 ; } if ( attr_len > MD5_DIGEST_LENGTH - 2 ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } if ( attr_len > MD5_DIGEST_LENGTH - 2 ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", attr_",0
1175,"<S2SV_ModStart> -> private ; struct dm_dev * dev = lc -> dev ; int r = 0 ; if <S2SV_ModEnd> ( lc -> <S2SV_ModStart> ( lc -> start || ti -> len!= i_size_read ( dev -> bdev -> bd_inode ) >> SECTOR_SHIFT ) r = scsi_verify_blk_ioctl ( NULL, cmd ) ; return r? : __blkdev_driver_ioctl ( <S2SV_ModStart> -> bdev, <S2SV_ModEnd> dev -> mode",1
1176,<S2SV_ModStart> -> key. counter [ 0 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 2 ) ; actx -> nonce [ 0 ] = actx -> key. counter [ 1 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 4 ) ; actx -> nonce [ 1 ] = actx -> key. counter [ 2 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 3 ) ; actx -> nonce [ 2 ] = actx -> key. counter [ 3 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 5 ) ; actx -> nonce [ 3 ] = actx -> key. counter [ 4 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 6 ) ; actx -> nonce [ 4 ] = actx -> key. counter [ 3 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 5 ) ; actx -> nonce [ 5 ] = actx -> key. counter [ 3 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr +,0
1177,<S2SV_ModStart> alg ) { if ( type == <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1178,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0 ) ;",0
1179,<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ;,1
1180,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1181,"<S2SV_ModStart> sock, sk ) ; memset ( sa, 0, sizeof ( * sa )",1
1182,"<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { if ( cpkt. length > 64 ) { return - 1 ; } <S2SV_ModStart> cpkt. data, cpkt. length ) ; } else if ( cpkt. cptype == MT_CPTYPE_PLAINDATA ) { fwrite ( ( const void * ) cpkt. data, 1, cpkt. length, stdout ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 1 ; signal ( SIGWINCH, sig_winch ) ; } } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 0 ; if ( is_a_tty ) { setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ) ; signal ( SIGWINCH, sig_winch ) ; } } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 1 ; if ( is_a_tty ) { raw_term ( ) ; signal ( SIGWINCH, sig_winch ) ; } } else if ( cpkt. c",0
1183,<S2SV_ModStart> NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC | NTLMSSP_NEGOTIATE_SEAL <S2SV_ModStart> -> sign ) <S2SV_ModEnd> flags |= NTLMSSP_NEGOTIATE_SIGN <S2SV_ModStart> |= NTLMSSP_NEGOTIATE_KEY_XCH ; <S2SV_ModEnd> tmp = *,1
1184,"<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_empty ( adata -> conn ) ; <S2SV_ModStart> ""Encrypted <S2SV_blank> connection <S2SV_blank> unavailable"" ) ) ; mutt_socket_empty ( adata -> conn ) ;",0
1185,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
1186,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horDiff8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
1187,<S2SV_ModStart> -> head <= 0 || ( int ) ( g -> sect * g -> head ) > <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1188,"<S2SV_ModStart> line ) ) { if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } } else { memset ( line, 0, sizeof ( line ) ) ; strcpy ( line, ""?WATCH={\\""json\\"":true};\\n"" ) ; if ( send ( gpsd_sock, line, 22, 0 )!= 22 ) return ; } memset ( line, 0, sizeof ( line ) ) ; if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; }",0
1189,"<S2SV_ModStart>, & rlen, 0",1
1190,"<S2SV_ModStart> * slavename ; int len = 0 ; <S2SV_ModStart> } # endif len = strlen ( curconn -> password ) + 1 ; <S2SV_ModStart>, 82, len <S2SV_ModEnd> ) ; memcpy <S2SV_ModStart> ( md5data + len <S2SV_ModEnd>, curconn -> <S2SV_ModStart> curconn -> pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, len + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; curconn -> state = STATE_ACTIVE ; init_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> seskey, curconn -> outcounter, pkthdr -> outcounter + add_control_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> seskey, 0 ) ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr",0
1191,"<S2SV_ModStart> mntent, path, rootfs -> mount",1
1192,"<S2SV_ModStart> ; if ( name -> value == ""__debug__"" ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } if ( <S2SV_ModStart> { if ( name -> value == * p ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } if ( full_checks ) { const char * const * p = FORBIDDEN ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } } if ( full_checks ) { const char * const * p = FORBIDDEN ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } else { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return",0
1193,<S2SV_ModStart> ; out_unmap : for ( j = cur_page ; j < page_limit ; j ++ ) { if (! pages [ j ] ) break ; put_page ( pages [ j ] ) ; },0
1194,<S2SV_ModStart> -> depth ; if ( numcolors > RAS_CMAP_MAXSIZ ) { return - 1 ; } <S2SV_ModEnd> actualnumcolors = hdr,1
1195,"<S2SV_ModStart> state. path <S2SV_ModEnd> ; char localhost <S2SV_ModStart> ""localhost"" ; } result = Curl_urldecode ( conn -> data, path, 0, & <S2SV_ModStart> smtpc -> domain, NULL, TRUE ) ; if ( result ) return result <S2SV_ModEnd> ; state (",1
1196,"<S2SV_ModStart> LEX_ID ) { jsl_strncat <S2SV_ModEnd> ( str, <S2SV_ModStart> ( str, ""ID:"" <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, ""String:"" <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, ""String:"" <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, ""String:"" <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, ""String:"" <S2SV_ModEnd>, len )",0
1197,<S2SV_ModStart> [ i ] && j < sizeof ( buf ),0
1198,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
1199,<S2SV_ModStart> 0 ) ; goto out <S2SV_ModEnd> ; } if,0
1200,<S2SV_ModStart> 0 ) ; if (! r ) return - EINVAL ;,1
1201,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1202,,1
1203,<S2SV_ModStart> { if ( <S2SV_ModEnd> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1204,"<S2SV_ModStart>, rqstp, res <S2SV_ModEnd> ) ; out",1
1205,"<S2SV_ModStart> mntent -> mnt_dir, NULL",1
1206,"<S2SV_ModStart> iv ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
1207,"<S2SV_ModStart> ) ) { * status = ""EVIDENCE_TICKET_MISMATCH"" ; <S2SV_ModStart> ) ) { * status = ""EVIDENCE_TICKET_MISMATCH"" ;",0
1208,<S2SV_ModStart> thread -> tp_value [ 0 ] <S2SV_ModStart> childregs -> ARM_r3 ; thread -> tp_value [ 1 ] = get_tpuser ( ),1
1209,"<S2SV_ModStart> bufsize ) { char * new_buf ; size_t new_bufsize <S2SV_ModEnd> ; JAS_DBGLOG ( <S2SV_ModStart> ; if ( bufsize < 0 ) { jas_deprecated ( ""negative <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> for <S2SV_blank> jas_stream_memopen"" ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> 0 ) { new_bufsize <S2SV_ModEnd> = 1024 ; <S2SV_ModStart> = bufsize ; new_buf = 0 <S2SV_ModEnd> ; } else <S2SV_ModStart> } else { new_bufsize <S2SV_ModEnd> = bufsize ; <S2SV_ModStart> = bufsize ; new_buf = 0 <S2SV_ModEnd> ; } if",0
1210,"<S2SV_ModStart> sshbuf * b = NULL <S2SV_ModStart> char * pkalg = NULL <S2SV_ModStart> u_char * pkblob = NULL <S2SV_ModStart>, * sig = NULL <S2SV_ModStart> ; if ( <S2SV_ModEnd>! authctxt -> <S2SV_ModStart> valid ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done <S2SV_ModStart> ; if ( ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_string ( ssh, & pkblob, & blen ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & pkalg, NULL ) )!= 0 || ( r = sshpkt_get_string ( ssh, & pkblob, & blen ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_",0
1211,"<S2SV_ModStart> ; uint32_t bcount ; if (! config -> num_channels ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
1212,"<S2SV_ModStart> == READ ) { int ret ; <S2SV_ModStart> = ocfs2_dio_get_block ; ret = blockdev_direct_IO ( iocb, inode, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; } else ret = 0 <S2SV_ModEnd> ; return __blockdev_direct_IO",0
1213,"<S2SV_ModStart> mech ) ; ret = gsasl_verify_mech ( ctx -> gsasl_ctx, mech ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_verify_mech <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn; <S2SV_blank> (%d): <S2SV_blank> %s"", ret, gsasl_strerror ( ret ) ) ; return ; } if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn; <S2SV_blank> (%d): <S2SV_blank> %s"", ret, gsasl_strerror ( ret ) ) ; _sx_nad_write ( s, _sx_sasl_failure ( s, _sasl_err_TEMPORARY_FAILURE, gsasl_strerror ( ret ) ) ), 0 ) ; return ; } ret = gsasl_server_start ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= GSASL_OK ) { _sx_debug (",0
1214,<S2SV_ModStart> tn_buf ) ; return - EACCES ;,1
1215,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteFujiEntry ) ) ;",1
1216,"<S2SV_ModStart> failed_mount3 ; } # ifdef CONFIG_EXT2_FS_XATTR sbi -> s_mb_cache = ext2_xattr_create_cache ( ) ; if (! sbi -> s_mb_cache ) { ext2_msg ( sb, KERN_ERR, ""Failed <S2SV_blank> to <S2SV_blank> create <S2SV_blank> an <S2SV_blank> mb_cache"" ) ; goto failed_mount3 ; } # endif <S2SV_ModStart> ; failed_mount3 : if ( sbi -> s_mb_cache ) ext2_xattr_destroy_cache ( sbi -> s_mb_cache ) ;",1
1217,<S2SV_ModStart> bd_addr ) { if ( bd_addr == NULL ) return BT_STATUS_INVALID_PARAMETER ;,0
1218,<S2SV_ModStart> len < tcp_hdrlen || tcp_hdrlen < sizeof ( struct tcphdr ) <S2SV_ModStart> ; if ( tcp_hdrlen >= 15 * 4 ) return 0 ; if (,1
1219,"<S2SV_ModStart> int i ; size_t size ; matrix = 0 ; <S2SV_ModStart> 0 ) { goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } matrix <S2SV_ModStart> -> datasize_ = 0 ; if (! jas_safe_size_mul ( numrows, numcols, & size ) ) { goto error ; } matrix -> datasize_ = size <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } } <S2SV_ModStart> return matrix ; error : if ( matrix ) { jas_matrix_destroy ( matrix ) ; goto error ; } } for ( i = 0 ; i < numrows ; ++ i ) { matrix -> rows_ [ i ] = & matrix -> data_ [ i * matrix -> numcols_ ] ; } for ( i = 0 ; i < numrows ; ++ i ) { matrix -> rows_ [ i ] = & matrix -> data_ [ i * matrix -> numcols_ ] ; } for ( i = 0 ; i < numrows ; ++ i ) { matrix -> rows_ [ i ] = & matrix -> data_ [ i ] ; } for ( i = 0 ; i < numcols ; ++ i ) { matrix ->",0
1220,"<S2SV_ModStart> ipv6_select_ident ( fh, rt <S2SV_ModStart> ipv6_select_ident ( fh, rt",1
1221,"<S2SV_ModStart> void ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; error = mb2_cache_entry_alloc ( ext4_mb_cache, GFP_NOFS, hash <S2SV_ModEnd> ) ; if <S2SV_ModStart> int error ; error = mb2_cache_entry_insert ( ext4_mb_cache, <S2SV_ModEnd> bh -> b_bdev <S2SV_ModStart> bh -> b_blocknr <S2SV_ModEnd>, hash ) <S2SV_ModStart> error ) { <S2SV_ModEnd> if ( error <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> hash ) ; <S2SV_ModEnd> } } <S2SV_null>",0
1222,<S2SV_ModStart> * req ; <S2SV_ModEnd> req = scsi_req_alloc <S2SV_ModStart> hba_private ) ; <S2SV_ModEnd> return req ;,1
1223,"<S2SV_ModStart> int i ; size_t <S2SV_ModEnd> avail ; int <S2SV_ModStart> ; int avail ; size_t expect ; txid xmin, xmax ; nxip = pq_getmsgint ( buf, 4 ) ; avail = buf -> len - buf -> cursor ; expect = 8 + 8 + nxip * 8 ; if ( expect < 0 || expect > avail ) goto bad_format ; nxip = pq_getmsgint ( buf, 4 ) ; if ( nxip < 0 || nxip > avail || expect > avail ) goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmin > MAX_TXID || xmax == 0 || xmax > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur ; if ( pq_getmsgint64 ( buf ) <= last || cur < last || cur >= xmax || cur >= MAX_TXID ) goto bad_format ; snap -> xip [ i ] = 0 ; last = cur ; }",0
1224,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] =,0
1225,<S2SV_ModStart> ( ret ||! cm_id -> device ||,1
1226,<S2SV_ModStart> xfrm_policy_walk * ) <S2SV_ModEnd> cb -> args <S2SV_ModStart> cb -> args <S2SV_ModEnd> ; struct xfrm_dump_info <S2SV_ModStart> struct xfrm_dump_info info <S2SV_ModEnd> ; info. <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> ( void ),1
1227,"<S2SV_ModStart> - 1 ; size_t data_len ; <S2SV_ModStart> = 0 ; data_len = min ( count, data_len ) ; <S2SV_ModStart>, buf, data_len <S2SV_ModEnd> )!= OE_OK <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) data_len ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } <S2SV_ModStart> ( ret, data_len <S2SV_ModEnd> )!= OE_OK <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) data_len ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( ret > ( ssize_t ) data_len ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; }",0
1228,"<S2SV_ModStart> dentry * upper <S2SV_ModEnd> ; int err <S2SV_ModStart> I_MUTEX_PARENT ) ; upper = lookup_one_len ( dentry -> d_name. name, upperdir, dentry -> d_name. len ) ; err = PTR_ERR ( upper ) ; if ( IS_ERR ( upper ) ) goto out_unlock ; <S2SV_ModStart> if ( upper == ovl_dentry_upper ( dentry ) ) { <S2SV_ModEnd> if ( is_dir <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> ovl_dentry_version_inc ( dentry <S2SV_ModStart> ) ; } dput ( upper ) ; <S2SV_ModStart> dentry ) ; out_unlock :",1
1229,"<S2SV_ModStart> { errstr = parse_global_option ( CMD_INITIALIZE, NULL, NULL ) ; if ( errstr ) s_log ( LOG_ERR, ""Global <S2SV_blank> options: <S2SV_blank> %s"", errstr ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; <S2SV_ModStart> eof ) { errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) s_log ( LOG_ERR, ""Service <S2SV_blank> [%s]: <S2SV_blank> %s"", ( * section_ptr ) -> servname, errstr ) ; if ( errstr ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_ERR, ""Inetd <S2SV_blank> mode: <S2SV_blank> %s"", errstr ) ; else s_log ( LOG_ERR, ""Service <S2SV_blank> [%s]: <S2SV_blank> %s"", errstr ) ; return 1 ; } }",0
1230,<S2SV_ModStart> * ptrptr && <S2SV_ModEnd> nmemb && size <S2SV_ModStart> nmemb && size <S2SV_ModEnd> ) return AVERROR,1
1231,<S2SV_ModStart> ( a -> type == szMAPI_BINARY && a -> <S2SV_ModStart> else if ( a -> type == szMAPI_BINARY &&,1
1232,<S2SV_ModStart> ( <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1233,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : * ( size_t * ) val = ms -> elf_notes_max ; return 0 ;,1
1234,"<S2SV_ModStart> { jas_eprintf ( ""got <S2SV_blank> box <S2SV_blank> type <S2SV_blank> %s\\n"" <S2SV_ModEnd>, box ->",1
1235,,1
1236,"<S2SV_ModStart> & 0xffff ; if ( fmt == SEQ_EXTENDED ) { if (! seq_playing ) seq_startplay ( ) ; return count - c ; } err = synth_devs [ dev ] -> load_patch ( dev, fmt, buf, p + 4, c, 0 ) ; if ( err < 0 ) return err ; if ( err < count ) return err ; return count - c ; } if ( ev_code >= 128 ) { if ( seq_mode == SEQ_2 ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> 4 <S2SV_blank> byte <S2SV_blank> event <S2SV_blank> in <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> mode\\n"" ) ; return - EINVAL ; } ev_size = 8 ; if ( c < ev_size ) { if (! seq_playing ) seq_startplay ( ) ; return count - c ; } if ( copy_from_user ( ( char * ) & event_rec [ 4 ], & ( buf ) [ p + 4 ], 4 ) ) return - EINVAL ; }",0
1237,<S2SV_ModStart> offset ) { struct jbd2_journal * journal ; lock_page ( page ) ; journal = EXT4_JOURNAL ( page -> mapping -> host ) ;,0
1238,"<S2SV_ModStart> ++ ) { writer = GF_SAFEALLOC ( writer, TrackWriter ) ; if (! writer ) goto exit ; writer -> sampleNumber = 1 ; writer -> mdia = trak -> Media ; writer -> stbl = trak -> Media -> information -> sampleTable ; if ( trak -> sample_encryption ) writer -> prevent_dispatch = GF_TRUE ; if ( trak -> sample_encryption ) writer -> prevent_dispatch = GF_TRUE ; if ( writer -> timeScale ) writer -> timeScale = trak -> Media -> mediaHeader -> timeScale ; if ( trak -> sample_encryption ) writer -> prevent_dispatch = GF_TRUE ; if ( trak -> sample_encryption ) writer -> prevent_dispatch = GF_TRUE ; if ( trak -> sample_encryption ) writer -> prevent_dispatch = GF_TRUE ; if ( trak -> sample_encryption ) writer -> prevent_dispatch = GF_TRUE ; if ( trak -> sample_encryption ) writer -> prevent_dispatch = GF_TRUE ; if ( trak -> sample_encryption ) writer -> prevent_dispatch = GF_TRUE ;",0
1239,<S2SV_ModStart> UINT32 nsc_rle_encode ( const,1
1240,"<S2SV_ModStart> 17 ] ; size_t <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> ; # endif strncpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> password, 82, sizeof ( password ) - 82 <S2SV_ModEnd> ) ; md5data <S2SV_ModStart> = '\\0' ; memcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> ( password ), pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; if ( is_a_tty && get_terminal_size ( & width, & height )!= - 1 ) { width = htole16 ( width ) ; height = htole16 ( height ) ; } outcounter += plen ; init_packet ( & data, MT_PTYPE_DATA, srcmac, dstmac, sessionkey, outcounter ) ; if ( is_a_tty && get_terminal_size ( & width, & height )!= - 1 ) { width = htole16 ( width ) ; height = htole16 ( height",0
1241,"<S2SV_ModStart> * dllhandle ; if ( COM_CompareExtension ( name, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", name ) ; return NULL ; }",1
1242,<S2SV_ModStart> ; if ( _mibindex_max > 0 ) SNMP_FREE ( _mibindex_max ) ;,0
1243,<S2SV_ModStart> ( n ) \\\n{ <S2SV_ModEnd> sum = ( <S2SV_ModStart> ++ ; } \\\n} <S2SV_ModEnd> typedef struct PCDTable <S2SV_ModStart> buffer ) ; for ( j = 0 ; j < i ; j ++ ) pcd_table [ j ] = ( PCDTable * ) RelinquishMagickMemory ( pcd_table [ j ] ) ; <S2SV_ModStart> buffer ) ; for ( j = 0 ; j < i ; j ++ ) pcd_table [ j ] = ( PCDTable * ) RelinquishMagickMemory ( buffer ) ;,0
1244,<S2SV_ModStart> ; if ( asdl_typ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1245,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1246,"<S2SV_ModStart> # ifdef HAVE_IPV6 <S2SV_ModEnd> if ( * <S2SV_ModStart> 1 ) { char * <S2SV_ModStart> - 2 ), * e = NULL <S2SV_ModStart> * portno = strtol <S2SV_ModEnd> ( p + <S2SV_ModStart> p + 2, & e, 10 ) ; if ( e && * e ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } <S2SV_ModEnd> return estrndup ( <S2SV_ModStart> colon ) { char * e = NULL ; <S2SV_ModStart> * portno = strtol <S2SV_ModEnd> ( colon + <S2SV_ModStart> + 1 ), & e, 10 ) ; if (! e ||! * e ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } <S2SV_ModEnd> return estrndup ( <S2SV_ModStart> colon ) { char * e = NULL ; <S2SV_ModStart> * portno = strtol ( colon + 1, & e, 10 ) ; if (! e ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; }",0
1247,"<S2SV_ModStart>, i, JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; if ( i % 2 == 0 ) { fprintf ( out, ""expn[%d] <S2SV_blank> = <S2SV_blank> 0x%04x; <S2SV_blank> mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", i, ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; } else { fprintf ( out, ""expn[%d] <S2SV_blank> = <S2SV_blank> 0x%04x; <S2SV_blank> mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", i, ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; }",0
1248,"<S2SV_ModStart> -> y_buffer ; int stride = dst_ybc -> y_stride ; <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst, <S2SV_ModStart> src_ybc -> y_width, stride <S2SV_ModEnd> ) ; src",0
1249,"<S2SV_ModStart> AVERROR_INVALIDDATA ; } if ( c -> log2_cblk_width > 6 || c -> log2_cblk_height > 6 ) { avpriv_request_sample ( s -> avctx, ""cblk <S2SV_blank> size <S2SV_blank> invalid\\n"" ) ; return AVERROR_PATCHWELCOME ; }",0
1250,<S2SV_ModStart> == * ptr && ptr [ 1 ],1
1251,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> mi_col < tile -> mi_col_start && mi_col < tile -> mi_col_end <S2SV_ModEnd> ; mi_col += <S2SV_ModStart> { int dummy_rate ; int64_t dummy_dist ; int BLOCK_SIZE i ; if ( sf -> adaptive_pred_interp_filter ) { for ( i = BLOCK_4X4 ; i < BLOCK_8X8 ; ++ i ) { const int num_4x4_w = num_4x4_blocks_wide_lookup [ i ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ i ] ; const int num_4x4_blk = MAX ( 4, num_4x4_w * num_4x4_blk ) ; for ( x -> sb_index = 0 ; x -> sb_index < 4 ; ++ x -> sb_index ) for ( x -> b_index = 0 ; x -> b_index <",0
1252,"<S2SV_ModStart> obj_tlen ; int hexdump ; u_int offset_in_buffer ; u_int link_type_in_buffer <S2SV_ModStart> ) ) ; if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } hexdump = ( u_int ) EXTRACT_32BITS ( lmp_obj_header -> length ) ; if ( hexdump > 255 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; hexdump = ( u_int ) EXTRACT_32BITS ( lmp_obj_header -> length ) ; if ( hexdump > 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; hexdump = ( u_int ) EXTRACT_32BITS ( lmp_obj_header -> length ) ; if ( hexdump > 255 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; hexdump = ( u_int ) EXTRACT_32BITS ( lmp_obj_header -> length ) ; } if ( hexdump > 4 ) { ND",0
1253,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> inc_mvs ( const <S2SV_ModStart> mbmi ) { const MV * ref = & mbmi -> ref_mvs [ mbmi -> ref_frame [ i ] ] [ 0 ] ; const int_mv diff = { mvs [ i ]. as_mv. row - ref -> row, mvs [ i ]. as_mv. col - ref -> col } ; vp9_inc_mv ( & diff <S2SV_ModEnd>, counts )",0
1254,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>",0
1255,<S2SV_ModStart> ; if ( skb_out -> len + hdr_size > skb -> len ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } if (,0
1256,<S2SV_ModStart> sta -> lock ) ; spin_lock_init ( & sta -> ps_lock,1
1257,<S2SV_ModStart> tp_event ) && perf_paranoid_tracepoint_raw <S2SV_ModEnd> ( ) &&,1
1258,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> sctp_v6_protosw_exit ( ) <S2SV_ModStart> ( ) ; sctp_v4_protosw_exit ( ) ; unregister_pernet_subsys ( & sctp_net_ops ) ;,0
1259,"<S2SV_ModStart>, 0 ) ; if (! data_interface ||! control_interface ) return - ENODEV",1
1260,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1261,"<S2SV_ModStart> return ; DEBUGMSGTL ( ( ""init_mib"", ""Seen <S2SV_blank> MIBDIRS: <S2SV_blank> Looking <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> mib <S2SV_blank> directories <S2SV_blank>...\\n"", env_var ) ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; <S2SV_ModEnd> while ( entry <S2SV_ModStart> entry ) { add_mibfile <S2SV_ModEnd> ( entry, <S2SV_ModStart> NULL, NULL ) ; entry = strtok_r ( env_var + strlen ( env_var ) + 1, ENV_SEPARATOR, & st ) ; } } if ( env_var!= NULL ) { if ( * env_var == '+' ) entry = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; else entry = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; } else { add_mibfile ( entry, NULL, NULL ) ; } SNMP_FREE ( env_var ) ; env_var = NULL ; if ( confmibs!= NULL ) { if ( confmibs!= NULL ) env_var = strdup ( confmibs ) ; else env_var",0
1262,"<S2SV_ModStart> * head ; <S2SV_ModEnd> newsk -> sk_sndbuf <S2SV_ModStart> -> sk_rcvbuf ; sctp_copy_descendant <S2SV_ModEnd> ( newsk,",1
1263,"<S2SV_ModStart> open ( uinput_dev_path [ x ], O_RDWR ) ; if ( fd < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> ERROR: <S2SV_blank> uinput <S2SV_blank> device <S2SV_blank> open <S2SV_blank> failed"", __FUNCTION__ ) ; return - 1 ; } if ( x == MAX_UINPUT_PATHS ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> ERROR: <S2SV_blank> uinput <S2SV_blank> device <S2SV_blank> path <S2SV_blank> too <S2SV_blank> large"", __FUNCTION__ ) ; return - 1 ; } if ( write ( fd, & dev, sizeof ( dev ) ) < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> device <S2SV_blank> information"", __FUNCTION__ ) ; return - 1 ; } ioctl ( fd, UI_SET_EVBIT, EV_KEY ) ; ioctl ( fd, UI_SET_EVBIT, EV_REL ) ; ioctl ( fd, UI_SET_EVBIT, EV_SYN ) ; for ( x = 0 ; key_map [ x ]. name!= NULL ; x ++ ) ioctl ( fd, UI_SET_KEYBIT, key_map [ x ]. mapped_id )",0
1264,"<S2SV_ModStart> { struct desc_struct <S2SV_ModEnd> desc ; short <S2SV_ModStart> return sel ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! get_desc ( & desc, sel ) <S2SV_ModEnd> ) return - <S2SV_ModStart> if (! ( desc. <S2SV_ModEnd> type & BIT <S2SV_ModStart> ( ( desc. <S2SV_ModEnd> l << 1 <S2SV_ModStart> | desc. <S2SV_ModEnd> d ) {",0
1265,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
1266,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
1267,<S2SV_ModStart> return ret ; fsnotify_put_group ( group ) ;,1
1268,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> iakerb_ctx_id_t <S2SV_ModEnd> iakerb_alloc_context ( iakerb_ctx_id_t <S2SV_ModStart> = 0 ; if ( ctx -> count > 0 ) { code = krb5_gss_init_context ( & ctx -> k5c ) ; if ( code!= 0 ) goto cleanup ; * pctx = ctx ; return code ; } <S2SV_ModEnd> code = k5_init_context,0
1269,"<S2SV_ModStart> var_off ) ; if (! src_known ||! dst_known ) { verbose ( env, ""R%d <S2SV_blank> tried <S2SV_blank> to <S2SV_blank> add <S2SV_blank> from <S2SV_blank> different <S2SV_blank> pointers <S2SV_blank> or <S2SV_blank> scalars\\n"", dst_reg -> var_off ) ; return - EINVAL ; }",0
1270,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> bitmapDC = CreateCompatibleDC",1
1271,<S2SV_ModStart> ; while ( ( <S2SV_ModStart> )!= START_CODE_PREFIX ) && ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ),1
1272,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { ret = - EINVAL ; goto out ; }",0
1273,"<S2SV_ModStart> ; if (! inflated ) { g_warning ( ""%s: <S2SV_blank> Could <S2SV_blank> not <S2SV_blank> inflate <S2SV_blank> non <S2SV_blank> inflated <S2SV_blank> method\\n"", __func__ ) ; return NULL ; }",0
1274,"<S2SV_ModStart> ""nnnnn\\0"" ) ] ; long <S2SV_ModEnd> tmp ; if <S2SV_ModStart> ( copy_from_user ( buf <S2SV_ModEnd>, buffer,",0
1275,"<S2SV_ModStart> input -> cur ) ; } if ( ( ctxt -> inputNr > 100 ) && ( ( ctxt -> options & XML_PARSE_HUGE ) == 0 ) ) { xmlFatalErr ( ctxt, XML_ERR_ENTITY_LOOP, ""Pushing <S2SV_blank> input <S2SV_blank> %d <S2SV_blank> : <S2SV_blank> %.30s\\n"", ctxt -> inputNr + 1, input -> cur",0
1276,"<S2SV_ModStart> } if ( le32_to_cpu ( raw_super -> segment_count ) > F2FS_MAX_SEGMENT ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> segment <S2SV_blank> count <S2SV_blank> (%u)"", le32_to_cpu ( raw_super -> segment_count ) ) ; return 1 ; } if (",1
1277,"<S2SV_ModStart> is_path ) { <S2SV_ModEnd> last_elem = wp <S2SV_ModStart> ( ( ( strncmp ( & name [ 1 ], ""ORIGIN}"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 1 ], ""PLATFORM}"", 8 ) == 0 && ( len = 9 )!= 0 ) ) && ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) || ( name [ 1 ] == '{' && ( ( len == 7 || name [ 2 ] == 'O' )? ( __libc_enable_secure? NULL : l -> l_origin <S2SV_ModEnd> ) : _dl_platform <S2SV_ModStart> == 'O' )? ( __libc_enable_secure? NULL : l -> l_platform <S2SV_ModEnd> ) : _dl_origin",0
1278,<S2SV_ModStart> } pDecCont = ( decContainer_t * ) H264SwDecMalloc0 ( <S2SV_ModEnd> sizeof ( decContainer_t,0
1279,<S2SV_ModStart> len ) { struct ipv6_txoptions * opt_to_free = NULL ; <S2SV_ModStart>! opt ) { opt = txopt_get ( np ) ; opt_to_free = opt ; } <S2SV_ModEnd> if ( flowlabel <S2SV_ModStart> flowlabel ) ; txopt_put ( opt_to_free ) ;,1
1280,"<S2SV_ModStart> == 5 ) goto inhdr_error ; if ( IPCB ( skb ) -> flags & IPSKB_DOREDIRECT ) goto drop ; if ( ip_options_compile ( dev_net ( dev ), & opt -> opt, skb ) ) goto inhdr_error ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( unlikely ( opt -> optlen ) ) { opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( opt -> optlen ) opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( opt -> optlen ) opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; } else { opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; } if ( unlikely ( opt ->",0
1281,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> } break ;",1
1282,"<S2SV_ModStart> ; if ( rcu_dereference_protected ( res, rcu_dereference_protected ( rtm -> dst, sock_owned_by_user ( in_skb ) ) == 0 ) { err = - EINVAL ; goto errout ; } rcu_read_lock ( ) ; <S2SV_ModStart> & res, rcu_dereference_protected ( rtm -> dst, sock_owned_by_user ( in_skb ) ) ; } errout : if ( err ) { kfree_skb ( skb ) ; err = rcu_dereference_protected ( rtm -> dst, sock_owned_by_user ( in_skb ) ) ; goto errout ; }",0
1283,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1284,"<S2SV_ModStart> goto errout ; if (! info -> stagemasks ) { for ( j = 0 ; j < info -> partitions ; j ++ ) { int cascade = 0 ; if ( oggpack_read ( opb, 3 ) ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ) ; if ( cascade == 0 ) break ; cascade |= ( oggpack_read ( opb, 5 ) << 3 ) ; } } for ( j = 0 ; j < info -> partitions ; j ++ ) { if ( ( info -> stagemasks [ j ] >> k ) & 1 ) { int book = ( info -> stagemasks [ j ] >> k ) << 3 ; if ( book >= ci -> books ) goto errout ; info -> stages = k + 1 ; } else { int book = 0 ; if ( book >= ci -> books ) goto errout ; } } for ( j = 0 ; j < info -> partitions ; j ++ ) { if ( ( info -> stagemasks [ j ] >> k ) & 1 ) { int cascade = ( info -> stagemasks [ j ] >> k ) << 3",0
1285,"<S2SV_ModStart> ; if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog <S2SV_ModStart> 0 ) ) <S2SV_ModEnd> js_pushnumber ( J",0
1286,<S2SV_ModStart> ) break ; <S2SV_ModEnd> tp -> copied_seq <S2SV_ModStart> = seq ; } tp -> copied_seq = seq ;,1
1287,"<S2SV_ModStart> = 0 ; size_t data_size ; <S2SV_ModStart> err ) ; data_size = n_key_data ; if ( key_data_in == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]. key_data_ver = 2 ; key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_contents [ 1 ] = NULL ; } } for ( i = 0 ; i < n_key_data - 1 ; i ++ ) if ( key_data [ i ]. key_data_kvno!= key_data [ i + 1 ]. key_data_kvno ) num_versions ++ ; ret [ j ] = k5alloc ( data_size,",0
1288,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
1289,"<S2SV_ModStart> 0 ] ) ; if ( nByte < 0 ) { rc = SQLITE_INVALIDDATA ; } else { if ( pTab -> pMod -> xAlloc ( pTab -> pTok, nByte + 1, & pCsr -> pCsr )!= SQLITE_OK ) { rc = SQLITE_NOMEM ; } else { memcpy ( pCsr -> zInput, zByte, nByte ) ; } rc = pTab -> pMod -> xOpen ( pTab -> pTok, pCsr -> zInput, nByte + 1, & pCsr -> pCsr ) ; if ( rc!= SQLITE_OK ) { pCsr -> pCsr -> pTokenizer = pTab -> pTok ; } } if ( rc == SQLITE_OK ) { pCsr -> pCsr -> pTokenizer = pTab -> pTok ; }",0
1290,<S2SV_ModStart> filp ) { struct user_struct * user = file_inode ( filp ) ; if (! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) ) user = get_current_user ( ) ; if (! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) ) user = NULL ; unlock_user ( user ) ;,0
1291,"<S2SV_ModStart> expr_ty iter, string type_comment, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. type_comment = type_comment",0
1292,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> mi_sort_index ( MI_CHECK * param <S2SV_ModEnd>, char * <S2SV_ModStart>, name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ;",0
1293,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ),1
1294,<S2SV_ModStart> ) && ( kvm_x86_ops -> get_cpl ( vcpu ) == 0 ) && ( kvm_x86_ops -> get_cpl ( vcpu ) == 0 ) && ( kvm_x86_ops -> get_cpl ( vcpu ) == 0 ) && ( kvm_x86_ops -> get_cpl ( vcpu ) == 0 ) && ( kvm_x86_ops -> get_cpl ( vcpu ) == 0 ) && ( kvm_x86_ops -> get_cpl ( vcpu ) == 0 ) && ( kvm_x86_ops -> get_cpl ( vcpu ) == 0 ) && ( kvm_x86_ops -> get_cpl ( vcpu ) == 0 ) && ( kvm_x86_ops -> get_cpl ( vcpu ) == 0 ) && ( kvm_x86_ops -> get_cpl ( vcpu ) == 0 ) && ( kvm_x86_ops -> get_cpl ( vcpu ) == 0 ) && ( kvm_x86_ops -> get_cpl ( vcpu ) == 0 ),0
1295,"<S2SV_ModStart> NGHTTP2_ERR_INTERNAL_ERROR : return ""Internal <S2SV_blank> error"" ; case NGHTTP2_ERR_NOT_SUPPORTED_PROTOCOL : return ""Unsupported <S2SV_blank> protocol"" ; case NGHTTP2_ERR_UNSUPPORTED_PROTOCOL_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_PROTOCOL_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_PROTOCOL_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_PROTOCOL_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_PROTOCOL_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_PROTOCOL_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_PROTOCOL_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_PROTOCOL_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ;",0
1296,"<S2SV_ModStart> UINT error ; if (! Stream_SafeSeek <S2SV_ModEnd> ( s,",0
1297,"<S2SV_ModStart> ; } } if ( pData -> recoveryIVL > UINT32_MAX / 2 ) { zsocket_set_recovery_ivl ( pData -> socket, pData -> recoveryIVL ) ; } else { if ( pData -> recoveryIVL == UINT32_MAX / 2 ) { zsocket_set_recovery_ivl ( pData -> socket, pData -> recoveryIVL ) ; } else if ( pData -> recoveryIVL == UINT32_MAX / 2 ) { zsocket_set_recovery_ivl ( pData -> socket, pData -> recoveryIVL ) ; } else { if ( pData -> recoveryIVL == UINT32_MAX / 2 ) { zsocket_set_recovery_ivl ( pData -> socket, pData -> recoveryIVL ) ; } else { zsocket_set_recovery_ivl ( pData -> socket, pData -> recoveryIVL ) ; }",0
1298,<S2SV_ModStart> < 0 ) { ret = chg ; goto out_err ; } <S2SV_ModEnd> if ( hugepage_subpool_get_pages <S2SV_ModStart> chg ) ) { ret = <S2SV_ModEnd> - ENOSPC ; <S2SV_ModStart> - ENOSPC ; goto out_err ; } <S2SV_ModStart> chg ) ; goto out_err <S2SV_ModEnd> ; } if <S2SV_ModStart> return 0 ; out_err : resv_map_put ( vma ) ; return ret ;,1
1299,"<S2SV_ModStart> struct flowi6 fl6 ; struct ipv6_txoptions * opt <S2SV_ModStart> struct flowi6 fl6 ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> & fl6, opt <S2SV_ModEnd>, np -> <S2SV_ModStart> = 1 ; if (! ipv6_filter ( & fl6, opt ) ) { pr_debug ( ""%s: <S2SV_blank> skb:%p, <S2SV_blank> len:%u, <S2SV_blank> src:%pI6 <S2SV_blank> dst:%pI6\\n"", __func__, skb, & fl6, opt -> opt, np -> tclass ) ; return ip6_xmit ( sk, skb, & fl6, opt, np -> tclass ) ; } else { pr_debug ( ""%s: <S2SV_blank> skb:%p, <S2SV_blank> len:%d, <S2SV_blank> src:%pI6 <S2SV_blank> dst:%pI6\\n"", __func__, skb, & fl6, fl6. saddr, & fl6. daddr ) ; SCTP_INC_STATS ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; }",0
1300,"<S2SV_ModStart> s_type == & eCryptfs_fs_type && path. dentry -> d_inode -> i_uid!= current_uid ( ) ) { rc = - EINVAL ; printk ( KERN_ERR ""Mount <S2SV_blank> of <S2SV_blank> device <S2SV_blank> (uid: <S2SV_blank> %d) <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> "" ""known <S2SV_blank> incompatibilities\\n"", path. dentry -> d_inode -> i_uid ) ; goto out_free ; } if ( path. dentry -> d_inode -> i_uid!= current_uid ( ) ) { rc = - EINVAL ; printk ( KERN_ERR ""Mount <S2SV_blank> of <S2SV_blank> device <S2SV_blank> (uid: <S2SV_blank> %d) <S2SV_blank> not <S2SV_blank> owned <S2SV_blank> by <S2SV_blank> "" ""eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> "" ""known <S2SV_blank> incompatibilities\\n"" ) ; goto out_free ; }",0
1301,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1302,"<S2SV_ModStart> 6 ) ) { MATLAB_KO : clone_info = DestroyImageInfo ( clone_info ) ; <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart> ""ImproperImageHeader"" ) ; }",0
1303,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nego_process_negotiation_failure ( rdpNego <S2SV_ModStart> UINT32 failureCode ; if (! s ) return FALSE ; <S2SV_ModStart> = NEGO_STATE_FAIL ; return TRUE ;,0
1304,"<S2SV_ModStart> ret, last_pwd, n_new_keys <S2SV_ModStart> keyblocks ) { n_new_keys = count_new_keys ( kdb -> n_key_data, kdb -> key_data ) ; <S2SV_ModStart> -> context, n_new_keys <S2SV_ModEnd>, kdb ->",1
1305,"<S2SV_ModStart> int len, <S2SV_ModEnd> result = RLC_OK <S2SV_ModStart> = RLC_OK ; bn_t t ; RLC_TRY { bn_new ( t ) ; switch ( operation ) { case RSA_ENC : bn_zero ( m ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = k_len - 3 - m_len ; for ( i = 0 ; i < * p_len ; i ++ ) { rand_bytes ( & pad, 1 ) ; } while ( pad!= 0 && m_len > 0 ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; if ( pad!= RSA_PUB ) { result = RLC_ERR ; } do { m_len -- ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; } while ( pad!= 0 && m_len > 0 ) ; * p_len -= ( m_len - 1 ) ; bn_mod_2b ( m, m, ( k_len - * p_len ) *",0
1306,"<S2SV_ModStart> ++ ) { assert ( sp == 0 ) ; <S2SV_ModStart> ++ ; } if ( sp == 0 ) result = yr_object_copy ( function -> return_obj, ( void * ) & r1, sizeof ( r1 ) ) ; if ( result == ERROR_SUCCESS ) result = yr_object_copy ( function -> return_obj, & r1, sizeof ( r1 ) ) ; if ( result == ERROR_SUCCESS ) result = yr_object_copy ( function -> return_obj, & r1, sizeof ( r1 ) ) ; if ( result == ERROR_SUCCESS ) result = yr_object_copy ( function -> return_obj, ( void * ) & r1, sizeof ( r1 ) ) ; if ( result == ERROR_SUCCESS ) result = yr_object_copy ( function -> return_obj, & r1, sizeof ( r1 ) ) ; if ( result == ERROR_SUCCESS ) result = yr_object_copy ( function -> return_obj, & r1, sizeof ( r1 ) ) ; if ( result == ERROR_SUCCESS ) result = yr_object_copy ( function -> return_obj, ( void * ) & r1, sizeof ( r1 )",0
1307,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1308,<S2SV_ModStart> { rq = <S2SV_ModEnd> hctx -> tags <S2SV_ModStart> hctx -> tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; if (,1
1309,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
1310,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> cm ) { if ( cm -> counts. switchable_interp ) count [ i ] += cm -> counts. switchable_interp [ j ] <S2SV_ModEnd> [ i ],0
1311,"<S2SV_ModStart> { token ++ ; } if ( operand >= MAX_OPERANDS ) { eprintf ( ""Too <S2SV_blank> many <S2SV_blank> operands\\n"" ) ; return false",1
1312,"<S2SV_ModStart> cpi ) { VP9_COMMON * const cm = & cpi -> common ; <S2SV_ModStart> x -> act_zbin_adj = 1 <S2SV_ModEnd> ; vp9_setup_src_planes ( <S2SV_ModStart> ; vp9_setup_pre_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vp9_setup_dst_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vp9_setup_block_planes ( & x <S2SV_ModEnd> -> e_mbd, <S2SV_ModStart> subsampling_y ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> MAX_MB_PLANE ) ; memset <S2SV_ModEnd> ( xd ->",0
1313,"<S2SV_ModStart> name ) { if (! ( dst = fopen ( name, ""r"" ) ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ; } if (! ( dst = fopen ( dst_name, ""w"" ) ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ; } <S2SV_ModEnd> strcpy ( dst_name <S2SV_ModStart> + 16 ) ; if ( ( c = strrchr ( dst_name, '.' ) ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ; } if ( ( c = strrchr ( dst_name, '.' ) ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ; }",0
1314,"<S2SV_ModStart> ( hp ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } <S2SV_ModStart> 0 ) { if ( retval == 1 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } <S2SV_ModStart> ( retval ) ; }",0
1315,"<S2SV_ModStart> 0x07 # define MagickSizeType 0x08 <S2SV_ModEnd> Image * image <S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1316,<S2SV_ModStart> ctl_files_rwlock ) ; mutex_init ( & card -> user_ctl_lock ) ;,1
1317,"<S2SV_ModStart> ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; } if ( padlen >= sig_len - 3 ) { return ""4"" ""SIG <S2SV_blank> padding <S2SV_blank> failed; <S2SV_blank> too <S2SV_blank> many <S2SV_blank> octets"" ; } <S2SV_ModStart> + 3 ; if ( padlen >= sig_len - 3 ) { return ""5"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; }",0
1318,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( tETH_HDR ) ),0
1319,<S2SV_ModStart> = 0 ; ps_dec -> u2_cur_slice_num = ps_cur_slice -> u2_cur_slice_num ; ps_dec -> <S2SV_ModStart> = 0 ; ps_dec -> u2_cur_slice_num = ps_cur_slice -> u2_cur_slice_num ;,0
1320,<S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata -> rbuf. buf!= NULL ) <S2SV_ModStart> OPENSSL_free ( rdata -> rbuf. buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata -> rbuf. buf!= NULL ) <S2SV_ModStart> OPENSSL_free ( rdata -> rbuf. buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; },1
1321,"<S2SV_ModStart> struct flowi6 fl6 ; struct ipv6_txoptions * opt <S2SV_ModStart> struct flowi6 fl6 ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> & fl6, opt <S2SV_ModEnd>, np -> <S2SV_ModStart> = 1 ; if (! ipv6_filter ( & fl6, opt ) ) { pr_debug ( ""%s: <S2SV_blank> skb:%p, <S2SV_blank> len:%u, <S2SV_blank> src:%pI6 <S2SV_blank> dst:%pI6\\n"", __func__, skb, & fl6, opt -> opt, np -> tclass ) ; return ip6_xmit ( sk, skb, & fl6, opt, np -> tclass ) ; } else { pr_debug ( ""%s: <S2SV_blank> skb:%p, <S2SV_blank> len:%d, <S2SV_blank> src:%pI6 <S2SV_blank> dst:%pI6\\n"", __func__, skb, & fl6, fl6. saddr, & fl6. daddr ) ; SCTP_INC_STATS ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; }",0
1322,"<S2SV_ModStart> int ret ; int num_exec2_buffers ; if ( args -> buffer_count > I915_MAX_EXEC_BUFFERS ) { DRM_DEBUG ( ""execbuf2 <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - EINVAL ; } num_exec2_buffers = args -> buffer_count ; if ( num_exec2_buffers < 1 ) { DRM_DEBUG ( ""execbuf2 <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - EINVAL ; } exec2_list = kmalloc ( sizeof ( * exec2_list ) * args -> buffer_count, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if ( exec2_list == NULL ) { DRM_DEBUG ( ""failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> exec <S2SV_blank> list <S2SV_blank> for <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - ENOMEM ; } exec2_list = kmalloc ( sizeof ( * exec2_list ) * args -> buffer_count, GFP_KERNEL | __GFP_NOW",0
1323,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> struct pci_dev * <S2SV_ModStart> pci_dev * pdev <S2SV_ModEnd> ; int port <S2SV_ModStart> return PTR_ERR ( karg ) ; } if ( ( ( iocnum = mpt_verify_adapter ( ioc -> iocnum, & ioc ) ) < 0 ) || ( iocnum == NULL ) ) { printk ( KERN_DEBUG MYNAM ""%s@%d <S2SV_blank> - <S2SV_blank> ioc%d <S2SV_blank> not <S2SV_blank> found!\\n"", __FILE__, __LINE__, iocnum ) ; kfree ( karg ) ; return - ENODEV ; } if ( ( ( iocnum = mpt_verify_adapter ( ioc -> hdr. iocnum, & ioc ) ) < 0 ) || ( ioc == NULL ) ) { printk ( MYIOC_s_ERR_FMT ""%s@%d <S2SV_blank> - <S2SV_blank> ioc%d <S2SV_blank> not <S2SV_blank> found!\\n"", __FILE__, __LINE__, iocnum ) ; kfree ( karg ) ; return - ENODEV ; } if ( karg -> hdr. maxDataSize",0
1324,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
1325,"<S2SV_ModStart> char * path, const char * rootfs <S2SV_ModStart> mntdata, optional, rootfs",1
1326,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1327,"<S2SV_ModStart> ab ) { <S2SV_ModEnd> size_t i, <S2SV_ModStart> i, len, buf <S2SV_ModStart> -> arg_start ; if (! audit_enabled ) return <S2SV_ModStart> ab, ""argc=%d"" <S2SV_ModEnd>, context -> <S2SV_ModStart>. argc ) ; buf = kmalloc ( MAX_EXECVE_AUDIT_LEN + 1, GFP_KERNEL ) ; if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } for ( i = 0 ; i < context -> execve. argc ; i ++ ) { len = audit_log_single_execve_arg ( context, ab, i, & len_sent, p, buf ) ; if ( len <= 0 ) break ; p += len ; } <S2SV_ModEnd> for ( i",0
1328,"<S2SV_ModStart> | O_NOCTTY, ( mode == 0 || mode == MODE_INVALID )? 0644 : mode <S2SV_ModEnd> ) ; if",1
1329,"<S2SV_ModStart> err_info ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> line [ NETSCREEN_LINE_LENGTH <S2SV_ModEnd> ] ; if <S2SV_ModStart> FALSE ; } return parse_netscreen_packet ( wth -> random_fh, phdr, buf <S2SV_ModEnd>, line, <S2SV_ModStart>, line, <S2SV_ModEnd> err, err_info <S2SV_ModStart> err_info ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
1330,<S2SV_ModStart> * rq ) <S2SV_ModEnd> { int cpu <S2SV_ModStart> ; u64 irq_time ; if ( rq -> skip_clock_update ) return <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1331,<S2SV_ModStart> 255U ; * pixels ++ = ( unsigned char ) ( pixel >> 0 ) & 0x07 ; * pixels ++ = ( unsigned char ) ( pixel >> 1 ) & 0x07 ; * pixels ++ = ( unsigned char ) ( pixel >> 0 ) & 0x07 ; * pixels ++ = ( unsigned char ) ( pixel >> 0 ) & 0x07 ; * pixels ++ = ( unsigned char ) ( pixel >> 0 ) & 0x07 ; * pixels ++ = ( unsigned char ) ( pixel >> 1 ) & 0x07 ; * pixels ++ = ( unsigned char ) ( pixel >> 0 ) & 0x07 ; * pixels ++ = ( unsigned char ) ( pixel >> 2 ) & 0x07 ; * pixels ++ = ( unsigned char ) ( pixel >> 3 ) & 0x07 ; * pixels ++ = ( unsigned char ) ( pixel >> 0 ) & 0x07 ; * pixels ++ = ( unsigned char ) ( pixel >> 1 ) & 0x07 ; * pixels ++ = ( unsigned char ) ( pixel >> 0 ) & 0x07 ; * pixels ++ = ( unsigned char ) ( pixel >> 0 ) & 0x07 ; * pixels ++ = ( unsigned char ) ( pixel >>,0
1332,"<S2SV_ModStart> } else { printk ( KERN_ERR ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", * argv ) ; exit ( EXIT_FAILURE <S2SV_ModStart> } else { printk ( KERN_ERR ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", * argv ) ; exit ( EXIT_FAILURE <S2SV_ModEnd> ) ; } <S2SV_ModStart> } else { printk ( KERN_ERR ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", * argv ) ; exit ( EXIT_FAILURE <S2SV_ModEnd> ) ; } <S2SV_ModStart> } else { printk ( KERN_ERR ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", * argv ) ; exit ( EXIT_FAILURE <S2SV_ModEnd> ) ; } <S2SV_ModStart> } else { printk ( KERN_ERR ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", * argv ) ; exit ( EXIT_FAILURE <S2SV_ModEnd> ) ; } <S2SV_ModStart> } else { printk ( KERN_ERR ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", * argv ) ; exit ( EXIT_FAILURE <S2SV_ModEnd> ) ; }",0
1333,<S2SV_ModStart> { struct blkif_response * <S2SV_ModStart> int notify ; <S2SV_ModEnd> spin_lock_irqsave ( & <S2SV_ModStart> case BLKIF_PROTOCOL_NATIVE : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> native. rsp_prod_pvt <S2SV_ModEnd> ) ; break <S2SV_ModStart> case BLKIF_PROTOCOL_X86_32 : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> x86_32. rsp_prod_pvt <S2SV_ModEnd> ) ; break <S2SV_ModStart> case BLKIF_PROTOCOL_X86_64 : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart>. rsp_prod_pvt ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> ) ; } resp -> id = id ; resp -> operation = op ; resp -> status = st ;,1
1334,<S2SV_ModStart> ; if ( entry == NULL ) return ; if ( <S2SV_ModStart> KADM5_ATTRIBUTES ) || ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ) ) return ; if ( ( mask & KADM5_ATTRIBUTES ) || ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ) ) { for ( i = 0 ; ( unsigned char ) password [ i ] == i + 1 ; i ++ ) ; if ( password [ i ]!= '\\0' || i!= 255 ) return ; } if ( ( mask & KADM5_ATTRIBUTES ) || ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ) ) return ; for ( i = 0 ; ( unsigned char ) password [ i ] == i + 1 ; i ++ ) ; if ( password [ i ]!= '\\0' || i!= 255 ) return ; for ( i = 0 ; ( unsigned char ) password [ i ] == i + 1 ; i ++ ) ; if ( password [ i ]!= '\\0' || i!= 255 ) return ; for ( i = 0 ; ( unsigned char ) password [ i ] == i + 1,0
1335,"<S2SV_ModStart> ; if ( CHECKOVERFLOW ( datao, buf_size ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( CHECKOVERFLOW ( datao, buf_size ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( CHECKOVERFLOW ( o, buf_size ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ] = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnoteFuji"", sizeof ( MnoteFujiEntry ) * c ) ; break ; } exif_log_",0
1336,"<S2SV_ModStart> { if ( nimages < 0 ) { L_ERROR ( ""number <S2SV_blank> of <S2SV_blank> images <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", nimages, ( int ) ( MIN_THUMB_WIDTH ) ) ; return ERROR_INT ( ""number <S2SV_blank> of <S2SV_blank> images <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", nimages, ( int ) ( MIN_THUMB_WIDTH ) ) ; } if ( nimages > MAX_IMAGES ) { L_ERROR ( ""number <S2SV_blank> of <S2SV_blank> images <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", nimages, ( int ) ( MIN_VIEW_WIDTH ) ) ; return ERROR_INT ( ""number <S2SV_blank> of <S2SV_blank> images <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", nimages, ( int ) ( MIN_VIEW_WIDTH ) ) ) ; }",0
1337,"<S2SV_ModStart> ext_dp -> icmp_length && ND_TTEST2 ( ext_dp -> icmp_ext_version_res, plen - ICMP_EXTD_MINLEN ) <S2SV_ModStart> - ICMP_EXTD_MINLEN ; if ( ND_TTEST2 ( ext_dp -> icmp_ext_version_res, hlen ) ) { <S2SV_ModStart> - ICMP_EXTD_MINLEN ; }",0
1338,<S2SV_ModStart> dentry * dir <S2SV_ModEnd> ; int dir_has_key <S2SV_ModStart> 0 ; } <S2SV_ModEnd> spin_lock ( & <S2SV_ModStart> dir_has_key = ( d_inode ( dir ) -> i_crypt_info <S2SV_ModEnd>!= NULL ),1
1339,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> unbind_ports ( void <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> crypto_thread_write_lock ( stunnel_locks <S2SV_ModStart> stunnel_locks [ LOCK_SECTIONS ] ) ; opt = service_options. next ; service_options. next = NULL ; service_free ( & service_options ) ; while ( opt ) { unsigned i ; s_log ( LOG_DEBUG, ""Unbinding <S2SV_blank> service <S2SV_blank> [%s]"", opt -> servname ) ; for ( i = 0 ; i < opt -> local_addr. num ; ++ i ) unbind_port ( opt, i ) ; if ( opt -> exec_name && opt -> connect_addr. names ) { opt -> option. retry = 0 ; } <S2SV_ModEnd> if ( opt <S2SV_ModStart> } if ( opt -> ctx ) SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; s_log ( LOG_DEBUG, ""Service <S2SV_blank> [%s] <S2SV_blank> closed"", opt -> servname ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1340,"<S2SV_ModStart> ARCHIVE_WARN ; } if ( argc >= MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } <S2SV_ModStart> p ) ; <S2SV_ModEnd> } if (",1
1341,<S2SV_ModStart> parent ) ; if ( ( i -> width + i -> height ) > i -> parent -> width ) { # ifdef NGIFLIB_ENABLE_CALLBACKS context. line_p. p8 = i -> parent -> frbuff. p8 + ( u32 ) i -> posY * i -> parent -> width + i -> posX ; # else context. line_p. p8 = i -> parent -> frbuff. p8 + ( u32 ) i -> posY * i -> parent -> width + i -> posX ; # endif } context. curX = i -> posX ; if ( ( i -> posY + i -> height ) > i -> parent -> height ) { # ifdef NGIFLIB_ENABLE_CALLBACKS context. line_p. p8 = i -> parent -> frbuff. p8 + ( u32 ) i -> posY * i -> parent -> width + i -> posX ; # endif context. frbuff_p. p8 = i -> parent -> frbuff. p8 + i -> posX ; # else context. line_p. p8 = i -> parent -> frbuff. p8 + i -> posY * i ->,0
1342,<S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ),1
1343,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
1344,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> break ; } if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",0
1345,<S2SV_ModStart> void ) { recovery_started = 1 ;,0
1346,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ;",0
1347,"<S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1348,"<S2SV_ModStart> ( LOG_INFO, ""new <S2SV_blank> service <S2SV_blank> id=%d <S2SV_blank> str=\'%.*s\'"" <S2SV_ModEnd>, d -> <S2SV_ModStart> ( LOG_INFO, ""new <S2SV_blank> service <S2SV_blank> id=%d <S2SV_blank> str=\'%.*s\'"" <S2SV_ModEnd>, d -> <S2SV_ModStart> ( LOG_INFO, ""service <S2SV_blank> id=%d <S2SV_blank> str=\'%.*s\'"" <S2SV_ModEnd>, d -> <S2SV_ModStart> ( LOG_INFO, ""service <S2SV_blank> id=%d <S2SV_blank> str=\'%.*s\'"" <S2SV_ModEnd>, d -> <S2SV_ModStart> ( LOG_INFO, ""new <S2SV_blank> service <S2SV_blank> id=%d <S2SV_blank> str=\'%.*s\'"" <S2SV_ModEnd>, d -> <S2SV_ModStart> ( LOG_INFO, ""new <S2SV_blank> service <S2SV_blank> id=%d <S2SV_blank> str=\'%.*s\'"" <S2SV_ModEnd>, d -> <S2SV_ModStart> ( LOG_INFO, ""service <S2SV_blank> id=%d <S2SV_blank> str=\'%.*s\'"" <S2SV_ModEnd>, d ->",0
1349,"<S2SV_ModStart> { WORD32 i ; WORD32 st_rps_idx ; WORD32 num_neg_pics, num_pos_pics ; WORD32 ai4_num_neg_curr, ai4_num_neg_foll, ai4_num_lt_curr, u4_num_lt_foll ; WORD32 ai4_num_total_curr ; WORD32 ai4_curr_delta_poc_msb_present_flag [ MAX_DPB_SIZE ], ai4_num_st_curr_before [ MAX_DPB_SIZE ], ai4_num_st_curr_after [ MAX_DPB_SIZE ], ai4_num_st_curr_before, u4_num_st_curr_after, u4_num_st_curr_foll, u4_num_total_curr, u4_curr_delta_poc_msb_present_flag [ MAX_DPB_SIZE ], ai1_curr_delta_poc_msb_present_flag [ MAX_DPB_SIZE ], ai1_curr_delta_poc_msb_present",0
1350,<S2SV_ModStart> ) -> tp_value [ 0 ],1
1351,"<S2SV_ModStart> ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; ret = - EINVAL ;",1
1352,"<S2SV_ModStart>, int fmt, printbuffer * p <S2SV_ModStart> = 0 ; printbuffer = p ; <S2SV_ModStart> ( child ) numentries ++, child = child -> next ; } if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; entries [ i ] = str = print_string_ptr ( child -> string ) ; entries [ i ++ ] = ret = print_value ( child, depth, fmt ) ; if ( str && ret ) len += strlen ( ret ) + 2 + ( fmt? 2 + depth : 0 ) ; else fail = 1 ; child = child -> next ; } if (! fail ) { out = ( char * ) cJSON_malloc ( len ) ; if (! out ) cJSON_free ( entries ) ; cJSON_free ( names ) ; cJSON_free ( entries ) ; cJSON_free",0
1353,"<S2SV_ModStart> struct ikev2_id id <S2SV_ModEnd> ; int id_len <S2SV_ModStart> ND_TCHECK ( * ikev2_id ) <S2SV_ModEnd> ; UNALIGNED_MEMCPY ( <S2SV_ModStart> ext ) ; if ( item_len < 4 ) goto trunc ; <S2SV_ModStart> * typedata ; if ( item_len < idtype_len ) goto trunc <S2SV_ModEnd> ; ikev2_pay_print ( <S2SV_ModStart> ndo, NPSTR ( tpay ), id. h. critical ) ; id_len = ntohs ( id. h. len ) ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; } if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ;",0
1354,"<S2SV_ModStart> int tagval, uint32 <S2SV_ModEnd> * length )",1
1355,"<S2SV_ModStart> sk ) ; if ( writable ) { <S2SV_ModStart> = 0 ; } <S2SV_ModStart> )!= sk ) { if (! skb_queue_empty ( & sk -> sk_receive_queue ) ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; return mask ; } unix_dgram_peer_wake_wait ( file, & unix_sk ( other ) -> peer_wait, wait ) ; unix_peer_wake_wait ( file, & unix_sk ( other ) -> peer_wait, wait ) ; } sock_put ( other ) ; } if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; return mask <S2SV_ModEnd> ; } <S2SV_null>",0
1356,<S2SV_ModStart> 4 ] ; unsigned int <S2SV_ModEnd> value ; if <S2SV_ModStart> value = ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 <S2SV_ModEnd> ; value |= <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart>. unsigned_value = <S2SV_ModEnd> value & 0xffffffff <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ; return (,0
1357,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sendClean ( outputbuffer ) ;",1
1358,<S2SV_ModStart> ; if ( skb_out -> len + hdr_size > skb -> len ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } if (,0
1359,<S2SV_ModStart> void exit_io_context ( struct task_struct * task <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; task_lock ( task <S2SV_ModEnd> ) ; ioc <S2SV_ModStart> ; ioc = task <S2SV_ModEnd> -> io_context ; <S2SV_ModStart> -> io_context ; task <S2SV_ModEnd> -> io_context = <S2SV_ModStart> ; task_unlock ( task <S2SV_ModEnd> ) ; if,1
1360,"<S2SV_ModStart> ret = 0 ; if ( xtregs -> cp0 & XTREGS_CP0_BITSP ) { ret |= __copy_from_user ( & xtregs -> cp0, & xtregs -> cp0, sizeof ( xtregs -> cp0 ) ) ; } <S2SV_ModEnd> # if XTENSA_HAVE_COPROCESSORS",0
1361,<S2SV_ModStart> 0 ) { if ( token_wrapper_len + 14 > header -> buffer. length ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } <S2SV_ModStart> buffer. length < token_wrapper_len <S2SV_ModEnd> + 14 ) <S2SV_ModStart> + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } ptr = ( unsigned char * ) header -> buffer. value + token_wrapper_len ; signalg |= ptr [ 0 ] << 8 ; sealalg |= ptr [ 1 ] << 8 ; if ( ptr [ 2 ]!= 0xFF || ptr [ 3 ]!= 0xFF ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } ptr = ( unsigned char * ) header -> buffer. value + token_wrapper_len ; signalg |= ptr [ 0 ] << 8 ; sealalg |= ptr [ 1 ] << 8 ; if ( ptr [ 4 ]!= 0xFF || ptr [ 5 ]!= 0xFF ) { * minor_status = 0 ; return GSS_S_DEFECTIVE,0
1362,"<S2SV_ModStart> ) { int ret, i ; * value &= PCI_COMMAND_GUEST ; <S2SV_ModEnd> ret = xen_pcibk_read_config_word <S2SV_ModStart> offset, value <S2SV_ModEnd> ) ; if <S2SV_ModStart> * value |= * value & ~ PCI_COMMAND_GUEST ; <S2SV_ModEnd> return ret ;",0
1363,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { vpx_ref_frame_t <S2SV_ModEnd> * frame = <S2SV_ModStart> ( args, vpx_ref_frame_t <S2SV_ModEnd> * ) ; <S2SV_ModStart> NULL ) { YV12_BUFFER_CONFIG <S2SV_ModEnd> * fb ; <S2SV_ModStart> * fb ; vpx_get_reference_enc <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> frame -> idx, & fb ) ; yuvconfig2image ( & frame -> img, fb, NULL ) ; } <S2SV_ModEnd> return VPX_CODEC_OK ;",0
1364,<S2SV_ModStart> ] ) ; free_uid ( fpl -> user ) ;,1
1365,<S2SV_ModStart> blk_finish_plug ( & plug ) ;,0
1366,"<S2SV_ModStart> -> dwc ; dwc3_gadget_del_and_unmap_request ( dep, req, status <S2SV_ModEnd> ) ; spin_unlock <S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
1367,"<S2SV_ModStart> : # line 113 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.y"" { ( <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.y"" { ( <S2SV_ModStart> } # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.y"" { ( <S2SV_ModStart> } # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.y"" { ( <S2SV_ModStart> } # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.y"" { ( <S2SV_ModStart> } # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.y"" { ( <S2SV_ModStart> } # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.y"" { ( <S2SV_ModStart> } # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.y"" { ( <S2SV_ModStart> } # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd>",0
1368,"<S2SV_ModStart> sas_revalidate_domain, [ <S2SV_ModEnd> DISCE_SUSPEND ] = <S2SV_ModStart> ] = sas_resume_devices <S2SV_ModEnd>, } ;",1
1369,"<S2SV_ModStart>, int rep_quick, my_bool rec_quick <S2SV_ModStart> 0 ) { if ( rec_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, WRITE_CACHE, param -> pack. header_length, MYF ( MY_WME ) ) || rec_quick && init_io_cache ( & info -> read_cache, info -> dfile, ( uint ) param -> read_buffer_length, 1, MYF ( MY_WME ) ) || ( got_error && rec_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, MYF ( MY_WME ) ) ) || ( rec_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, MYF ( MY_WME ) ) ) || ( rec_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, MYF ( MY_WME",0
1370,"<S2SV_ModStart> signature } ; int ret = 0 ; <S2SV_ModStart> curve ) ; if (! g_rng_function ) { uECC_vli_clear ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! uECC_generate_random_int ( tmp, num_n_words ) ) { return 0 ; } uECC_vli_modMult ( tmp, tmp, curve -> n, num_n_words ) ; uECC_vli_modInv ( tmp, tmp, curve -> n, num_n_words ) ; uECC_vli_modInv ( tmp, k, curve -> n, num_n_words ) ; if ( uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if (! uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if (! uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if (! uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if (",0
1371,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
1372,<S2SV_ModStart> sk -> sk_family <S2SV_ModEnd> ; struct sk_buff <S2SV_ModStart> goto out ; <S2SV_ModEnd> if ( flags <S2SV_ModStart> AF_INET ) { struct sockaddr_in * <S2SV_ModStart> ) ) ; * addr_len = sizeof ( * sin ) ; <S2SV_ModStart> AF_INET6 ) { <S2SV_ModEnd> struct sockaddr_in6 * <S2SV_ModStart> struct sockaddr_in6 * sin6 = ( struct sockaddr_in6 * <S2SV_ModStart> ) ) ; * addr_len = sizeof ( * sin6,0
1373,"<S2SV_ModStart> -= lblk ; mutex_lock ( & inode -> i_mutex ) ; if (! ( ext4_test_inode_flag ( inode, EXT4_INODE_EXTENTS ) ) ) { ret = - EOPNOTSUPP ; goto out_mutex ; } if (! <S2SV_ModEnd> ( mode & <S2SV_ModStart> & FALLOC_FL_KEEP_SIZE ) && offset + len > i_size_read ( inode ) ) { new_size = offset + len ; ret = inode_newsize_ok ( inode, new_size ) ; if ( ret ) goto out_mutex ; } flags = EXT4_GET_BLOCKS_CREATE_UNWRIT_EXT ; if ( mode & FALLOC_FL_KEEP_SIZE ) <S2SV_ModStart> |= EXT4_GET_BLOCKS_KEEP_SIZE ; out_mutex : if ( partial_begin || partial_end ) { ret = ext4_alloc_file_blocks ( file, offset, len, mode ) ; if ( ret ) goto out_mutex ; new_size = round_down ( offset + len, 1 << blkbits ) ; round_down ( offset, 1 << blkbits ) ;",0
1374,"<S2SV_ModStart> ; } else { size_t new_free_total = pool -> free_total * 2 ; void * new_arr ; if ( pool -> free_total < new_free_total ) { pool -> free_total = new_free_total ; new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ) ) ; pool -> free_arr = new_arr ; } else { free ( buf ) ; } } }",0
1375,<S2SV_ModStart> return map ; map =,1
1376,"<S2SV_ModStart> tp ; { int cval = 0, meta = 0 ; <S2SV_ModStart> ] ) { <S2SV_ModEnd> const char hex <S2SV_ModStart> = ""00112233445566778899aAbBcCdDeEfF"" ; const <S2SV_ModEnd> char * dp <S2SV_ModStart> * dp ; cp ++ ; if ( * cp == '0' || * cp == '0' ) { for ( ; * cp && ( index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; cp ++ ) cval = ( cval * 16 ) + ( * cp - '0' ) ; else if ( * cp == 'X' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp - '0' ) ; else for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp -",0
1377,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1378,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> size_left < 4 <S2SV_ModStart> if ( size_left < 4 ) { LogError ( ""Process_ipfix <S2SV_blank> [%u] <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> error <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ; } <S2SV_ModEnd> table_id = ntohs <S2SV_ModStart> ( sizeof ( input_translation_t ) ) ; translation_table = ( input_translation_t * ) cache. input_order [ 0 ] ; translation_table = calloc ( translation_table, sizeof ( input_translation_t ) ) ; if (! translation_table ) { LogError ( ""Process_ipfix <S2SV_blank> [%u] <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> error <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ; } if ( size_left < 4 ) { LogError ( ""Process_ipfix <S2SV_blank> [%u] <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> error <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id",0
1379,"<S2SV_ModStart> * lined ; PIX * pixc, * pixm, * pixg, * pixd ; PROCNAME ( ""pixFewColorsOctcubeQuantMixed"" ) ; if ( ( pixc = pixFewColorsOctcubeQuant2 ( pixs, level ) ) == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; pixm = pixGetColormap ( pixc ) ; ncolors = pixcmapGetCount ( cmap ) ; cmapd = pixcmapCreate ( 8 ) ; lut = ( l_int32 * ) LEPT_CALLOC ( 256, sizeof ( l_int32 ) ) ; for ( i = 0 ; i < ncolors ; i ++ ) lut [ i ] = - 1 ; for ( j = 0 ; j < w ; j ++ ) lut [ j ] = - 1 ; for ( j = 0 ; j < w ; j ++ ) lut [ j ] = - 1 ; for ( j = 0 ; j < ncolors ; j ++ ) lut [ j ] = - 1 ; for ( j = 0 ; j < w ; j ++ ) lut [ j ] = - 1 ;",0
1380,"<S2SV_ModStart> { int i ; int <S2SV_ModEnd> ubits = BN_num_bits <S2SV_ModStart> ( u ) ; int <S2SV_ModEnd> vbits = BN_num_bits <S2SV_ModStart> ( v ) ; for ( i = 0 ; i < ubits ; i ++ ) if (! BN_GF2m_add ( u, u, v ) ) goto err ; for ( i = 0 ; i < vbits ; i ++ ) if (! BN_GF2m_add ( u, u, v ) ) goto err ; if (! BN_GF2m_add ( u, u, v ) ) goto err ; for ( i = 0 ; i < ubits ; i ++ ) if (! BN_is_zero ( u ) ) goto err ; if (! BN_rshift1 ( u, u ) ) goto err ; if ( BN_is_odd ( u ) ) { if ( BN_is_zero ( u ) ) goto err ; if ( BN_is_zero ( u ) ) goto err ; if ( BN_is_zero ( u ) ) goto err ; if ( BN_is_odd ( b ) ) { if",0
1381,"<S2SV_ModStart> = vp8_mse16x16 ; if ( x -> sadperbit16!= 0 ) { tmp_err = vp8_diamond_search_sad ( x, b, d, & ref_mv_full, num00, & tmp_err, step_param, x -> sadperbit16, & num00, & v_fn_ptr, x -> mvcost, ref_mv ) ; if ( tmp_err < INT_MAX - new_mv_mode_penalty ) tmp_err += new_mv_mode_penalty ; if ( tmp_err < INT_MAX - new_mv_mode_penalty ) tmp_err += new_mv_mode_penalty ; if ( tmp_err < INT_MAX - new_mv_mode_penalty ) tmp_err += new_mv_mode_penalty ; if ( tmp_err < INT_MAX - new_mv_mode_penalty ) tmp_err += new_mv_mode_penalty ; }",0
1382,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
1383,<S2SV_ModStart> = alloc ; size_t <S2SV_ModEnd> strindex = 0,1
1384,"<S2SV_ModStart>, nbits ; if ( msg -> readcount > msg -> cursize ) { return 0 ; } <S2SV_ModStart> oob ) { if ( msg -> readcount + ( bits >> 3 ) > msg -> cursize ) { msg -> readcount = msg -> cursize + 1 ; return 0 ; } <S2SV_ModStart> & 7 ; if ( msg -> bit + nbits > msg -> cursize << 3 ) { msg -> readcount = msg -> cursize + 1 ; return 0 ; } <S2SV_ModStart> msg -> bit, msg -> cursize << 3 <S2SV_ModStart> msg -> bit, msg -> cursize << 3 <S2SV_ModStart> msg -> bit, msg -> cursize << 3 <S2SV_ModStart> msg -> bit, msg -> cursize << 3 <S2SV_ModStart> ) ) ; if ( msg -> bit + nbits > msg -> cursize << 3 ) { msg -> readcount = msg -> cursize + 1 ; return 0 ; }",0
1385,<S2SV_ModStart> int idx ; unsigned int count ; <S2SV_ModStart> -> count ; count = kcontrol -> count ; <S2SV_ModStart> ; idx < <S2SV_ModEnd> count ; idx,1
1386,<S2SV_ModStart> ; out1 : cancel_work_sync ( & dev -> kevent ) ; del_timer_sync ( & dev -> delay ) ;,1
1387,"<S2SV_ModStart> * data ; const size_t overhead = 16 + 4 <S2SV_ModEnd> + strlen ( <S2SV_ModStart> + 1 ; const size_t size = overhead ; if ( mongo_validate_ns ( conn, ns )!= MONGO_OK ) return MONGO_ERROR ; for ( i = 0 ; i < count ; i ++ ) { size += bson_size ( bsons [ i ] ) ; if ( mongo_bson_valid ( conn, bsons [ i ], 1 )!= MONGO_OK ) return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; }",0
1388,"<S2SV_ModStart> ) ) { gtk_window_destroy ( GTK_WINDOW ( g_wnd_assistant ) ) ; gtk_dialog_set_default_timeout ( GTK_DIALOG ( dialog ), GTK_DEFAULT_TIMEOUT, GTK_DEFAULT_TIMEOUT ) ; gtk_dialog_set_default_timeout ( GTK_DIALOG ( dialog ), GTK_DEFAULT_TIMEOUT, GTK_DEFAULT_TIMEOUT ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> ; } } ret : gtk_window_destroy ( GTK_WINDOW ( g_wnd_assistant ) ) ; <S2SV_ModEnd> g_free ( dialog",0
1389,<S2SV_ModStart> - 2 ; if ( plen > sizeof ( ids ) ) return 1 ;,0
1390,"<S2SV_ModStart> acl ) { struct iattr iattr ; retval = posix_acl_update_mode ( inode, & iattr. ia_mode, & acl ) ; if ( retval <S2SV_ModEnd> ) goto err_out <S2SV_ModStart> goto err_out ; if (! acl ) { value = NULL ; size = 0 ; } <S2SV_ModEnd> iattr. ia_valid <S2SV_ModStart> iattr ) ; <S2SV_ModEnd> } break ;",1
1391,<S2SV_ModStart> header. types_size <S2SV_ModEnd> ) { continue,1
1392,<S2SV_ModStart> case NPPVformValue : case NPPVpluginNativeAccessibleAtkPlugId <S2SV_ModStart> case NPPVpluginKeepLibraryInMemory : case NPPVpluginWantsAllNetworkStreams : case NPPVpluginWantsAllNetworkStreams : case NPPVSupportsAdvancedKeyHandling :,0
1393,<S2SV_ModStart> len ) { size_t alloc = ( * ( int ) strlen ( string ) ) + 1 <S2SV_ModEnd> ; char * <S2SV_ModStart> CURLcode res ; if ( alloc > ( length? length : ( int ) strlen ( string ) ) ) { free ( ns ) ; return NULL ; } <S2SV_ModStart> ( olen ) { * olen = strindex ; return NULL ; } string += 2 ; alloc -= 2 ; } ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ; return ns ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1394,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nego_process_negotiation_response ( rdpNego <S2SV_ModStart> NEGO_STATE_FAIL ; return FALSE <S2SV_ModEnd> ; } Stream_Read_UINT8 <S2SV_ModStart> = NEGO_STATE_FINAL ; return TRUE ;,0
1395,"<S2SV_ModStart> int i, target_bits_per_mb ; const double correction_factors = get_rate_correction_factors ( cpi ) ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; i = active_best_quality ; do { const int bits_per_mb_at_this_q = ( int ) vp9_rc_bits_per_mb ( cm -> frame_type, i, correction_factors <S2SV_ModEnd> ) ; if <S2SV_ModStart> active_worst_quality ) ; if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; break ; } else { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; } } while ( ++ i <= active_worst_quality ) ;",0
1396,<S2SV_ModStart> value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
1397,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1398,"<S2SV_ModStart> ( len < 4 <S2SV_ModEnd> ) { return <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> n = EXTRACT_32BITS <S2SV_ModStart> ( & prep -> pp_n ) ; while ( -- n >= 0 && ND_TTEST ( * ps ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %u/%s:%u"", ps -> slot, ps -> page. p_nid ) ) ; io = ( const struct id_off * ) ( io + ps -> nid ) ; if ( io < ie ) { ND_PRINT ( ( ndo, "" <S2SV_blank> c%s:%u"", c, ipaddr_string ( ndo, & io -> id ) ) ; c = ',' ; } ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( const struct pgstate * ) io ; <S2SV_ModEnd> } return (",0
1399,"<S2SV_ModStart>, NULL, <S2SV_ModEnd> data ) ;",1
1400,<S2SV_ModStart> 0 ) ; if ( res ) { if (! res ) return - EINVAL ; return - EINVAL ; } <S2SV_ModEnd> freq_reg = devm_ioremap,0
1401,"<S2SV_ModStart> ; i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD (",0
1402,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> TX_SIZE tx_size, int up_available, int left_available, int right_available, int plane, int left_available, int above_available, int above_row, const int bs = 4 << tx_size ; uint8_t * const_above_row = above_row + 16 ; const int bs = 4 << tx_size ; int frame_width, frame_height ; if ( plane == 0 ) { frame_width = xd -> cur_buf -> x_width ; frame_height = xd -> cur_buf -> y_height ; } else { frame_width = xd -> cur_buf -> x_width ; frame_height = xd -> cur_buf -> y_height ; } if ( left_available && xd -> mb_to_bottom_edge < 0 ) { if ( y0 + bs <= frame_height ) { for ( i = 0 ; i < bs ; ++ i ) left_col [ i ] = ref [ i * ref_stride - 1 ] ; } else { for ( i = 0 ; i < bs ; ++ i ) left_col [ i",0
1403,"<S2SV_ModStart> } else { if ( end >= sizeof ( element -> pattern ) ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> pattern <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", ( int ) ( sizeof ( element -> pattern ) - 1 ) ) ; goto error ; } } else if ( end >= sizeof ( element -> pattern ) ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> maximum <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", ( int ) ( sizeof ( element -> pattern ) - 1 ) ) ) ; goto error ; }",0
1404,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 0.0000001 ; if ( len <= 0 ) { * str = 0 ; return ; } if (! isFinite ( val ) ) { if ( val < 0 ) strcpy ( str, ""-NaN"", len ) ; else strcpy ( str, ""Infinity"", len ) ; } else { if ( val < 0 ) strcpy ( str, ""NaN"", len ) ; } else { if ( val < 0 ) strcpy ( str, ""-Infinity"", len ) ; else strcpy ( str, ""Infinity"", len ) ; } } else { if ( val < 0 ) { if ( -- len <= 0 ) { * str = 0 ; return ; } * ( str ++ ) = '-' ; val = - val ; } if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ) ) ; d *= radix ; while ( d >= 1 ) { int v = ( int ) ( val / d ) ; val -= v * d ; while ( d >= 1 ) {",0
1405,"<S2SV_ModStart> * jas_iccprof_createfrombuf ( jas_uchar <S2SV_ModEnd> * buf,",1
1406,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ;,1
1407,"<S2SV_ModStart> ; BUG_ON (! thresholds ) ; usage = mem_cgroup_usage ( memcg, type == _MEMSWAP ) ; __mem_cgroup_threshold ( memcg, type == _MEMSWAP ) ; <S2SV_ModStart> synchronize_rcu ( ) ; for ( i = 0 ; i < thresholds -> primary -> size ; i ++ ) { if ( thresholds -> primary -> entries [ i ]. eventfd!= eventfd ) break ; for ( j = 0 ; j < thresholds -> primary -> size ; j ++ ) { <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
1408,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct ion_handle * <S2SV_ModStart> id ) ; mutex_lock ( & client -> lock ) ; handle = ion_handle_get_by_id_nolock <S2SV_ModEnd> ( client, <S2SV_ModStart> client -> lock <S2SV_ModEnd> ) ; mutex_unlock <S2SV_ModStart> ; return handle <S2SV_ModEnd> ; } <S2SV_null>",0
1409,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_literal ( wb, VP9_FRAME_MARKER, 2 ) ; write_profile ( cm -> profile, wb ) ; vpx_wb_write_bit ( wb, cm -> frame_type ) ; vpx_wb_write_bit ( wb, cm -> error_resilient_mode ) ; if ( cm -> profile > PROFILE_1 ) { assert ( cm -> bit_depth > BITS_8 ) ; vp9_wb_write_bit ( wb, cm -> bit_depth - BITS_10 ) ; } write_sync_code ( wb ) ; if ( cm -> profile > PROFILE_1 ) { assert ( cm -> bit_depth > BITS_8 ) ; vp9_wb_write_bit ( wb, cm -> bit_depth - BITS_10 ) ; } if ( cm -> profile > PROFILE_1 ) { assert ( cm -> bit_depth > BITS_8 ) ; vp9_wb_write_bit ( wb,",0
1410,"<S2SV_ModStart> 'g' }, { ""stroff"", no_argument, 0, 'l' }, { <S2SV_ModStart> 'u' }, { ""min-width"", no_argument, 0,'m' }, { ""max-width"", no_argument, 0, 'u' }, { ""min-height"", no_argument, 0, 'l' }, { ""max-height"", no_argument, 0, 'u' }, { ""min-width"", no_argument, 0,'m' }, { ""max-width"", no_argument, 0, 'u' }, { ""max-height"", no_argument, 0,'m' }, { ""min-width"", no_argument, 0, 'u' }, { ""max-width"", no_argument, 0, 'l' }, { ""min-height"", no_argument, 0, 'u' }, { ""min-width"", no_argument, 0,'m' }, { ""max-height"", no_argument, 0, 'u' }, { ""stroff"",",0
1411,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
1412,<S2SV_ModStart> ; if ( asdl_typ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1413,<S2SV_ModStart> KEY_FRAME ) { memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,0
1414,"<S2SV_ModStart> error_t error ; uint64_t n ; uint32_t status <S2SV_ModEnd> ; Enc624j600Context * <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( status ) ; n = MIN ( n, ETH_MAX_FRAME_SIZE ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, context -> rxBuffer, n ) ; error = NO_ERROR ; } else { error = ERROR_INVALID_PACKET ; } if ( ( status & RSV_RECEIVED_OK )!= 0 ) { error = ERROR_INVALID_PACKET ; } if ( context -> nextPacket > ENC624J600_RX_BUFFER_START ) { enc624j600WriteReg ( interface, ENC624J600_ERXTAIL, ENC624J600_",0
1415,<S2SV_ModStart> ] == 0x01 && i < gemsafe_cert_max,1
1416,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
1417,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv, VALUE klass, VALUE content ) { VALUE rb_schema ; VALUE errors = rb_ary_new ( ) ; xmlSchemaParserCtxtPtr ctx = xmlSchemaNewMemParserCtxt ( argc, argv ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; # ifdef HAVE_XMLSCHEMASETPARSERSTRUCTUREDERRORS xmlSchemaSetParserStructuredErrors ( ctx, Nokogiri_error_array_pusher, ( void * ) errors ) ; # endif schema = xmlSchemaParse ( ctx ) ; if ( NULL == schema ) { xmlErrorPtr error = xmlGetLastError ( ) ; if ( error ) Nokogiri_error_raise ( NULL, error ) ; else rb_raise ( rb_eRuntimeError, ""Could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> document"" ) ; return Qnil ; } xmlSchemaFreeParserCtxt ( ctx ) ; errors = rb_ary_new ( ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; xmlSetStructuredErrorFunc ( NULL, NULL ) ;",0
1418,"<S2SV_ModStart> vma ) { <S2SV_ModEnd> struct au1200fb_device * <S2SV_ModStart> info -> par <S2SV_ModEnd> ; vma -> <S2SV_ModStart> _CACHE_MASK ; return vm_iomap_memory <S2SV_ModEnd> ( vma, <S2SV_ModStart> ( vma, fbdev -> fb_phys, fbdev -> fb_len <S2SV_ModEnd> ) ; }",1
1419,"<S2SV_ModStart> { char * tmp_str = NULL ; if ( strlen ( tmp_str ) > CONFLINELEN ) { s_log ( LOG_ERR, ""Configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> number <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", CONFLINELEN, tmp_str - path ) ; print_syntax ( ) ; return 1 ; } tmp_str = strchr ( tmp_str,'<S2SV_blank>') ; if ( strlen ( tmp_str ) > CONFLINELEN ) { s_log ( LOG_ERR, ""Configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> number <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", CONFLINELEN ) ; print_syntax ( ) ; return 1 ; } <S2SV_ModStart> << 20 ; if ( strlen ( tmp_str ) > CONFLINELEN ) { s_log ( LOG_ERR, ""Configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> number <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", CONFLINELEN ) ; print_syntax ( ) ; return 1 ; }",0
1420,"<S2SV_ModStart> / 2 ] ; state -> shuffle ( ( UINT8 * ) im -> image [ state -> y ], state -> buffer, state -> xsize ) ; if ( ++ state -> y >= state -> ysize ) return - 1 ; ptr += chunk ; bytes -= chunk ; } out = state -> buffer ; for ( x = 0 ; x < state -> xsize ; x ++ ) { out [ 0 ] = ptr [ x ] ; out [ 1 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 2 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; state -> shuffle ( ( UINT8 * ) im -> image [ state -> y ], state -> buffer, state -> xsize ) ; if ( ++ state -> y >= state -> ysize ) return - 1 ; ptr += chunk ; bytes -= chunk ; } state -> shuffle ( ( UINT8 * ) im -> image [ state -> y ], state -> buffer, state -> xsize ) ; if ( ++ state -> y >= state -> ysize ) return - 1 ; out = state -> buffer ; for ( x = 0 ; x < state -> xsize ; x ++ ) { out",0
1421,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
1422,<S2SV_ModStart> ; if ( <S2SV_ModEnd> arg >= cdi,1
1423,"<S2SV_ModStart> err = - EINVAL ; if ( type == PACKET_FANOUT_HASH ) goto out ; if ( type == PACKET_FANOUT_LB || type == PACKET_FANOUT_CPU : case PACKET_FANOUT_RND : case PACKET_FANOUT_QM : case PACKET_FANOUT_CBPF : case PACKET_FANOUT_EBPF : return - EINVAL ; if ( ( type_flags & PACKET_FANOUT_FLAG_ROLLOVER ) && ( type == PACKET_FANOUT_HASH ) ) { err = - EINVAL ; goto out ; } rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if (! rollover ) goto out ; atomic_long_set ( & rollover -> num, 0 ) ; atomic_long_set ( & rollover -> num_failed, 0 ) ; po -> rollover = rollover ; }",0
1424,<S2SV_ModStart> -> nmi ) <S2SV_ModEnd> perf_event_wakeup ( handle <S2SV_ModStart> pending ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1425,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> wchar_t <S2SV_ModEnd> * pwcs ) <S2SV_ModStart> len > 0 && op!= NULL <S2SV_ModStart> - EINVAL ; if ( len < size ) return - EINVAL ; <S2SV_ModStart> PLANE_SIZE ) { if ( len < size ) return - EINVAL ; <S2SV_ModStart> -= PLANE_SIZE ; if ( len < size ) return - EINVAL ; <S2SV_ModStart> SURROGATE_PAIR | SURROGATE_LOW <S2SV_ModEnd> | <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1426,"<S2SV_ModStart>, i ; if (! ( s -> state & PNG_IHDR ) ) { av_log ( avctx, AV_LOG_ERROR, ""trns <S2SV_blank> before <S2SV_blank> IHDR\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( s -> state & PNG_IDAT ) { av_log ( avctx, AV_LOG_ERROR, ""trns <S2SV_blank> after <S2SV_blank> IDAT\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart>!= 6 ) || s -> bit_depth == 1",1
1427,"<S2SV_ModStart> EPROTONOSUPPORT ) { crm_error ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) ; st = NULL ; <S2SV_ModStart> ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) ; st = NULL <S2SV_ModStart> ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) ; st = NULL <S2SV_ModEnd> ; } }",0
1428,<S2SV_ModStart> } dt -> proto = IP_GET_IPPROTO ( p ) ; dt ->,1
1429,"<S2SV_ModStart> status = ksz8851ReadReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, KSZ8851_RXFHSR ) ; if ( ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE <S2SV_ModEnd> ) ) == <S2SV_ModStart> ( status & ( RXFHSR_RXMR | KSZ8851_RXFHBCR_RXFTL | KSZ8851_RXFHBCR_RXRF | RXFHSR_RXCE <S2SV_ModEnd> ) ) == <S2SV_ModStart> ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE <S2SV_ModEnd> ) ) == <S2SV_ModStart> ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_R",0
1430,"<S2SV_ModStart> const node * n0, bool <S2SV_ModEnd> is_async ) { <S2SV_ModStart> is_async ) { const node * const n = is_async? CHILD ( n0, 1 ) : n0 ; <S2SV_ModStart> returns, type_comment, LINENO ( n0 ), n0 -> n_col_offset, c -> c_arena ) ; if (! NAME ( CHILD ( n, name_i + 1 ) ) ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 2 ) ) ; name_i += 2 ; } if ( TYPE ( CHILD ( n, name_i + 4 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 4 ) ) ; if (! type_comment ) return NULL ; if ( NCH ( CHILD ( n, name_i + 5 ) ) > 1 ) type_comment = NULL ; if ( TYPE ( CHILD ( n, name_i + 5 ) ) == TYPE_COMMENT ) type_comment = NULL ;",0
1431,<S2SV_ModStart> int i ; lockdep_assert_held ( & mm -> mmap_sem ) ; <S2SV_ModStart> ptl ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1432,"<S2SV_ModStart> ( AUDIT_APPARMOR_DENIED, __aa_current_profile ( ), GFP_KERNEL, & sa, NULL <S2SV_ModEnd> ) ; }",1
1433,"<S2SV_ModStart> uint_fast8_t tmp ; siz -> comps = 0 ; <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; goto error ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; goto error ; } if ( siz -> tilexoff >= siz -> width ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; goto error ; } if ( siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; goto error ; } if ( siz -> xoff >= siz -> width ) { jas_eprintf ( ""x",0
1434,"<S2SV_ModStart> { tr_debug ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; dst_coap_msg_ptr -> token_ptr = NULL ; break <S2SV_ModEnd> ; } if <S2SV_ModStart> { tr_debug ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } <S2SV_ModEnd> dst_coap_msg_ptr -> token_ptr <S2SV_ModStart> = sn_coap_protocol_malloc_copy ( handle, packet_data_pptr, dst_coap_msg_ptr -> token_len, NULL ) ; if ( dst_coap_msg_ptr -> token_ptr == NULL ) { tr_debug ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> token!"" ) ; return - 1 ; } dst_coap_msg_ptr -> token_ptr = sn_coap_protocol_malloc_copy ( handle, packet_data_pptr, dst_coap_msg_ptr -> token_len, NULL ) ; if ( dst_coap_msg_ptr",0
1435,"<S2SV_ModStart> += 4 ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> += 4 ; if ( xmi_size < 8 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> += 4 ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> += 4 ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> += 4 ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> += 4 ; xmi_size",0
1436,"<S2SV_ModStart> size_t total_len ; struct iov_iter iter ; <S2SV_ModStart> ) return 0 ; iov_iter_init ( & iter, iov, nr_segs, total_len, 0 ) <S2SV_ModStart> -> ops ; <S2SV_ModEnd> size_t chars = <S2SV_ModStart> buf -> len ; size_t written <S2SV_ModStart> ; int error <S2SV_ModEnd> ; if ( <S2SV_ModStart> break ; } written = copy_page_to_iter ( buf -> page, buf -> offset, chars, & iter ) ; if ( unlikely ( written < chars ) ) { if (! ret ) ret = - EFAULT <S2SV_ModEnd> ; break ;",1
1437,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits <S2SV_ModStart> ) ; } \\\n} <S2SV_ModEnd> IndexPacket index ; <S2SV_ModStart> ++ ) { next_pixel = MagickFalse ; displacement = 1 ; <S2SV_ModStart> -= MaxHashTable ; if ( k < 0 ) continue <S2SV_ModEnd> ; if (,1
1438,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1439,<S2SV_ModStart> { p_fm_config_conx_hdlt hdl = NULL <S2SV_ModStart> res ) ; return - 1 <S2SV_ModStart> ) ; return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> 0 ) { res = <S2SV_ModEnd> commandList [ i <S2SV_ModStart> ] ) ; return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> 0 ) { res = <S2SV_ModEnd> commandList [ i <S2SV_ModStart> ] ) ; return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> 0 ) { res = <S2SV_ModEnd> commandList [ i <S2SV_ModStart> ] ) ; return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1440,"<S2SV_ModStart> size_t max_mem ; size_t max_samples ; char optstr [ 32 ] ; <S2SV_ModStart> 0 ] ; max_samples = 64 * JAS_MEBI ; <S2SV_ModStart> break ; case OPT_MAXSAMPLES : max_samples = strtoull ( jas_optarg, 0, 10 ) ; break ; case <S2SV_ModStart> break ; case OPT_MAXSAMPLES : max_samples = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_HELP : break ; default : usage ( ) ; break ; } } if ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_INFILE : infile = jas_optarg ; break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_HELP : default : usage ( ) ; break ; } } if ( ( fmtname = jas_image_getfmtname ( fmtid ) ) < 0 ) { fprintf ( stderr, ""cannot <S2SV_blank> open <S2SV_blank> standard <S2SV_blank> input <S2SV_blank> file <S2SV_blank> %s\\n"", fmtname )",0
1441,"<S2SV_ModStart> ""Unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> adapter.\\n"" ) ; return - 1 ; } if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; }",0
1442,"<S2SV_ModStart> || cherokee_buffer_is_empty ( <S2SV_ModEnd> conn -> validator <S2SV_ModStart> user ) ) { ldap_msgfree ( message ) ; return ret_error ; } size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) { LOG_ERROR ( CHEROKEE_ERROR_VALIDATOR_LDAP_SEARCH, props -> basedn. buf, attrs, 0, & message ) ; if ( re!= LDAP_SUCCESS ) { LOG_ERROR ( CHEROKEE_ERROR_VALIDATOR_LDAP_SEARCH, props -> basedn. buf, LDAP_SCOPE_SUBTREE, props -> filter. buf, attrs, 0, & message ) ; if ( re!= 1 ) { ldap_msgfree ( message ) ; return ret_not_found ; } dn = ldap_get_dn ( ldap -> conn, first ) ; if ( dn == NULL ) { ret = ret_not_found ; } ret = validate_dn ( props, dn, conn -> validator -> passwd. buf ) ; if ( ret!= ret_ok ) return ret_error ; } ldap_msg",0
1443,<S2SV_ModStart> ( row = 0 <S2SV_ModEnd> ; row < <S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif,0
1444,"<S2SV_ModStart> ; if (! nl ) { list_for_each_entry ( hc, _name_buckets + i, name_list ) { list_for_each_entry ( nl, _name_buckets + i, name_list ) { if ( old_nl ) old_nl -> next = ( uint32_t ) ( ( void * ) nl - ( void * ) old_nl - ( void * ) nl - ( void * ) orig_nl ) ; old_nl = nl ; } }",0
1445,"<S2SV_ModStart> ""MemoryAllocationFailed"" ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;",0
1446,"<S2SV_ModStart> vcpu_data vcpu_info ; unsigned int nr_entries ; <S2SV_ModStart> irq_srcu ) ; nr_entries = irq_rt -> nr_rt_entries ; for ( e = e -> link ; e -> type!= KVM_IRQ_ROUTING_MSI ; e = e -> link ) { if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; if (! kvm_intr_is_single_vcpu ( kvm, e, & irq, & vcpu ) ) { ret = - EINVAL ; goto out ; } kvm_set_msi_irq ( kvm, e, & irq, & vcpu ) ; if ( ret < 0 ) { printk ( KERN_ERR ""failed <S2SV_blank> to <S2SV_blank> back <S2SV_blank> to <S2SV_blank> remapped <S2SV_blank> mode, <S2SV_blank> irq: <S2SV_blank> %u\\n"", host_irq ) ; goto out ; } continue ; } <S2SV_ModEnd> hlist_for_each_entry ( e <S2SV_ModStart>, & irq_rt <S2SV_ModEnd> -> map [",0
1447,<S2SV_ModStart> bfqq ) { hrtimer_try_to_cancel <S2SV_ModEnd> ( timer ),0
1448,<S2SV_ModStart> else { return false <S2SV_ModEnd> ; } case,1
1449,"<S2SV_ModStart> sock, sk ) ; memset ( sa, 0, sizeof ( * sa )",1
1450,<S2SV_ModStart> (! handle ||! SecIsValidHandle ( handle ),1
1451,"<S2SV_ModStart> += PRIMARY_DRAWING_ORDER_FIELD_BYTES [ ( int ) <S2SV_ModStart> orderInfo -> orderType ] ; length += update_prepare_bounds ( context, orderInfo )",0
1452,<S2SV_ModStart> if (! ( flags & RENAME_EXCHANGE ) && ( new -> d_inode!= old_upperdir ) && ( new -> d_inode -> i_uid == old -> d_inode -> i_uid ) && ( new -> d_inode -> i_uid == old_upperdir -> i_uid ) && ( new -> d_inode -> i_uid == old_upperdir -> i_uid ) && ( new -> d_inode!= old_upperdir ) && ( new -> d_inode!= opaquedir || ( new -> d_inode!= new_upperdir ) ) && ( new -> d_inode -> i_uid == old_upperdir -> i_uid ) && ( new -> d_inode -> i_uid == old_upperdir -> i_uid ) && ( new -> d_inode -> i_uid == old_upperdir -> i_uid ) && ( new -> d_inode!= opaquedir ) ) && ( new -> d_inode!= opaquedir || ( new -> d_inode!= new_upperdir ) ) && ( new -> d_inode,0
1453,<S2SV_ModStart> O_EXACT1 ) { if ( s >= end ) break ; <S2SV_ModStart> O_EXACT2 ) { if ( s >= end ) break ; <S2SV_ModStart> O_EXACT3 ) { if ( s >= end ) break ; <S2SV_ModStart> O_EXACT4 ) { if ( s >= end ) break ; <S2SV_ModStart> O_EXACT5 ) { if ( s >= end ) break ; <S2SV_ModStart> O_EXACT5 ) { if ( s >= end ) break ; <S2SV_ModStart> O_EXACT5 ) { if ( s >= end ) break ; <S2SV_ModStart> O_EXACT5 ) { if ( s >= end ) break ; <S2SV_ModStart> O_EXACT2 ) { if ( s >= end ) break ; <S2SV_ModStart> O_EXACT3 ) { if ( s >= end ) break ; <S2SV_ModStart> O_EXACT5 ) { if ( s >= end ) break ; } <S2SV_ModStart> O_EXACT5 ) { if ( s >= end ) break ; },0
1454,"<S2SV_ModStart> int plane ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) vp9_foreach_transformed_block_in_plane_high ( xd, plane, visit, arg ) ; else # endif vp9_foreach_transformed_block_in_plane_high ( xd, plane, visit, arg ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) vp9_foreach_transformed_block_in_plane_high ( xd, plane",0
1455,<S2SV_ModStart> = - EINVAL ; msg -> msg_namelen = 0,0
1456,"<S2SV_ModStart> mntent, path, 0",0
1457,<S2SV_ModStart> = hash ; sr -> fd = fd ;,0
1458,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; if ( * _dest_keyring ) return - EINVAL ; <S2SV_ModStart> } else { if ( cred -> request_key_auth ) { <S2SV_ModStart> dest_keyring ) ; goto out ; } } case KEY_REQKEY_DEFL_THREAD_KEYRING : dest_keyring = key_get ( cred -> thread_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_PROCESS_KEYRING : dest_keyring = key_get ( cred -> process_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_USER_SESSION_KEYRING : dest_keyring = key_get ( cred -> user -> session_keyring ) ; break ; case KEY_REQKEY_DEFL_GROUP_KEYRING : dest_keyring = key_get ( cred -> group -> session_keyring ) ; break ; case KEY_REQKEY_DEFL_USER_SESSION_KEYRING : dest_keyring = key,0
1459,"<S2SV_ModStart> void nonrd_pick_sb_modes ( const VP9_COMMON * const cm, MACROBLOCK * const x, <S2SV_ModStart> x -> e_mbd ; set_offsets ( cpi, x, tile, mi_row, mi_col, bsize ) ; xd -> mi [ 0 ] -> mbmi. sb_type = bsize ; if ( frame_is_intra_only ( cm ) ) { vp9_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; set_mode_info ( & xd -> mi [ 0 ] -> mbmi, bsize, intramode ) ; } duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col ) ; }",0
1460,<S2SV_ModStart> NETIF_F_HW_CSUM | NETIF_F_SG <S2SV_ModEnd> ; if ( <S2SV_ModStart> NETIF_F_HW_CSUM | NETIF_F_SG <S2SV_ModEnd> ; if (,1
1461,"<S2SV_ModStart> ; * err = SUPERBLOCK_READ ( & reader, & reader. superblock ) ; if (! reader. superblock ) { log ( ""cannot <S2SV_blank> read <S2SV_blank> superblock <S2SV_blank> from <S2SV_blank> %s\\n"", filename ) ; * err = errno ; return NULL ; }",0
1462,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> -> rows ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> -> rows ; status = SetImageExtent ( image, image -> columns, image -> rows, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> -> rows ; status = SetImageExtent ( image, image -> columns, image -> rows, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
1463,"<S2SV_ModStart> ""nnnnn\\0"" ) ] ; long <S2SV_ModEnd> tmp ; if <S2SV_ModStart> ( copy_from_user ( buf <S2SV_ModEnd>, buffer,",0
1464,<S2SV_ModStart> -> ranges = safeMalloc ( <S2SV_ModEnd> sizeof ( MappedRange,0
1465,<S2SV_ModStart> ) ) { if ( be32_to_cpu ( dip -> di_anextents ) + be16_to_cpu ( dip -> di_nblocks ) > mp -> m_sb. sb_inodesize ) return __this_address ; if ( be32_to_cpu ( dip -> di_nextents ) + be16_to_cpu ( dip -> di_anextents ) > be64_to_cpu ( dip -> di_nblocks ) ) return __this_address ; if ( be16_to_cpu ( dip -> di_anextents ) > be64_to_cpu ( dip -> di_anextents ) ) return __this_address ; if ( be32_to_cpu ( dip -> di_nextents ) + be16_to_cpu ( dip -> di_anextents ) > be64_to_cpu ( dip -> di_nblocks ) ) return __this_address ; if ( mode && ( be32_to_cpu ( dip -> di_nextents ) + be16_to_cpu ( dip -> di_anextents ) > be64_to_cpu ( dip -> di_nblocks ) ),0
1466,<S2SV_ModStart> } if ( cnt_c > BOT ) { totfr = 0 ; for ( i = 0 ; i < 16 ; i ++ ) sum += pixel -> freq [ i ] ; for ( j = 0 ; j < i ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; for ( j = 0 ; j < i ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; for ( j = 0 ; j < 16 ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; for ( j = 0 ; j < 4 ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; for ( j = 0 ; j < i ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; for ( j = 0 ; j < i ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; for ( j = 0 ; j < 16 ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; for ( j = 0 ; j < 4 ; j ++ ) sum += pixel -> freq [ i,0
1467,"<S2SV_ModStart> : if (! jas_safe_size_mul3 ( cmpt -> width, cmpt -> height, 4 ) ) { jas_eprintf ( ""invalid <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> %d\\n"", cmpt -> width, cmpt -> height ) ; goto error ; } <S2SV_ModStart> : if (! jas_safe_size_mul3 ( cmpt -> width, cmpt -> height, 4 ) ) { jas_eprintf ( ""invalid <S2SV_blank> height <S2SV_blank> %d\\n"", cmpt -> height, ( cmpt -> width + cmpt -> width ) ) ) { jas_eprintf ( ""invalid <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> %d\\n"", cmpt -> width, ( cmpt -> height ) ) ; goto error ; } <S2SV_ModStart> : if (! jas_safe_size_mul3 ( cmpt -> width, cmpt -> height, 4 ) ) ) { jas_eprintf ( ""invalid <S2SV_blank> height <S2SV_blank> %d\\n"", cmpt -> height ) ; goto error ; }",0
1468,"<S2SV_ModStart> ; if ( flags & ( VP8_EFLAG_NO_UPD_GF ) && ( flags & VP8_EFLAG_FORCE_GF ) ) || ( ( flags & VP8_EFLAG_NO_UPD_ARF ) && ( flags & VP8_EFLAG_FORCE_ARF ) ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( ( flags & VP8_EFLAG_NO_REF_LAST ) && ( flags & VP8_EFLAG_NO_REF_GF ) && ( flags & VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; if",0
1469,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;",0
1470,<S2SV_ModStart> event ) ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
1471,"<S2SV_ModStart>, u_int len, const <S2SV_ModStart> case BGP_AIGP_TLV : if ( len % 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_AIGP_TLV : if ( len % 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_AIGP_TLV : if ( len % 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_AIGP_TLV : if ( len % 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_AIGP_TLV : if ( len % 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; }",0
1472,"<S2SV_ModStart> -> outputbuffer, ""<table <S2SV_blank> id=\'daemon-status\'><tr>"" ""<th <S2SV_blank> width=\'40%%\'>Parameter</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""</tr>""",0
1473,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
1474,"<S2SV_ModStart> ] ) ; if ( bn_lt ( tokenAmount, 0 ) || bn_lt ( tokenMinAmount, 0 ) || bn_lt ( tokenMinAmount, 0 ) || bn_lt ( tokenMinAmount, 0 ) || bn_lt ( tokenMinAmount, 0 ) || bn_lt ( tokenMinAmount, 0 ) || bn_lt ( tokenMinAmount, 0 ) || bn_lt ( tokenMinAmount, 0 ) || bn_lt ( tokenMinAmount, 0 ) ) { return false ; } <S2SV_ModEnd> tokbuf [ 0 <S2SV_ModStart> ] ) ; if ( bn_lt ( tokenMinAmount, 0 ) || bn_lt ( tokenMinAmount, 0 ) || bn_lt ( tokenMinAmount, 0 ) || bn_lt ( tokenMinAmount, 0 ) || bn_lt ( tokenMinAmount, 0 ) || bn_lt ( tokenMinAmount, 0 ) || bn_lt ( tokenMinAmount, 0 ) || bn_lt ( tokenMinAmount, 0 ) ) { return false ; }",0
1475,<S2SV_ModStart> int u ; if ( n < 0 || n >= 32 ) { return - 1 ; } <S2SV_ModEnd> v = 0,1
1476,"<S2SV_ModStart> iovec, compat, & iter <S2SV_ModStart> len, iovec, & iter <S2SV_ModStart> iter_op ) { ret = iter_op ( req, & iter ) ; } else { ret = rw_op ( req, iter. iov, iter. <S2SV_ModEnd> nr_segs, req",1
1477,"<S2SV_ModStart> } if ( ptr - c -> rcurr > 100 || ( strncmp ( ptr, ""get <S2SV_blank> "", 4 ) && strncmp <S2SV_ModEnd> ( ptr, <S2SV_ModStart> ptr, ""gets <S2SV_blank> "", 5 )",0
1478,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
1479,"<S2SV_ModStart> iad_num ++ ; if ( buffer [ len - USB_DT_CONFIG_SIZE ]!= '\\0' ) { dev_err ( ddev, ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d\\n"", cfgidx ) ; return - EINVAL ; } <S2SV_ModStart> iad_num ++ ; if ( buffer [ len - USB_DT_CONFIG_SIZE ]!= '\\0' ) { dev_err ( ddev, ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d\\n"", cfgidx ) ; return - EINVAL ; }",0
1480,<S2SV_ModStart> ; if ( card -> user_ctl_count >= MAX_USER_CONTROLS ) return - ENOMEM ; if ( info -> count > MAX_USER_CONTROLS ) return - EINVAL <S2SV_ModEnd> ; access = <S2SV_ModStart> SNDRV_CTL_ELEM_ACCESS_READWRITE | SNDRV_CTL_ELEM_ACCESS_INACTIVE | SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ; access = info -> access & ( SNDRV_CTL_ELEM_ACCESS_READWRITE | SNDRV_CTL_ELEM_ACCESS_INACTIVE | SNDRV_CTL_ELEM_ACCESS_INACTIVE | SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ) ; if ( access & SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ) access |= SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ;,0
1481,"<S2SV_ModStart> client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; return 0 ; } if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) { exit_client ( client_p, client_p, client_p, ""Malformed <S2SV_blank> AUTHENTICATE""",1
1482,<S2SV_ModStart> OpMask ) ; <S2SV_ModEnd> if ( ctxt <S2SV_ModStart> -> _eip ; simd_prefix = ( ctxt -> mode == X86EMUL_MODE_PROT64 ) || ( ctxt -> mode == X86EMUL_MODE_PROT32 ) || ( ctxt -> mode == X86EMUL_MODE_PROT64 ) ; <S2SV_ModStart> OpMask ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> -> _eip ; simd_prefix = ( ctxt -> mode == X86EMUL_MODE_PROT64 ) || ( ctxt -> mode == X86EMUL_MODE_PROT64 ) || ( ctxt -> mode == X86EMUL_MODE_REAL ) || ( ctxt -> mode == X86EMUL_MODE_PROT32 ) || ( ctxt -> mode == X86EMUL_MODE_PROT64 ) || ( ctxt -> mode == X86EMUL_MODE_PROT32 ) || ( ctxt -> mode == X86EMUL_MODE_PROT64 ) || ( ctxt -> mode == X86EMUL_MODE_PROT32 ) || ( ctxt -> mode == X86EMUL_MODE_PROT64 && ( ctxt -> mode == X86EMUL_MODE_PRO,0
1483,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0 ) ;",0
1484,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; random_ether_addr (,1
1485,"<S2SV_ModStart> 16 ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) distortion = vp8_highbitdepth_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; else distortion = vp8_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; rate = x -> mbmode_cost [ xd -> frame_type ] [ mode ] ; this_rd = RDCOST ( x -> rdmult, x -> rddiv, rate, distortion ) ; if ( error16x16 > this_rd ) { error16x16 = this_rd ; best_mode = mode ; best_sse = sse ; } } # endif",0
1486,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd>,",0
1487,"<S2SV_ModStart> * start ; size_t header_len = <S2SV_ModEnd> sizeof ( psf <S2SV_ModStart> ( psf -> header ) ; if ( header_len > maxlen ) { va_start ( argptr, format ) ; vsnprintf ( start, maxlen, format, argptr ) ; maxlen = sizeof ( psf -> header ) - maxlen ; start [ maxlen - 1 ] = 0 ; header_len += maxlen ; } <S2SV_ModStart> header ) + header_len <S2SV_ModEnd> ; va_end ( <S2SV_ModStart> psf -> header ) - header_len <S2SV_ModEnd> ; return ;",0
1488,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
1489,"<S2SV_ModStart> if (! job_id ||! prev_hash ||! coinbase1 ||! coinbase2 ||! bbversion ||! nbit ||! ntime ) { if ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ; goto out ; } cg_wlock ( & pool -> data_lock ) ; job_id = json_array_string ( val, 0 ) ; prev_hash = json_array_string ( val, 1 ) ; bbversion = json_array_string ( val, 2 ) ; nbit = __json_array_string ( val, 3 ) ; ntime = json_array_string ( val, 4 ) ; if (! json_is_true ( json_array_get ( val, 8 ) ) ) { if (! job_id ) free ( prev_hash ) ; if (! coinbase1 ||! bbversion ||! nbit ||! ntime ) { if ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ; if ( ntime )",0
1490,<S2SV_ModStart> alg_priv ) { vpx_alg_destroy_priv <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> -> destroy ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; ctx,0
1491,<S2SV_ModStart> case EXIT_REASON_VMON : case EXIT_REASON_INVEPT :,1
1492,<S2SV_ModStart> { sf -> <S2SV_ModEnd> adaptive_rd_thresh = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> use_square_partition_only =! <S2SV_ModStart> cm ) ; <S2SV_ModEnd> sf -> less_rectangular_check <S2SV_ModStart> ; sf -> <S2SV_ModEnd> tx_size_search_method = vp9_frame_is_boosted <S2SV_ModStart> ( cpi )? USE_FULL_RD : USE_LARGESTALL ; sf -> subpel_iters_per_step = 1 ; sf -> mode_skip_start = 10 ; sf -> adaptive_pred_interp_filter = 1 ; sf -> recode_loop = ALLOW_RECODE_KFARFGF ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_H_V ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_H_V ; sf -> intra_y_mode_,0
1493,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
1494,"<S2SV_ModStart> struct compat_timex ) ) return - EFAULT ; if ( copy_from_user ( & txc -> tx32, utp, sizeof ( struct compat_timex )",0
1495,"<S2SV_ModStart> int ret = select ( pfds, ts [ h ]. poll_count, - 1 ) ; if ( ret == - 1 ) { APPL_TRACE_ERROR ( ""poll <S2SV_blank> ret <S2SV_blank> -1, <S2SV_blank> exit <S2SV_blank> the <S2SV_blank> thread, <S2SV_blank> errno:%d, <S2SV_blank> err:%s"", errno, strerror ( errno ) ) ; break ; } if ( ret == 0 ) { APPL_TRACE_ERROR ( ""poll <S2SV_blank> ret <S2SV_blank> -1, <S2SV_blank> exit <S2SV_blank> the <S2SV_blank> thread, <S2SV_blank> errno:%d, <S2SV_blank> err:%s"", errno, strerror ( errno ) ) ; break ; } if ( ret == 0 ) { APPL_TRACE_ERROR ( ""poll <S2SV_blank> ret <S2SV_blank> -1, <S2SV_blank> exit <S2SV_blank> the <S2SV_blank> thread, <S2SV_blank> errno:%d, <S2SV_blank> err:%s"", errno, strerror ( errno ) ) ; break ; }",0
1496,"<S2SV_ModStart> ; int goodsize ; if ( inuse >= LUAI_MAXSTACK / 8 ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) { luaD_reallocstack ( L, goodsize, 0 ) ; } else if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) { luaD_reallocstack ( L, goodsize, 0 ) ; } else condmovestack ( L, { }, { } ) ;",0
1497,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1498,"<S2SV_ModStart>, * s <S2SV_ModEnd> ; int quote <S2SV_ModStart> 0 ) ) ; if ( * s == '\\0' ) { char buf [ 128 ] ; s = _PyUnicode_AsString ( STR ( CHILD ( n, 0 ) ) ) ; } else { char buf [ 128 ] ; s = _PyUnicode_AsString ( STR ( CHILD ( n, 0 ) ) ) ; } PyOS_snprintf ( buf, sizeof ( buf ), ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; Py_DECREF ( type ) ; Py_XDECREF ( tback ) ; } # ifdef HAVE_UNICODE if ( PyErr_ExceptionMatches ( PyExc_UnicodeError ) ) { PyObject * type, * value, * tback, * errstr = PyObject_Str ( value ) ; if ( errstr ) { PyErr_Fetch ( & type, & value, & tback ) ; if ( errstr ) { Py_DECREF ( type ) ; Py_DECREF ( errstr ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF ( type ) ; Py_XDECREF ( t",0
1499,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> } if ( strcmp ( ""default-quantizer"", option_name ) == 0 ) { svc_ctx -> default_quantizer = atoi ( option_value ) ; } else if ( strcmp ( ""encoding-mode"", option_name ) == 0 ) { res = set_option_encoding_mode ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""layers"", option_name ) == 0 ) { res = parse_scale_factors ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_factors ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 ) ; if ( res!=",0
1500,<S2SV_ModStart> event ) ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
1501,<S2SV_ModStart> 0 ) { const char * s = ++ s ; <S2SV_ModStart> while ( * s <S2SV_ModEnd> &&! isspace <S2SV_ModStart> * t ) ) t ++ ; if ( * s == '/' ) { const char * t = ++ s ; while ( * t &&! isspace ( * t ) ) t ++ ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; if (! font_name ) free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; if (! font_name ) free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; if (! font_name ) free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t -,0
1502,<S2SV_ModStart> ; if ( entry == NULL ) return EINVAL ; if ( <S2SV_ModStart> KADM5_POLICY ) && entry -> policy == NULL <S2SV_ModEnd> ) return KADM5_BAD_MASK <S2SV_ModStart> KADM5_BAD_MASK ; if ( ( mask & KADM5_POLICY ) && ( mask & KADM5_POLICY_CLR ) ) return KADM5_BAD_MASK ; if ( ( mask & KADM5_POLICY ) && ( mask & KADM5_POLICY_CLR ) ) return KADM5_BAD_MASK ; if ( ( mask & KADM5_POLICY ) && ( mask & KADM5_POLICY_CLR ) ) return KADM5_BAD_MASK ; if ( ( mask & KADM5_POLICY ) && ( mask & KADM5_POLICY_CLR ) ) return KADM5_BAD_MASK ;,0
1503,<S2SV_ModStart> frame -> data [ plane ] && frame -> linesize <S2SV_ModStart> [ plane ] && frame -> linesize [ plane ],1
1504,"<S2SV_ModStart> ) ; } fprintf ( mvs, ""\\n"" ) ; mb_index = 0 ; fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. uv_mode ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; }",0
1505,<S2SV_ModStart> self ) { <S2SV_ModEnd> PyObject * new_memo,0
1506,,1
1507,<S2SV_ModStart> 0x95 : case 0x6a : case 0x6b : case 0x6f : case 0x7a : case 0x7b : case 0x7c : case 0x7f : case 0x8a : case 0x8b : case 0x8f : case 0x9a : case 0x10 : case 0x11 : case 0x12 : case 0x13 : case 0x14 : case 0x9f : case 0x10 : case 0x11 : case 0x12 : case 0x13 : case 0x14 : case 0x15 : case 0x16 : case 0x17 : case 0x18 : case 0x19 : case 0x1a : case 0x1b : case 0x1c : case 0x1f : case 0x1f : case 0x18 : case 0x19 : case 0x20 : case 0x21 : case 0x22 : case 0x23 : case 0x23 : case 0x24 : case 0x25 : case 0x26 : case 0x27 : case,0
1508,"<S2SV_ModStart> ) ) { if ( imp_dbh -> pmysql -> mysql_errno ( imp_dbh -> pmysql ) || mysql_errno ( imp_dbh -> pmysql )!= 0 ) { do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; return FALSE ; }",0
1509,"<S2SV_ModStart> ( flags & ( SOCK_THREAD_FD_READ | SOCK_THREAD_FD_WRITE ) <S2SV_ModEnd> || ( ioctl <S2SV_ModStart> == 0 &&! ( flags & SOCK_THREAD_FD_EXCEPTION ) ) <S2SV_ModStart> pthread_mutex_unlock ( & slot_lock ) ; BTA_JvRfcommWrite ( slot -> rfc_handle, slot -> id ) ; } else { LOG_ERROR ( ""%s <S2SV_blank> socket <S2SV_blank> signaled <S2SV_blank> for <S2SV_blank> read <S2SV_blank> while <S2SV_blank> disconnected, <S2SV_blank> slot: <S2SV_blank> %d, <S2SV_blank> channel: <S2SV_blank> %d"", slot -> id, slot -> scn ) ; need_close = true ; } } if ( flags & SOCK_THREAD_FD_WR ) { if (! flush_incoming_que_on_wr_signal ( slot ) ) { LOG_ERROR ( ""%s <S2SV_blank> socket <S2SV_blank> signaled <S2SV_blank> for <S2SV_blank> write <S2SV_blank> while <S2SV_blank> disconnected <S2SV_blank> (or <S2SV_blank> write <S2SV_blank> failure), <S2SV_blank> slot: <S2SV_blank> %d, <S2SV_blank> channel: <S2SV_blank> %d"", __func__, slot -> id, slot -> scn ) ; need_close = true ; } } if ( need_close || ( flags & SOCK_THREAD_FD_EXCEPTION ) || ( ioctl",0
1510,"<S2SV_ModStart> struct ieee_802_11_phdr phdr ; struct ieee_sta_info * sta = NULL <S2SV_ModStart> phdr ) ; if ( sta ) { memcpy ( sta, & phdr, sizeof ( struct ieee_802_11_phdr ) ) ; sta = & phdr ; } else if ( sta ) { memcpy ( sta, & phdr, sizeof ( struct ieee_802_11_phdr ) ) ; } else if ( sta ) { memcpy ( sta, ppi_str, sizeof ( struct ieee_802_11_phdr ) ) ; } else if ( sta ) { memcpy ( sta, & phdr, sizeof ( struct ieee_802_11_phdr ) ) ; } else if ( sta ) { memcpy ( sta, & phdr, sizeof ( struct ieee_802_11_phdr ) ) ; } else if ( sta ) { memcpy ( sta, mpdu_str, sizeof ( struct ieee_802_11_phdr ) ) ; } else if",0
1511,"<S2SV_ModStart> * fp ; if ( initlen && init ) { if ( init == SDS_NOINIT ) init = NULL ; else if ( initlen == 0 ) { sh = s_malloc ( hdrlen + initlen + 1 ) ; if ( sh == NULL ) return NULL ; } sh -> len = initlen ; sh -> alloc = initlen ; * fp = type ; break ; } case SDS_TYPE_1 : { SDS_HDR_VAR ( 1, s ) ; sh -> len = initlen ; sh -> alloc = initlen ; * fp = type ; break ; } case SDS_TYPE_2 : { SDS_HDR_VAR ( 2, s ) ; sh -> len = initlen ; sh -> alloc = initlen ; * fp = type ; break ; } case SDS_TYPE_4 : { SDS_HDR_VAR ( 4, s ) ; sh -> len = initlen ; sh -> alloc = initlen ; * fp = type ; break ; } case SDS_TYPE_8 : { SDS_HDR_VAR ( 8, s ) ; sh -> len = initlen ; sh -> alloc = initlen ; * fp",0
1512,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> ; UINT32 tempWidth ; if (! context ) return FALSE <S2SV_ModStart> -> ColorLossLevel ; <S2SV_ModEnd> rw = ( <S2SV_ModStart> context -> ChromaSubsamplingLevel? tempWidth : 8 ) ; aplane = context -> priv -> PlaneBuffers [ 0 ] + y * rw ; coplane = context -> priv -> PlaneBuffers [ 1 ] + y * rw ; cgplane = context -> priv -> PlaneBuffers [ 2 ] + y * rw ; aplane = context -> priv -> PlaneBuffers [ 3 ] + y * rw ; src = data + ( context -> height - 1 - y ) * scanline ; for ( y = 0 ; y < context -> height ; y ++ ) { src = data + ( context -> height - 1 - y ) * scanline ; src ++ ; } switch ( context -> format ) { case PIXEL_FORMAT_BGR24 : b_val = * src ++ ; g_val = * src ++ ; r_val = * src ++ ; b_val = * src ++ ;,0
1513,<S2SV_ModStart> while ( offset > 0 && offset <S2SV_ModStart> < end_offset ) { <S2SV_ModStart> hf_keybuffer ) ; },1
1514,"<S2SV_ModStart> nr_parens ) return ERR_PTR ( - EINVAL ) ; if ( * ( ++ top )!= invert ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; }",0
1515,<S2SV_ModStart> ) { const VP9EncoderConfig <S2SV_ModEnd> * rc = <S2SV_ModStart> ( ( cpi <S2SV_ModEnd> -> oxcf. <S2SV_ModStart>. starting_buffer_level / 4 <S2SV_ModEnd> ) > INT_MAX <S2SV_ModStart> INT_MAX : ( cpi <S2SV_ModEnd> -> oxcf. <S2SV_ModStart>. starting_buffer_level / 4 <S2SV_ModEnd> ) ; } <S2SV_ModStart> 0 ) { const RATE_CONTROL * rc = & cpi -> rc ; int kf_boost ; if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { kf_boost = ( rc -> frames_since_key / rc -> frames_since_key / <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1516,<S2SV_ModStart> X86_EFLAGS_RF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1517,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( pegasus_t <S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmemdup ( data, size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
1518,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static tran_low_t <S2SV_ModEnd> read_tx_mode ( vpx_reader <S2SV_ModStart> r ) { const tran_low_t <S2SV_ModEnd> tx_mode = vp9_read_literal <S2SV_ModStart> 2 ) ; const tran_low_t <S2SV_ModEnd> tx_mode = vp9_read_literal <S2SV_ModStart> == ALLOW_32X32 ) { <S2SV_ModStart> += vp9_read_bit ( r ) ; } else { TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> tx_mode += vp9_read_bit <S2SV_ModEnd> ( r )",0
1519,<S2SV_ModStart> op + OSPF6HDR_LEN ) ; ND_TCHECK_32BITS ( & hellop -> hello_options,1
1520,<S2SV_ModStart> { if ( datalen!= 1 ) return - EINVAL ; if (,1
1521,"<S2SV_ModStart> rc ) { struct task_struct * <S2SV_ModEnd> task = kthread_run <S2SV_ModStart> ; if ( IS_ERR ( task ) ) { <S2SV_ModStart> uwbd. task = NULL ; <S2SV_ModEnd> printk ( KERN_ERR <S2SV_ModStart> ""UWB <S2SV_blank> won\'t <S2SV_blank> work\\n"" ) ; } else { rc -> uwbd. task = task ; <S2SV_ModEnd> rc -> uwbd <S2SV_ModStart> pid ; } }",1
1522,"<S2SV_ModStart> : # line 101 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1048 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 102 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1054 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 107 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1054 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 104 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1054 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 107 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1076 <S2SV_ModEnd> ""re_grammar.c"" break ;",0
1523,<S2SV_ModStart> : idx ; if ( gfx -> flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { int wholeBytes = ( gfx -> data. bpp * ( pixelCount + 1 ) ) >> 3 ; if ( wholeBytes ) { char c = ( char ) ( col? 0xFF : 0 ) ; pixelCount = ( short ) ( wholeBytes * 8 / gfx -> data. bpp ) ; ptr = ( char ) ( wholeBytes * 8 / gfx -> data. bpp ) ; while ( wholeBytes -- ) { * ptr = ( char ) ( ( col & mask ) << bitIdx ) ; ptr ++ ; } } else { int wholeBytes = ( gfx -> data. bpp * ( pixelCount + 1 ) ) >> 3 ; if ( wholeBytes ) { char c = ( char ) ( col? 0xFF : 0 ) ; pixelCount = ( short ) ( wholeBytes * 8 / gfx -> data. bpp ) ; ptr = ( char ) ( wholeBytes * 8 / gfx -> data. bpp ) ; while ( wholeBytes -- ) { * ptr = c ; ptr ++ ; } } },0
1524,"<S2SV_ModStart> -> cpi ; MACROBLOCK * const x = args -> x ; <S2SV_ModStart> 32 ] ; MB_MODE_INFO * const mbmi = & cpi -> mb. mi [ 0 ] -> mbmi ; <S2SV_ModStart> -> plane [ plane ] ; const PLANE_TYPE type = pd -> plane_type ; const int16_t * qcoeff = BLOCK_OFFSET ( p -> qcoeff, block ) ; const int segment_id = mbmi -> segment_id ; const int ref = is_inter_block ( mbmi ) ; const scan_order * so = is_inter_block ( mbmi ) ; const int ref = is_inter_block ( mbmi ) ; vpx_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. fc. coef_probs [ tx_size ] [ type ] [ ref ] ; unsigned int ( * const eob_branch ) [ COEFF_CONTEXTS ] = cpi -> common. counts. eob_branch [ tx_size ] [ type ] [ ref ] ; const uint8_t * const band = get_band_translate ( tx_size",0
1525,<S2SV_ModStart>. pRename ; Select * pSrc = pSelect -> pSrc ; <S2SV_ModStart> pSelect -> pSrc ; if ( pSrc == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; },0
1526,<S2SV_ModStart> { if ( ( <S2SV_ModStart> shmflg & SHM_RND ) && addr >= shmlba,1
1527,"<S2SV_ModStart> ; serv = svc_create ( & cb_info -> program, NFS4_CALLBACK_BUFSIZE, sv_ops ) ; if ( IS_ERR ( serv ) ) { printk ( KERN_ERR ""nfs_callback_create_svc: <S2SV_blank> create <S2SV_blank> service <S2SV_blank> failed\\n"" ) ; return ERR_PTR ( - ENOMEM ) ; }",0
1528,"<S2SV_ModStart> curve ) { if ( point -> x == point -> x ) { pointZZ_p_set ( rop -> x, R0. x ) ; pointZZ_p_set ( rop -> y, R0. y ) ; return ; } if ( point -> y == point -> y ) { pointZZ_p_set ( rop -> x, R0. x ) ; pointZZ_p_set ( rop -> y, R0. y ) ; return ; } if ( point -> x == point -> x ) { pointZZ_p_set ( rop -> x, R0. x ) ; pointZZ_p_set ( rop -> y, R0. y ) ; return ; } if ( point -> y == point -> y ) { pointZZ_p_set ( rop -> x, R0. x ) ; pointZZ_p_set ( rop -> y, R0. y ) ; return ; } if ( point -> x == point -> x ) { pointZZ_p_set ( rop -> x, R0. x ) ; pointZZ_p_set ( rop -> y, R0. y ) ; return ; }",0
1529,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1530,<S2SV_ModStart> : case NPNVSupportsWindowless : case NPNVprivateModeBool : case NPNVsupportsAdvancedKeyHandling,1
1531,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
1532,"<S2SV_ModStart> s ) { if ( s < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
1533,"<S2SV_ModStart> xIter = crm_first_attr <S2SV_ModEnd> ( xml ) <S2SV_ModStart> -> name ; <S2SV_ModEnd> if ( strcmp <S2SV_ModStart> ( prop_name, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else { char * path = xml_get_path ( xml ) ; crm_trace ( ""Cannot <S2SV_blank> add <S2SV_blank> new <S2SV_blank> node <S2SV_blank> %s <S2SV_blank> at <S2SV_blank> %s"", crm_element_name ( xml ), path ) ; if ( xml!= xmlDocGetRootElement ( xml -> doc ) ) { xmlUnlinkNode ( xml ) ; xmlFreeNode ( xml ) ; return ; } free ( path ) ; }",0
1534,"<S2SV_ModStart> { if ( nimages < 0 ) { L_ERROR ( ""number <S2SV_blank> of <S2SV_blank> images <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", nimages, ( int ) ( MIN_THUMB_WIDTH ) ) ; return ERROR_INT ( ""number <S2SV_blank> of <S2SV_blank> images <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", nimages, ( int ) ( MIN_THUMB_WIDTH ) ) ; } if ( nimages > MAX_IMAGES ) { L_ERROR ( ""number <S2SV_blank> of <S2SV_blank> images <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", nimages, ( int ) ( MIN_VIEW_WIDTH ) ) ; return ERROR_INT ( ""number <S2SV_blank> of <S2SV_blank> images <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", nimages, ( int ) ( MIN_VIEW_WIDTH ) ) ) ; }",0
1535,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> SvcInternal * get_const_svc_internal <S2SV_ModStart> return NULL ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1536,"<S2SV_ModStart> mq_flush_lock, flags ) ; fq -> flush_rq = flush_rq",0
1537,"<S2SV_ModStart> s ) { uint32 length ; struct stream packet = * s <S2SV_ModEnd> ; ber_parse_header ( <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> consume <S2SV_blank> domain <S2SV_blank> params <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",1
1538,"<S2SV_ModStart> ; } } if ( hkey. type == HASH_KEY_IS_LONG &&! zend_hash_index_exists ( params, hkey. num ) ) { zval tmp ; Z_ADDREF_PP ( tmp ) ; Z_ZVAL ( tmp ) ; array_init ( tmp ) ; add_assoc_zval_ex ( tmp, ZEND_STRS ( ""value"" ), * ptr ) ; Z_ADDREF_PP ( tmp ) ; zval_init ( tmp ) ; zend_hash_update ( Z_ARRVAL_P ( tmp ), ""arguments"", sizeof ( ""arguments"" ), ( void * ) & args ) ; * current_param = tmp ; } else if ( hkey. type == HASH_KEY_IS_LONG &&! zend_hash_index_exists ( params, hkey. num ) ) { zval tmp ; Z_ADDREF_PP ( tmp ) ; Z_ADDREF_PP ( tmp ) ; Z_ZVAL ( tmp ) ; array_init ( tmp ) ; Z_ADDREF_PP ( tmp ) ; Z_ADDREF_PP ( tmp ) ; Z_ADDREF_PP (",0
1539,"<S2SV_ModStart> only_420 ) { _y4m -> vpx_fmt = VPX_IMG_FMT_I420 ; _y4m -> vpx_bps = 12 ; <S2SV_ModStart> = VPX_IMG_BPS_I420 ; if (! _y4m -> vpx_fmt ) { fprintf ( stderr, ""Error <S2SV_blank> parsing <S2SV_blank> video <S2SV_blank> interlacing <S2SV_blank> format; <S2SV_blank> "" ""assuming <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; return - 1 ; } if ( _y4m -> interlace == '?' ) { fprintf ( stderr, ""Warning: <S2SV_blank> Input <S2SV_blank> video <S2SV_blank> interlacing <S2SV_blank> format <S2SV_blank> unknown; <S2SV_blank> "" ""assuming <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; return - 1 ; } else { if ( _y4m -> interlace == 'p' ) { fprintf ( stderr, ""Warning: <S2SV_blank> Input <S2SV_blank> video <S2SV_blank> interlacing <S2SV_blank> format <S2SV_blank> unknown; <S2SV_blank> "" ""assuming <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; return - 1 ; } _y4m -> vpx_fmt = VPX_IMG_FMT",0
1540,"<S2SV_ModStart> obj * otmp ; if ( strlen ( buf ) >= 60 ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } otmp",0
1541,"<S2SV_ModStart> { long long directory_table_start <S2SV_ModEnd>, table_start ; <S2SV_ModStart> 0 ) return TRUE <S2SV_ModEnd> ; if ( <S2SV_ModStart> FALSE ) return TRUE <S2SV_ModEnd> ; if ( <S2SV_ModStart> FALSE ) return TRUE <S2SV_ModEnd> ; if ( <S2SV_ModStart> FALSE ) return TRUE <S2SV_ModEnd> ; if ( <S2SV_ModStart> read_exports_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( sBlk. s. xattr_id_table_",0
1542,"<S2SV_ModStart> rule * rule, const struct envnode * * root <S2SV_ModStart> = 0 ; if ( rule -> options & KEEPENV ) { extern char * * environ ; size_t i ; <S2SV_ModStart> ; } } root = createnode ( '\\0', NULL ) ; if ( RB_INSERT ( envtree, & env -> root, root ) ) { freenode ( root ) ; } else { env -> count ++ ; } } else if ( rule -> options & KEEPENV ) { const char * e ; eq = strchr ( e, '=' ) ; if ( eq == NULL ) continue ; len = eq - e ; if ( len > sizeof ( keybuf ) - 1 ) continue ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf, eq + 1 ) ; if ( RB_INSERT ( envtree, & env -> root, node ) ) { freenode ( node ) ; } else { env -> count ++ ; } }",0
1543,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,0
1544,"<S2SV_ModStart> -> seg ; vpx_clear_system_state ( ) ; vp9_clear_segmentation ( seg ) ; vp9_clearall_segfeatures ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> frame_type, cm -> base_qindex, cm -> in_frame_q_adj_ratio [ segment ] ) ; vp9_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> frame_type, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vp9_enable_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ;",0
1545,"<S2SV_ModStart> ; Module_type = make_type ( ""Module"", mod_type, Module_fields, 1 ) ; if (! Module_type ) return 0 ; <S2SV_ModStart> ; Interactive_type = make_type ( ""Interactive"", mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; FunctionDef_type = make_type ( ""FunctionDef"", stmt_type, FunctionDef_fields, 5 ) ; if (! FunctionDef_type ) return 0 ; AsyncFunctionDef_type = make_type ( ""AsyncFunctionDef"", stmt_type, AsyncFunctionDef_fields, 5 ) ; if (! AsyncFunctionDef_type ) return 0 ; ClassDef_type = make_type ( ""ClassDef"", stmt_type, ClassDef_fields, 5 ) ; if (! ClassDef_type )",0
1546,"<S2SV_ModStart> O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IWGRP | S_IROTH <S2SV_ModEnd> ) ; if <S2SV_ModStart> } write ( logfile_fd <S2SV_ModEnd>, ""btsnoop\\0\\0\\0\\0\\1\\0\\0\\x3\\xea"",",0
1547,<S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 4 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> ; break ; } while ( context -> pass > 0 && context -> pass < 4 && context -> curY >= p -> height ) { switch ( ++ context -> pass ) { case 2 : context -> curY = i -> posY + 4 ; break ; case 3 : context -> curY = i -> posY + 2 ; break ; case 4 : context -> curY = i -> posY + 1 ; break ; },1
1548,<S2SV_ModStart> ) ; } ++ x -> ymode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ;,0
1549,"<S2SV_ModStart> ) ; } smb_ofile_flush <S2SV_ModEnd> ( sr, <S2SV_ModStart> f_mutex ) ; smb_ofile_flush <S2SV_ModEnd> ( sr,",1
1550,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> wchar_t <S2SV_ModEnd> * pwcs ) <S2SV_ModStart> len > 0 && op!= NULL <S2SV_ModStart> - EINVAL ; if ( len < size ) return - EINVAL ; <S2SV_ModStart> PLANE_SIZE ) { if ( len < size ) return - EINVAL ; <S2SV_ModStart> -= PLANE_SIZE ; if ( len < size ) return - EINVAL ; <S2SV_ModStart> SURROGATE_PAIR | SURROGATE_LOW <S2SV_ModEnd> | <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1551,"<S2SV_ModStart> ; if ( * cp == '\\0' || <S2SV_ModEnd> strchr ( cp <S2SV_ModStart> )!= NULL || <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> ( cp, ""."" ) == 0 || strcmp ( cp, <S2SV_ModStart> ) == 0 <S2SV_ModEnd> ) { run_err",1
1552,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart> * s, * t, * StartClean <S2SV_ModEnd> ; char * <S2SV_ModStart> * t, * StartClean <S2SV_ModEnd> ; SetDefaults ( <S2SV_ModStart> = 0 ; outpos = outputbuffer ; outpos += sprintf ( outpos, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", s, t, TERMCHAR ) ; if ( * s == '0' && s [ 1 ] == ']' ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; } else { fprintf ( outfile, ""%s"", outputbuffer ) ; return ( 0 ) ; } } else { fprintf ( stderr, ""%s: <S2SV_blank> Illegal <S2SV_blank> request <S2SV_blank> in <S2SV_blank> identification <S2SV_blank> string <S2SV_blank> [0]: <S2SV_blank> %s\\n"", axohelp, nameobject ) ; if ( strcmp ( nameobject, ""Curve"" ) == 0 ) { if ( ( argbuf = ReadArray ( t, & num1,",0
1553,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : * ( size_t * ) val = ms -> elf_notes_max ; return 0 ;,1
1554,"<S2SV_ModStart> segs ) { <S2SV_ModEnd> u32 hash, <S2SV_ModStart>, id ; if ( unlikely ( siphash_key_is_zero ( & net -> ipv4. ip_id_key ) ) ) get_random_bytes ( & net -> ipv4. ip_id_key <S2SV_ModEnd>, sizeof ( <S2SV_ModStart>, sizeof ( net -> ipv4. ip_id_key <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ; hash = siphash_3u32 <S2SV_ModEnd> ( ( __force <S2SV_ModStart> iph -> protocol, & net -> ipv4. ip_id_key <S2SV_ModEnd> ) ; id",1
1555,"<S2SV_ModStart> expr_ty step ; int lookup_attr_id <S2SV_ModEnd> ; if ( <S2SV_ModStart>, & PyId_lower, & lookup_attr_id ) ) { int res ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> obj, & PyId_upper, & lookup_attr_id ) ) { int res ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( lookup_attr_id ( obj, & PyId_step, & lookup_attr_id ) ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { step = NULL ; } if ( lookup_attr_id ( obj, & PyId_dims, & lookup_attr_id ) ) { int res ; res = obj2",0
1556,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
1557,"<S2SV_ModStart> ctl -> pw, "".chfn""",1
1558,<S2SV_ModStart> { if ( max_length < sizeof ( struct ieee80211_radiotap_header ) ) return - EINVAL ; if ( <S2SV_ModStart> iterator -> _rtheader + sizeof ( uint32_t ),1
1559,"<S2SV_ModStart> int err ; memset ( extack, 0, sizeof ( * extack ) ) ; <S2SV_ModStart> extack ) ) return - EINVAL <S2SV_ModEnd> ; tos_off = <S2SV_ModStart> ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; nfp_abm_u32_knode_delete ( alink, knode ) ; <S2SV_ModStart> err_delete ; } list_for_each_entry_safe ( iter, iter -> list, & alink -> dscp_map, list ) { u32 cmask ; if ( ( iter -> val & cmask ) == ( val & cmask ) && iter -> band!= knode -> res -> classid ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } }",0
1560,<S2SV_ModStart> NULL ; } dst_state -> speculative = src -> speculative ;,1
1561,"<S2SV_ModStart> return ; } if ( input <= 0.0 || output <= 0.0 ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Gamma <S2SV_blank> values <S2SV_blank> should <S2SV_blank> be <S2SV_blank> positive"" ) ; RETURN_FALSE ; }",1
1562,"<S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; } if ( global -> pass == 2 ) { if (! stats_open_file ( & stream -> stats, stream -> config. stats_fn, pass ) ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; } else { stream -> config. cfg. g_pass = pass? VPX_RC_ONE_PASS : VPX_RC_LAST_PASS ; } if ( pass ) { if (! stats_open_mem ( & stream -> stats, pass ) ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; } <S2SV_ModEnd> stream -> cx_time <S2SV_ModStart> = 0 ; <S2SV_ModEnd> stream -> nbytes",0
1563,<S2SV_ModStart> -> lun ) sas_eh_finish_cmd <S2SV_ModEnd> ( cmd ),1
1564,"<S2SV_ModStart> if (! g_key_file_get_contents ( keyfile, tmpfile_name, & new_data_len, error ) ) goto out ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s.tmp"", tmpfile_name ) ; g_autoptr ( GString ) new_exec = g_strdup_printf ( ""%s.exec"", tmpfile_name ) ; g_autoptr ( GString ) groups = NULL ; g_auto ( GStrv ) new_argv = g_strv_new ( ) ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, data, data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, data, data_len, error ) ) goto out ; g_key_file_free ( keyfile )",0
1565,"<S2SV_ModStart> { VP9_COMMON * const cm = & pbi -> common ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = 1 << cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; assert ( tile_rows <= 4 ) ; assert ( tile_cols <= ( 1 << 6 ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> tile_row ) { for ( tile_col = 0 ; tile_col < tile_cols ; ++ tile_col ) { const int last_tile = tile_row == tile_rows - 1 && tile_col == tile_cols - 1 ; const size_t size = get_tile ( data_end, last_tile, & cm -> error, & data ) ;",0
1566,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> VP9Decoder <S2SV_ModEnd> * vp9_decoder_create ( <S2SV_ModStart> * oxcf ) { VP9Decoder * const pbi = vpx_allocate ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ) ) ; const VP9_COMMON * const cm = pbi? & pbi -> common : NULL ; if (! pbi ) return NULL ; vpx_zero ( * pbi ) ; if ( setjmp ( cm -> error. jmp ) ) { cm -> error. setjmp = 1 ; vp9_decoder_remove ( pbi ) ; return NULL ; } cm -> error. setjmp = 1 ; vpx_memset ( & pbi -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; cm -> oxcf = * oxcf ; pbi -> ready_for_new_data = 1 ; cm -> decoded_key_frame = 0 ; vp9_init_dequantizer ( cm ) ; cm -> error. setjmp = 0 ; return pbi ; }",0
1567,"<S2SV_ModStart> { GF_LOG ( GF_LOG_ERROR <S2SV_ModEnd>, GF_LOG_CONTAINER, <S2SV_ModStart> ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; return GF_NON_COMPLIANT_DREF ; } if (! ( ( GF_DataInformationBox * ) s ) -> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; return GF_NON_COMPLIANT_DREF ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } return GF_NON_COMPLIANT_DREF <S2SV_ModEnd> ; } <S2SV_null>",0
1568,<S2SV_ModStart> channel ) ; <S2SV_ModEnd> client -> priv,0
1569,<S2SV_ModStart> -> count ; new_fpl -> user = get_uid ( fpl -> user ) ;,1
1570,<S2SV_ModStart> req ) { <S2SV_ModEnd> struct inet_request_sock * <S2SV_ModStart> ; if ( inet_rsk ( req ) -> inet_opt <S2SV_ModEnd> == NULL || <S2SV_ModStart> == NULL || inet_rsk ( req ) -> inet_opt <S2SV_ModEnd> == 0 ),0
1571,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> tree2tok ( struct <S2SV_ModStart> { const vpx_tree_index <S2SV_ModEnd> j = tree <S2SV_ModStart> i ++ ] ; if ( j <= 0 ) { tokens [ - j ]. value = v ; tokens [ - j ]. len = l ; break ; } <S2SV_ModEnd> } while (,0
1572,<S2SV_ModStart> = VPX_CODEC_OK ; # if CONFIG_VP9_HIGHBITDEPTH if ( ( flags & VP8_EFLAG_NO_REF_LAST ) && ( flags & VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP9_ALT_FLAG ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP9_ALT_FLAG ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_,0
1573,"<S2SV_ModStart> wqh ) ; init_waitqueue_func_entry ( & ctx -> wqh, _timerfd_wake ) ;",0
1574,"<S2SV_ModStart> ) ; struct mnt_namespace * ns = dest_mnt -> mnt_ns ; struct <S2SV_ModStart> ; if (! parent_path ) { err = invent_group_ids ( source_mnt, true ) ; if ( err ) goto out ; <S2SV_ModStart> goto out ; } if ( IS_MNT_SHARED ( dest_mnt ) ) { err = propagate_mnt ( dest_mnt, dest_mp, source_mnt, & tree_list ) ; if ( err ) goto out_cleanup_ids ; for ( p = source_mnt ; p ; p = next_mnt ( p, source_mnt ) ) set_mnt_shared ( p ) ; } else { lock_mount_hash ( ) ; } if ( parent_path ) { detach_mnt ( source_mnt, parent_path ) ; touch_mnt_namespace ( source_mnt -> mnt_ns ) ; } else { mnt_set_mountpoint ( dest_mnt, dest_mp, source_mnt ) ; commit_tree ( child, ns ) ; } hlist_for_each_entry_safe ( child, n, & tree_list, mnt_hash ) { struct",0
1575,"<S2SV_ModStart>, & len, 0",1
1576,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = pair_set_epi16 ( cospi_1_32, - cospi_1_32 ) ; const __m128i k__cospi_p05_p43 = pair_set_epi16 ( cospi_5_32, - cospi_27_32 ) ; const __m128i k__cospi_p43_m43 = pair_set_epi16 ( cospi_5_32, - cospi_27_32 ) ; const __m128i k__cospi_p23_m09 = pair_set_epi16 ( cospi_23_64, - cospi_9_64 ) ; const __m128i k__cospi_p17_p15 = pair_set_epi16 ( cospi_17_64, - cospi_15_64 ) ; const __m128i k__cospi_p17_m17 = pair_set_epi16 ( cospi_17_64, - cospi_17_64 ) ; const __m128i k__cospi_p",0
1577,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> frame_max_bits ( const <S2SV_ModStart> ) rc -> avg_frame_bandwidth <S2SV_ModEnd> * ( int64_t,0
1578,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
1579,"<S2SV_ModStart> byte * fout, int maxbuf <S2SV_ModStart> NULL ) { if ( maxbuf < 1 ) { return ; } <S2SV_ModStart> NYT, fout, maxbuf",0
1580,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_superblock ( VP9_COMP <S2SV_ModStart> * cpi, MACROBLOCK * const x, <S2SV_ModStart> BLOCK_SIZE bsize ) { <S2SV_ModEnd> VP9_COMMON * const <S2SV_ModStart> -> common ; MACROBLOCKD * const xd = & x -> e_mbd ; <S2SV_ModStart> x = & x -> <S2SV_ModEnd> e_mbd ; MODE_INFO <S2SV_ModStart> mbmi ; PICK_MODE_CONTEXT * ctx = get_block_context ( x, bsize ) ; x -> skip_optimize = ctx -> is_coded ; ctx -> is_coded = 1 ; x -> use_lp32x32fdct = cpi -> sf. use_lp32x32fdct ; if ( x -> skip_encode ) return ; if ( cm -> frame_type == KEY_FRAME ) { if ( cpi -> oxcf. tuning == VP8_TUNE_SSIM ) { adjust_act_zbin_extra ( cpi, x ) ; } else { set_ref_ptrs ( cm, xd, x -> ref_frame [ 0 ], x -> ref_frame [ 1 ]",0
1581,"<S2SV_ModStart> iad_num ++ ; if ( buffer [ len - USB_DT_CONFIG_SIZE ]!= '\\0' ) { dev_err ( ddev, ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d\\n"", cfgidx ) ; return - EINVAL ; } <S2SV_ModStart> iad_num ++ ; if ( buffer [ len - USB_DT_CONFIG_SIZE ]!= '\\0' ) { dev_err ( ddev, ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d\\n"", cfgidx ) ; return - EINVAL ; }",0
1582,"<S2SV_ModStart> key ) { <S2SV_ModEnd> unsigned char key2 <S2SV_ModStart> ] ; struct crypto_cipher * tfm_des <S2SV_ModEnd> ; str_to_key ( <S2SV_ModStart> ; tfm_des = crypto_alloc_cipher ( ""des"" <S2SV_ModEnd>, 0, <S2SV_ModStart>, 0, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) ) { <S2SV_ModEnd> cifs_dbg ( VFS <S2SV_ModStart> ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; return PTR_ERR ( tfm_des ) ; } crypto_cipher_setkey <S2SV_ModEnd> ( tfm_des, <S2SV_ModStart> 8 ) ; crypto_cipher_encrypt_one ( tfm_des, out, in ) ; crypto_free_cipher <S2SV_ModEnd> ( tfm_des ) <S2SV_ModStart> tfm_des ) ; return 0 <S2SV_ModEnd> ; } <S2SV_null>",1
1583,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1584,"<S2SV_ModStart> { uint32_t value ; int position, zeroes, i, j ; char bits [ 65 ] ; if ( ctx -> trace_enable ) position = get_bits_count ( gbc ) ; if ( position < 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( ctx -> trace_enable ) position = get_bits_count (",0
1585,<S2SV_ModStart> i > pos + delta <S2SV_ModStart> off + 1 <= pos + delta <S2SV_ModEnd> ) insn ->,1
1586,<S2SV_ModStart> case EXIT_REASON_INVEPT : case EXIT_REASON_INVVPID :,1
1587,"<S2SV_ModStart> else if ( ISALNUM ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( <S2SV_ModStart> else if ( ISALNUM ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( ISALPHA ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( ISALPHA ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( ISALPHA ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c",0
1588,"<S2SV_ModStart> = 0, packet -> http_content_len. ptr = NULL, packet -> http_content_len. len = 0, packet ->",0
1589,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
1590,"<S2SV_ModStart> ++ r ; if <S2SV_ModEnd> ( pow ( <S2SV_ModStart> dim ) > entries ) { r = ( int ) floor ( pow ( ( float ) r + 1, dim ) ) ; } else { assert ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; } <S2SV_ModEnd> return r ;",0
1591,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> x ), MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> ; } } return <S2SV_ModStart> dds_info, 8, exception",0
1592,"<S2SV_ModStart> == 5 ) goto inhdr_error ; if ( IPCB ( skb ) -> flags & IPSKB_DOREDIRECT ) goto drop ; if ( ip_options_compile ( dev_net ( dev ), & opt -> opt, skb ) ) goto inhdr_error ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( unlikely ( opt -> optlen ) ) { opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( opt -> optlen ) opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( opt -> optlen ) opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; } else { opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; } if ( unlikely ( opt ->",0
1593,"<S2SV_ModStart> ; } } if ( hkey. type == HASH_KEY_IS_LONG &&! zend_hash_index_exists ( params, hkey. num ) ) { zval tmp ; Z_ADDREF_PP ( tmp ) ; Z_ZVAL ( tmp ) ; array_init ( tmp ) ; add_assoc_zval_ex ( tmp, ZEND_STRS ( ""value"" ), * ptr ) ; Z_ADDREF_PP ( tmp ) ; zval_init ( tmp ) ; zend_hash_update ( Z_ARRVAL_P ( tmp ), ""arguments"", sizeof ( ""arguments"" ), ( void * ) & args ) ; * current_param = tmp ; } else if ( hkey. type == HASH_KEY_IS_LONG &&! zend_hash_index_exists ( params, hkey. num ) ) { zval tmp ; Z_ADDREF_PP ( tmp ) ; Z_ADDREF_PP ( tmp ) ; Z_ZVAL ( tmp ) ; array_init ( tmp ) ; Z_ADDREF_PP ( tmp ) ; Z_ADDREF_PP ( tmp ) ; Z_ADDREF_PP (",0
1594,"<S2SV_ModStart> { int ret ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ) <S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) )",0
1595,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
1596,"<S2SV_ModStart> cfg ) { struct stat st ; FILE * file = NULL ; int fd = - 1 ; <S2SV_ModStart> } else { fd = open ( filename, O_WRONLY | O_APPEND | O_CLOEXEC | O_NOFOLLOW | O_NOCTTY ) ; if ( fd < 0 ) { fprintf ( stderr, ""Can\'t <S2SV_blank> open <S2SV_blank> %s\\n"", filename ) ; exit ( EXIT_FAILURE ) ; } if ( file == NULL ) { fprintf ( stderr, ""Error <S2SV_blank> opening <S2SV_blank> %s\\n"", filename ) ; exit ( EXIT_FAILURE ) ; } else { fd = open ( filename, O_WRONLY | O_APPEND | O_CLOEXEC | O_NOCTTY ) ; if ( fd < 0 ) { fprintf ( stderr, ""Can\'t <S2SV_blank> open <S2SV_blank> %s\\n"", filename ) ; exit ( EXIT_FAILURE ) ; } } if ( file == NULL ) { fprintf ( stderr, ""Error <S2SV_blank> opening <S2SV_blank> %s\\n"", filename ) ; exit ( EXIT_FAILURE <S2SV_ModEnd> ) ; }",0
1597,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! f2fs_readonly (,1
1598,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart> ( size_t ) MagickMax ( <S2SV_ModStart>. length, bytes_per_line * sun_info. width ) ; if ( bytes_per_line * sun_info. height > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
1599,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; sendClean ( outputbuffer ) ;",1
1600,<S2SV_ModStart> return FALSE ; <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1601,<S2SV_ModStart> user ) { cleanup_srcu_struct ( & user -> release_barrier ) ;,0
1602,"<S2SV_ModStart>, <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
1603,<S2SV_ModStart> == ARPHRD_ETHER ) { <S2SV_ModStart> ether_setup ) ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; },1
1604,"<S2SV_ModStart> * data ; struct stream packet = * s ; <S2SV_ModStart> ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } if (",1
1605,"<S2SV_ModStart> -> b_multithreaded_rd ) vpx_de_alloc_temp_buffers <S2SV_ModEnd> ( pbi,",0
1606,<S2SV_ModStart> ; l -> lineBuf [ n ] = '\\0' ; if ( l -> lineBuf [ n ]!= '\\0' ) { if ( l -> lineBuf [ n ]!= '\\0' ) { if ( l -> lineBuf [ n ]!= '\\0' ) { if ( l -> lineBuf [ n ]!= '\\0' ) { if ( l -> lineBuf [ n ]!= '\\0' ) { if ( l -> lineBuf [ n ]!= '\\0' ) { if ( l -> lineBuf [ n ]!= '\\0' ) { if ( l -> lineBuf [ n ]!= '\\0' ) { if ( l -> lineBuf [ n ]!= '\\0' ) { if ( l -> lineBuf [ n ]!= '\\0' ) { if ( l -> lineBuf [ n ]!= '\\0' ) { if ( l -> lineBuf [ n ]!= '\\0' ) { if ( l -> lineBuf [ n ]!= '\\0' ) { if ( l -> lineBuf [ n ]!= '\\0' ) { if ( l -> lineBuf [ n ]!= '\\0' ) { if ( l -> lineBuf [ n ]!= '\\0' ) {,0
1607,<S2SV_ModStart> { if ( ( <S2SV_ModStart> > 0 ) && ( ( xWantedSize + xHeapStructSize ) > xWantedSize ) <S2SV_ModStart> 0x00 ) { if ( ( xWantedSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) > xWantedSize ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } } else { mtCOVERAGE_TEST_MARKER ( ) ; } } if ( ( xWantedSize > 0 ) && ( xWantedSize + xHeapStructSize ) > xWantedSize ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWant,0
1608,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1609,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1610,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpDiff ( TIFF <S2SV_ModStart> cc ) ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> stride ) )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""fpDiff"", ""%s"", ""(cc%(bps*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> tmp ) return 0 <S2SV_ModStart> cp -- ) return 1 ;",1
1611,"<S2SV_ModStart> { uint16 num_updates = 0 <S2SV_ModStart> int i ; if (! s_check_rem ( s, 2, 4 ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> [%d,%d,%d], <S2SV_blank> [%d,%d], <S2SV_blank> bpp=%d, <S2SV_blank> compression=%d"", left, top, right, bottom, width, height, Bpp, compress ) ; num_updates ++ ; } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s, 4, 4, s ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> [0,0,0], <S2SV_blank> [0,0], <S2SV_blank> [0,0], <S2SV_blank> [0,0], <S2SV_blank> bpp=%d, <S2SV_blank> compression=%d"", left, top, right, bottom, width, height, Bpp, compress ) ; in_uint16_le ( s, bpp ) ; Bpp = ( bpp + 7 ) / 8 ; } if ( compress & 0x400 ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> [%d,%d,%d], <S2SV_blank> [%d,%d], <S2SV_blank>",0
1612,"<S2SV_ModStart> valuelen ) ; if (! context -> put_listent ) { error = context -> put_listent ( context, sfe -> flags, sfe -> nameval, ( int ) sfe -> namelen, ( int ) sfe -> valuelen, & sfe -> nameval [ sfe -> namelen ] ) ; if ( context -> seen_enough ) break ; if ( error ) return error ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; } if (! context -> put_listent ) { error = context -> put_listent ( context, sfe -> flags, sfe -> nameval, ( int ) sfe -> namelen, ( int ) sfe -> valuelen, & sfe -> nameval [ sfe -> namelen ] ) ; if ( context -> seen_enough ) break ; if ( error ) return error ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; } if ( context -> put_listent ( context, sfe -> flags, sfe -> nameval, ( int ) sfe -> namelen, ( int ) sfe ->",0
1613,<S2SV_ModStart> = 0 ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) { goto trunc ; } <S2SV_ModStart> struct olsr_msg4 ) ) ; if ( msg_len < sizeof ( struct olsr_msg6 ) ) { goto trunc ; },0
1614,"<S2SV_ModStart> out ) { <S2SV_ModEnd> uint16 bitspersample, <S2SV_ModStart> samplesperpixel ; uint16 <S2SV_ModEnd> input_compression, input_photometric <S2SV_ModStart> input_compression, input_photometric ; uint32 width, length ; uint16 bitspersample = TIFFGetFieldDefaulted ( in, TIFFTAG_BITSPERSAMPLE, & bitspersample ) ; uint32 length = TIFFGetFieldDefaulted ( in, TIFFTAG_IMAGELENGTH, & length ) ; CopyField ( TIFFTAG_BITSPERSAMPLE, bitspersample ) ; CopyField ( TIFFTAG_SAMPLESPERPIXELEL, samplesperpixel ) ; if ( bitspersample!= ( uint16 ) - 1 ) { TIFFSetField ( out, TIFFTAG_BITSPERSAMPLE, bitspersample ) ; TIFFSetField ( out, TIFFTAG_BITSPERSAMPLE, bitspersample ) ; TIFFSetField ( out, TIFFTAG_BITSPERSAMPLE, samplesperpixel ) ; } else if ( bitspersample == ( uint16 ) - 1 ) { TIFFSetField ( out, TIFFTAG_BITSPERSAMPLE, samplesperpixel ) ; TIFFSetField ( out, TIFFTAG_BITSPERSAMPLE, bitspersample )",0
1615,"<S2SV_ModStart> } else { if (! smatch ( option, ""filename"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Missing <S2SV_blank> filename"" ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = maGetNextArg ( option, & tok ) ; <S2SV_ModEnd> ovalue = strim <S2SV_ModStart> ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if ( smatch ( option, ""anew"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""stamp"" ) ) { stamp = ( MprTicks ) atoi ( ovalue ) ; } else if ( smatch ( option, ""path"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Path <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" ) ; return MPR_ERR_BAD_SYNTAX ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Path <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" ) ; return MPR",0
1616,"<S2SV_ModStart> tx_size, vpx_coeff_stats <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model <S2SV_ModEnd> * coef_probs = <S2SV_ModStart> -> frame_coef_probs [ tx_size ] ; vpx_coeff_count * coef_counts = cpi -> coef_counts [ tx_size ] ; vpx_tree_probs_from_distribution ( vp9_coef_tree, coef_branch_ct [ i ] [ j ] [ k ] [ l ] - coef_branch_ct [ i ] [ j ] [ k ] [ 0 ]",0
1617,"<S2SV_ModStart> { } ; struct termios old = tcgetattr ( fd, TCSANOW ) ; if ( old < 0 ) return log_warning_errno ( errno, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; r = tcsetattr ( fd, TCSANOW, & old ) ; if ( r < 0 ) return log_warning_errno ( errno, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; tcputattr ( fd, TCSANOW, & tc ) ; if ( r < 0 ) return log_warning_errno ( errno, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; r = tcsetattr ( fd, TCSANOW, & tc ) ; if ( r < 0 ) return log_warning_errno ( errno, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s:",0
1618,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x80 ; state -> data [ 2 ] = 0 ; if ( dvb_usb_generic_rw ( d, state -> data, 3, state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x83 ; state -> data [ 2 ] = 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; state -> data [ 1 ] = 0x83 ; state -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 2 ] = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_",0
1619,<S2SV_ModStart> filp ) { struct user_struct * user = file_inode ( filp ) ; if (! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) ) user = get_current_user ( ) ; if (! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) ) user = NULL ; unlock_user ( user ) ;,0
1620,"<S2SV_ModStart> * iface, <S2SV_ModEnd> vpx_codec_flags_t flags, <S2SV_ModStart> ( flags & ( VPX_CODEC_USE_XMA | VPX_CODEC_USE_PSNR | VPX_CODEC_USE_OUTPUT_PARTITION ) ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAP",0
1621,"<S2SV_ModStart> int stride, <S2SV_ModEnd> int mv_row, <S2SV_ModStart> const kernel = vp9_get_interp_kernel ( xd -> plane [ 0 ] -> mbmi. interp_filter ) ; enum mv_precision mv_precision ; int uv_stride ; if ( uv_block_size == 8 ) { uv_stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q4 ; } else { uv_stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q3 ; } vpx_build_inter_predictor ( y_mb_ptr, stride, & pred [ 0 ], 16, 16, 16, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vpx_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, mv_precision_uv, x, y ) ; vpx_build_inter_predictor ( v_mb_ptr, uv_stride, &",0
1622,"<S2SV_ModStart> = TRUE ; if ( strlen ( buf ) >= BUFSZ ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } if ( strchr ( buf,'<S2SV_blank>') ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { bufp = find_optparam ( origbuf ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { bufp = find_optparam ( origbuf ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( *",0
1623,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> cJSON * cJSON_CreateFloatArray ( <S2SV_ModEnd> double * numbers <S2SV_ModStart> count ) { if ( a ) { <S2SV_ModStart> = cJSON_CreateFloat ( ( double ) <S2SV_ModStart> i ] ) ; } else n = cJSON_CreateFloat ( numbers [ i ] ) ; if (! a ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } return a ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1624,"<S2SV_ModStart> tk_status ) ; if ( status == NLM_LCK_DENIED_GRACE_PERIOD ) { rpc_delay ( task, NLMCLNT_GRACE_WAIT ) ; goto retry_unlock ; } if ( status == NLM_LCK_GRANTED ) printk ( KERN_WARNING ""lockd: <S2SV_blank> unexpected <S2SV_blank> unlock <S2SV_blank> status: <S2SV_blank> %d\\n"", status ) ;",0
1625,"<S2SV_ModStart> ; unsigned int entries_count <S2SV_ModEnd> ; bh = <S2SV_ModStart> ibh ) { entries_count = udf_read_ptagged ( inode -> i_sb, & iinfo -> i_location, 0, & ident ) ; if ( entries_count > 1 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> inode\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( entries_count > 1 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> inode\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( entries_count > 1 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> inode\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( entries_count > 1 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> inode\\n"", inode -> i_ino ) ; make_bad",0
1626,"<S2SV_ModStart>, n ) ; if ( w == NULL ) return 0",1
1627,"<S2SV_ModStart> 4 ) ; if ( idx + 4 > len ) return NULL ; <S2SV_ModStart> ]. len ) ; CHECKINT32 ( idx, len ) ; a -> properties = CHECKED_XMALLOC ( uint32, num_properties ) ; for ( j = 0 ; j < ( a -> properties [ i ]. len >> 1 ) ; j ++ ) a -> properties [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> properties [ i ]. len ) ; j ++ ) a -> properties [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> properties [ i ]. len ) ; } } else { size_t i ; a -> properties = CHECKED_XCALLOC ( VarLenData, a -> num_names ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> names [ i ]. data = CHECKED_XMALLOC ( unsigned char, a -> names [ i ]. len ) ; for ( j = 0 ; j < a ->",0
1628,"<S2SV_ModStart> data_end ) { const VP9EncoderConfig * const cm = & pbi -> oxcf ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int num_workers = MIN ( pbi -> oxcf. max_threads & ~ 1, tile_cols ) ; TileBuffer tile_buffers [ 1 << 6 ] ; int n ; int final_worker = - 1 ; assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_rows <= ( 1 << 6 ) ) ; assert ( tile_rows <= ( 1 << 6 ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) { VP9Worker * const worker = & pbi -> tile_workers [ i ] ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data2, vpx_memalign ( 32, sizeof ( TileInfo ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData )",0
1629,"<S2SV_ModStart> * 0x101 ; # ifdef LIBRAW_LIBRARY_BUILD if ( fgetc ( ifp ) - 'L' ) return ; # endif <S2SV_ModStart> ( ) ; # ifdef LIBRAW_LIBRARY_BUILD if ( model == ""DSLR-A100"" ) { fseek ( ifp, 8, SEEK_CUR ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 1 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 3 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 4 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 5 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 6 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungst",0
1630,"<S2SV_ModStart> err = - EINVAL ; if ( type == PACKET_FANOUT_HASH ) goto out ; if ( type == PACKET_FANOUT_LB || type == PACKET_FANOUT_CPU : case PACKET_FANOUT_RND : case PACKET_FANOUT_QM : case PACKET_FANOUT_CBPF : case PACKET_FANOUT_EBPF : return - EINVAL ; if ( ( type_flags & PACKET_FANOUT_FLAG_ROLLOVER ) && ( type == PACKET_FANOUT_HASH ) ) { err = - EINVAL ; goto out ; } rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if (! rollover ) goto out ; atomic_long_set ( & rollover -> num, 0 ) ; atomic_long_set ( & rollover -> num_failed, 0 ) ; po -> rollover = rollover ; }",0
1631,"<S2SV_ModStart> -> common ; vpx_clear_system_state ( ) ; const int seg_id = SEGMENT_ID ( cm -> frame_type ) ; const double base_q = vp9_convert_qindex_to_q ( cm -> base_qindex ) ; const int base_rdmult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + cm -> y_dc_delta_q ) ; for ( i = ENERGY_MIN ; i <= ENERGY_MAX ; i ++ ) { int qindex_delta, segment_rdmult ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_",0
1632,<S2SV_ModStart> ; if ( protocol < 0 || protocol > AX25_MAX_PROTOCOL ) return - EINVAL ; if (,0
1633,"<S2SV_ModStart> ( void ) TIFFGetFieldDefaulted <S2SV_ModEnd> ( in,",1
1634,<S2SV_ModStart> -> error_code ) { <S2SV_ModStart> -> has_detail? ( void * ) <S2SV_ModStart> error -> detail : NULL ; } else { ctx -> base. err_detail = NULL ; },0
1635,<S2SV_ModStart> [ i ] && j < sizeof ( buf ),0
1636,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1637,"<S2SV_ModStart> ""corrupt <S2SV_blank> BSON"" ) ; VALIDATE_TEST ( ""test59.bson"", BSON_VALIDATE_NONE, 9, BSON_VALIDATE_NONE, ""corrupt <S2SV_blank> BSON"" ) ;",1
1638,"<S2SV_ModStart> pmu_constraints ) ; if ( cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERFMON ) ) { if ( cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERFMON ) ) x86_pmu. intel_cap. capabilities |= PERF_CAP_IA32_PERF ; else x86_pmu. intel_cap. capabilities |= PERF_CAP_IA32_PERF ; } else if ( version == 2 ) { if ( cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERFMON ) ) { if ( cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERFMON ) ) x86_pmu. intel_cap. capabilities |= PERF_CAP_IA32_PERF ; } else { u32 capabilities ; if ( x86_pmu. intel_cap. capabilities & PERF_CAP_IA32_PERF_CAPABILITIES ) x86_pmu. intel_cap. capabilities |= PERF_CAP_IA32_",0
1639,"<S2SV_ModStart> * ps_cur_slice ; pocstruct_t * ps_prev_poc, * ps_cur_poc ; memset ( ps_dec -> ps_cur_poc, 0, sizeof ( pocstruct_t ) )",0
1640,<S2SV_ModStart> ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { ret = - EPERM ; goto out_unlock ; } } } } else { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { ret = - EPERM ; goto out_unlock ; } } } } },0
1641,"<S2SV_ModStart> = 0 ; size_t data_size ; <S2SV_ModStart> err ) ; data_size = n_key_data ; if ( key_data_in == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]. key_data_ver = 2 ; key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_contents [ 1 ] = NULL ; } } for ( i = 0 ; i < n_key_data - 1 ; i ++ ) if ( key_data [ i ]. key_data_kvno!= key_data [ i + 1 ]. key_data_kvno ) num_versions ++ ; ret [ j ] = k5alloc ( data_size,",0
1642,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> congest_packet ) ) ),0
1643,<S2SV_ModStart> ; if ( task -> ptrace &&,0
1644,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x80 ; state -> data [ 2 ] = 0 ; if ( dvb_usb_generic_rw ( d, state -> data, 3, state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x83 ; state -> data [ 2 ] = 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; state -> data [ 1 ] = 0x83 ; state -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 2 ] = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_",0
1645,<S2SV_ModStart> int getnum ( <S2SV_ModEnd> const char * <S2SV_ModStart> int df ) <S2SV_ModEnd> { int a <S2SV_ModStart> = 0 ; <S2SV_ModEnd> while ( isdigit,0
1646,"<S2SV_ModStart> survival, g -> old ) ; markold ( g, g -> allgc, g -> reallyold ) ; markold ( g, g -> finobj, g -> finobjrold ) ; atomic ( L ) ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival, g -> reallyold ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = * psurvival ; g -> reallyold = g -> old ; g -> allgc = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = g -> allgc ;",0
1647,"<S2SV_ModStart> = 0 ; else { ret = - EINVAL ; goto err ; } <S2SV_ModEnd> deb_info ( ""Identify <S2SV_blank> state <S2SV_blank> cold <S2SV_blank> = <S2SV_blank> %d\\n""",0
1648,"<S2SV_ModStart> { 'S' } <S2SV_ModEnd> ; if ( <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModEnd> memset ( buffer <S2SV_ModStart> buffer ) ; s_read <S2SV_ModEnd> ( c, <S2SV_ModStart> ( c, c -> local_rfd. fd, buffer, sizeof buffer ) ; if (! safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } s_write ( c, c -> local_wfd. fd, ssl_ok, sizeof ssl_ok ) ; return NULL ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1649,"<S2SV_ModStart> int cib_tls_signon ( struct sockaddr_in <S2SV_ModEnd> addr ; int <S2SV_ModStart> -> variant_opaque ; <S2SV_ModEnd> int rc = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> static struct mainloop_fd_callbacks <S2SV_ModStart> cib_fd_callbacks = { } ; connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } bzero ( & hints, sizeof ( struct addrinfo ) ) ; hints. ai_flags = AI_CANONNAME ; hints. ai_family = AF_INET ; hints. ai_socktype = SOCK_RAW ; if ( hints. ai_family == AF_INET6 ) { hints. ai_family = AF_INET6 ; } else { hints. ai_protocol = IPPROTO_",0
1650,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; cpi -> mb. ss = vpx_calloc ( sizeof ( search_site ), ( MAX_MVSEARCH_STEPS * 8 ) + 1 ) ; cpi -> common. last_coded_gf = 128 ; cpi -> common. gf_coded_gf = 128 ; cpi -> prob_last_coded = 128 ; cpi -> prob_gf_coded = 63 ; cpi -> prob_intra_coded = 63 ; cpi -> recent_ref_frame_usage [ LAST_FRAME ] = 1 ; cpi -> recent_ref_frame_usage [ GOLDEN_FRAME ] = 1 ; cpi -> common. ref_frame_sign_bias [ ALTREF_FRAME ] = 1 ; cpi -> common. ref_frame_sign_bias [ FIRST_FRAME ] = 1 ; cpi -> common. ref_frame_sign_bias [ LAST_FRAME ] = 1 ; cpi -> common. ref_frame_sign_bias [ GOLDEN_FRAME ] = 1 ; cpi -> common. ref_frame_sign_bias [ ALTREF_FRAME ]",0
1651,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
1652,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MIN, 1 <S2SV_ModEnd>, regs,",1
1653,"<S2SV_ModStart> [ i + 1 ] <S2SV_ModEnd> ; ND_TCHECK ( <S2SV_ModStart> ] & 0x80 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> rflag=%d"", bp [ i + 1 ] ) ) ; } if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag=%d"", bp [ i + 1 ] ) ) ; } if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> vflag=%d"", bp [ i + 1 ] ) ) ; } if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag=%d"", bp [ 24 ] & 0x08 ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag=%d"", bp [ 24 ] & 0x07 ) ) ; } if (",0
1654,"<S2SV_ModStart> ctx, expr -> unary. child",1
1655,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1656,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command <S2SV_ModStart> ( karg, <S2SV_ModEnd> & uarg ->",0
1657,"<S2SV_ModStart> Image * image <S2SV_ModEnd> ; MagickBooleanType status <S2SV_ModStart>, length, padding, value, version, width ; if ( image == ( Image * ) NULL ) { ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } <S2SV_ModEnd> status = SetImageExtent <S2SV_ModStart>, <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
1658,"<S2SV_ModStart> 1 ; } if (! jas_safe_size_mul3 ( siz -> width, siz -> height, & mainhdrlen ) ) { jas_eprintf ( ""width <S2SV_blank> too <S2SV_blank> large\\n"" ) ; return - 1 ; } if (! jas_safe_size_mul3 ( siz -> width, siz -> height, & mainhdrlen ) ) { jas_eprintf ( ""height <S2SV_blank> too <S2SV_blank> large\\n"" ) ; return - 1 ; } if (! jas_safe_size_mul3 ( siz -> width, siz -> height, & mainhdrlen ) ) { jas_eprintf ( ""width <S2SV_blank> too <S2SV_blank> large\\n"" ) ; return - 1 ; } if (! jas_safe_size_mul3 ( siz -> width, siz -> height, & mainhdrlen ) ) { jas_eprintf ( ""height <S2SV_blank> too <S2SV_blank> large\\n"" ) ; return - 1 ; }",0
1659,"<S2SV_ModStart> 0 ) { length = strlen ( str_mode ) + 1 ; if ( length > sizeof ( str_mode ) - 1 ) { length = sizeof ( str_mode ) - 1 ; if ( length > sizeof ( str_mode ) - 1 ) { ptr_arg = strndup ( str_mode, strlen ( str_mode ) - 1, NULL, WEECHAT_STRING_SPLIT_STRIP_LEFT | WEECHAT_STRING_SPLIT_STRIP_RIGHT | WEECHAT_STRING_SPLIT_COLLAPSE_SEPS, 0, & argc ) ; if (! argc ) return ; } } else { length = sizeof ( str_mode ) - 1 ; if ( length > sizeof ( str_mode ) - 1 ) { ptr_arg = strndup ( str_mode, strlen ( str_mode ) - 1, NULL, WEECHAT_STRING_SPLIT_STRIP_LEFT | WEECHAT_STRING_SPLIT_STRIP_RIGHT | WEECHAT_STRING_SPLIT_COLLAPSE_SEPS, 0, & argc ) ; if (! argc ) return ; }",0
1660,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> 1 ) ; vpx_reader <S2SV_ModEnd> ( r ) <S2SV_ModStart> v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> v = vpx_read_literal <S2SV_ModEnd> ( r,",0
1661,<S2SV_ModStart> ; int is_valid = ( error == GIT_OK ) <S2SV_ModStart> giterr_clear ( ) <S2SV_ModEnd> ; error =,1
1662,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
1663,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> frame_parallel_decoding_mode ) ++",0
1664,"<S2SV_ModStart> ; } } eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; switch ( action [ 0 ] ) { case 'i' : if ( cmd_cb ( core_ptr, ""ic"", NULL, 0 ) < 0 ) { send_msg ( g, ""E01"" ) ; return - 1 ; } return send_msg ( g, ""E01"" ) ; } <S2SV_ModStart> ; } } eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; switch ( action [ 0 ] ) { case 'i' : if ( cmd_cb ( core_ptr, ""ic"", NULL, 0 ) < 0 ) { send_msg ( g, ""E01"" ) ; return - 1 ; } return send_msg ( g, ""E01"" ) ; } eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; switch ( action [ 0 ] ) { case's' : if ( cmd_cb ( core_ptr, ""ds"", NULL, 0 ) < 0 ) { send_msg ( g, ""E01"" ) ; return - 1 ; } return send_msg ( g, ""E01"" ) ;",0
1665,"<S2SV_ModStart>! stream ) { int i ; <S2SV_ModStart> fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; } if (! stream -> codec ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" <S2SV_ModStart> ; res = vpx_codec_enc_config_default <S2SV_ModEnd> ( global -> <S2SV_ModStart> ( ), & stream -> config. cfg, global -> usage ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. cfg. stereo_fmt = STEREO_FORMAT_MONO ; stream -> config. write_webm = 1 ; stream -> ebml. last_pts_ms = - 1 ; stream -> ebml. debug = global -> debug ; if ( global -> deadline == VPX_DL_REALTIME ) stream -> ebml. last_lag_in_frames = 0 <S2SV_ModEnd> ; } <S2SV_null>",0
1666,"<S2SV_ModStart> trunc ; } if ( op -> nd_opt_mtu!= ND_OPT_MTU_MIN ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> mtu <S2SV_blank> (%u): <S2SV_blank> %s"", tok2str ( icmp6_opt_values, ""unknown"", op -> nd_opt_mtu ) ) ) ; break ; } if ( op -> nd_opt_mtu!= ND_OPT_MTU_MIN ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> %s <S2SV_blank> mtu <S2SV_blank> (%u): <S2SV_blank> %s"", tok2str ( icmp6_opt_values, ""unknown"", op -> nd_opt_mtu ) ) ) ; break ; } if ( op -> nd_opt_mtu!= ND_OPT_MTU_MAX ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> %s <S2SV_blank> mtu <S2SV_blank> (%u): <S2SV_blank> %s"", tok2str ( icmp6_opt_values, ""unknown"", op -> nd_opt_mtu ) ) ) ; break ; }",0
1667,<S2SV_ModStart> = 0 ; if ( ( * re_ast ) -> root_node == NULL ) { * re_ast = ( RE_AST * ) yr_malloc ( sizeof ( RE_AST ) ) ; if ( * re_ast!= NULL ) yr_free ( * re_ast ) ; return ERROR_INSUFFICIENT_MEMORY ; },0
1668,"<S2SV_ModStart> sk ) ; if ( writable ) { <S2SV_ModStart> = 0 ; } <S2SV_ModStart> )!= sk ) { if (! skb_queue_empty ( & sk -> sk_receive_queue ) ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; return mask ; } unix_dgram_peer_wake_wait ( file, & unix_sk ( other ) -> peer_wait, wait ) ; unix_peer_wake_wait ( file, & unix_sk ( other ) -> peer_wait, wait ) ; } sock_put ( other ) ; } if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; return mask <S2SV_ModEnd> ; } <S2SV_null>",0
1669,"<S2SV_ModStart> ; ret = var_expand_key <S2SV_ModEnd> ( path, <S2SV_ModStart>, iter -> var_expand_table, & error ) ; if ( ret <= 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } <S2SV_ModStart> 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> = <S2SV_blank> %s"", str_c ( path ), key -> value ) ; } else if ( ret < 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS",0
1670,<S2SV_ModStart> ; if ( skb -> len < sizeof ( struct nlattr ) ) return 0 ; if ( <S2SV_ModStart> -> nla_len > <S2SV_ModEnd> skb -> len <S2SV_ModStart> skb -> len - A,1
1671,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1672,"<S2SV_ModStart> ; stbbr_send ( ""<message <S2SV_blank> type=\'chat\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'stabber@localhost\'>"" <S2SV_ModEnd> ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost/mobile\'>""",1
1673,"<S2SV_ModStart> -> cac_id, serial -> len <S2SV_ModEnd> ) ; SC_FUNC_RETURN",1
1674,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> tok -> altwarning <S2SV_ModStart> = 0 ; <S2SV_ModEnd> tok -> alterror <S2SV_ModStart> = 0 ; if ( PGEN_VERSION >= 0x10100000L ) { if ( PGEN_VERSION >= 0x10100000L ) { if ( PGEN_VERSION >= 0x10100000L ) { if ( PGEN_VERSION >= 0x10100000L ) { if ( PGEN_VERSION >= 0x10100000L ) { if ( PGEN_VERSION >= 0x10100000L ) { if ( PGEN_VERSION >= 0x10100000L ) { if ( PGEN_VERSION >= 0x10100000L ) { if ( PGEN_VERSION >= 0x10100000L ) { if ( PGEN_VERSION >= 0x10100000L ) { if ( PGEN_VERSION >= 0x10100000L ) { if ( PGEN_VERSION >= 0x10100000L ) { if ( PGEN_VERSION >= 0x10100000L ) { if ( PGEN_VERSION >= 0x10100000L ) { if ( PGEN_VERSION >= 0x10100000L ) { if ( PGEN_VERSION >= 0x10100000L ) { if ( PGEN_VERSION >= 0,0
1675,"<S2SV_ModStart> } if ( av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo ) ; if ( av1_cfg ) { gf_odf_av1_cfg_write ( av1_cfg, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> data, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> dataLength ) ; } else",0
1676,"<S2SV_ModStart> { GF_LOG ( GF_LOG_ERROR <S2SV_ModEnd>, GF_LOG_CONTAINER, <S2SV_ModStart> ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; return GF_NON_COMPLIANT_DREF ; } if (! ( ( GF_DataInformationBox * ) s ) -> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; return GF_NON_COMPLIANT_DREF ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } return GF_NON_COMPLIANT_DREF <S2SV_ModEnd> ; } <S2SV_null>",0
1677,"<S2SV_ModStart> ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; if ( r!= sizeof ( buff ) ) { r = - 1 ; break ; }",0
1678,"<S2SV_ModStart> ) ; ASSERT ( noReordering ) ; dpb -> maxLongTermFrameIdx = NO_LONG_TERM_FRAME_INDICES ; dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; dpb -> numRefFrames = 0 ; for ( i = 0 ; i < dpb -> dpbSize + 1 ; i ++ ) { ALLOCATE ( dpb -> buffer [ i ]. pAllocatedData, ( picSizeInMbs * 384 + 32 + 15 ), u8 ) ; if ( dpb -> buffer [ i ]. pAllocatedData == NULL ) return ( MEMORY_ALLOCATION_ERROR ) ; dpb -> buffer [ i ]. pAllocatedData = ALIGN ( dpb -> buffer [ i ]. pAllocatedData, 16 ) ; if ( dpb -> buffer [ i ]. pAllocatedData == NULL ) return ( MEMORY_ALLOCATION_ERROR ) ; H264SwDecMemset ( dpb -> buffer [ i ]. pAllocatedData, 0, ( picSizeInMbs * 384 + 32 + 15 ), u8 ) ; if ( dpb -> buffer [ i ]. pAllocatedData == NULL ) return (",0
1679,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> if (! addr ||! addrlen ) OE_RAISE_ERRNO ( OE_EINVAL ) ; addrlen_in = * addrlen ; if ( addrlen_in < 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd> oe_syscall_getpeername_ocall ( & <S2SV_ModStart>, addrlen_in, & addrlen_out, addrlen_in, & addrlen_out <S2SV_ModEnd> )!= OE_OK <S2SV_ModStart> ) ; } if ( addrlen_out > sizeof ( struct oe_sockaddr_storage ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_out > sizeof ( struct oe_sockaddr_storage ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ; * addrlen = addrlen_out ;",0
1680,,1
1681,"<S2SV_ModStart> FALSE ; } if (! <S2SV_ModStart>, s ) ) return FALSE",1
1682,<S2SV_ModStart> ( sk ) ; struct ipv6_txoptions * opt_to_free <S2SV_ModStart> ( opt ) { opt = txopt_get ( opt_space ) ; opt_to_free = opt ; } <S2SV_ModEnd> if ( flowlabel <S2SV_ModStart> flowlabel ) ; txopt_put ( opt_to_free ) ;,0
1683,"<S2SV_ModStart>, at ; int found, upx_success = 0, err, overlays = 0 ; unsigned int ssize = 0, dsize = 0, pe_plus = 0, corrupted_cur = CL_CLEAN ; int ( * upxfn ) ( const char *, uint32_t, char *, uint32_t, uint32_t, uint32_t, uint32_t ) = NULL ; int ( * upxfn ) ( const char *, uint32_t, char *, uint32_t, uint32_t, uint32_t, uint32_t ) = NULL ; int ( * upxfn ) ( const char *, uint32_t, char *, uint32_t, uint32_t, uint32_t ) = NULL ; int ( * upxfn ) ( const char *, uint32_t, char *, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t ) = NULL ; int ( * upxfn ) ( const char *, uint32_t, char *, uint32_t, uint32_t",0
1684,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> { } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; usleep <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; return",0
1685,"<S2SV_ModStart> if ( striplength > max_striplength ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> %lu <S2SV_blank> bytes <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> striplength <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", striplength, max_striplength ) ; t2p -> t2p_error = T2P_ERR_ERROR ; } if ( t2p -> tiff_datasize < 0 ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> %lu <S2SV_blank> bytes <S2SV_blank> of <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> striplength <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", striplength, ( int ) t2p -> tiff_datasize ) ; t2p -> tiff_datasize = 0 ; }",0
1686,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",1
1687,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> ; UINT32 tempWidth ; if (! context ) return FALSE <S2SV_ModStart> -> ColorLossLevel ; <S2SV_ModEnd> rw = ( <S2SV_ModStart> context -> ChromaSubsamplingLevel? tempWidth : 8 ) ; aplane = context -> priv -> PlaneBuffers [ 0 ] + y * rw ; coplane = context -> priv -> PlaneBuffers [ 1 ] + y * rw ; cgplane = context -> priv -> PlaneBuffers [ 2 ] + y * rw ; aplane = context -> priv -> PlaneBuffers [ 3 ] + y * rw ; src = data + ( context -> height - 1 - y ) * scanline ; for ( y = 0 ; y < context -> height ; y ++ ) { src = data + ( context -> height - 1 - y ) * scanline ; src ++ ; } switch ( context -> format ) { case PIXEL_FORMAT_BGR24 : b_val = * src ++ ; g_val = * src ++ ; r_val = * src ++ ; b_val = * src ++ ;,0
1688,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1689,"<S2SV_ModStart> new_parent ) { <S2SV_ModEnd> __ptrace_link ( child <S2SV_ModStart>, new_parent, current_cred ( ) <S2SV_ModEnd> ) ; }",1
1690,<S2SV_ModStart> = 0 ; if ( ( * re_ast ) -> root_node == NULL ) { * re_ast = ( RE_AST * ) yr_malloc ( sizeof ( RE_AST ) ) ; if ( * re_ast!= NULL ) yr_free ( * re_ast ) ; return ERROR_INSUFFICIENT_MEMORY ; },0
1691,"<S2SV_ModStart> cib, & private -> command, private -> callback <S2SV_ModStart> cib, & private -> callback, private -> command. encrypted <S2SV_ModStart> pcmk_ok ) { if ( private -> command. session == NULL ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, 0, NULL ) ; free_xml ( hello ) ; crm_send_remote_msg ( hello, F_CIB_CLIENTNAME, name ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> command. session, CRM_OP_REGISTER, NULL, NULL, 0, NULL ) ; free_xml ( hello ) ; crm_xml_add ( hello, F_CIB_CLIENTNAME, name ) ; crm_send_remote_msg ( hello, F_CIB_CLIENTNAME, name ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> command. session, CRM_OP",0
1692,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
1693,"<S2SV_ModStart> >> 3 } ; int num00, tmp_err, n, sr = 0 ; int new_mv_mode_penalty = 256 ; const int quart_frm = MIN ( cpi -> common. width, cpi -> common. height ) ; while ( ( sr << step_param ) < MAX_FULL_PEL_VAL ) ++ sr ; step_param += sr ; further_steps -= sr ; v_fn_ptr. vf = get_block_variance_fn ( bsize ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_diamond_search_sad ( x, & ref_mv_full, & tmp_mv, step_param, x -> sadperbit16, & num00, & v_fn_ptr, x -> nmvjointcost, x -> mvcost, ref_mv ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = INT_MAX ;",0
1694,"<S2SV_ModStart> ntreg_header ) ; if ( h -> addr == 0 ) { SET_ERRNO ( EPERM, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; }",0
1695,"<S2SV_ModStart> ; if ( merge -> reqbody_limit && merged -> reqbody_no_files_limit && parent -> reqbody_limit!= child -> reqbody_limit ) { ap_log_perror ( APLOG_MARK, APLOG_STARTUP | APLOG_NOERRNO, 0, mp, ""Merge <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp <S2SV_blank> RESULT <S2SV_blank> %pp"", _parent, _child, merged ) ; return NULL ; } merged -> reqbody_limit = ( child -> reqbody_limit == NOT_SET? parent -> reqbody_limit : child -> reqbody_limit ) ; merged -> reqbody_no_files_limit = ( child -> reqbody_no_files_limit == NOT_SET? parent -> reqbody_no_files_limit : child -> reqbody_no_files_limit ; merged -> reqbody_access = ( child -> reqbody_access == NOT_SET? parent -> reqbody_access : child -> reqbody_access ) ; merged -> reqbody_no_files_limit = ( child -> reqbody_no_files_limit == NOT_SET? parent -> reqbody_no_files_limit : child",0
1696,"<S2SV_ModStart> ( used_address && msg_sys -> msg_name && <S2SV_ModStart> -> name, msg_sys <S2SV_ModEnd> -> msg_name, <S2SV_ModStart> -> msg_namelen ; if ( msg_sys -> msg_name ) <S2SV_ModStart> -> name, msg_sys <S2SV_ModEnd> -> msg_name,",1
1697,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; for (,1
1698,"<S2SV_ModStart>, one_filled, one_filled, <S2SV_ModStart>, offset, pixels_length ; if ( number_pixels!= ( size_t ) MagickFalse ) { ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } number_pixels = ( size_t ) MagickMax ( number_pixels, pixels_length ) ; if ( number_pixels!= ( size_t ) MagickFalse ) { ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; number_pixels = ( size_t ) MagickMin ( number_pixels, pixels_length ) ; if ( number_pixels!= ( size_t ) MagickFalse ) { ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } pixel_info = ( PixelPacket * ) RelinquishMagickMemory ( pixel_info ) ; if ( pixel_info!= ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) RelinquishMagickMemory ( pixel_info ) ; if ( pixel_info!= ( MemoryInfo * ) NULL ) pixel_info = ( PixelPacket * ) RelinquishMagickMemory ( pixel_info )",0
1699,"<S2SV_ModStart>!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )",0
1700,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1701,"<S2SV_ModStart> cib_client_t * client ; int rc <S2SV_ModStart> num_clients ) ; rc = g_hash_table_remove ( client_list, client -> id ) ; if ( rc!= 0 ) { crm_err ( ""Client <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found in <S2SV_blank> the <S2SV_blank> hashtable"", client -> name ) ; g_hash_table_remove ( client_list, client -> id ) ; crm_err ( ""Client <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> the <S2SV_blank> hashtable"", client -> name ) ; } g_hash_table_remove ( client_list, client -> id ) ; free ( client -> callback_id ) ; free ( client -> user ) ; g_hash_table_remove ( client_list, client -> id ) ; free ( client ) ; crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client"" ) ; return ; } <S2SV_ModEnd> crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client""",0
1702,"<S2SV_ModStart> * uv ; ThreadTwups * twups = thread -> twups ; thread -> twups = NULL ; for ( uv = twups ; uv!= NULL ; uv = uv -> u. open. next ) { work ++ ; markvalue ( g, uv -> v ) ; } } <S2SV_ModEnd> thread -> twups <S2SV_ModStart> ) { work ++ ; twups = thread ; for ( uv = thread -> openupval ; uv!= NULL ; uv = uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> v ) ; } <S2SV_ModEnd> } } return",0
1703,<S2SV_ModStart> size ) ; if (! px -> ft ) return FALSE ;,0
1704,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1705,<S2SV_ModStart> if (! ( flags & RENAME_EXCHANGE ) && ( new -> d_inode!= old_upperdir ) && ( new -> d_inode -> i_uid == old -> d_inode -> i_uid ) && ( new -> d_inode -> i_uid == old_upperdir -> i_uid ) && ( new -> d_inode -> i_uid == old_upperdir -> i_uid ) && ( new -> d_inode!= old_upperdir ) && ( new -> d_inode!= opaquedir || ( new -> d_inode!= new_upperdir ) ) && ( new -> d_inode -> i_uid == old_upperdir -> i_uid ) && ( new -> d_inode -> i_uid == old_upperdir -> i_uid ) && ( new -> d_inode -> i_uid == old_upperdir -> i_uid ) && ( new -> d_inode!= opaquedir ) ) && ( new -> d_inode!= opaquedir || ( new -> d_inode!= new_upperdir ) ) && ( new -> d_inode,0
