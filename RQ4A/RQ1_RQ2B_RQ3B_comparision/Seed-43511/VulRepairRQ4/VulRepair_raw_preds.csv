,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
1,<S2SV_ModStart> ( <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
2,<S2SV_ModStart> writer = ( TrackWriter <S2SV_ModEnd> * ) gf_list_get,0
3,<S2SV_ModStart> item ) { return <S2SV_ModEnd> cJSON_GetArrayItem ( array <S2SV_ModStart> -> child ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
4,"<S2SV_ModStart> u32 event_id, <S2SV_ModEnd> struct pt_regs * <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",0
5,"<S2SV_ModStart> { # ifdef _MSC_VER char * buf = grub_malloc ( EXT2_BLOCK_SIZE ( data ) ) ; # else struct grub_ext4_extent_header * leaf ; int i ; leaf = grub_ext4_find_leaf ( data, buf, ( struct grub_ext4_extent_header * ) inode -> blocks. dir_blocks, fileblock ) ; if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) leaf ; if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) leaf + 1 ) ; for ( i = 0 ; i < grub_le_to_cpu16 ( leaf -> entries ) ; i ++ ) { if ( fileblock < grub_le_to_cpu32 ( ext [ i ]. block ) ) break ; fileblock -= grub_le_to_cpu32 ( ext [",0
6,"<S2SV_ModStart> fdct16 ( const tran_low_t <S2SV_ModEnd> in [ 16 <S2SV_ModStart> 16 ], tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> 16 ] ) { tran_high_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> ] ; int temp0, temp1, temp2 ; input [ 0 ] = in [ 0 ] + in [ 15 ] ; input [ 1 ] = in [ 1 ] + in [ 14 ] ; input [ 2 ] = in [ 2 ] + in [ 13 ] ; input [ 3 ] = in [ 3 ] + in [ 14 ] ; input [ 4 ] = in [ 4 ] + in [ 13 ] ; input [ 5 ] = in [ 5 ] + in [ 13 ] ; input [ 6 ] = in [ 7 ] + input [ 8 ] ; s0 = input [ 0 ] + input [ 7 ] ; s1 = input [ 1 ] + input [ 6 ] ; s2 = input [ 2 ] + input [ 5 ] ; s3 = input [ 3 ] + input [ 4 ] ;",0
7,<S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { #,0
8,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> search_filter_level ( const <S2SV_ModStart> partial_frame ) { VP9_COMMON * const cm = & cpi -> common ; struct loopfilter * const lf = & cpi -> <S2SV_ModEnd> lf ; const <S2SV_ModStart> ; int best_err <S2SV_ModEnd> ; int filt_best <S2SV_ModStart> ; int filt_direction <S2SV_ModEnd> ; int filt_mid <S2SV_ModStart> / 4 ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> twopass. section_intra_rating < 20 ) { VP9_COMMON * const cm = & cpi -> common ; struct loopfilter * const lf = & cm -> lf ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; int filter_step = MIN ( filt_mid + filter_step, max_filter_level ) ; int bias = ( best_err >> ( 15 - ( filt_mid / 8 ) ) ) * filter_step ; if ( cpi -> twopass. section_intra_rating < 20 ) bias =",0
9,"<S2SV_ModStart> left ; luaL_checkstack ( L, 2, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> offset <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> and <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d."", offset, len ) ; <S2SV_ModStart> left == 0 ) { luaL_checkstack ( L, 2, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> offset <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> and <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> input <S2SV_blank> length <S2SV_blank> %d."", offset, len ) ; luaL_checkstack ( L, 2, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> offset <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> and <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d."", offset, len ) ; luaL_checkstack ( L, 2, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> offset <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> and <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d."", offset, len ) ; luaL_checkstack ( L, 2, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> offset <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> and <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d."", offset, len ) ; luaL_checkstack ( L, 2, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> offset <S2SV_blank> of <S2SV_blank> %",0
10,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_mv_component ( vpx_writer <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> i ) ; vpx_write <S2SV_ModEnd> ( w,",0
11,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } else { <S2SV_ModEnd> request -> rxBlockSzx <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
12,"<S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short""",0
13,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; <S2SV_ModEnd> if ( dest_keyring <S2SV_ModStart> dest_keyring ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> dest_keyring ) ; <S2SV_ModEnd> } case KEY_REQKEY_DEFL_DEFAULT <S2SV_ModStart> dest_keyring ) ; up_read ( & authkey -> sem ) ; dest_keyring = key_get ( cred -> thread_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_THREAD_KEYRING : dest_keyring = key_get ( cred -> thread_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_PROCESS_KEYRING : dest_keyring = key_get ( rcu_dereference ( cred -> process_keyring ) ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_USER_SESSION_KEYRING : dest_keyring = key_get ( rcu_dereference ( cred -> user -> session_keyring ) ) ; if ( dest_keyring,0
14,<S2SV_ModStart> = NULL ; if ( ctx == NULL ) return GSS_S_FAILURE ;,0
15,<S2SV_ModStart> ; tm = g_time_to_tm ( t ) ; if ( tm == NULL ) tm = g_time_to_tm ( & t ) ; if ( tm == NULL ) tm = g_time_to_tm ( & t ) ; if ( tm == NULL ) tm = g_time_to_tm ( & t ) ; if ( tm == NULL ) tm = g_time_to_tm ( & t ) ; if ( tm == NULL ) { tm = g_time_to_tm ( & t ) ; if ( tm == NULL ) tm = g_time_to_tm ( & t ) ; if ( tm == NULL ) tm = g_time_to_tm ( & t ) ; if ( tm == NULL ) tm = g_time_to_tm ( & t ) ; if ( tm == NULL ) tm = g_time_to_tm ( & t ) ; if ( tm == NULL ) tm = g_time_to_tm ( & t ) ; if ( tm == NULL ) tm = g_time_to_tm ( & t ) ; if ( tm == NULL ) tm = g_time_to_tm ( & t,0
16,<S2SV_ModStart> length ) ; if ( strlen ( password ) > AUTH_PASS_LEN - 1 ) { length = AUTH_PASS_LEN - 1 ; } <S2SV_ModStart> password ) ) ; if ( strlen ( password ) > AUTH_PASS_LEN - 1 ) { if ( strlen ( password ) > AUTH_PASS_LEN - 1 ) { if ( strlen ( password ) > AUTH_PASS_LEN - 1 ) { if ( strlen ( password ) > AUTH_PASS_LEN - 1 ) { if ( strlen ( password ) > AUTH_PASS_LEN - 1 ) { if ( strlen ( password ) > AUTH_PASS_LEN - 1 ) { if ( strlen ( password ) > AUTH_PASS_LEN - 1 ) { if ( strlen ( password ) > AUTH_PASS_LEN - 1 ) { if ( strlen ( password ) > AUTH_PASS_LEN - 1 ) { if ( strlen ( password ) > AUTH_PASS_LEN - 1 ) { if ( strlen ( password ) > AUTH_PASS_LEN - 1 ) { if ( strlen ( password ) > AUTH_PASS_LEN - 1 ) { if ( strlen ( password ) > AUTH_PASS_LEN - 1 ) { if ( strlen ( password ) > AUTH_PASS,0
17,"<S2SV_ModStart> ; if ( e == NULL ) goto not_found ; r = parse_uid ( e + 1, & uid ) ; if ( r < 0 ) { if ( sd_bus_error_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) goto not_found ; r = sd_bus_message_read ( reply, ""u"", & mapped ) ; if ( r < 0 ) { if ( sd_bus_message_read ( reply, ""u"", mapped ) ; goto fail ; } r = sd_bus_message_read ( reply, ""u"", & mapped ) ; if ( r < 0 ) { if ( sd_bus_error_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) goto not_found ; goto fail ; } r = sd_bus_message_read ( reply, ""u"", & mapped ) ; if ( r < 0 ) { if ( sd_bus_error_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) goto not_found ; goto fail ; } r = sd_bus_",0
18,<S2SV_ModStart> ) &&! capable ( CAP_CHOWN <S2SV_ModEnd> ) ) return <S2SV_ModStart> ( CAP_CHOWN ) ) return - EPERM ; if ( ia_valid & ATTR_MODE ) { if (! inode_owner_or_capable ( inode ) ) return - EPERM ; if (! in_group_p ( ( ia_valid & ATTR_MODE )? attr -> ia_mode : inode -> i_mode ) &&! capable ( CAP_FSETID ) ) attr -> ia_mode &= ~ S_ISGID ; } if ( ia_valid & ( ATTR_MTIME_SET | ATTR_ATIME_SET | ATTR_TIMES_SET ) ) { if (! inode_owner_or_capable ( inode ) ) return - EPERM ; if (! in_group_p ( ( ia_valid & ATTR_MODE )? attr -> ia_mode : inode -> i_mode ) &&! capable ( CAP_FSETID ) ) attr -> ia_mode &= ~ S_ISGID ; } if ( ia_valid & ( ATTR_MTIME_SET | ATTR_TIMES_SET ) ) { if (! inode_owner_or_cap,0
19,"<S2SV_ModStart> = 0 ; select ( reader -> bytes_available_fd + 1, & read_fds, NULL, NULL, & timeout ) ; if (! FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { FD_SET ( reader -> bytes_available_fd, & read_fds ) ; return false ; } <S2SV_ModEnd> return FD_ISSET (",0
20,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> detect_transition_to_still ( struct <S2SV_ModStart> last_decay_rate ) { <S2SV_ModEnd> int trans_to_still = <S2SV_ModStart> ; if ( frame_interval < MIN_GF_INTERVAL && loop_decay_rate >= 0.999 && last_decay_rate < 0.9 ) { int j ; const FIRSTPASS_STATS * position = twopass -> stats_in ; for ( j = 0 ; j < still_interval ; ++ j ) { if ( EOF == input_stats ( twopass, & tmp_next_frame ) ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_m",0
21,"<S2SV_ModStart> return ret ; ret = ext4_convert_unwritten_extents ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten"" ""extents <S2SV_blank> to <S2SV_blank> written <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; }",0
22,<S2SV_ModStart> alg ) { if ( type & CRYPTO_ALG_NEED_FALLBACK ) { if ( type & CRYPTO_ALG_NEED_FALLBACK ) { if ( type & CRYPTO_ALG_NEED_FALLBACK ) { if ( type & CRYPTO_ALG_NEED_FALLBACK ) { if ( type & CRYPTO_ALG_NEED_FALLBACK ) { if ( type & CRYPTO_ALG_NEED_FALLBACK ) { if ( type & CRYPTO_ALG_NEED_FALLBACK ) { if ( type & CRYPTO_ALG_NEED_FALLBACK ) { if ( type & CRYPTO_ALG_NEED_FALLBACK ) { if ( type & CRYPTO_ALG_NEED_FALLBACK ) { if ( type & CRYPTO_ALG_NEED_FALLBACK ) { if ( type & CRYPTO_ALG_NEED_FALLBACK ) { if ( type & CRYPTO_ALG_NEED_FALLBACK ) { if ( type & CRYPTO_ALG_NEED_FALLBACK,0
23,"<S2SV_ModStart> = GIT_PKT_NG ; ptr = line ; if (! ( ptr = strchr ( line,'<S2SV_blank>') ) ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> ref = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> ref ) ; memcpy ( pkt -> ref, line, len ) ; pkt -> ref [ len ] = '\\0' ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> msg = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> msg ) ; memcpy ( pkt -> msg, line, len ) ; pkt -> msg [ len ] = '\\0' ; <S2SV_ModEnd> * out =",0
24,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FINAL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""RDP_NEG_REQ: <S2SV_blank> Too <S2SV_blank> many <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> negotiation <S2SV_blank> request"" ) ; return ; } <S2SV_ModStart> = NEGO_STATE_FINAL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""RDP_NEG_REQ: <S2SV_blank> Too <S2SV_blank> many <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> negotiation <S2SV_blank> request"" ) ; return ; }",0
25,"<S2SV_ModStart> ; if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; avio_seek ( pb, off, SEEK_SET ) ; if ( num_video!= 1 ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num_video ) ; return AVERROR_PATCHWELCOME ; } avio_seek ( pb, off, SEEK_SET ) ; if ( num_video!= 1 ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num_video ) ; return AVERROR_PATCHWELCOME ; } avio_seek ( pb, off, SEEK_SET ) ; if ( num_video!= 1 ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num_video ) ; return AVERROR_PATCHWELCOME ; }",0
26,"<S2SV_ModStart> 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_generic_nolock <S2SV_blank> failed"" ) ; return - 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_generic_nolock <S2SV_blank> failed"" ) ; return - 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_generic_nolock <S2SV_blank> failed"" ) ; return ret ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_generic_nolock <S2SV_blank> failed"" ) ; return ret ; } <S2SV_ModEnd> return mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_generic_nolock <S2SV_blank> failed",0
27,"<S2SV_ModStart> - ENODEV ; io -> inputb = intf_mem_inb ; io -> outputb = intf_mem_outb ; break ; case 1 : io -> inputb = intf_mem_inw ; io -> outputb = intf_mem_outw ; break ; case 2 : io -> inputb = intf_mem_inl ; io -> outputb = intf_mem_outl ; break ; case 4 : io -> inputb = intf_mem_inl ; io -> outputb = intf_mem_outl ; break ; default : dev_warn ( io -> dev, ""Invalid <S2SV_blank> register <S2SV_blank> size: <S2SV_blank> %d\\n"", io -> regsize ) ; return - EINVAL ; } for ( idx = 0 ; idx < io -> io_size ; idx ++ ) { if ( request_mem_region ( addr + idx * io -> regspacing, io -> regsize, DEVICE_NAME ) == NULL ) { mem_region_cleanup ( io, idx ) ; return - EIO ; } } mapsize = ( ( io -> io_size * io -> regspacing ) - ( io -> regspacing - io -> regsize ) )",0
28,<S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> :,0
29,"<S2SV_ModStart> ( LINK_KEY ) ) ; ret &= btif_config_set_int ( bdstr, ""PinLength"", ( int ) pin_length ) ; ret &= btif_config_set_int ( bdstr, ""LinkKeyType"", ( int ) key_type ) ; ret &= btif_config_set_int ( bdstr, ""PinLength"", ( int ) pin_length ) ; ret &= btif_config_set_int ( bdstr, ""LinkKeyType"", ( int ) key_type ) ; ret &= btif_config_set_int ( bdstr, ""PinLength"", ( int ) pin_length ) ; ret &= btif_config_set_int ( bdstr, ""LinkKeyType"", ( int ) key_type ) ; ret &= btif_config_set_int ( bdstr, ""LinkKeyType"", ( int ) key_type ) ; ret &= btif_config_set_int ( bdstr, ""LinkKeyType"", ( int ) key_type ) ; ret &= btif_config_set_int ( bdstr, ""PinLength"", ( int ) pin_length ) ; ret &= bt",0
30,<S2SV_ModStart> vpx_codec_err_t res ; vpx_codec_enc_cfg_map_t <S2SV_ModEnd> * map ; <S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; if (! ( iface -> enc. cfg_maps & VPX_CODEC_CFG_MAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_,0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
33,"<S2SV_ModStart> ; } # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION if ( imp_sth -> use_server_side_prepare ) { if (! DBIc_ACTIVE ( imp_sth ) ) { do_error ( sth, JW_ERR_SEQUENCE, ""fetch() <S2SV_blank> but <S2SV_blank> fetch <S2SV_blank> already <S2SV_blank> done"", NULL ) ; return Nullav ; } } # endif # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION if ( imp_sth -> use_server_side_prepare ) { if (! DBIc_ACTIVE ( imp_sth ) ) { do_error ( sth, JW_ERR_SEQUENCE, ""fetch() <S2SV_blank> but <S2SV_blank> fetch <S2SV_blank> already <S2SV_blank> done"", NULL ) ; return Nullav ; } } # endif # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION if ( imp_sth -> use_server_side_prepare ) { if (! DBIc_ACTIVE ( imp_sth ) ) { do_error ( sth, JW_ERR_SEQUENCE, ""fetch() <S2SV_blank> but <S2SV_blank> fetch <S2SV_blank> already <S2SV_blank> done"", NULL ) ; return Nullav ; } if (! imp_sth -> done_desc )",0
34,"<S2SV_ModStart> NO_ERROR ; } <S2SV_ModEnd> enc28j60SetBit ( interface <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ETXSTL, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteBuffer ( interface, buffer, offset ) ; enc28j60WriteReg ( interface, ENC28J60_ETXNDL, LSB ( ENC28J60_TX_BUFFER_START + length ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXNDH, MSB ( ENC28J60_TX_BUFFER_START + length",0
35,"<S2SV_ModStart> value ) ; value = ast2obj_int ( o -> lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o ->",0
36,"<S2SV_ModStart> ; if ( access_ok <S2SV_ModEnd> ( page, <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart>",0
37,"<S2SV_ModStart> flag ) { <S2SV_ModEnd> double level = <S2SV_ModStart>.5 ; int mb_rows = source -> y_width >> 4 ; int mb_cols = source -> y_height >> 4 ; unsigned char * limits ; int mbr, mbc ; ( void ) post ; ( void ) low_var_thresh ; ( void ) flag ; memset <S2SV_ModEnd> ( limits, <S2SV_ModStart> unsigned char ) ppl, 16 * mb_cols ) ; for ( mbr = 0 ; mbr < mb_rows ; mbr ++ ) { vpx_post_proc_down_and_across_mb_row ( source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_stride, source -> y_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> u_buffer + 8 * mbr * source -> uv_stride, source -> uv_stride, source -> uv_width, limits, 8 ) ; vpx_post_proc_down_and_across_mb_row ( source -> v_buffer + 8 * mbr * source -> uv_stride, source -> uv_stride, source",0
38,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> int error ; <S2SV_ModEnd> struct mb_cache_entry * <S2SV_ModStart> int error ; <S2SV_ModEnd> ce = mb_cache_entry_alloc <S2SV_ModStart> int error ; <S2SV_ModEnd> error = mb_cache_entry_insert <S2SV_ModStart> ; error = mb2_cache_entry_insert ( ext4_mb_cache, bh -> b_bdev, bh -> b_blocknr, hash ) ; if ( error ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> } } <S2SV_null>",0
39,"<S2SV_ModStart> ) ) ; if (! r_socket_http_answer ( s, code, rlen ) ) { free ( uri ) ; return NULL ; } r_socket_printf ( s, ""Content-Length: <S2SV_blank> %i\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Host: <S2SV_blank> %s\\r\\n"" ""Host: <S2SV_blank> %s\\r\\n"" ""Host: <S2SV_blank> %s\\r\\n"" ""Host: <S2SV_blank> %s\\r\\n"" ""Host: <S2SV_blank> %s\\r\\n"", host, ( int ) strlen ( data ) ) ; free ( uri ) ; r_socket_write ( s, ""Content-Length: <S2SV_blank> %i\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Host: <S2SV_blank> %s\\r\\n"" ""Host: <S2SV_blank> %s\\r\\n"" ""Host: <S2SV_blank> %s\\r\\n"" ""Host: <S2SV_blank> %s\\r\\n"" ""Host: <S2SV_blank> %s\\r\\n"", host, ( int ) strlen ( data ) ) ;",0
40,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int ip_options_get_from_user ( <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> && copy_from_user ( & opt -> opt, data, optlen ) ) { kfree ( opt ) ; return - EFAULT ; } <S2SV_ModEnd> return ip_options_get_finish (",0
41,"<S2SV_ModStart> : ND_PRINT ( ( ndo, "" <S2SV_blank> [|truncated]"" <S2SV_ModEnd> ) ) ;",0
42,"<S2SV_ModStart> ; # ifdef FEAT_GUI if ( gui. in_use ) errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> term <S2SV_blank> in <S2SV_blank> GUI"" ) ; else if ( term_is_gui ( T_NAME ) ) errmsg = ( char_u * ) N_ ( ""E531: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else if ( set_termcap ( T_NAME ) == FAIL ) errmsg = ( char_u * ) N_ ( ""E522: <S2SV_blank> Not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> termcap"" ) ; else if ( set_termcap ( T_NAME ) == FAIL ) errmsg = ( char_u * ) N_ ( ""E522: <S2SV_blank> Not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> termcap"" ) ; else if ( set_termcap ( T_NAME ) == FAIL ) errmsg = ( char_u * ) N_ ( ""E522: <S2SV_blank> Not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> termcap"" ) ; else if ( set_termcap ( T_NAME ) == FAIL ) errmsg = ( char_u * ) N_ ( ""E",0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode",0
44,"<S2SV_ModStart> size_t size ; if (! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ) { goto error ; } cmpt -> stream_ = inmem? jas_stream_memopen2 ( 0, size ) : jas_stream_tmpfile ( ) ; if (!",0
45,<S2SV_ModStart> ( ( op & ASN1_OP_MATCH__COND && flags & FLAG_LAST_MATCHED ) || ( op & ASN1_OP_MATCH__COND && flags & FLAG_MATCHED ) || ( op & ASN1_OP_MATCH__COND && flags & FLAG_LAST_MATCHED ) || ( op & ASN1_OP_MATCH__COND && flags & FLAG_MATCHED ) || ( op & ASN1_OP_MATCH__COND && flags & FLAG_LAST_MATCHED ) || ( op & ASN1_OP_MATCH__COND && flags & FLAG_LAST_MATCHED ) || ( op & ASN1_OP_MATCH__COND && flags & FLAG_MATCHED ) || ( op & ASN1_OP_MATCH__COND && flags & FLAG_LAST_MATCHED ) || ( op & ASN1_OP_MATCH__COND && flags & FLAG_MATCHED ) || ( op & ASN1_OP_MATCH__COND && flags & FLAG_LAST_MATCHED ) || ( op & ASN1_OP_MATCH__COND && flags & FLAG_MATCHED ) || ( op & ASN1_OP_MATCH,0
46,"<S2SV_ModStart> req, size_t <S2SV_ModEnd> acl_len ) { <S2SV_ModStart> int status ; <S2SV_ModEnd> struct kvec * <S2SV_ModStart> ; int status <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) goto out ; status = - EOPNOTSUPP ; if ( ( status = decode_op_hdr ( xdr, OP_GETATTR ) )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & savep ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & savep ) )!= 0 ) goto out ; if ( status == - EIO ) return - EIO ; if ( unlikely ( bitmap [ 0 ] & FATTR4_WORD0_ACL ) ) { size_t hdrlen ; u32 recvd ; if ( attrlen > recvd ) { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen, recvd",0
47,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
48,"<S2SV_ModStart> ':', & tok ) ; if ( owner && * owner ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { uid = HTTP -> uid ; } else { uid = 0 ; } } if ( group && * group ) { if ( snumber ( group ) ) { gid = ( int ) stoi ( group ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { gid = HTTP -> gid ; } else { gid = groupToID ( group ) ; } } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; }",0
49,"<S2SV_ModStart> ; # if CONFIG_MEM_MANAGER int number_aau ; if ( vpx_mm_create_heap_memory ( ) < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> create <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) } number_aau = ( ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ; if ( hmm_alloc ( & hmm_d, number_aau ) < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) } <S2SV_ModEnd> return x ;",0
50,"<S2SV_ModStart> int res ; <S2SV_ModEnd> long long export_index_table <S2SV_ModStart> ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } <S2SV_ModEnd> res = read_fs_bytes <S2SV_ModStart>. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } res = read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank>",0
51,"<S2SV_ModStart> HASH_DISABLED ; } else { return apr_psprintf ( cmd -> pool, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"", p1 ) ; }",0
52,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> for ( argi <S2SV_ModStart> ; continue ; } else if ( strcmp ( * argj, ""--"" ) ) { eos_mark_found = 1 ; continue ; } else if ( arg_match ( & arg, & outputfile, argi ) ) { config -> out_fn = arg. val ; } else if ( arg_match ( & arg, & fpf_name, argi ) ) { config -> stats_fn = arg. val ; } else if ( arg_match ( & arg, & profile, argi ) ) { config -> cfg. g_profile = arg_parse_uint ( & arg ) ; } else if ( arg_match ( & arg, & width, argi ) ) { config -> cfg. g_w = arg_parse_uint ( & arg ) ; } else if ( arg_match ( & arg, & height, argi ) ) { config -> cfg. g_h = arg_parse_uint ( & arg ) ; } else if ( arg_match ( & arg, & height, argi ) ) { config -> cfg. g_h = arg_parse_uint ( & arg ) ; } else if ( arg_",0
53,"<S2SV_ModStart> if ( verify_checks ( c, preverify_ok, callback_ctx ) ) { SSL_SESSION * sess = SSL_get1_session ( c -> ssl ) ; if ( sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } return 1 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
54,"<S2SV_ModStart> ; if ( memcmp ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE ) ) { rc = - EINVAL ; goto exit ; } <S2SV_ModEnd> if ( at91_aes_cbc",0
55,<S2SV_ModStart> cpi ) { # ifdef DISABLE_RC_LONG_TERM_MEM const uint64_t bits_used = cpi -> rc. this_frame_target ; # else const uint64_t bits_used = cpi -> rc. projected_frame_size ; # endif <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
56,"<S2SV_ModStart>, operand, status <S2SV_ModEnd> ; Image * <S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader",0
57,"<S2SV_ModStart> ; } dev_dbg ( & usbinterface -> dev, ""gtco <S2SV_blank> # <S2SV_blank> interfaces: <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> <S2SV_blank> <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_db",0
58,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
59,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> dir ) ) == NULL ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( tmpname == NULL ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; }",0
60,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_dependent_slice_enabled_flag ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_output_flag_present_flag ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_output_flag_present_flag ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
61,"<S2SV_ModStart> n ++ ; if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG )",0
62,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> vp9_setup_dst_planes ( MACROBLOCKD <S2SV_ModStart> mi_col ) { <S2SV_ModEnd> const YV12_BUFFER_CONFIG * <S2SV_ModStart> src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; int i ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y <S2SV_ModEnd> ) ; }",0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,<S2SV_ModStart> == READ ) { <S2SV_ModStart> = ocfs2_dio_get_block ; } else { <S2SV_ModStart> = ocfs2_dio_get_block ; },0
65,"<S2SV_ModStart> if ( fscanf <S2SV_ModEnd> ( f, <S2SV_ModStart> def, strparm ) == 2 ) { if ( strparm [ 0 ] == \'""\' ) { if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else sscanf ( strparm + 2, ""%i"", & parm ) ; } else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else sscanf ( strparm + 2, ""%i"", & parm ) ; for ( i = 0 ; i < numdefaults ; i ++ ) if (! strcmp ( def, defaults [ i ]. name ) ) { if (! isstring ) * defaults [ i ]. location = parm ; else * defaults [ i ]",0
66,"<S2SV_ModStart> n ) { <S2SV_ModEnd> int all_whitespace = <S2SV_ModStart> ; int kind <S2SV_ModEnd> ; void * <S2SV_ModStart> ; PyCompilerFlags cf <S2SV_ModEnd> ; char * <S2SV_ModStart> ; char * str <S2SV_ModEnd> ; Py_ssize_t i <S2SV_ModStart> ; PyObject * o <S2SV_ModEnd> ; Py_ssize_t len <S2SV_ModStart> ; Py_ssize_t i ; str = PyMem_RawMalloc ( 3 ) ; if ( str == NULL ) return NULL ; str [ 0 ] = '(' ; memcpy ( str + 1, expr_start, len ) ; str [ len + 1 ] = ')' ; str [ len + 2 ] = 0 ; cf. cf_flags = PyCF_ONLY_AST ; fstring_name = PyUnicode_FromString ( ""<fstring>"" ) ; mod = string_object_to_c_ast ( str, fstring_name, Py_eval_input, & cf, c -> c_feature_version, c -> c_arena, & cf, c -> c_feature_version, c -> c_arena ) ; Py_DECREF ( fstring_name ) ; Py_DECREF ( fstring_name ) ; Py_DECREF ( fstring_name )",0
67,<S2SV_ModStart> string ) { <S2SV_ModEnd> while ( c,0
68,<S2SV_ModStart> size ) ; if (! px -> ft ) { return FALSE ; },1
69,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> l2tp_call_errors_print ( netdissect_options <S2SV_ModStart> uint16_t val_h, val_l ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ;",0
70,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
71,"<S2SV_ModStart> int i ; const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y <S2SV_ModEnd> ) ; }",0
72,"<S2SV_ModStart> ; lock_sock ( sk ) ; msg -> msg_namelen = 0 ; for ( iov = msg -> msg_iov ; iovlen > 0 ; iov ++ ) { if (! msg -> msg_name ) msg -> msg_name = kzalloc ( sizeof ( * msg ), GFP_KERNEL ) ; msg -> msg_name [ msg -> msg_namelen ] = kzalloc ( sizeof ( * msg ), GFP_KERNEL ) ; msg -> msg_name [ msg -> msg_namelen ] = kzalloc ( sizeof ( * msg -> msg_name ), GFP_KERNEL ) ; if (! msg -> msg_name ) msg -> msg_name = kzalloc ( sizeof ( * msg ), GFP_KERNEL ) ; msg -> msg_name [ msg -> msg_namelen ] = kzalloc ( sizeof ( * msg ), GFP_KERNEL ) ; msg -> msg_name [ msg -> msg_namelen ] = kzalloc ( sizeof ( * msg -> msg_name ), GFP_KERNEL ) ; if (! msg -> msg",0
73,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
74,<S2SV_ModStart> user ) { if ( IS_ERR ( user ) ) return PTR_ERR ( user ) ; <S2SV_ModEnd> cleanup_srcu_struct ( &,0
75,"<S2SV_ModStart> ; int sl = 0 ; int limit = 0 ; mongo_message * mm ; if ( cursor -> seen >= cursor -> limit ) { cursor -> err = MONGO_CURSOR_EXHAUSTED ; return MONGO_ERROR ; } mm = mongo_message_create ( 16 + 4, 0, 0, MONGO_OP_GET_MORE ) ; mm = mongo_message_create ( 16 + 4, 0, 0, MONGO_OP_GET_MORE ) ; mm = mongo_message_create ( 16 + 4, 0, 0, MONGO_OP_GET_MORE ) ; data = & mm -> data ; data = & mm -> data ; data = & mm -> data ; data = mongo_data_append32 ( data, & ZERO ) ; data = mongo_data_append32 ( data, & limit ) ; mongo_data_append64 ( data, & cursor -> reply -> fields. cursorID ) ; bson_free ( cursor -> reply ) ;",0
76,"<S2SV_ModStart> * for_ch ; type_ty type ; <S2SV_ModStart> * for_ch ; type = TYPE ( CHILD ( n, 0 ) ) ) ; if (! TYPE ( for_ch ) ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } if ( is_async && c -> c_feature_version < 6 ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } for_ch = CHILD ( n, 2 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; expression = ast_for_expr ( c, for_ch, Store ) ; if (! expression ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if ( NCH ( for_ch ) == 1 ) comp = comprehension ( first, expression, NULL, is_",0
77,"<S2SV_ModStart> NULL ; } dst_state -> curframe = src -> curframe ; for ( i = src -> curframe + 1 ; i <= dst_state -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; dst_state -> frame [ i ] = dst ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; dst_state -> frame [ i ] = dst ; } dst_state -> frame [ i ] = dst ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; dst_state -> frame [ i ] =",0
78,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> write_mb_modes_kf ( const <S2SV_ModStart> * mi_8x8, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> * mi_8x8, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> -> mi_stride ] ; const MODE_INFO * above_mi = mi_8x8 [ - xd -> mi_stride ] ; const MODE_INFO * left_mi = mi_8x8 [ - 1 ] <S2SV_ModEnd> ; const MB_MODE_INFO <S2SV_ModStart> -> segment_id ) ; if ( seg -> update_map ) write_segment_id ( w, seg, mbmi -> segment_id, mi, w ) ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size, bsize, w ) ; else { if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size, bsize, w ) ; } else { write_",0
79,"<S2SV_ModStart> maxn ) { # ifdef DEBUG fprintf ( stderr, ""%d:\\tACTION[%3.3d]: <S2SV_blank> %s\\n"", actions [ n ]. SWF_ACTIONRECORD. Offset, n, actionName ( actions [ n ]. SWF_ACTIONRECORD. ActionCode ) ) ; # endif <S2SV_ModStart>. SWF_ACTIONRECORD. ActionCode ) { case SWFACTION_END : return 0 ; case SWFACTION_CONSTANTPOOL : decompileCONSTANTPOOL ( & actions [ n ] ) ; return 0 ; case SWFACTION_GOTOFRAME : return decompileGOTOFRAME ( n, actions, maxn, 0 ) ; case SWFACTION_GETURL2 : decompileGETURL2 ( & actions [ n ] ) ; return 0 ; case SWFACTION_PUSHDUP : decompilePUSHDUP ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETPROPERTY : decompileGETPROPERTY ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n, actions, maxn ) ; return 0 ; case SWFACTION_TRACE : decompileTRACE ( n, actions,",0
80,"<S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( & prep -> pp_n ) ; if ( len < sizeof ( * prep ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> wb-prep: <S2SV_blank> <S2SV_null> <S2SV_blank> <S2SV_null> <S2SV_blank> <S2SV_null> <S2SV_blank> <S2SV_null> <S2SV_blank> <S2SV_null>"" ) ) ; return ( - 1 ) ; } <S2SV_ModEnd> n = EXTRACT_32BITS <S2SV_ModStart> 1 ) ; if ( len < sizeof ( * prep ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> wb-prep: <S2SV_blank> <S2SV_null> <S2SV_blank> <S2SV_null> <S2SV_blank> <S2SV_null> <S2SV_blank> <S2SV_null> <S2SV_blank> <S2SV_null> <S2SV_blank> <S2SV_null> <S2SV_blank> <S2SV_null> <S2SV_blank> <S2SV_null>",0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static sqlite3_int64 <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> * ) * ( sqlite3_int64 ) * pTable -> nModuleArg ; char * * azModuleArg = sqlite3DbRealloc ( db, pTable -> azModuleArg, nBytes ) ; if ( azModuleArg == 0 ) { sqlite3DbFree ( db, zArg ) ; return 0 ; } <S2SV_ModEnd> azModuleArg = sqlite3DbRealloc",0
83,<S2SV_ModStart> -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ] ; <S2SV_ModStart> -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ] [ 4 * ptr_hbe_txposer -> k_start ] <S2SV_ModStart> -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ] [ 4 * ptr_hbe_txposer -> k_start ] <S2SV_ModStart> -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ] [ 4 * ptr_hbe_txposer -> k_start ] <S2SV_ModStart> -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ] [ 4 * ptr_hbe_txposer -> k_start ] [ 4 * ptr_hbe_,0
84,<S2SV_ModStart> -> dmin ; if ( ONIGENC_IS_UNSIGNED ( reg -> enc ) ) { if ( ONIGENC_IS_UNSIGNED ( reg -> enc ) ) { if ( ONIGENC_IS_UNSIGNED ( reg -> enc ) ) { if ( reg -> enc -> flags & ONIGENC_FLAG_BIG_ENDIAN ) { if ( reg -> enc -> flags & ONIGENC_FLAG_BIG_ENDIAN ) { if ( reg -> enc -> flags & ONIGENC_FLAG_BIG_ENDIAN ) { if ( reg -> enc -> flags & ONIGENC_FLAG_BIG_ENDIAN ) { if ( ONIGENC_IS_UNSIGNED ( reg -> enc ) ) { if ( reg -> enc -> flags & ONIGENC_FLAG_BIG_ENDIAN ) { if ( reg -> enc -> flags & ONIGENC_FLAG_BIG_ENDIAN ) { if ( reg -> enc -> flags & ONIGENC_FLAG_BIG_ENDIAN ) { if ( reg -> enc -> flags & ONIGENC_FLAG_BIG_ENDIAN ) { if ( reg -> enc -> flags & ONIGENC_FLAG_BIG_ENDIAN ) { if ( reg -> enc -> flags & ONIG,0
85,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> bfq_idle_slice_timer_body ( struct <S2SV_ModStart> bfqq ) { <S2SV_ModEnd> unsigned long flags <S2SV_ModStart> flags ) ; <S2SV_ModEnd> spinq_clear_bfqq_wait_request ( bfqq <S2SV_ModStart> ; return ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,"<S2SV_ModStart> + diffBlockLength || <S2SV_ModEnd> extraPtr + y <S2SV_ModStart> return NULL ; } if ( diffPtr + x > diffBlock + diffBlockLength || extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( diffPtr + x > diffBlock + diffBlockLength || extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; }",0
89,<S2SV_ModStart> pktopts ) ; rcu_read_lock ( ) ;,0
90,"<S2SV_ModStart> ; if ( number_pixels > MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, 0 ) ) ) ) ) ) { MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_",0
91,"<S2SV_ModStart> data ) { vpx_codec_priv_enc_mr_cfg_t * priv_enc_mr_cfg = ( vpx_codec_priv_enc_mr_cfg_t * ) data ; vpx_codec_priv_enc_mr_cfg_t * priv_enc_mr = ( vpx_codec_priv_enc_mr_cfg_t * ) priv_enc_mr ; vpx_codec_priv_enc_mr_cfg_t * priv_enc_mr = ( vpx_codec_priv_enc_mr_cfg_t * ) priv_enc_mr_cfg ; vpx_codec_priv_enc_mr_cfg_t * priv_enc_mr = ( vpx_codec_priv_enc_mr_cfg_t * ) priv_enc_mr ; return encoder_common_init ( ctx, priv_enc_mr, priv_enc_mr ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
92,"<S2SV_ModStart> * self, <S2SV_ModEnd> Py_ssize_t new_size ) <S2SV_ModStart> new_size ) { <S2SV_ModEnd> assert ( new_size",0
93,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
94,"<S2SV_ModStart> mv_bias ( ref_frame_sign_bias [ above -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; <S2SV_ModStart> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; near_ref [ vcnt ] = left -> mbmi. ref_frame ; } <S2SV_ModStart> mbmi. ref_frame!= INTRA_FRAME ) { near_mvs [ vcnt ]. as_int = left -> mbmi. mv. as_int ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; near_ref [ vcnt ] = left -> mbmi. ref_frame ; } <S2SV_ModStart> mbmi. ref_frame!= INTRA_FRAME ) { near_mvs [ vcnt ]. as_int = left -> mbmi. mv. as_int ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ],",0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,<S2SV_ModStart> msicap ; return pci_populate_msicap <S2SV_ModEnd> ( & msicap,0
98,"<S2SV_ModStart> ; } if ( ( cmd -> flags & REDIS_CMD_DENYOOM ) && zmalloc_used_memory ( ) > server. maxmemory ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( ( cmd -> flags & REDIS_CMD_DENYOOM ) && zmalloc_used_memory ( ) > server. maxmemory ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( ( cmd -> flags & REDIS_CMD_DENYOOM ) && zmalloc_used_memory ( ) > server. maxmemory ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" )",0
99,"<S2SV_ModStart> vpx_codec_err_t res ; memset ( & ctx -> vp8_cfg, 0, sizeof ( ctx -> vp8_cfg ) ), 0, sizeof ( ctx -> vp8_cfg ) ) ; if ( ( cfg -> g_w > ctx -> cfg. g_w ) || ( cfg -> g_h > ctx -> cfg. g_h ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_w > ctx -> cfg. g_w ) || ( cfg -> g_h > ctx -> cfg. g_h ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_w > ctx -> cfg. g_w ) || ( cfg -> g_h > ctx -> cfg. g_h ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_w > ctx -> cfg. g_w ) || ( cfg -> g_h > ctx -> cfg. g_h ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or",0
100,"<S2SV_ModStart> cpi ) { vpx_init_plane_quantizers <S2SV_ModEnd> ( cpi, <S2SV_ModStart> -> mb ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
101,"<S2SV_ModStart> - EINVAL ; if ( info -> si_code < 0 ) return - EPERM ; if ( info -> si_signo == sig ) { info -> si_signo = sig ; info -> si_code = - EPERM ; info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) ; } else { info -> si_code = - EPERM ; info -> si_signo = sig ; info -> si_signo = sig ; info -> si_signo = sig ; info -> si_signo = sig ; info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
102,"<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; <S2SV_ModEnd> tmp_str = gf_malloc <S2SV_ModStart> tmp_strsize ) ; if (! tmp_str ) return GF_OUT_OF_MEM ; memset ( tmp_str, 0, sizeof ( char ) * tmp_strsize ) ; if (! tmp_str ) return GF_OUT_OF_MEM ; <S2SV_ModStart> tmp_strsize ) { memset ( tmp_str, 0, sizeof ( char ) * tmp_strsize ) ; tmp_str = gf_malloc ( sizeof ( char ) * tmp_strsize ) ; if (! tmp_str ) return GF_OUT_OF_MEM ; memset ( tmp_str, 0, sizeof ( char ) * tmp_strsize ) ; if (! tmp_str ) return GF_OUT_OF_MEM ; tmp_str = gf_malloc ( sizeof ( char ) * tmp_strsize ) ; if (! tmp_str ) return GF_OUT_OF_MEM ; memset ( tmp_str, 0, sizeof ( char ) * tmp_strsize ) ; if (! tmp_str ) return GF_OUT_OF",0
103,<S2SV_ModStart> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> iface -> enc. caps & VPX_CODEC_CAP_ENCODER ) ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> iface -> enc. caps & VPX_CODEC_CAP_ENCODER ) ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> priv -> caps & VPX_CODEC_CAP_ENCODER ) ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> priv -> caps & VPX_CODEC_CAP_ENCODER ) ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> iface -> enc. caps & VPX_CODEC_CAP_ENCODER ) ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> iface -> enc. caps & VPX_CODEC_CAP_ENCODER ) ) ctx -> err = VPX,0
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> == mode ) <S2SV_ModEnd> return ; if <S2SV_ModStart> == mode ) <S2SV_ModEnd> return ; if <S2SV_ModStart> = mode ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
105,"<S2SV_ModStart> ) break ; status = SetImageInfoBlob ( read_info, ( MagickProgressMonitor ) NULL, ( void * ) NULL ) ; if ( status == MagickFalse ) SetImageInfoBlob ( read_info, ( MagickProgressMonitor ) NULL, ( void * ) NULL ) ; if ( status == MagickFalse ) SetImageInfoBlob ( read_info, ( MagickProgressMonitor ) NULL, ( void * ) NULL ) ; <S2SV_ModStart> ) break ; status = SetImageInfoBlob ( read_info, ( MagickProgressMonitor ) NULL, ( void * ) NULL ) ; if ( status == MagickFalse ) SetImageInfoBlob ( read_info, ( MagickProgressMonitor ) NULL, ( void * ) NULL ) ; if ( status == MagickFalse ) SetImageInfoBlob ( read_info, ( MagickProgressMonitor ) NULL, ( void * ) NULL ) ; if ( status == MagickFalse ) break ; status = SetImageInfoBlob ( read_info, ( MagickProgressMonitor ) NULL, ( void * ) NULL ) ; if ( status == MagickFalse ) SetImageInfoBlob ( read_info, ( MagickProgressMonitor ) NULL, ( void * ) NULL",0
106,<S2SV_ModStart> 0 ; } memcpy <S2SV_ModEnd> ( elem.,0
107,"<S2SV_ModStart> i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""expn[%d] <S2SV_blank> = <S2SV_blank> 0x%04x; <S2SV_blank> mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""expn[%d] <S2SV_blank> = <S2SV_blank> 0x%04x; <S2SV_blank> mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""expn[%d] <S2SV_blank> = <S2SV_blank> 0x%04x; <S2SV_blank> mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04",0
108,"<S2SV_ModStart> AV_PIX_FMT_PAL8 ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR",0
109,"<S2SV_ModStart> 1 ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } if ( length >",0
110,"<S2SV_ModStart> noffset, NULL ) ; if ( strncmp ( name, FIT_SIG_NODENAME, strlen ( FIT_SIG_NODENAME ) ) ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) { printf ( "" <S2SV_blank> error!\\n%s <S2SV_blank> for <S2SV_blank> \'%s\' <S2SV_blank> hash <S2SV_blank> node <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> image <S2SV_blank> node\\n"", err_msg, fit_get_name ( fit, noffset, NULL ), fit_get_name ( fit, image_noffset, NULL ) ) ; } else { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) { printf ( "" <S2SV_blank> error!\\n%s <S2SV_blank> for <S2SV_blank> \'%s\' <S2SV_blank> hash <S2SV_blank> node <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> image <S2SV_blank> node\\n"", err_msg, fit_get_name ( fit, noffset, NULL ), fit_get_name ( fit, image_noffset, NULL ) ) ; return - 1 ; }",0
111,"<S2SV_ModStart> rx_kfifo_lock ) ; state -> rx_kfifo. size = CX23888_IR_RX_KFIFO_SIZE ; state -> tx_kfifo. size = CX23888_IR_TX_KFIFO_SIZE ; <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> sd = & <S2SV_ModStart> -> sd ; mutex_init ( & state -> rx_params_lock ) ; default_params = default_rx_params ; v4l2_subdev_call ( sd, ir, rx_s_parameters, & default_params ) ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_tx_params ; v4l2_subdev_call ( sd, ir, tx_s_parameters, & default_params ) ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_tx_params ; v4l2_subdev_call ( sd, ir, tx_s_parameters, & default_params ) ; mutex_init ( & state -> tx_params_lock ) ; ret = cx23888_ir_write4 ( dev,",0
112,"<S2SV_ModStart> * iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> = cfg ; if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) &&! ( iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_",0
113,<S2SV_ModStart> value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
114,"<S2SV_ModStart> ; ipc = rcu_dereference_protected ( net -> ipv4. icmp_cookie, lockdep_is_held ( & net -> ipv4. icmp_cookie, lockdep_is_held ( & net -> ipv4. icmp_cookie ) ) ; if (! ipc ) { ipc = rcu_dereference_protected ( net -> ipv4. icmp_cookie, lockdep_is_held ( & net -> ipv4. icmp_cookie, lockdep_is_held ( & net -> ipv4. icmp_cookie, lockdep_is_held ( & net -> ipv4. icmp_cookie, lockdep_is_held ( & net -> ipv4. icmp_cookie ) ) ) ; ipc = rcu_dereference_protected ( net -> ipv4. icmp_cookie, lockdep_is_held ( & net -> ipv4. icmp_cookie, lockdep_is_held ( & net -> ipv4. icmp_cookie, lockdep_is_held ( & net -> ipv4. icmp_cookie, lockdep_",0
115,<S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_,0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,"<S2SV_ModStart> -> open_flags ) ; p = xdr_reserve_space ( xdr, 28 ) ; if ( p == NULL ) { dprintk ( "" <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
118,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ""modify_bar_registration: <S2SV_blank> bypass <S2SV_blank> for <S2SV_blank> pci-gvt\\n"" ) ; <S2SV_ModEnd> } switch ( <S2SV_ModStart> break ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
119,<S2SV_ModStart> case 0x00 : case 0x01 : case 0x02 : case 0x03 : case 0x06 : case 0x0a : case 0x0b : case 0x0c : case 0x0f : <S2SV_ModStart> case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x91 : case 0x,0
120,"<S2SV_ModStart> return ERROR_INVALID_REQUEST ; if ( osStrchr <S2SV_ModEnd> ( token,",0
121,"<S2SV_ModStart> goto trunc ; if ( lshp -> ls_length < 2 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_router ), lshp -> ls_seq, lshp -> ls_age, lshp -> ls_length ) ) ; goto trunc ; } if ( lshp -> ls_length < sizeof ( struct lsa6_hdr ) ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_seq ), lshp -> ls_age, lshp -> ls_length ) ) ; goto trunc ; }",0
122,<S2SV_ModStart> } else { if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; pipe_buf_mark_unmergeable ( obuf ) ; opipe -> nrbufs ++ ; ibuf -> offset += obuf -> len ; ibuf -> len -= obuf -> len ; } else { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; pipe_buf_mark_unmergeable ( obuf ) ; } else { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; pipe_buf_mark_unmergeable ( obuf ) ; opipe -> nrbufs ++ ; opipe -> curbuf = ( opipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; opipe -> curbuf = ( opipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; opipe -> curbuf = ( opipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; op,0
123,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
124,<S2SV_ModStart> { p_dev -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY (,0
125,"<S2SV_ModStart> costs, vpx_tree <S2SV_ModEnd> * tree, <S2SV_ModStart>, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> c ) { vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> i / 2 ] ; vpx_tree_index ii = tree [ i + b ] ; if ( ii <= 0 ) costs [ - ii ] = cc ; else costs [ - ii ] = cc ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
126,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
127,"<S2SV_ModStart> 0xffff ; err = synth_devs [ dev ] -> load_patch ( dev, fmt, buf, p + 4, c, 0 ) ; if ( err < 0 ) return err ; if ( seq_mode == SEQ_2 ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> 4 <S2SV_blank> byte <S2SV_blank> event <S2SV_blank> in <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> mode\\n"" ) ; return - EINVAL ; } if ( seq_mode == SEQ_2 ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> 2 <S2SV_blank> byte <S2SV_blank> event <S2SV_blank> in <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> mode\\n"" ) ; return - EINVAL ; } if ( seq_mode == SEQ_2 ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> 4 <S2SV_blank> byte <S2SV_blank> event <S2SV_blank> in <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> mode\\n"" ) ; return - EINVAL ; } if ( seq_mode == SEQ_2 ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> 2 <S2SV_blank> byte <S2SV_blank> event <S2SV_blank> in <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> mode\\n"" ) ; return - EINVAL ; } if ( ev_code >= 128",0
128,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fadst16 ( const <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart> s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; int x0 = input [ 15 ] ; int x1 = input [ 0 ] ; int x2 = input [ 13 ] ; int x3 = input [ 4 ] ; int x4 = input [ 5 ] ; int x5 = input [ 6 ] ; int x7 = input [ 7 ] ; int x8 = input [ 8 ] ; int x9 = input [ 9 ] ; int x10 = input [ 12 ] ; int x11 = input [ 10 ] ; int x12 = input [ 11 ] ; int x13 = input [ 12 ] ; int x14 = input [ 1 ] ; int x15 = input [ 14 ] ; s0 = x0 * cospi_1_64 + x1 * cospi",0
129,<S2SV_ModStart> ; # if HAVE_EDSP flags |= HAS_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON flags |= HAS_NEON ; # endif # if HAVE_NEON flags |= HAS_NEON ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON flags |= HAS_NEON ; # endif # if HAVE_NEON,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
131,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> count_segs_sb ( VP9_COMP <S2SV_ModStart> const tile, MODE_INFO * <S2SV_ModEnd> mi_8x8, int <S2SV_ModStart> bsize ) { <S2SV_ModEnd> const VP9_COMMON * <S2SV_ModStart> cm = & cpi <S2SV_ModEnd> -> common ; <S2SV_ModStart> bsize ) { <S2SV_ModEnd> if ( mi_row <S2SV_ModStart> mi_row, mi_col ) ; } else if ( bw < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, hbs, mi_row, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, hbs, mi_row, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts",0
132,<S2SV_ModStart> break ; if (! ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) && clientsArePaused ( ) ) break ;,0
133,"<S2SV_ModStart> = 0 ; if ( ( mpd -> b_state & ( 1 << BH_Mapped ) ) &&! ( mpd -> b_state & ( 1 << BH_Unwritten ) ) ) { ext4_msg ( mpd -> inode -> i_sb, KERN_CRIT, ""delayed <S2SV_blank> block <S2SV_blank> allocation <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> at <S2SV_blank> "" ""logical <S2SV_blank> offset <S2SV_blank> %llu <S2SV_blank> with <S2SV_blank> max <S2SV_blank> blocks <S2SV_blank> "" ""error <S2SV_blank> %d\\n"", mpd -> inode -> i_ino, ( unsigned long long ) next, mpd -> b_size >> mpd -> inode -> i_blkbits, err ) ; ext4_msg ( mpd -> inode -> i_sb, KERN_CRIT, ""delayed <S2SV_blank> block <S2SV_blank> allocation <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> at <S2SV_blank> "" ""logical <S2SV_blank> offset <S2SV_blank> %llu <S2SV_blank> with <S2SV_blank> max <S2SV_blank> blocks <S2SV_blank> %zd <S2SV_blank> with <S2SV_blank> error <S2SV_blank> %d\\n"", mpd -> inode -> i_ino, ( unsigned long long ) next, mpd -> b_size >> mpd -> inode -> i_blkbits,",0
134,"<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> canonnamelen = 0 <S2SV_ModStart> = 0 ; if ( ( p = oe_calloc ( 1, sizeof ( struct oe_addrinfo ) ) ) == NULL ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( p == NULL ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( oe_syscall_getaddrinfo_read_ocall ( & retval, handle, & p -> ai_flags, & p -> ai_family, & p -> ai_socktype, & p -> ai_protocol, & p -> ai_addrlen, NULL, & canonnamelen, NULL )!= OE_OK ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval == - 1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE",0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
136,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
137,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( pegasus_t <S2SV_ModStart> * data ) { int ret ; ret = <S2SV_ModEnd> usb_control_msg ( pegasus <S2SV_ModStart>, PEGASUS_REQ_SET_REGS, 0, indx, data, size, 100 ) ; if ( ret < 0 ) netif_dbg ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d\\n"", __func__, ret ) ; if ( ret < 0 ) netif_dbg ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d\\n"", __func__, ret ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>",0
138,"<S2SV_ModStart> asdl_seq * body <S2SV_ModEnd>, PyArena * <S2SV_ModStart> arena ) { mod_ty * p ; if ( body == NULL ) return NULL ; p = ( mod_ty * ) PyArena_Malloc ( arena, sizeof ( * p ) ) ; if (! p ) PyArena_Free ( arena ) ; p = ( mod_ty ) PyArena_Malloc ( arena, sizeof ( * p ) ) ; if (! p ) return NULL ; p = ( mod_ty ) PyArena_Malloc ( arena, sizeof ( * p ) ) ; if (! p ) return NULL ; <S2SV_ModStart> = body ; p = ( mod_ty ) PyArena_Malloc ( arena, sizeof ( * p ) ) ; if (! p ) return NULL ; p -> v. Module. body = body ; p = ( mod_ty ) PyArena_Malloc ( arena, sizeof ( * p ) ) ; if (! p ) return NULL ; p = ( mod_ty ) PyArena_Malloc ( arena, sizeof ( * p ) ) ; if (! p ) return NULL",0
139,"<S2SV_ModStart> src, int64_t <S2SV_ModEnd> ts_start, int64_t <S2SV_ModStart> >> 4 ; <S2SV_ModEnd> struct lookahead_entry * <S2SV_ModStart> -> write_idx ) ; # if USE_PARTIAL_COPY int row, col, active_end ; # else if ( ctx -> sz + 1 + MAX_PRE_FRAMES > ctx -> max_sz ) return 1 ; ctx -> sz ++ ; buf = pop ( ctx, & ctx -> write_idx ) ; # if USE_PARTIAL_COPY for ( row = 0 ; row < mb_rows ; ++ row ) { col = 0 ; while ( 1 ) { for ( row = 0 ; row < mb_rows ; ++ row ) { col = 0 ; while ( 1 ) { for ( ; col < mb_cols ; ++ col ) { if (! active_map [ col ] ) break ; } active_map += mb_cols ; } } else { vp9_copy_and_extend_frame ( src, & buf -> img ) ; } # else vp9_copy_and_extend_frame ( src, & buf -> img ) ; # endif buf -> ts_start = ts_start ; buf -> ts_end = ts_end ;",0
140,"<S2SV_ModStart> sharpness ; const int min_filter_level = 0 ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( cm -> frame_type == KEY_FRAME ) filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; else filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( method == LPF_PICK_FROM_SUBIMAGE ) { search_filter_level ( sd, cpi, method == LPF_PICK_FROM_SUBIMAGE ) ; } else { search_filter_level ( sd, cpi, method == LPF_PICK_FROM_Q ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
141,<S2SV_ModStart> ; } break ; case BTA_DM_DISABLE_EVT : { BD_NAME bdname ; bt_status_t status ; status = btif_storage_get_adapter_property ( & bdname ) ; if ( status == BT_STATUS_SUCCESS ) { BTA_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } else { BTA_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } break ; case BTA_DM_DISABLE_EVT : { BD_NAME bdname ; bt_status_t status ; status = btif_storage_get_adapter_property ( & bdname ) ; if ( status == BT_STATUS_SUCCESS ) { BTA_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } else { BTA_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } break ; case BTA_DM_DISABLE_EVT : { BD_NAME bdname ; bt_status_t status ; bt_status_,0
142,<S2SV_ModStart> : { int <S2SV_ModEnd> a = getnum,0
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,"<S2SV_ModStart> vpx_codec_err_t res ; memset ( user_priv, 0, sizeof ( void * ) ) ; <S2SV_ModStart> VPX_CODEC_ERROR ; else if ( data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_MAX_DATA_SIZE ; else if ( data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_MAX_DATA_SIZE ; else if ( data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_MAX_DATA_SIZE ; else if ( data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_MAX_DATA_SIZE ; else if ( data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_MAX_DATA_SIZE ; else if ( data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_MAX_DATA_SIZE ;",0
145,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> isofs_read_inode ( struct <S2SV_ModStart> inode ) ; if ( de -> name_len > inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize ) { inode -> i_sb -> s_blocksize = inode -> i_sb -> s_blocksize ; inode -> i_sb -> s_blocksize = inode -> i_sb -> s_blocksize ; } else { inode -> i_sb -> s_blocksize = inode -> i_sb -> s_blocksize ; } if ( de -> name_len > inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize ) { inode -> i_sb -> s_blocksize = inode -> i_sb -> s_blocksize ; inode -> i_sb -> s_blocksize = inode -> i_sb -> s_blocksize ; } else { inode -> i_sb -> s_blocksize = inode -> i_sb -> s_blocksize ; } if ( de -> name_len > inode -> i_sb -> s_blocksize -,0
146,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> k ) ; }",0
147,<S2SV_ModStart> self ) { if ( self -> dict!= NULL ) { Py_CLEAR ( self -> dict ) ; Py_TYPE ( self ) -> tp_free ( self ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
148,"<S2SV_ModStart> ; for ( i = 0 ; a && i < count ; ++ i ) { n = cJSON_CreateString ( strings [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } return a ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
149,"<S2SV_ModStart> ; if ( _PyObject_HasAttrId <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_type_ignores ) ) { int res ; Py_ssize_t len ; Py_ssize_t i ; tmp = _PyObject_GetAttrId ( obj, & PyId_type_ignores ) ; if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } len = PyList_GET_SIZE ( tmp ) ; body = _Ta3_asdl_seq_new ( len, arena ) ; if ( body == NULL ) { PyErr_SetString ( PyExc_RuntimeError, ""Module <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> changed <S2SV_blank> size <S2SV_blank> during <S2SV_blank> iteration"" ) ; goto failed ; } len = PyList_GET_SIZE ( tmp ) ; type_ignores = _PyObject_GetAttrId ( obj, & PyId_type_ignores ) ; if ( tmp == NULL ) { PyErr_SetString ( PyExc_RuntimeError, ""Module <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank>",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,"<S2SV_ModStart> msg ) ; <S2SV_ModEnd> err = verify_compat_iovec <S2SV_ModStart> ( msg_sys, iov, & addr, VERIFY_READ ) ; if ( err < 0 ) goto out_freeiov ; total_len = err ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; err = ( err < 0 ) goto out_freeiov ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; err = ( nosec? sock_recvmsg_nosec : sock_recvmsg_nosec ) ( sock, msg_sys, cmsg_",0
152,"<S2SV_ModStart> inode ) ; struct buffer_head * dibh = bh_map -> b_page <S2SV_ModEnd> ; u64 bn <S2SV_ModStart> unsigned end_of_metadata = <S2SV_ModEnd> height - 1 <S2SV_ModStart> end_of_metadata = height <S2SV_ModEnd> - 1 ; <S2SV_ModStart> end_of_metadata = height <S2SV_ModEnd> - 1 ; <S2SV_ModStart> end_of_metadata = height <S2SV_ModEnd> - 1 ; <S2SV_ModStart> end_of_metadata = height <S2SV_ModEnd> - 1 ; <S2SV_ModStart> end_of_metadata ; } dibh -> b_page = lblock ; dibh -> b_size = bh -> b_size ; dibh -> b_size = bh -> b_size ; gfs2_trans_add_bh ( ip -> i_gl, dibh, 1 ) ; if ( height == ip -> i_height ) { struct buffer_head * bh ; ptr = bh -> b_data ; bh = mp -> mp_bh [ end_of_metadata ] ; dblks = min ( maxlen, ptrs_per_blk - mp -> mp_list [ end_of_metadata ] ; state = ALLOC_DATA ; } else if ( height == ip -> i_height ) { struct buffer_head * bh",0
153,"<S2SV_ModStart> ; fprintf ( stderr, ""Codec <S2SV_blank> interface: <S2SV_blank> %s\\n"", global -> codec -> interface ( ) ) ; fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" <S2SV_ModEnd> ) ; } <S2SV_ModStart> g_h ) ; SHOW ( g_timebase. num ) ; SHOW ( g_timebase. den ) ; SHOW ( g_error_resilient ) ; SHOW ( g_pass ) ; SHOW ( g_lag_in_frames ) ; SHOW ( rc_dropframe_thresh ) ; SHOW ( rc_resize_allowed ) ; SHOW ( rc_resize_up_thresh ) ; SHOW ( rc_resize_down_thresh ) ; SHOW ( rc_end_usage ) ; SHOW ( rc_min_quantizer ) ; SHOW ( rc_max_quantizer ) ; SHOW ( rc",0
154,"<S2SV_ModStart> ; if ( value == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> children <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> are <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } if ( value == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> children <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> are <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } if ( value == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> children <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> are <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } if ( value == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> children <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> """,0
155,"<S2SV_ModStart> 0 ) { <S2SV_ModEnd> fs_logger ( ""clone <S2SV_blank> /etc/skel/.zshrc"" <S2SV_ModStart> 0 ) { <S2SV_ModEnd> fs_logger ( ""clone <S2SV_blank> /etc/skel/.zshrc"" <S2SV_ModStart> 0 ) { <S2SV_ModEnd> fs_logger ( ""clone <S2SV_blank> /etc/skel/.cshrc"" <S2SV_ModStart> 0 ) { <S2SV_ModEnd> fs_logger ( ""clone <S2SV_blank> /etc/skel/.cshrc"" <S2SV_ModStart> 0 ) { <S2SV_ModEnd> fs_logger ( ""clone <S2SV_blank> /etc/skel/.cshrc"" <S2SV_ModStart> ""clone <S2SV_blank> /etc/skel/.cshrc"" <S2SV_ModStart> 0 ) { <S2SV_ModEnd> fs_logger ( ""clone <S2SV_blank> /etc/skel/.cshrc"" <S2SV_ModStart> 0 ) { <S2SV_ModEnd> fs_logger ( ""clone <S2SV_blank> /etc/skel/.cshrc"" <S2SV_ModStart> 0 ) { <S2SV_ModEnd> fs_logger ( ""clone <S2SV_blank> /etc/skel/.cshrc"" <S2SV_ModStart> 0 ) { <S2SV_ModEnd> fs_logger ( ""clone <S2SV_blank> /etc/skel/.cshrc"" <S2SV_ModStart> } } } <S2SV_ModEnd> } free (",0
156,<S2SV_ModStart> msix_tab_size % 4096 <S2SV_ModEnd> == 0 ),0
157,<S2SV_ModStart> ; if ( <S2SV_ModEnd> js_regexec ( re,0
158,"<S2SV_ModStart> case OFreshOID : if ( <S2SV_ModEnd> Int_val ( Field <S2SV_ModStart> 1 ) ) < 0 ) { caml_set_oo_id ( ( value ) dest ) ; } else { caml_set_oo_id ( ( value ) dest ) ; } <S2SV_ModStart> case OFreshOID : if ( Int_val ( Field ( ( value ) dest, 1 ) ) < 0 ) { caml_set_oo_id ( ( value ) dest ) ; } else { caml_set_oo_id ( ( value ) dest ) ; } <S2SV_ModStart> OFreshOID : if ( Int_val ( Field ( ( value ) dest, 1 ) ) < 0 ) { caml_set_oo_id ( ( value ) dest ) ; } <S2SV_ModStart> case OFreshOID : if ( Int_val ( Field ( ( value ) dest, 1 ) ) < 0 ) { caml_set_oo_id ( ( value ) dest ) ; } else { caml_set_oo_id ( ( value ) dest ) ; } <S2SV_ModStart> OFreshOID : if ( Int_val ( Field ( ( value ) dest, 1 ) ) < 0 ) { caml_set_oo_id ( ( value )",0
159,"<S2SV_ModStart> ; ier = ksz8851ReadReg ( interface, KSZ8851_IER ) ; ksz8851WriteReg ( interface, KSZ8851_IER, 0 ) ; isr = ksz8851ReadReg ( interface, KSZ8851_ISR ) ; if ( ( isr & KSZ8851_LCIS )!= 0 ) { ier |= IER_LCIE <S2SV_ModEnd> ; interface -> <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_LCIS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_TXIS <S2SV_ModEnd> ) ; n <S2SV_ModStart> = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
160,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_quantization ( VP9_COMMON <S2SV_ModStart> * cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { return vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
161,"<S2SV_ModStart> msglen ) < 0 ) { BTIF_TRACE_ERROR ( ""failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> (%s)"", strerror ( errno ) ) ; }",0
162,"<S2SV_ModStart> ; if ( ( localrsa = d2i_RSAPublicKey_bio ( rawcert, NULL ) ) == NULL || ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == NULL ) { goto sslerr ; } else if ( ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == NULL ) { goto sslerr ; } else if ( ( localrsa = d2i_RSAPublicKey_bio ( rawcert, NULL ) ) == 1 && ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == NULL || ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == NULL ) { goto sslerr ; } else if ( ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == NULL ) { goto sslerr ; } else if ( ( localrsa = d2i_RSAPublicKey_bio ( rawcert, NULL ) ) == 1 && ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == NULL ) {",0
163,"<S2SV_ModStart> t1_getline ( ) ; if ( strcmp ( t1_buf_array, t1_line_array )!= 0 ) { strcpy ( t1_buf_array, t1_line_array ) ; t1_line_ptr = eol ( t1_buf_array ) ; } else if ( strcmp ( t1_buf_array, t1_line_array )!= 0 ) { strcpy ( t1_buf_array, t1_line_array ) ; strcpy ( t1_line_array, t1_buf_array ) ; t1_line_ptr = eol ( t1_line_array ) ; } else if ( strcmp ( t1_buf_array, t1_line_array )!= 0 ) { strcpy ( t1_buf_array, t1_line_array ) ; t1_line_ptr = eol ( t1_buf_array ) ; t1_line_ptr = eol ( t1_line_array ) ; }",0
164,"<S2SV_ModStart> BLOCK_SIZE bsize, <S2SV_ModEnd> BLOCK_SIZE subsize ) <S2SV_ModStart> subsize ) { <S2SV_ModEnd> int bsl = <S2SV_ModStart> / 4, partition = partition_lookup [ bsl ] <S2SV_ModEnd> [ subsize ] <S2SV_ModStart> case PARTITION_NONE : * get_sb_index ( x, subsize ) = 0 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; break ; case PARTITION_VERT : * get_sb_index ( x, subsize ) = 1 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; break ; case PARTITION_HORZ : * get_sb_index ( x, subsize ) = 0 ;",0
165,"<S2SV_ModStart> ; ret = key_permission_check ( key_ref, KEY_NEED_READ ) ; if ( ret == 0 ) goto can_read_key ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( key -> type -> read ) ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( key -> type -> read ) ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( key -> type -> read ) ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( ret == 0 ) ret = - EOPNOT",0
166,<S2SV_ModStart> u4_first_slice_is_aud ) { if ( u4_length_of_start_code > ps_dec -> u4_max_ofst ) { if ( u4_length_of_start_code > ps_dec -> u4_max_ofst ) { if ( u4_length_of_start_code > ps_dec -> u4_max_ofst ) { if ( u4_length_of_start_code > ps_dec -> u4_max_ofst ) { if ( u4_length_of_start_code > ps_dec -> u4_max_ofst ) { if ( u4_length_of_start_code > ps_dec -> u4_max_ofst ) { if ( u4_length_of_start_code > ps_dec -> u4_max_ofst ) { if ( u4_length_of_start_code > ps_dec -> u4_max_ofst ) { if ( u4_length_of_start_code > ps_dec -> u4_max_ofst ) { ps_dec -> u4_,0
167,"<S2SV_ModStart> var_off ) ; if (! src_known ||! dst_known ) { return - EINVAL ; } <S2SV_ModEnd> switch ( opcode <S2SV_ModStart> case BPF_ADD : if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } break ; case BPF_SUB : if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S",0
168,"<S2SV_ModStart> ; if ( cifs_sb -> mnt_cifs_flags & CIFS_MOUNT_POSIX_PATHS ) { cFYI ( 1, ""parent <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode, direntry -> d_name. name, direntry ) ; rc = - EPERM ; goto lookup_out ; }",0
169,<S2SV_ModStart> -> opt. <S2SV_ModEnd> rcv_wscale = rcu_dereference_protected <S2SV_ModStart> -> opt. <S2SV_ModEnd> rcv_wscale = rcu_dereference_protected <S2SV_ModStart> -> opt. <S2SV_ModEnd> rcv_wscale = rcu_dereference_protected <S2SV_ModStart> -> opt. <S2SV_ModEnd> rcv_wscale = rcu_dereference_protected <S2SV_ModStart> -> opt. <S2SV_ModEnd> rcv_wscale = rcu_dereference_protected <S2SV_ModStart> -> opt. <S2SV_ModEnd> rcu_wscale = rcu_dereference_protected <S2SV_ModStart> rcu_wscale = rcu_dereference_protected <S2SV_ModStart> -> opt. <S2SV_ModEnd> rcv_wscale = rcu_dereference_protected <S2SV_ModStart> -> opt. <S2SV_ModEnd> rcv_wscale = rcu_dereference_protected <S2SV_ModStart> -> opt. <S2SV_ModEnd> rcv_wscale = rcu_dereference_protected,0
170,"<S2SV_ModStart> svc_ctx ) { SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> svc_ctx ) ; SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> -> encode_frame_count ; SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> -> encode_frame_count ; SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> = get_svc_internal ( <S2SV_ModEnd> svc_ctx ) ; <S2SV_ModStart> ; if ( si == NULL ) return NULL ; svc_log_reset ( svc_ctx ) ; number_of_keyframes = encode_frame_count / si -> kf_dist + 1 ; for ( i = 0 ; i < si -> layers ; ++ i ) { number_of_keyframes -= number_of_keyframes ; } svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes=[%u]\\n"", i, ( double ) si -> psnr_sum [ i ] [ 0 ], ( double ) si -> psnr_sum [ i ] [",0
171,"<S2SV_ModStart> new_cols ; if ( screen -> buffers [ 1 ] ) screen -> buffers [ 1 ] = realloc_buffer ( screen, screen -> buffers [ 1 ], new_rows, new_cols ) ; if ( screen -> buffers [ 0 ] ) screen -> buffers [ 0 ] = realloc_buffer ( screen, screen -> buffers [ 0 ], new_rows, new_cols ) ; if ( screen -> buffers [ 1 ] ) screen -> buffers [ 1 ] = realloc_buffer ( screen, screen -> buffers [ 1 ], new_rows, new_cols ) ; screen -> buffers [ 1 ] = realloc_buffer ( screen, screen -> buffers [ 1 ], new_rows, new_cols ) ; if ( screen -> buffers [ 0 ] ) screen -> buffers [ 0 ] = realloc_buffer ( screen, screen -> buffers [ 0 ], new_rows, new_cols ) ; if ( screen -> buffers [ 1 ] ) screen -> buffers [ 1 ] = realloc_buffer ( screen, screen -> buffers [ 1 ], new_rows, new_cols ) ; screen -> buffers [ 1 ] = realloc_buffer ( screen, screen -> buffers [ 1 ], new_rows",0
172,<S2SV_ModStart> { const char * literal_start = * str ; const char * literal_end = * str ; int in_named_escape = 0 ; int result = 0 ; assert ( * literal == NULL ) ; for ( ; * str < end ; ( * str ) ++ ) { char ch = * * str ; if (! in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( <S2SV_ModEnd> ch == '{' <S2SV_ModStart> == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '{' || ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1,0
173,"<S2SV_ModStart> = create_dump_dir_from_problem_data ( <S2SV_ModEnd> pd, g_settings_dump_location",0
174,<S2SV_ModStart> ; if ( ( x1 + w1 ) > ( ptr -> width - w1 ) ) { if ( ( y1 + h1 ) > ( ptr -> height - h1 ) ) { if ( ( x1 + w1 ) > ( ptr -> width - w1 ) ) { if ( ( y1 + h1 ) > ( ptr -> height - h1 ) ) { if ( ( x1 + w1 ) > ( ptr -> width - w1 ) ) { if ( ( x1 + w1 ) > ( ptr -> width - w1 ) ) { if ( ( y1 + h1 ) > ( ptr -> height - h1 ) ) { if ( ( x1 + w1 ) > ( ptr -> width - w1 ) ) { if ( ( y1 + h1 ) > ( ptr -> height - h1 ) ) { if ( ( x1 + w1 ) > ( ptr -> width - w1 ) ) { if ( ( x1 + w1 ) > ( ptr -> width - w1 ) ) { if ( ( y1 + h1 ) > ( ptr -> height - h1 ) ) { if ( ( x1 + w1 ) > ( ptr,0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> length <S2SV_blank> for <S2SV_blank> l2tp_proxy_auth_id_print"" ) ) ; return ; } if ( length < 2 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> length <S2SV_blank> for <S2SV_blank> l2tp_proxy_auth_id_print"" ) ) ; return ; }",0
176,"<S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd>, in_what_stride, <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd>, in_what_stride, <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd>, in_what_stride, <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd>, in_what_stride, <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd>, in_what_stride, <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd>, in_what_stride, <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd>, in_what_stride, <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd>, in_what_stride, <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd>, in_what_stride, <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd>, in_what_stride,",0
177,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col, <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd> ) { int <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd> ; MODE_INFO * <S2SV_ModStart> MODE_INFO * * prev_mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> -> mi_grid_visible + idx_str <S2SV_ModEnd> ; BLOCK_SIZE bsize <S2SV_ModStart> BLOCK_SIZE bsize ; cpi -> mb. source_variance = UINT_MAX ; vp9_zero ( cpi -> mb. pred_mv ) ; switch ( cpi -> sf. partition_search_type ) { case VAR_BASED_PARTITION : choose_partitioning ( cpi, tile, mi_row, mi_col ) ; nonrd_use_partition ( cpi, tile, mi_row, mi_col, BLOCK_64X64, & dummy_rate, & dummy_dist ) ; break ; case SOURCE_VAR_BASED_PARTITION : set_offsets ( cpi, tile, mi_row, mi_col, BLOCK_64X64 ) ; set_source_",0
178,"<S2SV_ModStart> ; dh = skb_header_pointer <S2SV_ModEnd> ( skb,",0
179,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> * optp, u32 <S2SV_ModEnd> optlen ) { <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ <S2SV_ModEnd> ] = IPOPT_END",0
180,"<S2SV_ModStart> ; if ( connection == NULL || strlen ( connection ) < 1 ) goto error ; else { bool found_upgrade = false ; int count ; sds * tokens = sdssplitlen ( connection, strlen ( connection ), "","", 1, & count ) ; if ( tokens == NULL ) goto error ; if ( count < 1 ) goto error ; for ( i = 0 ; i < count ; i ++ ) { sds token = tokens [ i ] ; sdstrim ( token, "" <S2SV_blank> "" ) ; if ( strcasecmp ( token, ""Upgrade"" ) == 0 ) { found_upgrade = true ; break ; } } else { bool found_upgrade = false ; int count ; sds * tokens = sdssplitlen ( connection, strlen ( connection ), "","", 1, & count ) ; if ( tokens == NULL ) goto error ; for ( i = 0 ; i < count ; i ++ ) { sds token = tokens [ i ] ; sdstrim ( token, "" <S2SV_blank> "" ) ; if ( strcasecmp ( token, ""Upgrade"" ) == 0 ) { found_upgrade = true ; break ; } } sdsfreesplitres ( tokens, count ) ; if (! found_upgrade )",0
181,<S2SV_ModStart> * findalldevs_if ; <S2SV_ModEnd> if ( rpcapd_discard <S2SV_ModStart> 0 ; } if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { return - 1 ; } <S2SV_ModStart> -> description ) { if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { return - 1 ; } <S2SV_ModStart> -> name ) { if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { return - 1 ; } <S2SV_ModStart> -> description ) { if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { return - 1 ; } <S2SV_ModStart> -> description ) { if ( plen < sizeof ( struct rpcap_sockaddr ) ) { if ( plen < sizeof ( struct rpcap_sockaddr ) ) { return - 1 ; } <S2SV_ModStart> -> name ) { if ( plen < sizeof ( struct rpcap_sockaddr ) ) { if ( plen < sizeof ( struct rpcap_sockaddr ) ) { if ( plen < sizeof ( struct rpcap_sockaddr ) ) { return - 1 ; } <S2SV_ModStart> -> addresses ) { if ( plen < sizeof ( struct rpcap_sockaddr ),0
182,"<S2SV_ModStart> ; struct dump_dir * <S2SV_ModEnd> dd = dd_create <S2SV_ModStart> DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } dd_create_basic_files ( dd, client_uid, NULL ) ; dd_save_text ( dd, FILENAME_ABRT_VERSION, VERSION ) ; dd_save_text ( dd, FILENAME_UID, uid_str ) ; g_hash_table_iter_next ( & iter, & gpkey, & gpvalue ) ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } dd_create_basic_files ( dd, client_uid, NULL ) ; dd_save_text ( dd, FILENAME_UID, uid_str ) ; g_hash_table_destroy ( problem_info ) ; g_hash_table_iter_init ( & iter, problem_info ) ; while ( g_hash_table_iter_next ( & iter, & gpkey, & gpvalue ) ) {",0
183,"<S2SV_ModStart> ; x < ( ( ssize_t ) image -> columns - 7 ) && x < ( ( ssize_t ) image -> columns - 1 ) && x < image -> columns ; x += 2 ) { index = ConstrainColormapIndex ( image, ( * p >> 6 ) & 0x3 ) ; SetPixelIndex ( indexes + x, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 8 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 8 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80",0
184,"<S2SV_ModStart> { BN_ULONG t1 = 0 ; BN_ULONG t2 = 0 ; BN_ULONG c1, c2, c3 ; c1 = 0 ; c2 = 0 ; sqr_add_c ( a, 0, c1, c2 ) ; sqr_add_c2 ( a, 1, c2, c3 ) ; r [ 2 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 0, c1, c2 ) ; r [ 1 ] = c2 ; c2 = 0 ; sqr_add_c ( a, 2, c2, c3 ) ; r [ 3 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 3, 0, c1, c2 ) ; sqr_add_c2 ( a, 4, 1, c2, c3 ) ; r [ 5 ] = c2 ; c2 = 0 ; sqr_add_c ( a, 5, 0, c1, c2 ) ; r [ 6 ] = c1 ; c1 = 0 ; sqr_add_c ( a,",0
185,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
186,"<S2SV_ModStart> len ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> %u)"", len ) ) ; return ; } <S2SV_ModEnd> ND_TCHECK ( bp <S2SV_ModStart> len ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> %u)"", len ) ) ; return ; } <S2SV_ModStart> len ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> %u)"", len ) ) ; return ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> %u)"", len ) ) ; return ; } <S2SV_ModStart> len ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> %u)"", len ) ) ; return ; } <S2SV_ModStart> len ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> %u)"", len ) ) ; return ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> %u)"", len ) ) ; return ; }",0
187,"<S2SV_ModStart> ; if ( ptrace_has_cap ( task_cred ( task ) -> user_ns, mode ) ) { rcu_read_unlock ( ) ; return - EPERM ; } <S2SV_ModEnd> rcu_read_unlock ( )",0
188,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
189,<S2SV_ModStart> = 1 ; ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; <S2SV_ModStart> = 1 ; ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; <S2SV_ModStart> = 1 ; ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; <S2SV_ModStart> = 1 ; ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; <S2SV_ModStart> = 1 ; ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; ps_parse -> s_sei_,0
190,"<S2SV_ModStart> -> per_sdma ) { kfree ( tmp_sdma_rht ) ; tmp_sdma_rht = kzalloc ( sizeof ( * tmp_sdma_rht ), GFP_KERNEL ) ; if (! tmp_sdma_rht ) { kfree ( tmp_sdma_rht ) ; tmp_sdma_rht = kzalloc ( sizeof ( * tmp_sdma_rht ), GFP_KERNEL ) ; kfree ( tmp_sdma_rht ) ; tmp_sdma_rht = kzalloc ( sizeof ( * tmp_sdma_rht ), GFP_KERNEL ) ; if (! tmp_sdma_rht ) { kfree ( tmp_sdma_rht ) ; tmp_sdma_rht = kzalloc ( sizeof ( * tmp_sdma_rht ), GFP_KERNEL ) ; kfree ( tmp_sdma_rht ) ; } kfree ( tmp_sdma_rht ) ; kfree ( tmp_sdma_rht ) ; kfree ( tmp_sdma_r",0
191,"<S2SV_ModStart> int rep_quick ) { <S2SV_ModEnd> DBUG_ENTER ( ""mi_repair_parallel"" <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; if (! ( param -> testflag & T_UNPACK ) ) { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; } <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; if (! ( param -> testflag & T_SILENT ) ) { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; } <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n""",0
192,"<S2SV_ModStart> ) ; } if ( pcount > HSTORE_MAX_PAIRS ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, HSTORE_MAX_PAIRS ) ) ) ;",0
193,"<S2SV_ModStart> val ) ; if (! strcmp ( var, ""command"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> command"", r -> name ) ; if (! strcmp ( var, ""rspfile"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if (! strcmp ( var, ""rspfile_content"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if ( hasrspfile!= hasrspcontent ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if ( hasrspfile!= hasrspcontent ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ;",0
194,"<S2SV_ModStart> case 'Q' : if ( 3 == b - c -> buf && 0 == strncmp ( ""GET"", c -> buf, 3 ) ) { method = AGOO_GET ; } else if ( 4 == b - c -> buf && 0 == strncmp ( ""PUT"", c -> buf, 4 ) ) { method = AGOO_PUT ; } else if ( 4 == b - c -> buf && 0 == strncmp ( ""POST"", c -> buf, 4 ) ) { method = AGOO_POST ; } else if ( 0 == strncmp ( ""POST"", c -> buf, 4 ) ) { method = AGOO_POST ; } else if ( 4 == b - c -> buf && 0 == strncmp ( ""PUT"", c -> buf, 4 ) ) { method = AGOO_PUT ; } else if ( 4 == b - c -> buf && 0 == strncmp ( ""PUT"", c -> buf, 4 ) ) { method = AGOO_POST ; } else if ( 0 == strncmp ( ""POST"", c -> buf, 4 ) ) { method = AGOO_POST ;",0
195,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> vp9_fht16x16_c ( const <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> stride ) ; } else { int i, j ; int16_t temp_in [ 16 ] ; int16_t temp_out [ 16 ] ; const transform_2d ht = FHT_16 [ tx_type ] ; for ( i = 0 ; i < 16 ; ++ i ) { for ( j = 0 ; j < 16 ; ++ j ) outptr [ j * 16 + i ] = ( temp_out [ j ] + 1 + ( temp_out [ j ] < 0 ) ) >> 2 ; } for ( i = 0 ; i < 16 ; ++ i ) { for ( j = 0 ; j < 16 ; ++ j ) temp_in [ j ] = input [ j * stride + i ] * 4 ;",0
196,"<S2SV_ModStart> ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( tmpfile_name ) ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ;",0
197,"<S2SV_ModStart> ; char * temp_filename <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } for ( const list_node_t * node = list_begin ( config -> sections ) ; node!= list_end ( config ->",0
198,"<S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
199,"<S2SV_ModStart> userData, ctxt -> curPos, ctxt -> curPos <S2SV_ModStart>, target, ctxt -> curPos, ctxt -> curPos <S2SV_ModStart>, target, ctxt -> curPos, ctxt -> curPos <S2SV_ModStart>, target, ctxt -> curPos, ctxt -> curPos <S2SV_ModStart>, target, ctxt -> curPos, ctxt -> curPos <S2SV_ModStart>, target, ctxt -> curPos, ctxt -> curPos <S2SV_ModEnd> ) ; ctxt",0
200,"<S2SV_ModStart> ; int rv = Socket_print ( S, ""%s <S2SV_blank> HTTP/1.0\\r\\n"" <S2SV_ModEnd> ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" <S2SV_ModStart> ""Content-Length: <S2SV_blank> %d\\r\\n"" ""%s"" ""\\r\\n"" ""%s"" <S2SV_ModEnd>, request,",0
201,"<S2SV_ModStart> 1 ) ; } if ( is_link ( dest ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> symbolic <S2SV_blank> link\\n"", dest ) ; exit ( 1 ) ; } <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> chown ( dest <S2SV_ModStart> ( dest, S_IRUSR | S_IWUSR ) < 0 ) errExit ( ""chmod"" ) ; unlink ( src ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
202,<S2SV_ModStart> flags ) ; wait_for_completion ( & fcomp. comp ) ; hstats -> seconds_since_last_reset = fcstats -> fc. secs_reset ; hstats -> tx_frames = fcstats -> fc. tx_frames ; hstats -> tx_words = fcstats -> fc. tx_words ; hstats -> nos_count = fcstats -> fc. nos_count ; hstats -> lip_count = fcstats -> fc. lip_count ; hstats -> nos_count = fcstats -> fc. nos_count ; hstats -> error_frames = fcstats -> fc. error_frames ; hstats -> dumped_frames = fcstats -> fc. dumped_frames ; hstats -> dropped_frames = fcstats -> fc. dropped_frames ; hstats -> link_failure_count = fcstats -> fc. link_failures ; hstats -> loss_of_sync_count = fcstats -> fc. loss_of_syncs ; hstats -> link_failure_count = fcstats -> fc. link_failures ; hstats -> link_failure_count = fcstats -> fc. link_failures ; hstats -> loss_of_syncs =,0
203,"<S2SV_ModStart> value ) { value -> x = MinF ( 1.0f, MaxF ( 0.0f, value -> x ) ) ; value -> y = MinF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; value -> z = MinF ( 1.0f, MaxF ( 0.0f, value -> z ) ) ; value -> w = MinF ( 1.0f, MaxF ( 0.0f, value -> w ) ) ; value -> y = MinF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; value -> z = MinF ( 1.0f, MaxF ( 0.0f, value -> z ) ) ; value -> w = MinF ( 1.0f, MaxF ( 0.0f, value -> w ) ) ; value -> w = MinF ( 1.0f, MaxF ( 0.0f, value -> w ) ) ; value -> y = MaxF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; value -> w = MinF ( 1.0f, MaxF ( 0",0
204,<S2SV_ModStart> -> sasl_mechanism ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ;,0
205,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
206,"<S2SV_ModStart>, o, datao ; if ( CHECKOVERFLOW ( 6 + n -> offset, 2 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + 6, n -> order ) ; datao += 2 ; exif_mnote_data_canon_clear ( n ) ; n -> entries = exif_mem_alloc ( ne -> mem, sizeof ( MnoteCanonEntry ) * c ) ; if (! n -> entries ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; }",0
207,<S2SV_ModStart> ; if ( ( param -> testflag & ( T_DESCRIPT | T_READONLY ) ) || ( ( param -> testflag & ( T_DESCRIPT | T_READONLY ) )? HA_OPEN_IGNORE_IF_LOCKED : ( param -> testflag & T_DESCRIPT )? HA_OPEN_ABORT_IF_LOCKED : ( ( param -> testflag & T_DESCRIPT )? HA_OPEN_IGNORE_IF_LOCKED : ( param -> testflag & T_DESCRIPT )? HA_OPEN_ABORT_IF_LOCKED : ( param -> testflag & ( T_DESCRIPT | T_READONLY ) )? HA_OPEN_WAIT_FOREVER : ( param -> testflag & T_WAIT_FOREVER )? HA_OPEN_WAIT_IF_LOCKED : ( param -> testflag & T_DESCRIPT )? HA_OPEN_IGNORE_IF_LOCKED : ( param -> testflag & T_DESCRIPT )? HA_OPEN_ABORT_IF_LOCKED : ( param -> testflag & ( T_DESCRIPT | T_READONLY ) )? HA_OPEN_ABORT_IF_,0
208,"<S2SV_ModStart> len ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> unsigned long hex ; CURLcode res <S2SV_ModEnd> ; if ( <S2SV_ModStart> CURL_convert_from_network ( handle <S2SV_ModEnd>, & in <S2SV_ModStart> 1 ) ; if (! res ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ; return ns ; } if ( alloc < 0 ) { free ( ns ) ; return NULL ; } ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ; return NULL ; } ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ; if ( olen ) { free ( ns ) ; return NULL ; } ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ; return ns ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
209,"<S2SV_ModStart> 4 ) ; RAnalOp next_op ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; ESIL_A ( ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""?{,%"" PFMT64d "",pc,=,},"", next_op. jump ) ; ESIL_A ( ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""?{,%"" PFMT64d "",pc,=,},"",",0
210,"<S2SV_ModStart> -> pdu_free_state_ref = usm_free_usmStateReference ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, free_engineID, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, free_engineID, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, free_engineID, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_",0
211,<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) {,0
212,"<S2SV_ModStart> ] ; # ifdef NETSNMP_NO_WRITE_SUPPORT switch ( action ) { case MODE_SET_RESERVE1 : if ( var_val_type!= ASN_INTEGER ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> type <S2SV_blank>!= <S2SV_blank> int\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= 1 ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; }",0
213,<S2SV_ModStart> } case 3 : { CheckNumberPixels ( 4 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 5 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 3 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >>,0
214,"<S2SV_ModStart> timer ) ; mutex_unlock ( & register_mutex ) ; list_for_each_entry_safe ( slave, tmp, & timeri -> slave_list_head, open_list ) { spin_lock_irq ( & slave_active_lock ) ; _snd_timer_stop ( slave, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail ( & slave -> open_list, & snd_timer_slave_list ) ; } spin_unlock_irq ( & slave_active_lock ) ; list_for_each_entry_safe ( slave, tmp, & timeri -> slave_list_head, open_list ) { spin_lock_irq ( & slave_active_lock ) ; _snd_timer_stop ( slave, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail ( & slave -> open_list, & snd_timer_slave_list ) ; slave -> timer = NULL ; } spin_unlock_irq ( & slave_active_lock ) ; mutex_unlock ( & register_mutex ) ; list_del ( & slave",0
215,"<S2SV_ModStart> -> u1_dpb_commands_read ) { i_temp = ps_pps -> u1_pic_init_qp + ih264d_sev ( pu4_bitstrm_ofst, pu4_bitstrm_buf ) ; if ( i_temp < 0 ) return ERROR_INV_RANGE_QP_T ; i_temp = ps_pps -> u1_pic_init_qp + ih264d_uev ( pu4_bitstrm_ofst, pu4_bitstrm_buf ) ; COPYTHECONTEXT ( ""SH: <S2SV_blank> disable_deblocking_filter_idc"", u4_temp ) ; if ( ps_pps -> u1_deblocking_filter_parameters_present_flag == 1 ) { u4_temp = ih264d_uev ( pu4_bitstrm_ofst, pu4_bitstrm_buf ) ; COPYTHECONTEXT ( ""SH: <S2SV_blank> disable_deblocking_filter_idc"", u4_temp ) ; if ( u4_temp > SLICE_BOUNDARY_DBLK_DISABLED ) { return ERROR_",0
216,<S2SV_ModStart> { int_fast32_t widthOverflow = ( uint_fast32_t ) ( gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ) ; int_fast32_t heightOverflow = ( uint_fast32_t ) ( gifFilePtr -> Image. Height * gifFilePtr -> Image. Width ) ; if ( widthOverflow > 0 || heightOverflow > 0 ) { gifFilePtr -> SWidth += widthOverflow ; gifFilePtr -> SHeight += heightOverflow ; } if ( decode ) { int_fast32_t widthOverflow = ( gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ) ; int_fast32_t heightOverflow = ( uint_fast32_t ) ( gifFilePtr -> Image. Height * gifFilePtr -> Image. Width ) ; if ( heightOverflow > 0 ) { uint_fast32_t newRasterSize = ( uint_fast32_t ) ( gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ) ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { uint_fast32_t newRasterSize = ( uint_fast32,0
217,"<S2SV_ModStart> || cherokee_buffer_is_empty ( <S2SV_ModEnd> & conn -> <S2SV_ModStart> user ) ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; ret = validate_dn ( props, dn, conn -> validator -> passwd. buf ) ; if ( ret!= ret_ok ) return ret ; re = ldap_count_entries ( ldap -> conn, message ) ; if ( re!= 1 ) { ldap_msgfree ( message ) ; return ret_not_found ; } first = ldap_first_entry ( ldap -> conn, message ) ; if ( first == NULL ) { ldap_msgfree ( message ) ; return ret_not_found ; } dn = ldap_get_dn ( ldap -> conn, first ) ; if ( dn == NULL ) { ret_error ; } ldap_msgfree ( message ) ; ret = validate_dn ( props, dn, conn -> validator -> passwd. buf ) ; if ( ret!= ret_ok ) return ret_error ; ret = validate_dn ( props, dn, conn",0
218,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> has <S2SV_blank> no <S2SV_blank> bus <S2SV_blank> info\\n"", __func__, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",0
219,"<S2SV_ModStart> ; rdsdebug ( ""size <S2SV_blank> %zu <S2SV_blank> flags <S2SV_blank> 0x%x <S2SV_blank> timeo <S2SV_blank> %ld\\n"" <S2SV_ModEnd>, size, <S2SV_ModStart>, timeo ) ; msg -> msg_namelen = sizeof ( * sin ) ;",0
220,<S2SV_ModStart> 0 ) { const char * t = ++ s ; while ( * t &&! isspace ( * t ) ) t ++ ; if ( * s == '/' ) { const char * t = ++ s ; while ( * t &&! isspace ( * t ) ) t ++ ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t,0
221,"<S2SV_ModStart>. active_set ; if ( uipc_main. read_set < 0 ) { BTIF_TRACE_EVENT ( ""select <S2SV_blank> timeout"" ) ; continue ; } if ( uipc_main. read_set < 0 ) { BTIF_TRACE_EVENT ( ""select <S2SV_blank> failed <S2SV_blank> %s"", strerror ( errno ) ) ; continue ; } if ( uipc_main. read_set < 0 ) { BTIF_TRACE_EVENT ( ""select <S2SV_blank> failed <S2SV_blank> %s"", strerror ( errno ) ) ; continue ; } if ( uipc_main. read_set < 0 ) { BTIF_TRACE_EVENT ( ""select <S2SV_blank> failed <S2SV_blank> %s"", strerror ( errno ) ) ; continue ; } if ( uipc_main. read_set < 0 ) { BTIF_TRACE_EVENT ( ""select <S2SV_blank> failed <S2SV_blank> %s"", strerror ( errno ) ) ; continue ; } if ( uipc_main. read_set < 0 ) { BTIF_TRACE_EVENT ( ""select <S2SV_blank> failed <S2SV_blank> %s"", strerror ( errno ) ) ; continue ; }",0
222,"<S2SV_ModStart> struct msixcap msixcap ; if ( msgnum < 1 || msgnum > MAX_MSIX_TABLE_ENTRIES ) { return - EINVAL ; } <S2SV_ModEnd> pci_msix_table_init ( dev <S2SV_ModStart> ) ; pci_populate_msixcap ( & msixcap, msgnum, barnum, tab_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pb",0
223,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
224,"<S2SV_ModStart> NULL ) goto cleanup ; if ( X509_get_issuer_name ( kdc_cert ) == NULL ) { retval = KRB5KDC_ERR_PREAUTH_FAILED ; goto cleanup ; } status = X509_NAME_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) { retval = KRB5KDC_ERR_PREAUTH_FAILED ; goto cleanup ; } retval = 0 ; cleanup : if ( X509_get_issuer_name ( kdc_cert ) == NULL ) { retval = KRB5KDC_ERR_PREAUTH_FAILED ; goto cleanup ; } status = X509_NAME_cmp ( X509_get_issuer_name ( kdc_cert ), is -> issuer ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) * valid_kdcPkId = 1 ; } retval = 0 ; cleanup : if ( is == NULL ) { retval = KRB5KDC_ERR_PREAUTH_FAILED ; goto cleanup ; }",0
225,<S2SV_ModStart> <S2SV_null> <S2SV_null> static TX_MODE <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart> * cpi ) { <S2SV_ModEnd> return ONLY_4X4 ; <S2SV_ModStart> else if ( cpi -> sf. <S2SV_ModEnd> tx_size_search_method == USE_LARGESTALL <S2SV_ModStart> == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ]? ALLOW_32X32 : TX_MODE_SELECT ; } else if ( cpi -> sf. <S2SV_ModEnd> tx_size_search_method == USE_LARGESTALL <S2SV_ModStart> == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X,0
226,"<S2SV_ModStart> case CF_MINIMUM : magfact = min ( magfact, im -> gdes [ vidx ]. data [ ii ] ) ; break ; case CF_MAXIMUM : magfact = max ( magfact, im -> gdes [ vidx ]. data [ ii ] ) ; break ; case CF_FAILURES : <S2SV_ModStart> case CF_MAXIMUM : magfact = max ( magfact, im -> gdes [ vidx ]. data [ ii ] ) ; break ; case CF_MINIMUM : magfact = min ( magfact, im -> gdes [ vidx ]. data [ ii ] ) ; break ; case CF_MAXIMUM : magfact = max ( magfact, im -> gdes [ vidx ]. data [ ii ] ) ; break ; case CF_MAXIMUM : printval = max ( printval, im -> gdes [ vidx ]. data [ ii ] ) ; break ; case CF_MINIMUM : printval = min ( printval, im -> gdes [ vidx ]. data [ ii ] ) ; break ; case CF_MINIMUM : printval = min ( printval, im -> gdes [ vidx ]. data [ ii ] ) ;",0
227,<S2SV_ModStart> b ; if ( buf1 -> size > buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 0 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 0 ; } else if ( buf1 -> size == buf2 -> size ) { return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
228,"<S2SV_ModStart> info ) + size ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) { info = vmalloc ( sz ) ; if (! info ) return NULL ; } else { info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) return NULL ; }",0
229,"<S2SV_ModStart> ; if (! net_eq ( net, & init_net ) ) return - EAFNOSUPPORT ; switch ( sock -> type ) { case SOCK_DGRAM : if ( protocol == 0 || protocol == PF_AX25 ) return - ESOCKTNOSUPPORT ; break ; # ifdef CONFIG_INET case AX25_P_ARP : case AX25_P_IP : # endif # ifdef CONFIG_NETROM_MODULE case AX25_P_NETROM : if ( ax25_protocol_is_registered ( AX25_P_NETROM ) ) return - ESOCKTNOSUPPORT ; break ; # endif # ifdef CONFIG_ROSE_MODULE case AX25_P_ROSE : if ( ax25_protocol_is_registered ( AX25_P_ROSE ) ) return - ESOCKTNOSUPPORT ; break ; # endif # ifdef CONFIG_NETROM_MODULE case AX25_P_NETROM : if ( ax25_protocol_is_registered ( AX25_P_NETROM ) ) return - ESOCKTNOSUPPORT ; break ; # endif # ifdef CONFIG_ROSE_MODULE",0
230,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
231,"<S2SV_ModStart> b ) ; if ( b -> manager -> event ) r = sd_event_add_io ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } r = sd_event_add_io ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } log_info ( ""Watching <S2SV_blank> system <S2SV_blank> buttons <S2SV_blank> on <S2SV_blank> /dev/input/%s <S2SV_blank> (%s)"", b -> name, name ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } log_info ( ""Watching <S2SV_blank> system <S2SV_blank> buttons <S2SV_blank> on <S2SV_blank> /dev/input/%s <S2SV_blank> (%",0
232,<S2SV_ModStart> ( errors ) return TEST_ERR_MAJOR_BAD ; else return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
233,<S2SV_ModStart> -> lun ) { list_del_init ( & cmd -> eh_entry ) ; scsi_dma_unmap ( cmd ) ;,0
234,"<S2SV_ModStart>, end_col_offset ; if ( TYPE ( CHILD ( n, name_i + 1 ) )!= TYPE_FUNCTION ) { if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; name_i += 2 ; } body = ast_for_suite ( c, CHILD ( n, name_i + 3 ) ) ; if (! body ) return NULL ; get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; if ( is_async ) return AsyncFunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n0 ), n0 -> n_col_offset, end_lineno, end_col_offset, c -> c_arena ) ; else return FunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n0 ), n0 -> n_col_offset, end_lineno, end_col_offset, c -> c",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,"<S2SV_ModStart>, <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
237,,1
238,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
239,"<S2SV_ModStart> : if ( position < 0 || position >= SIGNED_SIZEOF ( psf -> header ) ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; break ; } <S2SV_ModEnd> ; if ( <S2SV_ModStart> > psf -> header ) ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; break ; } ; <S2SV_ModStart> > psf -> header ) ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; break ; } ; <S2SV_ModStart> > psf -> header ) ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; break ; } <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> > psf -> header ) ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; break ; } <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> > psf -> header ) ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n",0
240,<S2SV_ModStart> u4_ofst ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
241,<S2SV_ModStart> off ) ; if ( line -> type == MD_LINE_BLANK ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 1 ; ctx -> last_line_has_list_loosening_effect = 0 ; } else if ( line -> type == MD_LINE_BLANK ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 1 ; } else if ( line -> type == MD_LINE_BLANK ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 1 ; ctx -> last_line_has_list_loosening_effect = 0 ; } else if ( line -> type == MD_LINE_BLANK ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 0 ; } else if ( line -> type == MD_LINE_BLANK ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list,0
242,<S2SV_ModStart> event ) { <S2SV_ModEnd> struct task_struct * <S2SV_ModStart> -> state = PERF_EVENT_STATE_OFF <S2SV_ModEnd> ; } raw_spin_unlock_irq,0
243,<S2SV_ModStart> -> post_proc_flag ; # if CONFIG_POSTPROC_VISUALIZER flags -> color_ref_frame_flag = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_display_mv_flag? VP9D_DEBUG_DRAW_MV : 0 ) ; # endif <S2SV_ModStart> noise_level ; # if CONFIG_POSTPROC_VISUALIZER flags -> display_ref_frame_flag = ctx -> dbg_color_ref_frame_flag ; flags -> display_mb_modes_flag = ctx -> dbg_color_mb_modes_flag ; flags -> display_b_modes_flag = ctx -> dbg_color_b_modes_flag ; flags -> display_mv_flag = ctx -> dbg,0
244,"<S2SV_ModStart> = 0 ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6 ) ) ; goto trunc ; } <S2SV_ModStart> = 0 ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg6 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6 ) ) ; ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6 ) ) ) ; ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6 ) )",0
245,"<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> 0 ; # if HAVE_NEON if ( cm -> cpu_caps & HAS_NEON ) # endif { vp8_push_neon ( store_reg ) ; } # endif vpx_usec_timer_start ( & timer ) ; if ( sd -> y_width!= cpi -> oxcf. Width || sd -> y_height!= cpi -> oxcf. Height ) { assert ( cpi -> oxcf. lag_in_frames < 2 ) ; dealloc_raw_frame_buffers ( cpi ) ; } if ( vp8_lookahead_push ( cpi -> lookahead, sd, time_stamp, end_time, frame_flags, cpi -> active_map_enabled? cpi -> active_map : NULL ) ) res = - 1 ; if ( vp8_lookahead_push ( cpi -> lookahead, sd, time_stamp, end_time, frame_flags, NULL ) ) res = - 1 ; vpx_usec_timer_mark ( & timer ) ; cpi -> time_receive_data += vpx_use",0
246,"<S2SV_ModStart> { fprintf ( stderr <S2SV_ModEnd>, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } waitpid ( <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> chown ( dest",0
247,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ptr_hbe_txposer -> freq_band_tab <S2SV_ModStart> -> freq_band_tab [ ptr_hbe_txposer -> freq_band_tab [ ptr_hbe_txposer -> freq_band_tab [ ptr_hbe_txposer -> freq_band_tab [ ptr_hbe_txposer -> freq_band_tab [ ptr_hbe_txposer -> freq_band_tab [ ptr_hbe_txposer -> freq_band ] ] [ ptr_hbe_txposer -> freq_band_tab [ ptr_hbe_txposer -> freq_band_tab [ ptr_hbe_txposer -> freq_band_tab [ ptr_hbe_txposer -> freq_band_tab [ ptr_hbe_txposer -> freq_band_tab [ ptr_hbe_txposer -> freq_band_tab [ ptr_hbe_txposer -> freq_band_tab [ ptr_hbe_txposer -> freq_band ] ] [ ptr_hbe_txposer -> freq_band_tab [ ptr_hbe_txposer -> freq_band_tab [ ptr_hbe,0
248,"<S2SV_ModStart> lua_module ) ; lua_authz_provider_t * prov_spec = parsed_require_line <S2SV_ModEnd> ; int result <S2SV_ModStart> r ) ; if (! prov_spec -> args ) { ap_log_rerror ( APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO ( 02319 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", prov_spec -> function_name, prov_spec -> file_name ) ; ap_lua_release_state ( L, spec, r ) ; return AUTHZ_GENERAL_ERROR ; } if (! lua_checkstack ( L, prov_spec -> args -> nelts ) ) { ap_log_rerror ( APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO ( 02319 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", prov_spec -> function_name, prov_spec -> file_name ) ; ap_lua_release_",0
249,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
250,"<S2SV_ModStart> if (! proto_end || ( len ( proto_end ) < 3 ) ) return - 1 ; if ( len ( proto_end ) < 3 ) return - 1 ; cp = proto_end + 3 ; at = strchr ( cp, '@' ) ; slash = strchrnul ( cp, '/' ) ; if (! at || slash <= at ) { host = cp ; } else { c -> username = url_decode_mem ( cp, at - cp ) ; c -> password = url_decode_mem ( colon + 1, slash - colon + 1 ) ; } else { c -> username = url_decode_mem ( cp, at - cp ) ; c -> password = url_decode_mem ( colon + 1, slash - cp ) ; c -> host = url_decode_mem ( cp, slash - host ) ; }",0
251,"<S2SV_ModStart> fdt ) ; if ( end == path ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> = nextoffset ; if ( end == path ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> case FDT_PROP : include = want >= 2 ; stop_at = offset ; prop = fdt_get_property_by_offset ( fdt, offset, NULL ) ; str = fdt_string ( fdt, fdt32_to_cpu ( prop -> nameoff ) ) ; if (! str ) return - FDT_ERR_BADSTRUCTURE ; if ( str_in_list ( str, exc_prop, exc_prop_count ) ) include = 0 ; break ; case FDT_END_NODE : depth -- ; if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BADSTRUCTURE ; name = fdt_get_name ( fdt, offset, & len ) ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path",0
252,"<S2SV_ModStart> ) ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ) ) ; redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ) ) ; redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ) ) ; redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ) ) ; redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. slaves ), zmalloc_used_memory ( )",0
253,"<S2SV_ModStart> ( channel ) ; if ( client -> priv -> protocol_timeout == 0 ) { g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> client <S2SV_blank> \'%s\'"", client -> priv -> description ) ; client -> priv -> protocol_timeout = g_timeout_add_seconds ( 5, ( GSourceFunc ) _client_protocol_timeout, client ) ; g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> client <S2SV_blank> \'%s\'"", client -> priv -> description ) ; } else if ( client -> priv -> protocol_timeout == 0 ) { g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> client <S2SV_blank> \'%s\'"", client -> priv -> description ) ; g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> client <S2SV_blank> \'%s\'"", client -> priv -> description ) ; g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> client <S2SV_blank> \'%s\'"", client -> priv -> description ) ; } else if ( client -> priv -> protocol_timeout == 0 ) { g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> client <S2SV_blank> \'%s\'"",",0
254,<S2SV_ModStart> book -> dim && i < n,1
255,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; printf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c <S2SV_blank> %s\\n"", <S2SV_ModStart> action ) ; printf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c <S2SV_blank> %s\\n"", <S2SV_ModStart> action ) ; printf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c <S2SV_blank> %s\\n"", <S2SV_ModStart> action ) ; printf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c <S2SV_blank> %s\\n""",0
256,"<S2SV_ModStart> { if ( sf -> x_scale_fp == REF_INVALID_SCALE || sf -> y_scale_fp == REF_INVALID_SCALE ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } if ( sf -> x_scale_fp == REF_INVALID_SCALE ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } if ( sf -> y_scale_fp == REF_INVALID_SCALE ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; sf -> x_step_q4 = scaled_x ( 16, sf ) ; if ( vp9_is_scaled ( sf ) ) { sf -> scale_value_x = unscaled_value ; sf -> scale_value_y = unscaled_value ; }",0
257,<S2SV_ModStart> ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
258,"<S2SV_ModStart> ; } break ; case IPV6_PKTINFO : { struct in6_pktinfo src_info ; if ( np -> rxopt. bits. rxinfo ) { src_info = rcu_dereference_protected ( np -> rxopt. bits. rxinfo, sock_owned_by_user ( sk ) ) ; memcpy ( & src_info, np -> rxopt. bits. srcinfo, sizeof ( src_info ) ) ; } } break ; case IPV6_PKTINFO : { struct in6_pktinfo src_info ; if ( np -> rxopt. bits. rxinfo ) { src_info = rcu_dereference_protected ( np -> rxopt. bits. rxinfo, sock_owned_by_user ( sk ) ) ) ; memset ( & src_info, 0, sizeof ( src_info ) ) ; skb = np -> pktoptions ; if ( skb ) ip6_datagram_recv_ctl ( sk, & msg, skb ) ; release_sock ( sk ) ; msg. msg_name = & msg. msg_name ; msg. msg_namelen =",0
259,<S2SV_ModStart> sctp_net_ops ) ; <S2SV_ModEnd> sctp_v6_protosw_exit ( ) <S2SV_ModStart> ( ) ; <S2SV_ModEnd> sctp_v4_protosw_exit ( ),0
260,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> index ) ; double ovpsnr ; ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr ) ; for ( i = 0 ; i < 4 ; i ++ ) { fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr ) ; for ( i = 0 ; i < 4 ; i ++ ) { fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr ) ; fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr ) ; } fprintf ( stderr, "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
261,"<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen ( <S2SV_ModStart> 2 + 16 ), GFP_NOFS ) ; if (! dst_name ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ; } if (! dst_name ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ; } if (! dst ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ; } if ( dst_name ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ; } if ( dst_name ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ; } if (! dst ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ;",0
262,"<S2SV_ModStart> -> init ( ) <S2SV_ModEnd> ; TRACE_DEBUG ( <S2SV_ModStart> ( ""CIDER=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_CIDER ) ) ; TRACE_DEBUG ( ""PHY1ILR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1ILR ) ) ; TRACE_DEBUG ( ""PHY1IHR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1IHR ) ) ; if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } ksz8851DumpReg ( interface ) ; context -> frameId = 0 ; context -> txBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; context -> rxBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; if ( context -> txBuffer == NULL || context -> rx",0
263,"<S2SV_ModStart>. skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
264,"<S2SV_ModStart> ; if (! fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - EINVAL ; } <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT ) ; if (! fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - EINVAL ; } <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT ) ; <S2SV_ModEnd> return - ENOEXEC <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT ) ; if (! fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - EINVAL",0
265,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ; TEMP_FAILURE_RETRY (,0
266,<S2SV_ModStart> -> is_src_frame_alt_ref )? ( rc -> av_per_frame_bandwidth * rc -> baseline_gf_interval * af_ratio ) / ( rc -> baseline_gf_interval + af_ratio - 1 ) : ( rc -> av_per_frame_bandwidth * rc -> baseline_gf_interval + af_ratio - 1 ) ; # else target = ( rc -> av_per_frame_bandwidth * rc -> baseline_gf_interval * af_ratio ) / ( rc -> baseline_gf_interval + af_ratio - 1 ) ; # else target = ( rc -> av_per_frame_bandwidth * rc -> baseline_gf_interval * af_ratio ) / ( rc -> baseline_gf_interval + af_ratio - 1 ) ; # if USE_ALTREF_FOR_ONE_PASS target = ( rc -> av_per_frame_bandwidth * rc -> baseline_gf_interval * af_ratio ) / ( rc -> baseline_gf_interval + af_ratio - 1 ) ; # else target = ( rc -> av_per_frame_bandwidth * rc -> baseline_gf_interval *,0
267,"<S2SV_ModStart> ++ ) { if ( strcmp ( argv [ i ], ""allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; else if ( strcmp ( argv [ i ], ""allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; else if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; else if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; else if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; else if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank>",0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,"<S2SV_ModStart> ib ] ; # if CONFIG_VP8_HIGHBITDEPTH if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) { vp8_strict_quantize_b ( b, d ) ; # endif } else { # if CONFIG_VP8_HIGHBITDEPTH if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) { # if CONFIG_VP8_HIGHBITDEPTH if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) { if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) { # if CONFIG_VP8_HIGHBITDEPTH if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) { # if CONFIG_VP8_HIGHBITDEPTH if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG",0
270,"<S2SV_ModStart> FN_REFLEN ] ; strncpy <S2SV_ModEnd> ( buff,",0
271,"<S2SV_ModStart> int n = pbi -> decrypt_cb ( pbi -> decrypt_state, data, clear_buffer, 10 ) ; if ( n > data_end - data ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } pc -> frame_type = INTER_FRAME ; pc -> version = 0 ; pc -> show_frame = 0 ; if ( pbi -> ec_active && ( data + first_partition_length_in_bytes > data_end ) ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } else { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } if ( pbi -> ec_active && ( data + first_partition_length_in_bytes > data_end - data ) ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; }",0
272,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
273,"<S2SV_ModStart> * returnrate, RATE_DISTORTION * returndistortion <S2SV_ModEnd>, int * <S2SV_ModStart> returnintra ) { # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # else unsigned int zero_mv_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # else unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENO",0
274,"<S2SV_ModStart> goto error ; if (! h -> writable ) { h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL ) goto error ; DEBUG ( 2, ""mmap <S2SV_blank> file <S2SV_blank> at <S2SV_blank> %p"", h -> addr ) ; } else { h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL ) goto error ; DEBUG ( 2, ""malloc <S2SV_blank> file <S2SV_blank> at <S2SV_blank> %p"", h -> addr ) ; } if ( h -> addr == NULL ) { h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL ) goto error ; DEBUG ( 2, ""malloc <S2SV_blank> file <S2SV_blank> at <S2SV_blank> %p"", h -> addr ) ; } else { h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL ) goto error ; DEBUG ( 2, ""malloc <S2SV_blank> file <S2SV_blank> at <S2SV_blank> %p"", h -> addr ) ; } if ( h -> addr == NULL ) { h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL ) goto error ; h -> fd = - 1 ; } <S2SV_ModEnd> if (!",0
275,"<S2SV_ModStart> ; UWORD8 u1_profile_idc, u1_level_idc, u1_seq_parameter_set_id, u1_frame_cropping_flag, u1_frame_cropping_flag, u1_frame_cropping_flag, u1_frame_cropping_flag, u1_frame_cropping_flag, u1_frame_cropping_flag, u1_frame_cropping_flag, u1_frame_cropping_flag, u1_frame_cropping_flag, u1_frame_cropping_flag, u1_frame_cropping_flag, u1_frame_cropping_flag, u1_frame_cropping_flag, u1_frame_cropping_flag, u1_frame_cropping_flag, u1_frame_cropping_flag, u1_frame_cropping_flag, u1_frame_cropping_flag, u1_frame_cropping_flag, u1_frame_cropping_flag, u1_frame_cropping_flag, u1_frame_cropping_flag, u1",0
276,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; vpx_svc_parameters_t * const params = va_arg ( args, vpx_svc_parameters_t * ) ; if ( <S2SV_ModEnd> params == NULL <S2SV_ModStart> return VPX_CODEC_INVALID_PARAM ; <S2SV_ModEnd> cpi -> svc <S2SV_ModStart>. spatial_layer_id = params -> spatial_layer ; cpi -> svc. temporal_layer_id = params -> temporal_layer ; cpi -> lst_fb_idx = params -> lst_fb_idx ; cpi -> gld_fb_idx = params -> gld_fb_idx ; cpi -> alt_fb_idx = params -> alt_fb_idx ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ; set_encoder_config ( & ctx -> oxcf, & ctx -> extra_cfg, & ctx -> extra_cfg ) ;",0
277,"<S2SV_ModStart> out ) { <S2SV_ModEnd> uint16 bitspersample, <S2SV_ModStart>, samplesperpixel ; uint16 <S2SV_ModEnd> input_compression, input_photometric <S2SV_ModStart> uint16 input_compression, input_photometric ; if ( input_photometric == PHOTOMETRIC_YCBCR ) { uint16 subsamplinghor, subsamplingver ; TIFFGetFieldDefaulted ( in, TIFFTAG_YCBCRSUBSAMPLING, & subsamplinghor, & subsamplingver ) ; if ( subsamplinghor!= 1 || subsamplingver!= 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Can\'t <S2SV_blank> copy/convert <S2SV_blank> subsampled <S2SV_blank> image.\\n"", TIFFFileName ( in ) ) ; return FALSE ; } } if ( input_photometric == PHOTOMETRIC_YCBCR ) { uint16 subsamplinghor, subsamplingver ; TIFFGetFieldDefaulted ( in, TIFFTAG_YCBCRSUBSAMPLING, & subsamplinghor, & subsamplingver ) ; if ( subsamplinghor!= 1 || subsamplingver!= 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s:",0
278,"<S2SV_ModStart> a ) { <S2SV_ModEnd> char * pn <S2SV_ModStart> = '\\0' ; if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else if ( S_ISLNK ( st. st_mode ) ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ]",0
279,"<S2SV_ModStart> unsigned int link_count ; struct kernel_lb_addr loc ; struct indirectEntry * ie ; ie = ( struct indirectEntry * ) ibh -> b_data ; loc = lelb_to_cpu ( ie -> indirectICB. extLocation ) ; if (! loc ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!loc\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if (! bh ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!bh\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if (! bh ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!bh\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if (! bh ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!bh\\n"", inode -> i_ino ) ; make_bad_",0
280,"<S2SV_ModStart> -> tx_size ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_y = & lfm -> int_4x4_y [ tx_size_y ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv ; int i ; for ( i = 0 ; i < w ; i ++ ) { memset ( & lfm -> lfl_y [ index ], filter_level, w ) ; index += 8 ; } } * above_y |= above_prediction_mask [ block_size ] << shift_y ; * above_uv |= above_prediction_mask_uv [ block_size ] << shift_uv ; * above",0
281,<S2SV_ModStart> mq_ops ) { <S2SV_ModEnd> flush_rq -> tag,0
282,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) return ( uint32_t ) - 1,0
283,"<S2SV_ModStart> ) ) { if (! smatch ( option, "" <S2SV_blank> =\\t,"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Invalid <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; }",0
284,"<S2SV_ModStart> == NULL || ( uint32_t ) <S2SV_ModStart> == NULL || ( uint32_t ) * replySize > sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } <S2SV_ModStart> == NULL || ( uint32_t ) * replySize > sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } <S2SV_ModStart> == NULL || ( uint32_t ) * replySize > sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } <S2SV_ModStart> == NULL || ( uint32_t ) * replySize > sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; }",0
285,"<S2SV_ModStart> berval ) ; if ( ret [ j ] == NULL ) { err = ENOMEM ; goto cleanup ; } ret [ j ] -> key_data_length [ 0 ] = 0 ; ret [ j ] -> key_data_contents [ 0 ] = k5_alloc ( sizeof ( struct berval ), & err ) ; if ( ret [ j ] == NULL ) { err = ENOMEM ; goto cleanup ; } ret [ j ] -> key_data_length [ 0 ] = 0 ; ret [ j ] -> key_data_contents [ 0 ] = k5_alloc ( sizeof ( struct berval ), & err ) ; if ( ret [ j ] == NULL ) { err = ENOMEM ; goto cleanup ; } ret [ j ] -> key_data_length [ 0 ] = 0 ; ret [ j ] -> key_data_length [ 0 ] = 0 ; ret [ j ] -> key_data_length [ 0 ] = 0 ; ret [ j ] -> key_data_length [ 0 ] = 0 ; ret [ j ] -> key_data_contents [ 0 ] = k5_alloc ( sizeof ( struct berval ), & err ) ; if ( ret [ j ]",0
286,<S2SV_ModStart> 0x02 ) ; memcpy <S2SV_ModEnd> ( sbuf +,0
287,"<S2SV_ModStart> return ret ; if ( qcnt > I40E_MAX_MACVLAN_QUEUES ) { dev_err ( & vdev -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> MACVLAN <S2SV_blank> queues: <S2SV_blank> %d\\n"", vsi -> num_queue_pairs ) ; return - EINVAL ; }",0
288,"<S2SV_ModStart> } } } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( action, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { eprintf ( ""action: <S2SV_blank> %",0
289,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
290,<S2SV_ModStart> 0 ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 0 ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 0 ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 0 ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 0 ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 0 ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 0 ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 0 ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 0 ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 0 ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 0 ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 0 ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 0 ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 0 ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 0 ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 0 ) { memcpy <S2SV_ModEnd> ( lf_mic ->,0
291,"<S2SV_ModStart> ) NULL ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
292,"<S2SV_ModStart> len ) { <S2SV_ModEnd> return decode_unicode_with_escapes ( <S2SV_ModStart> ) { PyObject <S2SV_ModEnd> * u ; <S2SV_ModStart> char * p ; PyObject * w ; int kind ; void * data ; Py_ssize_t len, i ; w = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) { Py_DECREF ( w ) ; } kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = Py_GET_LENGTH ( w ) ; for ( i = 0 ; i < len ; i ++ ) { Py_UCS4 chr = PyUnicode_READ ( kind, data, i ) ; sprintf ( p, ""\\\\U%08x"", chr ) ; p += 10 ; } assert ( p - buf <= Py_SIZE ( u ) ) ; Py_DECREF ( w ) ; } if ( * s & 0x80 ) { PyObject * w ; int kind ; void * data ; Py_ssize_t len, i ; w = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) { Py_DECREF ( w )",0
293,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> int setimes, <S2SV_ModStart>, setimes, <S2SV_ModEnd> targisdir, wrerrno <S2SV_ModStart>, setimes, <S2SV_ModEnd> targisdir, wrerrno <S2SV_ModStart>, setimes, <S2SV_ModEnd> targisdir, wrerrno <S2SV_ModStart>, setimes, <S2SV_ModEnd> targisdir, wrerrno <S2SV_ModStart>, setimes, <S2SV_ModEnd> targisdir, wrerrno",0
294,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
295,<S2SV_ModStart> = 0 ; if ( ( width & 0xf )!= 0 ) width += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( width & 0xf )!= 0 ) width += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( width & 0xf )!= 0 ) width += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( width & 0xf )!= 0 ) width += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( width & 0xf )!= 0 ) width += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( width & 0xf )!= 0 ) width += 16 ; if ( ( height & 0xf )!=,0
296,<S2SV_ModStart> return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,0
297,<S2SV_ModStart> u1_num_mbsNby2 ++ ; if ( u1_num_mbsNby2 > u1_num_mbs ) { ps_dec -> u1_num_mbsNby2 = u1_num_mbs ; ps_dec -> u1_num_mbsNby2 = u1_num_mbsNby2 ; ps_dec -> u1_num_mbsNby2 = u1_num_mbsNby2 ; } <S2SV_ModStart> u1_num_mbsNby2 ++ ; if ( u1_num_mbsNby2 > u1_num_mbs ) { ps_dec -> u1_num_mbsNby2 = u1_num_mbsNby2 ; ps_dec -> u1_num_mbsNby2 = u1_num_mbsNby2 ; ps_dec -> u1_num_mbsNby2 = u1_num_mbsNby2 ; } if ( u1_num_mbsNby2 > u1_num_mbsNby2 ) { ps_dec ->,0
298,"<S2SV_ModStart> [ 1 ] && screen -> buffers [ 1 ] -> flags & VTERM_SCREEN_HIGHBITDEPTH ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 1 ] -> flags ) ; if ( screen -> buffers [ 0 ] -> flags & VTERM_SCREEN_HIGHBITDEPTH ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 0 ] -> flags ) ; if ( screen -> buffers [ 1 ] -> flags & VTERM_SCREEN_HIGHBITDEPTH ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 1 ] -> flags ) ; if ( screen -> buffers [ 0 ] -> flags & VTERM_SCREEN_HIGHBITDEPTH ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 0 ] -> flags ) ; vterm_allocator_free ( screen -> vt, screen -> buffers [ 0 ] ) ; if ( screen -> buffers [ 1 ] -> flags & VTERM_SCREEN_HIGHBITDEPTH ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 1 ] ) ; if ( screen -> buffers [ 0 ] -> flags & VTERM_SCREEN_HIGHBITDEPTH ) vterm_",0
299,"<S2SV_ModStart> do { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart> & delay, TEMP_FAILURE_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY ) ; TEMP_FAILURE_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRIES",0
300,"<S2SV_ModStart> one, offset ; if ( number_planes_filled > MagickMax ( number_planes, number_planes_filled ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > MagickMax ( number_planes, number_planes_filled ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > MagickMax ( number_planes, number_planes_filled ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > MagickMax ( number_planes, number_planes_filled ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > MagickMax ( number_planes, number_planes_filled ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_planes_",0
301,"<S2SV_ModStart> { httpSetHostName ( state <S2SV_ModEnd>, stok (",0
302,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
303,"<S2SV_ModStart> ) ) ; if ( clean && (! job_id ||! prev_hash ||! coinbase1 ||! coinbase2 ||! bbversion ||! nbit ||! ntime ) ) { if ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ; goto out ; } cg_wlock ( & pool -> data_lock ) ; free ( pool -> swork. job_id ) ; pool -> swork. job_id = job_id ; snprintf ( pool -> prev_hash, 65, ""%s"", prev_hash ) ; snprintf ( pool -> bbversion, 9, ""%s"", bbversion ) ; snprintf ( pool -> nbit, 9, ""%s"", nbit ) ; snprintf ( pool -> ntime, 9, ""%s"", ntime ) ; pool -> swork. clean = clean ;",0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
305,"<S2SV_ModStart> unused ) { _Py_IDENTIFIER ( __dict__ ) ; PyObject * dict ; if ( _PyObject_GetAttrId ( self, & PyId___dict__ ) == NULL ) return NULL ; dict = _PyObject_GetAttrId ( self, & PyId___dict__ ) ; if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( dict ) { res = Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } if ( dict ) { res = Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } <S2SV_ModEnd> return res ;",0
306,"<S2SV_ModStart> USB_DT_OTG, ( struct usb_otg_descriptor * ) & desc ) ; if (! ( desc -> bmAttributes & USB_OTG_HNP ) ) { dev_err ( & udev -> dev, ""Dual-Role <S2SV_blank> OTG <S2SV_blank> device <S2SV_blank> on <S2SV_blank> %s <S2SV_blank> HNP <S2SV_blank> port\\n"", ( port1 == bus -> otg_port )? """" : ""non-"" ) ; return 0 ; } else if ( port1 == bus -> otg_port ) { dev_info ( & udev -> dev, ""Dual-Role <S2SV_blank> OTG <S2SV_blank> device <S2SV_blank> on <S2SV_blank> %sHNP <S2SV_blank> port\\n"", ( port1 == bus -> otg_port )? """" : ""non-"" ) ; } else if ( port1 == bus -> otg_port ) { bus -> b_hnp_enable = 1 ; err = usb_control_msg ( udev, 0, USB_REQ_SET_FEATURE, 0, USB_DEVICE_B_HNP_ENABLE, 0, NULL, 0, USB_CTRL_SET_TIMEOUT ) ; if ( err < 0 ) dev_err (",0
307,"<S2SV_ModStart> -> private_data ; <S2SV_ModEnd> u32 flags = <S2SV_ModStart> arg ) ; <S2SV_ModEnd> case PERF_EVENT_IOC_PERIOD : <S2SV_ModStart> case PERF_EVENT_IOC_ID : { u64 id = primary_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; return 0 ; } case PERF_EVENT_SET_OUTPUT : { int ret ; if ( arg!= - 1 ) { struct perf_event * output_event ; struct fd output ; ret = perf_event_set_output ( event, output_event ) ; fdput ( output ) ; } return ret ; } case PERF_EVENT_SET_FILTER : { int ret ; if ( arg!= - 1 ) { struct perf_event * output_event ; struct fd output ; ret = perf_fget_light ( arg, & output ) ; if ( ret ) return ret ; output_event = output. file -> private_data ; ret = perf_event_set_filter ( event, output_event ) ; fdput ( output ) ; } else { ret = perf_event_set_filter",0
308,<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
309,"<S2SV_ModStart> ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp",0
310,"<S2SV_ModStart> ) ; return rb_ary_new ( rb_ary_new ( rb_ary_new ( rb_ary_new ( rb_ary_new ( rb_ary_new ( rb_ary_new ( rb_ary_new ( rb_ary_new ( rb_ary_new ( rb_ary_new ( rb_ary_new ( ) ) ) ) ) ), rb_ary_new ( rb_ary_new ( rb_ary_new ( rb_ary_new ( rb_ary_new ( rb_ary_new ( rb_ary_new ( rb_ary_new ( rb_ary_new ( rb_ary_new ( rb_ary_new ( rb_ary_new ( rb_ary_new ( rb_ary_new ( rb_ary_new ( rb_ary_new ( ) ) ) ) ) ) ), rb_ary_new ( rb_ary_new ( rb_ary_new ( rb_ary_new ( rb_ary_new ( rb_ary_new ( rb_ary_new ( rb_ary_new ( rb_ary_new ( rb_ary_new ( rb_ary_new ( rb",0
311,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
312,<S2SV_ModStart> ; if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return in - first ; },0
313,"<S2SV_ModStart> x86_pmu. num_counters_fixed = min_t ( unsigned, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ; x86_pmu. num_counters_fixed = max_t ( unsigned, MAX_PEBS_EVENTS, x86_pmu. num_counters_fixed ) ; if ( version > 1 ) { u64 capabilities ; rdmsrl ( MSR_IA32_PERF_CAPABILITIES, capabilities ) ; x86_pmu. intel_cap. capabilities = capabilities ; } if ( version > 1 ) { u64 capabilities ; rdmsrl ( MSR_IA32_PERF_CAPABILITIES, capabilities ) ; x86_pmu. intel_cap. capabilities = capabilities ; } if ( version > 1 ) { u64 capabilities ; rdmsrl ( MSR_IA32_PERF_CAPABILITIES, capabilities ) ; x86_pmu. intel_cap. capabilities = capabilities ; } if ( version > 1 ) { u64 capabilities ; rdmsrl ( MSR_IA32_PERF_CAPABILITIES, capabilities ) ; x86_",0
314,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * * tp <S2SV_ModStart> * stop ) { if ( p -> skip_eob_node ) { int i = 2 * p -> skip_eob_node ; } if ( p -> skip_eob_node ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int bits = v >> ( n - len ) ; vpx_write_tree ( w, vp9_coef_tree, p -> context_tree, bits, len, i ) ; } else { vpx_write_tree ( w, vp9_coef_con_tree, vp9_pareto8_full [ p -> context_tree [ PIVOT_NODE ] - 1 ], v, n",0
315,"<S2SV_ModStart>, uncompressed_hdr_size ; struct vpx_write_bit_buffer <S2SV_ModEnd> wb ; write_uncompressed_header <S2SV_ModStart> ; struct vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> ; struct vpx_write_bit_buffer <S2SV_ModEnd> wb ; write_uncompressed_header <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> += uncompressed_hdr_size ; vpx_compute_update_table ( ) ; first_part_size = write_compressed_header ( cpi, & saved_wb ) ; data += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb",0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
317,"<S2SV_ModStart> ) { struct ikev2_id id <S2SV_ModEnd> ; int id_len <S2SV_ModStart> * typedata ; ND_TCHECK ( * ext ) ; UNALIGNED_MEMCPY ( & id, ext, sizeof ( id ) ) ; ikev2_pay_print ( ndo, NPSTR ( tpay ), id. h. critical ) ; id_len = ntohs ( id. h. len ) ; ND_TCHECK ( * ext ) ; UNALIGNED_MEMCPY ( & id, ext, sizeof ( id ) ) ; ikev2_pay_print ( ndo, NPSTR ( tpay ), id. h. critical ) ; id_len = ntohs ( id. h. len ) ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; } idtype_len = idtype_len - sizeof ( struct ikev2_id ) ;",0
318,"<S2SV_ModStart> ) ) { if ( jas_tvparser_gettag ( tvp ) == 0 ) { jas_tvparser_settag ( tvp, 0 ) ; jas_tvparser_settag ( tvp, 0 ) ; } else { if ( jas_tvparser_gettag ( tvp ) == 0 ) { jas_tvparser_settag ( tvp, 0 ) ; jas_tvparser_settag ( tvp, 0 ) ; } else { if ( jas_tvparser_gettag ( tvp ) == 0 ) { jas_tvparser_settag ( tvp, 0 ) ; jas_tvparser_settag ( tvp, 0 ) ; } else { if ( jas_tvparser_gettag ( tvp ) == 0 ) { jas_tvparser_settag ( tvp, 0 ) ; jas_tvparser_settag ( tvp, 0 ) ; } else { if ( jas_tvparser_gettag ( tvp ) == 0 ) { jas_tvparser_settag ( tvp, 0 ) ; jas_tvparser_settag ( tvp, 0",0
319,"<S2SV_ModStart> urb ) ; if ( ret!= - EINVAL ) { ath10k_dbg ( ar, ATH10K_DBG_USB_BULK, ""usb <S2SV_blank> bulk <S2SV_blank> transmit <S2SV_blank> failed: <S2SV_blank> %d\\n"", ret ) ; usb_unanchor_urb ( urb ) ; <S2SV_ModStart> urb ) ; if ( ret!= - EINVAL ) { ath10k_dbg ( ar, ATH10K_DBG_USB_BULK, ""usb <S2SV_blank> bulk <S2SV_blank> transmit <S2SV_blank> failed: <S2SV_blank> %d\\n"", ret ) ; ath10k_dbg ( ar, ATH10K_DBG_USB_BULK, ""usb <S2SV_blank> bulk <S2SV_blank> transmit <S2SV_blank> failed: <S2SV_blank> %d\\n"", ret ) ; usb_unanchor_urb ( urb ) ; if ( ret!= - EINVAL ) { ath10k_dbg ( ar, ATH10K_DBG_USB_BULK, ""usb <S2SV_blank> bulk <S2SV_blank> transmit <S2SV_blank> failed: <S2SV_blank> %d\\n"", ret ) ; usb_unanchor_urb ( urb ) ; ret = - EINVAL ;",0
320,"<S2SV_ModStart>, fft_jmp ; WORD32 xh0_0, xh1_0, xh20_0, xh21_0, xl0_0, xl1_0, xl20_0, xl21_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l1_0, x_l1_1, x_l2_0, x_h2",0
321,<S2SV_ModStart> mnt_dir ) { if ( IS_ERR ( mntent -> mnt_dir ) ) return PTR_ERR ( mntent -> mnt_dir ) ;,0
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
323,"<S2SV_ModStart> ) ) ; rb_hash_aset ( env, server_name_val, req_server_name ( req ) ) ; rb_hash_aset ( env, server_port_val, req_server_port ( req ) ) ; rb_hash_aset ( env, hostname_val, req_hostname ( req ) ) ; rb_hash_aset ( env, hostname_val, req_hostname ( req ) ) ; rb_hash_aset ( env, hostname_val, req_hostname ( req ) ) ; rb_hash_aset ( env, hostname_val, req_hostname ( req ) ) ; rb_hash_aset ( env, hostname_val, req_hostname ( req ) ) ; rb_hash_aset ( env, hostname_val, req_hostname ( req ) ) ; rb_hash_aset ( env, hostname_val, req_hostname ( req ) ) ; rb_hash_aset ( env, hostname_val, req_hostname ( req ) ) ; rb_hash_aset ( env, hostname_val, req_hostname ( req ) ) ; rb_hash_aset ( env, hostname_val, req_hostname ( req ) ) ; rb_",0
324,"<S2SV_ModStart> endif # endif MYSQL_BIND * bind, * bind_end <S2SV_ModEnd> ; imp_sth_phb_t * <S2SV_ModStart> ; # endif # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION imp_sth -> use_server_side_prepare = ( attribs )? SvTRUE ( * svp ) : imp_dbh -> use_server_side_prepare ; if ( attribs ) { svp = DBD_ATTRIB_GET_SVP ( attribs, ""mysql_server_prepare"", 20 ) ; imp_sth -> use_server_side_prepare = ( svp )? SvTRUE ( * svp ) : imp_dbh -> use_server_side_prepare ; svp = DBD_ATTRIB_GET_SVP ( attribs, ""async"", 5 ) ; if ( svp && SvTRUE ( * svp ) ) { # if MYSQL_ASYNC imp_sth -> is_async = TRUE ; imp_sth -> use_server_side_prepare = FALSE ; # else do_error ( sth, 2000, ""Async <S2SV_blank> support <S2SV_blank> was <S2SV_blank> built <S2SV_blank> into <S2SV_blank> this <S2SV_blank> version <S2SV_blank> of <S2SV_blank> DBD::mysql"", ""H",0
325,<S2SV_ModStart> int need = 0 ; char * line = ( Char * ) malloc ( ( size_t ) need * 4 ) ; if ( line == 0 ) { SysError ( ERROR_BMALLOC2 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = line ; scp -> data_limit = ( size_t ) ( need + 1 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = line ; scp -> data_limit = ( size_t ) ( need + 1 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = line ; scp -> data_limit = ( size_t ) ( need + 1 ) ; } if ( need < 0 ) { if ( ( line = ( Char * ) malloc ( ( size_t ) need + 1 ) ) == 0 ) SysError ( ERROR_BMALLOC2 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = line ; scp -> data_limit = ( size_t ) ( need + 1 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = line ; scp -> data_limit = ( size_t,0
326,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static size_t <S2SV_ModEnd> ftoa_bounded_extra ( JsVarFloat <S2SV_ModStart> int radix, int <S2SV_ModEnd> fractionalDigits ) { <S2SV_ModStart> 0.0000001 ; if ( val < 0 ) strncpy ( str, ""-NaN"", len ) ; else strncpy ( str, ""Infinity"", len ) ; else if ( <S2SV_ModEnd> isfinite ( val <S2SV_ModStart> val < 0 ) strncpy ( str, ""NaN"", len ) ; else strncpy ( str, ""Infinity"", len ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> val < 0 ) strncpy ( str, ""-Infinity"", len ) ; else strncpy ( str, ""Infinity"", len ) ; } else { if ( val < 0 ) { if ( -- len <= 0 ) { * str = 0 ; return ; } * ( str ++ ) = '-' ; val = - val ; } if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ) ) ; d = 1 ; while ( d >= 1 ) { int v = ( int ) ( val / d ) ; val -=",0
327,<S2SV_ModStart> cycles ) ; <S2SV_ModEnd> fast_mix ( fast_pool,0
328,"<S2SV_ModStart> { strncat ( str <S2SV_ModEnd>, ""ID:"", <S2SV_ModStart> len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; strncat ( str, ""\'"", len ) ; } else if ( lex -> tk == LEX_STR ) { strncat ( str, ""String:\'"", len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; strncat ( str, ""\'"", len ) ; } else if ( lex -> tk == LEX_STR ) { strncat ( str, jslGetTokenValueAsString ( ), len ) ; strncat ( str, ""\'"", len ) ; } else if ( lex -> tk == LEX_STR ) { strncat ( str, ""String:\'"", len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; strncat ( str, ""\'"", len ) ; } else jslTokenAsString ( lex -> tk, str, len ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
329,,1
330,<S2SV_ModStart> const si = get_svc_internal <S2SV_ModEnd> ( svc_ctx ),0
331,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
332,<S2SV_ModStart> s2 ) { if ( strlen ( s1 ) + 1U > strlen ( s2 ) ) { return - 1 ; } else { return 0 ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
333,"<S2SV_ModStart> ) ) { parse_global_option ( CMD_PRINT_HELP, NULL, NULL ) ; parse_service_option ( CMD_PRINT_HELP, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-version"" ) ) { parse_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-options"" ) ) { print_ssl_options ( ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-sockets"" ) ) { socket_options_print ( ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-options"" ) ) { if (! arg2 ) { s_log ( LOG_ERR, ""No <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> specified"" ) ; ioerror ( ""socket",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,"<S2SV_ModStart> st_v1_new_iv ) ; if ( st -> st_v1_new_iv. len < e -> enc_blocksize ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; return ; } if ( st -> st_v1_new_iv. len < e -> enc_blocksize ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; return ; } if ( st -> st_v1_new_iv. len < e -> enc_blocksize ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; return ; } if ( st -> st_v1_new_iv. len < e -> enc_blocksize ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> key",0
336,<S2SV_ModStart> ; if ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; } else { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_,0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> print_string ( cJSON <S2SV_ModStart> item ) { return print_string_ptr <S2SV_ModEnd> ( item -> <S2SV_ModStart> valuestring ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
338,"<S2SV_ModStart> 1 ) { if ( ( res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ) ) break ; ctx ++ ; } else { int i ; res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ; if ( ( res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ) ) break ; ctx -- ; if ( img ) img -- ; } else { int i ; res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ; if ( ( res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ) ) break ; ctx -- ; if ( img ) img -- ; } else { int i ; for ( i = num_enc - 1 ; i >= 0 ; i -- ) { if ( ( res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags",0
339,<S2SV_ModStart> cols0 ) ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 1 ) { win_maximise ( 1 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; term. rows0 = rows0 ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 1 ) { win_maximise ( 1 ) ; term. rows0 = rows0 ; term. cols0 = rows0 ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; term. rows0 = rows0 ; term. rows0 = rows0 ; term. cols0 =,0
340,<S2SV_ModStart> ] ; for ( ; i < 17 ; i ++ ) s [ i ] = 0 ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( i = 0 ; i < 17 ; i ++ ) s [ i ] = 0 ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( c = 0 ; c < cols + 8 ; c ++ ) { int x = s [ c + 7 ] + s [ c - 8 ] ; int y = s [ c + 7 ] + s [ c - 8 ] ; int x = s [ c + 7 ] + s [ c - 8 ] ; int y = s [ c + 7 ] + s [,0
341,"<S2SV_ModStart> ; if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } if ( ( i -> posY + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> Y <S2SV_blank> position\\n"" ) ; # endif i -> posY = i -> parent -> height - i -> height ; } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif i -> posX = i -> width ;",0
342,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 16 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 32 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 64 ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",0
343,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_dependent_slice_enabled_flag ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_output_flag_present_flag ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_output_flag_present_flag ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
344,"<S2SV_ModStart> ) ) { switch ( c ) { case'<S2SV_blank>': break ; case 'e' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'E' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'T' : trunc_8to4 = SF_FALSE ; break ; case'm' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_long ( psf, data ) ; } else { header_put_le_long ( psf, data ) ; } ; count += 1 ; break ; case '2' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_long ( psf, data ) ; } else { header_put_le_long ( psf, data ) ; } ; count += 2 ; break ; case '3' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put",0
345,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ;",0
346,"<S2SV_ModStart> 0 ; } <S2SV_ModEnd> fprintf ( stderr <S2SV_ModStart> ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; return",0
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> : return vpx_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> : return vpx_mse8x16 <S2SV_ModEnd> ; default : <S2SV_ModStart> : return vpx_mse16x16 <S2SV_ModEnd> ; } <S2SV_null>,0
348,"<S2SV_ModStart> ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX_REQ ) { return return_pkinit_kx_req ( context, padata, request, reply, send_pa, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX_REQ ) { return return_pkinit_kx_req ( context, padata, request, reply, encrypting_key, send_pa, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX_REQ ) { return return_pkinit_kx_req ( context, padata, request, reply, encrypting_key, send_pa ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX_REQ ) { return return_pkinit_kx_req ( context, request, reply, encrypting_key, send_pa ) ; } if ( padata -> pa_type == KRB5_PADATA",0
349,"<S2SV_ModStart> flags ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", input -> buf_cur_space_left, frame_len ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n",0
350,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void * zcalloc,0
351,<S2SV_ModStart> == sip && rxent -> callnum == EXTRACT_32BITS ( & rxh -> callNumber ) && rxent -> serviceId == EXTRACT_32BITS ( & rxh -> serviceId ) && rxent -> dport == sport ) { rx_cache_hint = i ; * opcode = rxent -> opcode ; return ( 1 ) ; } if ( rxent -> callnum == EXTRACT_32BITS ( & rxh -> callNumber ) && rxent -> serviceId == EXTRACT_32BITS ( & rxh -> serviceId ) && rxent -> server. s_addr == clip && rxent -> serviceId == EXTRACT_32BITS ( & rxh -> serviceId ) && rxent -> dport == sport ) { rx_cache_hint = i ; * opcode = rxent -> opcode ; return ( 0 ) ; } if ( rxent -> callnum == EXTRACT_32BITS ( & rxh -> callNumber ) && rxent -> serviceId == EXTRACT_32BITS ( & rxh -> serviceId ) && rxent -> client. s_addr == sip && rxent -> server. s_addr == sip && rxent -> serviceId == EXTRACT_32BITS ( & rxh -> serviceId ),0
352,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > IEEE80211_MAX_SSID_LEN ) { mwifiex_dbg ( adapter, INFO, ""info: <S2SV_blank> ADHOC_S_CMD: <S2SV_blank> SSID <S2SV_blank> = <S2SV_blank> %s\\n"", adhoc_start -> ssid ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( bss_desc -> ssid. ssid, req_ssid -> ssid, req_ssid -> ssid_len ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_",0
353,"<S2SV_ModStart> { error = context -> put_listent ( context, sfe -> flags, sfe -> nameval, ( int ) sfe -> namelen, ( int ) sfe -> valuelen, & sfe -> nameval [ sfe -> namelen ] ) ; if ( error ) return error ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; if ( context -> seen_enough ) break ; if ( error ) return error ; if ( context -> put_listent ( context, sfe -> flags, sfe -> nameval, ( int ) sfe -> namelen, ( int ) sfe -> valuelen, & sfe -> nameval [ sfe -> namelen ] ) ; if ( context -> put_listent ( context, sfe -> flags, sfe -> nameval, ( int ) sfe -> namelen, ( int ) sfe -> valuelen, & sfe -> nameval [ sfe -> namelen ] ) ; if ( context -> put_listent ( context, sfe -> flags, sfe -> nameval, ( int ) sfe -> valuelen, & sfe ->",0
354,"<S2SV_ModStart> data ; struct l2cap_conf_rfc <S2SV_ModEnd> rfc = { <S2SV_ModStart>. mode = L2CAP_MODE_ERTM ; rfc. txwin_size = L2CAP_DEFAULT_TX_WINDOW ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; l2cap_add_conf_opt ( & ptr, L2CAP_CONF_RFC, sizeof ( rfc ), ( unsigned long ) & rfc ) ; break ; } <S2SV_ModEnd> req -> dcid",0
355,"<S2SV_ModStart> r ) { if ( r < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } ret = recv ( sock_fd, buf, r, MSG_WAITALL ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, ret ) ; return - 1 ; } if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret )",0
356,<S2SV_ModStart> ; if ( u1_nal_ref_idc >= ps_cur_slice -> u4_nal_ref_idc_max ) { return ERROR_INCOMPLETE_FRAME ; } if ( ps_cur_slice -> u4_nal_ref_idc_max > ps_cur_slice -> u4_nal_ref_idc_max ) { return ERROR_INCOMPLETE_FRAME ; } if ( ps_cur_slice -> u4_nal_ref_idc_max > ps_cur_slice -> u4_nal_ref_idc_max ) { return ERROR_INCOMPLETE_FRAME ; } if ( ps_cur_slice -> u4_nal_ref_idc_max > ps_cur_slice -> u4_nal_ref_idc_max ) { return ERROR_INCOMPLETE_FRAME ; } if ( ps_cur_slice -> u4_nal_ref_idc_max > ps_cur_slice -> u4_nal_ref_idc_max ) { return ERROR_INCOMPLETE_FRAME ; } if ( ps_cur_slice -> u4,0
357,"<S2SV_ModStart> tok ) ; if ( pair == 0 ) { mprAddItem ( app -> formData, sclone ( tok ) ) ; pair = stok ( 0, ""&"", & tok ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
358,"<S2SV_ModStart> * open_stateid, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; fmode <S2SV_ModEnd> &= ( FMODE_READ <S2SV_ModStart> FMODE_WRITE ) ; if ( fmode & ( FMODE_READ | FMODE_WRITE ) ) { __update_open_stateid ( state, open_stateid, & deleg_cur -> stateid, open_flags ) ; ret = 1 ; } else if ( fmode & ( FMODE_READ | FMODE_WRITE ) ) { __update_open_stateid ( state, open_stateid, NULL, open_flags ) ; ret = 1 ; } if (! ret && open_stateid!= NULL ) { if ( fmode & ( FMODE_READ | FMODE_WRITE ) ) { __update_open_stateid ( state, open_stateid, & deleg_cur -> stateid, open_flags ) ; ret = 1 ; } else if ( fmode & ( FMODE_READ | FMODE_WRITE ) ) { __update_open_stateid ( state, open_stateid, NULL, open_flags ) ; <S2SV_ModEnd> ret = 1",0
359,"<S2SV_ModStart> ""btif_hl_select_close_connected"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
360,"<S2SV_ModStart> int * out_rate_sum, int64_t * out_dist_sum, vpx_bit_depth_t bit_depth <S2SV_ModStart> int sse ; memset ( x -> pred_sse, 0, sizeof ( x -> pred_sse ) ) ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { <S2SV_ModEnd> struct macroblock_plane * <S2SV_ModStart> ]. vf ( x -> plane [ i ]. src. buf, p -> src. stride, pd -> dst. buf, pd -> dst. stride, & sse ) ; x -> pred_sse [ ref ] = sse ; if ( cpi -> speed > 4 ) { int64_t rate ; int64_t dist ; vp9_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], & rate, & dist ) ; rate_sum += rate ; dist_sum += dist ; } else { int rate ; int64_t dist ; vp9_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], & rate",0
361,<S2SV_ModStart> } } if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),0
362,<S2SV_ModStart> { if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; <S2SV_ModStart> } if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BU,0
363,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> read_segment_id ( vpx_reader <S2SV_ModStart> seg ) { return vpx_read_tree <S2SV_ModEnd> ( r, <S2SV_ModStart> -> tree_probs ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
364,"<S2SV_ModStart> ++ i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ i ) { memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",0
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,"<S2SV_ModStart> ++ ; buf = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf2 == NULL ) return ( NULL ) ; <S2SV_ModEnd> depth -- ;",0
367,"<S2SV_ModStart> ERROR_INVALID_LENGTH ; } header. controlWord = htole16 ( TX_CTRL_TXIC | ( context -> frameId ++ & TX_CTRL_TXFID ) ) ; header. byteCount = htole16 ( length ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, RXQCR_SDA ) ; ksz8851SetBit ( interface, KSZ8851_TXQCR, TXQCR_METFE ) ; netBufferRead ( context -> txBuffer, buffer, offset, length ) ; <S2SV_ModEnd> header. byteCount <S2SV_ModStart> length ) ; ksz8851WriteFifo ( interface, ( uint8_t * ) & header, sizeof ( Ksz8851TxHeader ) ) ; ksz8851WriteFifo ( interface, ( uint8_t * ) & header, sizeof ( Ksz8851TxHeader ) ) ; ksz8851WriteFifo ( interface, ( uint8_t * ) & header, sizeof ( Ksz8851TxHeader ) ) ; ksz8851WriteFifo ( interface, ( uint8_t * ) & header, sizeof ( Ksz8851TxHeader )",0
368,"<S2SV_ModStart> ; # endif # ifdef MONO_HAS_SEMAPHORES MonO_SEM_WAIT ( & finalizer_sem ) ; # else WaitForSingleObjectEx ( finalizer_event, INFINITE, FALSE ) ; # endif",0
369,"<S2SV_ModStart>, x_7 ; WORD32 x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; x_8 = * x0 ++ ; x_9 = * x0 ++ ; x_a = * x0 ++ ; x_b = * x0 ++ ; x_c = * x0 ++ ; x_d = * x0 ++ ; x_e = * x0 ++ ; x_e = * x0 ++ ; x_f = * x0 ++ ; x_8 = * x0 ++ ; x_9 = * x0 ++ ; x_a = x_0 + x_2 ; x_b = x_1 + x_3 ; x_c = x_4 + x_6 ; x_d = x_5 + x_7 ; x_e = * x0 ++ ; x_e = * x0 ++ ; x_f = * x0 ++ ; n00 = x_0 + x_2 ; n01 = x_1 + x_3 ; n20 = x_0 - x_2 ; n21 = x_1 -",0
370,<S2SV_ModStart> ; if ( pmd_none_or_clear_bad <S2SV_ModEnd> ( pmd ),0
371,"<S2SV_ModStart> int width, height, target_width, target_height ; if ( argc < 4 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } if ( argc < 5 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpout = fopen ( fout, ""wb"" ) ; if ( fpout == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> write\\n"", fout ) ; return 1 ; }",0
372,"<S2SV_ModStart> int i, result ; if ( num_fields < 0 ) { return 0 ; } _Py_IDENTIFIER ( _attributes ) ; PyObject * s, * l ; if (! PyUnicode_FromString ( attrs [ num_fields ] ) ) { Py_DECREF ( l ) ; return 0 ; } l = PyTuple_New ( num_fields ) ; if (! l ) return 0 ; for ( i = 0 ; i < num_fields ; i ++ ) { s = PyUnicode_FromString ( attrs [ i ] ) ; if (! s ) { Py_DECREF ( l ) ; return 0 ; } PyTuple_SET_ITEM ( l, i, s ) ; } result = _PyObject_SetAttrId ( ( PyObject * ) type, & PyId__attributes, l ) >= 0 ; Py_DECREF ( l ) ; return result <S2SV_ModEnd> ; } <S2SV_null>",0
373,<S2SV_ModStart> VPX_CODEC_OK ; struct vpx_codec_alg_priv <S2SV_ModEnd> * priv ; <S2SV_ModStart> vpx_codec_alg_priv ) ) ; if (! priv ) { return VPX_CODEC_MEM_ERROR ; } ctx -> priv = & priv -> base ; ctx -> priv -> sz = sizeof ( * ctx -> priv ) ; ctx -> priv -> iface = ctx -> iface ; ctx -> priv -> init_flags = ctx -> init_flags ; } cfg = & ctx -> priv -> cfg ; for ( i = 0 ; extracfg_map [ i ]. usage && extracfg_map [ i ]. usage ; i ++ ) ; priv -> cfg = extracfg_map [ i ]. cfg ; priv -> vp8_cfg = extracfg_map [ i ]. cfg ; priv -> cx_data_sz = priv -> cfg. g_w * priv -> cfg. g_h * 3 / 2 ; if ( priv -> cx_data_sz < 32768 ) priv -> cx_data_sz = 32768 ; priv -> cx_data = malloc ( priv -> cx_data_sz ) ; if (! priv -> cx_data ),0
374,<S2SV_ModStart> } if ( cnt_c > BOT ) { pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> lookup [ x ] = cnt_c + step ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> lookup [ x ] = cnt_c + step ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> lookup [ x ] = cnt_c + step ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> lookup [ x ] = cnt,0
375,"<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ctx -> fragments. ptrs, 0, sizeof ( ctx -> fragments. ptrs ) ) ; memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ctx -> fragments. sizes, 0, sizeof ( ctx -> fragments. sizes ) ) ; } if ( ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count = 0 ; } if (! ctx -> fragments. enabled ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count = 1 ; } if (! ctx -> fragments. enabled ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count = 1 ; } if (! ctx -> fragments. enabled ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments.",0
376,"<S2SV_ModStart> ; if ( efe -> icbTag. strategyType!= cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, efe -> icbTag. strategyType ) ; goto out ; } if ( efe -> icbTag. strategyType!= cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, efe -> icbTag. strategyType ) ; goto out ; } if ( efe -> icbTag. strategyType!= cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, efe -> icbTag. strategyType ) ; goto out ; } if ( efe -> icbTag. strategyType!= cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>",0
377,"<S2SV_ModStart> data ) { enc28j60WriteReg ( interface, ENC28J60_MIREGADR, address >> ENC28J60_MIREGADR_ADDR_SHIFT ) ; enc28j60WriteReg ( interface, ENC28J60_MIWRL, LSB ( data ) ) ; enc28j60WriteReg ( interface, ENC28J60_MIWRH, MSB ( data ) ) ; <S2SV_ModEnd> while ( ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & ENC28J60_MISTAT_BUSY <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & ENC28J60_MISTAT_BUSY <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",0
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> bad_format_imginfo ( char <S2SV_ModStart> fmt ) { <S2SV_ModEnd> char * ptr,0
379,"<S2SV_ModStart> ""DefragInOrderSimpleTest"", DefragInOrderSimpleTest ) ; UtRegisterTest ( ""DefragReverseSimpleTest"", DefragReverseSimpleTest ) ; UtRegisterTest ( ""DefragSturgesNovakBsdTest"", DefragSturgesNovakBsdTest ) ; UtRegisterTest ( ""DefragSturgesNovakLinuxTest"", DefragSturgesNovakLinuxTest ) ; UtRegisterTest ( ""DefragSturgesNovakWindowsTest"", DefragSturgesNovakWindowsTest ) ; UtRegisterTest ( ""DefragSturgesNovakFirstTest"", DefragSturgesNovakFirstTest ) ; UtRegisterTest ( ""DefragSturgesNovakLastTest"", DefragSturgesNovakLastTest ) ; UtRegisterTest ( ""DefragIPv4NoDataTest"", DefragIPv4NoDataTest ) ; UtRegisterTest ( ""DefragIPv4TooLargeTest"", DefragIPv4TooLargeTest ) ;",0
380,<S2SV_ModStart> = object_length ; new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { return SC_ERROR_OUT_OF_MEMORY ; },0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart>, '=' ) ; if ( separator == NULL ) { return ERROR_INVALID_SYNTAX ; } name = strTrimWhitespace ( token ) ; value = strTrimWhitespace ( separator + 1 ) ; n = osStrlen ( value ) ; if ( n > 0 && value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( n > 0 && value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( value [ n - 1 ] == \'\\""\' ) value [ n - 1 ]",0
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,"<S2SV_ModStart> NULL ; } if ( p_sys -> p_format -> interlaced ) { schro_encoder_setting_set_double ( p_sys -> p_schro, ""interlaced_coding"",! p_sys -> p_format -> interlaced ) ; } else if ( p_sys -> p_format -> top_field_first ) { schro_encoder_setting_set_double ( p_sys -> p_schro, ""top_field_first"",! p_sys -> p_format -> interlaced ) { schro_encoder_setting_set_double ( p_sys -> p_schro, ""top_field_first"",! p_sys -> b_top_field_first ) ; } else if ( p_sys -> p_format -> interlaced ) { schro_encoder_setting_set_double ( p_sys -> p_schro, ""top_field_first"",! p_sys -> b_auto_field_coding ) { schro_encoder_setting_set_double ( p_sys -> p_schro, ""top_field_first",0
384,"<S2SV_ModStart> ; if ( bfname. len < 1 ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", fname ) ; } else { mp_verbose ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", fname ) ; } free_stream ( s ) ; mp_info ( log, ""number <S2SV_blank> of <S2SV_blank> files: <S2SV_blank> %d\\n"", mf -> nr_of_files ) ; goto exit_mf ; } if ( bfilename. len < 1 ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", fname ) ; } else { mp_verbose ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", fname ) ; } free_stream ( s ) ; mp_info ( log, ""number <S2SV_blank> of <S2SV_blank> files: <S2SV_blank> %d\\n"", mf -> nr_of_files ) ; goto exit_mf ; } if ( strchr ( filename, ',' ) ) { mp_info ( log, ""filelist: <S2SV_blank> \'%s\'\\n"", filename ) ; mf -> nr_of_files",0
385,"<S2SV_ModStart> 4 ) ; size_t num_properties ; CHECKINT32 ( idx, len ) ; num_properties = GETINT32 ( buf + idx ) ; idx += 4 ; <S2SV_ModStart> len >> 1 ) ; for ( j = 0 ; j < ( a -> names [ i ]. len >> 1 ) ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t i ; a -> names = CHECKED_XCALLOC ( VarLenData, a -> num_names ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> names [ i ]. len = GETINT32 ( buf + idx ) ; idx += 4 ; a -> names [ i ]. data = CHECKED_XMALLOC ( unsigned char, a -> names [ i ]. len ) ; for ( j = 0 ; j < a -> names [ i ]. len",0
386,<S2SV_ModStart> sse ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; vpx_pbi_t * const pbi = ctx -> pbi ; vpx_ref_frame_t * const data = va_arg ( args, vpx_ref_frame_t * ) ; YV12_BUFFER_CONFIG * fb ; vpx_get_reference_dec ( pbi, data -> idx, & fb ) ; yuvconfig2image ( & data -> img, fb, NULL ) ; return VPX_CODEC_OK <S2SV_ModEnd> ; } <S2SV_null>",0
388,"<S2SV_ModStart> ++ ) { if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> "" ""no <S2SV_blank> image <S2SV_blank> content <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ++ ) ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> "" ""no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ++ ) ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> "" ""no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> "" ""no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR",0
389,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == testlist ) expr1 = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; else expr1 = ast_for_expr ( c, CHILD ( n, 0 ) ) ; if (! expr1 ) return NULL ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; switch ( TYPE ( CHILD ( n, 2 ) ) == testlist ) expr2 = ast_for_testlist ( c, CHILD ( n, 2 ) ) ; if (! expr2 ) return NULL ; newoperator = ast_for_augassign ( expr1, newoperator, expr2, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c -> c_arena ) ; if (! newoperator ) return NULL ; return Operator ( expr1, newoperator, expr2, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c -> c",0
390,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> vp8_denoiser_filter_c ( YV12_BUFFER_CONFIG <S2SV_ModStart> 16 ; unsigned char * mc_running_avg_y = mc_running_avg -> y_buffer + y_offset ; int mc_avg_y_stride = mc_running_avg -> y_stride ; unsigned char * running_avg_y = running_avg -> y_buffer + y_offset ; int avg_y_stride = running_avg -> y_stride ; int r, c, i ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 16 ; ++ c ) { int diff = 0 ; int absdiff = abs ( diff ) ; if ( absdiff >= 4 && absdiff <= 7 ) { running_avg_y [ c ] = mc_running_avg_y [ c ] ; sum_diff += diff ;",0
391,"<S2SV_ModStart> ; if ( ( s - reqPtr -> roff ) > drvPtr -> maxline ) { Ns_Log ( DriverDebug, ""SockParse: <S2SV_blank> maxline <S2SV_blank> reached <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> bytes"", drvPtr -> maxline ) ; sockPtr -> flags = NS_CONN_REQUESTURITOOLONG ; Ns_Log ( Warning, ""request <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long <S2SV_blank> (%d <S2SV_blank> bytes)"", ( int ) ( e - s ) ) ; } else { if ( ( s - reqPtr -> roff ) > drvPtr -> maxline ) { Ns_Log ( DriverDebug, ""SockParse: <S2SV_blank> maxline <S2SV_blank> reached <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> bytes"", drvPtr -> maxline ) ; sockPtr -> flags = NS_CONN_REQUESTURITOOLONG ; Ns_Log ( Warning, ""request <S2SV_blank> header <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long <S2SV_blank> (%d <S2SV_blank> bytes)"", ( int ) ( e - s ) ) ) ; } }",0
392,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; # if XTENSA_HAVE_COPROCESSORS,0
393,<S2SV_ModStart> size ) ; if ( message -> length > message -> size ) { message -> length = message -> size ; message -> srcIpAddr = queueItem -> srcIpAddr ; message -> srcPort = queueItem -> srcPort ; message -> destIpAddr = queueItem -> destIpAddr ; message -> ttl = queueItem -> ancillary. ttl ; # if ( ETH_SUPPORT == ENABLED ) message -> srcMacAddr = queueItem -> ancillary. srcMacAddr ; message -> destMacAddr = queueItem -> ancillary. destMacAddr ; # endif # if ( ETH_PORT_TAGGING_SUPPORT == ENABLED ) message -> switchPort = queueItem -> ancillary. port ; # endif # if ( ETH_TIMESTAMP_SUPPORT == ENABLED ) message -> timestamp = queueItem -> ancillary. timestamp ; # endif,0
394,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" <S2SV_ModStart> -> src_dev ; <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" <S2SV_ModStart> -> dst_dev ; <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for""",0
395,<S2SV_ModStart> int error ; struct ext2_xattr_header * new_header = NULL ; struct ext2_inode_info * ei = EXT2_I ( inode ) ; struct ext2_inode_info * ei_info = EXT2_I ( inode ) ; struct ext2_inode_info * ei_info = EXT2_I ( inode ) ; struct ext2_inode_info * ei_info = EXT2_I ( inode ) ; struct ext2_inode_info * ei_info = EXT2_I ( inode ) ; if ( ei_info -> i_flags & EXT2_INDEX_FL ) ei -> i_flags |= EXT2_INDEX_FL ; if ( ei_info -> i_flags & EXT2_INDEX_FL ) ei_info -> i_flags |= EXT2_INDEX_FL_DIRTY ; if ( ei_info -> i_flags & EXT2_INDEX_FL ) ei_info -> i_flags |= EXT2_INDEX_FL_DIRTY ; if ( ei_info -> i_flags & EXT2_INDEX_FL ) ei_info -> i_flags |= EXT2_INDEX_FL_,0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { vpx_active_map_t * const active_map = va_arg ( args, vpx_active_map_t * ) ; if (! active_map ) return VPX_CODEC_INVALID_PARAM ; else return VPX_CODEC_INVALID_PARAM ; } else { return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
397,"<S2SV_ModStart> ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException (",0
398,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
399,"<S2SV_ModStart> = 2048 ; dmbuf = ( unsigned char * ) AcquireQuantumMemory ( imsx * imsy, 1 ) ; if ( dmbuf == NULL ) { return ( MagickFalse ) ; } for ( n = 0 ; n < 16 ; n ++ ) { sixel_palet [ n ] = sixel_default_color_table [ n ] ; } for ( r = 0 ; r < 6 ; r ++ ) { for ( g = 0 ; g < 6 ; g ++ ) { for ( b = 0 ; b < 6 ; b ++ ) { sixel_palet [ n ++ ] = sixel_default_color_table [ n ] ; } } for ( i = 0 ; i < 24 ; i ++ ) { sixel_palet [ n ] = sixel_default_color_table [ n ] ; } for ( r = 0 ; r < 6 ; r ++ ) { for ( g = 0 ; g < 6 ; g ++ ) { for ( b = 0 ; b < 6 ; b ++ ) { sixel_palet [ n ++ ] = sixel_default_color_table [ n ] ; } for ( r = 0 ; r",0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { <S2SV_ModEnd> vpx_ref_frame_t * data <S2SV_ModStart> * ) ; YV12_BUFFER_CONFIG sd ; memset ( & sd, 0, sizeof ( sd ) ) <S2SV_ModEnd> ; return vp9_copy_reference_dec <S2SV_ModStart> vp9_copy_reference_dec ( ctx <S2SV_ModEnd>, ( VP9_REFFRAME <S2SV_ModStart> VP9_REFFRAME ) frame -> frame_type, & sd ) <S2SV_ModEnd> ; } <S2SV_null>",0
401,<S2SV_ModStart> u1_num_mbsNby2 ++ ; if ( u1_num_mbsNby2 > u1_num_mbs ) { ps_dec -> u1_num_mbsNby2 = u1_num_mbs ; ps_dec -> u1_num_mbsNby2 = u1_num_mbsNby2 ; ps_dec -> u1_num_mbsNby2 = u1_num_mbsNby2 ; } <S2SV_ModStart> u1_num_mbsNby2 ++ ; if ( u1_num_mbsNby2 > u1_num_mbs ) { ps_dec -> u1_num_mbsNby2 = u1_num_mbsNby2 ; ps_dec -> u1_num_mbsNby2 = u1_num_mbsNby2 ; ps_dec -> u1_num_mbsNby2 = u1_num_mbsNby2 ; } if ( u1_num_mbsNby2 > u1_num_mbsNby2 ) { ps_dec ->,0
402,"<S2SV_ModStart>, u4_x_offset ; <S2SV_ModEnd> UWORD32 u4_y_dst_offset ; <S2SV_ModStart> B_PIC ) { IMPEG2D_TRACE_MB_START ( ps_dec -> u2_mb_x, ps_dec -> u2_mb_y ) ; ps_dec -> u2_prev_intra_mb = 0 ; ps_dec -> u2_prev_intra_mb = 1 ; ps_dec -> u2_prev_intra_mb = 1 ; ps_dec -> u2_prev_intra_mb = 1 ; ps_dec -> u2_prev_intra_mb = 0 ; ps_dec -> u2_mb_x = ps_dec -> u2_mb_x ; ps_dec -> u2_mb_y = ps_dec -> u2_mb_y ; ps_dec -> u2_prev_intra_mb = 1 ; ps_dec -> u2_prev_intra_mb = 0 ; ps_dec -> u2_prev_intra_mb = 1 ; ps_dec -> u2_prev_intra_mb = 0 ; ps_dec ->",0
403,"<S2SV_ModStart> VP9_LAST_FLAG ) { <S2SV_ModEnd> const YV12_BUFFER_CONFIG * <S2SV_ModStart> const YV12_BUFFER_CONFIG * const cfg = cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if ( equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; } else if ( ref_frame_flag == VP9_LAST_FLAG ) { const YV12_BUFFER_CONFIG * const cfg = & cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if ( equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; } else if ( ref_frame_flag == VP9_LAST_FLAG ) { const YV12_BUFFER_CONFIG * const cfg = &",0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
405,"<S2SV_ModStart> -> mbmi ; <S2SV_ModEnd> const TX_SIZE tx_size = <S2SV_ModStart> int i ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ plane_bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ plane_bsize ] ; const int max_blocks_wide = num_4x4_w ; const int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) { int r, c ; int max_blocks_wide = num_4x4_w ; int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> pd -> subsampling_x ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> pd -> subsampling",0
406,<S2SV_ModStart> ++ ) { if ( r == 7 ) { # if CONFIG_FAST_UNALIGNED dst [ 0 ] = src [ 0 ] ; dst [ 1 ] = src [ 1 ] ; # else ( ( uint32_t * ) dst ) [ 0 ] = ( ( uint32_t * ) src ) [ 0 ] ; ( ( uint32_t * ) dst ) [ 1 ] = ( ( uint32_t * ) src ) [ 1 ] ; dst [ 2 ] = src [ 2 ] ; dst [ 3 ] = src [ 3 ] ; dst [ 4 ] = src [ 4 ] ; dst [ 5 ] = src [ 5 ] ; dst [ 6 ] = src [ 6 ] ; # else ( ( uint32_t * ) dst ) [ 0 ] = ( ( uint32_t * ) src ) [ 0 ] ; ( ( uint32_t * ) dst ) [ 1 ] = ( ( uint32_t * ) src ) [ 1 ] ; # endif src += src_stride ; dst += dst_stride ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
407,"<S2SV_ModStart> nrow ) { if ( ( row + img -> row_offset ) % rowsperstrip!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""gtStripSeparate"", ""%s"", ""gtStripSeparate"" ) ; return ( 0 ) ; } <S2SV_ModStart> img -> row_offset ; if ( ( row + img -> row_offset ) % rowsperstrip!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""%s"", ""(row+img->row_offset)%rowsperstrip!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""gtStripSeparate"", ""%s"", ""gtStripSeparate"" ) ; return ( 0 ) ; } <S2SV_ModStart> img -> row_offset ; if ( ( row + img -> row_offset ) % rowsperstrip!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""%s"", ""(row+img->row_offset)%rowsperstrip!= 0) { TIFFErrorExt ( tif -> tif_clientdata, ""gtStripSeparate"", ""%s"", ""gtStripSeparate",0
408,"<S2SV_ModStart> } } } if ( TYPE ( CHILD ( n, 0 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 0 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 0 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 0 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 0 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 0 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 0 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 0 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 0 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 1 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 1 ) ) == TYPE_COMMENT ) i += 2 ; else if ( NCH ( n ) -",0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header,0
410,<S2SV_ModStart> number ) ; if ( num < ( 1 << number ) ) return - 1 ; else return num ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
411,"<S2SV_ModStart> [ plane ] ; const int x = vpx_img_plane_width ( img, plane ) ; const int y = vpx_img_plane_height ( img, plane ) ; const int y2 = vpx_img_plane_height ( img, plane ) ; const int w = vpx_img_plane_width ( img, plane ) ; const int h = vpx_img_plane_height ( img, plane ) ; int y ; for ( y = 0 ; y < y2 ; ++ y ) { if ( fread ( buf, 1, x, file )!= x ) return 0 ; buf += stride ; } } return 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
412,"<S2SV_ModStart> ; uint16_t attr_len <S2SV_ModEnd> ; uint16_t orig_attr_len <S2SV_ModStart> ; if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small",0
413,"<S2SV_ModStart> return 0 ; if ( ctx -> cipher_data == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_MALLOC_ERROR ) ; return 0 ; } if ( ctx -> cipher_data == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_MALLOC_ERROR ) ; return 0 ; } if ( ctx -> cipher_data == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_MALLOC_ERROR ) ; return 0 ; } if ( actx ) { EVP_CIPHER_CTX * dst = ( EVP_CIPHER_CTX * ) ptr ; dst -> cipher_data = OPENSSL_memdup ( actx, sizeof ( * actx ) + Poly1305_ctx_size ( ) ) ; if ( dst -> cipher_data == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_",0
414,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
415,"<S2SV_ModStart> sk ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> sk <S2SV_blank> %p"" <S2SV_ModEnd>, sock,",0
416,"<S2SV_ModStart> { memcpy ( pass_salt, cpkt. data, cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PASSSALT ) { memcpy ( pass_salt, cpkt. data, cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PLAINDATA ) { fwrite ( ( const void * ) cpkt. data, 1, cpkt. length, stdout ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 1 ; if ( is_a_tty ) { setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; } } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 1 ; if ( is_a_tty ) { raw_term ( ) ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIG",0
417,"<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_close ( adata -> conn ) ; <S2SV_ModStart> ""Encrypted <S2SV_blank> connection <S2SV_blank> unavailable"" ) ; mutt_socket_close ( adata -> conn ) ; <S2SV_ModStart> ""Encrypted <S2SV_blank> connection <S2SV_blank> unavailable"" ) ; mutt_socket_close ( adata -> conn ) ; <S2SV_ModStart> ""Encrypted <S2SV_blank> connection <S2SV_blank> unavailable"" ) ; mutt_socket_close ( adata -> conn ) ; <S2SV_ModStart> ""Encrypted <S2SV_blank> connection <S2SV_blank> unavailable"" ) ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc!= IMAP_EXEC_ERROR ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ) ; mutt_socket_close ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc!= IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ) ; mutt_socket_empty ( adata -> conn ) ; if (",0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,"<S2SV_ModStart> 0 ) { if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } else if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } else if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } else if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } else if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock )",0
420,"<S2SV_ModStart>, & rlen, 0",1
421,"<S2SV_ModStart> ; read_userfile ( <S2SV_ModEnd> ) ; if <S2SV_ModStart> { # if defined ( __linux__ ) && defined ( _POSIX_MEMLOCK_RANGE ) memcpy ( md5data + 1, user -> password, 82 ) ; memcpy ( md5data + 1 + strlen ( user -> password ), curconn -> pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> seskey, curconn -> outcounter ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> seskey, curconn -> outcounter ) ; if ( curconn -> state == STATE_ACTIVE",0
422,"<S2SV_ModStart> ) ) { if ( PyUnicode_CompareWithASCIIString ( name, ""__debug__"" ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; }",0
423,"<S2SV_ModStart> off } ; if ( i >= sizeof ( buf ) - 1 && str [ i ] ) { return - 1 ; } for ( i = j = 0 ; i < sizeof ( buf ) - 1 && str [ i ] ; i ++, j ++ ) { if ( j >= sizeof ( buf ) - 1 && str [ i ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } buf [ i ] = 0 ; for ( j = 0 ; j < sizeof ( buf ) - 1 ; j ++ ) { if ( str [ j ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } buf [ i ] = 0 ; arm_opcode_parse ( & aop, buf ) ; aop. off = off ; if ( thumb < 0 || thumb > 1 ) { return - 1 ; } if ( assemble [ thumb ] ( & aop, off, buf ) ) { return - 1 ; }",0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,"<S2SV_ModStart> -> credssp ) ; connectErrorCode = AUTHENTICATIONERROR ; fprintf ( stderr, ""Authentication <S2SV_blank> failure, <S2SV_blank> check <S2SV_blank> credentials.\\n"" ""If <S2SV_blank> credentials <S2SV_blank> are <S2SV_blank> valid, <S2SV_blank> the <S2SV_blank> NTLMSSP <S2SV_blank> implementation <S2SV_blank> may <S2SV_blank> be <S2SV_blank> to <S2SV_blank> blame.\\n"" ) ; connectErrorCode = AUTHENTICATIONERROR ; fprintf ( stderr, ""Authentication <S2SV_blank> failure, <S2SV_blank> check <S2SV_blank> credentials.\\n"" ""If <S2SV_blank> credentials <S2SV_blank> are <S2SV_blank> valid, <S2SV_blank> the <S2SV_blank> NTLMSSP <S2SV_blank> implementation <S2SV_blank> may <S2SV_blank> be <S2SV_blank> to <S2SV_blank> blame.\\n"" ) ; connectErrorCode = AUTHENTICATIONERROR ; fprintf ( stderr, ""Authentication <S2SV_blank> failure, <S2SV_blank> check <S2SV_blank> credentials.\\n"" ""If <S2SV_blank> credentials <S2SV_blank> are <S2SV_blank> valid, <S2SV_blank> the <S2SV_blank> NTLMSSP <S2SV_blank> implementation <S2SV_blank> may <S2SV_blank> be <S2SV_blank> to <S2SV_blank> blame.\\n"" ) ; credssp_free ( transport -> credssp ) ; connectErrorCode = AUTHENTICATIONERROR ; fprintf ( stderr, ""Authentication <S2SV_blank> failure, <S2SV_blank> check <S2SV_blank> credentials.\\n"" ""If <S2SV_blank> credentials <S2SV_blank> are <S2SV_blank> valid, <S2SV_blank> the <S2SV_blank> NTLMSSP <S2SV_blank> implementation <S2SV_blank> may <S2SV_blank> be <S2SV_blank> to <S2SV_blank> blame.\\n""",0
426,"<S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> entries [ tcount ] = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnoteDataFuji"", sizeof ( MnoteFujiEntry ) * c )",0
427,<S2SV_ModStart> bd_addr ) { if ( IS_ERR ( btif_dm_get_interface ( ) ) ) return BT_STATUS_NOT_READY ; if ( IS_ERR ( btif_dm_get_interface ( ) ) ) return PTR_ERR ( btif_dm_get_interface ( ) ) ; if ( IS_ERR ( btif_dm_get_interface ( ) ) ) return PTR_ERR ( btif_dm_get_interface ( ) ) ) ; if ( IS_ERR ( btif_dm_get_interface ( ) ) ) return BT_STATUS_NOT_READY ; if ( IS_ERR ( btif_dm_get_interface ( ) ) ) return PTR_ERR ( btif_dm_get_interface ( ) ) ; if ( IS_ERR ( btif_dm_get_interface ( ) ) ) return PTR_ERR ( btif_dm_get_interface ( ) ) ) ; if ( IS_ERR ( btif_dm_get_interface ( ) ) ) return BT_STATUS_NOT_READY ; if ( IS_ERR ( btif_dm_get_interface ( ) ) ),0
428,"<S2SV_ModStart> int i ; uint64_t <S2SV_ModEnd> avail ; int <S2SV_ModStart> int i ; uint64_t <S2SV_ModEnd> expect ; txid <S2SV_ModStart> 4 ) ; if ( buf -> cursor >= buf -> len ) goto bad_format ; nxip = pq_getmsgint ( buf, 4 ) ; if ( nxip < 0 || nxip > avail || expect > avail ) goto bad_format ; expect = 8 + 8 + nxip * 8 ; if ( expect < 0 || expect > avail ) goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmin > xmax || xmin > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; snap -> nxip = nxip ; SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax ) goto bad_format ; snap -> xip [ i ] = cur ;",0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header,0
430,"<S2SV_ModStart> = - 1 <S2SV_ModEnd> ; oe_errno = <S2SV_ModStart> = 0 ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; goto done ; } ret = oe_syscall_write_ocall ( & ret, epoll -> host_fd, buf, count ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( ret > ( ssize_t ) count ) { ret = - 1 ; oe_errno = 0 ; if ( oe_syscall_write_ocall ( & ret, epoll -> host_fd, buf, count )!= OE_OK ) OE_RAISE_ERRNO ( OE_EINVAL ) ; OE_RAISE_ERRNO ( OE_EINVAL ) ; }",0
431,"<S2SV_ModStart> { errstr = parse_global_option ( CMD_INITIALIZE, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_ERR, ""Global <S2SV_blank> options: <S2SV_blank> %s"", errstr ) ; return 1 ; } } if ( * section_ptr == & new_service_options ) { s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL, NULL ) ; if ( errstr ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ; case MAGIC_PARAM_ELF_PHNUM_MAX : * ( size_t * ) val = ms -> elf_phnum_max ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ; case MAGIC_PARAM_ELF_PHNUM_MAX : * ( size_t * ) val = ms -> elf_phnum_max ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return,0
433,<S2SV_ModStart> * journal = EXT4_JOURNAL ( page_file_mapping ( page ) <S2SV_ModEnd> ) ; if,0
434,"<S2SV_ModStart> ++ ) { writer = GF_SAFEALLOC ( writer, TrackWriter ) ; if (! writer ) goto exit ; writer -> sampleNumber = 1 ; writer -> mdia = trak -> Media ; writer -> stbl = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer -> stbl ) return GF_OUT_OF_MEM ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer -> stsc ) return GF_OUT_OF_MEM ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer -> stsc ) return GF_OUT_OF_MEM ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer",0
435,"<S2SV_ModStart> ] ; int <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> md5sum ) ) ; # if defined ( __linux__ ) && defined ( _POSIX_MEMLOCK_RANGE ) strncpy ( md5data + 1, password, 82 ) ; md5data [ 83 ] = '\\0' ; memcpy ( md5data + 1 + strlen ( password ), pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; md5sum [ 0 ] = 0 ; init_packet ( & data, MT_PTYPE_DATA, srcmac, dstmac, sessionkey, outcounter ) ; plen = add_control_packet ( & data, MT_CPTYPE_USERNAME, username, strlen ( username ) ) ; plen += add_control_packet ( & data, MT_CPTYPE_TERM_TYPE, terminal, strlen ( terminal ) ) ) ; if ( is_a_",0
436,<S2SV_ModStart> = NULL ; if ( _mibindexes ) { int i ; for ( i = 0 ; i < _mibindex_max ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; free ( _mibindexes ) ; _mibindexes = NULL ; },0
437,"<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i + 1 ) ) == COMMA ) i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case DOUBLESTAR : if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i + 1 ) ) == COMMA ) i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto",0
438,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
439,"<S2SV_ModStart> -> y_buffer ; const uint32_t y_width = src_ybc -> y_width ; const uint32_t y_height = src_ybc -> y_height ; const uint32_t y_stride = src_ybc -> y_stride ; <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst, <S2SV_ModStart> -> y_width ) ; memcpy <S2SV_ModEnd> ( dst,",0
440,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMMON <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> mi_col < tile -> mi_col_end <S2SV_ModEnd> ; mi_col += <S2SV_ModStart> int dummy_rate ; int64_t dummy_dist ; MACROBLOCK * x = & cpi -> mb ; if ( sf -> adaptive_pred_interp_filter ) { for ( i = BLOCK_4X4 ; i < BLOCK_8X8 ; ++ i ) { const int num_4x4_w = num_4x4_blocks_wide_lookup [ i ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ i ] ; const int num_4x4_blk = MAX ( 4, num_4x4_w * num_4x4_blk ) ; for ( x -> sb_index = 0 ; x -> sb_index < 4 ; ++ x -> sb_index ) for ( x -> b_index = 0 ; x -> b_index < 16 / num_4x",0
441,"<S2SV_ModStart>, obj_tlen ; u_int hexdump ; u_int offset ; u_int link_type ; union { float f ; uint32_t i ; } bw ; ND_TCHECK ( * lmp_obj_header ) ; if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", lmp_obj_len ) ) ; return ; } if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", lmp_obj_len ) ) ; return ; } if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", lmp_obj_len ) ) ; return ; } if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", lmp_obj_len ) ) ;",0
442,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> inc_mvs ( const <S2SV_ModStart> ++ i ) { MV diff = { mvs [ i ]. as_mv. row - ref -> row, mvs [ i ]. as_mv. col - ref -> col } ; vp9_inc_mv ( & diff, counts ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
443,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
444,"<S2SV_ModStart> ; if ( pskb_expand_head ( skb_out, size - skb -> len, GFP_ATOMIC ) < 0 ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } skb_pull_rcsum ( skb_out, hdr_size ) ; memmove ( skb_out -> data - ETH_HLEN, skb_mac_header ( skb_out ), ETH_HLEN ) ; skb_reset_network_header ( skb_out ) ; skb_reset_transport_header ( skb_out ) ; hlist_for_each_entry ( entry, chain, list ) { size = entry -> skb -> len - hdr_size ; memcpy ( skb_put ( skb_out, size ), entry -> skb -> data + hdr_size, size ) ; } <S2SV_ModEnd> free : batadv_frag_clear_chain",0
445,"<S2SV_ModStart> return ; DEBUGMSGTL ( ( ""init_mib"", ""Seen <S2SV_blank> MIBDIRS: <S2SV_blank> Looking <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> mib <S2SV_blank> dirs <S2SV_blank>...\\n"", env_var ) ) ; entry = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ; entry = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; } entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibdir ( entry ) ; entry = strtok_r ( NULL, ENV_SEPARATOR, & st ) ; } } netsnmp_init_mib_internals ( ) ; env_var = netsnmp_getenv ( ""MIBS"" ) ; if ( env_var == NULL ) { if ( confmibs!= NULL ) env_var = strdup ( confmibs ) ; else env_var = strdup ( confmibs ) ; } else { env_var = strdup ( env_",0
446,"<S2SV_ModStart> ++ ) { if (! file_access ( uinput_dev_path [ x ], O_RDWR ) ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> ERROR: <S2SV_blank> uinput <S2SV_blank> device <S2SV_blank> open <S2SV_blank> failed"", __FUNCTION__ ) ; return - 1 ; } if (! file_access ( uinput_dev_path [ x ], O_RDWR ) ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> ERROR: <S2SV_blank> uinput <S2SV_blank> device <S2SV_blank> open <S2SV_blank> failed"", __FUNCTION__ ) ; return - 1 ; } <S2SV_ModStart> ; if ( file_access ( uinput_dev_path [ x ], O_RDWR ) ) < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> device <S2SV_blank> information"", __FUNCTION__ ) ; close ( fd ) ; return - 1 ; } if ( file_access ( uinput_dev_path [ x ], O_RDWR ) ) < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> device <S2SV_blank> information"", __FUNCTION__ ) ; return - 1 ; } if ( file_access ( uinput_dev_",0
447,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
448,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
449,<S2SV_ModStart> <S2SV_null> <S2SV_null> static krb5_error_code <S2SV_ModEnd> iakerb_alloc_context ( iakerb_ctx_id_t <S2SV_ModStart> = 0 ; <S2SV_ModEnd> code = krb5_gss_init_context,0
450,"<S2SV_ModStart> = DirectClass ; if ( screen -> columns > screen -> rows ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; bitmapDC = CreateCompatibleDC ( hDC ) ; if ( bitmapDC == ( HDC ) NULL ) { ThrowReaderException ( CoderError, ""UnableToCreateDC"" ) ; } if ( bitmapDC == ( HDC ) NULL ) { DeleteDC ( hDC ) ; ThrowReaderException ( CoderError, ""UnableToCreateDC"" ) ; } if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; bitmapOld = CreateCompatibleDC ( hDC ) ; if ( bitmapOld == ( HDC ) NULL ) { DeleteDC ( hDC ) ; ThrowReaderException ( CoderError, ""UnableToCreateDC"" ) ; } if ( bitmapOld == ( HDC ) NULL ) { DeleteDC ( hDC ) ; ThrowReaderException ( CoderError, ""UnableToCreateDC"" ) ; } if ( image == ( Image *",0
451,<S2SV_ModStart> )!= START_CODE_PREFIX && ps_stream -> u4_offset < ps_stream -> u4_max_offset,0
452,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { kfree ( string ) ; return - EINVAL ; } if ( strcmp ( dentry -> d_name. name, ""ipc_flood_count"" ) && strcmp ( dentry -> d_name. name, ""ipc_flood_duration_count"" ) ) { kfree ( string ) ; return - EINVAL ; }",0
453,"<S2SV_ModStart> imethod ) ; if ( inflated == NULL ) { mono_error ( ""mono_reflection_bind_generic_method_parameters"", ""%s"", rmethod -> object. vtable -> klass -> name ) ; mono_error ( ""mono_reflection_bind_generic_method_parameters"", ""%s"", rmethod -> object. vtable -> klass -> name ) ; } else { mono_error ( ""mono_reflection_bind_generic_method_parameters"", ""%s"", rmethod -> object. vtable -> klass -> name ) ; mono_error ( ""mono_reflection_bind_generic_method_parameters"", ""%s"", rmethod -> object. vtable -> klass -> name ) ; mono_error ( ""mono_reflection_bind_generic_method_parameters"", rmethod -> object. vtable -> klass -> name ) ; } else { mono_error ( ""mono_reflection_bind_generic_method_parameters"", ""%s"", rmethod -> object. vtable -> klass -> name ) ; mono_error ( ""mono_reflection_bind_generic_method_",0
454,"<S2SV_ModStart> ""nnnnn\\0"" ) ] ; long <S2SV_ModEnd> tmp ; if <S2SV_ModStart> copy_from_user ( buf, buffer, count ) ) return - EFAULT ; tmp = simple_strtol ( buf, & end, 0 ) ; if ( ( * end!= '\\0' ) &&! isspace ( * end ) ) return - EINVAL ; uml_exitcode = tmp ; return count ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
455,"<S2SV_ModStart> is_path ) { <S2SV_ModEnd> char * last_elem <S2SV_ModStart> ( ( ( strncmp ( & name [ 1 ], ""ORIGIN}"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 1 ], ""PLATFORM}"", 8 ) == 0 && ( len = 9 )!= 0 ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 11 )!= 0 ) ) && ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) ) { repl = ( ( len == 7 || name [ 2 ] == 'O' )? ( __libc_enable_secure? NULL : l -> l_origin ) : _dl_platform ) ; if ( repl!= NULL && repl!= ( const char * ) - 1 ) { repl = ( ( len == 7 || name [ 2 ] == 'O' )? ( __libc_enable_secure? NULL : l -> l_origin ) : l -> l_platform ) ; if ( repl!=",0
456,"<S2SV_ModStart> decContainer_t ) ) ; if ( pDecCont == NULL ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> Memory <S2SV_blank> allocation <S2SV_blank> failed"" ) ; return ( H264SWDEC_MEMFAIL ) ; } # ifdef H264DEC_TRACE sprintf ( pDecCont -> str, ""H264SwDecInit# <S2SV_blank> decInst <S2SV_blank> %p <S2SV_blank> noOutputReordering <S2SV_blank> %d"", ( void * ) decInst, noOutputReordering ) ; DEC_API_TRC ( pDecCont -> str ) ; # endif rv = h264bsdInit ( & pDecCont -> storage, noOutputReordering ) ; if ( rv!= HANTRO_OK ) { H264SwDecRelease ( pDecCont ) ; return ( H264SWDEC_MEMFAIL ) ; } pDecCont = ( decContainer_t * ) H264SwDecMalloc ( sizeof ( decContainer_t ) ) ; if ( pDecCont == NULL ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> decInst <S2SV_blank> %p <S2SV_blank> noOutputReordering <S2SV_blank> %d"", ( void * )",0
457,"<S2SV_ModStart> ; } if ( len < ( iph -> ihl * 4 ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INDISCARDS ) ; goto drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> srr ) ) { struct in_device * in_dev = __in_dev_get_rcu ( dev ) ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop ; if ( unlikely ( opt -> srr ) ) { struct in_device * in_dev = __in_dev_get_rcu ( dev ) ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) )",0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,"<S2SV_ModStart> ( opb ) ) { vorbis_info_residue * res = ( vorbis_info_residue * ) vi -> codec_setup ; memset ( info, 0, sizeof ( * info ) ) ; if ( res < 0 ) { vorbis_info_residue * res = ( vorbis_info_residue * ) vi -> codec_setup ; memset ( info, 0, sizeof ( * info ) ) ; return res ; } if ( res < 0 ) { vorbis_info_residue * res = ( vorbis_info_residue * ) vi -> codec_setup ; memset ( info, 0, sizeof ( * info ) ) ; return res ; } if ( res < 0 ) { vorbis_info_residue * res = ( vorbis_info_residue * ) vi -> codec_setup ; memset ( info, 0, sizeof ( * info ) ) ; return res ; } if ( res < 0 ) { vorbis_info_residue * res = ( vorbis_info_residue * ) vi -> codec_setup ; memset ( info, 0, sizeof ( * info ) ) ; return res ; }",0
460,"<S2SV_ModStart> ; krb5_key_data * key_data = NULL ; if ( key_data_in == NULL ) goto cleanup ; key_data = ( krb5_key_data * ) k5calloc ( n_key_data, sizeof ( * key_data ), & err ) ; if ( key_data == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]. key_data_ver = 2 ; key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_contents [ 1 ] = NULL ; } } for ( i = 0 ; i < n_key_data ; i ++ ) { if ( i == n_key_data - 1 )",0
461,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
462,"<S2SV_ModStart> ] ) ; sqlite3_int64 <S2SV_ModEnd> nByte = sqlite3_value_bytes <S2SV_ModStart> ] ) ; if ( pCsr -> zInput == 0 ) { rc = SQLITE_NOMEM ; } else { memcpy ( pCsr -> zInput, zByte, nByte ) ; pCsr -> zInput [ nByte ] = 0 ; rc = pTab -> pMod -> xOpen ( pTab -> pTok, pCsr -> zInput, nByte, & pCsr -> pCsr ) ; if ( rc == SQLITE_NOMEM ) { rc = SQLITE_NOMEM ; } else { memcpy ( pCsr -> zInput, zByte, nByte ) ; pCsr -> zInput [ nByte ] = 0 ; rc = pTab -> pMod -> xOpen ( pTab -> pTok, pCsr -> zInput, nByte, & pCsr -> pCsr ) ; if ( rc == SQLITE_OK ) { pCsr -> pCsr -> pTokenizer = pTab -> pTok ; } }",0
463,<S2SV_ModStart> filp ) { if ( IS_ERR ( filp ) ) return PTR_ERR ( filp ) ;,0
464,"<S2SV_ModStart>, asdl_seq * orelse, int <S2SV_ModStart> = body ; if (! orelse ) { PyErr_SetString ( PyExc_ValueError, ""field <S2SV_blank> orelse <S2SV_blank> is <S2SV_blank> required <S2SV_blank> for <S2SV_blank> AsyncFor"" ) ; return NULL ; } <S2SV_ModStart> orelse = orelse ; if (! p -> v. AsyncFor. orelse ) { PyErr_SetString ( PyExc_ValueError, ""field <S2SV_blank> orelse <S2SV_blank> is <S2SV_blank> required <S2SV_blank> for <S2SV_blank> AsyncFor"" ) ; return NULL ; }",0
465,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int mi_sort_index ( <S2SV_ModStart>, name ) ; if ( param -> testflag & T_SILENT ) { fn_format ( param -> temp_filename, param -> temp_filename, """", MI_NAME_IEXT, 2 + 4 + 32 ) ; param -> tmpfile_createflag = MYF ( 0 ) ; if ( ( new_file = mysql_file_create ( mi_key_file_datatmp, param -> temp_filename, """", INDEX_TMP_EXT, 2 + 4 + 32 ) ) <= 0 ) { mi_check_print_error ( param, ""Can\'t <S2SV_blank> create <S2SV_blank> new <S2SV_blank> tempfile: <S2SV_blank> \'%s\'"", param -> temp_filename ) ; DBUG_RETURN ( - 1 ) ; } if ( ( new_file = mysql_file_create ( mi_key_file_datatmp, param -> temp_filename, """", INDEX_TMP_EXT, 2 + 4 + 32 ) ) <= 0 ) { mi_check_print_error ( param, ""Can\'t <S2SV_blank> create <S2SV_blank>",0
466,"<S2SV_ModStart> case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP",0
467,"<S2SV_ModStart> UINT error ; # ifdef WITH_DEBUG_RDPEI WLog_DBG ( TAG, ""rdpei_recv_pdu: <S2SV_blank> eventId: <S2SV_blank> %"" PRIu16 "" <S2SV_blank> (%s) <S2SV_blank> length: <S2SV_blank> %"" PRIu32 """", eventId ) ; # endif",0
468,"<S2SV_ModStart> ) ; } if ( pData -> socket == NULL ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", pData -> description, zmq_strerror ( errno ) ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; } if ( pData -> socket == NULL ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", pData -> description, zmq_strerror ( errno ) ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; } if ( pData -> socket == NULL ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", pData -> description, zmq_strerror ( errno ) ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; } if ( pData",0
469,"<S2SV_ModStart> sk ) ; struct ipv6_txoptions * opt ; <S2SV_ModStart> struct flowi6 fl6 ; opt = rcu_dereference_protected ( np -> inet_opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> ( sock_net ( sk ) <S2SV_ModEnd>, SCTP_MIB_OUTSCTPPACKS ) <S2SV_ModStart> ; SCTP_INC_STATS ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; if ( np -> opt && np -> opt -> srcrt ) { struct rt0_hdr * rt0 = ( struct rt0_hdr * ) np -> opt -> srcrt ; struct ipv6_txoptions * opt = rcu_dereference_protected ( np -> inet_opt, sock_owned_by_user ( sk ) ) ; fl6. flowlabel = np -> flow_label ; IP_ECN_flow_xmit ( sk, fl6 ) ; if ( np -> opt && np -> opt -> srcrt ) { struct rt0_hdr * rt0 = ( struct rt0_hdr * ) np -> opt -> srcrt ; struct ipv6_txoptions",0
470,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
471,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ; WLog_DBG ( <S2SV_ModEnd> TAG, ""RDP_NEG_FAILURE"" <S2SV_ModStart> ; WLog_DBG ( <S2SV_ModEnd> TAG, ""RDP_NEG_FAILURE"" <S2SV_ModStart> = NEGO_STATE_FAIL ; return ;",0
472,"<S2SV_ModStart> 0 ; int <S2SV_ModEnd> result = RLC_OK <S2SV_ModStart> = RLC_OK ; bn_t t ; bn_null ( t ) ; RLC_TRY { bn_new ( t ) ; RLC_TRY { bn_zero ( m ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = m_len ; for ( i = 0 ; i < * p_len ; i ++ ) { bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, pad ) ; } * p_len = m_len ; m_len -- ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; } while ( pad!= 0 && m_len > 0 ) ; * p_len -= ( m_len - 1 ) ; bn_mod_2b ( m, m, ( k_len - * p_len ) * 8 ) ; * p_len -= ( m_len - 1 ) ; bn_mod_2b ( m, m, ( k_len - * p_len ) * 8",0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,<S2SV_ModStart> == NULL ) { sf_errno = SFE_MALLOC_FAILED ; return NULL ; } <S2SV_ModEnd> ; psf_init_files (,0
475,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON,0
476,"<S2SV_ModStart> cpi ) { MACROBLOCKD * const xd = & cpi -> td. <S2SV_ModStart> -> act_zbin_adj = 0 <S2SV_ModEnd> ; vp9_setup_src_planes ( <S2SV_ModStart> -> Source, 0, 0 ) ; vp9_setup_pre_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vp9_setup_dst_planes ( xd, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vp9_setup_block_planes ( & x -> e_mbd, cm -> subsampling_x, cm -> subsampling_y ) ; xd -> mi [ 0 ] -> mbmi. mode = DC_PRED ; xd -> mi [ 0 ] -> mbmi. uv_mode = DC_PRED ; vpx_memset ( xd -> above_context [ 0 ], 0, sizeof ( * xd -> above_context [ 0 ] ) * 2 * aligned_mi_cols * MAX_MB_PLANE ) ; vpx_memset ( xd -> above_seg_context, 0,",0
477,"<S2SV_ModStart> ( hp ) ; if ( retval < 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } <S2SV_ModStart> 0 ) { if ( retval < 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } <S2SV_ModStart> 0 ) { if ( retval < 0 ) { WSPR ( sp, SLT_HttpGarbage, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" ) ; return ( retval ) ; } <S2SV_ModStart> 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } if ( retval < 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } retval = htc_request_check_host_hdr ( hp ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_Error, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" ) ; return ( retval ) ; } retval = htc_request_check_host_hdr ( hp ) ; if ( retval!= 0 ) { WSPR",0
478,"<S2SV_ModStart> 0x07 # define EOFOp 0x08 <S2SV_ModEnd> Image * image <S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( Corrupt",0
479,"<S2SV_ModStart> len ) ; if ( len + sizeof ( tETH_HDR ) > TAP_MAX_PKT_WRITE_LEN ) { LOG_ERROR ( ""btpan_tap_send <S2SV_blank> eth <S2SV_blank> packet <S2SV_blank> size:%d <S2SV_blank> is <S2SV_blank> exceeded <S2SV_blank> limit!"", len + sizeof ( tETH_HDR )",0
480,<S2SV_ModStart> ; if (! ps_dec -> s_cur_pic_poc ) { ps_dec -> s_cur_pic_poc = & ps_dec -> s_cur_pic_poc ; ps_dec -> s_cur_pic_poc = & ps_dec -> s_cur_pic_poc ; ps_dec -> s_cur_pic_poc = & ps_dec -> s_cur_pic_poc ; ps_dec -> s_cur_pic_poc = & ps_dec -> s_cur_pic_poc ; ps_dec -> s_cur_pic_poc = & ps_dec -> s_cur_pic_poc ; ps_dec -> s_cur_pic_poc = & ps_dec -> s_cur_pic_poc ; ps_dec -> s_cur_pic_poc = ps_temp_poc ; ps_dec -> s_cur_pic_poc = & ps_dec -> s_cur_pic_poc ; ps_dec -> s_cur_pic_poc = & ps_dec -> s_cur_pic_poc,0
481,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> int data_size ) { <S2SV_ModEnd> struct mpt_ioctl_iocinfo * <S2SV_ModStart> karg ) ; <S2SV_ModEnd> return PTR_ERR ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } if (",0
482,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
483,"<S2SV_ModStart> else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv",0
484,"<S2SV_ModStart> ; if ( datao >= buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; datao += exif_get_long ( buf + datao + 8, EXIF_BYTE_ORDER_INTEL ) ; datao += 2 ; exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + o, EXIF_BYTE_ORDER_INTEL ) ; datao += 2 ; exif_mnote_data_fuji_clear ( n ) ; n -> entries = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnoteDataFuji"", sizeof ( Mnote",0
485,"<S2SV_ModStart> ; if ( shtml == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } if ( shtml == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } if ( shtml == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } if ( shtml == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } if ( shtml == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } if ( shtml == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } if ( shtml == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %",0
486,"<S2SV_ModStart> void unbind_ports ( <S2SV_ModEnd> void ) { <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> CRYPTO_THREAD_write_lock ( stunnel_locks <S2SV_ModStart> [ LOCK_SECTIONS ] ) ; opt = service_options. next ; service_options. next = NULL ; service_free ( & service_options ) ; while ( opt ) { unsigned i ; s_log ( LOG_DEBUG, ""Unbinding <S2SV_blank> service <S2SV_blank> [%s]"", opt -> servname ) ; for ( i = 0 ; i < opt -> local_addr. num ; ++ i ) unbind_port ( opt, i ) ; if ( opt -> exec_name && opt -> connect_addr. names ) { SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; s_log ( LOG_DEBUG, ""Service <S2SV_blank> [%s] <S2SV_blank> closed"", opt -> servname ) ; } if ( opt -> ctx ) SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; s_log ( LOG_DEBUG, ""Service <S2SV_blank> [%s] <S2SV_blank> closed"", opt -> servname )",0
487,<S2SV_ModStart> void ) { if ( recovery_mode == RECOVERY_MODE_NONE ) { recovery_mode = RECOVERY_MODE_NONE ; },0
488,"<S2SV_ModStart> { enc624j600WriteReg ( interface, ENC624J600_EHT1, hashTable [ 0 ] ) ; enc624j600WriteReg ( interface, ENC624J600_EHT2, hashTable [ 1 ] ) ; enc624j600WriteReg ( interface, ENC624J600_EHT3, hashTable [ 2 ] ) ; enc624j600WriteReg ( interface, ENC624J600_EHT4, hashTable [ 3 ] ) ; <S2SV_ModEnd> TRACE_DEBUG ( "" <S2SV_blank> <S2SV_blank> <S2SV_blank> EHT1 <S2SV_blank> = <S2SV_blank> %04"" <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4",0
489,"<S2SV_ModStart> ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, &",0
490,"<S2SV_ModStart> ps_slice_hdr ) { dpb_mgr_t * ps_dpb_mgr = ps_codec -> pv_dpb_mgr ; dpb_buf_t * ps_mv_buf_mgr = ( dpb_buf_t * ) ps_codec -> pv_dpb_mgr ; dpb_mgr_t * ps_dpb_mgr = ( dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; WORD8 ai1_curr_delta_poc_msb_present_flag [ MAX_DPB_SIZE ] ; WORD8 ai1_curr_delta_poc_msb_present_flag [ MAX_DPB_SIZE ], ai1_curr_delta_poc_msb_present_flag [ MAX_DPB_SIZE ], ai1_curr_delta_poc_msb_present_flag [ MAX_DPB_SIZE ], ai1_curr_delta_poc_msb_present_flag [ MAX_DPB_SIZE ], ai1_foll_delta_poc_msb_present_flag [ MAX_DPB_",0
491,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> print_object ( cJSON <S2SV_ModStart> child ) { <S2SV_ModEnd> ++ numentries ; <S2SV_ModStart> ++ numentries ; child = child -> next ; } if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; memset ( entries, 0, sizeof ( char * ) * numentries ) ; memset ( names, 0, sizeof ( char * ) * numentries ) ; memset ( names, 0, sizeof ( char * ) * numentries ) ; entries [ i ++ ] = ret = print_value ( child, depth, fmt ) ; if (! out ) { cJSON_free ( entries ) ; return 0 ; } out = ( char * ) cJSON_malloc ( len ) ; if (! out ) fail = 1 ; for ( i = 0 ; i < numentries ; ++ i ) { if ( names [ i ] ) cJSON_free ( names [ i ] ) ; if ( names [ i ] ) cJSON_free ( names [ i ] ) ; if ( entries [ i ] ) cJSON_free ( entries [ i",0
492,"<S2SV_ModStart> = unix_peer_get ( sk ) ; if (! other ) { sock_poll_wait ( file, & sk -> sk_receive_queue, wait ) ; writable = 0 ; } else { if ( unix_recvq_full ( sk ) ) writable = 0 ; } else if ( unix_peer ( sk )!= sk ) { sock_poll_wait ( file, & unix_sk ( other ) -> peer_wait, wait ) ; writable = 0 ; } if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; } if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket ->",0
493,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ;",0
494,<S2SV_ModStart> 0 ) { if ( token_wrapper_len + 14 > header -> buffer. length ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( token_wrapper_len + 14 > header -> buffer. length ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( token_wrapper_len + 14 > header -> buffer. length ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if ( token_wrapper_len + 14 > header -> buffer. length ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if ( token_wrapper_len + 14 > header -> buffer. length ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if ( token_wrapper_len + 14 > header -> buffer. length ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECT,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { vpx_ref_frame_t <S2SV_ModEnd> * frame = <S2SV_ModStart> * frame = va_arg ( args, vpx_ref_frame_t <S2SV_ModEnd> * ) ; <S2SV_ModStart> * fb ; vpx_get_reference_enc <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> YV12_BUFFER_CONFIG * fb ) ; yuvconfig2image ( & frame -> img, fb, NULL ) ; return VPX_CODEC_OK <S2SV_ModEnd> ; } <S2SV_null>",0
496,<S2SV_ModStart> plug ) ; if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) { ret = - EPERM ; break ; },0
497,"<S2SV_ModStart> * info, <S2SV_ModEnd> int rep_quick ) <S2SV_ModStart> ""mi_repair_by_sort"" ) ; if ( param -> testflag & T_UNPACK ) { printf ( ""- <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %s\\n"", llstr ( start_records, llbuff ) ) ; } if ( param -> testflag & T_UNPACK ) { printf ( ""- <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %s\\n"", llstr ( start_records, llbuff ) ) ; } if ( param -> testflag & T_SILENT ) { printf ( ""- <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %s\\n"", llstr (",0
498,"<S2SV_ModStart> } ; # if uECC_VLI_NATIVE_LITTLE_ENDIAN uECC_word_t * p = ( uECC_word_t * ) signature ; # else uECC_word_t * p <S2SV_ModEnd> = ( uECC_word_t <S2SV_ModStart> curve ) ; if (! g_rng_function ) { uECC_vli_clear ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! g_rng_function ) { uECC_generate_random_int ( tmp, curve -> n, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! g_rng_function ) { uECC_vli_clear ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! g_rng_function ) { uECC_generate_random_int ( tmp, curve -> n, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! uECC_generate_random_int ( tmp, curve -> n, num_n_words )",0
499,"<S2SV_ModStart> trunc : ND_TCHECK2 ( * bp, ND_RPL_DAOACK_TRUNC_LEN ) ; if ( length < ND_RPL_DAOACK_TRUNC_LEN ) goto trunc ; <S2SV_ModStart> ; trunc : ND_TCHECK2 ( * bp, ND_RPL_DAOACK_TRUNC_LEN ) ; if ( length < ND_RPL_DAOACK_TRUNC_LEN ) goto trunc ; ND_TCHECK2 ( * bp, ND_RPL_DAOACK_TRUNC_LEN ) ; if ( length < ND_RPL_DAOACK_TRUNC_LEN ) goto trunc ; <S2SV_ModStart> ; trunc : ND_TCHECK2 ( * bp, ND_RPL_DAOACK_TRUNC_LEN ) ; if ( length < ND_RPL_DAOACK_TRUNC_LEN ) goto trunc ; ND_TCHECK2 ( * bp, ND_RPL_DAOACK_TRUNC_LEN ) ; if ( length < ND_RPL_DAOACK_TRUNC_LEN ) goto trunc ;",0
500,"<S2SV_ModStart> ; } else { uint32_t new_free_total = pool -> free_total * 2 ; void * new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ) ) ; if ( new_arr ) { pool -> free_total = new_free_total ; pool -> free_arr = new_arr ; } else { free ( buf ) ; }",0
501,"<S2SV_ModStart> tp ; { int cval = 0, meta = 0 ; const char * hex <S2SV_ModEnd> = ""00112233445566778899aAbBcCdDeEfF"" ; <S2SV_ModStart> = ""00112233445566778899aAbBcCdDeEfF"" ; <S2SV_ModEnd> const char * <S2SV_ModStart> = ""00112233445566778899aAbBcCdDeEfF"" ; <S2SV_ModEnd> const char * <S2SV_ModStart> ; int dcount = 0 ; if ( * cp == 'x' || * cp == 'X' ) for ( ++ cp ; * cp && ( index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; cp ++ ; if ( * cp == 'o' || * cp == 'O' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp - '0' ) ; else for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 10 )",0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,"<S2SV_ModStart> * lined ; PIX * pixc, * pixm, * pixg, * pixd ; PROCNAME ( ""pixFewColorsOctcubeQuantMixed"" ) ; if ( pixc == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; pixc = pixFewColorsOctcubeQuant2 ( pixs, level ) ; if ( pixc == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; pixc = pixFewColorsOctcubeQuant3 ( pixs, level ) ; if ( pixc == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; pixc = pixFewColorsOctcubeQuant2 ( pixs, level ) ; if ( pixc == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; pixc = pixFewColorsOctcubeQuant3 ( pixs, level ) ; if ( pixc == NULL ) return ( PIX * ) ERROR_",0
504,"<S2SV_ModStart> vf = vp8_mse16x16 <S2SV_ModEnd> ; xd -> <S2SV_ModStart> = vp8_mse16x16 ; xd -> pre. y_buffer = recon_buffer -> y_buffer + recon_yoffset ; tmp_mv. as_int = 0 ; ref_mv_full. as_mv. col = ref_mv -> as_mv. col ; ref_mv_full. as_mv. row = ref_mv -> as_mv. row ; tmp_err = cpi -> diamond_search_sad ( x, b, d, & ref_mv_full, & tmp_mv, step_param, x -> sadperbit16, & num00, & v_fn_ptr, x -> mvcost, ref_mv ) ; if ( tmp_err < INT_MAX - new_mv_mode_penalty ) tmp_err += new_mv_mode_penalty ; if ( tmp_err < INT_MAX - new_mv_mode_penalty ) tmp_err += new_mv_mode_penalty ; if ( tmp_err < INT_MAX - new_mv_penalty ) tmp_err",0
505,"<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> size = overhead <S2SV_ModStart> = overhead ; if ( ( flags & MONGO_CONTINUE_ON_ERROR ) ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } mm = & mm -> data ; if ( flags & MONGO_CONTINUE_ON_ERROR ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } if ( mongo_validate_ns ( conn, ns )!= MONGO_OK ) return MONGO_ERROR ; for ( i = 0 ; i < count ; i ++ ) { size += bson_size ( bsons [ i ] ) ; if ( mongo_bson_valid ( conn, bsons [ i ], 1 )!= MONGO_OK ) return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } if ( flags & MONGO_CONTINUE_ON_ERROR ) { return M",0
506,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> NEGO_STATE_FAIL ; return ; } if ( Stream_GetRemainingLength ( s ) < length ) { WLog_ERR ( TAG, ""Invalid <S2SV_blank> RDP_NEG_RSP"" ) ; nego -> state = NEGO_STATE_FAIL ; return ;",0
507,"<S2SV_ModStart> ; int i <S2SV_ModEnd> ; const double <S2SV_ModStart> ; do { const int bits_per_mb_at_this_q = ( int ) vp9_rc_bits_per_mb ( cm -> frame_type, i, correction_factor ) ; if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; break ; } else { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; break ; } } while ( ++ i <= active_worst_quality ) ;",0
508,<S2SV_ModStart> value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
509,"<S2SV_ModStart> ; i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD (",0
510,"<S2SV_ModStart>, <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
511,"<S2SV_ModStart> ; } else if ( end == 0 ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end == 0 ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end == 0 ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end == 0 ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end == 0 ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( end == 0 ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; }",0
512,<S2SV_ModStart> i_completed_io_list ) ; <S2SV_ModEnd> ei -> cur_aio_dio,0
513,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; vpx_wb_write_bit_buffer <S2SV_ModEnd> wb = & <S2SV_ModStart> -> common ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> -> show_frame ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
514,"<S2SV_ModStart> ; if ( stroff > 0 ) { strncpy ( parsetime_error, ""%s\\n"", ""%s\\n"", ""%s\\n"", ""%s\\n"", ""%s\\n"", ""%s\\n"", ""%s\\n"", ""%s\\n"", ""%s\\n"", ""%s\\n"", ""%s\\n"", ""%s\\n"", ""%s\\n"", ""%s\\n"", ""%s\\n"", ""%s\\n"", ""%s\\n"", ""%s\\n"", ""%s\\n"", ""%s\\n"", ""%s\\n"", ""%s\\n"", ""%s\\n"", ""%s\\n"", ""%s\\n"", ""%s\\n"", ""%s\\n"", ""%s\\n"", ""%s\\n"", ""%s\\n"", ""%s\\n"", ""%s\\n"", ""%s\\n"", ""%s\\n"", ""%s\\n"", ""%s\\n"", ""%s\\n"", ""%s\\n"", ""%s\\n""",0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context ->,0
516,"<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i + 1 ) ) == COMMA ) i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case DOUBLESTAR : return i ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (",0
517,<S2SV_ModStart> KEY_FRAME ) { memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd ->,0
518,"<S2SV_ModStart> error_t error ; <S2SV_ModEnd> Enc624j600Context * context <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8",0
519,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> read_memory ( VALUE <S2SV_ModStart> VALUE content ) { VALUE rb_schema ; VALUE errors = rb_ary_new ( ) ; xmlSetStructuredErrorFunc ( errors, Nokogiri_error_array_pusher ) ; # ifdef HAVE_XMLSCHEMASETPARSERSTRUCTUREDERRORS xmlSchemaSetParserStructuredErrors ( ctx, Nokogiri_error_array_pusher, ( void * ) errors ) ; # endif schema = xmlSchemaParse ( ctx ) ; xmlSetStructuredErrorFunc ( NULL, NULL ) ; xmlSchemaFreeParserCtxt ( ctx ) ; if ( NULL == schema ) { xmlErrorPtr error = xmlGetLastError ( ) ; if ( error ) Nokogiri_error_raise ( NULL, error ) ; else rb_raise ( rb_eRuntimeError, ""Could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> document"" ) ; return Qnil ; } rb_iv_set ( rb_schema, ""@errors"", errors ) ; if ( NULL == schema ) { xmlErrorPtr error = xmlGetLastError ( ) ; if ( error ) Nokogiri_error_raise ( NULL, error",0
520,"<S2SV_ModStart> { if ( strlen ( config_arg ) < 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> argument"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( config_arg ) < 4 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> argument"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( config_arg ) < 4 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> argument"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( config_arg ) < 4 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> argument"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( config_arg ) < 4 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> argument"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( config_arg ) < 4 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> argument"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( config_arg ) < 4 ) { s_log ( LOG_",0
521,<S2SV_ModStart> / 2 ] ; if (! state -> shuffle ) return - 1 ; <S2SV_ModStart> / 2 ] ; if (! state -> shuffle ) return - 1 ; <S2SV_ModStart> / 2 ] ; if (! state -> shuffle ) return - 1 ; out = state -> buffer ; for ( x = 0 ; x < state -> xsize ; x ++ ) { out [ 0 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 1 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; out [ 2 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; if (! state -> shuffle ) return - 1 ; out = state -> buffer ; for ( x = 0 ; x < state -> xsize ; x ++ ) { out [ 0 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 1 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 2 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; out [ 3 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [,0
522,<S2SV_ModStart> fanout_mutex ) ; if (! mutex_is_locked ( & fanout_mutex ) ) { mutex_unlock ( & fanout_mutex ) ; return - EBUSY ; },0
523,"<S2SV_ModStart>, POLL_IN ) ; <S2SV_ModEnd> perf_event_wakeup ( handle <S2SV_ModStart> pending ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
524,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int utf8s_to_utf16s ( const <S2SV_ModEnd> u8 * s <S2SV_ModStart> len > 0 <S2SV_ModEnd> ) { u16 <S2SV_ModStart> ; if ( <S2SV_ModEnd> size >= PLANE_SIZE <S2SV_ModStart> >= PLANE_SIZE ) { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; } else { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; } else { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ;,0
525,"<S2SV_ModStart> EPROTONOSUPPORT ) { <S2SV_ModEnd> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure""",0
526,"<S2SV_ModStart> ; status = ksz8851ReadReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> status & ( KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ( KSZ8851_RXFHSR_RXMR | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXFHSR_RXRF | KSZ8851_RXFHSR_RXCE ) ) == 0 ) { if ( ( status & ( KSZ8851_RXFHSR_RXMR | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXRF | KSZ8851_RXCE ) ) == 0 ) { ksz8851WriteReg ( interface, KSZ8851_RXFDPR, RXFDPR_RXFPAI ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, RXQCR_SDA ) ; ancillary = NET_DEFAULT_RX_ANCILLARY ; nicProcessPacket ( interface, context -> rxBuffer,",0
527,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static stmt_ty <S2SV_ModEnd> ast_for_funcdef_impl ( struct <S2SV_ModStart> * n, asdl_seq <S2SV_ModEnd> * decorator_seq, <S2SV_ModStart> int is_async ) <S2SV_ModEnd> { identifier name <S2SV_ModStart> returns, type_comment, LINENO ( n ), n -> n_col_offset, c -> c_arena ) ; else return AsyncFunctionDef ( name, args, body, decorator_seq, returns, type_comment, LINENO ( n ), n -> n_col_offset, c -> c_arena ) ; } if ( <S2SV_ModStart> returns, type_comment, LINENO ( n ), n -> n_col_offset, c -> c_arena ) ; else return FunctionDef ( name, args, body, decorator_seq, returns, type_comment, LINENO ( n ), n -> n_col_offset, c -> c_arena ) ; else return FunctionDef ( name, args, body, decorator_seq, returns, type_comment, LINENO ( n ), n -> n_col_offset, c -> c_arena )",0
528,"<S2SV_ModStart> int i ; if ( pgd_none_or_clear_bad ( pgd ) ) goto out ; pud = pud_offset ( pgd, 0xA0000 ) ; if ( pud_none_or_clear_bad ( pud ) ) goto out ; pmd = pmd_offset ( pmd, 0xA0000 ) ; split_huge_page_pmd ( mm, pmd ) ; if ( pmd_none_or_clear_bad ( pmd ) ) goto out ; pte = pte_offset_map_lock ( mm, pmd, 0xA0000, & ptl ) ; if ( pte_none_or_clear_bad ( pte ) ) goto out ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
529,"<S2SV_ModStart> { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } <S2SV_ModStart> { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } <S2SV_ModEnd> dst_coap_msg_ptr -> token_ptr <S2SV_ModStart> = sn_coap_protocol_malloc_copy ( handle, * packet_data_pptr, dst_coap_msg_ptr -> token_len ) ; if ( dst_coap_msg_ptr -> token_ptr == NULL ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> token!"" ) ; return - 1 ; } dst_coap_msg_ptr -> token_ptr = sn_coap_protocol_malloc_copy ( handle, * packet_data_pptr, dst_coap_msg_ptr -> token_len ) ; if ( dst_coap_msg_ptr -> token_ptr == NULL ) { tr_error ( ""sn_coap",0
530,"<S2SV_ModStart> 1 ; } if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; }",0
531,"<S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> 4 ) ; # endif <S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD if ( ( RAW ( row, col ) = pred [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; # else for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY",0
532,"<S2SV_ModStart> ; if ( param -> data_size < needed ) { param -> flags |= DM_BUFFER_FULL_FLAG ; goto out ; } param -> data_size = param -> data_start + needed ; nl -> dev = 0 ; for ( i = 0 ; i < NUM_BUCKETS ; i ++ ) { list_for_each_entry ( hc, _name_buckets + i, name_list ) { if ( old_nl ) old_nl -> next = ( uint32_t ) ( ( void * ) nl - ( void * ) old_nl ) ; old_nl = nl ; event_nr = align_ptr ( nl -> name + strlen ( hc -> name ) + 1 ) ; * event_nr = dm_get_event_nr ( hc -> md ) ; nl = align_ptr ( event_nr + 1 ) ; } }",0
533,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
534,<S2SV_ModStart> bfqq ) return bfq_idle_slice_timer_body <S2SV_ModEnd> ( bfqq ),0
535,<S2SV_ModStart> += 1 ; if ( orderInfo -> fieldFlags & ORDER_TYPE_PRIMARY_DRAWING ) { if ( orderInfo -> controlFlags & ORDER_TYPE_CHANGE ) { if ( orderInfo -> controlFlags & ORDER_TYPE_CHANGE ) { if ( orderInfo -> controlFlags & ORDER_TYPE_CHANGE ) { if ( orderInfo -> fieldFlags & ORDER_TYPE_PRIMARY_DRAWING ) { if ( orderInfo -> controlFlags & ORDER_TYPE_CHANGE ) { if ( orderInfo -> controlFlags & ORDER_TYPE_CHANGE ) { if ( orderInfo -> controlFlags & ORDER_TYPE_CHANGE ) { if ( orderInfo -> controlFlags & ORDER_TYPE_CHANGE ) { if ( orderInfo -> controlFlags & ORDER_TYPE_CHANGE ) { if ( orderInfo -> controlFlags & ORDER_TYPE_CHANGE ) { if ( orderInfo -> fieldFlags & ORDER_TYPE_PRIMARY_DRAWING ) { if ( orderInfo -> controlFlags & ORDER_TYPE_CHANGE ) { if ( orderInfo -> controlFlags & ORDER_TYPE_CHANGE ) { if ( orderInfo -> controlFlags & ORDER_TYPE_CHANGE ) { if ( orderInfo -> controlFlags & ORDER_TYPE_,0
536,<S2SV_ModStart> ; if (! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) ) { if (! OVL_TYPE_UPPER ( old_type ) ) { if (! OVL_TYPE_UPPER ( new_type ) ) { if (! OVL_TYPE_UPPER ( old_type ) ) { if (! OVL_TYPE_UPPER ( new_type ) ) { if (! OVL_TYPE_UPPER ( old_type ) ) { if (! OVL_TYPE_UPPER ( new_type ) ) { if (! OVL_TYPE_UPPER ( old_type ) ) { if (! OVL_TYPE_UPPER ( new_type ) ) { if (! OVL_TYPE_UPPER ( old_type ) ) { if (! OVL_TYPE_UPPER ( new_type ) ) { if (! OVL_TYPE_UPPER ( old_type ) ) { if (! OVL_TYPE_UPPER ( new_type ) ) { if (! OVL_TYPE_UPPER ( old_type ) ) {,0
537,"<S2SV_ModStart> int plane ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { vpx_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; return ; } # endif # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { vpx_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; } else if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { vpx_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; } # endif # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { vpx_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; } else if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { vpx_foreach_transformed_block_in",0
538,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nonrd_pick_sb_modes ( VP9_COMP <S2SV_ModStart> * cpi, TileDataEnc * tile_data <S2SV_ModEnd>, int mi_row <S2SV_ModStart> -> e_mbd ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> mi [ 0 ] -> mbmi. sb_type == BLOCK_SIZE_HIGHBITDEPTH && xd -> mi [ 0 ] -> mbmi. sb_type == BLOCK_SIZE_HIGHBITDEPTH && xd -> mi [ 0 ] -> mbmi. sb_type == BLOCK_SIZE_HIGHBITDEPTH ) { vp9_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> mi [ 0 ] -> mbmi. sb_type == BLOCK_SIZE_HIGHBITDEPTH && xd -> mi [ 0 ] -> mbmi. sb_type == BLOCK_SIZE_HIGHBITDEPTH ) { vp9_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist,",0
539,"<S2SV_ModStart> = NULL ; if (! reader. all ) { hrtf = getHrtf ( & reader, err ) ; } else { hrtf = getHrtf ( & reader, err ) ; }",0
540,"<S2SV_ModStart> = 1 ; memset ( pMap -> ranges, 0, sizeof ( MappedRange ) ) ;",0
541,"<S2SV_ModStart> ; if ( ( flags & VP8_EFLAG_NO_UPD_GF ) && ( flags & VP8_EFLAG_FORCE_GF ) ) || ( ( flags & VP8_EFLAG_NO_UPD_ARF ) && ( flags & VP8_EFLAG_FORCE_ARF ) ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & ( VP8_EFLAG_NO_REF_LAST | V",0
542,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
543,<S2SV_ModStart> event ) ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
544,"<S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) { <S2SV_ModStart> len ) ; if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> ] ) ; if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> ] ) ; if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> ] ) ; if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> ] ) ; if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> ] ) ; if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> ] ) ; if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break",0
545,"<S2SV_ModStart> ""<table <S2SV_blank> id=\'status-table\'><tr>"" ""<th <S2SV_blank> width=\'40%%\'>Parameter</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""<th <S2SV_blank> width=\'60%%\'>Return <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> width=\'60%%\'>Value</th>"" ""<th <S2SV_blank> width=\'60%%\'>Return <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> width=\'60%%\'>Return <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
546,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
547,"<S2SV_ModStart> ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ; } else if ( isAddLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ; } else if ( isRemoveLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"" ; } else if ( isAddLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ; } else if ( isAddLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ; } else if ( isRemoveLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"" ; } else if ( isAddLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ; } else if ( isAddLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ; } else { return false ; }",0
548,"<S2SV_ModStart> iad_num ++ ; if ( iad_num > USB_MAXINTERFACES ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, USB_MAXINTERFACES ) ; return - EINVAL ; }",0
549,"<S2SV_ModStart>. header. size, <S2SV_ModEnd> 0, 0",0
550,"<S2SV_ModStart> 16 ) ; switch ( mode ) { case DC_PRED : xd -> mode_info_context -> mbmi. mode = B_PRED ; break ; case TM_PRED : xd -> mode_info_context -> mbmi. mode = B_PRED ; break ; case TM_PRED : xd -> mode_info_context -> mbmi. mode = B_PRED ; distortion = vp8_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; rate = x -> mbmode_cost [ xd -> frame_type ] [ mode ] ; this_rd = RDCOST ( x -> rdmult, x -> rddiv, rate, distortion ) ; if ( error16x16 > this_rd ) { error16x16 = this_rd ; best_mode = mode ; best_sse = sse ; } } xd -> mode_info_context -> mbmi. mode = best_mode ; error4x4 = pick_intra4x4mby_modes ( x, & rate, & best_sse ) ; if ( error4x4 <",0
551,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH ) ; if ( macCompAddr ( & interface -> macAddr, & MAC_UNSPECIFIED_ADDR ) ) { temp = enc624j600ReadReg ( interface, ENC624J600_MAADR1 ) ; interface -> macAddr. w [ 0 ] = letoh16 ( temp ) ; interface -> macAddr. w [ 1 ] = letoh16 ( temp ) ; interface -> macAddr. w [ 2 ] = letoh16 ( temp ) ; macAddrToEui64 ( & interface -> macAddr, & interface -> eui64 ) ; } else { temp = htole16 ( interface -> macAddr. w [ 0 ] ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR1, temp ) ; temp = htole16 ( interface -> macAddr. w [ 1 ] ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR2, temp ) ; temp =",0
552,"<S2SV_ModStart> * start ; va_start ( argptr, format ) ; vsnprintf ( start, maxlen, format, argptr ) ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header ) ; return ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
553,<S2SV_ModStart> priv -> alg_priv ) { if ( ctx -> iface -> destroy ) ctx -> iface -> destroy ( ctx -> priv -> alg_priv ) ; else ctx -> priv -> iface = NULL ; ctx -> priv -> name = NULL ; ctx -> priv = NULL ; } <S2SV_ModEnd> return SAVE_STATUS (,0
554,"<S2SV_ModStart> { sf -> <S2SV_ModEnd> adaptive_rd_thresh = 1 <S2SV_ModStart> -> use_square_partition_only = <S2SV_ModEnd> frame_is_intra_only ( cm <S2SV_ModStart> ; sf -> <S2SV_ModEnd> tx_size_search_method = vp9_frame_is_boosted <S2SV_ModStart> = vp9_frame_is_boosted ( cpi )? USE_FULL_RD : USE_LARGESTALL ; if ( MIN ( cm -> width, cm -> height ) >= 720 ) { sf -> disable_split_mask = DISABLE_COMPOUND_SPLIT ; sf -> mode_skip_start = 10 ; sf -> adaptive_pred_interp_filter = 1 ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_H_V ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra",0
555,"<S2SV_ModStart> int ret = select ( pfds, ts [ h ]. poll_count, - 1 ) ; if ( ret == - 1 ) { APPL_TRACE_ERROR ( ""poll <S2SV_blank> ret <S2SV_blank> -1, <S2SV_blank> exit <S2SV_blank> the <S2SV_blank> thread, <S2SV_blank> errno:%d, <S2SV_blank> err:%s"", errno, strerror ( errno ) ) ; break ; } if ( ret == - 1 ) { APPL_TRACE_ERROR ( ""poll <S2SV_blank> ret <S2SV_blank> -1, <S2SV_blank> exit <S2SV_blank> the <S2SV_blank> thread, <S2SV_blank> errno:%d, <S2SV_blank> err:%s"", errno, strerror ( errno ) ) ; break ; } if ( ret == - 1 ) { APPL_TRACE_ERROR ( ""poll <S2SV_blank> ret <S2SV_blank> -1, <S2SV_blank> exit <S2SV_blank> the <S2SV_blank> thread, <S2SV_blank> errno:%d, <S2SV_blank> err:%s"", errno, strerror ( errno ) ) ; break ; } if ( ret == - 1 ) { APPL_TRACE_ERROR ( ""poll <S2SV_blank> ret <S2SV_blank> -1, <S2SV_blank> exit <S2SV_blank> the <S2SV_blank> thread, <S2SV_blank> errno:%d, <S2SV_blank> err:%s"", errno, strerror ( errno ) ) ; break ; }",0
556,"<S2SV_ModStart> ; int goodsize ; if ( inuse > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( goodsize > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L,",0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,"<S2SV_ModStart> ) ; const char * raw = STR ( CHILD ( n, 0 ) ) ; int quote = Py_CHARMASK ( * s ) ; char buf [ 128 ] ; char buf [ 128 ] ; s = _PyUnicode_AsString ( raw ) ; PyOS_snprintf ( buf, sizeof ( buf ), ""(unicode <S2SV_blank> error) <S2SV_blank> %s"", s ) ; ast_error ( n, buf ) ; Py_DECREF ( errstr ) ; # ifdef Py_USING_UNICODE if ( PyErr_ExceptionMatches ( PyExc_UnicodeError ) ) { PyObject * type, * value, * tback, * errstr ; PyErr_Fetch ( & type, & value, & tback ) ; errstr = PyObject_Str ( value ) ; if ( errstr ) { PyOS_snprintf ( buf, sizeof ( buf ), ""(unicode <S2SV_blank> error) <S2SV_blank> %s"", s ) ; ast_error ( n, buf ) ; Py_DECREF ( type ) ; Py_DECREF ( tback ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF ( type ) ;",0
559,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> ; } else if ( strcmp ( ""encoding-mode"", option_name ) == 0 ) { res = set_option_encoding_mode ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""layers"", option_name ) == 0 ) { svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_factors ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers-keyframe"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value,",0
560,"<S2SV_ModStart> ) ; } fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; mb_index = 0 ; fprintf ( mvs, ""Mb <S2SV_blank> mv <S2SV_blank> ref <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. ref_frame ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; mb_index = 0 ; fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. uv_mode ) ; mb_index ++ ; } fprintf ( mvs,",0
561,<S2SV_ModStart> self ) { <S2SV_ModEnd> PyObject * new_memo,0
562,,1
563,"<S2SV_ModStart> ) ) { if ( imp_dbh -> pmysql ) { do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; return FALSE ; }",0
564,<S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart>,0
565,<S2SV_ModStart> struct ieee_802_11_phdr phdr <S2SV_ModEnd> ; col_set_str ( <S2SV_ModStart> phdr ) ; if ( mpdu_str == NULL ) { mpdu_str = g_malloc ( sizeof ( struct ieee_802_11_phdr ) ) ; mpdu_str = g_malloc ( sizeof ( struct ieee_802_11_phdr ) ) ; } if ( mpdu_str == NULL ) { mpdu_str = g_malloc ( sizeof ( struct ieee_802_11_phdr ) ) ; } if ( mpdu_str == NULL ) { mpdu_str = g_malloc ( sizeof ( struct ieee_802_11_phdr ) ) ; mpdu_str = g_malloc ( sizeof ( struct ieee_802_11_phdr ) ) ; } if ( mpdu_str == NULL ) { mpdu_str = g_malloc ( sizeof ( struct ieee_802_11_phdr ) ) ; } if ( mpdu_str == NULL ) { mpdu_str = g_malloc ( sizeof ( struct ieee_,0
566,"<S2SV_ModStart> * fp ; size_t alloclen = hdrlen + initlen + 1 ; if ( sh == NULL ) return NULL ; if ( init == SDS_NOINIT ) init = NULL ; else if (! init ) memset ( sh, 0, alloclen ) ; s = ( char * ) sh + hdrlen ; fp = ( ( unsigned char * ) s ) - 1 ; switch ( type ) { case SDS_TYPE_8 : { SDS_HDR_VAR ( 8, s ) ; sh -> len = initlen ; sh -> alloc = initlen ; * fp = type ; break ; } case SDS_TYPE_16 : { SDS_HDR_VAR ( 16, s ) ; sh -> len = initlen ; sh -> alloc = initlen ; * fp = type ; break ; } case SDS_TYPE_32 : { SDS_HDR_VAR ( 32, s ) ; sh -> alloc = initlen ; * fp = type ; break ; } case SDS_TYPE_64 : { SDS_HDR_VAR ( 64, s ) ; sh -> len = initlen ; sh -> alloc = initlen ; * fp = type",0
567,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> a_val ; UINT32 <S2SV_ModEnd> tempWidth ; TEMP_FAILURE_RETRY <S2SV_ModStart> -> ChromaSubsamplingLevel? TEMP_FAILURE_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY : TEMP_FAILURE_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY,0
568,"<S2SV_ModStart> ) return ERR_PTR ( <S2SV_ModEnd> - EINVAL ) <S2SV_ModStart> - EINVAL ) ; if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } * ( ++ top ) = invert ; continue ; case '!' : if (! is_not ( next ) ) break ; invert =! invert ; continue ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; }",0
569,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int calc_iframe_target_size_one_pass_cbr ( const VP9_COMMON * cm, const RATE_CONTROL * rc ) { int target <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) { target = ( cpi -> oxcf. starting_buffer_level / 2 ) > INT_MAX? ( int ) ( cpi -> oxcf. starting_buffer_level / 2 ) : ( int ) ( cpi -> oxcf. starting_buffer_level / 2 ) ; } else { const int initial_boost = 32 ; int kf_boost = MAX ( initial_boost, ( int ) ( 2 * cpi -> output_framerate - 16 ) ) ; if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { kf_boost = ( int ) ( kf_boost * rc -> frames_since_key / cpi -> output_framerate / 2 ) ; } target = ( cpi -> oxcf. starting_buffer_level * cpi -> oxcf. starting_buffer_level",0
570,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_bit_depth_t <S2SV_ModEnd> read_tx_mode ( vpx_reader <S2SV_ModStart> r ) { vpx_bit_depth_t <S2SV_ModEnd> tx_mode = vpx_read_literal <S2SV_ModStart> 2 ) ; vpx_bit_depth_t <S2SV_ModEnd> tx_mode = vpx_read_bit <S2SV_ModStart> ; tx_mode += vpx_read_bit <S2SV_ModEnd> ( r ),0
571,"<S2SV_ModStart> : # line 97 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 97 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 97 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 99 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 99 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 100 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 100 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 100 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 99 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 100 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 99 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 100 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 100 <S2SV_ModEnd>",0
572,"<S2SV_ModStart> = args -> cpi <S2SV_ModEnd> ; MACROBLOCKD * <S2SV_ModStart> uint8_t token_cache [ 64 <S2SV_ModEnd> * 32 ] <S2SV_ModStart> uint8_t token_cache [ 64 <S2SV_ModEnd> * 32 ] <S2SV_ModStart> uint8_t token_cache [ 64 <S2SV_ModEnd> * 32 ] <S2SV_ModStart> uint8_t token_cache [ 64 <S2SV_ModEnd> * 32 ] <S2SV_ModStart> uint8_t token_cache [ 64 <S2SV_ModEnd> * 32 ] <S2SV_ModStart> uint8_t token_cache [ 64 <S2SV_ModEnd> * 32 ] <S2SV_ModStart> int aoff, loff ; vp9_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. fc. coef_probs [ tx_size ] [ type ] [ ref ] ; vp9_prob ( * const eob_branch ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. counts. eob_branch [ tx_size ] [ type ] [ ref ] ; vp9_prob ( * const counts ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. fc. coef_probs [ tx_size ] [ type ]",0
573,<S2SV_ModStart> pSelect -> pSrc ; if ( pSrc == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; },0
574,"<S2SV_ModStart> users ) ; if (! serv ) { printk ( KERN_ERR ""nfs_callback_create_svc: <S2SV_blank> create <S2SV_blank> service <S2SV_blank> failed\\n"" ) ; return ERR_PTR ( - ENOMEM ) ; }",0
575,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
576,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
577,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
578,"<S2SV_ModStart> s ) { if ( s < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } ret = send ( sock_fd, buf, s, 0 ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ;",0
579,"<S2SV_ModStart> = NULL ; if ( xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( strcmp ( xIter -> name, XML_ATTR_ID ) == 0 ) { continue ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is",0
580,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> svc_ctx ) { SvcInternal_t <S2SV_ModEnd> * ) svc_ctx <S2SV_ModStart> return ( SvcInternal_t <S2SV_ModEnd> * ) svc_ctx,0
581,"<S2SV_ModStart> ) ; } if ( hkey. type == HASH_KEY_IS_STRING ) { zend_hash_update ( params, hkey. str, hkey. len, ( void * ) & tmp, sizeof ( zval * ), ( void * ) & arg, sizeof ( zval * ), ( void * ) & args ) ; * current_param = tmp ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_hash_update ( params, hkey. num, hkey. len, ( void * ) & tmp, sizeof ( zval * ), ( void * ) & args ) ; * current_args = args ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_hash_update ( params, hkey. num, hkey. len, ( void * ) & tmp, sizeof ( zval * ), ( void * ) & args ) ; * current_param = args ; } if ( hkey. type == HASH_KEY_IS_LONG ) { zend_hash_get_current_data ( Z_ARRVAL_P ( zdata ), ( void * )",0
582,"<S2SV_ModStart> only_420 ) { _y4m -> vpx_fmt = VPX_IMG_FMT_I420 ; _y4m -> vpx_bps = 12 ; if (! _y4m -> vpx_fmt ) { fprintf ( stderr, ""Error <S2SV_blank> parsing <S2SV_blank> video <S2SV_blank> interlacing <S2SV_blank> format <S2SV_blank> unknown; <S2SV_blank> "" ""assuming <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; return - 1 ; } _y4m -> interlace = '?' ; _y4m -> interlace = 'p' ; if ( _y4m -> interlace == '?' ) { fprintf ( stderr, ""Warning: <S2SV_blank> Input <S2SV_blank> video <S2SV_blank> interlacing <S2SV_blank> format <S2SV_blank> unknown; <S2SV_blank> "" ""assuming <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; return - 1 ; } else if ( _y4m -> interlace == '?' ) { fprintf ( stderr, ""Warning: <S2SV_blank> Input <S2SV_blank> video <S2SV_blank> interlacing <S2SV_blank> format <S2SV_blank> unknown; <S2SV_blank> "" ""assuming <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; return - 1 ; } if ( _y4m -> interlace == '?'",0
583,"<S2SV_ModStart> obj * otmp ; if (! isspace ( buf ) ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; }",0
584,"<S2SV_ModStart> { long long <S2SV_ModEnd> directory_table_end, table_start <S2SV_ModStart> 0 ) return FALSE <S2SV_ModEnd> ; if ( <S2SV_ModStart> == FALSE ) return FALSE ; if ( parse_exports_table ( & table_start ) == FALSE ) return FALSE ; if ( parse_inode_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_fragment_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( no_xattrs ) sBlk. s. xattr_id_table_",0
585,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct env * <S2SV_ModEnd> createenv ( const <S2SV_ModStart> -> root ) ; if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { struct envnode * node ; size_t len ; char keybuf [ 1024 ] ; node = createnode ( keybuf, eq + 1 ) ; if ( RB_INSERT ( envtree, & env -> root, node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } }",0
586,"<S2SV_ModStart> -> seg ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ; vp9_clearall_segfeatures ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_enable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; vp9_set_segdata ( seg, segment, SEG_LVL_ALT_Q, qindex_delta ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> frame_type, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vp9_enable_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ; vp9_set_segdata ( seg, segment, SEG_LVL_ALT_Q, qindex_delta ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
587,"<S2SV_ModStart> ; Module_type = make_type ( ""Module"", mod_type, Module_fields, 1 ) ; if (! Module_type ) return 0 ; <S2SV_ModStart> ; Interactive_type = make_type ( ""Interactive"", mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; FunctionDef_type = make_type ( ""FunctionDef"", stmt_type, FunctionDef_fields, 5 ) ; if (! FunctionDef_type ) return 0 ; AsyncFunctionDef_type = make_type ( ""AsyncFunctionDef"", stmt_type, AsyncFunctionDef_fields, 5 ) ; if (! AsyncFunctionDef_type ) return 0 ; ClassDef_type = make_type ( ""ClassDef"", stmt_type, ClassDef_fields, 5 ) ; if (! ClassDef_type )",0
588,"<S2SV_ModStart> } logfile_fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ""btsnoop\\0\\0\\0\\0\\0\\1\\0\\0\\x3\\xea"", 16 )",0
589,<S2SV_ModStart> 16 ) ; } if ( m == Y_PRED ) { ++ x -> ymode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ; } else { ++ x -> ymode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ; },0
590,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> DoOneObject ( char <S2SV_ModStart> * s, <S2SV_ModEnd> * t, <S2SV_ModStart> * t, double * <S2SV_ModEnd> argbuf = 0 <S2SV_ModStart> = 0 ; <S2SV_ModEnd> SetDefaults ( ) <S2SV_ModStart> = outputbuffer ; s = cinput ; while ( * s == '0' && s [ 1 ] == '[' ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf ( outfile, ""%s"", outputbuffer ) ; return ( 0 ) ; } } StartClean = outpos ; nameobject = s ; while ( * s == '0' && s [ 1 ] == '[' ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf ( outfile, ""%s""",0
591,"<S2SV_ModStart> expr_ty step ; int res ; if ( _PyObject_HasAttrId ( obj, & PyId_lower ) ) { int res ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { int res ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( exists_not_none ( obj, & PyId_upper ) ) { int res ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( exists_not_none ( obj, & PyId_step ) ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { step = NULL ; } if ( exists_not_none ( obj, & PyId_step ) ) { int res ;",0
592,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",0
593,"<S2SV_ModStart> int err ; list_for_each_entry ( iter, & alink -> dscp_map, list ) if ( iter -> handle == knode -> handle ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } if ( iter -> band!= knode -> res -> classid ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } list_for_each_entry ( iter, & alink -> dscp_map, list ) { u32 cmask ; if ( ( iter -> val & cmask ) == ( val & cmask ) && iter -> band!= knode -> res -> classid ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } } else if ( iter -> band!= knode -> res -> classid ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto",0
594,"<S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; } <S2SV_ModEnd> if ( pass <S2SV_ModStart>. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> cx_time = 0 ; stream -> nbytes = 0 ; stream -> frames_out = 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
595,"<S2SV_ModStart> ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( tmpfile_name ) ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ;",0
596,"<S2SV_ModStart> { VP9_COMMON * const cm = & pbi -> common ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_cols = 1 << cm -> log2_tile_cols ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_cols = 1 << cm -> log2_tile_cols ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_cols = 1 << cm -> log2_tile_cols ; TileBuffer tile_buffers [ 4 ] [ 1 << 6 ] ; int tile_row, tile_col ; const int last_tile = tile_row == tile_rows - 1 && tile_col == tile_cols - 1 ; const size_t size = get_tile ( data_end, last_tile, & cm -> error, & data ) ; for ( tile_row = 0 ; tile_row < tile_rows ; ++ tile_row ) { for ( tile_col = 0 ; tile_col < tile_cols ; ++ tile_",0
597,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> VP9Decoder <S2SV_ModEnd> * vp9_decoder_create ( <S2SV_ModStart> <S2SV_null> <S2SV_null> VP9Decoder <S2SV_ModEnd> * const oxcf <S2SV_ModStart> { VP9Decoder * const pbi <S2SV_ModEnd> = vpx_memalign ( <S2SV_ModStart> * pbi ) ; const VP9_COMMON * const cm = pbi? & pbi -> common : NULL ; if ( setjmp ( cm -> error. jmp ) ) { return NULL ; } cm -> error. setjmp = 1 ; vp9_initialize_dec ( ) ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; cm -> ready_for_new_data = 1 ; cm -> decoded_key_frame = 0 ; vp9_init_dequantizer ( cm ) ; cm -> error. setjmp = 0 ; vp9_worker_init ( & pbi -> lf_worker ) ; return pbi <S2SV_ModEnd> ; } <S2SV_null>",0
598,"<S2SV_ModStart> GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } if (! ( ( GF_DataInformationBox * ) s ) -> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } if (! ( ( GF_DataInformationBox * ) s ) -> dref ) ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank>",0
599,<S2SV_ModStart> req ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> -> opt ; <S2SV_ModEnd> cipso_v4_delopt ( &,0
600,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> tree2tok ( struct <S2SV_ModStart> ) { const vpx_tree_index <S2SV_ModEnd> j = tree <S2SV_ModStart> ++ ] ; if ( j <= 0 ) { tokens [ - j ]. value = v ; tokens [ - j ]. len = l ; } else { tree2tok ( tokens, tree, i, v, l ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
601,"<S2SV_ModStart> ; if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) ref ^= VP9_ALT_FLAG ; vp9_use_as_reference ( ctx -> cpi, ref ) ; } if ( flags & ( VP8_EFLAG_NO_UPD_LAST | VP8_EFLAG_NO_UPD_GF | VP8_EFLAG_NO_UPD_ARF | VP8_EFLAG_FORCE_GF | VP8_EFLAG_FORCE_ARF ) ) { int upd = 7 ; if ( flags & ( VP8_EFLAG_NO_UPD_LAST | VP8_EFLAG_NO_UPD_GF | VP8_EFLAG_NO_UP",0
602,"<S2SV_ModStart>, & len ) ; if ( ret ) goto error ; if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } newseq = realloc ( seq, count * elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; } seq = newseq ; elem = ( char * ) seq + count * elemtype -> size ; memset ( elem, 0, elemtype -> size ) ; ret = decode_atype ( & t, contents, clen, elemtype, elem ) ; if ( ret ) goto error ; count ++ ; }",0
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> fadst16_8col ( __m128i <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> fadst16_8col ( __m128i,0
604,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> frame_max_bits ( const <S2SV_ModStart> rc, const VP9EncoderConfig <S2SV_ModEnd> * oxcf )",0
605,"<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN <S2SV_ModStart> MIF_MAGICLEN ] ; jas_eprintf ( ""mif_hdr_get <S2SV_blank> failed\\n"" ) ; goto error ; } JAS_DBGLOG ( 10, ( ""header <S2SV_blank> line: <S2SV_blank> len=%d; <S2SV_blank> %s\\n"", strlen ( buf ), buf ) ) ; if (! mif_getline ( in, buf, sizeof ( buf ) ) ) { jas_eprintf ( ""mif_getline <S2SV_blank> failed\\n"" ) ; goto error ; } JAS_DBGLOG ( 10, ( ""header <S2SV_blank> line: <S2SV_blank> len=%d; <S2SV_blank> %s\\n"", strlen ( buf ), buf ) ) ; if (! mif_getline ( in, buf, sizeof ( buf ) ) ) { jas_eprintf ( ""mif_getline <S2SV_blank> failed\\n"" ) ; goto error ; } if (! mif_getline ( in, buf, sizeof ( buf ) ) ) { jas_eprintf ( ""mif_getline <S2SV_blank> failed\\n"" ) ; goto error ; } if",0
606,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_superblock ( VP9_COMP <S2SV_ModStart> * cpi, MACROBLOCK * x, int mi_row, int mi_col, BLOCK_SIZE bsize ) { <S2SV_ModEnd> VP9_COMMON * const <S2SV_ModStart> -> common ; MACROBLOCKD * const xd = & cpi -> td. <S2SV_ModStart> x = & x -> e_mbd <S2SV_ModEnd> ; MODE_INFO * <S2SV_ModStart> -> mbmi ; PICK_MODE_CONTEXT * ctx = get_block_context ( x, bsize ) ; x -> skip_recode =! x -> skip_recode ; x -> skip_optimize = ctx -> is_coded ; ctx -> is_coded = 1 ; x -> use_lp32x32fdct = cpi -> sf. use_lp32x32fdct ; x -> use_lp32x32fdct = cpi -> sf. use_lp32x32fdct ; x -> use_lp32x32fdct = cpi -> sf. use_lp32x32fdct ; x -> use_lp32x32fdct = cpi -> sf. use_lp32",0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header,0
608,"<S2SV_ModStart> { uint32_t value ; int position, zeroes, i, j ; char bits [ 65 ] ; if ( ctx -> trace_enable ) position = get_bits_count ( gbc ) ; if ( position < 0 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } while ( get_bits_left ( gbc ) < zeroes + 1 ) { if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALID",0
609,"<S2SV_ModStart> { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c )",0
610,"<S2SV_ModStart> = 0, packet -> http_content_len. ptr = NULL, packet -> http_content_len. len = 0, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_origin. ptr = NULL, packet -> http_origin. len = 0, packet -> http_x_session_type. ptr = NULL, packet -> http_x_session_type. len = 0,",0
611,"<S2SV_ModStart> 4 ) { if ( ( x + 4 ) > dds_info -> width || ( y + 4 ) > dds_info -> height ) { return MagickFalse ; } <S2SV_ModStart> y ), exception ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; q = QueueAuthenticPixels ( image, x, y, Min ( 4, dds_info -> width - x ), exception ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; q = QueueAuthenticPixels ( image, x, y, Min ( 4, dds_info -> height - y ), exception ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; c0 = ReadBlobLSBShort ( image ) ; c1 = ReadBlobLSBShort ( image ) ; bits = ReadBlobLSBLong ( image ) ; CalculateColors ( c0, c1, & colors, MagickFalse ) ; for ( j = 0 ; j < 4 ; j ++ ) { if ( ( j + i ) < ( ssize_t ) dds_info -> width && ( j + i ) < ( ssize_t ) d",0
612,"<S2SV_ModStart> length ) { <S2SV_ModEnd> int ret = <S2SV_ModStart>, length, MSG_NOSIGNAL ) ; if ( ret < 0 ) { ERROR ( ""ack <S2SV_blank> failed <S2SV_blank> (%s)"", strerror ( errno ) ) ; skt_disconnect ( common -> ctrl_fd ) ; common -> ctrl_fd = AUDIO_SKT_DISCONNECTED ; return - 1 ; } } if ( ret < 0 ) { ERROR ( ""ack <S2SV_blank> failed <S2SV_blank> (%s)"", strerror ( errno ) ) ; if ( ret < 0 ) { ERROR ( ""ack <S2SV_blank> failed <S2SV_blank> (%s)"", strerror ( errno ) ) ; skt_disconnect ( common -> ctrl_fd ) ; common -> ctrl_fd = AUDIO_SKT_DISCONNECTED ; return - 1 ; } } if ( ret < 0 ) { ERROR ( ""ack <S2SV_blank> failed <S2SV_blank> (%s)"", strerror ( errno ) ) ; if ( errno == EINTR ) { ret = recv ( common -> ctrl_fd, buffer, length, MSG_NOSIGNAL ) ; if ( ret < 0 ) { ERROR ( ""ack <S2SV_blank> failed <S2SV_blank> (%s)"", strerror ( errno ) ) ; skt_disconnect ( common -> ctrl_fd ) ;",0
613,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c <S2SV_blank> %s\\n"", <S2SV_ModStart> action ) ;",0
614,"<S2SV_ModStart> ( outpos, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11, x12, x21, x22, x, y ) ; outpos += strlen ( ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11, x12, x21, x22, x, y ) ; outpos += strlen ( ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11, x12, x21, x22, x, y ) ; outpos += strlen ( ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank>",0
615,"<S2SV_ModStart> ; WLog_VRB ( AUTODETECT_TAG <S2SV_ModEnd>, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" )",0
616,<S2SV_ModStart> ; # endif # if ( CONFIG_REALTIME_ONLY & CONFIG_ONTHEFLY_BITPACKING ) if ( num_part > 1 ) w = & cpi -> bc [ 1 + ( mb_row % num_part ) ] ; else w = & cpi -> bc [ 1 + ( mb_row % num_part ) ] ; else w = & cpi -> bc [ 1 + ( mb_row % num_part ) ] ; # endif # if CONFIG_ONTHEFLY_BITPACKING ) if ( num_part > 1 ) w = & cpi -> bc [ 1 + ( mb_row % num_part ) ] ; else w = & cpi -> bc [ 1 + ( mb_row % num_part ) ] ; # endif # if CONFIG_REALTIME_ONLY & CONFIG_ONTHEFLY_BITPACKING ) if ( num_part > 1 ) w = & cpi -> bc [ 1 + ( mb_row % num_part ) ] ; else w = & cpi -> bc [ 1 + ( mb_row % num_part ) ] ; # endif # if CONFIG_REALTIME_ONLY & CONFIG_ONTHEFLY_BITPACKING,0
617,"<S2SV_ModStart> -> b_multithreaded_rd ) vpx_de_alloc_temp_buffers <S2SV_ModEnd> ( pbi,",0
618,<S2SV_ModStart> == 0 ) { xWantedSize += xHeapStructSize ; if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } } else { mtCOVERAGE_TEST_MARKER ( ) ; } if ( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) ) { pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize ) ; pxNewBlockLink -> xBlockSize = pxBlock -> xBlockSize - xWantedSize ) ; pxNewBlockLink -> xBlockSize = xWantedSize ; pxNewBlockLink -> xBlockSize = xWantedSize ; prvInsertBlockIntoFreeList ( ( pxNewBlockLink ) ) ) ; } else { mtCOVERAGE_TEST_MARKER ( ) ; },0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,"<S2SV_ModStart> s ) { <S2SV_ModEnd> uint16 left, <S2SV_ModStart>, Debug, ""%s()"", __func__ ) ; in_uint16_le ( s, left ) ; in_uint16_le ( s, top ) ; in_uint16_le ( s, right ) ; in_uint16_le ( s, bottom ) ; <S2SV_ModStart> i ++ ) { in_uint16_le ( s, left ) ; in_uint16_le ( s, top ) ; in_uint16_le ( s, right ) ; in_uint16_le ( s, bottom ) ; in_uint16_le ( s, width ) ; in_uint16_le ( s, height ) ; in_uint16_le ( s, bpp ) ; Bpp = ( bpp + 7 ) / 8 ; if (! compress ) { int y ; bmpdata = ( uint8 * ) xmalloc ( width * height * Bpp ) ; for ( y = 0 ; y < height ; y ++ ) { ui_paint_bitmap ( left, top, cx, cy, width, height, bmpdata ) ; xfree ( bmpdata ) ; continue ; } if ( compress",0
621,"<S2SV_ModStart> } else { if (! smatch ( option, ""filename"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Missing <S2SV_blank> filename"" ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( option, ""\\""\'"", MPR_TRIM_BOTH ) ; if ( smatch ( option, ""anew"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""backup"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""anew"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""stamp"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""stamp"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""stamp"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""anew"" ) ) { flags |= MPR_LOG_ANEW ; } else if (",0
622,"<S2SV_ModStart> tx_size, vpx_coeff_stats <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model <S2SV_ModEnd> * coef_probs = <S2SV_ModStart> [ tx_size ] ; vpx_coeff_count * coef_counts = cpi -> coef_counts [ tx_size ] ; unsigned int ( * eob_branch_ct ) [ REF_TYPES ] [ COEF_BANDS ] [ COEFF_CONTEXTS ] ; vpx_tree_probs_from_distribution ( vp9_coef_tree, coef_counts [ i ] [ j ] [ k ] [ l ] ) ; coef_probs [ i ] [ j ] [ k ] [ l ] = get_binary_prob ( coef_branch_ct [ i ] [ j ] [ k ] [ l ], coef_probs [ i ] [ j ] [ k ] [ l ] ) ; for ( m = 0 ; m < UNCONSTRAINED_NODES ; ++ m ) coef_probs [ i ] [ j ] [ k ] [ l ] [ m ] = get_binary_prob ( coef_probs [ i ] [ j ] [ k ] [ l",0
623,"<S2SV_ModStart> } ; assert ( strlen ( name ) > 0 ) ; if ( strlen ( name ) > 0 ) { if ( strlen ( name ) > 0 ) { r = strlen ( name ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> UTF-8 <S2SV_blank> term <S2SV_blank> processing <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; } else { r = strlen ( name ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> UTF-8 <S2SV_blank> term <S2SV_blank> processing <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ;",0
624,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> su3000_frontend_attach ( struct <S2SV_ModStart> ; if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( <S2SV_ModStart> ; if ( <S2SV_ModEnd> dvb_usb_generic_rw ( d <S2SV_ModStart> ; if ( <S2SV_ModEnd> dvb_usb_generic_rw ( d <S2SV_ModStart> ; if ( <S2SV_ModEnd> dvb_usb_generic_rw ( d <S2SV_ModStart> ; if ( <S2SV_ModEnd> dvb_usb_generic_rw ( d <S2SV_ModStart> ; if ( <S2SV_ModEnd> dvb_usb_generic_rw ( d <S2SV_ModStart> ; if ( <S2SV_ModEnd> dvb_usb_generic_rw ( d <S2SV_ModStart> ; if ( <S2SV_ModEnd> dvb_usb_generic_rw ( d <S2SV_ModStart> ; if ( <S2SV_ModEnd> dvb_usb_generic_rw ( d <S2SV_ModStart> ; if ( <S2SV_ModEnd> dvb_usb_generic_rw ( d <S2SV_ModStart> ; if ( <S2SV_ModEnd> dvb_usb_generic_rw ( d <S2SV_ModStart> ; if ( <S2SV_ModEnd> dvb_usb_generic_rw ( d <S2SV_ModStart> ; if ( <S2SV_ModEnd> dvb_usb_generic_rw (",0
625,"<S2SV_ModStart> * iface, vpx_codec_enc_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION",0
626,"<S2SV_ModStart> int stride, <S2SV_ModEnd> int uv_block_size, <S2SV_ModStart> const kernel = vpx_get_interp_kernel <S2SV_ModEnd> ( xd -> <S2SV_ModStart>. interp_filter ) <S2SV_ModEnd> ; enum mv_precision <S2SV_ModStart> int uv_stride ; vpx_build_inter_predictor ( y_mb_ptr, stride, & pred [ 0 ], 16, & mv, scale, 16, 16, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vpx_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vpx_build_inter_predictor ( v_mb_ptr, uv_stride, & pred [ 512 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vpx_build_inter_predictor ( u_mb_ptr, uv_",0
627,"<S2SV_ModStart> = TRUE ; if ( strlen ( origbuf ) < 4 ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } if ( strlen ( origbuf ) < 4 ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } bufp = find_optparam ( origbuf ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } bufp = find_optparam ( origbuf ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE",0
628,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> cJSON * <S2SV_ModEnd> cJSON_CreateFloatArray ( double <S2SV_ModStart> count ; ++ i <S2SV_ModEnd> ) { n <S2SV_ModStart> cJSON_CreateFloat ( numbers [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } <S2SV_ModEnd> return a ;",0
629,"<S2SV_ModStart> data_end ) { const int num_workers = MIN ( pbi -> oxcf. max_threads - 1, cm -> log2_tile_cols ) ; const int tile_cols = 1 << cm -> log2_tile_cols ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int num_workers = MIN ( pbi -> oxcf. max_threads - 1, tile_cols ) ; const int num_workers = MIN ( num_workers, tile_cols ) ; TileBuffer tile_buffers [ 1 << 6 ] ; int final_worker = - 1 ; if ( num_workers == 0 ) { int i ; CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( num_workers * sizeof ( * pbi -> tile_workers ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data2, vpx_malloc ( sizeof ( TileInfo ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data1, v",0
630,<S2SV_ModStart> + 8 ; if ( fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'R' || fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'R' ) return ; <S2SV_ModStart> ( ) ; if ( fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'R' || fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'R' || fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'R' ) return ; if ( fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'R' || fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'M' || fgetc ( ifp ) <,0
631,"<S2SV_ModStart> -> common ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> = SEGMENT_DELTADATA ; vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, 0 ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; <S2SV_ModStart> = SEGMENT_DELTADATA ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> = SEGMENT_DELTADATA ; vpx_clear_system_state ( ) ; for ( i = ENERGY_MIN ; i <= ENERGY_MAX ; i ++ ) { int qindex_delta, segment_rdmult ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; segment_rdmult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + qindex_delta",0
632,<S2SV_ModStart> -> error_code ) { if ( error -> has_detail ) ctx -> base. err_detail = error -> detail ; else ctx -> base. err_detail = NULL ; return error -> error_code ; } <S2SV_ModEnd> return error ->,0
633,"<S2SV_ModStart> * ps_cur_slice ; pocstruct_t <S2SV_ModEnd> * ps_prev_poc ; <S2SV_ModStart> * ps_cur_poc ; memset ( ps_dec -> ps_pps, 0, ( sizeof ( dec_pic_params_t ) ) * MAX_NUM_PIC_PARAMS ) ; memset ( ps_dec -> ps_sps, 0, ( sizeof ( dec_seq_params_t ) ) * MAX_NUM_SEQ_PARAMS ) ;",0
634,"<S2SV_ModStart> ) ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> from <S2SV_blank> driver: <S2SV_blank> %s"", __func__, strerror ( errno ) ) ; GKI_freebuf ( buffer ) ; return ; } if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> from <S2SV_blank> driver: <S2SV_blank> %s"", __func__, strerror ( errno ) ) ; GKI_freebuf ( buffer ) ; btsock_thread_add_fd ( pan_pth, fd, 0, SOCK_THREAD_FD_RD, 0 ) ; return ; } if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> from <S2SV_blank> driver: <S2SV_blank> %s"", __func__, strerror ( errno ) ) ; GKI_freebuf ( buffer ) ; btsock_thread_add_fd ( pan_pth, fd, 0, SOCK_THREAD_FD_RD, 0 ) ; return ; }",0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> getnum ( const <S2SV_ModStart> int df ) { if (! isdigit ( * * fmt ) ) return df ; else { int a = 0 ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * * fmt ) ) ; <S2SV_ModEnd> return a ;,0
636,"<S2SV_ModStart> ; markold ( g, g -> allgc, g -> reallyold ) ; markold ( g, g -> allgc, g -> reallyold ) ; markold ( g, g -> allgc, g -> finobj, g -> finobjrold ) ; atomic ( L ) ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old",0
637,<S2SV_ModStart> else return - ENODEV <S2SV_ModEnd> ; deb_info (,0
638,"<S2SV_ModStart> { 'S' } <S2SV_ModEnd> ; if ( <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_request, sizeof ssl_request ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } s_write ( c, c -> local_wfd. fd, ssl_ok, sizeof ssl_ok ) ; return NULL ; } if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception (",0
639,"<S2SV_ModStart> int cib_tls_signon ( <S2SV_ModEnd> cib_t * cib <S2SV_ModStart> cib -> variant_opaque <S2SV_ModEnd> ; struct sockaddr_in <S2SV_ModStart> struct sockaddr_in addr <S2SV_ModEnd> ; int rc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> struct mainloop_fd_callbacks cib_fd_callbacks <S2SV_ModStart> = NULL ; <S2SV_ModEnd> connection -> socket <S2SV_ModStart> = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_p",0
640,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cm -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cm -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cm -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cm -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cm -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cm -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cm -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cm -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cm -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cm -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cm -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cm -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cm -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cm -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cm -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cm -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cm -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cm -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cm -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cm -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cm ->",0
641,"<S2SV_ModStart> ] ) ; if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x08 ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"",",0
642,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_command karg ; <S2SV_ModEnd> int rc ; <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> return mptctl_do_mpt_command ( <S2SV_ModStart> MF ) ; <S2SV_ModEnd> return rc ;",0
643,"<S2SV_ModStart> ] ; Image <S2SV_ModEnd> * image ; <S2SV_ModStart>, length, padding, value, version, width ; if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList (",0
644,"<S2SV_ModStart> ; if ( bandno >= JPC_MAXBANDS ) { jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number <S2SV_blank> %d\\n"", bandno ) ; jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number <S2SV_blank> %d\\n"", bandno, cp -> numbands ) ; jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number <S2SV_blank> %d\\n"", bandno, cp -> numbands ) ; jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number <S2SV_blank> %d\\n"", bandno, cp -> numbands ) ; jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number <S2SV_blank> %d\\n"", bandno, cp -> numbands ) ; jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number <S2SV_blank> %d\\n"", bandno, cp -> numbands ) ; jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number <S2SV_blank> %d\\n"", bandno, cp -> numbands ) ; jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number <S2SV_blank> %d\\n"", bandno, cp -> numbands ) ; jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number <S2SV_blank> %d\\n"",",0
645,"<S2SV_ModStart> ] ) ; if (! str_temp ) str_temp = strdup ( ""\\"" ) ; if (! str_temp ) str_temp = strdup ( ""\\"" ) ; if (! str_temp ) str_temp = strdup ( ""\\"" ) ; if (! str_temp ) str_temp = strdup ( ""\\"" ) ; if (! str_temp ) str_temp = strdup ( ""\\"" ) ; if (! str_temp ) str_temp = strdup ( ""\\"" ) ; if (! str_temp ) str_temp = strdup ( ""\\"" ) ; if (! str_temp ) str_temp = strdup ( ""\\"" ) ; if (! str_temp ) str_temp = strdup ( ""\\"" ) ; if (! str_temp ) str_temp = strdup ( ""\\"" ) ; if (! str_temp ) str_temp = strdup ( ""\\"" ) ; if (! str_temp ) str_temp = strdup ( ""\\"" ) ; if (! str_temp ) str_temp = strdup ( ""\\"" ) ; if (! str_temp ) str_temp = strdup ( ""\\"" ) ; if (! str_temp ) str_temp = str",0
646,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_bit_t <S2SV_ModEnd> decode_uniform ( vpx_reader <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> int v = vpx_read_bit <S2SV_ModEnd> ( r )",0
647,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs,",0
648,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> frame_parallel_decoding_mode ) ++ <S2SV_ModStart>! cm -> fc -> <S2SV_ModEnd> frame_parallel_decoding_mode ) ++",0
649,"<S2SV_ModStart>! stream ) { vpx_codec_err_t res ; res = vpx_codec_enc_config_default ( global -> codec -> interface ( ), & stream -> config. cfg, global -> usage ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; res = vpx_codec_enc_config_default ( global -> codec -> interface ( ), & stream -> config. cfg, global -> usage ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; stream -> config. cfg. g_timebase. den = 1000 ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. cfg. stereo_fmt = STEREO_FORMAT_MONO ; stream -> config. write_webm = 1 ;",0
650,"<S2SV_ModStart> ; if ( opp -> nd_opt_mtu!= opp -> nd_opt_mtu ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", opp -> nd_opt_mtu ), opp -> nd_opt_mtu ) ) ; goto trunc ; } if ( opp -> nd_opt_mtu!= opp -> nd_opt_mtu ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", opp -> nd_opt_type ), opp -> nd_opt_type ) ) ) ; break ; } if ( opp -> nd_opt_mtu!= opp -> nd_opt_mtu ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", opp -> nd",0
651,<S2SV_ModStart> = 0 ; if ( ( * re_ast ) -> root_node == NULL ) { yr_error ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror (,0
652,"<S2SV_ModStart> ) ) ; if ( iter -> var_expand_table ) { <S2SV_ModStart> ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } <S2SV_ModStart> 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found, <S2SV_blank> using <S2SV_blank> default <S2SV_blank> value <S2SV_blank> %s"", str_c ( path ), key -> value ) ; } else if ( key -> key -> default_value!= NULL ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank>",0
653,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> tok -> altwarning <S2SV_ModStart> = 0 ; <S2SV_ModEnd> tok -> alterror <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
654,"<S2SV_ModStart> -> av1_config ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1 -> av1_config -> config ) ; if ( av1_cfg ) { gf_odf_av1_cfg_write ( av1_cfg, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> data, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> dataLength ) ; gf_odf_av1_cfg_del ( av1_cfg ) ; } }",0
655,"<S2SV_ModStart> maxFrameNum ) ; <S2SV_ModEnd> dpb -> maxLongTermFrameIdx <S2SV_ModStart> = NO_LONG_TERM_FRAME_INDICES ; dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; if ( noReordering ) dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; else dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; if ( noReordering ) dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; else dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; if ( dpb -> buffer == NULL ) return ( MEMORY_ALLOCATION_ERROR ) ; H264SwDecMemset ( dpb -> buffer, 0, ( MAX_NUM_REF_IDX_L0_ACTIVE + 1 ) * sizeof ( dpbPicture_t ) ) ; for ( i = 0 ; i < dpb -> dpbSize + 1 ; i ++ ) { ALLOCATE ( dpb -> buffer [ i ]. pAllocatedData, ( picSizeInMbs * 384 + 32 + 15 ), u8 ) ; if ( dpb -> buffer [ i ]. pAllocatedData ==",0
656,<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> = 0 ; if ( addrlen_in > OE_SSIZE_MAXLEN ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> ; if ( addrlen_in > OE_SSIZE_MAXLEN ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> ; if ( addrlen_out > OE_SSIZE_MAXLEN ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> ; if ( addrlen_out > OE_SSIZE_MAXLEN ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_out > OE_SSIZE_MAXLEN ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_out > OE_SSIZE_MAXLEN ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_out > OE_SSIZE_MAXLEN ),0
657,,1
658,"<S2SV_ModStart> FALSE ; } if ( Stream_GetRemainingLength ( s ) < length ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> negotiation <S2SV_blank> request <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; }",0
659,"<S2SV_ModStart> ipv6_pinfo * np <S2SV_ModEnd> ; struct ipv6_txoptions <S2SV_ModStart> ; opt = rcu_dereference_protected ( np -> ipv6_txopt, sock_owned_by_user ( sk ) ) ; if ( opt == NULL ) { opt = & opt_space ; } else { opt = rcu_dereference_protected ( np -> ipv6_txopt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( np -> ipv6_txopt, sock_owned_by_user ( sk ) ) ; opt_space = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; if ( opt_space == NULL ) { opt = & opt_space ; } else { opt = rcu_dereference_protected ( np -> ipv6_txopt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( np -> ipv6_txopt, sock_owned_by_user ( sk ) ) ; opt_space = rcu_dereference",0
660,"<S2SV_ModStart>, at ; size_t <S2SV_ModEnd> hdr_size, j <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> ; struct cli_exe_section <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> ; uint32_t valign <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> ; uint32_t valign <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> ; uint32_t valign <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> ; uint32_t valign <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> )!= CL_ENULLARG <S2SV_ModStart>, j )!= CL_ENULLARG ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> pe_json <S2SV_blank> == <S2SV_blank> NULL\\n"" ) ; return CL_ENULLARG ; } <S2SV_ModStart> )!= CL_ENULLARG ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> pe_json <S2SV_blank> == <S2SV_blank> NULL\\n"" ) ; return CL_ENULLARG ; } <S2SV_ModStart> )!= CL_ENULLARG ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> pe_json <S2SV_blank> == <S2SV_blank> NULL\\n"" ) ; return CL_ENULLARG ; } <S2SV_ModStart> )!= CL_ENULLARG ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> pe_json <S2SV_blank> ==",0
661,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> address ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> )!= 0 ) { } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_",0
662,"<S2SV_ModStart> pcmk_ok ) { <S2SV_ModEnd> private -> command <S2SV_ModStart> private -> command ) ; } if ( rc == pcmk_ok ) { <S2SV_ModEnd> private -> callback <S2SV_ModStart> private -> callback ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> command. session, CRM_OP_REGISTER, NULL, NULL, 0, NULL ) ; crm_xml_add ( hello, F_CIB_CLIENTNAME, name ) ; crm_send_remote_msg ( hello, F_CIB_CLIENTNAME, name ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, 0, NULL, 0, NULL ) ; crm_xml_add ( hello, F_CIB_CLIENTNAME, name ) ; crm_send_remote_msg ( hello, F_CIB_CLIENTNAME, name ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create",0
663,<S2SV_ModStart> = ubuf ; <S2SV_ModEnd> msg. msg_namelen <S2SV_ModStart> sizeof ( address ) <S2SV_ModEnd> ; if (,0
664,"<S2SV_ModStart> >> 3 } ; int num00, tmp_err, n, sr = 0 <S2SV_ModEnd> ; int step_param <S2SV_ModStart> bsize ] ; const int new_mv_mode_penalty = 256 ; const int quart_frm = MIN ( cpi -> common. width, cpi -> common. height ) ; while ( ( quart_frm << sr ) < MAX_FULL_PEL_VAL ) ++ sr ; step_param += sr ; v_fn_ptr. vf = get_block_variance_fn ( bsize ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if (",0
665,"<S2SV_ModStart> ; if ( h -> size < 0 ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; } if ( h -> size == 0 ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; } if ( h -> addr == NULL ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; } if ( h -> size == 0 ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; }",0
666,<S2SV_ModStart> -> reqbody_limit == NOT_SET? parent -> reqbody_limit : child -> reqbody_limit ; merged -> reqbody_no_files_limit = ( child -> reqbody_no_files_limit == NOT_SET? parent -> reqbody_no_files_limit : child -> reqbody_no_files_limit ) ; merged -> reqbody_access = ( child -> reqbody_access == NOT_SET? parent -> reqbody_access : child -> reqbody_access ) ; merged -> reqbody_buffering = ( child -> reqbody_buffering == NOT_SET? parent -> reqbody_buffering : child -> reqbody_buffering ) ; merged -> reqbody_limit = ( child -> reqbody_limit == NOT_SET? parent -> reqbody_limit : child -> reqbody_limit ) ; merged -> reqbody_no_files_limit = ( child -> reqbody_no_files_limit == NOT_SET? parent -> reqbody_no_files_limit : child -> reqbody_no_files_limit ) ; merged -> resbody_access = ( child -> resbody_access == NOT_SET? parent -> resbody,0
667,"<S2SV_ModStart> one, offset <S2SV_ModEnd> ; ssize_t count <S2SV_ModStart>, pixel_info_length ; if ( pixel_info_length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) SetImageExtent ( image, image -> columns, image -> rows ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) SetImageExtent ( image, image -> columns, image -> rows ) ; status = SetImageExtent ( image,",0
668,"<S2SV_ModStart> 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0",0
669,"<S2SV_ModStart> ) ) { if ( smatch ( option, "" <S2SV_blank> =\\t,"" ) ) { ovalue = strim ( option, ""\\""\'"", MPR_TRIM_BOTH ) ; } else if ( smatch ( option, ""event"" ) ) { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; } else if ( smatch ( option, ""content"" ) ) { httpSetTraceContentSize ( route -> trace, ( ssize ) getnum ( ovalue ) ) ; } else { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; } else if ( smatch ( option, ""event"" ) ) { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; } else if ( smatch ( option, ""event"" ) ) { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; } else if ( smatch ( option, ""event"" ) ) { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; } else if ( smatch ( option, ""event""",0
670,"<S2SV_ModStart> user_data ) { <S2SV_ModEnd> crm_trace ( ""Cleaning <S2SV_blank> up <S2SV_blank> after <S2SV_blank> client <S2SV_blank> disconnect: <S2SV_blank> %s/%s"" <S2SV_ModStart> num_clients ) ; <S2SV_ModEnd> free ( client <S2SV_ModStart> user ) ; <S2SV_ModEnd> crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client""",0
671,"<S2SV_ModStart> * uv ; Thread * twups ; if ( thread -> twups == NULL ) twups = thread ; else twups = thread ; for ( uv = twups ; uv!= NULL ; uv = uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> v ) ; } } } if ( twups!= NULL ) { lua_assert (! iswhite ( twups ) ) ; twups = thread ; for ( uv = twups ; uv!= NULL ; uv = uv -> u. open. next ) { work ++ ; if (! iswhite ( twups ) ) twups = thread ; for ( uv = twups ; uv!= NULL ; uv = uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, twups -> u. open. next ) { work ++ ; if (! iswhite ( twups ) ) twups = thread ; for ( uv = twups ; uv!= NULL ; uv = uv -> u. open. next ) { work ++ ; if (! iswhite ( twups ) ) twups = thread ; for ( uv = tw",0
