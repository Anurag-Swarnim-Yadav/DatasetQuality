,raw_predictions,correctly_predicted
0,"<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & rc,",0
1,<S2SV_ModStart> ) + 1 <S2SV_ModEnd> ; if (,0
2,,0
3,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> c = c <S2SV_ModStart> -> next ; <S2SV_ModEnd> if ( c,0
4,"<S2SV_ModStart> perf_event * regs <S2SV_ModEnd>, regs",0
5,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> * data ; <S2SV_ModStart> data ) { char * data ; char * data ; <S2SV_ModStart> len ) { int len ; <S2SV_ModStart> len ) ; } <S2SV_ModEnd> len ) { <S2SV_ModStart> [ i ] ;,0
6,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
7,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> var = 0,0
8,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> vp9_get_filter_filter_filter ( const <S2SV_ModStart> -> common ; const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_HIGHBITDEPTH <S2SV_ModEnd> ; const <S2SV_ModStart> 0 ) { <S2SV_ModEnd> if ( cpi <S2SV_ModStart> 0 ) { const VP9_HIGHBITDEPTH const int filt_err = get_frame ( cpi -> filt_err ) ; # if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH return ; # if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH return ; # if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH # if CONFIG_HIGHBITDEPTH # if CONFIG_HIGHBITDEPTH # if CONFIG_VP9_HIGHBITDEPTH # if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ; # endif,0
9,,0
10,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_write_writer <S2SV_ModEnd> ( w, <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ; vpx_writer <S2SV_ModEnd> ( w,",0
11,<S2SV_ModStart> ) ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> = COAP_BLOCK_32 ; } <S2SV_ModStart> = COAP_BLOCK_32 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> = COAP_BLOCK_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_32 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> = COAP_BLOCK_32 ; } <S2SV_ModStart> = COAP_BLOCK_BLOCK_SIZE_SIZE_32 ; },0
12,"<S2SV_ModStart> ) ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> short"" ) ) ; if ( length < 2 ) { ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> short"" ) ) ) ; return ; } ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> short"" ) ) ) ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; length -= 2 <S2SV_ModEnd> ND_PRINT (",0
13,<S2SV_ModStart> <S2SV_null> <S2SV_,0
14,,0
15,,0
16,,0
17,"<S2SV_ModStart> p, p <S2SV_ModEnd> ) ; if",0
18,"<S2SV_ModStart> -> i_uid, <S2SV_ModEnd> ) ) return",0
19,"<S2SV_ModStart> ), NULL, NULL",0
20,<S2SV_ModStart> <S2SV_null> <S2SV_,0
21,<S2SV_ModStart> ; if ( <S2SV_ModEnd> inode -> i_offset,0
22,<S2SV_ModStart> ) ) { <S2SV_ModEnd> if (!,0
23,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
24,<S2SV_ModStart> <S2SV_null> <S2SV_,0
25,,0
26,"<S2SV_ModStart> mntfs, rootfs -> mount",0
27,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
28,<S2SV_ModStart> ( size_t ) - 1,0
29,"<S2SV_ModStart> ) ; } memset <S2SV_ModEnd> ( port,",0
30,<S2SV_ModStart> * get_cfg <S2SV_ModEnd> ; if (,0
31,"<S2SV_ModStart> NULL, new_page <S2SV_ModEnd> ) ; }",0
32,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
33,<S2SV_ModStart> ) ; } if (!,0
34,"<S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd> ) ; enc28J60_ECON1 <S2SV_ModEnd> ( interface",0
35,<S2SV_ModStart> o ) ; Py_RETURN_NONE <S2SV_ModEnd> ; } result,0
36,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
37,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> int mb_stride <S2SV_ModStart> * y_stride, int mb_stride, <S2SV_ModEnd> * y_stride, <S2SV_ModStart> int mb_stride, int mb_stride, int mb_stride, <S2SV_ModEnd>, y_stride, <S2SV_ModStart> 16_stride ) ; # if CONFIG_VP8_HIGHBITDEPTH # if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_VP9_16_HIGHBITDEPTH return ; # if CONFIG_16_16_16_16_16_16_16_16_16_16_16_16_16_stride = 0 ; # if CONFIG_VP9_16_16_16_16_16_16_16_16_16_16_16_16 <S2SV_ModEnd> ( 16, <S2SV_ModStart> ) ; # if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH",0
38,"<S2SV_ModStart> int error ; struct mb2_cache <S2SV_ModEnd> * bh ; <S2SV_ModStart> int error ; struct mb2_cache <S2SV_ModEnd> struct mb2_cache = mb2_cache_cache <S2SV_ModEnd> ( bh, <S2SV_ModStart> ) ; error = mb2_cache_cache_cache <S2SV_ModEnd> ( bh,",0
39,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } else {,0
40,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
41,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
42,<S2SV_ModStart> return - 1 <S2SV_ModEnd> ; if (,0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode",0
44,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
45,<S2SV_ModStart> = 0 ; unsigned,0
46,"<S2SV_ModStart> * acl_len, int size_t total_len, int size_t total_len <S2SV_ModStart> size ) { uint32_t total_t total_len ; uint32_t total_t total_len ; uint32_t total_len ; uint32_t total_t total_len ; uint32_t total_len ; uint32_t total_t total_len ; uint32_t total_t total_len ; uint32_len ; uint32_t total_len ; uint32_t total_len ; uint32_t total_t total_len ; size_len = max_len ; if (! xdr_len ) return - EINVAL ; if (! xdr_len ) return - EINVAL ; if (! xdr_len ) return - EINVAL ; if (! xdr_len ) return - EINVAL ; <S2SV_ModEnd> ; if (",0
47,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
48,,0
49,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> return NULL ;,0
50,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
51,<S2SV_ModStart> ( p1 ) ;,0
52,,0
53,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
54,,0
55,<S2SV_ModStart> ) { const VP9_COMMON * const twopass ; const twopass = & cpi -> twopass. twopass. twopass <S2SV_ModEnd> ; const twopass <S2SV_ModStart> 0 ) ; if ( cpi -> twopass. twopass. twopass ) { cpi -> twopass. twopass. twopass. twopass. twopass. twopass ; return ; } <S2SV_ModEnd> ; } <S2SV_null>,0
56,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> rows ) ; return ( DestroyImageList ( image ) ) ; }",0
57,"<S2SV_ModStart> ) ) ; if (! intf -> desc. bLength ) { dev_err ( & interface -> dev, & dev ) ; goto error ; }",0
58,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) {",0
59,<S2SV_ModStart> * dir = NULL <S2SV_ModEnd> ; if (,0
60,,0
61,,0
62,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null<S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,<S2SV_ModStart> ) return 0 <S2SV_ModEnd> ; if (,0
65,,0
66,<S2SV_ModStart> * type ; const char * type ; const char * type ; const char * type_name = NULL ; char * type_name = NULL <S2SV_ModStart> NULL ) ; if (! type == NULL ) return NULL ; if (! type_type ) return NULL ; if (! type_type_type ) return NULL ; if (! type ) return NULL ; <S2SV_ModStart> NULL ; if (! type == NULL ) return NULL ; <S2SV_ModStart> NULL ; if (! type == NULL ) return NULL,0
67,,0
68,,0
69,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) ) ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < 4 ) { ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> short"" ) ) ) ; return ; } <S2SV_ModStart> ) ) ; val_h = EXTRACT_16BITS ( ptr ) ; val_h = EXTRACT_16BITS ( ptr ) ; val_h = EXTRACT_h <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> ) ) ; val_h <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> ) ) ; if ( length < 4 ) { ND_PRINT ( ( ( ndo, ""%s"" ) ) ) ) ; return ; } ND_PRINT ( ( ( ( ndo, ""AVP <S2SV_blank> short"" ) ) ) ) ; ND_PRINT ( ( ( ndo, ""%s ) ) ) ) ; ND_PRINT ( ( ( ( ndo, ""%s"" ) ) ) ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> short"" ) ) ) ; return ;",0
70,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
71,<S2SV_ModStart> src -> y_stride <S2SV_ModEnd> ; const int,0
72,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
73,<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( cpi ->,0
74,<S2SV_ModStart> user ) ; <S2SV_ModEnd> return 0,0
75,,0
76,"<S2SV_ModStart> int i, CHILD ( CHILD ( n, 1 <S2SV_ModEnd> ) ; int <S2SV_ModStart> ; if ( CHILD ( CHILD ( CHILD ( CHILD ( n, CHILD ( n, 1 ) ) ) ) == TYPE ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( n, 1 ) ) ) ) ) == TYPE ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ) ) ) ) ) ) ) ) ; if ( CHILD ( CHILD ( CHILD ( CHILD ( n, 1 ) ) ) ) == TYPE ( CHILD ( CHILD ( CHILD ( CHILD ( n, CHILD ( CHILD ( n, CHILD ( n, CHILD ( n, 1 ), n, 1 ) ) ) ), 0 ) ) ) ; if (! is_async ) return NULL <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if (",0
77,,0
78,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * cm, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * const BLOCK_SIZE bsize, MACROBLOCKD * const BLOCK_SIZE bsize ) { const MODE_INFO * const MB_INFO * const MODE_INFO * const BLOCK_INFO * const MB_INFO * const MB_INFO * const MB_INFO * const MB_INFO * const MB_INFO * const MB_INFO * const MB_INFO * const BLOCK_INFO * const MB_INFO * const BLOCK_INFO * const BLOCK_INFO * const MB_INFO * const MB_INFO * const BLOCK_INFO * const MB_INFO * const BLOCK_INFO * const BLOCK_INFO * const MB_INFO * const BLOCK_INFO * const BLOCK_INFO * const BLOCK_SIZE bsize = xd -> mbmi ; const BLOCK_INFO * const BLOCK_SIZE bsize = xd -> mbmi ; const int64_INFO * const",0
79,"<S2SV_ModStart> ) ) { memset ( & n, <S2SV_ModEnd> ) ; return",0
80,<S2SV_ModStart> < 0 && <S2SV_ModEnd> ND_TTEST ( *,0
81,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null>,0
82,<S2SV_ModStart> char * n <S2SV_ModEnd> ; char *,0
83,<S2SV_ModStart> ) + 1 <S2SV_ModEnd> ) ; if,0
84,,0
85,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> big_null> static <S2SV_ModStart> unsigned int spin_unlock ( void ) ; <S2SV_ModStart> flags ) ; spin_unlock ( & <S2SV_ModEnd> ) ;,0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,"<S2SV_ModStart> ) ) ; if ( len < 0 ) { PyExc_TypeError ( PyExc_TypeError, ""%s"" ) ; return NULL ; }",0
89,<S2SV_ModStart> ; if ( <S2SV_ModEnd> opt -> opt,0
90,"<S2SV_ModStart> ) AcquireQuantumMemory ( MagickMax ( number_packets ), <S2SV_ModEnd> bytes_per_pixel * sizeof",0
91,<S2SV_ModStart>,0
92,"<S2SV_ModStart> * new_size, <S2SV_ModEnd> * new_size",0
93,"<S2SV_ModStart> write_bit_bit_bit_bit_bit_bit_bit_bit_bit <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_write_bit <S2SV_ModEnd> ( wb,",0
94,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> mv [ i,0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> goto exit ; <S2SV_ModEnd> msg -> msg_namelen,0
97,"<S2SV_ModStart> msg, 0 <S2SV_ModEnd> ) ; return",0
98,"<S2SV_ModStart> ], c <S2SV_ModEnd> ) ; return",0
99,<S2SV_ModStart> ; if ( ( cfg -> g_h > ( int ) || ( cfg -> g_h > ctx -> g_h > ( int ) && ( cfg -> g_h > ctx -> g_h > ( int ) && ( cfg -> g_h > ctx -> g_h > ctx -> g_height ) && ( ctx -> g_h > ( int ) && ( ctx -> g_h > ctx -> g_h > ctx -> g_height ) && ( ctx -> g_h > ctx -> g_h > ctx -> g_h > ctx -> g_h ) && ( ctx -> g_h > ctx -> g_h > ctx -> g_height ) && ( ctx -> g_h > ctx -> g_height ) && ( ctx -> g_h > ctx -> g_h > ctx -> g_h ) && ( ctx -> g_h > ctx -> g_height ) && ( ( ctx -> g_h > ctx -> g_height ) && ( ctx -> g_h > ctx -> g_height ) && ( ctx -> g_h > ctx -> g_h > ctx -> g_height ) && ( ctx -> g_h > ctx -> g_,0
100,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
101,<S2SV_ModStart> info -> si_size <S2SV_ModEnd> ; if (,0
102,"<S2SV_ModStart> ; zfound = GF_ISOM_ISOM_INVALID_SIZE ( ptr, 1 )",0
103,"<S2SV_ModStart>. get_alg_alg_priv ( ctx ) <S2SV_ModEnd>, ctx )",0
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { int",0
105,<S2SV_ModStart> ) break ; <S2SV_ModEnd> if (!,0
106,<S2SV_ModStart> len ) ; <S2SV_ModEnd> } <S2SV_null>,0
107,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
108,<S2SV_ModStart> ; if ( <S2SV_ModEnd> c -> height,0
109,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
110,,0
111,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return ret ;,0
112,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx, <S2SV_ModEnd> ; if (",0
113,,0
114,<S2SV_ModStart> if (! rt,0
115,<S2SV_ModStart>. vpx_codec_alg_alg_priv_t res <S2SV_ModEnd> ; if (,0
116,<S2SV_ModStart> goto out ; <S2SV_ModEnd> if ( msg,0
117,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; if",0
118,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
119,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> if ( len,0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,,0
122,<S2SV_ModStart> } if (!,0
123,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
124,<S2SV_ModStart> { if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) + 1 ),0
125,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_prob <S2SV_ModEnd> * probs,",0
126,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
127,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> if (!,0
128,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
129,<S2SV_ModStart> flags ) ; <S2SV_ModEnd> } else {,0
130,,0
131,<S2SV_ModStart> <S2SV_null> <S2SV_,0
132,,0
133,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 0 ;,0
134,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> 0 ; int ret = 0 ; int ret = 0 ; if (! i_namelen ) { ret = 0 ; OE_EINVAL ; } if (! ret ) { ret = 0 ; } if (! ret ) { ret = - 1 ; } if (! ret ) { ret = - 1 ; } if (! ret ) { ret = - 1 ; } if (! ret ) { ret = - 1 ; } if (! ret ) { ret = - 1 ; } if ( ret ) { ret = 0 ; } if (! ret ) { ret = 0 ; } if (! ret ) { ret = - 1 ; } if (! ret ) { ret = - 1 ; },0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
136,<S2SV_ModStart> cpi ) { memcpy <S2SV_ModEnd> ( cm ->,0
137,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void * data ; int ret ; if (! buf ) return - ENOMEM <S2SV_ModEnd>, size, <S2SV_ModStart>, size, size, size, size, size, size, size, size, size, size, size, size, size ) ; if ( ret > size ) return ret ;",0
138,<S2SV_ModStart> ; int p ; if (! p ) return NULL ;,0
139,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> src, <S2SV_ModStart> src, int flags ; int flags ; int64_t flags ; <S2SV_ModStart> = 1 ; # if CONFIG_VP9_FRAME ; # if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH # if CONFIG_HIGHBITDEPTH # if CONFIG_VP9_HIGHBITDEPTH # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModEnd> ( buf, <S2SV_ModStart> ) { # if CONFIG_VP9_HIGHBITDEPTH # endif # if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH <S2SV_ModEnd> ( buf, <S2SV_ModStart> 1 ) { # if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModEnd> ( ctx ->",0
140,<S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. layer == VPX_FRAME ) { # if CONFIG_VP9_HIGHBITDEPTH # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_VP9_VP9_VP9_HIGHBITDEPTH if ( cpi -> bit_level > 1 ) { vp9_filter_filter_filter_filter_filter_filter_filter_level ( ) ; } else if ( cpi -> layer == VPX_HIGHBITDEPTH ) ; # endif,0
141,,0
142,,0
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
145,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
146,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 2f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.",0
147,,0
148,,0
149,"<S2SV_ModStart> ; if ( lookup_attr_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ) ) { return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ) ) < 0 ) { return 1 ; } if ( lookup_attr_attr_attr_attr_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & tmp ) < 0 ) { return 1 ; } if ( PyExc_SetString ( tmp ) < 0 ) { PyErr_SetString ( PyExc_SetString ( PyExc_SetString ( PyExc_SetString ( PyExc_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> missing <S2SV_blank> field <S2SV_blank> field <S2SV_blank> field <S2SV_blank> field <S2SV_blank> field <S2SV_blank> field <S2SV_blank> field <S2SV_blank> field <S2SV_blank> field <S2SV_blank> field <S2SV_blank> field <S2SV_blank> field <S2SV_blank> field <S2SV_blank> field <S2SV_blank> field <S2SV_blank> field <S2SV_blank> field <S2SV_blank> field <S2SV_blank> field <S2SV_blank> field <S2SV_blank> field <S2SV_blank> from <S2SV_blank> from <S2SV_blank> field <S2SV_blank> from <S2SV_blank> field"" ) ; return 1 ; } if ( tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyId_SetString ( PyId_SetString ( PyId_SetString ( PyId_SetString ( PyId_SetString ( PyId_SetString ( PyId_TypeError, & PyId_TypeError, & PyId_TypeError,",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,<S2SV_ModStart> goto out ; <S2SV_ModEnd> if (!,0
152,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
153,<S2SV_ModStart> ) ) ; memset ( ) ;,0
154,,0
155,<S2SV_ModStart> ; } if ( <S2SV_ModStart> 0 ) { free ( fname ) ; <S2SV_ModStart> 0 ) ; } if (!,0
156,<S2SV_ModStart> size ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
157,"<S2SV_ModStart> ; if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
158,<S2SV_ModStart> [ 0 ] ; if (,0
159,"<S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_IR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_TXIS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_TXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_TXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_TXIS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_TXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_TXIS <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, KSZ8851_TXIS <S2SV_ModEnd> ) ; if",0
160,"<S2SV_ModStart> writer, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> cm ) { vpx_write_bit <S2SV_ModEnd> ( wb,",0
161,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
162,<S2SV_ModStart>,0
163,"<S2SV_ModStart> ( ) ; memset <S2SV_ModEnd> ( t1_line,",0
164,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> xd -> common ; MACROBLOCKD * x = bsize ; <S2SV_ModStart> BLOCK_SIZE bsize, BLOCK_SIZE bsize, BLOCK_SIZE bsize, BLOCK_SIZE bsize, BLOCK_SIZE bsize, BLOCK_SIZE bsize, BLOCK_SIZE bsize, BLOCK_SIZE bsize, MACROBLOCKD * x -> bsize, BLOCK_SIZE bsize, BLOCK_SIZE bsize, BLOCK_SIZE bsize, BLOCK_SIZE bsize, BLOCK_SIZE bsize, BLOCK_SIZE bsize, BLOCK_SIZE bsize, BLOCK_SIZE bsize, BLOCK_SIZE bsize, MACROBLOCKD * x_SIZE bsize, BLOCK_SIZE bsize, BLOCK_SIZE bsize, BLOCK_SIZE bsize, BLOCK_SIZE bsize, BLOCK_SIZE bsize, BLOCK_SIZE bsize ) ; if ( x -> mi_col > bsize ) { x -> plane [ 0 ] = 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ bsize ] [ 0 ] [ 0 ] [ 0 ] [ bsize ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ]",0
165,"<S2SV_ModStart> key_ref, 0",0
166,,0
167,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
168,<S2SV_ModStart> = - 1 <S2SV_ModEnd> ; if (,0
169,<S2SV_ModStart> ; if ( <S2SV_ModEnd> opt -> opt,0
170,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
171,"<S2SV_ModStart> -> sb_buffer = new_buffer <S2SV_ModEnd> ( screen,",0
172,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * str_end <S2SV_ModStart> end ) { const char * str, * str, * str, * end_end, * end_end ) ; const char * end_end = * end_end ; int end_end ; char * end_end = * end_end ; int end_end = - 1 ; if ( * end_end ) return - 1 ; if ( * end_end < 2 ) return - 1 ; if ( * end_end ) { * str_end = * end_end ; } if ( * end_end ) { * end_end = * end_end ; } if ( * end_end ) return - 1 ; } if ( * end_end ) { * str_end = * end_end ; } else if ( * end_end ) { * end_end = * str_end ; } if ( * end_end ) { * end_end = - 1 ; } else if ( * str_end ) return - 1 ; } if ( * end_end ) { * end_end ( * end_end ) + 1 ;",0
173,<S2SV_ModStart> file ) ; <S2SV_ModEnd> const char *,0
174,,0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
176,"<S2SV_ModStart> bestaddress, in_stride <S2SV_ModEnd> ) ; if",0
177,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> 0 <S2SV_ModStart> cpi ) { VP9_COMMON * const xd = & cpi -> common ; MACROBLOCKD * cpi -> common ; MACROBLOCKD * const xd = & cpi -> common ; MACROBLOCKD * const mi_row = & cpi -> mi_col ; <S2SV_ModStart> BLOCK_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_",0
178,"<S2SV_ModStart> ), false",0
179,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct ip_options_options_options_options_rcu <S2SV_ModEnd> * opt, <S2SV_ModStart> * opt, struct ip_options_options_options_options_rcu <S2SV_ModEnd> * opt, <S2SV_ModStart> * opt, struct ip_options_options_options_options_rcu <S2SV_ModEnd> * opt, <S2SV_ModStart> > <S2SV_null> <S2SV_null> <S2SV_null>",0
180,<S2SV_ModStart> ) goto error <S2SV_ModEnd> ; if (,0
181,<S2SV_ModStart> ; uint16_t d <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return - 1 <S2SV_ModEnd> ; if (,0
182,<S2SV_ModStart> ) ; } <S2SV_ModEnd> const char *,0
183,<S2SV_ModStart> -> columns - 1 <S2SV_ModEnd> ) ; x,0
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> rows ) ;",0
186,<S2SV_ModStart> ( bp [ 0 <S2SV_ModEnd> ].,0
187,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return 0 ;,0
188,"<S2SV_ModStart> * row, jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_matind_t",0
189,,0
190,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 0 ;,0
191,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
192,"<S2SV_ModStart> ) ) ; if ( pcount!= 0 ) ereport ( errcode ( errcode ( ERRCODE, ( ERRCODE_PROGRAM_PROGRAM_PROGRAM_LIMIT, ""number <S2SV_blank> (%d)"", ( int ) ) ) ) ;",0
193,,0
194,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( c,0
195,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> 16x16x16x16_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> 4x16_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> 4 ; tran_low_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> 4 ] ; tran_low_t <S2SV_ModEnd> temp_low_low_low_t",0
196,"<S2SV_ModStart> } if ( g_string_string <S2SV_ModEnd> ( arg,",0
197,<S2SV_ModStart> char * filename = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; if (! TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; },0
198,<S2SV_ModStart> 0 ) { ND_TCHECK ( tptr + 2,0
199,"<S2SV_ModStart>, ctxt, NULL, NULL,",0
200,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
201,<S2SV_ModStart>,0
202,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return NULL ;,0
203,"<S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1",0
204,<S2SV_ModStart> -> sasl_username = g_password <S2SV_ModEnd> ; rc ->,0
205,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi ->,0
206,<S2SV_ModStart> size_t tcount ; uint_t tcount ; uint_t count = buf_size ; n -> entries [ tcount ] = 0,0
207,<S2SV_ModStart> ] = 0 <S2SV_ModEnd> ; if (,0
208,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> NULL ) { int res ; <S2SV_ModStart> NULL ) { int res = NULL ; <S2SV_ModStart> return NULL ; } <S2SV_ModEnd> if (! <S2SV_ModStart> + 1 ) { <S2SV_ModStart> + 1 ; } <S2SV_ModEnd> return NULL ;,0
209,<S2SV_ModStart> ) ; },0
210,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
211,<S2SV_ModStart> ) ; return ret ;,0
212,,0
213,<S2SV_ModStart> ; j = 0 <S2SV_ModEnd> ; if (,0
214,<S2SV_ModStart> list ) { spin_lock_lock ( & timeri -> lock ) ; spin_unlock ( & timeri -> lock ) ; <S2SV_ModStart> list_lock ) ; spin_unlock ( & timeri -> lock ) ; <S2SV_ModEnd> } <S2SV_null>,0
215,<S2SV_ModStart> ) ) { if ( ps_dec -> u4_mode == 0 ) { ps_dec -> ps_dec -> u4_dpb_mode = 0 ; ps_dec -> u4_dec -> u4_dpb_mode = 0 ; ps_dec -> u4_dec -> ps_dec -> u4_dec -> ps_dec -> u4_dec -> ps_dec_dec_dec -> u4_dec_dec_dec_dec -> u4_dpb_mode = 0 ; },0
216,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
217,<S2SV_ModStart> return ret ; <S2SV_ModEnd> return ret ;,0
218,<S2SV_ModStart> dev ) ; <S2SV_ModEnd> if ( bi,0
219,<S2SV_ModStart> msg -> msg_namelen = 0,0
220,<S2SV_ModStart> s += 0 <S2SV_ModEnd> ; if (,0
221,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY (,0
222,<S2SV_ModStart> msg ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
223,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> int,0
224,<S2SV_ModStart> 0 ] ; if ( id_len < 0 ) { return 0 ; },0
225,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
226,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1,0
227,,0
228,<S2SV_ModStart> size_t size <S2SV_ModEnd> ; size =,0
229,<S2SV_ModStart> ; if ( protocol < 0 ) return - EINVAL ;,0
230,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
231,,0
232,<S2SV_ModStart> ; if ( error <S2SV_ModEnd> ) return,0
233,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null>,0
234,"<S2SV_ModStart>, type_comment, NULL,",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,"<S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> columns, image -> columns, image -> rows ) ; if ( status == MagickFalse ) break ;",0
237,,1
238,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return ret ;,0
239,"<S2SV_ModStart> ( psf -> header. end <S2SV_ModEnd> psf -> header <S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd> ) { <S2SV_ModStart> ( psf -> header. end <S2SV_ModEnd> psf -> header <S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd> + psf -> header. <S2SV_ModStart> ; psf -> header. indx <S2SV_ModEnd> = psf -> header. <S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd>, psf -> header.",0
240,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
241,<S2SV_ModStart>,0
242,<S2SV_ModStart> perf_event_event ) { perf_event_event_event_event ( event ) ; perf_event_event_event_event_event <S2SV_ModEnd> ( event ),0
243,<S2SV_ModStart> ctx ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
244,<S2SV_ModStart> } if ( tptr.,0
245,<S2SV_ModStart> ; # if CONFIG_VP8_FRAME <S2SV_ModEnd> ( & cpi <S2SV_ModStart> ) ) { <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) ; # endif <S2SV_ModEnd> return 0 ;,0
246,<S2SV_ModStart>,0
247,<S2SV_ModStart> ; if ( ( (,0
248,<S2SV_ModStart> * args ; <S2SV_ModEnd> lua_param * <S2SV_ModStart> * r ; <S2SV_ModEnd> lua_spec =,0
249,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> columns, image -> columns, image -> rows ) ; if (",0
250,,0
251,<S2SV_ModStart> start ) ; if ( len < 0 ) break ;,0
252,<S2SV_ModStart> ( server. ds_enabled <S2SV_ModEnd> ) ; if,0
253,<S2SV_ModStart> client ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
254,<S2SV_ModStart> [ i ] <S2SV_ModEnd> j ] ; v,0
255,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
256,<S2SV_ModStart> ) { memset <S2SV_ModEnd> ( s ->,0
257,<S2SV_ModStart> = 0 ; size_t count = 0 ;,0
258,<S2SV_ModStart> ; if ( opt.,0
259,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
260,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> stream ->,0
261,"<S2SV_ModStart> ; dst_name = safe_name <S2SV_ModEnd> ( dst,",0
262,"<S2SV_ModStart> ( interface, KS2SV_null> <S2SV_null>",0
263,"<S2SV_ModStart> 1 ] ; memset <S2SV_ModEnd> ( x,",0
264,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
265,<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ),0
266,<S2SV_ModStart> rc ) { const VP9EncoderConfig * rc = & rc -> avg_interval * rc -> avg_interval ; <S2SV_ModStart> rc -> avg_frame_interval ; if ( rc -> avg_interval > rc -> avg_interval ) { rc -> avg_interval = rc -> avg_interval ; },0
267,,0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,<S2SV_ModStart> 1 ] ; # if CONFIG_VP9_HIGHBITDEPTH int bit_ptr_ptr = 0 ; # if CONFIG_VP9_HIGHBITDEPTH int bit_ptr = 0 ; # if CONFIG_HIGHBITDEPTH # if CONFIG_VP9_HIGHBITDEPTH int64_HIGHBITDEPTH int64_ptr = 0 ; int64_ptr = 0 ; int64_ptr = 0 ; for ( i = 0 ; i = 0 ; i = 0 ; for ( i = 0 ; i = 0 ; i = 0 ; i = 0 ; i = 0 ; i = 0 ; i = 0 ; i = 0 ; x -> bit_ptr [ i ]. bit_ptr [ i ]. base_ptr [ i ] ; for ( i ]. x -> bit_ptr [ i ]. bit_ptr [ i ]. cur_ptr [ i ]. cur_ptr [ i ] ; x -> bit_ptr [ i ]. bit_ptr [ i ] = 0 ]. bit_ptr [ i ] ; int64_ptr [ i ] = 0 ] ; int64_ptr [ i ] = 0 ; for ( i ]. block [ i ]. bit_ptr [ i ].,0
270,<S2SV_ModStart> return - 1 <S2SV_ModEnd> ; if (,0
271,<S2SV_ModStart> ; int data [ 0 ] <S2SV_ModEnd> ] ; int,0
272,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_,0
273,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int x -> <S2SV_ModStart> int best_sse = INT_MAX <S2SV_ModEnd>, int <S2SV_ModStart> int best_sse = INT_MAX ; int <S2SV_ModEnd> best_sse = INT_MAX <S2SV_ModStart> int best_sse = INT_MAX ; # if CONFIG_MAX <S2SV_ModEnd> best_sse = INT_MAX <S2SV_ModStart> best_sse = INT_MAX ; # if CONFIG_MAX ; # if CONFIG_MAX <S2SV_ModEnd> best_sse = INT_MAX <S2SV_ModStart> best_MAX ; # if CONFIG_VP8_MAX ; # if CONFIG_HIGHBITDEPTH int best_sse = INT_MAX ; # if CONFIG_MAX ; # if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_VP9_MAX ; # if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_VP8_MAX ; # if CONFIG_HIGHBITDEPTH if CONFIG_VP8_HIGHBITDEPTH # if CONFIG_HIGHBITDEPTH if CONFIG_VP8_MAX ; # if CONFIG_VP8_MAX ; # if CONFIG_MAX ; # if CONFIG_VP8_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH",0
274,,0
275,"<S2SV_ModStart> 0, u1_num_num, u4, u1_num, u1_num_num, u1_num, u1_num, u1_num, u1_num, u1_num, u1_num, u1_num, u1_num, u1_num, u1_num, u1_num, u1_num, u1_num, u1_num, u1_num, u1_num_num, u1_num, u1_num, u1_num, u1_num, u4_num, u4_num, u1_num, u4_num, u4_num, u1_num, u1_num, u1_num, u1_num, u1_num, u4_num, u1_num, u4_num, u4_num, u1_num, u1_num, u4_cols, u1_num, u4_num, u4_num, u4_num, u4_cols, u4_num_cols, u4_cols, u4_num_",0
276,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { VPxWorkerData * const vpx_codec_priv_t * const frame_ctx <S2SV_ModEnd> ; VPxWorkerData * <S2SV_ModStart> ; VPxWorkerData * const frame_idx ; VPxWorkerData * const frame_idx = ( vpx_codec_ctx ) ; VPX_CODEC_CODEC_CODEC_CODEC_CODEC_CODEC_CODEC_CODEC_ERROR <S2SV_ModEnd> ; if ( <S2SV_ModStart> NULL ) ; return VPX_CODEC_CODEC_PARAM ; } else { VPX_CODEC_CODEC_CODEC_CODEC_CODEC_CODEC_ERROR <S2SV_ModEnd> ( & <S2SV_ModStart> 1 ) ; return VPX_CODEC_CODEC_CODEC_CODEC_CODEC_CODEC_ERROR <S2SV_ModEnd> ; if (",0
277,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
278,<S2SV_ModStart> ; if ( a -> name ) { archive_set_error ( & a -> file ) ; if ( a -> name ) { archive_error ( & a -> file ) ; break ; } <S2SV_ModEnd> if ( <S2SV_ModStart> 0 ] ) { archive_set_error ( & a -> name <S2SV_ModEnd> ) ; },0
279,<S2SV_ModStart> ( iinfo -> i_len > sizeof ( struct bs ) <S2SV_ModEnd> ) { struct bs <S2SV_ModStart> ) ) { struct ext_sb * bs ; struct ext_sb * bs ; struct ext_sb * bs ; struct ext_sb * bs ; struct ext_sb * bs ; struct udf_sb * bs ; struct bs ; struct udf_sb * bs ; struct udf_sb * bs ; struct udf_info * bs ; if (! bs ) goto out_sb <S2SV_ModEnd> ; if (,0
280,<S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( lfm,0
281,<S2SV_ModStart> flags ) ; <S2SV_ModEnd> if ( q,0
282,<S2SV_ModStart> uint32_t val ; if ( addr + <S2SV_ModEnd> ( vdev ->,0
283,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
284,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
285,<S2SV_ModStart> key_data ) ; <S2SV_ModEnd> if ( key_data,0
286,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> if ( len,0
287,<S2SV_ModStart> 1 ] ; if ( i < 0 ) return - EINVAL ;,0
288,"<S2SV_ModStart>, g -> data <S2SV_ModEnd> ) ; return",0
289,,0
290,<S2SV_ModStart> 1 ) { memcpy <S2SV_ModEnd> ( pbi ->,0
291,<S2SV_ModStart> ) ) ; quantum_info = DestroyQuantum_info ;,0
292,<S2SV_ModStart> * p ; <S2SV_ModEnd> char * p <S2SV_ModStart> * p ; char * p ; unsigned char * p <S2SV_ModEnd> ; if ( <S2SV_ModStart> * p ; if (! p ) return NULL ; if (! p ) return NULL <S2SV_ModEnd> ; } <S2SV_null>,0
293,"<S2SV_ModStart> * cp, <S2SV_ModEnd> char * cp <S2SV_ModStart> ) { const char * cp = NULL ; char * cp = NULL ; char * cp = NULL ; char * cp [ 0 ] = NULL ; char * cp [ 0 ] = NULL ; char * cp [ 0 ] = 0 ] <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { if ( * cp [ 0 ] == 0 ] == 0 ]!= NULL || <S2SV_ModEnd> ) { <S2SV_ModStart> = 0 ; }",0
294,"<S2SV_ModStart> write, const vpx_write_literal <S2SV_ModEnd> * w,",0
295,,0
296,<S2SV_ModStart> * tl ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,0
297,<S2SV_ModStart> ps_cur_cur_slice ) { ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> u4_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> u4_dec -> ps_dec -> ps_dec -> ps_dec -> u4_dec -> u4_dec -> u4_cur_slice_slice_slice_slice_slice_slice_slice_slice_slice_slice_slice_slice,0
298,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
299,<S2SV_ModStart> retry = timer <S2SV_ModEnd> ; if (,0
300,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> rows ) ; }",0
301,<S2SV_ModStart> = 0 ; state ->,0
302,,0
303,<S2SV_ModStart> ) ) { <S2SV_ModEnd> if (!,0
304,<S2SV_ModStart> size_t ret = TEMP_FAILURE_RETRY (,0
305,,0
306,<S2SV_ModStart>,0
307,<S2SV_ModStart> * arg ; <S2SV_ModEnd> struct perf_event_event *,0
308,<S2SV_ModStart> <S2SV_null> <,0
309,<S2SV_ModStart> -> rc ; if (,0
310,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> if (!,0
311,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
312,,0
313,<S2SV_ModStart> ) ; return - EINVAL ; },0
314,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> const vpx_writer <S2SV_ModEnd> const vpx_writer <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> p, vpx_writer <S2SV_ModEnd> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> i ] ; vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> i ] ; vpx_writer <S2SV_ModEnd> ( w,",0
315,"<S2SV_ModStart> data, struct vpx_write_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> = 0 ; vpx_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_write_bit <S2SV_ModEnd> ( wb,",0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
317,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
318,,0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
320,"<S2SV_ModStart>, x1, x2, x2, x2 <S2SV_ModEnd>, x2, <S2SV_ModStart> x2 ) ; x2 = x2 <S2SV_ModEnd> ; x2",0
321,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
322,"<S2SV_ModStart> write_buffer ) { vpx_write_buffer <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_write_literal <S2SV_ModEnd> ( wb,",0
323,<S2SV_ModStart> ) ) ; rb_null> < 0,0
324,"<S2SV_ModStart> * oop, int rp, INT_MAX - 1 <S2SV_ModEnd> ) { int",0
325,"<S2SV_ModStart> NULL, 0, 0",0
326,"<S2SV_ModStart> len, len <S2SV_ModEnd> ) ; return",0
327,<S2SV_ModStart> ) >= 0,0
328,"<S2SV_ModStart> len, len, len <S2SV_ModEnd> ) ; return",0
329,,1
330,"<S2SV_ModStart> * si, <S2SV_ModEnd> va_ctx ) {",0
331,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
332,,0
333,<S2SV_ModStart> ; if ( options_options_options <S2SV_ModEnd> ( ),0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,<S2SV_ModStart> ; if (,0
336,,0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
338,<S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ; if (,0
339,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
340,,0
341,<S2SV_ModStart> i ) ; if ( i -> height > i -> height ) { # if ( i -> height > i -> height ) fprintf ( i -> height - i -> height ) ; # if ( i -> height > i -> height ) fprintf ( i -> height - i -> height - i -> width ) ; # if ( i -> height - i -> height - i -> height - i -> height - i -> height - i -> height ) ) fprintf ( i -> height - i -> height - i -> height - i -> height - i -> height - i -> height - i -> height - i -> height - i -> height - i -> height - i -> height ) ; # if ( i -> height - i -> height + i -> height - i -> height - i -> height - i -> height - i -> height - i -> height - i -> height - i -> width ) ) fprintf ( i -> width - i -> height - i -> width ) ; # if ( i -> height + i -> height - i -> height + i -> height - i -> height - i -> height - i -> height - i -> height - i -> height - i -> width ) fprintf ( i -> height - i -> height - i -> height -,0
342,"<S2SV_ModStart> write_literal ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",0
343,,0
344,<S2SV_ModStart> size_t ) { size_t count = 0 ; <S2SV_ModStart> break ; } if ( psf -> header. length < psf ) break ;,0
345,<S2SV_ModStart> image -> rows <S2SV_ModEnd> ; image ->,0
346,<S2SV_ModStart>,0
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> MACS2SV_null> <S2SV_null> <S2SV_null> static VP9_null>,0
348,,0
349,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
350,<S2SV_ModStart> size ) { size_t,0
351,,0
352,"<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( dev,",0
353,,0
354,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct l2cap_mode ( struct l2cap_mode, L2CAP_MODE_MODE_MODE, L2cap_mode ) ; struct l2cap_mode = l2cap_mode ( pi -> data, L2CAP_MODE_MODE_MODE_MODE_MODE_MODE_MODE_MODE, l2CAP_MODE_MODE_MODE_MODE_MODE, L2CAP_MODE, L2CAP_MODE, L2CAP_MODE_MODE_MODE_MODE, L2CAP_MODE_MODE, L2CAP_MODE, L2CAP_MODE_MODE_MODE, L2CAP_MODE_MODE_MODE_MODE_MODE_MODE_MODE_MODE_MODE ) ; if ( len < L2CAP_MODE_MODE_MODE_MODE, L2CAP_MODE, L2CAP_MODE, L2CAP_MODE, L2CAP_MODE, L2CAP_MODE, L2CAP_MODE, L2CAP_MODE_MODE, L2CAP_MODE, L2CAP_MODE, L2CAP_MODE ) ;",0
355,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY (,0
356,,0
357,<S2SV_ModStart> ( buf ) == 0,0
358,"<S2SV_ModStart> * state, fmode_t fmode, fmode <S2SV_ModEnd> ) { fmode <S2SV_ModStart>, fmode, fmode <S2SV_ModEnd> ) ; fmode",0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TX_SIZE tx_size_size_t tx_size_size_size_size_size_t x, int64_t tx_size, int64_size, int64_size, int64_t tx_size, int64_size, int64_size, int64_t tx_size, int64_size, int64_size, int64_t tx_size, int64_size, int64_size, int64_t tx_size, int64_size, int64_size, int64_t tx_size, int64_size, int64_size, int64_t tx_size, int64_size, int64_size, int64_size, int64_t tx_size, int64_size, int64_size, int64_t tx_size, int64_size, int64_size, tx_size, int64_size, int64_size, int64_t mi_size, int64_size, int64_t dist, int64_t dist_t",0
361,<S2SV_ModStart> ; if ( pmd_or_bad <S2SV_ModEnd> ( pmd ),0
362,<S2SV_ModStart> ; if ( p_name <S2SV_ModEnd> ( *,0
363,"<S2SV_ModStart> * seg, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> ) { return vpx_reader <S2SV_ModEnd> ( r,",0
364,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr1 +",0
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,,0
367,"<S2SV_ModStart> ; size_t length <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( interface, KSZ8851_TXB <S2SV_ModEnd> ) ) ; if",0
368,,0
369,"<S2SV_ModStart> x2 ) { <S2SV_ModEnd> x2, x3 <S2SV_ModStart>, x1, x1, x1, x1, x1 <S2SV_ModEnd> x4, x1, <S2SV_ModStart> x4 ) ; <S2SV_ModEnd> x4 ) { <S2SV_ModStart> x4 ) ; <S2SV_ModEnd> y2 ) ; <S2SV_ModStart> x2 ] = x1 [ x1 ] = x2 <S2SV_ModEnd> ; x1",0
370,,0
371,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
372,,0
373,"<S2SV_ModStart> vpx_codec_alg_priv_t * priv ; vpx_codec_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_priv ( & ( priv, sizeof ( priv ) ) ) ; priv = ( priv <S2SV_ModEnd> -> cfg <S2SV_ModStart> priv_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_priv ( & ( & ( priv <S2SV_ModEnd> ) ) <S2SV_ModStart> priv ) ; priv <S2SV_ModEnd> priv_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_alg_priv ( & priv <S2SV_ModEnd> ) ;",0
374,<S2SV_ModStart> ) ; return ret <S2SV_ModEnd> } else,0
375,"<S2SV_ModStart> ctx ) { memset ( ctx, 0, sizeof ( ctx ) ) ;",0
376,,0
377,"<S2SV_ModStart> ( interface, ENC28J60_MISTAT ) ; <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC28J60_MIReg ( interface, ENC28J60_MIRDL <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MIRD <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MIReg ( interface, ENC28J60_MISTAT2 <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT2 <S2SV_ModEnd> )!= 0",0
378,,0
379,<S2SV_ModStart> ),0
380,<S2SV_ModStart> ) ) { size_t new_length = 0 ;,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,,0
384,,0
385,"<S2SV_ModStart> size_t idx, size_t len, len",0
386,,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
388,<S2SV_ModStart>,0
389,,0
390,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
391,,0
392,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> ret = 0,0
393,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
394,<S2SV_ModStart> ) { struct target_dev * target_dev ; struct target_dev ; struct target_dev ; struct xop * target_dev ; if ( xop -> src_dev -> src_dev ) return ;,0
395,<S2SV_ModStart> ; if ( new_bh <S2SV_ModEnd> ( new_bh <S2SV_ModStart> ) ) { struct ext2_bh_cache_bh <S2SV_ModEnd> ; if (,0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
397,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> rows ) ; if ( status == MagickFalse ) break ;",0
398,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
399,"<S2SV_ModStart>, 0, <S2SV_ModEnd> ) ; if",0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
401,<S2SV_ModStart> ps_cur_cur_slice ) { ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> u4_dec -> u4_,0
402,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
403,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_matind_t,0
405,<S2SV_ModStart> <S2SV_null> <,0
406,<S2SV_ModStart> ++ ) { <S2SV_ModEnd> src += src_stride,0
407,<S2SV_ModStart> row + row + row + row,0
408,,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr,0
410,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int,0
411,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
412,<S2SV_ModStart> ; uint16_t attr_len ; uint8_t data_len ; uint8_t data_len ; uint8_len ; uint8_t data_len ; uint8_t length ; uint8_t length ; uint8_t length ; uint8_t len ; uint8_t len ; uint8_t len ; uint8_t length ; uint8_t length ; uint8_t length ; uint8_t len ; uint8_t len ; uint8_t len ; uint8_t len ; uint8_t len ; uint8_t length ; uint8_t len = ( avp -> length + len + len - 1 ; if ( avp -> type == NULL ) { unsigned int64_len = AV_LEN ; if ( avp -> type == NULL ) { if ( avp -> type == NULL ) { unsigned char * ) { if ( avp -> data_len!= NULL ) { if ( avp -> data_len!= NULL ) { unsigned char * ) { unsigned char * ) { log_len ; return - 1 ; } <S2SV_ModStart> ; data_len ; },0
413,<S2SV_ModStart> = 0 ; if (,0
414,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",0
415,"<S2SV_ModStart> sock, sock, sizeof ( sock )",0
416,"<S2SV_ModStart>, cpkt. length <S2SV_ModEnd> ) ; if",0
417,<S2SV_ModStart> ) ) ; mutt_empty ( adata -> conn ) ;,0
418,,0
419,<S2SV_ModStart> ) - 1 <S2SV_ModEnd> ; if (,0
420,"<S2SV_ModStart>, & rlen, 0",1
421,"<S2SV_ModStart> = 0 ; size_t size ; size = 0 ; <S2SV_ModStart> ( data, sizeof ( data ), sizeof ( data ) <S2SV_ModEnd> ) ; size <S2SV_ModStart> ) ) ; if ( len < sizeof ( uint32 ) ) { return ; }",0
422,"<S2SV_ModStart> ) ) { if <S2SV_ModEnd> ( p,",0
423,,0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,<S2SV_ModStart> client ) ; <S2SV_ModEnd> return FALSE ;,0
426,,0
427,,0
428,"<S2SV_ModStart> int i ; int maxip, MAX_MAX <S2SV_ModEnd>, 0,",0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
430,<S2SV_ModStart> ; size_t ret = - 1 ; size_t ret = - 1 ; if ( ret > ( ssize_t ) ) { ret = - 1 ; OE_EINVAL ; },0
431,"<S2SV_ModStart> ( new_options, * section",0
432,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
433,<S2SV_ModStart>,0
434,<S2SV_ModStart> ; i = 0 <S2SV_ModEnd> ; if (,0
435,"<S2SV_ModStart> ; int count, size_t size <S2SV_ModEnd> ) ; uint32_t len <S2SV_ModStart> ; size = sizeof ( size <S2SV_ModEnd> ) ) ; size_t",0
436,,0
437,<S2SV_ModStart> ; i += 1 <S2SV_ModEnd> ; if (,0
438,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
439,"<S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst,",0
440,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> MACROBLOCK * const xd <S2SV_ModEnd> int mi_col, <S2SV_ModStart> int mi_col, int mi_col, int mi_col, MACROBLOCKD * mi_col, int mi_col, int mi_col, int mi_col, int mi_col, int mi_col, int mi_col, int mi_col, int mi_col, int mi_col, int mi_col, int mi_col, int mi_col, int mi_col ; <S2SV_ModStart> -> mb_col ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi,",0
441,"<S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ; u_int <S2SV_ModStart> ) ) ; if ( len < sizeof ( ndo, tptr ) ) { ND_PRINT ( ( ( ndo, "" <S2SV_blank> short)"" ) ) ) ; return ; }",0
442,,0
443,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ),",0
444,<S2SV_ModStart> skb ) ; skb -> len = 0 ;,0
445,<S2SV_ModStart> NULL ; } <S2SV_ModEnd> if (!,0
446,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TEMP_FAILURE_RETRY ( <S2SV_ModStart>, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ), TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ), TEMP_RETRY ( <S2SV_ModStart> ) ) ) ) ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; } TEMP_FAILURE_RETRY ( fd, TEMP_RETRY ( <S2SV_ModStart>, 0 ) ) ) ; TEMP_FAILURE_FAILURE_RETRY ( <S2SV_ModStart> 0 ) ) ; TEMP_FAILURE_FAILURE_FAILURE_FAILURE_RETRY ( <S2SV_ModStart> ( fd, TEMP_RETRY ( <S2SV_ModStart>, 0 ) ) )",0
447,<S2SV_ModStart> -> buf ; <S2SV_ModEnd> if ( ctx,0
448,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
449,<S2SV_ModStart> ctx ) ; ctx = 0 ;,0
450,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
451,<S2SV_ModStart> ; if ( (,0
452,<S2SV_ModStart> ) return - ENOMEM <S2SV_ModEnd> ; if (,0
453,,0
454,<S2SV_ModStart> * buf ; int count ; size_t,0
455,<S2SV_ModStart> name ) { const char * name = '\\0' ; const char * name = '\\0' ; char * name [ len ] = '\\0' ; if ( * name [ len ] == '\\0' && * name [ len ] == '\\0' || ( * name [ len ] == '\\0' || ( * name [ len ] == '\\0' && name [ len ] == '\\0' && name [ len ] == '\\0' || ( * name [ len ] == '\\0' || ( * name [ len ] == '\\0' && name [ len ] == '\\0' && name [ len ] == '\\0' && name [ len ] == '\\0' || ( * name [ len ] == '\\0' && name [ len ] == '\\0' && name [ len ] == '\\0' && name [ len ] == '\\0' && name [ len ] == '\\0' && name [ len ] == '\\0' && name [ len ] == '\\0',0
456,<S2SV_ModStart>,0
457,<S2SV_ModStart> ; if ( opt -> opt.,0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,<S2SV_ModStart> ; if ( info -> entries > 0 ) { return 0 ; },0
460,<S2SV_ModStart> key_data ) ; <S2SV_ModEnd> if ( key_data,0
461,,0
462,,0
463,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return 0 ;,0
464,,0
465,<S2SV_ModStart> <S2SV_null> <S2SV_,0
466,<S2SV_ModStart>,0
467,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
468,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } else {,0
469,"<S2SV_ModStart> * fl6, <S2SV_ModEnd> sk ) ; <S2SV_ModStart> & fl6, fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> ( fl6, <S2SV_ModEnd> ) ; }",0
470,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null>,0
471,<S2SV_ModStart> <S2SV_null> <S2SV_,0
472,"<S2SV_ModStart> int result = RLC_OK <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) { bn_len = RLC_OK ; bn_zero ( m, m, m ) ; bn_len = RLC_OK ; bn_zero ( m, m ) ; bn_len = 0 ; bn_len ; bn_len = RLC_null ( m, m, m ) ; bn_len ; bn_len = 0 ; bn_len ; bn_len = 0 ; bn_len ; bn_len = RLC_OK ; bn_null ( m, m, m ) ; bn_len ; bn_len = 0 ; bn_len ; bn_len ; bn_len = 0 ; bn_len ; bn_len = 0 ; bn_len ; bn_len ; bn_len = RLC_len ; bn_len ; bn_len ; bn_len = RLC_len ; bn_len ; bn_len ; bn_len ; bn_len ; bn_len = RLC_null ( m, m, m, m, m, m, m, m_len ) ; bn_len ; bn_len ; bn_len ; bn_len ; bn_",0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
475,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
476,"<S2SV_ModStart> 0 ) { memcpy <S2SV_ModEnd> ( x, <S2SV_ModStart> 0 ] ; memset <S2SV_ModEnd> ( x ->",0
477,<S2SV_ModStart> ; } } if (,0
478,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> rows ) ; return ( DestroyImageList ( image ) ) ; }",0
479,,0
480,<S2SV_ModStart> ; ps_dec -> <S2SV_ModEnd> ; ps_dec ->,0
481,"<S2SV_ModStart> int mptctl_devinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_ioctl_ioctl_ioctl_ioctl_ioctl_info ( ioc, <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } <S2SV_ModEnd> ; } <S2SV_null>",0
482,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> rows ) ; return ( DestroyImageList ( image ) ) ; }",0
483,<S2SV_ModStart> ) ) { free ( ) ;,0
484,<S2SV_ModStart> ; if ( data_size <S2SV_ModEnd> ) { exif_log,0
485,<S2SV_ModStart> ] = 0 <S2SV_ModEnd> ; if (,0
486,<S2SV_ModStart> <S2SV_null> <S2SV_,0
487,,0
488,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> ENC624J600_null> BOOL ENC624J600 <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC624J600_EIE, ENC624J600_EIE, ENC624J600_EIE <S2SV_ModEnd> ) ) <S2SV_ModStart> ( interface, ENC624J600_EIR_BUFFER <S2SV_ModEnd>, ENC624J600_EIE, <S2SV_ModStart> ( interface, ENC624J600_EIE, ENC624J600_EIE <S2SV_ModEnd> ) ) <S2SV_ModStart> ( interface, ENC624J600_EIE, ENC624J600_EIE, ENC624J600_BUFFER <S2SV_ModEnd> ) ; enc624J600_BUFFER",0
489,<S2SV_ModStart> image ) ; if ( status == MagickFalse ) break ;,0
490,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S,0
491,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> char * <S2SV_ModStart> int i, j, j, j, j, j <S2SV_ModStart> = 0 ; if ( i ++ i ++ ) j = 0 ; i ++ i ++ ; i ++ i ++ ; i ++ i ++ i ++ i ++ ; i ++ i ++ i ++ i ++ i ++ i ++ i ++ ; for ( i ++ i ++ i ++ i ++ i ++ i ++ i ++ ; i ++ i ++ i ++ i ++ i ++ i ++ ; i ++ i ++ i ++ i ++ i ++ i ++ i ++ i ++ ; i ++ i ++ i ++ i ++ i ++ i ++ ; for ( i ++ i ++ i ++ i ++ i ++ i ++ i ++ i ++ i ++ i ++ i ++ i ++ i ++ i ++ i ++ i ++ i ++ i ++ i ++ i ] [ i ] [ i ] [ i ] [ i ] [ i ] = j ] [ i ] [ i ] [ i ] [ i ] [ i ] [ i ] [ i ] [ i ] [ i ] [ i ] [ i ] [ i ] [ i ] [ i ] [ i ] =",0
492,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
493,"<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.",0
494,<S2SV_ModStart> ; if (,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
496,"<S2SV_ModStart> - EINVAL ; memset ( & ctx, sizeof ( & ctx ) ) ;",0
497,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
498,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0,0
499,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
500,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
501,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> char * cp <S2SV_ModStart> == '\\0' ) { char * cp = '\\0' ; char * cp = & cp ++ ; char * cp = & cp [ 0 ] ; char * cp ++ ; char * cp = '\\0' ; char * cp = & cp ++ ; char * cp = & cp [ 0 ] = & cp [ 0 ] ; char * cp = '\\0' ; char * cp ++ ; if (! cp == '\\0' && cp [ 0 ] == '\\0' && cp [ 0 ] == '\\0' && cp [ 0 ] == '\\0' && cp ++ ) { const char * cp [ 0 ] = '0' ; if ( (! cp == '\\0' && cp [ 0 ] == '\\0' || ( cp [ 0 ] == '\\0' && cp [ 0 ] == '\\0' && cp [ 0 ] == '\\0' && cp [ 0 ] == '\\0' && cp [ 0 ] == '\\0' && cp [ 0 ] == '\\0' && cp [ 0 ] == '\\0' ) { char * cp [ 0 ] = '0' ; c0',0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,"<S2SV_ModStart>, * pix, * pix <S2SV_ModEnd>, * <S2SV_ModStart> 0 ) ; if ( pix [ 0 ] == 0 ) { pix [ 0 ] = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) ; } <S2SV_ModEnd> } if (",0
504,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( cpi,",0
505,<S2SV_ModStart> int i ; size_t <S2SV_ModEnd> len ; int,0
506,<S2SV_ModStart> * s ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
507,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
508,,0
509,<S2SV_ModStart> ; i += 1 <S2SV_ModEnd> ; if (,0
510,"<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( x,",0
511,<S2SV_ModStart> } end ++ ; } else {,0
512,<S2SV_ModStart> -> i_inode ; ei = NULL ;,0
513,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> cm ) { vpx_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) ; vpx_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_write_bit <S2SV_ModEnd> ( wb,",0
514,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> return ; },0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context ->,0
516,<S2SV_ModStart> ; i += 1 <S2SV_ModEnd> ; if (,0
517,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( xd ->,0
518,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> enc624J600_TX_SIZE <S2SV_ModStart> ( interface, ENC624J600_BLOCK * interface, ENC624J600_TX_BUFFER_SIZE <S2SV_ModStart> ( interface, ENC624J600_BUFFER_BUFFER_BUFFER_BUFFER_SIZE, ENC624J600_SIZE <S2SV_ModEnd> ) ; enc624J600_BUFFER_BUFFER_SIZE <S2SV_ModStart> ( interface, ENC624J600_BUFFER_BUFFER_BUFSIZE <S2SV_ModEnd> ) ; enc624J600_BUFFER_BUFFER <S2SV_ModStart> ( interface, ENC624J600_BUFFER_SIZE, ENC624J600_BUFSIZE <S2SV_ModEnd> ) ; enc624J600_BUFFER_BUFFER <S2SV_ModStart> ( interface, ENC624J600_BUFFER_BUFFER_BUFFER_BUFFER_BUFFER_SIZE, ENC624J600_SIZE, ENC624J600_SIZE ) ; enc624J600_t status = ( interface -> <S2SV_ModStart> ( interface, ENC624J600_BUFFER_BUFFER_BUFFER_SIZE, ENC624J600_BUFFER_BUFFER_BUFFER_BUFFER_MAX_BUFFER_MAX_BUFFER_MAX_BUFFER_BUFFER_MAX_MAX_BUFFER_MAX_MAX_MAX_MAX_MAX",0
519,<S2SV_ModStart> <S2SV_null> <S2SV_null,0
520,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if (!,0
521,<S2SV_ModStart> ++ ) ; <S2SV_ModEnd> out <S2SV_null>,0
522,<S2SV_ModStart> ; err = - EINVAL <S2SV_ModEnd> ; err =,0
523,<S2SV_ModStart> event ) { <S2SV_ModEnd> } <S2SV_null>,0
524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> uint16_t <S2SV_ModStart> char * s, int <S2SV_ModEnd> int size_t <S2SV_ModStart> size ) { uint16_t len ; uint16_t len ; uint16_t len ; uint8_t len ; uint16_t len ; uint16_t len = 0 ; size_t len ; if ( len < 0 ) return - 1 ; } if ( len < sizeof ( len ) ) { return - 1 ; } <S2SV_ModStart> + 1 ; } if ( len < 0 ) return - 1 ; } <S2SV_ModEnd> if ( len <S2SV_ModStart> + 1 ; if ( len <S2SV_null> <S2SV_null>",0
525,<S2SV_ModStart>,0
526,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
527,"<S2SV_ModStart> * node, NULL, <S2SV_ModEnd> const node *",0
528,<S2SV_ModStart> ; i = 0 <S2SV_ModEnd> ; if (,0
529,<S2SV_ModStart> = 0 ;,0
530,,0
531,<S2SV_ModStart> row ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
532,,0
533,<S2SV_ModStart> ) ; } status = DestroyImageExtent ( image ) ;,0
534,<S2SV_ModStart> ) ) ;,0
535,<S2SV_ModStart> type1 ) ; if (!,0
536,,0
537,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
538,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_SIZE bsize ( MACROBLOCK_SIZE bsize, MACRO BLOCK_SIZE bsize, MACRO BLOCK_SIZE bsize, MACRO BLOCK_SIZE bsize, MACROBLOCKD * const BLOCK_SIZE bsize, int mbmi_row, x -> mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_col ) ;",0
539,,0
540,<S2SV_ModStart>,0
541,<S2SV_ModStart> ; if ( ctx -> get_frame <S2SV_ModEnd> ( ctx ),0
542,<S2SV_ModStart> ) ; } SetImageExtent ( image ) ;,0
543,<S2SV_ModStart> event ) ; if ( event -> header ) return - EINVAL,0
544,"<S2SV_ModStart> u_char * tptr <S2SV_ModEnd> ) { if <S2SV_ModStart> case BGP_LEN : if ( length < 4 ) { ND_PRINT ( ndo, "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> %u)"", tptr <S2SV_ModEnd> ) ) ; break",0
545,"<S2SV_ModStart> -> outputbuffer <S2SV_ModEnd>, buf,",0
546,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( src_size,",0
547,,0
548,<S2SV_ModStart> ( ( ( <S2SV_ModEnd> dev -> bLength,0
549,"<S2SV_ModStart> size, size <S2SV_ModEnd> ) ; if",0
550,,0
551,"<S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd>, & <S2SV_ModStart> ( interface, ENC624J600_MAADR2, ENC624J600_MACON2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MACON2 <S2SV_ModEnd>, & <S2SV_ModStart> ( interface -> <S2SV_ModStart> ( interface, ENC624J600_MACON2, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface -> <S2SV_ModStart> ( interface, ENC624J600_MAADR2, ENC624J600_MAADR2, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; }",0
552,<S2SV_ModStart> ; psf <S2SV_ModEnd> ( psf -> header <S2SV_ModStart> ] ) ; if <S2SV_ModEnd> ( psf -> header <S2SV_ModStart> psf -> header. header. header. header. header. header = sizeof ( psf -> header ) ) ; <S2SV_ModStart> ( psf -> header. header. header = sizeof ( psf -> header. header. header ) ) ; if ( psf -> header. header. header = sizeof ( psf -> header ) ) ) ; printf ( psf -> header -> header -> header -> header. header. header. header. header. header. header = sizeof ( psf -> header. header. len ) ) ; if ( psf -> header = sizeof ( psf -> header. header -> header -> header. header -> header -> header. header. header. header. header. header. header. header. header. header. len ) ) ; size = sizeof ( psf -> header. len ) ) ; if ( psf -> header -> header. header -> header. header. header = sizeof ( psf -> header -> header. header -> header. header. header. header. header. header. header. header. header. header. header = sizeof ( psf -> header. header. len ) ) ) ) ;,0
553,<S2SV_ModStart> vpx_codec_alg_priv ( ctx ) <S2SV_ModEnd> ; if (,0
554,<S2SV_ModStart> cpi ) { const VP9EncoderConfig <S2SV_ModEnd> * cpi <S2SV_ModStart> ) ) { VP9EncoderConfig = & cpi -> spatial_mode = & cpi -> common ; <S2SV_ModEnd> ; sf -> <S2SV_ModStart> = 1 ; <S2SV_ModEnd> ; sf -> <S2SV_ModStart> = 1 ; <S2SV_ModEnd> ; sf -> <S2SV_ModStart> = 1 ; <S2SV_ModEnd> ; sf -> <S2SV_ModStart> = 1 ; <S2SV_ModEnd> ; sf -> <S2SV_ModStart> = 1 ; <S2SV_ModEnd> ; sf -> <S2SV_ModStart> = 1 ; <S2SV_ModEnd> ; sf ->,0
555,<S2SV_ModStart> } ret = TEMP_FAILURE_RETRY (,0
556,,0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,"<S2SV_ModStart>, s, NULL <S2SV_ModEnd> ) ; int",0
559,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
560,"<S2SV_ModStart> ) ; } memset <S2SV_ModEnd> ( mvs,",0
561,<S2SV_ModStart> i ) { <S2SV_ModEnd> i ; size_t,0
562,,1
563,<S2SV_ModStart>,0
564,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ) { TEMP_FAILURE_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) <S2SV_ModEnd> ) ; }",0
565,"<S2SV_ModStart> ; void * phdr ; uint32 phdr = NULL, phdr = NULL, phdr = NULL, phdr",0
566,,0
567,<S2SV_ModStart> <S2SV_null> <S,0
568,<S2SV_ModStart> out_free ; } len = 0 ;,0
569,"<S2SV_ModStart> rc, const VP9EncoderConfig <S2SV_ModEnd> ) { const VP9EncoderConfig <S2SV_ModStart> ) { const VP9EncoderConfig <S2SV_ModEnd> ) ; const VP9EncoderConfig <S2SV_ModStart> ) ; const VP9EncoderConfig <S2SV_ModEnd> * cpi <S2SV_ModStart> ) ; const VP9EncoderConfig * cpi <S2SV_ModStart> ) ) { const VP9EncoderConfig <S2SV_ModEnd> = cpi -> <S2SV_ModStart> ) ; const VP9EncoderConfig <S2SV_ModEnd> } <S2SV_null>",0
570,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> vpx_read_mode ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> * r, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> * r, vpx_read_mode ) { vpx_read_bit <S2SV_ModEnd> ( r,",0
571,"<S2SV_ModStart> : # line 104 ""grammar.y"" { yr_grammar.y"" { yr_re_node_node_node <S2SV_ModEnd> "" { yr_node_node_node_node <S2SV_ModStart>, ( ( ( ( ( ( ( ( ( ( ( ( ( * yyvaluep ) ). re_node ). re_node ). re_node ). re_node ). re_node ) ;",0
572,<S2SV_ModStart> <S2SV_null> <S2SV_,0
573,,0
574,,0
575,,0
576,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_func,0
577,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> msg. msg,0
578,"<S2SV_ModStart>, len, 0",0
579,<S2SV_ModStart> ) ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
580,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
581,<S2SV_ModStart> NULL ) ; zval_val_ctor ( & zval ) ; zval_ctor_ctor ( zval ) ; zval_ctor ( & zval ) ;,0
582,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return - <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
583,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
584,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
585,<S2SV_ModStart> env ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) ; },0
586,"<S2SV_ModStart> cm ) ; memset <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ; } memset <S2SV_ModEnd> ( seg,",0
587,"<S2SV_ModStart>, TYPE_TYPE_TYPE_TYPE_TYPE_TYPE <S2SV_ModEnd>, type_type, <S2SV_ModStart>, type_type, <S2SV_ModStart> ; if (! type_type ) return 0 <S2SV_ModStart> 0 ) ; if (! type_type_type ) return 0 <S2SV_ModStart> ; if (! type_type ) ) return 0 ; <S2SV_ModStart> ; if (! type_type, type_type, type_type, type_type, type_type, type_type, type_type, type_type, type_type, type_type, type_type ) ) ; if (! type_type ) return 0 <S2SV_ModStart> 0 ) ; if (! type_type ) return 0 ;",0
588,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY (,0
589,,0
590,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> * outputbuf ) { <S2SV_ModEnd> ; int <S2SV_ModStart> * outputbuf = 0 ; int <S2SV_ModEnd> ; int <S2SV_ModStart> 0 ) ; if ( <S2SV_ModEnd> 1 ) { <S2SV_ModStart>, ""Invalid <S2SV_blank> "" ) ; return - 1 ; } <S2SV_ModEnd> } if ( <S2SV_ModStart> ) ) { fprintf ( stderr, ""Invalid <S2SV_blank> "" ) ; return ( stderr, ""Invalid <S2SV_blank> "" ) ; } <S2SV_ModEnd> } if ( <S2SV_ModStart> ) ) { fprintf ( stderr, ""Error: <S2SV_blank> "" ) ; return ( ""%s"" ) ; } <S2SV_ModEnd> } else <S2SV_ModStart> } if ( <S2SV_ModEnd> 1 ) { <S2SV_ModStart> 0 ) ; }",0
591,"<S2SV_ModStart> ; if ( lookup_id <S2SV_ModEnd> ( obj,",0
592,"<S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode )",0
593,<S2SV_ModStart> ; if ( type == NULL ) goto err ; <S2SV_ModStart> ) goto err ; } if (,0
594,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> stream ->,0
595,"<S2SV_ModStart> } if ( g_string_string <S2SV_ModEnd> ( arg,",0
596,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
597,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
598,"<S2SV_ModStart> ) ) { if ( GF_ISOM_FILE * s -> data ) { GF_LOG ( GF_FILE, GF_FILE, GF_FILE ) ; }",0
599,<S2SV_ModStart> opt ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> <S2SV_null>,0
600,"<S2SV_ModStart> int i, vpx_writer <S2SV_ModEnd> * w,",0
601,<S2SV_ModStart> vp9_codec_codec_priv_t * ctx <S2SV_ModEnd> ; vp9_codec_codec_alg_priv_t ( ctx <S2SV_ModStart> ; if ( ctx <S2SV_ModEnd> ( ctx ),0
602,"<S2SV_ModStart>, & len, 0",1
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
604,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
605,<S2SV_ModStart> * buf ; jas_uchar <S2SV_ModEnd> buf [ 0,0
606,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * const MB_SIZE bsize, MACROBLOCKD * const MB_SIZE bsize, int64_SIZE bsize, int * const mbmi, x, x -> mbmi_col, x -> mbmi_col ) ; const MB_INFO * const x = & x -> mbmi ; MACROBLOCKD * const BLOCK_SIZE bsize = & x -> mbmi ; if ( x -> skip_frame == BLOCK_8x16x32x32x16x16x32x32x32x32x32x32x32x32x32x32x32x32x32x32x32x32x32x32x32x",0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. ptr <S2SV_ModStart> [ psf -> header.,0
608,<S2SV_ModStart> int i ; uint32_t count ; uint32_t count ; uint32_t <S2SV_ModEnd> ; uint32_t,0
609,<S2SV_ModStart> == 0 && ( c == 0 ),0
610,<S2SV_ModStart> ( packet. sk ) <S2SV_ModEnd> ; if (,0
611,<S2SV_ModStart> ) ; return MagickFalse,0
612,"<S2SV_ModStart> buffer, TEMP_FAILURE_RETRY ( <S2SV_ModStart> size )",0
613,"<S2SV_ModStart> * output ) { sprintf ( "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.",0
614,<S2SV_ModStart> y1 ) { sprintf ( outputbuffer ) ;,0
615,,0
616,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( cm,",0
617,,0
618,<S2SV_ModStart> 0 ) { if ( xWantedSize > xWantedSize ) { xWantedSize = xWantedSize + xWantedSize - ( xWantedSize - xWantedSize - xWantedSize - xWantedSize - xWantedSize - xWantedSize + xWantedSize - xWantedSize - xWantedSize - xWantedSize + xWantedSize - xWantedSize - xWantedSize - xWantedSize - xWantedSize + xWantedSize - xWantedSize - xWantedSize + xWantedSize + xWantedSize - xWantedSize + xWantedSize + xWantedSize - xWantedSize + xWantedSize + xWantedSize + xWantedSize - xWantedSize + xWantedSize + xWantedSize - xWantedSize + xWantedSize + xWantedSize - xWantedSize + xWantedSize + xWantedSize - xWantedSize + xWantedSize + xWantedSize + xWantedSize + xWantedSize + xWantedSize + xWantedSize + xWantedSize - x,0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,"<S2SV_ModStart> int i ; uint16_t width ; uint16_t height ; uint8_low_t height ; uint8_low_t height ; uint8_low_t height ; <S2SV_ModStart> ; i ; if ( length > 0 ) { if ( length > 0 ) { error = ( s, 0 ) ; }",0
621,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
622,"<S2SV_ModStart> coef_probs ) { vpx_probs_probs_probs_probs_probs_probs_probs_probs_probs <S2SV_ModEnd> ( tx_probs,",0
623,<S2SV_ModStart> ; r = TEMP_FAILURE_RETRY (,0
624,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> 0 <S2SV_ModStart> ( d -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, state -> data [ 1 ] <S2SV_ModStart>, 1 ], state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, <S2SV_ModStart>, 1, state ->",0
625,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx, <S2SV_ModEnd> ; if (",0
626,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> vpx_VP9_HIGHBITDEPTH if ( vp9_filter_filter_filter_filter_filter_stride <S2SV_ModEnd> ( x, <S2SV_ModStart> int mi_stride, vpx_HIGHBITDEPTH ) { vpx_writer <S2SV_ModEnd> ( x, <S2SV_ModStart> ) ) ; # if CONFIG_VP9_VP9_HIGHBITDEPTH # if CONFIG_VP9_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH # if CONFIG_HIGHBITDEPTH if CONFIG_VP9_VP9_VP9_HIGHBITDEPTH return ; # if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH vpx_VP9_VP9_VP9_HIGHBITDEPTH vpx_VP9_HIGHBITDEPTH return ;",0
627,<S2SV_ModStart> buf ) ; <S2SV_ModEnd> if ( buf,0
628,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
629,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
630,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
631,"<S2SV_ModStart> cm = ( VP9_COMMON * cm, VP9_COMMON * cm, cm <S2SV_ModStart> cm ) { <S2SV_ModEnd> vp9_get_active ( cm <S2SV_ModStart> cm -> seg ; vpx_write_segment_active <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ; vpx_write_active <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ; vp9_get_active <S2SV_ModEnd> ( seg, <S2SV_ModStart> i ) ; vpx_write_active <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ; vp9_active <S2SV_ModEnd> ( seg, <S2SV_ModStart> ; if ( seg, cm -> <S2SV_ModEnd> ) ; }",0
632,<S2SV_ModStart>,0
633,<S2SV_ModStart> * ps_dec ; <S2SV_ModEnd> ps_dec ->,0
634,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY (,0
635,<S2SV_ModStart> <S2SV ) { const int,0
636,<S2SV_ModStart> g ) ; g -> gcstate = g -> gcgc ;,0
637,<S2SV_ModStart> return ret ; <S2SV_ModEnd> if (!,0
638,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
639,<S2SV_ModStart> <S2SV_null> <S2SV_,0
640,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi ->,0
641,<S2SV_ModStart> ( bp [ 0 ] <S2SV_ModEnd> ) ;,0
642,"<S2SV_ModStart> int mptctl_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> return mpt_ioctl_ioctl_ioctl_ioctl ( ioc, <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } <S2SV_ModEnd> return -",0
643,<S2SV_ModStart> ; image -> rows <S2SV_ModEnd> ; image ->,0
644,,0
645,,0
646,"<S2SV_ModStart> int m, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> 1 ) { const vpx_read_bit <S2SV_ModEnd> ( r, <S2SV_ModStart> 1 ) ; const vpx_read_bit <S2SV_ModEnd> ( r,",0
647,"<S2SV_ModStart> * probs, vpx_prob <S2SV_ModEnd> * probs,",0
648,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r )",0
649,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> stream ->,0
650,<S2SV_ModStart>,0
651,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> return NULL ;,0
652,<S2SV_ModStart> { ret = <S2SV_ModEnd> ; ret =,0
653,<S2SV_ModStart> ; tok -> flags = 0 ; tok -> flags = 0 ; tok -> flags = 0 ;,0
654,,0
655,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } if (,0
656,<S2SV_ModStart> = 0 ; size_t addrlen_out = 0 ; <S2SV_ModStart> OE_RAISE_ERRNO ( OE_ERRNO ( OE_RAISE_ERRNO ( OE_ERRNO ( OE_EINVAL ) ) ; if ( addrlen_out > ( ssize_t ) OE_RAISE_ERRNO ( OE_EINVAL ) ;,0
657,,1
658,"<S2SV_ModStart> NULL, length <S2SV_ModEnd> ) ; return",0
659,<S2SV_ModStart> <S2SV_null> <S2SV_null> 0,0
660,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
661,"<S2SV_ModStart> { dm9000_EPCR_EPCR <S2SV_ModEnd> ; dm9000 <S2SV_ModEnd> ( dm9000_EPCR, <S2SV_ModStart> 0 ) ; if ( dm9000_EPCR_EPCR_EPCR_EPCR_EPCR <S2SV_ModEnd> ( dm9000_EPCR, <S2SV_ModStart> 0 )!= 0 ) { dm9000_EPCR_EPCR_EPCR_EPCR <S2SV_ModEnd> ; dm9000WriteReg ( <S2SV_ModStart> } dm9000WriteReg ( DM9000_EPCR, DM9000_EPOS <S2SV_ModEnd> ) ; }",0
662,<S2SV_ModStart>,0
663,<S2SV_ModStart> ; if ( <S2SV_ModEnd> msg. msg,0
664,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
665,,0
666,<S2SV_ModStart> == NULL ) <S2SV_ModEnd> return ;,0
667,"<S2SV_ModStart> image_info ) ; SetImageExtent ( image, image -> rows ) ;",0
668,"<S2SV_ModStart> ( r = <S2SV_ModEnd> ( r,",0
669,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
670,<S2SV_ModStart> client ) { <S2SV_ModEnd> } if ( client ->,0
671,<S2SV_ModStart> arg ) ; <S2SV_ModEnd> return NULL ;,0
