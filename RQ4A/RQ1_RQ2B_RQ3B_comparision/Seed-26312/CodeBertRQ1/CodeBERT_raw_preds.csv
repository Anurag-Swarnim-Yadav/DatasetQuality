,raw_predictions,correctly_predicted
0,<S2SV_ModStart> ; if ( n2size < 1 ) <S2SV_ModEnd> { applog (,0
1,<S2SV_ModStart> case EAP_TYPE_SUBSET : ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> case EAP_TYPE_SPACKET : ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> case EAP_TYPE_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> case EAP_TYPE_ASSERT ( tptr + 5 ) ;,0
2,<S2SV_ModStart> ; ret = - EINVAL ; if (,0
3,"<S2SV_ModStart> case SIOCYAMGCFG : memset ( & yi, 0, sizeof ( yi ) ) ;",1
4,<S2SV_ModStart> skb ) ; <S2SV_ModEnd> if ( skb,0
5,"<S2SV_ModStart>, offset ; if ( avio_feof ( f ) ) { index -> item_count = 0 ; av_freep ( & index -> items ) ; return AVERROR_INVALIDDATA ; }",1
6,<S2SV_ModStart> * tpg ; u16 <S2SV_ModEnd> tpgt ; int <S2SV_ModStart> ; if ( kstrtou16 <S2SV_ModEnd> ( name + <S2SV_ModStart> ) || tpgt >= VHOST_SCSI_MAX_TARGET <S2SV_ModEnd> ) return ERR_PTR,1
7,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
8,<S2SV_ModStart> { u32 data <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
9,<S2SV_ModStart> src ) ; __switch_to_tm ( src ) ; tm_recheckpoint_new_task ( src ) ;,1
10,<S2SV_ModStart> > 0 ) <S2SV_ModEnd> c = c <S2SV_ModStart> c -> next ; <S2SV_ModEnd> if ( c,0
11,"<S2SV_ModStart> ( sb, KERN_ERR,",1
12,"<S2SV_ModStart> ipv6_select_ident ( fptr, ( struct rt6_info * ) skb_dst ( skb )",1
13,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
14,<S2SV_ModStart> < 2 ) { <S2SV_ModEnd> return 0 ;,0
15,"<S2SV_ModStart> int i, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> 0 ] = ( tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> ; x0 ] = ( tran_low_t ) [ 2 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_t )",0
16,<S2SV_ModStart> == 0 ) sanitize_dead_code ( env ),0
17,"<S2SV_ModStart> int i ; if (! config -> sample_rate ) { strcpy ( wpc -> error_message, ""sample <S2SV_blank> rate <S2SV_blank> cannot <S2SV_blank> be <S2SV_blank> zero!"" ) ; return FALSE ; }",1
18,"<S2SV_ModStart> = 0 ; unsigned char sense_buffer [ SCSI_SENSE_BUFSIZE ], * sense_buffer, cgc -> sense ) ; if (! sense_buffer ( cgc -> sense ) sense_buffer ( cgc -> sense, sense ) sense_buffer ( cgc -> sense, sense_buffer, sizeof ( * sense ), sense_buffer ) ;",0
19,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
20,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> int sse2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_row, int mi_row, int mi_col, int mi_row, int mi_col, 0 <S2SV_ModStart> = 0 ; if (! cpi -> common. segment_idx >= MAX_VP9_HIGHBITDEPTH ) { if (! get_segment_id ( cpi -> oxcf. segment_id ) ) return - ENOMEM ; } # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> frame_buf. stride == 0 ) { return - ENOMEM ; } # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( cpi ) { memset ( cpi, 0, sizeof ( cpi ) ) ; return 1 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null",0
21,"<S2SV_ModStart> const char * ctx, L2",0
22,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> VP9_COMP <S2SV_ModEnd> struct vpx_writer * w,0
23,<S2SV_ModStart> ) ; return <S2SV_ModEnd> ralg -> seedsize,1
24,<S2SV_ModStart> ; if ( sockaddr_len < sizeof ( struct sockaddr_pppox ) ) return - EINVAL ; if (,1
25,<S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; } else { <S2SV_ModStart> = COAP_BLOCK_1024 ; } else { <S2SV_ModStart> = 512 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; },0
26,<S2SV_ModStart> char * fmtname ; int debug <S2SV_ModStart> = 0 ; debug = 0 ; <S2SV_ModStart> break ; } debug = 0 ;,0
27,"<S2SV_ModStart> esr ) { siginfo_t info ; void __user * pc = ( void __user * ) pc ; <S2SV_ModStart>, regs, 0, <S2SV_ModEnd> ) ; }",0
28,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
29,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> intter2SV_null> static,0
30,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> len = 0 <S2SV_ModStart> = 0 ; if ( tolen < 3 ) return - ENAMETOOLONG ; <S2SV_ModStart> = 0 ; tolen -- ; tolen -- ; <S2SV_ModStart> case 3 : if ( tolen < 2 ) return - ENAMETOOLONG ; <S2SV_ModStart> case 2 : if ( tolen == '\\0' : tolen -- ) return - ENAMETOOLONG ; <S2SV_ModStart> case 2 : if ( tolen == 0 ) return - ENAMETOOLONG ; <S2SV_ModStart> case 3 : if ( tolen == 0 ) return - ENAMETOOLONG ; tolen -- ;,0
31,<S2SV_ModStart> == - 1 || class == CLIENT_TYPE_MASTER <S2SV_ModEnd> ) { err,0
32,<S2SV_ModStart> ) ; } mutex_lock ( & nt_mutex ) ;,0
33,<S2SV_ModStart> -> data ; <S2SV_ModEnd> if (! <S2SV_ModStart> ( ret ) <S2SV_ModEnd> return - EINVAL,0
34,<S2SV_ModStart> < 1 || vstart + vdaux < vstart <S2SV_ModEnd> ) { sdb_free,1
35,<S2SV_ModStart> int user_keyring_keyring ; struct user_keyring_keyring ; struct <S2SV_ModStart> keyring_keyring_to_keyring ; if (! keyring_keyring_keyring_keyring ) return - ENOMEM ; <S2SV_ModStart> ) goto out ; } key_put ( & keyring_key ) ;,0
36,<S2SV_ModStart> = create_spnego_ctx ( 0,0
37,<S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_l2tpip <S2SV_ModEnd> ) ) return,0
38,<S2SV_ModStart> <S2SV_null> static unsigned long <S2SV_ModEnd> stack_maxrandom_size ( void <S2SV_ModStart> ) { unsigned long <S2SV_ModEnd> max = 0 <S2SV_ModStart> ( ( - 1UL <S2SV_ModEnd> ) & STACK_RND_MASK,1
39,"<S2SV_ModStart>, _ ( ""_Cancel"" ), GTK_RESPONSE_CANCEL <S2SV_ModEnd> ) ; } if",0
40,<S2SV_ModStart> char * str <S2SV_ModEnd> ) { str,0
41,<S2SV_ModStart> } if (,0
42,<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; return - EINVAL <S2SV_ModEnd> ; } <S2SV_null>,0
43,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
44,<S2SV_ModStart> } } } fix_google_param ( google_out ) ; fix_google_param ( google_sig ) ; fix_google_param ( google_reqId ) ; fix_google_param ( google_version ) ; fix_google_param ( responseHandler ) ; fix_google_param ( outFileName ) ;,1
45,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horAcc8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
46,"<S2SV_ModStart> tsample_t s ; uint16 bps = 0 ; ( void ) TIFFGetField ( in, TIFFTAG_BITSPERSAMPLE, & bps ) ; if ( bps!= 8 ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> can <S2SV_blank> only <S2SV_blank> handle <S2SV_blank> BitsPerSample=8 <S2SV_blank> in <S2SV_blank> %s"", ""cpContig2SeparateByRow"" ) ; return 0 ; }",1
47,<S2SV_ModStart> ) ; struct hugepage_subpool * spool = ( struct hugepage_subpool <S2SV_ModEnd> * ) spool,0
48,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ] ) ; },0
49,<S2SV_ModStart> goto not_found ; if ( e - p > HOST_NAME_MAX - 1 ) goto not_found ;,0
50,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> bool <S2SV_ModEnd> generic_pipe_buf_get ( struct <S2SV_ModStart> buf ) { return try_get_page <S2SV_ModEnd> ( buf ->,1
51,"<S2SV_ModStart>, cp, ep2 <S2SV_ModEnd> ) ; }",0
52,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",0
53,<S2SV_ModStart> ( uint32_t ),0
54,<S2SV_ModStart> config -> pm_max_requests ; fpm_globals. listening_socket = dup ( wp -> listening_socket ),1
55,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> srv_frame_step_st <S2SV_ModEnd> ( const VP9_COMMON <S2SV_ModStart> * const VP9_BITDEPTH <S2SV_ModStart> ) { const FIRSTPASS_STATS * const <S2SV_ModStart> ; const FIRSTPASS_STATS * const FIRSTPASS_STATS * const <S2SV_ModStart> ; const FIRSTPASS_STATS * const <S2SV_ModStart> ; const FIRSTPASS_STATS * const i = & cpi -> avg_frame_step_in_bitdepth ; for ( i = 0 ; i = 0 ; i <S2SV_null> <S2SV_null>,0
56,<S2SV_ModStart> 0 ; } err = h_transaction <S2SV_ModEnd> ( j ) <S2SV_ModStart> ) { rc <S2SV_ModEnd> ; err =,0
57,<S2SV_ModStart> io_flags ) ; <S2SV_ModEnd> } } io ->,0
58,<S2SV_ModStart> valuelen ) ; args -> rmtvaluelen = args -> valuelen ;,1
59,<S2SV_ModStart> ; if (! mask ) return - EINVAL ; if (,0
60,"<S2SV_ModStart> 2 ) { ND_TCHECK2 ( * tptr, 2 ) ; <S2SV_ModStart> len - 2 ; if ( len < stlv_len ) goto trunc ; ND_TCHECK2 ( * ( tptr ), stlv_len ) <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ; stlv_len = stlv_len - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ;",0
61,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( msg,",0
62,"<S2SV_ModStart> flags ) ; memset ( & ddi, 0, sizeof ( ddi ) ) ;",1
63,<S2SV_ModStart> == 12 && ( <S2SV_ModStart> flags & TH_SYN ),1
64,"<S2SV_ModStart> { int procfd ; int procfd ; <S2SV_ModStart> } } } procfd = open ( ""/proc"", <S2SV_ModEnd> ) ; if <S2SV_ModStart> 0 ) { shutdown ( ipc_socket, SHUT_RDWR ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; shutdown ( procfd, SHUT_RDWR ) ; shutdown ( procfd ) ; } <S2SV_ModStart> { ERROR ( ""Error <S2SV_blank> using <S2SV_blank> to <S2SV_blank> process <S2SV_blank> (1 <S2SV_blank> to <S2SV_blank> process <S2SV_blank> process <S2SV_blank> process <S2SV_blank> %s"", strerror ( errno ) ; shutdown ( ipc_socket ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; } close ( procfd ) ; } <S2SV_ModEnd> { ERROR (",0
65,<S2SV_ModStart> ; len = 0 <S2SV_ModEnd> ; break ;,0
66,"<S2SV_ModStart> ( header -> biBitCount == 0 ) { fprintf ( stderr, ""Error, <S2SV_blank> invalid <S2SV_blank> biBitCount <S2SV_blank> %d\\n"", 0 ) ; return OPJ_FALSE ; } if ( header ->",1
67,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> S2SV_null>,0
68,<S2SV_ModStart> 0 ) { if ( image -> colors < tga_info. colormap_index ) image -> colors = tga_info. colormap_index ;,1
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,"<S2SV_ModStart> ENOBUFS ; } memset ( & line, 0, sizeof ( line ) ) ;",1
71,"<S2SV_ModStart> arg ) { int ret ; ret = scsi_verify_blk_ioctl ( bd, cmd ) ; if ( ret < 0 ) return ret ;",1
72,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
73,<S2SV_ModStart> * ureq ; unsigned <S2SV_ModStart> return - EFAULT ; if ( req_len > QETH_BUFSIZE - EINVAL ) return - EFAULT,0
74,"<S2SV_ModStart> int m ; if ( n < 0 ) { jas_deprecated ( ""negative <S2SV_blank> count <S2SV_blank> for <S2SV_blank> jas_stream_gobble"" ) ; }",0
75,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ) ) ; },0
76,<S2SV_ModStart> av_log ( mxf -> fc,1
77,<S2SV_ModStart> path && path == 0,0
78,<S2SV_ModStart> ) ) { return 0 ; } <S2SV_ModStart> psf ) ; } <S2SV_ModEnd> return 0 ;,0
79,"<S2SV_ModStart> -> header_len ; ND_TCHECK ( p [ 0 ] ) ; <S2SV_ModStart> case LS_COOKIE_ID : ND_TCHECK2 ( p [ 0 ], 2 ) ; <S2SV_ModStart> case LS_COOKIE_ID : ND_TCHECK2 ( p [ 0 ], 2 ) ;",0
80,<S2SV_ModStart> NF_STOLEN ; return err == 0? NF_ACCEPT : NF_DROP <S2SV_ModEnd> ; } <S2SV_null>,1
81,<S2SV_ModStart> * up ; int len ; <S2SV_ModStart> ) ) ) { kfree ( up ) ; <S2SV_ModStart> return ret ; } kfree ( up ) ;,0
82,<S2SV_ModStart> ; } } io -> io_cleanup = NULL ; io_cleanup ( io ) ;,0
83,,0
84,<S2SV_ModStart> ; strval = TEMP_FAILURE_RETRY (,0
85,"<S2SV_ModStart> ( buf = jas_alloc3 ( bufsize, numcols <S2SV_ModEnd>, sizeof (",1
86,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
87,<S2SV_ModStart> size_t res ; netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> tx_size ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> size ) ; netbk_fatal_tx_err ( vif,0
88,"<S2SV_ModStart> * object, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void * <S2SV_ModStart> < 0 ) <S2SV_ModEnd> bitmap_pos = ext_index_add_object <S2SV_ModStart> name ) ; <S2SV_ModEnd> bitmap_set ( base",1
89,"<S2SV_ModStart> xfr_cmd, fname <S2SV_ModEnd> ) ; free",1
90,<S2SV_ModStart> mixer ) { snd_usb_mixer_disconnect ( mixer ) ;,1
91,<S2SV_ModStart> -> poof ( * rollover ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> NULL ) { err = - EINVAL ; goto out ; } <S2SV_ModStart> ) ; } mutex_unlock ( & fanout_mutex ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
92,<S2SV_ModStart> ipv6_pinfo ) ) ; newnp -> ipv6_mc_list = NULL ; newnp -> ipv6_ac_list = NULL ; newnp -> ipv6_fl_list = NULL,1
93,<S2SV_ModStart> ; } } },0
94,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
95,<S2SV_ModStart> ; if ( sa_dbh <S2SV_ModEnd> else if (,0
96,"<S2SV_ModStart> ( interface, ENC28J60_EIR <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ERXST <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_EIRQ <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC28J60_ERXST <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_EIRQ <S2SV_ModEnd> ) ) ;",0
97,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,0
98,"<S2SV_ModStart> ) ; } if (! strcmp ( page_name, page_name_name ) ) { <S2SV_ModEnd> { if ( <S2SV_ModStart> ) return 1 ; } <S2SV_ModEnd> } if (",0
99,<S2SV_ModStart> ; if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) ) <S2SV_ModEnd> { if (,0
100,<S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ;,1
101,"<S2SV_ModStart> if (! caller_may_see_dir ( fc -> pid, controller, cgroup ) ) { ret = - ENOENT ; goto out ; } if (!",1
102,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> void vp9_block_horizontal_8 ( void <S2SV_ModStart> 8 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> 8 ) ; memset <S2SV_ModEnd> ( yv_stride ) ;,0
103,<S2SV_ModStart> = NULL ; if ( len >= INT_MAX ) return - ENOMEM ;,0
104,"<S2SV_ModStart> : if (! cap_issubset ( bpr -> cap_permitted, bprm -> cap_permitted,",0
105,"<S2SV_ModStart> int error ; struct mb2_cache_entry <S2SV_ModEnd> * ext4_mb_cache = <S2SV_ModStart> ) { struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache = <S2SV_ModStart> ( ext4_mb_cache, <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
106,"<S2SV_ModStart>, rlen, NULL <S2SV_ModEnd> ) ; }",0
107,"<S2SV_ModStart> -> luaL_checkstack ( L,",0
108,<S2SV_ModStart> ; int err ; if ( protocol < 0 || protocol >= IPPROTO_MAX ) return - EINVAL,1
109,<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> opt.,0
110,"<S2SV_ModStart> ; dl = kzalloc <S2SV_ModEnd> ( size,",1
111,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static u_int <S2SV_ModEnd> rtr_pdu_print ( netdissect_options <S2SV_ModStart> * tptr, const u_char * tptr, const u_char * tptr, const u_int len ) <S2SV_ModStart> ) { ND_TCHECK ( * tptr ) ; if (! ND_PRINT ( ndo, ""%s"", tptr ) ) return - 1 ; ND_PRINT ( ndo, ""%s"", tptr + len ) ; <S2SV_ModStart> ) ) ; ND_PRINT ( ( ndo, ""%s"", tptr + len ) ) ; return <S2SV_ModEnd> ; } <S2SV_null>",0
113,"<S2SV_ModStart> ; int n <S2SV_ModEnd> ; skb -> <S2SV_ModStart> rose_facilities_struct ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> data + ROSE_CALL_REQ_FACILITIES_OFF, skb -> len - ROSE_CALL_REQ_FACILITIES_OFF, <S2SV_ModEnd> & facilities )",1
114,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr,1
115,<S2SV_ModStart> ) ) ; if ( len < 0 ) return - 1 ;,0
116,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; } <S2SV_null>",0
117,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; int ret <S2SV_ModStart> ) ; } o2nm_lock_subsystem ( ) ; if (! cluster ) return - EINVAL ;,0
118,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; break",1
119,"<S2SV_ModStart> == '/' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNOFOLLOW",0
120,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> SSL2SV_null> TPM2SV_null> <S2SV_ModEnd> int TPM2SV_null> TPM2SV_null> TPM2B_RC_CTX509_RC_BITS ( <S2SV_ModStart>, hashAlg, hashAlgorithm, TPM_RC_CTX_BITS ) ; if (! md ) { LOG_ERR ( TPM_ERR, ""Algorithm: <S2SV_blank> %s"", hashAlg_invalid <S2SV_blank> bytes ) ; return TPM_RC_HASH ; } HMAC_CTX_Init ( & ctx ) ; HMAC_CTX_init ( & md, md ) ; TPM_RC_CTX_ERR_INVALID_BITS ( & ctx, hashAlg_bits, hashAlg, md, NULL ) ; TPM_RC_CTX_Init ( & ctx ) ; if (! md ) { TPM_RC_ERR ( TPM_RC_CTX_Init ( & ctx ) ) { TPM_",0
121,"<S2SV_ModStart> inmem )? jas_stream_memopen2 <S2SV_ModEnd> ( 0,",0
122,<S2SV_ModStart> s ) { if ( s == 0 ) return ( ( void * ) NULL ) ;,1
123,<S2SV_ModStart> ; if ( WARN_ON_ONCE (! ib_safe_file_access ( fp ) ) ) return - EACCES ; if (,1
124,"<S2SV_ModStart> ""MemoryAllocationFailed"" ) ; ( void ) ResetMagickMemory ( BImgBuff, 0, ldblk * sizeof ( double ) ) ;",1
125,<S2SV_ModStart> ( peer ) peer = maybe_get_net <S2SV_ModEnd> ( peer ),1
126,<S2SV_ModStart> } while ( ( i < ( int ) && (,0
127,<S2SV_ModStart> ) + 1 <S2SV_ModEnd> ; if (,0
128,<S2SV_ModStart> += 2 ; if ( len < 2 ) return - EINVAL ;,0
129,<S2SV_ModStart> default_auto_asconf ) { spin_lock ( & sock_net ( sk ) -> sctp. addr_wq_lock ) ; <S2SV_ModStart> do_auto_asconf = 1 ; spin_unlock ( & sock_net ( sk ) -> sctp. addr_wq_lock ) <S2SV_ModStart> ; } else { <S2SV_ModStart> = 0 ; },1
130,<S2SV_ModStart> g ) { if (! <S2SV_ModStart> ) return AVERROR_INVALIDDATA ; },0
131,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> pu -> head <S2SV_ModStart> + JQS2SV_wHead ) ; head = readw ( mpu -> MIDQ + JQS_wHead ) ; head = readw ( mpu -> MIDQ + JQS_wHead ) ; if ( head > size ) { goto out ; } head = readw ( mpu -> MIDQ + JQ + JQS_wHead ) ; tail = readw ( mpu -> MIDQ + JQ + JQS_wHead ) ; if ( head > size ) goto out ; tail = size ; if ( head > size || head > size ) goto out ; tail = readw ( mpu -> mpu -> MIDQ + JQS_wHead ) ; if ( head > size ) head = readw ( mpu -> MIDQ + JQS_wHead ) ; if ( head > size ) goto out ; if ( head > size ) goto out ;,0
132,<S2SV_ModStart> rule ) ; if (! entry -> lsm [ lsm_rule ]. rule ) return - EINVAL ;,1
133,<S2SV_ModStart> file ) ; <S2SV_ModEnd> file_free ( file,1
134,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
135,"<S2SV_ModStart> ""\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> {\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> {\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> {\\n"" ""\\n"" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }\\n"" <S2SV_ModEnd> ) ; return",0
136,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> uint32_t * skb_sctp_rs_packet <S2SV_ModEnd>, struct xdr",0
137,"<S2SV_ModStart> ipv6_select_ident ( fh, rt",0
138,<S2SV_ModStart> ; while ( ( i < to_read ) && <S2SV_ModStart>!= 0 ) <S2SV_ModEnd> ) { i,1
139,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
140,<S2SV_ModStart> [ plane ] && in -> linesize [ plane ],1
141,"<S2SV_ModStart> ( szFileName, pszFileName, <S2SV_ModStart> ) - 5 <S2SV_ModEnd> ) ; }",1
142,"<S2SV_ModStart> { if ( osStrchr <S2SV_ModEnd> ( token,",0
143,<S2SV_ModStart> >> 2 ; if ( q + o >= e ) goto out ;,0
144,<S2SV_ModStart> ; int err ; struct ip_options_rcu * inet_opt <S2SV_ModStart> && inet -> opt.,0
145,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
146,<S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( void ) ;,0
147,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( addr,0
148,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
149,"<S2SV_ModStart>, ptr, NULL <S2SV_ModEnd> ) ; if",0
150,<S2SV_ModStart> |= EXT4_EXT_MARK_UNINIT2 ; if ( flags & EXT4_GET_BLOCKS_CONVERT ) split_flag |= EXT4_EXT_DATA_VALID2 ;,1
151,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; } <S2SV_null>",0
152,<S2SV_ModStart> == 0 ) { <S2SV_ModStart> return - 1 ; } },0
153,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> final ) ; rcu_read_unlock ( ) ;",0
154,"<S2SV_ModStart> = 0.0 ; if ( buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""loadSize <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> buffer <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> allocate <S2SV_blank> read <S2SV_blank> buffer"" ) ; return 0 ; } <S2SV_ModStart> 3 ) ; }",0
155,"<S2SV_ModStart> 0 ; } # if CONFIG_VP9_HIGHBITDEPTH if ( aux = 0 ; # ifdef CONFIG_VP9_HIGHBITDEPTH if ( argv ) { if (! arg ) return - 1 ; } else { switch ( argv [ 1 ] ) { case VPX_IMG_FMT_SET_ERR_FAILURE : break ; case VPX_IMIT_V12_V12_V12_V12_V12_save ( arg, & argv12_arg ) ; } # endif",0
156,<S2SV_ModStart> options. disable_forwarding ||! use_privsep,1
157,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
158,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
159,<S2SV_ModStart> errout ; } <S2SV_ModEnd> gr -> gr_ctx,0
160,<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> out ; } ext_size = sizeof ( inode ) -> i_data ) ;,0
161,"<S2SV_ModStart> ( sx, 1 <S2SV_ModEnd> ) ; # if",0
162,<S2SV_ModStart> ; int ret ; if ( current_chrooted ( ) ) return - EPERM,1
163,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
164,<S2SV_ModStart> c -> width <S2SV_ModEnd> ; if (,0
165,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
166,<S2SV_ModStart> ; bool is_drop_n_account = false ; bool is_vnet <S2SV_ModStart> -> has_vnet_vnet = 0 ; <S2SV_ModStart> ; if (! do_vnet ) { <S2SV_ModStart> = 0 ; } <S2SV_ModStart> < 0 ) { <S2SV_ModStart> = 0 ; },0
167,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> sctp_auth_asoc_init_active_key ( asoc,1
168,<S2SV_ModStart> return false ; if ( ndp_msg_info ( msg_type ) -> addrto_validate ( addrto_validate ) return ndp_msg_info ( & addrto_validate ) ; else,0
169,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> S_null> <S2SV_null> static <S2SV_ModStart> int fdpath ) { ERROR ( ""Error <S2SV_blank> to <S2SV_blank> name <S2SV_blank> name: <S2SV_blank> %s\\n"", __func__, GFP_KERNEL ) ; return - 1 ; } if (! strchr ( fd ) ) { ret = - 1 ; goto out ; } ret = - 1 ; } if ( <S2SV_ModStart> ( fd < 0 ) { fd = - 1 ; if ( fd < 0 ) goto error ; } ret = - 1 ; if ( fd < 0 ) { fd = - EIO ; goto out ; } if ( <S2SV_ModStart> ( fd < 0 ) { fd = - 1 ; goto out ; } ret = - 1 ; if ( fd < 0 ) { fd = - 1 ; goto out ; } ret = - 1 ; } if ( fd >= 0 ) { ERROR ( ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> %s\n"", __func__, SHUT_OK ) ; exit ( ""Failed <S2SV_blank> to <S2SV_blank> for <S2SV_blank> %s\n"", __func__ ) ; goto out ; } if ( errno == 0 ) {",0
170,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
171,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
172,<S2SV_ModStart> ) { const VP9EncoderConfig <S2SV_ModEnd> * const oxcf <S2SV_ModStart> = get_layer_context ( cpi <S2SV_ModEnd> ) ; } <S2SV_ModStart> ; if ( cpi -> oxcf. pass == KEY_FRAME ) return - EINVAL ; <S2SV_ModEnd> } } else,0
173,"<S2SV_ModStart> } num ++ ; if ( num > MaxAllocSize / ITEMSIZE ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> levels <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", num, ( int ) ( MaxAllocSize / ITEMSIZE ) ) ) )",1
174,"<S2SV_ModStart> ) { struct mb2_cache_entry * ext4_mb_cache <S2SV_ModEnd> * ext4_mb_cache = <S2SV_ModStart> ; struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache = <S2SV_ModStart> ( ext4_mb_cache,",0
175,"<S2SV_ModStart> { gint64 offset <S2SV_ModEnd> ; char line <S2SV_ModStart> = offset ; return parse_cosine_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart> -> phdr, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart> wth -> frame_buffer, line",1
176,<S2SV_ModStart> = line_end ; <S2SV_ModEnd> error = add_push_report_pkt,1
177,<S2SV_ModStart> if ( left == 0 && extend ) return 0 ; if ( left,1
178,<S2SV_ModStart> < 2 ) { <S2SV_ModEnd> return 0 ;,0
179,"<S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
180,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
181,"<S2SV_ModStart> ( buf = jas_alloc3 <S2SV_ModEnd> ( bufsize,",0
182,<S2SV_ModStart> AcquireQuantumMemory ( pixels_length + image -> rows,0
183,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> * sizeof ( <S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> ; pixels =",0
184,<S2SV_ModStart> DQUOT_LIMITS_ENABLED ) ; if ( sbi -> s_mb_cache ) { ext2_xattr_destroy_cache ( sbi -> s_mb_cache ) ; sbi -> s_mb_cache = NULL ; } <S2SV_ModEnd> if (!,1
185,<S2SV_ModStart> = 0 ; dev -> bNumEndpoints < 1 ) ;,0
186,<S2SV_ModStart> 0 ] ; <S2SV_ModEnd> char * arg [,0
187,<S2SV_ModStart> node ) { return NULL ; },0
188,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { state",0
189,<S2SV_ModStart> ( pb ) ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA,1
190,<S2SV_ModStart> if ( q < p || q,1
191,<S2SV_ModStart> protostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> cryptostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> timingstats ) ; <S2SV_ModEnd> step_callback = &,1
192,<S2SV_ModStart> dir ) ; <S2SV_ModEnd> } <S2SV_null> static,0
193,<S2SV_ModStart> prev ) ; n -> mounts += n -> pending_mounts ; n -> pending_mounts = 0 ;,1
194,"<S2SV_ModStart> ; savesegment ( fs, fs ) ; savesegment ( gs",0
195,<S2SV_ModStart> dd ) ; <S2SV_ModEnd> } } <S2SV_null>,1
196,<S2SV_ModStart> 1 ) ; if ( ps_codec -> i4_buf_idx > ps_codec -> i4_max_size ) { return ERROR ; },0
197,<S2SV_ModStart> 1u << DB_VECTOR ) | ( 1u << AC_VECTOR,1
198,"<S2SV_ModStart> sfsname ) { stringlen ; stringlen = NFSX_V3FHMAX ; <S2SV_ModStart>, sfsname, stringlen <S2SV_ModEnd> ) ; string",0
199,"<S2SV_ModStart> unsigned int flags, struct rt6_info * rt <S2SV_ModStart> ( & fhdr, rt",1
200,<S2SV_ModStart> ( res ) goto err_port <S2SV_ModEnd> ; res =,0
201,<S2SV_ModStart> ; # endif if ( len > 0 &&,0
202,<S2SV_ModStart> const buffers [ INT_MAX <S2SV_ModEnd> ] = { <S2SV_ModStart> -> y_stride ; const <S2SV_ModStart> } } } # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { <S2SV_ModStart> } return ; } <S2SV_ModEnd> } <S2SV_null>,0
203,<S2SV_ModStart> p ++ ) ; if ( ( void * ) p > head -> iov_base +,0
204,<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>,0
205,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
206,"<S2SV_ModStart> ; remaining = tvb_reported_length_remaining <S2SV_ModEnd> ( tvb,",1
207,<S2SV_ModStart> -> d_inode = 0 <S2SV_ModEnd> ; if (,0
208,<S2SV_ModStart> return rc ; <S2SV_ModEnd> copied = skb,1
209,,0
210,<S2SV_ModStart> ; if ( pmc_overflow ( val ) <S2SV_ModEnd> ) write_pmc (,1
211,"<S2SV_ModStart> ( * b + len, * avail - len <S2SV_ModEnd>, nl )",1
212,"<S2SV_ModStart> char * fname, const char * fname <S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_type, & PyId__ ) == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""%s"", type_ignores ) ; return NULL ; } else { int res ; if ( id2 == NULL ) { PyErr_SetString ( PyExc_TypeError, ""invalid <S2SV_blank> name"" ) ; return NULL ; } if ( id2 == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> name"" ) ; return NULL ; } if ( id2 == NULL ) { PyErr_TypeError ( PyExc_TypeError, ""required <S2SV_blank> string <S2SV_blank> from <S2SV_blank> "" ) ; return NULL ; } if (! id2 ) { int res ; for ( i = 0 ; i = 0 ; i = obj2ast_int ( i, & PyId_None ) ; i = obj2ast_string ( const char * ) ; if (! id ) goto failed ; } if (! id_type_comment = NULL ; if (",0
213,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
214,,0
215,"<S2SV_ModStart> == 0 ) mark_key_instantiated ( key, 0 <S2SV_ModEnd> ) ; up_write",1
216,<S2SV_ModStart> <= * len && plen > 0,1
217,<S2SV_ModStart> ; if (! retval ) <S2SV_ModEnd> retval = context,0
218,<S2SV_ModStart> ( cmd ) ; if (! err ) return - EINVAL ;,0
219,<S2SV_ModStart> AcquireQuantumMemory ( pixels_length + image -> rows,0
220,<S2SV_ModStart> ndev ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
221,<S2SV_ModStart> |= MSG_TRUNC ; <S2SV_ModEnd> lock_sock ( sk,1
222,<S2SV_ModStart> } if ( <S2SV_ModEnd> udp_specified && settings,1
223,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
224,<S2SV_ModStart> ) ; },0
225,<S2SV_ModStart> found = 0 <S2SV_ModEnd> ; const char <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( found,1
226,"<S2SV_ModStart> int validate_event ( struct pmu * pmu, <S2SV_ModStart> arm_pmu * pmu <S2SV_ModEnd> ; struct pmu",0
227,"<S2SV_ModStart> bool new_idmap_permitted ( const struct file * file, <S2SV_ModStart>, cap_setid ) && ns -> parent_capable",0
228,<S2SV_ModStart> j ++ ) { if ( a -> type == szMAPI_BINARY ),0
229,"<S2SV_ModStart> ; u8 * buf ; int ret ; buf = kmalloc ( sizeof ( * ), GFP_KERNEL ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; kfree (",0
230,"<S2SV_ModStart> ; if ( val_len < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } val_len -= 2 ; if (! xptr ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return AVERROR_INVALIDDATA ; } val = EXTRACT_16BITS ( ptr ) ; val_ptr ++ ; val_left -= 2 ; if ( val < 4 ) { ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ) ; return AVERROR_INVALIDDATA ; } val_16BITS ( ptr ) ; return 0 ; } if ( ptr < 4 ) { ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return 0 ; } val_len = EXTRACT_16BITS ( ptr ) ; return 0 ; val <S2SV_ModEnd> ; } <S2SV_null>",0
231,"<S2SV_ModStart> princ ) ; if (! data_eq_string ( * c1, * c1 ) && data_eq_string ( * realm ) && data_eq_string ( * c1, ""history"" ) && data_eq_string ( * ) && data_eq_eq_string ( * c1, ""failed"" ) ; <S2SV_ModEnd> princ_eq_string ( *",0
232,<S2SV_ModStart> ; if ( shader_rec_offset < args -> bin_cl_size ||,1
233,<S2SV_ModStart> endif # if HAVE_LZMA_H <S2SV_ModEnd> && HAVE_LIBLZMA if,1
234,<S2SV_ModStart> vma -> vm_file ) ; down_read ( & EXT4_I ( inode ) -> i_mmap_sem <S2SV_ModStart> ; out : up_read ( & EXT4_I ( inode ) -> i_mmap_sem ) ;,1
235,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
236,<S2SV_ModStart> arg ) { char ch = * arg ; switch ( ch <S2SV_ModEnd> ) { case <S2SV_ModStart> ';' : case '=' : case <S2SV_ModStart> b ++ = ch <S2SV_ModEnd> ; break ;,1
237,"<S2SV_ModStart> && ndo, ep2 <S2SV_ModEnd> ) ; }",0
238,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
239,<S2SV_ModStart> ( sk ) ; if (! <S2SV_ModStart> ( skb ) ) return - EINVAL,0
240,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
241,<S2SV_ModStart>. val =!! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ; <S2SV_ModStart>. val =!! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ;,1
242,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return err ;,0
243,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
244,<S2SV_ModStart> const buffers [ 3 <S2SV_ModEnd> ] = { <S2SV_ModStart> src -> buffers [ INT_MAX <S2SV_ModEnd> ] ; },0
245,"<S2SV_ModStart> * md ; <S2SV_ModEnd> md -> md <S2SV_ModStart> goto cleanup ; ret = 0 ; if ( ret ) return ERR_INVALID_X509_name <S2SV_ModEnd> ( & <S2SV_ModStart> md -> subject_name <S2SV_ModEnd>, md )",0
246,<S2SV_ModStart> (! npages || base_gfn!= old. base_gfn,1
247,<S2SV_ModStart> ; err = - EINVAL ; if (,0
248,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
249,<S2SV_ModStart> <S2SV_null> <S2SV_null> static ND_TCHECK ( struct netdissect_left <S2SV_ModEnd> ) { ND_TCHECK <S2SV_ModStart> ) ; } if ( len!= sizeof ( struct rip6 ) ) goto trunc ; ND_TCHECK ( * sizeof ( struct rip6 ) ) ; <S2SV_ModStart> case RIP6 : if ( length_left!= sizeof ( struct rip6 ) ) goto trunc ; length_left = sizeof ( struct rip6 ) - sizeof ( struct rip6 ) ) ; ND_TCHECK ( rp -> rip6_nets ) ; <S2SV_ModStart> case RIP6 : if ( length_left!= sizeof ( struct rip6 ) ) goto trunc ; ND_TCHECK ( j ) ; <S2SV_ModStart> ) ) { ND_TCHECK ( rp -> rip6 ) ; j = length_left ; break ; } <S2SV_ModStart> case RIP6 : if ( length_left!= sizeof ( struct rip6 ) goto trunc ; length_left <S2SV_ModEnd> ) { ND_TCHECK ( <S2SV_ModStart> case RIP6 : if ( length_left!= sizeof ( struct rip6 ) ) goto trunc ; length_left <S2SV_ModEnd> ) ; } <S2SV_ModStart> ni ) { ND_TCHECK ( sizeof ( * tp -> rip6 ) ;,0
250,<S2SV_ModStart> < 0 ) goto error ; <S2SV_ModEnd> goto set ;,1
251,<S2SV_ModStart> 1 ) ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( cpi ->,0
252,"<S2SV_ModStart> argc ++ ; retval = bprm_change_interp ( iname, bprm ) ; if ( retval < 0 ) goto _error <S2SV_ModEnd> ; interp_file =",1
253,<S2SV_ModStart> ; int iSrc <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; } } <S2SV_ModEnd> res -> ContribRow <S2SV_ModStart> u ]. Left = iLeft ; res -> ContribRow [ u ]. Right = iRight ; for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ].,1
254,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
255,"<S2SV_ModStart> Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; return ; } if (! COM_CompareExtension ( filename, "".cfg"" ) ) { Com_Printf ( ""Com_WriteConfig_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".cfg\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n""",1
256,<S2SV_ModStart> ; int len <S2SV_ModEnd> ; if (,0
257,<S2SV_ModStart>,0
258,<S2SV_ModStart> -> it_overrun += 1LL <S2SV_ModEnd> << i ;,1
259,"<S2SV_ModStart> const node * n0, bool <S2SV_ModStart> is_async ) { const n = CHILD ( n0 ) ; assert ( n = CHILD ( n0 ) ) ; <S2SV_ModStart> == NULL ) { if ( n = CHILD ( n0 ) == CHILD ( n, 1 ) ) { assert ( n0 == CHILD ( n0 ) ) ; for ( i = 0 ; i < n ++ ) ; i ++ ; i ++ ; i ++ i ++ ; for ( i = 0 ; i < n ++ ) { if ( CHILD ( n0 ) == CHILD ( n0 ) ) { const int n = CHILD ( n * ) - 1 ; for ( i = 0 ; i < n ++ ) { if ( n0 ; i ++ ) { if ( n = CHILD ( n, 1 ) == CHILD ( n0 ) ) { for ( i = 0 ; i = 0 ; i < n ++ ; i ++ ) { const int n = CHILD ( n * ) ; for ( i = 0 ; i < n ++ ) ; i ++ ; i ++ i ++ ; i ++ ; i ++ ; for ( i = 0 ; i < n0 ; i ++ i ++ i ++",0
260,<S2SV_ModStart> = 0 ; if (! st -> data ) return - EINVAL ;,0
261,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_block ( const <S2SV_ModStart> int mi_row, int mi_col, bsize <S2SV_ModEnd> ) { const <S2SV_ModStart> ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) return - 1 ; memset <S2SV_ModEnd> ( & cpi <S2SV_ModStart> ) ) ; return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
262,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; saddr,1
263,"<S2SV_ModStart>, r -> qiov. size <S2SV_ModEnd> ) ; if",0
264,<S2SV_ModStart> if ( cs >= <S2SV_ModEnd> CQSPI_MAX_CHIPSELECT ) {,1
265,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> return n =,0
266,<S2SV_ModStart> ) break ; if ( l > ll ) l = ll ;,1
267,<S2SV_ModStart> out ; } } if ( free < 0 ) { err = - ENOMEM ; goto out ;,1
268,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ND_TCHECK ( *,0
269,<S2SV_ModStart> ( rq ) { <S2SV_ModEnd> return NULL ;,0
270,<S2SV_ModStart> ret ; } if ( uint8_t * buffer >= 0 ) { kfree ( buffer ) ; return - ENOMEM ; } <S2SV_ModStart> ret ) ; return - ENOMEM <S2SV_ModEnd> ; } <S2SV_null>,0
271,"<S2SV_ModStart>, j ; sqlite3_int64 <S2SV_ModEnd> nByte *",0
272,"<S2SV_ModStart> ; } } s -> append_char ( s, 0 ) ; strncpy <S2SV_ModEnd> ( outbuffer,",1
273,<S2SV_ModStart> Lut ) ; Lut = NULL ; <S2SV_ModStart> ; Error : if ( Lut!= NULL ),1
274,<S2SV_ModStart> = 0 ; ( i + 3 ) <S2SV_ModEnd> < sec -> <S2SV_ModStart> = 0 ; ( i + 7 ) <S2SV_ModEnd> < sec ->,1
275,<S2SV_ModStart> ++ ) { <S2SV_ModEnd> bw *,0
276,,0
277,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
278,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> bool <S2SV_ModEnd> cb_null> <S2SV_null>,0
279,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
280,"<S2SV_ModStart> netbk, atomic_extra <S2SV_ModEnd> ) ; }",0
281,<S2SV_ModStart> ; # endif if ( len > 0 &&,0
282,<S2SV_ModStart> xfrm_policy_walk * ) <S2SV_ModEnd> cb -> args <S2SV_ModStart> cb -> args <S2SV_ModEnd> ; struct net,1
283,<S2SV_ModStart> conn ) ; if ( <S2SV_ModStart> ( conn )!= 0 ) return,1
284,"<S2SV_ModStart> netbk, pending_idx, XEN_NETIF_RSP_OKAY",0
285,,1
286,"<S2SV_ModStart> ) NULL ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ;",0
287,<S2SV_ModStart> len < 0,0
288,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
289,<S2SV_ModStart> ipc == NULL && client -> session == NULL,1
290,,0
291,"<S2SV_ModStart>, nameptr, lfi, fname, UDF_NAME_LEN <S2SV_ModEnd> ) ; if",1
292,"<S2SV_ModStart> ip_vs_timeout_user t ; memset ( & t, 0, sizeof ( t ) ) ;",1
293,"<S2SV_ModStart> ) ) ; struct ip_options_rcu * rcu_read_lock ( ) ; <S2SV_ModStart> ( fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
294,<S2SV_ModStart> ; ssize_t result ; if ( WARN_ON_ONCE (! ib_safe_file_access ( filp ) ) ) return - EACCES,1
295,"<S2SV_ModStart> if (! caller_may_see_dir ( fc -> pid, controller, cgroup ) ) { ret = - ENOENT ; goto out ; } if (! <S2SV_ModStart> if (! caller_may_see_dir ( fc -> pid, controller, cgroup ) ) { ret = - ENOENT ; goto out ; } if (! fc -> next ) return - ENOENT ;",0
296,<S2SV_ModStart> ) ) { put_disk ( disk ) ;,1
297,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
298,"<S2SV_ModStart> { if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( ( image <S2SV_ModStart> { if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( number_pixels,",1
299,<S2SV_ModStart> 0 ) ; if ( avio_feof ( s -> pb ) ) { ret = AVERROR_INVALIDDATA ; goto end ; },1
300,<S2SV_ModStart> ; rinfo = kzalloc <S2SV_ModEnd> ( SZ_INFO *,0
301,"<S2SV_ModStart> ; # endif install_keyword ( ""umask"", & umask_handler ) ;",1
302,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, int )",0
303,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> kfree ( tmpbuf,1
304,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; }",1
305,<S2SV_ModStart> ( box = jp2_box_create0 ( <S2SV_ModEnd> ) ) {,0
306,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> self ) {",0
307,<S2SV_ModStart> ; int err ; if ( unlikely ( count > MAX_SKB_FRAGS ) ) { err = - EIO ; goto err ; } <S2SV_ModStart> goto err ; },0
308,<S2SV_ModStart> ( struct ipv6hdr <S2SV_ModEnd> ) ; } <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
309,"<S2SV_ModStart> wb_data ) { struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> ) ; } vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 6 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
310,"<S2SV_ModStart> ) ; memset <S2SV_ModEnd> ( c,",0
311,<S2SV_ModStart> 0 ; } aux. tp_padding = 0 ;,1
312,<S2SV_ModStart> } if ( <S2SV_ModEnd> djrcv_dev -> paired_dj_devices,1
313,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
314,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
315,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> bool <S2SV_ModEnd> sctp_verify_asconf ( const <S2SV_ModStart> asoc, struct sctp_chunk * ) { sctp_addip_chunk_t * addip = ( sctp_chunk_t * ) asconf -> sctp_addip ; if (! sctp_addip_chunk_t * ) { sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) sctp_walk_params ( param. p -> sctp_params. params ) ; if (! sctp_addip_chunk_hdr ( param. p -> type ) return false ; } else if ( param. p -> type == SCTP_PARAM_PARAM_IPV6_ADDRESS ) return err ;",0
316,"<S2SV_ModStart> 101, ( ""jas_realloc(%x, <S2SV_blank> %zu)\\n"" <S2SV_ModEnd>, ptr,",1
317,<S2SV_ModStart> exit ; } m -> msg_namelen = 0 ;,0
318,<S2SV_ModStart> CPU_FTR_TM_COMP ) && hv_enabled <S2SV_ModEnd> ; break ;,1
319,<S2SV_ModStart> ms_dev ) ; if ( i < 0 ) return - ENOMEM ;,0
320,"<S2SV_ModStart> key_name ), UTF16_HOST_ENDIAN, <S2SV_ModStart> data. key, HV_KVP_EXCHANGE_MAX_KEY_SIZE / 2 <S2SV_ModStart> value ), UTF16_HOST_ENDIAN, <S2SV_ModStart> data. value, HV_KVP_EXCHANGE_MAX_VALUE_SIZE / 2",1
321,<S2SV_ModStart> -> log_file ; d -> log_file = eventfp ;,1
322,<S2SV_ModStart> return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
323,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void __user * poc, void * p_ptr = NULL ; void * parg = NULL ; void * * parg = NULL ; void * parg = NULL ; void * parg = NULL ; void * ( void * ) mbuf = NULL ; if ( _IOC_SIZE ( void ) _IOC_SIZE ( void * ) mbuf = NULL ; if ( _IOC_SIZE ( parg ) memset ( parg, 0, 0, sizeof ( parg ) ) ) ; else { if ( _IOC_SIZE ( void * ) memset ( parg, 0, ( parg, 0, sizeof ( parg ) ) ) ; if ( _IOC_SIZE ( parg. mbuf ) memset ( parg, 0, 0, sizeof ( parg ) ) ; parg = NULL ; } else { if ( _IOC_SIZE ( void * ) memset ( parg, 0, 0, sizeof ( parg ) ) ; parg = NULL ; parg = _IOC_IOC_SIZE ( void *",0
324,<S2SV_ModStart> } if ( server. ds_enabled &&,0
325,"<S2SV_ModStart> data ) { void * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, 0, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ) ; } <S2SV_null> <S2SV_null>",0
326,<S2SV_ModStart> = 0 ; dev -> bNumEndpoints < 1 ) ;,0
327,"<S2SV_ModStart> { default : case GTK_RESPONSE_OK : nautilus_file_attributes ( parameters -> file ) ; nautilus_file_get_metadata ( parameters -> file, NULL, NAUTILUS_METADATA_KEY_DESKTOP_FILE_FILE_TRUSTED, NULL ) ; nautilus_file_attributes ( parameters -> file ) ;",0
328,<S2SV_ModStart> ; if ( urb -> actual_length > 0 &&,1
329,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> struct sesSV_null> <S2SV_null>S2SV_null>,0
330,<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) cfg ; } if ( cfg -> g_key && ( int ) cfg -> cfg. g_w!= ( int ) cfg -> g_w && ( int ) cfg -> g_w!= ( int ) cfg -> g_w * ) cfg -> g_h = 0 ; if (! ( int ) cfg -> g_w && ( int ) cfg -> g_w > ( int ) cfg -> g_w && ( int ) cfg -> g_h ) cfg -> g_pass = 0 ; if ( ctx -> cfg -> g_h. ctx -> g_width && ( int ) cfg -> g_w > ctx -> initial_w && ( int ) cfg -> g_w ) cfg -> g_w && ( int ) cfg -> g_h > ( int ) cfg -> g_pass = 1 ; if (! ( int ) cfg -> g_w && ( int ) ( int ) cfg -> g_h ) cfg -> <S2SV_ModEnd> ; } else,0
331,<S2SV_ModStart> =='<S2SV_blank>') { input ++ ; } <S2SV_ModStart> ) ) ) {,0
332,"<S2SV_ModStart> inode ) ; struct hugepage_subpool * spool = subpool_inode ( inode ) ; <S2SV_ModStart> ; if ( hugepage_subpool_get_pages ( spool <S2SV_ModEnd>, chg )",0
333,<S2SV_ModStart> process_keyring ) return 0 <S2SV_ModEnd> ; keyring =,0
334,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( scanned,1
335,"<S2SV_ModStart> orig ) ; fptr_orig = io_alloc_get_orig <S2SV_ModEnd> ( mrb,",0
336,<S2SV_ModStart>. key_data ; <S2SV_ModEnd> } if (,0
337,<S2SV_ModStart> return NULL ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
338,"<S2SV_ModStart> return res ; res = utee_param_to_param ( utc, <S2SV_ModEnd> param ) ;",0
339,"<S2SV_ModStart> int rc ; struct desc_struct old_desc, new_desc ; const struct x86_emulate_ops * ops = ctxt -> eip ; <S2SV_ModStart> ) return rc <S2SV_ModEnd> ; } <S2SV_null>",0
340,<S2SV_ModStart> -> band = av_calloc <S2SV_ModEnd> ( reslevel -> <S2SV_ModStart> -> prec = av_calloc <S2SV_ModEnd> ( reslevel ->,1
341,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
342,<S2SV_ModStart> * sizeof ( struct reloc_struct_t <S2SV_ModEnd> ) ) ;,1
343,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
344,"<S2SV_ModStart> * p_tx0 = ( OPJ_INT32 ) opj_uint_max <S2SV_ModEnd> ( p_image -> <S2SV_ModStart> p_image -> tdy, <S2SV_ModEnd> p_image -> tdy",0
345,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * f2SV_null> <S2SV_null>,0
346,<S2SV_ModStart> classes = NULL ; zval * retval <S2SV_ModStart> ; } } retval = var_tmp_var ( & var_hash ) ; <S2SV_ModStart> RETURN_FALSE ; } <S2SV_ModEnd> if (!,0
347,<S2SV_ModStart> goto __err ; } <S2SV_ModEnd> if ( tu,0
348,"<S2SV_ModStart> tmp_strsize ) { ISOM_DECREASE_SIZE ( ptr, 1 ) <S2SV_ModStart> ) ; } ISOM_DECREASE_SIZE ( ptr, 1 ) <S2SV_ModStart> ptr -> size <S2SV_ModEnd> ; while (",0
349,<S2SV_ModStart>. get_source ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },0
350,"<S2SV_ModStart> == 0 ) if ( received_protocol ) { fprintf ( stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; }",0
351,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
352,"<S2SV_ModStart> -> off = strtoull <S2SV_ModEnd> ( p, <S2SV_ModStart> -> filesize = strtoull <S2SV_ModEnd> ( slash +",1
353,"<S2SV_ModStart> * cr ; size_t <S2SV_ModEnd> maxw, maxh <S2SV_ModStart> maxw = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> maxh = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ;",0
354,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> ( state ) { state -> fmode <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
355,"<S2SV_ModStart> return SSH_ERR_INVALID_ARGUMENT ; ssh_dispatch_set ( ssh, SSH2_MSG_KEXINIT, NULL ) ;",1
356,"<S2SV_ModStart> { assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.one <S2SV_blank> + <S2SV_blank> 1 <S2SV_blank> == <S2SV_blank> tests.constants.two <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\""tests\\"" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.foo <S2SV_blank> == <S2SV_blank> \\""foo\\"" <S2SV_blank> \\""tests\\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\""tests\\""tests\\""tests\\"" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.empty <S2SV_blank> == <S2SV_blank> \\"" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\""tests\\""tests\\"" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
357,<S2SV_ModStart> read_info ) ; <S2SV_ModEnd> if ( EOFBlob,1
358,<S2SV_ModStart> char ltest [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char strtest [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char ltest [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char strtest [ 512 <S2SV_ModEnd> ] ; if,0
359,<S2SV_ModStart> intf ) { <S2SV_ModEnd> return 0 ; <S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
360,<S2SV_ModStart> val ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
361,,0
362,"<S2SV_ModStart>, e -> elems, e ->",1
363,<S2SV_ModStart> bpp <= 8 && c -> format!= CHUNKY,0
364,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
365,<S2SV_ModStart> q ) { mutex_lock ( & q -> timer_mutex ) ; <S2SV_ModStart> snd_seq_timer_close ( q ) ; mutex_unlock ( & q,0
366,"<S2SV_ModStart> int error ; uint32_t bh_map_size ; uint32_t bhashed = bh_map_size ; int error = 0 ; if ( unlikely ( error ) ) { error = gfs2_trans_map_map ( ip, & bh ) ; if ( error ) goto out ; } <S2SV_ModStart> = bh_map. bh_size >> 1 ; b_blks = b_map_size >> 1 ; gfs2_map_size = gfs2_block ( ip, bh ) ; if ( unlikely ( error ) ) goto out ; gfs2_unlocked_unmap_unlock ( & bh ) ; error = bh_map -> b_map. b_map. b_size = b_map. b_size >> 1 ; if ( b_map. b_size!= b_size ) goto out ; gfs2_unmap = gfs2_break ; }",0
367,<S2SV_ModStart> VIPS_FOREIGN_LOAD_GET_CLASS ( load ) ; load -> error = NULL ; if ( load -> error ) { error = TRUE ; return error ; } <S2SV_ModEnd> if ( load,0
368,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> if (!,0
369,<S2SV_ModStart> ; if (! retval ) <S2SV_ModEnd> retval = context,1
370,<S2SV_ModStart> ( dev ) ; kfree ( state ) ;,0
371,<S2SV_ModStart> miux_tlv_length ) ; if (! miux_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> miux_tlv_length ) ; if (! rw_tlv ) { err = - ENOMEM ; goto error_tlv ; },0
372,<S2SV_ModStart> void ) { <S2SV_ModEnd> struct monitor * <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> return mon ;,1
373,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
374,<S2SV_ModStart> unsigned int channo ; cdef -> ents = 0,1
375,"<S2SV_ModStart> 6 ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1, 0 )",0
376,"<S2SV_ModStart> ; if ( tcp_filter <S2SV_ModEnd> ( sk,",0
377,<S2SV_ModStart> len ; } ND_TCHECK_16BITS ( p + 2 ) ;,0
378,<S2SV_ModStart> 0 ; } if ( unlikely ( IPCB ( skb ) -> opt. optlen ) ) skb_dst_force ( skb ) ; else,1
379,<S2SV_ModStart> private ) { struct skcipher_tfm * tfm = private ; crypto_free_skcipher ( tfm -> skcipher ) ; kfree ( tfm <S2SV_ModEnd> ) ; },1
380,<S2SV_ModStart> bprm ) { <S2SV_ModEnd> int retval ; <S2SV_ModStart> int retval ; bprm_fill_uid ( bprm ) ; <S2SV_ModEnd> retval = security_bprm_set_creds,1
381,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; if (,0
382,<S2SV_ModStart> ) ) { if ( dlen < 2 ) break ; <S2SV_ModStart> dlen -= 2 <S2SV_ModEnd> ; * pt,1
383,<S2SV_ModStart> { rq = <S2SV_ModEnd> hctx -> rq,0
384,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
385,<S2SV_ModStart> - EOPNOTSUPP ; msg -> msg_namelen = 0 ; <S2SV_ModStart> goto out ; <S2SV_ModEnd> if ( msg,0
386,<S2SV_ModStart> skb_is_nonlinear ( skb ) return 0,0
387,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
388,"<S2SV_ModStart> bp, len ) ; break ; case ETHERTYPE_TEB : ether_print ( ndo, bp, len <S2SV_ModStart> ndo_snapend - bp <S2SV_ModEnd>, NULL,",1
389,<S2SV_ModStart> ; } } if ( tile_buffsize > 0xFFFFFFFFU - 3 ) return 0 ;,0
390,<S2SV_ModStart> O_APPEND | O_CREAT | O_NOFOLLOW,1
391,<S2SV_ModStart> * dev ; <S2SV_ModEnd> return 0 ;,0
392,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>,0
393,"<S2SV_ModStart> ( fp, "" <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %127s\\n"" <S2SV_ModEnd>, & n",1
394,<S2SV_ModStart> ctxt ) { <S2SV_ModEnd> return 0 ;,0
395,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
396,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
397,<S2SV_ModStart> return - E_NOTHANDLED ; if ( ninst == 0 ) return - E_INVALID,1
398,<S2SV_ModStart> ( lft -> header. length - 4,0
399,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
400,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> return 0 ; <S2SV_ModEnd> memcpy ( &,0
401,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",1
402,<S2SV_ModStart> ( ) ; if (! tbuf ) { return NULL ; },1
403,"<S2SV_ModStart>, err ; unsigned int status = 0 ; <S2SV_ModStart> ( pid, ( unsigned int ) <S2SV_ModEnd> ; err |=",0
404,"<S2SV_ModStart>, ""%r/proc/sys/sys/sys/sys/tty"", ""%r/proc/tty"" <S2SV_ModEnd>, ""%r/proc/sys/sys/tty"", <S2SV_ModStart>, NULL, ""%r/tty"" <S2SV_ModEnd>, NULL,",0
405,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> ISAKP2SV_null> static <S2SV_ModStart> ndo -> chain [ ISAKMP_NEXT_v2NEXT_v2NEXT_v2NEXT_NEXTENT ] ; if ( md -> chain [ ISAKMP_NEXT_v2Ntx -> chain [ ISAKMP_NEXT ] ) { if ( md -> chain [ ISAKMP_v2NEXT_v2NEXT_NEXTENT ] ) { md -> chain [ ISAKMP_NEXT_v2NEXT_v2NEXT_NEXTENT ] = md -> chain [ ISAKMP_NTS ] -> chain [ ISAKMP_NEXT_N ] ) ; goto out ; } } if ( md -> chain [ ISAKMP_NEXT_NEXT_v2NEXT_MARK, md -> chain [ ISAKMP_NEXTENT ] ) { if ( is_v2NEXT_v2NEXT_v2NEXT_MARK, md -> chain [ ISAKMP_NEXTENT ] ) ) {",0
406,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_sse2SV_null> static,0
407,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
408,<S2SV_ModStart> stringset == ETH_SS_STATS || stringset == ETH_SS_PRIV_FLAGS,1
409,<S2SV_ModStart> return ( ( ( <S2SV_ModStart> ) / 8 ) * GetPSDPacketSize ( image ),1
410,<S2SV_ModStart> 0x08 ) ; <S2SV_ModEnd> return NULL ;,0
411,<S2SV_ModStart> bMasterInterface0 ) ; if (! pcu -> ctrl_intf ) return - EINVAL ;,0
412,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ddev_name ( GFP_KERNEL <S2SV_ModEnd>, GFP_KERNEL ) <S2SV_ModStart> ) ; } const char * drvname = drv_dev_info ( drvname, GFP_KERNEL ) ; const char * drv_info = drvname ( drvname, GFP_KERNEL ) ; const char * drvname = drvname ( drvname + 1, GFP_KERNEL ) ; const char * drvname ( drvname ), GFP_KERNEL ) ; kfree ( devname ) ;",0
413,"<S2SV_ModStart> pirlvl ) { if ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 || pirlvl -> prcheightexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 ) { return - 1 ; } <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_t, 1 ) <S2SV_ModEnd> << rpy )",0
414,<S2SV_ModStart> target_enc ) { return ONIGERR_NOT_SUPPORTED_ENCODING_COMBINATION <S2SV_ModEnd> ; } else,1
415,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static MagickFalse <S2SV_ModEnd> sample = SetImageExtent ( image, image, image -> columns, image -> columns, exception ) ; switch ( MagickFalse ) { SetImageExtent ( image, image -> columns, image -> columns, image -> columns ) ; return ( MagickFalse ) <S2SV_ModEnd> ; } <S2SV_null>",0
416,"<S2SV_ModStart> u_char * tptr, const u_int length ) { if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> case AFNUM_INET : if ( length!= 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; hexdump = TRUE ; break ; }",0
417,"<S2SV_ModStart> ; rdx = X86EMUL_MODE_PROT64 <S2SV_ModEnd>, regs, <S2SV_ModStart> ) ; return rc <S2SV_ModEnd> ; } if",0
418,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
419,"<S2SV_ModStart> BIBIO ; } if ( flags & BIO_TYPE_CMS_CONTENT ) { if ( tmpout == BIO_CMS_CMS_TYPE_INVALID ) goto err ; } if ( tmpout == BIO_CMS_INVALID ) { if ( i < 0 ) goto err ; } if (! BIO_write ( in, i ) ) goto err ; if ( i < 0 ) goto err ; if ( BIO_type_write ( BIO_data, in, i ) ) { if (! BIO_write ( BIO_cipher_data ( in ) ) ) goto err ; } if ( tmpout == BIO_write ( BIO_cipher ) ) { if ( i < 0 ) goto err ; }",0
420,<S2SV_ModStart> = KRB5_PREAUTH_FAILED ; if ( flags &,0
421,"<S2SV_ModStart> * cpi, vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_prob <S2SV_ModEnd> tree ) {",0
422,,0
423,<S2SV_ModStart> if ( addr_len < sizeof ( struct sockaddr_len ),0
424,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
425,<S2SV_ModStart> break ; } if ( len < 1 ) return - EINVAL ;,0
426,"<S2SV_ModStart> ) { struct hugepage_subpool * spool = subpool_vma ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> ) ) { hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg )",0
427,<S2SV_ModStart> ; if ( plen <S2SV_ModEnd>!= file ->,0
428,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; timer_set_state",1
429,"<S2SV_ModStart> x5, const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> 4 ] = ( tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> * input, x0, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> 0 ] = ( tran_low_t <S2SV_ModEnd> x0, x0 <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_t ) <S2SV_ModEnd> x",0
430,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
431,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_block_mode ( const,0
432,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF <S2SV_ModStart> wc ) ; return,1
433,"<S2SV_ModStart> tot_len ) ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
434,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ;,0
435,<S2SV_ModStart> += 2 ; if ( len < 2 ) return - EINVAL ;,0
436,"<S2SV_ModStart> if (! caller_may_may_see_dir ( fc, controller, cgroup ) ) { ret = - ENOENT ; goto out ; } if (! <S2SV_ModStart> if (! caller_may_dir ( cg, controller, cgdir ) ) { ret = - ENOENT ; goto out ; } if (! fc -> next ) { ret = - ENOENT ; goto out ; } if (!",0
437,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flags & CL_UNPRIVILEGED <S2SV_ModStart> & CL_UNPRIVILEGED ) { if ( mnt -> mnt. mnt. mnt. mnt_flags & MNT_LOCK_NODEV ) mnt -> mnt. mnt. mnt. mnt_flags |= MNT_LOCK_NODEV ; if ( mnt -> mnt. mnt. mnt_flags & MNT_NODEV ) mnt -> mnt. mnt. mnt_flags |= MNT_LOCK_NODEV ; if ( mnt -> mnt. mnt. mnt. mnt. mnt. mnt_flags & MNT_LOCK_NODEV ) mnt -> mnt. mnt. mnt_flags |= MNT_LOCK_NODEV ; if ( mnt -> mnt. mnt. mnt. mnt. mnt. mnt_flags & MNT_LOCK_NODEV ) mnt -> mnt. mnt. mnt. mnt. mnt -> mnt. mnt. mnt. mnt. mnt.,0
438,<S2SV_ModStart> rds_loop_transport ; } <S2SV_ModEnd> } conn ->,1
439,<S2SV_ModStart> * rsize >= 112 <S2SV_ModEnd> && rdesc [,1
440,<S2SV_ModStart> if ( ( ( <S2SV_ModStart> ) < bodyLength ) || ( bodyLength < sizeof ( EAPOL_RSN_KEY ) ),1
441,<S2SV_ModStart> ( likely ( serio <S2SV_ModEnd> &&! filtered,1
442,"<S2SV_ModStart>! er ) { ND_TCHECK ( <S2SV_ModEnd> dp [ 0 <S2SV_ModStart> 0 ] ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> c <S2SV_blank> %04x"", EXTRACT_32BITS ( & dp [ 0 ] ) ) ) ; } <S2SV_ModEnd> return ; case",1
443,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> newlen - CRC_T,0
444,"<S2SV_ModStart> void write_segmentation ( const VP9_COMMON * cm, MACROBLOCKD * xd, <S2SV_ModStart> ) { const xd = mi <S2SV_ModEnd> -> mbmi_row_cols <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
445,<S2SV_ModStart> c -> child <S2SV_ModEnd> ; if (,0
446,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (,0
447,<S2SV_ModStart> g ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
448,"<S2SV_ModStart> NULL ) ; if (! _gdImageGifCtx <S2SV_ModEnd> ( im, <S2SV_ModStart>, out ) ) { <S2SV_ModEnd> rv = gdDPExtractData <S2SV_ModStart> size ) ; } else { rv = NULL ; }",1
449,<S2SV_ModStart> ) ; } if ( bprm -> interp!= bprm -> filename ) kfree ( bprm -> interp ) ;,1
450,<S2SV_ModStart> } if (! data_len > OE_SSIZE_MAX / sizeof ( struct oe_socklen_t ) ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart> goto out ; } if ( <S2SV_ModEnd> goto out_errno ) { <S2SV_ModStart> return - EINVAL ; },0
451,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
452,"<S2SV_ModStart> ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, ""Invalid <S2SV_blank> image <S2SV_blank> dimensions"" ) ; goto done ; }",1
453,"<S2SV_ModStart> freec ) { memcpy <S2SV_ModEnd> ( raw,",0
454,"<S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size,",0
455,,0
456,<S2SV_ModStart> destroy_list ) ; <S2SV_ModEnd> } } <S2SV_null>,1
457,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> read_frame ( VP9EncoderConfig <S2SV_ModStart> * const VP9EncoderConfig * const MACROBLOCKD * const xd, int mi_row, int i, int mi_col ) { const int i = 0 ; for ( i = 0 ; ++ i < mb_rows ; ++ i ) { for ( i = 0 ; ++ i ; ++ i ) { for ( i = 0 ; ++ i < mb_rows ; ++ i ) { for ( i = 0 ; ++ i ++ i ++ i ) { for ( i = 0 ; ++ i < mb_rows ; ++ i ) { for ( i = 0 ; ++ i < chars ; ++ i ++ i ) { * xd -> data [ i ] = 0 ; ++ i ++ ; for ( i ++ i = 0 ; ++ i < ctx -> mb_index [ i ] [ i ] [ i ] [ i ] = 0 ; for ( i = 0 ; ++ i ++ i ++ ) { for ( i = 0 ; ++ i < 3 ; ++ i ++ ) { for ( i = 0 ; ++ i ++ i",0
458,<S2SV_ModStart> ) ; } fuse_conn_put ( & cc -> fc ) ;,1
459,"<S2SV_ModStart> ( code ) { * status = ""DECODE_PA_USER"" ; return code ; } <S2SV_ModEnd> code = verify_s4u_checksum",0
460,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> SCS2SV_null> static <S2SV_ModStart> uint8 req ; int buflen = 0 ; if (! r -> iov_base ) { return SCSI_INVALIDiskState ( SCSIDiskState, req -> bs_base ) ; } <S2SV_ModEnd> return r ;",0
461,<S2SV_ModStart> cur_pic. field_picture <S2SV_ModEnd> ) return 0,1
462,<S2SV_ModStart> 0 ) { return ret <S2SV_ModEnd> ; } <S2SV_null>,0
463,<S2SV_ModStart> buf ) ) { return 0 ; } <S2SV_ModEnd> ext_block = (,1
464,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = key_permission,1
465,<S2SV_ModStart> ndo_vflag ) { ND_TCHECK_16BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen ] <S2SV_ModEnd> ) ; },0
466,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
467,"<S2SV_ModStart> = hmi_data ; hmi_off [ i ] ; <S2SV_ModStart> += hmi_tmp ; hmi_tmp = hmi_tmp ; <S2SV_ModStart> += hmi_size ; hmi_off [ i ] -= hmi_tmp ; <S2SV_ModStart> += hmi_tmp ; if ( hmi_track_size < 4 ) goto _WM_GLOBAL_ERROR ; <S2SV_ModStart> += 4 ; if ( hmi_siz < 4 ) { hmi_data [ i ] = hmi_tmp ; hmi_tmp += 4 ; } hmi_tmp += 4 ; <S2SV_ModStart> += 4 ; hmi_tmp += 4 ; hmi_tmp += 4 ; } if ( hmi_tmp > 4 ) { if ( hmi_tmp_track_offset ( hmi_tmp, hmi_tmp, & hmi_tmp, hmi_tmp, & hmi_tmp, hmi_tmp, 0 ) ) goto _WM_GLOBAL_ERROR ; } hmi_siz -= hmi_tmp ; <S2SV_ModStart> += 4 ; if ( hmi_tmp_data <S2SV_ModEnd> += 4 ;",0
468,<S2SV_ModStart> -> id ; haddr -> hci_channel = 0 ;,1
469,<S2SV_ModStart> -> i_iget5_offset ; fh16 [ 3 ] = 0 ;,1
470,"<S2SV_ModStart> ( kdc_active_realm, client. princ <S2SV_ModEnd>, request ->",1
471,<S2SV_ModStart> break ; } <S2SV_ModEnd> dst_reg -> smin_value <S2SV_ModStart> = S64_MAX ; <S2SV_ModEnd> if ( src_known,1
472,<S2SV_ModStart> ) { const VP9EncoderConfig <S2SV_ModEnd> * const oxcf <S2SV_ModStart> = get_layer_context ( cpi <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( cpi -> oxcf. <S2SV_ModStart> ) return ; } <S2SV_ModEnd> } } <S2SV_null> <S2SV_null>,0
473,,0
474,<S2SV_ModStart> DestroyQuantumInfo ( quantum_info ) ; canvas_image = DestroyImage ( canvas_image,1
475,"<S2SV_ModStart> = getnum ( <S2SV_ModEnd> fmt, MAXALIGN",0
476,<S2SV_ModStart> void usage_exit ( void,1
477,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
478,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
479,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
480,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
481,<S2SV_ModStart> ; if ( * value == 0 ||,1
482,<S2SV_ModStart> sb ) { struct iov_base * s ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> if (!,0
483,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
484,<S2SV_ModStart> ND_TCHECK ( * tptr <S2SV_ModEnd> ) ; ND_PRINT,0
485,<S2SV_ModStart> char f [ 20 <S2SV_ModEnd> ] ; sprintf,0
486,<S2SV_ModStart> } else { return false <S2SV_ModEnd> ; } } if,0
487,<S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; lval <S2SV_ModStart>. x = Z_LVAL ( lval ) ; } else { rect. x = <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval lval ; lval = * * * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; rect <S2SV_ModStart>. y = Z_LVAL ( lval ) ; } else { rect. y = <S2SV_ModStart> tmp ) ; } <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; rect,0
488,,0
489,<S2SV_ModStart> SQL_DROP ) ; <S2SV_ModEnd> return 0 ;,1
490,"<S2SV_ModStart> ; r = __copy_from_user <S2SV_ModEnd> ( data,",1
491,"<S2SV_ModStart> ; uint32_t line <S2SV_ModEnd> ; if ( <S2SV_ModStart> && osStrchannels <S2SV_ModEnd> ) { set_line <S2SV_ModStart> ; if ( osStrchannels <S2SV_ModEnd> ( line, <S2SV_ModStart> ; exit ( <S2SV_ModEnd> ) ; }",0
492,<S2SV_ModStart> = 0 ; info -> port = NULL ;,1
493,<S2SV_ModStart> out_mutex ) ;,0
494,"<S2SV_ModStart> iovec * iovec, struct iov_iter * iter ; if ( len > MAX_RW_COUNT ) len = MAX_RW_COUNT ;",0
495,<S2SV_ModStart> ext4_group_t flex_groups_group ; unsigned <S2SV_ModStart> -> s_log_groups_per_flex ; sbi -> s_log_groups_per_flex = 0 ; sbi -> s_log_groups_per_flex = 0 ; sbi -> s_log_groups_per_flex = 0 ; sbi -> s_log_groups_groups_per_flex = 0 ;,0
496,<S2SV_ModStart> ( unlikely ( chunk -> pdiscard ) ) return 0 ; if ( unlikely (,1
497,,0
498,"<S2SV_ModStart> { if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) return exit_client ( cptr, sptr, sptr, ""Malformed <S2SV_blank> AUTHENTICATE"" ) ; if ( <S2SV_ModStart> { if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) return exit_client ( cptr, sptr, sptr, ""Malformed <S2SV_blank> AUTHENTICATE"" ) ; if (",1
499,<S2SV_ModStart> <= w - ( int ),1
500,<S2SV_ModStart> callback_args -> forward_matches ; assert ( match_offset + match_length <= callback_args -> data_size ),1
501,<S2SV_ModStart> options. disable_forwarding && use_privsep,1
502,"<S2SV_ModStart> { if ( length > SMKTREE_DECODE_MAX_RECURSION ) { av_log ( NULL, AV_LOG_ERROR, ""Maximum <S2SV_blank> tree <S2SV_blank> recursion <S2SV_blank> level <S2SV_blank> exceeded.\\n"" ) ; return AVERROR_INVALIDDATA ; } if (",1
503,<S2SV_ModStart> err ; } if ( m -> msg_name ),1
504,"<S2SV_ModStart> } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_arg, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""lineno\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> arguments"" ) ; return 1 ; } else <S2SV_ModEnd> { int res <S2SV_ModStart> int res ; res = obj2ast_int ( tmp, & lineno, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id ( obj, & PyId_type_comment, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL || tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""lineno\\"" <S2SV_blank> missing <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> "" ) ; return 1 ; } else { int res <S2SV_ModEnd> ; res = <S2SV_ModStart> ( obj2ast_int res <S2SV_ModEnd>, arena ) <S2SV_ModStart> ) ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ( PyExc_SetString ( PyExc_TypeError, & PyExc_TypeError",0
505,<S2SV_ModStart> m ; int hstartrow <S2SV_ModEnd> ; if ( <S2SV_ModStart> 2 ) { hstartrow <S2SV_ModEnd> = ( numrows <S2SV_ModStart> = numrows - hstartrow <S2SV_ModEnd> ; n = <S2SV_ModStart> & a [ hstartrow <S2SV_ModEnd> * stride ],1
506,"<S2SV_ModStart> ""REPLY_ADD_STA <S2SV_blank> PASSED\\n"" ) ; ret = iwl_sta_ucode_activate ( priv, sta_id ) <S2SV_ModEnd> ; break ;",1
507,"<S2SV_ModStart> ; log_file = fopen_safe <S2SV_ModEnd> ( file_name,",1
508,"<S2SV_ModStart> "" <S2SV_blank> <S2SV_blank> <S2SV_blank> xy <S2SV_blank> <S2SV_blank> <S2SV_blank> x"" ) ; assert_regexp_syntax_error ( ""\\\\x0"" ) ; assert_regexp_syntax_error ( ""\\\\x"" ) ; assert_regexp_syntax_error ( ""\\\\xxy"" ) ;",1
509,"<S2SV_ModStart> & HB_LOCK ) spin_lock_irqrestore ( & hashbin -> hb_spinlock ) ; <S2SV_ModStart> & HB_LOCK ) { if ( hashbin -> hb_flags & HB_LOCK ) spin_unlock_irqrestore ( & hashbin -> hb_spinlock ) ; <S2SV_ModStart> & HB_LOCK ) { if ( free_func ) spin_unlock_irqrestore ( & hashbin -> hb_spinlock ) ; <S2SV_ModEnd> if ( hashbin <S2SV_ModStart> & HB_LOCK ) { if ( free_func ) spin_unlock_irqsave ( & hashbin -> hb_spinlock_irqrestore ( & hashbin -> hb_irqrestore, flags ) ; } <S2SV_ModEnd> if ( free",0
510,<S2SV_ModStart> EPERM ; } if (! ( mnt -> mnt. mnt. mnt. mnt_flags & MNT_LOCK_NODEV ) ) { return - EPERM ; } if ( ( ( mnt -> mnt. mnt. mnt_flags & MNT_LOCK_NODEV ) &&! ( mnt -> mnt. mnt_flags & MNT_NODEV ) ) { return - EPERM ; } if ( ( ( mnt -> mnt. mnt. mnt. mnt. mnt_flags & MNT_LOCK_NODEV ) &&! ( ( mnt -> mnt. mnt. mnt_flags & MNT_LOCK_NOSUID ) ) ) { return - EPERM ; } },0
511,<S2SV_ModStart> ( sk ) ; struct sockaddr_t * s = 0 <S2SV_ModStart> -> msg_namelen = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if (! err ) return - EINVAL ; } if (,0
512,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
513,"<S2SV_ModStart> ( serial -> num_bulk_out <S2SV_ModEnd> < 2 ) <S2SV_ModStart> < 2 ) { dev_err ( & serial -> interface -> dev, ""missing <S2SV_blank> bulk <S2SV_blank> out <S2SV_blank> endpoints\\n"" ) ; return - ENODEV ; } <S2SV_ModEnd> port = serial",1
514,"<S2SV_ModStart> & ds64_s64_chunk, sizeof ( DS64_chunk ) <S2SV_ModStart> ) ) { CS64Chunk = ds64_chunk. table_length * sizeof ( DS64Chunk ) ; ds64_chunk = sizeof ( DS64Chunk ) ; ds64_chunk ) ; <S2SV_ModStart> } table_length = sizeof ( CS64Chunk ) table_length * sizeof ( DS64Chunk ) ; ds64_chunk. table_length = sizeof ( CS64Chunk ) + table_length * sizeof ( CS64Chunk ) ; if ( table_length ) ds64Chunk. table_length = sizeof ( DS64Chunk ) ; table_length * sizeof ( CS64Chunk ) ; table_length = strncpy ( table_bytes, sizeof ( cs64_chunk ) + table_length * sizeof ( CS64_chunk ) ) ; table_length = strncpy ( CS64Chunk. ds64_chunk, sizeof ( table_length ) ; table_length = strncpy ( table_length * sizeof ( CS64_chunk ) ) ;",0
515,"<S2SV_ModStart> ; if ( err == NULL ) return - EINVAL ; if ( <S2SV_ModStart>, MSG_TROLOCK ) ) <S2SV_ModEnd> err = -",0
516,<S2SV_ModStart> int b_size ; int bp_blocks = 0 ; <S2SV_ModStart> ) ) { if (! bp -> b_blocks ) goto out_free ;,0
517,<S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
518,<S2SV_ModStart> return FALSE ; } if (! rc ) return FALSE ;,0
519,,0
520,"<S2SV_ModStart> ; if ( is_link ( fname ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank> %s <S2SV_blank> file\\n"", fname ) ; exit ( 1 ) ; } if (",0
521,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> uint32_t * skb_sctp_rs_packet <S2SV_ModEnd>, struct xdr",0
522,<S2SV_ModStart> b ) { } else if (,0
523,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
524,<S2SV_ModStart> = timespec_to_ns ( & <S2SV_ModStart> = timespec_to_ns ( & <S2SV_ModStart> = timespec_to_ns ( &,1
525,"<S2SV_ModStart> ; if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
526,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
527,<S2SV_ModStart> media_data ; struct range_media * r = & clt -> clt_ranges ; size_t content_range <S2SV_ModEnd> ; size_t content_range <S2SV_ModStart> = 0 ; <S2SV_ModEnd> range = & <S2SV_ModStart> if ( clt -> range <S2SV_ModStart> == 0 ) { range = & r -> range [ 0 ] = & r -> clt_boundary ; for ( i = 0 ; i < nranges ; i ++ ) { range [ i ] = & r -> clt_boundary ; for ( i = 0 ; i < nranges ; i ++ ) { range [ i ] = & r -> range [ i ] ; clt -> range [ i ] = & r -> range [ i ] ; for ( i = 0 ; i = 0 ; i < nranges ; i ++ ) { range [ i ] = & r -> clt -> clt_boundary [ i ] ; range [ i ] = & r -> range [ i ] ; for ( i = 0 ; i < nranges ; i ++ ) { range [ i ] = 0 ; for ( i = 0 ; i < nranges ; i ++ ) { range_boundary = & r -> range_boundary,0
528,"<S2SV_ModStart> ( interface, KSZ8851_ISR ) ; if ( ( status & KSZ8851_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR )!= 0 <S2SV_ModEnd> ) { status <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_P1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_R1 <S2SV_ModEnd> ) ; }",0
529,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
530,<S2SV_ModStart> bpp <= 8 && c -> format!= CHUNKY,0
531,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY (,0
532,<S2SV_ModStart> pos ) { if (! state -> index ) return 0 ; <S2SV_ModStart> = 0 ; } <S2SV_ModEnd> if (!,0
533,"<S2SV_ModStart> struct fb_vblank vblank ; memset ( & vblank, 0, sizeof ( vblank ) )",1
534,<S2SV_ModStart> flags ) { spin_lock ( & ctx -> cancel_lock ) ; <S2SV_ModStart> } } else { __timerfd_remove_cancel <S2SV_ModEnd> ( ctx ) <S2SV_ModStart> ) ; } spin_unlock ( & ctx -> cancel_lock ) ;,1
535,,0
536,<S2SV_ModStart> { if (! dev_name ||,1
537,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
538,"<S2SV_ModStart> -> m_pdw_remaining ; memset ( msg, 0, sizeof ( * msg ) ) ;",0
539,<S2SV_ModStart> TSRMLS_CC ) ; if ( new_len > INT_MAX ) { efree ( replaced ) ; RETURN_FALSE ; },1
540,<S2SV_ModStart> ; if ( <S2SV_ModEnd> id == NULL,0
541,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_line_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) ; <S2SV_ModStart> t1_buf_array, t1_line_array ) ; alloc_array ( t1_line, strlen ( t1_buf_array ) + 1, T1_BUF_SIZE",1
542,"<S2SV_ModStart> int mi_col, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> = NULL ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
543,"<S2SV_ModStart> ; if (! strcmp ( key, ""path"" ) &&",0
544,<S2SV_ModStart> int pixel_ptr = ADVANCE_BLOCK ( ) <S2SV_ModStart> row_inc ; ADVANCE_BLOCK ( ) <S2SV_ModStart> row_inc ; } <S2SV_ModEnd> } break ; <S2SV_ModStart> -- ) { ADVANCE_BLOCK ( ) ; <S2SV_ModStart> row_inc ; ADVANCE_BLOCK ( ) <S2SV_ModEnd> row_inc ( ) <S2SV_ModStart> row_inc ; } <S2SV_ModEnd> } break ;,0
545,<S2SV_ModStart> cnt ) { ssize_t <S2SV_ModEnd> n ; assert,1
546,<S2SV_ModStart> ; __be16 type ; if ( NAPI_GRO_CB ( skb ) -> encap_mark ) goto out ; NAPI_GRO_CB ( skb ) -> encap_mark = 1,1
547,<S2SV_ModStart> ; if ( numrows < 0 || numcols < 0 ) { return 0 ; } if (,1
548,<S2SV_ModStart> = tpm_kdfa ( <S2SV_ModEnd> session -> authHash,1
549,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = key_permission,0
550,"<S2SV_ModStart> buflen, buf_size - 4",0
551,<S2SV_ModStart> break ; } <S2SV_ModEnd> if ( src_reg,0
552,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
553,"<S2SV_ModStart> vfio_irq_set_count ( int32_t * hdr, <S2SV_ModStart> * hdr ; size ; <S2SV_ModStart> ) return - EINVAL ; if ( hdr. size > max - EINVAL <S2SV_ModEnd> ) return - EINVAL",0
554,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
555,<S2SV_ModStart> -> filesize == UINT64_MAX <S2SV_ModEnd> ) { s,0
556,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
557,"<S2SV_ModStart> char * in, size_t olen <S2SV_ModStart> += 4 ; if ( len == olen ) return len ;",0
558,<S2SV_ModStart> gc ) ; <S2SV_ModEnd> return 0 ;,1
559,<S2SV_ModStart> i ; size_t bytes <S2SV_ModEnd> = bytes ; <S2SV_ModStart> ++ copied_len ; for ( i = 0 ; i < bytes <S2SV_ModEnd> ) put_page (,0
560,<S2SV_ModStart> & CP_RDESC_SWAPPED_MIN_MAX ) ) return rdesc ; if ( * rsize < 4,1
561,<S2SV_ModStart> <S2SV_null> <S2SV_null> static S2SV_null> static <S2SV_ModStart> void vpx_codec_ctx_t <S2SV_ModEnd> ; int i <S2SV_ModStart> = 2 ; for ( i = 0 ; i < 2 ; i ++ i ) { if ( svc_ctx -> temporal_mode & svc_layer_counts [ i ] ) { svc -> temporal_layer = 1 ; } else { svc_ctx -> temporal_mode = 0 ; } for ( i = 0 ; i <S2SV_null> <S2SV_null>,0
562,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decode ( BYTE <S2SV_ModStart> BYTE * out, BYTE * outSize <S2SV_ModStart> 5 ) { if ( outSize < 4 ) return FALSE ; outSize -- ; <S2SV_ModStart> 4 ; } if ( outSize < len ) return FALSE ; outSize -- ; outSize -- ; outSize -- ; outSize -- ; outSize -- ; out : return FALSE ;",0
563,<S2SV_ModStart> } if ( screen -> screen_screen &&,0
564,"<S2SV_ModStart> char * end, const char * end <S2SV_ModStart> == NULL ) { const char * * end = NULL ; if ( <S2SV_ModStart> == '\\0' ) { if ( * end == '\\' ) { char * end = NULL ; } <S2SV_ModStart> int len ; if ( * end == '\\0' || * end == '\\0' ) { if ( * end == '\\' ) { char * end = * p ; } else { char * p ; if ( * p == '\\' ) { char * end = * end - 1 ; } else { char * end = ( * ) ; if (! end - 1 ) return NULL ; } <S2SV_ModStart> == '\\\\' ) { char * end = ( * end - 1 ) ; if (! end - 1 ) return NULL ; } else { char * end = ( * ) ; if ( * end == '\\0' ) { char * p ; for ( i = 0 ; i < end - 1 ; i ++ ; } <S2SV_ModEnd> if (! <S2SV_ModStart> else if (! <S2SV_ModStart> == '\\0' ) { if (! strlen ( * end - 1 ) return NULL ; } <S2SV_ModStart> == '\\n' ) { if (! end - 1 )",0
565,<S2SV_ModStart> char buf [ 50 <S2SV_ModEnd> ] ; },0
566,<S2SV_ModStart> dir ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
567,"<S2SV_ModStart>, pred_rtrn ) ||! expr -> action. args",1
568,<S2SV_ModStart> pcrypt_free ( struct aead_instance <S2SV_ModEnd> * inst ) <S2SV_ModStart> * ctx = aead_instance_ctx <S2SV_ModEnd> ( inst ),1
569,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
570,"<S2SV_ModStart> } if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if (",1
571,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } else {,0
572,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
573,<S2SV_ModStart> * up ; int ulen ; <S2SV_ModStart> rp ) ; ulen = xfrm_replay_state_esn_esn_len ( up ) ; if ( replay_esn_es ( up )!= ulen ) return - EINVAL ;,0
574,"<S2SV_ModStart> int ret = proc_dointvec_minmax <S2SV_ModEnd> ( table,",1
575,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",1
576,<S2SV_ModStart> opj_calloc ( ( size_t ) ( <S2SV_ModStart> -> numlayers + 1U <S2SV_ModEnd> ) * l_step_l,0
577,"<S2SV_ModStart> name ), ""crypto-%s"" <S2SV_ModEnd>, name )",1
578,"<S2SV_ModStart> start = 0 ; int i <S2SV_ModStart> -> flags ; for ( i = 0 ; i < 3 ; i ++ ) <S2SV_ModStart> ( kvm, i <S2SV_ModEnd>, kvm -> <S2SV_ModStart>. channels [ i <S2SV_ModEnd> ]. count",1
579,"<S2SV_ModStart> const tile, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> -> common ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> flags & YV12_FLAG_HIGHBITDEPTH ) { memset ( xd -> flags & YV12_FLAG_HIGHBITDEPTH ) ; <S2SV_ModStart> return 0 ; } <S2SV_ModEnd> } <S2SV_null>",0
580,"<S2SV_ModStart> 1 ) ; if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf = opipe",1
581,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
582,<S2SV_ModStart> ; if ( fp == NULL ) return NULL ; if (,0
583,<S2SV_ModStart> dir ) ; <S2SV_ModEnd> } <S2SV_null> static,0
584,<S2SV_ModStart> blkg ) ) <S2SV_ModEnd> return PTR_ERR ( <S2SV_ModStart> blkg ) ; <S2SV_ModEnd> q -> root_blkg,1
585,<S2SV_ModStart> ; if ( bpp == 1 && <S2SV_ModStart> else if ( bpp == 8 &&,1
586,<S2SV_ModStart> ; krb5_data rspac ; const char * tgt_realm = krb5_get_realm,0
587,<S2SV_ModStart> mnt ) ; nd -> last_type = LAST_BIND ;,1
588,"<S2SV_ModStart> struct usbdevfs_connectinfo ci ; memset ( & ci, 0, sizeof ( ci ) ) ; memcpy ( ci <S2SV_ModEnd> ) ; ci",0
589,<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> opt.,0
590,<S2SV_ModStart> -> rmtblkcnt ; args -> rmtvaluelen2 = args -> rmtblkcnt ; args -> rmtblkcnt = 0 ; args -> rmtblkcnt = 0 ;,0
591,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> read_null> <S2SV_null> <S2SV_null> 0,0
592,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> break ; case,0
593,<S2SV_ModStart> 0 ; } <S2SV_ModEnd> if ( addr,0
594,<S2SV_ModStart> goto ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) ; },0
595,<S2SV_ModStart> ; x += 4 <S2SV_ModEnd> ) { index,1
596,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
597,"<S2SV_ModStart>, int tstype, bool opt_stats",0
598,"<S2SV_ModStart> 0 ) { if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""UnexpectedEndOfFile"" ) ;",0
599,"<S2SV_ModStart> ( bp, 4 <S2SV_ModEnd> ) ) ;",0
600,"<S2SV_ModStart>, CONST_STR_LEN ( ""%2f?"" ), CONST_STR_LEN ( ""%2f?"" ), CONST_STR_LEN ( __LINE__, CONST_STR_LEN ( ""/?"" ), CONST_STR_STR_LEN ( ""%2f?"" ), CONST_STR_STR_STR_LEN ( ""/?"" ), CONST_STR_LEN ( __LINE__, CONST_STR_STR_LEN ( ""/?"" ) ) ; run_normalize ( psrc, CONST_STR_STR_STR_STR_STR_STR_LEN ( ""/?"" ), CONST_STR_LEN ( ""?"" ), CONST_STR_LEN ( ""/?"" ), CONST_STR_STR_LEN ( ""/?"" ), CONST_STR_STR_STR_?"" ) ;",0
601,<S2SV_ModStart> ) ) ; if <S2SV_ModEnd> ( ops ->,0
602,<S2SV_ModStart> <= w - ( int ),1
603,<S2SV_ModStart> page ) ; <S2SV_ModEnd> memset ( addr,1
604,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t,0
605,<S2SV_ModStart> 1 ) ; if ( i == ps_codec -> i4_max_size ) return AVERROR_INVALIDDATA ;,0
606,"<S2SV_ModStart> * priv ; if (! port -> interrupt_out_urb ||! port -> interrupt_in_urb ) { dev_err ( & port -> dev, ""required <S2SV_blank> endpoint <S2SV_blank> is <S2SV_blank> missing\\n"" ) ; return - ENODEV ; }",1
607,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } else {,0
608,<S2SV_ModStart> -> private_data ; <S2SV_ModEnd> return 0 ;,0
609,"<S2SV_ModStart> open_flags |= TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MY_NO_REDEL_NO_EXT ) <S2SV_ModEnd> ) ; if",0
610,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> p == q ) || ( <S2SV_ModEnd> size < 16 <S2SV_ModStart> size < 16 ) || ( <S2SV_ModEnd> size > 256 <S2SV_ModStart> size > 256 ),1
611,"<S2SV_ModStart> uint dblocks = xfs_attr3_rmt_blocks <S2SV_ModEnd> ( mp,",1
612,,0
613,,0
614,<S2SV_ModStart> ] == EOF || text [ 1 ] == 0 <S2SV_ModStart> ; if (! isxdigit ( <S2SV_ModStart> [ 2 ] ) <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if (! isxdigit ( <S2SV_ModStart> [ 3 ] ) <S2SV_ModEnd> ) return 0,1
615,<S2SV_ModStart> c -> len <S2SV_ModEnd> ; if (,0
616,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct8x8_c <S2SV_ModEnd> ( input, <S2SV_ModStart>, j ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
617,"<S2SV_ModStart> { g_assert ( ""Failed <S2SV_blank> to <S2SV_blank> file <S2SV_blank> \' <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd> ) ; } if",0
618,<S2SV_ModStart> fh_dentry ) ; error = fh_want_write ( fh ) ; if ( error ) <S2SV_ModEnd> goto out_errno ; <S2SV_ModStart> goto out_errno ; <S2SV_ModEnd> return error ;,0
619,<S2SV_ModStart> * ue ; if <S2SV_ModEnd> ( tree_root == <S2SV_ModStart> == NULL ) return 0,1
620,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> char * filename <S2SV_ModStart> = NULL ; if (! strcmp ( line_name, ""%s: <S2SV_blank> %s <S2SV_blank>!= <S2SV_blank> %s\\n"" <S2SV_ModEnd> ) ; return",0
621,<S2SV_ModStart> elen ) ; elen += pc -> lengthComponentIdent ; <S2SV_ModStart> } elen += elen <S2SV_ModEnd> ; elen +=,0
622,"<S2SV_ModStart> ndo, bp <S2SV_ModEnd> ) ; }",0
623,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_8BITS ( tptr ) ;,0
624,<S2SV_ModStart> == 0 ) {,0
625,<S2SV_ModStart> ; bool slow <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ; * addr_len = sizeof ( * sin ) ;,1
626,<S2SV_ModStart> len ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
627,<S2SV_ModStart> int s ; if (! ND_TCHECK_16BITS ( s ) ) return - EINVALIDDATA ;,0
628,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> int i ; const <S2SV_ModStart> ndo -> ndo_snapend ; if (! ND_TCHECK ( cp ) ) return ( INDIR_MASK ) ; if ( cp <= INDIR_MASK ) { ND_PRINT ( ( ( ndo, cp ) ) ; return ( NULL ) ; } <S2SV_ModEnd> if ( (! <S2SV_ModStart> tmp ) { if ( i <= INDIR_MASK ) { ND_PRINT ( ( ( ndo, ""%s"", cp ) ) ; return NULL ; } <S2SV_ModEnd> if (!",0
629,"<S2SV_ModStart>, args -> rmtvaluelen <S2SV_ModEnd> ) ; error <S2SV_ModStart> = args -> rmtvaluelen <S2SV_ModEnd> ; while (",1
630,<S2SV_ModStart> char buf [ 2 <S2SV_ModEnd> ] ; },0
631,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> S_IWUSR ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; unlink",0
632,"<S2SV_ModStart> * fc ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & ctx )",0
633,<S2SV_ModStart> > 0 ) { assert ( <S2SV_ModStart> value ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
634,"<S2SV_ModStart> PKT_LEN_SIZE ) { giterr_set_str ( GITERR_NET, ""Invalid <S2SV_blank> empty <S2SV_blank> packet"" ) ; return GIT_ERROR <S2SV_ModEnd> ; } if",1
635,<S2SV_ModStart> ; if ( vma -> vm_flags & VM_SHARED ) return VM_FAULT_SIGBUS ; if (,1
636,<S2SV_ModStart> src ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
637,<S2SV_ModStart> env -> insn_aux_data ; int i,0
638,<S2SV_ModStart> ; ND_TCHECK ( * dp <S2SV_ModEnd> ) ; if,1
639,<S2SV_ModStart> trunc ; } ND_TCHECK_16BITS ( & bp [ i + 2 ] ) ;,1
640,<S2SV_ModStart> frames_t ) { memcpy <S2SV_ModEnd> ( cpi ->,0
641,<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % rowsize )!= 0 ) return 0,0
642,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteCanonEntry ) ) ;",0
643,<S2SV_ModStart> ; if ( ctx -> terminated ||,1
644,<S2SV_ModStart> sb ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
645,"<S2SV_ModStart>, open = 0 <S2SV_ModEnd> ; } else",0
646,<S2SV_ModStart> char * buf <S2SV_ModEnd> = NULL ; <S2SV_ModStart> ) return NULL <S2SV_ModEnd> ; } <S2SV_null>,0
647,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
648,"<S2SV_ModStart> ( ) ; iov_iter_advance ( i, copied ) ; <S2SV_ModStart> again ; } <S2SV_ModEnd> pos += copied",1
649,<S2SV_ModStart> unlikely ( len + ring -> frameoffset,1
650,<S2SV_ModStart> = smm_sec_relsegs ( <S2SV_ModEnd> ) ; },0
651,"<S2SV_ModStart> ( obj, <S2SV_ModEnd> name, data <S2SV_ModStart>, show_object, & base <S2SV_ModEnd>, path,",1
652,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
653,<S2SV_ModStart> src < src ) return AVERROR_INVALIDDATA ; if ( src >= src_type ) return AVERROR_INVALIDDATA ;,0
654,<S2SV_ModStart> lock_ptr ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
655,<S2SV_ModStart> ; if ( snprintf <S2SV_ModEnd> && nattr.,0
656,,0
657,<S2SV_ModStart> list ) ; list_del_init ( & timer -> active_list ) ;,0
658,<S2SV_ModStart> len ; } ND_TCHECK_16BITS ( p + 2 <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ;,0
659,<S2SV_ModStart> cpu ) { <S2SV_ModEnd> char * bin <S2SV_ModStart> cpu ) ; free ( cpu ) ; <S2SV_ModStart> ; } * cpu = cpu <S2SV_ModEnd> cpu -> bincpu,0
660,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void sas_destruct_devices (,0
661,<S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> if ( u4_bits,0
662,"<S2SV_ModStart> gint64 offset ; <S2SV_ModEnd> char line [ <S2SV_ModStart> line [ NETSCREEN_LINE_LENGTH <S2SV_ModEnd> ] ; offset <S2SV_ModStart> return FALSE ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! parse_netscreen_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart> wth -> fh <S2SV_ModEnd>, & wth <S2SV_ModStart> wth -> frame_buffer, line",1
663,<S2SV_ModStart> 0 ) ; if ( <S2SV_ModStart>. seq_num ) < 0 ) return - 1,1
664,<S2SV_ModStart> ( unsigned char * bytes <S2SV_ModEnd> ) > 0,0
665,"<S2SV_ModStart> = 0 ; if (! test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart> out ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
666,"<S2SV_ModStart>, ret = - EINVAL ; if (",0
667,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",1
668,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,0
669,<S2SV_ModStart> page ) ; rm -> atomic. op_active = 0 ;,1
670,<S2SV_ModStart> bus ] ; if ( bi == NULL ) return NULL ;,0
671,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = 0 <S2SV_ModStart> ) ) ; msg -> msg_namelen = sizeof ( * sin ) ;",0
672,"<S2SV_ModStart> sizeof ( spath ) ) return - 1 ; if ( strstr ( name, "".."" ) || strchr ( name, '/'",1
673,<S2SV_ModStart> ( * t <S2SV_ModEnd> ) ; while,0
674,"<S2SV_ModStart> -> bcache, cache_id ( <S2SV_ModStart> ] -> data )",1
675,<S2SV_ModStart> objp ) ; * objp = NULL ;,1
676,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
677,<S2SV_ModStart> return 1 ; consume_skb ( skb ) ; return 0 <S2SV_ModEnd> ; } if,1
678,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
679,<S2SV_ModStart> goto out ; err = ovl_copy_up ( dentry ) ; if (! err ) { <S2SV_ModStart> goto err ; } <S2SV_ModStart> ) ; },0
680,<S2SV_ModStart> ( isspace ( ( unsigned char ),1
681,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> } if (! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if (",1
682,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> read_block ( vpx_read_literal <S2SV_ModStart> intra_literal <S2SV_ModEnd> ( r,",0
683,<S2SV_ModStart> 1 ) ; if ( strlen ( line ) == 0 ) return - 1 ;,1
684,<S2SV_ModStart> * sig ; if ( cert_name == NULL ) return NULL ;,0
685,<S2SV_ModStart> ++ ) { if ( band -> prec ) { <S2SV_ModStart> ) ; } },1
686,<S2SV_ModStart> < 0 ) { xmlFreeInputStream ( input ) ; return ; } <S2SV_ModEnd> if ( entity,1
687,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> final ) ; rcu_read_unlock ( ) ;",0
688,<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> * const <S2SV_ModStart> int64_t res ; if ( cpi -> oxcf. resize_mode == VP9_COMP <S2SV_ModEnd> ) { return <S2SV_ModStart> return rc ; } return rc <S2SV_ModEnd> ; } <S2SV_null>,0
689,"<S2SV_ModStart> ( u32 size, u32 num ) { if ( size > UINT32_MAX / num ) { return NULL ; } <S2SV_ModEnd> return malloc ( <S2SV_ModStart> malloc ( size * num",1
690,<S2SV_ModStart> else if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1 <S2SV_ModStart> { if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1,1
691,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,1
692,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
693,"<S2SV_ModStart> scn, root_storage <S2SV_ModEnd> ) ) <",1
694,<S2SV_ModStart> return ; } size_t count = 0 ;,0
695,<S2SV_ModStart> (! eof && vars -> str. c!= vars -> ptr,1
696,<S2SV_ModStart> 10100 : if (! protocol -> protocol ) return - ENOMEM ;,0
697,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
698,<S2SV_ModStart> int rc ; unsigned long eip <S2SV_ModEnd> ; rc =,0
699,"<S2SV_ModStart> list. name, true",1
700,"<S2SV_ModStart> void * end <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; void * dbuf = ceph_crypto_key ( ticket_buf, GFP_NOFS ) ; if (! ticket_buf ) { ret = - ENOMEM ; goto out ; } <S2SV_ModStart> ) ; } kfree ( ticket_buf ) ;",0
701,"<S2SV_ModStart> / 2 ; if ( count > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", count, ( int ) ( MaxAllocSize / sizeof ( Pairs ) ) ) ) ) ;",1
702,<S2SV_ModStart> ( rq ) { <S2SV_ModEnd> return NULL ;,0
703,"<S2SV_ModStart> -> init_msg ; if ( s -> session -> session_id_ctx -> session_session_mode == NULL ) { SSL_SESSION_INTERNAL_ERROR ( s -> session_cb, s -> session_ctx -> session_sess, & new_sess, s -> session -> session_ctx -> session_ctx ) ; } SSL_INTERNAL_ERROR = s -> session_free ( s -> session_ctx ) ; if ( ( s -> session_ctx -> session_ctx -> session_ctx -> session_ctx ) { SSL_free ( s -> session_ctx, s -> session_ctx ) ; } s -> session_ctx = s -> session_session_id ; } s -> session_ctx -> session_session_id = new_sess ; } SSL_SESS_INTERNAL_ERROR ( s -> session ) ; if ( new_ctx -> session == NULL ) { if ( s -> session_sess_free ( s -> session_ctx ) { SSLerr ( s -> session ) ; return SSL_SESSION ; } SSL_SESS_ERROR ; }",0
704,"<S2SV_ModStart>, - 1 <S2SV_ModEnd> ) ; }",0
705,<S2SV_ModStart> error ; } if (,0
706,<S2SV_ModStart> NULL ; return ( * elem_rtrn!= NULL ) <S2SV_ModEnd> ; if (,0
707,<S2SV_ModStart> ) ; } if <S2SV_ModEnd> ( cmd ),0
708,,0
709,"<S2SV_ModStart> err = 0 ; if (! net_eq ( current -> nsproxy -> net_ns, sock_net ( sk ) ) ) return - EINVAL",1
710,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
711,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,1
712,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
713,<S2SV_ModStart> -> rows = 1 <S2SV_ModEnd> ; image -> <S2SV_ModStart> ( BImgBuff ) <S2SV_ModEnd> ; break ;,1
714,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> ) ) ) rc = <S2SV_ModStart> ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>,1
715,,1
716,<S2SV_ModStart> out_free ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
717,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
718,<S2SV_ModStart> out_mutex ; } ext4_inode_block_unlocked_dio ( inode ) ; inode_dio_wait ( inode ) ; down_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
719,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> uint32_t * midi_tracks <S2SV_ModStart> = * midi_data ; uint32_t tmp_size ; uint32_t * tmp_val <S2SV_ModEnd> ; uint32_t tmp_val <S2SV_ModStart> uint32_t * track_size <S2SV_ModEnd> ; uint32_t * tmp_val <S2SV_ModStart> uint32_t * tmp_val <S2SV_ModEnd> ; track_size <S2SV_ModStart> tracks ] ; track_size -= 4 ; tmp_val <S2SV_ModEnd> = * tmp_val <S2SV_ModStart> ( midi_val <S2SV_ModEnd> |= * midi_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 24 ; tmp_val <S2SV_ModEnd> } if (,0
720,"<S2SV_ModStart> = max_t ( int <S2SV_ModEnd>, val * <S2SV_ModStart> = max_t ( int <S2SV_ModEnd>, val *",1
721,"<S2SV_ModStart> -> b_data ; unsigned char * lmap_len ; <S2SV_ModStart> ( sb, sizeof ( * lvd )",0
722,"<S2SV_ModStart> long n ; image = 0 ; info = 0 ; <S2SV_ModStart> ""cannot <S2SV_blank> get <S2SV_blank> header\\n"" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ""cannot <S2SV_blank> get <S2SV_blank> info\\n"" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> 0, ( ""BMP <S2SV_blank> information: <S2SV_blank> %ld; <S2SV_blank> information: <S2SV_blank> %ld; <S2SV_blank> numplanes <S2SV_blank> %ld; <S2SV_blank> numplanes <S2SV_blank> %ld; <S2SV_blank> %ld; <S2SV_blank> %ld; <S2SV_blank> %ld; <S2SV_blank> %ld; <S2SV_blank> numplanes <S2SV_blank> %ld; <S2SV_blank> "" ""mincolors <S2SV_blank> %ld; <S2SV_blank> %ld; <S2SV_blank> numcolors <S2SV_blank> %ld; <S2SV_blank> "" ""mincolors <S2SV_blank> %ld\\n"", JAS_CAST ( long <S2SV_ModEnd>, info -> <S2SV_ModStart> info -> len ), JAS_CAST ( long <S2SV_ModStart> info -> width ), JAS_CAST ( long <S2SV_ModStart> info -> height ), JAS_CAST ( long <S2SV_ModStart> info -> depth ), JAS_CAST ( long <S2SV_ModStart> info -> enctype ), JAS_CAST ( long <S2SV_ModStart> info -> enctype ), JAS_CAST ( long <S2SV_ModEnd> ) ) ;",0
723,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> dev ), func <S2SV_ModEnd>, line, <S2SV_ModStart> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"", func <S2SV_ModEnd>, line,",1
724,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> ps_codec ->,0
725,,0
726,"<S2SV_ModStart> media_pad_desc pad ; memset ( & pad, 0, sizeof ( pad ) ) ;",0
727,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
728,<S2SV_ModStart> AcquireQuantumMemory ( pixels_length + image -> rows,0
729,"<S2SV_ModStart>, krb5_principal client_principal, const char * tgt_realm <S2SV_ModStart> principal ), tgt_realm <S2SV_ModEnd> ) ; if",1
730,"<S2SV_ModStart> ReadBlobLSBLong ( image ) ; if ( bmp_info. number_colors > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
731,<S2SV_ModStart> ; newinet -> inet_opt <S2SV_ModEnd> = ireq ->,1
732,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
733,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> skb_off_off ( skb,0
734,"<S2SV_ModStart> pfn, page_size >> PAGE_SHIFT",0
735,<S2SV_ModStart> 0x00 } ; if ( cmd -> msg_len > sizeof ( b ) - 4 ) return - EINVAL ;,1
736,<S2SV_ModStart> perf_event_context * ctx ; ctx = perf_event_ctx_lock <S2SV_ModEnd> ( event ),0
737,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ; return ( <S2SV_ModStart> ; } <S2SV_null>,0
738,<S2SV_ModStart> free_nid * e <S2SV_ModStart> ; int err = - EINVAL ; err = - EINVAL ; goto err_nid_tree_nid ; nid_tree_free_nid_nid_tree ( nid ) ; if ( free_nid ( e ) ) { err = - EINVAL ; goto err ; } err = nid_list_new ( e ) ; goto err ; } <S2SV_ModStart> ) ) goto err_free_tree_nid_nid_tree ( nid_nid <S2SV_ModEnd> ; i ->,0
739,<S2SV_ModStart> flags ) ; <S2SV_ModEnd> if ( ctx,0
740,"<S2SV_ModStart> ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> ++ cons ; netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> extra. type ) ; netbk_fatal_tx_err ( vif",1
741,<S2SV_ModStart> ) ) ; hdr -> sadb_msg_reserved = 0 ;,1
742,"<S2SV_ModStart> ) return ; memset ( & r1, 0, sizeof ( r1 ) ) ;",1
743,"<S2SV_ModStart> size ++ ; int n = 0 ; <S2SV_ModStart> ( & h <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( L, ""too <S2SV_blank> many <S2SV_blank> short"" ) ; n ++ <S2SV_ModStart> size"" ) ; n ++ ; <S2SV_ModStart> 1 ) ; n ++ ; <S2SV_ModStart> 1 ) ; n ++ ; <S2SV_ModStart> ( L2SV_null> <S2SV_null> <S2SV_null>",0
744,"<S2SV_ModStart> int ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
745,<S2SV_ModStart> ; int n ; if (! body -> unit_size ) break ; n,0
746,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
747,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ( src, <S2SV_ModEnd> ) ; if",0
748,<S2SV_ModStart> status = IMAP_FATAL ; } return,0
749,<S2SV_ModStart> return res ; <S2SV_ModEnd> return 0 ;,1
750,<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> ) ; } ext_size = sizeof ( struct ext4_extent_extentries ) ; memset ( bh -> b_data + ext_size ) ;,0
751,<S2SV_ModStart> ; if ( ptrh -> rpy <S2SV_ModEnd> ) (,0
752,<S2SV_ModStart> ; tga_ushort <S2SV_ModEnd> ( & tga,0
753,<S2SV_ModStart> ; if (! buf_size ) return - EINVAL ; if (,0
754,<S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
755,<S2SV_ModStart> ; uint32 nstrips <S2SV_ModEnd> ; nstrips =,1
756,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = 0 <S2SV_ModStart> ) ) ; msg -> msg_namelen = sizeof ( * sin ) ;",0
757,"<S2SV_ModStart> 2 ) ; if ( l2_const char * ) { l_log ( L, AV_LOG_ERROR, ""is <S2SV_blank> too <S2SV_blank> bigger: <S2SV_blank> many <S2SV_blank> %s"", __func__, lval ) ; return NULL ; }",0
758,<S2SV_ModStart> -> mmap_sem ) ; if (! error ) return - EINVAL,0
759,"<S2SV_ModStart> { umode_t mode <S2SV_ModEnd> ; error = <S2SV_ModStart> ; error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & mode <S2SV_ModStart>, & mode, & acl <S2SV_ModStart> if ( error <S2SV_ModEnd> ) return error <S2SV_ModStart> return error ; <S2SV_ModEnd> error = xfs_set_mode",1
760,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> structfs *,0
761,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
762,<S2SV_ModStart> it_overrun = - 1LL <S2SV_ModEnd> ; } ++,0
763,<S2SV_ModStart> = 0 ; c ->,0
764,<S2SV_ModStart> struct static_key * once_key <S2SV_ModEnd> ) { static <S2SV_ModStart> ; __net_random_once_disable_jump ( once_key <S2SV_ModEnd> ) ; return,1
765,<S2SV_ModStart> -> mmio_data ; if (! io_data_complete ( io_data -> kiocb ) ) { ret = - EINVAL ; goto fail ; } <S2SV_ModStart> -> mmio_data ) <S2SV_ModEnd> ; if (,0
766,<S2SV_ModStart> ; if ( IPCB ( skb ) -> flags & IPSKB_DOREDIRECT <S2SV_ModEnd> &&! opt,1
767,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
768,"<S2SV_ModStart> struct trusted_key_payload * p ; struct trusted_payload * datalen ; struct trusted_key_payload * datalen ; char * datalen = datalen ; char * datalen = datalen ; if (! test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) return - ENOKEY ; <S2SV_ModStart> 0 ] ; <S2SV_ModEnd> if (!",0
769,"<S2SV_ModStart> v |= ( JAS_CAST ( uint_fast32_t, c ) <S2SV_ModEnd> << 24 )",1
770,<S2SV_ModStart> NULL ) { if ( skb -> len < ROSE_CALL_REQ_ADDR_LEN ) { kfree_skb ( skb ) ; return ROSE_CALL_REQ_REQ ; } <S2SV_ModStart> ) ; } if ( ROSE_CALL_REQ_REQ_ADDR_LEN_OFF,0
771,"<S2SV_ModStart> srcu ) ; kvm_iommu_unmap_pages ( kvm, & old ) ; <S2SV_ModStart> ) goto out_free <S2SV_ModEnd> ; r = <S2SV_ModStart> ; if ( npages ) { r = kvm_iommu_map_pages ( kvm, & new ) ; if ( r ) goto out_slots ; } if ( <S2SV_ModStart> return 0 ; out_slots : kfree ( slots ) ;",1
772,<S2SV_ModStart> if ( indev && indev -> ifa_list <S2SV_ModEnd> ) { ifa,1
773,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
774,"<S2SV_ModStart> char * buff ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } buff",1
775,<S2SV_ModStart> } if ( data_bio!= NULL && <S2SV_ModEnd> } if (,0
776,<S2SV_ModStart> ( server. ds_enabled <S2SV_ModEnd> ) ; },0
777,<S2SV_ModStart> } if ( flags & 0 &&,0
778,<S2SV_ModStart> ; int rlen <S2SV_ModEnd> ; if ( <S2SV_ModStart> EOPNOTSUPP ; } if ( rlen > UINT32_MAX / 2 ) { ret = - EOPNOTSUPP ; goto out ; } <S2SV_ModStart> rlen ) ; <S2SV_ModEnd> return ret ;,0
779,<S2SV_ModStart> ; client ->,0
780,<S2SV_ModStart> book -> dim && i < n,1
781,"<S2SV_ModStart> * rd, <S2SV_ModEnd> rng )",0
782,<S2SV_ModStart> == - EEXIST || ret == - EOVERFLOW,1
783,<S2SV_ModStart> fp ) ; spin_lock ( & unix_gc_lock ) ; <S2SV_ModStart> unix_sk ( s <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <SV_null>,0
784,<S2SV_ModStart> size_t chanmap_size = SF_MIN ( <S2SV_ModStart> sf. channels ),0
785,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
786,<S2SV_ModStart> ms ) { uint32_t <S2SV_ModEnd> nestsize = ( <S2SV_ModStart> nestsize = ( uint32_t <S2SV_ModEnd> ) ms ->,1
787,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
788,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
789,<S2SV_ModStart> -> xrefs = safe_calloc ( <S2SV_ModEnd> sizeof ( xref_t,1
790,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> ) ; } if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
791,"<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ) <S2SV_ModStart> ( opt ) { atomic_sub ( & opt -> tot_len, & sk -> sk_omem_alloc ) ; }",0
792,"<S2SV_ModStart> ( ctx, NULL <S2SV_ModEnd> ) ) <",0
793,"<S2SV_ModStart> = 0 ; memset ( & opt, 0, sizeof ( * ) ) ;",0
794,<S2SV_ModStart> sctty_ops ) ; sctp_sys ( & sctp_sys_ops ) ;,0
795,,0
796,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
797,<S2SV_ModStart>!= mm ) { smp_mb ( ) ; <S2SV_ModStart> goto out ; } <S2SV_ModStart> ) ) ; smp_mb ( ) ;,1
798,<S2SV_ModStart>. npages = vpx_reader <S2SV_ModEnd> ( r ),0
799,<S2SV_ModStart> val ) { int temp_size = 500 ; char * temp = malloc ( temp_size ) <S2SV_ModEnd> ; temp_size =,0
800,<S2SV_ModStart> task ) { <S2SV_ModEnd> del_timer ( & <S2SV_ModStart> -> timer ) <S2SV_ModEnd> ; complete (,1
801,<S2SV_ModStart> ; } } if (,0
802,"<S2SV_ModStart> ) ) ; if <S2SV_ModEnd> ( errno == <S2SV_ModStart> == ENOMEM ) <S2SV_ModEnd> log_warn ( ""lldp""",0
803,<S2SV_ModStart> object + size < <S2SV_ModEnd> S2SV_null> <S2SV_null>,0
804,"<S2SV_ModStart> ( interface, KSZ8851_ERR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_P1 <S2SV_ModEnd> ) ; }",0
805,<S2SV_ModStart> all_channels_lock ) ; put_net ( pch -> chan_net ) ;,0
806,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> trfs2SV_null> struct btrfs_dir_item * di = NULL <S2SV_ModStart> - ENODEV ; if (! path ) return - ENODEV ; <S2SV_ModEnd> if (! <S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> if ( di <S2SV_ModStart>, path ) ) { if (! <S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> if ( di",0
807,<S2SV_ModStart> > 0xbf ) { <S2SV_ModStart> return 1 ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto err ; } <S2SV_ModStart> ) ) ) { <S2SV_ModStart> goto beach ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto beach ; },0
808,"<S2SV_ModStart> client -> proxy ) ; g_byte_array_free ( client -> auth_buffer, TRUE",1
809,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
810,<S2SV_ModStart> ; if ( key_is_negative ( key <S2SV_ModEnd> ) ) return,1
811,"<S2SV_ModStart> NEED_IP ( t, <S2SV_ModEnd> NEED_IP ( t <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, <S2SV_ModEnd> NEED_IP ( t, <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, <S2SV_ModEnd> NEED_OP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0",0
812,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( name <S2SV_ModStart> ) ; } } if ( name_len > INT_MAX - 1 ) { <S2SV_ModStart> ) ) ; },0
813,<S2SV_ModStart> { vpn_packet_t outpkt ; if ( len > sizeof outpkt. data ) return,1
814,<S2SV_ModStart> vmx_vpid_bitmap ) ; <S2SV_ModEnd> for ( msr <S2SV_ModStart> 0x83f ) ; <S2SV_ModEnd> if ( enable_ept,1
815,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,0
816,"<S2SV_ModStart> return 0 ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
817,<S2SV_ModStart> rc ; const VP9EncoderConfig <S2SV_ModEnd> * oxcf = <S2SV_ModStart> ++ rc -> avg_frame_bandwidth <S2SV_ModEnd> * oxcf ->,0
818,,0
819,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
820,<S2SV_ModStart> INDENT_INCR ; } if ( tbl -> indent < 0 ) tbl -> indent = 0 ; <S2SV_ModStart> -= INDENT_INCR ; if ( offset < 0 ) offset = 0 ;,1
821,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
822,"<S2SV_ModStart> : # line 113 <S2SV_ModEnd> ""hex_grammar.y"" break ; <S2SV_ModStart> } # line 113 <S2SV_ModEnd> ""hex_grammar.y"" break ; <S2SV_ModStart> } # line 122 <S2SV_ModEnd> ""hex_grammar.y"" break ; <S2SV_ModStart> } # line 126 <S2SV_ModEnd> ""hex_grammar.y"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""hex_grammar.y"" break ; <S2SV_ModStart> } # line 126 <S2SV_ModEnd> ""grammar.y""hex_grammar.y"" break ; <S2SV_ModStart> } # line 122 <S2SV_ModEnd> ""hex_grammar.y""hex_grammar.y"" break ;",0
823,"<S2SV_ModStart>, bp, <S2SV_ModEnd> ) ; }",0
824,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
825,<S2SV_ModStart> ; if ( key_is_positive ( key <S2SV_ModEnd> ) ) zap,1
826,"<S2SV_ModStart> ) -> filter ; memset ( & uf, 0, sizeof ( uf ) )",1
827,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
828,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> ) ; } exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
829,<S2SV_ModStart> -> peer. auth_capable = new -> peer. auth_capable ; asoc -> peer.,1
830,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
831,<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( cc,0
832,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ),0
833,"<S2SV_ModStart> input_data, size_t input_backwards_size, size_t input_backwards_size <S2SV_ModEnd>, int input_size <S2SV_ModStart> ; int max_matched ; max_bytes_matched = RE_FLAGS_BACKWARDS? input_backwards_size : input_backwards_size : 0 ; <S2SV_ModStart> |= input_backwards_size ; input_backwards_size = 0 ; input_backwards_size <S2SV_ModEnd> ; input_backwards_size <S2SV_ModStart> ( input, yr_backwards_size <S2SV_ModEnd>, & input_size <S2SV_ModStart> == 0 ) <S2SV_ModEnd> ; input =",0
834,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> int sse2SV_null> <S2SV_null> static <S2SV_ModStart> int sse2SV_null> static int <S2SV_ModEnd> rd_null> <S2SV_null>,0
835,"<S2SV_ModStart> svm, MC_VECTOR ) ; set_exception_intercept ( svm, AC_VECTOR",1
836,<S2SV_ModStart> = h ; <S2SV_ModEnd> if ( h,0
837,"<S2SV_ModStart> sst, root_storage <S2SV_ModEnd> ) ) {",0
838,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
839,<S2SV_ModStart> -> length ) ; if ( err ) return - EFAULT,1
840,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
841,<S2SV_ModStart> if ( prev && <S2SV_ModEnd> ( fq ) <S2SV_ModStart> ) goto discard <S2SV_ModEnd> ; if ( <S2SV_ModStart> > 0 ) goto discard_fq ; <S2SV_ModEnd> if (,0
842,<S2SV_ModStart> { uint16 bitspersample = 1,0
843,"<S2SV_ModStart> 0 ; } if ( * p == '\\0' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FAILURE ) ; return - EINVAL ; } if ( <S2SV_ModStart> ) ) { archive_set_copy ( & a -> archive, a -> archive, a -> archive, ARCHIVE_INVALIDDATA ) ; return ( - 1 ) ; } if ( r < 0 ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, ""No <S2SV_blank> too <S2SV_blank> large"" ) ; return ( - 1 ) ; } <S2SV_ModEnd> return ( - 1",0
844,"<S2SV_ModStart> ; if ( safe_mount ( hostpath, path, 0, MS_BIND, NULL, rootfs -> path? rootfs -> mount : <S2SV_ModEnd> NULL )!=",1
845,<S2SV_ModStart> uint8_t i ; if ( i + iinfo -> i_len > bs ) goto out ; <S2SV_ModStart> ) goto out ; } if ( iov_len < iov_base ) { if ( iov_len > bh -> i_len ) goto out ; } <S2SV_ModStart> ) { if ( iov_len < iov_len ) goto out ; } <S2SV_ModStart> ) ) { if ( iov_base ) { if ( iov_len < bs ) goto out ; },0
846,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( lfm,",0
847,<S2SV_ModStart> dst_data ) { <S2SV_ModEnd> struct gb_data * <S2SV_ModStart> ; if ( data_size < 1 ) return - 1 ; <S2SV_ModEnd> data2SV_null> <S2SV_null>,0
848,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_line_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) ; <S2SV_ModStart> t1_buf_array, t1_line_array ) ; alloc_array ( t1_line, strlen ( t1_buf_array ) + 1, T1_BUF_SIZE",1
849,<S2SV_ModStart> mq_ops ) { struct blk_mq_hw_ctx * hctx ; <S2SV_ModStart> first_rq ; } hctx = first_rq -> tag ;,0
850,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
851,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
852,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF <S2SV_ModStart> / 2 ; if (! <S2SV_ModStart>, cc ) ) return 0 <S2SV_ModStart> wc ) ; return 1 ;",1
853,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
854,<S2SV_ModStart> ; int err ; struct ip_options_rcu * inet_opt <S2SV_ModStart> return 0 ; rcu_read_lock ( ) ; if (,0
855,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
856,<S2SV_ModStart> * mhdl ; <S2SV_ModEnd> memset ( s_path <S2SV_ModStart> ( s_path ) <S2SV_ModEnd> ) ; if,0
857,<S2SV_ModStart> || pCmdData == NULL || replySize,0
858,"<S2SV_ModStart> ""`%s\'"", option ) ; page_geometry = DestroyString ( page_geometry",1
859,"<S2SV_ModStart> = 0 ; memset ( & opt, 0, sizeof ( * ) ) ;",0
860,<S2SV_ModStart> ; if ( key_is_bytes < 0 ||,0
861,"<S2SV_ModStart> OP_ENDCATCH ) ; emit ( J, OP_ENDTRY ) ;",0
862,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_row_idx <S2SV_ModStart> return ; } LIBXSMM_ASSERT ( 0!= l_row && 0!= l_column ) ;",1
863,<S2SV_ModStart> ]. len <S2SV_ModEnd> ) ; },0
864,"<S2SV_ModStart> uint32 length ; struct stream packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_response(), <S2SV_blank> consume <S2SV_blank> consume <S2SV_blank> stream <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
865,"<S2SV_ModStart> ; cleanup : if ( status == NULL ) status = ""UNKNOWN_REASON"" <S2SV_ModEnd> ; if (",1
866,"<S2SV_ModStart> l ) ; <S2SV_ModEnd> } } if <S2SV_ModStart> XML_ERR_NAME_TOO_LONG, ""Name"" ) ; return ( NULL ) ; } if ( ctxt -> input -> cur - ctxt -> input -> base < len ) { xmlFatalErr ( ctxt, XML_ERR_INTERNAL_ERROR, ""unexpected <S2SV_blank> change <S2SV_blank> of <S2SV_blank> input <S2SV_blank> buffer""",1
867,"<S2SV_ModStart> i ] ; memset ( ci, 0, sizeof ( h ) ) ;",0
868,<S2SV_ModStart> * rsize >= 18 <S2SV_ModEnd> && rdesc [,1
869,<S2SV_ModStart> & new_map ) <S2SV_ModEnd> ) goto out,0
870,<S2SV_ModStart> ; } } if (!,0
871,"<S2SV_ModStart> sr ) { <S2SV_ModEnd> uint16_t StructSize ; <S2SV_ModStart> ) ; } smb_ofile_flush ( sr, <S2SV_ModEnd> sr -> fid_ofile <S2SV_ModStart> sr -> fid_ofile <S2SV_ModEnd> ) ; (",1
872,,0
873,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } else {,0
874,"<S2SV_ModStart> addrtype = TIPC_ADDR_ID ; memset ( & addr -> addr, 0, sizeof ( addr -> addr ) )",1
875,"<S2SV_ModStart> ( user_alloc && ( <S2SV_ModStart> PAGE_SIZE - 1 ) ) ||! access_ok ( VERIFY_WRITE, mem -> userspace_addr, mem -> memory_size",1
876,"<S2SV_ModStart> 6 ) ) { MATLAB_KO : clone_info = DestroyImageInfo ( clone_info ) ; <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart> ""ImproperImageHeader"" ) ; }",0
877,<S2SV_ModStart> } if ( tmp_line_len >= 1 && <S2SV_ModStart> ; if ( tmp_line_len >= 1 && <S2SV_ModStart> ; } } \\\n} <S2SV_ModEnd> if ( strncasecmp,1
878,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> u ) { uint8 <S2SV_ModEnd> t * <S2SV_ModStart> goto out ; <S2SV_ModStart> ; if ( len = <S2SV_ModStart> goto out ; } if ( len == '\\0' ) { if ( * out == NULL ) { return 0 ; } else { * out = ( * ) ; * out = malloc ( * ) ; if (! buf ) { if ( * ) return NULL ; } else { int len = ( char * ) buf + 1 ; if ( * ) { if ( * out == NULL ) { * s = malloc ( * ) ; if (! buf ) { return NULL ; } else { * out = malloc ( * ) ; if ( len = malloc ( * ) ; if (! buf ) return NULL ; } else { * out = len ; } else { int len = len ; if ( * out == 0 ) { int len = 0 ; if ( * out == '0' ) { return 0 ; } else { int len = len ; if ( * outbuf + len = len ; if ( * out == 0 ) goto out ; } <S2SV_ModEnd> if (,0
879,<S2SV_ModStart> == 0 ) { <S2SV_ModStart> return SEC_ERR_INVALID ; },0
880,"<S2SV_ModStart> WaveHeader WaveHeader ; int format_chunk = 0 ; <S2SV_ModStart>, format ; if ( format_chunk ++ ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",1
881,"<S2SV_ModStart> char * buff ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } buff",0
882,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_8BITS ( tptr ) ;,0
883,<S2SV_ModStart> ~ SNDRV_TIMER_RUNNING ; list_del_init ( & timeri -> active_list ) ;,0
884,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> char * cp <S2SV_ModStart>, void * cp <S2SV_ModEnd>, void * <S2SV_ModStart> = 0 ; <S2SV_ModEnd> strcmp ( void",0
885,<S2SV_ModStart> else if ( anope_flags_compat && <S2SV_ModStart> else if ( anope_flags_compat && <S2SV_ModStart> else if ( anope_flags_compat &&,1
886,<S2SV_ModStart> -> buffer ; if (! ctx -> gf128 ) return - ENOKEY ;,1
887,"<S2SV_ModStart> ; if ( strcmp ( sub_demuxer -> name, ""srt"" ) && strcmp ( sub_demuxer -> name, ""ass"" ) ) goto error ; if (",1
888,<S2SV_ModStart> if (! inbuf ) { kfree ( appl_version ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> if (!,0
889,"<S2SV_ModStart> wvpx_write_bit_literal <S2SV_ModEnd> ( w,",0
890,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; } ret",1
891,<S2SV_ModStart> dptr ++ = ROSE_CALL_REQ_ADDR_LEN_VAL <S2SV_ModEnd> ; memcpy (,1
892,<S2SV_ModStart> = new_ns ; new_ns -> mounts ++ ;,1
893,"<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cbi,",0
894,<S2SV_ModStart> ; zip_object_handlers. get_gc = php_zip_get_gc ; zip_object_handlers.,1
895,<S2SV_ModStart> mem -> iova || iova > <S2SV_ModEnd> mem -> iova,0
896,"<S2SV_ModStart> ( ndo, ""%s"", icmp6_tstr <S2SV_ModEnd> ) ) ;",0
897,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",1
898,<S2SV_ModStart> sent = 0 <S2SV_ModEnd> ; smb_msg.,1
899,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> buffer_pipe_buf_get ( struct <S2SV_ModStart> -> private ; if ( ref -> ref > INT_MAX / 2 ) return false ; <S2SV_ModStart> ref ++ ; return true ;,1
900,<S2SV_ModStart> fs -> clusters + <S2SV_ModEnd> 1 ) get_fat,1
901,<S2SV_ModStart> * tl ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( t_left,0
902,<S2SV_ModStart> sk_nulls_node ) ; sk_nulls_node_init ( & sk -> sk_nulls_node ) ;,1
903,<S2SV_ModStart> ) return ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
904,<S2SV_ModStart> (! mm ||! mm -> env_end,1
905,"<S2SV_ModStart> inode * inode, int relocated ) { int relocated = relocated? 0 : 0 ; <S2SV_ModStart>, inode, flags <S2SV_ModEnd> ) ; }",0
906,<S2SV_ModStart> -> private_data ; struct gfs_group * group = 0 <S2SV_ModStart> = 0 ; for ( i = 0 ; i <S2SV_null>,0
907,<S2SV_ModStart> [ p ] && in -> linesize [ p ],1
908,,0
909,<S2SV_ModStart> vpx_free <S2SV_ModEnd> ) ) {,0
910,"<S2SV_ModStart> SCALAR_VALUE ) { coerce_reg_to_size ( & <S2SV_ModStart> [ value_regno ], size <S2SV_ModEnd> ) ; }",1
911,"<S2SV_ModStart> = 0 ; uint32 <S2SV_ModEnd> strip, nstrips",1
912,<S2SV_ModStart> base_name ) ; char need_to_append_dot ; base_name = base_len ; if (! base_len ) return NULL ;,0
913,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
914,<S2SV_ModStart> goto out ; <S2SV_ModEnd> err = -,1
915,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> * sizeof ( <S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> ; pixels =",0
916,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> UINT32 originalSize ; if (! context ) return FALSE ; <S2SV_ModStart> < originalSize ) { if (! context -> priv -> PlaneBuffersLength < originalSize ) return FALSE ; } return FALSE ;,0
917,<S2SV_ModStart> policy ) { if (! inode_owner_or_capable ( inode ) ) return - EACCES ;,1
918,"<S2SV_ModStart> state, path <S2SV_ModEnd> ) ; }",0
919,<S2SV_ModStart>. ctx. key_size <S2SV_ModEnd> ) ; if,0
920,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ; } * addr_len = sizeof ( * sin6 ) ;,0
921,"<S2SV_ModStart> ) ) ) { applog ( LOG_WARNING, ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> header <S2SV_blank> %s"", __func__, header_len ) ; <S2SV_ModStart> cb_free ( pool ) ; return false ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
922,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
923,"<S2SV_ModStart> size ) { size_t res ; if ( check_mul_overflow ( num, size, & res ) ) abort ( ) ; <S2SV_ModStart> = malloc ( res <S2SV_ModEnd> ) ; if",0
924,<S2SV_ModStart> ioc ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
925,<S2SV_ModStart> Py_o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } if,0
926,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return - EINVAL,0
927,"<S2SV_ModStart> event ) { struct perf_event_context * ctx ; unsigned long ret ; ctx = perf_event_ctx_lock ( event, ctx ) ; if (! ctx ) { perf_event_ctx_unlock ( event, ctx ) ; return ret ; } <S2SV_ModEnd> } <S2SV_null>",0
928,<S2SV_ModStart> sacked_out ) ; if (! new_snd ) return ;,0
929,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_mode ( VP9_COMMON <S2SV_ModStart> * cm, MACROBLOCKD * xd, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> ) { const PREDICTION_MODE <S2SV_ModEnd> y_mode = read_intra_mode",0
930,<S2SV_ModStart> mask ) { struct skcipher_tfm * tfm = kzalloc ( sizeof ( * tfm ) ; if (! tfm ) return - ENOMEM ; kfree ( tfm ) ;,0
931,<S2SV_ModStart> case VP9_COMMON : if ( ctx -> ctx. type == NULL ) return - EINVAL ; <S2SV_ModStart> ) return - 1 <S2SV_ModEnd> ; } if,0
932,"<S2SV_ModStart> c -> tile_width <S2SV_ModEnd>, 16 ) <S2SV_ModStart>, 16 ) * 3",1
933,<S2SV_ModStart> ; if ( key_keylen < 0 ) return NULL,0
934,,1
935,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
936,"<S2SV_ModStart> p ) { return <S2SV_ModEnd> chdlc_print ( ndo <S2SV_ModStart>, p, h -> len <S2SV_ModEnd> ) ; }",1
937,<S2SV_ModStart> (! rc <S2SV_ModEnd> && tcon ),1
938,<S2SV_ModStart> ; if ( skb_is_err_queue ( skb ) &&,0
939,"<S2SV_ModStart> ) ) ; raptor_sax2_set_option ( rdf_parser -> sax2, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES, NULL, RAPTOR_OPTIONS_GET_NUMERIC ( rdf_parser, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES ) ) ;",0
940,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
941,<S2SV_ModStart> { return SECURE_ELEMENT_ERROR_NPE ; } if ( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE ) { return SECURE_ELEMENT_ERROR_BUF_SIZE,1
942,"<S2SV_ModStart> + 1 ; if ( iframe -> max_encoder -> max_settings ) { avpriv_log ( rv, NGHTTP2_SETTINGS ) ; return rv ; } if (",0
943,<S2SV_ModStart> = new_ns ; new_ns -> mounts ++ ;,0
944,"<S2SV_ModStart> += dif ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
945,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
946,<S2SV_ModStart>. dimensions ; unsigned int actual_size = rtype == 2? r -> end : actual_size ; unsigned int limit_r_r_end = r -> end < actual_size? r -> end : actual_size ; unsigned int limit_r_end = ( r -> end < actual_size? r -> end : actual_size ) ; unsigned int limit_r_r_begin = ( r -> end < actual_size? r -> end : actual_size ) ; actual_size = ( r -> end < actual_size? r -> end : actual_size ) ; actual_size = ( r -> end < actual_size? r -> end : actual_size ) ;,0
947,"<S2SV_ModStart> ) ) { u32 count = task_challenge_read_lock ( sysctl_t ) ; <S2SV_ModStart> ) ) { WRITE_ONCE ( challenge_count, count, 1 ) ; <S2SV_ModStart> limit ++ ; }",0
948,"<S2SV_ModStart> struct llc_pktinfo info ; memset ( & info, 0, sizeof ( info ) )",1
949,"<S2SV_ModStart> b, const vpx_writer * w, const struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> 0 ) { const vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart>!= NULL ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
950,"<S2SV_ModStart> filter, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart>!= NULL ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
951,<S2SV_ModStart> * name ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
952,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> encode_descriptor ( struct <S2SV_ModStart> ; int num_descriptor ) { ret = - EINVAL ; goto invalid_descriptor ; } if ( hdesc -> bNumEndpoints < sizeof ( struct hid_descriptor ) { hid_descriptor ( hdesc -> bNumDescriptor, ""too <S2SV_blank> short"" ) ; return - EINVAL ; } hdesc -> bNumEndpoints < sizeof ( struct hid_descriptor ) ;",0
953,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_null> static <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_16BITS ( & dlen ) ; <S2SV_ModStart>, len ) ; <S2SV_ModEnd> ND_PRINT ( ( (",0
954,"<S2SV_ModStart> ) ) ; task_exit_context ( tsk, tsk ) ; if ( tsk -> tsk ) exit_dead_exit ( tsk ) ; exit_dead ( tsk ) ; exit_dead ( tsk -> tsk ) ; exit_dead ( tsk ) ; exit_dead ( tsk ) ; tty_exit ( tsk ) ; exit_dead ( tsk ) ; exit_dead ( tsk ) ; exit_dead ( tsk ) ; exit_exit ( tsk ) ; tsk -> tsk ) ; exit_dead ( tsk ) ; exit_dead ( tsk -> tsk ) ; exit_exit ( tsk ) ; tsk -> tsk ) ; exit_exit ( tsk ) ;",0
955,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void *",0
956,<S2SV_ModStart> ; j = 0 <S2SV_ModEnd> ; } if,0
957,<S2SV_ModStart> ) ; } usb_free_urb ( urb ) ;,0
958,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> j2SV_null> <S2SV_null> static j2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 1 ) { j2SV_null> <S2SV_null>,0
959,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
960,<S2SV_ModStart> ) val ; <S2SV_ModEnd> memset ( ptr,1
961,<S2SV_ModStart> mnt_mount ( path -> mnt. mnt_mount <S2SV_ModEnd> ) ; },0
962,"<S2SV_ModStart> PHP_SHA512_CTX context ; if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error, ""broken <S2SV_blank> signature"" ) ; } <S2SV_ModStart> PHP_CTX context ; } <S2SV_ModStart> PHP_SHA512_CTX context ; if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error, "" digest_len= <S2SV_blank> signature"" ) ; return FAILURE ; } } <S2SV_ModStart> PHP_SHA1_CTX context ; if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error, ""Mac <S2SV_blank> signature"" ) ; } } return FAILURE ; } }",0
963,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
964,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
965,<S2SV_ModStart> if ( argReg > <S2SV_ModEnd> regsz ) {,0
966,"<S2SV_ModStart> req_val ) ; if (! rb_check_str_str ( rb, ""user_val"" ) ) return - EINVAL ;",0
967,<S2SV_ModStart> ( args -> rmtvaluelen <S2SV_ModEnd> ) ; xfs_trans_log_buf,0
968,<S2SV_ModStart> return ; } size_t count = 0 ;,0
969,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
970,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) &&! test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) &&",1
971,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
972,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
973,<S2SV_ModStart> ; if (! EXT4_SB ( inode -> i_sb ) -> s_journal <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd>! handle ),1
974,"<S2SV_ModStart> char * str <S2SV_ModEnd> ; char * <S2SV_ModStart> = str ; if (! str ) return NULL ; dval = strlen ( dval ) ; if (! str ) return NULL ; dval = strcpy ( str, '\\n"" ) ; if ( result == '\\0' || strlen ( str ) - 1 ) { strcpy ( str, '\\0' ) ; return NULL ; } } else strcpy ( result ) ; return NULL ; } <S2SV_ModEnd> } else",0
975,"<S2SV_ModStart> ( f, ""PG%31[ <S2SV_blank> \\t]%c%d%31[ <S2SV_blank> \\t]%31[ <S2SV_blank> [ <S2SV_blank> \\t]%d%d%31[ <S2SV_blank> \\t]%31[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp,",0
976,"<S2SV_ModStart> ) ; } memcpy ( result, & result, 0, sizeof ( result ) ) ; if ( result < 0 ) return result ; char * result ; memcpy ( result, 0, sizeof ( result ) ) ; if ( result == 0 ) { result = '\\0' ; }",0
977,<S2SV_ModStart> ; if ( <S2SV_ModEnd>!= 0 ),0
978,"<S2SV_ModStart> str ) ; strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, len <S2SV_ModEnd> ) ; }",0
979,"<S2SV_ModStart> char * to = g. g. inf ; size_t <S2SV_ModEnd> = """" ; <S2SV_ModStart> NULL ) { if ( <S2SV_ModEnd> ( g. <S2SV_ModStart> g. len > 0 ) { sufx = justname ( g. hname + sufx ) ; } else if ( <S2SV_ModEnd> char * <S2SV_ModStart> = sufx ) <S2SV_ModEnd> ( g. <S2SV_ModStart> = sufx ) ; <S2SV_ModEnd> } else sufx =",0
980,,1
981,<S2SV_ModStart> char * filename <S2SV_ModEnd> ; char *,0
982,<S2SV_ModStart> svc_ctx ) { SvcInternal_t <S2SV_ModEnd> * si ;,0
983,"<S2SV_ModStart> ( sb, KERN_ERR,",1
984,"<S2SV_ModStart> passwd * pwd, const char * prefix <S2SV_ModStart> = NULL ; <S2SV_ModEnd> pw_init ( ) <S2SV_ModStart> & tmpname, ""/etc"", prefix <S2SV_ModEnd> ) ) ==",1
985,,0
986,"<S2SV_ModStart> s ) { memcpy <S2SV_ModEnd> ( s2,",0
987,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
988,<S2SV_ModStart> 0 ) { int class = <S2SV_ModEnd> getClientTypeByName ( v <S2SV_ModStart> j ] ) ; if ( class <S2SV_ModStart> == - 1 || class == CLIENT_TYPE_MASTER,1
989,<S2SV_ModStart> * name ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
990,"<S2SV_ModStart> NULL ) { if (! options -> log_options ) { log_defaults ( LOG_WARNING, ""Loading <S2SV_blank> open <S2SV_blank> defaults"" ) ; return - 1 ; } <S2SV_ModStart> ) ; } <S2SV_ModStart> NULL ) ; } # endif",0
991,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; BT_DBG (,1
992,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
993,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } if (,0
994,<S2SV_ModStart> } else { if ( ps_dec -> u4_total_mbsize == ps_dec -> u4_total_mbs ) { return ERROR ; },0
995,<S2SV_ModStart> * zone ; size_t tilemap_size ; <S2SV_ModStart> * tilemap_size ; tilemap_size = malloc ( tilemap_size * x_size / sizeof ( struct map_tile ),0
996,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_printroute ( netdissect_options <S2SV_ModStart> ) ; return ( 0 ) <S2SV_ModEnd> ; } <S2SV_null>,0
997,<S2SV_ModStart> string ) { size_t <S2SV_ModEnd> return 0 ;,0
998,<S2SV_ModStart> ( ctx ->,0
999,<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_int,0
1000,<S2SV_ModStart> if ( chunk_num >= <S2SV_ModEnd> chm -> num_chunks,1
1001,"<S2SV_ModStart>! validate_event ( event -> pmu, <S2SV_ModStart>! validate_event ( event -> pmu,",0
1002,<S2SV_ModStart> 0 ) ; if (! r ) return NULL ;,0
1003,"<S2SV_ModStart> VOS_STARTCODE ) { int profile, level ; <S2SV_ModStart> s, gb, & profile, & level ) ; if ( <S2SV_ModEnd> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO <S2SV_ModStart> FF_PROFILE_MPEG4_SIMPLE_STUDIO && ( <S2SV_ModEnd> level > 0",0
1004,<S2SV_ModStart> nsops < 1 || nsops > SEMOPM,1
1005,,0
1006,<S2SV_ModStart> < INDIRECT_BLOCKS ) { <S2SV_ModStart> ] ) ; },1
1007,<S2SV_ModStart> ] ) ; if ( i >= sizeof ( struct i + 1 ) ) return - 1 ;,0
1008,<S2SV_ModStart> >> 2 ; if ( q + o >= e ) goto out ;,0
1009,<S2SV_ModStart> ++ ) { <S2SV_ModEnd> if ( i,0
1010,"<S2SV_ModStart> len ) { assert ( len < 2 ) ; <S2SV_ModStart> case LEX_STR : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""STRING"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_ID : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""INT"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_STR : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""STRING"" <S2SV_ModEnd> ) ; return",0
1011,"<S2SV_ModStart> mnt_instance ) ; if ( unlikely (! list_empty ( & mnt -> mnt_mounts ) ) ) { struct mount * p, * tmp ; list_for_each_entry_safe ( p, tmp, & mnt -> mnt_mounts, mnt_child ) { umount_mnt ( p ) ; } }",1
1012,"<S2SV_ModStart> wb_data ) ; vpx_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> w ) ; vpx_read_literal <S2SV_ModEnd> ( wb,",0
1013,,1
1014,<S2SV_ModStart> goto not_found ; if ( e - p > HOST_NAME_MAX - 1 ) goto not_found ;,0
1015,<S2SV_ModStart> ; int err <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> uint32_t pos ; if ( inode -> i_size > inode -> i_sb -> s_blocksize ) { err = - ENOMEM ; goto out_unlock ; } <S2SV_ModStart>! bh ) { err = - ENODEV ; goto out_unlock_inode <S2SV_ModEnd> ; } out_unlock,0
1016,<S2SV_ModStart> ) { if ( cpu_has_secondary_exec_ctrls ( SECONDARY_EXEC_VMAPIC_EXEC_MASK ) <S2SV_ModEnd> ) { if,0
1017,<S2SV_ModStart> if ( ent == NULL ) { st = KRB5_KDB_NOENTRY ; <S2SV_ModEnd> goto cleanup ;,0
1018,<S2SV_ModStart> 1 ) ; if ( ps_codec -> i4_buf_idx > ps_codec -> i4_max_size ) { return ERROR ; },0
1019,<S2SV_ModStart> int b_size ; int bp_blocks = 0 ; <S2SV_ModStart> ) ) { if (! bp -> b_blocks ) goto out_free ;,0
1020,<S2SV_ModStart> ) ) { return AVERROR_INVALIDDATA <S2SV_ModEnd> ; } <S2SV_null>,0
1021,<S2SV_ModStart> ; if ( <S2SV_ModEnd> S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1022,"<S2SV_ModStart> break ; } memset ( & cinfo, 0, sizeof ( cinfo ) ) ;",1
1023,<S2SV_ModStart> AcquireQuantumMemory ( pixels_length + image -> rows,0
1024,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 0 ;,0
1025,"<S2SV_ModStart> int num_items_scanned ; guint pkt_len ; int <S2SV_ModEnd> pktnum, hr <S2SV_ModStart> + 64, ""LEN=%9u"" <S2SV_ModEnd>, & pkt_len",0
1026,<S2SV_ModStart> ; int err = 0 ; msg -> msg_namelen,1
1027,"<S2SV_ModStart> ; if ( zend_hash_find <S2SV_ModEnd> ( ht,",1
1028,"<S2SV_ModStart> ) ) ; nla_strlcpy <S2SV_ModEnd> ( link_info. <S2SV_ModStart> TIPC_NLA_LINK_NAME ] ), TIPC_MAX_LINK_NAME",1
1029,<S2SV_ModStart> ; } } io -> io_cleanup = NULL ; io_cleanup ( io ) ;,0
1030,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",1
1031,<S2SV_ModStart> p -> tokenpos >= ( <S2SV_ModEnd> p -> tokenlen <S2SV_ModStart> p -> tokenlen - 1 ),1
1032,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> void vp9_zero ( void ) { vpx_reader <S2SV_ModEnd> ( vp8x8x8x8, <S2SV_ModStart> ) ; } # if CONFIG_VP9_HIGHBITDEPTH switch ( vpx_bit <S2SV_ModEnd> ) { case <S2SV_ModStart> ) ; }",0
1033,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
1034,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ; } <S2SV_ModStart> pb ) ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ; },0
1035,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
1036,"<S2SV_ModStart> ( arg, NULL <S2SV_ModEnd>, NULL,",0
1037,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
1038,"<S2SV_ModStart> -> stratum_port ; snprintf ( address, 254 <S2SV_ModEnd>, ""%s:%s"",",1
1039,"<S2SV_ModStart> ) ; } if (! strcmp ( page_name, page_name_name ) ) { <S2SV_ModEnd> { if ( <S2SV_ModStart> ) return 1 ; } <S2SV_ModEnd> } if (",0
1040,<S2SV_ModStart> + i ; unsigned int limit_end = r -> begin < actual_size? r -> end : actual_size ; unsigned int limit_r_end = r -> end < actual_size? r -> end : actual_size,0
1041,<S2SV_ModStart> head -> iov_base ; if ( hdr > head -> iov_len ) return 0,1
1042,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> cl_nodes_lock ) ; o2nm_unlock_subsystem ( ) ;,1
1043,<S2SV_ModStart> vpx_codec_buf_t * wb_bit_buffer <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> vpx_wb_free ( buf,0
1044,<S2SV_ModStart> size ) { ASSERT_NO_SIZE_OVERFLOW ( size ) ;,1
1045,<S2SV_ModStart> ; ssize_t count ; if ( bytes == 0 || items == 0 ) return 0,1
1046,,0
1047,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = key_permission,0
1048,"<S2SV_ModStart> - EINVAL ; memset ( & sb, 0, sizeof ( sb ) ) ;",0
1049,<S2SV_ModStart> (! e <S2SV_ModEnd> ) ; if,0
1050,"<S2SV_ModStart> r ) { if ( X509_ALGOR_cmp ( a -> sig_alg, a -> cert_info -> signature ) ) return 0 ;",1
1051,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return - EINVAL,0
1052,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1053,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> r2SV_null> L2CAP_MODE_CONFIG ; <S2SV_ModStart> case L2CAP_MODE_DEFAULT : if (! rfc ) return - 1 ; <S2SV_ModStart> ) ; } memset ( rfc, 0, sizeof ( rfc ) ) ;",0
1054,"<S2SV_ModStart> = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, ret )",0
1055,<S2SV_ModStart> -> filesize == UINT64_MAX <S2SV_ModEnd> ) { s,0
1056,<S2SV_ModStart> } if ( ( ps_dec -> u1_total_mbsize == 0 ) &&,0
1057,<S2SV_ModStart> } else {,0
1058,<S2SV_ModStart> } err = crypto_rng_alg ( tfm ) <S2SV_ModEnd> -> seed (,1
1059,<S2SV_ModStart> = uid ; <S2SV_ModEnd> new -> count <S2SV_ModStart> new -> count = 1 <S2SV_ModEnd> ; spin_lock_irq (,0
1060,<S2SV_ModStart> ) ; } if ( err == 0 ) { err = err ; goto out_put ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1061,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1062,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1063,<S2SV_ModStart> ; if ( ( ext4_inode -> i_sb ) &&,0
1064,"<S2SV_ModStart> * delegation, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> -> type & fmode, fmode <S2SV_ModEnd> ) ; if",0
1065,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1066,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
1067,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void oidc_scrub_headers (,1
1068,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> int sse2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_row, int mi_col, int64_t <S2SV_ModEnd>, int64_t <S2SV_ModStart>, int mi_row, int mi_col, 0, sizeof ( * bsize ) <S2SV_ModEnd> ) ; if <S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if (! ( xd -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> flags & YV12_FLAG_HIGHBITDEPTH ) return - 1 ; } else { <S2SV_ModStart> ) ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) return 1 ; }",0
1069,<S2SV_ModStart> ; if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),0
1070,<S2SV_ModStart> ND_TCHECK ( * tptr <S2SV_ModEnd> ) ; ND_PRINT,0
1071,<S2SV_ModStart> ] == NULL || * p == NULL ) return EINVAL ; if ( <S2SV_ModStart> return 1 ; } if ( ptr == NULL ) return AVERROR_INVALIDDATA ;,0
1072,"<S2SV_ModStart> int segment_id, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> { if ( segfeature_active <S2SV_ModEnd> ( r,",0
1073,<S2SV_ModStart> ; uint32_t backup_handle = 0 <S2SV_ModStart> ret == 0 ) { if ( <S2SV_ModEnd> res -> backup <S2SV_ModStart> goto out_unlock ; } else { backup_handle = req -> buffer_handle ; },1
1074,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> struct * out, bool success <S2SV_ModEnd> ) { struct <S2SV_ModStart> * out ; return false <S2SV_ModEnd> ; } <S2SV_null>",0
1075,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr1,",0
1076,"<S2SV_ModStart> final_p, final ; struct ipv6_txoptions * opt <S2SV_ModStart>, final ) ; opt = rcu_dereference_protected ( np -> inet_opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> return 0 ; }",0
1077,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1078,,0
1079,"<S2SV_ModStart> = conn ; <S2SV_ModEnd> g_debug ( ""GsmXSMPClient: <S2SV_blank> Initializing <S2SV_blank> client <S2SV_blank> %s""",1
1080,<S2SV_ModStart> >= 0 && <S2SV_ModEnd> ND_TTEST ( *,0
1081,"<S2SV_ModStart> ( interface, ENC624J600_EIR <S2SV_ModEnd> ) ; status <S2SV_ModStart> ( interface, KSZ8851_EIR_LINKIF <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_EIR <S2SV_ModEnd> ) ; }",0
1082,<S2SV_ModStart> ; if ( key_is_key <S2SV_ModEnd> ( key ),0
1083,<S2SV_ModStart> } if ( assoc_array_ptr_is_leaf ( ptr ) &&,0
1084,<S2SV_ModStart>. udpport = 0 <S2SV_ModEnd> ; settings.,1
1085,<S2SV_ModStart> flush ) ; <S2SV_ModEnd> if (!,0
1086,"<S2SV_ModStart> x0, y, vpx_bit_t <S2SV_ModEnd> * y1, <S2SV_ModStart> 0x0x0, jas_matind_t <S2SV_ModEnd> * x0, <S2SV_ModStart> 0 ) { if ( x == xd && j < xd ) { <S2SV_ModStart> 0 ) ; }",0
1087,<S2SV_ModStart> clips_ptr ) { if ( num_clips < 0 || num_clips > DRM_MODE_FB_DIRTY_MAX_CLIPS ) { ret = - EINVAL ; goto out_err1 ; },1
1088,<S2SV_ModStart> ; if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1089,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1090,<S2SV_ModStart> 0 ) ; int minsz = R_MAX ( j + 1 ) ; <S2SV_ModStart> ; j < len ; j ++ <S2SV_ModStart>!= UT64_MAX ) { <S2SV_ModStart> val ) ; } <S2SV_ModStart> val ) { <S2SV_ModStart> val ) ; },0
1091,<S2SV_ModStart> char * file = NULL <S2SV_ModEnd> ; int i <S2SV_ModStart> ) ; goto out <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; goto out <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; goto out <S2SV_ModEnd> ; } while <S2SV_ModStart> ) ; } } close ( fd ) ; return - 1 ;,0
1092,<S2SV_ModStart> + JQ_DATA_BUFF ; head > size ; tail = readw ( head ) ; tail = readw ( head + JQS_wHead + JQS_wHead ) ; size = readw ( head ) ; tail = readw ( head + JQS_wHead ) ; if ( head > size ) head = readw ( head ) ; tail = readw ( head + JQS_wHead ) ; if ( head > size ) head = readw ( head + JQS_wHead ) ; writew ( head ) ; tail : size = readw ( head + JQS_wHead ) ; if ( head > head > size ) goto out ; if ( head > size ) head > size ) goto out ;,0
1093,<S2SV_ModStart> -> private_data ; <S2SV_ModEnd> if ( op,0
1094,<S2SV_ModStart> acpi_status status ; <S2SV_ModEnd> acpi_operand_object * <S2SV_ModStart> acpi_operand_object * acpi_operand_object * ns <S2SV_ModEnd> ) ; if,0
1095,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
1096,<S2SV_ModStart> [ sizeof ( the_url <S2SV_ModEnd> ) - 1,0
1097,,0
1098,<S2SV_ModStart>. ctx. key_size <S2SV_ModEnd> ) ; if,0
1099,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ; if (! ( <S2SV_ModEnd> vpx_codec_alg_priv_t * ) { <S2SV_ModStart> return 0 ; } vpx_codec_err_t res = ( vpx_alg_priv_t * ) priv <S2SV_ModEnd> ; if (",0
1100,"<S2SV_ModStart> error ) { if ( bp && ( <S2SV_ModEnd> xfs_da_shrink_inode ( args <S2SV_ModStart>, bp )!= 0 ) <S2SV_ModEnd> ) goto out",1
1101,<S2SV_ModStart> ; if ( <S2SV_ModEnd>!= c ),0
1102,<S2SV_ModStart> list ) ; list_del_init ( & timer -> active_list ) ;,0
1103,<S2SV_ModStart> return err ; if (! <S2SV_ModEnd> attrs [ TIPC_SOCK <S2SV_ModStart> [ TIPC_SOCK_NLA_SOCK ] ) return - EINVAL <S2SV_ModEnd> ; err = <S2SV_ModStart> - EINVAL ; if (! sock <S2SV_ModEnd> attrs [ TIPC_NLA_SOCK,0
1104,"<S2SV_ModStart> ++ ) { memset ( ctx, 0, sizeof ( ctx ) ) ;",0
1105,<S2SV_ModStart> = v ; if (! IS_ERR ( vma ) ),1
1106,<S2SV_ModStart> } else { kfree ( usb_buffers ) ;,0
1107,<S2SV_ModStart> task = current <S2SV_ModEnd> ; if (,1
1108,<S2SV_ModStart> ( iinfo -> i_lenEAttr > bs || iinfo -> i_lenAlloc > bs ) goto out ; if ( iinfo ->,0
1109,"<S2SV_ModStart> ( interface, ENC28J60_EIR <S2SV_ModEnd> ) ; }",0
1110,<S2SV_ModStart> char * ptr <S2SV_ModEnd> ; char *,0
1111,"<S2SV_ModStart> ; kfree ( rcu_dereference_protected ( inet -> inet_opt, 1 ) <S2SV_ModEnd> ) ; dst_release",1
1112,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
1113,<S2SV_ModStart>! saw_digit ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart>!= '\\r' ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart>!= '\\n' ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart> ; trunc : * endp = bp ; <S2SV_ModStart> ; invalid : * endp = bp ;,1
1114,<S2SV_ModStart> ; args -> rmtvaluelen <S2SV_ModEnd> = be32_to_cpu (,0
1115,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1116,<S2SV_ModStart> return 0 ; if ( len < 0 ||,0
1117,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,0
1118,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
1119,<S2SV_ModStart> u8 label_len ; <S2SV_ModEnd> u8 label_len ;,0
1120,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpDiff ( TIFF <S2SV_ModStart> cc ) ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> stride ) )!= 0 ) return 0 ;,0
1121,"<S2SV_ModStart> -> vm_ops ) <S2SV_ModEnd> return do_fault ( <S2SV_ModStart>, pte, pmd, flags, entry ) ; <S2SV_ModEnd> return do_anonymous_page ( <S2SV_ModStart>, address, pte, pmd, <S2SV_ModEnd> flags ) ;",1
1122,"<S2SV_ModStart> s ) { size_t len = strlen ( s ) + 1 ; <S2SV_ModStart> = pool_alloc ( len ) ; memcpy <S2SV_ModEnd> ( r, <S2SV_ModStart> r, s, len",1
1123,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1124,"<S2SV_ModStart>! new_idmap_permitted ( file,",1
1125,"<S2SV_ModStart>. string ; if ( name > 1024 ) { <S2SV_ModStart> ) ; } else { eprintf ( ""Invalid <S2SV_blank> string <S2SV_blank> pointer <S2SV_blank> at <S2SV_blank> %p\\n"", name ) ; } }",1
1126,<S2SV_ModStart> 4 ) ; <S2SV_ModEnd> } if (,0
1127,,0
1128,<S2SV_ModStart> 0 ) { if ( len < ( u_int ) goto trunc ; <S2SV_ModStart> ip6 ) ; if ( advance < 0 ) return ; <S2SV_ModStart> ip6 ) return ;,0
1129,<S2SV_ModStart> x ) ; <S2SV_ModEnd> } assert (,0
1130,<S2SV_ModStart> ( iinfo -> i_lenEAttr > bs || iinfo -> i_lenAlloc > bs ) goto out ; if ( iinfo ->,0
1131,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
1132,"<S2SV_ModStart> * cpi, vpx_writer <S2SV_ModEnd> * w )",0
1133,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_line_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) ; <S2SV_ModStart> t1_buf_array, t1_line_array ) ; alloc_array ( t1_line, strlen ( t1_buf_array ) + 1, T1_BUF_SIZE",1
1134,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
1135,<S2SV_ModStart> ctxt ) ; if (! ( ctxt ) ) return emulate_ud ( ctxt,0
1136,<S2SV_ModStart> ] + 1,0
1137,,0
1138,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static unsigned int <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * mc_running_avg_y_stride, int <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * sig_y, int sig_y_stride ) { unsigned char * sig_stride ; unsigned int running_y_y_y = ( unsigned char * ) unsigned char * sig_stride ; unsigned char * sig_y_stride ; unsigned char * sig_y_stride ; unsigned char * sig_y_stride ; unsigned char * sig_y_stride = NULL ; unsigned char * sig_y_stride ; unsigned char * sig_y_stride = ( unsigned char * ) unsigned char * sig_y = NULL ; unsigned char * sig_y_stride ; unsigned char * sig_stride = NULL ; unsigned char * sig_stride ; unsigned char * sig_y_stride ; unsigned char * sig_y_stride = NULL ; unsigned char * sig_max_y_stride ; unsigned char * sig_y_stride = NULL ; unsigned char * sig_y_stride ; unsigned",0
1139,<S2SV_ModStart> == 0 ) {,0
1140,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1141,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
1142,<S2SV_ModStart> -> priv_flags ; <S2SV_ModEnd> } <S2SV_null> static,0
1143,"<S2SV_ModStart> ndp, val, 1",0
1144,<S2SV_ModStart> ) ; struct mb2_cache_entry <S2SV_ModEnd> * ext2_mb_cache =,0
1145,"<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp. <S2SV_ModStart>. type, ""compression"", sizeof ( rcomp. type ) <S2SV_ModEnd> ) ; if",1
1146,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
1147,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> } break ;",0
1148,,0
1149,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
1150,<S2SV_ModStart> 3 * len + 8,1
1151,<S2SV_ModStart> SUCCESS ) { if ( Z_TYPE_PP ( var )!= IS_LONG ) { zval lval ; lval = * * var ; zval_copy_ctor ( & lval <S2SV_ModEnd> ) ; convert_to_long <S2SV_ModStart> ; convert_to_long ( & lval <S2SV_ModEnd> ) ; points <S2SV_ModStart>. x = Z_LVAL ( lval ) ; } else { points [ i ]. x = <S2SV_ModStart> var ) ; } <S2SV_ModStart> SUCCESS ) { if ( Z_TYPE_PP ( var )!= IS_LONG ) { zval lval ; lval = * * var ; zval_copy_ctor ( & lval <S2SV_ModEnd> ) ; convert_to_long <S2SV_ModStart> ; convert_to_long ( & lval <S2SV_ModEnd> ) ; points <S2SV_ModStart>. y = Z_LVAL ( lval ) ; } else { points [ i ]. y = <S2SV_ModStart> ; } } },1
1152,<S2SV_ModStart> ; sig_none = <S2SV_ModEnd> timr -> it_sigev_notify <S2SV_ModStart> timr -> it_sigev_notify <S2SV_ModEnd> == SIGEV_NONE ;,1
1153,"<S2SV_ModStart> AcquireQuantumMemory ( imsx, imsy <S2SV_ModEnd> ) ; if",0
1154,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_line_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) ; <S2SV_ModStart> t1_buf_array, t1_line_array ) ; alloc_array ( t1_line, strlen ( t1_buf_array ) + 1, T1_BUF_SIZE",1
1155,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
1156,"<S2SV_ModStart>. path ; return Curl_urldecode <S2SV_ModEnd> ( data, <S2SV_ModStart>, 0, & <S2SV_ModEnd> pop3c -> mailbox <S2SV_ModStart> pop3c -> mailbox, NULL, TRUE ) <S2SV_ModEnd> ; } <S2SV_null>",1
1157,<S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ; <S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ;,1
1158,"<S2SV_ModStart> gb ) ; if ( s -> ref && sh -> first_slice_in_pic_flag ) { av_log ( s -> avctx, AV_LOG_ERROR, ""Two <S2SV_blank> slices <S2SV_blank> in <S2SV_blank> the <S2SV_blank> frame.\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
1159,<S2SV_ModStart> ) return ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1160,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart> ) return ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1161,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. bit_depth > 1 ) { return VPX_CODEC_MEMORY_FRAME ; } # endif",0
1162,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
1163,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> int mi_row, <S2SV_ModStart> int mi_row, vpx_block_size <S2SV_ModEnd> ) { int <S2SV_ModStart> int mi_row ; const mbmi_col = xd -> plane [ 0 ] <S2SV_ModEnd> ; const int <S2SV_ModStart> int mbmi_ext = vp9_block_h <S2SV_ModEnd> ( xd -> <S2SV_ModStart> int xd ) ; <S2SV_ModEnd> } } <S2SV_null>",0
1164,<S2SV_ModStart> -> mmap_legacy_base = TASK_UNMAPPED_BASE + random_factor <S2SV_ModEnd> ; if (,1
1165,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 8 ) ; <S2SV_ModEnd> src += src_stride",1
1166,"<S2SV_ModStart> return getnum ( L, <S2SV_ModStart> = getnum ( L,",0
1167,<S2SV_ModStart> ; uint32 nstrips <S2SV_ModEnd> ; if (,0
1168,,0
1169,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1170,<S2SV_ModStart> ( upid == INT_MIN ) return - ESRCH ; if ( upid ==,1
1171,"<S2SV_ModStart> siocb -> scm, false",1
1172,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1173,"<S2SV_ModStart>, plane ) * ( ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH )? 2 : 1 )",0
1174,<S2SV_ModStart> 1 ) ; if ( len < 2 ) { <S2SV_ModStart> - EINVAL ; goto out ; } <S2SV_ModStart> ) ) ; if ( hdr -> data_len > buflen ) { <S2SV_ModStart> - 1 ; },0
1175,"<S2SV_ModStart> -> private ; struct dm_dev * dev = lc -> dev ; int r = 0 ; if <S2SV_ModEnd> ( lc -> <S2SV_ModStart> ( lc -> start || ti -> len!= i_size_read ( dev -> bdev -> bd_inode ) >> SECTOR_SHIFT ) r = scsi_verify_blk_ioctl ( NULL, cmd ) ; return r? : __blkdev_driver_ioctl ( <S2SV_ModStart> -> bdev, <S2SV_ModEnd> dev -> mode",1
1176,<S2SV_ModStart> 1 ] ; if ( <S2SV_ModEnd> ( ctx ->,0
1177,<S2SV_ModStart> ; if (! mask ) return - EINVAL ; if (,0
1178,"<S2SV_ModStart>. size, <S2SV_ModEnd> ) ; if",0
1179,<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ;,1
1180,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1181,"<S2SV_ModStart> sa_addr ) ; memset ( & sock, 0, sizeof ( sa ) ) ;",0
1182,<S2SV_ModStart> ]. pkt_packet ; } else {,0
1183,<S2SV_ModStart> NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC | NTLMSSP_NEGOTIATE_SEAL <S2SV_ModStart> -> sign ) <S2SV_ModEnd> flags |= NTLMSSP_NEGOTIATE_SIGN <S2SV_ModStart> |= NTLMSSP_NEGOTIATE_KEY_XCH ; <S2SV_ModEnd> tmp = *,1
1184,<S2SV_ModStart> ) ; } mutt_socket_empty ( adata -> conn ) ;,0
1185,<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp.,0
1186,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horDiff8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
1187,<S2SV_ModStart> -> head <= 0 || ( unsigned char ) ( ( g -> sect << 2 ) >> FD_SIZECODE ( g ) ) ==,1
1188,<S2SV_ModStart> ; gstr = 0 ; if (,0
1189,"<S2SV_ModStart>, & rlen, 0",1
1190,"<S2SV_ModStart> ) ) { char * buf ; struct crypto_auth * cmd = NULL ; <S2SV_ModStart> ) ) { if (! auth_hash ) return - ENOMEM ; <S2SV_ModStart>, hashTable [ i <S2SV_ModEnd> ] ) ;",0
1191,"<S2SV_ModStart> mntent, path, rootfs -> mount",1
1192,,0
1193,<S2SV_ModStart> - offset ; unsigned short prev_bi_vcnt = bio -> bi_vcnt ; <S2SV_ModStart> ) break ; if ( bio -> bi_vcnt == prev_bi_vcnt ) put_page ( pages [ j ] ) ;,1
1194,<S2SV_ModStart> -> depth ; if ( numcolors > RAS_CMAP_MAXSIZ ) { return - 1 ; } <S2SV_ModEnd> actualnumcolors = hdr,1
1195,"<S2SV_ModStart> state. path <S2SV_ModEnd> ; char result <S2SV_ModStart> ""localhost"" ; } char result = Curl_urldecode ( conn -> data, & path -> domain, 0 ) ; if ( result ) return 0 ;",0
1196,"<S2SV_ModStart> str ) ; strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, len <S2SV_ModEnd> ) ; }",0
1197,,0
1198,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
1199,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return ret ;,0
1200,<S2SV_ModStart> 0 ) ; if (! r ) return - EINVAL ;,1
1201,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1202,,1
1203,,0
1204,<S2SV_ModStart> ) ; } if (!,0
1205,<S2SV_ModStart> mnt_mount ( path -> mnt. mnt_mount <S2SV_ModEnd> ) ; },0
1206,<S2SV_ModStart> ; if ( key_keylen < 0 ) return NULL,0
1207,"<S2SV_ModStart> ) ) { * status = ""EINVALID_MISMATCH"" ;",0
1208,<S2SV_ModStart> thread -> tp_value [ 0 ] <S2SV_ModStart> childregs -> ARM_r3 ; thread -> tp_value [ 1 ] = get_tpuser ( ),1
1209,"<S2SV_ModStart> bufsize ) { char * new_buf ; size_t new_bufsize <S2SV_ModEnd> ; JAS_DBGLOG ( <S2SV_ModStart> ; if ( bufsize < 0 ) { jas_deprecated ( ""negative <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> for <S2SV_blank> jas_stream_memopen"" ) ; } else if ( new_bufsize < 0 ) { jas_deprecated ( ""negative <S2SV_blank> use <S2SV_blank> jas_stream_memopen <S2SV_blank> %zu)\\n"", new_bufsize ) ; } <S2SV_ModEnd> if ( bufsize <S2SV_ModStart> 0 ) { new_bufsize <S2SV_ModEnd> ; } <S2SV_null>",0
1210,"<S2SV_ModStart> char * pskb = NULL <S2SV_ModStart> ) { if (! authctxt -> authctxt -> valid || authctxt -> authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done <S2SV_ModEnd> ; } if",0
1211,"<S2SV_ModStart> ; char * buff ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
1212,<S2SV_ModStart> -> d_inode = 0 <S2SV_ModEnd> ; if (,0
1213,"<S2SV_ModStart>, cb ), ( void * ) NULL",0
1214,<S2SV_ModStart> tn_buf ) ; return - EACCES ;,1
1215,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteCanonEntry ) ) ;",0
1216,"<S2SV_ModStart> failed_mount3 ; } # ifdef CONFIG_FS_XATTR sbi -> s_mb_cache = ext2_xattr_create_cache ( sbi -> s_mb_cache, sbi -> s_mb_cache ) ; if (! sbi -> s_mb_cache ) { sbi -> s_mb_cache = NULL ; goto failed_mb_cache <S2SV_ModEnd> ; } }",0
1217,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1218,<S2SV_ModStart> len < 1 || tcp_hdrlen < sizeof ( struct tcphdr ),0
1219,<S2SV_ModStart> int i ; size_t size ; matrix = 0 ; <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } matrix,0
1220,"<S2SV_ModStart> ipv6_select_ident ( fh, rt <S2SV_ModStart> ipv6_select_ident ( fh, rt",1
1221,"<S2SV_ModStart> int error ; struct mb2_cache_entry <S2SV_ModEnd> * ext4_mb_cache = <S2SV_ModStart> ) { struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache = <S2SV_ModStart> ( ext4_mb_cache, <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1222,<S2SV_ModStart> * req ; <S2SV_ModEnd> req = scsi_req_alloc <S2SV_ModStart> hba_private ) ; <S2SV_ModEnd> return req ;,1
1223,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> read_snapshot ( int <S2SV_ModStart> / 2 ; if ( int64_t ) { ND_TCHECK_32BITS ( gb ) ; return 0 ; } <S2SV_ModEnd> goto out ;,0
1224,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1225,<S2SV_ModStart> ( ret ||! cm_id -> device ||,1
1226,<S2SV_ModStart> xfrm_policy_walk * ) <S2SV_ModEnd> cb -> args <S2SV_ModStart> cb -> args <S2SV_ModEnd> ; struct xfrm_dump_info <S2SV_ModStart> struct xfrm_dump_info info <S2SV_ModEnd> ; void *,0
1227,"<S2SV_ModStart> = 0 ; size_t data_size = 0 ; <S2SV_ModStart>, & buf_size, & data_size",0
1228,<S2SV_ModStart> dentry * dentry <S2SV_ModEnd> ; struct ip_options_rcu <S2SV_ModStart> ( dentry ) ; if (! IS_ERR ( dentry ) ) { err = - EINVAL ; goto out ; } if (,0
1229,<S2SV_ModStart> section_options ) ; <S2SV_ModEnd> if ( section,0
1230,<S2SV_ModStart> * ptrptr && <S2SV_ModEnd> nmemb && size <S2SV_ModStart> nmemb && size <S2SV_ModEnd> ) return AVERROR,1
1231,<S2SV_ModStart> ( a -> type == szMAPI_BINARY && a ->,0
1232,<S2SV_ModStart> ] ) ; if ( i >= sizeof ( struct i + 1 ) ) return - 1 ;,0
1233,<S2SV_ModStart> 1 ) ; return 0,0
1234,"<S2SV_ModStart> { jas_eprintf ( ""got <S2SV_blank> box <S2SV_blank> type <S2SV_blank> %s\\n"" <S2SV_ModEnd>, box ->",1
1235,,1
1236,<S2SV_ModStart> break ; } if ( len < 1 ) return - EINVAL ;,0
1237,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1238,<S2SV_ModStart> i ) { if (! ref -> count ) return FALSE ;,0
1239,<S2SV_ModStart> UINT32 nsc_rle_encode ( const,1
1240,<S2SV_ModStart> 1 ) ; if (! buf [ 2 ] ) { crypto_memcpy ( & MACROBLOCKD * ) ; return - 1 ; } <S2SV_ModStart> ) ) { <S2SV_ModEnd> if (!,0
1241,"<S2SV_ModStart> * dllhandle ; if ( COM_CompareExtension ( name, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", name ) ; return NULL ; }",1
1242,<S2SV_ModStart> ; status = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sock ) ),0
1243,,0
1244,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1245,,0
1246,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> S2SV_null> <S2SV_null> static <S2SV_ModStart> * portno = strt <S2SV_ModEnd> ( strlen ( <S2SV_ModStart> ) + 1 <S2SV_ModEnd> ) ; if <S2SV_ModStart> * portno = strtol <S2SV_ModEnd> ( str, <S2SV_ModStart> * portpk ) ; if ( * e ) { if ( * e ) { * e = strtol ( char * ) ; * e = strtol ( NULL, '\\0'\\0' ) ; } else { char * e = strtol ( char * ) ; if (! * e ) { return NULL ; } * e = '\\0' ; } <S2SV_ModEnd> if ( * <S2SV_ModStart> NULL ; } } <S2SV_ModEnd> return 0 ;",0
1247,,0
1248,"<S2SV_ModStart> src ) { memcpy <S2SV_ModEnd> ( dst, <S2SV_ModStart> ) ) ; }",0
1249,<S2SV_ModStart> c -> width <= 6 <S2SV_ModEnd> ) { c ->,0
1250,<S2SV_ModStart> == * ptr && ptr [ 1 ],1
1251,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart>, BLOCK_SIZE bsize, int i <S2SV_ModEnd> ) { const <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1252,"<S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
1253,"<S2SV_ModStart> int mi_offset, vpx_writer <S2SV_ModEnd> * w )",0
1254,"<S2SV_ModStart> ( decoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ),",0
1255,<S2SV_ModStart> skb ) ; <S2SV_ModEnd> if ( skb,0
1256,<S2SV_ModStart> sta -> lock ) ; spin_lock_init ( & sta -> ps_lock,1
1257,,0
1258,<S2SV_ModStart> sctty_ops ) ; sctp_sys ( & sctp_sys_ops ) ;,0
1259,"<S2SV_ModStart>, 0 ) ; if (! data_interface ||! control_interface ) return - ENODEV",1
1260,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1261,<S2SV_ModStart> if ( NETIF_RESP <S2SV_ModEnd> ) ; },0
1262,<S2SV_ModStart> assoc ) { sctp_sock_rfree_frag <S2SV_ModEnd> ( skb ) <S2SV_ModStart> skb ) ; sctp_sock_rfree_frag <S2SV_ModEnd> ( skb ),0
1263,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> read_mode ( TIFF <S2SV_ModStart> ] ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) ) <S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1264,"<S2SV_ModStart> { struct desc_struct <S2SV_ModEnd> desc ; short <S2SV_ModStart> return sel ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! get_desc ( & desc, sel ) <S2SV_ModEnd> ) return -",0
1265,<S2SV_ModStart> ctx ) { memset <S2SV_ModEnd> ( ctx ->,0
1266,"<S2SV_ModStart> 1 ) { if ( spx_lpf_horizontal_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> } else { vpx_lpf_horizontal_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> ) ; } else { vpx_lpf_horizontal_8 <S2SV_ModEnd> ( s + <S2SV_ModStart> 8 ) ; vpx_lpf_horizontal_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> } else { vpx_lpf_horizontal_8 <S2SV_ModEnd> ( s,",0
1267,<S2SV_ModStart> return ret ; fsnotify_put_group ( group ) ;,1
1268,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> int i ;",0
1269,<S2SV_ModStart> break ; } <S2SV_ModEnd> if ( src_reg,0
1270,<S2SV_ModStart> = screen ; <S2SV_ModEnd> list = screen,0
1271,<S2SV_ModStart> ; while ( ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ),0
1272,<S2SV_ModStart> - ENOMEM ; if ( len < 0 ) return - EINVAL ;,0
1273,,0
1274,<S2SV_ModStart> ) { return - 1 <S2SV_ModEnd> ; } <S2SV_null>,0
1275,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1276,"<S2SV_ModStart> } if ( le32_to_cpu ( raw_super -> segment_count ) > F2FS_MAX_SEGMENT ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> segment <S2SV_blank> count <S2SV_blank> (%u)"", le32_to_cpu ( raw_super -> segment_count ) ) ; return 1 ; } if (",1
1277,<S2SV_ModStart> char * str [ 0 ] && strncpy <S2SV_ModEnd> ( * <S2SV_ModStart> + 1 ] ) == '\\0' || ( strncmp ( path [ 1 ] == ':' ) || ( strncmp ( path [ 1 ] == ':' ) ) || ( strncmp ( path [ 1 ] == ':' ) || ( strncmp ( path [ 1 ] == '\\0' || * name == ':' ) ) || ( str [ 1 ] == ':' ) ) { char * name = ':' ; } else { char * ( * ) + 1 ] = '\\0' ; } <S2SV_ModEnd> if (!,0
1278,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1279,<S2SV_ModStart> len ) { struct ipv6_txoptions * opt_to_free = NULL ; <S2SV_ModStart>! opt ) { opt = txopt_get ( np ) ; opt_to_free = opt ; } <S2SV_ModEnd> if ( flowlabel <S2SV_ModStart> flowlabel ) ; txopt_put ( opt_to_free ) ;,1
1280,"<S2SV_ModStart> ; if ( tcp_filter <S2SV_ModEnd> ( sk, <S2SV_ModStart> ) goto err ; } if (",0
1281,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> } break ;",1
1282,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1283,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1284,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! info -> <S2SV_ModStart> ) return 0 ; } if (,0
1285,"<S2SV_ModStart> ; if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
1286,<S2SV_ModStart> ) break ; <S2SV_ModEnd> tp -> copied_seq <S2SV_ModStart> = seq ; } tp -> copied_seq = seq ;,1
1287,<S2SV_ModStart> ; if ( key_is_free <S2SV_ModEnd> ( data ),0
1288,,0
1289,,0
1290,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1291,"<S2SV_ModStart> * orelse, int type_comment, int <S2SV_ModEnd> lineno, int",0
1292,<S2SV_ModStart> sem ) { if ( mi_local_dir ) { mi_row_cols = KEY_DIR * mi ; <S2SV_ModStart> ) goto out <S2SV_ModEnd> ; } },0
1293,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ),1
1294,"<S2SV_ModStart> ) { case AC_VECTOR : kvm_queue_exception_e ( vcpu, AC_VECTOR, error_code ) ; return 1 ; case",1
1295,,0
1296,<S2SV_ModStart> ; if ( rfbProcess_id <S2SV_ModEnd> ( s ),0
1297,<S2SV_ModStart> } if (,0
1298,<S2SV_ModStart> < 0 ) { goto out_err ; } <S2SV_ModEnd> if ( ret <S2SV_ModStart> chg ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>,0
1299,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
1300,<S2SV_ModStart> = EFSIZE_MAX ; s -> s_stack_depth = 1 ; s -> s_stack_depth ++ ;,0
1301,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1302,"<S2SV_ModStart> 6 ) ) { MATLAB_KO : clone_info = DestroyImageInfo ( clone_info ) ; <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart> ""ImproperImageHeader"" ) ; }",0
1303,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1304,"<S2SV_ModStart> ; const KRB5_TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL ) )",0
1305,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static Rint result = RLC_S2SV_null> bn_null> <S2SV_null> static <S2SV_ModStart> int result = RLC_OK <S2SV_ModEnd> ; bn_mod_t t <S2SV_ModStart> ; bn_len = RLC_OK <S2SV_ModEnd> ; bn_dig ( <S2SV_ModStart> ) ; } bn_dig ( tp ) ; bn_len = RLC_OK <S2SV_ModEnd> ; bn_dig ( <S2SV_ModStart> ) ) ; bn_mod_len = RLC_OK <S2SV_ModEnd> ; bn_dig ( <S2SV_ModStart> ) ; } bn_mod_t <S2SV_ModEnd> break ; bn_mod_t <S2SV_ModStart> : bn_len = RLC_OK <S2SV_ModEnd> ; } bn_dig ( <S2SV_ModStart> ) ; bn_mod_t <S2SV_ModEnd> = bn_t <S2SV_ModStart> ; bn_len = RLC_OK <S2SV_ModEnd> ( t, <S2SV_ModStart> ) ; } bp_len = RLC_OK ; bn_OK <S2SV_ModEnd> break ; case",0
1306,"<S2SV_ModStart> -> length, 0,",1
1307,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1308,<S2SV_ModStart> { rq = <S2SV_ModEnd> hctx -> tags <S2SV_ModStart> hctx -> tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; if (,1
1309,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
1310,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1311,"<S2SV_ModStart> { token ++ ; } if ( operand >= MAX_OPERANDS ) { eprintf ( ""Too <S2SV_blank> many <S2SV_blank> operands\\n"" ) ; return false",1
1312,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ; } memset <S2SV_ModEnd> ( & cpi,0
1313,<S2SV_ModStart> ; } } if (,0
1314,<S2SV_ModStart> ; ret = kzalloc <S2SV_ModEnd> ( sk ),0
1315,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> * sizeof ( <S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> ; pixels =",0
1316,<S2SV_ModStart> ctl_files_rwlock ) ; mutex_init ( & card -> user_ctl_lock ) ;,1
1317,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1318,"<S2SV_ModStart> len= TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, 0 )",0
1319,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return ps_dec ->,0
1320,<S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata -> rbuf. buf!= NULL ) <S2SV_ModStart> OPENSSL_free ( rdata -> rbuf. buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata -> rbuf. buf!= NULL ) <S2SV_ModStart> OPENSSL_free ( rdata -> rbuf. buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; },1
1321,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
1322,<S2SV_ModStart> buffer_count < 1 || args -> buffer_count > UINT_MAX / sizeof ( * exec2_list ),1
1323,"<S2SV_ModStart> int mptctl_do_reset ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_dev ) ; <S2SV_ModEnd> return 0 ;",0
1324,"<S2SV_ModStart> const char * ctx, L2",0
1325,"<S2SV_ModStart> char * path, const char * rootfs <S2SV_ModStart> mntdata, optional, rootfs",1
1326,,0
1327,"<S2SV_ModStart> * buf, size_t <S2SV_ModEnd> len ) { <S2SV_ModStart> int i ; size_t <S2SV_ModEnd> buf = kmalloc <S2SV_ModStart> ; if ( len < 1 ) return - EINVAL ; <S2SV_ModEnd> return - EINVAL",0
1328,"<S2SV_ModStart> | O_NOCTTY, ( mode == 0 || mode == MODE_INVALID <S2SV_ModEnd> ) ; if",0
1329,"<S2SV_ModStart> err_info ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> FALSE ; } return parse_cosine_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart>, phdr, buf, line <S2SV_ModEnd>, err,",0
1330,<S2SV_ModStart> * rq ) <S2SV_ModEnd> { int cpu <S2SV_ModStart> ; u64 irq_time ; <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1331,,0
1332,<S2SV_ModStart> char * file = NULL <S2SV_ModEnd> ; default : <S2SV_ModStart> } } } if (!,0
1333,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> vp9_get_prod_response ( resp <S2SV_ModEnd> ) ; break <S2SV_ModStart> case BLKIF_PROTOCOL_GET_RESPONSE : resp = <S2SV_ModEnd> ; break ; <S2SV_ModStart> case BLKIF_PROTOCOL_GET_RESPONSE : resp -> status = <S2SV_ModEnd> ; break ;,0
1334,<S2SV_ModStart> ; if ( password == NULL ||,1
1335,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( o2 ) ) ;",0
1336,<S2SV_ModStart> char * pname <S2SV_ModEnd> ; int len,0
1337,<S2SV_ModStart> ndo -> ndo_snapend ; ND_TCHECK_16BITS ( & ip -> ip_len ),1
1338,<S2SV_ModStart> if ( struct dentry * ctxt <S2SV_ModEnd> ) { struct <S2SV_ModStart> * inode ) { if (! inode -> i_sb ) return - EINVAL ; <S2SV_ModEnd> if (!,0
1339,"<S2SV_ModStart> = 0 ; memset ( & options, 0, sizeof ( client ) ) ;",0
1340,"<S2SV_ModStart> ARCHIVE_WARN ; } if ( argc >= MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } <S2SV_ModStart> p ) ; <S2SV_ModEnd> } if (",1
1341,<S2SV_ModStart> ; if ( i >= 16 ) return 0 ;,0
1342,<S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ),0
1343,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
1344,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> break ; } if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",0
1345,,0
1346,"<S2SV_ModStart> ( interface, ENC28J60_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC28J60_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC28J60_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC28J60_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC28J60_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC28J60_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC28J60_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC28J60_EHT2 <S2SV_ModEnd> ) ) ;",0
1347,"<S2SV_ModStart> ( packets + 257UL <S2SV_ModEnd>, image ->",1
1348,"<S2SV_ModStart> error ; } memset ( newserv, 0, sizeof ( struct service ) ) ;",1
1349,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ps_dec -> i4_total_mbs_coded,0
1350,<S2SV_ModStart> ) -> tp_value [ 0 ],1
1351,<S2SV_ModStart> ; if ( shader_rec_offset < args -> bin_cl_size ||,0
1352,"<S2SV_ModStart> char * num, int len <S2SV_ModEnd> ) { int <S2SV_ModStart> = 0 ; for ( i = 0 ; i < 3 ; i ++ ) { cJSON_CreateNumber <S2SV_ModEnd> = malloc ( <S2SV_ModStart> ( fmt, fmt ) ; if ( p ) len = ensure ( p ) ; if ( p ) { fmt = ensure ( p, 3 ) ; if (! fmt ) return 0 ; } else { fmt = ensure ( p, 3 ) ; } else out = ensure ( p ) ; if ( fmt ) out = ensure ( p, fmt ) ; if (! fmt ) return 0 ; } else { fmt = ensure ( p, ""cannot <S2SV_blank> value <S2SV_blank> %d"", fmt ) ; return 0 ; } if ( fmt!= 0 ) { len = ensure ( p ) ; if ( p ) cJSON_malloc ( fmt ) ; if ( out = ensure ( p, fmt, fmt ) ; fmt = ensure ( p, fmt, fmt ) ; if ( fmt ) cJSON_malloc ( fmt, ""cipher <S2SV_blank> %d) <S2SV_blank> %d"", ( fmt ) ; len = ensure ( fmt ) ; if (! fmt ) return 0 ; } fmt =",0
1353,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_null> static <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_16BITS ( & dlen ) ; <S2SV_ModStart>, len ) ; <S2SV_ModEnd> ND_PRINT ( ( (",0
1354,"<S2SV_ModStart> int tagval, uint32 <S2SV_ModEnd> * length )",1
1355,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1356,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 <S2SV_ModEnd> ; value |= <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart>. unsigned_value = <S2SV_ModEnd> value & 0xffff <S2SV_ModStart> ; return (,0
1357,"<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> c"", <S2SV_ModStart> y3 ) ; sendClean ( outputbuffer ) ;",0
1358,<S2SV_ModStart> skb ) ; <S2SV_ModEnd> if ( skb,0
1359,<S2SV_ModStart> void exit_io_context ( struct task_struct * task <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; task_lock ( task <S2SV_ModEnd> ) ; task <S2SV_ModStart> ; task_task_unlock ( task <S2SV_ModEnd> ) ; task,0
1360,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1361,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( index,0
1362,<S2SV_ModStart> ) { int ret = PCI_COMMAND_GUEST ; const struct pci_cmd_info * cmd = data ; <S2SV_ModStart> * value |= PCI_COMMAND_GUEST ; <S2SV_ModEnd> return ret ;,0
1363,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
1364,<S2SV_ModStart> -> fp -> user = NULL <S2SV_ModEnd> ; } <S2SV_null>,0
1365,<S2SV_ModStart> ; } } <S2SV_ModEnd> if (!,0
1366,<S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1367,<S2SV_ModStart> char * prefix <S2SV_ModEnd> ; char * <S2SV_ModStart> case String ) { const char * yyvsp [ ( 1 ]. String ) ; yyvsp [ 1 ] = ( 1 ) - ( 1 ) - ( yyvsp [ ( 1 ] ) - ( 1 ) - ( 1 ) - 1 ) ; yyvsp [ ( 1 ] = ( yyvsp [ ( 1 ) ]. String ) ; type = ( yyvsp [ ( yyvsp [ ( yyvsp [ ( prefix ) ]. String ) - ( 1 ) - ( 1 ) - ( 1 ) - 1 ) - ( 1 ) - ( 1 ) - ( 1 ) ]. String ) ; type = 'u32 ( yyvsp [ ( yyvsp [ ( 1 ) ]. String ) - ( 1 ) ]. String ) ; type = ( yyvsp [ ( yyvsp [ ( yyvsp [ 1 ]. String ) - ( 1 ) - ( 1 ) - ( 1 ) - ( 1 ) - ( 1 ) ) - ( 1 ) ) ]. String ) ; } break ; },0
1368,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> destruct_devices ( struct,0
1369,"<S2SV_ModStart>, int rep_quick, my_copy_stat <S2SV_ModEnd> ) ; if",0
1370,<S2SV_ModStart> { return ret <S2SV_ModEnd> ; } <S2SV_null>,0
1371,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
1372,<S2SV_ModStart> sk -> sk_family <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto out ; } skb -> len = sizeof ( struct sockaddr_in6 * sin6 ) ; <S2SV_ModStart> ) ) ; * addr_len = sizeof ( * sin6 ) ;,0
1373,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> read_mutex_lock ( & <S2SV_ModStart> = 1 ; if (! ( inode ) ) { ret = - EINVAL ; goto out_mutex ; } if (! ( inode_mutex_lock ( & i_mutex ) ) { if (! inode_mutex ) { ret = - EINVAL ; goto out_unlock ; } <S2SV_ModStart> ( & mode_mutex ) ; return ret <S2SV_ModEnd> ; } if,0
1374,<S2SV_ModStart> ; } } else free ( buf ) ;,0
1375,<S2SV_ModStart> return map ; map =,1
1376,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> char * cp <S2SV_ModStart> = cp = ( cp [ 0 ] <S2SV_ModEnd> ) { if <S2SV_ModStart> = '\\0' ; if ( cp == '\\0' ) { if ( cp == '\\0' ) { if ( cp == '\\0' ) return 0 ; } <S2SV_ModStart> = '\\0' ; } <S2SV_ModEnd> if (! <S2SV_ModStart> case '\\0' : if ( cp!= '\\0' ) return 0 ; } <S2SV_ModStart> = '\\0' ; <S2SV_ModEnd> if (! <S2SV_ModStart> == '\\0' ) { if ( cp!= '\\0' ) return 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart> = '\\0' ; } return 0 ;,0
1377,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1378,<S2SV_ModStart> ; if ( <S2SV_ModEnd> size_left < 4,1
1379,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; lmp_info <S2SV_ModStart> ( ptl, <S2SV_ModEnd>, 0, <S2SV_ModStart> p [ 0 ] ) <S2SV_ModEnd> ; } <S2SV_null>",0
1380,<S2SV_ModStart> ) ; } if ( <S2SV_ModEnd> BAD ( b,0
1381,"<S2SV_ModStart> ( cpi, <S2SV_ModEnd> ) ; }",0
1382,<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp.,0
1383,<S2SV_ModStart> = alloc ; size_t <S2SV_ModEnd> strindex = 0,1
1384,"<S2SV_ModStart>, nbits ; if ( msg -> cursize > msg -> cursize ) { msg -> cursize = msg -> cursize + 1 ; return 0 ; } <S2SV_ModStart> ) ) { if ( msg -> cursize > msg -> cursize << 3 ) { msg -> cursize = msg -> cursize + 1 ; return 0 ; }",0
1385,<S2SV_ModStart> int idx ; unsigned int count ; <S2SV_ModStart> -> count ; count = kcontrol -> count ; <S2SV_ModStart> ; idx < <S2SV_ModEnd> count ; idx,1
1386,<S2SV_ModStart> ; out1 : cancel_work_sync ( & dev -> kevent ) ; del_timer_sync ( & dev -> delay ) ;,1
1387,<S2SV_ModStart> len = 0 <S2SV_ModEnd> ; int size_t,0
1388,<S2SV_ModStart> == 0 ) { <S2SV_ModStart> return false ; },0
1389,<S2SV_ModStart> - 2 ; if ( plen < 0 ) return 0 ;,1
1390,<S2SV_ModStart> acl ) { struct iattr iattr ; size = posix_acl_update_mode ( inode <S2SV_ModEnd> ) ; if,0
1391,<S2SV_ModStart> header. types_size <S2SV_ModEnd> ) { continue,1
1392,<S2SV_ModStart> : case NPPVformValue : case NPPVpluginNativeAccessibleAtkPlugId,0
1393,<S2SV_ModStart> char * buf <S2SV_ModEnd> = NULL ; <S2SV_ModStart> ) return NULL <S2SV_ModEnd> ; } <S2SV_null>,0
1394,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1395,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> 2SV_null> static <S2SV_ModStart> int bit_depth ; const int bit_depth = 0 ; const int bit_depth = 0 ; for ( i = 0 ; i < bit_depth ; i ++ i ++ i ; for ( i = 0 ; i < bit_depth ; i ++ ) { if ( i ++ i ) { for ( i = 0 ; i < ps_bitdepth ; i ++ i ++ ) { for ( i = 0 ; i < ps_bitdepth ; i ++ i ) { for ( i ++ i ++ i ++ i ) { for ( i = 0 ; i < ps_bit_target_size ; ++ i ++ i ) { for ( i = 0 ; i < bit_depth ; ++ i ++ i ++ ) { if ( i ++ i ) { for ( i = 0 ; i < ps_bit_target_size ; ++ i ++ ) { for ( i = 0 ; i < ps_bitdepth ; i ++ i ) { cpi -> bit_depth = 1 ; } <S2SV_ModEnd> ; },0
1396,"<S2SV_ModStart> ( interface, ENC624J600_EIR <S2SV_ModEnd> ) ; if",0
1397,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1398,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ND_TCHECK ( *,0
1399,"<S2SV_ModStart>, NULL, <S2SV_ModEnd> data ) ;",1
1400,<S2SV_ModStart> out_free ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1401,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
1402,"<S2SV_ModStart> * xd, <S2SV_ModEnd> int y_stride, <S2SV_ModStart> int y_stride ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 16 ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> 16 ) ; memcpy <S2SV_ModEnd> ( xd,",0
1403,,0
1404,"<S2SV_ModStart> char * str <S2SV_ModEnd> ; char * <S2SV_ModStart> = str ; if (! str ) return NULL ; dval = strlen ( dval ) ; if (! str ) return NULL ; dval = strcpy ( str, '\\n"" ) ; if ( result == '\\0' || strlen ( str ) - 1 ) { strcpy ( str, '\\0' ) ; return NULL ; } } else strcpy ( result ) ; return NULL ; } <S2SV_ModEnd> } else",0
1405,"<S2SV_ModStart> * jas_iccprof_createfrombuf ( jas_uchar <S2SV_ModEnd> * buf,",1
1406,<S2SV_ModStart> ; i ++ ; <S2SV_ModEnd> if ( e,0
1407,<S2SV_ModStart>! thresholds ) ; if (! thresholds -> primary ) goto unlock <S2SV_ModStart> ( ) ; unlock :,1
1408,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct ion_handle * <S2SV_ModStart> ; handle = ion_handle_get_by_id_nolock ( client, id <S2SV_ModEnd> ) ; mutex_unlock <S2SV_ModStart> ; return handle <S2SV_ModEnd> ; } <S2SV_null>",1
1409,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> { switch ( vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) { case VP9_COMMON * const vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> int i ; vpx_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; } vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> intra_literal <S2SV_ModEnd> ( wb,",0
1410,<S2SV_ModStart> : if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; },0
1411,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context ->,0
1412,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
1413,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( x -> <S2SV_ModStart> ) ; memset <S2SV_ModEnd> ( cpi ->,0
1414,"<S2SV_ModStart> uint16_t status ; uint16_t status ; <S2SV_ModStart> ( interface, ENC624J600_EIR ) ; if ( status & ENC624J600_EIR_LINKIF <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_HIGHBITDEPTH <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_EIR_LINKIF <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_EIR_TXIF <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_EIR_LINKIF <S2SV_ModEnd> ) ; }",0
1415,<S2SV_ModStart> ] == 0x01 && i < gemsafe_cert_max,1
1416,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
1417,"<S2SV_ModStart> VALUE from_document ( int argc, VALUE * argv, VALUE klass ) { VALUE document ; VALUE parse_options ; int scanned_args = rb_args ; int scanned_args = 0 ; int scanned_args = rb_scan_args ( argc, argc, argc, ""11"", & rb_args ) ; VALUE rb_schema ; int scanned_args = rb_scan_args ( rb_args, & rb_args ) ; if ( scanned_args == rb_args ) goto error ;",0
1418,<S2SV_ModStart> vma ) { <S2SV_ModEnd> struct au1200fb_device * <S2SV_ModStart> ; vma -> vm_memory <S2SV_ModEnd> ; vma ->,0
1419,,0
1420,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> sizeof ( bytes,0
1421,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
1422,<S2SV_ModStart> ; if ( <S2SV_ModEnd> arg >= cdi,1
1423,<S2SV_ModStart> ; if (! err ) return - EINVAL ; if (,0
1424,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1425,<S2SV_ModStart> <S2SV_null> <S2SV_null> static uint32_t <S2SV_ModEnd> * s ; <S2SV_ModStart> int64_t ) { UINT32_MAX - 1 ; if ( size_t ) return - 1 ; <S2SV_ModStart> + 1 ; if ( <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1426,"<S2SV_ModStart>, i ; if (! ( s -> state & PNG_IHDR ) ) return AVERROR_INVALIDDATA ;",0
1427,<S2SV_ModStart> c_sm ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1428,<S2SV_ModStart> } dt -> proto = IP_GET_IPPROTO ( p ) ; dt ->,1
1429,"<S2SV_ModStart> ( interface, KSZ8851_ISR ) ; if ( ( status & KSZ8851_ISRX <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR_RX <S2SV_ModEnd> ) ; status <S2SV_ModStart> ( interface, KSZ8851_RXST <S2SV_ModEnd> ) ; status <S2SV_ModStart> ( interface, KSZ8851_ISRX1 <S2SV_ModEnd> ) ; }",0
1430,"<S2SV_ModStart> const node * n0, bool <S2SV_ModEnd> const node *",0
1431,<S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1432,"<S2SV_ModStart> ( AUDIT_APPARMOR_DENIED, __aa_current_profile ( ), GFP_KERNEL, & sa, NULL <S2SV_ModEnd> ) ; }",1
1433,"<S2SV_ModStart> } if (! siz -> tilexoff || siz -> tilexoff >= siz -> width ||! siz -> height ) { jas_eprintf ( ""all <S2SV_blank> cannot <S2SV_blank> outside <S2SV_blank> have <S2SV_blank> zero <S2SV_blank> area\\n"" ) ; goto error ; } if (",0
1434,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } else {,0
1435,"<S2SV_ModStart>, xmi_data, xmi_size,",1
1436,<S2SV_ModStart> size_t total_len ; struct iov_iter * buf ; <S2SV_ModStart> ) ret = iov_iter_init ( iter ) ; if ( unlikely (! iov_iter_iter_iter ( iter ) ) ) { ret = - EFAULT ; break ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1437,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits <S2SV_ModStart> ) ; } \\\n} <S2SV_ModEnd> IndexPacket index ; <S2SV_ModStart> ++ ) { next_pixel = MagickFalse ; displacement = 1 ; <S2SV_ModStart> -= MaxHashTable ; if ( k < 0 ) continue <S2SV_ModEnd> ; if (,1
1438,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1439,<S2SV_ModStart> { hdl -> pm_path [ 0 ] ; if ( hdl -> sm_hdl -> sm_hdl -> pm_path [ 0 ] ) { if ( hdl -> sm_hdl -> c_path [ 0 ] ) { if ( hdl -> sm_hdl -> fe_hdl -> pm_hdl -> pm_path [ 0 ] ) { if ( hdl -> sm_hdl -> sm_hdl -> pm_hdl -> sm_hdl -> c_path [ 0 ] ) unlink ( hdl -> pm_hdl -> pm_hdl -> pm_path [ 0 ] ) ; } if ( hdl -> sm_hdl -> fe_hdl -> c_hdl -> pm_hdl -> c_path [ 0 ] ) { if ( hdl -> fe_hdl -> pm_hdl -> pm_hdl -> c_path [ 0 ] ) unlink ( hdl -> pm_hdl -> c_hdl -> fe_hdl -> pm_hdl -> c_path ) ; } if ( hdl -> fe_hdl -> pm_hdl -> pm_hdl -> c_hdl,0
1440,"<S2SV_ModStart> size_t max_samples ; char * max_s ; size_t max_samples ; <S2SV_ModStart> max_samples ; size_t max_samples ; max_samples = jas_eprintf ( ""max_samples <S2SV_blank> size <S2SV_blank> %zu)\\n"", max_samples, max_samples ) ; if (! max_samples ) { jas_eprintf ( ""max_samples <S2SV_blank> %d <S2SV_blank> %d\\n"", fmtid, max_samples ) ) ; goto max_samples ; } <S2SV_ModStart> max_samples ; } if (! max_samples ) { jas_eprintf ( ""max_samples <S2SV_blank> size <S2SV_blank> exceedsamples <S2SV_blank> %d\\n"", max_rawsize ) ; return - 1 ; }",0
1441,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (,0
1442,"<S2SV_ModStart>, ret = - EINVAL ; if (",0
1443,<S2SV_ModStart> [ 2 ] && 0,0
1444,<S2SV_ModStart> + 1 ; if ( size > max_t ) goto out ;,0
1445,<S2SV_ModStart> 2 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,1
1446,"<S2SV_ModStart>, ret = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( irq_srcu ) <S2SV_ModEnd> return 0 ;",0
1447,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1448,<S2SV_ModStart> else { return false <S2SV_ModEnd> ; } case,1
1449,"<S2SV_ModStart> sa_addr ) ; memset ( & sock, 0, sizeof ( sa ) ) ;",0
1450,<S2SV_ModStart> (! handle ||! SecIsValidHandle ( handle ),1
1451,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1452,<S2SV_ModStart> ) ; goto out_free <S2SV_ModEnd> ; } if,0
1453,<S2SV_ModStart> OP_EXACT1 ) ; <S2SV_ModEnd> DATA_ENSURE ( 1 <S2SV_ModStart> ++ ; s <S2SV_ModEnd> ++ ; MOP_OUT,1
1454,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1455,<S2SV_ModStart> = - EINVAL <S2SV_ModEnd> ; if (,1
1456,<S2SV_ModStart> path && path == 0,0
1457,<S2SV_ModStart> = hash ; sr -> fd_is_fdt = MK_TRUE ;,1
1458,<S2SV_ModStart> int user_keyring_keyring ; struct user_keyring_keyring ; struct <S2SV_ModStart> keyring_keyring_to_keyring ; if (! keyring_keyring_keyring_keyring ) return - ENOMEM ; <S2SV_ModStart> ) goto out ; } key_put ( & keyring_key ) ;,0
1459,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart>, BLOCK_SIZE bsize, int skip_down ) { <S2SV_ModEnd> if (! <S2SV_ModStart> ) return ; } <S2SV_ModEnd> return 0 ;",0
1460,<S2SV_ModStart> NETIF_F_HW_CSUM | NETIF_F_SG <S2SV_ModEnd> ; if (,0
1461,"<S2SV_ModStart> NULL, * header <S2SV_ModEnd> ) ; while",0
1462,"<S2SV_ModStart> pixel_info ) ; ( void ) ResetMagickMemory ( pixels, 0, pixel_info_length ) ;",1
1463,<S2SV_ModStart> ) { return - 1 <S2SV_ModEnd> ; } <S2SV_null>,0
1464,,0
1465,"<S2SV_ModStart> case S_IFDIR : fa = xfs_dinode_verify_fork ( dip, mp, XFS_DATA_FORK ) ; if ( fa ) { fa = xfs_verify_fork ( mp, XFS_FORK ) ; break ; } else { if ( fa ) return fa ; }",0
1466,<S2SV_ModStart> ; if ( <S2SV_ModEnd>!= c ),0
1467,<S2SV_ModStart> ; j = 0 <S2SV_ModEnd> ; } if,0
1468,<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> ; if (,0
1469,"<S2SV_ModStart>, sizeof ( double <S2SV_ModEnd> ) ) ;",1
1470,<S2SV_ModStart> ( event ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1471,"<S2SV_ModStart>, flags ) ) ; ND_TCHECK ( tptr [ 0 ]",0
1472,<S2SV_ModStart> -> outputbuffer <S2SV_ModEnd> ; if (,0
1473,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( src,",0
1474,,0
1475,,0
1476,"<S2SV_ModStart> iovec, iter_op, & iter",0
1477,"<S2SV_ModStart> } if ( ptr - c -> rcurr > 100 || ( strncmp ( ptr, ""get <S2SV_blank> "", 4 ) && strncmp <S2SV_ModEnd> ( ptr, <S2SV_ModStart> ptr, ""gets <S2SV_blank> "", 5 )",0
1478,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return - EINVAL,0
1479,<S2SV_ModStart> 0 ) ; if ( bNumEndpoints < sizeof ( * bNum ),0
1480,<S2SV_ModStart> ; if ( info -> access == NULL ) return - EINVAL ; if (,0
1481,"<S2SV_ModStart> client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; return 0 ; } if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) { exit_client ( client_p, client_p, client_p, ""Malformed <S2SV_blank> AUTHENTICATE""",1
1482,<S2SV_ModStart> ctxt -> rip_relative && likely ( ctxt -> memopp ),1
1483,"<S2SV_ModStart>. size, <S2SV_ModEnd> 1 ) ;",0
1484,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; random_ether_addr (,1
1485,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( x,0
1486,"<S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_ESTAT ) ; memset <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC624J600_ENC624J600_EIR, ENC624J600_EIR, ENC624J600_EIR_LINKIF <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_EIR_LINKIF <S2SV_ModEnd> ) ; }",0
1487,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> bufsizeof ( header <S2SV_ModStart> sizeof ( psf -> header. ptr <S2SV_ModStart> sizeof ( int ),0
1488,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
1489,"<S2SV_ModStart> ) ) ) { applog ( LOG_WARNING, ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> header <S2SV_blank> %s"", __func__, header_len ) ; <S2SV_ModStart> cb_free ( pool ) ; return false ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1490,<S2SV_ModStart>. get_alg_priv ( ctx ) <S2SV_ModEnd> ; if (,0
1491,<S2SV_ModStart> case EXIT_REASON_INVEPT : case EXIT_REASON_INVEPT :,0
1492,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> vp9_get_block_mode ( VP9EncoderConfig <S2SV_ModStart> * const VP9EncoderConfig <S2SV_ModEnd> * skippable <S2SV_ModStart> ; # if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModEnd> ( sf, <S2SV_ModStart> ; # if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModEnd> ( sf -> <S2SV_ModStart> intra_filter = 1 <S2SV_ModEnd> ; sf -> <S2SV_ModStart> ; # if CONFIG_VP9_HIGHBITDEPTH return 1 <S2SV_ModEnd> ; } <S2SV_null>",0
1493,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
1494,"<S2SV_ModStart> compat_timex tx32 ; memset ( txc, 0, sizeof ( struct timex ) ) ;",1
1495,"<S2SV_ModStart> } ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ), 0 )",0
1496,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1497,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1498,"<S2SV_ModStart> ( c, STR ( NULL )",0
1499,"<S2SV_ModStart> ; # if CONFIG_VPX_CODEC_UNSUPPORTED <S2SV_ModEnd> ( svc_ctx, <S2SV_ModStart> NULL ) { svc_ctx_set_temporal_l <S2SV_ModEnd> ( svc, <S2SV_ModStart> ; } } if (",0
1500,<S2SV_ModStart> ( event ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1501,<S2SV_ModStart> ( * t <S2SV_ModEnd> ) ; while,0
1502,<S2SV_ModStart> ; if ( entry == NULL ) return EINVAL ; if (,0
1503,<S2SV_ModStart> frame -> data [ plane ] && frame -> linesize <S2SV_ModStart> [ plane ] && frame -> linesize [ plane ],1
1504,,0
1505,,0
1506,,1
1507,<S2SV_ModStart> ctxt ) { <S2SV_ModEnd> return 0 ;,0
1508,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1509,"<S2SV_ModStart> mutex_lock ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1510,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> uint8_t length ) { if ( off_tlv_info_len < 0 ) goto trunc ; <S2SV_ModStart> = 0 ; } else { if ( off_tlv_info_len < 0 ) return FALSE ;,0
1511,<S2SV_ModStart> 1 ) ; if ( len < 0 ) { return - EINVAL ; },0
1512,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> nmap )",0
1513,<S2SV_ModStart> while ( offset > 0 && offset <S2SV_ModStart> < end_offset ) { <S2SV_ModStart> hf_keybuffer ) ; },1
1514,,0
1515,<S2SV_ModStart> ) { const VP9EncoderConfig <S2SV_ModEnd> * const oxcf <S2SV_ModStart> = get_layer_context ( cpi <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( cpi -> oxcf. <S2SV_ModStart> ) return rc <S2SV_ModEnd> ; } <S2SV_null>,0
1516,<S2SV_ModStart> X86_EFLAGS_RF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1517,"<S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size,",0
1518,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static TX_TX_SIZE tx_size <S2SV_ModEnd> read_int tx_size <S2SV_ModStart> ) ) { vpx_read_bit <S2SV_ModEnd> ( r,",0
1519,<S2SV_ModStart> op + OSPF6HDR_LEN ) ; ND_TCHECK_32BITS ( & hellop -> hello_options,1
1520,<S2SV_ModStart> { if ( datalen!= 1 ) return - EINVAL ; if (,1
1521,<S2SV_ModStart> rc ) { struct task_struct * task <S2SV_ModEnd> task = task <S2SV_ModStart> ; if ( task -> task <S2SV_ModEnd> rc -> task <S2SV_ModStart> rc -> uwbd. task <S2SV_ModEnd> ) ; },0
1522,"<S2SV_ModStart> : # line 101 ""hex_grammar.y"" { yr_re_destroy ( * yyvaluep ) ; } # line 1054 <S2SV_ModEnd> ""hex_grammar.y"" break ; <S2SV_ModStart> : # line 102 ""hex_grammar.y"" { yr_re_node_destroy ( ( * yyvaluep ). re_node ) ; } # line 102 ""hex_grammar.y"" break ; } # line 1054 <S2SV_ModEnd> ""hex_grammar.c"" break ;",0
1523,<S2SV_ModStart> : idx ; assert ( ptr >= gfx -> backendData && ptr < ( ( char * ) gfx -> backendData + graphicsGetMemoryRequired ( gfx ) ) ) ;,1
1524,"<S2SV_ModStart> int mi_col, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> = NULL ; memcpy <S2SV_ModEnd> ( & cpi <S2SV_ModStart> ) ; } # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( x -> flags & YV12_FLAG_HIGHBITDEPTH ) { vpx_write_bit ( & YV12_FLAG_HIGHBITDEPTH ) ; return - 1 ; } <S2SV_ModStart> ) ) ; }",0
1525,,0
1526,<S2SV_ModStart> { if ( ( <S2SV_ModStart> shmflg & SHM_RND ) && addr >= shmlba,1
1527,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
1528,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1529,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1530,<S2SV_ModStart> : case NPNVSupportsWindowless : case NPNVprivateModeBool : case NPNVsupportsAdvancedKeyHandling,1
1531,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> msg ) ; },0
1532,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, MSG_DONTWAIT )",0
1533,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1534,<S2SV_ModStart> char * pname <S2SV_ModEnd> ; int len,0
1535,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * const si,0
1536,<S2SV_ModStart> mq_ops ) { struct blk_mq_hw_ctx * hctx ; <S2SV_ModStart> first_rq ; } hctx = first_rq -> tag ;,0
1537,<S2SV_ModStart> s ) { uint32 length ; struct stream packet = * s <S2SV_ModEnd> ; struct stream packet,0
1538,<S2SV_ModStart> ; if ( Z_TYPE_RETURN_FALSE ; } if (,0
1539,<S2SV_ModStart> -> y_stride <S2SV_ModEnd> ) { printf,0
1540,<S2SV_ModStart> * data ; <S2SV_ModEnd> return NULL ;,0
1541,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> void * table_start ; <S2SV_ModEnd> read_entry_block_start ( s <S2SV_ModStart> 8 ) ; if (! ( sb_table_start_start_start_table ( sb ) ) goto error ; <S2SV_ModStart> ) ) { if ( sb_table_start ) goto error ; <S2SV_ModEnd> if ( i <S2SV_ModStart> ) ) ; },0
1542,<S2SV_ModStart> ; if ( val == NULL ) return - EINVAL ; if (,0
1543,<S2SV_ModStart> skb ) ; <S2SV_ModEnd> if ( skb,0
1544,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & cpi,0
1545,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart>, struct comp_mode_t <S2SV_ModEnd> * output, <S2SV_ModStart> ; if ( <S2SV_ModEnd>!= strcmp ( <S2SV_ModStart>, & PyKERNEL ) == 0 ) { return NULL ; } if ( <S2SV_ModStart> ( str, ""UINT32"" ) == 0 ) { return NULL ; } if ( <S2SV_ModStart> ( str, ""UINT32"" ) == 0 ) { return - 1 ; } else { if (! strcmp ( "", <S2SV_blank> "" ) ) return - 1 ; } else return NULL ; } if ( <S2SV_ModStart>, & EINVALID_TYPE_FAILURE ) == 0 ) { return 1 ; } if ( <S2SV_ModStart> ( str, & PyKERNEL ) == 0 ) { return 1 ; } else { if (! strcmp (, ""UINT32"" ) == 0 ) return 1 ; if ( strcmp ( type == 0 ) return 1 ) { return 1 ; } else if ( <S2SV_ModStart> ( strcmp (, ""Can\'t"" ) == 0 ) return 1 ; } else if ( strcmp ( str, & Py_Type, ""Failed"" ) == 0 ) {",0
1546,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1547,<S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 4 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 4 ; <S2SV_ModEnd> break ; case,0
1548,<S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( cpi ->,0
1549,"<S2SV_ModStart> ) ; } smb_ofile_flush <S2SV_ModEnd> ( sr, <S2SV_ModStart> f_mutex ) ; smb_ofile_flush <S2SV_ModEnd> ( sr,",1
1550,<S2SV_ModStart> <S2SV_null> <S2SV_null> static uint32_t <S2SV_ModEnd> * s ; <S2SV_ModStart> int64_t ) { UINT32_MAX - 1 ; if ( size_t ) return - 1 ; <S2SV_ModStart> + 1 ; if ( <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1551,"<S2SV_ModStart> ; if ( * cp == NULL || strcmp ( cp, <S2SV_ModEnd> ) == 0",0
1552,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> char * t <S2SV_ModStart> char buf [ char * out <S2SV_ModEnd> ] ; int <S2SV_ModStart> * out ; const char * out = strdup <S2SV_ModEnd> ( out, <S2SV_ModStart>, char * out, strlen ( out, ""\\n"" ) ; if ( outlen ( out ) == 0 ) { char * out = out ; char * out = out ; char * out ; char * out = out ; char * out = out ; char * out = out ; char * out = strcpy ( out, out, ""\\n"" ) ; return NULL ; } <S2SV_ModEnd> } else if <S2SV_ModStart> } else { char * out = out ; if ( out == '\\n"" ) return NULL ; } if ( out == '\\n' || ( char * out == '\\n' ) { char * out = ( char ) strcpy ( out, ( out, out, ( out ) ) ; if (! outbuf ) return ( out ) { fprintf ( stderr, "" <S2SV_blank> %s <S2SV_blank> %s\\n"", out ) ; return 1 ; } <S2SV_ModStart> out ; } <S2SV_ModEnd> out =",0
1553,<S2SV_ModStart> 1 ) ; return 0,0
1554,<S2SV_ModStart> iph ) { if ( unlikely ( siphash_key_is_zero ( & net -> ipv4. ip_id_key ) ) ) return - ENOMEM ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1555,,0
1556,"<S2SV_ModStart> void write_inter_mode ( const vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_prob <S2SV_ModEnd> prob ) {",0
1557,"<S2SV_ModStart> ctl -> pw, "".chfn""",1
1558,<S2SV_ModStart> { if ( max_length < sizeof ( struct ieee80211_radiotap_header ) ) return - EINVAL ; if (,0
1559,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1560,<S2SV_ModStart> = 0 ; if (! st -> data ) return - EINVAL ;,0
1561,<S2SV_ModStart> NULL ) { return NULL ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1562,<S2SV_ModStart> stream ) ; <S2SV_ModEnd> return FALSE ;,0
1563,<S2SV_ModStart> ) ; } if <S2SV_ModEnd> ( cmd ),0
1564,"<S2SV_ModStart> { g_assert ( ""Failed <S2SV_blank> to <S2SV_blank> file <S2SV_blank> \' <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd> ) ; } if",0
1565,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> vp9_block_tile_cols ( const <S2SV_ModStart> int mi_col ) { const VP9_COMMON * const tile_data = & tile_row * tile ; MACROBLOCKD * const tile_info = & tile_size_t * tile_info ; MACROBLOCKD * const tile_info = & tile_data -> tile_info ; MACROBLOCKD * const tile_size = & tile_info -> tile_info ; MACROBLOCKD * const tile_info = & tile_info -> tile_data [ tile_size ] <S2SV_ModEnd> ; const int <S2SV_ModStart> ) ) { vpx_read_bit <S2SV_ModEnd> ( & cm <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 0 ;,0
1566,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> read_frame ( VP9_COMMON <S2SV_ModStart> = 0 ; const VP9EncoderConfig * const VP9EncoderConfig * const cm = & cpi -> td. mbmi_ext_info = & cpi -> common ; <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; } # if CONFIG_VP9_HIGHBITDEPTH vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
1567,<S2SV_ModStart> ) ) { if ( <S2SV_ModEnd> f -> c ->,0
1568,<S2SV_ModStart> ; client ->,0
1569,<S2SV_ModStart> -> count ; new_fpl -> user = get_uid ( fpl -> user ) ;,1
1570,<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ; opt -> opt.,0
1571,"<S2SV_ModStart> vpx_tree_t vpx_tree_index <S2SV_ModEnd> * tree,",0
1572,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! ctx -> <S2SV_ModStart> == NULL ) { <S2SV_ModEnd> return 0 ;,0
1573,<S2SV_ModStart> wqh ) ; spin_lock_init ( & ctx -> cancel_lock ) ;,1
1574,"<S2SV_ModStart> ) ; struct mnt_namespace * ns = mnt -> mnt_ns ; struct <S2SV_ModStart> ; if (! ns_ns -> mnt_ns, child ) { err = - EINVAL ; goto out ; } if (",0
1575,"<S2SV_ModStart>, & len, 0",1
1576,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = _mm_set1_epi16 ( ( int16_t ),0
1577,<S2SV_ModStart> rc ) { const VP9EncoderConfig <S2SV_ModEnd> * oxcf =,0
1578,<S2SV_ModStart> int i ; jas_uchar <S2SV_ModEnd> buf [ 1,0
1579,"<S2SV_ModStart> byte * fout, int maxoffset <S2SV_ModStart> NYT, fout, maxoffset <S2SV_ModStart> NULL, fout, maxoffset",1
1580,<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_block_mode ( const <S2SV_ModStart> ) { const VP9_COMMON * const xd = & cpi -> common ; MACROBLOCKD * const xd = & cpi -> svc. spatial_layer_id * cpi -> mbmi. mbmi_id ; <S2SV_ModStart> -> mbmi_ext = & cpi -> mbmi. count ; if (! is_key ) return - 1 ; <S2SV_ModStart> ) return 1 ; } <S2SV_ModEnd> } } <S2SV_null>,0
1581,<S2SV_ModStart> 0 ) ; if ( bNumEndpoints < sizeof ( * bNum ),0
1582,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> crypto_cipher_setkey <S2SV_ModEnd> ( tfm_cipher ) <S2SV_ModStart> ; crypto_cipher_setkey ( tfm_cipher ) ; crypto_setkey ( tfm_cipher <S2SV_ModEnd>, key, <S2SV_ModStart>, 0, 0 <S2SV_ModEnd> ) ; return",0
1583,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1584,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ] ) { av_log ( avctx, AV_LOG_ERROR, ""Malformed <S2SV_blank> too <S2SV_blank> large\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ) ; } if ( get_bits < 0 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> + 1 ; if ( avctx -> bit == 0 ) { av_log ( avctx -> bits, 0 ) ; return AVERROR_INVALIDDATA ; }",0
1585,<S2SV_ModStart> i > pos + delta,0
1586,<S2SV_ModStart> case EXIT_REASON_INVEPT : case EXIT_REASON_INVEPT :,0
1587,,0
1588,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } else if,0
1589,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
1590,<S2SV_ModStart> ++ r ; if <S2SV_ModEnd> ( int ) return,0
1591,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> x ), MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> ; } } return ( <S2SV_ModStart> dds_info, 16, exception ) ) <S2SV_ModEnd> ; } <S2SV_null>",0
1592,"<S2SV_ModStart> ; if ( tcp_filter <S2SV_ModEnd> ( sk, <S2SV_ModStart> ) goto err ; } if (",0
1593,<S2SV_ModStart> ; if ( Z_TYPE_RETURN_FALSE ; } if (,0
1594,"<S2SV_ModStart> return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_DONTWAIT )",0
1595,"<S2SV_ModStart> w ) ; memset <S2SV_ModEnd> ( w,",0
1596,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> d = 0 <S2SV_ModStart> = 1 ; if ( file == NULL ) { FILE_ERROR ( st = - 1 ; FILE_EXTEND | O_APPEND | O_CLOEXEC | O_NOFOLLOW | O_NOEXEC | O_NOFOLLOW | O_NOEXEC | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOCTTY <S2SV_ModEnd> ) ; if,0
1597,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! f2fs_readonly (,1
1598,<S2SV_ModStart> AcquireQuantumMemory ( pixels_length + image -> rows,0
1599,"<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd>, sprintf",0
1600,,0
1601,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1602,"<S2SV_ModStart> ( cpi, <S2SV_ModEnd> ) ; #",0
1603,<S2SV_ModStart> == ARPHRD_ETHER ) { <S2SV_ModStart> ether_setup ) ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; },1
1604,"<S2SV_ModStart> * data ; struct stream packet = * s ; <S2SV_ModStart> ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } if (",1
1605,<S2SV_ModStart> return NULL ;,0
1606,<S2SV_ModStart> { if ( l == NULL ) break ; if (,1
1607,<S2SV_ModStart> portBYTE_ALIGNMENT_MASK ) { if ( xWantedSize + xWantedSize > xWantedSize ) { xWantedSize = xWantedSize & portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_MASK ) ) ; xWantedSize = 0 ; } else { xWantedSize = 0 ; },0
1608,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1609,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1610,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpDiff ( TIFF <S2SV_ModStart> cc ) ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> stride ) )!= 0 ) return 0 ;,0
1611,"<S2SV_ModStart> * buf ; struct stream packet = * s ; <S2SV_ModStart> ( s ; if (! s_check_rem ( s, 16, 8 ) ) { rdp_protocol_error ( ""rdpredictor <S2SV_blank> data <S2SV_blank> of <S2SV_blank> large"", & s, 8 ) ; }",0
1612,<S2SV_ModStart> (! e <S2SV_ModEnd> ) ; if,0
1613,"<S2SV_ModStart> int ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
1614,<S2SV_ModStart> { uint16 bitspersample = 1,0
1615,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1616,<S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> coef_probs [ tx_size,0
1617,<S2SV_ModStart> ; r = fmode_t fmode <S2SV_ModEnd> ; if (,0
1618,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x0 ; state -> data [ 1 ] = 0x0 ; if ( dvb_usb_generic_rw ( d, state -> data, 1, state -> data, 1, 0 ) < 0 ) return - 1 <S2SV_ModEnd> ; } <S2SV_null>",0
1619,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1620,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
1621,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> read_block ( VP9_COMMON <S2SV_ModStart> * xd, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> int i, vpx_prob <S2SV_ModEnd> yv_stride ) { <S2SV_ModStart> return 0 ; } <S2SV_ModEnd> } <S2SV_null>",0
1622,<S2SV_ModStart> return 0 ; if ( len < buf ) return - 1 ;,0
1623,,0
1624,<S2SV_ModStart> tk_status ) ; switch ( task -> tk_status ) { case - EACCES : case - EIO : goto die ; default : <S2SV_ModStart> goto retry_rebind ; },1
1625,<S2SV_ModStart> uint8_t i ; if ( i + iinfo -> i_len > bs ) goto out ; <S2SV_ModStart> ) goto out ; } if ( iov_len < iov_base ) { if ( iov_len > bh -> i_len ) goto out ; } <S2SV_ModStart> ) { if ( iov_len < iov_len ) goto out ; } <S2SV_ModStart> ) ) { if ( iov_base ) { if ( iov_len < bs ) goto out ; },0
1626,"<S2SV_ModStart>, n ) ; if ( w == NULL ) return 0",1
1627,<S2SV_ModStart> x ) ; <S2SV_ModEnd> } assert (,0
1628,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> vp9_block_tile_index ( void <S2SV_ModStart> int i ; const VP9EncoderConfig * const uint8_t * tile_data = & tile_info <S2SV_ModEnd> MACROBLOCKD * <S2SV_ModStart> int i ; uint8_t * ) { VP9_COMMON * const uint8_t * const tile_info = & tile_data -> tile_info ; MACROBLOCKD * const tile_info = & tile_data -> tile_info ; MACROBLOCKD * sizeof ( * ) - 1 ; <S2SV_ModStart> ) ) { vpx_read_bit ( & <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ) ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> tmp ) ; } <S2SV_ModEnd> return 0 ;",0
1629,<S2SV_ModStart> ; if (! i ) return 0 ; if (,0
1630,<S2SV_ModStart> ; if (! err ) return - EINVAL ; if (,0
1631,<S2SV_ModStart> <S2SV_null> <S2SV_null> static S2SV_null> static <S2SV_ModStart> ) { const VP9_COMMON * const xd = & cpi -> seg ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) return - 1 ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ; } memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi ->,0
1632,<S2SV_ModStart> 10100 : if (! protocol -> protocol ) return - ENOMEM ;,0
1633,<S2SV_ModStart> ; if ( TIFF > 0 &&,0
1634,<S2SV_ModStart> ; # else ( void ) cpi ->,0
1635,,0
1636,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1637,,0
1638,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1639,<S2SV_ModStart> ; WORD32 ret <S2SV_ModEnd> ; ps_dec ->,0
1640,<S2SV_ModStart> ) ) ; WARN_ON (! ( vma -> vm_flags & VM_MAYWRITE ) ) ;,0
1641,<S2SV_ModStart> ; if ( key_is_free <S2SV_ModEnd> ( data ),0
1642,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL ) )",0
1643,<S2SV_ModStart> ) ) ; if <S2SV_ModEnd> ( ops ->,0
1644,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x0 ; state -> data [ 1 ] = 0x0 ; if ( dvb_usb_generic_rw ( d, state -> data, 1, state -> data, 1, 0 ) < 0 ) return - 1 <S2SV_ModEnd> ; } <S2SV_null>",0
1645,<S2SV_ModStart> char * a <S2SV_ModEnd> const char *,0
1646,<S2SV_ModStart> g ) ; g -> g ->,0
1647,<S2SV_ModStart> ; } } kfree ( buf ) ;,0
1648,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return s ;,0
1649,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct netcb_options * ctx <S2SV_ModEnd> ; struct sock_t <S2SV_ModStart> ; struct sockaddr_t * <S2SV_ModStart> ; struct sockaddr_t * ctx ; struct sockaddr_t * ctx ; int ret ; <S2SV_ModStart> ; if (! ( <S2SV_ModEnd> client_id ) ) { <S2SV_ModStart> = - 1 ; } <S2SV_ModEnd> return 0 ;,0
1650,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & cpi,0
1651,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
1652,"<S2SV_ModStart> PERF_COUNT_SW_EMULATION_FAULTS, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
1653,"<S2SV_ModStart> ( bp, len <S2SV_ModEnd> ) ) ;",0
1654,"<S2SV_ModStart> ctx, expr -> unary. child",1
1655,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1656,"<S2SV_ModStart> int mptctl_do_download ( MPT_ADAPTER * iocp, <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; if (",0
1657,"<S2SV_ModStart> < 0 ) { data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } <S2SV_ModEnd> * p ++",0
1658,,0
1659,,0
1660,"<S2SV_ModStart> int l, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> ) { vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> intra_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> int ) ; vpx_read_literal <S2SV_ModEnd> ( r,",0
1661,<S2SV_ModStart> ; int is_valid = ( error == GIT_OK ) <S2SV_ModStart> giterr_clear ( ) <S2SV_ModEnd> ; error =,1
1662,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * tree,",0
1663,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_inter_mode ( VP9_COMMON <S2SV_ModStart> * cm, MACROBLOCKD * xd, vpx_reader <S2SV_ModEnd> * r )",0
1664,<S2SV_ModStart> ; } } if (!,0
1665,<S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH switch ( const VPX_IMG_FMT_HIGHBITDEPTH ) { case VPX_IMG_FMT_HIGHBITDEPTH return - 1 ; } # if CONFIG_VPX_FMT_HIGHBITS - 1 ; # ifdef CONFIG_VPX_HIGHBITDEPTH vpx_write_bit ( & VPX_IMG_FMT_HIGHBITDEPTH ) ; # endif <S2SV_ModStart> return - 1 ; },0
1666,"<S2SV_ModStart> ) ) ; ND_TCHECK <S2SV_ModEnd> ( ndo,",0
1667,<S2SV_ModStart> NULL ) { r =,0
1668,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1669,<S2SV_ModStart> ; if ( key_is_negative ( key <S2SV_ModEnd> ) ) ==,0
1670,<S2SV_ModStart> ; if ( skb -> len < sizeof ( struct nlattr ) ) return 0 ; if (,0
1671,"<S2SV_ModStart> ]. size ; if ( ~ length < 16 ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" )",1
1672,,0
1673,"<S2SV_ModStart> -> cac_id, serial -> len <S2SV_ModEnd> ) ; SC_FUNC_RETURN",1
1674,<S2SV_ModStart> ; # endif tok -> type_comments = 0 ;,0
1675,<S2SV_ModStart> avg ) { if ( av,0
1676,<S2SV_ModStart> ) ) { if ( <S2SV_ModEnd> f -> c ->,0
1677,"<S2SV_ModStart> ; buff [ MIN ( ( size_t ) r, ( sizeof buff ) - 1 ) <S2SV_ModEnd> ] = '\\0'",1
1678,,0
1679,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> ) ; } if ( ret > ( ssize_t ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
1680,,1
1681,<S2SV_ModStart> ; if ( s == NULL ) return FALSE,0
1682,<S2SV_ModStart> ) ) { struct ipv6_txoptions * opt = NULL ; <S2SV_ModStart> ( opt ) ; opt = rcu_read_lock ( ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( opt,0
1683,"<S2SV_ModStart>, u_char * data_len <S2SV_ModStart> ] ; int i <S2SV_ModEnd> = 0 ; <S2SV_ModStart> break ; } if ( (! data_len ) { DPRINTF ( ""Error <S2SV_blank> tiles <S2SV_blank> file <S2SV_blank> no <S2SV_blank> data <S2SV_blank> data\\n"" ) ) ; return - 1 ; } <S2SV_ModStart> 1 ; } <S2SV_ModStart> ) ) { if ( decoder == NULL ) { DPRINVALIDDATA ; goto fail ; } <S2SV_ModStart> if ( ( ( ( ( uint32_t ) == - 1 ) { DPRINVAL ; } <S2SV_ModStart>, sizeof ( uint32_t ) - 1 ) == - 1 ) { DPRINVAL ; goto fail ; } <S2SV_ModStart> 1 ) { DPRINVALID_DATA ; }",0
1684,"<S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPDRL <S2SV_ModEnd>, 0x00 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPDRL <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPDRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERR ) <S2SV_ModEnd> ; dm9000WriteReg (",0
1685,<S2SV_ModStart> if ( count > <S2SV_ModEnd> 4 ) {,0
1686,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",0
1687,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> nmap )",0
1688,<S2SV_ModStart> sb ) { struct iov_base * s ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> if (!,0
1689,"<S2SV_ModStart> new_parent ) { <S2SV_ModEnd> __ptrace_link ( child <S2SV_ModStart>, new_parent, current_cred ( ) <S2SV_ModEnd> ) ; }",1
1690,<S2SV_ModStart> NULL ) { r =,0
1691,"<S2SV_ModStart> c_str ) ; if ( cib -> command. TEMP_FAILURE_RETRY ( <S2SV_ModStart> encrypted ), 0 )",0
1692,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> lock_sock ( sk,0
1693,"<S2SV_ModStart> ( cpi, <S2SV_ModEnd> ) ; }",0
1694,<S2SV_ModStart> -> hdr ; <S2SV_ModEnd> if ( h,0
1695,,0
1696,<S2SV_ModStart> - EOPNOTSUPP ; msg -> msg_namelen = 0 ;,0
1697,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
1698,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> * sizeof ( <S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> ; pixels =",0
1699,<S2SV_ModStart> comp -> type <S2SV_ModEnd> ) )!=,0
1700,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1701,<S2SV_ModStart> c_conn ) ; <S2SV_ModEnd> } <S2SV_null> static,0
1702,<S2SV_ModStart> -> pending = 0 <S2SV_ModEnd> ; if (,0
1703,<S2SV_ModStart> ) ; },0
1704,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1705,<S2SV_ModStart> ) ; goto out_free <S2SV_ModEnd> ; } if,0
