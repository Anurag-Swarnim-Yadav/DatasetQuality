,raw_predictions,correctly_predicted
0,"<S2SV_ModStart> ) ; } memset ( wmm, 0, 0, sizeof ( wmm ) ) ;",0
1,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
2,,0
3,<S2SV_ModStart> c ) { <S2SV_ModEnd> const char *,0
4,,0
5,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) ) { return 0 ; <S2SV_ModStart> ] ) ; } <S2SV_ModEnd> if (!,0
6,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int tran_low_t ( tran_t <S2SV_ModEnd> * input, <S2SV_ModStart> 8 ] ; tran_low_t <S2SV_ModEnd> int tran_t <S2SV_ModStart> 0 ; tran_low_t <S2SV_ModEnd> temp [ 2 <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> temp [ 2 <S2SV_ModStart> 0 ] = input [ 3 ] ; tran_low_t <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 0 ] = ( tran_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) ; tran_low_t <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_t ) <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) ; tran_low_t <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 0 ] = ( tran_low_t )",0
7,"<S2SV_ModStart> = 0 ; unsigned char sense_buffer <S2SV_ModEnd> = 0 ; <S2SV_ModStart> cgc -> senseptr, sizeof ( cgc -> sense ) <S2SV_ModEnd> ; if (",0
8,<S2SV_ModStart> = 0 ; # endif,0
9,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_err_frame ( VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const MACROBLOCKD * const <S2SV_ModStart> = & cpi -> common ; MACROBLOCKD * const lf = & cpi -> common ; MACROBLOCK_level = & cpi -> common ; MACROBLOCK_low_t * const lf = & cpi -> oxcf. pass ; if ( cpi -> oxcf. pass == KEY_FRAME ) { if ( cpi -> oxcf. pass == KEY_FRAME ) { vp9_err = & cpi -> oxcf. pass ) ; break ; } # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. pass == KEY_FRAME ) { if ( cpi -> oxcf. pass == KEY_FRAME ) { if ( cpi -> frame_FRAME_err ),0
10,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
11,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_writer <S2SV_ModEnd> ( vpx_writer <S2SV_ModStart> ( w, vpx_writer <S2SV_ModEnd> ( w,",0
12,<S2SV_ModStart> == 0 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_64 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_64 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_BLOCK_SIZE ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_BLOCK_SIZE ( ) ; <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_BLOCK_SIZE_SIZE_SIZE_64 ; <S2SV_ModStart> = COAP_BLOCK_SIZE_BLOCK_SIZE_SIZE_BLOCK_SIZE_SIZE ( ) ; <S2SV_ModStart> = COAP_BLOCK_BLOCK_SIZE_SIZE_BLOCK_SIZE_SIZE_SIZE ( ) <S2SV_ModEnd> = COAP_BLOCK_SIZE,0
13,"<S2SV_ModStart> length ) { if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> if ( length < 2 ) { ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> if ( length < 4 ) ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; length -= 2 ; length -= 2 ; length -= 2 ; length -= 2 ; length -= 2 ; length -= 2 ; <S2SV_ModStart> if ( length < 4 ) { ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; length -= 2 ; length -= 2 ; length -= 2 ; length -= 2 ; length -= 2 ; length -= 2 ; <S2SV_ModStart> ) ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; }",0
14,<S2SV_ModStart> == NULL ) { <S2SV_ModStart> return res ; } <S2SV_ModEnd> if (!,0
15,<S2SV_ModStart> = 0 ;,0
16,<S2SV_ModStart> ; if ( <S2SV_ModEnd> addr -> l2tp_family <S2SV_ModStart> ) return - EINVAL <S2SV_ModEnd> ; if (,0
17,,0
18,,0
19,,0
20,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",0
21,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL ) )",0
22,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_frame ( TWO_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> pcnt_motion_motion_motion_stats ( const twopass, const TWO_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> this_frame_frame_stats ( twopass, twopass, twopass, twopass, twopass ) <S2SV_ModStart> ( twopass, twopass, twopass, twopass, twopass ) { const FIRSTPASS_STATS * const FIRSTPASS_STATS * stats_frame_frame_frame_perf_frame_frame_frame <S2SV_ModEnd> ( twopass, <S2SV_ModStart> pcnt_stats ( twopass, twopass, twopass, twopass <S2SV_ModEnd> ) ; return <S2SV_ModStart> this_frame_frame_frame_stats ( twopass, twopass <S2SV_ModEnd> ) ; }",0
23,,0
24,,0
25,<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> len = 0 <S2SV_ModStart> = 0 ; if ( len < 0 ) { err = - 1 ; goto out <S2SV_ModEnd> ; } if,0
26,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
27,<S2SV_ModStart> pb ) ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ;,0
28,"<S2SV_ModStart> mntent, rootfs -> mount",0
29,<S2SV_ModStart> io ) ; <S2SV_ModEnd> return 0 ;,0
30,<S2SV_ModStart> ) break ; <S2SV_ModEnd> } break ;,0
31,,0
32,<S2SV_ModStart> ( vpx_codec_alg_priv_t * ) <S2SV_ModEnd> ; if (,0
33,<S2SV_ModStart> rollover ) { mutex_lock ( & fanout_mutex ) ; <S2SV_ModStart> mutex ) ; mutex_lock ( & fanout_mutex ) ; mutex_lock ( & fanout_mutex ) ; <S2SV_ModStart> mutex ) ; mutex_lock ( & fanout_mutex ) ; mutex_lock ( & fanout_mutex ) ; <S2SV_ModStart> mutex ) ; mutex_unlock ( & fanout_mutex ) ; mutex_unlock ( & fanout_mutex ) ; <S2SV_ModStart> mutex ) ; mutex_unlock ( & fanout_mutex ) ; mutex_unlock ( & rollover -> rollover -> fanout_mutex ) ; <S2SV_ModStart> mutex_unlock ( & fanout_mutex ) ; mutex_unlock ( & fanout_mutex ) ; err = - EINVAL ; goto out : rollover = - EINVAL ; <S2SV_ModStart> atomic_long_long_long_long_long_huge ( & rollover ) ; <S2SV_ModEnd> rollover = NULL <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover ) ;,0
34,,0
35,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
36,,0
37,"<S2SV_ModStart> ( interface, ENC28J60_ECON1 ) { <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd>, ENC28J60_ECON1 ) ; <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd>, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd> ) ; enc28J60_ECON1 <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd>, ENC28J60_ECON1 ) ; <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd>, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd> ) ; enc28J60_ECON1 <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd> ) ; }",0
38,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,0
39,<S2SV_ModStart> == 0 ) { <S2SV_ModEnd> return 0 ;,0
40,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> vp9_alloc_stride ( void <S2SV_ModStart> vp8_alloc_alloc_stride, vp8_alloc_stride <S2SV_ModEnd> ( input, <S2SV_ModStart>, vpx_stride ) ; memset <S2SV_ModEnd> ( input, <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( qb,",0
41,"<S2SV_ModStart> ptr ) ; memset ( ptr, 0, sizeof ( ptr, sizeof ( ptr ) ) ) ;",0
42,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; <S2SV_ModEnd> int error = <S2SV_ModStart> int mb ; if ( bh -> bh. mb2_mb_cache_cache_cache_entry ( bh, hash, bh -> bh -> b_cache, hash, bh -> b_mb_cache, bh -> bh -> b_cache, hash, bh -> b_hash ) ; <S2SV_ModStart> ( bh, <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( bh -> bh -> b_cache_free <S2SV_ModEnd> ( bh ->",0
43,,0
44,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( optlen, opt -> optlen <S2SV_ModEnd> ) ; if",0
45,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
46,,0
47,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & acl )",0
48,<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> memset ( 0,0
49,,0
50,<S2SV_ModStart> ; if ( ( len < 0 ) &&,0
51,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> hdr_len ( struct <S2SV_ModStart> * rcu_block ) <S2SV_ModEnd> ; if (,0
52,"<S2SV_ModStart> value ) { u32 rem ; value -> tv_sec = div_u64_rem ( <S2SV_ModEnd> ( nsec,",0
53,<S2SV_ModStart> { if ( <S2SV_ModEnd> == 0 ),0
54,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( addr,0
55,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> SOCKS2SV_null> S_null> SOCKSV_nullS2SV_null> SOCKS2SV_null>,0
56,,0
57,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) ) ; rcu_read_unlock ( ) ;",0
58,<S2SV_ModStart> = 0 ; uint16 <S2SV_ModEnd> buff = 0,0
59,"<S2SV_ModStart> arg ) { if ( arg -> codec_interface <S2SV_ModEnd> ( arg, <S2SV_ModStart>, arg ) ) { else if ( arg -> codec_interface <S2SV_ModEnd> ( arg, <S2SV_ModStart>, arg, arg, arg, arg -> codec_interface <S2SV_ModEnd> ) ; else <S2SV_ModStart> arg ) ; else { <S2SV_ModEnd> } else {",0
60,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
61,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> out ; } ext_size = sizeof ( inode -> i_data ) ; memset ( bh, 0, sizeof ( ext_data ) ) ;",0
62,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
63,,0
64,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
65,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
66,"<S2SV_ModStart> = 0 ; int twopass -> twopass. gf_group = 0 ; <S2SV_ModStart> = 0 ; if (! cpi -> twopass. gf_group ) { cpi -> twopass. gf_zero ( & cpi -> twopass. gf_bits ) ; } else { cpi -> twopass. gf_group. gf_bits = 0 ; cpi -> twopass. bit_depth ; cpi -> twopass. bit_depth = 0 ; } else if ( cpi -> twopass. bit_depth > 0 ) { cpi -> twopass. gf_zero ( cpi -> twopass. bit_depth, & cpi -> twopass. bit_depth ) ; } <S2SV_ModEnd> = 0 ;",0
67,"<S2SV_ModStart> MagickMax ( number_planes, number_filled <S2SV_ModEnd> ) * number_planes",0
68,<S2SV_ModStart> } else { int retval ; <S2SV_ModEnd> if ( alt,0
69,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd>, state,",0
70,<S2SV_ModStart> ( fd = NULL <S2SV_ModEnd> ; char *,0
71,,0
72,<S2SV_ModStart> ; if ( cmd == 0 &&,0
73,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> VP9_CONTEXT <S2SV_ModStart> const vp9_buffer ( const <S2SV_ModStart> src -> uv_stride, vp9_buffer <S2SV_ModEnd> * src, <S2SV_ModStart> src -> uv_stride, const <S2SV_ModStart> src -> uv_stride, vp9_highbd_stride <S2SV_ModEnd> ( src, <S2SV_ModStart> src -> uv_stride,",0
74,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_near ( struct <S2SV_ModStart>, ctxt -> rc ; if ( rc!= X86EMUL_MODE_PROT64 ) return - EINVAL ; <S2SV_ModStart> ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>",0
75,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
76,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
77,,0
78,<S2SV_ModStart> goto out ; const char * fname = NULL ; <S2SV_ModStart> == NULL ) { <S2SV_ModEnd> if (! <S2SV_ModStart> goto out ; } <S2SV_ModEnd> if (! <S2SV_ModStart> goto out ; } <S2SV_ModEnd> if (!,0
79,,0
80,<S2SV_ModStart> } if ( <S2SV_ModEnd> udp_specified && settings,1
81,"<S2SV_ModStart> x, x",0
82,"<S2SV_ModStart> uint16_t length ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 2 ) { ND_PRINT ( ndo, EXTRACT_16BITS ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ) ; return ; } if ( length < 2 ) { ND_PRINT ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } ND_PRINT ( ndo, EXTRACT_16BITS ( ndo, EXTRACT_16BITS ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ndo, EXTRACT_PRINT ( ndo, EXTRACT_16BITS ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ) ; return ; } ND_PRINT ( ndo, EXTRACT_16BITS ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; ND_PRINT ( ndo, EXTRACT_16BITS ( ndo,",0
83,,0
84,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
85,<S2SV_ModStart> src -> stride <S2SV_ModEnd> ; const int,0
86,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,0
87,<S2SV_ModStart> ) { memcpy <S2SV_ModEnd> ( cpi ->,0
88,<S2SV_ModStart> target ) ; <S2SV_ModEnd> if (!,0
89,,0
90,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> n_async ) { <S2SV_ModStart> n_async ) { <S2SV_ModEnd> if ( CHILD <S2SV_ModStart> == 0 ) { CHILD ( CHILD ( CHILD ( n, 1 ), CHILD ( n, 1 ) ) ; if ( CHILD ( CHILD ( CHILD ( n, 1 ) ) == 0 ) { n = CHILD ( CHILD ( CHILD ( n, 1 ), 1 ) ; if ( CHILD ( CHILD ( n, 1 ) == 0 ) ) { n = CHILD ( CHILD ( CHILD ( n, 1 ), CHILD ( n, 1 ) ) ) ; } else { n = CHILD ( n, 1 ) ; if ( CHILD ( n ) == 0 ) { n = CHILD ( n, 1 ) ; } else { n = CHILD ( n, 1 ) ; if ( CHILD ( CHILD ( n, 1 ) == CHILD ( CHILD ( n, 0 ) ) ) { n = CHILD ( CHILD ( n, 1 ) ; } if ( CHILD ( CHILD ( n, 0 ) == 0 ) == 0 ) )",0
91,,0
92,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const MACROBLOCKD * const VP9_COMMON * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const xd = & cpi -> mi ; MACROBLOCKD * const MACROBLOCKD * const xd = & cpi -> mbmi ; MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const xd = & cpi -> mbmi. mbmi ; MACROBLOCKD * const xd = & cm -> mbmi. mbmi. mbmi. mbmi. mbmi. mbmi ; const int is_mode = xd ; const int segment_mode = xd -> mbmi. mbmi ; const int64_mode = MIN ( cm -> mbmi, mi_col, mbmi ) ; const int bsize = xd -> mbmi ; const int64_",0
93,<S2SV_ModStart> n ) { <S2SV_ModEnd> return 0 ;,0
94,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) goto trunc <S2SV_ModEnd> ; ND_PRINT (,0
95,<S2SV_ModStart> -> rq ; <S2SV_ModEnd> } else {,0
96,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
97,<S2SV_ModStart> ) ) ; ptr ->,0
98,<S2SV_ModStart> low ) { if ( reg -> next == NULL ) return - 1 ;,0
99,<S2SV_ModStart> int bq_spin_lock ( & bqq_lock ) ; <S2SV_ModStart> int bq_del ( bq_unlock <S2SV_ModEnd> ) ; int,0
100,,1
101,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
102,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
103,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ;,0
104,<S2SV_ModStart> NULL ) { status = MagickFalse ; break <S2SV_ModEnd> ; } image,0
105,<S2SV_ModStart> 0 ) ; if ( avio_feof ( s -> pb ) ) { ret = AVERROR_INVALIDDATA ; goto end ; },1
106,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, NULL )",0
107,<S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> new_size = 0,0
108,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> vpx_wb_wb_wb_write_bit ( wb, vpx_wb_bit <S2SV_ModEnd> ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; vpx_wb_wb_write_bit <S2SV_ModEnd> ( wb,",0
109,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
110,<S2SV_ModStart> 0 ; } msg -> msg_namelen = 0 ;,0
111,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> SCTP_null> SCTP_ADDR <S2SV_ModEnd> ; if ( <S2SV_ModStart> asconf ) { sctp_ack = sctp_addip_ack ; sctp_addip = sctp_addip ( sctp_chunk_t * ) sctp_addip ; sctp_addip = false ; sctp_addip = false ; if ( SCTP_ADDRESS == SCTP_ADDRESS ) { sctp_ERROR_ADDRESS ; sctp_addip = sctp_params ( sctp_addip, SCTP_ADDRESS, SCTP_ADDRESS, sctp_ADDRESS ) ; if ( err_code == SCTP_ERROR ) { if ( err_code == SCTP_ERROR_ADDRESS ) goto err_ADDRESS ; } if ( err_code == SCTP_ADDRESS ) { if ( err_code == SCTP_ERROR_ERROR_ADDRESS )",0
113,<S2SV_ModStart> exit ; } m -> msg_namelen = 0 ;,0
114,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
115,,0
116,<S2SV_ModStart> ; if ( ctx -> cfg. g_pass!= ctx -> ctx -> ctx -> cfg. g_pass || ( cpi -> ctx -> ctx -> ctx -> cfg. g_pass == 0 ) || ( ctx -> cpi -> cpi -> cpi -> oxcf. g_pass!= ctx -> ctx -> cpi -> cpi -> oxcf. screen_mode!= ctx -> ctx -> ctx -> ctx. g_pass || ( ctx -> ctx -> ctx -> ctx -> cpi -> ctx. g_pass == VPX_PASS ) || ( ctx -> ctx -> ctx -> cpi -> cpi -> ctx. g_pass == VPX_CODEC_PASS <S2SV_ModEnd> ) ||,0
117,<S2SV_ModStart> cpi ) { memcpy <S2SV_ModEnd> ( cpi ->,0
118,"<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; if ( ctxt -> mode == X86EMUL_CONTINUE ) rc = assign_eip_far ( ctxt, VCPU_SREG_CS ) ; rc = assign_eip_far ( ctxt, VCPU_CS ) ; if ( rc!= X86EMUL_CONTINUE ) rc = assign_eip_far ( ctxt -> mode!= X86EMUL_CONTINUE ) ; rc = assign_eip_far ( ctxt, VCPU_CONTINUE, VCPU_SREG_CS ) ; if ( rc!= X86EMUL_CONTINUE ) rc!= X86EMUL_CONTINUE <S2SV_ModEnd> ) return rc",0
119,<S2SV_ModStart> return - EINVAL <S2SV_ModEnd> ; if (,0
120,<S2SV_ModStart> ) ) ; ptr -> size = GF_ISOM_INVALID_FILE ; <S2SV_ModStart> ptr -> size ; ptr -> size <S2SV_ModEnd> ; while ( <S2SV_ModStart> tmp_strsize ) { GF_LOG_TRUE ; },0
121,,0
122,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> * state, fmode <S2SV_ModEnd> ) ; if",0
123,<S2SV_ModStart> read_info ) ; <S2SV_ModEnd> if ( EOFBlob,1
124,<S2SV_ModStart> ) { memcpy <S2SV_ModEnd> ( & i,0
125,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
126,<S2SV_ModStart> bpp <= 8 &&,0
127,"<S2SV_ModStart>, length, length <S2SV_ModEnd> ) ; if",0
128,,0
129,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> return ret ;,0
130,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, vpx_codec_alg_priv_t *",0
131,,0
132,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
133,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
134,<S2SV_ModStart> { rq = tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; fn (,1
135,<S2SV_ModStart> ( vpx_codec_alg_priv_t res <S2SV_ModEnd> ) ) {,0
136,<S2SV_ModStart> goto out ; <S2SV_ModEnd> msg -> msg_namelen,0
137,<S2SV_ModStart> skb_is_nonlinear ( skb ) ) return 0 ; if ( skb -> len < sizeof ( struct nlattr,1
138,"<S2SV_ModStart>, arg -> flags, 0",0
139,"<S2SV_ModStart> ) ) ; if ( tilebuf [ tilebufsize + 1 ] == 0 ) { TIFFError ( ""buffsize <S2SV_blank> be <S2SV_blank> buffsize <S2SV_blank> buffer <S2SV_blank> "" ) ; return 0 ; } tilebuf [ tilebufsize + 1 ] = 0 ; tilebuf [ tile_buffsize + 1 ] = 0 ; tile_buffsize = 0 ; tilebuf [ tile_buffsize + 1 ] = 0 ; tilebuf [ 0 ] = 0 ;",0
140,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
141,"<S2SV_ModStart> ( fp <S2SV_ModEnd>, & n",0
142,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return 0 ;,0
143,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
144,<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( lshp ) ;,0
145,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",1
146,,0
147,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd ) ),0
148,"<S2SV_ModStart> ctxt -> rcx, VCPU_REGS_RX <S2SV_ModEnd> ) ; rcx",0
149,"<S2SV_ModStart> * c, vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> int i, vpx_prob <S2SV_ModEnd> * probs,",0
150,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
151,<S2SV_ModStart> char buf [ size <S2SV_ModEnd> ] ; if,0
152,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 8x8 ( tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> 8 ] ; tran_low_t <S2SV_ModEnd> * input ; tran_t <S2SV_ModStart> 8 ] ; tran_low_t <S2SV_ModEnd> t ; tran_t <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> * output = <S2SV_ModStart> 0 ] ; tran_t <S2SV_ModEnd> x1 ; tran_low_t <S2SV_ModStart> 0 ] ; tran_t <S2SV_ModEnd> x8 ( tran_low_t <S2SV_ModStart> 0 ] ; tran_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 1 ] ; tran_low_t <S2SV_ModEnd> * output = <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 0 ] ; tran_t <S2SV_ModEnd> x4 = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) ; tran_t <S2SV_ModEnd>",0
153,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flags &= ~ (,0
154,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
155,"<S2SV_ModStart> tot_len ) ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
156,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flags & CL_UNPRIVILEGED,0
157,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_cols ( VP9_COMMON * cm, MACROBLOCKD * xd, MACROBLOCKD * xd, <S2SV_ModEnd>, mi_col, <S2SV_ModStart>, mi_cols, xd <S2SV_ModEnd>, mi_cols,",0
158,,0
159,<S2SV_ModStart> ; if (! EXT4_GET_BLOCK ( mb ) ) return 0 ;,0
160,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> OE_RAISE_ERRNO ( OE_E_EINVAL <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { oe_sockaddr_t ret = - 1 ; OE_RAISE_ERRNO ( oe_E_EINVAL ) ; if ( oe_t ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; goto out ; } if ( <S2SV_ModStart> ) ) { ret = - 1 ; oe_sockaddr_t ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; goto out ; } if (,0
161,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",0
162,<S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> coef_probs,0
163,"<S2SV_ModStart> data ) { u8 * buf ; int ret = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, buf, buf <S2SV_ModEnd>, size,",0
164,<S2SV_ModStart> * p = NULL <S2SV_ModEnd> ; if (,0
165,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> vp9_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> uv_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
166,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
167,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> cpi ) { if ( cpi -> oxcf. pass == VP9_COMP_KEY_FRAME ) { if ( cpi -> oxcf. pass == VP9_COMMON * cm -> bit_depth ) { if ( cpi -> oxcf. bit_depth = cpi -> bit_depth ; if ( cpi -> bit_depth > 0 ) { if ( cpi -> oxcf. bit_depth = cpi -> bit_depth ; } else if ( cpi -> bit_depth > MAX_depth ) { if ( cpi -> oxcf. bit_depth = cpi -> bit_depth ; },0
168,"<S2SV_ModStart> ) ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
169,"<S2SV_ModStart> = getnum ( <S2SV_ModEnd> fmt, MAXALIGN",0
170,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
171,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
172,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
173,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
174,,0
175,,0
176,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_seq, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\"" <S2SV_blank> field <S2SV_blank> \\"" <S2SV_blank> missing <S2SV_blank> field <S2SV_blank> field <S2SV_blank> \\"" ) ; return 1 ; } else <S2SV_ModEnd> { int res <S2SV_ModStart> int res ; res = obj2ast_ignores <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto failed ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> goto failed ; } if ( tmp == NULL || tmp == NULL ) { Py_CLEAR ( tmp ) ; } if ( tmp == NULL || tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\"" ) ; return 1 ; } if ( tmp == NULL || tmp == NULL || tmp == NULL ) { Py_CLEAR ( tmp ) ; } else { Py_CLEAR ( tmp ) ; } if ( tmp == NULL || tmp == NULL ) { Py_CLEAR ( tmp == NULL ) ; } else { Py_CLEAR ( tmp ) ; } if ( tmp == Py_",0
177,,0
178,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ jas_uchar,0
179,"<S2SV_ModStart> & ds64_chunk, ds64_chunk, sizeof ( CS64Chunk ) ) ; if ( cs64_chunk ) { cs64_chunk = sizeof ( CS64_chunk ) ; ds64_chunk = sizeof ( CS64Chunk ) ; cs64_chunk ) ; cs64_chunk = sizeof ( CS64Chunk ) ds64_chunk ) ; cs64_chunk = sizeof ( CS64Chunk ) ; if ( cs64_chunk ) cs64_chunk ) { cs64_chunk = sizeof ( cs64_chunk ) ; cs64_chunk ) ; cs64_chunk = sizeof ( cs64_chunk ) ; ds64_chunk ) ; cs64_chunk = sizeof ( cs64_chunk ) ; cs64_chunk = sizeof ( CS64_chunk ) ; cs64_chunk ) ; cs64_chunk = cs64_chunk ; cs64_chunk = sizeof ( CS64_chunk ) ; if ( cs64_chunk ) cs64_data_chunk = sizeof ( cs64_chunk )",0
180,<S2SV_ModStart> ( msg_name ) ; if ( msg -> msg_name && msg_namelen!= msg_namelen ) { <S2SV_ModStart> msg -> msg_namelen = msg_namelen ; } <S2SV_ModEnd> if ( msg,0
181,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct <S2SV_ModEnd> inode * bh,0
182,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return rc ;,0
183,,0
184,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 0 ) { if ( fprintf ( stderr, ""error"" ) { fprintf ( stderr, ""Error: <S2SV_blank> file <S2SV_blank> %s\\n"", fprintf ( fname ) ) ; return 0 ; } if ( <S2SV_ModStart> 0 ) { if ( fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank> %s\\n"", fprintf ( fname ) ) ; return 1 ; } if ( fprintf ( stderr, ""Error: <S2SV_blank> a <S2SV_blank> %s\\n"", fprintf ( fname ) ) ) ; exit ( fprintf ( stderr, ""Error: <S2SV_blank> %s\\n"", fname ) ; } if ( fprintf ( fname ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> %s\\n"", fname ) ; return 1 ; } if ( fprintf ( fprintf ( stderr, ""Error: <S2SV_blank> %s\\n"", fprintf ( fname ) ) ) ; return 1 ; } <S2SV_ModEnd> ; }",0
185,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
186,"<S2SV_ModStart> { if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
187,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
188,"<S2SV_ModStart> ( interface, KSZ8851_IS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_IS <S2SV_ModEnd> ) ; if",0
189,"<S2SV_ModStart> cm, struct vpx_bit_depth_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> cm, vpx_wb_literal <S2SV_ModEnd> ( wb,",0
190,"<S2SV_ModStart> } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
191,<S2SV_ModStart> ( key = NULL <S2SV_ModEnd> ; if (,0
192,,0
193,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE_MODE_INFO ( VP9_COMMON * xd, VP9_COMMON * cm, MACROBLOCKD * xd, MACROBLOCKD * xd, xd, <S2SV_ModEnd>, xd, <S2SV_ModStart>, mi_row, mi_row, mi_row, mi_row, xd -> mi_row, xd <S2SV_ModEnd>, mi_row, <S2SV_ModStart> x8 ) ; <S2SV_ModEnd> return 0 ;",0
194,,0
195,,0
196,,0
197,<S2SV_ModStart> src_reg ) ; <S2SV_ModEnd> if ( src_reg,0
198,,0
199,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
200,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
201,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> Svc_ctx <S2SV_ModEnd> vp9_ctx ( VP9_COMP <S2SV_ModStart> ; int si <S2SV_ModEnd> = 0 ; int <S2SV_ModStart> = 0 ; int si <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; for ( i ; i = 0 ; i < 2 ; i ) svc_ctx -> svc_ctx [ i ] = 0 ; for ( i ; i = 0 ; i < svc_ctx -> length_frame_t ) { svc_ctx [ i ] = 0 ; svc_ctx -> spatial_layer_idx = ( svc_frame_frame_t ) ; for ( i = 0 ; i = 0 ; i < 0 ; i ++ i ) { svc_ctx -> svc_ctx -> length_frame_t <S2SV_ModEnd> ; svc_ctx <S2SV_ModStart> ++ ) { if ( si == VPX_CODEC_ERROR ) { if ( <S2SV_ModEnd> ( svc_ctx -> <S2SV_ModStart> i ] == VPX_CODEC_CODEC_ERROR ) { svc_ctx -> stats_frame_frame_t <S2SV_ModEnd> ( svc_frame_frame_frame,0
202,<S2SV_ModStart> screen ) ; if ( screen -> buffer == NULL ) return NULL,0
203,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> char * end_null> <S2S2SV_null> static <S2SV_ModStart> char * end_null> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> n_null> <S2SV_null>,0
204,,0
205,,0
206,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
207,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",1
208,,0
209,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> MACROBLOCKD * const VP9_COMMON * const VP9_COMMON * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const xd = & cpi -> common ; MACROBLOCKD * const MACROBLOCKD * const xd ; MACROBLOCKD * const xd = & cpi -> common ; MACROBLOCKD * const MACROBLOCKD * const xd ; MACROBLOCKD * const xd = & cpi -> common ; MACROBLOCKD * const MACROBLOCKD * const xd = & cpi -> common ; MACROBLOCKD * const MACROBLOCKD * const xd = & cpi -> common ; MACROBLOCKD * const MACROBLOCKD * const xd = & cpi -> common ; MACROBLOCKD * const MACROBLOCK_MODE_MODE_INFO * const xd = & cpi -> common ; MACROBLOCKD * const MACROBLOCKD * const int,0
210,,0
211,<S2SV_ModStart> ( fd = NULL <S2SV_ModEnd> ; char *,0
212,<S2SV_ModStart> mnt ) ; nd -> last_type = LAST_BIND ;,1
213,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> optlen, optlen <S2SV_ModEnd> * optlen, <S2SV_ModStart> ( opt -> optlen, optlen <S2SV_ModEnd> ) ; if",0
214,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
215,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> UINT32_MAX - 1 <S2SV_ModStart> ; if ( len < 0 ) { prphdrlen = - 1 ; goto err ; } if ( <S2SV_ModStart> ) ) { prphdrlen = - 1 ; goto errno_errno ; } pcap_delen = - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { prpcap_err ( ""%s: <S2SV_blank> to <S2SV_blank> for <S2SV_blank> for <S2SV_blank> for <S2SV_blank> to <S2SV_blank> %d\\n"", errno ) ; goto errno_errno ; } rpcapable = - 1 <S2SV_ModEnd> ; break",0
216,,0
217,<S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; q,0
218,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
219,"<S2SV_ModStart>!= EOF ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
220,<S2SV_ModStart> ) ) ; ND_TCHECK2 ( bp [ 0 ] ) ;,0
221,,0
222,<S2SV_ModStart> * row ; jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_matind_t,0
223,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
224,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
225,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
226,,0
227,"<S2SV_ModStart> ( pcount, pcount <S2SV_ModEnd> ) ; pcount",0
228,<S2SV_ModStart> env ) ; <S2SV_ModEnd> } if (,0
229,<S2SV_ModStart> chr ) { if ( len > 4 ) { <S2SV_ModStart> c -> error = c -> error ; },0
230,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> 16 ] ; tran_low_t <S2SV_ModEnd> * outptr = <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ j",0
231,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_FAILURE_RETRY ( <S2SV_ModStart> prime_arg ) ; g_empty ( key, 0 ) ;",0
232,"<S2SV_ModStart> fp ) { int fp = - 1 ; <S2SV_ModStart> ) ) ; if (! file ) return - 1 ; <S2SV_ModStart> ) ) { fprintf ( fp, file, ""%s: <S2SV_blank> %s\\n"", file ) ; return - 1 ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null>",0
233,<S2SV_ModStart> elen ) ; elen += elen + elen + elen + elen + sizeof ( elen ) ;,0
234,<S2SV_ModStart> ) ) { ND_TCHECK_16BITS ( tptr + 1 ) ;,0
235,,0
236,"<S2SV_ModStart> int length ; struct stream packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""recv(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> of <S2SV_blank> overrun"", & packet ) ; return FALSE ; } <S2SV_ModStart> length ) ; if ( length < 4 ) { s_check_rem ( s, length ) ; s_rem ( s, length ) ; }",0
237,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
238,"<S2SV_ModStart> ) ; } copy_as_user <S2SV_ModEnd> ( src,",0
239,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return 0 ;,0
240,"<S2SV_ModStart> -> x = MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> x = MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 0.0f,",0
241,,0
242,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi ->,0
243,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( tcount ) ) ;",0
244,<S2SV_ModStart> ; } } if (,0
245,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int len ; size_t len ; size_t len = 0 ; if ( len > 0 ) { int len = 0 ; size_t len = 0 ; if ( len > 0 ) goto out ; } <S2SV_ModStart> = malloc ( alloc <S2SV_ModEnd> ) ; if,0
246,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
247,,0
248,<S2SV_ModStart> cur ) { if (! str ) return 0 ;,0
249,<S2SV_ModStart> no ) { <S2SV_ModEnd> return 0 ;,0
250,<S2SV_ModStart> ( ++ ) <S2SV_ModEnd> ; if (,0
251,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
252,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
253,"<S2SV_ModStart> ) { size_t <S2SV_ModEnd> image -> image <S2SV_ModStart> = sizeof ( image -> columns, <S2SV_ModEnd> ) ; if",0
254,<S2SV_ModStart> NULL ) { <S2SV_ModEnd> if (!,0
255,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( length",0
256,<S2SV_ModStart> bus ] ; if ( bi == NULL ) return NULL ;,0
257,<S2SV_ModStart> ) ) ; msg -> msg_namelen = 0 ;,0
258,<S2SV_ModStart> * s ; <S2SV_ModEnd> while ( s,0
259,"<S2SV_ModStart> = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
260,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> pci_null> <S2SV_null>,0
261,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( authctxt,0
262,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> int64_max_unsigned int <S2SV_ModStart> int64_max_max ( vpx_read_bit_max ( vpx_bit <S2SV_ModEnd>, max_unsigned int <S2SV_ModStart> max, max <S2SV_ModEnd> ) ; return",0
263,<S2SV_ModStart> -> signature = NULL <S2SV_ModEnd> ; if (,0
264,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> np -> opt ) ; rcu_read_unlock ( ) ; rcu_unlock ( ) ;",0
265,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> cpi ) { if ( cpi -> oxcf. tx_mode == VP9_COMMON * cpi -> oxcf. tx_mode ) { if ( cpi -> oxcf. tx_mode == 0 ) { cpi -> oxcf. tx_mode = cpi -> frame_mode ; } else if ( cpi -> oxcf. tx_mode == 1 ) { cpi -> sf_mode = 1 ; } else { cpi -> sf_mode = cpi -> sf_mode ; } else if ( cpi -> oxcf. tx_mode == INTRA_MAX ) { cpi -> sf_mode = cpi -> sf_mode ; } else { if ( cpi -> frame_mode == VPX_MAX_MODE ) { cpi -> sf_mode = cpi -> frame_mode ; } else { cpi -> frame_mode = cpi -> sf_mode ; },0
266,<S2SV_ModStart> else if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1 <S2SV_ModStart> { if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1,1
267,<S2SV_ModStart> ( buf2 ) return <S2SV_ModEnd> ; if (,0
268,,0
269,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
270,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
271,<S2SV_ModStart> ctxt -> _eip <S2SV_ModEnd> ; rc =,0
272,"<S2SV_ModStart> list. name, true",1
273,<S2SV_ModStart> -> rq ; <S2SV_ModEnd> } else {,0
274,,0
275,,0
276,<S2SV_ModStart> cmd ) { <S2SV_ModEnd> return err ;,0
277,"<S2SV_ModStart>, annotation, NULL,",0
278,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
279,"<S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
280,<S2SV_ModStart> ctxt ) { int rc ; <S2SV_ModStart> ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>,0
281,,1
282,<S2SV_ModStart> ) ; } <S2SV_ModEnd> return res ;,0
283,"<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; psf -> <S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd>, psf -> <S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd>, psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd>, psf -> header.",0
284,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
285,,0
286,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
287,<S2SV_ModStart> ; # if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> frame_flags & ctx -> frame_flags_mode == 0 && ( ctx -> frame_flags & ctx -> frame_mode ) ) return 0 ;,0
288,"<S2SV_ModStart> ( ndo, ""%s"", len",0
289,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = 0 ; # if CONFIG_VP9_COMMON <S2SV_ModEnd> ( & cpi,0
290,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src,",0
291,,0
292,<S2SV_ModStart> ptr ) ; ptr_buf_size = ( ptr_hbe16 ) ; if ( ptr_to_size < ptr_buf_size ) || ( ptr_to_size > 0 ) || ( ptr_buf_size > ptr_tx -> hbd_buf_buf_size ) || ( ptr_buf_size > ptr_tx -> hbd_buf_size ) ) return - 1 ;,0
293,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ar ) { if ( WARN_ONCE ( ARCHIVE_ONCE ( ARCHED ) == 0 ) { ap_log_ctx ( LOG_error, ""Invalid <S2SV_blank> for <S2SV_blank> for <S2SV_blank> exist"" ) ; return - 1 ; }",0
294,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
295,,0
296,"<S2SV_ModStart> offset, offset, offset",0
297,<S2SV_ModStart> ( server. ds_enabled <S2SV_ModEnd> ) server.,0
298,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
299,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
300,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
301,<S2SV_ModStart> = sf -> td. <S2SV_ModEnd> ; sf ->,0
302,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
303,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
304,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions *,0
305,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> break ; },0
306,,0
307,,0
308,<S2SV_ModStart> task ) { <S2SV_ModEnd> del_timer ( & <S2SV_ModStart> -> timer ) <S2SV_ModEnd> ; complete (,1
309,"<S2SV_ModStart> ; if ( safe_calloc <S2SV_ModEnd> ( name,",0
310,"<S2SV_ModStart> ( interface, KSZ8851_COMP <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_IS <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_IS <S2SV_ModEnd> ) ) ;",0
311,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
312,"<S2SV_ModStart> NEED_IP ( 2, 0 <S2SV_ModStart> NEED_IP ( 2, 0 <S2SV_ModStart> NEED_IP ( 0 <S2SV_ModStart> NEED_IP ( 0 <S2SV_ModStart> NEED_IP ( 2, 0 <S2SV_ModStart> NEED_IP ( 2, 0 <S2SV_ModStart> NEED_IP ( 0 <S2SV_ModStart> NEED_IP ( 2, 0 <S2SV_ModStart> NEED_IP ( 2, 0 <S2SV_ModStart> NEED_IP ( 0 <S2SV_ModStart> NEED_IP ( 2, 0 <S2SV_ModStart> NEED_IP ( 0 <S2SV_ModStart> NEED_IP ( 2, 0 <S2SV_ModStart> NEED_OP ( 2, 0 <S2SV_ModStart> NEED_IP ( 2, 0 <S2SV_ModStart> NEED_IP ( 2, 0 <S2SV_ModStart> NEED_IP ( 2, 0 <S2SV_ModStart> NEED_OP ( 2, 0 <S2SV_ModStart> NEED_IP ( 2, 0 <S2SV_ModStart> NEED_IP ( 2, 0 <S2SV_ModStart> NEED_OP ( 2, 0 <S2SV_ModStart> NEED_IP ( 2, 0 <S2SV_ModStart> NEED_IP ( 2, 0 <S2SV_ModEnd> 3 ) <S2SV_ModStart> NEED_IP ( 2, 0 <S2SV_ModStart> NEED_IP ( 2, 0 <S2SV_ModStart> NEED_IP ( 2, 0 <S2SV_ModStart> NEED_IP ( 2, 0 <S2SV_ModStart> NEED_IP ( 2 ) ) ) ) ; <S2SV_ModStart> NEED_IP (",0
313,"<S2SV_ModStart> = 0 ; if (! <S2SV_ModStart> break ; } if ( ret_is_start ( fit ) ) ) { log_error ( ""error: <S2SV_blank> is <S2SV_blank> is <S2SV_blank> valid <S2SV_blank> "" ) ; goto done ; } if (",0
314,<S2SV_ModStart> ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> mode ) ),0
315,<S2SV_ModStart> rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc ->,0
316,<S2SV_ModStart> ( err = 0 <S2SV_ModEnd> ; if (,0
317,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
318,"<S2SV_ModStart> ] ) { memcpy <S2SV_ModEnd> ( e,",0
319,<S2SV_ModStart> = NULL ; strlen ( line ) ;,0
320,<S2SV_ModStart> = pbi -> common <S2SV_ModEnd> ; if (,0
321,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> ) ; } exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
322,<S2SV_ModStart> -> peer. auth_capable = new -> peer. auth_capable ;,0
323,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> intra_mv, PREDICTION_MODE <S2SV_ModStart> mode_mv ; PREDICTION_MODE <S2SV_ModEnd> best_mode_mode = 0 <S2SV_ModStart> ) { PREDICTION_MODE <S2SV_ModEnd> mode = mb",0
324,<S2SV_ModStart> ; h = safe_calloc <S2SV_ModEnd> ( h ->,0
325,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void,0
326,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args <S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args <S2SV_ModStart> cpi ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> flags & ctx -> sz == VPX_CODEC_ERROR ) { VPX_CODEC_INVALID_PARAM ; return VPX_CODEC_INVALID_PARAM ; }",0
327,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
328,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> chunk_set_null> <S2SV_null>,0
329,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> inode ) { if ( bh -> bb ) goto out ; <S2SV_ModStart> inode ) ; if ( inode ) goto out_sb ; <S2SV_ModEnd> if ( bh,0
330,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( lfm,",0
331,,0
332,<S2SV_ModStart> uint32_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; },0
333,<S2SV_ModStart> sc ++ ) return <S2SV_ModEnd> ; if (,0
334,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
335,<S2SV_ModStart> == NULL || replySize == NULL ||,0
336,"<S2SV_ModStart> ""`%s\'"", option ) ; page_geometry = DestroyString ( page_geometry",1
337,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> break ; },0
338,<S2SV_ModStart> key_data ) && key_data == NULL,0
339,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 0 ;,0
340,"<S2SV_ModStart> uint32 length ; struct stream packet = * s ; struct stream packet ; struct stream packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""recv_response(), <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
341,<S2SV_ModStart> ; if ( len < 0 ||,0
342,<S2SV_ModStart> & new_map ) goto out <S2SV_ModEnd> ; ret =,0
343,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
344,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
345,<S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( ( pbi,0
346,<S2SV_ModStart> ) ) ; quantum_info = NULL ;,0
347,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> n_decode_decode ( <S2SV_ModStart> * buf ) { char * buf ; char * p ; char * p ; char * p ; char * p ; char * p ; char * p ; if ( * buf == '\\0' ) { return NULL ; } if ( * p == '\\0' ) { Py_DECREF ( p ) ; return NULL ; } if ( * p == '\\0' || * p == '\\0' ) { Py_DECREF ( s ) ; return NULL ; } if ( * p == '\\0' ) { Py_DECREF ( s ) ; return NULL ; } else { Py_DECREF ( s ) ; } else { PyErr_DECREF ( ""Invalid <S2SV_blank> "" ) ; return NULL ; } } <S2SV_ModEnd> } <S2SV_null>",0
348,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> strdup ( void <S2SV_ModStart> = 0 ; <S2SV_ModEnd> strdup ( void <S2SV_ModStart> ; if ( <S2SV_ModEnd> strchr ( strchr <S2SV_ModStart> ( buf, ""%s"" <S2SV_ModEnd> )!= 0 <S2SV_ModStart> 0 ) { <S2SV_ModEnd> goto out ; <S2SV_ModStart> ; } } <S2SV_ModEnd> str = strchr ( <S2SV_ModStart> ( buf, & buf, sizeof <S2SV_ModEnd> ) ) ; if",0
349,<S2SV_ModStart> -> buffer ; if (! ctx -> buffer ) return - ENOKEY ;,0
350,"<S2SV_ModStart> int value, vpx_writer <S2SV_ModEnd> ( w,",0
351,,0
352,<S2SV_ModStart> ) ) { memcpy <S2SV_ModEnd> ( & t_above,0
353,,0
354,<S2SV_ModStart> buffer ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
355,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
356,"<S2SV_ModStart> pixel_info, number_planes, number_filled <S2SV_ModStart> ( number_planes, number_planes_filled <S2SV_ModEnd> ) ; number_planes",0
357,,0
358,,0
359,"<S2SV_ModStart> ) ) { size_t len = 0 ; <S2SV_ModStart> ) ) ; if (! str ) { applog ( LOG_ERROR, ""Failed <S2SV_blank> to <S2SV_blank> to <S2SV_blank> %s\\n"", __func__, __func__, __func__, ""%s"", __func__, __func__, __func__ ) ; return NULL ; } <S2SV_ModStart> ) ) { <S2SV_ModEnd> if (!",0
360,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
361,<S2SV_ModStart> ioc ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
362,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) { PyErr_SetString ( PyId_SetAttr_SetString ( PyId__fields, & PyId__fields, __func__ ) ; if ( res!= NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> with"" ) ; return NULL ; } if ( res!= NULL ) { PyId_CLEAR ( __func__ ) ; } if ( res!= NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> missing <S2SV_blank> (%s"", __func__ ) ; return NULL ; } if ( res!= NULL ) { PyId_CLEAR ( res!= NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> missing <S2SV_blank> missing <S2SV_blank> "" ) ; return NULL ; } <S2SV_ModEnd> if ( res <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( res",0
363,,0
364,"<S2SV_ModStart> ( arg, <S2SV_ModEnd> arg ) { <S2SV_ModStart> return ret ; } <S2SV_ModEnd> return ret ;",0
365,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> intra_mode_mode_mode ( VP9_COMMON <S2SV_ModStart> * r, PREDICTION_MODE <S2SV_ModEnd> y, PREDICTION_MODE <S2SV_ModStart> ) { PREDICTION_MODE <S2SV_ModEnd> y_mode = vp9_mode",0
366,<S2SV_ModStart> cpi ; if (! ctx -> data_len ) return - EINVAL ;,0
367,<S2SV_ModStart> NULL ; } if ( skb ) e ;,0
368,,0
369,,0
370,"<S2SV_ModStart> += dif ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
371,,0
372,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int i ; vpx_writer <S2SV_ModEnd> ( w, <S2SV_ModStart> int i ; vpx_reader_prob <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_prob <S2SV_ModEnd> ( w,",0
373,"<S2SV_ModStart> ; vpx_write_bit_buffer <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
374,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
375,<S2SV_ModStart> int i ; ND_TCHECK2 ( * id ; <S2SV_ModStart> ) ) ; ND_TCHECK2 ( * ) ; ND_TCHECK2 ( * ) ; ND_TCHECK2 ( * ) ; <S2SV_ModStart> len ) ; ND_TCHECK2 ( * ) ; ND_TCHECK2 ( * ) ; ND_TCHECK2 ( * ) ;,0
376,,0
377,,0
378,"<S2SV_ModStart> x2 ) { memset ( x1, x1, 0, 0, sizeof ( x2 ) ) ; <S2SV_ModStart> = x2 ; <S2SV_ModEnd> * x2 =",0
379,"<S2SV_ModStart> mntent, true",0
380,"<S2SV_ModStart> cm, const VP9EncoderConfig <S2SV_ModEnd> * cm, <S2SV_ModStart> cm ) { vpx_wb_write_bit <S2SV_ModEnd> ( cm -> <S2SV_ModStart> cm ) ; vpx_wb_write_bit <S2SV_ModEnd> ( cm,",0
381,,0
382,,0
383,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
384,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
385,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
386,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if (!,0
387,"<S2SV_ModStart> len ) { size_t len = str ; <S2SV_ModStart> ( len, len, len <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, len <S2SV_ModEnd> ) ; }",0
388,,1
389,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> read_utf8 ( void <S2SV_ModStart> ) ) ; ( void ) fputc ( void ) fclose ( input ) ; <S2SV_ModStart> ) ) ; ( void ) fclose ( void ) fclose ( void ) ; <S2SV_ModStart> ) ) ; ( void ) fclose ( void ) ; ( void ) fclose ( void ) fclose ( void ) fclose ( argv ) ;,0
390,,0
391,<S2SV_ModStart> void ) { int fp = - 1 ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> if (!,0
392,,0
393,<S2SV_ModStart> s2 ) { <S2SV_ModEnd> return 1 ;,0
394,<S2SV_ModStart> jid ) { const char * my_jid = jid_create ( stanza_from ) ; <S2SV_ModEnd> jid_create ( stanza,0
395,<S2SV_ModStart> # ifdef CONFIG_INVALID_FILE : if ( options_option ( LOG_INFO ) == 1 ) { LOG_ERROR ( LOG_FAILURE ) ; exit ( LOG_FAILURE ) ; },0
396,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
397,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return 0 ;,0
398,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
399,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> return 0 ; if ( ( ( cJSON_Object * ) strcpy ( cJSON_string, cJSON_string, <S2SV_ModEnd> ) ; return",0
400,,0
401,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd>, buf,",0
402,,0
403,,0
404,<S2SV_ModStart> i ) { <S2SV_ModEnd> if ( i,0
405,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_bit_write_bit_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 16 ) { vpx_wb_bit_literal <S2SV_ModEnd> ( w,",0
406,<S2SV_ModStart> policy ) { <S2SV_ModEnd> if ( ent,0
407,,0
408,<S2SV_ModStart> == 0 ) return <S2SV_ModEnd> ; } else,0
409,<S2SV_ModStart> ; if ( d -> msg_len > sizeof ( d -> msg ) ) return - EINVAL ; if ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( i,1
410,"<S2SV_ModStart> ; pixel = sun_info <S2SV_ModEnd> ( sun_info,",0
411,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( rp,",0
412,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> v_mv_mv_mv_m8x8 ( vpx_reader <S2SV_ModEnd> ( vpx_m8x8x16_t ) <S2SV_ModStart> { vpx_reader <S2SV_ModEnd> ( vpx_m8x8x8,",0
413,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
414,<S2SV_ModStart> ; if ( <S2SV_ModEnd> == NULL ),0
415,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
416,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
417,<S2SV_ModStart> size ) { ASSERT_NO_SIZE_OVERFLOW ( size ) ;,1
418,,0
419,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return 0 ;,0
420,"<S2SV_ModStart> 1 ) ; memset ( & dev, 0, sizeof ( dev ) ) ;",0
421,"<S2SV_ModStart>, buf ) && ( void )",0
422,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) ) { struct rfc2cap_get_req_to_req ( req, & rfc, & rfc, sizeof ( rfc ) ) ; struct l2cap_to_cmdrsp = l2cap_get_conf_to_req ( req, & rfc, & rfc, rfc, sizeof ( rfc ) ) ; <S2SV_ModStart> = l2cap_to_cmd ( rfc, & rfc, sizeof ( rfc ) <S2SV_ModEnd> ) ; if",0
423,"<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, MSG_WAITALL )",0
424,,0
425,,0
426,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> spin_lock_irq ( & <S2SV_ModStart> ucounts -> count, sizeof <S2SV_ModEnd> ) ; ucounts",0
427,"<S2SV_ModStart> * fmode, fmode <S2SV_ModEnd>, int fmode <S2SV_ModStart> -> fmode, fmode <S2SV_ModEnd> ) ; int",0
428,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
429,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> * const VP9_COMMON <S2SV_ModStart> * const MACROBLOCKD * const MACROBLOCKD * const <S2SV_ModStart> * pd ; MACROBLOCKD * const x = & cpi -> sse ; MACROBLOCKD * const int64_t * const uint8_t * const int64_t * const int64_t * sse ; int64_t * const int64_t * out ; int64_t * const int64_t * out ; int64_t * out_dist ; int64_t * out ; int64_t * out ; int64_t * const int64_t * out ; int64_t * out_dist ; const int64_t * out ; const uint64_t * out ; const int64_t * out ; int64_t * out ; const uint64_t * out ; const int64_t * out_dist ; const uint64_t * out ; const uint64_t * out ; const int64_t * out,0
430,,0
431,<S2SV_ModStart> * buf = NULL <S2SV_ModEnd> ; if (,0
432,"<S2SV_ModStart> void read_segment_id ( vpx_reader <S2SV_ModEnd> * r,",0
433,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst_ptr1,",0
434,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
435,,0
436,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( interface, KSZ8851_TX_COMP <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( interface, KSZ8851_TX_SKB ( interface, KSZ8851_TX_IS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_MASKERNELTA, KSZ8851_TX_IS <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( interface, KSZ8851_IS <S2SV_ModEnd> ) ; if",0
437,"<S2SV_ModStart> NULL ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
438,<S2SV_ModStart>. udpport = 0 <S2SV_ModEnd> ; settings.,1
439,"<S2SV_ModStart> NULL, NULL, NULL",0
440,<S2SV_ModStart> * x0 ; tran_low_t <S2SV_ModEnd> * x ; <S2SV_ModStart> = x0 ; <S2SV_ModEnd> if ( x,0
441,,0
442,,0
443,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
444,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> log2SV_null> <S2SV_null> static <S2SV_ModStart> arg2SV_null> <S2SV_null> static <S2SV_ModStart> 0 ) { if ( fprintf ( fp, outputbuffer, O_WRITE_WRITE ) ) { printf ( ""Error: <S2SV_blank> to <S2SV_blank> height <S2SV_blank> %s\\n"", outputbuffer <S2SV_ModEnd> ) ; return <S2SV_ModStart> 0 ) ; goto out <S2SV_ModEnd> ; } printf <S2SV_ModStart> ) ) { if ( fprintf ( fp, O_WRITE_WRITE ) ; exit ( fprintf ( fp, O_WR ) ; return 1 ; } <S2SV_ModEnd> ( outputbuffer, <S2SV_ModStart> ) ) ; return ( fprintf ( fp, outputbuffer, out <S2SV_ModEnd> ) ; }",0
445,<S2SV_ModStart> num ) { Py_RETURN_NONE <S2SV_ModEnd> ; } if,0
446,<S2SV_ModStart> vpx_codec_alg_priv_t * priv <S2SV_ModEnd> ; vpx_codec_alg_priv_t * <S2SV_ModStart> ; vpx_codec_alg_priv_t * priv <S2SV_ModEnd> ; if (,0
447,,0
448,"<S2SV_ModStart> = NULL ; memset ( ctx -> fragments, 0, 0, sizeof ( ctx -> fragments ) ) ;",0
449,<S2SV_ModStart> = v ; if (! IS_ERR ( vma ) ),1
450,,0
451,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address,",0
452,,0
453,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
454,,0
455,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
456,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
457,<S2SV_ModStart> p_enc ) ; if ( p_enc -> fmt_msg_name ) { p_err ( p_encoding_msg -> fmt_encoding ) ; return - 1 ; },0
458,,0
459,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
460,,0
461,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock,0
462,,0
463,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
464,"<S2SV_ModStart>, i ; if (! avctx -> data_size ) return AVERROR_INVALIDDATA ;",0
465,"<S2SV_ModStart> ch, ch, false",0
466,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> int motion_yv_avg_y_yv_yv_stride ( int motion_y, int motion_magnitude, int motion_magnitude, int motion_y_denoiser_magnitude ) { int motion_magnitude = 0 ; int motion_mv_denoiser_magnitude <= MOTION_THRESHIGHBITDEPTHRESHIGHBITDEPTH ) { int motion_y_denoiser_magnitude = 0 ; int motion_magnitude = 0 ; int motion_mv_denoiser_denoiser_mv_denoiser_y ; int motion_mv_magnitude = 0 ; int increase_mv_denoiser_denoiser_denoiser_magnitude = 0 ; int motion_mv_denoiser_denoiser_mv_denoiser_mv_denoiser_mv_denoiser_magnitude = 0 ; if ( motion_mv_y",0
467,<S2SV_ModStart> == 0 ) <S2SV_ModEnd> ; if (,0
468,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if (,0
469,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
470,<S2SV_ModStart> <S2SV_null> <S2SV_null> static PRED,0
471,<S2SV_ModStart> = NULL ; struct mb2_cache * ext2_mb_cache_cache ( inode -> i_sb ) ; <S2SV_ModStart> ( inode -> i_sb ) ; <S2SV_ModEnd> if (!,0
472,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
473,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
474,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
475,"<S2SV_ModStart>, dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsx, dmsx <S2SV_ModEnd> ) ; if",0
476,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
477,,0
478,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL,0
479,"<S2SV_ModStart> cm, const VP9EncoderConfig <S2SV_ModEnd> * const cm",0
480,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
481,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * xd = & xd -> mb ; MACROBLOCKD * const MACROBLOCKD * const xd ; MACROBLOCKD * const xd = & xd -> mb ; MACROBLOCKD * const xd = & xd -> mb ; const int64_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * mbmi_ext = xd -> mbmi_ext ; const uint8_t * const uint8_t * mbmi_ext = xd -> mbmi_ext ; const uint8_t * const mbmi_ext = xd -> mbmi_ext ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd ) { const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t *,0
482,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 8 ) ; <S2SV_ModEnd> src += src_stride",1
483,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
484,,0
485,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr,0
486,,0
487,<S2SV_ModStart> ( buf + 1 <S2SV_ModEnd> ) { const int,0
488,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if (,0
489,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
490,,0
491,"<S2SV_ModStart> size, 0",0
492,<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ;,1
493,"<S2SV_ModStart> sa ) { memset ( sa, 0, sizeof ( sa ) ) ;",0
494,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
495,<S2SV_ModStart> ) ) ; mutt_socket_empty ( adata -> conn ) ;,0
496,,0
497,,0
498,"<S2SV_ModStart>, & rlen, 0",1
499,<S2SV_ModStart> * buf ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
500,<S2SV_ModStart> * p ; <S2SV_ModEnd> if (!,0
501,,0
502,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
503,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
504,<S2SV_ModStart> NULL ; } if ( skb ) e ;,0
505,<S2SV_ModStart> sshbuf ) { <S2SV_ModEnd> if ( authctxt,0
506,<S2SV_ModStart> ; uint32_t buff ; if ( bytes_to_chunk > 1024 ) { return WAVPACK_SOFT_ERROR ; } if (,0
507,,0
508,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
509,<S2SV_ModStart> int ret ; size_t <S2SV_ModEnd> buf ; size_t <S2SV_ModStart> = buf ; size_t <S2SV_ModEnd> len ; size_t,0
510,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr,0
511,<S2SV_ModStart> ( ret ||! cm_id -> device ||,1
512,<S2SV_ModStart> (! count || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
513,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( section,0
514,<S2SV_ModStart> i ) { <S2SV_ModEnd> if ( i,0
515,,0
516,<S2SV_ModStart> ( page ) <S2SV_ModEnd> ; if (,0
517,<S2SV_ModStart> goto out ; if (! file_size ) return - EINVAL,0
518,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ] ) ; PREDICTION_MODE <S2SV_ModEnd> memcpy ( <S2SV_ModStart>, 0, 0, sizeof ( data <S2SV_ModEnd> ) ; if",0
519,,0
520,"<S2SV_ModStart> ( pcd_table, pcd_table <S2SV_ModEnd> ) ) ;",0
521,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
522,,0
523,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst,",0
524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> MACROBLOCKD * const VP9_COMMON * const MACROBLOCKD * xd ; MACROBLOCKD * xd = & xd -> mb ; MACROBLOCKD * const x = & cpi -> td. mb ; MACROBLOCKD * const xd ; MACROBLOCKD * const x = & x -> mb ; MACROBLOCKD * const xd ; MACROBLOCKD * const x -> mi_row = & cpi -> mi_row, x -> mi_row, x -> mi_row, x -> mi_row, mi_row, x -> mbmi_col, x -> mi_col, x -> mi_col ) ; if ( x -> mbmi_col ) { if ( x -> mbmi_cols [ 0 ] == KEY_FRAME ) { memcpy ( & cpi -> mi_col, x -> mi_col, x -> mi_col, x -> mi_col, x -> mi_col, mi_col, mi_",0
525,"<S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
526,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
527,<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ),0
528,<S2SV_ModStart> ; if ( skb &&,0
529,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
530,<S2SV_ModStart> str ) ; <S2SV_ModEnd> } if (,0
531,"<S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> mode, 0 ) <S2SV_ModStart> int fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) ) <S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
532,<S2SV_ModStart> ctx ) { memset <S2SV_ModEnd> ( ctx ->,0
533,"<S2SV_ModStart> 1 ) { vpx_lpf_horizontal_16 <S2SV_ModEnd> ( s,",0
534,"<S2SV_ModStart> * ctx, ThreadData * ctx, <S2SV_ModStart> ; if ( ctx -> num_parallel_get_ctx ) { ctx -> error = 0 ; }",0
535,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( screen,0
536,,0
537,<S2SV_ModStart> dentry ) ; <S2SV_ModEnd> if ( dentry,0
538,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
539,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
540,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
541,,0
542,"<S2SV_ModStart> len ) { struct ipv6_txoptions * opt_to_to_to_txoptions * opt = NULL ; opt_to_put ( opt, opt ) ; if ( opt ) { opt_to_put ( flowlabel ) ; txopt_put ( opt_to_free ) ; }",0
543,<S2SV_ModStart> ; if ( skb && skb -> opt.,0
544,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
545,<S2SV_ModStart> o ) { uint32_t info ; <S2SV_ModStart> offset ) ; if (! info -> length ) return - 1,0
546,"<S2SV_ModStart> { if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
547,"<S2SV_ModStart> seq, seq, seq <S2SV_ModEnd> ) ; }",0
548,"<S2SV_ModStart> key_data ) { kfree ( key_data ) ; <S2SV_ModStart> key_data ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> key_data ) { kfree ( key_data ) ; krb_data <S2SV_ModEnd> ( key_data,",0
549,,0
550,,0
551,,0
552,,0
553,<S2SV_ModStart> mi_name ) { <S2SV_ModEnd> if ( params,0
554,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ),1
555,,0
556,"<S2SV_ModStart> channel_pktbuf ) ; if (! Stream_GetRemainingLength ( s, NULL ) ) { rdp_protocol_error_pdupdupdup ( ""pdu <S2SV_blank> failed"", & packet ) ; return FALSE ; }",0
557,,0
558,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) ) { struct ipv6_options_read_unlock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart>, & final ) ; rcu_read_unlock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) ) ; rcu_read_unlock ( ) ;",0
559,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
560,<S2SV_ModStart> ) ) ; quantum_info = NULL ;,0
561,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
562,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null,0
563,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
564,<S2SV_ModStart> { rq = <S2SV_ModEnd> hctx -> tags,0
565,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
566,,0
567,,0
568,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> v_decode_frame ( VP9_COMMON <S2SV_ModStart> -> mb ; memset <S2SV_ModEnd> ( xd,",0
569,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
570,"<S2SV_ModStart> MagickMax ( number_planes, number_planes_filled <S2SV_ModEnd> ) ; number_planes",0
571,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> len ) ),0
572,<S2SV_ModStart> = 0 ; ps_dec -> pu4_stats = 0 ;,0
573,"<S2SV_ModStart> int mptctl_iocp ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_size ) ; <S2SV_ModEnd> int iocp = iocp",0
574,,0
575,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
576,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> rq_null> <S2SV_null>,0
577,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> - 1 ; if ( argv_printf ( argv [ 0 ] == '\\n"" ) { fprintf ( stderr, ""failed"" ) ; return - 1 ; } <S2SV_ModStart> ) ) ; if ( argv [ 1 ] == '\\n"" ) { if ( argv [ 1 ] == '\\n' || argv [ 0 ] == '\\n' ) { fprintf ( stderr, ""failed"" ) ; return - 1 ; } else { fprintf ( stderr, ""\\n"" ) ; } <S2SV_ModStart> ) ; } if ( argv = NULL ; if ( argv [ 1 ] == '\\n"" ) { fprintf ( stderr, ""\\n"" ) ; free ( argv [ 1 ] ) ; free ( argv [ 1 ] ) ; } else { fprintf ( stderr, ""\\n"" ) ; }",0
578,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( CHECKOVERFLOW ) ) ;",0
579,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> break ; },0
580,<S2SV_ModStart> dentry * dir <S2SV_ModEnd> = NULL ; <S2SV_ModStart> dir_inode ) ; <S2SV_ModEnd> spin_lock ( &,0
581,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> options_null> static int <S2SV_ModEnd> opt_get_service_options ( & <S2SV_ModStart> opt, 1 <S2SV_ModEnd> ) ; SOCK_OPTIONS",0
582,<S2SV_ModStart> += i ; <S2SV_ModEnd> if ( i,0
583,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
584,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info",0
585,,0
586,"<S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ;",0
587,<S2SV_ModStart>!= MagickFalse ) <S2SV_ModEnd> ; break ;,0
588,<S2SV_ModStart> = 0 ; memset ( ) ;,0
589,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> WORD32,0
590,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> sizeof ( int <S2SV_ModStart> 0 ) { int len ; int <S2SV_ModEnd> = 0 ; <S2SV_ModStart> char * out ; int len ; int len <S2SV_ModEnd> = 0 ; int <S2SV_ModStart> = 0 ; if ( len > 0 ) return 0 ; <S2SV_ModEnd> if ( out <S2SV_ModStart> ++ ) { if (! cJSON_MEM ) return 0 ; <S2SV_ModEnd> if ( out <S2SV_ModStart> ++ ) { if (! out ) return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ++ ) ) return 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart> ++ ) ) { if (! out ) return 0 ; <S2SV_ModEnd> return 0 ; <S2SV_ModStart> ++ ) { cJSON_MEM ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ++ ) { cJSON_MEM ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { if (! out ) return 0 ; } <S2SV_ModEnd> return 0 ;,0
591,"<S2SV_ModStart> int tagval, uint32 <S2SV_ModEnd> * length )",1
592,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
593,"<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n"" )",0
594,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int ioc ( <S2SV_ModStart> -> io_context ; if ( task <S2SV_ModEnd> -> io_context <S2SV_ModStart> -> io_context, task <S2SV_ModEnd> ) ; task",0
595,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if (,0
596,<S2SV_ModStart> = 0 ; size_t data_size = 0,0
597,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args <S2SV_ModStart> args ) ; if ( ctx -> frame_parallel_decode ) { vpx_free ( ctx, ctx ) ; return VPX_CODEC_ERROR ; } <S2SV_ModEnd> } <S2SV_null>",0
598,"<S2SV_ModStart> ( ctx, <S2SV_ModEnd> skb ) ;",0
599,"<S2SV_ModStart> * query, size_t flags <S2SV_ModEnd> ) { MY_REDUPT flags <S2SV_ModStart> ) ) { my_copy_stat <S2SV_ModEnd> ; if (",0
600,<S2SV_ModStart> return 0 ; if (,0
601,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
602,<S2SV_ModStart> ; } else { free <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> int cp ++ <S2SV_ModStart> ) { const int <S2SV_ModEnd> if ( cp <S2SV_ModStart> == 0 ) { <S2SV_ModEnd> if ( cp ++ <S2SV_ModStart> ) { if ( cp == '\\0' ) { <S2SV_ModEnd> ( cp ++ <S2SV_ModStart> ) ; return 1 ; } <S2SV_ModEnd> if ( cp <S2SV_ModStart> = ( cp ++ ; <S2SV_ModEnd> if ( cp <S2SV_ModStart> ) ; return 1 ; } <S2SV_ModEnd> if ( cp <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( cp == '\\0',0
604,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
605,"<S2SV_ModStart> char * pix1, L_BUFSIZE <S2SV_ModEnd>, pix1, <S2SV_ModStart> ( pix1, <S2SV_ModEnd> ) ; }",0
606,<S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( & cpi,0
607,,0
608,<S2SV_ModStart> int idx ; unsigned int count ; <S2SV_ModStart> -> count ; count = kcontrol -> count ; <S2SV_ModStart> ; idx < <S2SV_ModEnd> count ; idx,1
609,"<S2SV_ModStart> size_t len, int len",0
610,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
611,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = cpi -> bit_depth ; if ( cpi -> bit_depth >= cpi -> bit_depth && cpi -> bit_depth > 0 && cpi -> bit_depth > 0 && cpi -> bit_depth > 0 && cpi -> bit_depth,0
612,<S2SV_ModStart> ) ; } if <S2SV_ModEnd> ( value &,0
613,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
614,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
615,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> MACROBLOCKD * const MACROBLOCKD * <S2SV_ModEnd>, MACROBLOCKD <S2SV_ModStart>, int16, PREDICTION_MODE <S2SV_ModEnd>, MACROBLOCKD <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd,",0
616,,0
617,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( ei,0
618,<S2SV_ModStart>! thresholds ) ; unlock ( ) ;,0
619,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
620,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm -> common ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
621,<S2SV_ModStart> : if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; },0
622,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context ->,0
623,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
624,<S2SV_ModStart> ; memcpy <S2SV_ModEnd> ( cpi ->,0
625,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( interface, ENC624J600_MACROBLOCK_SIZE ( interface, ENC624J600_MACROBLOCK_SIZE <S2SV_ModEnd>, struct <S2SV_ModStart> ( interface, ENC624J600_MACROBLOCK_SIZE, ENC624J600_TX_SIZE <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC624J600_MACROBLOCK_SIZE ( interface, ENC624J600_MICMD <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ( interface, ENC624J600_MACROBLOCK_SIZE ( interface, ENC624J600_TX_SIZE ( interface, ENC624J600_TX_SIZE ) <S2SV_ModEnd> ; status = <S2SV_ModStart> ( interface, ENC624J600_REQ <S2SV_ModEnd> ) ; status <S2SV_ModStart> ( interface, ENC624J600_ERRSTREAM <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, ENC624J600_TIF <S2SV_ModEnd> ) ; status <S2SV_ModStart> ( interface, ENC624J600_ERRND <S2SV_ModEnd> ) ; status <S2SV_ModStart> ( interface, ENC624",0
626,,0
627,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
628,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> VALUE parse_options ; VALUE parse_options ( rb_options, parse_options, parse_options ) ; VALUE parse_options ; VALUE parse_options = rb_intern ( rb_get_intern ( ), rb_intern ( rb_get_intern ( rb_intern ( ), rb_intern ( rb_intern ( ""ParseOptions"" ) ) ) ) ; parse_options = ( rb_intern ( rb_get_intern ( rb_intern ( ), rb_intern ( rb_intern ( rb_intern ( ) ) ) ) ) ) ) ; VALUE parse_options = rb_get ( rb_intern ( rb_intern ( rb_intern ( rb, ""ParseOptions"" ) ) ) ) ;",0
629,,0
630,<S2SV_ModStart> 0 ; } if ( bytes < 4 ) return 0 ;,0
631,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
632,<S2SV_ModStart> rollover ) { err = - EINVAL ;,0
633,<S2SV_ModStart> handle ) { <S2SV_ModEnd> return 0 ;,0
634,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int len ; int <S2SV_ModEnd> char * p <S2SV_ModStart> = 0 ; if ( len < 8 ) return 0 ; <S2SV_ModStart> + 1 ; <S2SV_ModEnd> char * p <S2SV_ModStart> + 1 ; if ( len < 8 ) return 0 ; <S2SV_ModStart> + 1 ; <S2SV_ModEnd> if ( p <S2SV_ModStart> + 1 ; if ( len < 8 ) return 1 ; <S2SV_ModStart> + 1 ; <S2SV_ModEnd> if ( p,0
635,<S2SV_ModStart> ) ) { <S2SV_ModEnd> cib -> command,0
636,"<S2SV_ModStart> ( interface, KSZ8851_IS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_IS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_IS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_IS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_IS <S2SV_ModEnd> )!= 0",0
637,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
638,<S2SV_ModStart> ptl ) { <S2SV_ModEnd> break ; },0
639,<S2SV_ModStart> == 0 ) { <S2SV_ModStart> return - 1 ; },0
640,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits,0
641,,0
642,<S2SV_ModStart> ++ ) { if ( width < 0 ) continue ;,0
643,,0
644,<S2SV_ModStart> ) ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
645,,0
646,,0
647,,0
648,"<S2SV_ModStart> int plane ; vpx_writer <S2SV_ModEnd> ( arg,",0
649,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> MACROBLOCKD * const MACROBLOCKD * const xd, VP9_COMMON * const xd, MACROBLOCKD * const xd, MACROBLOCKD * const xd, MACROBLOCKD * xd, xd, <S2SV_ModEnd>, mi_row,",0
650,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
651,<S2SV_ModStart> pixel_info ) ; ( void ) ResetMagickFalse ;,0
652,<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> size = 0,0
653,<S2SV_ModStart> case SOCKSV_null> <S2SV_null> <S2SV_null>,0
654,<S2SV_ModStart> ; vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> ; if (,0
655,<S2SV_ModStart> ) ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
656,<S2SV_ModStart> ( event ) ) { <S2SV_ModEnd> hdr ; },0
657,"<S2SV_ModStart> length ) { ND_TCHECK2 ( * tptr, 2 ) ; <S2SV_ModStart> len ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> <S2SV_blank> \\n"" ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\n"" ) ; ND_PRINT ( ndo, ""\\n"" ) ) ;",0
658,<S2SV_ModStart> ) ) { if ( res -> outputbuffer == 0 ) continue ;,0
659,"<S2SV_ModStart> ) ) { memcpy <S2SV_ModEnd> ( src,",0
660,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> return 0 ;,0
661,<S2SV_ModStart> length ) { if ( bNumLength < 2 ) { dev -> bNumEndpoints < 2 ; break ; },0
662,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return 0 ;,0
663,<S2SV_ModStart> size ) { <S2SV_ModEnd> return ret ;,0
664,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; dev ->,0
665,,0
666,"<S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd>, interface,",0
667,<S2SV_ModStart> = 0 ; psf -> headerlen = psf -> headerlen ; psf -> headerlen = psf_allocate ( psf -> headerlen <S2SV_ModEnd> ) ; psf,0
668,<S2SV_ModStart>,0
669,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> <S2SV_null> <S2S2SV_null> static <S2SV_ModStart> vp9_null> <S2S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> static <S2SV_ModStart> frame_null> <S2SV_null> <S2S2SV_null> <S2SV_null> static <S2SV_ModStart> frame_null> <S2SV_null> <S2S2SV_null> static sf -> <S2SV_ModEnd> frame_null> <S2S2SV_null>,0
670,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
671,,0
672,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
673,<S2SV_ModStart> * n ; <S2SV_ModEnd> char * n <S2SV_ModStart> ; if ( n == NULL ) { Py_DECREF ( n ) ; return NULL ; } if (,0
674,<S2SV_ModStart> ; if ( Svc_null> <S2SV_null> <S2SV_null> Svc_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> v_null> Svc_null> <S2SV_null>,0
675,<S2SV_ModStart> ( event ) ) { <S2SV_ModEnd> hdr ; },0
676,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
677,,0
678,,1
679,<S2SV_ModStart> ) ) { sql_db_error ( mysql_sql ) ; <S2SV_ModStart> NULL ) ; },0
680,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0, 0 ) <S2SV_ModStart> 0 ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
681,<S2SV_ModStart> ++ ) { struct eth_info * wtap_encode = NULL ; <S2SV_ModStart> ) ) ; if (! phdr -> pdup_len ) return - ENOMEM <S2SV_ModEnd> ; break ;,0
682,,0
683,<S2SV_ModStart> ; if (! context,0
684,<S2SV_ModStart> out_free ; } if (,0
685,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> cpi ) { const VP9Encoder_COMMON * const VP9Enc * cpi <S2SV_ModEnd> = cpi -> <S2SV_ModStart> = 0 ; if ( cpi -> oxcf. avg_frame_frame_frame_frame_frame_bandwidth > ( cpi -> oxcf. bit_depth ) cpi -> oxcf. bit_depth ; if ( cpi -> oxcf. bit_depth > 0 || ( cpi -> oxcf. bit_depth > MAX_depth ) || ( cpi -> oxcf. bit_depth > MAX_depth ) cpi -> oxcf. bit_depth ; if ( cpi -> oxcf. bit_depth > ( cpi -> bit_depth ) )? cpi -> bit_depth ; } else if ( cpi -> bit_depth > MAX_depth ) cpi -> oxcf. bit_depth ; cpi -> oxcf. bit_depth = ( cpi -> oxcf. bit_depth ; if ( cpi -> oxcf. bit_depth > MAX_depth ) cpi -> oxcf. bit_,0
686,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> intra_mode ( vpx_read_bit <S2SV_ModEnd> ( r ) <S2SV_ModStart> ) { vpx_read_bit <S2SV_ModEnd> ( r,",0
687,"<S2SV_ModStart> : # line 113 <S2SV_ModEnd> ""hex_grammar.c"" { yr_grammar.y"" { yr_grammar.c"" { yr_grammar.c"" break ; <S2SV_ModStart> : # line 1034 <S2SV_ModEnd> ""hex_grammar.c"" { yr_grammar.c"" break ; <S2SV_ModStart> : # line 1 <S2SV_ModEnd> "" break ; <S2SV_ModStart> : # line 1034 <S2SV_ModEnd> ""hex_grammar.c"" { yr_grammar.c"" break ; <S2SV_ModStart> : # line 1034 <S2SV_ModEnd> ""hex_grammar.c"" { yr_grammar.c"" break ; <S2SV_ModStart> } # line 1034 <S2SV_ModEnd> ""hex_grammar.c"" { yr_grammar.c"" break ; <S2SV_ModStart> } # line 1054 <S2SV_ModEnd> ""hex_grammar.c"" { yr_grammar.y"" break ; <S2SV_ModStart> : # line 1034 <S2SV_ModEnd> ""hex_grammar.c"" { yr_grammar.c"" break ; <S2SV_ModStart> : # line 1034 <S2SV_ModEnd> ""grammar.c"" break ;",0
688,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const xd, MACROBLOCKD * const xd -> mb ; MACROBLOCKD * const MACROBLOCKD * const xd = & cpi -> mb ; MACROBLOCKD * const MACROBLOCKD * const mb ; MACROBLOCKD * const xd = & cpi -> mb ; MACROBLOCKD * const mb ; MACROBLOCKD * const vp9_coeff = & x -> mb ; MACROBLOCKD * const int64_t * const int64_t * const uint8_t * const mb ; MACROBLOCKD * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t",0
689,,0
690,,0
691,,0
692,,0
693,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
694,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_DONTWAIT ) )",0
695,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, 0 )",0
696,<S2SV_ModStart> == 0 ) { <S2SV_ModStart> ] ; } else { <S2SV_ModEnd> if ( x,0
697,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
698,<S2SV_ModStart> mq_cmd ) ; if ( blk -> hctx == 0 ),0
699,"<S2SV_ModStart> length ) { struct stream packet = * s ; <S2SV_ModStart> length ) { if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_parse_parse_params(), <S2SV_blank> consume <S2SV_blank> consume <S2SV_blank> would <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
700,<S2SV_ModStart> 0 ; } <S2SV_ModEnd> zval = zval,0
701,<S2SV_ModStart> int buffer = 0 <S2SV_ModEnd> ; char *,0
702,,0
703,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> SOCKS2SV_null> static <S2SV_ModStart> ; if ( table_end_table_start ( table_start ( & table_start <S2SV_ModEnd>, NULL, <S2SV_ModStart> ; if (! table_start <S2SV_ModEnd> ) return FALSE <S2SV_ModStart> ; if ( table_end ) return FALSE <S2SV_ModEnd> ; if (",0
704,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> rule * env = env ( env, env, env -> len <S2SV_ModEnd> ) ; if",0
705,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cm ->,0
706,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> == 02SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> function_type_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> function_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ie_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> function_null> <S2SV_null> <S2S2SV_null> static <S2SV_ModStart> } if ( type_null> <SV_null> 0 ) { test2SV_null> <S2SV_null>,0
707,<S2SV_ModStart> mode = TEMP_FAILURE_RETRY ( <S2SV_ModStart> mode ) ),0
708,<S2SV_ModStart> += 8 ; <S2SV_ModEnd> if ( context,0
709,<S2SV_ModStart> = x -> memcpy <S2SV_ModEnd> ( x ->,0
710,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> strchr ( cp,0
711,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> char * outputbuffer <S2SV_ModEnd> ; const char <S2SV_ModStart> char * s = strbuf [ 1 ] <S2SV_ModEnd> ] ; int <S2SV_ModStart> ; if ( strbuf [ 1 ] == '\\0' || strbuf [ 1 ] == '\\0' ) { if ( strbuf [ 1 ] == '\\0' || strcmp ( outputbuffer ) || strbuf [ 1 ] == '\\0' ) { fprintf ( ""\\n"" ) ; return 1 ; } if ( outputbuffer == '\\0' || strbuf [ 1 ] == '\\0' || strbuf [ 1 ] == '\\0' ) { if ( outputbuffer == '\\0' ) { fprintf ( ""\\n"" ) ; return 1 ; } if ( s == '\\0' || strcmp ( outputbuffer, ""\\n"" ) ) { fprintf ( ""\\n"", ""\\n"" ) ; return 1 ; } <S2SV_ModEnd> ; } <S2SV_null>",0
712,"<S2SV_ModStart> ipv6_idents_hashrnd __read_random_bytes ( & net -> ipv4. ip_idents_key <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ipv4. ipv4. ipv4. ipv4. ipv4. ipv4. ipv4. ipv4. ipv4. ipv4. ipv4. ipv4. ipv4. ipv4. ipv4. ip_key <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> iph -> ipv4. ipv4. ipv4. ipv4. ipv4. ipv4. ip_id_key <S2SV_ModEnd> ; hash =",0
713,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj,",0
714,,0
715,<S2SV_ModStart> newp ) { <S2SV_ModEnd> if ( new,0
716,<S2SV_ModStart> err ; goto err <S2SV_ModEnd> ; int err <S2SV_ModStart> 0 ) { err = - EINVAL ; goto err ; } err = - EINVAL ; err = - EINVAL ; goto out <S2SV_ModEnd> ; } <S2SV_null>,0
717,<S2SV_ModStart>. pass = 0 <S2SV_ModEnd> ; switch (,0
718,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_FAILURE_RETRY ( <S2SV_ModStart> prime_arg ) ; g_empty ( key, 0 ) ;",0
719,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const <S2SV_ModStart> tile_col ) { VP9_COMMON * const tile_col = & tile_data -> tile_cols ; VP9_COMMON * const tile_col = & tile_col ; VP9_COMMON * const int tile_col ; int tile_col = & tile_data -> tile_col ; <S2SV_ModStart> tile ) { VP9_COMMON * const uint8_t * tile_col = & tile_col ; VP9_COMMON * const tile_col = & tile_tile_cols [ tile_col ] ; <S2SV_ModStart> tile_col ) ; vpx_read <S2SV_ModEnd> ( & <S2SV_ModStart> tile_data ) ; vpx_read <S2SV_ModEnd> ( &,0
720,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> vp9_get_frame ( VP9_COMMON * pbi, const VP9EncoderConfig <S2SV_ModEnd> * pbi -> <S2SV_ModStart> = 0 ; vpx_get_frame_parallel_decode ( & pbi -> common ) ; vpx_free ( cm -> frame_worker_data ) ; <S2SV_ModStart> = 0 ; vpx_free ( pbi, pbi -> frame_worker_data ) ;",0
721,<S2SV_ModStart> ( s ) <S2SV_ModEnd> ; if (,0
722,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct <S2SV_ModStart> opt_options_rcu * opt ; struct ip_options_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ; if ( opt -> opt. <S2SV_ModEnd> opt -> opt,0
723,"<S2SV_ModStart> int i, vpx_writer <S2SV_ModEnd> * tree,",0
724,"<S2SV_ModStart> ; vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> ; if ( <S2SV_ModStart>, & ctx <S2SV_ModEnd> ) { vpx_codec_err_alg_priv_t * <S2SV_ModStart> ; if ( ( ctx -> flags & VPX_CODEC_ERROR ) { VPX_CODEC_EINVALIDDATA_FRAME ; } # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> flags & VPX_CODEC_HIGHBITDEPTH ) { vpx_free ( ctx ) ; } # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> flags & VPX_HIGHBITDEPTH ) { VPX_CODEC_HIGHBITDEPTH if ( & VPX_F_HIGHBITDEPTH ) { return VPX_E_FALSE ; }",0
725,"<S2SV_ModStart>, & len, 0",1
726,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
727,,0
728,<S2SV_ModStart> if (! jas_uchar <S2SV_ModEnd> ( buf ),0
729,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> MACROBLOCKD * const MACROBLOCKD * const x, MACROBLOCKD * x, MACROBLOCKD * x, <S2SV_ModStart> x ) { VP9_COMMON * const x = & cpi -> td. mb ; MACROBLOCKD * const x -> mb ; MACROBLOCKD * const x = & cpi -> td. mb ; MACROBLOCKD * const x -> mb ; MACROBLOCKD * const x = & cpi -> sf ; MACROBLOCKD * const x -> mb ; MACROBLOCKD * const x = & x -> mb ; <S2SV_ModStart> xd = & x -> mbmi_mode ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( x -> mbmi_mode == KEY_FRAME ) { if ( x -> mbmi_mode == KEY_FRAME ) { vp9_VP9_VP9_FLAG_HIGHBITDEPTH if ( & cpi ->",0
730,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr,0
731,"<S2SV_ModStart> int i, bit_depth, bit_depth <S2SV_ModStart> = 0 ; bit_depth = 0 ; if ( bit_depth > 0 ) return AVERROR_INVALIDDATA ; if ( bit_depth > 0 ) { avctx -> bit_depth = 0 ; return AVERROR_INVALIDDATA ; }",0
732,,0
733,<S2SV_ModStart> { if ( p == 0 &&,0
734,<S2SV_ModStart> = NULL ; packet -> priv -> linesize = 0 ;,0
735,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
736,<S2SV_ModStart> ++ ) { <S2SV_ModEnd> return 0 ;,0
737,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4,",0
738,<S2SV_ModStart> ; if ( skb && skb -> opt.,0
739,"<S2SV_ModStart> ; int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1, MSG_NOSIGNAL )",0
740,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
741,"<S2SV_ModStart> file ) { fclose ( file, O_RDONLY | O_CLOEXEC | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_WRONLY | O_WRONLY | O_CLOEXEC | O_NOFOLLOW | O_WRONLY | O_CLOEXEC | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_TRUNWRONLY | O_WRONLY | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_WRONLY | O_NOFOLLOW | O_NOCTTY <S2SV_ModEnd> ) ) ; <S2SV_ModStart> } if ( fd!= NULL ) { fd ( fd!= NULL ) ; fd = - 1 ; fd = - 1 ; fd = - 1 ; fclose ( fd ) ; fd = - 1 ; fclose ( st ) ; fd = - 1 ; }",0
742,<S2SV_ModStart> y12 ) { sprintf ( outputbuffer <S2SV_ModEnd> ) ; },0
743,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
744,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
745,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ;,0
746,"<S2SV_ModStart> * data ; struct stream packet = * s ; <S2SV_ModStart> length ) { if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""protocol <S2SV_blank> consume <S2SV_blank> consume <S2SV_blank> overrun"", & packet ) ; }",0
747,<S2SV_ModStart> pbi ) { <S2SV_ModEnd> if ( pbi,0
748,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
749,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
750,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
751,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
752,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
753,<S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> coef_probs [ cpi,0
754,<S2SV_ModStart> ( r = 0 <S2SV_ModEnd> ; if (,0
755,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> d -> data ; struct dvb_usb_generic_rw ( dvb, d -> dev, dvb_rw ) ; state -> data [ 0 ] = 0xe ; state -> data [ 2 ] = 0x0 ; state -> data [ 2 ] = 0x0 ; if ( dvb_usb_generic_rw ( d, state -> data, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 3,",0
756,<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> ; if (,0
757,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> vp9_variance8x8 ( vp9_variance8, vp9_pixel_variance8, vp9_variance8x8x8, vp9_variance8, vp9_pixel_variance8, vp9_variance8x8x8, vp9_variance8x8, vp9_vari_variance8x8, vp9_variance8x8x8x8, vp9_variance8, vp9_pixel_variance8x8, & vp9_vari_variance8x8, vp9_variance8x8, vp8x8x8, vp9_variance8, vp9_variance8, vp9_vari_variance8x8, uv_variance8, uv_variance8, & uv_stride, uv_stride, uv_stride, vp9_variance8, uv",0
758,<S2SV_ModStart> char buf [ 1 ] ; char * buf [ 1 ] = '\\0' ; if ( bufp [ 1 ] == '\\0' ) { p = '\\0' ; } if (,0
759,,0
760,<S2SV_ModStart> task ) { ret = - EINVAL ; goto out ; },0
761,"<S2SV_ModStart>, n ) ; if ( w == NULL ) return 0",1
762,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
763,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9EncoderConfig <S2SV_ModEnd>, & pbi <S2SV_ModStart> block ) { VP9_COMMON * const VP9_COMMON * const worker = & cbi -> common ; VP9_COMMON * const VP9_COMMON * const worker = & pbi -> common ; VP9_COMMON * const VP9_COMMON * const int i ; int i ; int i ; int num_tile = & pbi -> num_cols ; int num_tile = 0 ; int i ; int num_tile = & pbi -> num_cols ; for ( pbi -> num_cols > 0 ) { int i ; ++ ) { int i ; ++ ; ++ ; ++ ) { VPX_CODEC_CHECK ( & pbi -> num_worker_data, & pbi -> num_data ) ; for ( ++ i = 0 ; ++ ) { int i ; ++ i ; ++",0
764,<S2SV_ModStart> = 0 ; if ( len < 8 ) continue ;,0
765,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> vp9_convert_qindex ( VP9_COMMON * cm, MACROBLOCKD * cm, xd, xd, xd, xd -> bit_depth ) ; if ( segfeature_active ( segfeature_active_active_active ( seg, cm -> bit_depth ) ) { if ( segfeature_active_active_active ( seg, cm -> bit_depth, cm -> bit_depth ) ) ; memset ( cm -> bit_depth, cm -> bit_depth, cm -> bit_depth, cm -> bit_depth, 0, cm -> bit_depth ) ; memset ( cm -> bit_depth, 0, 0, cm -> bit_depth, cm -> bit_depth ) ; if ( segfeature_active_active_active_segfeature_active_active_active_active ( segfeature_active_active_active_active ( cm, cm -> bit_depth ) ) ; memset ( cm -> bit_depth <S2SV_ModStart> cm -> bit_depth ) ; if ( se",0
766,,0
767,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
768,<S2SV_ModStart> ; ps_dec -> <S2SV_ModEnd> ps_dec ->,0
769,<S2SV_ModStart> -> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock,0
770,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> len ) ),0
771,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
772,,0
773,<S2SV_ModStart> - ENOMEM ; goto err ;,0
774,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int ssl_write_opts ( <S2SV_ModStart> header ) ; if (! ssl_write_bit ( c, 0 ) ) { <S2SV_ModStart> int ) ; ssl_read_unlock ( ) ; ssl_cmd ( c, NULL, ssl ) ; ssl_write_bit ( & c -> ssl_cmd, NULL, 0 ) ; if (! ssl_cmd ( c -> ssl_cmd ) ) { if (! ssl_write_bit ( & c -> ssl, NULL ) ) ; return NULL ; } }",0
775,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = 0 ; int <S2SV_ModEnd> ; int rc <S2SV_ModStart> = 0 ; int <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; if ( cib_to_conn ) { <S2SV_ModEnd> cibcib ( c <S2SV_ModStart> connection ) ; if ( ret == 0 ) { crm_err ( ""Invalid <S2SV_blank> failed"" ) ; return - 1 ; }",0
776,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi ->,0
777,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
778,<S2SV_ModStart> ( len < 4 <S2SV_ModEnd> ) ) {,0
779,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
780,"<S2SV_ModStart> int mptctl_ioctl_output ( MPT_ADAPTER * ioc, <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; if ( <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } if",0
781,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
782,"<S2SV_ModStart> = JAS_CAST ( JAS_CAST ( jas_uint <S2SV_ModEnd>, jas_uint8_t",0
783,,0
784,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int vpx_read_bit ( vpx_read_bit <S2SV_ModEnd> ( vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) ; return ( vpx_read_bit <S2SV_ModEnd> ( r,",0
785,,0
786,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_inter_mode ( VP9_COMMON <S2SV_ModStart> * r, MACROBLOCKD * xd, vpx_reader <S2SV_ModEnd> * r,",0
787,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> vpx_codec_alg_priv ( vpxEncoderConfig <S2SV_ModEnd>, NULL, <S2SV_ModStart> NULL ) ; if (! vpx_codec_err ( & VPX_IMG_FMT_HIGHBITDEPTH ) ) { if (! cfg -> codec_interface ( ) ) { VPX_CODEC_err ( & stream -> codec_interface <S2SV_ModEnd>, 1, <S2SV_ModStart> codec -> codec_interface <S2SV_ModEnd> ) ; }",0
788,<S2SV_ModStart> break ; } ND_TCHECK ( & ip_len ) ;,0
789,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
790,<S2SV_ModStart> key ) { <S2SV_ModEnd> return err ;,0
791,<S2SV_ModStart> skb -> len && skb -> len,0
792,,0
793,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
794,"<S2SV_ModStart> -> cac_id, serial -> len <S2SV_ModEnd>",0
795,<S2SV_ModStart> ; # endif tok -> type_comments = 0 ;,0
796,,0
797,<S2SV_ModStart> ( s ) <S2SV_ModEnd> ; if (,0
798,<S2SV_ModStart> ; buff [ len <S2SV_ModEnd> ] = 0,0
799,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
800,<S2SV_ModStart> = 0 ; size_t addrlen_out = 0 ; <S2SV_ModStart> ; if (! addrlen_in || addrlen_out > OE_RAISE_ERRNO ( OE_EINVAL ) ) ; if ( addrlen > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen > addrlen_out ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
801,,1
802,"<S2SV_ModStart>, s, false",0
803,"<S2SV_ModStart> final_p, final ; struct ipv6_txoptions * opt <S2SV_ModStart>. opt ) { opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; } <S2SV_ModEnd> if ( opt",0
804,"<S2SV_ModStart> = 0 ; size_t data_size = 0 ; <S2SV_ModStart>, 0, sizeof ( ctx ) <S2SV_ModEnd> ; if ( <S2SV_ModStart>, ctx -> data_size, sizeof ( ctx ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0x > 0x >= sizeof ( uint32_t ) <S2SV_ModEnd> ) { ctx <S2SV_ModStart> - 1 ; goto out ; } <S2SV_ModStart> ; ctx -> data_size = sizeof ( uint32_t ) ctx -> data_t ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0x > 0x >= sizeof ( uint32_t ) { ctx -> data_t ) ; ctx = 0 ; goto out ; } <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if ( <S2SV_ModStart>, ctx -> data_size, sizeof ( ctx ) ) <S2SV_ModEnd> ) ) { <S2SV_ModStart> = 0x >= sizeof ( uint32_t ) <S2SV_ModEnd> ; break ;",0
805,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = dm9000ReadReg ( DM9000_COMP <S2SV_ModEnd>, DM9000_E <S2SV_ModEnd>, dm9000ReadReg ( <S2SV_ModStart>, dm9000ReadReg ( DM9000_E ) ; dm9000WriteReg ( DM9000_ISR, DM9000_E ) ; dm9000WriteReg ( DM9000_E ) ; dm9000WriteReg ( DM9000_ISR, DM9000_E ) ; dm9000WriteReg ( DM9000_E ) ; dm9000WriteReg ( DM9000_ISR, DM9000_E ) ; dm9000WriteReg ( DM9000_ISR, DM9000_E ) ; dm9000WriteReg ( DM9000_E ) ; dm9000WriteReg ( DM9000_E ) ; }",0
806,,0
807,,0
808,<S2SV_ModStart> = NULL ; if (! rc ) return - EINVAL ;,0
809,<S2SV_ModStart> size ) ; <S2SV_ModEnd> if ( msg,0
810,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> best_mv_mode ( VP9_COMMON <S2SV_ModStart> * best_cost, vpredict_err, & cpi -> td. mv_err, & cpi -> td. mbmi, & cpi -> td. mbmi, & cpi -> mbmi. mbmi, 0, sizeof ( cpi -> td. mbmi ) ; <S2SV_ModStart> -> mv_col ) ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH break ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( bsize == TX_size ) { vp9_error = 1 ; break ; } memset ( & x, 0, 0, & bsize, 0, 0, 0, 0, 0, sizeof ( cpi, bsize ) ) ; }",0
811,<S2SV_ModStart> ; h = safe_calloc <S2SV_ModEnd> ( h ->,0
812,,0
813,"<S2SV_ModStart> ( msg_name, msg_name, msg_name, <S2SV_ModStart> -> msg_name, msg_name ) ; if ( msg -> msg_name && msg_namelen!= msg_name ) { <S2SV_ModStart> -> msg_name, msg_name, msg_name, msg_name, msg_name, msg_name, msg_name, msg_name, msg_namelen <S2SV_ModEnd> -> msg_name,",0
814,"<S2SV_ModStart> ( number_planes, number_planes, number_planes",0
815,<S2SV_ModStart> ( r = 0 <S2SV_ModEnd> ; if (,0
816,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
817,,0
818,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
