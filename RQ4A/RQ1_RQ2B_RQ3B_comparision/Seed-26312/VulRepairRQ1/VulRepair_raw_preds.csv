,raw_predictions,correctly_predicted
0,<S2SV_ModStart> ; if ( n2size < 1 ) <S2SV_ModEnd> { applog (,0
1,"<S2SV_ModStart> case EAP_FRAME_TYPE_PACKET : ND_TCHECK_8BITS ( tptr ) ; <S2SV_ModStart> 2 ) { ND_TCHECK_8BITS ( tptr + 2 ) ; <S2SV_ModStart> ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %u <S2SV_blank> (%u)"", <S2SV_ModEnd> tok2str ( eap_type_values <S2SV_ModStart>, ""unknown"", subtype ), subtype <S2SV_ModEnd> ) ) ;",0
2,"<S2SV_ModStart> op_mutex ) ; ret = - ETIMEDOUT ; goto out ; } if ( unlikely ( time_left <= 0 ) ) { ath_dbg ( common, WMI, ""Timeout <S2SV_blank> waiting <S2SV_blank> for <S2SV_blank> WMI <S2SV_blank> command: <S2SV_blank> %s\\n"", wmi_cmd_to_name ( cmd_id ) ) ; mutex_unlock ( & wmi -> op_mutex ) ; ret = - ETIMEDOUT ; goto out ; }",0
3,<S2SV_ModStart> ; if ( ( yi. cfg. mask & YAM_IRQ ) &&! capable ( CAP_NET_ADMIN ) ) return - EPERM ; if ( ( <S2SV_ModStart>. mask & YAM_BITRATE ) &&! capable ( CAP_SYS_RAWIO ) ) return - EPERM ; if ( ( yi. cfg. mask & YAM_IRQ ) &&! capable ( CAP_NET_ADMIN ) ) return - EPERM ; if ( ( yi. cfg. mask & YAM_IRQ ) &&! capable ( CAP_NET_ADMIN ) ) return - EPERM ; if ( ( yi. cfg. mask & YAM_BITRATE ) &&! capable ( CAP_NET_ADMIN ) ) return - EPERM ; if ( ( yi. cfg. mask & YAM_IRQ ) && netif_running ( dev ) ) return - EINVAL ; if ( ( yi. cfg. mask & YAM_BITRATE ) && netif_running ( dev ) ) return - EINVAL ;,0
4,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ; <S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,0
5,"<S2SV_ModStart>, offset ; if ( avio_feof ( f ) ) { index -> item_count = 0 ; av_freep ( & index -> items ) ; return AVERROR_INVALIDDATA ; }",1
6,<S2SV_ModStart> * tpg ; u16 <S2SV_ModEnd> tpgt ; int <S2SV_ModStart> ; if ( kstrtou16 <S2SV_ModEnd> ( name + <S2SV_ModStart> ) || tpgt >= VHOST_SCSI_MAX_TARGET <S2SV_ModEnd> ) return ERR_PTR,1
7,<S2SV_ModStart> * writer = NULL ; if (! writer ) continue,0
8,"<S2SV_ModStart> { u32 data <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return ; kvm_read_guest_cached ( vcpu -> kvm, & <S2SV_ModEnd> vcpu -> arch <S2SV_ModStart>. apic -> vapic_cache, & data, sizeof ( u32 ) <S2SV_ModEnd> ) ; apic_set_tpr",1
9,<S2SV_ModStart> src ) ; __switch_to_tm ( src ) ; __switch_to_tm ( src ) ;,0
10,<S2SV_ModStart> item ) { return <S2SV_ModEnd> c -> child <S2SV_ModStart> -> child ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
11,"<S2SV_ModStart> ( sb, KERN_ERR,",1
12,"<S2SV_ModStart> ipv6_select_ident ( fptr, unfrag_ip6hlen, features",0
13,"<S2SV_ModStart> u64 nr, <S2SV_ModEnd> struct pt_regs * <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",1
14,"<S2SV_ModStart> { # ifndef _MSC_VER char * buf = grub_malloc ( <S2SV_ModEnd> EXT2_BLOCK_SIZE ( data <S2SV_ModStart> ( data ) ) ; # else char * buf = grub_malloc ( <S2SV_ModEnd> EXT2_BLOCK_SIZE ( data <S2SV_ModStart> ]. len ) ) ; if (! buf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } <S2SV_ModEnd> ext = ( <S2SV_ModStart>. start ) ; if ( fileblock >= grub_le_to_cpu16 ( ext [ i ]. len ) ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return 0 ; } else { grub_disk_addr_t start ; start = ( grub_le_to_cpu32 ( ext [ i ]. start ) << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start ) ; if ( fileblock < grub_le_to_cpu32 ( ext [ i ]. start_hi ) ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" )",0
15,"<S2SV_ModStart> fdct16 ( const tran_low_t * in, tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> ] ) { tran_high_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> temp1, temp2 <S2SV_ModStart> { int s0, s1, s2, s3, s4, s5, s6, s7 ; tran_high_t t0, t1, t2, t3 ; tran_high_t <S2SV_ModEnd> x0, x1 <S2SV_ModStart> x2, x3 ; tran_high_t <S2SV_ModEnd> x3 ; input <S2SV_ModStart> { int t0, t1, t2, t3 ; tran_high_t <S2SV_ModEnd> x0, t1 <S2SV_ModStart> t3 ; } s0 = input [ 0 ] + input [ 1 ] + input [ 2 ] ; s1 = input [ 1 ] + input [ 3 ] ; s2 = input [ 2 ] + input [ 4 ] ; s3 = input [ 3 ] + input [",0
16,<S2SV_ModStart> == 0 ) sanitize_dead_code ( env ) ; if ( ret == 0 ),1
17,"<S2SV_ModStart> int i ; if (! config -> sample_rate ) { strcpy ( wpc -> error_message, ""sample <S2SV_blank> rate <S2SV_blank> cannot <S2SV_blank> be <S2SV_blank> zero!"" ) ; return FALSE ; }",1
18,"<S2SV_ModStart> = 0 ; unsigned char sense_buffer [ SCSI_SENSE_BUFFERSIZE ], * senseptr = NULL ; <S2SV_ModStart> cd -> device ; if ( cgc -> sense ) senseptr = sense_buffer <S2SV_ModStart> -> buflen, senseptr, & sshdr, cgc -> timeout, IOCTL_RETRIES, 0, 0, NULL ) ; if ( cgc -> sense ) memcpy ( cgc -> sense, sense_buffer, sizeof ( * <S2SV_ModEnd> cgc -> sense <S2SV_ModStart> cgc -> sense ) <S2SV_ModEnd> ) ; if",1
19,"<S2SV_ModStart> ; if ( hlen < 64 ) { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; # endif <S2SV_ModStart> ( ) == 0x48454150 ) { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; # endif parse_ciff ( save + hlen, len - hlen, 0 ) ; } else { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; # endif",0
20,"<S2SV_ModStart> * sd, VP9_COMMON * cm, struct loopfilter * lf <S2SV_ModEnd> ) { VP9_BUFFER_CONFIG <S2SV_ModStart> * cpi ) <S2SV_ModEnd> { VP9_COMMON * <S2SV_ModStart> -> common ; <S2SV_ModEnd> struct loopfilter * <S2SV_ModStart> cpi ) ; <S2SV_ModEnd> int filt_best ; <S2SV_ModStart> ; int best_err <S2SV_ModEnd> ; int filt_direction <S2SV_ModStart> ; int ss_err [ MAX_LOOP_FILTER + 1 ] ; memset <S2SV_ModEnd> ( ss_err, <S2SV_ModStart> + 1 ] ; if ( cm -> tx_mode == ONLY_4X4 ) ss_err [ MAX_LOOP_FILTER + 1 ] = best_err ; else ss_err [ MAX_LOOP_FILTER + 1 ] = best_err ; if ( cpi -> twopass. section_intra_rating < 20 ) ss_err [ filt_low ] = bias * cpi -> twopass. section_intra_rating / 20 ; <S2SV_ModStart> 0 ) { filt_err = try_filter_frame ( sd, cpi, filt_low, partial_frame ) ; ss_err [ filt_low ] = filt_err ; } else { filt_err = try_filter_frame ( sd, cp",0
21,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
22,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( w, mv_class == MV_CLASS_0? mvcomp -> class0_hp : mvcomp -> hp ) ; } vpx_write <S2SV_ModEnd> ( w,",0
23,<S2SV_ModStart> ) ; return <S2SV_ModEnd> ralg -> seedsize,1
24,<S2SV_ModStart> ; if ( sockaddr_len < sizeof ( struct sockaddr_pppox ) ) return - EINVAL ; if (,1
25,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } else { <S2SV_ModEnd> request -> rxBlockSzx <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; } <S2SV_ModStart> ( ) ) { <S2SV_ModStart> ( ) ; },1
26,"<S2SV_ModStart> char * fmtname ; int numcolors <S2SV_ModStart> = 0 ; numcolors = 0 ; <S2SV_ModStart> ; while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_VERBOSE : verbose = 1 ; break ; case <S2SV_ModStart> ; case OPT_INFILE : if (! jas_stream_fopen ( jas_optarg, ""rb"" ) ) { fprintf ( stderr, ""cannot <S2SV_blank> open <S2SV_blank> standard <S2SV_blank> input <S2SV_blank> file <S2SV_blank> %s\\n"", infile ) ; exit ( EXIT_FAILURE ) ; } } if ( ( fmtid = jas_image_getfmt ( instream ) ) < 0 ) { fprintf ( stderr, ""unknown <S2SV_blank> image <S2SV_blank> format\\n"" ) ; } if (! ( image = jas_image_decode ( image, fmtid, 0 ) ) ) { abort ( ) ; } jas_stream_close ( instream ) ; numcolors = jas_image_numcmpts ( image ) ; if (! ( fmtname = jas_image_fmttostr ( fmtid ) ) ) { abort ( ) ; } jas_image_close ( fmt",0
27,"<S2SV_ModStart> esr ) { console_verbose ( ) ; die_if_kernel ( <S2SV_ModEnd> ""Bad <S2SV_blank> mode <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> handler <S2SV_blank> detected, <S2SV_blank> code <S2SV_blank> 0x%08x\\n"", handler <S2SV_ModStart> esr ) ; __show_regs ( regs ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
28,"<S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; length -= 2 ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart>, ""Direction-#%u"", * ( ( const u_char * ) ptr ++ ) ) ) ; length -= 2 ; if ( length < 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ptr, length <S2SV_ModEnd> ) ; }",0
29,"<S2SV_ModStart> intf ) { struct usb_host_interface * <S2SV_ModEnd> alt ; alt <S2SV_ModStart> ; if (! alt ) return - ENODEV <S2SV_ModEnd> ; return usb_set_interface <S2SV_ModStart> ( udev, alt -> <S2SV_ModEnd> desc. bInterfaceNumber <S2SV_ModStart> bInterfaceNumber, alt -> desc. bAlternateSetting",1
30,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> udf_pc_to_char ( struct <S2SV_ModStart> char * to, int tolen <S2SV_ModStart> = 0 ; int comp_len ; <S2SV_ModStart> p = to ; tolen -= sizeof ( struct pathComponent ) ; <S2SV_ModStart> case 2 : if ( tolen < 3 ) { return - ENAMETOOLONG ; } <S2SV_ModStart> = '/' ; tolen -= 3 ; <S2SV_ModStart> case 3 : if ( tolen < 3 ) { return - ENAMETOOLONG ; } <S2SV_ModStart> += 3 ; tolen -= 3 ; <S2SV_ModStart> case 4 : if ( tolen < 2 ) { return - ENAMETOOLONG ; } <S2SV_ModStart> += 2 ; tolen -= 2 ; <S2SV_ModStart> case 5 : comp_len = udf_get_filename ( sb, pc -> componentIdent, p, tolen ) ; if ( tolen < 0 ) return - ENAMETOOLONG <S2SV_ModEnd> ; * p <S2SV_ModStart> = '\\0' ; return 0 ;",0
31,"<S2SV_ModStart> = atoi ( ""127.0.0.1"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> = atoi ( ""127.0.0.1"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> = atoi ( ""127.0.0.1"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> = atoi ( ""127.0.0.1"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> = atoi ( ""127.0.0.1"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> = atoi ( ""127.0.0.1"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> = atoi ( ""127.0.0.1"" ) ; if ( atoi ( ""127.0.0.1"" ) ; if ( atoi ( ""127.0.0.1"" ) && atoi ( ""127.0.0.1"" ) && atoi ( ""127.0.0.1"" ) && atoi ( ""127.0.0.1"" ) && atoi ( ""127.0.0.1"" ) && atoi ( ""127.0.0.1"" ) && atoi ( ""127.0.0.1"" ) && atoi ( ""127.0.0.1"" ) &&",0
32,<S2SV_ModStart> unsigned long flags ; if ( qid > NVMET_NR_QUEUES ) return NULL,1
33,"<S2SV_ModStart> -> bInterval ; <S2SV_ModEnd> result = usb_control_msg <S2SV_ModStart> ) ) ; usb_set_intfdata ( interface, dev ) ; retval = usb_register_dev ( interface, & tower_class ) ; if ( retval ) { dev_err ( idev, ""Not <S2SV_blank> able <S2SV_blank> to <S2SV_blank> get <S2SV_blank> a <S2SV_blank> minor <S2SV_blank> for <S2SV_blank> this <S2SV_blank> device.\\n"" ) ; usb_set_intfdata ( interface, NULL ) ; goto error ; } dev -> minor = interface -> minor ; dev_info ( & interface -> dev, ""LEGO <S2SV_blank> USB <S2SV_blank> Tower <S2SV_blank> #%d <S2SV_blank> now <S2SV_blank> attached <S2SV_blank> to <S2SV_blank> major <S2SV_blank> "" ""%d <S2SV_blank> minor <S2SV_blank> %d\\n"", ( dev -> minor - LEGO_USB_TOWER_MINOR_BASE ), USB_MAJOR, dev -> minor ) ;",1
34,"<S2SV_ModStart> out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; goto out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; goto out_error ; } <S2SV_ModStart> } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; goto out_error ; } <S2SV_ModStart> out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; goto out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; goto out_error ; }",0
35,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; if ( dest_keyring ) return false ; <S2SV_ModStart> dest_keyring ) ; return true ; } switch ( cred -> jit_keyring ) { case KEY_REQKEY_DEFL_DEFAULT : case KEY_REQKEY_DEFL_REQUESTOR_KEYRING : if ( cred -> request_key_auth ) dest_keyring = key_get ( cred -> request_key_auth -> dest_keyring ) ; if (! dest_keyring ) return false ; up_read ( & authkey -> sem ) ; if ( dest_keyring ) return true ; break ; case KEY_REQKEY_DEFL_THREAD_KEYRING : dest_keyring = key_get ( cred -> thread_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_PROCESS_KEYRING : dest_keyring = key_get ( rcu_dereference ( cred -> process_session_keyring ) ) ; if ( dest_keyring ) break ; case KEY_,0
36,<S2SV_ModStart> = create_spnego_ctx ( 0,0
37,"<S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_l2tpip <S2SV_ModEnd> ) ) return <S2SV_ModStart> ; if ( addr -> l2tp_family!= AF_INET <S2SV_ModEnd> ) return - <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> ret = - <S2SV_ModStart> ( sk ) ; if (! sock_flag ( sk, SOCK_ZAPPED ) ) goto out",1
38,<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> stack_maxrandom_size ( void <S2SV_ModStart> max = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> PF_RANDOMIZE ) { if ( ( current -> flags & PF_RANDOMIZE ) &&! ( current -> personality & ADDR_NO_RANDOMIZE ) ) { max = ( ( - 1U ) & STACK_RND_MASK ) << PAGE_SHIFT ; } else { max = ( ( - 1U ) & STACK_RND_MASK ) << PAGE_SHIFT ; } return max <S2SV_ModEnd> ; } <S2SV_null>,0
39,"<S2SV_ModStart>, _ ( ""_Cancel"" ), GTK_RESPONSE_CANCEL ) ; gtk_dialog_set_default_response ( GTK_DIALOG ( dialog ), GTK_RESPONSE_CANCEL <S2SV_ModEnd> ) ; if <S2SV_ModStart>, _ ( ""Trust <S2SV_blank> and <S2SV_blank> _Launch"" ), GTK_RESPONSE_OK <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> g_signal_connect ( dialog",1
40,<S2SV_ModStart> ; tm = g_gettimeofday <S2SV_ModEnd> ( & t,0
41,"<S2SV_ModStart> ; memcpy ( hashed + length - 1 <S2SV_ModEnd>, password,",0
42,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0x51 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> 0x51 <S2SV_blank> transfer <S2SV_blank> failed."" ) ; mutex_unlock ( & d -> data_mutex ) ; adap <S2SV_ModEnd> -> fe_adap [ <S2SV_ModStart> & d -> <S2SV_ModEnd> i2c_adap ) ; <S2SV_ModStart> ; if ( adap <S2SV_ModEnd> -> fe_adap [ <S2SV_ModStart> ( ts2020_attach, adap <S2SV_ModEnd> -> fe_adap [ <S2SV_ModStart>, & d <S2SV_ModEnd> -> i2c_adap )",1
43,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
44,"<S2SV_ModStart> } } } if ( google_version!= ""0.6"" && google_sig!= ""0.6"" ) { debug ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> google <S2SV_blank> signature <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"", w -> id, google_sig ) ; google_version = ""0.6"" ; } else if ( google_version!= ""0.6"" && google_version!= ""0.6"" && google_version!= ""0.6"" && google_sig!= ""0.6"" ) { debug ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> google <S2SV_blank> signature <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"", w -> id, google_sig ) ; google_version = ""0.6"" ; } else if ( google_version!= ""0.6"" && google_version!= ""0.6"" && google_version!= ""0.6"" && google_version!= ""0.6"" && google_version!= ""0.6"" && google_version!= ""0.6"" ) { debug ( D_WEB",0
45,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horAcc8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
46,"<S2SV_ModStart> tsample_t s ; uint16 bps = 0 ; ( void ) TIFFGetField ( in, TIFFTAG_BITSPERSAMPLE, & bps ) ; if ( bps!= 8 ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> can <S2SV_blank> only <S2SV_blank> handle <S2SV_blank> BitsPerSample=8 <S2SV_blank> in <S2SV_blank> %s"", ""cpContig2SeparateByRow"" ) ; return 0 ; }",1
47,"<S2SV_ModStart> ) ; struct hugepage_subpool * spool = ( struct hugepage_subpool <S2SV_ModEnd> * ) page_private <S2SV_ModStart> hugetlb_lock ) ; hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, 1 )",1
48,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) { return AVERROR_EOF ; } if (,1
49,<S2SV_ModStart> if (! e ) goto not_found ; if ( e - p > HOST_NAME_MAX - 1,0
50,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> bool <S2SV_ModEnd> generic_pipe_buf_get ( struct <S2SV_ModStart> buf ) { return try_get_page <S2SV_ModEnd> ( buf ->,1
51,"<S2SV_ModStart>, cp, ep2, map, nmap ) ; if ( cp == NULL ) { ND_PRINT ( ( ndo, "" <S2SV_blank> #%u <S2SV_blank> attrmap=%u <S2SV_blank> "", tcount, map, nmap ) ) ; cp = ikev2_attr_print ( ndo, cp, ep2 ) ; } else if ( cp == NULL ) { ND_PRINT ( ( ndo, "" <S2SV_blank> #%u <S2SV_blank> attrmap=%u <S2SV_blank> "", tcount, cp, ep2 ) ) ; } if ( cp == NULL ) { ND_PRINT ( ( ndo, "" <S2SV_blank> #%u <S2SV_blank> attrmap=%u <S2SV_blank> "", tcount, map, nmap ) ) ; cp = ikev2_attr_print ( ndo, cp, ep2 ) ; } else if ( cp == NULL ) { ND_PRINT ( ( ndo, "" <S2SV_blank> #%u <S2SV_blank> attrmap=%u <S2SV_blank> "", tcount, cp, ep2 ) ) ; } if ( cp == NULL ) { ND_PRINT ( ( ndo, "" <S2SV_blank> #%u <S2SV_blank> attrmap=%u <S2SV_blank> "", tcount, map, nmap ) ) ;",0
52,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gid <S2SV_ModEnd> ( inode,",0
53,"<S2SV_ModStart> NULL, NULL, & <S2SV_ModStart> 0 ; select ( reader -> bytes_available_fd + 1, & read_fds, NULL, NULL, & timeout ) ; if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) return false ; } else { if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) return false ; } else { if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { if ( FD_ISSET ( reader -> bytes_available_fd, &",0
54,<S2SV_ModStart> config -> pm_max_requests ; fpm_globals. listening_socket = dup ( wp -> listening_socket ),1
55,"<S2SV_ModStart> detect_transition_to_still ( TWO_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> last_decay_rate ) { TWO_PASS <S2SV_ModEnd> * position = <S2SV_ModStart> * position = twopass -> stats_in <S2SV_ModEnd> ; for ( <S2SV_ModStart> j ) { const FIRSTPASS_STATS * const tmp_frame = <S2SV_ModEnd> input_stats ( twopass <S2SV_ModStart> ( EOF == <S2SV_ModEnd> input_stats ( twopass <S2SV_ModStart> pcnt_inter - tmp_next_frame. <S2SV_ModEnd> pcnt_motion < 0.999 <S2SV_ModStart> pcnt_motion < 0.999 <S2SV_ModEnd> ) break ; <S2SV_ModStart> } reset_fpf_position ( twopass, <S2SV_ModEnd> position ) ; <S2SV_ModStart> j == still_interval <S2SV_ModEnd> ) trans_to_still = <S2SV_ModStart> } return trans_to_still <S2SV_ModEnd> ; } <S2SV_null>",0
56,<S2SV_ModStart> 0 ; } err = handle -> h_err ; <S2SV_ModStart> h_transaction ) { rc <S2SV_ModEnd> = jbd2_journal_stop ( <S2SV_ModStart> ) ; return err? err : rc <S2SV_ModEnd> ; } sb <S2SV_ModStart> t_journal -> j_private <S2SV_ModEnd> ; rc =,1
57,"<S2SV_ModStart> if ( offset >= inode -> i_sb -> s_blocksize ) { ret = ext4_convert_unwritten_extents_nolock ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu\\n"", __func__, ret, inode -> i_ino ) ; return ret ; } <S2SV_ModEnd> ret = ext4_write_unwritten_extents",0
58,<S2SV_ModStart> valuelen ) ; args -> rmtvaluelen = args -> valuelen ;,1
59,"<S2SV_ModStart> ) { if (! <S2SV_ModStart> ) request_module ( ""crypto-%s"" <S2SV_ModEnd>, name ) <S2SV_ModStart> ) request_module ( ""crypto-%s-all"" <S2SV_ModEnd>, name )",0
60,"<S2SV_ModStart> 2 ) { ND_TCHECK2 ( * tptr, 2 ) ; <S2SV_ModStart> len - 2 ; if ( len < stlv_len + ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) ; stlv_len = len - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ; stlv_len = stlv_len - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ; if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> len = len - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ; stlv_len = stlv_len <S2SV_ModStart> - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ; stlv_len = st",0
61,"<S2SV_ModStart> { return reply_msg ( c, MSG_JOB_TOO_BIG ) ; } if ( end_buf [ 0 ] == '\\0' ) { twarnx ( ""server <S2SV_blank> error: <S2SV_blank> "" MSG_OUT_OF_MEMORY ) ; return skip ( c, body_size + 2, MSG_OUT_OF_MEMORY ) ;",0
62,"<S2SV_ModStart> flags ) ; memset ( & ddi, 0, sizeof ( ddi ) ) ;",1
63,<S2SV_ModStart> == 12 && ( <S2SV_ModStart> flags & TH_SYN ),1
64,"<S2SV_ModStart> -> ipc_socket ; <S2SV_ModEnd> lxc_attach_options_t * options <S2SV_ModStart> int fd ; int lsm_label <S2SV_ModStart> { ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (0): <S2SV_blank> %s"", strerror ( errno ) <S2SV_ModEnd> ) ; shutdown <S2SV_ModStart> { ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (1): <S2SV_blank> %s"", strerror ( errno ) <S2SV_ModEnd> ) ; shutdown <S2SV_ModStart> { ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (2): <S2SV_blank> %s"", strerror ( errno ) <S2SV_ModEnd> ) ; shutdown <S2SV_ModStart> ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (3): <S2SV_blank> %s"", strerror ( errno ) <S2SV_ModEnd> ) ; shutdown <S2SV_ModStart> { ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (3): <S2SV_blank> %s"", strerror ( errno ) <S2SV_ModEnd> ) ; shutdown <S2SV_ModStart> ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (3",0
65,"<S2SV_ModStart> = GIT_PKT_NG ; if ( strlen ( line ) < 3 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } <S2SV_ModStart> = '\\0' ; if ( strlen ( line ) < 3 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } <S2SV_ModStart> = ptr + len <S2SV_ModEnd> ; if ( <S2SV_ModStart> if (! ( ptr <S2SV_ModEnd> = strchr ( <S2SV_ModStart> '\\n' ) ) ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> msg = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> msg ) ; memcpy ( pkt -> msg, line, len ) ; pkt -> msg [ len ] = '\\0' ; if ( strlen ( line ) < 2 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1",0
66,"<S2SV_ModStart> ( header -> biBitCount == 0 ) { fprintf ( stderr, ""Error, <S2SV_blank> invalid <S2SV_blank> biBitCount <S2SV_blank> %d\\n"", 0 ) ; return OPJ_FALSE ; } if ( header ->",1
67,<S2SV_ModStart> NULL ; } sas_probe_devices ( port ) ;,1
68,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,"<S2SV_ModStart> ENOBUFS ; } memset ( & line, 0, sizeof ( line ) ) ;",1
71,"<S2SV_ModStart> arg ) { int ret ; ret = scsi_verify_blk_ioctl ( bd, cmd ) ; if ( ret < 0 ) return ret ;",1
72,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ; UINT16 length <S2SV_ModEnd> ; Stream_Read_UINT32 ( <S2SV_ModStart> = NEGO_STATE_FINAL ; return ;,0
73,<S2SV_ModStart> * ureq ; unsigned <S2SV_ModStart> return - EFAULT ; if ( req_len > ( QETH_BUFSIZE - IPA_PDU_HEADER_SIZE - sizeof ( struct qeth_ipacmd_setadpparms_hdr ) - sizeof ( struct qeth_ipacmd_setadpparms_hdr ) - sizeof ( ureq -> hdr. data_len ) ) return - EINVAL,0
74,"<S2SV_ModStart> int m ; if ( n < 0 ) { jas_deprecated ( ""negative <S2SV_blank> count <S2SV_blank> for <S2SV_blank> jas_stream_pad"" ) ; }",1
75,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) return AVERROR_EOF ;,0
76,"<S2SV_ModStart> av_log ( mxf -> fc <S2SV_ModEnd>, AV_LOG_ERROR, <S2SV_ModStart> AV_LOG_ERROR, ""material <S2SV_blank> track <S2SV_blank> not <S2SV_blank> found\\n"" ) ; break <S2SV_ModEnd> ; } if <S2SV_ModStart> av_log ( mxf -> fc <S2SV_ModEnd>, AV_LOG_ERROR, <S2SV_ModStart> AV_LOG_ERROR, ""material <S2SV_blank> track <S2SV_blank> not <S2SV_blank> found\\n"" ) ; break <S2SV_ModEnd> ; } if <S2SV_ModStart> av_log ( mxf -> fc <S2SV_ModEnd>, AV_LOG_ERROR,",0
77,"<S2SV_ModStart> 1 ; } ret = safe_mount <S2SV_ModEnd> ( mntent,",0
78,<S2SV_ModStart> + 10 ; if ( psf -> fileoffset < psf -> filelength ) { <S2SV_ModStart> ; } ; } ;,1
79,"<S2SV_ModStart> case LS_COOKIE_ID : ND_TCHECK2 ( p [ 0 ], 2 ) ; <S2SV_ModStart> case LS_COOKIE_ID : ND_TCHECK2 ( p [ 0 ], 2 ) ; <S2SV_ModStart> case LS_COOKIE_ID : ND_TCHECK2 ( p [ 0 ], 2 ) ; <S2SV_ModStart> case LS_COOKIE_ID : ND_TCHECK2 ( p [ 0 ], 2 ) ;",0
80,<S2SV_ModStart> NF_STOLEN ; return err == 0? NF_ACCEPT : NF_DROP <S2SV_ModEnd> ; } <S2SV_null>,1
81,"<S2SV_ModStart> * up ; int klen, ulen ; <S2SV_ModStart> rta ) ; klen = <S2SV_ModEnd> xfrm_replay_state_esn_len ( up <S2SV_ModStart> ( up ) ; ulen = <S2SV_ModEnd> xfrm_replay_state_esn_len ( up <S2SV_ModStart> ( up ) ; memcpy ( p, up, ulen ) ; memcpy ( pp, up, ulen ) ;",0
82,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } io -> io_cleanup = mem_cleanup ;,1
83,<S2SV_ModStart> : { result = ( MagickRealType ) <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> value + 0.5 ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = ( MagickRealType ) <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> value + 0.5 ) <S2SV_ModEnd> ; break ;,0
84,"<S2SV_ModStart> ) ) ; btif_config_set_bin ( bdstr, ""LinkKeyType"", ( uint8_t ) key_type ) ; ret &= btif_config_set_bin ( bdstr, ""PinLength"", ( uint8_t ) pin_length ) ;",0
85,"<S2SV_ModStart> ( buf = jas_alloc3 ( bufsize, numcols <S2SV_ModEnd>, sizeof (",1
86,<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; if ( iface -> enc. cfg_maps == NULL ) return VPX_CODEC_INCAPABLE ; else if ( iface -> enc. cfg_maps -> usage < 0 ) return VPX_CODEC_INVALID_PARAM ; <S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; <S2SV_ModEnd> for ( map,0
87,"<S2SV_ModStart> size ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""GSO <S2SV_blank> size <S2SV_blank> must <S2SV_blank> not <S2SV_blank> be <S2SV_blank> zero.\\n"" ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> gso. type ) ; netbk_fatal_tx_err ( vif",1
88,"<S2SV_ModStart> * object, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void * <S2SV_ModStart> < 0 ) <S2SV_ModEnd> bitmap_pos = ext_index_add_object <S2SV_ModStart> name ) ; <S2SV_ModEnd> bitmap_set ( base",1
89,"<S2SV_ModStart> xfr_cmd, fname <S2SV_ModEnd> ) ; free",1
90,<S2SV_ModStart> mixer ) { snd_usb_mixer_disconnect ( mixer ) ;,1
91,<S2SV_ModStart> ) { struct packet_rollover * rollover = NULL <S2SV_ModStart> EINVAL ; } mutex_lock ( & fanout_mutex ) ; err = - EINVAL ; switch ( type ) { case PACKET_FANOUT_LB : case PACKET_FANOUT_CPU : case PACKET_FANOUT_RND : case PACKET_FANOUT_QM : case PACKET_FANOUT_CBPF : case PACKET_FANOUT_EBPF : break ; case PACKET_FANOUT_HASH : case PACKET_FANOUT_LB : case PACKET_FANOUT_RND : case PACKET_FANOUT_CPU : case PACKET_FANOUT_RND : case PACKET_FANOUT_QM : case PACKET_FANOUT_CBPF : case PACKET_FANOUT_EBPF : return - EINVAL ; case PACKET_FANOUT_CBPF : case PACKET_FANOUT_EBPF : case PACKET_FANOUT_CBPF : case PACKET_FANOUT_QM : case PACKET_FANOUT_CBPF :,0
92,"<S2SV_ModStart> newsk ) ; memset <S2SV_ModEnd> ( newnp, <S2SV_ModStart> ( newnp ) <S2SV_ModEnd> ; RCU_INIT_POINTER (",0
93,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
94,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
95,"<S2SV_ModStart> ; if ( imp_dbh -> mysql_version_id >= SERVER_PREPARE_VERSION && imp_sth -> use_server_side_prepare ) { if ( imp_sth -> fetch_done ) { do_error ( sth, JW_ERR_SEQUENCE, ""fetch() <S2SV_blank> but <S2SV_blank> fetch <S2SV_blank> already <S2SV_blank> done"", NULL ) ; return Nullav ; } if ( <S2SV_ModStart> -> mysql_version_id >= SERVER_PREPARE_VERSION && imp_sth -> use_server_side_prepare ) { do_error ( sth, JW_ERR_SEQUENCE, ""fetch() <S2SV_blank> but <S2SV_blank> fetch <S2SV_blank> already <S2SV_blank> done"", NULL ) ; return Nullav ; } if ( <S2SV_ModStart> imp_sth ) { do_error ( sth, JW_ERR_SEQUENCE, ""fetch() <S2SV_blank> but <S2SV_blank> fetch <S2SV_blank> already <S2SV_blank> done"", NULL ) ; return Nullav ; } <S2SV_ModEnd> if ( imp_sth <S2SV_ModStart> -> mysql_version_id >= SERVER_PREPARE_VERSION && imp_sth -> use_server_side_prepare ) { do_error ( sth, JW_ERR_SEQUENCE, ""fetch() <S2SV_blank> but <S2SV_blank> fetch <S2SV_blank> already <S2SV_blank> done"", NULL ) ; return Nullav ; }",0
96,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ETXSTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXSTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J",0
97,"<S2SV_ModStart> value ) ; value = ast2obj_int ( o -> lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; <S2SV_ModStart> value ) ; value = ast2obj_int ( o -> col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; <S2SV_ModStart> o -> end_lineno <S2SV_ModEnd> ) ; if",0
98,"<S2SV_ModStart> ( page && ( file_access <S2SV_ModEnd> ( page, <S2SV_ModStart> ( page && ( file_access ( page, R_OK ) == 0 <S2SV_ModEnd> ) ) ) <S2SV_ModStart> ( page && ( file_access ( page, R_OK ) == 0 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( page && ( file_access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } if ( page && ( file_access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } <S2SV_ModEnd> } else if <S2SV_ModStart> ( page && ( file_access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } <S2SV_ModEnd> } else if <S2SV_ModStart> ( page && ( <S2SV_ModEnd> access ( page <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } else if (! strcmp ( func,",0
99,"<S2SV_ModStart> ; if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) ) <S2SV_ModEnd> { ret = <S2SV_ModStart> inode, EXT4_STATE_DIO_UNWRITTEN ) ; if ( ext4_should_dioread_nolock ( inode ) ) set_buffer_uninit ( bh_result <S2SV_ModStart> } if ( ( flags & EXT4_GET_BLOCKS_CONVERT ) <S2SV_ModEnd> ) { ret",1
100,<S2SV_ModStart> 0 ; } ND_TCHECK_16BITS <S2SV_ModEnd> ( p + <S2SV_ModStart> p + 2 <S2SV_ModEnd> ) ; compproto,0
101,"<S2SV_ModStart> if (! caller_may_see_dir ( fc -> pid, controller, cgroup ) ) { ret = - ENOENT ; goto out ; } if (!",1
102,"<S2SV_ModStart> flag ) { int mb_rows, mb_cols ; unsigned char * limits = cm -> pp_limits_buffer ; int mbr, mbc ; ( void ) post ; ( void ) low_var_thresh ; ( void ) flag ; memset <S2SV_ModEnd> ( limits, <S2SV_ModStart> ) ppl, 16 * mb_rows ) ; for ( mbr = 0 ; mbr < mb_rows ; mbr ++ ) { vpx_post_proc_down_and_across_mb_row ( source -> u_buffer + 16 * mbr * source -> uv_stride, source -> uv_stride, source -> uv_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> v_buffer + 8 * mbr * source -> uv_stride, source -> uv_stride, source -> uv_width, limits, 8 ) ; vpx_post_proc_down_and_across_mb_row ( source -> u_buffer + 8 * mbr * source -> uv_stride, source -> uv_stride, source -> uv_width, limits, 8 ) ; vpx_post_proc_down_",0
103,"<S2SV_ModStart> ) ) ; if ( ( ptr -> flags & FD_RAW_WRITE ) && ptr -> buffer_length ) { long length = ptr -> buffer_length - ptr -> length ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; } param += sizeof ( struct floppy_raw_cmd ) ; if ( ( ptr -> flags & FD_RAW_READ ) && ptr -> buffer_length ) { long length = ptr -> buffer_length - ptr -> length ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; } <S2SV_ModEnd> return 0 ;",0
104,"<S2SV_ModStart> : if (! cap_issubset ( new -> cap_permitted, old -> cap_permitted ) ) bprm -> per_clear |= PER_CLEAR_ON_SETID ; if (",1
105,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; ce = mb2_cache_entry_alloc ( ext4_mb_cache, GFP_NOFS, hash <S2SV_ModEnd> ) ; if <S2SV_ModStart> error ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> } } <S2SV_null>",0
106,"<S2SV_ModStart> ) ) ; if ( * code == 200 ) { r_socket_http_header ( s, ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ) ; * rlen = 0 ; } else if ( * code == 201 ) { r_socket_http_header ( s, ""Content-Length: <S2SV_blank> %i\\r\\n"", ( int ) strlen ( data ) ) ; * rlen = r_socket_http_answer ( s, code, rlen ) ; } else { r_socket_http_header ( s, ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ) ; }",0
107,<S2SV_ModStart> tf = ( <S2SV_ModEnd> luaY_parser ) (,1
108,<S2SV_ModStart> ; int err ; if ( protocol < 0 || protocol >= IPPROTO_MAX ) return - EINVAL,1
109,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> opt.",1
110,"<S2SV_ModStart> ; dl = kzalloc <S2SV_ModEnd> ( size,",1
111,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static u_int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> * msg ; ND_TCHECK_8BITS ( tptr ) ; if ( * tptr!= 0 ) { ND_PRINT ( ( ndo, ""%sRPKI-RTRv%u, <S2SV_blank> %s <S2SV_blank> PDU <S2SV_blank> (%u), <S2SV_blank> length: <S2SV_blank> %u"", indent_string ( 8 ), * tptr, * tptr ) ) ; return 0 ; } ND_TCHECK2 ( * tptr, sizeof ( rpki_rtr_pdu ), pdu_len ) ) ; <S2SV_ModStart> case RPKI_RTR_END_OF_DATA_PDU : ND_PRINT ( ( ndo, ""%sSession <S2SV_blank> ID: <S2SV_blank> 0x%04x, <S2SV_blank> Serial: <S2SV_blank> %u"", indent_string ( indent + 2 ), EXTRACT_32BITS ( msg ) ) ) ; break ; case RPKI_RTR_RESET_QUERY_PDU : case RPKI_RTR_CACHE_RESET_PDU : break",0
113,"<S2SV_ModStart> ; int n <S2SV_ModEnd> ; skb -> <S2SV_ModStart> rose_facilities_struct ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> data + ROSE_CALL_REQ_FACILITIES_OFF, skb -> len - ROSE_CALL_REQ_FACILITIES_OFF, <S2SV_ModEnd> & facilities )",1
114,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr,1
115,<S2SV_ModStart> = TRUE ; # ifdef HAVE_SECDBOX if ( sandbox!= 0 ) { errmsg = e_secure ; } else if ( ( options [ opt_idx ]. flags & P_SANDBOX ) ) { if ( ( secure # ifdef HAVE_SANDBOX || sandbox!= 0 # endif ) ) { errmsg = e_secure ; } else { if ( ( options [ opt_idx ]. flags & P_SECURE ) && ( ( options [ opt_idx ]. flags & P_SECURE ) == ( options [ opt_idx ]. flags & P_SECURE ) ) { errmsg = e_secure ; } else if ( ( options [ opt_idx ]. flags & P_SECURE ) ) { if ( ( secure # ifdef HAVE_SANDBOX || sandbox!= 0 # endif } else { if ( ( options [ opt_idx ]. flags & P_SECURE ) && ( options [ opt_idx ]. flags & P_SECURE ) == ( options [ opt_idx ]. flags & P_SECURE ) ) { errmsg = e_secure ; } else { if ( ( options [ opt_idx ]. flags & P_,0
116,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret <S2SV_ModEnd> ) goto out",0
117,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; int ret <S2SV_ModStart> ) ; } o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> cl_nodes_lock ) ; o2nm_unlock_subsystem ( ) ;,1
118,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; break",1
119,"<S2SV_ModStart> == '/' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> is <S2SV_blank> absolute"" ) ; return ( ARCHIVE_FAILED ) ; } separator = * src ++ ; } <S2SV_ModEnd> for ( ;",1
120,"<S2SV_ModStart> TPM_RC tpm_kdfa ( <S2SV_ModEnd> TPMI_ALG_HASH hashAlg, <S2SV_ModStart> { TPM2B_DIGEST tpm2bLabel, tpm2bBits, tpm2b_i_2 ; TPM2B_DIGEST <S2SV_ModEnd> tmpResult ; TPM2B_DIGEST <S2SV_ModStart> ; TPM_RC rval = TPM_RC_SUCCESS <S2SV_ModStart> bytes ) { if (! key -> t. size ) { <S2SV_ModEnd> return TPM_RC_INVALID_DATA ; <S2SV_ModStart> size < bytes ) { <S2SV_ModEnd> j = 0 <S2SV_ModStart> bufferList [ j ] = ( TPM2B_DIGEST * ) & tmpResult ; * ( TPM2B_DIGEST * ) tpm2b_i_2Ptr = ( TPM2B_DIGEST * ) & tmpResult ; bufferList [ j ] = ( TPM2B_DIGEST * ) & tmpResult ; j = 0 ; * ( UINT32 * ) tpm2bBitsPtr = bitsSwizzled ; for ( i = 0 ; i < bytes ; i ++ ) { TPM2B_DIGEST * ) bufferList [ j ] = ( TPM2B_DI",0
121,"<S2SV_ModStart> size_t size ; if ( width == 0 || height == 0 ) { goto error ; } if (! jas_safe_intfast32_add <S2SV_ModEnd> ( tlx, <S2SV_ModStart> 0 ) ||! jas_safe_intfast32_add <S2SV_ModEnd> ( tly,",0
122,<S2SV_ModStart> s ) { if ( s == 0 ) return ( ( void * ) NULL ) ;,1
123,<S2SV_ModStart> ; if ( WARN_ON_ONCE (! ib_safe_file_access ( fp ) ) ) return - EACCES ; if (,1
124,"<S2SV_ModStart> 6 ) ) { MATLAB_KO : clone_info = DestroyImageInfo ( clone_info ) ; <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart> ""ImproperImageHeader"" ) ; }",0
125,<S2SV_ModStart> ( peer ) peer = maybe_get_net <S2SV_ModEnd> ( peer ),1
126,<S2SV_ModStart> } while ( i < ( int ) header_buf_used ) { if ( i + 1 < ( int ) header_buf_used ) { <S2SV_ModStart> } while ( i < ( int ) header_buf_used ) { if ( ( i + 1 ) < ( int ) header_buf_used ) { if ( ( i + 1 ) < ( int ) header_buf_used ) { if ( ( i + 1 ) < ( int ) header_buf_used ) { break ; } } while ( ( i < ( int ) header_buf_used ) { if ( ( i + 1 ) < ( int ) header_buf_used ) ) { while ( i < ( int ) header_buf_used ) { if ( ( i + 1 ) < ( int ) header_buf_used ) ) { if ( ( i + 1 ) < ( int ) header_buf_used ) ) { if ( ( i + 1 ) < ( int ) header_buf_used ) ) { break ; } } } while ( ( i < ( int ) header_buf_used ) ) { if ( ( i + 1 ) < ( int ) header_buf_used ) ) { while ( (,0
127,<S2SV_ModStart> m_family ) ; if ( proto == LLDP_MGMT_ADDR_NONE ) goto toobig <S2SV_ModEnd> ; if (,0
128,<S2SV_ModStart> == datalen && ( ( flags & FLAG_MATCHED ) == 0 ) <S2SV_ModEnd> ) { flags <S2SV_ModStart> ) ) { if ( ( flags & FLAG_LAST_MATCHED ) == 0 ) { pc -= 2 ; cons_datalen_stack [ cons_datalen_stack [ cons_datalen_stack [ cons_datalen_stack [ cons_datalen_stack [ cons_datalen_stack [ cons_datalen_stack ] ] = - 1 ; cons_datalen_stack [ cons_datalen_stack [ cons_datalen_stack ] = 0 ; } } else if ( ( flags & FLAG_LAST_MATCHED ) == 0 ) { pc -= 2 ; cons_datalen_stack [ cons_datalen_stack [ cons_datalen_stack [ cons_datalen_stack [ cons_datalen_stack [ cons_datalen_stack ] ] = - 1 ; cons_datalen_stack [ cons_datalen_stack [ cons_datalen_stack ] ] = - 1 ; },0
129,<S2SV_ModStart> default_auto_asconf ) ; spin_lock_bh ( & sock_net ( sk ) -> sctp. addr_wq_lock ) ; <S2SV_ModStart> default_auto_asconf ) ; spin_unlock_bh ( & sock_net ( sk ) -> sctp. addr_wq_lock,0
130,"<S2SV_ModStart> int mpeg4_decode_profile_level ( MpegEncContext <S2SV_ModEnd> * s, <S2SV_ModStart> 4 ) ; if ( s -> avctx -> profile == 0 && s -> avctx -> level == 0 ) { s -> avctx -> profile = 0 ; s -> avctx -> level = 0 ; } else <S2SV_ModEnd> { s -> <S2SV_ModStart> -> level = get_bits <S2SV_ModEnd> ( gb, <S2SV_ModStart> 8 ) { s -> avctx -> profile = 0 ; s -> avctx -> level = 0 ; } return 1 <S2SV_ModEnd> ; } <S2SV_null>",0
131,"<S2SV_ModStart> + MIDQ_DATA_BUFF ; mutex_lock <S2SV_ModEnd> ( & mpu <S2SV_ModStart> while ( readw ( mpu -> dev -> MIDQ + JQS_wTail )!= readw ( mpu -> dev -> MIDQ + JQS_wHead ) ) { u16 wTmp ; if (! test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode",0
132,<S2SV_ModStart> rule ) ; if (! entry -> lsm [ lsm_rule ]. rule ) return - EINVAL ;,1
133,<S2SV_ModStart> file ) ; <S2SV_ModEnd> file_free ( file,1
134,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
135,"<S2SV_ModStart> ""\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> function <S2SV_blank> setTimer() <S2SV_blank> {\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> checkSession();\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> timerID <S2SV_blank> = <S2SV_blank> setInterval(\'checkSession()\', <S2SV_blank> %d);\\n"" <S2SV_ModEnd> "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }\\n"" ""\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> function <S2SV_blank> receiveMessage(e) <S2SV_blank> {\\n"" <S2SV_ModStart> e.data <S2SV_blank> + \' <S2SV_blank> \' <S2SV_blank> from <S2SV_blank> \' <S2SV_blank> + <S2SV_blank> e.origin);\\n"" <S2SV_ModEnd> "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> if <S2SV_blank> (e.data <S2SV_blank> + \' <S2SV_blank> \' <S2SV_blank> from <S2SV_blank> \' <S2SV_blank> + <S2SV_blank> e.origin);\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> if <S2SV_blank> (e.origin <S2SV_blank>!== <S2SV_blank> targetOrigin <S2SV_blank> ) <S2SV_blank> {\\n"" <S2SV_ModStart> \'cross-site <S2SV_blank> scripting <S2SV_blank> attack?\');\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> returning <S2SV_blank> the <S2SV_blank> same <S2SV_blank> client <S2SV_blank> id\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> session",0
136,"<S2SV_ModStart> * acl_len, u32 * hdrlen <S2SV_ModEnd> ) { __be32 <S2SV_ModStart> int status ; uint32_t attrlen, bitmap [ 3 ] <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> goto out ; hdrlen = ( u8 * ) xdr -> p - ( u8 * ) iov -> iov_base ; recvd = req -> rq_rcv_buf. len - hdrlen <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen, recvd ) ; * acl_len = attrlen ; } else { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen, recvd ) ; return - EINVAL ; } xdr_read_pages ( xdr, attrlen ) ; * acl_len = attrlen <S2SV_ModEnd> ; } <S2SV_null>",0
137,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,1
138,<S2SV_ModStart> ; while ( ( i < to_read ) && <S2SV_ModStart>!= 0 ) <S2SV_ModEnd> ) { i,1
139,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
140,<S2SV_ModStart> [ plane ] && in -> linesize [ plane ],1
141,"<S2SV_ModStart> ( szFileName, pszFileName, <S2SV_ModStart> ) - 5 <S2SV_ModEnd> ) ; }",1
142,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth, <S2SV_ModStart> ( auth, "":"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; } } if ( owner && * owner ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else { uid = userToID ( owner ) ; } } if ( group && * group ) { if ( snumber ( group ) ) { gid = ( int ) stoi ( group ) ; } else { gid = groupToID ( group ) ; } <S2SV_ModEnd> } if (",0
143,"<S2SV_ModStart> if ( q < p ) { DPRINTF ( ( ""Wrapped <S2SV_blank> around <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> %p\\n"", q, p ) ) ; goto out ; } if ( q",0
144,"<S2SV_ModStart> __be32 new_saddr ; struct ip_options_rcu * inet_opt ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. srr ) daddr = inet_opt -> opt. <S2SV_ModEnd> faddr ; rt",1
145,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
146,"<S2SV_ModStart> return ; } if ( len < sizeof ( struct eigrp_common_header ) ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> %s, <S2SV_blank> length: <S2SV_blank> %u <S2SV_blank> (too <S2SV_blank> short, <S2SV_blank> < <S2SV_blank> %u)"", tok2str ( eigrp_opcode_values, ""unknown <S2SV_blank> (%u)"", eigrp_com_header -> opcode ), len, ( u_int ) sizeof ( struct eigrp_common_header ) ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( eigrp_tlv_len < sizeof ( struct eigrp_tlv_header ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short, <S2SV_blank> < <S2SV_blank> %u)"", ( u_int ) sizeof ( struct eigrp_tlv_header ) ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( tlv_tlen < sizeof ( * tlv_ptr. eigrp_tlv_general_parm ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short, <S2SV_blank> < <S2SV_blank> %u)"", ( u_int ) sizeof ( * tlv",0
147,"<S2SV_ModStart> = NULL ; size_t max_size = ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ; <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; max_size = ( size + align - 1 + ADDRESS_STORAGE_SIZE ) ; <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; if ( max_size > ( size + align - 1 + ADDRESS_STORAGE_SIZE ) ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Memory <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large.\\n"" ) ; ) }",0
148,"<S2SV_ModStart> int indexes = 0 ; long long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) + 1 <S2SV_ModStart> long long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) <S2SV_ModEnd> ] ; res <S2SV_ModStart>. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; }",0
149,"<S2SV_ModStart> ) ; } if ( ptr == NULL ) { rw_exit ( & sdvp -> sdev_contents ) ; return ( ENOENT ) ; } if ( ptr == NULL ) { rw_exit ( & sdvp -> sdev_contents ) ; devzvol_create_pool_dirs ( sdvp ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_NEXT, ptr ) ; rw_exit ( & sdvp -> sdev_contents ) ; } if ( ptr == NULL ) { rw_exit ( & sdvp -> sdev_contents ) ; devname_lookup_func ( sdvp, ""dsk"", & vp, cred, devzvol_create_dsk, SDEV_VATTR ) ; VN_RELE ( vp ) ; ( void ) devname_lookup_func ( sdvp, ""rdsk"", & vp, cred, devzvol_create_dsk, SDEV_VATTR ) ; VN_RELE ( vp ) ; rw_exit ( & sdvp -> sdev_contents ) ; devzvol_create_",0
150,<S2SV_ModStart> |= EXT4_EXT_MARK_UNINIT2 ; if ( flags & EXT4_GET_BLOCKS_CONVERT ) split_flag |= EXT4_EXT_DATA_VALID2 ;,1
151,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret <S2SV_ModEnd> ) goto out",0
152,"<S2SV_ModStart> HASH_DISABLED ; } else { return apr_psprintf ( cmd -> pool, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"", p1 <S2SV_ModEnd> ) ; }",0
153,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> & final ) ; rcu_read_unlock (",0
154,"<S2SV_ModStart> = 0.0 ; uint32 nstrips = 0, ntiles = 0 ; uint16 <S2SV_ModEnd> planar = 0 <S2SV_ModStart>! read_buff ) { if ( buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""loadImage"", ""Unable <S2SV_blank> to <S2SV_blank> allocate/reallocate <S2SV_blank> read <S2SV_blank> buffer"" ) ; return ( - 1 ) ; } <S2SV_ModStart> buffsize ) ; if ( buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""loadImage"", ""Unable <S2SV_blank> to <S2SV_blank> allocate/reallocate <S2SV_blank> read <S2SV_blank> buffer"" ) ; return ( - 1 ) ; } <S2SV_ModStart> 3 ) { if ( buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""loadImage"", ""Unable <S2SV_blank> to <S2SV_blank> allocate/reallocate <S2SV_blank> read <S2SV_blank> buffer"" ) ; return ( - 1 ) ; } <S2SV_ModStart> 3 ) ; } <S2SV_ModStart> 3 ) { if ( buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""loadImage"", ""Unable <S2SV_blank> to <S2SV_blank> allocate/reallocate <S2SV_blank> read <S2SV_blank> buffer"" ) ; return ( - 1 ) ; } <S2SV_ModStart> 3 ) ; }",0
155,"<S2SV_ModStart> = 0 ; int i ; <S2SV_ModStart> else if ( <S2SV_ModEnd> arg_match ( & <S2SV_ModStart>, & use_ivf, argi ) ) { config -> use_ivf = 1 ; } else if ( arg_match ( & arg, & profile, argi ) ) { config -> cfg. g_profile = arg. val ; } else if ( arg_match ( & arg, & width, argi ) ) { config -> cfg. g_w = arg. val ; } else { config -> cfg. g_w = arg. val ; } else if ( arg_match ( & arg, & use_ivf, argi ) ) { config -> use_ivf = arg. val ; } else if ( arg_match ( & arg, & profile, argi ) ) { config -> cfg. g_profile = arg. val ; } else if ( arg_match ( & arg, & profile, argi ) ) { config -> cfg. g_profile = arg. val ; } else if ( arg_match ( & arg, & width, argi ) ) { config -> cfg. g_w = arg. val ; } else if ( arg_match ( & arg, &",0
156,<S2SV_ModStart> options. disable_forwarding ||! use_privsep,1
157,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
158,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
159,"<S2SV_ModStart> errout ; } <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart>. value = ( void * ) kmalloc ( sizeof ( gss_union_ctx_id_desc ), GFP_KERNEL ) ; if ( gr -> gr_ctx. value == NULL ) { gr -> gr_ctx. value = NULL ; <S2SV_ModEnd> goto errout ; <S2SV_ModStart>. value = ( void * ) kmalloc ( sizeof ( gss_union_ctx_id_desc ), GFP_KERNEL ) ; } <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart>. value = ( void * ) kmalloc ( sizeof ( gss_union_ctx_id_desc ), GFP_KERNEL ) ; if ( gr -> gr_ctx. value == NULL ) { gr -> gr_ctx. value = NULL ; gr -> gr_ctx. value = ( void * ) kmalloc ( sizeof ( gss_union_ctx_id_desc ), GFP_KERNEL ) ; <S2SV_ModEnd> goto errout ; <S2SV_ModStart> errout ; } <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart>. value = ( void * ) kmalloc ( sizeof ( gss_union_ctx_id_desc ) ) ;",0
160,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> out ; } ext_size = sizeof ( EXT4_I ( inode ) -> i_data ) ; <S2SV_ModStart> -> i_data, ext_size ) ; memset ( bh -> b_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size <S2SV_ModEnd> ) ; neh",1
161,"<S2SV_ModStart> } if ( preverify_ok <S2SV_ModEnd> ) { SSL_SESSION <S2SV_ModStart>, index_session_authenticated, sizeof ( * sess ) <S2SV_ModEnd> ) ; SSL_SESSION_free <S2SV_ModStart> 1 ; } <S2SV_ModEnd> return 0 ;",0
162,<S2SV_ModStart> ; int ret ; if ( current_chrooted ( ) ) return - EPERM,1
163,"<S2SV_ModStart> ; if ( data_length < AT91_AES_BLOCK_SIZE_BYTE ) goto exit ; if ( memcmp ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE",0
164,"<S2SV_ModStart> c -> nreslevels < <S2SV_ModEnd> s -> reduction_factor <S2SV_ModStart> -> reduction_factor ) { avpriv_request_sample ( s -> avctx, ""cblk <S2SV_blank> size <S2SV_blank> > <S2SV_blank> 64"" ) ; return AVERROR_PATCHWELCOME ; } <S2SV_ModEnd> c -> nreslevels2decode <S2SV_ModStart> -> reduction_factor ) { avpriv_request_sample ( s -> avctx, ""cblk <S2SV_blank> size <S2SV_blank> > <S2SV_blank> 64"" ) ; return AVERROR_PATCHWELCOME ; } <S2SV_ModEnd> c -> log2_cblk_width <S2SV_ModStart> 6 ) { avpriv_request_sample ( s -> avctx, ""cblk <S2SV_blank> size <S2SV_blank> > <S2SV_blank> 64"" ) ; return AVERROR_PATCHWELCOME ; } c -> log2_cblk_height = ( bytestream2_get_byteu ( & s -> g ) & 15 ) + 2 ; if ( c -> log2_cblk_width > 6 || c -> log2_cblk_height > 6 ) { avpriv_request_sample ( s -> avctx, ""cblk <S2SV_blank> size <S2SV_blank> > <S2SV_blank> 64"" ) ; return AVERROR_PATCH",0
165,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
166,<S2SV_ModStart> ; bool is_drop_n_account = false ; bool do_vnet <S2SV_ModStart> ; do_vnet = false <S2SV_ModEnd> ; if (,0
167,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> sctp_auth_asoc_init_active_key ( asoc,1
168,<S2SV_ModStart> return false ; if ( ndp_msg_type_info ( msg_type ) -> addrto_validate ) return ndp_msg_type_info ( msg_type ) -> addrto_validate ( & msg -> addrto ) ; else,1
169,"<S2SV_ModStart> int on_exec, int lsm_labelfd <S2SV_ModEnd> ) { int <S2SV_ModStart> = - 1 <S2SV_ModEnd> ; const char <S2SV_ModStart> == 0 ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> apparmor <S2SV_blank> profile"" ) ; <S2SV_ModEnd> goto out ; <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> apparmor <S2SV_blank> profile"" ) ; <S2SV_ModEnd> goto out ; <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> apparmor <S2SV_blank> profile"" ) ; <S2SV_ModEnd> goto out ; <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> apparmor <S2SV_blank> profile"" ) ; <S2SV_ModEnd> goto out ; <S2SV_ModStart> { SYSERROR ( ""Unable <S2SV_blank> to <S2SV_blank> set <S2SV_blank> LSM <S2SV_blank> label"" ) ; goto out ; } if ( write ( labelfd, lsm_label, strlen ( lsm_label ) + 1 ) < 0 ) { SYSERROR ( ""Unable <S2SV_blank> to <S2SV_blank> set <S2SV_blank> LSM <S2SV_blank> label: <S2SV_blank> %s"", lsm_label ) ; ret = - 1 ; goto out ; } } else if ( strcmp ( name, ""SELinux"" ) == 0 ) { if ( write ( labelfd, lsm",0
170,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
171,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
172,<S2SV_ModStart> cpi ) { TWO_PASS <S2SV_ModEnd> bits_used = cpi <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
173,"<S2SV_ModStart> } num ++ ; if ( num > MaxAllocSize / ITEMSIZE ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> levels <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", num, ( int ) ( MaxAllocSize / ITEMSIZE ) ) ) )",1
174,"<S2SV_ModStart> header, struct mb2_cache_entry <S2SV_ModEnd> * * pce <S2SV_ModStart> ) ; struct mb2_cache_entry * ce ; struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache = <S2SV_ModStart> hash ) ; ce = mb2_cache_entry_find_first <S2SV_ModEnd> ( ext4_mb_cache, <S2SV_ModStart> ( ext4_mb_cache, <S2SV_ModEnd> hash ) ; <S2SV_ModStart> * bh ; <S2SV_ModEnd> bh = sb_bread <S2SV_ModStart> ; ce = mb2_cache_entry_find_next ( ext4_mb_cache, ce <S2SV_ModEnd> ) ; }",1
175,"<S2SV_ModStart> { gint64 offset <S2SV_ModEnd> ; char line <S2SV_ModStart> = offset ; return parse_cosine_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart> -> phdr, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart> wth -> frame_buffer, line",1
176,<S2SV_ModStart> = line_end ; <S2SV_ModEnd> error = add_push_report_pkt,1
177,<S2SV_ModStart> if ( left == 0 && extend ) return 0 ; if ( left,1
178,"<S2SV_ModStart> { # ifndef _MSC_VER char * buf = grub_malloc ( <S2SV_ModEnd> EXT2_BLOCK_SIZE ( data <S2SV_ModStart> ( data ) ) ; # else char * buf = grub_malloc ( <S2SV_ModEnd> EXT2_BLOCK_SIZE ( data <S2SV_ModStart> ]. len ) ) ; if (! buf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } <S2SV_ModEnd> ext = ( <S2SV_ModStart>. start ) ; if ( fileblock >= grub_le_to_cpu16 ( ext [ i ]. len ) ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return 0 ; } else { grub_disk_addr_t start ; start = ( grub_le_to_cpu32 ( ext [ i ]. start ) << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start ) ; if ( fileblock < grub_le_to_cpu32 ( ext [ i ]. start_hi ) ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" )",0
179,"<S2SV_ModStart> ) / 3 ) ThrowReaderException ( CorruptImageError, ""InvalidColormapIndex"" ) ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries",0
180,"<S2SV_ModStart> - ENOMEM ; * ( ( struct vbg_ioctl_hdr * ) buf ) = hdr ; <S2SV_ModStart> copy_from_user ( buf + sizeof ( hdr ) <S2SV_ModStart> * ) arg + sizeof ( hdr ), hdr. size_in - sizeof ( hdr ) <S2SV_ModEnd> ) ) {",1
181,"<S2SV_ModStart> int m ; jpc_fix_t * buf2 ; int <S2SV_ModStart> 2 ) { buf2 = jas_alloc2 ( bufsize, sizeof ( jpc_fix_t ) ) ; if (! buf2 ) { abort ( ) ; } hstartcol = ( numrows + 1 - parity ) >> 1 ; n = m ; dstptr = buf ; srcptr = & a [ hstartcol * stride ] ; n = m ; dstptr = buf ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr += stride ; srcptr += stride << 1 ; } n = m ; dstptr = buf ; srcptr = & a [ hstartcol * stride ] ; n = m ; dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n",0
182,"<S2SV_ModStart> ""UnableToReadImageData"" ) ; bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart> ""UnableToReadImageData"" ) ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( height > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ;",0
183,"<S2SV_ModStart> EOFOp 0x07 # define MagickMemoryType 0x08 <S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
184,<S2SV_ModStart> DQUOT_LIMITS_ENABLED ) ; if ( sbi -> s_mb_cache ) { ext2_xattr_destroy_cache ( sbi -> s_mb_cache ) ; sbi -> s_mb_cache = NULL ; } <S2SV_ModEnd> if (!,1
185,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - EINVAL ; goto err_free_urbinfo ; } <S2SV_ModStart> desc. bInterval ; dev_dbg ( & usbinterface -> dev, ""gtco <S2SV_blank> # <S2SV_blank> interfaces: <S2SV_blank> <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> <S2SV_blank> <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> <S2SV_blank> <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; <S2SV_ModStart> hid_desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - EINVAL ; goto err_free_urbinfo ; }",0
186,"<S2SV_ModStart> ""setregid"" ) ; <S2SV_ModEnd> char * arg <S2SV_ModStart> 0 ] = ""/bin/sh"" <S2SV_ModEnd> ; arg [",1
187,<S2SV_ModStart> node ) { if ( node -> nd_item. ci_parent ) <S2SV_ModStart> ci_parent ) ; else return NULL ;,1
188,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
189,<S2SV_ModStart> ( pb ) ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA,1
190,"<S2SV_ModStart> if ( q < p ) { DPRINTF ( ( ""Wrapped <S2SV_blank> around <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> %p\\n"", q, p ) ) ; goto out ; } if ( q",0
191,<S2SV_ModStart> protostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> cryptostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> timingstats ) ; <S2SV_ModEnd> step_callback = &,1
192,"<S2SV_ModStart> char * dir <S2SV_ModEnd> = ""/etc"" ; <S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> tmpname, dir )",0
193,<S2SV_ModStart> prev ) ; n -> mounts += n -> pending_mounts ; n -> pending_mounts = 0 ;,1
194,"<S2SV_ModStart> ; savesegment ( fs, fsindex ) ; savesegment ( gs, gsindex ) ; load_TLS ( next, cpu ) ; arch_end_context_switch ( next_p ) ; savesegment ( <S2SV_ModStart> next -> ds <S2SV_ModEnd> ) ; if",1
195,<S2SV_ModStart> dd ) ; <S2SV_ModEnd> } } <S2SV_null>,1
196,<S2SV_ModStart> = value ; if ( ps_codec -> i4_pic_present_flag ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( ps_codec -> i4_pic_present_flag ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; },0
197,<S2SV_ModStart> 1u << DB_VECTOR ) | ( 1u << AC_VECTOR,1
198,"<S2SV_ModStart> sfsname ) { <S2SV_ModEnd> char temp [ <S2SV_ModStart> 1 ] ; u_int len2 ; temp [ NFSX_V3FHMAX + 1 ] = '\\0' ; len2 = strnlen ( sfsname, NFSX_V3FHMAX ) ; if ( len2 > sizeof ( temp ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> [%u]/"", temp ) ) ; goto trunc ; } <S2SV_ModStart>, sfsname, len2 <S2SV_ModEnd> ) ; temp <S2SV_ModStart> = '\\0' ; spacep = strchr ( temp,'<S2SV_blank>') ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %s/"", temp ) ) ; } else { ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", fsid. Fsid_dev ) ) ; } if ( ino > NFSX_V3FHMAX ) { ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> [%u]/"", temp ) ) ; } if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo,",0
199,"<S2SV_ModStart> unsigned int flags, struct ip_conn_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
200,<S2SV_ModStart> ( res ) goto err_add_port <S2SV_ModEnd> ; res = <S2SV_ModStart> port ) ; err_add_port : hsr_del_node ( & hsr -> self_node_db ) ;,1
201,"<S2SV_ModStart> endif if ( n >= ( cmdsize - 1 ) ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> n ] == '@' && n < ( cmdsize - 1 ) ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> n ] == '@' && n < ( cmdsize - 1 ) ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( cmdsize - 1 ) ) { addreply_noformat ( 500, ""?"" ) ; continue ; } <S2SV_ModStart> n ] == '@' && n < ( cmdsize - 1 ) ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; }",0
202,<S2SV_ModStart> void vp9_setup_dst_planes ( <S2SV_ModEnd> const MACROBLOCKD * <S2SV_ModStart> const buffers [ 3 <S2SV_ModEnd> ] = { <S2SV_ModStart> src -> v_buffer <S2SV_ModEnd> } ; const <S2SV_ModStart> int strides [ 3 <S2SV_ModEnd> ] = { <S2SV_ModStart> i ) { <S2SV_ModEnd> setup_pred_plane ( &,0
203,"<S2SV_ModStart> p ++ ) ; if (! xdr_decode_hyper ( p, & args -> offset ) ) return 0 ; <S2SV_ModStart> p ++ ) ; if (! args -> stable ) return 0",0
204,"<S2SV_ModStart> <S2SV_null> static inline int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> dst ) { return assign_eip_far ( ctxt, dst, ctxt -> mode == X86EMUL_MODE_PROT64 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",1
205,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
206,"<S2SV_ModStart> ; remaining = tvb_reported_length_remaining <S2SV_ModEnd> ( tvb,",1
207,<S2SV_ModStart> == READ ) { <S2SV_ModStart> = ocfs2_get_block ; } else { <S2SV_ModStart> = ocfs2_dio_get_block ; },0
208,<S2SV_ModStart> return rc ; <S2SV_ModEnd> copied = skb,1
209,"<S2SV_ModStart> ; if ( M_CompareExtension ( def [ 0 ], "".pk3"" ) ) { M_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", def [ 0 ] ) ; continue ; } if ( M_CompareExtension ( def [ 0 ], "".pk4"" ) ) { M_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", def [ 0 ] ) ; continue ; } if ( M_CompareExtension ( def [ 0 ], "".pk3"" ) ) { M_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", def [ 0 ] ) ; continue ; } if ( M_CompareExtension ( def [ 0 ], "".pk3"" ) ) ) { M_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", def [ 0 ] ) ; continue ; }",0
210,<S2SV_ModStart> ; if ( pmc_overflow ( val ) <S2SV_ModEnd> ) write_pmc (,1
211,"<S2SV_ModStart> ( * b + len, * avail - len <S2SV_ModEnd>, nl )",1
212,"<S2SV_ModStart> n ) { assert ( expr_start < expr_end ) ; <S2SV_ModStart> * o, * fstring_name <S2SV_ModEnd> ; Py_ssize_t len <S2SV_ModStart> expr_end - expr_start <S2SV_ModEnd> ; assert ( <S2SV_ModStart> == ':' ) ) { Py_DECREF ( o ) ; str = PyMem_RawMalloc ( 3 ) ; if ( str == NULL ) return NULL ; all_whitespace = 1 ; kind = PyUnicode_KIND ( o ) ; data = PyUnicode_DATA ( o ) ; for ( i = 0 ; i < len ; i ++ ) { if (! PyUnicode_ISSPACE ( PyUnicode_READ ( PyUnicode_KIND ( kind, data, i ) ) ) { Py_DECREF ( o ) ; str [ 0 ] = '(' ; memcpy ( str + 1, expr_start, len ) ; } } if ( all_whitespace ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } len = expr_end - expr_start ; fstring_name = PyUnicode_FromString ( ""<fstring>"" ) ; Py_DECREF ( fstring",0
213,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
214,<S2SV_ModStart> string ) { for ( ; c && c -> string ; c = c -> next ),0
215,"<S2SV_ModStart> == 0 ) mark_key_instantiated ( key, 0 <S2SV_ModEnd> ) ; up_write",1
216,<S2SV_ModStart> <= * len && plen > 0,1
217,<S2SV_ModStart> ; args. rmtvaluelen = valuelen ; args.,1
218,<S2SV_ModStart> ; if ( <S2SV_ModEnd> timeout == NULL <S2SV_ModStart> ; if ( compat_get_timespec <S2SV_ModEnd> ( & ktspec <S2SV_ModStart> > 0 && compat_put_timespec <S2SV_ModEnd> ( & ktspec,1
219,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart>. length ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ( length > GetBlobSize ( image ) ) ; if ( <S2SV_ModStart> ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( <S2SV_ModStart> ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ;",0
220,<S2SV_ModStart> ndev ) ; <S2SV_ModEnd> assert ( skb <S2SV_ModStart> q_num ) ; return <S2SV_ModEnd> hns_nic_net_xmit_hw ( ndev <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
221,<S2SV_ModStart> |= MSG_TRUNC ; <S2SV_ModEnd> lock_sock ( sk,1
222,<S2SV_ModStart> ; if ( <S2SV_ModEnd> udp_specified ) { <S2SV_ModStart> { if ( <S2SV_ModEnd> udp_specified ) { <S2SV_ModStart> } else { <S2SV_ModEnd> if ( tcp_specified <S2SV_ModStart> } else { <S2SV_ModEnd> if ( tcp_specified <S2SV_ModStart> } else { <S2SV_ModEnd> if ( tcp_specified <S2SV_ModStart> } else { <S2SV_ModEnd> if ( tcp_specified <S2SV_ModStart> } else { <S2SV_ModEnd> if ( tcp_specified <S2SV_ModStart> } else { <S2SV_ModEnd> if ( udp_specified <S2SV_ModStart> } } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
223,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
224,<S2SV_ModStart> size ) ; if (! px -> ft ) return FALSE ;,0
225,<S2SV_ModStart> found = 0 <S2SV_ModEnd> ; const char <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( found,1
226,"<S2SV_ModStart> int validate_event ( struct pmu * pmu, <S2SV_ModStart> arm_pmu * armpmu <S2SV_ModEnd> ; struct hw_perf_event <S2SV_ModStart> -> pmu!= pmu ) return 0 ; if ( event -> pmu!= <S2SV_ModStart> return 1 ; armpmu = to_arm_pmu ( event -> pmu ) ;",1
227,"<S2SV_ModStart> bool new_idmap_permitted ( const struct file * file, <S2SV_ModStart>, cap_setid ) && file_ns_capable ( file, ns -> parent, cap_setid )",1
228,<S2SV_ModStart> j ++ ) { if ( a -> type == szMAPI_BINARY ) <S2SV_ModStart> ) ; } },1
229,"<S2SV_ModStart> hx ; u8 * buf <S2SV_ModEnd> ; int ret <S2SV_ModStart> = 0 ; buf = kmalloc ( sizeof ( * hx ), GFP_KERNEL ) ; if (! buf ) return - ENOMEM ; hx = ( struct hexline * ) buf ; if ( <S2SV_ModEnd> usb_cypress_writemem ( udev <S2SV_ModStart> ( ret || usb_cypress_writemem ( udev, cypress [ type ]. cpu_cs_register, buf <S2SV_ModEnd>, 1 ) <S2SV_ModStart> ( ret || usb_cypress_writemem ( udev, cypress [ type ]. cpu_cs_register, buf <S2SV_ModEnd>, 1 ) <S2SV_ModStart> ; kfree ( buf <S2SV_ModEnd> ) ; return <S2SV_ModStart> 0 ) { buf [ 0 ] = 0 ; if ( <S2SV_ModEnd> usb_cypress_writemem ( udev <S2SV_ModStart> ( udev, <S2SV_ModEnd> cypress [ type <S2SV_ModStart> ]. cpu_cs_register, buf <S2SV_ModEnd>, 1 ) <S2SV_ModStart> ; kfree ( buf <S2SV_ModEnd> ) ; return",0
230,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 2 <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> ) ) ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 2 <S2SV_ModEnd> ; val_l = <S2SV_ModStart> ptr ) ; ptr ++ ; length -= 2 <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 2 <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> ) ) ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return",0
231,"<S2SV_ModStart> princ ) ; success = data_eq_string ( * realm, <S2SV_ModEnd> handle -> params <S2SV_ModStart> params. realm ) && data_eq_string ( * c1, ""kadmin"" ) && data_eq_string ( * c2, ""kadmin"" ) ; <S2SV_ModEnd> fail_princ : if",0
232,<S2SV_ModStart> ; if ( shader_rec_offset < args -> bin_cl_size ||,1
233,<S2SV_ModStart> endif # if HAVE_LZMA_H <S2SV_ModEnd> && HAVE_LIBLZMA if,1
234,<S2SV_ModStart> vma -> vm_file ) ; down_read ( & EXT4_I ( inode ) -> i_mmap_sem <S2SV_ModStart> ; out : up_read ( & EXT4_I ( inode ) -> i_mmap_sem ) ;,1
235,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
236,<S2SV_ModStart> arg ) { char ch = * arg ; switch ( ch <S2SV_ModEnd> ) { case <S2SV_ModStart> ';' : case '=' : case <S2SV_ModStart> b ++ = ch <S2SV_ModEnd> ; break ;,1
237,"<S2SV_ModStart> ( cp, ep2, map, nmap ) ; if ( cp == NULL ) { ND_PRINT ( ( ndo, ""\\n"" ) ) ; goto trunc ; } if <S2SV_ModStart> ( cp, ep2, map, nmap ) ; if ( cp == NULL ) { ND_PRINT ( ( ndo, ""\\n"" ) ) ; goto trunc ; } if <S2SV_ModStart> < ep2 ) <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ) ; if ( cp == NULL ) { ND_PRINT ( ( ndo, ""\\n"" ) ) ; goto trunc ; } if ( cp == NULL ) { ND_PRINT ( ( ndo, ""\\n"" ) ) ; goto trunc ; } if ( cp == NULL ) { ND_PRINT ( ( ndo, ""\\n"" ) ) ; goto trunc ; } } if ( cp == NULL ) { ND_PRINT ( ( ndo, ""\\n"" ) ) ; if ( cp == NULL ) { ND_PRINT ( ( ndo, ""\\n"" ) ) ; goto trunc ; } if ( cp == NULL ) { ND_PRINT ( ( ndo, ""\\n"" ) ) ; goto trunc ; }",0
238,"<S2SV_ModStart> } GsmIceConnectionData ; typedef struct { guint watch_id ; guint protocol_timeout ; } GsmIceConnectionWatch ; static void disconnect_ice_connection ( IceConn ice_conn ) { IceSetShutdownNegotiation ( ice_conn, FALSE ) ; IceCloseConnection <S2SV_ModEnd> ( ice_conn ) <S2SV_ModStart> ice_conn ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
239,<S2SV_ModStart> if ( ( skb_mac_header <S2SV_ModEnd> ( skb ) <S2SV_ModStart> skb ) < skb -> head +,1
240,"<S2SV_ModStart> void ) { test_checkout_fails ( ""refs/heads/git_tilde1"", "".git/foobar"" ) ; test_checkout_fails ( ""refs/heads/git_tilde1"", "".git/gh-pages"" ) ; <S2SV_ModStart> ""refs/heads/git_tilde1"", "".git/foobar"" ) ; test_checkout_fails ( ""refs/heads/git_tilde1"", "".git/gh-pages"" ) ;",0
241,<S2SV_ModStart>. val =!! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ; <S2SV_ModStart>. val =!! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ;,1
242,<S2SV_ModStart> & RCV_SHUTDOWN ) return 0 ; <S2SV_ModEnd> return err ; <S2SV_ModStart> msg_namelen ) ; <S2SV_ModEnd> } skb_free_datagram (,1
243,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
244,<S2SV_ModStart> const buffers [ 3 <S2SV_ModEnd> ] = { <S2SV_ModStart> src -> v_buffer <S2SV_ModEnd> } ; const <S2SV_ModStart> int strides [ 3 <S2SV_ModEnd> ] = { <S2SV_ModStart> src -> uv_stride <S2SV_ModEnd> } ; for,0
245,"<S2SV_ModStart>, j ; * md_out = NULL ; md = calloc ( 1, sizeof ( <S2SV_ModEnd> * md ) <S2SV_ModStart> goto cleanup ; ret = X509_NAME_oneline_ex <S2SV_ModEnd> ( X509_get_subject_name ( <S2SV_ModStart> cert ), & <S2SV_ModEnd> md -> subject_dn <S2SV_ModStart> md -> subject_dn ) ; if ( ret ) goto cleanup ; ret = X509_NAME_oneline_ex <S2SV_ModEnd> ( X509_get_issuer_name ( <S2SV_ModStart> cert ), & <S2SV_ModEnd> md -> issuer_dn <S2SV_ModStart> md -> issuer_dn ) ; if ( ret ) goto cleanup ; ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx, cert, & pkinit_sans, & upn_sans, NULL ) ; if ( ret ) goto cleanup ; ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx, cert, & pkinit_sans, & upn_sans, NULL <S2SV_ModEnd> ) ; if",0
246,<S2SV_ModStart> (! npages || base_gfn!= old. base_gfn,1
247,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ru,1
248,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; for (,1
249,"<S2SV_ModStart> * ni ; ND_TCHECK ( rp -> rip6_cmd <S2SV_ModEnd> ) ; register <S2SV_ModStart> case RIP6_REQUEST : ND_TCHECK2 ( rp -> rip6_nets ) ; <S2SV_ModStart> j == 1 ) goto trunc ; ND_TCHECK2 ( rp -> rip6_nets ) ; <S2SV_ModStart> j == 1 ) goto trunc <S2SV_ModEnd> ; if ( <S2SV_ModStart> break ; } ND_TCHECK2 ( rp -> rip6_nets ) ; if ( j * sizeof ( * ni )!= length - 4 ) ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %u[%u]:"", j, length ) ) ; else ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %u:"", j ) ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ), ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo, ""\\n\\t"" ) ) ; rip6_entry_print ( ndo, ni, 0 ) ; } break ; case RIP6_",0
250,<S2SV_ModStart> < 0 ) goto error ; <S2SV_ModEnd> goto set ;,1
251,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
252,"<S2SV_ModStart> argc ++ ; retval = bprm_change_interp ( iname, bprm ) ; if ( retval < 0 ) goto _error <S2SV_ModEnd> ; interp_file =",1
253,<S2SV_ModStart> ; int iSrc <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; } } <S2SV_ModEnd> res -> ContribRow <S2SV_ModStart> u ]. Left = iLeft ; res -> ContribRow [ u ]. Right = iRight ; for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ].,1
254,<S2SV_ModStart> ( user ) ; cleanup_srcu_struct ( & user -> release_barrier ) ;,0
255,"<S2SV_ModStart> Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; return ; } if (! COM_CompareExtension ( filename, "".cfg"" ) ) { Com_Printf ( ""Com_WriteConfig_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".cfg\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n""",1
256,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen <S2SV_ModStart> + 1 ; size_t <S2SV_ModEnd> limit = 0,0
257,"<S2SV_ModStart> & tee_mm_sec_ddr ) ; if ( IS_ERR ( mobj ) ) { if ( IS_ERR ( mobj ) ) { <S2SV_ModEnd> memset ( mobj_get_va <S2SV_ModStart> 0, size ) ; return NULL ; } } <S2SV_ModEnd> return mobj ;",0
258,<S2SV_ModStart> -> it_overrun += 1LL <S2SV_ModEnd> << i ;,1
259,<S2SV_ModStart> * for_ch ; bool is_async ; int is_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
260,"<S2SV_ModStart> = NULL ; } if ( src -> speculative ) { for ( i = 0 ; i <= src -> curframe + 1 ; i <= dst_state -> curframe + 1 ; i ++ ) { if (! dst_state -> frame [ i ] ) { kfree ( dst_state -> frame [ i ] ) ; return - ENOMEM ; } } dst_state -> curframe = src -> curframe ; } for ( i = 0 ; i <= src -> curframe + 1 ; i <= dst_state -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) return - ENOMEM ; dst_state -> frame [ i ] = dst ; } } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe + 1 ; i <= dst_state -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) return - ENOMEM ; dst_state -> frame [ i ] = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; dst_state -> frame [ i ] = dst",0
261,"<S2SV_ModStart> void write_mb_modes_kf ( const VP9_COMMON * cm, const MACROBLOCKD * xd, const MODE_INFO * * mi <S2SV_ModEnd>, vpx_writer * <S2SV_ModStart> w ) { const MODE_INFO * const above_mi = xd -> above_mi ; const MODE_INFO * const left_mi = xd -> left_mi <S2SV_ModEnd> ; const MB_MODE_INFO <S2SV_ModStart> -> segment_id ) ; write_skip <S2SV_ModEnd> ( cpi, <S2SV_ModStart> tx_size, bsize,",0
262,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; saddr,1
263,"<S2SV_ModStart> } } DPRINTF ( ""Data <S2SV_blank> ready <S2SV_blank> tag=0x%x <S2SV_blank> len=%zd\\n"" <S2SV_ModEnd>, r -> <S2SV_ModStart> = r -> qiov. size <S2SV_ModEnd> / 512 ; <S2SV_ModStart> -> req, r -> qiov. size <S2SV_ModEnd> ) ; }",0
264,<S2SV_ModStart> if ( cs >= <S2SV_ModEnd> CQSPI_MAX_CHIPSELECT ) {,1
265,"<S2SV_ModStart> { if ( n >= <S2SV_ModEnd> maxn ) SWF_error <S2SV_ModStart> maxn ) SWF_error ( ""Action <S2SV_blank> overflow!!"" ) ; <S2SV_ModStart> n ]. SWF_ACTIONRECORD. ActionCode ) { case SWFACTION_END : return 0 ; case SWFACTION_CONSTANTPOOL : decompileCONSTANTPOOL ( & actions [ n ] ) ; return 0 ; case SWFACTION_GOTOFRAME : decompileGOTOFRAME ( n, actions, maxn, 1 ) ; case SWFACTION_GOTOFRAME2 : decompileGOTOFRAME2 ( n, actions, maxn, 0 ) ; case SWFACTION_GETURL2 : decompileGETURL2 ( & actions [ n ] ) ; return 0 ; case SWFACTION_PUSHDUP : decompilePUSHDUP ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETPROPERTY : decompileGETPROPERTY ( n, actions, maxn ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n, actions, maxn ) ; return 0 ; case SWFACTION_TRACE : decompileTRACE ( n, actions, maxn )",0
266,<S2SV_ModStart> ) break ; if ( l > ll ) l = ll ;,1
267,<S2SV_ModStart> out ; } } if ( free < 0 ) { err = - ENOMEM ; goto out ;,1
268,<S2SV_ModStart> < sizeof ( struct pgstate <S2SV_ModEnd> ) ) { <S2SV_ModStart> 1 ) ; } ND_TCHECK_32BITS ( & prep -> pp_n ) ;,0
269,<S2SV_ModStart> ; rq -> skip_clock_update = 1 <S2SV_ModEnd> ; prev ->,0
270,"<S2SV_ModStart> ret ; uint8_t * buffer ; uint8_t value ; buffer = kmalloc ( 1, GFP_KERNEL ) ; if (! buffer ) return - ENOMEM <S2SV_ModEnd> ; dev_dbg ( <S2SV_ModStart>, reg, buffer <S2SV_ModEnd>, 1, <S2SV_ModStart> 1000 ) ; if ( <S2SV_ModEnd> ret >= 0 <S2SV_ModStart> ret >= 0 ) { value = buffer [ 0 ] ; kfree ( buffer ) ; return value ; } else { kfree ( buffer ) ; return <S2SV_ModEnd> ret ; } <S2SV_ModStart> ret ; } }",1
271,<S2SV_ModStart> <S2SV_null> <S2SV_null> static sqlite3_int64 <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> * ) * <S2SV_ModEnd> 2 + pTable <S2SV_ModStart> pTable -> nModuleArg <S2SV_ModEnd> ; char *,0
272,"<S2SV_ModStart> ; } } s -> append_char ( s, 0 ) ;",0
273,"<S2SV_ModStart> ) ) { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATES, ""No <S2SV_blank> adaptation <S2SV_blank> state <S2SV_blank> for <S2SV_blank> device <S2SV_blank> profile"" ) ; goto Error ; } <S2SV_ModStart> ) ) { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATES, ""No <S2SV_blank> adaptation <S2SV_blank> state <S2SV_blank> for <S2SV_blank> device <S2SV_blank> profile"" ) ; goto Error ; } } else { if ( <S2SV_ModStart> ) ) { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATES, ""No <S2SV_blank> adaptation <S2SV_blank> state <S2SV_blank> for <S2SV_blank> device <S2SV_blank> profile"" ) ; goto Error ; } <S2SV_ModStart> ) ) { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATES, ""No <S2SV_blank> adaptation <S2SV_blank> state <S2SV_blank> for <S2SV_blank> device <S2SV_blank> profile"" ) ; goto Error ; } } } else { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATES, ""No <S2SV_blank> adaptation <S2SV_blank> state <S2SV_blank> for <S2SV_blank> device <S2SV_blank> profile""",0
274,<S2SV_ModStart> = 0 ; ( i + 3 ) <S2SV_ModEnd> < sec -> <S2SV_ModStart> = 0 ; ( i + 7 ) <S2SV_ModEnd> < sec ->,1
275,"<S2SV_ModStart> case ISIS_SUBTLV_EXT_IS_REACH_BW_WIDTH : if ( subl == 0 ) break ; <S2SV_ModStart> case ISIS_SUBTLV_EXT_IS_REACH_BW_HEIGHT : if ( subl == 8 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; else ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; <S2SV_ModStart> case ISIS_SUBTLV_EXT_IS_REACH_BW_HEIGHT : if ( subl == 8 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr + 4 ) ) ) ; else if ( subl == 0 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; else ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ;",0
276,<S2SV_ModStart> + 1 ; if ( ptr_hbe_txposer -> <S2SV_ModStart> + 1 ; if ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ]!= 0 ) { ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ] = 0 ; } <S2SV_ModStart> + 1 ; if ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ]!= 0 ) { ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ] = 0 ; },0
277,"<S2SV_ModStart> < q ) { if ( p - str < reg -> dmax ) { * low = ( UChar * ) str ; if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; } else { <S2SV_ModStart> low ) ; } <S2SV_ModStart> ONIG_INFINITE_DISTANCE ) { if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; } else { <S2SV_ModStart> low ) ; } <S2SV_ModStart> ONIG_INFINITE_DISTANCE ) { if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; } else { <S2SV_ModStart> ONIG_INFINITE_DISTANCE ) { if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; } else { <S2SV_ModStart> low ) ; }",0
278,"<S2SV_ModStart> bfq_idle_slice_timer_body ( struct bfq_data * bfqd, <S2SV_ModStart> bfqq ) { <S2SV_ModEnd> spin_lock_irqsave ( & <S2SV_ModStart> flags ) ; if (! bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_queued [ 0 ] == 0 && bfq_bfqq_queued [ 1 ] == 0 ) reason = BFQQE_TOO_IDLE ; else reason = BFQQE_TOO_IDLE ;",0
279,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
280,"<S2SV_ModStart> ) continue ; if ( vif -> tx. req_cons >= XEN_NETIF_TX_RING_SIZE ) { netdev_err ( vif -> dev, ""Impossible <S2SV_blank> number <S2SV_blank> of <S2SV_blank> requests. <S2SV_blank> req_cons <S2SV_blank> %d, <S2SV_blank> size <S2SV_blank> %ld\\n"", vif -> tx. req_cons, XEN_NETIF_TX_RING_SIZE ) ; netbk_fatal_tx_err ( vif ) ; continue ; } <S2SV_ModStart> 0 ) ) { netdev_err ( vif -> dev, ""Impossible <S2SV_blank> number <S2SV_blank> of <S2SV_blank> requests. <S2SV_blank> req_cons <S2SV_blank> %d, <S2SV_blank> size <S2SV_blank> %ld\\n"", XEN_NETIF_TX_RING_SIZE, vif -> tx. req_cons, XEN_NETIF_TX_RING_SIZE ) ; netbk_fatal_tx_err ( vif ) ; continue ; } <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> size ) ) { netdev_err ( vif -> dev, ""Impossible <S2SV_blank> number <S2SV_blank> of <S2SV_blank> requests. <S2SV_blank> req_cons <S2SV_blank> %d, <S2SV_blank> size <S2SV_blank> %ld\\n"", XEN_NETIF_TX",0
281,"<S2SV_ModStart> endif if ( n >= ( cmdsize - 1 ) ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> n ] == '@' && n < ( cmdsize - 1 ) ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> n ] == '@' && n < ( cmdsize - 1 ) ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( cmdsize - 1 ) ) { addreply_noformat ( 500, ""?"" ) ; continue ; } <S2SV_ModStart> n ] == '@' && n < ( cmdsize - 1 ) ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; }",0
282,<S2SV_ModStart> xfrm_policy_walk * ) <S2SV_ModEnd> cb -> args,0
283,<S2SV_ModStart> conn ) ; if ( <S2SV_ModStart> ( conn )!= 0 ) return,1
284,"<S2SV_ModStart> ) ; struct <S2SV_ModEnd> skb_shared_info * shinfo <S2SV_ModStart> err ) ) xen_netbk_idx_release ( netbk, pending_idx <S2SV_ModEnd>, XEN_NETIF_RSP_ERROR ) <S2SV_ModStart> XEN_NETIF_RSP_ERROR ) ; <S2SV_ModEnd> start = ( <S2SV_ModStart>, newerr ; <S2SV_ModEnd> pending_idx = frag_get_pending_idx <S2SV_ModStart> netbk, pending_idx, XEN_NETIF_RSP_OKAY <S2SV_ModStart> continue ; } xen_netbk_idx_release ( netbk, pending_idx <S2SV_ModEnd>, XEN_NETIF_RSP_ERROR ) <S2SV_ModStart> XEN_NETIF_RSP_ERROR ) ; <S2SV_ModEnd> if ( err <S2SV_ModStart> netbk, pending_idx, XEN_NETIF_RSP_OKAY <S2SV_ModStart> netbk, pending_idx, XEN_NETIF_RSP_OKAY",1
285,,1
286,"<S2SV_ModStart> ""MemoryAllocationFailed"" ) ; scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> NULL ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> NULL ) { scanline = ( unsigned char * ) Relinquish",0
287,"<S2SV_ModStart> 1 ) { struct sockaddr * addr_p = ( struct sockaddr * ) & addr ; socklen_t addr_l = sizeof ( addr ) ; <S2SV_ModStart> 1 ) { struct sockaddr * addr_p = ( struct sockaddr * ) & addr ; socklen_t addr_l = sizeof ( addr ) ; <S2SV_ModStart> len < 0 || addr. nl_pid <S2SV_ModStart> ( LOG_ERR, ""bind <S2SV_blank> failed; <S2SV_blank> pid:%u <S2SV_blank> error:%d"", addr. nl_pid, error ) ; close ( fd ) ; exit ( EXIT_FAILURE ) ; } addr_p = ( struct sockaddr * ) & addr ; socklen_t addr_l = sizeof ( addr ) ; addr. nl_pid = 0 ; addr. nl_groups = 0 ; socklen_t addr_l = sizeof ( addr ) ; error = bind ( fd, ( struct sockaddr * ) & addr, sizeof ( addr ) ) ; if ( error < 0 ) { syslog ( LOG_ERR, ""bind <S2SV_blank> failed; <S2SV_blank> pid:%u <S2SV_blank> error:%d"", addr. nl_pid, error ) ; close ( fd ) ; exit ( EXIT_FAILURE ) ; } addr. nl_pid = 0",0
288,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
289,<S2SV_ModStart> ipc == NULL && client -> session == NULL,1
290,"<S2SV_ModStart> > newDataLength || diffPtr + x <S2SV_ModStart> > diffBlock + diffBlockLength || extraPtr + y <S2SV_ModStart> NULL ; } if ( diffPtr + x + diffBlockLength + y > diffBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } <S2SV_ModStart>, x ) ; if ( diffPtr + x + diffBlockLength + y > diffBlock + diffBlockLength + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } <S2SV_ModStart>, x ) ; if ( diffPtr + x + diffBlockLength + y > diffBlock + diffBlockLength + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; }",0
291,"<S2SV_ModStart>, nameptr, lfi, fname, UDF_NAME_LEN <S2SV_ModEnd> ) ; if",1
292,"<S2SV_ModStart> ip_vs_timeout_user t ; memset ( & t, 0, sizeof ( t ) ) ;",1
293,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart>, fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
294,<S2SV_ModStart> ; ssize_t result ; if ( WARN_ON_ONCE (! ib_safe_file_access ( filp ) ) ) return - EACCES,1
295,"<S2SV_ModStart>, * controller, * next = NULL <S2SV_ModStart> if (! caller_is_in_ancestor ( fc -> pid, controller, path1, & next <S2SV_ModEnd> ) ) { <S2SV_ModStart> ) ) { if ( fpath && strcmp ( next, fpath ) == 0 ) ret = - EEXIST ; else ret = - ENOENT <S2SV_ModEnd> ; goto out <S2SV_ModStart> if (! fc_may_access ( fc, controller, path1, NULL, O_RDWR ) ) { ret = - EACCES ; goto out ; } if (! <S2SV_ModStart> cgdir ) ; free ( next ) ;",1
296,<S2SV_ModStart> ) ) { put_disk ( disk ) ;,1
297,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
298,"<S2SV_ModStart> == VFF_TYP_BIT ) { if ( CheckMemoryOverflow <S2SV_ModEnd> ( ( image <S2SV_ModStart> ) >> 3UL, <S2SV_ModEnd> image -> rows <S2SV_ModStart> image -> rows )!= MagickFalse ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" ) ; max_packets = ( ( image -> columns + 7UL ) >> 3UL ) * image -> rows ; } else { if ( CheckMemoryOverflow ( number_pixels, viff_info. number_data_bands )!= MagickFalse ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" ) ; <S2SV_ModEnd> max_packets = ( <S2SV_ModStart> number_data_bands ) ; }",0
299,<S2SV_ModStart> ) pktnum ; if ( avio_feof ( s -> pb ) ) { return AVERROR_INVALIDDATA ; },0
300,<S2SV_ModStart> ; rinfo = kzalloc <S2SV_ModEnd> ( SZ_SG_REQ_INFO *,1
301,"<S2SV_ModStart> ; # endif install_keyword ( ""umask"", & umask_handler ) ;",1
302,<S2SV_ModStart> data ) { ( void ) data ;,0
303,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> kfree ( tmpbuf,1
304,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; }",1
305,"<S2SV_ModStart> ( box = jp2_box_create0 ( ) ) ) { goto error ; } <S2SV_ModEnd> if ( jp2_getuint32 <S2SV_ModStart> 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, \'""\', <S2SV_ModStart> 1 ) { JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"",",0
306,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
307,"<S2SV_ModStart> ; int copylen = 0 <S2SV_ModStart> goto err ; err = - EMSGSIZE ; if ( unlikely ( count > MAX_SKB_FRAGS ) ) goto err ; <S2SV_ModStart> zerocopy ) { if ( count > MAX_SKB_FRAGS ) { copylen = iov_length ( iv, count - MAX_SKB_FRAGS ) ; if ( copylen < vnet_hdr_len ) copylen = 0 ; else copylen -= vnet_hdr_len ; } if ( copylen < vnet_hdr. hdr_len <S2SV_ModEnd> ) copylen =",0
308,<S2SV_ModStart> nexthdr ) { unsigned int <S2SV_ModEnd> offset = sizeof <S2SV_ModStart> while ( offset <S2SV_ModEnd> <= packet_len ) <S2SV_ModStart> packet_len ) { struct ipv6_opt_hdr * exthdr ; <S2SV_ModStart> offset ; } exthdr = ( struct ipv6_opt_hdr * ) ( skb_network_header ( skb ) + offset ) ; <S2SV_ModStart> -> nexthdr ; } return - EINVAL <S2SV_ModEnd> ; } <S2SV_null>,0
309,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
310,"<S2SV_ModStart> ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { <S2SV_ModStart> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; } else { # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; } else { <S2SV_ModStart> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; } } else { # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias )",0
311,"<S2SV_ModStart> msg -> msg_name ) { copy_from_user ( msg -> msg_name, & sll, sizeof ( * sll ) ) ; <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> msg -> msg_name ) { copy_from_user ( msg -> msg_name, & sll, sizeof ( * sll ) ) ; } else { copy_from_user ( msg -> msg_name, & sll, sizeof ( * sll ) ) ; } <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> msg -> msg_name <S2SV_ModEnd> ) ; }",0
312,<S2SV_ModStart> } if ( <S2SV_ModEnd> djrcv_dev -> paired_dj_devices,1
313,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
314,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
315,"<S2SV_ModStart> asconf ) { sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) asconf -> chunk_hdr ; bool all_param_pass = true ; union sctp_params param ; <S2SV_ModStart> __u32 serial ; <S2SV_ModEnd> chunk_len = ntohs <S2SV_ModStart> goto done ; sctp_walk_params ( param, addip, addip_hdr. params ) { if ( param. p -> type == SCTP_PARAM_IPV4_ADDRESS || param. p -> type == SCTP_PARAM_IPV6_ADDRESS ) continue ; <S2SV_ModEnd> err_code = sctp_process_asconf_param <S2SV_ModStart>, asconf, param. addip ) ; if ( err_code!= SCTP_ERROR_NO_ERROR <S2SV_ModEnd> ) all_param_pass = <S2SV_ModStart> ) all_param_pass = false <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( asconf_ack, param. addip <S2SV_ModEnd> -> crr_id, <S2SV_ModStart> -> crr_id, err_code, param. addip ) ; if ( err_code == SCTP_ERROR_RSRC_LOW <S2SV_ModEnd> ) goto done <S2SV_ModStart> goto done ; <S2SV_ModEnd> } done",1
316,"<S2SV_ModStart> 101, ( ""jas_realloc(%x, <S2SV_blank> %zu)\\n"" <S2SV_ModEnd>, ptr,",1
317,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
318,<S2SV_ModStart> break ; # ifdef CONFIG_PPC_BOOK3S_64 case KVM_CAP_SPAPR_TCE_64 : case KVM_CAP_SPAPR_TCE_VFIO : case KVM_CAP_SPAPR_VFIO_64 : case KVM_CAP_SPAPR_VFIO_64 : r =! hv_enabled ; break ; # endif,0
319,<S2SV_ModStart> msicap ; if ( msgnum < sizeof ( struct msicap ) ) return - EINVAL,0
320,"<S2SV_ModStart> key_name ), UTF16_HOST_ENDIAN, <S2SV_ModStart> data. key, HV_KVP_EXCHANGE_MAX_KEY_SIZE / 2 <S2SV_ModStart> value ), UTF16_HOST_ENDIAN, <S2SV_ModStart> data. value, HV_KVP_EXCHANGE_MAX_VALUE_SIZE / 2",1
321,<S2SV_ModStart> = d -> log_ctx ; mutex_lock ( & d -> mutex ) ; <S2SV_ModStart> -> log_ctx ; mutex_unlock ( & d -> mutex ) ;,0
322,<S2SV_ModStart> return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
323,"<S2SV_ModStart> * parg = ( void * ) arg ; long err = - EINVAL ; size_t mem_size = 0 ; void __user * user_ptr = NULL ; if ( _IOC_DIR ( cmd ) == _IOC_NONE ) return - EINVAL ; if ( _IOC_SIZE ( cmd ) <= sizeof ( sbuf ) ) { parg = sbuf ; } else { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) return - ENOMEM ; parg = mbuf ; } err = - EFAULT ; if ( _IOC_DIR ( cmd ) & _IOC_WRITE ) { mem_size = sizeof ( struct v4l2_ext_control ) * p -> count ; mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) return - ENOMEM ; parg = mbuf ; } err = - EFAULT ; if ( _IOC_DIR ( cmd ) & _IOC_WRITE ) { mem_size = sizeof ( struct v4l2_ext",0
324,"<S2SV_ModStart> } if ( cmd -> flags & REDIS_CMD_SINGLE ) { addReplyError ( c, ""only <S2SV_blank> (P)JOIN <S2SV_blank> / <S2SV_blank> (P)UNSUBSCRIBE <S2SV_blank> / <S2SV_blank> QUIT <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> this <S2SV_blank> context"" ) ; return REDIS_OK ; }",0
325,"<S2SV_ModStart> u16 size, const <S2SV_ModStart> data ) { void * buf ; int ret ; buf = kmemdup ( data, size, GFP_NOIO ) ; if (! buf ) return - ENOMEM ; ret = <S2SV_ModEnd> usb_control_msg ( dev <S2SV_ModStart>, 0, buf <S2SV_ModEnd>, size, <S2SV_ModStart> 500 ) ; kfree ( buf ) ; return ret ;",1
326,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - EINVAL ; goto err_free_urbinfo ; } <S2SV_ModStart> desc. bInterval ; dev_dbg ( & usbinterface -> dev, ""gtco <S2SV_blank> # <S2SV_blank> interfaces: <S2SV_blank> <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> <S2SV_blank> <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> <S2SV_blank> <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; <S2SV_ModStart> hid_desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - EINVAL ; goto err_free_urbinfo ; }",0
327,"<S2SV_ModStart> ) { case GTK_RESPONSE_OK : { file = nautilus_file_get_location ( parameters -> file ) ; nautilus_file_set_metadata ( parameters -> file, NAUTILUS_METADATA_KEY_DESKTOP_FILE_TRUSTED, NULL, NULL ) ; nautilus_file_mark_desktop_file_executable ( parameters -> file, parameters -> parent_window, TRUE, NULL, NULL ) ; nautilus_file_set_metadata ( parameters -> file, NAUTILUS_METADATA_KEY_DESKTOP_FILE_TRUSTED, NULL, NULL ) ; nautilus_file_set_metadata ( parameters -> file, NAUTILUS_METADATA_KEY_DESKTOP_FILE_TRUSTED, NULL, NULL ) ; nautilus_file_set_metadata ( parameters -> file, NAUTILUS_METADATA_KEY_DESKTOP_FILE_DESKTOP_FILE_TRUSTED, NULL, NULL ) ; <S2SV_ModEnd> g_object_unref ( file",0
328,<S2SV_ModStart> ; if ( urb -> actual_length > 0 &&,1
329,"<S2SV_ModStart> * server, struct smb_vol * vol ) { <S2SV_ModEnd> struct cifsSesInfo * <S2SV_ModStart> cifs_tcp_ses_lock ) ; list_for_each_entry ( ses <S2SV_ModEnd>, & server <S2SV_ModStart> server -> smb_ses_list, smb_ses_list ) { if ( strncmp ( ses -> username <S2SV_ModEnd>, username, <S2SV_ModStart> ) continue ; }",0
330,"<S2SV_ModStart> vpx_codec_err_t res ; # if CONFIG_VP8_HIGHBITDEPTH if ( ( <S2SV_ModStart> ) || ( <S2SV_ModEnd> cfg -> g_lag_in_frames <S2SV_ModStart> 1 || ( <S2SV_ModEnd> cfg -> g_pass <S2SV_ModStart> VPX_RC_ONE_PASS ) ) ) <S2SV_ModStart> ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; # else if ( cfg -> g_pass == VPX_RC_ONE_PASS ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> height <S2SV_blank> or <S2SV_blank> lag_in_frames"" ) ; # endif if ( ( cfg -> g_w!= ctx -> cfg. g_w ) || ( cfg -> g_h!= ctx -> cfg. g_h ) ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; # endif if ( ( cfg -> g_w!= ctx -> cfg. g_w ) || ( cfg -> g_h!= ctx -> cfg. g_h ) || ( cfg -> g_pass == VPX_RC_ONE_PASS ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; # if CONFIG_VP",0
331,"<S2SV_ModStart> =='<S2SV_blank>') { input ++ ; } <S2SV_ModEnd> ptr = strchr <S2SV_ModStart> off ) ) { <S2SV_ModStart> input ) ; } <S2SV_ModStart> offset ) ) { <S2SV_ModStart> ""Unknown <S2SV_blank> filesystem <S2SV_blank> type\\n"" ) ; } <S2SV_ModStart> offset ) ) { <S2SV_ModStart> input ) ; }",0
332,"<S2SV_ModStart> inode ) ; struct hugepage_subpool * spool = subpool_inode ( inode ) ; <S2SV_ModStart> ; if ( hugepage_subpool_get_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> 0 ) { hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg )",1
333,<S2SV_ModStart> key * keyring ; if ( new -> thread_keyring ) return 0,1
334,<S2SV_ModStart> = 0 ; size_t scanned = 0 ; size_t readnbd = 0 <S2SV_ModStart> scanned ++ ; if ( readnb > ( size_t ) 0U ) { scanned = ( size_t ) 0U ; readnbd = 0 ; } <S2SV_ModStart> scanned ++ ; if ( readnb > ( size_t ) 0U ) { scanned = ( size_t ) 0U ; readnbd = 0 ; },0
335,"<S2SV_ModStart> orig ) ; fptr_orig = io_get_open_fptr ( mrb, orig ) ; <S2SV_ModStart> mrb_io_alloc ( mrb <S2SV_ModEnd> ) ; DATA_TYPE",1
336,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
337,"<S2SV_ModStart> cpi ) { # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. aq_mode == CYCLIC_REFRESH_AQ && cpi -> oxcf. aq_sensitivity > 0 ) { vp9_highbd_frame_init_quantizers ( cpi, & cpi -> highbd ) ; } else { vp9_init_plane_quantizers ( cpi, & cpi -> highbd ) ; } # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. aq_mode == CYCLIC_REFRESH_AQ && cpi -> oxcf. aq_sensitivity > 0 ) { vp9_highbd_frame_init_quantizers ( cpi, & cpi -> highbd ) ; } # endif vpx_init_plane_quantizers <S2SV_ModEnd> ( cpi,",0
338,"<S2SV_ModStart> return res ; res = utee_param_to_param ( utc, <S2SV_ModEnd> param, callee_params <S2SV_ModStart>, callee_params ) ; if ( res!= TEE_SUCCESS ) return res",1
339,"<S2SV_ModStart> int rc ; struct desc_struct old_desc, new_desc ; const struct x86_emulate_ops * ops = ctxt -> ops ; int cpl = ctxt -> ops -> cpl ( ctxt ) ; old_eip = ctxt -> _eip ; ops -> get_segment ( ctxt, & old_cs, & old_desc, NULL <S2SV_ModEnd>, VCPU_SREG_CS ) <S2SV_ModStart>, VCPU_SREG_CS ) <S2SV_ModEnd> ; memcpy ( <S2SV_ModStart> 2 ) ; rc = __load_segment_descriptor <S2SV_ModEnd> ( ctxt, <S2SV_ModStart> sel, VCPU_SREG_CS, cpl, false, & new_desc ) ; if ( rc!= X86EMUL_CONTINUE <S2SV_ModEnd> ) return X86EMUL_CONTINUE <S2SV_ModStart> return X86EMUL_CONTINUE ; rc = assign_eip_far ( ctxt, ctxt -> src. val, new_desc. l ) ; if ( rc!= X86EMUL_CONTINUE ) goto fail ; ctxt -> src. val = old_cs ; rc = em_push ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) goto fail ; ctxt -> src. val = old_eip",1
340,<S2SV_ModStart> -> band = av_calloc <S2SV_ModEnd> ( reslevel -> <S2SV_ModStart> -> prec = av_calloc <S2SV_ModEnd> ( reslevel ->,1
341,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
342,"<S2SV_ModStart> struct reloc_struct_t * got_table ; n_got = <S2SV_ModEnd> calloc ( 1 <S2SV_ModStart> n_got * sizeof ( struct reloc_struct_t ) ) ; if (! n_got ) { goto out_error ; } got_table = calloc ( 1, n_got * sizeof ( struct reloc_struct_t )",0
343,<S2SV_ModStart> info -> si_code!= SI_QUEUE ) { WARN_ON_ONCE ( info -> si_code < 0 ) ; <S2SV_ModEnd> return - EPERM <S2SV_ModStart> - EPERM ; },1
344,"<S2SV_ModStart> * p_tx0 = ( OPJ_INT32 ) opj_uint_max <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdx, <S2SV_ModEnd> p_image -> x0 <S2SV_ModStart> * p_tx1 = ( OPJ_INT32 ) opj_uint_min <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdx, <S2SV_ModEnd> p_image -> x1 <S2SV_ModStart> * p_ty0 = ( OPJ_INT32 ) opj_uint_max <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdy, <S2SV_ModEnd> p_image -> y0 <S2SV_ModStart> * p_ty1 = ( OPJ_INT32 ) opj_uint_min <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdy, <S2SV_ModEnd> p_image -> y1",1
345,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> char * create_output_name <S2SV_ModStart> * create_output_name ( <S2SV_ModEnd> char * fname <S2SV_ModStart> char * fname <S2SV_ModEnd>, int lower <S2SV_ModStart> ; if ( ( p = malloc ( strlen ( fname ) + 1 <S2SV_ModEnd> ) ) ) <S2SV_ModStart> ) ) { free ( p ) ; return NULL ; } if (! p ) { free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c = * fname ++ ) < 0xC0 ) && ( c < 0xE0 ) ) { x = ( c & 0x80 ) ; x |= ( * fname ++ & 0x3F ) ; } else { if ( ( c >= 0xC0 ) && ( c < 0xF0 ) ) { x = ( c & 0x1F ) << 12 ; x |= ( * fname ++ & 0x3F ) ; } else { if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0x1F ) << 6 ; x |= ( * fname ++ & 0x3F )",0
346,"<S2SV_ModStart> classes = NULL ; zval * return_value = NULL <S2SV_ModStart> } } } if (! php_var_unserialize_ex ( return_value, & p, p + buf_len, & var_hash, class_hash ) ) { PHP_VAR_UNSERIALIZE_DESTROY ( var_hash ) ; FREE_HASHTABLE ( class_hash ) ; } <S2SV_ModStart> RETURN_FALSE ; } <S2SV_ModEnd> PHP_VAR_UNSERIALIZE_DESTROY ( var_hash <S2SV_ModStart> ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> RETURN_FALSE ; } if (! php_var_unserialize_ex ( return_value, & p, p + buf_len, & var_hash, class_hash ) ) { PHP_VAR_UNSERIALIZE_DESTROY ( var_hash ) ; FREE_HASHTABLE ( class_hash ) ; }",0
347,<S2SV_ModStart> goto __err ; tu -> qhead = tu -> qtail = tu -> qused = 0 ;,1
348,<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if ( ( <S2SV_ModStart> ) ptr -> size % sizeof ( GF_AdobeBootstrapInfoBox )!= 0 ) return GF_ISOM_INVALID_FILE ; if ( ( ( u32 ) ptr -> size / sizeof ( GF_AdobeBootstrapInfoBox ) )!= 0 ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> - 8 ; if ( ( ( u32 ) ptr -> size % sizeof ( GF_AdobeBootstrapInfoBox ) )!= 0 ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> -> size - sizeof ( GF_AdobeBootstrapInfoBox ) ) return GF_ISOM_INVALID_FILE ; if ( ( ( u32 ) ptr -> size % sizeof ( GF_AdobeBootstrapInfoBox ) )!= 0 ) return GF_ISOM_INVALID_FILE ; if ( ( ( u32 ) ptr -> size % sizeof ( GF_AdobeBootstrapInfoBox ) )!= 0 ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> -> size - sizeof ( GF_AdobeBootstrapInfoBox ) ) return GF_ISOM,0
349,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
350,"<S2SV_ModStart> } if ( received_protocol <S2SV_ModEnd> ) { fprintf <S2SV_ModStart> ( stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; } if ( received_protocol <S2SV_ModEnd> ) { fprintf <S2SV_ModStart> stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE <S2SV_ModStart> } if ( received_protocol <S2SV_ModEnd> ) { fprintf <S2SV_ModStart> stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; if ( received_protocol <S2SV_ModEnd> ) { fprintf <S2SV_ModStart> } if ( received_protocol ) { fprintf ( stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; } if ( received_protocol ) { fprintf ( stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; } if ( received_protocol ) { fprintf ( stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; } if ( received_protocol ) { fprintf ( stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; }",0
351,<S2SV_ModStart> info -> si_code!= SI_QUEUE ) { WARN_ON_ONCE ( info -> si_code < 0 ) ; <S2SV_ModEnd> return - EPERM <S2SV_ModStart> - EPERM ; },1
352,"<S2SV_ModStart> -> off = strtoull <S2SV_ModEnd> ( p, <S2SV_ModStart> -> filesize = strtoull <S2SV_ModEnd> ( slash +",1
353,"<S2SV_ModStart> * cr ; size_t <S2SV_ModEnd> maxw, maxh <S2SV_ModStart> maxh, max, offx, loopmaxw <S2SV_ModStart>, upb ; size_t i <S2SV_ModEnd> ; upb = <S2SV_ModStart> maxw = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> maxh = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> goto fails ; for ( i = 0U ; i < maxw ; ++ i ) { sycc_to_rgb ( offset, upb, * y, * cb, * cr, r, g, b ) ; ++ y ; ++ r ; ++ g ; ++ b ; } <S2SV_ModStart> j < ( loopmaxw <S2SV_ModEnd> & ~ ( <S2SV_ModStart> ( j < loopmaxw <S2SV_ModEnd> ) { sycc_to_rgb <S2SV_ModStart> ( offset, upb, * y, * cb, * cr, r, g, b ) ; ++ y ; ++ r ; ++ g ; ++ cb ; ++ cr ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
354,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state == fmode <S2SV_ModEnd> ) return ; <S2SV_ModStart> FMODE_WRITE )!= fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> ( state -> state & FMODE_WRITE ) { if ( state -> state & FMODE_READ ) list_move ( & state -> open_states, & state -> owner -> so_states ) ; else list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } else { list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } state -> state = mode ; }",0
355,"<S2SV_ModStart> return SSH_ERR_INVALID_ARGUMENT ; ssh_dispatch_set ( ssh, SSH2_MSG_KEXINIT, NULL ) ;",1
356,"<S2SV_ModStart> { assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
357,"<S2SV_ModStart> if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length <S2SV_ModStart> if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( length <S2SV_ModStart> if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
358,"<S2SV_ModStart> char lbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char strbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char ltest [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char strtest [ 512 <S2SV_ModEnd> ] ; if <S2SV_ModStart> ( lbase, ""%511[^\\r\\n]"" <S2SV_ModEnd>, strbase ) <S2SV_ModStart> ( ltest, ""%511[^\\r\\n]"" <S2SV_ModEnd>, strtest ) <S2SV_ModStart> ( nbase!= 511 <S2SV_ModEnd> && ntest!= <S2SV_ModStart> && ntest!= 511 <S2SV_ModEnd> ) ; if",1
359,<S2SV_ModStart> intf ) { <S2SV_ModEnd> if ( cdc_ncm_select_altsetting <S2SV_ModStart> - ENODEV ; return <S2SV_ModEnd> cdc_ncm_bind_common ( dev <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
360,<S2SV_ModStart> 0 ; } if ( elem. in_sg [ 0 ]. iov_len!= len ) { return 0 ; } <S2SV_ModStart> len ) ; elem. in_sg [ 0 ]. iov_len = len ;,0
361,"<S2SV_ModStart> i, ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] )",0
362,"<S2SV_ModStart>, e -> elems, e ->",1
363,"<S2SV_ModStart> = AV_PIX_FMT_PAL8 ; avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ;",0
364,"<S2SV_ModStart> ) ; } if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; <S2SV_ModStart> 1 ) ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; atalk_print ( ndo, p, length ) ; return ( 1 ) ; case ETHERTYPE_PPPOED : case ETHERTYPE_PPPOES2 : pppoe_print ( ndo, p, length, src, dst ) ; return ( 1 ) ; case ETHERTYPE_PPPOED1 : case ETHERTYPE_PPPOED1 : if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, ""et1 <S2SV_blank> "" ) ) ; atalk_print ( ndo, p, length ) ; return ( 1 ) ; case ETHERTYPE_PPPOES1 : case ETHERTYPE_PPPOES2 : if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, ""et1 <S2SV_blank> "" ) ) ; atalk_print ( ndo, p, length ) ; return ( 1",0
365,<S2SV_ModStart> q ) { mutex_lock ( & q -> timer_mutex ) ; <S2SV_ModStart> snd_seq_timer_close ( q ) ; mutex_unlock ( & q -> timer_mutex,1
366,"<S2SV_ModStart> int error ; sector_t lblock <S2SV_ModEnd> = offset >> <S2SV_ModStart> = offset >> inode -> i_blkbits ; error = gfs2_meta_inode_buffer ( ip, & dibh ) ; if ( unlikely ( error ) ) return error ; gfs2_trans_add_bh ( ip -> i_gl, dibh, 1 ) ; if ( gfs2_is_stuffed ( ip ) ) { error = gfs2_unstuff_dinode ( ip, NULL ) ; if ( unlikely ( error ) ) goto out ; } while ( len ) { struct buffer_head bh_map = {. b_state = 0,. b_blocknr = 0 } ; bh_map. b_size = len ; error = gfs2_block_map ( inode, lblock, & bh_map, 1 ) ; if ( unlikely ( error ) ) goto out ; gfs2_trans_add_bh ( ip -> i_gl, dibh, 1 ) ; if ( gfs2_is_stuffed ( ip ) ) { error = gfs2_unstuff_dinode ( ip, NULL",0
367,<S2SV_ModStart> VIPS_FOREIGN_LOAD_GET_CLASS ( load ) ; if ( load -> error ) return ( NULL <S2SV_ModStart> -> real ) || <S2SV_ModEnd> vips_foreign_load_iscompat ( load <S2SV_ModStart> out ) ) { vips_operation_invalidate ( VIPS_OPERATION ( load ) ) ; load -> error = TRUE ; return ( NULL ) ; } <S2SV_ModEnd> vips_image_pipelinev ( load,1
368,"<S2SV_ModStart>, NULL ) ; if ( strncmp ( name, FIT_SIG_NODENAME, strlen ( FIT_SIG_NODENAME ) ) ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) { puts ( ""- <S2SV_blank> "" ) ; } else { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; }",0
369,<S2SV_ModStart> ; args. rmtvaluelen = valuelen ; args.,0
370,"<S2SV_ModStart> ; if ( kfifo_alloc ( & state -> rx_kfifo, CX23888_IR_RX_KFIFO_SIZE, GFP_KERNEL ) ) return - ENOMEM ; state -> <S2SV_ModStart> dev ; sd = & state -> sd ; v4l2_subdev_init ( sd, & cx23888_ir_controller_ops ) ; v4l2_set_subdevdata ( sd, state ) ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_tx_params ; v4l2_subdev_call ( sd, ir, tx_s_parameters, & default_params ) ; mutex_init ( & state -> tx_params_lock ) ; ret = cx23888_ir_write4 ( dev, CX23888_IR_TXEN_REG, 0 ) ; mutex_init ( & state -> rx_params_lock ) ; default_params = default_rx_params ; v4l2_subdev_call ( sd, ir, rx_s_parameters, & default_params ) ; mutex_init ( & state -> tx",0
371,<S2SV_ModStart> service_name_tlv_length ) ; if (! service_name_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> miux_tlv_length ) ; if (! miux_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> rw_tlv_length ) ; if (! rw_tlv ) { err = - ENOMEM ; goto error_tlv ; },1
372,"<S2SV_ModStart> ssh * ssh = NULL <S2SV_ModStart>. compression ) { mon = xcalloc ( 1, sizeof ( * mon ) ) ; if (! mon ) { mon = xcalloc ( 1, sizeof ( * mon ) ) ; mon_packet_set_compress_hooks ( ssh, NULL, ( ssh_packet_comp_alloc_func * ) mm_zalloc, ( ssh_packet_comp_free_func * ) mm_zfree ) ; mon_packet_set_compress_hooks ( ssh, mon -> m_zlib, ( ssh_packet_comp_alloc_func * ) mm_zalloc, ( ssh_packet_comp_free_func * ) mm_zfree ) ; } return mon ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
373,"<S2SV_ModStart> * iface, <S2SV_ModEnd> vpx_codec_dec_cfg_t * cfg <S2SV_ModStart> ( flags & ( VPX_CODEC_USE_XMA | VPX_CODEC_USE_POSTPROC | VPX_CODEC_USE_INPUT_FRAGMENTS ) <S2SV_ModEnd> ) &&! <S2SV_ModStart> VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) && ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX",0
374,"<S2SV_ModStart> unsigned int channo ; if ( jp2_getuint16 ( in, & cdef -> nchans ) ) { return - 1 ; }",0
375,"<S2SV_ModStart> value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP <S2SV_ModEnd> ; tja1100WritePhyReg (",0
376,<S2SV_ModStart> icmp_param. tos = 0 ; icmp_param. <S2SV_ModEnd> saddr = saddr <S2SV_ModStart> icmp_param. <S2SV_ModEnd> saddr = htonl <S2SV_ModStart> icmp_param. <S2SV_ModEnd> saddr = htonl <S2SV_ModStart> icmp_param. <S2SV_ModEnd> saddr = htonl <S2SV_ModStart> icmp_param. <S2SV_ModEnd> saddr = htonl <S2SV_ModStart> icmp_param. <S2SV_ModEnd> faddr = htonl <S2SV_ModStart> icmp_param. <S2SV_ModEnd> faddr = htonl <S2SV_ModStart> icmp_param. <S2SV_ModEnd> faddr = htonl <S2SV_ModStart> icmp_param. <S2SV_ModEnd> faddr = htonl <S2SV_ModStart> icmp_param. <S2SV_ModEnd> faddr = htonl <S2SV_ModStart> icmp_param. <S2SV_ModEnd> faddr = htonl <S2SV_ModStart> icmp_param. <S2SV_ModEnd> faddr = htonl <S2SV_ModStart> icmp_param. <S2SV_ModEnd> faddr = htonl <S2SV_ModStart> icmp_param. <S2SV_ModEnd> faddr = htonl <S2SV_ModStart> icmp_param. <S2SV_ModEnd> faddr = htonl <S2SV_ModStart> icmp_param. <S2SV_ModEnd> faddr = htonl <S2SV_ModStart> icmp_param. <S2SV_ModEnd> faddr = htonl <S2SV_ModStart> icmp_param. <S2SV_ModEnd> faddr = htonl <S2SV_ModStart> icmp_param. <S2SV_ModEnd> faddr = h,0
377,<S2SV_ModStart> len ; } ND_TCHECK_32BITS <S2SV_ModEnd> ( p + <S2SV_ModStart> p + 2 <S2SV_ModEnd> ) ; ND_PRINT,1
378,<S2SV_ModStart> 0 ; } if ( unlikely ( IPCB ( skb ) -> opt. optlen ) ) skb_dst_force ( skb ) ; else,1
379,<S2SV_ModStart> private ) { struct skcipher_tfm * tfm = private ; crypto_free_skcipher ( tfm -> skcipher ) ; kfree ( tfm <S2SV_ModEnd> ) ; },1
380,<S2SV_ModStart> bprm ) { <S2SV_ModEnd> int retval ; <S2SV_ModStart> int retval ; bprm_fill_uid ( bprm ) ; <S2SV_ModEnd> retval = security_bprm_set_creds,1
381,<S2SV_ModStart> = nlogs ; if ( unlikely ( headcount > UIO_MAXIOV ) ) { r = - ENOBUFS ; goto err ; },0
382,<S2SV_ModStart> ) ) { if ( dlen < 2 ) break ; <S2SV_ModStart> -= 2 ; if ( dlen == 0 ) break ;,0
383,<S2SV_ModStart> { rq = tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; fn (,1
384,<S2SV_ModStart> else if ( <S2SV_ModEnd> ( flags & <S2SV_ModStart> VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) && ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) && ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODE,0
385,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
386,<S2SV_ModStart> ; if (! skb_is_nonlinear <S2SV_ModEnd> ( skb ),0
387,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; RESERVE_SPACE",1
388,"<S2SV_ModStart> bp, len ) ; break ; case ETHERTYPE_TEB : ND_TCHECK_16BITS ( * bp, 2 ) ; <S2SV_ModStart> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> sum <S2SV_blank> 0x%x"", EXTRACT_16BITS ( bp ) ) ) ; bp += 2 ; len -= 2 ; if ( flags & GRE_KP ) { <S2SV_ModStart> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> key=0x%x"", EXTRACT_32BITS ( bp ) ) ) ; bp += 4 ; len -= 4 ; } if ( flags & GRE_SP ) { <S2SV_ModStart> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> seq <S2SV_blank> %u"", EXTRACT_32BITS ( bp ) ) ) ; bp += 4 ; len -= 4 ; } if ( flags & GRE_CP ) { ND_TCHECK_16BITS ( * bp, 2 ) ; if ( len < 2 ) goto trunc ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> key=0x%x"", EXTRACT_",0
389,"<S2SV_ModStart> } if ( tile_buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> calculating <S2SV_blank> buffer <S2SV_blank> size"" ) ; exit ( - 1 ) ; } <S2SV_ModStart> } if ( tile_buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> calculating <S2SV_blank> buffer <S2SV_blank> size"" ) ; exit ( - 1 ) ; } <S2SV_ModStart> } if ( tile_buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> calculating <S2SV_blank> buffer <S2SV_blank> size"" ) ; exit ( - 1 ) ; } <S2SV_ModStart> } if ( tile_buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> calculating <S2SV_blank> buffer <S2SV_blank> size"" ) ; exit ( - 1 ) ; } <S2SV_ModStart> } if ( tile_buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> calculating <S2SV_blank> buffer <S2SV_blank> size"" ) ; exit ( - 1 ) ;",0
390,"<S2SV_ModStart> break ; case 'u' : umask_buf = open ( uname_buf. name, O_DIRECTORY | O_RDONLY | O_CLOEXEC ) ; if ( umask_buf == NULL ) umask_buf = open ( uname_buf. name, O_RDONLY | O_CLOEXEC ) ; if ( umask_buf == NULL ) umask_buf = open ( uname_buf. name, O_DIRECTORY | O_RDONLY | O_CLOEXEC ) ; if ( umask_buf == - 1 ) umask_buf = open ( uname_buf. name, O_DIRECTORY | O_RDONLY | O_CLOEXEC ) ; if ( umask_buf == NULL ) umask_buf = open ( uname_buf. name, O_WRONLY | O_CLOEXEC ) ; if ( umask_buf == NULL ) umask_buf = open ( uname_buf. name, O_DIRECTORY | O_RDONLY | O_CLOEXEC ) ; if ( umask_buf == - 1 ) umask_buf = open ( uname_buf. name, O_DIRECTORY | O_RDONLY | O_CLOEXEC ) if ( umask_buf == NULL ) umask_buf = open ( uname_",0
391,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ) ; return <S2SV_ModEnd> 0 ; } <S2SV_ModStart> break ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
392,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart> -> nd_num ) { ret = <S2SV_ModEnd> - EBUSY ; <S2SV_ModStart> - EBUSY ; goto out ; } <S2SV_ModStart> ( ret ) goto out <S2SV_ModEnd> ; } if <S2SV_ModStart> nd_num ; } ret = count ; out : o2nm_unlock_subsystem ( ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>,1
393,"<S2SV_ModStart> ( fp, "" <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %s\\n"" <S2SV_ModEnd>, & n",0
394,<S2SV_ModStart> : case 0x16 : case 0x17 : case 0x18 : case 0x19 : case 0x0a : case 0x0b : case 0x0c : case 0x0f : case <S2SV_ModStart> : case 0x5a : case 0x5b : case 0x5c : case 0x5f : case 0x6a : case 0x6b : case 0x6e : case 0x6f : case 0x7a : case 0x7b : case 0x7c : case 0x7f : case 0x8a : case 0x8b : case 0x8f : case 0x9a : case 0x9f : case 0x10 : case 0x11 : case 0x12 : case 0x13 : case 0x14 : case 0x15 : case 0x16 : case 0x17 : case 0x18 : case 0x19 : case 0x18 : case 0x19 : case 0x18 : case 0x19 : case 0x1a : case 0x1b : case 0x1c : case 0x1f : case 0x8a : case 0x,0
395,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
396,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
397,<S2SV_ModStart> return - E_NOTHANDLED ; if ( ninst == 0 ) return - E_INVALID,1
398,<S2SV_ModStart> goto trunc ; if ( lshp -> ls_length < 2 ) goto trunc ;,0
399,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
400,"<S2SV_ModStart> tim. length + 1 ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 4 ), 4 ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 5 ), 4 ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 6 ), 4 ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 4 ), 4 ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 5 ), 4 ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 6 ), 4 ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 5 ), 4 ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 4 ), 4 ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 5 ), 4 ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 6 ),",0
401,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",1
402,<S2SV_ModStart> ( ) ; if (! tbuf ) { return NULL ; },1
403,"<S2SV_ModStart>, err ; mm_segment_t old_fs ; if (! access_ok ( VERIFY_WRITE, ur, sizeof ( * ur ) ) ) return - EFAULT ; old_fs = get_fs ( ) ; set_fs ( KERNEL_DS ) ; <S2SV_ModStart> -> ru_utime. tv_sec, & ur -> ru_utime. tv_sec ) ; err |= __put_user ( r. ru_stime. tv_sec, & ur -> ru_stime. tv_usec ) ; err |= __put_user ( r. ru_maxrss, & ur -> ru_maxrss ) ; err |= __put_user ( r. ru_ixrss, & ur -> ru_ixrss ) ; err |= __put_user ( r. ru_idrss, & ur -> ru_idrss ) ; err |= __put_user ( r. ru_isrss, & ur -> ru_isrss ) ; err |= __put_user ( r. ru_minflt, & ur -> ru_minflt ) ; err |= __put_user ( r. ru_oublock, & ur -> ru_oub",0
404,"<S2SV_ModStart> NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/net"", ""%r/proc/net"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys"", ""%r/proc/sys"", NULL, MS_REMOUNT | MS_BIND | MS_RDONLY, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/net"", ""%r/proc/net"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sysrq-trigger"", ""%r/proc/sysrq-trigger"", NULL, MS_BIND | MS_RDONLY, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_RW, ""proc"",",0
405,"<S2SV_ModStart> ; } } if ( c -> spd. that. client == NULL ) { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"" "" <S2SV_blank> but <S2SV_blank> no <S2SV_blank> connection <S2SV_blank> has <S2SV_blank> been <S2SV_blank> authorized"", ip_str ( & md -> iface -> ip_addr ), ntohs ( portof ( & md -> iface -> ip_addr ) ), ( md -> sender_port ) ) ; } else { if ( ( c -> spd. that. client == NULL ) { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"" "" <S2SV_blank> but <S2SV_blank> no <S2SV_blank> connection <S2SV_blank> has <S2SV_blank> been <S2SV_blank> authorized"", ip_str ( & md -> iface -> ip_addr ), ntohs ( portof ( & md -> iface -> ip_addr ) ), ( md -> sender_port ) ) ; } else { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"" "" <S2SV_blank> has <S2SV_blank> been <S2SV_blank> authorized"", ip_str (",0
406,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nsc_encode ( NSC_CONTEXT <S2SV_ModStart> rowstride ) { if (! context ) return FALSE ; if ( rowstride == 0 ) return FALSE <S2SV_ModStart> ChromaSubsamplingLevel ) { if (! <S2SV_ModStart> ( context ) ) return FALSE ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
407,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, const",0
408,<S2SV_ModStart> stringset == ETH_SS_STATS || stringset == ETH_SS_PRIV_FLAGS,1
409,<S2SV_ModStart> return ( ( ( <S2SV_ModStart> ) / 8 ) * GetPSDPacketSize ( image ),1
410,"<S2SV_ModStart> = open ( dev_path <S2SV_ModEnd>, O_RDWR | <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModEnd> p_dev -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModEnd> p_dev -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModEnd> p_dev -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModEnd> p_dev -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModEnd> p_dev ->",0
411,<S2SV_ModStart> bMasterInterface0 ) ; if (! pcu -> ctrl_intf ) return - EINVAL ; <S2SV_ModStart> bSlaveInterface0 ) ; if (! pcu -> data_intf ) return - EINVAL ;,1
412,"<S2SV_ModStart> const char * devname = kstrdup ( dev_name ( & <S2SV_ModEnd> d -> udev <S2SV_ModStart> udev -> dev ), GFP_KERNEL ) ; const char * drvname = d -> name <S2SV_ModStart> d ) ; pr_info ( ""%s: <S2SV_blank> \'%s\' <S2SV_blank> successfully <S2SV_blank> deinitialized <S2SV_blank> and <S2SV_blank> disconnected\\n"" <S2SV_ModEnd>, KBUILD_MODNAME, <S2SV_ModStart>, KBUILD_MODNAME, drvname <S2SV_ModEnd> ) ; }",0
413,"<S2SV_ModStart> pirlvl ) { if ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 || pirlvl -> prcheightexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 ) { return - 1 ; } <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> ) % ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << rpx ) <S2SV_ModStart> ) % ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << rpy )",1
414,<S2SV_ModStart> target_enc ) { return ONIGERR_NOT_SUPPORTED_ENCODING_COMBINATION <S2SV_ModEnd> ; } else,1
415,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> InsertRow ( Image <S2SV_ModStart> image, ssize_t rows, ssize_t <S2SV_ModStart> exception ) { int bit ; Quantum index <S2SV_ModEnd> ; register Quantum <S2SV_ModStart> register Quantum * q <S2SV_ModEnd> ; switch ( <S2SV_ModStart> ; switch ( rows <S2SV_ModEnd> ) { case <S2SV_ModStart> 1 : { q = QueueAuthenticPixels ( image, 0, y, image -> columns, 1, exception ) ; if ( q == ( Quantum * ) NULL ) break ; index = ( Quantum ) ( ( ( ( * p ) & ( 0x80 >> bit ) )? 0x01 : 0x00 ) ; <S2SV_ModStart> index = ( Quantum ) ( ( ( ( * p ) & ( 0x80 >> bit ) )? 0x01 : 0x00 ) ; <S2SV_ModStart> index = ( Quantum ) ( ( ( * p ) & ( 0x80 >> bit ) )? 0x01 : 0x00 ) ; if ( index == ( Quantum ) ( ( ( * p ) & ( 0x80 >> bit ) )? 0x01 : 0x00 ) ; <S2SV_ModStart> index = ( Quantum )",0
416,"<S2SV_ModStart> u_char * tptr, const u_int length <S2SV_ModStart> u_int network_addr_type ; u_int <S2SV_ModEnd> hexdump = FALSE <S2SV_ModStart> case AFNUM_INET : if ( length < 2 ) { ND_PRINT ( ( ndo, ""(invalid <S2SV_blank> IPv4 <S2SV_blank> address <S2SV_blank> length)"" ) ) ; hexdump = TRUE ; break ; } <S2SV_ModStart> case AFNUM_INET6 : if ( length < 2 ) { ND_PRINT ( ( ndo, ""(invalid <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> length)"" ) ) ; hexdump = TRUE ; break ; } <S2SV_ModStart> case AFNUM_INET6 : if ( length < 2 ) { ND_PRINT ( ( ndo, ""(invalid <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> length)"" ) ) ; hexdump = TRUE ; break ; } <S2SV_ModStart> case AFNUM_INET6 : if ( length < 2 ) { ND_PRINT ( ( ndo, ""(invalid <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> length)"" ) ) ; hexdump = TRUE ; break ; }",0
417,"<S2SV_ModStart> ; u64 msr_data, rcx <S2SV_ModStart> = X86EMUL_MODE_PROT32 ; rcx = reg_read ( ctxt, VCPU_REGS_RCX ) ; <S2SV_ModStart> = 1 ; if (! rcx ) return emulate_gp ( ctxt, 0 ) ; <S2SV_ModStart> VCPU_REGS_SS ) ; <S2SV_ModEnd> ctxt -> _eip <S2SV_ModStart> -> _eip = rcx <S2SV_ModEnd> ; * reg_write <S2SV_ModStart> VCPU_REGS_RSP ) = rcx <S2SV_ModEnd> ; return x86_emulate_sysexit_rsp",0
418,<S2SV_ModStart> dev ) ; ssize_t len ; device_lock ( dev ) ; len = <S2SV_ModEnd> sprintf ( buf <S2SV_ModStart> driver_override ) ; device_unlock ( dev ) ; return len ;,1
419,"<S2SV_ModStart> BIO * tmpout ; tmpout = cms_get_text_bio ( out, flags ) ; if (! tmpout ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, ERR_R_MALLOC_FAILURE ) ; goto err ; } for ( ; ; ) { i = BIO_read ( in, buf, sizeof ( buf ) ) ; if ( i <= 0 ) { if ( BIO_method_type ( in ) == BIO_TYPE_CIPHER ) { if (! BIO_get_cipher_status ( in ) ) goto err ; } if ( i < 0 ) goto err ; break ; } if ( tmpout && ( BIO_write ( tmpout, buf, i )!= i ) ) goto err ; } <S2SV_ModEnd> if ( flags <S2SV_ModStart> CMS_TEXT ) { <S2SV_ModEnd> if (!",1
420,<S2SV_ModStart> = KRB5_PREAUTH_FAILED ; if ( retval == 0 ) rs. enc_tkt_reply -> flags |= TKT_FLG_PRE_AUTH ;,1
421,"<S2SV_ModStart> costs, vpx_tree <S2SV_ModEnd> * tree, <S2SV_ModStart> c ) { vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> i / 2 <S2SV_ModEnd> ] ; int <S2SV_ModStart> b ) ; vpx_tree_index <S2SV_ModEnd> ii = tree",0
422,<S2SV_ModStart> ; if ( tmp_dir == NULL || tmp_dir [ 0 ] == '/' || tmp_dir [ 0 ] == <S2SV_ModStart> '\\0' ) && ( tmp_dir [ strlen ( tmp_dir ) - 1 ] == '/' || tmp_dir [ 0 ] == <S2SV_ModStart> '\\0' ) && ( tmp_dir [ strlen ( tmp_dir ) - 1 ] == '/' || tmp_dir [ 0 ] == <S2SV_ModStart> '\\0' ) && ( tmp_dir [ 0 ] == '/' || tmp_dir [ 0 ] == <S2SV_ModStart> '\\0' ) && ( tmp_dir [ 0 ] == '/' || tmp_dir [ 0 ] == <S2SV_ModStart> '\\0' ) && ( tmp_dir [ strlen ( tmp_dir ) - 1 ] == '/' || tmp_dir [ 0 ] == <S2SV_ModStart> '\\0' ) && ( tmp_dir [ strlen ( tmp_dir ) - 1 ] == '/' || tmp_dir [ 0 ] == '\\0' ) && ( tmp_dir [ 0 ] == '/' || tmp_dir [ 0 ] == '\\0' ) && ( tmp_dir [ 0 ] == '/' || tmp_dir [ 0 ] == '\\0' ) && ( tmp_dir [ strlen (,0
423,"<S2SV_ModStart> = 0 ; size_t pathlen = 0 ; <S2SV_ModStart> case AF_UNIX : pathlen = sizeof ( <S2SV_ModEnd> ( ( struct <S2SV_ModStart> ) -> sun_path ) ; if ( pathlen > MAXPATHLEN ) { pathlen = MAXPATHLEN - 1 ; } strncpy ( addr_text, ( ( struct sockaddr_un * ) sock_addr ) -> sun_path, pathlen ) ; addr_text [ pathlen <S2SV_ModEnd> ] = '\\0'",0
424,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
425,"<S2SV_ModStart> & 0xffff ; if ( fmt == SEQ_EXTENDED ) { if (! ( seq_mode == SEQ_2 && synth_devs [ dev ] -> load_patch ) ) return - EINVAL ; seq_startplay ( ) ; } else { err = synth_devs [ dev ] -> load_patch ( dev, fmt, buf, p + 4, c, 0 ) ; if ( err < 0 ) return err ; if ( seq_mode == SEQ_2 && ev_code == SEQ_EXTENDED ) { if (! ( seq_mode == SEQ_2 && c < 8 ) ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> 4 <S2SV_blank> byte <S2SV_blank> event <S2SV_blank> in <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> mode\\n"" ) ; return - EINVAL ; } else { if ( seq_mode == SEQ_1 && ev_code == SEQ_EXTENDED ) { if (! ( seq_mode == SEQ_2 && ev_code == SEQ_EXTENDED ) ) seq_startplay ( ) ; } else { if ( c < 8 ) { printk ( KERN_WARNING ""Sequ",0
426,"<S2SV_ModStart> ) { struct hugepage_subpool * spool = subpool_vma ( vma ) ; struct <S2SV_ModStart> page * page <S2SV_ModEnd> ; long chg <S2SV_ModStart> ) if ( hugepage_subpool_get_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> page ) { hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> unsigned long ) spool <S2SV_ModEnd> ) ; vma_commit_reservation",1
427,<S2SV_ModStart> filegen_string ) ; if ( NULL == filegen ) continue ; <S2SV_ModStart> filegen_file ) ; if ( NULL == filegen ) continue ; <S2SV_ModStart> filegen_flag ) ; if ( NULL == filegen ) continue ;,0
428,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; timer_set_state",1
429,"<S2SV_ModStart> fadst16 ( const tran_low_t * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> 15 ] ; tran_high_t x1 = input [ 0 ] ; tran_high_t x2 = input [ 1 ] ; tran_high_t x3 = input [ 2 ] ; tran_high_t x4 = input [ 3 ] ; tran_high_t x5 = input [ 4 ] ; tran_high_t <S2SV_ModEnd> x6 = input <S2SV_ModStart> 7 ] ; tran_high_t <S2SV_ModEnd> x8 = input <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 10 ] ; tran_high_t <S2SV_ModEnd> x12 = input <S2SV_ModStart> 12 ] ; tran_high_t <S2SV_ModEnd> x13 = input <S2SV_ModStart> 1 ] ; tran_high_t <S2SV_ModEnd> x14 = input <S2SV_ModStart> 2 ] ; tran_high_t <S2SV_ModEnd> x15 = input",0
430,<S2SV_ModStart> ; # if HAVE_EDSP <S2SV_ModEnd> flags |= HAS_EDSP <S2SV_ModStart> ; # endif <S2SV_ModEnd> return flags &,0
431,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
432,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF <S2SV_ModStart> wc ) ; return,1
433,"<S2SV_ModStart> tot_len ) ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
434,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> AVROR_INVALIDDATA ; } if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ;,0
435,<S2SV_ModStart> == datalen && ( ( flags & FLAG_MATCHED ) == 0 ) <S2SV_ModEnd> ) { flags <S2SV_ModStart> ) ) { if ( ( flags & FLAG_LAST_MATCHED ) == 0 ) { pc -= 2 ; cons_datalen_stack [ cons_datalen_stack [ cons_datalen_stack [ cons_datalen_stack [ cons_datalen_stack [ cons_datalen_stack [ cons_datalen_stack ] ] = - 1 ; cons_datalen_stack [ cons_datalen_stack [ cons_datalen_stack ] = 0 ; } } else if ( ( flags & FLAG_LAST_MATCHED ) == 0 ) { pc -= 2 ; cons_datalen_stack [ cons_datalen_stack [ cons_datalen_stack [ cons_datalen_stack [ cons_datalen_stack [ cons_datalen_stack ] ] = - 1 ; cons_datalen_stack [ cons_datalen_stack [ cons_datalen_stack ] ] = - 1 ; },0
436,"<S2SV_ModStart>, * controller, * next = NULL <S2SV_ModStart> out ; } <S2SV_ModEnd> if (! <S2SV_ModStart> if (! caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if (! <S2SV_ModStart> cgdir ) ; free ( next ) ;",0
437,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flag & CL_UNPRIVILEGED <S2SV_ModStart> & CL_UNPRIVILEGED ) mnt -> mnt. mnt_flags |= MNT_LOCK_ATIME ; if <S2SV_ModEnd> ( mnt -> <S2SV_ModStart> mnt_flags & MNT_READONLY <S2SV_ModEnd> ) mnt -> <S2SV_ModStart> ; if ( mnt -> mnt. mnt_flags & MNT_NODEV ) mnt -> mnt. mnt_flags |= MNT_LOCK_NODEV ; if ( mnt -> mnt. mnt_flags & MNT_NOSUID ) mnt -> mnt. mnt_flags |= MNT_LOCK_NOEXEC ; if ( mnt -> mnt. mnt_flags & MNT_NOEXEC ) mnt -> mnt. mnt_flags |= MNT_LOCK_NOEXEC ; if ( mnt -> mnt. mnt_flags & MNT_NOEXEC ) mnt -> mnt. mnt_flags |= MNT_LOCK_NOEXEC ;,0
438,<S2SV_ModStart> rds_loop_transport ; } <S2SV_ModEnd> } conn ->,1
439,<S2SV_ModStart> * rsize >= 112 <S2SV_ModEnd> && rdesc [,1
440,"<S2SV_ModStart> if ( bodyLength < sizeof ( EAPOL_RSN_KEY ) ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Invalid <S2SV_blank> EAPOL <S2SV_blank> key <S2SV_blank> body <S2SV_blank> length"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_INVALID_HANDSHAKE ; } if ( <S2SV_ModStart> if ( bodyLength > sizeof ( EAPOL_RSN_KEY ) ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Invalid <S2SV_blank> EAPOL-Key <S2SV_blank> body <S2SV_blank> length"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_INVALID_HANDSHAKE ; }",0
441,"<S2SV_ModStart> ; if ( likely ( serio ) ) { spin_unlock_irqrestore ( & i8042_lock, flags ) ; return IRQ_NONE ; }",0
442,"<S2SV_ModStart> ( er ) { ND_TCHECK ( <S2SV_ModEnd> dp ) ; <S2SV_ModStart> ( er ) { ND_TCHECK ( <S2SV_ModEnd> dp ) ; <S2SV_ModStart> ( er ) { ND_TCHECK ( <S2SV_ModEnd> dp ) ; <S2SV_ModStart> ( er ) { ND_TCHECK ( <S2SV_ModEnd> dp ) ; <S2SV_ModStart> ( er ) { if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; } } } else { ND_PRINT ( ( ndo, "" <S2SV_blank> dattr:"" ) ) ; if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; if (",0
443,"<S2SV_ModStart> * newName, int newLen, <S2SV_ModStart> * udfName, int udfLen, <S2SV_ModEnd> uint8_t * fidName <S2SV_ModStart> ( newIndex < newLen <S2SV_ModEnd> ) newName [ <S2SV_ModStart> } maxFilenameLen = newLen - CRC_LEN <S2SV_ModEnd> - localExtIndex ; <S2SV_ModStart> ( newIndex > newLen - CRC_LEN ) newIndex = newLen - CRC_LEN <S2SV_ModEnd> ; newName [",1
444,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModEnd> const TileInfo * <S2SV_ModStart> const TileInfo * tile_data <S2SV_ModEnd>, MODE_INFO * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd>, int * <S2SV_ModStart> bsize ) { int bw, bh ; if ( mi_row < 0 || mi_col < 0 ) return ; bw = num_8x8_blocks_wide_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; bh = num_8x8_blocks_high_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, bs, mi_row, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, hbs, mi_row, mi_",0
445,<S2SV_ModStart> ; if ( <S2SV_ModEnd> c -> flags <S2SV_ModStart> client_close_after_reply ) break ; if ( c -> flags & CLIENT_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
446,<S2SV_ModStart> ; get_blocks_flags = ( mpd -> b_state & ( 1 << BH_Mapped ) )? EXT4_GET_BLOCKS_CREATE : 0,0
447,"<S2SV_ModStart> * s ; const unsigned char * p = sigbuf ; unsigned char * der = NULL ; int derlen = - 1 ; <S2SV_ModStart> s, & p <S2SV_ModEnd>, siglen ) <S2SV_ModStart> == NULL ) goto err ; derlen = i2d_DSA_SIG ( s, & der ) ; if ( derlen!= siglen || memcmp ( sigbuf, der, derlen ) ) <S2SV_ModStart> ; err : if ( derlen > 0 ) { OPENSSL_cleanse ( der, derlen ) ; OPENSSL_free ( der ) ; }",1
448,"<S2SV_ModStart> NULL ) ; if (! _gdImageGifCtx <S2SV_ModEnd> ( im, <S2SV_ModStart>, out ) ) { <S2SV_ModEnd> rv = gdDPExtractData <S2SV_ModStart> size ) ; } else { rv = NULL ; }",1
449,<S2SV_ModStart> ) ; } if ( bprm -> interp!= bprm -> filename ) kfree ( bprm -> interp ) ;,1
450,"<S2SV_ModStart> = 0 ; oe_addrinfo_t <S2SV_ModEnd> ai_flags = 0 <S2SV_ModStart>, handle, & <S2SV_ModEnd> ai_flags, & <S2SV_ModStart> ai_flags, & <S2SV_ModEnd> p -> ai_family <S2SV_ModStart> p -> ai_family <S2SV_ModEnd>, & p <S2SV_ModStart> p -> ai_socktype <S2SV_ModEnd>, & p <S2SV_ModStart>, p -> ai_addrlen, & <S2SV_ModEnd> p -> ai_addrlen <S2SV_ModStart> p -> ai_addrlen, & <S2SV_ModEnd> canonnamelen, NULL <S2SV_ModStart> ) ; } if ( retval!= 1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( p -> ai_addrlen > OE_ADDRINFO_MAX ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval!= - 1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; }",0
451,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
452,"<S2SV_ModStart> ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, ""Invalid <S2SV_blank> image <S2SV_blank> dimensions"" ) ; goto done ; }",1
453,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
454,"<S2SV_ModStart> * pegasus, u8 * buf <S2SV_ModEnd>, __u16 size <S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmemdup ( data, size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
455,"<S2SV_ModStart> asdl_seq * body, asdl_arena * arena <S2SV_ModStart> = body ; p -> v. Module. arena = arena ;",0
456,<S2SV_ModStart> destroy_list ) ; <S2SV_ModEnd> } } <S2SV_null>,1
457,"<S2SV_ModStart> ts_start, int64_t <S2SV_ModEnd> flags ) { <S2SV_ModStart> >> 4 ; # else ( void ) ts_start ; ( void ) ts_end ; # <S2SV_ModStart> write_idx ) ; <S2SV_ModEnd> if ( ctx <S2SV_ModStart> == 1 && <S2SV_ModEnd> active_map &&! <S2SV_ModStart> } else { vpx_copy_and_extend_frame ( src, & buf -> img, row << 4, 16, ( active_end - col ) << 4 ) ; active_map += mb_cols ; } # else vpx_copy_and_extend_frame ( src, & buf -> img, <S2SV_ModEnd> row << 4 <S2SV_ModStart> } } else { vpx_copy_and_extend_frame ( src, & buf -> img, <S2SV_ModEnd> row << 4 <S2SV_ModStart> } # else vpx_copy_and_extend_frame <S2SV_ModEnd> ( src, <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
458,<S2SV_ModStart> ) ; } fuse_conn_put ( & cc -> fc ) ;,1
459,"<S2SV_ModStart> ( code ) { * status = ""DECODE_PA_S4U_X509_USER"" ; return code ; } <S2SV_ModEnd> code = verify_s4u_x509_user_checksum",1
460,"<S2SV_ModStart> * outbuf ) { uint64_t nb_sectors ; <S2SV_ModStart> goto illegal_request ; nb_sectors = scsi_disk_emulate_read_capacity ( req, & nb_sectors ) ; if ( nb_sectors < 0 || nb_sectors > SCSI_MAX_SECTORS ) goto illegal_request",0
461,<S2SV_ModStart> cur_pic. field_picture <S2SV_ModEnd> ) return 0,1
462,"<S2SV_ModStart> off ) { struct scatterlist * sgp = & rm -> data. op_sg [ sg ] ; int ret = sizeof ( struct rds_header ) + be32_to_cpu ( rm -> m_inc. i_hdr. h_len ) ; <S2SV_ModStart> 0 ) ; ret = min_t ( int, ret, sgp -> length - conn -> c_xmit_data_off ) ; goto out <S2SV_ModEnd> ; } BUG_ON <S2SV_ModStart> m_inc ) ; out : return ret <S2SV_ModEnd> ; } <S2SV_null>",1
463,<S2SV_ModStart> buf ) ) { return 0 ; } <S2SV_ModEnd> ext_block = (,1
464,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = key_permission,1
465,<S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_16BITS ( & bp [ hlen ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ) ) ; },0
466,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
467,"<S2SV_ModStart> = hmi_data ; uint32_t data_siz ; <S2SV_ModStart> } * note <S2SV_ModEnd> ; if ( <S2SV_ModStart> += hmi_tmp ; data_siz = hmi_tmp ; <S2SV_ModStart> += hmi_tmp ; if ( data_siz < hmi_tmp ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> in <S2SV_blank> hmi"", 0 ) ; return NULL ; } <S2SV_ModStart> += hmi_tmp ; data_siz -= hmi_tmp ; <S2SV_ModStart> += hmi_tmp ; if ( data_siz < hmi_tmp ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> in <S2SV_blank> hmi"", 0 ) ; return NULL ; } <S2SV_ModStart> += hmi_tmp ; if ( hmi_tmp > data_siz ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> in <S2SV_blank> hmi"",",0
468,<S2SV_ModStart> -> id ; haddr -> hci_channel = 0 ;,1
469,<S2SV_ModStart> -> i_iget5_offset ; fh16 [ 3 ] = 0 ;,1
470,"<S2SV_ModStart> { if ( server. pw_expiration && server. pw_expiration < kdc_time ) { * status = ""CLIENT <S2SV_blank> KEY <S2SV_blank> EXPIRED"" ; if ( vague_errors ) return ( KRB_ERR_GENERIC ) ; else return ( KDC_ERR_KEY_EXP ) ; } if ( <S2SV_ModStart> { if ( server. pw_expiration && server. pw_expiration < kdc_time ) { * status = ""CLIENT <S2SV_blank> KEY <S2SV_blank> EXPIRED"" ; if ( vague_errors ) return ( KRB_ERR_GENERIC ) ; else return ( KDC_ERR_KEY_EXP ) ; } if ( isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( server. attributes, KRB5_KDB_PWCHANGE_SERVICE ) ) { * status = ""REQUIRED <S2SV_blank> PWCHANGE"" ; return ( KDC_ERR_KEY_EXP ) ; } if ( isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) && isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) ) {",0
471,"<S2SV_ModStart> case BPF_SUB : if ( src_known &&! dst_reg -> smin_value ||! dst_reg -> smax_value ) { verbose ( env, ""R%d <S2SV_blank> tried <S2SV_blank> to <S2SV_blank> sub <S2SV_blank> from <S2SV_blank> different <S2SV_blank> pointers <S2SV_blank> or <S2SV_blank> scalars\\n"", dst_reg -> smin_value ) ; break ; } <S2SV_ModStart> break ; case BPF_SUB : if ( src_known &&! dst_reg -> smin_value ) { verbose ( env, ""R%d <S2SV_blank> tried <S2SV_blank> to <S2SV_blank> sub <S2SV_blank> from <S2SV_blank> different <S2SV_blank> pointers <S2SV_blank> or <S2SV_blank> scalars\\n"", dst_reg -> smin_value ) ; } else { verbose ( env, ""R%d <S2SV_blank> tried <S2SV_blank> to <S2SV_blank> sub <S2SV_blank> from <S2SV_blank> different <S2SV_blank> pointers <S2SV_blank> or <S2SV_blank> scalars\\n"", dst_reg -> smin_value ) ; } if (! src_known &&! dst_reg -> smax_value ) { verbose ( env, ""R%d <S2SV_blank> tried <S2SV_blank> to <S2SV_blank> sub <S2SV_blank> from <S2SV_blank> different <S2SV_blank> pointers <S2SV_blank> or <S2SV_blank> scalars\\n"", dst_reg -> smax_value ) ; break ; }",0
472,"<S2SV_ModStart>. sharpness ; const VP9EncoderConfig * oxcf = & cpi -> oxcf ; <S2SV_ModStart> LPF_PICK_FROM_Q ) { vpx_ac_quant_t <S2SV_ModEnd> q = vp9_ac_quant <S2SV_ModStart> 0 ) ; vpx_bit_depth_t <S2SV_ModEnd> filt_guess = ROUND_POWER_OF_TWO <S2SV_ModStart> ( q * oxcf -> bit_depth <S2SV_ModEnd> + 1015158, <S2SV_ModStart> ( filt_guess, min_filter_level, max_filter_level ) ; lf -> filter_level = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) <S2SV_ModEnd> ; } }",0
473,"<S2SV_ModStart> BT_STATUS_SUCCESS ) { BTIF_LOG_EVENT ( ""BTIF_DM_DISABLE_EVT: <S2SV_blank> device <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> disabled\\n"", btif_get_default_local_name ( ) ) ; } else { BTIF_LOG_EVENT ( ""BTIF_DM_DISABLE_EVT: <S2SV_blank> device <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> disabled\\n"", btif_get_default_local_name ( ) ) ) ; } if ( service_mask & ( tBTA_SERVICE_MASK ) ( BTA_SERVICE_ID_TO_SERVICE_MASK ( BTA_MAX_SERVICE_ID ) ) ) { BTIF_LOG_EVENT ( ""BTIF_DM_DISABLE_EVT: <S2SV_blank> service <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> disabled\\n"", service_mask ) ; BTIF_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_DISABLED ) ; }",0
474,"<S2SV_ModStart> ""UnableToReadImageData"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
475,"<S2SV_ModStart> = getnum ( <S2SV_ModEnd> fmt, MAXALIGN",0
476,<S2SV_ModStart> void usage_exit ( void,1
477,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
478,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
479,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
480,"<S2SV_ModStart> vpx_codec_err_t res ; const vpx_codec_alg_priv_t * alg_priv = NULL ; <S2SV_ModStart>. decode ( alg_priv <S2SV_ModEnd>, data, <S2SV_ModStart> data, data_sz, user_priv <S2SV_ModEnd> ) ; }",0
481,<S2SV_ModStart> ; if ( * value == 0 ||,1
482,"<S2SV_ModStart> inode ) { struct iso_directory_record * de2 ; if ( de -> name_len > ISOFS_MAX_DE_NAME ) { printk ( KERN_INFO ""%s: <S2SV_blank> invalid <S2SV_blank> directory <S2SV_blank> name\\n"", __func__ ) ; ret = - EIO ; goto fail ; } de2 = ( struct iso_directory_record * ) ( bh -> b_data + offset ) ; if (! de2 ) { printk ( KERN_INFO ""%s: <S2SV_blank> invalid <S2SV_blank> directory <S2SV_blank> name\\n"", __func__ ) ; goto fail ; }",0
483,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
484,"<S2SV_ModStart> return ; } if ( li < sizeof ( struct esis_header_t ) + 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> indicator <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size:"", li ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"", * pptr ++ ) ) ; if ( li < sizeof ( struct esis_header_t ) + 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size:"", li ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"", * pptr ++ ) ; if ( li < sizeof ( struct esis_header_t ) + 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> indicator <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size:"", li ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> indicator <S2SV_blank> %u <S2SV_blank> <",0
485,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> k ) ; }",0
486,<S2SV_ModStart> } else { return false ; } } else if ( r -> CRn == 0 && r -> CRm == 9 ) { if ( pmu_access_event_counter_el0_disabled ( vcpu ) ) return false ; idx = ARMV8_PMU_CYCLE_IDX ; <S2SV_ModEnd> } else if <S2SV_ModStart> } else { return false <S2SV_ModEnd> ; } if,1
487,<S2SV_ModStart> case IS_STRING : { zval dval ; dval = * * zval_affine_elem ; zval_copy_ctor ( & dval ) ; convert_to_double ( & dval <S2SV_ModEnd> ) ; affine <S2SV_ModStart> i ] = Z_DVAL ( dval ) ; } <S2SV_ModEnd> break ; default <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; rect <S2SV_ModStart>. x = Z_LVAL ( lval ) ; } else { rect. x = <S2SV_ModStart> ) ; } } <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; rect <S2SV_ModStart>. y = Z_LVAL ( lval ) ; } else { rect. y = <S2SV_ModStart> ) ; } } <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval,1
488,<S2SV_ModStart> self ) { if ( self -> dict ) Py_CLEAR ( self -> dict ) ;,0
489,<S2SV_ModStart> SQL_DROP ) ; <S2SV_ModEnd> return 0 ;,1
490,"<S2SV_ModStart> ; r = __copy_from_user <S2SV_ModEnd> ( data,",1
491,"<S2SV_ModStart>, * q <S2SV_ModEnd> ; Clp_Parser * <S2SV_ModStart> ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\nThis <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\nThere <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\nparticular <S2SV_blank> purpose.\\n"" <S2SV_ModEnd> ) ; exit <S2SV_ModStart> ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\nThere <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\nparticular <S2SV_blank> purpose.\\n"" <S2SV_ModEnd> ) ; exit <S2SV_ModStart> ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank>",0
492,<S2SV_ModStart> = 0 ; info -> port = NULL ;,1
493,<S2SV_ModStart> -> ctx. <S2SV_ModEnd> pmu = pmu,1
494,"<S2SV_ModStart> iovec * iovec, struct iov_iter * iter ) { if ( len > MAX_RW_COUNT ) len = MAX_RW_COUNT ; <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> = 1 ; iov_iter_init ( iter, rw, iovec, * nr_segs, len ) ;",1
495,<S2SV_ModStart> ext4_group_t flex_group ; unsigned <S2SV_ModStart> -> s_log_groups_per_flex ; if ( sbi -> s_log_groups_per_flex < 1 || sbi -> s_log_groups_per_flex > 31 ) { sbi -> s_log_groups_per_flex = 0 ; return 1 ; } <S2SV_ModStart> -> s_log_groups_per_flex ; <S2SV_ModEnd> flex_group_count = (,1
496,<S2SV_ModStart> ( unlikely ( chunk -> pdiscard ) ) return 0 ; if ( unlikely (,1
497,<S2SV_ModStart> 0 ; a && i < count ; ++ i <S2SV_ModEnd> ) n = <S2SV_ModStart> ] ) ; <S2SV_ModEnd> suffix_object ( p,0
498,"<S2SV_ModStart> { if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) return need_more_params ( cptr, ""AUTHENTICATE"" ) ; if ( <S2SV_ModStart> { if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) return need_more_params ( cptr, ""AUTHENTICATE"" ) ;",0
499,<S2SV_ModStart> <= w - ( int ),1
500,<S2SV_ModStart> callback_args -> forward_matches ; assert ( match_offset + match_length <= callback_args -> data_size ),1
501,<S2SV_ModStart> options. disable_forwarding && use_privsep,1
502,"<S2SV_ModStart> { if ( length > SMKTREE_DECODE_MAX_RECURSION ) { av_log ( NULL, AV_LOG_ERROR, ""Maximum <S2SV_blank> tree <S2SV_blank> recursion <S2SV_blank> level <S2SV_blank> exceeded.\\n"" ) ; return AVERROR_INVALIDDATA ; } if (",1
503,<S2SV_ModStart> err ; } if ( m -> msg_name ),1
504,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == Py_None ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( tmp == Py_None ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == Py_None ) { Py_CLEAR ( tmp ) ; type_ignores = & PyId_type_ignores <S2SV_ModEnd> ; if ( <S2SV_ModStart>",0
505,<S2SV_ModStart> m ; int hstartrow <S2SV_ModEnd> ; if ( <S2SV_ModStart> 2 ) { hstartrow <S2SV_ModEnd> = ( numrows <S2SV_ModStart> = numrows - hstartrow <S2SV_ModEnd> ; n = <S2SV_ModStart> & a [ hstartrow <S2SV_ModEnd> * stride ],1
506,"<S2SV_ModStart> ""REPLY_ADD_STA <S2SV_blank> PASSED\\n"" ) ; ret = iwl_sta_ucode_activate ( priv, sta_id ) <S2SV_ModEnd> ; break ;",1
507,"<S2SV_ModStart> ; log_file = fopen_safe <S2SV_ModEnd> ( file_name,",1
508,"<S2SV_ModStart> ""a\\0x\\0b\\0"" ) ; assert_true_rule_blob ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /\\\\babc/ <S2SV_blank> wide <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""\\ta\\0b\\0c\\0"" ) ; assert_true_rule_blob ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /\\\\babc/ <S2SV_blank> wide <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""\\ta\\0b\\0c\\0"" ) ; assert_true_rule_blob ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /\\\\babc/ <S2SV_blank> wide <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""\\ta\\0b\\0c\\0"" ) ; assert_false_rule_blob ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /\\\\babc/ <S2SV_blank> wide <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""\\ta\\0b\\0c\\0"" ) ; assert_false_rule_blob ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /\\\\babc/ <S2SV_blank> wide <S2SV_blank> condition",0
509,"<S2SV_ModStart> & HB_LOCK ) spin_lock_irqsave ( & hashbin -> hb_spinlock, flags ) ; <S2SV_ModEnd> for ( i <S2SV_ModStart> ++ ) { while ( 1 ) { <S2SV_ModStart> ] ) ; if (! queue ) break ; <S2SV_ModEnd> if ( free_func <S2SV_ModStart> ( free_func ) { if ( hashbin -> hb_type & HB_LOCK ) spin_unlock_irqrestore ( & hashbin -> hb_spinlock, flags ) ; free_func ( queue ) ; if ( hashbin -> hb_type & HB_LOCK ) spin_lock_irqsave ( & hashbin -> hb_spinlock, flags ) ; } <S2SV_ModEnd> } } hashbin <S2SV_ModStart> & HB_LOCK ) <S2SV_ModEnd> spin_unlock_irqrestore ( & <S2SV_ModStart> flags ) ; <S2SV_ModEnd> kfree ( hashbin",1
510,<S2SV_ModStart> EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NODEV ) &&! ( mnt_flags & MNT_NODEV ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOSUID ) &&! ( mnt_flags & MNT_NOSUID ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) &&! ( mnt_flags & MNT_NOEXEC ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) &&! ( mnt_flags & MNT_NOEXEC ) ) { return - EPERM ; },0
511,"<S2SV_ModStart> copied, err <S2SV_ModEnd> ; int vnet_hdr_len <S2SV_ModStart> out_free ; } copied = skb -> len ; msg -> msg_namelen = copied ;",0
512,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
513,"<S2SV_ModStart> ( serial -> num_bulk_out <S2SV_ModEnd> < 2 ) <S2SV_ModStart> < 2 ) { dev_err ( & serial -> interface -> dev, ""missing <S2SV_blank> bulk <S2SV_blank> out <S2SV_blank> endpoints\\n"" ) ; return - ENODEV ; } <S2SV_ModEnd> port = serial",1
514,"<S2SV_ModStart> write_junk = 1, do_rf64 = 0 <S2SV_ModStart> riffhdr ; DS64Chunk <S2SV_ModEnd> ds64_chunk ; JunkChunk <S2SV_ModStart> ds64_chunk ) ; if (! do_rf64 ) { error_line ( ""can\'t <S2SV_blank> create <S2SV_blank> valid <S2SV_blank> RIFF <S2SV_blank> wav <S2SV_blank> header <S2SV_blank> for <S2SV_blank> non-normalized <S2SV_blank> floating <S2SV_blank> data!"" ) ; return FALSE ; }",0
515,"<S2SV_ModStart> ; if ( msg_sys -> msg_name ) memcpy ( & addr, msg_sys -> msg_name, sizeof ( addr ) ) ; else memcpy ( & addr, msg_sys -> msg_name, sizeof ( addr ) ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( msg_sys <S2SV_ModStart> msg_flags = flags <S2SV_ModEnd> & ( MSG_CMSG_CLOEXEC <S2SV_ModStart> | MSG_CMSG_COMPAT ) ; if ( msg_sys -> msg_name ) memcpy ( msg_sys -> msg_name, & addr, sizeof ( addr ) )",0
516,"<S2SV_ModStart> buffer_head * dibh <S2SV_ModEnd> ; u64 bn <S2SV_ModStart> unsigned end_of_metadata ; if ( height > ip -> i_height ) { int ret <S2SV_ModStart> - 1 ; ret = gfs2_meta_inode_block ( inode, lblock, bh_map, ( struct metapath * ) mp, ( struct metapointer * ) ptr, maxlen, & eob ) ; if ( ret < 0 ) { gfs2_consist_inode ( inode, ( struct metapath * ) mp, ( struct metapath * ) mp, ( struct metapath * ) mp, ( struct metapath * ) mp -> mp_list + ( height - ip -> i_height ) ) ; } else { ret = gfs2_meta_inode_block ( inode, lblock, ( struct metapointer * ) ptr, maxlen, & eob ) ; if ( ret < 0 ) { gfs2_consist_inode ( inode, ( struct metapath * ) mp, ( struct metapath * ) ptr, maxlen, & eob ) ; if ( ret < 0 ) { gfs2_consist_inode ( inode, ( struct",0
517,"<S2SV_ModStart> ( global -> codec <S2SV_ModEnd> -> interface ( <S2SV_ModStart> ( ) ) ) ; fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, <S2SV_ModEnd> input -> use_i420 <S2SV_ModStart> input -> use_i420 <S2SV_ModEnd>? ""I420"" : <S2SV_ModStart> ""YV12"" ) ; } if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> index ) ; if ( stream -> config. use_i420 ) { fprintf ( stderr, ""\\nSource <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, <S2SV_ModEnd> input -> use_i420 <S2SV_ModStart> : ""I420"" ) ; } else { fprintf ( stderr, ""\\nSource <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename ) ; fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> index ) ; } if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nSource <S2SV_blank> file <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream ->",0
518,<S2SV_ModStart> return FALSE ; { BOOL rc ; <S2SV_ModStart> -> prof_nsc_rle_decompress_data ) rc = <S2SV_ModStart> -> prof_nsc_rle_decompress_data ) if (! rc ) return FALSE ; } { BOOL rc ; <S2SV_ModStart> -> prof_nsc_decode ) rc = <S2SV_ModStart> -> prof_nsc_decode ) if (! rc ) return FALSE ; },1
519,"<S2SV_ModStart> { if ( ( attr -> psvi == XSLT_REFACTORED ) && ( xmlStrEqual ( attr -> psvi -> href, XSLT_NAMESPACE ) ) ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> namespace <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } if ( ( attr -> psvi == XSLT_REFACTORED ) && ( xmlStrEqual ( attr -> psvi -> href, XSLT_NAMESPACE ) ) ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> namespace <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; }",0
520,"<S2SV_ModStart> ( copy_file ( ""/etc/skel/.zshrc"", fname, u, g, 0644 <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( copy_file ( ""/etc/skel/.cshrc"", fname, u, g, 0644 <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( copy_file ( ""/etc/skel/.cshrc"", fname, u, g, 0644 <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( copy_file ( ""/etc/skel/.cshrc"", fname, u, g, 0644 <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( copy_file ( ""/etc/skel/.cshrc"", fname, u, g, 0644 <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( copy_file ( ""/etc/skel/.cshrc"", fname, u, g, 0644 <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( copy_file ( ""/etc/skel/.cshrc"", fname, u, g, 0644 <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( copy_file ( ""/etc/skel/.cshrc"", fname, u, g, 0644 <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( copy_file ( ""/etc/skel/.cshrc"", fname, u, g, 0644 <S2SV_ModEnd> ) == 0 <S2SV_ModStart> (",0
521,"<S2SV_ModStart> * acl_len, u32 * hdrlen <S2SV_ModEnd> ) { __be32 <S2SV_ModStart> int status ; uint32_t attrlen, bitmap [ 3 ] <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> goto out ; hdrlen = ( u8 * ) xdr -> p - ( u8 * ) iov -> iov_base ; recvd = req -> rq_rcv_buf. len - hdrlen <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen, recvd ) ; * acl_len = attrlen ; } else { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen, recvd ) ; return - EINVAL ; } xdr_read_pages ( xdr, attrlen ) ; * acl_len = attrlen <S2SV_ModEnd> ; } <S2SV_null>",0
522,<S2SV_ModStart> fv -> b ) { if ( fv -> b. sf -> fv!= & fv -> b. nextsame ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 2 ) return ( false ) ; else SFClearAutoSave ( sf ) ; } } else if ( SFCloseAllInstrs ( fv -> b. sf -> fv!= & fv -> b ) { if ( fv -> b. nextsame!= NULL || fv -> b. sf -> fv!= & fv -> b ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 2 ) return ( false ) ; } else if ( AskChanged ( fv -> b. sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 0 ) return ( false ) ; else SFClearAutoSave ( sf ) ; },0
523,"<S2SV_ModStart> % 4096 == 0 ) ; if ( msix_tab_size < 4 ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> msix <S2SV_blank> tab <S2SV_blank> size <S2SV_blank> %d\\n"", __func__, msix_tab_size ) ; return ; }",0
524,<S2SV_ModStart> = timespec_to_ns ( & <S2SV_ModStart> = timespec_to_ns ( & <S2SV_ModStart> = timespec_to_ns ( &,1
525,"<S2SV_ModStart> if (! js_doregexec ( J, <S2SV_ModEnd> re -> prog",1
526,<S2SV_ModStart> ( Field ( ( value ) <S2SV_ModStart> 1 ) ) == 0,0
527,"<S2SV_ModStart> multipart_media ; struct range_data * rangelist = & clt -> clt_ranges ; struct range_data * range <S2SV_ModEnd> ; size_t content_length <S2SV_ModStart> ; size_t content_length = 0 <S2SV_ModStart> nranges, ret <S2SV_ModEnd> ; char content_range <S2SV_ModStart> path ) ; rangelist = parse_ranges ( clt, <S2SV_ModEnd> range_str, st <S2SV_ModStart> st -> st_size, & nranges ) ; if ( rangelist == NULL ) { code = 416 ; ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> */%lld"", rangelist -> start, rangelist -> end, st -> st_size ) ; errstr = ""failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> file <S2SV_blank> buffer"" ; goto abort ; } <S2SV_ModEnd> if ( nranges <S2SV_ModStart> 1 ) { range = & rangelist [ 0 ] ; <S2SV_ModStart> ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> %lld-%lld/%lld"", rangelist -> start, rangelist -> end, st -> st_size ) ; if ( kv_add ( & resp -> http_headers, ""Content-",0
528,"<S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, KSZ8851_ISR ) ; if ( ( isr & KSZ8851_ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> 0 ) { ksz8851WriteReg ( interface, KSZ8851_ISR, KSZ8851_ISR_LCIS <S2SV_ModEnd> ) ; n <S2SV_ModStart> = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_RXIS <S2SV_ModEnd> ) ; n <S2SV_ModStart> = ksz8851ReadReg ( interface, KSZ8851_RXMIR ) & RXMIR_RXMA_MASK <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( interface, KSZ8851_IER, ier <S2SV_ModEnd> ) ; flag <S2SV_ModStart> ( interface, KSZ8851_IER, ier <S2SV_ModEnd> ) ; return",0
529,"<S2SV_ModStart> void encode_quantization ( VP9_COMMON * const <S2SV_ModEnd> cm, struct <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
530,"<S2SV_ModStart> = AV_PIX_FMT_PAL8 ; avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ;",0
531,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> msglen ) ),0
532,<S2SV_ModStart> tmp ) { goto parse_scheme_end <S2SV_ModEnd> ; } case <S2SV_ModStart> ) ) { goto parse_scheme_end <S2SV_ModEnd> ; } state <S2SV_ModStart> end ) ; parse_scheme_end : state -> offset = 0 ;,0
533,"<S2SV_ModStart> struct fb_vblank vblank ; memset ( & vblank, 0, sizeof ( vblank ) )",1
534,<S2SV_ModStart> flags ) { spin_lock ( & ctx -> cancel_lock ) ; <S2SV_ModStart> } } else { __timerfd_remove_cancel <S2SV_ModEnd> ( ctx ) <S2SV_ModStart> ) ; } spin_unlock ( & ctx -> cancel_lock ) ;,1
535,"<S2SV_ModStart> ) ) ; if ( c16 -> Curves [ i ] == NULL ) { for ( j = 0 ; j < i ; j ++ ) { _cmsFree ( ContextID, c16 -> Curves [ j ] ) ; _cmsFree ( ContextID, c16 -> Curves ) ; _cmsFree ( ContextID, c16 -> Curves ) ; return NULL ; } }",0
536,<S2SV_ModStart> { if (! dev_name ||,1
537,"<S2SV_ModStart> ) ; } if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; <S2SV_ModStart> 1 ) ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; atalk_print ( ndo, p, length ) ; return ( 1 ) ; case ETHERTYPE_PPPOED : case ETHERTYPE_PPPOES2 : pppoe_print ( ndo, p, length, src, dst ) ; return ( 1 ) ; case ETHERTYPE_PPPOED1 : case ETHERTYPE_PPPOED1 : if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, ""et1 <S2SV_blank> "" ) ) ; atalk_print ( ndo, p, length ) ; return ( 1 ) ; case ETHERTYPE_PPPOES1 : case ETHERTYPE_PPPOES2 : if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, ""et1 <S2SV_blank> "" ) ) ; atalk_print ( ndo, p, length ) ; return ( 1",0
538,"<S2SV_ModStart> peekonly ) { if ( buf ) memcpy_fromio ( buf <S2SV_ModEnd>, bus -> <S2SV_ModStart> -> m_pdwGetRing + sizeof ( * msg ), buf_size ) ; } else { if ( buf ) memcpy_fromio ( buf <S2SV_ModEnd>, bus -> <S2SV_ModStart> -> m_pdwGetRing + sizeof ( * msg ), space_rem - sizeof ( * msg ) ) ; } else { if ( buf ) memcpy_fromio ( buf <S2SV_ModEnd>, bus -> <S2SV_ModStart> -> m_pdwGetRing + sizeof ( * msg ), space_rem - sizeof ( * msg ) ) ; } } else { if ( buf ) memcpy_fromio ( buf <S2SV_ModEnd>, bus -> <S2SV_ModStart> -> m_pdwGetRing + sizeof ( * msg ), bus -> m_pdwGetRing, buf_size - sizeof ( * msg ) ) ; } else { if ( buf ) memcpy_fromio ( buf <S2SV_ModEnd>, bus -> <S2SV_ModStart> -> m_pdwGetRing + sizeof ( * msg ), space_rem - sizeof ( * msg ) ) ; } else { if ( buf ) memcpy_fromio ( buf <S2SV_ModEnd>, bus -> <S2SV_ModStart> -> m",0
539,<S2SV_ModStart> TSRMLS_CC ) ; if ( new_len > INT_MAX ) { efree ( replaced ) ; RETURN_FALSE ; },1
540,"<S2SV_ModStart> } if ( ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == NULL ) { log_debug ( ""%s: <S2SV_blank> EC_PUBKEY <S2SV_blank> bio <S2SV_blank> failed: <S2SV_blank> %s"", __func__, print_map ( peerec, ikev2_id_map ) ) ; goto sslerr ; } <S2SV_ModStart> ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) { log_debug ( ""%s: <S2SV_blank> EC_PUBKEY <S2SV_blank> bio <S2SV_blank> failed: <S2SV_blank> %s"", __func__, print_map ( peerec, ikev2_id_map ) ) ; goto sslerr ; }",0
541,<S2SV_ModStart> t1_getline ( ) ; free ( t1_buf_array ) ; t1_buf_ptr = eol ( t1_buf_array ) ; free ( t1_line_array,0
542,"<S2SV_ModStart> BLOCK_SIZE bsize, int subsize, PC_TREE * pc_tree <S2SV_ModStart> -> e_mbd ; const <S2SV_ModStart> bsl = b_width_log2_lookup [ bsize ], hbs = ( 1 << bsl ) / 4 ; const int partition = partition_lookup [ bsl ] <S2SV_ModEnd> [ subsize ] <S2SV_ModStart> case PARTITION_NONE : set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; <S2SV_ModEnd> break ; case <S2SV_ModStart> case PARTITION_VERT : set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; if ( mi_col + hbs < cm -> mi_cols ) { set_modeinfo_offsets ( cm, xd, mi_row, mi_col + hbs ) ; * ( xd -> mi [ 0 ] ) =",0
543,"<S2SV_ModStart> name ) ; if (! strcmp ( key, ""url"" ) && value && looks_like_command_line_option ( value ) ) data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_URL, ""disallowed <S2SV_blank> submodule <S2SV_blank> url: <S2SV_blank> %s"", value ) ;",1
544,"<S2SV_ModStart> = 0 ; int block_ptr = 0 ; int pixel_x, pixel_y ; int total_pixels <S2SV_ModStart> ; while ( stream_ptr < chunk_size ) { if ( stream_ptr + 4 > s -> size ) { av_log ( s -> avctx, AV_LOG_ERROR, ""Bad <S2SV_blank> MOV <S2SV_blank> chunk <S2SV_blank> size; <S2SV_blank> using <S2SV_blank> MOV <S2SV_blank> chunk <S2SV_blank> size\\n"" ) ; break ; } <S2SV_ModStart> ] ) ; if ( stream_ptr + 4 > s -> size ) { av_log ( s -> avctx, AV_LOG_ERROR, ""Bad <S2SV_blank> MOV <S2SV_blank> chunk <S2SV_blank> size; <S2SV_blank> using <S2SV_blank> MOV <S2SV_blank> chunk <S2SV_blank> size\\n"" ) ; break ; } <S2SV_ModStart> ] ) ; if ( stream_ptr + 4 > s -> size ) { av_log ( s -> avctx, AV_LOG_ERROR, ""Bad <S2SV_blank> MOV <S2SV_blank> chunk <S2SV_blank> size\\n"" ) ; break ; } <S2SV_ModStart> ] ) ; if ( stream_ptr + 4 > s -> size ) { av_log ( s -> avctx, AV_LOG_ERROR, ""Bad <S2SV_blank> MOV <S2SV_blank> chunk <S2SV_blank> size; <S2SV_blank> using <S2SV_blank> MOV <S2SV_blank> chunk <S2SV_blank> size\\n""",0
545,<S2SV_ModStart> cnt ) { size_t <S2SV_ModEnd> n ; assert,0
546,<S2SV_ModStart> ; __be16 type ; if ( NAPI_GRO_CB ( skb ) -> encap_mark ) goto out ; NAPI_GRO_CB ( skb ) -> encap_mark = 1,1
547,<S2SV_ModStart> ; if ( numrows < 0 || numcols < 0 ) { return 0 ; } if (,1
548,"<S2SV_ModStart> { if ( string_bytes_concat_buffer ( ( TPM2B_MAX_BUFFER * ) & key, & ( session -> sessionKey. b ) ) ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TPM2B_MAX_BUFFER * ) & key, & ( session -> nonceNewer. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TPM2B_MAX_BUFFER * ) & key, & ( session -> salt. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TPM2B_MAX_BUFFER * ) & key, & ( session -> nonceNewer. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TPM2B_MAX_BUFFER * ) & key, & ( session -> salt. b ) ) ; if (!",0
549,<S2SV_ModStart> key_ref ) ; if ( key -> state == KEY_IS_UNINSTANTIATED <S2SV_ModEnd> ) goto can_read_key,0
550,"<S2SV_ModStart> ps_dec -> u2_cur_slice_num = MAX ( 0, ps_dec -> u2_cur_slice_num - 1 ) ; if ( 0 == ps_dec -> u2_cur_slice_num ) { ps_dec -> u2_cur_slice_num = MIN ( 0, ps_dec -> u2_cur_slice_num - 1 ) ; if ( 0 == ps_dec -> u2_cur_slice_num - 1 ) { ps_dec -> u2_cur_slice_num = MAX ( 0, ps_dec -> u2_cur_slice_num - 1 ) ; if ( 0 == ps_dec -> u2_cur_slice_num ) { ps_dec -> u2_cur_slice_num = MIN ( 0, ps_dec -> u2_cur_slice_num - 1 ) ; if ( 0 == ps_dec -> u2_cur_slice_num - 1 ) { ps_dec -> u2_cur_slice_num = MAX ( 0, ps_dec -> u2_cur_slice_num - 1 ) ; } } else { ps_dec -> u2_cur",0
551,"<S2SV_ModStart> var_off ) ; if ( src_known &&! dst_known ) { verbose ( env, ""R%d <S2SV_blank> tried <S2SV_blank> to <S2SV_blank> add <S2SV_blank> from <S2SV_blank> different <S2SV_blank> pointers <S2SV_blank> or <S2SV_blank> scalars\\n"", dst_reg -> var_off ) ; return - EINVAL ; } <S2SV_ModStart> case BPF_SUB : if ( src_known &&! dst_known ) { verbose ( env, ""R%d <S2SV_blank> tried <S2SV_blank> to <S2SV_blank> sub <S2SV_blank> from <S2SV_blank> different <S2SV_blank> pointers <S2SV_blank> or <S2SV_blank> scalars\\n"", dst_reg -> var_off ) ; return - EINVAL ; }",0
552,<S2SV_ModStart> ; if ( cifs_sb -> mnt_cifs_flags & CIFS_MOUNT_NOSUID ) { if ( direntry -> d_inode -> i_nlink!= 0 && direntry -> d_inode -> i_nlink!= direntry -> d_inode -> i_nlink + 1 && direntry -> d_inode -> i_nlink!= direntry -> d_inode -> i_nlink + 1 && direntry -> d_inode -> i_nlink!= direntry -> d_inode -> i_nlink + 1 && direntry -> d_inode -> i_nlink!= direntry -> d_inode -> i_nlink + 1 && direntry -> d_inode -> i_nlink!= direntry -> d_inode -> i_nlink + 2 && direntry -> d_inode -> i_nlink!= direntry -> d_inode -> i_nlink + 2 && direntry -> d_inode -> i_nlink!=,0
553,"<S2SV_ModStart> struct vfio_irq_info irq_info ; memset ( & irq_info, 0, sizeof ( irq_info ) ) ; <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> num_regions = VFIO_PCI_NUM_REGIONS <S2SV_ModStart> break ; case VFIO_PCI_BAR0_REGION_INDEX : info. offset = VFIO_PCI_BAR0_REGION_INDEX_TO_OFFSET ( info. index ) ; info. size = pdev -> bar_size ; break ; case VFIO_PCI_BAR5_REGION_INDEX : info. offset = VFIO_PCI_BAR5_REGION_INDEX_TO_OFFSET ( info. index ) ; info. flags = VFIO_REGION_INFO_FLAG_WRITE | VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO_FLAG_WRITE ; break ; case VFIO_PCI_BAR5_REGION_INDEX : info. offset = VFIO_PCI_BAR5_REGION_INDEX_TO_OFFSET ( info. index ) ; info. size = pdev -> bar_size <S2SV_ModEnd> ; break ;",0
554,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ext4_has_inline_data ( inode,1
555,<S2SV_ModStart> -> filesize = UINT64_MAX <S2SV_ModEnd> ; s ->,1
556,"<S2SV_ModStart> ; if ( rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ) ) ) goto out ;",0
557,"<S2SV_ModStart> char * in, size_t olen <S2SV_ModStart> += 4 ; if ( len == olen ) return len ; <S2SV_ModStart> '=' ) { if ( len == olen ) return len ; <S2SV_ModStart> '=' ) { if ( len == olen ) return len ;",1
558,<S2SV_ModStart> gc ) ; <S2SV_ModEnd> return 0 ;,1
559,"<S2SV_ModStart> i ; size_t bytes, <S2SV_ModStart> ++ ) { bytes <S2SV_ModEnd> = min_t ( <S2SV_ModStart>, 0, bytes <S2SV_ModEnd> ) ; cur_len <S2SV_ModStart> copied ) ; if ( copied < bytes ) break ; <S2SV_ModStart> save_len - cur_len ; if (! cur_len ) { for ( i = 0 ; i < nr_pages ; i ++ ) put_page ( wdata -> pages [ i ] ) ; kfree ( wdata ) ; rc = - EFAULT ; break ; } for ( ; nr_pages > i + 1 ; nr_pages -- ) put_page ( wdata -> pages [ nr_pages - 1 ] )",1
560,<S2SV_ModStart> & CP_RDESC_SWAPPED_MIN_MAX ) ) return rdesc ; if ( * rsize < 4,1
561,"<S2SV_ModStart> ) { int number_of_layers, number_of_keyframes, <S2SV_ModEnd> encode_frame_count ; int <S2SV_ModStart> double y_scale ; SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> ; si = get_svc_internal <S2SV_ModEnd> ( svc_ctx ) <S2SV_ModStart> ( svc_ctx ) <S2SV_ModEnd> ; svc_log ( <S2SV_ModStart> ""\\n"" ) ; number_of_layers = si -> layers ; for ( i = 0 ; i < <S2SV_ModEnd> si -> layers <S2SV_ModStart> ++ i ) { number_of_frames = encode_frame_count ; if ( svc_ctx -> encoding_mode == ALT_INTER_LAYER_PREDICTION_IP && <S2SV_ModEnd> ( i == <S2SV_ModStart> i ) { number_of_layers = i ; } svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes=[%u]\\n"", i, number_of_layers, number_of_keyframes, si -> bytes_sum [ i ] ) ; if ( svc_ctx -> encoding_mode == ALT_INTER_LAYER_PREDICTION_",0
562,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decode ( BYTE <S2SV_ModStart> BYTE * out, UINT32 outSize <S2SV_ModStart> 5 ) { if ( outSize < 1 ) return FALSE ; outSize -- ; <S2SV_ModStart> 4 ; } if ( outSize < len ) return FALSE ; outSize -= len ; <S2SV_ModStart> } else { if ( outSize < 1 ) return FALSE ; outSize -- ; * out ++ = value ; left -- ; } } if ( ( outSize < 4 ) || ( left < 4 ) ) return FALSE ; memcpy ( out, in, 4 ) ; return TRUE <S2SV_ModEnd> ; } <S2SV_null>",1
563,"<S2SV_ModStart> ; if ( is_altscreen && screen -> buffer ) { if ( <S2SV_ModStart> screen -> sb_buffer ) { vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = NULL ; } else { vterm_allocator_free ( screen -> vt, <S2SV_ModStart> VTermScreenCell ) * new_cols ) ; } } else if (! is_altscreen && screen -> buffer ) { vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; } else { vterm_allocator_free ( screen -> vt, screen -> buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; } else { vterm_allocator_free ( screen -> vt, screen -> buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; }",0
564,"<S2SV_ModStart> n ) { int literal_start = 0 ; int in_named_escape = 0 ; int result = 0 ; assert ( * str <= end ) ; assert ( <S2SV_ModEnd> * literal == <S2SV_ModStart> NULL ) ; for ( ; * str < end ; ( * str ) ++ ) { char ch = * * str ; if (! in_named_escape && * ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( <S2SV_ModEnd> ch == '{' <S2SV_ModStart> '}' ) { <S2SV_ModEnd> if ( recurse_lvl <S2SV_ModStart> 0 ) { if ( * str + 1 < end ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return - 1 ; } literal_start = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '{' || ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; *",0
565,"<S2SV_ModStart> * m, size_t <S2SV_ModEnd> bufsize ) { <S2SV_ModStart> * buf ; <S2SV_ModEnd> JAS_DBGLOG ( 100 <S2SV_ModStart> 100, ( ""mem_resize(%p, <S2SV_blank> %zu)\\n"" <S2SV_ModEnd>, m, <S2SV_ModStart> ) ) ; if (! buf ) { jas_eprintf ( ""mem_resize <S2SV_blank> failed\\n"" ) ; return - 1 ; }",0
566,<S2SV_ModStart> = create_dump_dir_from_problem_data ( pd <S2SV_ModEnd> ) ; char,0
567,"<S2SV_ModStart> ( symInterpretMatchMaskNames, pred_txt <S2SV_ModEnd>, pred_rtrn )",0
568,<S2SV_ModStart> pcrypt_free ( struct aead_instance <S2SV_ModEnd> * inst ) <S2SV_ModStart> * ctx = aead_instance_ctx <S2SV_ModEnd> ( inst ),1
569,<S2SV_ModStart> ; if ( ( x1 + w1 ) > ( ptr -> width ) || ( x1 + h1 ) > ( ptr -> height ) || ( y1 + h1 ) > ( ptr -> width ) || ( y1 + h1 ) ) { if ( w1 > ( ptr -> height ) || ( w1 > ( ptr -> width - w1 ) ) { if ( h1 > ( ptr -> height - h1 ) ) { if ( w1 > ( ptr -> width - w1 ) ) { if ( w1 > ( ptr -> width - w1 ) ) { if ( h1 > ( ptr -> height - h1 ) ) { if ( w1 > ( ptr -> width - w1 ) ) { if ( h1 > ( ptr -> width - h1 ) ) { if ( w1 > ( ptr -> width - w1 ) ) { if ( h1 > ( ptr -> height - h1 ) ) { if ( w1 > ( ptr -> width - w1 ) ) { if ( w1 > ( ptr -> width - w1 ) ) { if ( h1 > ( ptr -> height - h1 ) ) { if ( w1 > ( ptr -> width,0
570,"<S2SV_ModStart> image ) ; count = <S2SV_ModEnd> ReadBlob ( image <S2SV_ModStart> iris_info. name ) ; if ( count!= sizeof ( iris_info. name ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> filler ) ; if ( count!= sizeof ( iris_info. filler ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) <S2SV_ModEnd> ; image -> <S2SV_ModStart> } if ( <S2SV_ModEnd> ( image_info ->",0
571,<S2SV_ModStart> neigh ) { if ( in6_dev -> cnf. hop_limit < <S2SV_ModEnd> ra_msg -> icmph <S2SV_ModStart> ra_msg -> icmph + <S2SV_ModEnd> ra_msg -> icmph <S2SV_ModStart> -> icmph + <S2SV_ModEnd> ra_msg -> icmph <S2SV_ModStart> ra_msg -> icmph + <S2SV_ModEnd> ra_msg -> icmph <S2SV_ModStart> -> icmph + <S2SV_ModEnd> ra_msg -> icmph <S2SV_ModStart> -> icmph + <S2SV_ModEnd> ra_msg -> icmph <S2SV_ModStart> ra_msg -> icmph + <S2SV_ModEnd> ra_msg -> icmph <S2SV_ModStart> ra_msg -> icmph + <S2SV_ModEnd> ra_msg -> icmph <S2SV_ModStart> ra_msg -> icmph + <S2SV_ModEnd> ra_msg -> icmph <S2SV_ModStart> ra_msg -> icmph + <S2SV_ModEnd> ra_msg -> icmph <S2SV_ModStart> ra_msg -> icmph + <S2SV_ModEnd> ra_msg -> icmph <S2SV_ModStart> ra_msg -> icmph + <S2SV_ModEnd> ra_msg -> icmph <S2SV_ModStart> ra_msg -> icmph + <S2SV_ModEnd> ra_msg -> icmph <S2SV_ModStart> ra_msg -> icmph + <S2SV_ModEnd> ra_msg -> icmph <S2SV_ModStart> ra_msg -> icmph,0
572,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
573,<S2SV_ModStart> * up ; int ulen ; <S2SV_ModStart> rp ) ; ulen = xfrm_replay_state_esn_len ( up ) ; if ( nla_len ( rp ) < ulen || <S2SV_ModEnd> xfrm_replay_state_esn_len ( replay_esn <S2SV_ModStart> replay_esn )!= ulen <S2SV_ModEnd> ) return -,1
574,"<S2SV_ModStart> int ret = proc_dointvec_minmax <S2SV_ModEnd> ( table,",1
575,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; this_mv",0
576,<S2SV_ModStart> opj_calloc ( ( size_t ) ( <S2SV_ModStart> -> numlayers + 1U <S2SV_ModEnd> ) * l_step_l,0
577,"<S2SV_ModStart> name ), ""crypto-%s"" <S2SV_ModEnd>, name )",1
578,"<S2SV_ModStart> ps ) { u32 <S2SV_ModEnd> prev_legacy, cur_legacy <S2SV_ModStart> -> flags ; memset ( & kvm -> arch. vpit -> pit_state. channels [ 0 ], 0, sizeof ( kvm -> arch. vpit -> pit_state. channels ) ) ; <S2SV_ModStart> start ) ; <S2SV_ModEnd> kvm_pit_load_count ( kvm",0
579,"<S2SV_ModStart> void encode_nonrd_sb_row ( const VP9_COMMON * cm, MACROBLOCKD * xd <S2SV_ModEnd>, const TileInfo <S2SV_ModStart> mi_col ; const <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> * * mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> -> mi_grid_visible + idx_str <S2SV_ModEnd> ; BLOCK_SIZE bsize <S2SV_ModStart> BLOCK_SIZE bsize ; memset <S2SV_ModEnd> ( & cpi <S2SV_ModStart> -> prev_mi_grid_visible + idx_str <S2SV_ModEnd> ) ; switch <S2SV_ModStart> case VAR_BASED_PARTITION : set_offsets ( cpi, tile, mi_row, mi_col, BLOCK_64X64, & dummy_rate, & dummy_dist ) ; break ; case SOURCE_VAR_BASED_PARTITION : set_source_var_based_partition ( cpi, tile, mi_8x8, mi_col, BLOCK_64X64, & dummy_rate, & dummy_dist ) ; break ; case SOURCE_VAR_BASED_PARTITION : set_offsets ( cpi, tile, mi_row, mi_col, BLOCK_64X64, & dummy_rate, & dummy_dist ) ; break ; case SOURCE_VAR_",0
580,"<S2SV_ModStart> 1 ) ; if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf = opipe",1
581,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
582,<S2SV_ModStart> } else { # ifdef UPNP_ENABLE_POST_WRITE <S2SV_ModStart> return HTTP_UNAUTHORIZED ; # else return HTTP_NOT_FOUND ; # endif,1
583,"<S2SV_ModStart> char * dir <S2SV_ModEnd> = ""/etc"" ; <S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> tmpname, dir )",0
584,<S2SV_ModStart> blkg ) ) <S2SV_ModEnd> return PTR_ERR ( <S2SV_ModStart> blkg ) ; <S2SV_ModEnd> q -> root_blkg,1
585,<S2SV_ModStart> ; if ( bpp == 8 && <S2SV_ModStart> ] == 0x00 <S2SV_ModEnd> ) { if <S2SV_ModStart> ] == 0x00 <S2SV_ModEnd> ) { if <S2SV_ModStart> ] == 0x00 <S2SV_ModEnd> ) { if <S2SV_ModStart> } else { if ( bpp == 8 &&,0
586,"<S2SV_ModStart> ; krb5_data rspac ; const char * tgt_realm = krb5_principal_get_realm ( context, krbtgt -> entry. principal ) <S2SV_ModStart>, cp, tgt_realm,",1
587,<S2SV_ModStart> mnt ) ; nd -> last_type = LAST_BIND ;,1
588,"<S2SV_ModStart> struct usbdevfs_connectinfo ci ; memset ( & ci, 0, sizeof ( ci ) ) ; ci <S2SV_ModEnd>. devnum = <S2SV_ModStart> dev -> devnum ; ci <S2SV_ModEnd>. slow = <S2SV_ModStart> speed == USB_SPEED_LOW <S2SV_ModEnd> ; if (",1
589,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> * opt, u32 <S2SV_ModEnd> optlen ) { <S2SV_ModStart> & 3 ) { <S2SV_ModStart> IPOPT_END ; } } <S2SV_ModStart> ( optlen && ip_options_compile ( net, & opt -> opt, NULL ) ) { kfree ( opt ) ; return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
590,<S2SV_ModStart> rmtblkcnt ; } args -> rmtvaluelen2 = args -> rmtvaluelen ;,0
591,"<S2SV_ModStart> LARGE_INTEGER tmp ; if (! NT_SUCCESS ( memcpy ( Irp -> AssociatedIrp. SystemBuffer, & tmp, 4 ) ) ) { Irp -> IoStatus. Status = STATUS_INVALID_PARAMETER ; return NT_STATUS_INVALID_PARAMETER ; } <S2SV_ModStart> LARGE_INTEGER tmp ; if (! NT_SUCCESS ( memcpy ( Irp -> AssociatedIrp. SystemBuffer, & tmp, 4 ) ) ) { Irp -> IoStatus. Status = STATUS_INVALID_PARAMETER ; break ; } <S2SV_ModStart> ; if (! NT_SUCCESS ( memcpy ( Irp -> AssociatedIrp. SystemBuffer, & tmp, 4 ) ) ) { Irp -> IoStatus. Status = STATUS_INVALID_PARAMETER ; return NT_STATUS_INVALID_PARAMETER ; } <S2SV_ModStart> LARGE_INTEGER tmp ; if (! NT_SUCCESS ( memcpy ( Irp -> AssociatedIrp. SystemBuffer, & tmp, 4 ) ) { Irp -> IoStatus. Status = STATUS_INVALID_PARAMETER ; break ; } <S2SV_ModStart> LARGE_INTEGER tmp ; if (! NT_SUCCESS ( memcpy ( Irp -> AssociatedIrp. SystemBuffer, &",0
592,"<S2SV_ModStart> if ( connection == NULL || strcmp ( connection, ""close"" )!= 0 ) goto error ; else { bool found_upgrade = false ; double count ; sds * tokens = sdssplitlen ( connection, strlen ( connection ), "","", 1, & count ) ; if ( count == 0 ) goto error ; if ( strcasecmp ( token, ""Upgrade"" ) == 0 ) goto error ; sdsfreesplitres ( tokens, count ) ; if (! found_upgrade ) goto error ; for ( i = 0 ; i < count ; i ++ ) { sds token = tokens [ i ] ; sdstrim ( token, "" <S2SV_blank> "" ) ; if ( strcasecmp ( token, ""Upgrade"" ) == 0 ) goto error ; log_debug ( "" <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
593,<S2SV_ModStart> uint16 nif = 0 ; uint16 len <S2SV_ModStart> 0 ; } len = 0 ; <S2SV_ModStart> -> description ) { len = <S2SV_ModEnd> strlen ( d <S2SV_ModStart> -> name ) ; if ( len > PCAP_ERRBUF_SIZE - 1 ) goto error ; <S2SV_ModStart> -> name ) { len = PCAP_ERRBUF_SIZE - 1 ; goto error ; } <S2SV_ModStart> -> name ) { len = PCAP_ERRBUF_SIZE - 1 ; goto error ; } <S2SV_ModStart> -> name ) { if ( len > PCAP_ERRBUF_SIZE - 1 ) goto error ; } <S2SV_ModStart> -> addresses ) { len = PCAP_ERRBUF_SIZE - 1 ; goto error ; },0
594,"<S2SV_ModStart> struct dump_dir * dd ; int status ; <S2SV_ModStart> DEFAULT_DUMP_DIR_MODE ) ; if ( g_settings_nMaxCrashReportsSize > 0 ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; exit ( 1 ) ; } dd = dd_create ( path, client_uid, DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } dd_create_basic_files ( dd, pid, NULL ) ; dd_save_text ( dd, FILENAME_ABRT_VERSION, VERSION ) ; dd_save_text ( dd, FILENAME_CMDLINE, cmdline ) ; free ( cmdline ) ; }",0
595,"<S2SV_ModStart> 1 ) ; if ( ( image -> columns % 2 )!= 0 ) { index = ConstrainColormapIndex ( image, ( * p >> 2 ) & 0x3 ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p <S2SV_ModEnd> ++ ; } <S2SV_ModStart> % 2 )!= 0 ) { index = ( ( * p ) & 0x80 )? 0x01 : 0x00 ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } <S2SV_ModEnd> p += 2 <S2SV_ModStart> % 2 )!= 0 ) { index = ( ( * p ) & 0x80 )? 0x01 : 0x00 ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } if ( ( ssize_t ) ( image -> columns % 2 )!= 0 ) { index = ( ( * p ) & 0x80 )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++",0
596,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
597,"<S2SV_ModStart>, int tstype, bool opt_id <S2SV_ModStart> ; int err ; serr = SKB_EXT_ERR ( skb ) <S2SV_ModStart> ee_info = tstype ; serr -> opt_id = opt_id <S2SV_ModStart> ee_info = tstype <S2SV_ModEnd> ; if (",0
598,"<S2SV_ModStart> 0 ) { if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""UnexpectedEndOfFile"" ) ;",0
599,<S2SV_ModStart> = len ; bp += 4 ; len -= 4 ; <S2SV_ModStart> = len ; bp += 4 ; <S2SV_ModStart> = len ; len -= 4 ;,0
600,"<S2SV_ModStart>, CONST_STR_LEN ( ""%2f?"", CONST_STR_LEN ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/%2f?"", CONST_STR_LEN ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/%2f?"", CONST_STR_LEN ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN (",0
601,<S2SV_ModStart> ; if ( task -> ptrace_uid && task -> ptrace_gid <S2SV_ModEnd> &&! ptrace_has_cap,0
602,<S2SV_ModStart> <= w - ( int ),1
603,<S2SV_ModStart> page ) ; <S2SV_ModEnd> memset ( addr,1
604,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
605,"<S2SV_ModStart> } if ( ( ps_parse -> s_sei_params. i1_sei_parameters_remaining < 0 ) || ( ps_parse -> s_sei_params. i1_sei_parameters_remaining > ps_bitstrm -> i1_max_payload ) ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> sei <S2SV_blank> parameters\\n"", __func__ ) ; ps_parse -> s_sei_params. i1_sei_parameters_remaining = 0 ; } if ( <S2SV_ModStart> ps_parse -> s_sei_params. i1_sei_parameters_remaining < 0 ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> sei <S2SV_blank> parameters\\n"", __func__ ) ; ps_parse -> s_sei_params. i1_sei_parameters_remaining = 0 ; break ; } <S2SV_ModStart> ps_sps ) ; if ( ( ps_parse -> s_sei_params. i1_sei_parameters_remaining < 0 ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> sei <S2SV_blank> parameters\\n"", __func__ ) ; ps_parse -> s_sei",0
606,"<S2SV_ModStart> * priv ; if (! port -> interrupt_out_urb ||! port -> interrupt_in_urb ) { dev_err ( & port -> dev, ""required <S2SV_blank> endpoint <S2SV_blank> is <S2SV_blank> missing\\n"" ) ; return - ENODEV ; }",1
607,<S2SV_ModStart> ) ) ; if (! dd -> per_sdma ) { ret = - ENOMEM ; goto err_free_per_sdma ; },0
608,<S2SV_ModStart> -> device_data ; cancel_autoload_drivers ( ) ;,1
609,"<S2SV_ModStart>, int rep_quick, my_bool verbose <S2SV_ModStart> ) ) { if ( verbose ) printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( share -> pack. data ) ) ; else printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( share -> pack. data ) ) ; }",0
610,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> p == q ) || ( <S2SV_ModEnd> size < 16 <S2SV_ModStart> size < 16 ) || ( <S2SV_ModEnd> size > 256 <S2SV_ModStart> size > 256 ),1
611,"<S2SV_ModStart> uint dblocks = xfs_attr3_rmt_blocks <S2SV_ModEnd> ( mp,",1
612,<S2SV_ModStart> } pairs = safe_calloc <S2SV_ModEnd> ( pcount *,0
613,"<S2SV_ModStart> val ) ; if (! strcmp ( var, ""command"" ) ||! strcmp ( var, ""rspfile"" ) ||! strcmp ( var, ""rspfile_content"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name )",0
614,<S2SV_ModStart> ; if ( IS_NOP ( <S2SV_ModStart> ; if ( IS_NOP ( <S2SV_ModStart> ; if ( IS_NOP ( <S2SV_ModStart> ; if ( IS_NOP ( <S2SV_ModStart> ; if ( IS_NOP ( <S2SV_ModStart> ; if ( IS_NOP ( <S2SV_ModStart> ; if ( IS_NOP ( <S2SV_ModStart> ; if ( IS_NOP ( <S2SV_ModStart> ; if ( IS_NOP ( <S2SV_ModStart> ; if ( IS_NOP ( <S2SV_ModStart> ; if ( IS_NOP ( <S2SV_ModStart> ; if ( IS_NOP ( <S2SV_ModStart> ; if ( IS_NOP ( <S2SV_ModStart> ; if ( IS_NOP ( <S2SV_ModStart> ; if ( IS_NOP ( <S2SV_ModStart> ; if ( IS_NOP ( <S2SV_ModStart> ; if ( IS_NOP ( <S2SV_ModStart> ; if ( IS_NOP (,0
615,"<S2SV_ModStart> query ) ; if ( mlen > sizeof ( query ) ) { agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", query, c -> bind -> kind ) ; agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", query, c -> id, c -> buf ) ; } else if ( mlen > sizeof ( query ) ) { agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", query, c -> bind -> kind ) ; agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", query, c -> id, c -> buf ) ; } <S2SV_ModStart> if ( mlen > sizeof ( query ) ) { agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", query, c -> bind -> kind ) ; agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", query,",0
616,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; <S2SV_ModEnd> int i, <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16 <S2SV_ModStart> ++ j ) out <S2SV_ModEnd> [ j *",1
617,"<S2SV_ModStart> error ) ) { g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s.%s"", tmpfile_name, maybe_quote ( app ) ) ; g_auto ( GStrv ) groups = g_strv_new ( ) ; if (! g_key_file_save ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s.%s"", tmpfile_name, g_strdup_printf ( ""export-desktop-XXXXXX.%s"", escaped_branch ) ) ; g_auto ( GStrv ) new_argv = g_strv_new ( ) ; if (! g_key_file_save ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; for ( i = 0 ; i < new_data_len ; i ++ ) { g_key_file_free ( keyfile ) ; g_key_file_",0
618,"<S2SV_ModStart> fh_dentry ) ; error = fh_want_write ( fh ) ; if ( error ) <S2SV_ModEnd> goto out_errno ; <S2SV_ModStart> goto out_errno ; fh_lock ( fh ) ; error = set_posix_acl ( inode, ACL_TYPE_ACCESS, argp -> acl_access <S2SV_ModEnd> ) ; if <S2SV_ModStart> error ) goto out_drop_lock ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT <S2SV_ModEnd>, argp -> <S2SV_ModStart> argp -> acl_default ) ; out_drop_lock : fh_unlock ( fh ) ; <S2SV_ModEnd> fh_drop_write ( fh",1
619,<S2SV_ModStart> * ue ; if <S2SV_ModEnd> ( tree_root == <S2SV_ModStart> == NULL ) return 0,1
620,"<S2SV_ModStart> char * temp_filename = osi_calloc ( <S2SV_ModEnd> strlen ( filename <S2SV_ModStart> ( strlen ( filename <S2SV_ModEnd> ) + 5 <S2SV_ModStart> (! temp_filename ) ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; goto error ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } for ( const list_node_t * node = list_begin ( config -> sections ) ; node!= list_end ( config -> sections ) ) { const section_t * section = ( const section_t * ) list_node ( node ) ; fprintf ( fp, ""[%s]\\n"", section -> name ) ; fprintf ( fp, ""%s <S2SV_blank> = <S2SV_blank> %s\\n"", entry -> key, entry -> value ) ; } if ( list_next (",0
621,<S2SV_ModStart> elen ) ; elen += sizeof ( struct pathComponent ) ; <S2SV_ModStart> > 0 ) { elen += pc -> lengthComponentIdent ; break ; } <S2SV_ModEnd> case 2 : <S2SV_ModStart> case 5 : elen += pc -> lengthComponentIdent ; if ( elen > fromlen ) return - EIO ; <S2SV_ModStart> break ; } <S2SV_ModEnd> } if (,1
622,"<S2SV_ModStart> ( dp [ 3 <S2SV_ModEnd> ] ) ; <S2SV_ModStart> ndoerr ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %s"", tok2str ( nfsv3_sattr_str, ""access-%u"", access_flags ) ) ) ; goto trunc ; } ND_PRINT ( ( ndo, "" <S2SV_blank> %s"", tok2str ( nfsv3_sattr_str, ""type-%u"", type ) ) ) ; if ( v3 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %s"", tok2str ( nfsv3_sattr_str, ""access-%u"", access_flags ) ) ) ; } else { ND_PRINT ( ( ndo, "" <S2SV_blank> %s"", tok2str ( nfsv3_sattr_str, ""access-%u"", access_flags ) ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> %s"", tok2str ( nfsv3_sattr_str, ""access-%u"", access_flags ) ) ) ; }",0
623,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_8BITS ( tptr ) ;,0
624,"<S2SV_ModStart>, target, ctxt -> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
625,<S2SV_ModStart> ; bool slow <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ; * addr_len = sizeof ( * sin ) ;,1
626,"<S2SV_ModStart> len ) { <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { ND_PRINT ( ( ndo, ""\\n\\t%s"", tstr ) ) ; return ; } if ( len < sizeof ( rpki_rtr_pdu ) ) { ND_PRINT ( ( ndo, ""\\n\\t%s"", tstr ) ) ; return ; } ND_TCHECK2 ( * tptr, sizeof ( rpki_rtr_pdu ) ) ; pdu_len = EXTRACT_32BITS ( pdu_header -> length ) ; if (! pdu_len ) { ND_PRINT ( ( ndo, ""\\n\\t%s"", tstr ) ) ; return ; } tptr += sizeof ( rpki_rtr_pdu ) <S2SV_ModEnd> ; } <S2SV_null>",0
627,"<S2SV_ModStart> int tagval ; struct stream packet ; <S2SV_ModStart> length ) ; packet = * s ; <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> token <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> token <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
628,"<S2SV_ModStart> 0 ; int elt ; u_int offset, max_offset ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; if ( ( ( i = * cp ++ ) & INDIR_MASK )!= INDIR_MASK ) { compress = 0 ; rp = cp + l ; } if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; if ( ( ( i = * cp ++ ) & INDIR_MASK )!= INDIR_MASK ) { compress = 0 ; rp = cp + l ; } if ( i!= 0 ) while ( i && cp < <S2SV_ModEnd> ndo -> ndo_snapend <S2SV_ModStart> ndo -> ndo_snapend ) { if ( ( i & INDIR_MASK ) == INDIR_MASK ) { if (! compress ) { rp = cp + 1 ; compress = 1 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> NULL ) ; offset = ( ( ( i << 8 ) | * cp ) & 0x3fff ) ; if ( offset >= max_offset",0
629,<S2SV_ModStart> = xfs_attr3_rmt_blocks ( args <S2SV_ModEnd> ) ; error <S2SV_ModStart> ; if ( args -> rmtvaluelen == args -> valuelen ) { args -> rmtvaluelen = args -> valuelen ; return ( error ) ; } args -> rmtvaluelen = args -> valuelen ;,0
630,"<S2SV_ModStart> int rv = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd> ""%s"" ""\\r\\n"" ""%s"" <S2SV_ModStart> ( S, ""%s"" <S2SV_ModEnd>, request,",0
631,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ( src, <S2SV_ModEnd> dest, getuid <S2SV_ModStart> getgid ( ) <S2SV_ModEnd>, S_IRUSR | <S2SV_ModStart> | S_IWUSR ) ; fs_logger2 ( ""clone"", dest <S2SV_ModEnd> ) ; unlink",1
632,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; },1
633,"<S2SV_ModStart> -> x = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> -> y = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> -> z = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 0.0f,",1
634,"<S2SV_ModStart> PKT_LEN_SIZE ) { giterr_set_str ( GITERR_NET, ""Invalid <S2SV_blank> empty <S2SV_blank> packet"" ) ; return GIT_ERROR <S2SV_ModEnd> ; } if",1
635,<S2SV_ModStart> ; if ( vma -> vm_flags & VM_SHARED ) return VM_FAULT_SIGBUS ; if (,1
636,<S2SV_ModStart> -> sasl_mechanism ; rec -> sasl_username = g_strdup ( src -> sasl_username ) ; rec ->,0
637,<S2SV_ModStart> env -> insn_aux_data ; int i <S2SV_ModStart> ) ) ; for ( i = off ; i < off + cnt - 1 ; i ++ ) new_data [ i ]. seen = true ;,1
638,<S2SV_ModStart> ; ND_TCHECK ( * dp <S2SV_ModEnd> ) ; if,1
639,<S2SV_ModStart> trunc ; } ND_TCHECK_16BITS ( & bp [ i + 2 ] ) ;,1
640,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
641,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( occ0 <S2SV_ModStart> % rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""PredictorDecodeTile"", ""%s"", ""occ0%rowsize <S2SV_blank>!= <S2SV_blank> 0"" ) ; return 0 ; } <S2SV_ModEnd> assert ( sp <S2SV_ModStart> 0 ) { if (! <S2SV_ModStart>, rowsize ) ) return 0",1
642,"<S2SV_ModStart>, o, count = 0 <S2SV_ModStart> ; if ( CHECKOVERFLOW ( c, buf_size, 2 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. entries = exif_mem_alloc ( n -> mem, sizeof ( MnoteCanonEntry ) * c ) ; if (! n -> entries [ tcount ]. components ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. order = n -> order ; n -> entries [ tcount ]. entries = exif_mem_alloc ( n -> mem, sizeof ( MnoteCanonEntry ) * c ) ; if (! n -> entries [ tcount ]. components ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; }",0
643,<S2SV_ModStart> ; if ( ctx -> terminated ||,1
644,<S2SV_ModStart> = NULL ; if ( sbi -> spool ) hugepage_put_subpool ( sbi -> spool ) ;,1
645,<S2SV_ModStart> ; if ( <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
646,<S2SV_ModStart> len ) { size_t alloc = ( length < 0 )? ( int ) strlen ( string ) : ( int ) <S2SV_ModEnd> strlen ( string <S2SV_ModStart> CURLcode res ; if (! alloc ) return NULL ; ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ; <S2SV_ModStart> ( olen ) <S2SV_ModEnd> return ns ;,0
647,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
648,"<S2SV_ModStart> ( ) ; iov_iter_advance ( i, copied ) ; <S2SV_ModStart> again ; } <S2SV_ModEnd> pos += copied",1
649,<S2SV_ModStart> unlikely ( len + ring -> frameoffset,1
650,"<S2SV_ModStart> -> pdu_free_state_ref = usm_free_usmStateReference ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_POST_PREMIB_WRITE_CONFIG, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ;",0
651,"<S2SV_ModStart> ( obj, <S2SV_ModEnd> name, data <S2SV_ModStart>, show_object, & base <S2SV_ModEnd>, path,",1
652,"<S2SV_ModStart> NULL ; return! <S2SV_ModEnd> match ( prog <S2SV_ModStart> | eflags, <S2SV_ModEnd> sub ) ;",0
653,<S2SV_ModStart> src < zsize + ( sub_type!= 2 ) <S2SV_ModStart> bits ) { if ( src >= src_end ) return AVERROR_INVALIDDATA ;,1
654,<S2SV_ModStart> lock_ptr ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
655,"<S2SV_ModStart> ; # ifndef NETSNMP_NO_WRITE_SUPPORT switch ( action ) { case MODE_SET_RESERVE1 : if ( var_val_type!= ASN_INTEGER ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> type <S2SV_blank>!= <S2SV_blank> int\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= 1 ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; }",0
656,"<S2SV_ModStart> j ] & 0xFF ; if ( j % 8 == 0 ) { ALOGE ( ""b/26366256"" ) ; return ( - 1 ) ; } <S2SV_ModStart> j ] & 0xFF ; if ( j % 8 == 0 ) { ALOGE ( ""b/26366256"" ) ; return ( - 1 ) ; } <S2SV_ModStart> j ] & 0xFF ; if ( j % 8 == 0 ) { ALOGE ( ""b/26366256"" ) ; return ( - 1 ) ; } <S2SV_ModStart> j ] & 0xFF ; if ( j % 8 == 0 ) { ALOGE ( ""b/26366256"" ) ; return ( - 1 ) ; } <S2SV_ModStart> j ] & 0xFF ; if ( j % 8 == 0 ) { ALOGE ( ""b/26366256"" ) ; return ( - 1 ) ; } <S2SV_ModStart> j ] & 0xFF ; if ( j % 8 == 0 ) { ALOGE ( ""b/26366256"" ) ; return ( - 1 ) ; }",0
657,<S2SV_ModStart> timer ) ; spin_lock ( & timeri -> timer -> lock ) ; <S2SV_ModStart> timer = NULL ; spin_unlock ( & timeri -> timer -> lock ) ; <S2SV_ModStart> slave_active_lock ) ; mutex_unlock ( & timeri -> timer -> lock ) ;,0
658,<S2SV_ModStart> len ; } ND_TCHECK ( p [ 2 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 2 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 2 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len,0
659,"<S2SV_ModStart> -> has_va ; <S2SV_ModEnd> char * arch <S2SV_ModStart> * arch = strdup ( info -> arch ) ; char * cpu = info -> cpu? strdup ( info -> cpu ) : NULL <S2SV_ModEnd> ; ut16 bits <S2SV_ModStart> ; if ( <S2SV_ModEnd> cpu && * <S2SV_ModStart> cpu && * <S2SV_ModEnd> cpu ) { <S2SV_ModStart>, ""anal.cpu"", <S2SV_ModEnd> cpu ) ; <S2SV_ModStart> r, binfile ) ; free ( cpu ) ; free ( arch",1
660,"<S2SV_ModStart> sas_probe_devices ( struct asd_sas_port * port <S2SV_ModEnd> ) { struct <S2SV_ModStart>, * n <S2SV_ModEnd> ; list_for_each_entry (",1
661,<S2SV_ModStart> -> u4_bitoffset = ih264d_read_mmco_commands <S2SV_ModEnd> ( ps_dec ),0
662,"<S2SV_ModStart> gint64 offset ; <S2SV_ModEnd> char line [ <S2SV_ModStart> line [ NETSCREEN_LINE_LENGTH <S2SV_ModEnd> ] ; offset <S2SV_ModStart> return FALSE ; <S2SV_ModEnd> if (! <S2SV_ModStart> wth -> fh <S2SV_ModEnd>, & wth <S2SV_ModStart> wth -> frame_buffer <S2SV_ModEnd>, & wth <S2SV_ModStart> wth -> frame_buffer <S2SV_ModEnd> ) ) return",0
663,<S2SV_ModStart> 0 ) ; if ( <S2SV_ModStart>. seq_num ) < 0 ) return - 1,1
664,"<S2SV_ModStart> decode ) { uint_fast32_t originalWidth = gifFilePtr -> Image. Width ; uint_fast32_t originalHeight = gifFilePtr -> Image. Height ; if ( originalWidth > info -> originalWidth || originalHeight > info -> originalHeight ) { gifFilePtr -> originalWidth = 0 ; } <S2SV_ModStart> originalHeight ; const uint_fast32_t rasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { gifFilePtr -> rasterSize = newRasterSize ; break ; } <S2SV_ModStart> uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { void * tmpRasterBits = reallocarray ( info -> rasterSize, sizeof ( uint_fast32_t ), sizeof ( uint_fast32_t ), sizeof ( uint_fast32_t ), sizeof ( uint_fast32_t ), sizeof ( uint_fast32_t ), sizeof ( uint_fast32_",0
665,"<S2SV_ModStart> : ret = - EOPNOTSUPP ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = <S2SV_ModStart> == 0 ) ret = <S2SV_ModEnd> key -> type <S2SV_ModStart> type -> read ( key, buffer, buflen ) ; up_read <S2SV_ModEnd> ( & key <S2SV_ModStart> sem ) ; <S2SV_ModEnd> } error2 :",1
666,"<S2SV_ModStart> || cherokee_buffer_is_empty ( <S2SV_ModEnd> conn -> validator <S2SV_ModStart> user ) ) { ret_free ( message ) ; return ret_error ; } size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) { LOG_ERROR ( CHEROKEE_ERROR_VALIDATOR_LDAP_SEARCH, props -> filter. buf? props -> filter. buf : """" ) ; return ret_not_found ; } if ( ret!= ret_ok ) { LOG_ERROR ( CHEROKEE_ERROR_VALIDATOR_LDAP_SEARCH, props -> filter. buf? props -> filter. buf : """" ) ; ret = validate_dn ( props, dn, conn -> validator -> passwd. buf, conn -> validator -> user. len ) ; if ( ret!= ret_not_found ) { ret_free ( message ) ; return ret_not_found ; }",0
667,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( <S2SV_ModStart> if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( length > GetBlobSize ( image ) ) ThrowPI",0
668,"<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if <S2SV_ModStart> - JAS_CAST ( jas_longlong <S2SV_ModEnd>, ( ( <S2SV_ModStart> : JAS_CAST ( jas_longlong <S2SV_ModEnd>, tmp )",1
669,<S2SV_ModStart> page ) ; rm -> atomic. op_active = 0 ;,1
670,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> has <S2SV_blank> wrong <S2SV_blank> bus <S2SV_blank> %d <S2SV_blank> info!\\n"", __func__, dev -> name, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",1
671,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = sizeof ( * sin )",0
672,"<S2SV_ModStart> sizeof ( spath ) ) return - 1 ; if ( strstr ( name, "".."" ) || strchr ( name, '/'",1
673,<S2SV_ModStart> 0 ) { if ( len < 9 ) { <S2SV_ModStart> s ++ ; len -- ; } <S2SV_ModStart> * t && len > 0 &&,0
674,"<S2SV_ModStart> -> bcache, cache_id ( <S2SV_ModStart> ] -> data )",1
675,<S2SV_ModStart> objp ) ; * objp = NULL ;,1
676,"<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart> NULL, NULL )",0
677,<S2SV_ModStart> return 1 ; consume_skb ( skb ) ; return 0 <S2SV_ModEnd> ; } if,1
678,<S2SV_ModStart> msixcap ; assert <S2SV_ModEnd> ( msgnum >= <S2SV_ModStart> msgnum ) ; <S2SV_ModEnd> pci_msix_table_init ( dev <S2SV_ModStart> msgnum ) ; <S2SV_ModEnd> pci_populate_msixcap ( &,0
679,"<S2SV_ModStart> goto out ; err = 0 ; <S2SV_ModStart> if ( upperdentry ) { mutex_lock ( & dentry -> d_inode -> i_mutex ) ; err = notify_change ( upperdentry, attr, NULL ) ; mutex_unlock ( & dentry -> d_inode -> i_mutex ) ; } else { err = ovl_copy_up_last ( dentry, attr, false ) ; } <S2SV_ModEnd> mutex_unlock ( & <S2SV_ModStart> i_mutex ) ; <S2SV_ModEnd> ov_drop_write ( dentry",0
680,<S2SV_ModStart> ( isspace ( ( unsigned char ),1
681,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> } if (! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if (",1
682,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
683,<S2SV_ModStart> 1 ) ; if ( strlen ( line ) == 0 ) return - 1 ;,1
684,<S2SV_ModStart> ) goto cleanup <S2SV_ModEnd> ; status = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> free ( is,0
685,<S2SV_ModStart> ++ ) { if ( band -> prec ) { <S2SV_ModStart> ) ; } },1
686,"<S2SV_ModStart> == 0 ) { if ( ( ctxt -> validate ) && ( ctxt -> vctxt. error == NULL ) ) { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""Internal: <S2SV_blank> %%%s; <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> parameter <S2SV_blank> entity\\n"", name, NULL ) ; } else { xmlWarningMsg ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""Internal: <S2SV_blank> %%%s; <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> parameter <S2SV_blank> entity\\n"", name, NULL ) ; } } else { if ( ( ctxt -> validate ) && ( ctxt -> vctxt. error!= NULL ) ) { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""PEReference: <S2SV_blank> %%%s; <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> parameter <S2SV_blank> entity\\n"", name, NULL ) ; } else { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""PEReference: <S2SV_blank> %%%s; <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> parameter <S2SV_blank> entity\\n"", name, NULL ) ; } }",0
687,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart>, & final ) ; rcu_read_unlock ( <S2SV_ModStart> -> ir_v6_rmt_addr ; rcu_read_lock ( ) <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart>, & final ) ; rcu_read_unlock (",0
688,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static TX_MODE select_tx_mode ( const VP9_COMMON * cm, const VP9EncoderConfig * oxcf ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; <S2SV_ModStart> return ONLY_4X4 ; <S2SV_ModEnd> } else if <S2SV_ModStart> else if ( oxcf -> <S2SV_ModEnd> tx_size_search_method == USE_LARGESTALL <S2SV_ModStart> USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ]? ALLOW_32X32 : TX_MODE_SELECT ; } else { return cpi -> common. tx_mode ; } } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
689,"<S2SV_ModStart> ( u32 size, u32 num ) { if ( size > UINT32_MAX / num ) { return NULL ; } <S2SV_ModEnd> return malloc ( <S2SV_ModStart> malloc ( size * num",1
690,<S2SV_ModStart> ; if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> prline_cnt ++ ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> prline_cnt ++ ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> prline_cnt ++ ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> prline_cnt ++ ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> prline_cnt ++ ; <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } } } <S2SV_ModStart> 0 ) { <S2SV_ModEnd> prline_cnt ++ ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> prline_cnt ++ ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> prline_cnt ++ ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> prline_cnt ++ ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> prline_cnt ++ ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> prline_cnt ++ ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> prline_cnt ++ ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> prline_cnt ++ ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> prline_cnt ++ ; <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } } } <S2SV_ModStart> 0 ) { <S2SV_ModEnd> prline_cnt ++ ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> prline_cnt ++ ; <S2SV_ModStart> ) ; },0
691,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,1
692,"<S2SV_ModStart> ; if ( tile_buffer_size_cmp ( buf1 -> size, buf2 -> size ) ) { return - 1 ; } else if ( tile_buffer_size_cmp ( buf2 -> size, buf1 -> size ) ) { return 1 ; } else if ( tile_buffer_size_cmp ( buf1 -> size, buf2 -> size ) ) { return 1 ; } else if ( tile_buffer_size_cmp ( buf2 -> size, buf1 -> size ) ) { return - 1 ; } else if ( tile_buffer_size_cmp ( buf1 -> size, buf2 -> size ) ) { return 1 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
693,"<S2SV_ModStart> scn, root_storage <S2SV_ModEnd> ) ) <",1
694,<S2SV_ModStart> ; size_t sz <S2SV_ModEnd> ; if (,0
695,<S2SV_ModStart> (! eof && vars -> str. c!= vars -> ptr,1
696,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
697,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs,",0
698,"<S2SV_ModStart> -> _eip ; rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val ) ; if ( rc!= X86EMUL_CONTINUE ) break <S2SV_ModStart> case 4 : rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val )",1
699,"<S2SV_ModStart> url ) ; if (! mutt_str_cmp ( url. path, list. name ) ) { mutt_debug ( 1, ""Error <S2SV_blank> adding <S2SV_blank> subscribed <S2SV_blank> mailbox: <S2SV_blank> %s\\n"", errstr ) ; return ; }",0
700,"<S2SV_ModStart> void * end <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; void * dbuf = NULL <S2SV_ModStart> ; struct ceph_crypto_key <S2SV_ModEnd> old_key ; void <S2SV_ModStart> struct ceph_crypto_key old_key ; void * ticket_buf = NULL <S2SV_ModStart> bad ) ; if ( is_enc ) { dout ( "" <S2SV_blank> encrypted <S2SV_blank> ticket\\n"" ) ; dlen = ceph_x_decrypt ( & old_key, p, end, & ticket_buf, TEMP_TICKET_BUF_LEN ) ; if ( dlen <= 0 ) { ret = dlen ; goto out ; } tp = ticket_buf ; tpend = ticket_buf + dlen ; tkt_struct_v = ceph_decode_8 ( & new_ticket_blob ) ; if ( tkt_struct_v!= 1 ) goto out ; } tp = ticket_buf ; <S2SV_ModStart> bad ) ; ticket_buf = kmalloc ( dlen, GFP_NOFS ) ; if (! ticket_buf ) { ret = - ENOMEM ; goto out ; } tp = ticket_buf ; <S2SV_ModStart> ; out : kfree ( ticket_buf ) ;",0
701,"<S2SV_ModStart> / 2 ; if ( count > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", count, ( int ) ( MaxAllocSize / sizeof ( Pairs ) ) ) ) ) ;",1
702,<S2SV_ModStart> ; rq -> skip_clock_update = 1 <S2SV_ModEnd> ; prev ->,0
703,"<S2SV_ModStart> -> init_msg ; if (! s -> session ) { al = SSL_AD_INTERNAL_ERROR ; SSLerr ( SSL_F_SSL3_GET_NEW_SESSION_TICKET, ERR_R_MALLOC_FAILURE ) ; goto f_err ; }",0
704,<S2SV_ModStart> ; r = TEMP_FAILURE_RETRY ( <S2SV_ModStart> b ) ) ),0
705,<S2SV_ModStart> ; if (! errors ) return TEST_ERR_MAJOR_BAD ; else return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
706,<S2SV_ModStart> NULL ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_ARRAY_REF <S2SV_ModStart> entry ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; default :,0
707,<S2SV_ModStart> lun ) sas_eh_finish_cmd <S2SV_ModEnd> ( cmd ),0
708,"<S2SV_ModStart>, end_col_offset ; string type_comment ; <S2SV_ModStart> += 2 ; type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i ) ) ; if (! type_comment ) return NULL <S2SV_ModStart>, body ) ; if (! type_comment ) return NULL <S2SV_ModStart> is_async ) { type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i ) ) ; if (! type_comment ) return NULL ; } <S2SV_ModStart>, body, type_comment,",0
709,"<S2SV_ModStart> err = 0 ; if (! net_eq ( current -> nsproxy -> net_ns, sock_net ( sk ) ) ) return - EINVAL",1
710,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
711,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,1
712,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
713,"<S2SV_ModStart> ) / 3 ) ThrowReaderException ( CorruptImageError, ""InvalidColormapIndex"" ) ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries",0
714,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> ) ) ) rc = <S2SV_ModStart> ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>,1
715,,1
716,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
717,"<S2SV_ModStart> if ( position < 0 || position >= <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ) { psf_fseek <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> += psf_fread ( <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd>, 1, <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd>, psf ) <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> += position ; <S2SV_ModStart> if ( position >= <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ) { psf_fseek <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> += position ; <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> += position ; <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> += position ; <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> += psf_fread ( <S2SV_ModStart>, 1, position - psf -> header. indx <S2SV_ModEnd>, psf ) <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; break ;",0
718,<S2SV_ModStart> out_mutex ; } ext4_inode_block_unlocked_dio ( inode ) ; inode_dio_wait ( inode ) ; down_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart> ioffset ) ; <S2SV_ModEnd> credits = ext4_writepage_trans_blocks <S2SV_ModStart> ) ; goto out_mmap <S2SV_ModEnd> ; } down_write <S2SV_ModStart> handle ) ; out_mmap : up_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModEnd> ext4_inode_resume_unlocked_dio ( inode,1
719,<S2SV_ModStart> uint32_t midi_type ; uint8_t * * tracks <S2SV_ModEnd> ; uint32_t end_of_tracks <S2SV_ModStart> no_tracks ++ ; tmp_val <S2SV_ModEnd> = * midi_data <S2SV_ModStart> << 24 ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 16 ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 8 ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 0 ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 0 ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 0 ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 0 ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 8 ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 0 ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 0 ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 0 ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 0 ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 0 ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 0 ; tmp_val <S2SV_ModEnd> |= * midi_data,0
720,"<S2SV_ModStart> -> sk_sndbuf = min_t ( int, <S2SV_ModEnd> val * 2 <S2SV_ModStart> val * 2, SOCK_MIN_SNDBUF ) <S2SV_ModEnd> ; sk ->",0
721,<S2SV_ModStart> * bh ; unsigned int table_len ; <S2SV_ModStart> -> b_data ; table_len = le32_to_cpu ( lvd -> mapTableLength ) ; if ( table_len > sb -> s_blocksize ) goto out_bh ; <S2SV_ModStart> && offset < table_len <S2SV_ModEnd> ; i ++,0
722,"<S2SV_ModStart> long n ; image = 0 ; info = 0 ; <S2SV_ModStart> ""cannot <S2SV_blank> get <S2SV_blank> header\\n"" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ""cannot <S2SV_blank> get <S2SV_blank> info\\n"" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ""cannot <S2SV_blank> get <S2SV_blank> info\\n"" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ""cannot <S2SV_blank> get <S2SV_blank> info\\n"" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> 1, ( ""BMP <S2SV_blank> information: <S2SV_blank> len <S2SV_blank> %ld; <S2SV_blank> width <S2SV_blank> %ld; <S2SV_blank> height <S2SV_blank> %ld; <S2SV_blank> numplanes <S2SV_blank> %ld; <S2SV_blank> "" ""depth <S2SV_blank> %ld; <S2SV_blank> enctype <S2SV_blank> %ld; <S2SV_blank> siz <S2SV_blank> %ld; <S2SV_blank> hres <S2SV_blank> %ld; <S2SV_blank> vres <S2SV_blank> %ld; <S2SV_blank> numcolors <S2SV_blank> %ld; <S2SV_blank> "" ""mincolors <S2SV_blank> %ld\\n"", JAS_CAST ( long <S2SV_ModStart> info -> len ), JAS_CAST ( long <S2SV_ModStart> info -> width ), JAS_CAST ( long <S2SV_ModStart> info -> height ), JAS_CAST ( long <S2SV_ModStart> info -> numplanes ), JAS_CAST ( long <S2SV_ModStart> info ->",0
723,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> dev ), func <S2SV_ModEnd>, line, <S2SV_ModStart> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"", func <S2SV_ModEnd>, line,",1
724,"<S2SV_ModStart> u4_ofst ) ; if ( ps_cabac -> u4_range > ps_cabac -> u4_max_range ) { IHEVCD_ERROR_T e = IHEVCD_INVALID_PARAMETER ; ps_cabac -> u4_range = 0 ; ps_cabac -> u4_ofst = 0 ; ps_cabac -> u4_max_range = ( UWORD32 ) 510 ; BITS_GET ( ps_cabac -> u4_ofst, ps_bitstrm -> u4_bit_ofst, ps_cabac -> u4_cur_word, ps_cabac -> u4_nxt_word, 9 ) ; if ( ps_cabac -> u4_range > ps_cabac -> u4_max_range ) { IHEVCD_ERROR_T e = IHEVCD_INVALID_PARAMETER ; ps_cabac -> u4_ofst = 0 ; ps_cabac -> u4_nxt_word = 0 ; }",0
725,"<S2SV_ModStart> g_tv_comment, FILENAME_COMMENT ) ; update_gui_state_from_problem_data ( gtk_notebook_get_current_page ( assistant ) <S2SV_ModStart> g_tv_comment, FILENAME_COMMENT ) ; update_gui_state_from_problem_data ( gtk_notebook_get_current_page ( assistant ) <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( pages <S2SV_ModStart> ]. page_widget == page ) { if ( highlight_forbidden ( ) ) { gtk_expander_set_expanded ( g_exp_search, FALSE ) ; } else { gtk_toggle_button_set_active ( GTK_TOGGLE_BUTTON ( g_rb_custom_search ), TRUE ) ; } } if ( pages [ PAGENO_REVIEW_DATA ]. page_widget == page ) { if ( highlight_forbidden ( ) ) { add_sensitive_data_warning ( ) ; show_warnings ( ) ; gtk_expander_set_expanded ( g_exp_search, TRUE ) ; } else { gtk_toggle_button_get_active ( GTK_TOGGLE_BUTTON ( g_rb_custom_search ) ; }",0
726,"<S2SV_ModStart> media_pad_desc pad ; if ( copy_to_user ( & links -> pads [ p ], & pad, sizeof ( pad ) ) ) return - EFAULT ; media_device_kpad_to_upad <S2SV_ModEnd> ( entity -> <S2SV_ModStart> entity ) continue ; if ( copy_to_user ( & links -> links [ l ]. source, & link. source ) || copy_to_user ( & links -> links [ l ]. sink, & link. sink ) ) return - EFAULT ;",0
727,<S2SV_ModStart> ; if ( line -> type == MD_LINE_BLANK && off < ctx -> size ) { if ( prev_line_has_list_loosening_effect ) { line -> type = MD_LINE_LIST_LOOSE ; ctx -> last_line_has_list_loosening_effect = TRUE ; } else if ( line -> type == MD_LINE_LIST_LOOSE ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = FALSE ; } else { if ( line -> type == MD_LINE_BLANK && off < ctx -> size ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = TRUE ; } } else if ( line -> type == MD_LINE_LIST_LOOSE ) { line -> type = MD_LINE_LIST_LOOSE ; ctx -> last_line_has_list_loosening_effect = TRUE ; } else if ( line -> type == MD_LINE_BLANK && line -> indent > 0 ) { line -> type = MD_LINE_B,0
728,"<S2SV_ModStart> extent, height, <S2SV_ModStart> ""UnableToReadImageData"" ) ; bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart> ""UnableToReadImageData"" ) ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( height > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; height = sun_info. height ; <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( height > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( width > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( height > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( width > GetBlobSize",0
729,"<S2SV_ModStart>, krb5_principal client_principal, const char * tgt_realm <S2SV_ModStart> principal ), tgt_realm <S2SV_ModEnd> ) ; if",1
730,"<S2SV_ModStart> ReadBlobLSBLong ( image ) ; if ( bmp_info. number_colors > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
731,<S2SV_ModStart> ; newinet -> inet_opt <S2SV_ModEnd> = ireq ->,1
732,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
733,"<S2SV_ModStart>!= 0 ) { int tstart = skb_transport_offset ( skb ) + tlen ; <S2SV_ModStart> ( csum, skb_checksum ( skb, tstart, <S2SV_ModEnd> offset, 0 <S2SV_ModStart> ( csum, skb_checksum ( skb, tstart <S2SV_ModEnd>, offset,",0
734,"<S2SV_ModStart> pfn ) ; kvm_unpin_pages ( kvm, pfn, page_size ) ; <S2SV_ModStart> goto unmap_pages ; }",0
735,<S2SV_ModStart> 0x00 } ; if ( cmd -> msg_len > sizeof ( b ) - 4 ) return - EINVAL ;,1
736,<S2SV_ModStart> perf_event_context * ctx ; ctx = perf_event_ctx_lock <S2SV_ModEnd> ( event ) <S2SV_ModStart> -> state = PERF_EVENT_STATE_OFF <S2SV_ModEnd> ; } raw_spin_unlock_irq,0
737,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ; return ( <S2SV_ModStart> ; return ( <S2SV_ModEnd> value & 0xffffffff <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ) ; } <S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> [ 3 ] ; return <S2SV_ModEnd> ( value & <S2SV_ModStart> & 0xffffffff ) <S2SV_ModEnd> ; } <S2SV_null>,1
738,"<S2SV_ModStart> free_nid * i, * e <S2SV_ModStart> int err ; e = NULL <S2SV_ModStart> return false ; i = f2fs_kmem_cache_alloc ( free_nid_slab, GFP_NOFS ) ; i -> nid = nid ; i -> state = NID_NEW ; if ( radix_tree_preload ( GFP_NOFS ) ) { spin_lock ( & nm_i -> nid_list_lock ) ; radix_tree_preload_end ( ) ; <S2SV_ModStart> NULL_ADDR ) ) goto out ; } i = f2fs_kmem_cache_alloc ( free_nid_slab, GFP_NOFS ) ; i -> nid = nid ; i -> state = NID_NEW ; if ( radix_tree_preload ( GFP_NOFS ) ) { spin_unlock ( & nm_i -> nid_list_lock ) ; radix_tree_preload_end ( ) ; return true ; } spin_unlock ( & nm_i -> nid_list_lock ) ;",0
739,<S2SV_ModStart> -> post_proc_flag ; flags -> deblocking_level = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) ; flags -> noise_level = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) <S2SV_ModEnd> ; flags ->,0
740,"<S2SV_ModStart> ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> ++ cons ; netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> extra. type ) ; netbk_fatal_tx_err ( vif",1
741,<S2SV_ModStart> ) ) ; hdr -> sadb_msg_reserved = 0 ;,1
742,"<S2SV_ModStart> ) return ; memset ( & r1, 0, sizeof ( r1 ) ) ;",1
743,"<S2SV_ModStart> 1 ; defaultoptions ( L, & h ) ; luaL_settop ( L, 2 ) ; if ( pos + size > ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> short"" ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""too <S2SV_blank> many <S2SV_blank> results"" ) ; switch ( * fmt ) { case 'b' : case 'B' : case 'L' : case 'T' : case 'I' : { lua_Number res = getinteger ( data + pos, h. endian, issigned, size ) ; luaL_pushnumber ( L, res ) ; break ; } case 'x' : { lua_Number x ; memcpy ( & x, data + pos, size ) ; correctbytes ( ( char * ) & x, sizeof ( x ), h. endian ) ; lua_pushnumber ( L, x ) ; } break ; } case 'z' : { lua_Number z ; memcpy ( & z, data + pos, size ) ; correctbytes ( ( char * ) & z, sizeof ( z ), h. endian ) ; lua_pushnumber ( L, z ) ; break ; }",0
744,"<S2SV_ModStart> = 0 ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) { goto trunc ; } <S2SV_ModStart> struct olsr_msg6 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> msg4[0x%04x], <S2SV_blank> msg6[0x%04x]"", msgptr. v4 -> msg_type, msgptr. v6 -> msg_type, msgptr. v6 -> msg_len ) ) ; } else { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> msg4[0x%04x]"", msgptr. v4 -> msg_type, msgptr. v4 -> msg_len ) ) ; if ( msg_len_valid == 0 ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> msg4[0x%04x]"", msgptr. v4 -> msg_type, msgptr. v4 -> msg_len ) ) ; } else { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> msg4[0x%04x]"", msgptr. v4 ->",0
745,"<S2SV_ModStart> ; int n ; if ( len < sizeof ( struct oz_multiple_fixed ) + 1 ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; break ; } n = ( len - sizeof ( struct oz_multiple_fixed ) + 1 ) / body -> unit_size ; while ( n -- ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; data += body -> unit_size ; } } break ; case OZ_DATA_F_ISOC_FIXED : { struct oz_isoc_fixed * body = ( struct oz_isoc_fixed * ) data_hdr ; u8 * data = body -> data ; int count ; int i ; if (! unit_size ) break ; count = data_len / unit_size ; for ( i = 0 ; i < count ; i ++ ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, data_len / unit_size ) { oz_hcd",0
746,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,1
747,"<S2SV_ModStart> { fprintf ( stderr <S2SV_ModEnd>, ""Error: <S2SV_blank>.Xauthority <S2SV_blank> file <S2SV_blank> is <S2SV_blank> a <S2SV_blank> symbolic <S2SV_blank> link\\n"" ) <S2SV_ModStart> ; int rv = copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ( src, <S2SV_ModEnd> dest ) ; <S2SV_ModStart> ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest <S2SV_ModEnd> ) ; }",0
748,<S2SV_ModStart> IMAP_FATAL ; return ; } if ( litlen < 1 ) { idata -> status = IMAP_FATAL ;,0
749,<S2SV_ModStart> return res ; <S2SV_ModEnd> return 0 ;,1
750,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> ]. p_hdr ) ; if ( unlikely ( <S2SV_ModStart> ) ) ) { ext_size = sizeof ( struct ext4_extent_header ) + sizeof ( struct ext4_extent ) * le16_to_cpu ( neh -> eh_entries ) ; memset ( bh -> b_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size ) ; <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
751,<S2SV_ModStart> } else { if ( ptr_hbe_txposer -> end_band!= ptr_hbe_txposer -> start_band ) { if ( ptr_hbe_txposer -> end_band!= ptr_hbe_txposer -> end_band ) { if ( ptr_hbe_txposer -> start_band!= ptr_hbe_txposer -> start_band ) { if ( ptr_hbe_txposer -> end_band!= ptr_hbe_txposer -> end_band ) { if ( ptr_hbe_txposer -> start_band!= ptr_hbe_txposer -> end_band ) { if ( ptr_hbe_txposer -> end_band!= ptr_hbe_txposer -> start_band ) { if ( ptr_hbe_txposer -> start_band!= ptr_hbe_txposer -> start_band ) { if ( ptr_hbe_txposer -> end_band!= ptr_hbe_txposer -> end_band ) { if ( ptr_hbe_txposer -> start_band!= ptr_hbe_txposer -> end_band ) { if ( ptr_hbe_,0
752,<S2SV_ModStart> ; cmap_len = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> 0 x_origin = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> ; y_origin = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> endif image_w = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> ; image_h = get_tga_ushort <S2SV_ModEnd> ( & tga,1
753,<S2SV_ModStart> ; ssize_t ret ; if ( WARN_ON_ONCE (! ib_safe_file_access ( filp ) ) ) return - EACCES,1
754,"<S2SV_ModStart> ) { struct timespec rem ; <S2SV_ModStart> CPUCLOCK_SCHED ) { rem = div_u64_rem <S2SV_ModEnd> ( cpu. <S2SV_ModStart> cpu. sched, NSEC_PER_SEC, & rem ) ; <S2SV_ModEnd> cputime_to_timespec ( cpu <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
755,<S2SV_ModStart> ; uint32 nstrips <S2SV_ModEnd> ; nstrips =,1
756,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = sizeof ( * sin )",0
757,"<S2SV_ModStart> lua_module ) ; luaLuaFunction * function_name = NULL ; const lua_authz_provider_spec * prov_spec = parsed_require_line <S2SV_ModStart> r ) ; function_name = prov_spec -> function_name ; if ( function_name == NULL ) { lua_log_rerror ( APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO ( 02318 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", function_name, prov_spec -> file_name ) ; return AUTHZ_GENERAL_ERROR ; } if (! lua_checkstack ( L, function_name ) ) { lua_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02319 ) ""Unable <S2SV_blank> to <S2SV_blank> check <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", function_name, function_name ) ; ap_lua_release_state ( L, spec, r ) ; return AUTHZ_GENERAL_ERROR ;",0
758,<S2SV_ModStart> ; int error = 0 <S2SV_ModStart> &= PAGE_MASK ; if ( address < mmap_min_addr ) return - EPERM <S2SV_ModEnd> ; prev =,1
759,"<S2SV_ModStart> { umode_t mode <S2SV_ModEnd> ; error = <S2SV_ModStart> ; error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & mode <S2SV_ModStart>, & mode, & acl <S2SV_ModStart> if ( error <S2SV_ModEnd> ) return error <S2SV_ModStart> return error ; <S2SV_ModEnd> error = xfs_set_mode",1
760,"<S2SV_ModStart>, int optional, const char * rootfs <S2SV_ModStart> endif if ( safe_mount <S2SV_ModEnd> ( fsname, <S2SV_ModStart> MS_REMOUNT, data, rootfs <S2SV_ModStart>, data ) < 0",1
761,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
762,"<S2SV_ModStart> it_overrun = - 1LL <S2SV_ModEnd> ; ++ timr <S2SV_ModStart> info -> si_overrun = timer_overrun_to_int ( timr, info -> si_overrun ) <S2SV_ModEnd> ; } unlock_timer",1
763,<S2SV_ModStart> if (! proto_end ) return 0 ; if (,0
764,<S2SV_ModStart> struct static_key * once_key <S2SV_ModEnd> ) { static <S2SV_ModStart> ; __net_random_once_disable_jump ( once_key <S2SV_ModEnd> ) ; return,1
765,"<S2SV_ModStart> -> actual ; bool kiocb_has_eventfd = <S2SV_ModEnd> io_data -> kiocb <S2SV_ModStart> ki_flags & IOCB_EVENTFD ; if ( io_data -> read && ret > 0 ) { use_mm ( io_data -> mm ) ; ret = copy_to_iter ( io_data -> buf, ret, & io_data -> data ) ; if ( iov_iter_count ( & io_data -> data ) ) ret = - EFAULT ; unuse_mm ( io_data -> mm ) ; } io_data -> kiocb -> ki_complete ( io_data -> kiocb, ret, ret ) ; if ( io_data -> ffs -> ffs_eventfd &&! kiocb_has_eventfd <S2SV_ModEnd> ) eventfd_signal ( <S2SV_ModStart> -> req ) <S2SV_ModEnd> ; if (",1
766,<S2SV_ModStart> ; if ( IPCB ( skb ) -> flags & IPSKB_DOREDIRECT <S2SV_ModEnd> &&! opt,1
767,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
768,"<S2SV_ModStart> struct trusted_key_payload * p ; struct trusted_key_payload * new_p ; struct trusted_key_options * new_o ; size_t datalen = prep -> datalen ; char * datablob ; int ret = 0 ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) return - ENOKEY ; <S2SV_ModStart> 0 ] ; <S2SV_ModEnd> if (!",1
769,"<S2SV_ModStart> v |= ( JAS_CAST ( uint_fast32_t, c ) <S2SV_ModEnd> << 24 )",1
770,<S2SV_ModStart> NULL ) { if ( skb -> len < ROSE_MIN_LEN ) { kfree_skb ( skb ) ; continue ; } <S2SV_ModStart> 2 ] ; if ( frametype == ROSE_CALL_REQUEST && ( skb -> len <= ROSE_CALL_REQ_FACILITIES_OFF || skb -> data [ ROSE_CALL_REQ_ADDR_LEN_OFF ]!= ROSE_CALL_REQ_ADDR_LEN_VAL ) ) { kfree_skb ( skb ) ; continue ; } <S2SV_ModStart> -> data + ROSE_CALL_REQ_DEST_ADDR_OFF <S2SV_ModEnd> ) ; lci_o,1
771,"<S2SV_ModStart> out_free ; } kvm_iommu_unmap_pages ( kvm, & old ) ;",0
772,<S2SV_ModStart> if ( indev ) { if ( indev -> dead ) goto drop_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
773,"<S2SV_ModStart> ; end = path + path_len + 2 <S2SV_ModStart> nextoffset ; switch ( tag ) { case FDT_END_NODE : depth = - 1 ; name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> - FDT_ERR_NOSPACE ; if ( end - path + 1 + len >= path_len ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> case FDT_END_NODE : if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BADSTRUCTURE ; <S2SV_ModStart> fdt_get_name ( fdt, offset, & len ) ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 1",0
774,"<S2SV_ModStart> char * buff ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } buff",1
775,"<S2SV_ModStart> } if ( data_body == NULL && in_bio == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_NO_CONTENT ) ; goto err ; } if ( <S2SV_ModStart> } if ( <S2SV_ModEnd> in_bio!= NULL <S2SV_ModStart>!= NULL ) <S2SV_ModEnd> { bio =",1
776,"<S2SV_ModStart> ( ) ; if ( server. bgsavechildpid == - 1 && server. bgrewritechildpid == - 1 ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ) - listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; }",0
777,"<S2SV_ModStart> } if ( options -> flags & ( UV_PROCESS_SETUID | UV_PROCESS_SETGID ) ) { if ( setgroups ( )!= ( options -> flags & UV_PROCESS_SETUID ) ) { if ( setgroups ( )!= ( options -> flags & UV_PROCESS_SETGID ) ) { if ( setgroups ( )!= ( options -> flags & UV_PROCESS_SETUID ) ) { if ( setgroups ( )!= ( options -> flags & UV_PROCESS_SETGID ) ) { if ( setgroups ( )!= ( options -> flags & UV_PROCESS_SETUID ) ) { if ( setgroups ( )!= ( options -> flags & UV_PROCESS_SETUID ) ) { if ( setgroups ( )!= ( options -> flags & UV_PROCESS_SETGID ) ) { if ( setgroups ( )!= ( options -> flags & UV_PROCESS_SETUID ) ) { if ( setgroups ( )!= ( options -> flags & UV_PROCESS_SETUID ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setgroups()"" ) ; _exit ( 127 ) ;",0
778,"<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> EOPNOTSUPP ; } if ( rlen > MAX_XFER_SIZE ) { warn ( ""i2c <S2SV_blank> rd: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", rlen ) ; return - EOPNOTSUPP ; } <S2SV_ModEnd> mutex_lock ( & <S2SV_ModStart> wlen ) ; <S2SV_ModEnd> ret = dvb_usb_generic_rw <S2SV_ModStart> + wlen, st -> data <S2SV_ModEnd>, rlen, <S2SV_ModStart> rlen, 0 ) ; if (! ret && rbuf && rlen ) memcpy ( rbuf, st -> data, rlen",1
779,"<S2SV_ModStart> -> protocol_timeout = g_timeout_add_seconds <S2SV_ModEnd> ( 5,",0
780,<S2SV_ModStart> book -> dim && i < n,1
781,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
782,<S2SV_ModStart> == - EEXIST || ret == - EOVERFLOW,1
783,<S2SV_ModStart> fp ) ; spin_lock ( & unix_gc_lock ) ; <S2SV_ModStart> unix_sk ( s <S2SV_ModEnd> ) ; BUG_ON <S2SV_ModStart> unix_tot_inflight -- ; } fp -> f_cred -> user -> unix_inflight -- ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
784,"<S2SV_ModStart> size_t chanmap_size = SF_MIN ( <S2SV_ModStart> sf. channels, layout_tag & 0xffff )",1
785,"<S2SV_ModStart> this_h ) { int i ; <S2SV_ModStart> 16 ) { if (! check_scale_factors ( other_w, other_h, this_w, this_h, & i ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } if (! check_scale_factors ( other_w, other_h, this_w, this_h, & i ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } sf -> predict [ i ] [ 0 ] = vp9_convolve_copy ; sf -> predict [ i ] [ 1 ] = vp9_convolve_avg ; sf -> predict [ i ] [ 2 ] = vp9_convolve8_horiz ; sf -> predict [ i ] [ 3 ] = vp9_convolve8_horiz ; sf -> predict [ i ] [ 2 ] = vp9_convolve8_avg_vert ; sf -> predict [ i ] [ 3 ] = vp9_convolve8_horiz ; sf ->",0
786,<S2SV_ModStart> ms ) { uint32_t <S2SV_ModEnd> nestsize = ( <S2SV_ModStart> nestsize = ( uint32_t <S2SV_ModEnd> ) ms ->,1
787,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
788,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
789,<S2SV_ModStart> -> xrefs = safe_calloc ( <S2SV_ModEnd> sizeof ( xref_t,1
790,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
791,"<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ) <S2SV_ModStart> ( opt ) { atomic_sub ( <S2SV_ModEnd> opt -> tot_len <S2SV_ModStart> opt -> tot_len, & sk -> sk_omem_alloc ) ; txopt_put ( opt <S2SV_ModStart> ) ; } }",1
792,"<S2SV_ModStart>, * tmpin = NULL, * tmpout <S2SV_ModStart> = dcont ; if (! ( flags & SMIME_TEXT ) && dcont ) { if (! ( flags & SMIME_TEXT ) && dcont ) { CMSerr ( CMS_F_CMS_VERIFY, ERR_R_MALLOC_FAILURE ) ; goto err ; } <S2SV_ModStart> } if ( flags & SMIME_TEXT ) { if (! ( flags & SMIME_TEXT ) && dcont ) { CMSerr ( CMS_F_CMS_VERIFY, ERR_R_MALLOC_FAILURE ) ; goto err ; } <S2SV_ModStart> : if ( flags & SMIME_TEXT ) { if (! ( flags & SMIME_TEXT ) && dcont ) { CMSerr ( CMS_F_CMS_VERIFY, ERR_R_MALLOC_FAILURE ) ; goto err ; } <S2SV_ModStart> : if ( flags & SMIME_TEXT ) { if (! ( flags & SMIME_TEXT ) && dcont ) { CMSerr ( CMS_F_CMS_VERIFY, ERR_R_MALLOC_FAILURE ) ; goto err ; } <S2SV_ModStart> : if ( flags & SMIME_TEXT ) { if (! ( flags &",0
793,"<S2SV_ModStart> ; if ( unlikely ( <S2SV_ModStart> ) ) ) ) { atomic_sub ( <S2SV_ModEnd> src_info. ipi6_ifindex <S2SV_ModStart> src_info. ipi6_ifindex, & sk -> sk_omem_alloc ) ; if ( atomic_sub ( <S2SV_ModEnd> src_info. ipi6_ifindex <S2SV_ModStart> src_info. ipi6_ifindex, & sk -> sk_omem_alloc ) ) return - ENOMEM ; } <S2SV_ModEnd> break ; case <S2SV_ModStart> ; if ( unlikely ( <S2SV_ModStart> ) ) ) ) ) { atomic_sub ( <S2SV_ModEnd> src_info. ipi6_ifindex <S2SV_ModStart> src_info. ipi6_ifindex, & sk -> sk_omem_alloc ) ; if ( atomic_sub ( <S2SV_ModEnd> src_info. ipi6_ifindex <S2SV_ModStart> src_info. ipi6_ifindex, & sk -> sk_omem_alloc ) ) return - ENOMEM ; }",0
794,<S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_net_ops <S2SV_ModStart> ) ; sctp_v4_protosw_exit <S2SV_ModEnd> ( ) ;,0
795,<S2SV_ModStart> cs_flags ) ; hook_del_nick_can_register ( check_registration_keywords ) ; hook_add_user_can_register ( check_registration_keywords ) ; hook_add_user_can_register ( check_registration_keywords ) ; hook_add_user_can_register ( hook_add_user_can_register ) ; hook_del_user_can_register ( hook_del_user_can_register ) ; hook_del_user_can_register ( hook_del_user_can_register ) ; hook_del_user_can_register ( hook_add_user_can_register ) ; hook_add_user_can_register ( hook_add_user_can_register ) ; hook_add_user_can_register ( hook_add_user_can_register ) ; hook_del_user_can_register ( hook_del_user_can_register ) ; hook_del_user_can_register ( hook_del_user_can_register ) ; hook_del_user_can_register ( hook_add_user_can_register ) ; hook_add_user_can_,0
796,"<S2SV_ModStart> ) { struct in_device * idev <S2SV_ModEnd> = ( ( <S2SV_ModStart> ) -> ifa_dev <S2SV_ModEnd> ; struct netdev_notifier_info <S2SV_ModStart> netdev_notifier_info info ; if ( idev -> dead ) return NOTIFY_DONE ; <S2SV_ModStart> & info, idev ->",1
797,"<S2SV_ModStart> current -> active_mm <S2SV_ModEnd>!= mm ) <S2SV_ModStart> goto out ; if (! mmget_still_valid ( mm ) ) { leave_mm ( smp_processor_id ( ) ) ; base_pages_to_flush = ( end - start ) >> PAGE_SHIFT ; if ( base_pages_to_flush > TLB_FLUSH_ALL ) base_pages_to_flush = TLB_FLUSH_ALL ; count_vm_event ( NR_TLB_LOCAL_SHOOTDOWN, base_pages_to_flush ) ; local_flush_tlb ( ) ; } <S2SV_ModEnd> if ( (",0
798,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> index ) ; return sse_to_psnr <S2SV_ModEnd> ( ( double <S2SV_ModStart> ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) <S2SV_ModEnd> ; } <S2SV_null>",0
799,"<S2SV_ModStart> val ) { int temp_size = 500 ; char * temp = malloc ( temp_size ) <S2SV_ModEnd> ; int i <S2SV_ModStart> ; ) { if ( i >= temp_size ) { temp_size *= 2 ; temp = realloc ( temp, temp_size ) ; }",1
800,<S2SV_ModStart> task ) { <S2SV_ModEnd> del_timer ( & <S2SV_ModStart> -> timer ) <S2SV_ModEnd> ; complete (,1
801,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
802,"<S2SV_ModStart> = 0 ; # ifdef ENABLE_DOT1 if ( addr_str_length > sizeof ( addr_str_buffer ) ) log_warn ( ""lldp"", ""too <S2SV_blank> large <S2SV_blank> management <S2SV_blank> address <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; <S2SV_ModStart> NULL ) { if ( addr_str_length > sizeof ( orgid ) ) log_warn ( ""lldp"", ""too <S2SV_blank> large <S2SV_blank> management <S2SV_blank> address <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; <S2SV_ModStart> NULL ) { if ( vlan_len > sizeof ( orgid ) ) log_warn ( ""lldp"", ""too <S2SV_blank> large <S2SV_blank> management <S2SV_blank> address <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; vlan_len = sizeof ( orgid ) ; <S2SV_ModStart> NULL ) { if ( vlan_len > sizeof ( orgid ) ) log_warn ( ""lldp"", ""too <S2SV_blank> large <S2SV_blank> management <S2SV_blank> address <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; vlan_len = sizeof ( orgid ) ; <S2SV_ModStart> NULL ) { if ( vlan_len > sizeof ( orgid ) ) log_warn ( ""lldp"", ""invalid",0
803,"<S2SV_ModStart> object + size <= bplist -> offset_table ) { PLIST_BIN_ERR ( ""%s: <S2SV_blank> BPLIST_DICT <S2SV_blank> data <S2SV_blank> bytes <S2SV_blank> point <S2SV_blank> outside <S2SV_blank> of <S2SV_blank> valid <S2SV_blank> range\\n"", __func__ ) ; return NULL ; } if ( * object + size <S2SV_ModStart> object + size <= bplist -> offset_table ) { PLIST_BIN_ERR ( ""%s: <S2SV_blank> BPLIST_DICT <S2SV_blank> data <S2SV_blank> bytes <S2SV_blank> point <S2SV_blank> outside <S2SV_blank> of <S2SV_blank> valid <S2SV_blank> range\\n"", __func__, size ) ; return NULL ; } if ( * object + size <S2SV_ModStart> object + size <= bplist -> offset_table ) { PLIST_BIN_ERR ( ""%s: <S2SV_blank> BPLIST_DICT <S2SV_blank> data <S2SV_blank> bytes <S2SV_blank> point <S2SV_blank> outside <S2SV_blank> of <S2SV_blank> valid <S2SV_blank> range\\n"", __func__ ) ; return NULL ; }",0
804,"<S2SV_ModStart> ( ) ; TRACE_DEBUG ( ""CIDER=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_CIDER ) ) ; TRACE_DEBUG ( ""PHY1ILR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1ILR ) ) ; TRACE_DEBUG ( ""PHY1IHR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1IHR ) ) ; if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } ksz8851WriteReg ( interface, KSZ8851_MARH <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARM <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARL <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARL <S2SV_ModEnd>, htons",0
805,<S2SV_ModStart> all_channels_lock ) ; put_net ( pch -> chan_net ) ; pch -> chan_net = NULL ;,1
806,"<S2SV_ModStart> btrfs_dir_item * di = NULL <S2SV_ModStart> - ENOMEM ; path -> skip_release_on_error = 1 ; if (! value ) { di = btrfs_lookup_xattr ( trans, root, path, btrfs_ino ( inode ), name, name_len, - 1 ) ; if (! di ) { ret = - ENODATA ; goto out ; } <S2SV_ModEnd> if (! <S2SV_ModStart> out ; } <S2SV_ModEnd> if ( flags <S2SV_ModStart> & XATTR_REPLACE ) { di = btrfs_lookup_xattr ( NULL, root, path, btrfs_ino ( inode ), name, name_len, - 1 ) ; if (! di ) { ret = - ENODATA ; goto out ; } <S2SV_ModEnd> if (! <S2SV_ModStart> out ; } ret = btrfs_insert_xattr_item <S2SV_ModEnd> ( trans, <S2SV_ModStart>, path, btrfs_ino ( inode ), name, name_len, value, size ) ; btrfs_release_path ( path ) ; di = NULL ; } ret = btrfs_insert_xattr_item <S2SV_ModEnd> ( trans, <S2SV_ModStart>, path, btrfs_ino ( inode ),",0
807,<S2SV_ModStart> > 0xbf ) { <S2SV_ModStart> return 1 ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto beach ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto beach ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto beach ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto beach ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto beach ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto beach ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto beach ; } <S2SV_ModStart> goto beach ; <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto beach ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto beach ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto beach ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto beach ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto beach ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto beach ; } <S2SV_ModStart> goto beach ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto beach ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto beach ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto beach ; } <S2SV_ModStart> buf_len ),0
808,"<S2SV_ModStart> client -> proxy ) ; g_byte_array_free ( client -> auth_buffer, TRUE",1
809,<S2SV_ModStart>. skip } ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf ->,0
810,<S2SV_ModStart> ; if ( key_is_negative ( key <S2SV_ModEnd> ) ) return,1
811,<S2SV_ModStart> ip ++ ; # if defined ( CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS ) if ( likely ( HAVE_IP ( t + 15 ) && HAVE_OP ( t + 15 ) ) ) { NEED_IP ( 1 ) ; } else # endif <S2SV_ModEnd> { t += <S2SV_ModStart> t + 3 ) ; do { * op ++ = * ip ++ ; } while ( -- t > 0 ) ; <S2SV_ModEnd> state = 4 <S2SV_ModStart> 4 ; match_next : # if defined ( CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS ) if ( likely ( HAVE_IP ( t + 15 ) && HAVE_OP ( t + 15 ) ) ) { <S2SV_ModEnd> NEED_IP ( t <S2SV_ModStart> ; NEED_IP ( t + 3 ) ; do { * op ++ = * ip ++ ; } while ( -- t > 0 ) ; TEST_LB ( m_pos ) ; op [ 0 ] = m_pos [ 0 ] ; op [ 1 ] = m_pos [ 1 ] ; op [ 2 ] = m_pos [ 1 ] ; op [ 3 ] = m_pos [ 2 ] ; op [ 4 ] = m_pos [ 1 ],0
812,"<S2SV_ModStart> ; if ( len < sizeof ( uint8_t ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> size!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; <S2SV_ModStart> ; return - EINVAL ; } if ( len < sizeof ( uint8_t ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> size!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - EINVAL ; }",0
813,<S2SV_ModStart> { vpn_packet_t outpkt ; if ( len > sizeof outpkt. data ) return,1
814,<S2SV_ModStart> vmx_vpid_bitmap ) ; <S2SV_ModEnd> for ( msr <S2SV_ModStart> vmx_vpid_bitmap ) ; <S2SV_ModEnd> if ( r,0
815,"<S2SV_ModStart> out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; goto out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; goto out_error ; } <S2SV_ModStart> } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; goto out_error ; } <S2SV_ModStart> out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; goto out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; goto out_error ; }",0
816,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ),0
817,<S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ) : ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> -> baseline_gf_interval ) / ( rc -> baseline_gf_interval + af_ratio - 1 ) ; # else target = rc -> avg_frame_bandwidth <S2SV_ModEnd> ; # endif,0
818,"<S2SV_ModStart> ( argv [ i <S2SV_ModEnd> ], ""--allow-untrusted""",0
819,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
820,<S2SV_ModStart> INDENT_INCR ; } if ( tbl -> indent < 0 ) tbl -> indent = 0 ; <S2SV_ModStart> -= INDENT_INCR ; if ( offset < 0 ) offset = 0 ;,1
821,"<S2SV_ModStart> + tail ; size_t ss = CDF_SEC_SIZE ( h ) * sst -> sst_len ; <S2SV_ModStart> b ) <= ss <S2SV_ModEnd> * sst -> <S2SV_ModStart> b ), ss <S2SV_ModEnd> * sst -> <S2SV_ModStart> b ), ss <S2SV_ModEnd> * sst -> <S2SV_ModStart> -> sst_len, ss <S2SV_ModEnd>, sst ->",0
822,"<S2SV_ModStart> : # line 113 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""hex_grammar.y"" { incr_ast_levels <S2SV_ModStart> } # line 122 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""hex_grammar.y"" { incr_ast_levels <S2SV_ModStart> } # line 122 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""hex_grammar.y"" { incr_ast_levels <S2SV_ModStart> } # line 122 <S2SV_ModEnd> ""hex_grammar.y"" { incr_ast_levels <S2SV_ModStart> } # line 122 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""hex_grammar.y"" { incr_ast_levels <S2SV_ModStart> } # line 122 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""hex_grammar.y"" { incr_ast_levels <S2SV_ModStart> } # line 122 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""hex_grammar.y"" { incr_ast_levels <S2SV_ModStart> } # line 122 <S2SV_ModEnd> ""hex_grammar.y"" { incr_ast_levels <S2SV_ModStart> } # line 122 <S2SV_ModEnd> ""hex_grammar.",0
823,"<S2SV_ModStart> ib ] ; memset ( d, 0, sizeof ( BLOCKD ) ) ;",0
824,<S2SV_ModStart> FN_REFLEN ] ; if ( strlen ( opt_basedir ) >= FN_DIRLEN ) { error = - 1 ; goto exit ; } <S2SV_ModStart> 1 ) ; if ( strlen ( opt_basedir ) >= FN_DIRLEN ) { error = - 1 ; goto exit ; },0
825,<S2SV_ModStart> ; if ( key_is_positive ( key <S2SV_ModEnd> ) ) zap,1
826,"<S2SV_ModStart> ) -> filter ; memset ( & uf, 0, sizeof ( uf ) )",1
827,"<S2SV_ModStart> int n = MIN ( sizeof ( clear_buffer ), <S2SV_ModEnd> data_end - data <S2SV_ModStart> data ) ; if ( n!= sizeof ( clear_buffer ) ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; }",0
828,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
829,<S2SV_ModStart> -> peer. auth_capable = new -> peer. auth_capable ; asoc -> peer.,1
830,<S2SV_ModStart> fibsize > ( dev -> max_fibsize - sizeof ( struct aac_srb ) - sizeof ( struct aac_srb_reply ) - sizeof ( struct aac_srb ) - sizeof ( struct aac_srb_reply ) - sizeof ( struct aac_srb ) - sizeof ( struct aac_srb ) - sizeof ( struct aac_srb ) - sizeof ( struct aac_srb ) - sizeof ( u32 ) - sizeof ( u32 ) - sizeof ( u32 ) <S2SV_ModStart> goto cleanup ; } if ( fibsize < 0 || fibsize > ( <S2SV_ModEnd> dev -> max_fibsize <S2SV_ModStart> dev -> max_fibsize - sizeof ( struct aac_srb ) - sizeof ( struct aac_srb ) - sizeof ( struct aac_srb ) - sizeof ( struct aac_srb ) - sizeof ( struct aac_srb ) - sizeof ( u32 ) - sizeof ( u32 ) - sizeof ( u32 ) - sizeof ( u32 ) - sizeof ( u32 ) - sizeof ( u32 ) - sizeof ( u32 ) - sizeof ( u32 ) - sizeof ( u32 ),0
831,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( cc0 <S2SV_ModStart> % rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""PredictorEncodeTile"", ""%s"", ""(cc0%rowsize)!=0"" ) ; return 0 ; } <S2SV_ModEnd> while ( cc",1
832,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
833,"<S2SV_ModStart> input_data, size_t input_forwards_size, size_t input_backwards_size <S2SV_ModEnd>, int flags <S2SV_ModStart> # define prolog ( e ) <S2SV_ModStart> { action = ACTION_KILL_TAIL ; break ; } <S2SV_ModEnd> # define fail_if_error <S2SV_ModStart> ) switch ( e ) { case ERROR_INSUFFICIENT_MEMORY : return - 2 ; case ERROR_TOO_MANY_RE_FIBERS : return - 4 ; } <S2SV_ModStart> RE_FLAGS_BACKWARDS ) { input = ( uint8_t ) yr_min ( input_backwards_size, RE_SCAN_LIMIT ) ; <S2SV_ModStart> input_incr ; } max_bytes_matched = ( int ) yr_min ( input_backwards_size, RE_SCAN_LIMIT ) ; <S2SV_ModStart> RE_FLAGS_BACKWARDS ) { input = ( uint8_t ) yr_min ( input_backwards_size, RE_SCAN_LIMIT ) ; <S2SV_ModStart> input_incr ; } <S2SV_ModStart> RE_FLAGS_BACKWARDS ) { input = ( uint8_t ) yr_min ( input_backwards_size, RE_SCAN_LIMIT ) ;",0
834,"<S2SV_ModStart> * returndistortion, vpx_bit_depth_t <S2SV_ModEnd> * returnintra ) <S2SV_ModStart> int zero_mv_sse = ( vpx_bit_depth_t ) <S2SV_ModEnd> INT_MAX, best_sse <S2SV_ModStart>, best_rd_sse = ( vpx_bit_depth_t ) <S2SV_ModEnd> INT_MAX ; # <S2SV_ModStart>, best_rd_sse = ( vpx_bit_depth_t ) <S2SV_ModEnd> INT_MAX ; # <S2SV_ModStart>, best_rd_sse = ( vpx_bit_depth_t ) <S2SV_ModEnd> INT_MAX ; # <S2SV_ModStart> = INT_MAX ; # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = ( vpx_bit_depth_t ) <S2SV_ModEnd> INT_MAX, best_sse <S2SV_ModStart> best_rd_sse = ( vpx_bit_depth_t ) <S2SV_ModEnd> INT_MAX ; # <S2SV_ModStart> = INT_MAX ; # else unsigned char zero_mv_sse = ( unsigned char * ) ( unsigned char * ) ( unsigned char * ) ( unsigned char * ) ( unsigned char * ) ( unsigned char * ) ( unsigned char * ) ( unsigned char * ) ( unsigned char *",0
835,"<S2SV_ModStart> svm, MC_VECTOR ) ; set_exception_intercept ( svm, DB_VECTOR",0
836,<S2SV_ModStart> goto error ; if ( statbuf. st_size < 0 ) goto error ;,0
837,"<S2SV_ModStart> sst, const cdf_directory_t * root_storage <S2SV_ModEnd> ) { cdf_summary_info_header_t <S2SV_ModStart> break ; } if ( root_storage ) { <S2SV_ModStart> = cdf_clsid_to_mime ( root_storage -> d_storage_uuid <S2SV_ModEnd>, clsid2desc ) <S2SV_ModStart> - 2 ; } <S2SV_ModStart>, count, root_storage <S2SV_ModEnd> ) ; free",1
838,"<S2SV_ModStart> ; UWORD8 u1_profile_idc, u1_level_idc, u1_seq_parameter_set_id ; WORD32 <S2SV_ModEnd> i2_max_frm_num ; WORD32",0
839,<S2SV_ModStart> -> length ) ; if ( err ) return - EFAULT,1
840,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; vpx_svc_parameters_t * const svc_params = va_arg ( args, vpx_svc_parameters_t * ) ; <S2SV_ModStart> ( params == NULL || svc_params -> <S2SV_ModEnd> spatial_layer_id = params <S2SV_ModStart> temporal_layer ; cpi <S2SV_ModEnd> -> lst_fb_idx = <S2SV_ModStart> lst_fb_idx ; cpi <S2SV_ModEnd> -> gld_fb_idx = <S2SV_ModStart> gld_fb_idx ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; cpi -> alt_fb_idx = params -> alt_fb_idx ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ; set_encoder_config ( & ctx -> oxcf, & ctx -> extra",0
841,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( ntohs ( <S2SV_ModStart> ipv6_hdr ( skb ) -> payload_len + offset ) > end ) { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_INHDRERRORS ) ; icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - ntohs ( ipv6_hdr ( skb ) -> payload_len ) ) ; goto err ; } if ( <S2SV_ModStart> > end ) { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_INHDRERRORS ) ; icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - skb_network_header ( skb ) ) ) ; goto err ; }",0
842,"<S2SV_ModStart> { uint16 bitspersample = ( uint16 ) TIFFGetFieldDefaulted ( in, TIFFTAG_BITSPERSAMPLE, & bitspersample ) ; uint16 samplesperpixel = ( uint16 ) TIFFGetFieldDefaulted ( in, TIFFTAG_SAMPLESPERPIXEL <S2SV_ModEnd>, input_photometric ; <S2SV_ModStart> input_photometric ; } if ( samplesperpixel == ( uint16 ) - 1 ) { TIFFSetField ( out, TIFFTAG_SAMPLESPERPIXEL, samplesperpixel ) ; return FALSE ; }",0
843,"<S2SV_ModStart> a ) { if ( a -> flags & ARCHIVE_EXTRACT_NOFOLLOW ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED ) ; } <S2SV_ModStart> = '\\0' ; if ( S_ISLNK ( st. st_mode ) ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } } else if ( S_ISLNK ( <S2SV_ModStart> mode ) ) { archive_set_error ( & a -> archive, 0, ""Removing <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; a -> pst = NULL ; } else { if (! S_ISLNK ( a -> mode ) ) { archive_set_error ( & a -> archive, 0, ""Removing <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED )",0
844,"<S2SV_ModStart> ; if ( safe_mount ( hostpath, path, 0, MS_BIND, NULL, rootfs -> path? rootfs -> mount : <S2SV_ModEnd> NULL )!=",1
845,"<S2SV_ModStart> ; unsigned int entries_left <S2SV_ModEnd> ; bh = <S2SV_ModStart> ibh ) { entries_left = udf_read_ptagged ( inode -> i_sb, & iinfo -> i_location, 0, & ident ) ; if ( entries_left < 1 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> in <S2SV_blank> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
846,<S2SV_ModStart> -> tx_size ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_y ] ; uint16_t * const int_4x4_y = & lfm -> int_4x4_y [ tx_size_y ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv [ tx_size_uv ] <S2SV_ModEnd> ; const int,0
847,"<S2SV_ModStart> dst_size ) { uint8_t namelen, len ; <S2SV_ModStart> data < data_end <S2SV_ModEnd> ) return - <S2SV_ModStart> - 1 ; namelen = ff_amf_tag_size ( data, data_end ) ; <S2SV_ModStart> if (! namelen <S2SV_ModEnd> ) break ; <S2SV_ModStart> if (! memcmp ( data, name, namelen ) ) { if ( len < 0 || len >= data_end - data ) return - 1 ; <S2SV_ModStart> += size ; len = ff_amf_tag_size ( data, data_end ) ; if ( len < 0 || len >= data_end - data ) return - 1 ; data += len ; } <S2SV_ModStart> ; if ( <S2SV_ModEnd> size == namelen <S2SV_ModStart> data - size <S2SV_ModEnd> ) { switch <S2SV_ModStart> case AMF_DATA_TYPE_NUMBER : snprintf ( dst, dst_size, ""%g"", av_int2double ( AV_RB64 ( data ) ) ) ; break ; case AMF_DATA_TYPE_BOOL : snprintf ( dst, dst_size, ""%s"", * data ) ; break ; case AMF_DATA_TYPE_STRING : len = ff_amf_tag_size ( data,",0
848,<S2SV_ModStart> t1_getline ( ) ; free ( t1_buf_array ) ; t1_buf_ptr = eol ( t1_buf_array ) ; free ( t1_line_array,0
849,"<S2SV_ModStart> mq_flush_lock, flags ) ; fq -> flush_rq = flush_rq ;",0
850,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
851,"<S2SV_ModStart> NULL ; return! <S2SV_ModEnd> match ( prog <S2SV_ModStart> | eflags, <S2SV_ModEnd> sub ) ;",0
852,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF <S2SV_ModStart> / 2 ; if (! <S2SV_ModStart>, cc ) ) return 0 <S2SV_ModStart> wc ) ; return 1 ;",1
853,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
854,"<S2SV_ModStart> __be32 daddr ; struct ip_options_rcu * inet_opt <S2SV_ModStart> return 0 ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> -> inet_daddr ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> srr ) daddr = inet_opt -> opt. <S2SV_ModEnd> faddr ; rt",0
855,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
856,"<S2SV_ModStart> * mgr_hdl ; <S2SV_ModEnd> memset ( s_path <S2SV_ModStart> ( c_path ) <S2SV_ModEnd> ) ; switch <S2SV_ModStart> ( c_path, ""%s%s%d_C_XXXXXX"" <S2SV_ModEnd>, HSM_FM_SCK_PREFIX, <S2SV_ModStart> hdl -> instance <S2SV_ModEnd> ) ; if",1
857,"<S2SV_ModStart> == NULL || ( void * ) pReplyData == NULL || <S2SV_ModStart> ; if ( ( void * ) pCmdData == NULL || ( void * ) pReplyData == NULL || ( effect_param_t * ) pReplyData == NULL ) { ALOGW ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( <S2SV_ModStart> == NULL || ( void * ) pReplyData == NULL || ( * replySize == sizeof ( effect_param_t ) ) ) { ALOGW ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } effect_param_t * p = ( effect_param_t * ) pCmdData ; if ( <S2SV_ModStart> == NULL || ( void * ) pReplyData == NULL || ( effect_param_t * ) pReplyData == NULL || ( effect_param_t * ) pReplyData == sizeof ( effect_param_t ) ) { ALOGW ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; }",0
858,"<S2SV_ModStart> ""`%s\'"", option ) ; page_geometry = DestroyString ( page_geometry",1
859,"<S2SV_ModStart> ; if ( unlikely ( <S2SV_ModStart> ) ) ) ) { atomic_sub ( <S2SV_ModEnd> src_info. ipi6_ifindex <S2SV_ModStart> src_info. ipi6_ifindex, & sk -> sk_omem_alloc ) ; if ( atomic_sub ( <S2SV_ModEnd> src_info. ipi6_ifindex <S2SV_ModStart> src_info. ipi6_ifindex, & sk -> sk_omem_alloc ) ) return - ENOMEM ; } <S2SV_ModEnd> break ; case <S2SV_ModStart> ; if ( unlikely ( <S2SV_ModStart> ) ) ) ) ) { atomic_sub ( <S2SV_ModEnd> src_info. ipi6_ifindex <S2SV_ModStart> src_info. ipi6_ifindex, & sk -> sk_omem_alloc ) ; if ( atomic_sub ( <S2SV_ModEnd> src_info. ipi6_ifindex <S2SV_ModStart> src_info. ipi6_ifindex, & sk -> sk_omem_alloc ) ) return - ENOMEM ; }",0
860,<S2SV_ModStart> berval ) ; if (! ret [ j ] ) { err = ENOMEM ; goto cleanup ; },0
861,"<S2SV_ModStart> OP_ENDCATCH ) ; emit ( J, F, OP_ENDTRY ) ;",1
862,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_row_idx <S2SV_ModStart> return ; } LIBXSMM_ASSERT ( 0!= l_row && 0!= l_column ) ;",1
863,<S2SV_ModStart> 0x02 ) ; if ( crgram_len > SC_MAX_APDU_BUFFER_SIZE - 1 ) len = SC_MAX_APDU_BUFFER_SIZE - 1 ;,0
864,"<S2SV_ModStart> uint8 result ; uint32 <S2SV_ModEnd> length ; STREAM <S2SV_ModStart> ; STREAM s ; struct stream packet <S2SV_ModStart> return False ; packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> connect <S2SV_blank> id <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",1
865,"<S2SV_ModStart> ; if ( status == NULL ) status = ""UNKNOWN_REASON"" <S2SV_ModEnd> ; if (",0
866,<S2SV_ModStart> ) ) { if ( ( len == 0 ) && ( ( ctxt -> options & XML_PARSE_OLD10 ) == 0 ) && ( ( ctxt -> options & XML_PARSE_OLD10 ) == 0 ) && ( ( ctxt -> options & XML_PARSE_OLD10 ) == 0 ) && ( ( ctxt -> options & XML_PARSE_OLD10 ) == 0 ) && ( ( ctxt -> options & XML_PARSE_OLD10 ) == 0 ) && ( ( ctxt -> options & XML_PARSE_OLD10 ) == 0 ) && ( ( ctxt -> options & XML_PARSE_OLD10 ) == 0 ) && ( ( ctxt -> options & XML_PARSE_OLD10 ) == 0 ) && ( ( ctxt -> options & XML_PARSE_OLD10 ) == 0 ) && ( ( ctxt -> options & XML_PARSE_OLD10 ) == 0 ) && ( ( ctxt -> options & XML_PARSE_OLD10 ) == 0 ) && ( ( ctxt -> options & XML_PARSE_OLD10 ) == 0 ) && ( ( ctxt -> options & XML_PARSE_OLD10 ) == 0 ) && ( ( ctxt -> options & XML_PARSE_OLD10 ) == 0 ) && ( ( ctxt ->,0
867,"<S2SV_ModStart> - EINVAL ; if ( ctxt. info. tc_mapping [ 0 ] & I40E_AQ_VSI_TC_QUE_OFFSET_MASK ) { dev_info ( & vdev -> dev, ""Invalid <S2SV_blank> TC <S2SV_blank> QUE <S2SV_blank> offset: <S2SV_blank> %d, <S2SV_blank> number: <S2SV_blank> %d\\n"", ctxt. info. tc_mapping [ 0 ] & I40E_AQ_VSI_TC_QUE_OFFSET_MASK, ( u16 ) vsi -> base_queue ) ; } else { dev_info ( & vdev -> dev, ""Invalid <S2SV_blank> TC <S2SV_blank> QUE <S2SV_blank> number: <S2SV_blank> %d\\n"", ( u16 ) qmap ) ; ctxt. info. valid_sections |= cpu_to_le16 ( I40E_AQ_VSI_PROP_QUEUE_MAP_VALID ) ; qmap = ( offset << I40E_AQ_VSI_TC_QUE_NUMBER_SHIFT ) | ( pow << I40E_AQ_VSI_TC_QUE_OFFSET_SHIFT ) | ( offset << I40E_AQ_VSI_TC_QUE_NUMBER_SHIFT ) ; }",0
868,<S2SV_ModStart> * rsize >= 18 <S2SV_ModEnd> && rdesc [,1
869,<S2SV_ModStart> & new_map ) <S2SV_ModEnd> ) goto out <S2SV_ModStart> lower_first ; } ret = sort_idmaps ( & new_map ) ; if ( ret < 0 ) goto out ;,1
870,"<S2SV_ModStart> ; } } eprintf ( ""E01"" ) ;",0
871,"<S2SV_ModStart> sr ) { <S2SV_ModEnd> uint16_t StructSize ; <S2SV_ModStart> ) ; } smb_ofile_flush ( sr, <S2SV_ModEnd> sr -> fid_ofile <S2SV_ModStart> sr -> fid_ofile <S2SV_ModEnd> ) ; (",1
872,<S2SV_ModStart> * dataptr ; jas_uchar <S2SV_ModEnd> tpcnt ; jas_uint_fast32_t,0
873,<S2SV_ModStart> ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { <S2SV_ModStart> 16 ) ; } # endif <S2SV_ModStart> 16 ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { <S2SV_ModStart> 16 ) ; } # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> cur_buf ->,0
874,"<S2SV_ModStart> addrtype = TIPC_ADDR_ID ; memset ( & addr -> addr, 0, sizeof ( addr -> addr ) )",1
875,"<S2SV_ModStart> ( user_alloc && ( <S2SV_ModStart> PAGE_SIZE - 1 ) ) ||! access_ok ( VERIFY_WRITE, mem -> userspace_addr, mem -> memory_size",1
876,<S2SV_ModStart> NULL ) ; <S2SV_ModEnd> } quantum_info =,0
877,<S2SV_ModStart> ; if ( tmp_line_len >= 1 && <S2SV_ModStart> ; if ( tmp_line_len >= 1 && <S2SV_ModStart> ; if ( tmp_line_len >= 1 && <S2SV_ModStart> ; if ( tmp_line_len >= 1 && <S2SV_ModStart> ; if ( tmp_line_len >= 1 && <S2SV_ModStart> ; if ( tmp_line_len >= 1 && <S2SV_ModStart> ; if ( tmp_line_len >= 1 && <S2SV_ModStart> ; if ( tmp_line_len >= 1 && <S2SV_ModStart> ; } } } if ( tmp_line_len >= 1 && <S2SV_ModStart> ; if ( tmp_line_len >= 1 && <S2SV_ModStart> ; if ( tmp_line_len >= 1 && <S2SV_ModStart> ; if ( tmp_line_len >= 1 && <S2SV_ModStart> ; if ( tmp_line_len >= 1 && <S2SV_ModStart> ; if ( tmp_line_len >= 1 &&,0
878,"<S2SV_ModStart> len ) { PyObject <S2SV_ModEnd> * u ; <S2SV_ModStart> char * p <S2SV_ModEnd> ; const char <S2SV_ModStart> * end ; Py_DECREF ( w ) ; p = buf = PyBytes_FromStringAndSize ( ( char * ) NULL, len * 6 ) ; if ( p == buf ) { Py_DECREF ( u ) ; return NULL ; } if ( p - buf <= Py_SIZE ( u ) ) ; assert ( p - buf <= Py_SIZE ( u ) ) ; Py_DECREF ( w ) ; } else { * p ++ = * s ++ ; if ( * s & 0x80 ) { PyObject * w ; int kind ; void * data ; Py_ssize_t i ; w = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) { Py_DECREF ( w ) ; return NULL ; } kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = PyUnicode_GET_LENGTH ( w ) ; for ( i = 0 ; i < len ; i ++ ) { Py_UCS4 chr = PyUnicode_READ ( kind, data, i ) ; sprintf (",0
879,"<S2SV_ModStart> 0 ) { if ( user_sid_size > ( ( record_data_size - 4 ) - user_sid_offset ) ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_RUNTIME, LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS, ""%s: <S2SV_blank> user <S2SV_blank> SID <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds."", function ) ; goto on_error ; } <S2SV_ModStart> 0 ) { if ( strings_size > ( ( record_data_size - 4 ) - user_sid_offset ) ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_RUNTIME, LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS, ""%s: <S2SV_blank> strings <S2SV_blank> size <S2SV_blank> value <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds."", function ) ; goto on_error ; } <S2SV_ModStart> 0 ) { if ( data_size > ( ( record_data_size - 4 ) - user_sid_offset ) ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_RUNTIME, LIBCERROR_RUNTIME_ERROR",0
880,"<S2SV_ModStart> WaveHeader WaveHeader ; int format_chunk = 0 ; <S2SV_ModStart>, format ; if ( format_chunk ++ ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",1
881,"<S2SV_ModStart> char * buff ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } buff",0
882,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_8BITS ( tptr ) ;,0
883,<S2SV_ModStart> ~ SNDRV_TIMER_IFLG_RUNNING ; list_del_init ( & timeri -> ack_list ) ; list_del_init ( & timeri -> active_list ) ;,1
884,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart> NO, DISPLAYED, setimes, targisdir, wrerrno = 0 <S2SV_ModStart> ; if ( stat ( src, & stb )!= 0 || <S2SV_ModEnd> S_ISDIR ( stb <S2SV_ModStart>. st_mode )!= 0 || <S2SV_ModEnd> S_ISDIR ( stb <S2SV_ModStart>. st_mode )!= 0 || <S2SV_ModEnd> S_ISDIR ( stb <S2SV_ModStart>. st_mode )!= 0 || <S2SV_ModEnd> S_ISDIR ( stb <S2SV_ModStart>. st_mode ) ) fatal ( ""%s: <S2SV_blank> file <S2SV_blank> does <S2SV_blank> not <S2SV_blank> appear <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> directory"", __func__ ) ; if ( stat ( src, & stb )!= 0 || <S2SV_ModEnd> S_ISDIR ( stb <S2SV_ModStart>. st_mode )!= 0 || <S2SV_ModEnd> S_ISDIR ( stb <S2SV_ModStart>. st_mode )!= S_ISDIR ( stb. st_mode )",0
885,<S2SV_ModStart> else if ( myentity_find_ext <S2SV_ModEnd> ( target ) <S2SV_ModStart> else if ( myentity_find_ext <S2SV_ModEnd> ( target ) <S2SV_ModStart> else if ( myentity_find_ext <S2SV_ModEnd> ( target ),0
886,<S2SV_ModStart> -> buffer ; if (! ctx -> gf128 ) return - ENOKEY ;,1
887,<S2SV_ModStart> ; if ( size + AVPROBE_PADDING_SIZE > pb -> buf_end - pb -> buf_ptr ) goto error ; if (,0
888,"<S2SV_ModStart> null_server ; int need_error_free = 0, local_rcache = 0, local_authcon = 0 ; if ( flags & KRB5_RECVAUTH_ENHANCE_VERSION ) { if (! ( flags & KRB5_RECVAUTH_BADAUTHVERS ) && strcmp ( inbuf. data, sendauth_version ) ) { problem = KRB5_SENDAUTH_BADAUTHVERS ; response = 1 ; } else { if ( ( flags & KRB5_RECVAUTH_BADAPPLVERS ) && strcmp ( inbuf. data, appl_version ) ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } } else { if ( version &&! ( flags & KRB5_RECVAUTH_BADAPPLVERS ) && strcmp ( inbuf. data, server ) ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } else { response = inbuf ; } } if ( flags & KRB5_RECVAUTH_ENHANCE_VERSION ) { if (! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ;",0
889,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
890,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; } ret",1
891,<S2SV_ModStart> dptr ++ = ROSE_CALL_REQ_ADDR_LEN_VAL <S2SV_ModEnd> ; memcpy (,1
892,<S2SV_ModStart> = new_ns ; new_ns -> mounts ++ ;,1
893,<S2SV_ModStart> = 0 ; if ( ( width & 0xf )!= 0 ) width += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( width & 0xf )!= 0 ) width += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( width & 0xf )!= 0 ) width += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( width & 0xf )!= 0 ) width += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( width & 0xf )!= 0 ) width += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( width & 0xf )!= 0 ) width += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( width & 0xf )!= 0 ) width += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( width & 0xf )!= 0 ) width += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( width &,0
894,<S2SV_ModStart> ; zip_object_handlers. get_gc = php_zip_get_gc ; zip_object_handlers.,1
895,<S2SV_ModStart> case RXE_MEM_TYPE_FMR : if <S2SV_ModEnd> ( iova < <S2SV_ModStart> mem -> iova || length > mem -> length || iova > <S2SV_ModEnd> mem -> iova <S2SV_ModStart> mem -> length - length ) return - EFAULT ; return <S2SV_ModEnd> 0 ; default,1
896,"<S2SV_ModStart> ( ndo, ""%s"", icmp6_tstr <S2SV_ModEnd> ) ) ;",0
897,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",1
898,<S2SV_ModStart> sent = 0 <S2SV_ModEnd> ; smb_msg.,1
899,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> buffer_pipe_buf_get ( struct <S2SV_ModStart> -> private ; if ( ref -> ref > INT_MAX / 2 ) return false ; <S2SV_ModStart> ref ++ ; return true ;,1
900,<S2SV_ModStart> fs -> clusters + <S2SV_ModEnd> 1 ) get_fat,1
901,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
902,<S2SV_ModStart> sk_nulls_node ) ; sk_nulls_node_init ( & sk -> sk_nulls_node ) ;,1
903,<S2SV_ModStart> } ps_dec -> u2_total_mbs_coded += u1_num_mbs ; if ( ( ps_dec -> u2_total_mbs_coded < u1_mbaff ) || ( ps_dec -> u2_total_mbs_coded > u1_mbs ) ) { ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> ps_cur_slice -> u1_mbaff_frame_flag = u1_is_idr_slice ; ps_dec -> ps_cur_slice -> u1_mbaff_frame_flag = u1_is_idr_slice ; ps_dec -> ps_cur_slice -> u1_mbaff_frame_flag = u1_is_idr_slice ; ps_dec -> ps_cur_slice -> u1_mbaff_frame_flag = u1_is_idr_slice ; ps_dec -> ps_cur_slice -> u1_mbaff_frame_flag = u1_is_idr_slice ; ps_dec -> ps_cur_slice -> u1_mbaff_frame,0
904,<S2SV_ModStart> (! mm ||! mm -> env_end,1
905,"<S2SV_ModStart> inode * inode, int relocated ) { int flags = relocated? RR_RELOC_DE : 0 ; <S2SV_ModEnd> int result = <S2SV_ModStart>, inode, flags <S2SV_ModEnd> ) ; if <S2SV_ModStart>, inode, flags | RR_REGARD_XA <S2SV_ModEnd> ) ; }",1
906,<S2SV_ModStart> * inotify_new_group ( <S2SV_ModEnd> unsigned int max_events <S2SV_ModStart> -> inotify_data. fa = NULL <S2SV_ModEnd> ; group -> <S2SV_ModStart> -> inotify_data. user = get_current_user ( ) ; if ( atomic_inc_return ( & group -> inotify_data. user -> inotify_devs ) > inotify_max_user_instances ) { fsnotify_put_group ( group ) ; return ERR_PTR ( - EMFILE ) ; } <S2SV_ModEnd> return group ;,1
907,<S2SV_ModStart> [ p ] && in -> linesize [ p ],1
908,<S2SV_ModStart> } pairs = safe_calloc <S2SV_ModEnd> ( pcount *,0
909,<S2SV_ModStart> screen -> buffers [ 0 ] && screen -> buffers [ 1 ],0
910,"<S2SV_ModStart> SCALAR_VALUE ) { coerce_reg_to_size ( & <S2SV_ModStart>, size ) ; coerce_reg_to_size ( &",0
911,"<S2SV_ModStart>, nstrips = 0 ; uint32 stripsize = TIFFStripSize ( in ) ; if ( stripsize == 0 ) { TIFFError ( """", ""TIFF <S2SV_blank> strip <S2SV_blank> size <S2SV_blank> is <S2SV_blank> zero!"" ) ; return 0 ; }",0
912,<S2SV_ModStart> base_name ) ; char need_to_append_dot ; struct search_domain * dom ; if (! base_len ) return NULL ; <S2SV_ModEnd> need_to_append_dot = base_name <S2SV_ModStart> : 1 ; <S2SV_ModEnd> for ( dom,1
913,<S2SV_ModStart> { err = _nanosleep <S2SV_ModEnd> ( & delay,0
914,<S2SV_ModStart> goto out ; <S2SV_ModEnd> err = -,1
915,"<S2SV_ModStart>, offset, rows, <S2SV_ModStart> -> rows ; rows = ( MagickSizeType ) <S2SV_ModEnd> ReadBlobLSBShort ( image <S2SV_ModStart> ( image ) ; if ( rows > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> -> rows ; rows = ( MagickSizeType ) <S2SV_ModEnd> ReadBlobLSBShort ( image <S2SV_ModStart> ( image ) ; if ( rows > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> -> rows ; rows = ( MagickSizeType ) <S2SV_ModEnd> ReadBlobLSBShort ( image <S2SV_ModStart> ( image ) ; if ( rows > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> -> rows ; rows = ( MagickSizeType ) <S2SV_ModEnd> ReadBlobLSBShort ( image <S2SV_ModStart> ( image ) ; if ( rows > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
916,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> UINT32 originalSize ; if (! context ) return FALSE ; <S2SV_ModStart> == 0 ) { if ( context -> priv -> PlaneBuffersLength < originalSize ) return FALSE ; <S2SV_ModStart> 0xFF ) ; } <S2SV_ModStart> < originalSize ) { if (! <S2SV_ModStart> i ], context -> priv -> PlaneBuffersLength, originalSize ) ) return FALSE ; } else { if ( context -> priv -> PlaneBuffersLength < originalSize ) return FALSE ; <S2SV_ModEnd> CopyMemory ( context <S2SV_ModStart> originalSize ) ; } <S2SV_ModStart> planeSize ; } return TRUE ;",1
917,<S2SV_ModStart> policy ) { if (! inode_owner_or_capable ( inode ) ) return - EACCES ;,1
918,"<S2SV_ModStart> value ) { if ( strcmp ( sfmt ( ""default-%s"", state -> host -> name ), "" <S2SV_blank> \\t,"" ) && strcmp ( sfmt ( ""default-%s"", state -> host -> name ), "" <S2SV_blank> "" ) && strcmp ( sfmt ( "" <S2SV_blank> \\t,"", NULL ), value ) == 0 ) { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } else if ( strcmp ( sfmt ( ""default-%s"", state -> host -> name ) == 0 && strcmp ( sfmt ( ""default-%s"", state -> host -> name ), "" <S2SV_blank> "" ) == 0 && strcmp ( sfmt ( ""default-%s"", state -> host -> name ) == 0 ) { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } else { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; }",0
919,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
920,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) -> iif ) ; * addr_len = sizeof ( * sin6,1
921,<S2SV_ModStart> ||! prev_hash || <S2SV_ModEnd>! coinbase1 || <S2SV_ModStart>! ntime ) <S2SV_ModEnd> { if ( <S2SV_ModStart> job_id ) ) { if ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ; goto out ; } <S2SV_ModEnd> cg_wlock ( &,0
922,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
923,"<S2SV_ModStart> size ) { size_t res ; if ( check_mul_overflow ( num, size, & res ) ) abort ( ) ; void * ptr ; <S2SV_ModEnd> ptr = malloc <S2SV_ModStart> = malloc ( res <S2SV_ModEnd> ) ; if <S2SV_ModStart> '\\0', ( res <S2SV_ModEnd> ) ) ;",1
924,<S2SV_ModStart> ; put_io_context ( ioc <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
925,"<S2SV_ModStart> unused ) { <S2SV_ModEnd> _Py_IDENTIFIER ( __dict__ <S2SV_ModStart> * dict = _PyObject_GetAttrId <S2SV_ModEnd> ( self, <S2SV_ModStart> ( self, & PyId___dict__ ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> { res = _PyObject_BuildValue <S2SV_ModEnd> ( ""O()O"", <S2SV_ModStart> ( dict ) <S2SV_ModEnd> ; Py_DECREF (",0
926,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
927,"<S2SV_ModStart> perf_event * ) ; u64 id <S2SV_ModEnd> ; u32 flags <S2SV_ModStart> arg ) ; return 0 ; case PERF_EVENT_IOC_PERIOD : return perf_event_period ( event, ( u64 __user * ) arg ) ; case PERF_EVENT_ID : { u64 id = primary_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; return 0 ; } case PERF_EVENT_SET_OUTPUT : return perf_event_set_output ( event, NULL <S2SV_ModEnd> ) ; }",0
928,<S2SV_ModStart> sacked_out ) ; if ( newly_acked_sacked <= 0 || WARN_ON_ONCE (! tp -> prior_cwnd ) ) return ;,1
929,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> ] ) ; FRAME_COUNTS * counts = cm -> fc -> counts ; if ( counts ) ++ counts -> <S2SV_ModEnd> uv_mode [ y_mode",0
930,<S2SV_ModStart> mask ) { struct skcipher_tfm * tfm = <S2SV_ModEnd> crypto_alloc_skcipher ( name <S2SV_ModStart> ) ; return tfm ;,0
931,<S2SV_ModStart> - EINVAL ; if ( cmd -> flags & CCP_CMD_RAW ) { if ( cmd -> flags & CCP_CMD_RAW ) { if ( cmd -> flags & CCP_CMD_RAW ) { if ( cmd -> flags & CCP_CMD_RAW ) { if ( cmd -> flags & CCP_CMD_RAW ) { return - EINVAL ; } } else { if ( cmd -> flags & CCP_CMD_RAW ) { if ( cmd -> flags & CCP_CMD_RAW ) { if ( cmd -> flags & CCP_CMD_RAW ) { if ( cmd -> flags & CCP_CMD_RAW ) { if ( cmd -> flags & CCP_CMD_RAW ) { if ( cmd -> flags & CCP_CMD_RAW ) { if ( cmd -> flags & CCP_CMD_RAW ) { return - EINVAL ; } } } else { if ( cmd -> flags & CCP_CMD_RAW ) { if ( cmd -> flags & CCP_CMD_RAW_V1 ) { if ( cmd -> flags & CCP_CMD_RAW_V2 ) { if ( cmd -> flags & CCP_CMD_,0
932,"<S2SV_ModStart> c -> tile_width <S2SV_ModEnd>, 16 ) <S2SV_ModStart>, 16 ) * 3",1
933,"<S2SV_ModStart> iv ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
934,"<S2SV_ModStart> = jas_alloc3 ( JPC_QMFB_COLGRPSIZE, sizeof ( jpc_fix_t ) ) ; if (! jas_safe_size_mul ( numrows, JPC_QMFB_COLGRPSIZE, dstptr ) ) { abort ( ) ; }",0
935,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
936,"<S2SV_ModStart> p ) { return <S2SV_ModEnd> chdlc_print ( ndo <S2SV_ModStart>, p, h -> len <S2SV_ModEnd> ) ; }",1
937,"<S2SV_ModStart> tcon ) ; cifs_sb -> smb_cache = kzalloc ( sizeof ( struct smb_cache ), GFP_KERNEL ) ; if (! cifs_sb -> smb_cache ) { rc = - ENOMEM ; goto out ; }",0
938,<S2SV_ModStart> -> len && SKB_EXT_ERR ( skb ) -> opt_stats <S2SV_ModEnd> ) put_cmsg (,1
939,"<S2SV_ModStart> ) ) ; raptor_sax2_set_option ( rdf_xml_parser -> sax2, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES, NULL, RAPTOR_OPTIONS_GET_NUMERIC ( rdf_parser, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES ) ) ;",1
940,"<S2SV_ModStart> if (! SSL_C_IS_EXPORT ( s -> s3 -> tmp. new_cipher ) ) { al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_k & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; goto f_err ; } if ( alg_k & ( SSL_kECDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_k & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_",0
941,<S2SV_ModStart> { return SECURE_ELEMENT_ERROR_NPE ; } if ( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE ) { return SECURE_ELEMENT_ERROR_BUF_SIZE,1
942,"<S2SV_ModStart> + 1 ; if ( iframe -> max_settings > session -> max_settings ) { rv = nghttp2_session_terminate_session ( session, NGHTTP2_ENHANCE_YOUR_CALM, ""SETTINGS"" ) ; if ( nghttp2_is_fatal ( rv ) ) { return rv ; } rv = nghttp2_session_terminate_session ( session, NGHTTP2_ENHANCE_YOUR_CALM, ""SETTINGS"" ) ; if ( nghttp2_is_fatal ( rv ) ) { return rv ; } nghttp2_session_terminate_session ( session, NGHTTP2_ENHANCE_YOUR_CALM, ""SETTINGS"" ) ; if ( session -> max_settings > session -> max_settings ) { rv = nghttp2_session_terminate_session ( session, NGHTTP2_ENHANCE_YOUR_CALM, ""SETTINGS"" ) ; if ( nghttp2_is_fatal ( rv ) ) { return rv ; } nghttp2_session_terminate_session ( session, NGHTTP2_ENHANCE_YOUR_CALM,",0
943,<S2SV_ModStart> = ucounts ; new_ns -> mounts = 0 ; new_ns -> pending_mounts = 0 ;,1
944,"<S2SV_ModStart> += dif ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
945,<S2SV_ModStart> ; if ( x86_pmu. cntval_bits == 8 ) x86_pmu. cntval_mask |= ( 1ULL << x86_pmu. num_counters ) - 1 ; if ( x86_pmu. cntval_mask > ( 1ULL << x86_pmu. num_counters ) - 1 ) x86_pmu. cntval_mask = ( 1ULL << x86_pmu. num_counters ) - 1 ; if ( x86_pmu. cntval_bits == 8 ) x86_pmu. cntval_mask |= ( 1ULL << x86_pmu. num_counters ) - 1 ; if ( x86_pmu. cntval_mask > ( 1ULL << x86_pmu. num_counters ) - 1 ) x86_pmu. cntval_mask = ( 1ULL << x86_pmu. num_counters ) - 1 ;,0
946,"<S2SV_ModStart>. dimensions ; # ifndef STB_VORBIS_DIVIDES_IN_RESIDUE int part_read = n_read / r -> part_size ; # else int temp_alloc_point = temp_alloc_save ( f ) ; uint8 * * part_classdata = ( uint8 * * * ) temp_block_array ( f, f -> channels, part_read * sizeof ( * * part_classdata ) ) ; # endif # ifndef STB_VORBIS_DIVIDES_IN_RESIDUE <S2SV_ModStart> int temp_alloc_point = temp_alloc_save ( f ) ; # else int temp_alloc_point = temp_alloc_save ( f ) ; uint16 * * classifications = ( int * * ) temp_block_array ( f, f -> channels, part_read * sizeof ( * * classifications ) ) ; # endif CHECK ( f ) ; for ( i = 0 ; i < ch ; ++ i ) { if ( do_not_decode [ i ] ) memset ( residue_buffers [ i ], 0, sizeof ( float ) * n ) ; for ( i = 0 ;",0
947,"<S2SV_ModStart> ; u32 now <S2SV_ModEnd> ; if ( <S2SV_ModStart> challenge_timestamp ) { if ( sysctl_tcp_challenge_ack_limit == 0 ) { NET_INC_STATS ( sock_net ( sk ), LINUX_MIB_TCPCHALLENGEACK ) ; } else if ( -- challenge_count <= sysctl_tcp_challenge_ack_limit ) { NET_INC_STATS ( sock_net ( sk ), LINUX_MIB_TCPCHALLENGEACK ) ; } } if ( ++ challenge_count <= sysctl_tcp_challenge_ack_limit ) { NET_INC_STATS ( sock_net ( sk ), LINUX_MIB_TCPCHALLENGEACK ) ; }",0
948,"<S2SV_ModStart> struct llc_pktinfo info ; memset ( & info, 0, sizeof ( info ) )",1
949,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> pack_mb_tokens ( vpx_writer <S2SV_ModStart> * w, const TOKENEXTRA * * tp, const TOKENEXTRA * stop ) { const struct vpx_token * const a = & vp9_coef_encodings [ t ] ; const vpx_extra_bit * const <S2SV_ModEnd> b = & <S2SV_ModStart> t ] ; vpx_write ( w, a -> value, a -> len, i ) ; if ( t == EOSB_TOKEN && p -> token!= EOSB_TOKEN ) { const int t = p -> token ; const int n = a -> len ; int i = 0 ; if ( p -> skip_eob_node ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int bits = v >> ( n - len ) ; vpx_write_tree ( w, vp9_coef_con_tree, vp9_pareto8_full [ p -> context_tree [ PIVOT_NODE ] - 1 ], n - len, i ) ; } else { vpx_write_tree ( w, vp9",0
950,"<S2SV_ModStart>, uncompressed_hdr_size ; vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> 0 } ; vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> 16 ) ; vpx_rb_bytes_written <S2SV_ModEnd> ( & wb <S2SV_ModStart> += uncompressed_hdr_size ; vpx_compute_update_table ( ) ; vpx_clear_system_state ( ) ; first_part_size = write_compressed_header ( cpi, data ) ; data += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb",0
951,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
952,"<S2SV_ModStart> ret, n ; int num_descriptors ; size_t offset = offsetof ( struct hid_descriptor, desc ) <S2SV_ModStart> ENODEV ; } if ( hdesc -> bLength < sizeof ( struct hid_descriptor ) ) { dbg_hid ( ""hid <S2SV_blank> descriptor <S2SV_blank> is <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return - EINVAL ; } <S2SV_ModStart> hdesc -> bCountryCode ; num_descriptors = min_t ( int, hdesc -> bNumDescriptors, ( hdesc -> bLength - offset ) / sizeof ( struct hid_class_descriptor ) ) <S2SV_ModStart> ; n < num_descriptors <S2SV_ModEnd> ; n ++",1
953,"<S2SV_ModStart> struct ikev2_id id <S2SV_ModEnd> ; int id_len <S2SV_ModStart> * typedata ; ND_TCHECK_16BIT ( * ext ) ; UNALIGNED_MEMCPY ( & id, ext, sizeof ( id ) )",0
954,"<S2SV_ModStart> group_dead ) ; taskstats_exit ( tsk, group_dead ) ; exit_mm ( tsk ) ; if ( group_dead ) acct_process ( tsk ) ; if ( group_dead ) acct_process ( tsk, group_dead ) ; if ( group_dead ) acct_process ( tsk, group_dead ) ; if ( unlikely ( tsk -> robust_list ) ) exit_robust_list ( tsk ) ; # ifdef CONFIG_COMPAT if ( unlikely ( tsk -> compat_robust_list ) ) compat_exit_robust_list ( tsk ) ; # endif exit_robust_list ( tsk ) ; module_put ( tsk -> module ) ; module_put ( tsk -> module ) ; module_put ( tsk -> module ) ; module_put ( tsk -> module ) ; module_put ( tsk -> module ) ; module_put ( tsk -> module ) ; module_put ( tsk -> module ) ; module_put ( tsk -> module ) ; module_put ( tsk -> module ) ; module_put ( tsk -> module ) ; module_put",0
955,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void * <S2SV_ModStart> data ) { <S2SV_ModEnd> add_preferred_base_object ( name <S2SV_ModStart> |= OBJECT_ADDED ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
956,"<S2SV_ModStart> if (! jas_safe_size_mul3 <S2SV_ModEnd> ( cmpt -> <S2SV_ModStart> -> width, JAS_CAST ( jas_long <S2SV_ModEnd>, cmpt -> <S2SV_ModStart> -> height, JAS_CAST ( jas_long <S2SV_ModEnd>, cmpt -> <S2SV_ModStart> -> prec, JAS_CAST ( jas_long <S2SV_ModEnd>, cmpt -> <S2SV_ModStart> -> data ), JAS_CAST ( jas_long <S2SV_ModEnd>, cmpt -> <S2SV_ModStart> -> width, JAS_CAST ( jas_long <S2SV_ModEnd>, cmpt -> <S2SV_ModStart> -> height, JAS_CAST ( jas_long <S2SV_ModEnd>, cmpt -> <S2SV_ModStart> -> height, JAS_CAST ( jas_long <S2SV_ModEnd>, cmpt -> <S2SV_ModStart> -> prec, JAS_CAST ( jas_long <S2SV_ModEnd>, cmpt -> <S2SV_ModStart> -> width, JAS_CAST ( jas_long <S2SV_ModEnd>, cmpt -> <S2SV_ModStart> -> data ), JAS_CAST ( jas_long <S2SV_ModEnd>, cmpt -> <S2SV_ModStart> -> height, JAS_CAST ( jas_long <S2SV_ModEnd>, cmpt -> <S2SV_ModStart> -> width, JAS_CAST ( jas_long <S2SV_ModEnd>, cmpt -> <S2SV_ModStart> -> width, JAS_CAST ( jas_long <S2SV_ModEnd>, cmpt ->",0
957,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
958,"<S2SV_ModStart>, yt0_0, yt1_0, yt2_0 ; WORD32 xh0_0, xh1_0, xh20_0, xh21_0, xl0_0, xl1_0, xl20_0, xl21_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; x_h2_0, x_h2_1 ; x_l1 = & ( x [ l1 ] ) ; x_l2_0 = & ( x [ l2 ] ) ; x_l1_1 = & ( x [ l1 ] ) ; x_l2_0 = & ( x [ l2 ] ) ; x_l2_1 = & ( x [ l1 ] ) ; x_l2_1",0
959,<S2SV_ModStart> if ( tag == ASN1_EOC <S2SV_ModEnd> ) { if <S2SV_ModStart> <= 0x7f ) goto invalid_eoc ; if ( indef_level <= 0 ) goto indefinite_len_primitive ; indef_level ++ ; goto next_tag ; } if ( unlikely ( len <= 0 ) ) goto length_too_long ; if ( unlikely ( n > sizeof ( size_t <S2SV_ModEnd> ) - 1 <S2SV_ModStart> goto data_overrun_error ; for ( len = 0 ; n > 0 ; n -- ) { len <<= 8 ; len |= data [ dp ++ ] ; } dp += len ; goto next_tag ; } if ( unlikely ( len == ASN1_INDEFINITE_LENGTH ) ) { if ( unlikely ( ( tag & ASN1_CONS_BIT ) == ASN1_PRIM << 5 ) ) goto indefinite_len_primitive ; indef_level ++ ; goto next_tag ; } if ( unlikely ( len == ASN1_INDEFINITE_LENGTH ) ) { if ( unlikely ( ( tag & ASN1_CONS_BIT ) == ASN1_PRIM << 5 ) ) goto indefinite_len_primitive ;,0
960,<S2SV_ModStart> ) val ; <S2SV_ModEnd> memset ( ptr,1
961,"<S2SV_ModStart> mntent -> mnt_dir, NULL",1
962,<S2SV_ModStart> PHP_MD_CTX ctx ; if ( sig_len < sizeof ( sig ) ) { return FAILURE ; } <S2SV_ModStart> PHP_MD_CTX ctx ; if ( sig_len < sizeof ( sig ) ) { return FAILURE ; } <S2SV_ModStart> PHP_MD_CTX ctx ; if ( sig_len < sizeof ( sig ) ) { return FAILURE ; } <S2SV_ModStart> PHP_MD_CTX ctx ; if ( sig_len < sizeof ( sig ) ) { return FAILURE ; } <S2SV_ModStart> PHP_MD_CTX ctx ; if ( sig_len < sizeof ( sig ) ) { return FAILURE ; } <S2SV_ModStart> PHP_MD_CTX ctx ; if ( sig_len < sizeof ( sig ) ) { return FAILURE ; } <S2SV_ModStart> PHP_MD_CTX ctx ; if ( sig_len < sizeof ( sig ) ) { return FAILURE ; } <S2SV_ModStart> PHP_MD_CTX ctx ; if ( sig_len < sizeof ( sig ) ) { return FAILURE ; } <S2SV_ModStart> PHP_MD_CTX ctx ; if ( sig_len < sizeof ( sig ) ) { return FAILURE ; } <S2SV_ModStart> PHP_MD_CTX ctx ; if ( sig_len < sizeof ( sig ) ) { return FAILURE ; } <S2SV_ModStart> PHP_MD,0
963,<S2SV_ModStart> ] <= max && value [ n ] - min < field -> maxusage <S2SV_ModStart> && field -> value [ n ] - min < field -> maxusage <S2SV_ModStart> && field -> value [ n ] - min < field -> maxusage &&,0
964,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
965,<S2SV_ModStart> if ( argReg > <S2SV_ModEnd> regsz ) { <S2SV_ModStart> regsz ) { return ;,1
966,"<S2SV_ModStart> ) ) ; rb_hash_aset ( env, remote_addr_val, remote_addr ( req ) ) ; rb_hash_aset ( env,",0
967,<S2SV_ModStart> 0 ) ; args -> rmtvaluelen <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> -> valuelen < args -> rmtvaluelen ) { args -> valuelen = args -> rmtvaluelen <S2SV_ModEnd> ; return XFS_ERROR <S2SV_ModStart> -> valuelen < args -> rmtvaluelen ) { args -> valuelen = args -> rmtvaluelen <S2SV_ModEnd> ; return XFS_ERROR <S2SV_ModStart> -> valuelen = args -> rmtvaluelen <S2SV_ModEnd> ; } return,0
968,<S2SV_ModStart> ; size_t sz <S2SV_ModEnd> ; if (,0
969,"<S2SV_ModStart> endif # endif int <S2SV_ModEnd> col_type, prepare_retval <S2SV_ModStart>, prepare_retval ; # if MYSQL_VERSION_ID < SERVER_PREPARE_VERSION imp_sth -> use_server_side_prepare = ( attribs )? SvTRUE ( attribs -> mysql_server_prepare ) : imp_dbh -> use_server_side_prepare ; if ( svp && SvTRUE ( * svp ) ) { # if MYSQL_ASYNC imp_sth -> is_async = TRUE ; imp_sth -> use_server_side_prepare = FALSE ; # else do_error ( sth, 2000, ""Async <S2SV_blank> support <S2SV_blank> was <S2SV_blank> not <S2SV_blank> built <S2SV_blank> into <S2SV_blank> this <S2SV_blank> version <S2SV_blank> of <S2SV_blank> DBD::mysql"", ""HY000"" ) ; return 0 ; # endif <S2SV_ModStart> } # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> < SERVER_PREPARE_VERSION && svp && SvTRUE ( * svp ) ) { # if MYSQL_ASYNC imp_sth -> is_async = TRUE ; imp_sth -> use_server_side_prepare = FALSE ; # else do_error ( sth, 2000, ""Async <S2SV_blank> support <S2SV_blank> was <S2SV_blank> not <S2SV_blank> built <S2SV_blank> into",0
970,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) &&! test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) &&",1
971,"<S2SV_ModStart> ) ) ; if ( LTXTQUERY_TOO_BIG ( state. num, state. sumlen ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""ltxtquery <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large"" ) ) ) ;",1
972,"<S2SV_ModStart> int need = 0 ; int width ; int height ; <S2SV_ModStart> screen, { width = 64 ; height = 64 <S2SV_ModEnd> ; need *= <S2SV_ModStart> need *= 4 ; if ( width < need ) { SysError ( ERROR_BMALLOC2 ) ; free ( line ) ; line = ( Char * ) malloc ( ( size_t ) ( need + 1 ) ) ; SysError ( ERROR_BMALLOC2 ) ; free ( line ) ; scp -> data_buffer = ( char * ) malloc ( ( size_t ) ( need + 1 ) ) ; } else { line = ( Char * ) malloc ( ( size_t ) ( need + 1 ) ) ; free ( line ) ; scp -> data_buffer = ( char * ) malloc ( ( size_t ) ( need + 1 ) ) ; free ( line ) ; SysError ( ERROR_BMALLOC2 ) ; free ( line ) ; scp -> data_buffer = ( char * ) malloc ( ( size_t ) ( need + 1 ) ) ; free ( line ) ;",0
973,<S2SV_ModStart> ; if (! EXT4_SB ( inode -> i_sb ) -> s_journal <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd>! handle ),1
974,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static JsVarFloat <S2SV_ModEnd> ftoa_bounded_extra ( JsVarFloat <S2SV_ModStart> ( val ) ) strcpy ( str, ""NaN"" <S2SV_ModEnd>, len ) <S2SV_ModStart> ( val < 0 ) strcpy ( str, ""-Infinity"" <S2SV_ModEnd>, len ) <S2SV_ModStart> else strcpy ( str, ""Infinity"" <S2SV_ModEnd>, len )",0
975,"<S2SV_ModStart> ( f, ""PG%31[ <S2SV_blank> \\t]%c%c%31[ <S2SV_blank> \\t+-]%d%31[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%31[ <S2SV_blank> \\t]%c%c%31[ <S2SV_blank> \\t+-]%d%31[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp,",0
976,"<S2SV_ModStart> ( size < 5 + 1 <S2SV_ModEnd> ) ASSERT ( <S2SV_ModStart> ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; char * result ; memcpy ( buf, ""DEADBEEF"", 8 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( result!= NULL ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( length == 6 ) ; if ( size < 8 ) ASSERT ( result!= buf ) ; ASSERT ( memcmp ( buf + size, & ""DEADBEEF"" [ size ], 8 - size ) == 0 ) ; if ( result!= buf ) free ( result ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; char * result ; memcpy ( buf, ""DEADBEEF"", 8 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( length == 5 ) ; if",0
977,"<S2SV_ModStart> ; if ( unlikely ( entropy_init == 0 ) ) { if ( ( fast_pool -> count >= 64 ) && crng_load ( ( char * ) fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { fast_pool -> count = 0 ; fast_pool -> last = now ; return ; } <S2SV_ModEnd> if ( (",0
978,"<S2SV_ModStart> ( str, ""ID:"" <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, ""ID:"" <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, ""String:"" <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, ""String:\'"" <S2SV_ModEnd>, len )",0
979,"<S2SV_ModStart> = "".tgz"" ; if ( <S2SV_ModEnd> strcmp ( g <S2SV_ModStart>, "".tgz"" ) == 0 ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( <S2SV_ModEnd> strcmp ( g <S2SV_ModStart>, "".tgz"" ) == 0 ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( <S2SV_ModEnd> strcmp ( g <S2SV_ModStart>, "".tgz"" ) == 0 ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( <S2SV_ModEnd> strcmp ( g <S2SV_ModStart>, "".tgz"" ) == 0 ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; }",0
980,,1
981,"<S2SV_ModStart> * output ; MagickBooleanType status = MagickFalse <S2SV_ModStart> ) ; } input = fopen_utf8 ( argv [ i ], ""rb"" ) ; if ( input == ( FILE * ) NULL ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ i ] ) ; continue ; } for ( i = 2 ; i < <S2SV_ModEnd> ( ssize_t ) <S2SV_ModStart> ( ssize_t ) <S2SV_ModEnd> ( argc - <S2SV_ModStart> input ) ) status = <S2SV_ModEnd> fputc ( ( <S2SV_ModStart> ( void ) remove_utf8 ( argv [ i ] ) ; <S2SV_ModStart> ( void ) fclose ( <S2SV_ModEnd> input ) ; <S2SV_ModStart> ( void ) remove_utf8 ( argv [ i ] ) ; } ( void ) fclose ( <S2SV_ModEnd> output ) ; <S2SV_ModStart> ( MagickTrue ) ;",0
982,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
983,"<S2SV_ModStart> : ext3_msg ( sb, KERN_ERR, __bdevname ( dev, b ) ) ;",0
984,"<S2SV_ModStart> passwd * pwd, const char * prefix <S2SV_ModStart> = NULL ; <S2SV_ModEnd> pw_init ( ) <S2SV_ModStart> ( fp = safe_mkstemp <S2SV_ModEnd> ( & tmpname <S2SV_ModStart> tmpname, atomic_dir, prefix <S2SV_ModEnd> ) ) ==",0
985,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
986,"<S2SV_ModStart> s2 ) { const size_t len = strlen ( s1 ) + 1U ; return memcmp <S2SV_ModEnd> ( s1,",0
987,"<S2SV_ModStart> TRUE ; } Jid * const from = xmpp_stanza_get_from ( stanza ) ; if (! from ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> stanza <S2SV_blank> name <S2SV_blank> for <S2SV_blank> Carbon"" ) ; return TRUE ; } const char * to = xmpp_stanza_get_to ( stanza ) ; if (! to ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> stanza <S2SV_blank> name <S2SV_blank> for <S2SV_blank> Carbon"" ) ; return TRUE ; } const char * const from = xmpp_stanza_get_from ( stanza ) ; if (! from ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> stanza <S2SV_blank> from <S2SV_blank> for <S2SV_blank> Carbon"" ) ; return TRUE ; } const char * to = xmpp_stanza_get_to ( stanza ) ; if (! to ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> stanza <S2SV_blank> name <S2SV_blank> for <S2SV_blank> Carbon"" ) ; return TRUE ; } const char * const from = xmpp_stanza_get_from ( stanza ) ; if (! from ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> from <S2SV_blank> for <S2SV_blank> Carbon"" )",0
988,"<S2SV_ModStart> badfmt ; } if ( sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) { addReplyError ( c, ""The <S2SV_blank> operating <S2SV_blank> system <S2SV_blank> is <S2SV_blank> not <S2SV_blank> able <S2SV_blank> to <S2SV_blank> handle <S2SV_blank> the <S2SV_blank> specified <S2SV_blank> number <S2SV_blank> of <S2SV_blank> clients, <S2SV_blank> try <S2SV_blank> with <S2SV_blank> %d"", o -> ptrlen ) ; return ; }",0
989,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
990,"<S2SV_ModStart> ) ) { parse_global_option ( CMD_PRINT_HELP, NULL, NULL ) ; parse_service_option ( CMD_PRINT_HELP, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-version"" ) ) { parse_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1,",0
991,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; BT_DBG (,1
992,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
993,"<S2SV_ModStart> md -> hdr. isa_msgid <S2SV_ModEnd> ) ; strncpy <S2SV_ModStart> md -> hdr. isa_msgid, sizeof ( md -> hdr. isa_msgid ) <S2SV_ModEnd> ) ; strncpy <S2SV_ModStart> md -> hdr. isa_msgid, sizeof ( md -> hdr. isa_msgid ) <S2SV_ModEnd> ) ; strncpy <S2SV_ModEnd> ( md -> <S2SV_ModStart> md -> hdr. isa_msgid, sizeof ( md -> hdr. isa_msgid ) <S2SV_ModEnd> ) ; strncpy <S2SV_ModEnd> ( md -> <S2SV_ModStart> md -> hdr. isa_msgid, sizeof ( md -> hdr. isa_msgid ) <S2SV_ModEnd> ) ; strncpy <S2SV_ModEnd> ( md -> <S2SV_ModStart> md -> hdr. isa_msgid, sizeof ( md -> hdr. isa_msgid ) <S2SV_ModEnd> ) ; strncpy <S2SV_ModEnd> ( md -> <S2SV_ModStart> md -> hdr. isa_msgid, sizeof ( md -> hdr. isa_msgid ) <S2SV_ModEnd> ) ; strncpy <S2SV_ModEnd> ( md -> <S2SV_ModStart> md -> hdr. isa_msgid, sizeof ( md -> hdr. isa_msgid ) <S2SV_ModEnd> ) ; strncpy <S2SV_ModEnd> ( md -> <S2SV_ModStart> md -> hdr",0
994,<S2SV_ModStart> = 0 ; if ( ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed < 1 ) || ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > MAX_BITSTREAM_BUFFER_SIZE ) ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = 1 ; ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = 0 ; } else { if ( ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed < 1 ) || ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > MAX_BITSTREAM_BUFFER_SIZE ) ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = MAX_BITSTREAM_BUFFER_SIZE ; },0
995,<S2SV_ModStart> * zone ; size_t tilemap_size ; <S2SV_ModStart>. height ; tilemap_size = <S2SV_ModEnd> x_size * y_size <S2SV_ModStart> struct map_tile ) ; if ( x_size == 0 || tilemap_size / x_size / sizeof ( struct map_tile )!= y_size ||! ( tilemap = malloc ( tilemap_size,1
996,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_printroute ( netdissect_options <S2SV_ModStart> ) ; return ( 0 ) <S2SV_ModStart> 3 ) { ND_TCHECK ( cp [ 2 ] ) ; <S2SV_ModStart> 4 ) { ND_TCHECK2 ( cp [ len ], 4 ) ; <S2SV_ModStart> ) ) ; } return ( 0 ) ;",0
997,<S2SV_ModStart> <S2SV_null> static char <S2SV_ModEnd> * print_string ( <S2SV_ModStart> item ) { if ( IS_ERR ( item -> valuestring ) ) return NULL ; else return item -> valuestring ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
998,"<S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img, <S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img,",1
999,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> + 1, ""prestring=%490s"" <S2SV_ModEnd>, buf ) <S2SV_ModStart> ( buf ), L_BUFSIZE <S2SV_ModEnd> - 3 ) <S2SV_ModStart> ( buf ), L_BUFSIZE <S2SV_ModEnd> - 3 ) <S2SV_ModStart> ( buf ), L_BUFSIZE <S2SV_ModEnd> - 3 )",0
1000,<S2SV_ModStart> if ( chunk_num >= <S2SV_ModEnd> chm -> num_chunks,1
1001,"<S2SV_ModStart>! validate_event ( event -> pmu, <S2SV_ModStart>! validate_event ( event -> pmu, <S2SV_ModStart>! validate_event ( event -> pmu,",1
1002,"<S2SV_ModStart> ) ; } <S2SV_ModEnd> when 10 : <S2SV_ModStart> ; } } when 11 : { int rows, cols ; win_get_screen_chars ( & rows, & cols ) ; win_set_chars ( rows, cols ) ; } when 12 : { int rows0, cols0 ; if ( arg1 == 0 ) { win_maximise ( - 2 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 1 ) { win_maximise ( 1 ) ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; win_set_chars ( rows0, 0 ) ; } else if ( arg1 == 2 ) { win_maximise ( - 2 ) ; win_set_chars ( rows0, cols0 ) ; } else { <S2SV_ModEnd> win_set_chars ( rows0 <S2SV_ModStart> cols0 ) ; }",0
1003,"<S2SV_ModStart> VOS_STARTCODE ) { int profile, level ; <S2SV_ModStart> s, gb, & profile, & level ) ; if ( <S2SV_ModEnd> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO <S2SV_ModStart> FF_PROFILE_MPEG4_SIMPLE_STUDIO && ( <S2SV_ModEnd> level > 0 <S2SV_ModStart> > 0 && <S2SV_ModEnd> level < 9 <S2SV_ModStart> ) ; } else if ( s -> studio_profile ) { avpriv_request_sample ( s -> avctx, ""Mixes <S2SV_blank> studio <S2SV_blank> and <S2SV_blank> non <S2SV_blank> studio <S2SV_blank> profile\\n"" ) ; return AVERROR_PATCHWELCOME ; } s -> avctx -> profile = profile ; s -> avctx -> level = level ; <S2SV_ModStart> studio_profile ) { av_assert0 ( s -> avctx -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO ) ;",0
1004,<S2SV_ModStart> nsops < 1 || nsops > SEMOPM,1
1005,<S2SV_ModStart> ; for ( ; i < 17 ; i ++ ) s [ i ] = 0 ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; },0
1006,"<S2SV_ModStart> ] ) ; if ( fileblock < ( grub_disk_addr_t ) inode -> blocks. dir_blocks ) { grub_error ( GRUB_ERR_BAD_FS, ""file <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range"" ) ; return - 1 ; } <S2SV_ModStart> len ) ; if ( fileblock < ( grub_disk_addr_t ) inode -> blocks. dir_blocks + blksz ) { grub_error ( GRUB_ERR_BAD_FS, ""file <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range <S2SV_blank> blocks <S2SV_blank> (%u)"", fileblock, inode -> blocks. dir_blocks - ( grub_disk_addr_t ) inode -> blocks. dir_blocks - ( grub_disk_addr_t ) inode -> blocks. dir_blocks - ( grub_disk_addr_t ) inode -> blocks. dir_blocks + log2_blksz ) ) { grub_error ( GRUB_ERR_BAD_FS, ""file <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range <S2SV_blank> blocks <S2SV_blank> (%u)"", fileblock, inode -> blocks. dir_blocks - ( grub_disk_addr_t ) inode -> blocks. dir_blocks - ( grub",0
1007,"<S2SV_ModStart> ; # endif if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif i -> posX = i -> parent -> width - i -> width ; } if ( ( i -> posY + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> Y <S2SV_blank> position\\n"" ) ; # endif i -> posY = i -> parent -> height - i -> height ; } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif i -> posX =",0
1008,"<S2SV_ModStart> if ( q < p ) { DPRINTF ( ( ""Wrapped <S2SV_blank> around <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> %p\\n"", q, p ) ) ; goto out ; } if ( q",0
1009,"<S2SV_ModStart> ++ ) { if ( bytes_matched >= max_bytes_matched ) { FAIL_ON_ERROR ( callback ( flags & RE_FLAGS_BACKWARDS? input + 1 : input_data, bytes_matched, flags, callback_args ) ) ; break ; } <S2SV_ModStart> ++ ) { if ( bytes_matched >= max_bytes_matched ) { FAIL_ON_ERROR ( callback ( flags & RE_FLAGS_BACKWARDS? input + 1 : input_data, bytes_matched, flags, callback_args ) ) ; break ; }",0
1010,"<S2SV_ModStart> len ) { assert ( len > 28 ) ; <S2SV_ModStart> case LEX_EOF : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""EOF"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_ID : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""ID"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_INT : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""INT"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_FLOAT : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""FLOAT"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_STR : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""STRING"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED_STR : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> STRING"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_TEMPLATE_LITERAL : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""TEMPLATE <S2SV_blank> LITERAL"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED_TEMPLATE_LITERAL : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> TEMPLATE <S2SV_blank> LITERAL"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_REGEX : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""REGEX"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case L",1
1011,"<S2SV_ModStart> mnt_instance ) ; if ( unlikely (! list_empty ( & mnt -> mnt_mounts ) ) ) { struct mount * p, * tmp ; list_for_each_entry_safe ( p, tmp, & mnt -> mnt_mounts, mnt_child ) { umount_mnt ( p ) ; } }",1
1012,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
1013,,1
1014,<S2SV_ModStart> if (! e ) goto not_found ; if ( e - p > HOST_NAME_MAX - 1,0
1015,<S2SV_ModStart> ; int err <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> uint32_t pos ; if ( inode -> i_size > inode -> i_sb -> s_blocksize ) { err = - ENAMETOOLONG ; goto out_unmap ; } <S2SV_ModStart>! bh ) { err = - EIO ; goto out_unlock_inode ; } <S2SV_ModEnd> symlink = bh <S2SV_ModStart> return 0 ; out_unlock_inode <S2SV_ModEnd> : up_read ( <S2SV_ModStart> page ) ; out_unmap :,1
1016,<S2SV_ModStart> else if ( cpu_has_secondary_exec_ctrls ( ) && ( vmcs_read32 ( SECONDARY_VM_EXEC_CONTROL ) & SECONDARY_EXEC_VIRTUALIZE_X2APIC_MODE ) <S2SV_ModEnd> ) { if,1
1017,"<S2SV_ModStart> if ( ent == NULL ) { st = KRB5_KDB_NOENTRY ; <S2SV_ModEnd> goto cleanup ; <S2SV_ModStart> cleanup ; } st = populate_policy ( context, ld, ent, pol_name, * policy ) ;",1
1018,<S2SV_ModStart> = value ; if ( ps_codec -> i4_pic_present_flag ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( ps_codec -> i4_pic_present_flag ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; },0
1019,"<S2SV_ModStart> buffer_head * dibh <S2SV_ModEnd> ; u64 bn <S2SV_ModStart> unsigned end_of_metadata ; if ( height > ip -> i_height ) { int ret <S2SV_ModStart> - 1 ; ret = gfs2_meta_inode_block ( inode, lblock, bh_map, ( struct metapath * ) mp, ( struct metapointer * ) ptr, maxlen, & eob ) ; if ( ret < 0 ) { gfs2_consist_inode ( inode, ( struct metapath * ) mp, ( struct metapath * ) mp, ( struct metapath * ) mp, ( struct metapath * ) mp -> mp_list + ( height - ip -> i_height ) ) ; } else { ret = gfs2_meta_inode_block ( inode, lblock, ( struct metapointer * ) ptr, maxlen, & eob ) ; if ( ret < 0 ) { gfs2_consist_inode ( inode, ( struct metapath * ) mp, ( struct metapath * ) ptr, maxlen, & eob ) ; if ( ret < 0 ) { gfs2_consist_inode ( inode, ( struct",0
1020,"<S2SV_ModStart> ) ) { if ( count + 4 >= sizeof ( header_t ) ) return - 1 ; <S2SV_ModStart> break ; case 'z' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_long ( psf, data ) ; } else { header_put_le_long ( psf, data ) ; } ; count += 5 ; break ; case 'X' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_long ( psf, data ) ; } else { header_put_le_long ( psf, data ) ; } ; count += 6 ; break ; case 'X' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_long ( psf, data ) ; } else { header_put_le_long ( psf, data ) ; } ; count += 7 <S2SV_ModEnd> ; break ;",0
1021,<S2SV_ModStart> ; if ( d -> msg_len > sizeof ( d -> msg ) ) return - EINVAL ; if ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( i,1
1022,"<S2SV_ModStart> break ; } memset ( & cinfo, 0, sizeof ( cinfo ) ) ;",1
1023,"<S2SV_ModStart> ""UnableToReadImageData"" ) ; bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart> ""UnableToReadImageData"" ) ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ;",0
1024,"<S2SV_ModStart> 0 ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0600 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; return",1
1025,"<S2SV_ModStart> int num_items_scanned ; int pkt_len, <S2SV_ModEnd> pktnum, hr <S2SV_ModStart> + 64, ""LEN=%9d"" <S2SV_ModEnd>, & pkt_len <S2SV_ModStart> g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } if ( pkt_len < 0 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> packet <S2SV_blank> header <S2SV_blank> has <S2SV_blank> a <S2SV_blank> negative <S2SV_blank> packet <S2SV_blank> length""",1
1026,<S2SV_ModStart> ; int err = 0 ; msg -> msg_namelen,1
1027,"<S2SV_ModStart> ; if ( zend_hash_find <S2SV_ModEnd> ( ht,",1
1028,<S2SV_ModStart> ) ) ; strncpy <S2SV_ModEnd> ( link_info.,0
1029,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } io -> io_cleanup = mem_cleanup ;,1
1030,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",1
1031,<S2SV_ModStart> p -> tokenpos >= ( <S2SV_ModEnd> p -> tokenlen <S2SV_ModStart> p -> tokenlen - 1 ),1
1032,"<S2SV_ModStart> get_block_variance_fn ( BLOCK_SIZE bsize, vpx_bit_depth_t bit_depth ) { switch ( bit_depth ) { case BLOCK_8X8 : return vpx_mse8x8 ; case BLOCK_16X8 : return vpx_mse16x8 ; case BLOCK_8X16 : return vpx_mse8x16 ; case BLOCK_16X16 : return vpx_mse16x16 ; default : return vpx_mse8x16 <S2SV_ModEnd> ; } }",0
1033,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
1034,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> i ++ ) { avio_feof ( pb ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> i ++ ) { <S2SV_ModStart> pb ) ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; } <S2SV_ModStart> i ++ ) { avio_feof ( pb ) ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_,0
1035,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
1036,<S2SV_ModStart> ; if (! padata -> pa_type || padata -> pa_type == KRB5_PADATA_DH_KEY_INFO ) { return retval ; } if (! padata -> pa_type ||! padata -> pa_type ||! padata -> pa_type ||! padata -> pa_type ||! padata -> pa_type ||! padata -> pa_type ||! padata -> pa_type ||! padata -> pa_type ||! padata -> pa_type ||! padata -> pa_type ||! padata -> pa_type ||! padata -> pa_length ) { return retval ; } if ( padata -> pa_type == KRB5_PADATA_REPLY_KX ) { return retval ; },0
1037,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
1038,"<S2SV_ModStart> -> stratum_port ; snprintf ( address, 254 <S2SV_ModEnd>, ""%s:%s"",",1
1039,"<S2SV_ModStart> ( page && ( file_access <S2SV_ModEnd> ( page, <S2SV_ModStart> ( page && ( file_access ( page, R_OK ) == 0 <S2SV_ModEnd> ) ) ) <S2SV_ModStart> ( page && ( file_access ( page, R_OK ) == 0 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( page && ( file_access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } if ( page && ( file_access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } <S2SV_ModEnd> } else if <S2SV_ModStart> ( page && ( file_access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } <S2SV_ModEnd> } else if <S2SV_ModStart> ( page && ( <S2SV_ModEnd> access ( page <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } else if (! strcmp ( func,",0
1040,"<S2SV_ModStart> + 1 ; if ( f -> blocksize_1 < f -> blocksize_2 ) return error ( f, VORBIS_invalid_setup ) ; <S2SV_ModStart> + 1 ; if ( f -> blocksize_1 < f -> blocksize_0 ) return error ( f, VORBIS_invalid_setup ) ;",0
1041,<S2SV_ModStart> head -> iov_base ; if ( hdr > head -> iov_len ) return 0,1
1042,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> cl_nodes_lock ) ; o2nm_unlock_subsystem ( ) ;,1
1043,"<S2SV_ModStart> flags ) ; if ( vb && vb -> vb. v4l2_buf ) { <S2SV_ModEnd> dev_dbg ( & <S2SV_ModStart> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } <S2SV_ModEnd> if (! <S2SV_ModStart> vb ) { <S2SV_ModEnd> dev_dbg ( & <S2SV_ModStart> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } if ( input -> buf_cur_space_left > frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", frame_len",0
1044,"<S2SV_ModStart> size ) { size_t res ; if ( check_mul_overflow ( size, & res ) ) { zmalloc_oom_handler ( res ) ; return NULL ; }",0
1045,<S2SV_ModStart> ; ssize_t count ; if ( bytes == 0 || items == 0 ) return 0,1
1046,<S2SV_ModStart> -> serviceId == EXTRACT_16BITS <S2SV_ModEnd> ( & rxh,1
1047,<S2SV_ModStart> key_ref ) ; if ( key -> state == KEY_IS_UNINSTANTIATED <S2SV_ModEnd> ) goto can_read_key,0
1048,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > IEEE80211_MAX_SSID_LEN ) { mwifiex_dbg ( adapter, INFO, ""info: <S2SV_blank> ADHOC_S_CMD: <S2SV_blank> SSID <S2SV_blank> too <S2SV_blank> long\\n"", req_ssid -> ssid_len ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ;",0
1049,"<S2SV_ModStart> ; if ( sfe -> valuelen > context -> valuelen ) { error = context -> put_listent ( context, sfe -> flags, sfe -> nameval, ( int ) sfe -> namelen, ( int ) sfe -> valuelen ) ; if ( context -> seen_enough ) break ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; } if ( nsbuf < count ) { error = context -> put_listent ( context, sfe -> flags, sfe -> nameval, ( int ) sfe -> valuelen ) ; if ( context -> put_listent ( context, sfe -> flags, sfe -> nameval, ( int ) sfe -> namelen, ( int ) sfe -> valuelen ) ; if ( context -> seen_enough ) break ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; }",0
1050,<S2SV_ModStart> r ) { if ( a == NULL ) return ( - 1 ) ;,0
1051,<S2SV_ModStart> 0 ) ; hrtimer_try_to_cancel <S2SV_ModEnd> ( & stime,1
1052,"<S2SV_ModStart> < q ) { if ( p - str < reg -> dmax ) { * low = ( UChar * ) str ; if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; } else { <S2SV_ModStart> low ) ; } <S2SV_ModStart> ONIG_INFINITE_DISTANCE ) { if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; } else { <S2SV_ModStart> low ) ; } <S2SV_ModStart> ONIG_INFINITE_DISTANCE ) { if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; } else { <S2SV_ModStart> ONIG_INFINITE_DISTANCE ) { if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; } else { <S2SV_ModStart> low ) ; }",0
1053,"<S2SV_ModStart> = data ; struct l2cap_conf_rfc rfc <S2SV_ModEnd> ; BT_DBG ( <S2SV_ModStart> sk ) ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; l2cap_add_conf_opt ( & ptr, L2CAP_CONF_RFC, sizeof ( rfc ), ( unsigned long ) & rfc ) ; break ; case L2CAP_MODE_STREAMING : rfc. mode = L2CAP_MODE_STREAMING ; rfc. txwin_size = L2CAP_DEFAULT_RX_WINDOW ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. retrans_timeout = cpu_to_le16 ( L2",0
1054,"<S2SV_ModStart> r ) { struct msghdr * msg = NULL ; if ( ( msg = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_WAITALL ) ) < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; break ; } while ( ( ret = recv ( sock_fd, buf, r, MSG_WAITALL ) ) < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; break ; } while ( ( msg = recv ( sock_fd, buf, r, MSG_WAITALL ) ) < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; break ; } if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; break ; }",0
1055,<S2SV_ModStart> -> chunksize = UINT64_MAX <S2SV_ModEnd> ; for (,1
1056,<S2SV_ModStart> } else { if ( ( ps_dec -> u2_total_mbs_coded == 0 ) || ( ( u1_nal_unit_type > IDR_SLICE_NAL ) && ( ( u1_nal_ref_idc < ps_dec -> u2_total_mbs_coded ) && ( u1_nal_ref_idc > ps_dec -> u2_total_mbs_coded ) ) ) { return ERROR_INCOMPLETE_FRAME ; } else { if ( ( ps_dec -> u2_total_mbs_coded == 0 ) || ( ( u1_nal_unit_type > IDR_SLICE_NAL ) && ( u1_nal_ref_idc > ps_dec -> u2_total_mbs_coded ) && ( u1_nal_ref_idc > ps_dec -> u2_total_mbs_coded ) ) ) { return ERROR_INCOMPLETE_FRAME ; } },0
1057,<S2SV_ModStart> while ( pair!= NULL <S2SV_ModEnd> ) { mprAddItem,0
1058,<S2SV_ModStart> } err = crypto_rng_alg ( tfm ) <S2SV_ModEnd> -> seed (,1
1059,<S2SV_ModStart> = uid ; <S2SV_ModEnd> new -> count <S2SV_ModStart> new -> count = 0 <S2SV_ModEnd> ; spin_lock_irq ( <S2SV_ModStart> } if ( <S2SV_ModEnd> ucounts -> count <S2SV_ModStart> ucounts -> count == INT_MAX ) ucounts = NULL ; else ucounts -> count += 1 <S2SV_ModEnd> ; spin_unlock_irq (,1
1060,"<S2SV_ModStart> ; if ( err > 0 ) { datagrams = err ; goto out_put ; } <S2SV_ModEnd> if ( err <S2SV_ModStart> err ; } out_put : fput_light ( sock -> file, fput_needed ) ; <S2SV_ModStart> datagrams ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1061,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1062,<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline <S2SV_ModStart> i < len - 8 * 32 <S2SV_ModEnd> ; i += <S2SV_ModStart> ; i += 8 * 32 <S2SV_ModEnd> ) { ( <S2SV_ModStart> ; } } <S2SV_null>,0
1063,<S2SV_ModStart> ; if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) ) <S2SV_ModEnd> { if ( <S2SV_ModStart> ) ; } if ( ext4_should_dioread_nolock ( inode ) ) set_buffer_uninit ( bh_result ) ;,1
1064,"<S2SV_ModStart> * delegation, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; fmode &= ( FMODE_READ | FMODE_WRITE ) ; <S2SV_ModStart> -> type & fmode )!= fmode <S2SV_ModEnd> ) goto no_delegation_unlock <S2SV_ModStart>, open_stateid, fmode <S2SV_ModEnd> ) ; ret",0
1065,"<S2SV_ModStart> 0x0004 : { if ( global_colormap!= ( unsigned char * ) NULL ) ThrowReaderException ( CorruptImageError, ""MemoryAllocationFailed"" ) ; <S2SV_ModStart> 0x0008 : { if ( global_colormap!= ( unsigned char * ) NULL ) ThrowReaderException ( CorruptImageError, ""MemoryAllocationFailed"" ) ; <S2SV_ModStart> 0 ) { if ( global_colormap!= ( unsigned char * ) NULL ) ThrowReaderException ( CorruptImageError, ""MemoryAllocationFailed"" ) ; <S2SV_ModStart> 0 ) { if ( global_colormap!= ( unsigned char * ) NULL ) ThrowReaderException ( CorruptImageError, ""MemoryAllocationFailed"" ) ; <S2SV_ModStart> 0 ) { if ( global_colormap!= ( unsigned char * ) NULL ) ThrowReaderException ( CorruptImageError, ""MemoryAllocationFailed"" ) ; <S2SV_ModStart> 0 ) { if ( global_colormap!= ( unsigned char * ) NULL ) ThrowReaderException ( CorruptImageError, ""MemoryAllocationFailed"" ) ; <S2SV_ModStart> 0 ) { if ( global_colormap!= ( unsigned char * ) NULL ) ThrowReaderException ( CorruptImageError, ""MemoryAllocationFailed"" ) ; <S2SV_ModStart> 0 ) { if ( global_colormap!=",0
1066,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
1067,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> oidc_scrub_headers ( request_rec,0
1068,"<S2SV_ModStart> int * out_rate_sum, int64_t <S2SV_ModEnd> * out_dist_sum ) <S2SV_ModStart> int sse ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { <S2SV_ModStart> ) ; } # endif <S2SV_ModStart>. vf ( p -> src. buf, p -> src. stride, pd -> dst. buf, pd -> dst. stride, & sse ) ; if ( cpi -> speed > 4 ) { int64_t rate ; int64_t dist ; vpx_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], pd -> dequant [ 1 ] >> 3, & rate, & dist ) ; } else { int64_t rate ; int64_t dist ; vpx_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], pd -> dequant [ 1 ] >> 3, & rate, & dist ) ; * out_rate_sum = ( int ) rate_sum ; * out_dist_sum = ( int ) dist",0
1069,<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1070,"<S2SV_ModStart> return ; } if ( li < sizeof ( struct esis_header_t ) + 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> indicator <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size:"", li ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"", * pptr ++ ) ) ; if ( li < sizeof ( struct esis_header_t ) + 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size:"", li ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"", * pptr ++ ) ; if ( li < sizeof ( struct esis_header_t ) + 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> indicator <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size:"", li ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> indicator <S2SV_blank> %u <S2SV_blank> <",0
1071,<S2SV_ModStart>!= '\\0' ) { <S2SV_ModStart> =='<S2SV_blank>') || ( * ptr == '\\t' ) || index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; <S2SV_ModStart> ; } } return ( PAM_SUCCESS ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1072,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { int rc ; <S2SV_ModStart> return vpx_read_tree ( r <S2SV_ModEnd>, seg ->",0
1073,<S2SV_ModStart> ; uint32_t backup_handle = 0 <S2SV_ModStart> ret == 0 ) { if ( <S2SV_ModEnd> res -> backup <S2SV_ModStart> res -> backup ) { backup_handle = req -> base_size + 128 ; ret = - EINVAL ; goto out_unlock ; } } else { backup_handle = req -> base_size + 128 ; } <S2SV_ModStart> ret == 0 ) { if ( backup_handle ) { ttm_read_unlock ( & dev_priv -> reservation_sem ) ; goto out_unlock ; },0
1074,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool get_desc ( <S2SV_ModStart> struct desc_struct * out, <S2SV_ModEnd> unsigned short sel <S2SV_ModStart> SEGMENT_LDT ) { bool success = false <S2SV_ModEnd> ; struct ldt_struct <S2SV_ModStart> -> nr_entries ) { success = true ; <S2SV_ModStart> sel ] ; } <S2SV_ModStart> ) ; return success <S2SV_ModEnd> ; } # <S2SV_ModStart> size ) return false ; return true ;",0
1075,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",1
1076,"<S2SV_ModStart> bp ; struct ipv6_pinfo * np = inet6_sk ( sk ) ; struct <S2SV_ModStart> sctp_addr dst_saddr ; struct in6_addr * final_p, final ; <S2SV_ModStart> ) ; } final_p = fl6_update_dst ( fl6, np -> opt, & final ) ; <S2SV_ModStart>, fl6, final_p <S2SV_ModEnd>, false ) <S2SV_ModStart>, fl6, final_p <S2SV_ModEnd>, false ) <S2SV_ModStart>, fl6, final_p, & final <S2SV_ModStart>, fl6, final_p <S2SV_ModEnd>, false ) <S2SV_ModStart>, fl6, final_p <S2SV_ModEnd>, false ) <S2SV_ModStart>, fl6, final_p <S2SV_ModEnd>, false ) <S2SV_ModStart>, fl6, final_p <S2SV_ModEnd>, false )",0
1077,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1078,"<S2SV_ModStart>, maxbuf, unicodestr ) ; if ( depth == 2 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> File <S2SV_blank> Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> File <S2SV_blank> Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) ND_PRINT ( ( ndo, ""\\n\\tFile <S2SV_blank> Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) ND_PRINT ( ( ndo, ""\\n\\tFile <S2SV_blank> Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) ND_PRINT ( ( ndo, ""\\n\\tFile <S2SV_blank> Data: <S2SV_blank> (unsigned long) <S2SV_blank> File <S2SV_blank> Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) ND_PRINT ( ( ndo, ""\\n\\tFile <S2SV_blank> Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) ND_PRINT ( ( ndo, ""\\n\\tFile <S2SV_blank> Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long )",0
1079,"<S2SV_ModStart> -> protocol_timeout ) { g_signal_disconnect ( client -> priv -> conn ) ; client -> priv -> conn = NULL ; return ; } <S2SV_ModEnd> g_debug ( ""GsmXSMPClient: <S2SV_blank> Initializing <S2SV_blank> client <S2SV_blank> %s"" <S2SV_ModStart> ; callbacks_ret -> set_properties. manager_data = client ; * mask_ret |= SmsSetPropertiesP2RequestProcMask ; callbacks_ret -> set_properties. manager_data = client ; callbacks_ret -> set_properties. manager_data = client ; * mask_ret |= SmsSetPropertiesP2DoneProcMask ; callbacks_ret -> set_properties. manager_data = client ; callbacks_ret -> set_properties. manager_data = client ; callbacks_ret -> set_properties. manager_data = client ; * mask_ret |= SmsSetPropertiesP2DoneProcMask ; callbacks_ret -> set_properties. manager_data = client ; * mask_ret |= SmsCloseConnectionProcMask ; callbacks_ret -> close_connection. callback = close_connection_callback ; callbacks_ret -> close_connection. manager_data = client ; * mask_ret |= SmsCloseConnectionP2RequestProcMask ;",0
1080,<S2SV_ModStart> >= 0 && <S2SV_ModEnd> ND_TTEST ( * <S2SV_ModStart> < ie && <S2SV_ModEnd> ND_TTEST ( *,1
1081,"<S2SV_ModStart> ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_TXQCR, KSZ8851_TXQCR_METFE <S2SV_ModEnd> ) ; n <S2SV_ModStart> ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK <S2SV_ModEnd> ; if (",0
1082,"<S2SV_ModStart> NULL ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
1083,"<S2SV_ModStart> } if ( assoc_array_ptr_is_leaf ( ptr ) ) { pr_devel ( ""replace <S2SV_blank> in <S2SV_blank> slot <S2SV_blank> %d\\n"", i ) ; edit -> dead_leaf = node -> slots [ i ] ; pr_devel ( ""<--%s() <S2SV_blank> = <S2SV_blank> ok <S2SV_blank> [replace]\\n"", i ) ; return true ; } <S2SV_ModEnd> if ( assoc_array_ptr_is_leaf <S2SV_ModStart> assoc_array_ptr_is_leaf ( ptr ) ) { pr_devel ( ""insert <S2SV_blank> in <S2SV_blank> free <S2SV_blank> slot <S2SV_blank> %d\\n"", free_slot ) ; edit -> dead_leaf = node -> slots [ free_slot ] ; pr_devel ( ""<--%s() <S2SV_blank> = <S2SV_blank> ok <S2SV_blank> [replace]\\n"", __func__ ) ; return true ; } <S2SV_ModStart> ; if ( assoc_array_ptr_is_leaf ( ptr ) && ops -> compare_object ( assoc_array_ptr_to_leaf ( ptr ), index_key ) ) { pr_devel ( ""replace <S2SV_blank> in <S2SV_blank> free <S2SV_blank> slot <S2SV_blank> %d\\n"", free_slot ) ; edit -> dead_leaf = node ->",0
1084,<S2SV_ModStart>. udpport = 0 <S2SV_ModEnd> ; settings.,1
1085,<S2SV_ModStart> ; # endif mono_domain_set ( NULL ) ; <S2SV_ModStart> ) ; # ifdef MONO_HAS_SEMAPHORES MONO_SEM_WAIT ( & finalizer_sem ) ;,0
1086,"<S2SV_ModStart>, x_7 ; WORD32 n_0, n_1, n_2, n_3, n4, n5, n6, x_7 ; WORD32 n_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; n_0 = x_0 + x_2 ; n_1 = x_1 + x_3 ; n_2 = x_2 + x_4 ; n_3 = x_3 + x_5 ; n_4 = x_4 + x_6 ; n5 = x_5 + x_7 ; n6 = x_7 + n_0 ; n7 = x0 ++ ; n8 = x_0 + x_2 ; n_9 = x_1 + x_3 ; n10 = x_0 - x_2 ; n11 = x_1 - x_3 ; n12 = x_0 - x_3 ; n13 = x_1 - x_3 ; n12 = x_4 + x_5 ; n13 = x_5 + x_6 ; n23 = x_",0
1087,<S2SV_ModStart> clips_ptr ) { if ( num_clips < 0 || num_clips > DRM_MODE_FB_DIRTY_MAX_CLIPS ) { ret = - EINVAL ; goto out_err1 ; },1
1088,<S2SV_ModStart> ; if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1089,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1090,"<S2SV_ModStart> 0 ) ; if ( idx + size > len ) { r_cons_printf ( ""bytes <S2SV_blank> would <S2SV_blank> overrun <S2SV_blank> esil[%d]\\n"", idx + len ) ; break ; } <S2SV_ModStart> 0 ) ; if ( idx + size > len ) { r_cons_printf ( ""bytes <S2SV_blank> would <S2SV_blank> overrun <S2SV_blank> esil[%d]\\n"", idx + len ) ; break ; } <S2SV_ModStart> 1 ) ; if ( idx + size > len ) { r_cons_printf ( ""bytes <S2SV_blank> would <S2SV_blank> overrun <S2SV_blank> esil[%d]\\n"", len ) ; break ; } <S2SV_ModStart> 0 ) { r_cons_printf ( ""bytes <S2SV_blank> would <S2SV_blank> overrun <S2SV_blank> esil[%d]\\n"", idx + size ) ; break ; } <S2SV_ModStart> 0 ) { r_cons_printf ( ""bytes <S2SV_blank> would <S2SV_blank> overrun <S2SV_blank> esil[%d]\\n"", idx + size <S2SV_ModEnd> ) ; }",0
1091,"<S2SV_ModStart>, frames ; size_t width, height ; size_t target_width, target_height ; if ( argc == 4 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } if ( argc == 5 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if ( fin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; return 1 ; } if (! parse_dim ( argv [ 4 ], & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 0 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } if ( argc >= 6 ) { printf ( ""Incorrect <S2SV_blank>",0
1092,"<S2SV_ModStart> + DSPQ_DATA_BUFF ; u16 head, tail, size ; head <S2SV_ModEnd> = readw ( <S2SV_ModStart> + JQS_wHead ) ; tail = readw ( chip -> DSPQ + JQS_wTail ) ; size = <S2SV_ModEnd> readw ( chip <S2SV_ModStart> + JQS_wSize ) ; if ( head > size || tail > size ) goto out ; while ( head!= tail ) { snd_msnd_eval_dsp_msg ( chip, readw ( pwDSPQData + 2 * head ) ) ; if ( ++ head > size ) head = 0 ; writew ( head <S2SV_ModEnd>, chip -> <S2SV_ModStart> ) ; } out :",1
1093,<S2SV_ModStart> * opcode_desc ; if ( len < 2 ) { return NULL ; },1
1094,<S2SV_ModStart> acpi_status status ; <S2SV_ModEnd> acpi_operand_object * next <S2SV_ModStart> * prev ; <S2SV_ModEnd> next = acpi_gbl_module_code_list <S2SV_ModStart> ) ; } <S2SV_ModEnd> acpi_ns_delete_namespace_subtree ( acpi_gbl_root_node,0
1095,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
1096,"<S2SV_ModStart> ; if ( strlen ( url_arg ) >= sizeof ( the_url ) ) { strncpy ( the_url, url_arg, sizeof ( the_url ) - 1 ) ; strncpy ( the_url [ sizeof ( the_url ) - 1 ], sizeof ( the_url ) - 1 ) ; strncpy ( the_url [ sizeof ( the_url ) - 1 ], sizeof ( the_url ) - 1 ) ; } <S2SV_ModStart> + 1 ; if ( strlen ( url_arg ) >= sizeof ( the_url ) ) { strncpy ( the_url, url_arg, sizeof ( the_url ) - 1 ) ; strncpy ( the_url [ sizeof ( the_url ) - 1 ], sizeof ( the_url ) - 1 ) ; strncpy ( the_url [ sizeof ( the_url ) - 1 ], sizeof ( the_url ) - 1 ) ; }",0
1097,"<S2SV_ModStart>, result ; _Py_IDENTIFIER ( _attributes ) ; PyUnicodeObject * s ; if (! num_fields ) { Py_DECREF ( l ) ; return 0 ; } for ( i = 0 ; i < num_fields ; i ++ ) { s = PyUnicode_FromString ( attrs [ i ] ) ; if (! s ) { Py_DECREF ( l ) ; return 0 ; } PyTuple_SET_ITEM ( l, i, s ) ; } result = _PyObject_SetAttrId ( ( PyObject * ) type, & PyId__attributes, l ) >= 0 ; Py_DECREF ( l ) ;",0
1098,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
1099,"<S2SV_ModStart> vpx_codec_alg_priv * priv <S2SV_ModEnd> ; vpx_codec_enc_cfg_t * <S2SV_ModStart> -> priv ) { return VPX_CODEC_MEM_ERROR ; } priv = ( vpx_codec_alg_priv * ) calloc ( 1, sizeof ( * priv ) <S2SV_ModEnd> ) ; if <S2SV_ModStart> { priv -> base = vpx_calloc ( 1, sizeof ( * priv ) <S2SV_ModEnd> ) ; ctx <S2SV_ModStart> enc = & priv <S2SV_ModEnd> -> cfg ; <S2SV_ModStart> i ++ ) { priv -> vp8_cfg = extracfg_map [ i ]. cfg ; priv -> vp8_cfg. pkt_list = & priv -> pkt_list. head ; priv -> cx_data_sz = 32768 ; priv -> cx_data = malloc ( priv -> cx_data_sz ) ; if (! priv -> cx_data ) { return VPX_CODEC_MEM_ERROR ; } priv -> vp8_cfg. pkt_list = malloc ( priv -> cx_data_sz ) ; if (! priv -> cx_data ) { return VPX_CODEC_MEM_ERROR ; } priv -> cx_data_sz = 32768 ; priv",0
1100,"<S2SV_ModStart> error ) { if ( bp && ( <S2SV_ModEnd> xfs_da_shrink_inode ( args <S2SV_ModStart>, bp )!= 0 ) <S2SV_ModEnd> ) goto out",1
1101,"<S2SV_ModStart> } if ( pixel -> lookup [ x ] >= BOT - cnt_x - step ) return - 1 ; if ( pixel -> freq [ c ] >= cnt_c + step && value >= cumfr + cnt_x ) { pixel -> lookup [ x ] = cnt_x + step ; pixel -> freq [ c ] = cnt_c + step ; totfr += cnt_x + step ; ret = s -> decode ( gb, rc, cumfr, cnt_c, totfr ) ; if ( ret < 0 ) return ret ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> freq [ c ] = cnt_c + step ; ret = s -> decode ( gb, rc, cumfr, cnt_c, totfr ) ; if ( ret < 0 ) return ret ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> freq [ c ] = cnt_c + step ; pixel -> total_freq = totfr ; return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
1102,<S2SV_ModStart> timer ) ; spin_lock ( & timeri -> timer -> lock ) ; <S2SV_ModStart> timer = NULL ; spin_unlock ( & timeri -> timer -> lock ) ; <S2SV_ModStart> slave_active_lock ) ; mutex_unlock ( & timeri -> timer -> lock ) ;,0
1103,"<S2SV_ModStart> return err ; if (! <S2SV_ModEnd> attrs [ TIPC_NLA_SOCK <S2SV_ModStart> attrs [ TIPC_NLA_SOCK <S2SV_ModEnd> ] ) return <S2SV_ModStart> - EINVAL ; err = nla_parse_nested ( sock, TIPC_NLA_SOCK_MAX, attrs [ TIPC_NLA_SOCK ], tipc_nl_sock_policy ) ; if ( err ) return err ; if (! sock <S2SV_ModEnd> [ TIPC_NLA_SOCK_REF ] <S2SV_ModStart> [ TIPC_NLA_SOCK_REF ] <S2SV_ModEnd> ) return - <S2SV_ModStart> - EINVAL ; tsk_portid = nla_get_u32 ( sock [ TIPC_NLA_SOCK_REF ] ) ; } if ( done ) return 0 ; tsk = tipc_sk_lookup ( net, tsk_portid ) ; if (! tsk ) return - EINVAL ;",1
1104,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> ( ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. count = 0 ; * res = VPX_CODEC_INVALID_PARAM ; return - 1 ; } if (! ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. count = 0 ; * res = VPX_CODEC_INVALID_PARAM ; return - 1 ; } return 0 ; } if (! ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count = 1 ; } <S2SV_ModEnd> return 1 ;,0
1105,<S2SV_ModStart> = v ; if (! IS_ERR ( vma ) ),1
1106,<S2SV_ModStart> ) buffer ; if ( total_len < sizeof ( * cap ) || total_len < <S2SV_ModEnd> cap -> bLength <S2SV_ModStart> cap -> bLength ) { dev -> bos -> desc -> bNumDeviceCaps = i ; break ; } length = cap -> bLength <S2SV_ModEnd> ; total_len -=,1
1107,<S2SV_ModStart> task = current <S2SV_ModEnd> ; if (,1
1108,"<S2SV_ModStart> ; if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenEAttr > inode -> i_sb -> s_blocksize ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> file <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> exceeded\\n"", inode -> i_ino ) ; goto out ; } if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenEAttr > inode -> i_sb -> s_blocksize ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> file <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> exceeded\\n"", inode -> i_ino ) ; goto out ; } if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenEAttr > inode -> i_sb -> s_blocksize ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> file <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> exceeded\\n"", inode -> i_ino ) ; goto out ; } if ( iinfo -> i_lenEAttr > inode -> i_sb -> s_blocksize - iinfo",0
1109,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",0
1110,<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline <S2SV_ModStart> * fmt ) { const char * ptr ; int n = 0 ; if ( strlen ( fmt ) >= sizeof ( fmt ) ) return 1 ; ptr ++ ; while ( * ptr!='<S2SV_blank>') if ( * ptr == '0' || * ptr == '0' || * ptr == '0' || * ptr == '9' ) return 1 ; if ( * ptr == '0' || * ptr == '9' ) return 1 ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; if ( * ptr == 'a' ) return 1 ; if ( * ptr == 'z' ) return 1 ; if ( * ptr == '0' || * ptr == '0' || * ptr == '9' ) return 1 ; if ( * ptr == '0' || * ptr == '0' ) return 1 ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; if ( * ptr == 'a' ) ptr ++ ; if ( * ptr == '0' || * ptr == 'a' ) return 1 ; if ( * ptr ==,0
1111,<S2SV_ModStart> sk_forward_alloc ) ; atomic_dec ( & sk -> sk_omem_alloc ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1112,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
1113,<S2SV_ModStart>! saw_digit ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart>!= '\\r' ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart>!= '\\n' ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart> ; trunc : * endp = bp ; <S2SV_ModStart> ; invalid : * endp = bp ;,1
1114,<S2SV_ModStart> ; args -> rmtvaluelen = be32_to_cpu ( name_rmt -> valuelen ) ; args -> rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ; args -> rmtvaluelen <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ; args -> rmtvaluelen <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ; args -> rmtvaluelen <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ; args -> rmtvaluelen <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ; args -> rmtvaluelen <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ; args -> rmtvaluelen <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ; args -> rmtvaluelen <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ; args -> rmtvaluelen <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ; args -> rmtvaluelen <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ; args -> rmtvaluelen <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ; args -> rmtvaluelen <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ; args -> rmtvaluelen <S2SV_ModEnd> = be32,0
1115,"<S2SV_ModStart> ""DefragIPv4TooLargeTest"", DefragIPv4TooLargeTest ) ; UtRegisterTest ( ""DefragIPv4NoDataTest"", DefragIPv4NoDataTest ) ; UtRegisterTest ( ""DefragIPv6DefragInOrderSimpleTest"", DefragIPv6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""DefragReverseSimpleTest"", DefragReverseSimpleTest ) ; UtRegisterTest ( ""DefragSturgesNovakWindowsTest"", DefragSturgesNovakWindowsTest ) ; UtRegisterTest ( ""DefragSturgesNovakFirstTest"", DefragSturgesNovakFirstTest ) ; UtRegisterTest ( ""DefragIPv6DefragInOrderSimpleTest"", DefragIPv6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""DefragSturgesNovakLinuxTest"", DefragSturgesNovakLinuxTest ) ; UtRegisterTest ( ""DefragSturgesNovakLastTest"", DefragSturgesNovakLastTest ) ;",0
1116,"<S2SV_ModStart> ; if ( object_length > 0 && object_length < new_object. length ) { sc_cardctl_coolkey_object_t * new_data = malloc ( sizeof ( sc_cardctl_coolkey_object_t ) + add_v1_record ) ; if ( new_data == NULL ) { r = SC_ERROR_OUT_OF_MEMORY ; } else { new_data = ( sc_cardctl_coolkey_object_t * ) malloc ( object_length + add_v1_record + 1 ) ; if ( new_object. data == NULL ) { return SC_ERROR_OUT_OF_MEMORY ; } new_object. data = malloc ( object_length + add_v1_record + 1 ) ; if ( add_v1_record ) { new_object. data [ 0 ] = COOLKEY_V1_OBJECT ; new_object. length ++ ; } memcpy ( & new_data [ add_v1_record ], object_data, object_length ) ; }",0
1117,"<S2SV_ModStart> out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; goto out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; goto out_error ; } <S2SV_ModStart> } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; goto out_error ; } <S2SV_ModStart> out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; goto out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning: <S2SV_blank> Invalid <S2SV_blank> vd_next <S2SV_blank> in <S2SV_blank> the <S2SV_blank> ELF <S2SV_blank> version\\n"" ) ; goto out_error ; }",0
1118,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
1119,<S2SV_ModStart> u8 label_len ; <S2SV_ModEnd> GET8 ( label_len <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ;,1
1120,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpAcc ( TIFF <S2SV_ModStart> cc ) ; if <S2SV_ModEnd> ( cc % <S2SV_ModStart> * stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""fpAcc"", ""%s"", ""cc%(bps*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> tmp ) return 0 <S2SV_ModStart> tmp ) ; return 1 ;",1
1121,"<S2SV_ModStart> -> vm_ops ) <S2SV_ModEnd> return do_fault ( <S2SV_ModStart>, pte, pmd, flags, entry ) ; <S2SV_ModEnd> return do_anonymous_page ( <S2SV_ModStart>, address, pte, pmd, <S2SV_ModEnd> flags ) ;",1
1122,"<S2SV_ModStart> s ) { size_t len = strlen ( s ) + 1 ; <S2SV_ModStart> = pool_alloc ( len ) ; memcpy <S2SV_ModEnd> ( r, <S2SV_ModStart> r, s, len",1
1123,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1124,"<S2SV_ModStart> ; new_map. nr_map = simple_strtoul ( pos, & new_map. map [ idx ], 10 ) ; if ( new_map. nr_map == UINT_MAX / sizeof ( new_map. extent [ idx ]. first ) || new_map. nr_map == UINT_MAX / sizeof ( new_map. extent [ idx ]. lower_first ) || map -> nr_map == UINT_MAX / sizeof ( new_map. map [ idx ]. lower_first ) || map -> nr_map == UINT_MAX / sizeof ( new_map. map [ idx ]. count )",0
1125,<S2SV_ModStart> ; if ( <S2SV_ModEnd> cu -> length <S2SV_ModStart> cu -> length == 0 || <S2SV_ModEnd> cu -> length <S2SV_ModStart> cu -> length == 0 || <S2SV_ModEnd> cu -> length <S2SV_ModStart> cu -> length == 0 || <S2SV_ModEnd> cu -> length <S2SV_ModStart> cu -> length == 0 || <S2SV_ModEnd> cu -> length <S2SV_ModStart> cu -> length == 0 || <S2SV_ModEnd> cu -> length <S2SV_ModStart> cu -> length == 0 || <S2SV_ModEnd> cu -> length <S2SV_ModStart> cu -> length == 0,0
1126,"<S2SV_ModStart> b_go ) { if ( p_sys -> b_auto_field_coding ) { schro_encoder_setting_set_double ( p_sys -> p_schro, ""top_field_first"",! p_pic -> b_progressive ) ; } else { if ( p_sys -> b_auto_field_coding ) { schro_encoder_setting_set_double ( p_sys -> p_schro, ""interlaced_coding"",! p_pic -> b_progressive ) { if ( p_sys -> b_auto_field_coding ) { schro_encoder_setting_set_double ( p_sys -> p_schro, ""top_field_first"", p_pic -> b_progressive ) ; } } else { if ( p_sys -> b_auto_field_coding ) { schro_encoder_setting_set_double ( p_sys -> p_schro, ""top_field_first"", p_pic -> b_progressive ) { if ( p_sys -> b_auto_field_coding ) { schro_encoder_setting_set_double (",0
1127,"<S2SV_ModStart> ; if (! mp_path_exists ( mf -> names [ count ] ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", fname ) ; break ; }",0
1128,"<S2SV_ModStart> ip6 ) ; if ( advance < 0 ) { ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", advance ) ) ; goto trunc ; } <S2SV_ModStart> ip6 ) ; if ( advance < 0 ) { ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", advance ) ) ; goto trunc ; } <S2SV_ModStart> ip6 ) ; if ( advance < 0 ) { ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", advance ) ) ; goto trunc ; } <S2SV_ModStart> ip6 ) ; if ( advance < 0 ) { ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", advance ) ) ; goto trunc ; } <S2SV_ModStart> ip6 ) ; if ( advance < 0 ) { ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", advance ) ) ; goto trunc ; } <S2SV_ModStart> ip6 ) ; if ( advance < 0 ) { ND_PRINT ( ( ndo, ""truncated",0
1129,<S2SV_ModStart> 4 ) ; if ( idx + 4 > len ) return NULL ; <S2SV_ModStart> ]. len + idx,0
1130,"<S2SV_ModStart> ; if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenEAttr > inode -> i_sb -> s_blocksize ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> file <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> exceeded\\n"", inode -> i_ino ) ; goto out ; } if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenEAttr > inode -> i_sb -> s_blocksize ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> file <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> exceeded\\n"", inode -> i_ino ) ; goto out ; } if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenEAttr > inode -> i_sb -> s_blocksize ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> file <S2SV_blank> entry <S2SV_blank> size <S2SV_blank> exceeded\\n"", inode -> i_ino ) ; goto out ; } if ( iinfo -> i_lenEAttr > inode -> i_sb -> s_blocksize - iinfo",0
1131,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
1132,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
1133,<S2SV_ModStart> ( ) ; free ( t1_buf_array ) ; free ( t1_line_array ) ;,0
1134,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * fb ; if ( ctx -> frame_workers!= NULL ) { vpx_free ( ctx -> frame_workers ) ; return VPX_CODEC_INCAPABLE ; } <S2SV_ModStart> * fb ; if ( ctx -> frame_workers!= NULL ) { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; <S2SV_ModStart> * fb ; yuvconfig2image ( & frame_worker_data -> img <S2SV_ModEnd>, NULL )",0
1135,"<S2SV_ModStart> ctxt ) ; if (! ( em_syscall_is_enabled ( ctxt ) ) ) return emulate_ud ( ctxt ) ; <S2SV_ModStart>, & ss ) ; if (! ( efer & EFER_SCE ) ) return emulate_ud ( ctxt",1
1136,"<S2SV_ModStart> { if ( j + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( j + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> "" ""no <S2SV_blank> image <S2SV_blank> content <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( <S2SV_ModStart> { if ( j + 1 < frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( j + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
1137,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == type_comment ) { node * ch = CHILD ( n, 0 ) ; if (! ch ) return NULL ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; switch ( TYPE ( CHILD ( n, 2 ) ) { case Name_kind : case Attribute_kind : break ; default : ast_error ( c, ch, ""illegal <S2SV_blank> expression <S2SV_blank> for <S2SV_blank> augmented <S2SV_blank> assignment"" ) ; return NULL ; } ch = CHILD ( n, 3 ) ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; switch ( TYPE ( CHILD ( n, 3 ) ) ) { case Name_kind : case Subscript_kind : break ; default : ast_error ( c, ch, ""illegal <S2SV_blank> expression <S2SV_blank> for <S2SV_blank> augmented <S2SV_blank> assignment"" ) ; return NULL ; } ch = CHILD ( n, 4 ) ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; } <S2SV_ModStart>, LINENO ( n ), n -> n_col_offset, n -> n_end",0
1138,"<S2SV_ModStart> int vp8_denoiser_filter_c ( <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * mc_running_avg_y, int mc_avg_y_stride, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * running_avg_y, int avg_y_stride, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> char * running_avg_y, int avg_y_stride <S2SV_ModEnd> ) { int <S2SV_ModStart> int r, c, i ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( i = 0 ; i < 3 ; ++ i ) { if ( absdiff >= 0 && absdiff <= 3 ) { running_avg_y [ c ] = mc_running_avg_y [ c ] ; sum_diff += diff ; } else { if ( absdiff >= 4 && absdiff <= 7 ) { running_avg_y [ c ] = running_avg_y [ c ] ; sum_diff += diff ; } else { if ( absdiff >= 8 && absdiff <= 15 ) adjustment = adj_val [ 0 ] ; else running_avg_y",0
1139,<S2SV_ModStart> ; if ( ( sockPtr -> flags & NS_CONN_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1140,"<S2SV_ModStart> ret = 0 ; if ( test_thread_flag ( child, TIF_XTENSA ) ) return - EPERM",0
1141,<S2SV_ModStart> size ) ; message -> interface = queueItem -> interface ; message ->,0
1142,"<S2SV_ModStart> se_device * remote_dev <S2SV_ModEnd> ; if ( <S2SV_ModStart> == XCOL_SOURCE_RECV_OP ) { <S2SV_ModStart> = xop -> src_dev ; } else { pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ; <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for""",0
1143,"<S2SV_ModStart> ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_MULTICAST_HOPS."" ) ; err = - errno ; goto close_sock ; } val = 1 ; ret = setsockopt ( sock, IPPROTO_IPV6, IPV6_RECVHOPLIMIT, & val, sizeof ( val ) ) ; if ( ret == - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_RECVHOPLIMIT,.""",1
1144,"<S2SV_ModStart> int error ; struct mb2_cache * ext2_mb_cache = EXT2_SB ( sb ) -> s_mb_cache <S2SV_ModStart> new_bh ) ; mb2_cache_insert ( ext2_mb_cache, new_bh ) ; get_bh ( new_bh <S2SV_ModStart> new_bh ) ; if (! mb2_cache_insert ( ext2_mb_cache, new_bh ) ) goto cleanup ; mb2_mb_cache_insert ( ext2_mb_cache, new_bh ) ;",0
1145,"<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp. <S2SV_ModStart>. type, ""compression"", sizeof ( rcomp. type ) <S2SV_ModEnd> ) ; if",1
1146,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ( ctx -> frame_workers <S2SV_ModEnd>, map ->",0
1147,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( rc ) return rc ; inode -> i_ctime = CURRENT_TIME ; mark_inode_dirty ( inode ) ; } break ; case ACL_TYPE_DEFAULT : ea_name = XATTR_NAME_POSIX_ACL_DEFAULT ; break ; default : return - EINVAL ; } if ( acl ) { size = posix_acl_xattr_size ( acl -> a_count ) ; value = kmalloc ( size, GFP_KERNEL ) ; if (! value ) return - ENOMEM ; rc = posix_acl_to_xattr ( & init_user_ns, acl, value, size <S2SV_ModStart> < 0 ) <S2SV_ModEnd> goto out ;",1
1148,"<S2SV_ModStart> ""UnableToReadImageData"" ) ; if ( EOFBlob ( image )!= MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1149,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
1150,<S2SV_ModStart> 3 * len + 8,1
1151,<S2SV_ModStart> SUCCESS ) { if ( Z_TYPE_PP ( var )!= IS_LONG ) { zval lval ; lval = * * var ; zval_copy_ctor ( & lval <S2SV_ModEnd> ) ; convert_to_long <S2SV_ModStart> ; convert_to_long ( & lval <S2SV_ModEnd> ) ; points <S2SV_ModStart>. x = Z_LVAL ( lval ) ; } else { points [ i ]. x = <S2SV_ModStart> var ) ; } <S2SV_ModStart> SUCCESS ) { if ( Z_TYPE_PP ( var )!= IS_LONG ) { zval lval ; lval = * * var ; zval_copy_ctor ( & lval <S2SV_ModEnd> ) ; convert_to_long <S2SV_ModStart> ; convert_to_long ( & lval <S2SV_ModEnd> ) ; points <S2SV_ModStart>. y = Z_LVAL ( lval ) ; } else { points [ i ]. y = <S2SV_ModStart> ; } } },1
1152,<S2SV_ModStart> ; sig_none = <S2SV_ModEnd> timr -> it_sigev_notify <S2SV_ModStart> timr -> it_sigev_notify <S2SV_ModEnd> == SIGEV_NONE ;,1
1153,"<S2SV_ModStart> char * ) AcquireQuantumMemory ( imsx * imsy, 1 ) ; if ( imbuf == NULL ) { return ( MagickFalse ) ; } <S2SV_ModStart> ) Reset ( dmbuf <S2SV_ModEnd> ) ; for <S2SV_ModStart> n ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( n = 0 ; n < 16 ; n ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( i = 0 ; i < 24 ; i ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( i = 0 ; i < 16 ; i ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( i = 0 ; i < 8 ; i ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( i = 0 ; i < 4 ; i ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( i = 0 ;",0
1154,<S2SV_ModStart> ( ) ; free ( t1_buf_array ) ; free ( t1_line_array ) ;,0
1155,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; if ( ctx -> frame_parallel_decode ) { return VPX_CODEC_INCAPABLE ; } <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; <S2SV_ModStart> VP9_REFFRAME ) frame -> frame_worker_data <S2SV_ModEnd> ; return vp9_copy_reference_dec <S2SV_ModStart> vp9_copy_reference_dec ( ctx <S2SV_ModEnd>, ( VP9_REFFRAME",0
1156,"<S2SV_ModStart>. path ; return Curl_urldecode <S2SV_ModEnd> ( data, <S2SV_ModStart>, 0, & <S2SV_ModEnd> pop3c -> mailbox <S2SV_ModStart> pop3c -> mailbox, NULL, TRUE ) <S2SV_ModEnd> ; } <S2SV_null>",1
1157,<S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ; <S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ;,1
1158,"<S2SV_ModStart> gb ) ; if ( s -> ref && sh -> first_slice_in_pic_flag ) { av_log ( s -> avctx, AV_LOG_ERROR, ""Two <S2SV_blank> slices <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> frame.\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
1159,<S2SV_ModStart> } ps_dec -> u2_total_mbs_coded += u1_num_mbs ; if ( ( ps_dec -> u2_total_mbs_coded < u1_mbaff ) || ( ps_dec -> u2_total_mbs_coded > u1_mbs ) ) { ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> ps_cur_slice -> u1_mbaff_frame_flag = u1_is_idr_slice ; ps_dec -> ps_cur_slice -> u1_mbaff_frame_flag = u1_is_idr_slice ; ps_dec -> ps_cur_slice -> u1_mbaff_frame_flag = u1_is_idr_slice ; ps_dec -> ps_cur_slice -> u1_mbaff_frame_flag = u1_is_idr_slice ; ps_dec -> ps_cur_slice -> u1_mbaff_frame_flag = u1_is_idr_slice ; ps_dec -> ps_cur_slice -> u1_mbaff_frame,0
1160,"<S2SV_ModStart>, u4_y_offset ; IMPEG2D_TRACE_MB_START ( ps_dec -> u2_mb_x, ps_dec -> u2_mb_y ) ; <S2SV_ModStart> == B_PIC ) { <S2SV_ModStart> ps_dec ) ; } else { <S2SV_ModStart> ps_dec ) ; } <S2SV_ModStart> == B_PIC ) { <S2SV_ModStart> ps_dec ) ; }",0
1161,"<S2SV_ModStart> VP9_LAST_FLAG ) { <S2SV_ModEnd> const YV12_BUFFER_CONFIG * <S2SV_ModStart> const cfg = cm -> frame_bufs [ <S2SV_ModEnd> cm -> ref_frame_map <S2SV_ModStart> ] ]. buf ; if ( cfg == NULL ) { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Missing <S2SV_blank> buffer <S2SV_blank> configuration"" ) ; } else { vp8_yv12_copy_frame ( cfg, sd ) ; } } else { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Invalid <S2SV_blank> reference <S2SV_blank> frame"" ) ; } if ( ref_frame_flag == VP9_LAST_FLAG ) { const YV12_BUFFER_CONFIG * const cfg = & cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ] ; if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd",0
1162,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
1163,"<S2SV_ModStart> -> mbmi ; <S2SV_ModEnd> const TX_SIZE tx_size <S2SV_ModStart> 1 ) ; const int num_4x4_w = num_4x4_wide_lookup [ plane_bsize ] ; const int num_4x4_h = num_4x4_high_lookup [ plane_bsize ] ; const int i = 0 ; const int max_blocks_wide = num_4x4_w ; const int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) { int r, c ; int max_blocks_wide = num_4x4_w ; int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_y ) )",0
1164,<S2SV_ModStart> -> mmap_legacy_base = TASK_UNMAPPED_BASE + random_factor <S2SV_ModEnd> ; if (,1
1165,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 4 ) ; <S2SV_ModEnd> src += src_stride",0
1166,"<S2SV_ModStart> return getnum ( <S2SV_ModEnd> fmt, 1 <S2SV_ModStart> = getnum ( <S2SV_ModEnd> fmt, sizeof",1
1167,"<S2SV_ModStart> nrow ) { if ( row + img -> row_offset > h ) { TIFFErrorExt ( tif -> tif_clientdata, ""gtStripSeparate"", ""%s"", ""(row+img->row_offset)%rowsperstrip <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", row + img -> row_offset, h ) ; return ( 0 ) ; } <S2SV_ModStart> % rowsperstrip ; if ( nrow > ( h + img -> row_offset ) / rowsperstrip ) { TIFFErrorExt ( tif -> tif_clientdata, ""gtStripSeparate"", ""(row+img->row_offset)%rowsperstrip <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", nrow, ( h + img -> row_offset ) % rowsperstrip ) ; return ( 0 ) ; } <S2SV_ModStart> % rowsperstrip ; if ( nrow > ( h + img -> row_offset ) / rowsperstrip ) { TIFFErrorExt ( tif -> tif_clientdata, ""gtStripSeparate"", ""(row+img->row_offset)%rowsperstrip <S2SV_blank> ex",0
1168,"<S2SV_ModStart> ; } } if ( NCH ( n ) == 1 ) { type_comment ( CHILD ( n, 1 ) ) ; if ( TYPE ( CHILD ( n, 2 ) ) == TYPE_COMMENT ) i += 2 ; for ( ; i < NCH ( n ) - 2 ; i ++ ) if ( TYPE ( CHILD ( n, 3 ) ) == TYPE_COMMENT ) i += 2 ; for ( ; i < ( NCH ( n ) - 1 ) ; i ++ ) if ( TYPE ( CHILD ( n, 4 ) ) { type_comment ( CHILD ( n, 5 ) ) ; if ( TYPE ( CHILD ( n, 5 ) ) == TYPE_COMMENT ) i += 2 ; for ( ; i < ( NCH ( n ) - 2 ) ; i ++ ) if ( TYPE ( CHILD ( n, 3 ) ) == TYPE_COMMENT ) i += 2 ; for ( ; i < ( NCH ( n ) - 3 ) ; i ++ ) if ( TYPE ( CHILD ( n, 4 ) ) == TYPE_COMMENT ) i += 2 ; if ( TYPE ( CHILD ( n, 5 ) ) == TYPE_COMMENT ) i += 2 ; for ( ; i",0
1169,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1170,<S2SV_ModStart> ( upid == INT_MIN ) return - ESRCH ; if ( upid ==,1
1171,"<S2SV_ModStart> siocb -> scm, false",1
1172,<S2SV_ModStart> ( num & ( 1U << <S2SV_ModEnd> number - 1 <S2SV_ModStart> - 1 ) <S2SV_ModEnd> ) return num,0
1173,"<S2SV_ModStart>, plane ) * ( ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH )? 2 : 1 ) <S2SV_ModStart> ( buf, stride <S2SV_ModEnd>, file )",0
1174,"<S2SV_ModStart> ; uint16_t attr_len <S2SV_ModEnd> ; uint16_t bytes_left <S2SV_ModStart> + 2 ) { avp -> type = L2TP_AVP_UNSUPPORTED ; } <S2SV_ModStart> avp -> length <S2SV_ModEnd> ) ; return <S2SV_ModStart> 1 ; } if ( ntohs ( avp -> type )!= L2TP_AVP_UNSUPPORTED ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } attr_len = ntohs ( avp -> length ) - sizeof ( struct l2tp_avp_t ) ; if ( attr_len > MD5_DIGEST_LENGTH - 2 ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } <S2SV_ModStart>",0
1175,"<S2SV_ModStart> -> private ; struct dm_dev * dev = lc -> dev ; int r = 0 ; if <S2SV_ModEnd> ( lc -> <S2SV_ModStart> ( lc -> start || ti -> len!= i_size_read ( dev -> bdev -> bd_inode ) >> SECTOR_SHIFT ) r = scsi_verify_blk_ioctl ( NULL, cmd ) ; return r? : __blkdev_driver_ioctl ( <S2SV_ModStart> -> bdev, <S2SV_ModEnd> dev -> mode",1
1176,<S2SV_ModStart> case EVP_CTRL_AEAD_SET_IV_LEN_FIXED : if ( arg < 0 || arg > EVP_CTR_SIZE ) return 0 ; actx -> nonce [ 0 ] = actx -> key. counter [ 1 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 4 ) ; actx -> nonce [ 1 ] = actx -> key. counter [ 2 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 4 ) ; actx -> nonce [ 2 ] = actx -> key. counter [ 3 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 5 ) ; actx -> nonce [ 3 ] = actx -> key. counter [ 0 ] = actx -> key. counter [ 1 ] = actx -> key. counter [ 2 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 6 ) ; actx -> nonce [ 4 ] = actx -> key. counter [ 3 ] = actx -> key. counter [ 4 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr +,0
1177,"<S2SV_ModStart> ) { if (! <S2SV_ModStart> ) request_module ( ""crypto-%s"" <S2SV_ModEnd>, name ) <S2SV_ModStart> ) request_module ( ""crypto-%s-all"" <S2SV_ModEnd>, name )",0
1178,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0 ) ;",0
1179,<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ;,1
1180,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1181,"<S2SV_ModStart> sock, sk ) ; memset ( sa, 0, sizeof ( * sa )",1
1182,"<S2SV_ModStart> { memcpy ( pass_salt, cpkt. data, cpkt. length",0
1183,<S2SV_ModStart> NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC | NTLMSSP_NEGOTIATE_SEAL <S2SV_ModStart> -> sign ) <S2SV_ModEnd> flags |= NTLMSSP_NEGOTIATE_SIGN <S2SV_ModStart> |= NTLMSSP_NEGOTIATE_KEY_XCH ; <S2SV_ModEnd> tmp = *,1
1184,"<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_empty ( adata -> conn ) ; <S2SV_ModStart> ) ; goto err_close_tls <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; goto err_close_tls <S2SV_ModEnd> ; } # <S2SV_ModStart> ""STARTTLS"", IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc!= IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ) ; goto err_close_tls ; } else { if ( imap_exec ( adata, ""CAPABILITY"", IMAP_CMD_NO_FLAGS ) ) goto err_close_tls <S2SV_ModEnd> ; } }",0
1185,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
1186,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horDiff8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
1187,<S2SV_ModStart> -> head <= 0 || ( int ) <S2SV_ModStart> g -> track >= UDP -> tracks ) return - EINVAL ; if ( ( g -> stretch & ~ ( FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK ) ) == 0 || ( g -> stretch & ~ ( FD_STRETCH | FD_SECTBASEMASK ) ) == 0 || ( g -> stretch & ~ ( FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK ) ) == 0 ) return - EINVAL ;,0
1188,"<S2SV_ModStart> } temp = memset ( G. gps_loc, 0, sizeof ( float ) * 5 ) ; if ( temp == 0 ) { close ( gpsd_sock ) ; return ; } memcpy ( temp, ""?WATCH={\\""json\\"":true};\\n"" ) ; if ( strncmp ( temp, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } temp = memset ( G. gps_loc, 0, sizeof ( float ) * 5 ) ; if ( temp == 0 ) { close ( gpsd_sock ) ; return ; } memcpy ( temp, ""?WATCH={\\""json\\"":true};\\n"" ) ; if ( strncmp ( temp, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; }",0
1189,"<S2SV_ModStart>, & rlen, 0",1
1190,"<S2SV_ModStart> * slavename ; struct stat st ; <S2SV_ModStart> } # endif strncpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> 82 ) ; memcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> + strlen ( curconn -> pass_salt ), curconn -> pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5data, sizeof ( md5data ) + 17 ) ; if ( curconn -> state == STATE_ACTIVE ) { abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ; return ; } if ( memcmp ( curconn -> trypassword, curconn -> trypassword, 17 )!= 0 ) { syslog ( LOG_NOTICE, _ ( ""(%d) <S2SV_blank> Invalid <S2SV_blank> login <S2SV_blank> by <S2SV_blank> %s\\r\\n"" ), curconn -> seskey, curconn -> username ) ; abort_connection ( curconn, pkthdr,",0
1191,"<S2SV_ModStart> mntent, path, rootfs -> mount",1
1192,"<S2SV_ModStart> if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> { if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name,",0
1193,<S2SV_ModStart> - offset ; unsigned short prev_bi_vcnt = bio -> bi_vcnt ; <S2SV_ModStart> ) break ; if ( bio -> bi_vcnt == prev_bi_vcnt ) put_page ( pages [ j ] ) ;,1
1194,<S2SV_ModStart> -> depth ; if ( numcolors > RAS_CMAP_MAXSIZ ) { return - 1 ; } <S2SV_ModEnd> actualnumcolors = hdr,1
1195,"<S2SV_ModStart> state. path <S2SV_ModEnd> ; char localhost <S2SV_ModStart> ""localhost"" ; } result = Curl_urldecode <S2SV_ModEnd> ( conn -> <S2SV_ModStart> data, path <S2SV_ModEnd>, 0,",0
1196,"<S2SV_ModStart> ( str, ""ID:"" <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, ""ID:"" <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, ""String:"" <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, ""String:\'"" <S2SV_ModEnd>, len )",0
1197,<S2SV_ModStart> [ i ] && j < sizeof ( buf ),0
1198,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
1199,"<S2SV_ModStart> + RDS_CONG_MAP_BYTES ; goto out ; } if ( be32_to_cpu ( rm -> m_inc. i_hdr. h_len ) == 0 ) i = ceil ( be32_to_cpu ( rm -> m_inc. i_hdr. h_len ), RDS_FRAG_SIZE ) - 1 ; else if ( be32_to_cpu ( rm -> m_inc. i_hdr. h_len ) == 0 ) i = ceil ( be32_to_cpu ( rm -> m_inc. i_hdr. h_len ), RDS_FRAG_SIZE ) ; if ( credit_alloc == 0 ) { set_bit ( RDS_LL_SEND_FULL, & conn -> c_flags ) ; rds_ib_stats_inc ( s_ib_tx_ring_full ) ; goto out ; }",0
1200,<S2SV_ModStart> 0 ) ; if (! r ) return - EINVAL ;,1
1201,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1202,,1
1203,"<S2SV_ModStart> { r_cons_printf ( ""Num <S2SV_blank> Paddr <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> Vaddr <S2SV_blank> %d\\n"", laddr ) ; r_cons_printf ( ""Num <S2SV_blank> Vaddr <S2SV_blank> %d\\n"", va <S2SV_ModEnd> ) ; } <S2SV_ModStart> { r_cons_printf ( ""Num <S2SV_blank> Paddr <S2SV_blank> <S2SV_blank> <S2SV_blank> Vaddr <S2SV_blank> %d\\n"", laddr ) ; r_cons_printf ( ""Num <S2SV_blank> Vaddr <S2SV_blank> %d\\n"", va <S2SV_ModEnd> ) ; } <S2SV_ModStart> { r_cons_printf ( ""Num <S2SV_blank> Paddr <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> Vaddr <S2SV_blank> %d\\n"", entry -> paddr, entry -> vaddr ) ; r_cons_printf ( ""Num <S2SV_blank> Paddr <S2SV_blank> %d\\n"", entry -> vaddr, laddr ) ; r_cons_printf ( ""Num <S2SV_blank> Vaddr <S2SV_blank> %d\\n"", va <S2SV_ModEnd> ) ; }",0
1204,"<S2SV_ModStart>, rqstp, res <S2SV_ModEnd> ) ; out",1
1205,"<S2SV_ModStart> mntent -> mnt_dir, NULL",1
1206,"<S2SV_ModStart> iv ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
1207,"<S2SV_ModStart> ) ) { * status = ""INVALID_S4U2PROXY_OPTIONS"" ; <S2SV_ModStart> ) ) { * status = ""EVIDENCE_TICKET_MISMATCH"" ;",1
1208,<S2SV_ModStart> thread -> tp_value [ 0 ] <S2SV_ModStart> childregs -> ARM_r3 ; thread -> tp_value [ 1 ] = get_tpuser ( ),1
1209,<S2SV_ModStart> bufsize ) { char * new_buf ; size_t new_bufsize <S2SV_ModEnd> ; JAS_DBGLOG ( <S2SV_ModStart> ) ) { <S2SV_ModEnd> return 0 ; <S2SV_ModStart> 0 ) { new_bufsize <S2SV_ModEnd> = 1024 ; <S2SV_ModStart> } else { new_bufsize <S2SV_ModEnd> = bufsize ; <S2SV_ModStart> = bufsize ; new_bufsize <S2SV_ModEnd> = 0 ; <S2SV_ModStart> } else { new_bufsize <S2SV_ModEnd> = bufsize ; <S2SV_ModStart> = bufsize ; new_bufsize <S2SV_ModEnd> = 0 ;,0
1210,"<S2SV_ModStart> sshbuf * b = NULL <S2SV_ModStart> char * pkalg = NULL <S2SV_ModStart> u_char * pkblob = NULL <S2SV_ModStart>, * sig = NULL <S2SV_ModStart> ; if ( <S2SV_ModEnd> ( r = <S2SV_ModStart> r ) ) ; if (! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } <S2SV_ModStart> ca_s ) ; <S2SV_ModEnd> authopts = NULL <S2SV_ModStart> r ) ) ; if (! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } <S2SV_ModStart> r ) ) ; if ( <S2SV_ModEnd> ( r = <S2SV_ModStart> r ) ) ; if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } <S2SV_ModStart> r ) ) ; if ( authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } <S2SV_ModStart> r ) ) ; if ( authctxt ->",0
1211,"<S2SV_ModStart> uint32_t bcount ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
1212,<S2SV_ModStart> == READ ) { <S2SV_ModStart> = ocfs2_get_block ; } else { <S2SV_ModStart> = ocfs2_dio_get_block ; },0
1213,"<S2SV_ModStart> mech ) ; <S2SV_ModEnd> ret = gsasl_server_start <S2SV_ModStart> sd ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn; <S2SV_blank> (%d): <S2SV_blank> %s"", ret, gsasl_strerror ( ret ) ) ; _sx_nad_write ( s, _sx_sasl_failure ( s, _sasl_err_TEMPORARY_FAILURE, gsasl_strerror ( ret ) ), 0 ) ; return ; } ret = gsasl_server_start ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn; <S2SV_blank> (%d): <S2SV_blank> %s"", ret, gsasl_strerror ( ret ) ) ; _sx_nad_write ( s, _sx_sasl_failure ( s, _sasl_err_TEMPORARY_FAILURE",0
1214,<S2SV_ModStart> tn_buf ) ; return - EACCES ;,1
1215,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteFujiEntry ) ) ;",1
1216,"<S2SV_ModStart> failed_mount3 ; } if ( le32_to_cpu ( es -> s_first_meta_bg ) >= db_count ) { ext2_msg ( sb, KERN_WARNING, ""first <S2SV_blank> meta <S2SV_blank> bg <S2SV_blank> group <S2SV_blank> too <S2SV_blank> large: <S2SV_blank> %u <S2SV_blank> "" ""(group <S2SV_blank> descriptor <S2SV_blank> block <S2SV_blank> count <S2SV_blank> %u)"", le32_to_cpu ( es -> s_first_meta_bg ), db_count ) ; goto failed_mount3 ; } <S2SV_ModStart> failed_mount3 : if ( le32_to_cpu ( es -> s_first_meta_bg ) >= db_count ) { ext2_msg ( sb, KERN_WARNING, ""first <S2SV_blank> meta <S2SV_blank> bg <S2SV_blank> group <S2SV_blank> too <S2SV_blank> large: <S2SV_blank> %u <S2SV_blank> "" ""(group <S2SV_blank> descriptor <S2SV_blank> block <S2SV_blank> count <S2SV_blank> %u)"", le32_to_cpu ( es -> s_first_meta_bg ), db_count ) ; goto failed_mount3 ; }",0
1217,<S2SV_ModStart> bd_addr ) { int rc ; if ( bdif_dm_list == NULL ) return BT_STATUS_NOT_READY ; rc = btif_dm_remove_bond_nolock ( bd_addr ) ; if ( rc == - 1 ) return BT_STATUS_NOT_READY ;,0
1218,<S2SV_ModStart> len < tcp_hdrlen || tcp_hdrlen < sizeof ( struct tcphdr ) <S2SV_ModStart> ; if ( tcp_hdrlen >= 15 * 4 ) return 0 ; if (,1
1219,"<S2SV_ModStart> int i ; size_t size ; matrix = 0 ; <S2SV_ModStart> 0 ) { goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } matrix <S2SV_ModStart> -> datasize_ = 0 ; if (! jas_safe_size_mul ( numrows, numcols, & size ) ) { goto error ; } matrix -> datasize_ = size <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } } <S2SV_ModStart> return matrix ; error : if ( matrix ) { jas_matrix_destroy ( matrix ) ; } return 0 ;",1
1220,"<S2SV_ModStart> ipv6_select_ident ( fh, rt <S2SV_ModStart> ipv6_select_ident ( fh, rt",1
1221,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; ce = mb2_cache_entry_alloc ( ext4_mb_cache, GFP_NOFS, hash <S2SV_ModEnd> ) ; if <S2SV_ModStart> error ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> } } <S2SV_null>",0
1222,<S2SV_ModStart> * req ; <S2SV_ModEnd> req = scsi_req_alloc <S2SV_ModStart> hba_private ) ; <S2SV_ModEnd> return req ;,1
1223,"<S2SV_ModStart> int i ; size_t <S2SV_ModEnd> expect ; txid <S2SV_ModStart> 4 ) ; size_t <S2SV_ModEnd> avail = buf <S2SV_ModStart> buf -> cursor ; expect = 8 + 8 + nxip * 8 ; if ( expect < 0 || expect > avail ) goto bad_format ; nxip = pq_getmsgint ( buf, 4 ) ; if ( nxip < 0 || nxip > avail || expect > avail ) goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmin > xmax || xmax > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax ) goto bad_format ; snap -> xip [ i ] = 0 ; last = cur ; }",0
1224,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1225,<S2SV_ModStart> ( ret ||! cm_id -> device ||,1
1226,<S2SV_ModStart> xfrm_policy_walk * ) <S2SV_ModEnd> cb -> args <S2SV_ModStart> cb -> args <S2SV_ModEnd> ; struct xfrm_dump_info <S2SV_ModStart> struct xfrm_dump_info info <S2SV_ModEnd> ; info. <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> ( void ),1
1227,"<S2SV_ModStart> 1 ; oe_socklen_t len <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( & ret, len <S2SV_ModEnd> )!= OE_OK <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) len ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; }",0
1228,"<S2SV_ModStart> dentry * upper <S2SV_ModEnd> ; int err <S2SV_ModStart> I_MUTEX_PARENT ) ; upper = lookup_one_len ( dentry -> d_name. name, upperdir, dentry -> d_name. len ) ; err = PTR_ERR ( upper ) ; if ( IS_ERR ( upper ) ) goto out_unlock ; <S2SV_ModStart> if ( upper == ovl_dentry_upper ( dentry ) ) { <S2SV_ModEnd> if ( is_dir <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> ovl_dentry_version_inc ( dentry <S2SV_ModStart> ) ; } dput ( upper ) ; <S2SV_ModStart> dentry ) ; out_unlock :",1
1229,"<S2SV_ModStart> { errstr = parse_global_option ( CMD_INITIALIZE, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_ERR, ""Global <S2SV_blank> options: <S2SV_blank> %s"", errstr ) ; return 1 ; } } if ( * section_ptr == & new_service_options ) { s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_ERR, ""Service <S2SV_blank> [%s]: <S2SV_blank> %s"", ( * section_ptr ) -> servname ) ; return 1 ; }",0
1230,<S2SV_ModStart> * ptrptr && <S2SV_ModEnd> nmemb && size <S2SV_ModStart> nmemb && size <S2SV_ModEnd> ) return AVERROR,1
1231,<S2SV_ModStart> ( a -> type == szMAPI_BINARY && a -> <S2SV_ModStart> else if ( a -> type == szMAPI_BINARY &&,1
1232,"<S2SV_ModStart> ; # endif if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif i -> posX = i -> parent -> width - i -> width ; } if ( ( i -> posY + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> Y <S2SV_blank> position\\n"" ) ; # endif i -> posY = i -> parent -> height - i -> height ; } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif i -> posX =",0
1233,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : * ( size_t * ) val = ms -> elf_notes_max ; return 0 ;,1
1234,"<S2SV_ModStart> { jas_eprintf ( ""got <S2SV_blank> box <S2SV_blank> type <S2SV_blank> %s\\n"" <S2SV_ModEnd>, box ->",1
1235,,1
1236,"<S2SV_ModStart> & 0xffff ; if ( fmt == SEQ_EXTENDED ) { if (! ( seq_mode == SEQ_2 && synth_devs [ dev ] -> load_patch ) ) return - EINVAL ; seq_startplay ( ) ; } else { err = synth_devs [ dev ] -> load_patch ( dev, fmt, buf, p + 4, c, 0 ) ; if ( err < 0 ) return err ; if ( seq_mode == SEQ_2 && ev_code == SEQ_EXTENDED ) { if (! ( seq_mode == SEQ_2 && c < 8 ) ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> 4 <S2SV_blank> byte <S2SV_blank> event <S2SV_blank> in <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> mode\\n"" ) ; return - EINVAL ; } else { if ( seq_mode == SEQ_1 && ev_code == SEQ_EXTENDED ) { if (! ( seq_mode == SEQ_2 && ev_code == SEQ_EXTENDED ) ) seq_startplay ( ) ; } else { if ( c < 8 ) { printk ( KERN_WARNING ""Sequ",0
1237,<S2SV_ModStart> journal_t * journal ; if ( page_is_file ( page ) ) { ClearPageChecked ( page ) ; return ; },0
1238,"<S2SV_ModStart> i ++ ) { writer = GF_SAFEALLOC ( writer, TrackWriter ) ; if (! writer ) return GF_OUT_OF_MEM ; <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ) return GF_OUT_OF_MEM <S2SV_ModEnd> ; writer -> <S2SV_ModStart> gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) <S2SV_ModStart> gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if ( trak -> sample_encryption ) writer -> prevent_dispatch = GF_TRUE ; writer -> isDone = 0 ; writer -> chunkDur = 0 ; writer -> chunkSize = 0 ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer -> stsc ) return GF_OUT_OF_MEM <S2SV_ModEnd> ; writer ->",0
1239,<S2SV_ModStart> UINT32 nsc_rle_encode ( const,1
1240,"<S2SV_ModStart> 17 ] ; unsigned <S2SV_ModStart> plen ; # if defined ( __linux__ ) && defined ( _POSIX_MEMLOCK_RANGE ) strncpy ( md5data, password, 82 ) ; md5data [ 83 ] = '\\0' ; memcpy ( md5data + 1 <S2SV_ModEnd>, password, <S2SV_ModStart> password, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; md5_finish ( & state, ( const md5_byte_t * ) md5sum + 1 ) ; plen = add_control_packet ( & data, MT_CPTYPE_PASSWORD, md5data, sizeof ( md5data ) ) ; if ( is_a_tty && get_terminal_size ( width, height )!= - 1 ) { width = htole16 ( width ) ; height = htole16 ( height ) ; } if ( is_a_tty && get_terminal_size ( width, height )!= - 1 ) { width = htole16 ( width ) ; height = htole16 ( height ) ; }",0
1241,"<S2SV_ModStart> * dllhandle ; if ( COM_CompareExtension ( name, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", name ) ; return NULL ; }",1
1242,<S2SV_ModStart> ; if ( _mibindex_max > SNMP_MIBINDEX_MAX / sizeof ( int ) ) { if ( _mibindex_max > SNMP_MIBINDEX_MAX / sizeof ( int ) ) { if ( _mibindex_max > SNMP_MIBINDEX_MAX / sizeof ( int ) ) { if ( _mibindex_max > SNMP_MIBINDEX_MAX / sizeof ( int ) ) { SNMP_FREE ( _mibindexes [ _mibindex_max - SNMP_MIBINDEX_MAX / sizeof ( int ) ) ; } } else { if ( _mibindex_max > SNMP_MIBINDEX_MAX / sizeof ( int ) ) { if ( _mibindex_max > SNMP_MIBINDEX_MAX / sizeof ( int ) ) { if ( _mibindex_max > SNMP_MIBINDEX_MAX / sizeof ( int ) ) { SNMP_FREE ( _mibindexes [ _mibindex_max - SNMP_MIBINDEX_MAX / sizeof ( int ) ) ) { SNMP_FREE ( _mibindexes ) ; _mibindexes,0
1243,<S2SV_ModStart> ( n ) \\\n{ <S2SV_ModEnd> sum = ( <S2SV_ModStart> ++ ; } \\\n} <S2SV_ModEnd> typedef struct PCDTable <S2SV_ModStart> buffer ) ; for ( j = 0 ; j < i ; j ++ ) pcd_table [ j ] = ( PCDTable * ) RelinquishMagickMemory ( pcd_table [ j ] <S2SV_ModStart> buffer ) ; for ( j = 0 ; j < i ; j ++ ) pcd_table [ j ] -> sequence = ( unsigned int ) pcd_table [ j ] -> sequence ; for ( j = 0 ; j < i ; j ++ ) pcd_table [ j ] -> key = ( unsigned int ) pcd_table [ j ] -> sequence ; for ( j = 0 ; j < 3 ; j ++ ) pcd_table [ j ] -> sequence = ( unsigned int ) pcd_table [ j ] -> sequence ; for ( j = 0 ; j < i ; j ++ ) pcd_table [ j ] -> sequence = ( unsigned int ) pcd_table [ j ] -> sequence ; for ( j = 0 ; j < i ; j ++ ) pcd_table [ j ] -> sequence = ( unsigned int ) pcd,0
1244,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1245,<S2SV_ModStart> g_hash_table_destroy ( headers ) ; g_hash_table_remove_all ( headers ) ;,0
1246,"<S2SV_ModStart> # ifdef HAVE_IPV6 <S2SV_ModEnd> if ( * <S2SV_ModStart> 1 ) { char * <S2SV_ModStart> * portno = strtol <S2SV_ModEnd> ( p + <S2SV_ModStart> p + 2, & port <S2SV_ModStart> * portno = strtol <S2SV_ModEnd> ( colon + <S2SV_ModStart> colon ) { if (! port ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } <S2SV_ModEnd> return estrndup ( <S2SV_ModStart> colon ) { if (! port ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } } else { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1247,"<S2SV_ModStart> i, ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] )",0
1248,"<S2SV_ModStart> -> y_buffer ; const int rows = <S2SV_ModEnd> src_ybc -> y_height <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst, <S2SV_ModStart> src_ybc -> y_width, rows * src_ybc -> y_stride",0
1249,"<S2SV_ModStart> AVERROR_INVALIDDATA ; } if ( c -> log2_cblk_width > 6 || c -> log2_cblk_height > 6 ) { avpriv_request_sample ( s -> avctx, ""cblk <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", c -> log2_cblk_width, 6 ) ; return AVERROR_PATCHWELCOME ; }",0
1250,<S2SV_ModStart> == * ptr && ptr [ 1 ],1
1251,"<S2SV_ModStart> * cpi, ThreadData * td, TileDataEnc * tile_data <S2SV_ModEnd> ) { VP9_COMMON <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> mi_col += MI_BLOCK_SIZE <S2SV_ModEnd> ) { int <S2SV_ModStart> dummy_rate ; int64_t <S2SV_ModEnd> dummy_dist ; BLOCK_SIZE <S2SV_ModStart> BLOCK_SIZE i ; memset <S2SV_ModEnd> ( x -> <S2SV_ModStart> adaptive_pred_interp_filter ) { for ( i = BLOCK_4X4 ; i < BLOCK_8X8 ; ++ i ) { const int num_4x4_w = num_4x4_blocks_wide_lookup [ i ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ i ] ; const int num_4x4_blk = MAX ( 4, num_4x4_blk ) ; for ( x -> sb_index = 0 ; x -> mb_index < 4 ; ++ x -> sb_index ) for ( x -> b_index = 0 ; x -> b_index < 16 / num_4x4_blk ; ++ x -> b_index ) get_block_context (",0
1252,"<S2SV_ModStart>, obj_tlen ; u_int <S2SV_ModEnd> offset ; u_int <S2SV_ModStart> ) ) ; if ( tlen < sizeof ( struct lmp_common_header ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } if ( tlen > len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; tlen = len ; } <S2SV_ModStart> ) ) ; if ( tlen < sizeof ( struct lmp_object_header ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; }",0
1253,"<S2SV_ModStart> void inc_mvs ( MB_MODE_INFO_EXT * mbmi_ext, <S2SV_ModEnd> const int_mv mvs <S2SV_ModStart> * ref = mbmi_ext -> ref_mvs [ mbmi_ext -> <S2SV_ModEnd> ref_frame [ i <S2SV_ModStart> 0 ]. as_mv ; # if CONFIG_VP9_HIGHBITDEPTH if ( mbmi_ext -> flags & MB_MODE_HIGHBITDEPTH ) { MV diff = { mvs [ i ]. as_mv. row - ref -> row, mvs [ i ]. as_mv. col - ref -> col ; vp9_inc_mv ( & diff, counts ) ; } else { const MV * diff = mbmi_ext -> ref_mvs [ mbmi -> ref_frame [ i ] ]. as_mv ; # if CONFIG_VP9_HIGHBITDEPTH if ( mbmi_ext -> flags & MB_MODE_HIGHBITDEPTH ) { MV diff = { mvs [ i ]. as_mv. row - ref -> row, mvs [ i ]. as_mv. col - ref -> col ; vp9_inc_mv ( & diff, counts ) ; } # else",0
1254,"<S2SV_ModStart> ) ; } res = vpx_codec_enc_config_default <S2SV_ModEnd> ( encoder -> <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
1255,<S2SV_ModStart> ; if ( skb -> len + hdr_size > skb -> len ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } if (,0
1256,<S2SV_ModStart> sta -> lock ) ; spin_lock_init ( & sta -> ps_lock,1
1257,<S2SV_ModStart> tp_event ) && perf_paranoid_tracepoint_raw <S2SV_ModEnd> ( ) &&,1
1258,<S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_net_ops <S2SV_ModStart> ) ; sctp_v4_protosw_exit <S2SV_ModEnd> ( ) ;,0
1259,"<S2SV_ModStart>, 0 ) ; if (! data_interface ||! control_interface ) return - ENODEV",1
1260,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1261,"<S2SV_ModStart> env_var ) return ; if ( strchr ( env_var, ENV_SEPARATOR ) ) { DEBUGMSGTL ( ( ""init_mib"", ""Seen <S2SV_blank> MIBDIRS: <S2SV_blank> Looking <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> mib <S2SV_blank> directories <S2SV_blank>...\\n"", env_var ) ) ; entry = strtok_r ( NULL, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = netsnmp_getenv ( ""MIBDIRS"" ) ; if ( env_var == '+' ) { add_mibdir ( entry ) ; entry = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; } else { add_mibfile ( entry, NULL, NULL ) ; } SNMP_FREE ( env_var ) ; env_var = netsnmp_getenv ( ""MIBFILES"" ) ; if ( env_var!= NULL ) { if ( * env_var == '+' ) entry = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; else entry = strtok_r ( env_var + 1",0
1262,"<S2SV_ModStart> * head ; <S2SV_ModEnd> newsk -> sk_sndbuf <S2SV_ModStart> -> sk_rcvbuf ; sctp_copy_descendant <S2SV_ModEnd> ( newsk,",1
1263,"<S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_RDWR ) ) <S2SV_ModStart> 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, UI_SET_EVBIT, KEY_READ <S2SV_ModEnd> ) ; ioctl <S2SV_ModStart> ( fd, UI_SET_EVBIT, REL_READ <S2SV_ModEnd> ) ; ioctl <S2SV_ModStart> ( fd, UI_SET_EVBIT, SYN_READ <S2SV_ModEnd> ) ; for <S2SV_ModStart> x ++ ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd, UI_SET_KEYBIT, key_map [ x ]. mapped_id ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, UI_SET_KEYBIT, key_map [ x ]. <S2SV_ModEnd> mapped_id ) ;",0
1264,"<S2SV_ModStart> { struct desc_struct <S2SV_ModEnd> desc ; short <S2SV_ModStart> return sel ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! get_desc ( & desc, sel ) <S2SV_ModEnd> ) return - <S2SV_ModStart>! ( desc. <S2SV_ModEnd> type & BIT <S2SV_ModStart> ( ( desc. <S2SV_ModEnd> l << 1 <S2SV_ModStart> ) | desc. <S2SV_ModEnd> d ) {",1
1265,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
1266,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s,",0
1267,<S2SV_ModStart> return ret ; fsnotify_put_group ( group ) ;,1
1268,<S2SV_ModStart> <S2SV_null> <S2SV_null> iakerb_ctx_id_t <S2SV_ModEnd> krb5_alloc_context ( iakerb_ctx_id_t <S2SV_ModStart> ; code = krb5_gss_init_context <S2SV_ModEnd> ( & ctx,0
1269,"<S2SV_ModStart> var_off ) ; if ( src_known &&! dst_known ) { verbose ( env, ""R%d <S2SV_blank> tried <S2SV_blank> to <S2SV_blank> add <S2SV_blank> from <S2SV_blank> different <S2SV_blank> pointers <S2SV_blank> or <S2SV_blank> scalars\\n"", dst_reg -> var_off ) ; return - EINVAL ; } <S2SV_ModStart> case BPF_SUB : if ( src_known &&! dst_known ) { verbose ( env, ""R%d <S2SV_blank> tried <S2SV_blank> to <S2SV_blank> sub <S2SV_blank> from <S2SV_blank> different <S2SV_blank> pointers <S2SV_blank> or <S2SV_blank> scalars\\n"", dst_reg -> var_off ) ; return - EINVAL ; }",0
1270,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> bitmapDC = CreateCompatibleDC",1
1271,<S2SV_ModStart> ; while ( ( <S2SV_ModStart> )!= START_CODE_PREFIX ) && ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ),1
1272,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { kfree ( string ) ; ret = - EINVAL ; goto out ; }",0
1273,<S2SV_ModStart> imethod ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1274,"<S2SV_ModStart> ""nnnnn\\0"" ) ] ; unsigned long <S2SV_ModEnd> tmp ; if <S2SV_ModStart> ( copy_from_user ( buf <S2SV_ModEnd>, buffer, <S2SV_ModStart> count ) ) return - EFAULT <S2SV_ModEnd> ; tmp =",0
1275,<S2SV_ModStart> input -> cur ) ; } if ( ( ctxt -> inputNr > 20 ) && ( ( ctxt -> options & XML_PARSE_HUGE ) == 0 ) && ( ( ctxt -> options & XML_PARSE_HUGE ) == 0 ) && ( ( ctxt -> options & XML_PARSE_HUGE ) == 0 ) && ( ( ctxt -> options & XML_PARSE_HUGE ) == 0 ) && ( ( ctxt -> options & XML_PARSE_HUGE ) == 0 ) && ( ( ctxt -> options & XML_PARSE_HUGE ) == 0 ) && ( ( ctxt -> options & XML_PARSE_HUGE ) == 0 ) && ( ( ctxt -> options & XML_PARSE_HUGE ) == 0 ) && ( ( ctxt -> options & XML_PARSE_HUGE ) == 0 ) && ( ( ctxt -> options & XML_PARSE_HUGE ) == 0 ) && ( ctxt -> options & XML_PARSE_HUGE ) == 0 ) && ( ctxt -> options & XML_PARSE_HUGE ) == 0 ) && ( ctxt -> options & XML_PARSE_HUGE ),0
1276,"<S2SV_ModStart> } if ( le32_to_cpu ( raw_super -> segment_count ) > F2FS_MAX_SEGMENT ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> segment <S2SV_blank> count <S2SV_blank> (%u)"", le32_to_cpu ( raw_super -> segment_count ) ) ; return 1 ; } if (",1
1277,"<S2SV_ModStart> char * last_elem = NULL <S2SV_ModStart> ( ( ( strncmp ( & name [ 1 ], ""ORIGIN}"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 1 ], ""PLATFORM}"", 8 ) == 0 && ( len = 9 )!= 0 ) ) && ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( len = 11 )!= 0 ) )? l -> l_origin <S2SV_ModEnd> : _dl_platform )",0
1278,<S2SV_ModStart> ) H264SwDecMalloc ( <S2SV_ModEnd> sizeof ( decContainer_t,0
1279,<S2SV_ModStart> len ) { struct ipv6_txoptions * opt_to_free = NULL ; <S2SV_ModStart>! opt ) { opt = txopt_get ( np ) ; opt_to_free = opt ; } <S2SV_ModEnd> if ( flowlabel <S2SV_ModStart> flowlabel ) ; txopt_put ( opt_to_free ) ;,1
1280,<S2SV_ModStart> } if ( iph -> ihl >= IP_MAX_IHDR_SIZE / sizeof ( struct iphdr ) ) goto inhdr_error ; if ( <S2SV_ModStart> 0 ; } if ( iph -> ihl >= IP_MAX_IHDR_SIZE / sizeof ( struct iphdr ) ) goto inhdr_error ;,0
1281,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> } break ;",1
1282,<S2SV_ModStart> ; if ( rtm -> rtm_name [ RTA_MAX - 1 ] == '\\0' || rtm -> rtm_name [ RTA_MAX - 1 ] == '\\0' ) { err = - EINVAL ; goto errout ; } <S2SV_ModStart> ; if ( rtm -> rtm_name [ RTA_MAX - 1 ] == '\\0' || rtm -> rtm_name [ RTA_MAX - 1 ] == '\\0' || rtm -> rtm_name [ RTA_MAX - 1 ] == '\\0' ) { err = - EINVAL ; goto errout ; } <S2SV_ModEnd> ip_hdr ( skb <S2SV_ModStart> ; if ( rtm -> rtm_name [ RTA_MAX - 1 ] == '\\0' || rtm -> rtm_name [ RTA_MAX - 1 ] == '\\0' || rtm -> rtm_name [ RTA_MAX - 1 ] == '\\0' || rtm -> rtm_name [ RTA_MAX - 1 ] == '\\0' ) { err = - EINVAL ; goto errout ; },0
1283,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1284,"<S2SV_ModStart> goto errout ; if ( info -> stages > INT_MAX / sizeof ( * info -> stages ) ) { vorbis_info_buffer_free ( info, ( vorbis_info_buffer * ) opb -> buf ) ; vorbis_buffer_free ( info, ( vorbis_info_buffer * ) opb -> buf ) ; vorbis_buffer_free ( info, ( vorbis_info_buffer * ) opb -> buf ) ; return - 1 ; } if ( info -> stagemasks == 0 ) { vorbis_info_buffer_free ( info -> stagemasks, ( vorbis_info_buffer * ) opb -> buf ) ; vorbis_buffer_free ( info -> stagebooks, ( vorbis_info_buffer * ) opb -> buf ) ; vorbis_buffer_free ( info -> stagemasks, ( vorbis_info_buffer * ) opb -> buf ) ; return 0 ; }",0
1285,"<S2SV_ModStart> if (! js_doregexec ( J, <S2SV_ModEnd> re -> prog",1
1286,<S2SV_ModStart> ) break ; <S2SV_ModEnd> tp -> copied_seq <S2SV_ModStart> = seq ; } tp -> copied_seq = seq ;,1
1287,"<S2SV_ModStart> ; krb5_key_data * key_data ; if ( n_key_data <= 0 ) return NULL ; key_data = k5calloc ( n_key_data, sizeof ( * key_data ), & err ) ; if ( key_data == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 2 ) { key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_contents [ 1 ] = NULL ; } }",0
1288,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
1289,<S2SV_ModStart> ] ) ; if ( nByte > INT_MAX ) nByte = INT_MAX ;,0
1290,<S2SV_ModStart> filp ) { if (! S_ISREG ( inode -> i_mode ) ) return - EBADF ;,0
1291,"<S2SV_ModStart> expr_ty iter, string type_comment, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. type_comment = type_comment",0
1292,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> mi_sort_index ( MI_CHECK <S2SV_ModStart>, name ) ; if (! ( param -> testflag & T_SILENT ) ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ;",0
1293,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ),1
1294,"<S2SV_ModStart> ) ) { if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_RSVD_MASK ) ) { kvm_queue_exception ( vcpu, KVM_INTERNAL_ERROR_SIMUL_EX ) ; return 1 ; } else if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_RSVD_MASK ) ) { kvm_queue_exception ( vcpu, KVM_INTERNAL_ERROR_SIMUL_EX ) ; return 1 ; } else if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_RSVD_MASK ) ) { kvm_queue_exception ( vcpu, KVM_INTERNAL_ERROR_SIMUL_EX ) ; return 1 ; }",0
1295,"<S2SV_ModStart> case NGHTTP2_ERR_NO_CONTENT : return ""No <S2SV_blank> content <S2SV_blank> for <S2SV_blank> this <S2SV_blank> stream"" ; case NGHTTP2_ERR_NO_CONTENT_FOUND : return ""No <S2SV_blank> content <S2SV_blank> for <S2SV_blank> this <S2SV_blank> stream"" ; case NGHTTP2_ERR_NO_CONTENT_FOUND : return ""No <S2SV_blank> content <S2SV_blank> for <S2SV_blank> this <S2SV_blank> stream"" ; case NGHTTP2_ERR_NO_CONTENT_FOUND : return ""No <S2SV_blank> content <S2SV_blank> for <S2SV_blank> this <S2SV_blank> stream"" ; case NGHTTP2_ERR_NO_CONTENT_COMMENTS : return ""No <S2SV_blank> content <S2SV_blank> for <S2SV_blank> this <S2SV_blank> stream"" ; case NGHTTP2_ERR_NO_CONTENT_COMMENTS : return ""No <S2SV_blank> content <S2SV_blank> for <S2SV_blank> this <S2SV_blank> stream"" ; case NGHTTP2_ERR_NO_CONTENT_COMMENT : return ""No <S2SV_blank> content <S2SV_blank> for <S2SV_blank> this <S2SV_blank> stream"" ; case NGHTTP2_ERR_NO_CONTENT_COMMENT : return ""No <S2SV_blank> content <S2SV_blank> comment <S2SV_blank> for <S2SV_blank> this <S2SV_blank> stream"" ; case NGHTTP2_ERR_NO_CONTENT_COMMENTS : return ""No <S2SV_blank> content <S2SV_blank> comment <S2SV_blank> for <S2SV_blank> this <S2SV_blank> stream"" ; case NGHTTP2",0
1296,"<S2SV_ModStart> UINT error ; if (! Stream_SafeSeek <S2SV_ModEnd> ( s,",0
1297,"<S2SV_ModStart> ; } } if ( pData -> socket == NULL ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; }",0
1298,<S2SV_ModStart> < 0 ) { ret = chg ; goto out_err ; } <S2SV_ModEnd> if ( hugepage_subpool_get_pages <S2SV_ModStart> chg ) ) { ret = <S2SV_ModEnd> - ENOSPC ; <S2SV_ModStart> - ENOSPC ; goto out_err ; } <S2SV_ModStart> chg ) ; goto out_err <S2SV_ModEnd> ; } if <S2SV_ModStart> return 0 ; out_err : resv_map_put ( vma ) ; return ret ;,1
1299,"<S2SV_ModStart> struct flowi6 fl6 ; struct ipv6_txoptions * opt <S2SV_ModStart> ) ; SCTP_INC_STATS ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> & fl6, opt <S2SV_ModEnd>, np ->",0
1300,"<S2SV_ModStart> = ECRYPTFS_SUPER_MAGIC ; s -> s_stack_depth = path. dentry -> d_sb -> s_stack_depth + 1 ; rc = - EINVAL ; if ( s -> s_stack_depth > FILESYSTEM_MAX_STACK_DEPTH ) { pr_err ( ""eCryptfs: <S2SV_blank> maximum <S2SV_blank> fs <S2SV_blank> stacking <S2SV_blank> depth <S2SV_blank> exceeded\\n"" ) ; goto out_free ; }",1
1301,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1302,"<S2SV_ModStart> 6 ) ) { MATLAB_KO : clone_info = DestroyImageInfo ( clone_info ) ; <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart> ""ImproperImageHeader"" ) ; }",0
1303,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> rdpNego * <S2SV_ModStart> UINT32 failureCode ; if (! s ) return NULL ; WLog_DBG ( TAG, ""RDP_NEG_FAILURE"" ) ; <S2SV_ModStart> = NEGO_STATE_FAIL ; return NULL ;",0
1304,"<S2SV_ModStart> ret, last_pwd, n_new_keys <S2SV_ModStart> keyblocks ) { n_new_keys = count_new_keys ( kdb -> n_key_data, kdb -> key_data ) ; <S2SV_ModStart> keyblocks ) { n_new_keys = count_new_keys ( kdb -> n_key_data, kdb -> key_data ) ; <S2SV_ModStart> keyblocks ) { n_new_keys = count_new_keys ( kdb -> key_data, kdb -> key_data ) ; } } else { <S2SV_ModStart> keyblocks ) { n_new_keys = count_new_keys ( kdb -> n_key_data, kdb -> key_data ) ; <S2SV_ModStart> keyblocks ) { n_new_keys = count_new_keys ( kdb -> n_key_data, kdb -> key_data ) ; } }",0
1305,"<S2SV_ModStart> len, result = RLC_ERR ; bn_t t ; RLC_TRY { bn_new ( t ) ; RLC_OK { bn_zero ( m ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = k_len - 3 - m_len ; for ( int i = 0 ; i < * p_len ; i ++ ) { rand_bytes ( & pad, 1 ) ; bn_add_dig ( m, m, pad ) ; } bn_lsh ( m, m, 8 ) ; } bn_rsh ( t, m, 8 * m_len ) ; <S2SV_ModEnd> * p_len = <S2SV_ModStart> ; if ( <S2SV_ModEnd> bn_is_zero ( t <S2SV_ModStart> ) ) { <S2SV_ModEnd> result = RLC_ERR <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> } do { <S2SV_ModStart> ] ; } while ( pad!= RSA_PUB && m_len > 0 && bn_is_zero ( t ) && m_len > 0 ) { * p_len -= ( m_len - 1 ) ; bn_mod_2b ( m, m, ( k_len - * p",0
1306,"<S2SV_ModStart> { YR_OBJECT * obj_ptr = ( YR_OBJECT * * ) yr_calloc ( 1, sizeof ( YR_OBJECT * ) ) ; if ( obj_ptr == NULL ) return ERROR_INSUFFICIENT_MEMORY ; <S2SV_ModStart> ++ ) { obj_ptr = ( YR_OBJECT * * ) yr_calloc ( 1, sizeof ( YR_OBJECT * ) ) ; if ( obj_ptr == NULL ) return ERROR_INSUFFICIENT_MEMORY ; } <S2SV_ModStart> ++ ) { obj_ptr = ( YR_OBJECT * * ) yr_calloc ( 1, sizeof ( YR_OBJECT * ) ) ; if ( obj_ptr == NULL ) return ERROR_INSUFFICIENT_MEMORY ; } <S2SV_ModStart> ++ ) { obj_ptr = ( YR_OBJECT * * ) yr_calloc ( 1, sizeof ( YR_OBJECT * ) ) ; if ( obj_ptr == NULL ) return ERROR_INSUFFICIENT_MEMORY ; } <S2SV_ModStart> ++ ) { obj_ptr = ( YR_OBJECT * * ) yr_calloc ( 1, sizeof ( YR_OBJECT * ) ) ; if ( obj",0
1307,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1308,<S2SV_ModStart> { rq = <S2SV_ModEnd> hctx -> tags <S2SV_ModStart> hctx -> tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; if (,1
1309,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
1310,<S2SV_ModStart> void fix_interp_filter ( VP9_COMMON * <S2SV_ModEnd> cm ) { <S2SV_ModStart> cm -> counts. <S2SV_ModEnd> switchable_interp [ j <S2SV_ModStart> ] += cm -> counts. <S2SV_ModEnd> switchable_interp [ j <S2SV_ModStart> ] ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1311,"<S2SV_ModStart> { token ++ ; } if ( operand >= MAX_OPERANDS ) { eprintf ( ""Too <S2SV_blank> many <S2SV_blank> operands\\n"" ) ; return false",1
1312,"<S2SV_ModStart> & cpi -> td. <S2SV_ModStart> -> act_zbin_adj = 0 <S2SV_ModEnd> ; vpx_setup_src_planes ( <S2SV_ModStart> cpi -> Source <S2SV_ModEnd>, 0, <S2SV_ModStart> 0 ) ; vpx_setup_pre_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vpx_setup_dst_planes ( xd, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vpx_setup_block_planes ( & x -> <S2SV_ModEnd> e_mbd, cm <S2SV_ModStart> subsampling_y ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> MAX_MB_PLANE ) ; memset <S2SV_ModEnd> ( xd ->",0
1313,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
1314,"<S2SV_ModStart> ; retval = htc_request_check_host <S2SV_ModEnd> ( hp ) <S2SV_ModStart> 0 ) { if ( retval == 1 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } else { WSP ( sp, SLT_Error, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" ) ; return ( retval ) ; } }",0
1315,"<S2SV_ModStart> EOFOp 0x07 # define MagickSizeType 0x08 <S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1316,<S2SV_ModStart> ctl_files_rwlock ) ; mutex_init ( & card -> user_ctl_lock ) ;,1
1317,"<S2SV_ModStart> ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; } ( * psig ) = s + <S2SV_ModEnd> padlen + 3 <S2SV_ModStart> + 3 ; <S2SV_ModEnd> return NULL ;",0
1318,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( tETH_HDR ) ),0
1319,<S2SV_ModStart> = 0 ; ps_dec -> u2_cur_slice_num = ps_cur_slice -> u2_cur_slice_num ; ps_dec -> <S2SV_ModStart> = 0 ; if ( ps_dec -> u2_cur_slice_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num,0
1320,<S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata -> rbuf. buf!= NULL ) <S2SV_ModStart> OPENSSL_free ( rdata -> rbuf. buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata -> rbuf. buf!= NULL ) <S2SV_ModStart> OPENSSL_free ( rdata -> rbuf. buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; },1
1321,"<S2SV_ModStart> struct flowi6 fl6 ; struct ipv6_txoptions * opt <S2SV_ModStart> ) ; SCTP_INC_STATS ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> & fl6, opt <S2SV_ModEnd>, np ->",0
1322,"<S2SV_ModStart> args -> buffer_count > I915_MAX_EXEC_BUFFERS - 1 ) { DRM_DEBUG ( ""execbuf2 <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - EINVAL ; } if ( args -> buffers_ptr == NULL || args -> buffer_count > I915_MAX_EXEC_BUFFERS - 1 ) { DRM_DEBUG ( ""execbuf2 <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - EINVAL ; }",0
1323,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> struct pci_dev * <S2SV_ModStart> pci_dev * pdev <S2SV_ModEnd> ; int cim_rev <S2SV_ModStart> return PTR_ERR ( karg <S2SV_ModEnd> ) ; }",0
1324,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
1325,"<S2SV_ModStart> char * path, const char * rootfs <S2SV_ModStart> mntdata, optional, rootfs",1
1326,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1327,"<S2SV_ModStart> ab ) { struct audit_buffer * buf ; <S2SV_ModStart> i, len <S2SV_ModEnd> ; const char <S2SV_ModStart> p ; buf = kmalloc ( MAX_EXECVE_AUDIT_LEN + 1, GFP_KERNEL ) ; if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } <S2SV_ModStart> ) ; buf = kmalloc ( MAX_EXECVE_AUDIT_LEN + 1, GFP_KERNEL ) ; if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } for ( i = 0 <S2SV_ModEnd> ; i < <S2SV_ModStart> i ++ ) { len = audit_log_single_execve_arg ( context, ab, i, & len_sent, p, buf <S2SV_ModEnd> ) ; if",0
1328,"<S2SV_ModStart> | O_NOCTTY, ( mode == 0 || mode == MODE_INVALID )? 0644 : mode <S2SV_ModEnd> ) ; if",1
1329,"<S2SV_ModStart> err_info ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> line [ NETSCREEN_LINE_LENGTH <S2SV_ModEnd> ] ; if <S2SV_ModStart> FALSE ; } return parse_netscreen_packet ( wth -> random_fh, phdr, buf <S2SV_ModEnd>, line, <S2SV_ModStart>, line, <S2SV_ModEnd> err, err_info <S2SV_ModStart> err_info ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
1330,<S2SV_ModStart> * rq ) <S2SV_ModEnd> { int cpu <S2SV_ModStart> ; u64 irq_time ; if ( rq -> skip_clock_update ) return <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1331,"<S2SV_ModStart> j ] & 0xFF ; if ( j % 8 == 0 ) { ALOGE ( ""b/26366256"" ) ; return ( - 1 ) ; } <S2SV_ModStart> j ] & 0xFF ; if ( j % 8 == 0 ) { ALOGE ( ""b/26366256"" ) ; return ( - 1 ) ; } <S2SV_ModStart> j ] & 0xFF ; if ( j % 8 == 0 ) { ALOGE ( ""b/26366256"" ) ; return ( - 1 ) ; } <S2SV_ModStart> j ] & 0xFF ; if ( j % 8 == 0 ) { ALOGE ( ""b/26366256"" ) ; return ( - 1 ) ; } <S2SV_ModStart> j ] & 0xFF ; if ( j % 8 == 0 ) { ALOGE ( ""b/26366256"" ) ; return ( - 1 ) ; } <S2SV_ModStart> j ] & 0xFF ; if ( j % 8 == 0 ) { ALOGE ( ""b/26366256"" ) ; return ( - 1 ) ; }",0
1332,"<S2SV_ModStart> } else { raw_printf <S2SV_ModEnd> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModStart> } else { raw_printf <S2SV_ModEnd> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModStart> } else { raw_printf <S2SV_ModEnd> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"",",0
1333,<S2SV_ModStart> { struct blkif_response * <S2SV_ModStart> int notify ; <S2SV_ModEnd> spin_lock_irqsave ( & <S2SV_ModStart> case BLKIF_PROTOCOL_NATIVE : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> native. rsp_prod_pvt <S2SV_ModEnd> ) ; break <S2SV_ModStart> case BLKIF_PROTOCOL_X86_32 : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> x86_32. rsp_prod_pvt <S2SV_ModEnd> ) ; break <S2SV_ModStart> case BLKIF_PROTOCOL_X86_64 : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart>. rsp_prod_pvt ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> ) ; } resp -> id = id ; resp -> operation = op ; resp -> status = st ;,1
1334,<S2SV_ModStart> ( mask & KADM5_ATTRIBUTES_SINGLE ) ||! ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX <S2SV_ModEnd> ) ) return,0
1335,"<S2SV_ModStart> ; if ( exif_check_overflow ( buf + o, buf_size ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( <S2SV_ModStart> ; if ( exif_check_overflow ( buf + o, buf_size ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. tag = exif_get_short ( buf + o + 2, EXIF_BYTE_ORDER_INTEL ) ; n -> entries [ tcount ]. order = n -> order ; n -> entries [ tcount ]. entries = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnoteDataFuji"", sizeof ( MnoteFujiEntry ) * c ) ;",0
1336,"<S2SV_ModStart> { if ( fullname == NULL ) { L_ERROR ( ""fullname <S2SV_blank> not <S2SV_blank> defined"", procName, 1 ) ; return ERROR_INT ( ""fullname <S2SV_blank> not <S2SV_blank> defined"", procName, 1 ) ; } if ( <S2SV_ModStart> ( fullname == NULL ) { L_ERROR ( ""fullname <S2SV_blank> not <S2SV_blank> defined"", procName, 1 ) ; return ERROR_INT ( ""fullname <S2SV_blank> not <S2SV_blank> defined"", procName, 1 ) ; return ERROR_INT ( ""fullname <S2SV_blank> not <S2SV_blank> defined"", procName, 1 ) ; } if ( <S2SV_ModStart> ( fullname == NULL ) { L_ERROR ( ""fullname <S2SV_blank> not <S2SV_blank> defined"", procName, 1 ) ; return ERROR_INT ( ""fullname <S2SV_blank> not <S2SV_blank> defined"", procName, 1 ) ; return ERROR_INT ( ""fullname <S2SV_blank> not <S2SV_blank> defined"", procName, 1 ) ; return ERROR_INT ( ""fullname <S2SV_blank> not <S2SV_blank> defined"", procName, 1 ) ; }",0
1337,"<S2SV_ModStart> ext_dp -> icmp_length && ND_TTEST2 ( ext_dp -> icmp_ext_version_res, plen - ICMP_EXTD_MINLEN ) <S2SV_ModStart> - ICMP_EXTD_MINLEN ; if ( ND_TTEST2 ( ext_dp -> icmp_ext_version_res, hlen ) ) { <S2SV_ModStart> ) ) ; }",0
1338,<S2SV_ModStart> dentry * dir <S2SV_ModEnd> ; int dir_has_key <S2SV_ModStart> 0 ; } <S2SV_ModEnd> spin_lock ( & <S2SV_ModStart> dir_has_key = ( d_inode ( dir ) -> i_crypt_info <S2SV_ModEnd>!= NULL ),1
1339,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> unbind_ports ( void <S2SV_ModStart> 1 ) ; s_log ( LOG_DEBUG, ""Unbinding <S2SV_blank> ports"" ) ; for ( opt = service_options. next ; opt ; opt = opt -> next ) { unsigned i ; SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; s_log ( LOG_DEBUG, ""Service <S2SV_blank> [%s] <S2SV_blank> closed"", opt -> servname ) ; service_free ( opt ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1340,"<S2SV_ModStart> ARCHIVE_WARN ; } if ( argc >= MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } <S2SV_ModStart> p ) ; <S2SV_ModEnd> } if (",1
1341,"<S2SV_ModStart> parent ) ; if ( ( i -> width > i -> parent -> width ) || ( i -> height > i -> parent -> height ) ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> calculate <S2SV_blank> image <S2SV_blank> size\\n"" ) ; # endif return - 1 ; } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> calculate <S2SV_blank> image <S2SV_blank> size\\n"" ) ; # endif return - 1 ; } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> posY + i -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> calculate <S2SV_blank> image <S2SV_blank> size\\n"" )",0
1342,<S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ),1
1343,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
1344,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> break ; } if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",0
1345,<S2SV_ModStart> void ) { recovery_started = 1 ;,0
1346,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT5 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT5 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT7 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT8 ) ) ; enc624j600WriteReg ( interface, ENC624J600_EHT9 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT10 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT5 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_",0
1347,"<S2SV_ModStart> 0x0004 : { if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""UnexpectedEndOfFile"" ) ; <S2SV_ModStart> 0x0008 : { if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""UnexpectedEndOfFile"" ) ; <S2SV_ModStart> 0x0008 : { if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""UnexpectedEndOfFile"" ) ; break ; } <S2SV_ModStart> 0x0008 : { if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""UnexpectedEndOfFile"" ) ; <S2SV_ModStart> 0x0008 : { if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""UnexpectedEndOfFile"" ) ; <S2SV_ModStart> 0x0008 : { if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""UnexpectedEndOfFile"" ) ; break ; } <S2SV_ModStart> 0x0008 : { if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""UnexpectedEndOfFile"" ) ; break ; } <S2SV_ModStart>",0
1348,"<S2SV_ModStart> ; if ( l > ( unsigned ) <S2SV_ModEnd> sizeof ( rbuf <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> service <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", req -> socket, l ) ) { syslog ( LOG_INFO, ""(s=%d) <S2SV_blank> service <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", req -> socket, ( unsigned ) sizeof ( rbuf ) ) ; goto error ; } if ( l > ( unsigned ) sizeof ( rbuf ) ) { syslog ( LOG_INFO, ""(s=%d) <S2SV_blank> service <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", req -> socket, l ) ) { syslog ( LOG_INFO, ""(s=%d) <S2SV_blank> service <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", req -> socket, ( unsigned ) sizeof ( rbuf ) ) ; goto error ; }",0
1349,"<S2SV_ModStart> ) { WORD32 ai4_num_st_curr_before [ MAX_DPB_SIZE ], ai4_st_curr_after [ MAX_DPB_SIZE ], ai4_st_curr_before [ MAX_DPB_SIZE ], ai4_st_curr_before [ MAX_DPB_SIZE ] ; WORD32 ai4_num_st_curr_after [ MAX_DPB_SIZE ], ai4_num_st_curr_before, u4_num_st_curr_after [ MAX_DPB_SIZE ], ai4_st_curr_before [ MAX_DPB_SIZE ], u4_st_curr_after [ MAX_DPB_SIZE ], u4_num_st_curr_before [ MAX_DPB_SIZE ], u4_num_st_curr_after [ MAX_DPB_SIZE ], u4_num_st_curr_after [ MAX_DPB_SIZE ], u4_num_st_curr_before [ MAX_DPB_SIZE ], u4_num_st_curr_after [ MAX_DPB_SIZE ]",0
1350,<S2SV_ModStart> ) -> tp_value [ 0 ],1
1351,"<S2SV_ModStart> ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; ret = - EINVAL ;",1
1352,"<S2SV_ModStart> print_object ( cJSON * item <S2SV_ModEnd>, int fmt <S2SV_ModStart> 0 ; while ( child ) { ++ numentries ; child = child -> next ; } if (! ( entries = ( char * * ) cJSON_malloc ( sizeof ( char * ) * numentries ) ) ) return 0 ; if (! ( names = ( char * * ) cJSON_malloc ( sizeof ( char * ) * numentries ) ) ) return 0 ; memset ( names, 0, sizeof ( char * ) * numentries ) ; memset ( names, 0, sizeof ( char * ) * numentries ) ; child = child -> next ; } if (! ( out = ( char * ) cJSON_malloc ( len ) ) ) return 0 ; if (! ( entries = ( char * * ) cJSON_malloc ( sizeof ( char * ) * numentries ) ) ) return 0 ; memset ( entries, 0, sizeof ( char * ) * numentries ) ; memset ( names, 0, sizeof ( char * ) * numentries ) ; child = child -> next ; } if (! ( out = ( char * ) cJSON_malloc ( len ) ) ) ) return 0 ;",0
1353,"<S2SV_ModStart> struct ikev2_id id <S2SV_ModEnd> ; int id_len <S2SV_ModStart> * typedata ; ND_TCHECK_16BIT ( * ext ) ; UNALIGNED_MEMCPY ( & id, ext, sizeof ( id ) )",0
1354,"<S2SV_ModStart> int tagval, uint32 <S2SV_ModEnd> * length )",1
1355,"<S2SV_ModStart> ; other = rcu_dereference_protected ( sk -> sk_omem_alloc, sock_owned_by_user ( sk ) ) <S2SV_ModStart> if ( unix_peer ( sk <S2SV_ModEnd> )!= sk <S2SV_ModStart> if ( unix_recvq_full ( sk <S2SV_ModEnd> ) ) writable <S2SV_ModStart> = 0 ; <S2SV_ModEnd> sock_put ( other",0
1356,<S2SV_ModStart> 4 ] ; unsigned int <S2SV_ModEnd> value ; if <S2SV_ModStart> value = ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 <S2SV_ModEnd> ; value |= <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart>. unsigned_value = <S2SV_ModEnd> value & 0xffffffff <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ; return (,1
1357,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sendClean ( outputbuffer ) ;",1
1358,<S2SV_ModStart> ; if ( skb -> len + hdr_size > skb -> len ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } if (,0
1359,<S2SV_ModStart> void exit_io_context ( struct task_struct * task <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; task_lock ( task <S2SV_ModEnd> ) ; ioc <S2SV_ModStart> ; ioc = task <S2SV_ModEnd> -> io_context ; <S2SV_ModStart> -> io_context ; task <S2SV_ModEnd> -> io_context = <S2SV_ModStart> ; task_unlock ( task <S2SV_ModEnd> ) ; if,1
1360,"<S2SV_ModStart> ret = 0 ; if ( test_thread_flag ( child, TIF_XTENSA ) ) return - EPERM",0
1361,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return GSS_S_DEFECTIVE_TOKEN ; <S2SV_ModStart> length < token_wrapper_len <S2SV_ModEnd> + 14 ) <S2SV_ModStart> + 14 ) <S2SV_ModEnd> { * minor_status <S2SV_ModStart> } if ( <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1362,"<S2SV_ModStart> ) { int ret = pci_read_config_word <S2SV_ModEnd> ( dev, <S2SV_ModStart> offset, value ) ; * value &= PCI_COMMAND_GUEST ; <S2SV_ModEnd> return ret ;",0
1363,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; <S2SV_ModEnd> if ( frame <S2SV_ModStart> NULL ) { <S2SV_ModEnd> vp9_get_reference_enc ( ctx <S2SV_ModStart> YV12_BUFFER_CONFIG * fb <S2SV_ModEnd> ; yuvconfig2image (",0
1364,<S2SV_ModStart> ] ) ; free_uid ( fpl -> user ) ;,1
1365,<S2SV_ModStart> & plug ) ; kioctx_batch_put ( & batch ) ;,0
1366,"<S2SV_ModStart> -> dwc ; dwc3_gadget_del_and_unmap_request ( dep, req, status <S2SV_ModEnd> ) ; spin_unlock <S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
1367,"<S2SV_ModStart> : # line 113 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.y"" { int <S2SV_ModStart> } # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.y"" { int <S2SV_ModStart> } # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.y"" { int <S2SV_ModStart> } # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.y"" { int <S2SV_ModStart> } # line 126 <S2SV_ModEnd> ""grammar.y"" { int <S2SV_ModStart> } # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.y"" { int <S2SV_ModStart> } # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.y"" { int <S2SV_ModStart> } # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.y"" { int <S2SV_ModStart> } # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd> ""grammar.y"" { int <S2SV_ModStart> } # line 126 <S2SV_ModEnd> ""grammar.y"" { int <S2SV_ModStart> } # line 126 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 126 <S2SV_ModEnd>",0
1368,"<S2SV_ModStart> sas_revalidate_domain, [ <S2SV_ModEnd> DISCE_SUSPEND ] = <S2SV_ModStart> ] = sas_resume_devices <S2SV_ModEnd>, } ;",1
1369,"<S2SV_ModStart>, int rep_quick, my_bool verbose <S2SV_ModStart> ) ) { if ( verbose ) printf ( ""- <S2SV_blank> repairing <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; else printf ( ""- <S2SV_blank> repairing <S2SV_blank> (without <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; } <S2SV_ModStart> 1 ) { printf ( ""- <S2SV_blank> repairing <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""- <S2SV_blank> repairing <S2SV_blank> (without <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; } else { printf ( ""- <S2SV_blank> repairing <S2SV_blank> (without <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %d\\n"", llstr ( start_records, llbuff ) ) ;",0
1370,"<S2SV_ModStart> } ; # if uECC_VLI_NATIVE_LITTLE_ENDIAN uECC_word_t * p = ( uECC_word_t * ) signature ; # else uECC_word_t p [ uECC_MAX_WORDS * 2 ] ; # endif <S2SV_ModStart> curve ) ; <S2SV_ModEnd> if ( uECC_vli_isZero <S2SV_ModStart> carry ], num_n_bits + 1, curve ) ; if (! g_rng_function ) { uECC_generate_random_int ( tmp, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; } else if (! uECC_generate_random_int ( tmp, num_n_words ) ) { return 0 ; } uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_",0
1371,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
1372,<S2SV_ModStart> sk -> sk_family <S2SV_ModEnd> ; struct sk_buff <S2SV_ModStart> goto out ; if ( flags & MSG_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1373,"<S2SV_ModStart> -= lblk ; mutex_lock ( & inode -> i_mutex ) ; if (! ( ext4_test_inode_flag ( inode, EXT4_INODE_EXTENTS ) ) ) { ret = - EOPNOTSUPP ; goto out_mutex ; } if (! <S2SV_ModEnd> ( mode & <S2SV_ModStart> & FALLOC_FL_KEEP_SIZE ) && offset + len > i_size_read ( inode ) ) { new_size = offset + len ; ret = inode_newsize_ok ( inode, new_size ) ; if ( ret ) goto out_mutex ; } flags = EXT4_GET_BLOCKS_CREATE_UNWRIT_EXT ; if ( mode & FALLOC_FL_KEEP_SIZE ) <S2SV_ModStart> |= EXT4_GET_BLOCKS_KEEP_SIZE ; if ( partial_begin || partial_end ) { ret = ext4_alloc_file_blocks ( file, max_blocks, & new_size, & flags ) ; if ( ret ) goto out_mutex ; } if (! ( mode & FALLOC_FL_KEEP_SIZE ) && offset + len > i_size_read",0
1374,<S2SV_ModStart> ; } else { size_t new_free_total = pool -> free_total * 2 + sizeof ( nw_buf * ) ; if ( pool -> free_total < new_free_total ) { pool -> free_total = new_free_total ; free ( buf ) ; } else { free ( buf ) ; } },0
1375,<S2SV_ModStart> return map ; map =,1
1376,"<S2SV_ModStart> ( * cp <S2SV_ModEnd> ) { int <S2SV_ModStart> ] ) { <S2SV_ModEnd> int dcount = <S2SV_ModStart> = ""00112233445566778899aAbBcCdDeEfF"" ; const <S2SV_ModStart> * dp ; <S2SV_ModEnd> if ( * <S2SV_ModStart> == 'X' || * cp == 'X' ) for ( ++ cp ; * cp && ( dcount ++ < 2 ) ; cp ++ ) cval = ( cval * 16 ) + ( ( int ) ( dp - hex ) / 2 ) ; else if ( * cp == 'O' || * cp == 'O' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp - '0' ) ; } else if ( * cp == '\\\\' && cp [ 1 ] ) { switch ( * cp ) { case '\\\\' : cval = '\\\\' ; break ; case 'n' : cval = '\\n' ; break ; case 't' : cval = '\\t' ; break ; case 'r' : cval = '\\r' ; break ; default : cval = * cp ; }",0
1377,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1378,<S2SV_ModStart> ; if ( <S2SV_ModEnd> size_left < 4,1
1379,"<S2SV_ModStart> * lined ; const PIX * pixc, * pixm, * pixg, * pixd ; PROCNAME ( ""pixFewColorsOctcubeQuantMixed"" ) ; if (! pixc || pixGetDepth ( pixc )!= 8 ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 8 <S2SV_blank> bpp"", procName, NULL ) ; if ( ( pixc = pixFewColorsOctcubeQuant1 ( pixs, level ) ) == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; if ( <S2SV_ModStart> NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; if ( ( pixc = pixFewColorsOctcubeQuant1 ( pixs, level ) ) == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; if ( ( pixc = pixFewColorsOctcubeQuant1 ( pixs, level ) ) == NULL ) return ( PIX * ) ERROR_PTR ( ""too",0
1380,"<S2SV_ModStart> { int i ; int <S2SV_ModEnd> ubits = BN_num_bits <S2SV_ModStart> ( u ) ; int <S2SV_ModEnd> vbits = BN_num_bits <S2SV_ModStart> ( v ) ; int <S2SV_ModEnd> top = p <S2SV_ModStart> ubits < BN_BITS2 ) { if ( <S2SV_ModEnd> udp [ i <S2SV_ModStart> ] == 0 ) goto err ; int <S2SV_ModEnd> top = p <S2SV_ModStart> ubits < BN_BITS2 ) { if ( <S2SV_ModEnd> udp [ i <S2SV_ModStart> ] == 0 ) goto err ; } } for ( i = 0 ; i < ubits ; i ++ ) { if (! BN_is_zero ( u ) ) goto err ; if (! BN_rshift1 ( u, u ) ) goto err ; if ( BN_is_zero ( v ) ) goto err ; if ( BN_is_zero ( v ) ) goto err ; if ( BN_is_zero ( v ) ) { if ( BN_is_zero ( v ) ) goto err ; if ( BN_is_zero ( v ) ) goto err ; if ( BN_is_zero ( v ) ) goto err ; if ( BN_is_zero ( v ) ) goto err ; if ( B",0
1381,"<S2SV_ModStart> = 256 ; # if CONFIG_VP8_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { new_mv_mode_penalty = vp8_highbitdepth_mse16x16 ; v_fn_ptr. vf = vp8_highbd_mse16x16 ; } else { new_mv_mode_penalty = vp8_highbd_mse16x16 ; } v_fn_ptr. vf = vp8_mse16x16 ; xd -> pre. y_buffer = recon_buffer -> y_buffer + recon_yoffset ; tmp_err = diamond_search_sad ( x, b, d, & ref_mv_full, step_param, x -> sadperbit16, & num00, & v_fn_ptr, x -> mvcost, ref_mv ) ; if ( tmp_err < INT_MAX - new_mv_mode_penalty ) tmp_err += new_mv_mode_penalty <S2SV_ModEnd> ; if (",0
1382,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
1383,<S2SV_ModStart> = alloc ; size_t <S2SV_ModEnd> strindex = 0,1
1384,"<S2SV_ModStart>, nbits ; if ( msg -> readcount + ( bits >> 3 ) > msg -> len ) { return 0 ; } <S2SV_ModStart> oob ) { if ( msg -> bit + nbits > msg -> len << 3 ) { msg -> readcount = msg -> len << 3 ; return 0 ; } <S2SV_ModStart> & 7 ; if ( msg -> bit + nbits > msg -> len << 3 ) { msg -> readcount = msg -> len << 3 ; return 0 ; } <S2SV_ModStart> msg -> bit, msg -> len << 3 <S2SV_ModStart> ) ) ; if ( msg -> bit + nbits > msg -> len << 3 ) { msg -> readcount = msg -> len << 3 ; return 0 ; }",0
1385,<S2SV_ModStart> int idx ; unsigned int count ; <S2SV_ModStart> -> count ; count = kcontrol -> count ; <S2SV_ModStart> ; idx < <S2SV_ModEnd> count ; idx,1
1386,<S2SV_ModStart> ; out1 : cancel_work_sync ( & dev -> kevent ) ; del_timer_sync ( & dev -> delay ) ;,1
1387,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> size = overhead <S2SV_ModStart> = overhead ; if ( ( flags & MONGO_CONTINUE_ON_ERROR ) ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } overhead = 16 + 4 + strlen ( ns ) + 1 ; for ( i = 0 ; i < count ; i ++ ) { size += bson_size ( bsons [ i ] ) ; if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; },0
1388,"<S2SV_ModStart> gtk_dialog_set_default_timeout ( GTK_DIALOG ( dialog ), GTK_DEFAULT_TIMEOUT, 0 ) ; gtk_dialog_set_default_timeout ( GTK_DIALOG ( dialog ), GTK_DEFAULT_TIMEOUT, 0 ) ;",0
1389,<S2SV_ModStart> - 2 ; if ( plen > S_HELLO_LEN ) return 1 ;,0
1390,"<S2SV_ModStart> acl ) { struct iattr iattr ; retval = posix_acl_update_mode ( inode, & iattr. ia_mode, & acl ) ; if ( retval <S2SV_ModEnd> ) goto err_out <S2SV_ModStart> goto err_out ; if (! acl ) { value = NULL ; size = 0 ; } <S2SV_ModEnd> iattr. ia_valid <S2SV_ModStart> iattr ) ; <S2SV_ModEnd> } break ;",1
1391,"<S2SV_ModStart> header. class_size == 0 || bin -> header. class_size <S2SV_ModStart> header. strings_size == 0 ) { eprintf ( ""Invalid <S2SV_blank> strings <S2SV_blank> size\\n"" ) ; return false ; } if ( bin -> header. methods_size > UT64_MAX || <S2SV_ModStart> header. methods_size == 0 ) { eprintf ( ""Invalid <S2SV_blank> methods <S2SV_blank> size\\n"" ) ; return false ; } if ( bin -> header. imports_size == 0 ) { r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; return false ; } <S2SV_ModStart> header. strings_size == 0 ) { eprintf ( ""Invalid <S2SV_blank> strings <S2SV_blank> size\\n"" ) ; return false ; } if ( bin -> header. classes_size == 0 ) { eprintf ( ""Invalid <S2SV_blank> classes <S2SV_blank> size\\n"" ) ; return false ; }",0
1392,<S2SV_ModStart> : case NPPVformValue : case NPPVpluginNativeAccessibleAtkPlugId <S2SV_ModStart> : type = RPC_TYPE_STRING ; break ; case NPPVpluginNativeAccessibleAtkPlugId <S2SV_ModStart> case NPPVpluginKeepLibraryInMemory : case NPPVpluginNativeAccessibleAtkPlugId :,0
1393,<S2SV_ModStart> len ) { size_t alloc = ( length < 0 )? ( int ) strlen ( string ) : ( int ) <S2SV_ModEnd> strlen ( string <S2SV_ModStart> CURLcode res ; if (! alloc ) return NULL ; ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ; <S2SV_ModStart> ( olen ) <S2SV_ModEnd> return ns ;,0
1394,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FAIL ; return ;,0
1395,"<S2SV_ModStart>, target_bits_per_mb ; const double correction_factors = get_rate_correction_factors ( cpi ) <S2SV_ModEnd> ; target_bits_per_mb = <S2SV_ModStart> int bits_per_mb_at_this_q = vpx_rc_bits_per_mb <S2SV_ModEnd> ( cm -> <S2SV_ModStart> i, correction_factors, & bits_per_mb_at_this_q ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> active_worst_quality ) ;",0
1396,"<S2SV_ModStart> value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ ; tja1101WritePhyReg ( interface, TJA1101_CONFIG1, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_COMM_CTRL ) ; value |= TJA1101_COMM_CTRL_AUTO_OP ; tja1101WritePhyReg ( interface, TJA1101_COMM_CTRL, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_CONFIG1 ) ; value |= TJA1101_CONFIG1_AUTO_OP ; value = tja1101ReadPhyReg ( interface, TJA1101_COMM_CTRL ) ; value |= TJA1101_COMM_CTRL_AUTO_OP ; tja1101WritePhyReg ( interface, TJA1101_COMM_CTRL, value ) <S2SV_ModEnd> ; value =",0
1397,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1398,<S2SV_ModStart> < sizeof ( struct pgstate <S2SV_ModEnd> ) ) { <S2SV_ModStart> 1 ) ; } ND_TCHECK_32BITS ( & prep -> pp_n ) ;,0
1399,"<S2SV_ModStart>, NULL, <S2SV_ModEnd> data ) ;",1
1400,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
1401,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ) == COMMA || TYPE ( CHILD ( n, j ) ) == TYPE_COMMENT ) <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD",0
1402,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> TX_SIZE tx_size, PREDICTION_MODE <S2SV_ModEnd> mode, int <S2SV_ModStart> ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, left_col, 64 ) ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, above_data, 128 + 16 ) ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, above_row, 128 + 16 ) ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, right_col, 128 + 16 ) ; uint8_t * const_above_row = above_data + 16 ; const int bs = 4 << tx_size ; if ( plane == 0 ) { frame_width = xd -> cur_buf -> x_width ; frame_height = xd -> cur_buf -> y_height ; } else { frame_width = ( - xd -> mb_to_left_edge >> ( 3 + pd -> subsampling_x ) ) + x ; y0 = ( - xd -> mb_to_top_edge >> ( 3 + pd -> subsampling_y )",0
1403,"<S2SV_ModStart> ++ ; } if ( end - start > 100 ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> pattern <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", end - start ) ; goto error ; } <S2SV_ModStart> end ++ ; if ( end - start > 100 ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> pattern <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", end - start ) ; goto error ; }",0
1404,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static JsVarFloat <S2SV_ModEnd> ftoa_bounded_extra ( JsVarFloat <S2SV_ModStart> ( val ) ) strcpy ( str, ""NaN"" <S2SV_ModEnd>, len ) <S2SV_ModStart> ( val < 0 ) strcpy ( str, ""-Infinity"" <S2SV_ModEnd>, len ) <S2SV_ModStart> else strcpy ( str, ""Infinity"" <S2SV_ModEnd>, len )",0
1405,"<S2SV_ModStart> * jas_iccprof_createfrombuf ( jas_uchar <S2SV_ModEnd> * buf,",1
1406,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ;,1
1407,<S2SV_ModStart> BUG_ON (! memcg -> thresholds <S2SV_ModEnd> ) ; usage <S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1408,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct ion_handle * <S2SV_ModStart> ; handle = ion_handle_get_by_id_nolock ( client, id <S2SV_ModEnd> ) ; mutex_unlock <S2SV_ModStart> ; return handle <S2SV_ModEnd> ; } <S2SV_null>",1
1409,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 2 ) ; write_profile ( cm -> profile, wb ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit ( wb, cm -> bit_depth ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit ( wb, <S2SV_ModEnd> cm -> show_frame <S2SV_ModStart> ; vpx_wb_write_bit ( wb, <S2SV_ModEnd> cm -> error_resilient_mode <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; } } vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
1410,<S2SV_ModStart> : if ( bad_format_argument ( optarg ) ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> : if ( bad_format_argument ( optarg ) ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> : if ( bad_format_argument ( optarg ) ) { <S2SV_ModEnd> return ; },0
1411,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
1412,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1413,"<S2SV_ModStart> KEY_FRAME ) { memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ; vpx_memset ( pc -> fc. <S2SV_ModEnd> ref_lf_deltas, 0 <S2SV_ModStart> ; vpx_memset ( pc -> fc. <S2SV_ModEnd> mode_lf_deltas, 0 <S2SV_ModStart> ; vpx_memset ( pc -> fc. <S2SV_ModEnd> mode_lf_deltas, 0 <S2SV_ModStart> mode_lf_deltas ) ) ; pc -> refresh_golden_frame = 1 ; pc -> copy_buffer_to_gf = 0 ; pc -> copy_buffer_to_arf = 0 ; pc -> ref_buffer_to_gf = 0 ; pc -> copy_buffer_to_arf = 0 ; pc -> ref_frame_sign_bias [ GOLDEN_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ ALTREF_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ PREDICTION_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ PREDICTION_FRAME ] = 0 ; pc -> ref_frame",0
1414,"<S2SV_ModStart> error_t error ; uint16_t n ; uint32_t status <S2SV_ModEnd> ; Enc624j600Context * <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA, sizeof ( uint8_t ) ) ; n = letoh16 ( n ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & n, sizeof ( uint16_t ) ) ; n = letoh16 ( n ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & status, sizeof ( uint32_t ) ) ; status = letoh32 ( status ) ; if ( ( status & RSV_RECEIVED_OK )!= 0 ) { n = MIN ( n, ETH_MAX_FRAME_SIZE ) ; enc",0
1415,<S2SV_ModStart> ] == 0x01 && i < gemsafe_cert_max,1
1416,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
1417,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv, VALUE klass ) { VALUE content ; VALUE parse_options ; xmlSchemaPtr schema ; xmlSchemaParserCtxtPtr ctx ; if ( argc == 0 ) return Qnil ; parse_options = rb_const_get ( rb_const_get ( mNokogiriXml, ""ParseOptions"" ), rb_const_get ( mNokogiriXml, ""ParseOptions"" ), rb_const_get ( mNokogiriXml, ""ParseOptions"" ), rb_const_get ( mNokogiriXml, ""ParseOptions"" ), rb_const_get ( mNokogiriXml, ""ParseOptions"" ), rb_const_get ( mNokogiriXml, ""ParseOptions"" ), rb_const_get ( mNokogiriXml, ""ParseOptions"" ), rb_const_get ( mNokogiriXml, ""ParseOptions"" ), rb_const_get ( mNokogiriXml, ""ParseOptions"" ), rb_const_get ( mNokogiriXml, ""ParseOptions"" ), rb_const_get",0
1418,"<S2SV_ModStart> vma ) { <S2SV_ModEnd> struct au1200fb_device * <S2SV_ModStart> info -> par <S2SV_ModEnd> ; vma -> <S2SV_ModStart> _CACHE_MASK ; return vm_iomap_memory <S2SV_ModEnd> ( vma, <S2SV_ModStart> ( vma, fbdev -> fb_phys, fbdev -> fb_len <S2SV_ModEnd> ) ; }",1
1419,"<S2SV_ModStart> ; if ( strlen ( errstr ) < 2 ) { s_log ( LOG_ERR, ""Configuration <S2SV_blank> file <S2SV_blank> contains <S2SV_blank> no <S2SV_blank> options"" ) ; print_syntax ( ) ; return 1 ; } if ( <S2SV_ModStart> 0x7f ) { if ( strlen ( errstr ) < 2 ) { s_log ( LOG_ERR, ""Configuration <S2SV_blank> file <S2SV_blank> contains <S2SV_blank> no <S2SV_blank> options"" ) ; print_syntax ( ) ; return 1 ; } s_log ( LOG_INFO, ""Configuration <S2SV_blank> options <S2SV_blank> file <S2SV_blank> contains <S2SV_blank> no <S2SV_blank> options"" ) ; print_syntax ( ) ; return 1 ; } s_log ( LOG_INFO, ""Configuration <S2SV_blank> file <S2SV_blank> contains <S2SV_blank> an <S2SV_blank> invalid <S2SV_blank> option"" ) ; return 1 ; } if ( strlen ( errstr ) < 2 ) { s_log ( LOG_ERR, ""Configuration <S2SV_blank> file <S2SV_blank> contains <S2SV_blank> no <S2SV_blank> options"" ) ; print_syntax ( ) ; return 1 ; } s_log ( LOG_INFO, ""Configuration <S2SV_blank> options <S2SV_blank> file <S2SV_blank> contains <S2SV_blank> no <S2SV_blank> options"" ) ; if ( type == CONF_RELOAD ) print_syntax ( ) ; return 1 ; }",0
1420,<S2SV_ModStart> 2 ] ; out [ 3 ] = 0 ; <S2SV_ModStart> 2 ] ; out [ 4 ] = 0 ; <S2SV_ModStart> 2 ] ; out [ 5 ] = 0 ; <S2SV_ModStart> 2 ] ; out [ 3 ] = 0 ;,0
1421,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
1422,<S2SV_ModStart> ; if ( <S2SV_ModEnd> arg >= cdi,1
1423,"<S2SV_ModStart> ; err = 0 ; if ( type == PACKET_FANOUT_HASH ) goto out ; err = - EINVAL ; if ( atomic_long_get ( & rollover -> num, 0 ) == atomic_long_get ( & rollover -> num_huge, 0 ) ) { err = - ENOMEM ; goto out ; } atomic_long_set ( & rollover -> num_failed, 0 ) ; po -> rollover = rollover ; } if ( type == PACKET_FANOUT_LB : case PACKET_FANOUT_CPU : case PACKET_FANOUT_RND : case PACKET_FANOUT_QM : case PACKET_FANOUT_CBPF : case PACKET_FANOUT_EBPF : if ( type == PACKET_FANOUT_CPU : case PACKET_FANOUT_RND : case PACKET_FANOUT_QM : if ( flags & PACKET_FANOUT_FLAG_EBPF ) { err = - EINVAL ; goto out ; }",0
1424,<S2SV_ModStart> ( handle -> event -> <S2SV_ModEnd> pending_wakeup = 1 <S2SV_ModStart> pending ) ; <S2SV_ModEnd> perf_event_wakeup ( handle,0
1425,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> wchar_t <S2SV_ModEnd> * utf8s_to_utf16s ( <S2SV_ModStart> len > 0 && size > 0 <S2SV_ModStart> - EINVAL ; op = pwcs ; <S2SV_ModStart> PLANE_SIZE ) { if ( len < size ) return - EINVAL ; <S2SV_ModStart> -= PLANE_SIZE ; <S2SV_ModEnd> * op ++ <S2SV_ModStart> ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ <S2SV_ModEnd> = ( wchar_t <S2SV_ModStart> ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; <S2SV_ModStart> } else { * op ++ = ( wchar_t ) u ; } s += size ; len -- ; } } return op - pwcs <S2SV_ModEnd> ; } <S2SV_null>,0
1426,"<S2SV_ModStart>, i ; if (! ( s -> state & PNG_IHDR ) ) { av_log ( avctx, AV_LOG_ERROR, ""trns <S2SV_blank> before <S2SV_blank> IHDR\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( s -> state & PNG_IDAT ) { av_log ( avctx, AV_LOG_ERROR, ""trns <S2SV_blank> after <S2SV_blank> IDAT\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart>!= 6 ) || s -> bit_depth == 1",1
1427,"<S2SV_ModStart> EPROTONOSUPPORT ) { <S2SV_ModEnd> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure""",0
1428,<S2SV_ModStart> } dt -> proto = IP_GET_IPPROTO ( p ) ; dt ->,1
1429,"<S2SV_ModStart> ( interface, KSZ8851_RXFHSR ) ; if ( ( status & KSZ8851_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ( KSZ8851_RXFHSR_RXMR | KSZ8851_RXFTL | KSZ8851_RXRF | KSZ8851_RXCE <S2SV_ModEnd> ) ) == <S2SV_ModStart> ( interface, KSZ8851_RXFDPR <S2SV_ModEnd>, RXFDPR_RXFPAI ) <S2SV_ModStart> ( interface, KSZ8851_RXQCR, RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851ReadFifo <S2SV_ModStart> n ) ; ksz8851ClearBit ( interface, KSZ8851_RXQCR, RXQCR_RRXEF <S2SV_ModEnd> ) ; nicProcessPacket",0
1430,"<S2SV_ModStart> const node * n0, asdl_seq * decorator_seq, bool <S2SV_ModEnd> is_async ) { <S2SV_ModStart> is_async ) { const node * const n = is_async? CHILD ( n0, 1 ) : n0 ; <S2SV_ModStart>, LINENO ( n0 ), n0 <S2SV_ModEnd> -> n_col_offset, <S2SV_ModStart>, LINENO ( n0 ), n0 <S2SV_ModEnd> -> n_col_offset, <S2SV_ModStart>, type_comment, LINENO ( n0 ), n0 <S2SV_ModEnd> -> n_col_offset,",0
1431,<S2SV_ModStart> int i ; if ( mm_pgd_none_or_clear_bad ( mm -> pgd ) ) return ; <S2SV_ModStart> out : if ( pmd_none_or_clear_bad ( pmd ) ) return ;,0
1432,"<S2SV_ModStart> ( AUDIT_APPARMOR_DENIED, __aa_current_profile ( ), GFP_KERNEL, & sa, NULL <S2SV_ModEnd> ) ; }",1
1433,"<S2SV_ModStart> uint_fast8_t tmp ; siz -> comps = 0 ; <S2SV_ModStart> ) ) { goto error ; } if (! siz -> width ||! siz -> height ) { jas_eprintf ( ""tile <S2SV_blank> is <S2SV_blank> missing\\n"" ) ; goto error ; } if (! siz -> tilewidth ||! siz -> tileheight ) { jas_eprintf ( ""tile <S2SV_blank> is <S2SV_blank> missing\\n"" ) ; goto error ; } if (! siz -> numcomps || siz -> numcomps > 16384 ) { jas_eprintf ( ""number <S2SV_blank> of <S2SV_blank> components <S2SV_blank> (%d) <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"", siz -> numcomps ) ; goto error ; } if ( siz -> xoff >= siz -> width ) { jas_eprintf ( ""xoff <S2SV_blank> is <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; goto error ; } if ( siz -> yoff >= siz -> height ) { jas_eprintf ( ""yoff <S2SV_blank> is <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"", siz -> tilexoff ) ; jas_eprintf ( ""y",0
1434,"<S2SV_ModStart> } if ( message_left < 0 ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> message <S2SV_blank> too <S2SV_blank> short!"" ) ; return - 1 ; } if ( message_left < 0 ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> message <S2SV_blank> too <S2SV_blank> short!"" ) ; return - 1 ; }",0
1435,"<S2SV_ModStart> += 4 ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, ""xmi"" ) ; return NULL ; } <S2SV_ModStart> += 4 ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, ""xmi"" ) ; return NULL ; } <S2SV_ModStart> += 4 ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, ""xmi"" ) ; return NULL ; } <S2SV_ModStart> += 4 ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, ""xmi"" ) ; return NULL ; } <S2SV_ModStart> += 4 ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, ""xmi"" ) ; return NULL ; } <S2SV_ModStart> += 4",0
1436,"<S2SV_ModStart> size_t total_len ; struct iov_iter iter ; <S2SV_ModStart> ) return 0 ; iov_iter_init ( & iter, iov, nr_segs, total_len, 0 ) <S2SV_ModStart> -> ops ; <S2SV_ModEnd> size_t chars = <S2SV_ModStart> buf -> len ; size_t written <S2SV_ModStart> ; int error <S2SV_ModEnd> ; if ( <S2SV_ModStart> break ; } written = copy_page_to_iter ( buf -> page, buf -> offset, chars, & iter ) ; if ( unlikely ( written < chars ) ) { if (! ret ) ret = - EFAULT <S2SV_ModEnd> ; break ;",1
1437,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits <S2SV_ModStart> ) ; } \\\n} <S2SV_ModEnd> IndexPacket index ; <S2SV_ModStart> ++ ) { next_pixel = MagickFalse ; displacement = 1 ; <S2SV_ModStart> -= MaxHashTable ; if ( k < 0 ) continue <S2SV_ModEnd> ; if (,1
1438,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1439,"<S2SV_ModStart> { p_fm_config_conx_hdlt hdl = NULL <S2SV_ModStart> ) ; goto cleanup <S2SV_ModEnd> ; } if <S2SV_ModStart> 0 ) { if ( hdl == NULL ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> initialize <S2SV_blank> the <S2SV_blank> client <S2SV_blank> handle: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res ) ; goto cleanup <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto cleanup <S2SV_ModEnd> ; } for <S2SV_ModStart> 0 ) { if ( hdl == NULL ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str ( res ) ) ; goto cleanup <S2SV_ModEnd> ; } } <S2SV_ModStart> hdl ) ; cleanup : if ( hdl == NULL ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str ( res ) ) ; goto cleanup <S2SV_ModEnd> ; } } <S2SV_ModStart> hdl ) ; cleanup : if ( hdl == NULL ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str ( res )",0
1440,"<S2SV_ModStart> size_t max_mem ; size_t max_samples ; char optstr [ 20 ] ; <S2SV_ModStart> 0 ] ; max_samples = 64 * JAS_MEBI ; <S2SV_ModStart> break ; case OPT_MAXSAMPLES : max_samples = strtoull ( jas_optarg, 0, 10 ) ; break ; case <S2SV_ModStart> ( image = jas_image_fopen ( fmtid, & optstr, ""rb"" ) ) ) { jas_eprintf ( ""cannot <S2SV_blank> open <S2SV_blank> standard <S2SV_blank> input <S2SV_blank> file <S2SV_blank> %s\\n"", fmtname ) ; exit ( EXIT_FAILURE ) ; } <S2SV_ModStart>! ( image = jas_image_fopen ( fmtid, & optstr, ""rb"" ) ) ) { jas_eprintf ( ""cannot <S2SV_blank> open <S2SV_blank> image <S2SV_blank> file <S2SV_blank> %s\\n"", fmtname <S2SV_ModEnd> ) ; } <S2SV_ModStart>! ( image = jas_image_fopen ( image, ""rb"" ) ) ) { jas_eprintf ( ""cannot <S2SV_blank> open <S2SV_blank> standard <S2SV_blank> input <S2SV_blank> file <S2SV_blank> %s\\n"", fmtname <S2SV_ModEnd> ) ; } <S2SV_ModStart>! ( image = jas_image_fdopen ( 0, ""rb",0
1441,"<S2SV_ModStart> ""Unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> stack <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; } if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; }",0
1442,"<S2SV_ModStart> || cherokee_buffer_is_empty ( <S2SV_ModEnd> conn -> validator <S2SV_ModStart> user ) ) { ret_free ( message ) ; return ret_error ; } size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) { LOG_ERROR ( CHEROKEE_ERROR_VALIDATOR_LDAP_SEARCH, props -> filter. buf? props -> filter. buf : """" ) ; return ret_not_found ; } if ( ret!= ret_ok ) { LOG_ERROR ( CHEROKEE_ERROR_VALIDATOR_LDAP_SEARCH, props -> filter. buf? props -> filter. buf : """" ) ; ret = validate_dn ( props, dn, conn -> validator -> passwd. buf, conn -> validator -> user. len ) ; if ( ret!= ret_not_found ) { ret_free ( message ) ; return ret_not_found ; }",0
1443,"<S2SV_ModStart> 0 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD if ( ( RAW ( row, col ) = pred [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; # else",0
1444,<S2SV_ModStart> len < needed || len > param -> data_size,0
1445,"<S2SV_ModStart> ""MemoryAllocationFailed"" ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;",0
1446,"<S2SV_ModStart> vcpu_info ; u32 <S2SV_ModEnd> idx, ret <S2SV_ModStart> irq_srcu ) ; if ( unlikely ( guest_irq >= irq_rt -> nr_rt_entries ) ) return - EINVAL <S2SV_ModStart> nr_rt_entries ) ; hlist_for_each_entry ( e, & irq_rt -> map [ guest_irq ], link ) { if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; kvm_set_msi_irq ( kvm, e, & irq ) ; if (! kvm_intr_is_single_vcpu ( kvm, & irq, & vcpu ) ) { ret = irq_set_vcpu_affinity ( host_irq, NULL ) ; if ( ret < 0 ) { printk ( KERN_INFO ""failed <S2SV_blank> to <S2SV_blank> back <S2SV_blank> to <S2SV_blank> remapped <S2SV_blank> mode, <S2SV_blank> irq: <S2SV_blank> %u\\n"", host_irq ) ; goto out ; } }",0
1447,<S2SV_ModStart> ( bfqq ) { hrtimer_try_to_cancel <S2SV_ModEnd> ( timer ),0
1448,<S2SV_ModStart> else { return false <S2SV_ModEnd> ; } case,1
1449,"<S2SV_ModStart> sock, sk ) ; memset ( sa, 0, sizeof ( * sa )",1
1450,<S2SV_ModStart> (! handle ||! SecIsValidHandle ( handle ),1
1451,"<S2SV_ModStart> ; length += <S2SV_ModEnd> PRIMARY_DRAWING_ORDER_FIELD_BYTES [ orderInfo <S2SV_ModStart> orderInfo -> orderType ] ; length += update_prepare_bounds ( context, orderInfo )",0
1452,<S2SV_ModStart> if (! d_inode ( old ) ||! d_inode ( new ) <S2SV_ModEnd> ) goto out <S2SV_ModStart> if (! d_inode ( new ) <S2SV_ModEnd> ) goto out <S2SV_ModStart> if (! cleanup_whiteout && new_dentry_lower ( old ) -> d_inode == new_dentry_lower ( new ) -> d_inode <S2SV_ModEnd> ) goto out <S2SV_ModStart> if (! cleanup_whiteout && new_dentry_lower ( new ) -> d_inode == old_dentry_lower ( old ) -> d_inode <S2SV_ModStart> if (! cleanup_whiteout &&! d_inode ( new ) <S2SV_ModEnd> ) goto out <S2SV_ModStart> if (! cleanup_whiteout && new_dentry_lower ( new ) -> d_inode == new_dentry_lower ( old ) -> d_inode <S2SV_ModEnd> ) goto out <S2SV_ModStart> if (! cleanup_whiteout && new_dentry_lower ( new ) -> d_inode == new_upperdir <S2SV_ModEnd> ) goto out,0
1453,"<S2SV_ModStart> OP_INFINITE_REPEAT ; } if ( num_mem > INT_MAX / sizeof ( mem ) ) { fprintf ( stderr, ""warning: <S2SV_blank> num_mem <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", num_mem, ( int ) ( INT_MAX / sizeof ( mem ) ) ) ; num_mem = INT_MAX ; } <S2SV_ModStart> += tlen ; if ( num_mem > INT_MAX / sizeof ( mem ) ) { fprintf ( stderr, ""warning: <S2SV_blank> num_mem <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", num_mem, ( int ) ( INT_MAX / sizeof ( mem ) ) ) ; if ( num_mem > INT_MAX / sizeof ( mem ) ) { fprintf ( stderr, ""warning: <S2SV_blank> num_mem <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", ( int ) ( INT_MAX / sizeof ( mem ) ) ) { fprintf ( stderr, ""warning: <S2SV_blank> num_mem <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", num_mem, ( int )",0
1454,"<S2SV_ModStart> int plane ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { for ( plane = 0 ; plane < MAX_MB_PLANE ; plane ++ ) vpx_foreach_transformed_block_in_plane_high ( xd, plane, visit, arg ) ; } # else vpx_foreach_transformed_block_in_plane ( xd, bsize, visit, arg ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { for ( plane = 0 ; plane < MAX_MB_PLANE ; plane ++ ) vpx_foreach_transformed_block_in_plane_high ( xd, plane, visit, arg ) ; } # else vpx_foreach_transformed_block_in_plane ( xd, bsize, visit, arg ) ; # endif",0
1455,<S2SV_ModStart> = - EINVAL ; msg -> msg_namelen = 0,0
1456,"<S2SV_ModStart> 1 ; } ret = safe_mount <S2SV_ModEnd> ( mntent,",0
1457,<S2SV_ModStart> = hash ; sr -> vhost_fdt_chain = NULL ;,0
1458,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; if ( dest_keyring ) return false ; <S2SV_ModStart> dest_keyring ) ; return true ; } switch ( cred -> jit_keyring ) { case KEY_REQKEY_DEFL_DEFAULT : case KEY_REQKEY_DEFL_REQUESTOR_KEYRING : if ( cred -> request_key_auth ) dest_keyring = key_get ( cred -> request_key_auth -> dest_keyring ) ; if (! dest_keyring ) return false ; up_read ( & authkey -> sem ) ; if ( dest_keyring ) return true ; break ; case KEY_REQKEY_DEFL_THREAD_KEYRING : dest_keyring = key_get ( cred -> thread_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_PROCESS_KEYRING : dest_keyring = key_get ( rcu_dereference ( cred -> process_session_keyring ) ) ; if ( dest_keyring ) break ; case KEY_,0
1459,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nonrd_pick_sb_modes ( VP9_COMP <S2SV_ModStart> & x -> e_mbd ; int mode = BLOCK_SIZE_8X8 ; <S2SV_ModStart> bsize ) ; if ( cpi -> oxcf. pass == 2 ) { set_mode_info ( & xd -> mi [ 0 ] -> mbmi, bsize, mode ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; set_mode_info ( & xd -> mi [ 0 ] -> mbmi, bsize, mode <S2SV_ModEnd> ) ; }",0
1460,<S2SV_ModStart> NETIF_F_HW_CSUM | NETIF_F_SG <S2SV_ModEnd> ; if ( <S2SV_ModStart> NETIF_F_HW_CSUM | NETIF_F_SG <S2SV_ModEnd> ; if (,1
1461,"<S2SV_ModStart> ; * err = safe_open ( filename, O_RDONLY | O_CLOEXEC | O_NOFOLLOW | O_CLOEXEC | O_NOCTTY <S2SV_ModEnd> ) ; if",0
1462,"<S2SV_ModStart> 0x0004 : { if ( pixel_info_length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> 0x0008 : { if ( pixel_info_length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> -> rows ; if ( pixel_info_length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> -> rows ; if ( pixel_info_length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> -> rows ; if ( pixel_info_length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> -> rows ; if ( pixel_info_length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> -> rows ; if ( pixel_info_length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""Insufficient",0
1463,"<S2SV_ModStart> ""nnnnn\\0"" ) ] ; unsigned long <S2SV_ModEnd> tmp ; if <S2SV_ModStart> ( copy_from_user ( buf <S2SV_ModEnd>, buffer, <S2SV_ModStart> count ) ) return - EFAULT <S2SV_ModEnd> ; tmp =",0
1464,<S2SV_ModStart> = malloc ( <S2SV_ModEnd> sizeof ( MappedRange,0
1465,<S2SV_ModStart> return __this_address ; if ( be16_to_cpu ( dip -> di_nlink ) > mp -> m_sb. sb_inodesize || be32_to_cpu ( dip -> di_rmtblocks ) > mp -> m_sb. sb_inodesize,0
1466,"<S2SV_ModStart> } if ( pixel -> lookup [ x ] >= BOT - cnt_x - step ) return - 1 ; if ( pixel -> freq [ c ] >= cnt_c + step && value >= cumfr + cnt_x ) { pixel -> lookup [ x ] = cnt_x + step ; pixel -> freq [ c ] = cnt_c + step ; totfr += cnt_x + step ; ret = s -> decode ( gb, rc, cumfr, cnt_c, totfr ) ; if ( ret < 0 ) return ret ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> freq [ c ] = cnt_c + step ; ret = s -> decode ( gb, rc, cumfr, cnt_c, totfr ) ; if ( ret < 0 ) return ret ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> freq [ c ] = cnt_c + step ; pixel -> total_freq = totfr ; return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
1467,"<S2SV_ModStart> if (! jas_safe_size_mul3 <S2SV_ModEnd> ( cmpt -> <S2SV_ModStart> -> width, JAS_CAST ( jas_long <S2SV_ModEnd>, cmpt -> <S2SV_ModStart> -> height, JAS_CAST ( jas_long <S2SV_ModEnd>, cmpt -> <S2SV_ModStart> -> prec, JAS_CAST ( jas_long <S2SV_ModEnd>, cmpt -> <S2SV_ModStart> -> data ), JAS_CAST ( jas_long <S2SV_ModEnd>, cmpt -> <S2SV_ModStart> -> width, JAS_CAST ( jas_long <S2SV_ModEnd>, cmpt -> <S2SV_ModStart> -> height, JAS_CAST ( jas_long <S2SV_ModEnd>, cmpt -> <S2SV_ModStart> -> height, JAS_CAST ( jas_long <S2SV_ModEnd>, cmpt -> <S2SV_ModStart> -> prec, JAS_CAST ( jas_long <S2SV_ModEnd>, cmpt -> <S2SV_ModStart> -> width, JAS_CAST ( jas_long <S2SV_ModEnd>, cmpt -> <S2SV_ModStart> -> data ), JAS_CAST ( jas_long <S2SV_ModEnd>, cmpt -> <S2SV_ModStart> -> height, JAS_CAST ( jas_long <S2SV_ModEnd>, cmpt -> <S2SV_ModStart> -> width, JAS_CAST ( jas_long <S2SV_ModEnd>, cmpt -> <S2SV_ModStart> -> width, JAS_CAST ( jas_long <S2SV_ModEnd>, cmpt ->",0
1468,<S2SV_ModStart> ; if ( flags & ( VP8_EFLAG_NO_UPD_GF | VP8_EFLAG_NO_UPD_ARF | VP8_EFLAG_FORCE_GF ) ) || ( ( flags & VP8_EFLAG_NO_REF_LAST ) && ( flags & VP8_EFLAG_NO_REF_GF ) && ( flags & VP8_EFLAG_NO_REF_ARF ) ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME,0
1469,"<S2SV_ModStart> ; if ( filepos > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( filepos > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( filepos > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( filepos > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( filepos > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( filepos > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( filepos > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ;",0
1470,<S2SV_ModStart>! head ) <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
1471,"<S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) { <S2SV_ModStart> tlen = len <S2SV_ModEnd> ; switch (",0
1472,<S2SV_ModStart> ; if ( res -> outputbuffer -> string [ sizeof ( buf ) - 1 ]!= '\\n' ) res -> outputbuffer -> string [ sizeof ( buf ) - 1 ] = '\\n' ; if ( res -> outputbuffer -> string [ sizeof ( buf ) - 1 ]!= '\\n' ) res -> outputbuffer -> string [ sizeof ( buf ) - 1 ] = '\\n' ; if ( res -> outputbuffer -> string [ sizeof ( buf ) - 1 ] = '\\n' ; if ( res -> outputbuffer -> string [ sizeof ( buf ) - 1 ]!= '\\n' ) res -> outputbuffer -> string [ sizeof ( buf ) - 1 ] = '\\n' ; if ( res -> outputbuffer -> string [ sizeof ( buf ) - 1 ]!= '\\n' ) res -> outputbuffer -> string [ sizeof ( buf ) - 1 ] = '\\n' ; if ( res -> outputbuffer -> string [ sizeof ( buf ) - 1 ]!= '\\n' ) res -> outputbuffer -> string [ sizeof ( buf ) - 1 ] = '\\n' ; res -> outputbuffer -> string [ sizeof ( buf ) - 1 ] =,0
1473,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
1474,"<S2SV_ModStart> 0 ] ; if ( bn_is_zero ( tokenAmount ) || bn_is_zero ( tokenMinAmount ) ) { rdp_protocol_error ( ""confirmZxLiquidTx"", ""%s"", arStr ) ; return false ; } <S2SV_ModStart> 0 ] ; if ( bn_is_zero ( tokenMinAmount ) ) { rdp_protocol_error ( ""confirmZxLiquidTx"", ""%s"", arStr ) ; return false ; } <S2SV_ModStart> 0 ] ; if ( bn_is_zero ( tokenMinAmount ) ) { rdp_protocol_error ( ""confirmZxLiquidTx"", ""%s"", arStr ) ; return false ; } <S2SV_ModStart> 0 ] ; if ( bn_is_zero ( tokenMinAmount ) ) { rdp_protocol_error ( ""confirmZxLiquidTx"", ""%s"", arStr ) ; return false ; }",0
1475,<S2SV_ModStart> int u ; if ( n < 0 || n >= 32 ) { return - 1 ; } <S2SV_ModEnd> v = 0,1
1476,"<S2SV_ModStart> iovec, compat, & iter <S2SV_ModStart> iter_op ) { ret = iter_op ( req, & iter ) ; if ( ret ) break ;",0
1477,"<S2SV_ModStart> } if ( ptr - c -> rcurr > 100 || ( strncmp ( ptr, ""get <S2SV_blank> "", 4 ) && strncmp <S2SV_ModEnd> ( ptr, <S2SV_ModStart> ptr, ""gets <S2SV_blank> "", 5 )",0
1478,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
1479,"<S2SV_ModStart> ; if ( len < USB_DT_HEADER_SIZE ) { dev_err ( ddev, ""config <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> excess <S2SV_blank> byte%s, <S2SV_blank> ignoring\\n"", cfgno, len, USB_DT_HEADER_SIZE ) ; return - EINVAL ; } if ( <S2SV_ModStart> USB_DT_HEADER_SIZE ) ) { dev_err ( ddev, ""config <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> excess <S2SV_blank> byte%s, <S2SV_blank> ignoring\\n"", cfgno, len, USB_DT_HEADER_SIZE ) ; return - EINVAL ; } <S2SV_ModStart> ) ) { dev_err ( ddev, ""config <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> excess <S2SV_blank> byte%s, <S2SV_blank> ignoring\\n"", cfgno, len, USB_DT_HEADER_SIZE ) ; return - EINVAL ; }",0
1480,<S2SV_ModStart> ; if ( card -> user_ctl_count >= MAX_USER_CONTROLS ) return - ENOMEM ; if ( info -> count > MAX_USER_CONTROLS,0
1481,"<S2SV_ModStart> client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; return 0 ; } if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) { exit_client ( client_p, client_p, client_p, ""Malformed <S2SV_blank> AUTHENTICATE""",1
1482,<S2SV_ModStart> OpMask ) ; <S2SV_ModEnd> if ( ctxt <S2SV_ModStart> -> _eip ; break ; case X86EMUL_MODE_UNDEFINED : case X86EMUL_MODE_PROT64 : case X86EMUL_MODE_PROT32 : case X86EMUL_MODE_PROT64 : <S2SV_ModStart> -> _eip ; break ; case X86EMUL_MODE_UNDEFINED : case X86EMUL_MODE_PROT64 : case X86EMUL_MODE_PROT16 : case X86EMUL_MODE_PROT32 : <S2SV_ModStart> -> _eip ; break ; case X86EMUL_MODE_UNDEFINED : case X86EMUL_MODE_PROT64 : case X86EMUL_MODE_PROT32 : case X86EMUL_MODE_PROT64 : <S2SV_ModStart> -> _eip ; break ; case X86EMUL_MODE_UNDEFINED : case X86EMUL_MODE_PROT64 : case X86EMUL_MODE_PROT32 : case X86EMUL_MODE_PROT64 :,0
1483,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0 ) ;",0
1484,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; random_ether_addr (,1
1485,"<S2SV_ModStart> 16 ) ; # if CONFIG_VP8_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) distortion = vp8_highbitdepth_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; # else distortion = vp8_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; rate = x -> mbmode_cost [ x -> frame_type ] [ mode ] ; } # endif",0
1486,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR0 <S2SV_ModEnd> ) ; enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR0 <S2SV_ModEnd> ) ; enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_MA",0
1487,"<S2SV_ModStart> * start ; va_start ( argptr, format ) ; <S2SV_ModStart> = strlen ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header ) ; maxlen = va_min ( maxlen, format ) <S2SV_ModEnd> ; va_end ( <S2SV_ModStart> = 0 ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> headindex <S2SV_ModEnd> = strlen ( <S2SV_ModStart> psf -> header ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1488,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
1489,<S2SV_ModStart> ||! prev_hash || <S2SV_ModEnd>! coinbase1 || <S2SV_ModStart>! ntime ) <S2SV_ModEnd> { if ( <S2SV_ModStart> job_id ) ) { if ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ; goto out ; } <S2SV_ModEnd> cg_wlock ( &,0
1490,<S2SV_ModStart> -> alg_priv ) { <S2SV_ModStart> iface -> destroy ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; ctx <S2SV_ModStart> alg_priv ) ; },0
1491,<S2SV_ModStart> case EXIT_REASON_VMON : case EXIT_REASON_INVEPT :,1
1492,"<S2SV_ModStart> { sf -> <S2SV_ModEnd> adaptive_rd_thresh = 1 <S2SV_ModStart> { sf -> <S2SV_ModEnd> use_square_partition_only =! <S2SV_ModStart> cm ) ; <S2SV_ModEnd> sf -> less_rectangular_check <S2SV_ModStart> ; sf -> tx_size_search_method = vp9_frame_is_boosted ( cpi )? USE_FULL_RD : USE_LARGESTALL ; if ( MIN ( cm -> width, cm -> height ) >= 720 ) sf -> disable_split_mask = DISABLE_ALL_INTER_SPLIT ; else sf -> disable_split_mask = DISABLE_COMPOUND_SPLIT ; if ( MIN ( cm -> width, cm -> height ) >= 720 ) sf -> disable_split_mask = DISABLE_ALL_SPLIT ; else sf -> disable_split_mask = DISABLE_ALL_INTER_SPLIT ; sf -> mode_skip_start = 10 ; sf -> adaptive_pred_interp_filter = 1 ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_H_",0
1493,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
1494,"<S2SV_ModStart> struct compat_timex ) ) return - EFAULT ; if ( copy_from_user ( & txc -> tx32, utp, sizeof ( txc -> tx32",0
1495,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ]. poll_count ),0
1496,"<S2SV_ModStart> ; int goodsize ; if ( inuse < 0 || inuse >= LUAI_MAXSTACK / 8 ) { luaL_error ( L, ""invalid <S2SV_blank> stack <S2SV_blank> in <S2SV_blank> luaD_shrinkstack"" ) ; return ; } <S2SV_ModEnd> goodsize = inuse <S2SV_ModStart> 8 ) + 2 * EXTRA_STACK ; if ( inuse >= ( LUAI_MAXSTACK - EXTRA_STACK ) ) { luaL_error ( L, ""invalid <S2SV_blank> stack <S2SV_blank> in <S2SV_blank> luaD_shrinkstack"" ) ; return ; }",0
1497,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1498,"<S2SV_ModStart>, * s <S2SV_ModEnd> = STR ( <S2SV_ModStart> 0 ) ) <S2SV_ModEnd> ; int quote <S2SV_ModStart> = """" ; PyOS_snprintf ( buf, sizeof ( buf ), ""(unicode <S2SV_blank> error) <S2SV_blank> %s"", _PyUnicode_AsString ( errstr ) ; Py_DECREF ( type ) ; Py_XDECREF ( tback ) ; str = PyArena_AddPyObject ( c -> c_arena, str ) ; return Str ( str, kind, LINENO ( n ), n -> n_col_offset, c -> c_arena ) ; if (! str ) { Py_DECREF ( type ) ; Py_DECREF ( value ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF ( tback ) <S2SV_ModEnd> ; return NULL",0
1499,"<S2SV_ModStart> * input_ptr ; SvcInternal_t * const si = get_svc_internal ( svc_ctx ) ; <S2SV_ModStart> ( ""encoding-mode"", option_name ) == 0 ) { res = set_option_encoding_mode ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""layers"", option_name ) == 0 ) { svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_factors ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers-keyframe"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option",0
1500,<S2SV_ModStart>! head ) <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
1501,<S2SV_ModStart> 0 ) { if ( len < 9 ) { <S2SV_ModStart> s ++ ; len -- ; } <S2SV_ModStart> * t && len > 0 &&,0
1502,<S2SV_ModStart> ; if ( entry == NULL ) return EINVAL ; if ( <S2SV_ModStart> KADM5_POLICY ) && entry -> policy == NULL <S2SV_ModEnd> ) return KADM5_BAD_MASK <S2SV_ModStart> ; if ( ( mask & KADM5_POLICY ) && ( mask & KADM5_POLICY_CLR ) ) return KADM5_BAD_MASK <S2SV_ModEnd> ; if (,1
1503,<S2SV_ModStart> frame -> data [ plane ] && frame -> linesize <S2SV_ModStart> [ plane ] && frame -> linesize [ plane ],1
1504,"<S2SV_ModStart> ) ; } fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. uv_mode ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; } for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. uv_ref_frame ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; } for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index",0
1505,<S2SV_ModStart> self ) { <S2SV_ModEnd> PyObject * new_memo,0
1506,,1
1507,<S2SV_ModStart> : case 0x16 : case 0x17 : case 0x18 : case 0x19 : case 0x0a : case 0x0b : case 0x0c : case 0x0f : case <S2SV_ModStart> : case 0x5a : case 0x5b : case 0x5c : case 0x5f : case 0x6a : case 0x6b : case 0x6e : case 0x6f : case 0x7a : case 0x7b : case 0x7c : case 0x7f : case 0x8a : case 0x8b : case 0x8f : case 0x9a : case 0x9f : case 0x10 : case 0x11 : case 0x12 : case 0x13 : case 0x14 : case 0x15 : case 0x16 : case 0x17 : case 0x18 : case 0x19 : case 0x18 : case 0x19 : case 0x18 : case 0x19 : case 0x1a : case 0x1b : case 0x1c : case 0x1f : case 0x8a : case 0x,0
1508,"<S2SV_ModStart> ) ) { if ( imp_dbh -> pmysql ) { <S2SV_ModStart> pmysql ), mysql_error_string ( imp_dbh -> pmysql ) ) ; do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; return FALSE ; } <S2SV_ModEnd> DBIc_ACTIVE_on ( imp_dbh",0
1509,<S2SV_ModStart> ( flags & ( SOCK_THREAD_FD_RD | SOCK_THREAD_FD_WR ) <S2SV_ModEnd> || ( ioctl <S2SV_ModStart> ( need_close || TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) == - EAGAIN <S2SV_ModEnd> ) ) pthread_mutex_unlock <S2SV_ModStart> ( need_close || TEMP_FAILURE_RETRY ( <S2SV_ModStart> size )!= - EAGAIN <S2SV_ModEnd> ) BTA_JvRfcommWrite ( <S2SV_ModStart> id ) ; TEMP_FAILURE_RETRY (,0
1510,"<S2SV_ModStart> ieee_802_11_phdr phdr ; if ( len_remain < sizeof ( struct ieee_802_11_phdr ) ) { return ; } <S2SV_ModStart> phdr ) ; if ( ampdu_len > 0 ) { mpdu_str = kmalloc ( sizeof ( struct ieee_802_11_phdr ), GFP_NOFS ) ; if ( mpdu_str == NULL ) { mpdu_str = kmalloc ( sizeof ( struct ieee_802_11_phdr ), GFP_NOFS ) ; if ( mpdu_str == NULL ) { mpdu_str = kmalloc ( sizeof ( struct ieee_802_11_phdr ) ; if ( mpdu_str == NULL ) { mpdu_str = kmalloc ( sizeof ( struct ieee_802_11_phdr ) ; } } else { mpdu_str = kmalloc ( sizeof ( struct ieee_802_11_phdr ), GFP_NOFS ) ; if ( mpdu_str == NULL ) { mpdu_str = kmalloc ( sizeof ( struct ieee_802_11_",0
1511,<S2SV_ModStart> ; sh = s_malloc0 <S2SV_ModEnd> ( hdrlen +,0
1512,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> BYTE a_val ; if (! context ) return FALSE <S2SV_ModStart> -> ChromaSubsamplingLevel ; if (! scanline ) return FALSE <S2SV_ModStart> ; } } return TRUE ;,0
1513,<S2SV_ModStart> while ( offset > 0 && offset <S2SV_ModStart> < end_offset ) { <S2SV_ModStart> hf_keybuffer ) ; },1
1514,"<S2SV_ModStart> - EINVAL ) ; if ( ++ top >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, str - str ) ; goto out_free ; } <S2SV_ModStart> - EINVAL ) ; if ( * ( ++ top )!= '!' ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, str - str ) ; goto out_free ; }",0
1515,<S2SV_ModStart> cpi ) { const VP9EncoderConfig <S2SV_ModEnd> * rc = <S2SV_ModStart> > INT_MAX )? INT_MAX : ( int ) <S2SV_ModEnd> ( cpi -> <S2SV_ModStart>. starting_buffer_level / 2 ) ; if ( rc -> frames_since_key > <S2SV_ModEnd> cpi -> output_framerate <S2SV_ModStart> cpi -> output_framerate <S2SV_ModEnd> ) { kf_boost <S2SV_ModStart> ; if ( rc -> frames_since_key > <S2SV_ModEnd> cpi -> output_framerate <S2SV_ModStart> 2 ) ) { kf_boost = ( int ) ( kf_boost * rc -> frames_since_key / <S2SV_ModEnd> cpi -> output_framerate <S2SV_ModStart> cpi -> output_framerate <S2SV_ModEnd> ) ; } <S2SV_ModStart> kf_boost ) * <S2SV_ModEnd> rc -> av_per_frame_bandwidth,0
1516,<S2SV_ModStart> X86_EFLAGS_RF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1517,"<S2SV_ModStart> * pegasus, u8 * buf <S2SV_ModEnd>, __u16 size <S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmemdup ( data, size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
1518,"<S2SV_ModStart> read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> * r ) { TX_MODE tx_mode ; if ( vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> == ALLOW_32X32 ) { <S2SV_ModStart> += vp9_read_bit ( r ) ; } else { tx_mode = vpx_read_literal <S2SV_ModEnd> ( r,",0
1519,<S2SV_ModStart> op + OSPF6HDR_LEN ) ; ND_TCHECK_32BITS ( & hellop -> hello_options,1
1520,<S2SV_ModStart> { if ( datalen!= 1 ) return - EINVAL ; if (,1
1521,"<S2SV_ModStart> rc ) { struct task_struct * <S2SV_ModEnd> task = kthread_run <S2SV_ModStart> ; if ( IS_ERR ( task ) ) { <S2SV_ModStart> uwbd. task = NULL ; <S2SV_ModEnd> printk ( KERN_ERR <S2SV_ModStart> ""UWB <S2SV_blank> won\'t <S2SV_blank> work\\n"" ) ; } else { rc -> uwbd. task = task ; <S2SV_ModEnd> rc -> uwbd <S2SV_ModStart> pid ; } }",1
1522,"<S2SV_ModStart> : # line 101 ""re_grammar.y"" { yr_free ( ( ( * yyvaluep ). class_vector ) ) ; } # line 1044 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 102 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1054 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 107 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1048 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 104 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1054 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 107 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1076 <S2SV_ModEnd> ""re_grammar.c"" break ;",0
1523,<S2SV_ModStart> : idx ; assert ( ptr >= gfx -> backendData && ptr < ( ( char * ) gfx -> backendData + graphicsGetMemoryRequired ( gfx ) ) ) ;,1
1524,"<S2SV_ModStart> -> cpi ; MACROBLOCK * const x = & cpi -> common. fc ; <S2SV_ModStart> 32 ] ; const MB_MODE_INFO * const mbmi = & xd -> mi [ 0 ] -> mbmi ; <S2SV_ModStart> -> plane_type ; vp9_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. fc. coef_probs [ tx_size ] [ type ] [ ref ] ; vpx_prob ( * const eob_branch ) [ COEFF_CONTEXTS ] = cpi -> common. fc -> eob_branch [ tx_size ] [ type ] [ ref ] ; unsigned int ( * const counts ) [ COEFF_CONTEXTS ] = cpi -> common. fc -> counts. <S2SV_ModEnd> eob_branch [ tx_size <S2SV_ModStart> tx_size ) ; const <S2SV_ModEnd> int aoff, <S2SV_ModStart> tx_size ) ; const uint8_t * const band = get_band_translate ( tx_size ) ; const int seg_eob = get_tx_eob ( & cpi -> common. seg, segment_id, tx_size ) ; <S2SV_ModStart> tx_size ) ;",0
1525,<S2SV_ModStart> pSelect -> pSrc ; if ( p -> selFlags & SF_View ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; },0
1526,<S2SV_ModStart> { if ( ( <S2SV_ModStart> shmflg & SHM_RND ) && addr >= shmlba,1
1527,"<S2SV_ModStart> ) ; serv = svc_create ( & nfs4_callback_program, NFS4_CALLBACK_BUFSIZE,",0
1528,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1529,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1530,<S2SV_ModStart> : case NPNVSupportsWindowless : case NPNVprivateModeBool : case NPNVsupportsAdvancedKeyHandling,1
1531,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
1532,"<S2SV_ModStart> s ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
1533,"<S2SV_ModStart> xIter = crm_first_attr <S2SV_ModEnd> ( xml ) <S2SV_ModStart> { if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( strcmp ( prop_name, XML_ATTR_ID <S2SV_ModEnd> ) == 0 <S2SV_ModStart> } else { char * path = xml_get_path ( xml ) ; crm_trace ( ""Cannot <S2SV_blank> add <S2SV_blank> new <S2SV_blank> node <S2SV_blank> at <S2SV_blank> %s"", crm_element_name ( xml ), path ) ; if ( xml!= xmlDocGetRootElement ( xml -> doc ) ) { xmlUnlinkNode ( xml ) ; xmlFreeNode ( xml ) ; free ( path ) ; return ; } }",0
1534,"<S2SV_ModStart> { if ( fullname == NULL ) { L_ERROR ( ""fullname <S2SV_blank> not <S2SV_blank> defined"", procName, 1 ) ; return ERROR_INT ( ""fullname <S2SV_blank> not <S2SV_blank> defined"", procName, 1 ) ; } if ( <S2SV_ModStart> ( fullname == NULL ) { L_ERROR ( ""fullname <S2SV_blank> not <S2SV_blank> defined"", procName, 1 ) ; return ERROR_INT ( ""fullname <S2SV_blank> not <S2SV_blank> defined"", procName, 1 ) ; return ERROR_INT ( ""fullname <S2SV_blank> not <S2SV_blank> defined"", procName, 1 ) ; } if ( <S2SV_ModStart> ( fullname == NULL ) { L_ERROR ( ""fullname <S2SV_blank> not <S2SV_blank> defined"", procName, 1 ) ; return ERROR_INT ( ""fullname <S2SV_blank> not <S2SV_blank> defined"", procName, 1 ) ; return ERROR_INT ( ""fullname <S2SV_blank> not <S2SV_blank> defined"", procName, 1 ) ; return ERROR_INT ( ""fullname <S2SV_blank> not <S2SV_blank> defined"", procName, 1 ) ; }",0
1535,<S2SV_ModStart> <S2SV_null> static const SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> return ( const SvcInternal_t <S2SV_ModEnd> * ) svc_ctx,1
1536,"<S2SV_ModStart> mq_flush_lock, flags ) ; fq -> flush_rq = flush_rq ;",0
1537,"<S2SV_ModStart> s ) { uint32 length ; struct stream packet = * s <S2SV_ModEnd> ; ber_parse_header ( <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> consume <S2SV_blank> domain <S2SV_blank> params <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",1
1538,"<S2SV_ModStart> 1 TSRMLS_CC ) ; fprintf ( stderr, ""params <S2SV_blank> = <S2SV_blank> "" ) ; zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; if ( hkey. num == 0 ) { zval tmp ; INIT_PZVAL_ARRAY ( & tmp, params ) ; fprintf ( stderr, ""params <S2SV_blank> = <S2SV_blank> "" ) ; zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else { zval tmp ; INIT_PZVAL_ARRAY ( & tmp, params ) ; fprintf ( stderr, ""params <S2SV_blank> = <S2SV_blank> "" ) ; zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } if ( hkey. type == HASH_KEY_IS_LONG &&! zend_hash_index_exists ( params, hkey. num ) ) { zval tmp ; Z_ADDREF_PP ( tmp ) ; MAKE_STD_ZVAL ( tmp ) ; array_init",0
1539,"<S2SV_ModStart> char buffer [ 79 <S2SV_ModEnd> ] ; int <S2SV_ModStart> = VPX_IMG_FMT_I420 ; if ( only_420 ) <S2SV_ModStart> -> vpx_bps = ( unsigned char ) <S2SV_ModEnd> _y4m -> chroma_fmt <S2SV_ModStart> _y4m -> chroma_fmt <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( only_420 ) { _y4m -> vpx_fmt = VPX_IMG_FMT_I420 ; } else { _y4m -> vpx_fmt = VPX_IMG_FMT_I420 ; } if ( <S2SV_ModStart> _y4m -> vpx_fmt == VPX_IMG_FMT_I420 && _y4m -> vpx_bps == 12 && _y4m -> vpx_fmt!= VPX_IMG_FMT_I420 && _y4m -> vpx_fmt!= VPX_IMG_FMT_I420 ) { fprintf ( stderr, ""Error <S2SV_blank> parsing <S2SV_blank> video <S2SV_blank> interlacing <S2SV_blank> format; <S2SV_blank> "" ""assuming <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" )",0
1540,"<S2SV_ModStart> obj * otmp ; if ( strlen ( buf ) >= sizeof ( zeroobj ) ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } otmp",0
1541,"<S2SV_ModStart> long long directory_table_end <S2SV_ModEnd>, table_start ; <S2SV_ModStart> 0 ) return FALSE ; if ( parse_exports_table ( & table_start ) == FALSE ) return FALSE ; if ( read_inode_table ( & sBlk. s. inode_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( & sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_fragment_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table",0
1542,"<S2SV_ModStart> * createenv ( const struct env * new, const struct rule * rule ) { struct envnode * node ; <S2SV_ModStart> root ) ; node = createnode ( '\\0', NULL ) ; if ( RB_INSERT ( envtree, & env -> root, node ) ) { freenode ( node ) ; } } else { env -> count = 0 ; }",0
1543,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ; <S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,0
1544,"<S2SV_ModStart> -> seg ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> { } } vpx_clear_segmentation ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vpx_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vpx_compute_qdelta_by_rate ( & cpi -> rc, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vpx_enable_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vpx_enable_segfeature ( seg, segment, SEG_LVL_ALT_Q )",0
1545,"<S2SV_ModStart> return 0 ; Definition_type = make_type ( ""Definition"", mod_type, Definition_fields, 1 ) ; if (! Definition_type ) return 0 ; <S2SV_ModStart> ( ""Module"", mod_type, Definition_fields, 1 ) ; if (! Module_type ) return 0 ; <S2SV_ModStart> ( ""Interactive"", mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; FunctionDef_type = make_type ( ""FunctionDef"", stmt_type, FunctionDef_fields, 5 ) ; if (! FunctionDef_type ) return 0 ; AsyncFunctionDef_type = make_type ( ""AsyncFunctionDef"", stmt_type, AsyncFunctionDef_fields, 5 ) ; if (! AsyncFunctionDef_type ) return 0 ; ClassDef_type = make_type ( ""ClassDef"",",0
1546,"<S2SV_ModStart> O_WRONLY | O_CREAT | O_TRUNC | S_IRUSR | S_IWUSR | S_IWGRP | S_IROTH <S2SV_ModEnd> ) ; if <S2SV_ModStart> } write ( logfile_fd <S2SV_ModEnd>, ""btsnoop\\0\\0\\0\\1\\0\\0\\x3\\xea"",",0
1547,<S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 4 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> ; break ; } while ( context -> pass > 0 && context -> pass < 4 && context -> curY >= p -> height ) { switch ( ++ context -> pass ) { case 2 : context -> curY = i -> posY + 4 ; break ; case 3 : context -> curY = i -> posY + 2 ; break ; case 4 : context -> curY = i -> posY + 1 ; break ; },1
1548,<S2SV_ModStart> ) ; } ++ x -> xmode_count [ m ] ;,0
1549,"<S2SV_ModStart> ) ; } smb_ofile_flush <S2SV_ModEnd> ( sr, <S2SV_ModStart> f_mutex ) ; smb_ofile_flush <S2SV_ModEnd> ( sr,",1
1550,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> wchar_t <S2SV_ModEnd> * utf8s_to_utf16s ( <S2SV_ModStart> len > 0 && size > 0 <S2SV_ModStart> - EINVAL ; op = pwcs ; <S2SV_ModStart> PLANE_SIZE ) { if ( len < size ) return - EINVAL ; <S2SV_ModStart> -= PLANE_SIZE ; <S2SV_ModEnd> * op ++ <S2SV_ModStart> ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ <S2SV_ModEnd> = ( wchar_t <S2SV_ModStart> ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; <S2SV_ModStart> } else { * op ++ = ( wchar_t ) u ; } s += size ; len -- ; } } return op - pwcs <S2SV_ModEnd> ; } <S2SV_null>,0
1551,"<S2SV_ModStart> ; if ( * cp == '\\0' || <S2SV_ModEnd> strchr ( cp <S2SV_ModStart> )!= NULL || <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> ( cp, ""."" ) == 0 || strcmp ( cp, <S2SV_ModStart> ) == 0 <S2SV_ModEnd> ) { run_err",1
1552,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart> * s, * t, * StartClean <S2SV_ModEnd>, * argbuf <S2SV_ModStart> t ++ ; outpos = outputbuffer ; <S2SV_ModStart> ( outpos, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"" <S2SV_ModEnd>, s, <S2SV_ModStart> ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"" <S2SV_ModEnd>, VERSION, <S2SV_ModStart>, TERMCHAR ) ; fprintf ( outfile, ""%s"", outputbuffer ) ; return ( 0 ) ; } s = t ; while ( * s == '0' && s [ 1 ] == ']' ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf ( outfile, ""%s"", outputbuffer ) ; return ( 0 ) ; } else { fprintf ( stderr, ""%s: <S2SV_blank> Illegal <S2SV_blank> request <S2SV_blank> in <S2SV_blank> identification <S2SV_blank> string <S2SV_blank> [0]: <S2SV_blank> %s\\n"", axohelp, name",0
1553,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : * ( size_t * ) val = ms -> elf_notes_max ; return 0 ;,1
1554,"<S2SV_ModStart> segs ) { <S2SV_ModEnd> u32 hash, <S2SV_ModStart>, id ; if ( unlikely ( siphash_key_is_zero ( & net -> ipv4. ip_id_key ) ) ) get_random_bytes ( & net -> ipv4. ip_id_key <S2SV_ModEnd>, sizeof ( <S2SV_ModStart>, sizeof ( net -> ipv4. ip_id_key <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ; hash = siphash_3u32 <S2SV_ModEnd> ( ( __force <S2SV_ModStart> iph -> protocol, & net -> ipv4. ip_id_key <S2SV_ModEnd> ) ; id",1
1555,"<S2SV_ModStart> expr_ty step ; lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lower, & tmp ) { if ( tmp == NULL ) { goto failed ; } <S2SV_ModEnd> int res ; <S2SV_ModStart> int res ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_upper, & tmp ) { <S2SV_ModEnd> int res ; <S2SV_ModStart> int res ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_step, & tmp ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { step = NULL ; } * out = Slice ( lower, upper, step, arena ) ; if ( * out == NULL ) goto failed ;",0
1556,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
1557,"<S2SV_ModStart> ctl -> pw, "".chfn""",1
1558,<S2SV_ModStart> { if ( max_length < sizeof ( struct ieee80211_radiotap_header ) ) return - EINVAL ; if ( <S2SV_ModStart> iterator -> _rtheader + sizeof ( uint32_t ),1
1559,"<S2SV_ModStart> int err ; list_for_each_entry ( iter, & alink -> dscp_map, list ) { u32 handle ; <S2SV_ModStart> ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; nfp_abm_u32_knode_delete ( alink, knode ) ; return - EOPNOTSUPP ; } <S2SV_ModEnd> mask = be32_to_cpu <S2SV_ModStart> ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; if ( ( iter -> val & cmask ) == ( val & cmask ) ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; nfp_abm_u32_knode_delete ( alink, knode ) ; return - EOPNOTSUPP ; }",0
1560,"<S2SV_ModStart> = NULL ; } if ( src -> speculative ) { for ( i = 0 ; i <= src -> curframe + 1 ; i <= dst_state -> curframe + 1 ; i ++ ) { if (! dst_state -> frame [ i ] ) { kfree ( dst_state -> frame [ i ] ) ; return - ENOMEM ; } } dst_state -> curframe = src -> curframe ; } for ( i = 0 ; i <= src -> curframe + 1 ; i <= dst_state -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) return - ENOMEM ; dst_state -> frame [ i ] = dst ; } } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe + 1 ; i <= dst_state -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) return - ENOMEM ; dst_state -> frame [ i ] = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; dst_state -> frame [ i ] = dst",0
1561,"<S2SV_ModStart> return ; } if ( input <= 0.0 || output <= 0.0 ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Gamma <S2SV_blank> values <S2SV_blank> should <S2SV_blank> be <S2SV_blank> positive"" ) ; RETURN_FALSE ; }",1
1562,<S2SV_ModStart> ) ; } <S2SV_ModEnd> stream -> config <S2SV_ModStart>. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> cx_time = 0 ; stream -> nbytes = 0 ; stream -> frames_out = 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1563,<S2SV_ModStart> lun ) sas_eh_finish_cmd <S2SV_ModEnd> ( cmd ),0
1564,"<S2SV_ModStart> error ) ) { g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s.%s"", tmpfile_name, maybe_quote ( app ) ) ; g_auto ( GStrv ) groups = g_strv_new ( ) ; if (! g_key_file_save ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s.%s"", tmpfile_name, g_strdup_printf ( ""export-desktop-XXXXXX.%s"", escaped_branch ) ) ; g_auto ( GStrv ) new_argv = g_strv_new ( ) ; if (! g_key_file_save ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; for ( i = 0 ; i < new_data_len ; i ++ ) { g_key_file_free ( keyfile ) ; g_key_file_",0
1565,"<S2SV_ModStart> pbi -> common <S2SV_ModEnd> ; const int <S2SV_ModStart> tile_col ; uint8_t <S2SV_ModEnd> * end = <S2SV_ModStart> end = NULL <S2SV_ModEnd> ; vpx_reader r <S2SV_ModStart> 6 ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> -> above_seg_context, 0, <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> -> above_seg_context ) * aligned_cols ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> tile_col ) { int last_tile = tile_row == tile_rows - 1 && tile_col == tile_cols - 1 ; const size_t size = get_tile ( data_end, last_tile, & cm -> error, & data ) ; TileBuffer * const buf = & tile_buffers [ tile_row ] [ tile_col ] ; buf -> size = size ; } } for ( tile_row = 0 ; tile_row < tile_rows ; ++ tile_row ) { for ( tile_col = 0 ; tile_col < tile_cols ; ++ tile_col ) { const int last_tile = tile_row == tile_rows -",0
1566,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> VP9Decoder <S2SV_ModEnd> * vp9_decoder_create ( <S2SV_ModStart> pbi = vpx_memalign <S2SV_ModEnd> ( 32, <S2SV_ModStart> ( * pbi <S2SV_ModEnd> ) ; VP9_COMMON <S2SV_ModStart> cm = pbi? pbi -> common : NULL <S2SV_ModEnd> ; if ( <S2SV_ModStart> = 1 ; vpx_initialize_dec ( ) ; vpx_rtcd ( ) ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; cm -> decoded_key_frame = 0 ; vp9_init_dequantizer ( cm ) ; cm -> error. setjmp = 0 ; vpx_worker_init ( & pbi -> lf_worker ) ; return pbi ; } <S2SV_null> <S2SV_null>",0
1567,"<S2SV_ModStart> { GF_LOG ( GF_LOG_ERROR <S2SV_ModEnd>, GF_LOG_CONTAINER, <S2SV_ModStart> ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; return GF_NON_COMPLIANT_OBJECT ; } if (! gf_isom_box_is_valid ( s, GF_ISOM_BOX_TYPE_DREF ) ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Invalid <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; return GF_NON_COMPLIANT_OBJECT ;",0
1568,"<S2SV_ModStart> -> protocol_timeout = g_timeout_add_seconds <S2SV_ModEnd> ( 5,",0
1569,<S2SV_ModStart> -> count ; new_fpl -> user = get_uid ( fpl -> user ) ;,1
1570,<S2SV_ModStart> req ) { <S2SV_ModEnd> struct inet_request_sock * <S2SV_ModStart> ; if ( inet_rsk ( req ) -> inet_opt <S2SV_ModEnd> == NULL || <S2SV_ModStart> == NULL || inet_rsk ( req ) -> inet_opt <S2SV_ModEnd> == 0 ),0
1571,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> tree2tok ( struct <S2SV_ModStart> { const vpx_tree_index <S2SV_ModEnd> j = tree <S2SV_ModStart> ++ ] ; if ( j <= 0 ) { tokens [ - j ]. value = v ; tokens [ - j ]. len = l ; } else { tree2tok ( tokens, tree, j, v, l ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1572,"<S2SV_ModStart> ; if ( ( flags & VP8_EFLAG_NO_REF_LAST ) && ( flags & VP8_EFLAG_NO_REF_GF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_ARF ) { int upd = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP9_ALT_FLAG ; vp9_use_as_reference ( ctx -> cpi, ref <S2SV_ModEnd> ) ; } <S2SV_ModStart> VPX_CODEC_INVALID_PARAM ; } if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_REF",0
1573,"<S2SV_ModStart> wqh ) ; init_waitqueue_func_entry ( & ctx -> wait, ctx_wakeup ) ;",0
1574,"<S2SV_ModStart> ) ; struct mnt_namespace * ns = dest_mnt -> mnt_ns ; struct <S2SV_ModStart> ; if (! parent_path ) { err = - EINVAL ; goto out_cleanup_ids ; } if ( IS_MNT_SHARED ( dest_mnt ) ) { <S2SV_ModStart> goto out ; } if ( IS_MNT_SHARED ( dest_mnt ) ) { err = invent_group_ids ( source_mnt, true ) ; if ( err ) goto out_cleanup_ids ; for ( p = source_mnt ; p ; p = next_mnt ( p, source_mnt ) ) set_mnt_shared ( p ) ; } else { mnt_set_mountpoint ( dest_mnt, dest_mp, source_mnt ) ; } hlist_for_each_entry_safe ( child, n, & tree_list, mnt_hash ) { struct mount * q ; hlist_del_init ( & child -> mnt_hash ) ; q = __lookup_mnt_last ( & child -> mnt_parent -> mnt, child -> mnt_mountpoint ) ; umount_tree ( child, UMOUNT",0
1575,"<S2SV_ModStart>, & len, 0",1
1576,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = pair_set_epi16 ( cospi_21_64, - cospi_11_64 ) ; const __m128i k__cospi_p21_m11 = pair_set_epi16 ( cospi_21_64, - cospi_11_64 ) ; const __m128i k__cospi_p21_m21 = pair_set_epi16 ( cospi_21_64, - cospi_21_64 ) ; const __m128i k__cospi_p11_m22 = pair_set_epi16 ( cospi_11_64, - cospi_11_64 ) ; const __m128i k__cospi_p21_m22 = pair_set_epi16 ( cospi_21_64, - cospi_21_64 ) ; const __m128i k__cospi_p11_m22 = pair_set_epi16 ( cospi_11_64, - cospi_11_64 ) ; const __m128i k__cospi_p",0
1577,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> frame_max_bits ( const <S2SV_ModStart> ) rc -> avg_frame_bandwidth <S2SV_ModEnd> * oxcf ->,0
1578,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN <S2SV_ModStart> MIF_MAGICLEN ] ; char buf [ 4096 <S2SV_ModEnd> ] ; mif_hdr_t,0
1579,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> Huff_transmit ( huff <S2SV_ModStart>, NYT, NULL <S2SV_ModEnd> ) ; for <S2SV_ModStart>, NULL, fout <S2SV_ModEnd> ) ; }",0
1580,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> int mi_row, int mi_col, <S2SV_ModEnd> BLOCK_SIZE bsize ) <S2SV_ModStart> x = & td <S2SV_ModEnd> -> mb ; <S2SV_ModStart> -> mbmi ; <S2SV_ModEnd> const int segment_id <S2SV_ModStart> bsize ] ; const int bw = num_8x8_blocks_wide_lookup [ bsize ] ; const int bh = num_8x8_blocks_high_lookup [ bsize ] ; const int bw = x -> select_txfm_size && mbmi -> sb_type >= BLOCK_8X8 <S2SV_ModEnd> && cpi -> <S2SV_ModStart>. allow_skip_recode ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { <S2SV_ModStart> } else { # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { <S2SV_ModStart> } else { # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags &",0
1581,"<S2SV_ModStart> ; if ( len < USB_DT_HEADER_SIZE ) { dev_err ( ddev, ""config <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> excess <S2SV_blank> byte%s, <S2SV_blank> ignoring\\n"", cfgno, len, USB_DT_HEADER_SIZE ) ; return - EINVAL ; } if ( <S2SV_ModStart> USB_DT_HEADER_SIZE ) ) { dev_err ( ddev, ""config <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> excess <S2SV_blank> byte%s, <S2SV_blank> ignoring\\n"", cfgno, len, USB_DT_HEADER_SIZE ) ; return - EINVAL ; } <S2SV_ModStart> ) ) { dev_err ( ddev, ""config <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> excess <S2SV_blank> byte%s, <S2SV_blank> ignoring\\n"", cfgno, len, USB_DT_HEADER_SIZE ) ; return - EINVAL ; }",0
1582,"<S2SV_ModStart> key ) { <S2SV_ModEnd> unsigned char key2 <S2SV_ModStart> ] ; struct crypto_cipher * tfm_des <S2SV_ModEnd> ; str_to_key ( <S2SV_ModStart> ; tfm_des = crypto_alloc_cipher ( ""des"" <S2SV_ModEnd>, 0, <S2SV_ModStart>, 0, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) ) { <S2SV_ModEnd> cifs_dbg ( VFS <S2SV_ModStart> ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; return PTR_ERR ( tfm_des ) ; } crypto_cipher_setkey <S2SV_ModEnd> ( tfm_des, <S2SV_ModStart> 8 ) ; crypto_cipher_encrypt_one ( tfm_des, out, in ) ; crypto_free_cipher <S2SV_ModEnd> ( tfm_des ) <S2SV_ModStart> tfm_des ) ; return 0 <S2SV_ModEnd> ; } <S2SV_null>",1
1583,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1584,"<S2SV_ModStart> range_max ) { int position, zeroes, i, j ; char bits [ 65 ] <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( gbc ) < 0 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } position = get_bits_count ( gbc ) ; zeroes = i = 0 ; while ( 1 ) { if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( ctx -> trace_enable )",0
1585,<S2SV_ModStart> i > pos + delta <S2SV_ModStart> off + 1 <= pos + delta <S2SV_ModEnd> ) insn ->,1
1586,<S2SV_ModStart> case EXIT_REASON_INVEPT : case EXIT_REASON_INVVPID :,1
1587,"<S2SV_ModStart> { if ( strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> } else if ( strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> } else if ( strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"",",0
1588,"<S2SV_ModStart> = 0, packet -> http_content_len. ptr = NULL, packet -> http_content_len. len = 0, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_x_session_type. ptr = NULL, packet -> http_x_session_type. len = 0, packet ->",0
1589,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
1590,<S2SV_ModStart> ++ r ; if <S2SV_ModEnd> ( pow ( <S2SV_ModStart> dim ) > entries ) { r = - 1 ; } <S2SV_ModStart> dim ) ) <= entries ) { r = - 1 ; } <S2SV_ModEnd> return r ;,0
1591,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> x ), MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> ; } } return SyncDXTMipmaps ( image, dds_info, 8 ) <S2SV_ModEnd> ; } <S2SV_null>",0
1592,<S2SV_ModStart> } if ( iph -> ihl >= IP_MAX_IHDR_SIZE / sizeof ( struct iphdr ) ) goto inhdr_error ; if ( <S2SV_ModStart> 0 ; } if ( iph -> ihl >= IP_MAX_IHDR_SIZE / sizeof ( struct iphdr ) ) goto inhdr_error ;,0
1593,"<S2SV_ModStart> 1 TSRMLS_CC ) ; fprintf ( stderr, ""params <S2SV_blank> = <S2SV_blank> "" ) ; zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; if ( hkey. num == 0 ) { zval tmp ; INIT_PZVAL_ARRAY ( & tmp, params ) ; fprintf ( stderr, ""params <S2SV_blank> = <S2SV_blank> "" ) ; zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else { zval tmp ; INIT_PZVAL_ARRAY ( & tmp, params ) ; fprintf ( stderr, ""params <S2SV_blank> = <S2SV_blank> "" ) ; zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } if ( hkey. type == HASH_KEY_IS_LONG &&! zend_hash_index_exists ( params, hkey. num ) ) { zval tmp ; Z_ADDREF_PP ( tmp ) ; MAKE_STD_ZVAL ( tmp ) ; array_init",0
1594,"<S2SV_ModStart> length ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) <S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL )",0
1595,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", <S2SV_ModStart> w, action ) ; sendClean ( outputbuffer ) ;",0
1596,"<S2SV_ModStart> cfg ) { struct stat st ; FILE * file = NULL <S2SV_ModStart> } else { file = open ( filename, O_WRONLY | O_APPEND | O_CLOEXEC | O_NOFOLLOW | O_NOCTTY ) ; if ( file == NULL ) { fprintf ( stderr, ""Error: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> %s\\n"", filename ) ; exit ( EXIT_FAILURE ) ; } if ( file == NULL ) { fprintf ( stderr, ""Error: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> %s\\n"", filename ) ; exit ( EXIT_FAILURE ) ; } file = open ( filename, O_WRONLY | O_CLOEXEC | O_NOFOLLOW | O_NOCTTY ) ; if ( file == NULL ) { fprintf ( stderr, ""Error: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> %s\\n"", filename ) ; exit ( EXIT_FAILURE ) ; } if ( file == NULL ) { fprintf ( stderr, ""Error: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> %s\\n"", filename ) ; exit ( EXIT_FAILURE ) ; }",0
1597,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! f2fs_readonly (,1
1598,"<S2SV_ModStart> ""UnableToReadImageData"" ) ; bytes_per_line = sun_info. width * sun_info. depth ; <S2SV_ModStart> ""UnableToReadImageData"" ) ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ;",0
1599,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; sendClean ( outputbuffer ) ;",1
1600,"<S2SV_ModStart>, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" ) ; if ( Stream_GetRemainingLength ( s ) < 4 ) return FALSE ;",0
1601,<S2SV_ModStart> ( user ) ; cleanup_srcu_struct ( & user -> release_barrier ) ;,0
1602,<S2SV_ModStart> ; # endif # if CONFIG_TEMPORAL_DENOISING if ( ( CONFIG_TEMPORAL_DENOISING & CONFIG_TEMPORAL_DENOISING ) && ( cpi -> oxcf. noise_sensitivity > 0 ) ) { # if CONFIG_TEMPORAL_DENOISING if ( ( recon_y_stride!= cm -> lst_y_stride ) && ( recon_uv_stride!= cm -> lst_uv_stride ) && ( recon_y_stride!= cm -> lst_y_stride ) ) { # if CONFIG_TEMPORAL_DENOISING if ( ( recon_y_stride!= cm -> lst_y_stride ) && ( recon_uv_stride!= cm -> uv_stride ) { # if CONFIG_TEMPORAL_DENOISING if ( ( recon_y_stride!= cm -> lst_y_stride ) && ( recon_uv_stride!= cm -> uv_stride ) ) { # if CONFIG_TEMPORAL_DENOISING if ( ( recon_y_stride!= cm -> lst_y_stride ) && ( recon_uv_stride!= cm -> uv_stride,0
1603,<S2SV_ModStart> == ARPHRD_ETHER ) { <S2SV_ModStart> ether_setup ) ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; },1
1604,"<S2SV_ModStart> * data ; struct stream packet = * s ; <S2SV_ModStart> ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } if (",1
1605,"<S2SV_ModStart> -> b_multithreaded_rd ) vpx_de_alloc_temp_buffers <S2SV_ModEnd> ( pbi,",0
1606,<S2SV_ModStart> 0 ) { if ( l == NULL ) break ; <S2SV_ModStart> } else { if ( l == form -> value ) { if ( l == form -> select_option ) { if ( l == form -> select_option -> prev ) break ; } else { if ( l == form -> select_option -> next ) { if ( l == form -> select_option -> prev ) { if ( l == form -> value -> prev ) { if ( l == form -> select_option -> prev ) { if ( l == form -> select_option -> prev ) { if ( l == form -> select_option -> prev ) { if ( l == form -> value -> prev ) { if ( l == form -> select_option -> prev ) break ; } } else { if ( l == form -> select_option -> next ) { if ( l == form -> select_option -> prev ) { if ( l == form -> value -> prev ) { if ( l == form -> select_option -> prev ) { if ( l == form -> select_option -> prev ) { if ( l == form -> select_option -> prev ) { if ( l == form -> select_option -> prev ) { if ( l ==,0
1607,<S2SV_ModStart> { if ( ( <S2SV_ModStart> > 0 ) && ( ( xWantedSize + xHeapStructSize ) > xWantedSize ) <S2SV_ModStart> 0x00 ) { if ( ( xWantedSize + <S2SV_ModEnd> ( portBYTE_ALIGNMENT - <S2SV_ModStart> portBYTE_ALIGNMENT_MASK ) ) > xWantedSize ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize = 0 <S2SV_ModEnd> ; } },0
1608,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1609,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1610,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpDiff ( TIFF <S2SV_ModStart> cc ) ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> stride ) )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""fpDiff"", ""%s"", ""(cc%(bps*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> tmp ) return 0 <S2SV_ModStart> cp -- ) return 1 ;",1
1611,"<S2SV_ModStart> s ) { struct stream packet = * s ; <S2SV_ModStart> int i ; if (! s_check_rem ( s, 5 ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> bitmap <S2SV_blank> data <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s, 5 ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> bitmap <S2SV_blank> data <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
1612,"<S2SV_ModStart> ; if ( sfe -> valuelen > context -> valuelen ) { error = context -> put_listent ( context, sfe -> flags, sfe -> nameval, ( int ) sfe -> namelen, ( int ) sfe -> valuelen ) ; if ( context -> seen_enough ) break ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; } if ( nsbuf < count ) { error = context -> put_listent ( context, sfe -> flags, sfe -> nameval, ( int ) sfe -> valuelen ) ; if ( context -> put_listent ( context, sfe -> flags, sfe -> nameval, ( int ) sfe -> namelen, ( int ) sfe -> valuelen ) ; if ( context -> seen_enough ) break ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; }",0
1613,"<S2SV_ModStart> = 0 ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) { goto trunc ; } <S2SV_ModStart> struct olsr_msg6 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> msg4[0x%04x], <S2SV_blank> msg6[0x%04x]"", msgptr. v4 -> msg_type, msgptr. v6 -> msg_type, msgptr. v6 -> msg_len ) ) ; } else { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> msg4[0x%04x]"", msgptr. v4 -> msg_type, msgptr. v4 -> msg_len ) ) ; if ( msg_len_valid == 0 ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> msg4[0x%04x]"", msgptr. v4 -> msg_type, msgptr. v4 -> msg_len ) ) ; } else { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> msg4[0x%04x]"", msgptr. v4 ->",0
1614,"<S2SV_ModStart> { uint16 bitspersample = ( uint16 ) TIFFGetFieldDefaulted ( in, TIFFTAG_BITSPERSAMPLE, & bitspersample ) ; uint16 samplesperpixel = ( uint16 ) TIFFGetFieldDefaulted ( in, TIFFTAG_SAMPLESPERPIXEL <S2SV_ModEnd>, input_photometric ; <S2SV_ModStart> input_photometric ; } if ( samplesperpixel == ( uint16 ) - 1 ) { TIFFSetField ( out, TIFFTAG_SAMPLESPERPIXEL, samplesperpixel ) ; return FALSE ; }",0
1615,"<S2SV_ModStart> } else { if ( smatch ( option, ""path"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Path <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" ) ; return MPR_ERR_BAD_SYNTAX ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Filename <S2SV_blank> is <S2SV_blank> missing <S2SV_blank> \'%s\'"", option ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if ( smatch ( option, ""anew"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""stamp"" ) ) { stamp = ( ssize ) getnum ( ovalue ) ; } else if ( smatch ( option, ""path"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Path <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" ) ; return MPR_ERR_BAD_SYNTAX ; }",0
1616,"<S2SV_ModStart> tx_size, vpx_coeff_stats <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model * coef_probs = cpi -> frame_coef_probs [ tx_size ] ; vpx_coeff_count * coef_counts = cpi -> coef_counts [ tx_size ] ; unsigned int ( * eob_branch_ct ) [ REF_TYPES ] [ COEF_BANDS ] [ COEFF_CONTEXTS ] = cpi -> common. counts. eob_branch [ tx_size ]",0
1617,"<S2SV_ModStart> { } ; if (! access_ok ( VERIFY_WRITE, name, & tc ) ) return r ; if ( tcgetattr ( fd, TCSANOW, & tc ) < 0 ) return log_warning_errno ( errno, ""Failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; r = tcsetattr ( fd, TCSANOW, & tc ) ; if ( r < 0 ) return log_warning_errno ( errno, ""Failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if ( tcgetattr ( fd, TCSANOW, & tc ) < 0 ) return log_warning_errno ( errno, ""Failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ;",0
1618,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x80 ; state -> data [ 2 ] = 0x0 ; if ( dvb_usb_generic_rw ( d, state -> data, 3, state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x02 ; state -> data [ 2 ] = 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; state -> data [ 1 ] = 0x83 ; state -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> ( d, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3,",0
1619,<S2SV_ModStart> filp ) { if (! S_ISREG ( inode -> i_mode ) ) return - EBADF ;,0
1620,"<S2SV_ModStart> * iface, <S2SV_ModEnd> vpx_codec_enc_cfg_t * cfg <S2SV_ModStart> VPX_CODEC_INCAPABLE ; else { if ( ( flags & ( VPX_CODEC_USE_XMA | VPX_CODEC_USE_PSNR ) ) && ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags &",0
1621,"<S2SV_ModStart> int stride, <S2SV_ModEnd> int uv_block_size, <S2SV_ModStart> const kernel = vp9_filter_kernels [ which_mv ] <S2SV_ModEnd> ; enum mv_precision <S2SV_ModStart> int uv_stride ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q4 ; } else { uv_stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q3 ; } # else vp9_build_inter_predictor_high ( y_mb_ptr, stride, & pred [ 0 ], 16, & mv, scale, 16, 16, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vp9_build_inter_predictor_high ( u_mb_ptr, uv_stride, & pred [ 256 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vp",0
1622,"<S2SV_ModStart> ; mungspaces ( strlen ( buf ) <S2SV_ModEnd> ) ; bufp <S2SV_ModStart> match_varname ( buf, ""FILENAME"", 4 ) || match_varname ( buf, ""FILENAME"", 4 ) || match_varname ( buf, ""FILENAME"", 5 ) ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } else if ( match_varname ( buf, ""FILENAME"", 5 ) ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } else if ( match_varname ( buf, ""FILENAME"", 5 ) || match_varname ( buf, ""FILENAME"", 6 ) ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } else if ( match_varname ( buf, ""FILENAME"", 6 ) ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } else if ( match_varname ( buf, ""FILENAME"", 6 ) ) {",0
1623,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> cJSON * <S2SV_ModEnd> cJSON_CreateFloatArray ( double <S2SV_ModStart> cJSON_CreateFloatArray ( ) ; if ( a ) for ( i = 0 ; i < count ; ++ i ) { <S2SV_ModEnd> n = cJSON_CreateFloat <S2SV_ModStart> ( numbers [ <S2SV_ModEnd> i ] ) <S2SV_ModStart> i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; } return a <S2SV_ModEnd> ; } <S2SV_null>",0
1624,<S2SV_ModStart> ; goto retry_rebind <S2SV_ModEnd> ; } if,0
1625,"<S2SV_ModStart> ; unsigned int entries_left <S2SV_ModEnd> ; bh = <S2SV_ModStart> ibh ) { entries_left = udf_read_ptagged ( inode -> i_sb, & iinfo -> i_location, 0, & ident ) ; if ( entries_left < 1 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> in <S2SV_blank> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1626,"<S2SV_ModStart>, n ) ; if ( w == NULL ) return 0",1
1627,<S2SV_ModStart> 4 ) ; if ( idx + 4 > len ) return NULL ; <S2SV_ModStart> ]. len + idx,0
1628,"<S2SV_ModStart> data_end ) { VP9_COMMON <S2SV_ModEnd> * const cm <S2SV_ModStart> -> log2_tile_rows ; int n ; int final_worker = - 1 ; assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_rows <= ( 1 << 6 ) ) ; assert ( tile_rows <= ( 1 << 6 ) ) ; assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_rows <= ( 1 << 6 ) ) ; ( void ) tile_rows ; if ( pbi -> tile_workers == 0 ) { CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( num_threads * sizeof ( * pbi -> tile_workers ) ) ) ; for ( i = 0 ; i < num_threads ; ++ i ) { VPxWorker * const worker = & pbi -> tile_workers [ i ] ; vpx_worker_init ( worker ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data2, vpx_malloc ( sizeof ( Tile",0
1629,<S2SV_ModStart> + 8 ; if ( fgetc ( ifp ) < 'M' || fgetc ( ifp ) - 'R' ) return ; <S2SV_ModStart> ( ) ; if ( fgetc ( ifp ) < 'M' || fgetc ( ifp ) - 'R' ) return ;,0
1630,"<S2SV_ModStart> ; err = 0 ; if ( type == PACKET_FANOUT_HASH ) goto out ; err = - EINVAL ; if ( atomic_long_get ( & rollover -> num, 0 ) == atomic_long_get ( & rollover -> num_huge, 0 ) ) { err = - ENOMEM ; goto out ; } atomic_long_set ( & rollover -> num_failed, 0 ) ; po -> rollover = rollover ; } if ( type == PACKET_FANOUT_LB : case PACKET_FANOUT_CPU : case PACKET_FANOUT_RND : case PACKET_FANOUT_QM : case PACKET_FANOUT_CBPF : case PACKET_FANOUT_EBPF : if ( type == PACKET_FANOUT_CPU : case PACKET_FANOUT_RND : case PACKET_FANOUT_QM : if ( flags & PACKET_FANOUT_FLAG_EBPF ) { err = - EINVAL ; goto out ; }",0
1631,"<S2SV_ModStart> -> common ; const double base_q = vp9_convert_qindex_to_q ( cm -> base_qindex ) ; const int base_rdmult = vp9_compute_rd_mult ( cpi, cm -> base_dc_delta_q ) ; RDMULT_RATIO ( i ) = ( double ) seg -> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
1632,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
1633,"<S2SV_ModStart> ( void ) TIFFGetFieldDefaulted <S2SV_ModEnd> ( in,",1
1634,<S2SV_ModStart>. err_detail = <S2SV_ModEnd> error -> has_detail <S2SV_ModStart> -> has_detail? error -> detail : NULL ; return ctx <S2SV_ModEnd> ; } <S2SV_null>,0
1635,<S2SV_ModStart> [ i ] && j < sizeof ( buf ),0
1636,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1637,"<S2SV_ModStart> ""corrupt <S2SV_blank> BSON"" ) ; VALIDATE_TEST ( ""test59.bson"", BSON_VALIDATE_NONE, 9, BSON_VALIDATE_NONE, ""corrupt <S2SV_blank> BSON"" ) ;",1
1638,<S2SV_ModStart> ; if ( x86_pmu. cntval_bits == 8 ) x86_pmu. cntval_mask |= ( 1ULL << x86_pmu. num_counters ) - 1 ; if ( x86_pmu. cntval_mask > ( 1ULL << x86_pmu. num_counters ) - 1 ) x86_pmu. cntval_mask = ( 1ULL << x86_pmu. num_counters ) - 1 ; if ( x86_pmu. cntval_bits == 8 ) x86_pmu. cntval_mask |= ( 1ULL << x86_pmu. num_counters ) - 1 ; if ( x86_pmu. cntval_mask > ( 1ULL << x86_pmu. num_counters ) - 1 ) x86_pmu. cntval_mask = ( 1ULL << x86_pmu. num_counters ) - 1 ;,0
1639,"<S2SV_ModStart> * ps_cur_slice ; pocstruct_t * ps_prev_poc, * ps_cur_poc ; memset ( ps_dec -> ps_cur_slice, 0, sizeof ( dec_slice_params_t ) )",0
1640,<S2SV_ModStart> ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,0
1641,"<S2SV_ModStart> ; krb5_key_data * key_data ; if ( n_key_data <= 0 ) return NULL ; key_data = k5calloc ( n_key_data, sizeof ( * key_data ), & err ) ; if ( key_data == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 2 ) { key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_contents [ 1 ] = NULL ; } }",0
1642,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ),0
1643,<S2SV_ModStart> ; if ( task -> ptrace_uid && task -> ptrace_gid <S2SV_ModEnd> &&! ptrace_has_cap,0
1644,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x80 ; state -> data [ 2 ] = 0x0 ; if ( dvb_usb_generic_rw ( d, state -> data, 3, state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x02 ; state -> data [ 2 ] = 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; state -> data [ 1 ] = 0x83 ; state -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> ( d, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3,",0
1645,"<S2SV_ModStart> int getnum ( const char * fmt, int n ) { if (! isdigit ( * * fmt ) ||! isdigit ( * ( * fmt ) ++ ) ) return df ; <S2SV_ModStart> = 0 ; if (! isdigit ( * * fmt ) ) return df ;",0
1646,"<S2SV_ModStart> ; markold ( g, g -> allgc, g -> reallyold ) ; markold ( g, g -> finobj, g -> finobjrold ) ; atomic ( L ) ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival, g -> reallyold ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> finobj, g -> finobjsur ) ; sweepgen ( L, g, psurvival, g -> finobjrold ) ; g -> finobjrold = g -> finobjold ;",0
1647,<S2SV_ModStart> else return - EINVAL <S2SV_ModEnd> ; deb_info (,0
1648,"<S2SV_ModStart> 'S' } ; uint8_t * ssl_request = { 0 } ; <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModStart> buffer ) ; s_write ( c, c -> local_wfd. fd, ssl_request, sizeof ssl_request ) ; if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } s_read ( c, c -> local_rfd. fd, ssl_request, sizeof ssl_request ) ; if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } s_write ( c, c -> local_wfd. fd, ssl_ok",0
1649,"<S2SV_ModStart> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> cib_tls_signon ( cib_t <S2SV_ModStart> struct sockaddr_in addr <S2SV_ModEnd> ; int rc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> static struct mainloop_fd_callbacks <S2SV_ModStart> cib_fd_callbacks = { } <S2SV_ModEnd> ; connection -> <S2SV_ModStart> NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } bzero ( & hints, sizeof ( struct addrinfo ) ) ; server = private -> server ; ret_ga = getaddrinfo ( server, NULL, & hints, & res ) ; if ( ret_ga ) { crm_err ( ""getaddrinfo <S2SV_blank> failed"" ) ; crm_exit ( 1 ) ; } if",0
1650,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; <S2SV_ModEnd> cpi -> frames_till_gf_update_due <S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( setjmp <S2SV_ModStart> -> mb. ss, vpx_calloc ( sizeof ( search_site ), ( MAX_MVSEARCH_STEPS * 8 ) + 1 ) ) ; vp8_create_common ( & cpi -> common ) ; memcpy ( cpi -> base_skip_false_prob, vp8cx_base_skip_false_prob ) ) ; cpi -> prob_last_coded = 128 ; cpi -> prob_gf_coded = 63 ; cpi -> prob_intra_coded = 63 ; cpi -> recent_ref_frame_usage [ LAST_FRAME ] = 1 ; cpi -> recent_ref_frame_usage [ GOLDEN_FRAME ] = 1 ; cpi -> common. ref_frame_sign_bias [ GOLDEN_FRAME ] = 1 ; cpi -> common. ref_frame_sign_bias [ LAST_FRAME ] = 1 ; cpi -> common. ref_frame_sign_bias [ GOLDEN_FRAME ]",0
1651,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
1652,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MIN, 1 <S2SV_ModEnd>, regs,",1
1653,<S2SV_ModStart> return ; } ND_TCHECK_32BITS ( & icp -> icmp6_data8 [ 0 ] ) ; <S2SV_ModStart> ] & 0x80 ) { ND_TCHECK_32BITS ( & icp -> icmp6_data8 [ 1 ] ) ; <S2SV_ModStart> 1 ] & 0x80 ) { ND_TCHECK_32BITS ( & icp -> icmp6_data8 [ 2 ] ) ; <S2SV_ModStart> 1 ] & 0x80 ) { ND_TCHECK_16BITS ( & icp -> icmp6_data8 [ 1 ] ) ; <S2SV_ModStart> 1 ] & 0x80 ) { ND_TCHECK_16BITS ( & icp -> icmp6_data8 [ 1 ] ) ; <S2SV_ModStart> 1 ] & 0x80 ) ; <S2SV_ModStart> 1 ] & 0x80 ) { ND_TCHECK_16BITS ( & icp -> icmp6_data8 [ 3 ] ) ; <S2SV_ModStart> 1 ] & 0x80 ) { ND_TCHECK_16BITS ( & icp -> icmp6_data8 [ 2 ] & 0x80 ) ; <S2SV_ModStart> 1 ] & 0x80 ) { ND_TCHECK_16,0
1654,"<S2SV_ModStart> ctx, expr -> unary. child",1
1655,"<S2SV_ModStart> 0.0 ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1656,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command <S2SV_ModStart> ( karg, ioc <S2SV_ModEnd>, & uarg",0
1657,"<S2SV_ModStart> Image * image <S2SV_ModEnd> ; register IndexPacket <S2SV_ModStart>, length, <S2SV_ModEnd> padding, value <S2SV_ModStart>, padding, <S2SV_ModEnd> value, version <S2SV_ModStart> < 0 ) { data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } <S2SV_ModEnd> * p ++ <S2SV_ModStart> < 0 ) { data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } <S2SV_ModEnd> * p ++ <S2SV_ModStart> < 0 ) { data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } <S2SV_ModEnd> * p ++ <S2SV_ModStart> < 0 ) { data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } <S2SV_ModEnd> * p ++",0
1658,"<S2SV_ModStart> 0 ) { if ( mainhdrlen >= JAS_UINTFAST16_MAXBANDS ) { jas_eprintf ( ""maximum <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> exceeded\\n"" ) ; return - 1 ; } <S2SV_ModStart> 0 ) { if ( mainhdrlen >= JAS_UINTFAST16_MAXBANDS ) { jas_eprintf ( ""maximum <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> exceeded\\n"" ) ; return - 1 ; } <S2SV_ModStart> 0 ) { if ( mainhdrlen >= JAS_UINTFAST16_MAXBANDS ) { jas_eprintf ( ""maximum <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> exceeded\\n"" ) ; return - 1 ; } <S2SV_ModStart> 0 ) { if ( mainhdrlen >= JAS_UINTFAST16_MAXBANDS ) { jas_eprintf ( ""maximum <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> exceeded\\n"" ) ; return - 1 ; } <S2SV_ModStart> 0 ) { if ( mainhdrlen >= JAS_UINTFAST16_MAXBANDS ) { jas_eprintf ( ""maximum <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> exceeded\\n"" ) ; return - 1 ;",0
1659,"<S2SV_ModStart> 0 ) { if ( chanmode_found ) strcpy ( new_args, argument, sizeof ( new_args ) - 1 ) ; else strcpy ( new_args, argument, sizeof ( new_args ) - 1 ) ; <S2SV_ModStart> 0 ) { if ( chanmode_found ) strcpy ( new_args, argument, sizeof ( new_args ) - 1 ) ; } else { strcpy ( new_args, argument, sizeof ( new_args ) - 1 ) ; for ( i = 0 ; i < length ; i ++ ) strcpy ( new_args [ i ], argument ) ; for ( i = 0 ; i < length ; i ++ ) strcpy ( new_args [ i ], argument + 1 ) ; for ( i = 0 ; i < length ; i ++ ) strcpy ( new_args [ i ],'<S2SV_blank>') ; i ++ ) strcpy ( new_args [ i ], argument ) ; for ( i = 0 ; i < length ; i ++ ) strcpy ( new_args [ i ], '\\0' ) ; for ( i = 0 ; i < length ; i ++ ) strcpy (",0
1660,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> 1 ) ; vpx_read_bit <S2SV_ModEnd> ( r )",0
1661,<S2SV_ModStart> ; int is_valid = ( error == GIT_OK ) <S2SV_ModStart> giterr_clear ( ) <S2SV_ModEnd> ; error =,1
1662,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
1663,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx <S2SV_ModStart> ] ) ; FRAME_COUNTS * counts = xd -> counts ; if ( counts ) ++ counts -> <S2SV_ModEnd> comp_inter [ ctx",0
1664,"<S2SV_ModStart> ; } } eprintf ( ""E01"" ) ;",0
1665,"<S2SV_ModStart>! stream ) { <S2SV_ModStart> fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; } <S2SV_ModEnd> if ( prev <S2SV_ModStart> vpx_codec_err_t res ; vpx_codec_enc_config_default ( global -> codec -> interface ( ), & stream -> config. cfg, global -> usage ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; stream -> config. stereo_fmt = STEREO_FORMAT_MONO <S2SV_ModEnd> ; stream -> <S2SV_ModStart> write_webm = 1 ; <S2SV_ModEnd> stream -> ebml <S2SV_ModStart>. last_pts_ms = <S2SV_ModEnd> - 1 ;",0
1666,"<S2SV_ModStart> ; if ( nd_opt_mtu ( opp )!= opp -> nd_opt_mtu ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> mtu <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_mtu_values, ""unknown"", opp -> nd_opt_mtu ) ) ) ; break ; } <S2SV_ModStart> : if ( nd_opt_mtu ( opp )!= opp -> nd_opt_mtu ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> mtu <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_mtu_values, ""unknown"", opp -> nd_opt_mtu ) ) ) ; break ; } <S2SV_ModStart> : if ( nd_opt_mtu ( opp -> nd_opt_mtu )!= opp -> nd_opt_mtu ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> mtu <S2SV_blank> (%u): <S2SV_blank> "", opp -> nd_opt_mtu ) ) ; break ; }",0
1667,<S2SV_ModStart> = 0 ; if ( yr_re_ast_is_root ( * re_ast ) ) { yr_free ( * re_ast ) ; return ERROR_INSUFFICIENT_MEMORY ; },0
1668,"<S2SV_ModStart> ; other = rcu_dereference_protected ( sk -> sk_omem_alloc, sock_owned_by_user ( sk ) ) <S2SV_ModStart> if ( unix_peer ( sk <S2SV_ModEnd> )!= sk <S2SV_ModStart> if ( unix_recvq_full ( sk <S2SV_ModEnd> ) ) writable <S2SV_ModStart> = 0 ; <S2SV_ModEnd> sock_put ( other",0
1669,"<S2SV_ModStart> ) ) ; auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Expand <S2SV_blank> key <S2SV_blank> %s"", key -> key -> key, error ) ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> auth_request_log_error ( iter <S2SV_ModStart> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1670,<S2SV_ModStart> ; if ( skb -> len < sizeof ( struct nlattr ) ) return 0 ; if ( <S2SV_ModStart> -> nla_len > <S2SV_ModEnd> skb -> len <S2SV_ModStart> skb -> len - A,1
1671,"<S2SV_ModStart> ""MemoryAllocationFailed"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1672,"<S2SV_ModStart> ; stbbr_send ( ""<message <S2SV_blank> type=\'chat\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'stabber@localhost\'>"" <S2SV_ModEnd> ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost/mobile\'>""",1
1673,"<S2SV_ModStart> -> cac_id, serial -> len <S2SV_ModEnd> ) ; SC_FUNC_RETURN",1
1674,<S2SV_ModStart> = 0 ; # ifdef SUPER_SECURE <S2SV_ModStart> = 0 ; # endif <S2SV_ModStart> = 0 ; # ifdef SUPER_SECURE,0
1675,<S2SV_ModStart> maxBitrate ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1676,"<S2SV_ModStart> { GF_LOG ( GF_LOG_ERROR <S2SV_ModEnd>, GF_LOG_CONTAINER, <S2SV_ModStart> ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; return GF_NON_COMPLIANT_OBJECT ; } if (! gf_isom_box_is_valid ( s, GF_ISOM_BOX_TYPE_DREF ) ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Invalid <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; return GF_NON_COMPLIANT_OBJECT ;",0
1677,"<S2SV_ModStart> ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; if ( r < 0 ) return r",0
1678,<S2SV_ModStart> maxFrameNum ) ; if ( picSizeInMbs > INT_MAX / dpbSize ) return ( MEMORY_ALLOCATION_ERROR ) ; <S2SV_ModStart> 1 ) ; if ( dpb -> numRefFrames > MAX_NUM_REF_PICS ) return ( MEMORY_ALLOCATION_ERROR ) ;,0
1679,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> (! sock ||! addr ||! addrlen <S2SV_ModStart> OE_EINVAL ) ; addrlen_out = * addrlen ; if ( addrlen_out > sizeof ( struct oe_sockaddr_storage ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ; addrlen_in = addrlen_out <S2SV_ModStart>, addrlen_in, & addrlen_out <S2SV_ModEnd> )!= OE_OK <S2SV_ModStart> ) ; } if ( addrlen_out > sizeof ( struct oe_sockaddr_storage ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_out > sizeof ( struct oe_sockaddr_storage ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_out > sizeof ( struct oe_sockaddr_storage ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ;",0
1680,,1
1681,"<S2SV_ModStart> FALSE ; } if (! <S2SV_ModStart>, s ) ) return FALSE",1
1682,<S2SV_ModStart> ( sk ) ; struct ipv6_txoptions * opt_to_free <S2SV_ModStart>! opt ) { opt = txopt_get ( np ) ; opt_to_free = opt ; } <S2SV_ModEnd> if ( flowlabel <S2SV_ModStart> flowlabel ) ; txopt_put ( opt_to_free ) ;,0
1683,"<S2SV_ModStart>, found, upx_success = 0 <S2SV_ModStart> ; uint32_t valign <S2SV_ModEnd> ; uint32_t hdr_size <S2SV_ModStart> j ; uint32_t <S2SV_ModEnd> pe_plus = 0 <S2SV_ModStart> pe_plus ) { if ( upx_success ) { if ( dsize > sizeof ( struct pe_image_data_dir ) ) { cli_errmsg ( ""pe_image_data_dir <S2SV_blank> too <S2SV_blank> large\\n"" ) ; return CL_ENULLARG ; } else { if ( dsize > sizeof ( struct pe_image_data_dir ) ) { cli_errmsg ( ""pe_image_data_dir <S2SV_blank> too <S2SV_blank> large\\n"" ) ; return CL_ENULLARG ; } if ( dsize > sizeof ( struct pe_image_data_dir ) ) { cli_errmsg ( ""pe_image_data_dir <S2SV_blank> too <S2SV_blank> large\\n"" ) ; return CL_ENULLARG ; } <S2SV_ModStart> uint32_t hdr_size ; if ( fsize > sizeof ( struct pe_image_section_hdr64 ) ) { cli_errmsg ( ""pe_image_section_hdr64 <S2SV_blank> too <S2SV_blank> large\\n"" ) ; return CL_ENULLARG ;",0
1684,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> { } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; usleep <S2SV_ModStart> ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; }",0
1685,"<S2SV_ModStart> ; t2p -> tiff_datasize -= stripsize ; if ( t2p -> tiff_datasize < 0 ) { TIFFError ( TIFF2PDF_MODULE, ""Unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> t2p_readwrite_pdf_image, <S2SV_blank> %s"", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; }",0
1686,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gid <S2SV_ModEnd> ( inode,",0
1687,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> BYTE a_val ; if (! context ) return FALSE <S2SV_ModStart> -> ChromaSubsamplingLevel ; if (! scanline ) return FALSE <S2SV_ModStart> ; } } return TRUE ;,0
1688,"<S2SV_ModStart> inode ) { struct iso_directory_record * de2 ; if ( de -> name_len > ISOFS_MAX_DE_NAME ) { printk ( KERN_INFO ""%s: <S2SV_blank> invalid <S2SV_blank> directory <S2SV_blank> name\\n"", __func__ ) ; ret = - EIO ; goto fail ; } de2 = ( struct iso_directory_record * ) ( bh -> b_data + offset ) ; if (! de2 ) { printk ( KERN_INFO ""%s: <S2SV_blank> invalid <S2SV_blank> directory <S2SV_blank> name\\n"", __func__ ) ; goto fail ; }",0
1689,"<S2SV_ModStart> new_parent ) { <S2SV_ModEnd> __ptrace_link ( child <S2SV_ModStart>, new_parent, current_cred ( ) <S2SV_ModEnd> ) ; }",1
1690,<S2SV_ModStart> = 0 ; if ( yr_re_ast_is_root ( * re_ast ) ) { yr_free ( * re_ast ) ; return ERROR_INSUFFICIENT_MEMORY ; },0
1691,"<S2SV_ModStart> pcmk_ok ) { if ( private -> command. session == NULL ) { xmlNode * hello = cib_create_op ( 0, private -> command. session, F_CIB_CLIENTNAME, name ) ; crm_send_remote_msg ( hello, private -> command. session, NULL, NULL, 0, NULL ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, 0, NULL ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> command. session, F_CIB_CLIENTNAME, name ) ; crm_send_remote_msg ( hello, private -> command. session, NULL, NULL, 0, 0, NULL, 0, NULL ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> command. session, F_CIB_CLIENT",0
1692,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ; <S2SV_ModStart> sizeof ( address ) <S2SV_ModEnd> ; if (",0
1693,"<S2SV_ModStart> num00, tmp_err <S2SV_ModEnd>, n, <S2SV_ModStart> bsize ] ; const int <S2SV_ModEnd> quart_frm = MIN <S2SV_ModStart> int quart_frm = MIN ( xd -> common. width, xd -> common. height ) <S2SV_ModEnd> ; while ( <S2SV_ModStart> bsize ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_diamond_search_sad ( x, & ref_mv_full, & tmp_mv, step_param, <S2SV_ModEnd> x -> sadperbit16 <S2SV_ModStart> -> sadperbit16, & num00, & v_fn_ptr, x -> nmvjointcost, ref_mv ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = INT_MAX ; <S2SV_ModStart> best_motion_",0
1694,<S2SV_ModStart> ntreg_header ) ; <S2SV_ModEnd> if ( h,0
1695,"<S2SV_ModStart> } # endif if ( child -> is_enabled == NOT_SET && parent -> reqbody_limit == NOT_SET && child -> reqbody_no_files_limit == NOT_SET ) { ap_log_perror ( APLOG_MARK, APLOG_STARTUP | APLOG_NOERRNO, 0, mp, ""Child <S2SV_blank> directory <S2SV_blank> config <S2SV_blank> is_enabled <S2SV_blank> not <S2SV_blank> set"", parent, child ) ; return NULL ; } # ifdef APLOG_NOERRNO ap_log_perror ( APLOG_MARK, APLOG_STARTUP | APLOG_NOERRNO, 0, mp, ""Child <S2SV_blank> directory <S2SV_blank> config <S2SV_blank> is_enabled <S2SV_blank> not <S2SV_blank> set"", parent, child ) ; return NULL ; } # else if ( child -> is_enabled == NOT_SET && child -> reqbody_limit == NOT_SET && child -> reqbody_no_files_limit == NOT_SET ) { ap_log_perror ( APLOG_MARK, APLOG_NOERRNO, 0, mp, ""Child <S2SV_blank> directory <S2SV_blank> config <S2SV_blank> is_enabled <S2SV_blank> not <S2SV_blank> set"", parent, child ) ; return NULL ; } # endif",0
1696,"<S2SV_ModStart> ( used_address && msg_sys -> msg_name && <S2SV_ModStart> -> name, msg_sys <S2SV_ModEnd> -> msg_name, <S2SV_ModStart> -> name, msg_sys <S2SV_ModEnd> -> msg_name, <S2SV_ModStart> -> msg_name, msg_sys <S2SV_ModEnd> -> msg_name,",0
1697,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; for (,1
1698,"<S2SV_ModStart>, offset, rows, <S2SV_ModStart> -> rows ; rows = ( MagickSizeType ) <S2SV_ModEnd> ReadBlobLSBShort ( image <S2SV_ModStart> ( image ) ; if ( rows > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> -> rows ; rows = ( MagickSizeType ) <S2SV_ModEnd> ReadBlobLSBShort ( image <S2SV_ModStart> ( image ) ; if ( rows > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> -> rows ; rows = ( MagickSizeType ) <S2SV_ModEnd> ReadBlobLSBShort ( image <S2SV_ModStart> ( image ) ; if ( rows > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> -> rows ; rows = ( MagickSizeType ) <S2SV_ModEnd> ReadBlobLSBShort ( image <S2SV_ModStart> ( image ) ; if ( rows > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
1699,"<S2SV_ModStart>!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_string ( b, comp -> name, comp -> name_len ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_string ( b, comp -> name, comp -> name_len ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_",0
1700,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1701,"<S2SV_ModStart> client = user_data ; g_object_unref ( client <S2SV_ModEnd> ) ; if <S2SV_ModStart> num_clients ) ; g_object_unref ( client <S2SV_ModEnd> -> name ) <S2SV_ModStart> user ) ; g_object_unref ( client <S2SV_ModEnd> -> user ) <S2SV_ModStart> client ) ; <S2SV_ModEnd> crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client""",0
1702,"<S2SV_ModStart> * uv ; if ( thread -> twups == NULL ) thread -> twups = NULL ; else <S2SV_ModStart> next ) { if ( iswhite ( uv ) ) markvalue ( g, uv -> v ) ; else",0
1703,<S2SV_ModStart> size ) ; if (! px -> ft ) return FALSE ;,0
1704,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1705,<S2SV_ModStart> if (! d_inode ( old ) ||! d_inode ( new ) <S2SV_ModEnd> ) goto out <S2SV_ModStart> if (! d_inode ( new ) <S2SV_ModEnd> ) goto out <S2SV_ModStart> if (! cleanup_whiteout && new_dentry_lower ( old ) -> d_inode == new_dentry_lower ( new ) -> d_inode <S2SV_ModEnd> ) goto out <S2SV_ModStart> if (! cleanup_whiteout && new_dentry_lower ( new ) -> d_inode == old_dentry_lower ( old ) -> d_inode <S2SV_ModStart> if (! cleanup_whiteout &&! d_inode ( new ) <S2SV_ModEnd> ) goto out <S2SV_ModStart> if (! cleanup_whiteout && new_dentry_lower ( new ) -> d_inode == new_dentry_lower ( old ) -> d_inode <S2SV_ModEnd> ) goto out <S2SV_ModStart> if (! cleanup_whiteout && new_dentry_lower ( new ) -> d_inode == new_upperdir <S2SV_ModEnd> ) goto out,0
