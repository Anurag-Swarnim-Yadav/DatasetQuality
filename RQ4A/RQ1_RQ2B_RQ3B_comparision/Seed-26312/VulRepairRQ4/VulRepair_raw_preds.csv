,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
1,<S2SV_ModStart> unfrag_ip6hlen ) { if ( unlikely ( unfrag_ip6hlen > skb -> len - frag_hdr_sz ) ) { kfree_skb ( skb ) ; return ERR_PTR ( unfrag_ip6hlen ) ; } <S2SV_ModStart> unfrag_ip6hlen ) ; if ( unlikely ( unfrag_ip6hlen > skb -> len - frag_hdr_sz ) { kfree_skb ( skb ) ; return ERR_PTR ( unfrag_ip6hlen ) ; } if ( unlikely ( unfrag_ip6hlen > skb -> len - frag_hdr_sz ) { kfree_skb ( skb ) ; return ERR_PTR ( unfrag_ip6hlen ) ; } if ( unlikely ( unfrag_ip6hlen > skb -> len - frag_hdr_sz ) ) { kfree_skb ( skb ) ; return ERR_PTR ( unfrag_ip6hlen ) ; },0
2,"<S2SV_ModStart> ) ) { GF_Box * stco = ( GF_Box * ) gf_list_get ( writers, 0 ) ; GF_Box * stsc = ( GF_Box * ) gf_list_get ( writers, 1 ) ; gf_isom_box_del ( stco ) ; gf_isom_box_del ( stsc",0
3,<S2SV_ModStart> item ) { return <S2SV_ModEnd> cJSON_GetArrayItem ( array <S2SV_ModStart> -> child ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
4,"<S2SV_ModStart> u32 event_id, <S2SV_ModEnd> u64 nr, <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",0
5,"<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { char * buf = grub_malloc ( EXT2_BLOCK_SIZE ( data ) ) ; if (! buf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } <S2SV_ModEnd> leaf = ( <S2SV_ModStart> leaf ) { if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) ( leaf + 1 ) ; for ( i = 0 ; i < grub_le_to_cpu16 ( leaf -> entries ) ; i ++ ) { if ( fileblock < grub_le_to_cpu32 ( ext [ i ]. block ) ) break ; } fileblock -= grub_le_to_cpu32 ( ext [ i ]. block ) ; if ( fileblock >= grub_le_to_cpu32 ( ext [ i ]. len ) ) return 0 ; else { grub_disk_addr_t start ; start = ( grub_le_to_cpu32 ( ext [ i ]. start",0
6,"<S2SV_ModStart> fdct16 ( const tran_low_t * in, tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> 16 ] ) { tran_high_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> 8 ] ; tran_high_t temp1, temp2 ; input [ 0 ] = in [ 0 ] + in [ 15 ] ; input [ 1 ] = in [ 1 ] + in [ 14 ] ; input [ 2 ] = in [ 2 ] + in [ 13 ] ; input [ 3 ] = in [ 3 ] + in [ 14 ] ; input [ 4 ] = in [ 4 ] + in [ 13 ] ; input [ 5 ] = in [ 5 ] + in [ 14 ] ; input [ 6 ] = in [ 6 ] + in [ 10 ] ; input [ 5 ] = in [ 5 ] + in [ 11 ] ; input [ 6 ] = in [ 6 ] + in [ 12 ] ; input [ 7 ] = in [ 0 ] + in [",0
7,<S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { #,0
8,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> search_filter_level ( const <S2SV_ModStart> VP9_COMMON * cm <S2SV_ModEnd>, struct loopfilter <S2SV_ModStart> lf = & <S2SV_ModEnd> cm -> lf <S2SV_ModStart> = get_max_filter_level ( <S2SV_ModEnd> cpi ) ; <S2SV_ModStart> = cpi -> <S2SV_ModEnd> lf -> filter_level <S2SV_ModStart> = cpi -> <S2SV_ModEnd> lf -> filter_level <S2SV_ModStart> = cpi -> <S2SV_ModEnd> lf -> filter_level <S2SV_ModStart> = cpi -> <S2SV_ModEnd> twopass. section_intra_rating <S2SV_ModStart> = cpi -> <S2SV_ModEnd> twopass. section_intra_rating <S2SV_ModStart> = cpi -> <S2SV_ModEnd> twopass. section_intra_rating <S2SV_ModStart> = cpi -> <S2SV_ModEnd> twopass. section_intra_rating <S2SV_ModStart> = cpi -> <S2SV_ModEnd> twopass. section_intra_rating <S2SV_ModStart> = cpi -> <S2SV_ModEnd> twopass. section_intra_rating <S2SV_ModStart> = cpi -> <S2SV_ModEnd> twopass. section_intra_rating <S2SV_ModStart> = cpi -> <S2SV_ModEnd> twopass. section_intra_rating <S2SV_ModStart> = cpi -> <S2SV_ModEnd> twopass. section_intra_rating <S2SV_ModStart> = cpi -> <S2SV_ModEnd> twopass. section_intra_rating",0
9,"<S2SV_ModStart> c. left ; if ( offset < 0 ) { luaL_error ( L, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> negative <S2SV_blank> offset <S2SV_blank> %d."", offset ) ; return luaL_error ( L, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> negative <S2SV_blank> offset <S2SV_blank> %d."", offset ) ; return luaL_error ( L, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> negative <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d."", limit ) ; } else { luaL_error ( L, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> negative <S2SV_blank> offset <S2SV_blank> %d."", offset ) ; return luaL_error ( L, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> negative <S2SV_blank> offset <S2SV_blank> %d."", offset ) ; return luaL_error ( L, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> negative <S2SV_blank> offset <S2SV_blank> %d."", offset ) ; return luaL_error ( L, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> negative <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d."", limit ) ; }",0
10,"<S2SV_ModStart> encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( w, vpx_sign <S2SV_ModEnd> ( w, <S2SV_ModStart> ( w, vpx_sign <S2SV_ModEnd> ( w, <S2SV_ModStart> ( w, vpx_sign <S2SV_ModEnd> ( w, <S2SV_ModStart> ( w, vpx_sign <S2SV_ModEnd> ( w, <S2SV_ModStart> ( w, vpx_sign <S2SV_ModEnd> ( w,",0
11,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; },0
12,<S2SV_ModStart> ) dat ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ND_TCHECK_16BITS ( ptr ) ; ND_TCHECK_16BITS ( ptr ) ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr,0
13,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; if ( dest_keyring ) { key_get ( dest_keyring ) ; return 0 ; } <S2SV_ModEnd> switch ( cred <S2SV_ModStart> KEY_REQKEY_DEFL_DEFAULT : case KEY_REQKEY_DEFL_REQUESTOR_KEYRING : if ( cred -> request_key_auth ) { down_read ( & cred -> request_key_auth -> sem ) ; if (! test_bit ( KEY_FLAG_REVOKED, & cred -> flags ) ) dest_keyring = key_get ( cred -> request_key_auth -> dest_keyring ) ; if ( dest_keyring ) break ; } case KEY_REQKEY_DEFL_THREAD_KEYRING : dest_keyring = key_get ( cred -> thread_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_PROCESS_KEYRING : dest_keyring = key_get ( cred -> process_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY",0
14,<S2SV_ModStart> = NULL ; if ( ctx == NULL ) return GSS_S_FAILURE ;,0
15,<S2SV_ModStart> tm = localtime <S2SV_ModEnd> ( & t,0
16,"<S2SV_ModStart> strlen ( password ) ) ; md5_init ( & md5_secret ) ; MD5Update ( & md5_secret, ( unsigned char * ) password, strlen ( password ) ) ; md5_update ( & md5_secret, ( unsigned char * ) password, strlen ( password ) ) ; MD5Final ( misc, & my_md5 ) ; if (! md5_init ( & md5_secret ) ) { md5_init ( & md5_secret ) ; md5_update ( & md5_secret, ( unsigned char * ) password, strlen ( password ) ) ; md5_update ( & md5_secret, ( unsigned char * ) password, strlen ( password ) ) ; md5_update ( & md5_secret, ( unsigned char * ) password, strlen ( password ) ) ; if (! md5_init ( & md5_secret ) ) { md5_init ( & md5_secret ) ; md5_update ( & md5_secret, ( unsigned char * ) password, strlen ( password ) ) ; md5_update ( & md5_secret, ( unsigned char * ) password, strlen ( password ) )",0
17,"<S2SV_ModStart> if (! e ) goto not_found ; r = parse_uid ( e + 1, & uid ) ; if ( r < 0 ) { if ( sd_bus_error_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) goto not_found ; r = sd_bus_call_method ( bus, ""org.freedesktop.machine1"", ""/org/freedesktop/machine1.Manager"", ""MapFromMachineUser"", & error, & reply, ""su"", ( uint32_t ) uid ) ; if ( r < 0 ) { if ( sd_bus_error_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) goto not_found ; goto fail ; } r = sd_bus_message_read ( reply, ""u"", & mapped ) ; if ( r < 0 ) { if ( sd_bus_error_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) goto not_found ; goto fail ; }",0
18,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ; if ( ia_valid & ATTR_MODE ) { if (! inode_owner_or_capable ( inode ) ) return - EPERM ; if (! in_group_p ( ( ia_valid & ATTR_MODE )? attr -> ia_mode : inode -> i_mode ) &&! capable_wrt_inode_uidgid ( inode, CAP_FSETID ) ) attr -> ia_mode &= ~ S_ISGID ; } if ( ia_valid & ATTR_MTIME_SET ) { if (! inode_owner_or_capable ( inode ) ) return - EPERM ; if (! in_group_p ( ( ia_valid & ATTR_MODE )? attr -> ia_mode : inode -> i_mode ) &&! capable_wrt_inode_gid ( inode, CAP_FSETID ) ) attr -> ia_mode &= ~ S_ISGID ; } if ( ia_valid & ( ATTR_MTIME_SET | ATTR_ATIME",0
19,"<S2SV_ModStart> = 0 ; select ( reader -> bytes_available_fd + 1, & read_fds, NULL, NULL, & timeout ) ; if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) return false ; } else { if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) return false ; } else { if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds )",0
20,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> detect_transition_to_still ( struct <S2SV_ModStart> last_decay_rate ) { <S2SV_ModEnd> int trans_to_still = <S2SV_ModStart> ; if ( frame_interval < MIN_GF_INTERVAL && loop_decay_rate >= 0.999 && last_decay_rate < 0.9 ) { int j ; const FIRSTPASS_STATS * position = twopass -> stats_in ; for ( j = 0 ; j < still_interval ; ++ j ) { const FIRSTPASS_STATS * tmp_next_frame ; for ( j = 0 ; j < still_interval ; ++ j ) { if ( EOF == input_stats ( twopass, & tmp_next_frame ) ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0",0
21,"<S2SV_ModStart> return ret ; if ( offset > i_size_read ( inode ) ) { ret = ext4_convert_unwritten_extents_nolock ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret ) ; return ret ; }",0
22,"<S2SV_ModStart> (! ( type & <S2SV_ModEnd> CRYPTO_ALG_NEED_FALLBACK ) ) <S2SV_ModStart> ( ""%s-all"", name ) ; if (! ( type & <S2SV_ModEnd> CRYPTO_ALG_NEED_FALLBACK ) ) <S2SV_ModStart> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
23,"<S2SV_ModStart> = GIT_PKT_NG ; if ( strlen ( line ) < 3 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; git__free ( pkt ) ; return - 1 ; } <S2SV_ModStart> = '\\0' ; if ( strlen ( line ) < 3 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; git__free ( pkt ) ; return - 1 ; } if ( strlen ( line ) > 3 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; git__free ( pkt ) ; return - 1 ; } if ( strlen ( line ) < 3 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; git__free ( pkt ) ; return - 1 ; } if ( strlen ( line ) < 3 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; git__free ( pkt ) ; return - 1 ; } if ( strlen ( line ) < 3 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line""",0
24,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FINAL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""RDP_NEG_REQ: <S2SV_blank> RemainingLength: <S2SV_blank> %d"", Stream_GetRemainingLength ( s ) ) ; return ; } <S2SV_ModStart> = NEGO_STATE_FINAL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""RDP_NEG_REQ: <S2SV_blank> RemainingLength: <S2SV_blank> %d"", Stream_GetRemainingLength ( s ) ) ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""RDP_NEG_REQ: <S2SV_blank> RemainingLength: <S2SV_blank> %d"", Stream_GetRemainingLength ( s ) ) ; return ; } <S2SV_ModStart> = NEGO_STATE_FINAL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""RDP_NEG_REQ: <S2SV_blank> RemainingLength: <S2SV_blank> %d"", Stream_GetRemainingLength ( s ) )",0
25,<S2SV_ModStart> pb ) ; if ( avio_feof ( pb ) ) return AVERROR_EOF ; <S2SV_ModStart> pb ) ; if ( avio_feof ( pb ) ) return AVERROR_EOF ; <S2SV_ModStart> pb ) ; if ( avio_feof ( pb ) ) return AVERROR_EOF ;,0
26,"<S2SV_ModStart> 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_generic_nolock <S2SV_blank> failed"" ) ; return - 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_generic_nolock <S2SV_blank> failed"" ) ; return - 1 ; } ret = mount_entry_on_generic ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_generic_nolock <S2SV_blank> failed"" ) ; return - 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_generic_nolock <S2SV_blank> failed"" ) ; return - 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_generic_nolock <S2SV_blank> failed"" )",0
27,"<S2SV_ModStart> - ENODEV ; io -> inputb = intf_mem_inb ; io -> outputb = intf_mem_outb ; io -> inputb = intf_mem_inw ; io -> outputb = intf_mem_outw ; break ; case 8 : io -> inputb = intf_mem_inl ; io -> outputb = intf_mem_outl ; break ; default : dev_warn ( io -> dev, ""Invalid <S2SV_blank> register <S2SV_blank> size: <S2SV_blank> %d\\n"", io -> regsize ) ; return - EINVAL ; } for ( idx = 0 ; idx < io -> io_size ; idx ++ ) { if ( request_mem_region ( addr + idx * io -> regspacing, io -> regsize, DEVICE_NAME ) == NULL ) { mem_region_cleanup ( io, idx ) ; return - EIO ; } } for ( idx = 0 ; idx < io -> io_size ; idx ++ ) { if ( request_mem_region ( addr + idx * io -> regspacing, io -> regsize, DEVICE_NAME ) == NULL ) { mem_region_cleanup ( io, idx ) ; return - EIO ;",0
28,<S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> :,0
29,<S2SV_ModStart> ) ) ; if ( ret < 0 ) { btif_storage_del_bonded_device ( remote_bd_addr ) ; return BT_STATUS_FAIL ; } <S2SV_ModStart> ) ) ; if ( ret < 0 ) { btif_storage_del_bonded_device ( remote_bd_addr ) ; return btif_storage_del_bonded_device ( remote_bd_addr ) ; return btif_storage_del_bonded_device ( remote_bd_addr ) ; } if ( ret < 0 ) { btif_storage_del_bonded_device ( remote_bd_addr ) ; return BT_STATUS_FAIL ; } if ( ret < 0 ) { btif_storage_del_bonded_device ( remote_bd_addr ) ; return btif_storage_del_bonded_device ( remote_bd_addr ) ; return btif_storage_del_bonded_device ( remote_bd_addr ) ; },0
30,<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INVALID_PARAM ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) { res = VPX_CODEC_INVALID_PARAM ; } else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INVALID_PARAM ; for ( map = iface -> enc. cfg_maps ; map -> usage >= 0 ; map ++ ),0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,"<S2SV_ModStart> uint64_t dx_time ) { if ( frame_in < 0 || frame_out < 0 || frame_out > UINT64_MAX ) { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out ) ; } else if ( frame_in < 0 || frame_out < 0 ) { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in ) ; fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out ) ; }",0
33,"<S2SV_ModStart> NULL ) { if ( imp_sth -> result -> num_rows > imp_sth -> result -> num_cols ) { do_error ( sth, JW_ERR_SEQUENCE, ""number <S2SV_blank> of <S2SV_blank> rows <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", imp_sth -> result -> num_cols ) ; return Nullav ; } <S2SV_ModStart> NULL ) { if ( imp_sth -> result -> num_rows > imp_sth -> result -> num_cols ) { do_error ( sth, JW_ERR_SEQUENCE, ""number <S2SV_blank> of <S2SV_blank> rows <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", imp_sth -> result -> num_cols ) ; return Nullav ; }",0
34,"<S2SV_ModStart> ; } enc28j60SetBit <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ETXSTL, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_EWRPTL, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_EWRPTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteBuffer ( interface, buffer, offset ) ; enc28j",0
35,"<S2SV_ModStart> value ) ; value = ast2obj_int ( o -> lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o ->",0
36,"<S2SV_ModStart> ( page && <S2SV_ModEnd> ( access ( <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0",0
37,"<S2SV_ModStart> flag ) { int mb_rows = source -> y_width >> 4 ; int mb_cols = source -> y_height >> 4 ; unsigned char * limits = cm -> pp_limits_buffer ; int mbr, mbc ; ( void ) post ; ( void ) low_var_thresh ; ( void ) flag ; for ( mbr = 0 ; mbr < mb_rows ; mbr ++ ) { vpx_post_proc_down_and_across_mb_row ( source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_stride, source -> y_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> u_buffer, source -> u_stride, source -> uv_stride, source -> uv_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> v_buffer, source -> uv_stride, source -> uv_stride, source -> uv_width, limits, 8 ) ; vpx_post_proc_down_and_across_mb_row ( source ->",0
38,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> ; struct mb2_cache_entry <S2SV_ModEnd> * ce ; <S2SV_ModStart> int error ; ce = mb2_cache_entry_alloc ( ext4_mb_cache, GFP_NOFS ) ; if (! ce ) { ea_bdebug ( bh, ""out <S2SV_blank> of <S2SV_blank> memory"" ) ; return ; } <S2SV_ModEnd> error = mb2_cache_entry_insert <S2SV_ModStart> bh -> b_blocknr, hash ) ; <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> } } <S2SV_null>",0
39,"<S2SV_ModStart> ) ) ; if (! r_socket_http_answer ( s, code, rlen ) ) { free ( uri ) ; return NULL ; } <S2SV_ModStart> rlen ) ; if (! r_socket_http_answer ( s, code, rlen ) ) { free ( uri ) ; return NULL ; }",0
40,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> ip_options_get_from_user ( struct <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> * opt = rcu_dereference_protected ( net -> ipv4. ip_options, rcu_dereference_protected ( net -> ipv4. ip_options, rcu_dereference_protected ( net -> ipv4. ip_options, rcu_protected ( net -> ipv4. ip_options, rcu_dereference_protected ( net -> ipv4. ip_options, rcu_dereference_protected ( net -> ipv4. ip_options, rcu_dereference_protected ( net -> ipv4. ip_options, rcu_dereference_protected ( net -> ipv4. ip_options, rcu_dereference_protected ( net -> ipv4. ip_options, rcu_protected ( net -> ipv4. ip_options, rcu_dereference_protected ( net -> ipv4. ip_options, rcu_dereference_protected ( net ->",0
41,"<S2SV_ModStart> ; trunc : if ( length < sizeof ( struct rpl_dio_genoption ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|truncated]"" ) ) ; return ; } <S2SV_ModStart> : if ( length < sizeof ( struct rpl_dio_genoption ) ) { if ( length < sizeof ( struct rpl_dio_genoption ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|truncated]"" ) ) ; return ; } <S2SV_ModStart> : if ( length < sizeof ( struct rpl_dio_genoption ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|truncated]"" ) ) ; return ; } if ( length < sizeof ( struct rpl_dio_genoption ) ) { if ( length < sizeof ( struct rpl_dio_genoption ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|truncated]"" ) ) ; return ; }",0
42,"<S2SV_ModStart> } else { if ( ( * varp ) [ 0 ] == NUL ) errmsg = ( char_u * ) N_ ( ""E529: <S2SV_blank> Cannot <S2SV_blank> set <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> empty <S2SV_blank> string"" ) ; else if (",0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode",0
44,"<S2SV_ModStart> size_t size ; if ( width <= 0 || height <= 0 ) { goto error ; } if (! jas_safe_intfast32_add ( tlx, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ||! jas_safe_intfast32_add ( hstep, height, 0 ) ||! jas_safe_intfast32_add ( vstep, height, 0 ) ) { goto error ; } if (! ( cmpt = jas_malloc ( sizeof ( jas_image_cmpt_t ) ) ) ) { goto error ; } if (! ( cmpt = jas_malloc ( sizeof ( jas_image_cmpt_t ) ) ) ) { goto error ; } if (! ( cmpt = jas_malloc ( sizeof ( jas_image_cmpt_t ) ) ) ) { goto error ; } if (! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_,",0
45,<S2SV_ModStart> && flags & FLAG_MATCHED <S2SV_ModEnd> ) || ( <S2SV_ModStart> && flags & FLAG_LAST_MATCHED <S2SV_ModEnd> ) || (,0
46,"<S2SV_ModStart> req, size_t <S2SV_ModEnd> acl_len ) { <S2SV_ModStart> acl_len ) { __be32 * savep = req -> rq_rcv_buf. head <S2SV_ModEnd> ; int status <S2SV_ModStart> int status ; * acl_len = 0 ; if ( ( status = decode_op_hdr ( xdr, OP_GETACL ) )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & savep )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & savep )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & savep ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & savep )!= 0 )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & savep )!= 0 ) goto out ; if (",0
47,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
48,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth, <S2SV_ModStart>, & tok ) ; if ( owner && * owner ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { uid = HTTP -> uid ; } else { uid = userToID ( owner ) ; } } if ( group && * group ) { if ( snumber ( group ) ) { gid = ( int ) stoi ( group ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { gid = HTTP -> gid ; } else { gid = groupToID ( group ) ; } } if ( perms && smatch ( owner, ""APPWEB"" ) ) { gid = HTTP -> gid ; } else { gid = userToID ( owner ) ; } } if ( owner && * owner ) { if ( snumber ( owner ) ) { if ( snumber ( owner ) ) { if ( smatch ( owner, ""APPWEB"" ) ) { gid = ( int ) stoi ( owner ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { gid = groupToID ( owner",0
49,"<S2SV_ModStart> ; # if CONFIG_MEM_MANAGER int number_aau ; if ( vpx_mm_create_heap_memory ( ) < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> create <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) } number_aau = ( ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ; if ( number_aau < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) } number_aau = ( ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ; addr = hmm_alloc ( & hmm_d, number_aau ) ; if ( addr < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.",0
50,"<S2SV_ModStart> int res ; <S2SV_ModEnd> long long export_index_table <S2SV_ModStart> long long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) <S2SV_ModEnd> ] ; res <S2SV_ModStart> long long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) <S2SV_ModEnd> ] ; res <S2SV_ModStart>. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } res = read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; }",0
51,<S2SV_ModStart> HASH_DISABLED ; } <S2SV_ModEnd> return apr_psprintf (,0
52,"<S2SV_ModStart> = 0 ; # if CONFIG_VP10_ENCODER if ( strcmp ( global -> codec -> name, ""vp10"" ) == 0 ) { ctrl_args = vp10_args ; ctrl_args_map = vp10_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp11"" ) == 0 ) { ctrl_args = vp11_args ; ctrl_args_map = vp11_arg_ctrl_map ; # endif # if CONFIG_VP12_ENCODER if ( strcmp ( global -> codec -> name, ""vp12"" ) == 0 ) { ctrl_args = vp12_args ; ctrl_args_map = vp12_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp12"" ) == 0 ) { ctrl_args = vp12_args ; ctrl_args_map = vp12_arg_ctrl_map ; # endif # if CONFIG_VP12_ENCODER } else if ( strcmp ( global -> codec -> name, ""vp12"" ) == 0 ) { ctrl_args = vp12_args ; ctrl_args_map =",0
53,"<S2SV_ModStart> 1 ; } <S2SV_ModEnd> if ( verify_checks <S2SV_ModStart> preverify_ok, callback_ctx ) ) { SSL_SESSION * sess = SSL_get1_session ( c -> ssl ) ; if (! sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } else { int ok = verify_checks ( c, preverify_ok, callback_ctx ) ; if (! sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } return 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
54,"<S2SV_ModStart> ; if ( fixed_length < AT91_AES_BLOCK_SIZE_BYTE ) { rc = - EINVAL ; goto exit ; } if ( memcmp ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE ) ) { rc = - EINVAL ; goto exit ; } if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) { rc = - EINVAL ; goto exit ; } if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) goto exit ; } if ( at91_aes_cmac ( data_length, data, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE ) ) { if ( memcmp ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE ) ) { rc = - EINVAL ; goto exit ; } if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) goto exit ; }",0
55,"<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const uint64_t bits_used <S2SV_ModStart> ; if ( cpi <S2SV_ModEnd> -> common. <S2SV_ModStart> KEY_FRAME ) { <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> -= bits_used ; cpi -> twopass. gf_group_bits -= bits_used ; cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; } else { cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; } if ( cpi -> common. frame_type == KEY_FRAME ) { cpi -> twopass. kf_group_bits += cpi -> rc. this_frame_target - bits_used ; cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; } else { cpi -> twopass. kf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
56,"<S2SV_ModStart> EOFOp 0x07 <S2SV_ModEnd> Image * image <S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; status = SetImageExtent ( image, exception ) ; if ( status == MagickFalse )",0
57,"<S2SV_ModStart> err_free_buf ; } dev_dbg ( & usbinterface -> dev, ""gtco <S2SV_blank> # <S2SV_blank> interfaces: <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> <S2SV_blank> <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNum",0
58,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
59,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> fd = xfmkstemp <S2SV_ModEnd> ( & tmpname <S2SV_ModStart> dir ) ) == NULL ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } <S2SV_ModEnd> copyfile ( lockfd",0
60,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; } else { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; },0
61,"<S2SV_ModStart> ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; }",0
62,"<S2SV_ModStart> void vp9_setup_dst_planes ( <S2SV_ModEnd> const YV12_BUFFER_CONFIG * <S2SV_ModStart> const YV12_BUFFER_CONFIG * src <S2SV_ModEnd> ) { uint8_t <S2SV_ModStart> uint8_t * const buffers <S2SV_ModEnd> [ 4 ] <S2SV_ModStart> 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & src -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,"<S2SV_ModStart> == READ ) { ssize_t ret = __blockdev_direct_IO ( iocb, inode, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; if ( ret < 0 ) return ret ; <S2SV_ModStart> == WRITE ) ret = __blockdev_direct_IO ( iocb, inode, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; } else get_block = ocfs2_dio_get_block <S2SV_ModEnd> ; return __blockdev_direct_IO",0
65,"<S2SV_ModStart> = false ; if ( fscanf ( f, ""%79s <S2SV_blank> %[^\\n]\\n"", def, strparm ) == 2 ) { if ( strparm [ 0 ] == \'""\' ) { isstring = true ; len = strlen ( strparm ) ; strcpy ( newstring, strparm + 1 ) ; } else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else sscanf ( strparm, ""%i"", & parm ) ; } else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else if ( strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", &",0
66,"<S2SV_ModStart> n ) { <S2SV_ModEnd> int all_whitespace = <S2SV_ModStart> ; int kind <S2SV_ModEnd> ; void * <S2SV_ModStart> ; PyCompilerFlags cf <S2SV_ModEnd> ; char * <S2SV_ModStart> ; char * <S2SV_ModEnd> str ; Py_ssize_t <S2SV_ModStart> ; PyObject * <S2SV_ModEnd> o ; Py_ssize_t <S2SV_ModStart> ; Py_ssize_t i <S2SV_ModStart> ; Py_ssize_t len <S2SV_ModEnd> ; Py_ssize_t i <S2SV_ModStart> ; Py_ssize_t i <S2SV_ModEnd> ; Py_DECREF ( <S2SV_ModStart> = PyUnicode_DecodeUTF8 ( expr_start, expr_end - expr_start, NULL ) ; if ( o == NULL ) return NULL ; len = expr_end - expr_start ; kind = PyUnicode_GET_KIND ( o ) ; data = PyUnicode_DATA ( o ) ; for ( i = 0 ; i < len ; i ++ ) { if (! Py_UNICODE_ISSPACE ( PyUnicode_READ ( kind, data, i ) ) { if (! Py_UNICODE_ISSPACE ( PyUnicode_READ ( kind, data, i ) ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ;",0
67,<S2SV_ModStart> string ) { <S2SV_ModEnd> while ( c,0
68,<S2SV_ModStart> size ) ; if (! px -> ft ) return FALSE,0
69,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; ND_TCHECK_16BITS ( length ) ; <S2SV_ModStart>, val_l ; ND_TCHECK_16BITS ( length ) ; <S2SV_ModStart> ptr ++ ; length <S2SV_ModEnd> = EXTRACT_16BITS ( <S2SV_ModStart> ptr ++ ; length <S2SV_ModEnd> = EXTRACT_16BITS ( <S2SV_ModStart> ptr ++ ; length <S2SV_ModEnd> = EXTRACT_16BITS ( <S2SV_ModStart> ptr ++ ; length <S2SV_ModEnd> = EXTRACT_16BITS ( <S2SV_ModStart> ptr ++ ; length <S2SV_ModEnd> = EXTRACT_16BITS ( <S2SV_ModStart> ptr ++ ; length <S2SV_ModEnd> = EXTRACT_16BITS ( <S2SV_ModStart> ptr ++ ; length <S2SV_ModEnd> = EXTRACT_16BITS ( <S2SV_ModStart> ptr ++ ; length <S2SV_ModEnd> = EXTRACT_16BITS ( <S2SV_ModStart> ptr ++ ; length <S2SV_ModEnd> = EXTRACT_16BITS ( <S2SV_ModStart> ptr ++ ; length <S2SV_ModEnd> = EXTRACT_16BITS ( <S2SV_ModStart> ptr ++ ; length <S2SV_ModEnd> = EXTRACT_16BITS ( <S2SV_ModStart> ptr ++ ; length <S2SV_ModEnd> = EXTRACT_16BITS ( <S2SV_ModStart> ptr ++ ; length <S2SV_ModEnd> = EXTRACT_16BITS ( <S2SV_ModStart> ptr ++ ; length <S2SV_ModEnd> = EXTRACT_16BITS ( <S2SV_ModStart> ptr ++ ; length <S2SV_ModEnd> = EXTRACT_16BITS ( <S2SV_ModStart> ptr ++ ; length <S2SV_ModEnd> = EXTRACT_16BITS",0
70,"<S2SV_ModStart> void ) { test_checkout_fails <S2SV_ModEnd> ( ""refs/heads/git_tilde1"", <S2SV_ModStart> "".git/foobar"" ) ; test_checkout_fails <S2SV_ModEnd> ( ""refs/heads/git_tilde1"", <S2SV_ModStart> "".git/foobar"" ) ; test_checkout_fails <S2SV_ModEnd> ( ""refs/heads/git_tilde1"", <S2SV_ModStart> "".git/foobar"" ) ; test_checkout_fails <S2SV_ModEnd> ( ""refs/heads/git_tilde1"",",0
71,"<S2SV_ModStart> int i ; const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; const int stride [ i ] = { src -> y_stride, src -> uv_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y ) ; } }",0
72,"<S2SV_ModStart> ; lock_sock ( sk ) ; if (! msg -> msg_name ) msg -> msg_name = kzalloc ( sizeof ( * msg ), GFP_KERNEL ) ; if (! msg -> msg_name ) msg -> msg_name = kzalloc ( sizeof ( * msg ), GFP_KERNEL ) ; if (! msg -> msg_name ) msg -> msg_name = kzalloc ( sizeof ( * msg ), GFP_KERNEL ) ; if (! msg -> msg_namelen ) msg -> msg_name = kzalloc ( sizeof ( * msg ), GFP_KERNEL ) ; if (! msg -> msg_name ) msg -> msg_name = kzalloc ( sizeof ( * msg ), GFP_KERNEL ) ; if (! msg -> msg_name ) msg -> msg_name = kzalloc ( sizeof ( * msg ), GFP_KERNEL ) ; if (! msg -> msg_name ) { msg -> msg_name = kzalloc ( sizeof ( * msg ), GFP_KERNEL ) ; msg -> msg_name = kzalloc ( sizeof",0
73,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
74,<S2SV_ModStart> user ) { <S2SV_ModEnd> cleanup_srcu_struct ( &,0
75,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen,1
76,"<S2SV_ModStart> * for_ch ; int <S2SV_ModEnd> is_async = 0 <S2SV_ModStart> ; if (! TYPE ( CHILD ( n, 0 ) ) ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } <S2SV_ModStart> ; if (! TYPE ( CHILD ( n, 0 ) ) ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } <S2SV_ModStart> ; for_ch = CHILD ( n, 1 + is_async ) ; if (! expression ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if ( NCH ( for_ch ) == 1 ) comp = comprehension ( Tuple ( t, Store, first -> lineno, first -> col_offset, c -> c_arena ) ; else comp = comprehension ( Tuple ( t, Store, first -> lineno, first -> col_offset, c -> c_arena ) ; if (! comp )",0
77,"<S2SV_ModStart> NULL ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= dst_state -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ;",0
78,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> write_mb_modes_kf ( const <S2SV_ModStart> * mi_8x8, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> * mi_8x8, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> ] ; const MODE_INFO * const above_mi = mi_8x8 [ - xd -> mi_stride ] ; const MODE_INFO * const left_mi = mi_8x8 [ - 1 ] ; const MB_MODE_INFO * const mbmi = & mi -> mbmi ; const BLOCK_SIZE bsize = mbmi -> sb_type ; if ( seg -> update_map ) write_segment_id ( w, seg, mbmi -> segment_id ) ; if ( seg -> update_map ) write_skip ( cpi, seg, mbmi -> segment_id ) ; if ( seg -> update_map ) write_segment_id ( w, seg, mbmi -> segment_id ) ; if ( seg -> update_map ) write_segment_id ( w, seg, mbmi -> segment_id ) ; if ( seg -> update_map ) write_segment_id",0
79,"<S2SV_ModStart> maxn ) { switch ( actions [ n ]. SWF_ACTIONRECORD. ActionCode ) { case SWFACTION_END : return 0 ; case SWFACTION_CONSTANTPOOL : decompileCONSTANTPOOL ( & actions [ n ] ) ; return 0 ; case SWFACTION_GOTOFRAME : return decompileGOTOFRAME ( n, actions, maxn, 1 ) ; case SWFACTION_GETURL2 : decompileGETURL2 ( & actions [ n ] ) ; return 0 ; case SWFACTION_PUSHDUP : decompilePUSHDUP ( & actions [ n ] ) ; return 0 ; case SWFACTION_STACKSWAP : decompileSTACKSWAP ( & actions [ n ] ) ; return 0 ; case SWFACTION_SETPROPERTY : decompileSETPROPERTY ( n, actions, maxn ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n, actions, maxn ) ; return 0 ; case SWFACTION_TRACE : decompileTRACE ( n, actions, maxn ) ; return 0 ; case SWFACTION_GETPROPERTY : decompileGETPROPERTY ( n, actions, maxn ) ; return 0 ;",0
80,"<S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( & prep -> pp_n ) ; <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> n = EXTRACT_32BITS <S2SV_ModStart> n >= 0 && ND_TTEST ( * ps ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %u/%s:%u"", EXTRACT_32BITS ( & ps -> slot ), ipaddr_string ( ndo, & ps -> page. p_sid ), EXTRACT_32BITS ( & ps -> page. p_uid ) ) ; ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( const struct pgstate * ) ie ; while ( -- n >= 0 && ND_TTEST ( * ps ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %u/%s:%u"", EXTRACT_32BITS ( & ps -> slot ), ipaddr_string ( ndo, & ps -> page. p_sid ), EXTRACT_32BITS ( & ps -> page. p_uid ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> %u/%s:%u"", ps -> nid, EXTRACT_32BITS ( & ps",0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> * ) * <S2SV_ModEnd> ( 2 + <S2SV_ModStart> -> nModuleArg ) ; sqlite3_int64 <S2SV_ModEnd> * azModuleArg ; <S2SV_ModStart> * * azModuleArg = sqlite3DbRealloc ( db, pTable -> azModuleArg, nBytes ) ; if ( azModuleArg == 0 ) { sqlite3DbFree ( db, zArg ) ; return 0 ; }",0
83,<S2SV_ModStart> ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ HBE_OPER_WIN_,0
84,<S2SV_ModStart> -> dmin ; if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc,0
85,"<S2SV_ModStart> bfq_idle_slice_timer_body ( struct bfq_data * bfqd, <S2SV_ModStart> bfqq ) { <S2SV_ModEnd> unsigned long flags <S2SV_ModStart> flags ) ; if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_TOO_IDLE ; else if ( bfqq -> queued [ 0 ] == 0 && bfqq -> queued [ 1 ] == 0 ) reason = BFQQE_TOO_IDLE ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT",0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,"<S2SV_ModStart> + x > origDataLength <S2SV_ModEnd> || diffPtr + <S2SV_ModStart> + x > origDataLength <S2SV_ModEnd> || extraPtr + <S2SV_ModStart> + y > origDataLength <S2SV_ModEnd> || extraPtr + <S2SV_ModStart> + y > origDataLength <S2SV_ModEnd> || extraPtr + <S2SV_ModStart> + y > origDataLength <S2SV_ModEnd> || extraPtr + <S2SV_ModStart> + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( diffPtr + x > diffBlock + diffBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } <S2SV_ModStart> + y > origDataLength <S2SV_ModEnd> || extraPtr + <S2SV_ModStart> + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; }",0
89,"<S2SV_ModStart> pktopts ) ; rcu_read_lock ( ) ; <S2SV_ModStart> np -> opt, rcu_dereference ( <S2SV_ModStart> np -> tclass )",0
90,"<S2SV_ModStart> ; if ( number_pixels > MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, 0 ) ) ) ) ) ) { MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_",0
91,"<S2SV_ModStart> data ) { # if CONFIG_VP9_HIGHBITDEPTH if ( data -> flags & VPX_CODEC_HIGHBITDEPTH ) return encoder_common_init_highbitdepth ( ctx, data -> flags & VPX_CODEC_HIGHBITDEPTH ) ; # else return encoder_common_init_highbitdepth ( ctx ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( data -> flags & VPX_CODEC_HIGHBITDEPTH ) return encoder_common_init_highbitdepth ( ctx ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( data -> flags & VPX_CODEC_HIGHBITDEPTH ) return encoder_common_init_highbitdepth ( ctx, data -> flags & VPX_CODEC_HIGHBITDEPTH ) ; # else return encoder_common_init_highbitdepth ( ctx ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( data -> flags & VPX_CODEC_HIGHBITDEPTH ) return encoder_common_init_highbitdepth ( ctx ) ; # endif",0
92,"<S2SV_ModStart> int Unpickler_ResizeMemoList ( UnpicklerObject <S2SV_ModEnd> * self, <S2SV_ModStart> new_size ) { <S2SV_ModEnd> assert ( new_size <S2SV_ModStart> ) { Py_ssize_t <S2SV_ModEnd> i ; PyMem_RESIZE",0
93,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> delta_q!= 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
94,"<S2SV_ModStart> mbmi. mv. as_int ; mv_bias ( ref_frame_sign_bias [ above -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ left -> mbmi. ref_frame ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ left -> mbmi. ref_frame ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ left -> mbmi. ref_frame ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ left -> mbmi. ref_frame ], ref_frame_sign_bias ) ;",0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } if ( unlikely ( m -> msg_name ) ) { m -> msg_name [ 0 ] = 0 ;,0
97,"<S2SV_ModStart> msicap ; pci_populate_msicap ( dev <S2SV_ModEnd>, msgnum,",0
98,"<S2SV_ModStart> REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'",0
99,"<S2SV_ModStart> vpx_codec_err_t res ; memset ( & ctx -> vp8_cfg, 0, sizeof ( ctx -> vp8_cfg ) ) ; <S2SV_ModStart> ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_w > ctx -> cfg. g_w ) || ( cfg -> g_h > ctx -> cfg. g_h ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_w > ctx -> cfg. g_w ) || ( cfg -> g_h > ctx -> cfg. g_h ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_w > ctx -> cfg. g_w ) || ( cfg -> g_h > ctx -> cfg. g_h ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_w > ctx -> cfg. g_w ) || ( cfg -> g_h > ctx -> cfg. g_h ) ) ERROR ( ""Cannot",0
100,<S2SV_ModStart> cpi ) { # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & VP9_HIGHBITDEPTH ) cpi -> cur_buf -> flags &= ~ VP9_HIGHBITDEPTH ; # else cpi -> cur_buf -> flags &= ~ VP9_HIGHBITDEPTH ; # endif <S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & VP9_HIGHBITDEPTH ) cpi -> cur_buf -> flags &= ~ VP9_HIGHBITDEPTH ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & VP9_HIGHBITDEPTH ) cpi -> cur_buf -> flags &= ~ VP9_HIGHBITDEPTH ; # endif <S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & VP9_HIGHBITDEPTH ) cpi -> cur_buf -> flags &= ~ VP9_HIGHBITDEPTH ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & VP9_HIGHBITDEPTH ),0
101,"<S2SV_ModStart> info -> si_code < 0 <S2SV_ModEnd> ) return - <S2SV_ModStart> - EPERM ; if ( info -> si_signo!= sig ) { info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) ; } <S2SV_ModEnd> info -> si_signo",0
102,"<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if ( ptr -> size > ( u32 ) ptr -> size - 8 ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG ( GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_",0
103,<S2SV_ModStart> = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> priv -> alg_priv -> caps & VPX_CODEC_CAP_ENCODER ) ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> priv -> caps & VPX_CODEC_CAP_ENCODER ) ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> priv -> caps & VPX_CODEC_CAP_ENCODER ) ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> priv -> caps & VPX_CODEC_CAP_ENCODER ) ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> priv -> caps & VPX_CODEC_CAP_ENCODER ) ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> priv -> caps & VPX_CODEC_CAP_ENCODER ) ) ctx -> err = VPX_CODEC_IN,0
104,"<S2SV_ModStart> void nfs4_state_set_mode_locked ( fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> == mode ) return ; if ( ( fmode & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { if ( ( fmode & FMODE_WRITE )!= ( state -> state & FMODE_WRITE ) ) { if ( ( fmode & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { list_move ( & state -> open_states, & state -> owner -> so_states ) ; } else { list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } } else { if ( ( fmode & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { if ( fmode & FMODE_WRITE ) list_move ( & state -> open_states, & state -> owner -> so_states ) ; list_move ( & state -> open_states, & state -> owner -> so_states ) ; } else { list_move ( & state -> open_states, & state -> owner -> so_states ) ; }",0
105,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageInfoBlob ( read_info, ( MagickProgressMonitor ) NULL, ( void * ) NULL ) ; if ( status == MagickFalse ) SetImageInfoBlob ( read_info, ( MagickProgressMonitor ) NULL, ( void * ) NULL ) ; if ( status == MagickFalse ) { SetImageInfoBlob ( read_info, ( MagickProgressMonitor ) NULL, ( void * ) NULL ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; status = SetImageInfoBlob ( read_info, ( MagickProgressMonitor ) NULL, ( void * ) NULL ) ; if ( status == MagickFalse ) SetImageInfoBlob ( read_info, ( MagickProgressMonitor ) NULL, ( void * ) NULL ) ; if ( status == MagickFalse ) { SetImageInfoBlob ( read_info, ( MagickProgressMonitor ) NULL, ( void * ) NULL ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; }",0
106,"<S2SV_ModStart> 0 ; } if ( elem. in_sg [ 0 ]. iov_base!= buf ) { virtqueue_push ( vq, & elem, len ) ; virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } if ( elem. in_sg [ 0 ]. iov_base!= buf ) { memcpy ( elem. in_sg [ 0 ]. iov_base, buf, len ) ; virtqueue_push ( vq, & elem, len ) ; virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } if ( elem. in_sg [ 0 ]. iov_base!= buf ) { memcpy ( elem. in_sg [ 0 ]. iov_base, buf, len ) ; virtqueue_push ( vq, & elem, len ) ; virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; }",0
107,"<S2SV_ModStart> i ] ), ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""expn[%d] <S2SV_blank> = <S2SV_blank> 0x%04x; <S2SV_blank> mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""expn[%d] <S2SV_blank> = <S2SV_blank> 0x%04x; <S2SV_blank> mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX",0
108,"<S2SV_ModStart> AV_PIX_FMT_PAL8 ; if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } else { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } else { if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; }",0
109,"<S2SV_ModStart> 1 ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } <S2SV_ModStart> 1 ) ; if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } <S2SV_ModStart> 1 ) ; if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } <S2SV_ModStart> 1 ) ; if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; }",0
110,"<S2SV_ModStart> image_noffset ) { const char * name = fit_get_name ( fit, noffset, NULL ) ; if (! strncmp ( name, FIT_SIG_NODENAME, strlen ( FIT_SIG_NODENAME ) ) ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) { printf ( "" <S2SV_blank> error!\\n%s <S2SV_blank> for <S2SV_blank> \'%s\' <S2SV_blank> hash <S2SV_blank> node <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> image <S2SV_blank> node\\n"", err_msg, fit_get_name ( fit, noffset, NULL ) ) ; } else if (! strncmp ( name, FIT_SIG_NODENAME, strlen ( FIT_SIG_NODENAME ) ) ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) { printf ( "" <S2SV_blank> error!\\n%s <S2SV_blank> for <S2SV_blank> \'%s\' <S2SV_blank> hash <S2SV_blank> node <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> image <S2SV_blank> node\\n"", err_msg ) ;",0
111,"<S2SV_ModStart> state -> rx_kfifo, CX23888_IR_RX_KFIFO_SIZE, GFP_KERNEL <S2SV_ModEnd> ) ) return <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> sd = & <S2SV_ModStart> = dev ; mutex_init ( & state -> rx_params_lock ) ; default_params = default_rx_params ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_tx_params ; mutex_init ( & state -> rx_params_lock ) ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_tx_params ; mutex_init ( & state -> tx_params_lock ) ; ret = cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; if ( ret == 0 ) { cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_tx_params ; mutex_init ( & state -> tx_params_lock ) ;",0
112,"<S2SV_ModStart> iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> cfg, vpx_codec_flags_t <S2SV_ModStart> ; else if ( ( flags & ( VPX_CODEC_USE_XMA | VPX_CODEC_USE_POSTPROC | VPX_CODEC_USE_INPUT_FRAGMENTS ) ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_ERROR_CONCEALMENT ) &&! ( iface -> caps & VPX_CODEC_CAP_ERROR_CONCEALMENT ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_",0
113,<S2SV_ModStart> value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
114,"<S2SV_ModStart> icmp_param ) ; ipc = rcu_dereference_protected ( net -> ipv4. ipcm_cookie, sock_owned_by_user ( rt -> dst. dev ) ) ; if ( ipc -> opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt ) ipc = rcu_dereference_protected ( net -> ipv4. ipcm_cookie, sock_owned_by_user ( rt -> dst. dev ), sock_owned_by_user ( rt -> dst. dev ) ) ; if ( ipc -> opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt",0
115,<S2SV_ModStart> VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_X,0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,"<S2SV_ModStart> -> counter ) ; p = xdr_reserve_space ( xdr, 4 + sizeof ( * arg ) ) ; if (! xdr_reserve_space ( xdr, 4 + sizeof ( * arg ) ) ) { __be32 * p ; p = xdr_reserve_space ( xdr, 4 + sizeof ( * arg ) ) ; if (! xdr_reserve_space ( xdr, 4 + sizeof ( * arg ) ) { __be32 * p = xdr_reserve_space ( xdr, 4 + sizeof ( * arg ) ) ; if (! xdr_reserve_space ( xdr, 4 + sizeof ( * arg ) ) ) { __be32 * p ; p = xdr_reserve_space ( xdr, 4 + sizeof ( * arg ) ) ; if (! xdr_reserve_space ( xdr, 4 + sizeof ( * arg ) ) { __be32 * p = xdr_reserve_space ( xdr, 4 + sizeof ( * arg ) ) ; if (! xdr_reserve_space ( xdr, 4 + sizeof ( * arg ) ) ) { __",0
118,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ""modify_bar_registration: <S2SV_blank> bypass <S2SV_blank> for <S2SV_blank> pci-gvt\\n"" ) ; return - ENODEV <S2SV_ModEnd> ; } switch <S2SV_ModStart> break ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
119,<S2SV_ModStart> : case 0x0a : case 0x0b : case 0x0c : case 0x0f :,0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,"<S2SV_ModStart> goto trunc ; if ( lshp -> ls_length < 2 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_router ), lshp -> ls_seq, lshp -> ls_age, lshp -> ls_length ) ) ; } else { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_router ), lshp -> ls_seq, lshp -> ls_age, lshp -> ls_length ) ) ; }",0
122,<S2SV_ModStart> } else { if (! ( flags & SPLICE_F_NONBLOCK ) && ibuf -> flags & PIPE_BUF_FLAG_GIFT ) { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; pipe_buf_mark_unmergeable ( obuf ) ; } <S2SV_ModStart> } else { if (! ( flags & SPLICE_F_NONBLOCK ) && ibuf -> flags & PIPE_BUF_FLAG_GIFT ) { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; pipe_buf_mark_unmergeable ( obuf ) ; } else if (! ( flags & SPLICE_F_NONBLOCK ) && ibuf -> flags & PIPE_BUF_FLAG_GIFT ) { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; pipe_buf_mark_unmergeable ( obuf ) ; },0
123,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
124,"<S2SV_ModStart> = open ( dev_path <S2SV_ModEnd>, O_RDWR | <S2SV_ModStart> O_CLOEXEC ) ; if ( p_dev -> fd < 0 ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%d"", __FUNCTION__, errno ) ; p_dev -> fd = - 1 ; }",0
125,"<S2SV_ModStart> costs, const vpx_tree <S2SV_ModEnd> * tree, <S2SV_ModStart> c ) { const vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> i / 2 ] ; const vpx_tree_index <S2SV_ModEnd> ii = tree <S2SV_ModStart> i + b ] ; if ( ii <= 0 ) costs [ - ii ] = cc ; else costs [ - ii ] = cc ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
126,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
127,"<S2SV_ModStart> & 0xffff ; if ( synth_devs [ dev ] -> load_patch ) err = <S2SV_ModEnd> synth_devs [ dev <S2SV_ModStart> -> load_patch ( dev <S2SV_ModEnd>, buf,",0
128,"<S2SV_ModStart> fadst16 ( const tran_low_t * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> * output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t x0 = input [ 15 ] ; tran_high_t x1 = input [ 0 ] ; tran_high_t x2 = input [ 1 ] ; tran_high_t x3 = input [ 2 ] ; tran_high_t x4 = input [ 3 ] ; tran_high_t x5 = input [ 4 ] ; tran_high_t x6 = input [ 5 ] ; tran_high_t x7 = input [ 6 ] ; tran_high_t x8 = input [ 7 ] ; tran_high_t x9 = input [ 8 ] ; tran_high_t x10 = input [ 9 ] ; tran_low_t x11 = input [ 10 ] ; tran_high_t x12 = input [ 3 ] ; tran_high",0
129,<S2SV_ModStart> ; # if HAVE_EDSP <S2SV_ModEnd> flags |= HAS_EDSP <S2SV_ModStart> # endif # if HAVE_MEDIA <S2SV_ModEnd> flags |= HAS_MEDIA <S2SV_ModStart> # endif # if HAVE_NEON <S2SV_ModEnd> flags |= HAS_NEON,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
131,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> count_segs_sb ( VP9_COMP <S2SV_ModStart> const tile, <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * <S2SV_ModEnd> mi_8x8, int <S2SV_ModStart> MODE_INFO * * <S2SV_ModEnd> mi_8x8, int <S2SV_ModStart> MODE_INFO * * <S2SV_ModEnd> temporal_predictor_count, int <S2SV_ModStart> BLOCK_SIZE bsize ) { <S2SV_ModEnd> const int bs <S2SV_ModStart> ; bh = num_8x8_blocks_high_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; if ( bw == bs && bh == bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, bs, mi_row, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, bs, bs, mi_row, mi_col ) ; count_segs ( cpi, tile, mi_8x8, no",0
132,<S2SV_ModStart> break ; if (! ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) && clientsArePaused ( ),0
133,"<S2SV_ModStart> = 0 ; err = ext4_journal_get_blocks ( handle, mpd -> inode, next, max_blocks, & new, get_blocks_flags ) ; if ( err ) { ext4_msg ( mpd -> inode -> i_sb, KERN_CRIT, ""delayed <S2SV_blank> block <S2SV_blank> allocation <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> at <S2SV_blank> "" ""logical <S2SV_blank> offset <S2SV_blank> %llu <S2SV_blank> with <S2SV_blank> max <S2SV_blank> blocks <S2SV_blank> %zd <S2SV_blank> with <S2SV_blank> error <S2SV_blank> %d\\n"", mpd -> inode -> i_ino, err ) ; return err ; } if ( mpd -> b_state & ( 1 << BH_Mapped ) ) { ext4_msg ( mpd -> inode -> i_sb, KERN_CRIT, ""delayed <S2SV_blank> block <S2SV_blank> allocation <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> at <S2SV_blank> "" ""logical <S2SV_blank> offset <S2SV_blank> %llu <S2SV_blank> with <S2SV_blank> max <S2SV_blank> blocks <S2SV_blank> %zd <S2SV_blank> with <S2SV_blank> error <S2SV_blank> %d\\n"", mpd -> inode -> i_ino, err ) ; return err ; }",0
134,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart>, handle, & head -> ai_flags, & head -> ai_family, & head -> ai_socktype, & head -> ai_protocol, & head -> ai_addrlen, & tail -> ai_addrlen, NULL, & canonnamelen, NULL )!= OE_OK ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( oe_syscall_getaddrinfo_read_ocall ( & retval, handle, & head -> ai_flags, & head -> ai_family, & head -> ai_socktype, & head -> ai_protocol, & head -> ai_addrlen, NULL, & canonnamelen, NULL )!= OE_OK ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval == - 1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_",0
135,"<S2SV_ModStart> = '\\0' ; if ( osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> = '\\0' ; if ( osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> = '\\0' ; if ( osStrchr <S2SV_ModEnd> ( token,",0
136,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
137,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int set_registers ( pegasus_t * pegasus, __u16 indx, __u16 <S2SV_ModEnd> size, void <S2SV_ModStart> data ) { int ret ; ret = usb_control_msg ( pegasus -> usb, 0, PEGASUS_REQ_SET_REGS, PEGASUS_REQT_WRITE, 0, indx, data, size, 100 ) ; if ( ret < 0 ) netif_dbg ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d\\n"", __func__, ret ) ; if ( ret < 0 ) netif_dbg ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d\\n"", __func__, ret ) ; if ( ret < 0 ) netif_dbg ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d\\n"", __func__, ret ) ; return ret ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
138,"<S2SV_ModStart> asdl_seq * body <S2SV_ModEnd>, PyArena * <S2SV_ModStart> ; return p <S2SV_ModEnd> ; } <S2SV_null>",0
139,"<S2SV_ModStart> src, int64_t <S2SV_ModEnd> ts_start, int64_t <S2SV_ModStart> ts_end, unsigned int <S2SV_ModEnd> flags ) { <S2SV_ModStart> 4 ; # endif # if USE_PARTIAL_COPY int row, col, active_end ; # if USE_PARTIAL_COPY if ( ctx -> max_sz == 1 && active_map &&! flags ) { for ( row = 0 ; row < mb_rows ; ++ row ) { for ( col = 0 ; col < mb_cols ; ++ col ) { if ( active_map [ active_end ] ) break ; } vp9_copy_and_extend_frame ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) << 4 ) ; } else { vp9_copy_and_extend_frame ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) << 4 ) ; } active_map += mb_cols ; } } else { vp9_copy_and_extend_frame ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) << 4 ) ;",0
140,"<S2SV_ModStart> sharpness ; const int min_filter_level = 0 ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( cm -> frame_type == KEY_FRAME ) filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( cm -> frame_type == KEY_FRAME ) filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; lf -> filter_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ; if ( method == LPF_PICK_FROM_Q ) { search_filter_level ( sd, cpi, method == LPF_PICK_FROM_Q ) ; } else { search_filter_level ( sd, cpi, method == LPF_PICK_FROM_Q ) ;",0
141,<S2SV_ModStart> case BTA_DM_DISABLE_EVT : { BD_NAME bdname ; bt_status_t status ; status = btif_storage_get_adapter_property ( & bdname ) ; if ( status == BT_STATUS_SUCCESS ) { BT_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } else { BT_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } if ( status == BT_STATUS_SUCCESS ) { BT_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } else { BT_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } # if defined ( BLE_INCLUDED ) && ( BLE_INCLUDED == TRUE ) BTA_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_ENABLED ) ) { BTA_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_ENABLED ) ; } # endif,0
142,"<S2SV_ModStart> : { int a = getnum ( L, fmt, MAXALIGN ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; h -> align = a ; return ; } case '!' : { int a = getnum ( L, fmt, MAXALIGN ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; h -> align = a ; return ; } case '!' : { int a = getnum ( L, fmt, MAXALIGN ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank>",0
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,"<S2SV_ModStart> vpx_codec_err_t res ; <S2SV_ModEnd> if (! <S2SV_ModStart> (! data ||! data_sz <S2SV_ModEnd> ) ) res <S2SV_ModStart> VPX_CODEC_ERROR ; else if (! ctx -> priv -> alg_priv ) res = VPX_CODEC_ERROR ; else if (! ctx -> iface -> dec. decode ) res = VPX_CODEC_INVALID_PARAM ; else if (! ctx -> priv -> alg_priv -> dec. decode <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> priv -> alg_priv, data, data_sz, user_priv, deadline ) ) res = VPX_CODEC_ERROR ; else { res = ctx -> iface -> dec. decode ( ctx -> priv -> alg_priv, data, data_sz, user_priv, deadline ) ; } return SAVE_STATUS ( ctx, res ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
145,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> isofs_read_inode ( struct <S2SV_ModStart> inode ) ; if ( de -> name_len > inode -> i_sb -> s_blocksize ) { if ( de -> name_len > inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize ) { if ( de -> name_len > inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize ) { if ( de -> name_len > inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize ) { if ( de -> name_len > inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize ) { if ( de -> name_len > inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize ) { if ( de -> name_len > inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize - inode -> i_sb,0
146,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> = sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> = sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> = sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> = sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> = sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> = sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> = sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> = sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3",0
147,<S2SV_ModStart> self ) { if ( self -> dict ),0
148,"<S2SV_ModStart> ; for ( ; a && i < count ; ++ i ) { n = cJSON_CreateString ( strings [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; }",0
149,"<S2SV_ModStart> asdl_seq * type_ignores <S2SV_ModEnd> ; if ( <S2SV_ModStart>, & PyId_type_ignores ) ) { int res <S2SV_ModEnd> ; Py_ssize_t len <S2SV_ModStart> ; Py_ssize_t i <S2SV_ModEnd> ; tmp = <S2SV_ModStart>, & PyId_type_ignores ) ; if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } type_ignores = _PyObject_GetAttrId ( obj, & PyId_type_ignores ) ; if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,"<S2SV_ModStart> msg ) ; if ( msg_sys -> msg_name ) memcpy ( & addr, msg_sys -> msg_name, sizeof ( addr ) ) ; else memcpy ( & addr, msg_sys -> msg_name, sizeof ( addr ) ) ;",0
152,<S2SV_ModStart> inode ) ; struct metapath_dinode * ip_d = ( struct metapath_dinode * ) bh_map ; struct metapath * mp = ( struct metapath * ) inode -> i_sb -> s_fs_info ; struct metapath_dinode * dt = ( struct metapath_dinode * ) ip_d ; struct metapath_dinode * dt = ( struct metapath_dinode * ) ip_d ; struct metapath_dinode * dt = ( struct metapath_dinode * ) bh_map ; struct metapath_dinode * dt = ( struct metapath_dinode * ) inode -> i_sb -> s_fs_info ; struct metapath_dinode * dt = ( struct metapath_dinode * ) ip_d ; struct metapath_dinode * dt = ( struct metapath_dinode * ) ip_d ; struct metapath_dinode * dt = ( struct metapath_dinode * ) bh_map ; struct metapath_,0
153,"<S2SV_ModStart>, vpx_codec_iface_name ( <S2SV_ModEnd> global -> codec <S2SV_ModStart> ( ) ) ) ; fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( input -> use_i420 ) { fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( input -> use_i420 ) { fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( input -> use_i420 ) { fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; }",0
154,"<S2SV_ModStart> ; if ( value == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> value <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; }",0
155,"<S2SV_ModStart> ( copy_file ( ""/etc/skel/.zshrc"" <S2SV_ModEnd>, fname, <S2SV_ModStart> ( copy_file ( ""/etc/skel/.zshrc"" <S2SV_ModEnd>, fname, <S2SV_ModStart> ( copy_file ( ""/etc/skel/.zshrc"" <S2SV_ModEnd>, fname, <S2SV_ModStart> ( copy_file ( ""/etc/skel/.cshrc"" <S2SV_ModEnd>, fname, <S2SV_ModStart> ( copy_file ( ""/etc/skel/.cshrc"" <S2SV_ModEnd>, fname, <S2SV_ModStart> ( copy_file ( ""/etc/skel/.cshrc"" <S2SV_ModEnd>, fname, <S2SV_ModStart> ( copy_file ( ""/etc/skel/.cshrc"" <S2SV_ModEnd>, fname, <S2SV_ModStart> ( copy_file ( ""/etc/skel/.cshrc"" <S2SV_ModEnd>, fname, <S2SV_ModStart> ( copy_file ( ""/etc/skel/.cshrc"" <S2SV_ModEnd>, fname, <S2SV_ModStart> ( copy_file ( ""/etc/skel/.cshrc"" <S2SV_ModEnd>, fname, <S2SV_ModStart> ( copy_file ( ""/etc/skel/.cshrc"" <S2SV_ModEnd>, fname, <S2SV_ModStart> ( copy_file ( ""/etc/skel/.cshrc"" <S2SV_ModEnd>, fname, <S2SV_ModStart> ( copy_file ( ""/etc/skel/.csh",0
156,<S2SV_ModStart> msix_tab_size % 4096 <S2SV_ModEnd> == 0 ),0
157,<S2SV_ModStart> (! js_regexec <S2SV_ModEnd> ( re ->,0
158,"<S2SV_ModStart> case OFreshOID : caml_set_oo_id ( ( value ) dest ) ; sp -- ; break ; case OShift : * dest += sp -> arg ; if ( -- ( sp -> arg ) == 0 ) sp -- ; break ; case OShift : * dest += sp -> arg ; if ( -- ( sp -> arg ) == 0 ) sp -- ; break ; case OShift : * dest += sp -> arg ; if ( -- ( sp -> arg ) == 0 ) sp -- ; break ; case OShift : * dest += sp -> arg ; if ( -- ( sp -> arg ) == 0 ) sp -- ; break ; case OFreshOID : if ( Int_val ( Field ( ( value ) dest, 1 ) ) >= 0 ) caml_set_oo_id ( ( value ) dest ) ; sp -- ; break ; case OFreshOID : if ( Int_val ( Field ( ( value ) dest, 1 ) ) >= 0 ) caml_set_oo_id ( ( value ) dest ) ; sp -- ; break ; case OFreshOID : if ( Int_val ( Field ( ( value ) dest, 1 ) ) >= 0 ) caml_set_oo_id",0
159,"<S2SV_ModStart> ; ier = ksz8851ReadReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, KSZ8851_ISR ) ; if ( ( isr & KSZ8851_ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_TXIS <S2SV_ModEnd> ) ; n <S2SV_ModStart> ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } if ( ( isr & KSZ8851_ISR_RXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_RXIS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_IER",0
160,"<S2SV_ModStart> void encode_quantization ( <S2SV_ModEnd> VP9_COMMON * cm <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
161,"<S2SV_ModStart> msglen ) < 0 ) { BTIF_TRACE_ERROR ( ""failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> (%s)"", strerror ( errno ) ) ; }",0
162,"<S2SV_ModStart> ; if ( ( peerec = d2i_EC_PUBKEY_bio ( peerec, NULL ) ) ) { if (! ( localrsa = d2i_RSAPublicKey_bio ( peerec, NULL ) ) ) { if (! ( localec = d2i_EC_PUBKEY_bio ( peerec, NULL ) ) ) { if (! ( localrsa = d2i_RSAPublicKey_bio ( peerec, NULL ) ) ) { if (! ( localec = d2i_EC_PUBKEY_bio ( peerec, NULL ) ) ) { if (! ( localec = d2i_EC_PUBKEY_bio ( peerec, NULL ) ) ) { if (! ( localec = d2i_EC_PUBKEY_bio ( peerec, NULL ) ) ) { if (! ( localec = d2i_EC_PUBKEY_bio ( peerec, NULL ) ) ) { if (! ( localec = d2i_EC_PUBKEY_bio ( peerec, NULL ) ) ) { if (! ( localec = d2i_EC_PUBKEY_bio ( peerec,",0
163,"<S2SV_ModStart> t1_getline ( ) ; if ( strcmp ( t1_buf_array, t1_line_array )!= 0 ) { strcpy ( t1_buf_array, t1_line_array ) ; strcpy ( t1_line_array, t1_buf_array ) ; strcpy ( t1_buf_array, t1_buf_array ) ; strcpy ( t1_line_array, t1_buf_array ) ; t1_line_ptr = eol ( t1_buf_array ) ; t1_line_ptr = eol ( t1_line_array ) ; } else { strcpy ( t1_buf_array, t1_line_array ) ; strcpy ( t1_buf_array, t1_buf_array ) ; strcpy ( t1_line_array, t1_buf_array ) ; strcpy ( t1_buf_array, t1_buf_array ) ; t1_line_ptr = eol ( t1_buf_array ) ; t1_line_ptr = eol ( t1_line_array ) ;",0
164,"<S2SV_ModStart> BLOCK_SIZE bsize, <S2SV_ModEnd> BLOCK_SIZE subsize ) <S2SV_ModStart> BLOCK_SIZE subsize ) { <S2SV_ModEnd> int bsl = <S2SV_ModStart> / 4, hbs = b_width_log2_lookup [ bsize ] <S2SV_ModEnd> ; PARTITION_TYPE partition <S2SV_ModStart> case PARTITION_NONE : * get_sb_index ( x, subsize ) = 0 ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; break ; case PARTITION_VERT : * get_sb_index ( x, subsize ) = 1 ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; if ( mi_col + hbs < cm -> mi_cols ) { * get_sb_index ( x, subsize ) = 1 ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> m",0
165,"<S2SV_ModStart> KEY_NEED_READ ) ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( key -> type -> read ) ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( key -> type -> read ) ret = - EOPNOTSUPP ; if ( ret == 0 ) ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( key -> type -> read ) ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; if ( ret == 0 ) ret = - EOPNOTSUPP <S2SV_ModEnd> ; if (",0
166,<S2SV_ModStart> u4_first_slice_in_pic ) { if ( 0 == ps_dec -> u1_first_slice_in_pic ) { if ( 0 == ps_dec -> u2_first_slice_in_pic ) { if ( 0 == ps_dec -> u2_first_slice_in_pic ) { if ( 0 == ps_dec -> u2_first_slice_in_pic ) { if ( 0 == ps_dec -> u2_first_slice_in_pic ) { if ( 0 == ps_dec -> u2_first_slice_in_pic ) { if ( 0 == ps_dec -> u2_first_slice_in_pic ) { if ( 0 == ps_dec -> u2_first_slice_in_pic ) { if ( 0 == ps_dec -> u2_first_slice_in_pic ) { if ( 0 == ps_dec -> u2_first_slice_in_pic ) { if ( 0 == ps_dec -> u2_first_slice_in_pic ) { if ( 0 == ps_dec -> u2_first_slice_in_pic ) { if,0
167,"<S2SV_ModStart> ; dst_known = tnum_is_const <S2SV_ModEnd> ( dst_reg -> <S2SV_ModStart> case BPF_ADD : <S2SV_ModEnd> if ( signed_add_overflows <S2SV_ModStart> case BPF_SUB : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } <S2SV_ModStart> case BPF_SUB : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; }",0
168,<S2SV_ModStart> ; if ( cifs_sb -> mnt_cifs_flags & CIFS_MOUNT_POSIX_PATHS ) posix_open = ( direntry -> d_inode -> i_sb -> mnt_cifs_flags & CIFS_MOUNT_POSIX_PATH )? posix_open : ( direntry -> d_inode -> i_sb -> mnt_cifs_flags & CIFS_MOUNT_POSIX_PATH ) ; else posix_open = ( direntry -> d_inode -> i_sb -> mnt_cifs_flags & CIFS_MOUNT_POSIX_PATH )? posix_open : ( d_inode -> i_sb -> mnt_cifs_flags & CIFS_MOUNT_POSIX_PATH )? posix_open : ( direntry -> d_inode -> i_sb -> mnt_cifs_flags & CIFS_MOUNT_POSIX_PATH )? posix_open : ( direntry -> d_inode -> i_sb -> mnt_cifs_flags & CIFS_MOUNT_PO,0
169,"<S2SV_ModStart> ; if ( rcu_dereference_protected ( tp -> inet_opt, sock_owned_by_user ( sk ) ) ) { if ( rcu_dereference_protected ( tp -> inet_opt, sock_owned_by_user ( sk ) ) == NULL ) { if ( rcu_dereference_protected ( tp -> inet_opt, sock_owned_by_user ( sk ) ) == NULL ) { NET_INC_STATS_BH ( sock_net ( sk ), LINUX_MIB_SYNCOOKIESFAILED ) ; goto out ; } if ( rcu_dereference_protected ( tp -> inet_opt, sock_owned_by_user ( sk ) ) == NULL ) { if ( rcu_dereference_protected ( tp -> inet_opt, sock_owned_by_user ( sk ) ) == NULL ) { NET_INC_STATS_BH ( sock_net ( sk ), LINUX_MIB_SYNCOOKIESFAILED ) ; goto out ; }",0
170,"<S2SV_ModStart> svc_ctx ) { <S2SV_ModEnd> SvcInternal * const <S2SV_ModStart> const si = <S2SV_ModEnd> get_svc_internal ( svc_ctx <S2SV_ModStart> svc_ctx ) ; <S2SV_ModEnd> svc_log_reset ( svc_ctx <S2SV_ModStart> svc_ctx ) ; <S2SV_ModEnd> svc_log_reset ( svc_ctx <S2SV_ModStart> svc_ctx ) ; <S2SV_ModEnd> svc_log_reset ( svc_ctx <S2SV_ModStart> svc_ctx ) ; <S2SV_ModEnd> svc_log_reset ( svc_ctx <S2SV_ModStart> svc_ctx ) ; <S2SV_ModEnd> svc_log_reset ( svc_ctx <S2SV_ModStart> ; for ( i = 0 ; i < <S2SV_ModEnd> si -> layers <S2SV_ModStart> ++ i ) { number_of_frames = encode_frame_count ; if ( svc_ctx -> encoding_mode == ALT_INTER_LAYER_PREDICTION_IP && ( i == 1 || i == 3 ) ) { number_of_frames -= number_of_keyframes ; } svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes=[%u]\\n"", i, ( double ) si -> psnr_sum [ i ]",0
171,"<S2SV_ModStart> -> sb_buffer ) { VTermScreenCell * sb_buffer = screen -> sb_buffer ; <S2SV_ModStart> -> sb_buffer ) { VTermScreenCell * sb_buffer = ( VTermScreenCell * ) vterm_allocator_malloc ( screen -> vt, sb_buffer ) ; sb_buffer = ( VTermScreenCell * ) vterm_allocator_malloc ( screen -> vt, sb_buffer ) ; sb_buffer = ( VTermScreenCell * ) vterm_allocator_malloc ( screen -> vt, sb_buffer ) ; } if ( sb_buffer ) { VTermScreenCell * sb_buffer = ( VTermScreenCell * ) vterm_allocator_malloc ( screen -> vt, sb_buffer ) ; sb_buffer = ( VTermScreenCell * ) vterm_allocator_malloc ( screen -> vt, sb_buffer ) ; sb_buffer = ( VTermScreenCell * ) vterm_allocator_malloc ( screen -> vt, sb_buffer ) ; sb_buffer = ( VTermScreenCell * ) vterm_allocator_malloc ( screen -> vt, sb_buffer ) ; sb_buffer =",0
172,<S2SV_ModStart> n ) { <S2SV_ModEnd> int in_named_escape = <S2SV_ModStart> ; for ( ; * str < end ; ( * str ) ++ ) { char ch = * * str ; if (! in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '{' ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done,0
173,"<S2SV_ModStart> = create_dump_dir_from_problem_data ( pd <S2SV_ModEnd>, g_settings_dump_location )",0
174,<S2SV_ModStart> 0 ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> width ) ) { if ( ( y1 + w1 ) > ( ptr,0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
176,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) ; this_mv <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; in_what <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; in_what <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; in_what <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; in_what <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; in_what <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + in_what_stride <S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) ; in_what <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; in_what <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; in_what <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; in_what <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; in_what <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; in_what",0
177,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> void encode_nonrd_sb_row ( <S2SV_ModEnd> VP9_COMP * cpi <S2SV_ModStart> int mi_col ; <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * <S2SV_ModEnd> mi_8x8 = cm <S2SV_ModStart> idx_str = cm <S2SV_ModEnd> -> mi_grid_visible + <S2SV_ModStart> mi_col ; MODE_INFO * <S2SV_ModEnd> prev_mi_8x8 = cm <S2SV_ModStart> -> prev_mi_grid_visible + idx_str <S2SV_ModStart> MODE_INFO * * <S2SV_ModEnd> prev_mi_8x8 = cm <S2SV_ModStart> -> prev_mi_grid_visible + idx_str ; BLOCK_SIZE bsize ; cpi -> mb. source_variance = UINT_MAX ; vp9_zero ( cpi -> mb. pred_mv ) ; switch ( cpi -> sf. partition_search_type ) { case VAR_BASED_PARTITION : choose_partitioning ( cpi, tile, mi_row, mi_col ) ; nonrd_use_partition ( cpi, tile, mi_row, mi_col, BLOCK_64X64",0
178,"<S2SV_ModStart> ; dh = skb_header_pointer ( skb, dataoff, sizeof ( _dh ), & dh ) ; if ( dh == NULL ) goto out_invalid ; state = dccp_state_table [ CT_DCCP_ROLE_CLIENT ] [ dh -> dccph_type ] [ CT_DCCP_NONE ] ; switch ( state ) { case CT_DCCP_REQUEST : break ; case CT_DCCP_REPLY : break ; case CT_DCCP_INVALID : msg = ""nf_ct_dccp: <S2SV_blank> invalid <S2SV_blank> state <S2SV_blank> transition <S2SV_blank> "" ; goto out_invalid ; } if ( LOG_INVALID ( net, IPPROTO_DCCP ) ) nf_log_packet ( net, nf_ct_l3num ( ct ), 0, NULL, NULL, NULL, ""%s"", msg ) ; return false ; } if ( LOG_INVALID ( net, IPPROTO_DCCP ) ) nf_log_packet ( net, nf_ct_l3num ( ct ), 0, skb, NULL, NULL, NULL, ""%s"", msg ) ; return false ;",0
179,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_options_get_finish ( struct <S2SV_ModStart> * optp, struct ip_options_rcu <S2SV_ModEnd> * opt, <S2SV_ModStart> int optlen ) { struct ip_options_rcu * opt = rcu_dereference_protected ( net -> ipv4. ip_options, rcu_dereference_protected ( net -> ipv4. ip_options, rcu_dereference_protected ( net -> ipv4. ip_options, rcu_dereference_protected ( net -> ipv4. ip_options, rcu_dereference_protected ( net -> ipv4. ip_options, rcu_dereference_protected ( net -> ipv4. ip_options, rcu_dereference_protected ( net -> ipv4. ip_options, rcu_dereference_protected ( net -> ipv4. ip_options, rcu_dereference_protected ( net -> ipv4. ip_options, rcu_dereference_protected ( net -> ipv4. ip_options, rcu_dereference ( net -> ipv4. ip_options",0
180,"<S2SV_ModStart> ""Upgrade"" ) ; if ( connection == NULL || strcmp ( connection, ""keep-alive"" )!= 0 )",0
181,<S2SV_ModStart> rpcap_findalldevs_if * findalldevs_if <S2SV_ModEnd> ; uint16 nif <S2SV_ModStart> 0 ; } findalldevs_if = NULL ; for ( d = alldevs ; d!= NULL ; d = d -> next ) { nif ++ ; if ( d -> description ) { if ( strlen ( d -> description ) ) { if ( strlen ( d -> name ) ) { if ( strlen ( d -> name ) ) { if ( strlen ( d -> description )!= strlen ( d -> name ) ) { if ( strlen ( d -> name )!= strlen ( d -> name ) { if ( strlen ( d -> description )!= strlen ( d -> description ) ) { if ( strlen ( d -> name )!= strlen ( d -> name ) ) { if ( strlen ( d -> description )!= strlen ( d -> description ) ) { if ( strlen ( d -> name ) ) { if ( strlen ( d -> name ) ) { if ( strlen ( d -> name )!= strlen ( d -> name ) ) { if ( strlen ( d -> name )!= strlen ( d -> name ) ) { if ( strlen ( d -> description )!= strlen ( d -> description ) ) { if ( strlen ( d,0
182,"<S2SV_ModStart> ; struct dump_dir <S2SV_ModEnd> dd = dd_create <S2SV_ModStart> DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; }",0
183,"<S2SV_ModStart> 1 ) ; if ( ( image -> columns % 2 )!= 0 ) { for ( bit = 0 ; bit < 8 ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 4 )!= 0 ) { for ( bit = 0 ; bit < 4 ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } if ( ( image -> columns % 4 )!= 0 ) { for ( bit = 0 ; bit < 4 ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; SetPixelRG",0
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> t1, t2 <S2SV_ModStart> ; BN_ULONG c1, c2, c3 ; r [ 0 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 1, 0, c2, c3 ) ; r [ 1 ] = c2 ; c2 = 0 ; sqr_add_c ( a, 2, 0, c2, c3 ) ; r [ 2 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 1, 0, c2, c3 ) ; r [ 3 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 2, 0, c2, c3 ) ; r [ 4 ] = c2 ; c2 = 0 ; sqr_add_c ( a, 3, 0, c2, c3 ) ; r [ 5 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 1, 0, c2, c3 ) ; r [ 6 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 2, 0,",0
185,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
186,"<S2SV_ModStart> = len ; if (! ND_TTEST2 ( bp [ 0 ], len ) ) goto trunc ; <S2SV_ModStart> = len ; if (! ND_TTEST2 ( bp [ 0 ], len ) ) goto trunc ; <S2SV_ModStart> = len ; bp2 : if (! ND_TTEST2 ( bp [ 0 ], len ) ) goto trunc ; <S2SV_ModStart> = len ; bp2 : if (! ND_TTEST2 ( bp [ 0 ], len ) ) goto trunc ; <S2SV_ModStart> = len ; if (! ND_TTEST2 ( bp [ 0 ], len ) ) goto trunc ; <S2SV_ModStart> = len ; bp2 : if (! ND_TTEST2 ( bp [ 0 ], len ) ) goto trunc ; <S2SV_ModStart> = len ; bp2 : if (! ND_TTEST2 ( bp [ 0 ], len ) ) goto trunc ; <S2SV_ModStart> = len ; bp2 : if (! ND_TTEST2 ( bp [ 0 ], len ) ) goto trunc ; <S2SV_ModStart> = len ; bp2 : if (! ND_TTEST2 ( bp [ 0 ], len ) ) goto trunc ;",0
187,<S2SV_ModStart> (! dumpable <S2SV_ModEnd> &&! ptrace_has_cap <S2SV_ModStart> ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE,0
188,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
189,<S2SV_ModStart> i1_sei_mastering_disp_colour_vol_params_present_flag = 1 <S2SV_ModEnd> ; ps_codec -> <S2SV_ModStart> i1_sei_mastering_disp_colour_vol_params_present_flag = 1 <S2SV_ModEnd> ; ps_codec -> <S2SV_ModStart> i1_sei_mastering_disp_colour_vol_params_present_flag = 1 <S2SV_ModEnd> ; ps_codec -> <S2SV_ModStart> i1_sei_mastering_disp_colour_vol_params_present_flag = 1 <S2SV_ModEnd> ; ps_codec -> <S2SV_ModStart> i1_mastering_disp_colour_vol_params_present_flag = 1 <S2SV_ModEnd> ; ps_codec -> <S2SV_ModStart> i1_sei_mastering_disp_colour_vol_params_present_flag = 1 <S2SV_ModEnd> ; ps_codec -> <S2SV_ModStart> i1_sei_mastering_disp_colour_vol_params_present_flag = 1 <S2SV_ModEnd> ; ps_codec -> <S2SV_ModStart> i1_sei_mastering_disp_colour_vol_params_present_flag = 1 <S2SV_ModEnd> ; ps_codec ->,0
190,"<S2SV_ModStart> ; tmp_sdma_rht = kcalloc ( num_engines, sizeof ( * tmp_sdma_rht ), GFP_KERNEL ) ; if (! tmp_sdma_rht ) { kfree ( tmp_sdma_rht ) ; kfree ( tmp_sdma_rht ) ; kfree ( tmp_sdma_rht ) ; kfree ( tmp_sdma_rht ) ; kfree ( tmp_sdma_rht ) ; kfree ( tmp_sdma_rht ) ; kfree ( tmp_sdma_rht ) ; kfree ( tmp_sdma_rht ) ; }",0
191,"<S2SV_ModStart> const char * name <S2SV_ModEnd>, int rep_quick <S2SV_ModStart>, rep_quick ) { if ( param -> testflag & T_UNPACK ) { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %s\\n"", llstr ( start_records, llbuff ) ) ; } else { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %s\\n"", llstr ( start_records, llbuff ) ) ; } else { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff",0
192,"<S2SV_ModStart> ) ; } if ( pcount > MAX_HSTORE_PAIRS ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, ( int ) ( MAX_HSTORE_PAIRS ) ) )",0
193,"<S2SV_ModStart> val ) ; if (! strchr ( var, ""command"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> command"", r -> name ) ; if (! strchr ( var, ""rspfile"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if (! strchr ( var, ""rspfile_content"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if (! strchr ( var, ""rspfile_content"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if (! strchr ( var, ""rspfile_content"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa",0
194,"<S2SV_ModStart> case 'Q' : if ( 3 == b - c -> buf && 0 == strncmp ( ""GET"", c -> buf, 3 ) ) { method = AGOO_GET ; } else if ( 4 == b - c -> buf && 0 == strncmp ( ""PUT"", c -> buf, 4 ) ) { method = AGOO_PUT ; } else if ( 0 == strncmp ( ""POST"", c -> buf, 4 ) ) { method = AGOO_POST ; } else { if ( 3 == b - c -> buf && 0 == strncmp ( ""POST"", c -> buf, 3 ) ) { method = AGOO_POST ; } else if ( 4 == b - c -> buf && 0 == strncmp ( ""PUT"", c -> buf, 4 ) ) { method = AGOO_PUT ; } else if ( 0 == strncmp ( ""POST"", c -> buf, 4 ) ) { method = AGOO_POST ; } else { if ( 3 == b - c -> buf && 0 == strncmp ( ""GET"", c -> buf, 3 ) ) { method = AGOO_",0
195,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> vp9_fht16x16_c ( const <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16 <S2SV_ModEnd> ( input, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16 <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { vpx_fdct16_t out [ 16 ] ; int i, j ; int16_t temp_in [ 16 ], temp_out [ 16 ] ; const transform_2d ht = FHT_16 [ tx_type ] ; for ( i = 0 ; i < 16 ; ++ i ) { for ( j = 0 ; j < 16 ; ++ j ) outptr [ j * 16 + i ] = ( temp_out [ j ] + 1 + ( temp_out [ j ] < 0 ) ) >> 2 ; } for ( i = 0 ; i < 16 ; ++ i ) { for ( j = 0 ; j < 16 ; ++ j ) outptr [ j * 16 + i ] = ( temp_out [ j",0
196,"<S2SV_ModStart> if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) { g_error_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg (",0
197,"<S2SV_ModStart> ; char * temp_filename <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } temp_filename = osi_calloc ( strlen ( filename ) + 5, GFP_KERNEL ) ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } for ( const list_node_t * node = list_begin ( config -> sections ) ; node!= list_end ( config -> sections ) ) { const section_t * section = ( const section_t * ) list_node ( node ) ; fprintf ( fp, ""[%s]\\n"", section -> name )",0
198,<S2SV_ModStart> : ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> : ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> : ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> : ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> : ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> : ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> : ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> : ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> : ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> : ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> : ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> : ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> : ND_TCHECK_32BITS ( tptr <S2SV_ModEnd>,0
199,"<S2SV_ModStart>, NULL ) ; if ( ctxt -> input == NULL ) { xmlErrMemory ( ctxt, NULL ) ; ctxt -> instate = state ; return ; } if ( ctxt -> input == NULL ) { xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" ) ; } <S2SV_ModStart>, NULL ) ; if ( ctxt -> input == NULL ) { xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" ) ; } if ( ctxt -> input == NULL ) { xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" ) ; } if ( ctxt -> input == NULL ) { xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" ) ; }",0
200,"<S2SV_ModStart> = Socket_print ( S <S2SV_ModEnd>, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" <S2SV_ModStart> ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd> ""Content-Length: <S2SV_blank> %d\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd> ""Content-Length: <S2SV_blank> %d\\r\\n"", request",0
201,"<S2SV_ModStart> } pid_t child ; if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> symbolic <S2SV_blank> link\\n"", src ) ; exit ( 1 ) ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> symbolic <S2SV_blank> link\\n"", src ) ; exit ( 1 ) ; } child = fork ( ) ; if ( child == 0 ) { drop_privs ( 1 ) ; copy_file ( src, dest ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.asoundrc <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } waitpid ( child, NULL, 0 ) ; if ( chown ( dest, getuid ( ), getgid ( ) ) < 0 ) errExit ( ""chown"" ) ; if ( chmod ( dest, S_IRUSR | S_IWUSR ) < 0 ) errExit ( ""chmod"" ) ; unlink ( src ) ; } <S2SV_ModEnd> <S2SV_null>",0
202,"<S2SV_ModStart> flags ) ; rc = bfa_port_get_stats ( BFA_FCPORT ( & bfad -> bfa ), fcstats, bfad_hcb_comp, & fcomp ) ; if ( rc!= BFA_STATUS_OK <S2SV_ModEnd> ) return NULL <S2SV_ModStart> return NULL ; rc = bfa_port_get_stats ( BFA_FCPORT ( & bfad -> bfa ), fcstats, bfad_hcb_comp, & fcomp ) ; if ( rc!= BFA_STATUS_OK <S2SV_ModEnd> ) return NULL",0
203,"<S2SV_ModStart> value ) { if ( value -> x > 1.0f || value -> y > 1.0f || value -> z > 1.0f ) { value -> x = MinF ( 1.0f, MaxF ( 0.0f, value -> x ) ) ; <S2SV_ModStart> -> y = MinF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; value -> y = MinF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; value -> z = MinF ( 1.0f, MaxF ( 0.0f, value -> z ) ) ; } else { value -> x = MinF ( 1.0f, MaxF ( 0.0f, value -> x ) ) ; value -> y = MinF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; value -> z = MinF ( 1.0f, MaxF ( 0.0f, value -> z ) ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
204,<S2SV_ModStart> -> sasl_mechanism ; if ( rec -> usermode == NULL ) rec -> usermode = g_strdup ( src -> usermode ) ; if ( rec -> alternate_nick == NULL ) rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; if ( rec -> usermode == NULL ) rec -> usermode = g_strdup ( src -> usermode ) ; if ( rec -> alternate_nick == NULL ) rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; if ( rec -> usermode == NULL ) rec -> usermode = g_strdup ( src -> usermode ) ; if ( rec -> usermode == NULL ) rec -> usermode = g_strdup ( src -> usermode ) ; if ( rec -> usermode == NULL ) rec -> usermode = g_strdup ( src -> usermode ) ; if ( rec -> usermode == NULL ) rec -> usermode = g_strdup ( src -> usermode ) ; if ( rec -> alternate_nick == NULL ) rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ;,0
205,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
206,"<S2SV_ModStart>, o, datao ; if ( CHECKOVERFLOW ( buf, 6 + n -> offset, 2 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } datao = 6 + n -> offset ; if ( CHECKOVERFLOW ( datao, buf_size, 2 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; }",0
207,"<S2SV_ModStart> HA_ERR_NOT_A_TABLE : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> MyISAM-table"", filename ) ; break ; case HA_ERR_CRASHED_ON_USAGE : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed <S2SV_blank> after <S2SV_blank> last <S2SV_blank> repair"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed"", filename ) ; break ; case HA_ERR_CRASHED_ON_",0
208,<S2SV_ModStart> len ) { <S2SV_ModEnd> char * ns <S2SV_ModStart> unsigned long hex <S2SV_ModEnd> ; char * <S2SV_ModStart> CURLcode res ; if (! ns ) return NULL ; int strindex = 0 ; int alloc = ( length? length : ( int ) strlen ( string ) ) + 1 ; char * ns = malloc ( alloc ) ; if (! ns ) return NULL ; while ( -- alloc > 0 ) { unsigned char in ; if ( ( '%' == string [ 1 ] ) && ( '%' == string [ 2 ] ) && ( ISXDIGIT ( string [ 1 ] ) && ISXDIGIT ( string [ 2 ] ) && ISXDIGIT ( string [ 3 ] ) && ISXDIGIT ( string [ 3 ] ) && ISXDIGIT ( string [ 4 ] ) && ISXDIGIT ( string [ 5 ] ) && ISXDIGIT ( string [ 6 ] ) && ISXDIGIT ( string [ 7 ] ) && ISXDIGIT ( string [ 8 ] ) && ISXDIGIT ( string [ 9 ] ) && ISXDIGIT ( string [ 10 ] ) && ISXDIGIT ( string [ 9 ] ) && ISXDIGIT ( string [ 10 ] ) && ISXDIGIT ( string,0
209,"<S2SV_ModStart> ; RAnalOp next_op ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ;",0
210,"<S2SV_ModStart> = usm_secmod_process_in_msg ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_POST_PREMIB_READ_CONFIG, init_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, free_engineID, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, free_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, free_engineID, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post",0
211,"<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) return! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; if ( prog -> flags & eflags ) return! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; if ( prog -> flags & eflags ) return! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; if ( prog -> flags & eflags & ( prog -> flags & eflags ) ) return! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; if ( prog -> flags & eflags ) return! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; if ( prog -> flags & eflags ) return! match ( prog -> start, sp, prog -> flags | eflags, sub ) ; if ( prog -> flags & eflags & ( prog -> flags & eflags ) ) return! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; if ( prog -> flags & eflags ) return! match ( prog -> start,",0
212,"<S2SV_ModStart> ] ; # ifdef NETSNMP_NO_WRITE_SUPPORT switch ( action ) { case MODE_SET_RESERVE1 : if ( var_val_type!= ASN_INTEGER ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> type <S2SV_blank>!= <S2SV_blank> int\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= 1 ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; }",0
213,<S2SV_ModStart> case 3 : { CheckNumberPixels ( 4 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 5 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 4 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 2 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 3 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >>,0
214,<S2SV_ModStart> timer ) ; spin_lock_irq ( & timeri -> slave_active_lock ) ; if ( timeri -> flags & SNDRV_TIMER_IFLG_CALLBACK ) { spin_unlock_irq ( & timeri -> slave_active_lock ) ; udelay ( 10 ) ; spin_unlock_irq ( & timeri -> slave_active_lock ) ; } spin_unlock_irq ( & timeri -> slave_active_lock ) ; if ( timeri -> flags & SNDRV_TIMER_IFLG_CALLBACK ) { spin_unlock_irq ( & timeri -> slave_active_lock ) ; udelay ( 10 ) ; spin_unlock_irq ( & timeri -> slave_active_lock ) ; } spin_unlock_irq ( & timeri -> slave_active_lock ) ; if ( timeri -> flags & SNDRV_TIMER_IFLG_CALLBACK ) { spin_unlock_irq ( & timeri -> lock ) ; timeri -> flags &= ~ SNDRV_TIMER_IFLG_CALLBACK ; spin_unlock_irq ( & timeri,0
215,<S2SV_ModStart> -> u4_bitoffset = ih264d_read_mmco_commands <S2SV_ModEnd> ( ps_dec ),0
216,<S2SV_ModStart> { int_fast32_t widthOverflow = ( uint_fast32_t ) ( gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ) ; int_fast32_t heightOverflow = ( uint_fast32_t ) ( gifFilePtr -> Image. Height * info -> originalWidth ) ; if ( widthOverflow > 0 || heightOverflow > 0 ) { gifFilePtr -> SWidth += widthOverflow ; gifFilePtr -> SHeight += heightOverflow ; } if ( decode ) { int_fast32_t widthOverflow = ( uint_fast32_t ) ( gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ) ; int_fast32_t heightOverflow = ( uint_fast32_t ) ( gifFilePtr -> Image. Height * info -> originalHeight ) ; if ( widthOverflow > 0 || heightOverflow > 0 ) { int_fast32_t topOverflow = ( uint_fast32_t ) ( gifFilePtr -> Image. Top + gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ) ( info -> originalWidth ) ; int_fast32_t leftOverflow = ( uint_fast32_t ),0
217,"<S2SV_ModStart> || cherokee_buffer_is_empty ( <S2SV_ModEnd> & conn -> <S2SV_ModStart> user ) ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len",0
218,<S2SV_ModStart> bus ] ; if ( bi == NULL ) return ; <S2SV_ModEnd> si = &,0
219,"<S2SV_ModStart> ; rdsdebug ( ""size <S2SV_blank> %zu <S2SV_blank> flags <S2SV_blank> 0x%x <S2SV_blank> timeo <S2SV_blank> %ld\\n"" <S2SV_ModEnd>, size,",0
220,<S2SV_ModStart> 0 ) { if ( strlen ( s ) > 9 ) { <S2SV_ModStart> ++ s ; if ( strlen ( s ) > 9 ) { <S2SV_ModStart> ++ s ; if ( strlen ( s ) > 9 ) { <S2SV_ModStart> ++ s ; if ( strlen ( s ) > 9 ) { <S2SV_ModStart> ++ s ; if ( strlen ( s ) > 9 ) { <S2SV_ModStart> ++ s ; if ( strlen ( s ) > 9 ) { <S2SV_ModStart> ++ s ; if ( strlen ( s ) > 9 ) { free ( font_name ) ; font_name = ( char * ) malloc ( 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( 1 ) ; if (! font_name ) { free ( font_name ) ; font_name = ( char * ) malloc ( 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( 1 ) ; free,0
221,"<S2SV_ModStart>. active_set ; if ( uipc_main. read_set < 0 ) { BTIF_TRACE_EVENT ( ""UIPC <S2SV_blank> READ <S2SV_blank> THREAD <S2SV_blank> ENTERING"" ) ; uipc_main_cleanup ( ) ; BTIF_TRACE_EVENT ( ""UIPC <S2SV_blank> READ <S2SV_blank> THREAD <S2SV_blank> EXITING"" ) ; uipc_main_cleanup ( ) ; BTIF_TRACE_EVENT ( ""UIPC <S2SV_blank> READ <S2SV_blank> THREAD <S2SV_blank> DONE"" ) ; } else { result = select ( uipc_main. read_set, NULL, NULL, NULL ) ; if ( result == - EINTR ) { BTIF_TRACE_EVENT ( ""UIPC <S2SV_blank> READ <S2SV_blank> THREAD <S2SV_blank> EXITING"" ) ; uipc_main_cleanup ( ) ; BTIF_TRACE_EVENT ( ""UIPC <S2SV_blank> READ <S2SV_blank> THREAD <S2SV_blank> EXITING"" ) ; uipc_main_cleanup ( ) ; BTIF_TRACE_EVENT ( ""UIPC <S2SV_blank> READ <S2SV_blank> THREAD <S2SV_blank> EXITING"" ) ; uipc_main_cleanup ( ) ; BTIF_TRACE_EVENT ( ""UIPC <S2SV_blank> READ <S2SV_blank> THREAD <S2SV_blank> DONE",0
222,"<S2SV_ModStart> msixcap ; assert ( msgnum >= 1 && <S2SV_ModEnd> msix_table_entries ( dev <S2SV_ModStart> msix_table_init ( dev, <S2SV_ModEnd> msix_table_entries ( dev <S2SV_ModStart> msix_table_init ( dev, <S2SV_ModEnd> msix_table_entries ( dev <S2SV_ModStart> msix_table_init ( dev, <S2SV_ModEnd> msix_table_entries ( dev <S2SV_ModStart> msix_table_init ( dev, <S2SV_ModEnd> msix_table_entries ( dev <S2SV_ModStart> msix_table_init ( dev, <S2SV_ModEnd> msix_table_entries ( dev <S2SV_ModStart> msix_table_init ( dev, <S2SV_ModEnd> msix_table_entries ( dev <S2SV_ModStart> msix_table_init ( dev, <S2SV_ModEnd> msix_table_entries ( dev <S2SV_ModStart> msix_table_init ( dev, <S2SV_ModEnd> msix_table_entries ( dev",0
223,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
224,"<S2SV_ModStart> NULL ) goto cleanup ; status = ASN1_INTEGER_cmp ( X509_get_subject_name ( kdc_cert ), is -> subject ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> subject ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_subject_name ( kdc_cert ), is -> subject ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> subject ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_subject_name ( kdc_cert ), is -> subject ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> subject ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_subject_name ( kdc_cert ), is -> subject ) ; if (! status ) { status = ASN1_INTEGER",0
225,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart> cpi ) { const MV_REFERENCE_FRAME * frame_type = get_frame_type ( cpi ) ; if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL ) { return ALLOW_32X32 ; } else if ( cpi -> sf. tx_size_search_method == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ]? ALLOW_32X32 : TX_MODE_SELECT ; } else if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32,0
226,<S2SV_ModStart> : magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> : magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> : magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> : magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> : magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> : magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> : magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> : magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> : magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> : magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> : magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> : magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> : magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> : magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> : magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> : magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> : magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> : magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> : magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> : magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> : magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> : magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> : magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> : magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> : magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> : magfact,0
227,<S2SV_ModStart> b ; if ( buf1 -> size > buf2 -> size ) { return - 1 ; } else if (,0
228,"<S2SV_ModStart> info ) + size ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY | __GFP_NORETRY ) ; if (! info ) { info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY | __GFP_NORETRY ) ; if (! info ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY | __GFP_NORETRY ) ; if (! info ) { info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY | __GFP_NORETRY ) ; if (! info ) return NULL ; }",0
229,<S2SV_ModStart> ; if ( protocol < 0 || protocol >= AX25_MAX_PROTOCOL,0
230,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs,",0
231,"<S2SV_ModStart> ) ; r = safe_event_add ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } <S2SV_ModStart> ; r = safe_event_add ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } log_info ( ""Watching <S2SV_blank> system <S2SV_blank> buttons <S2SV_blank> on <S2SV_blank> /dev/input/%s <S2SV_blank> (%s)"", b -> name, name ) ; r = safe_event_add ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" )",0
232,<S2SV_ModStart> ( errors ) return TEST_ERR_MAJOR_BAD <S2SV_ModEnd> ; else return,0
233,<S2SV_ModStart> lun ) sas_eh_defer_cmd <S2SV_ModEnd> ( cmd ),0
234,"<S2SV_ModStart> ; REQ ( n, funcdef ) ; name = NEW_IDENTIFIER ( CHILD ( n, name_i ) ) ; if (! name ) return NULL ; <S2SV_ModStart> ; } body = ast_for_suite ( c, CHILD ( n, name_i + 1 ) ) ; if (! body ) return NULL ; get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; <S2SV_ModStart> ; if (! is_async ) return AsyncFunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n0 ), n0 -> n_col_offset, end_lineno, end_col_offset, c -> c_arena ) ; else if ( is_async ) return AsyncFunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n0 ), n0 -> n_col_offset, end_lineno, end_col_offset, c -> c_arena ) ; else return FunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n0 ), n0 -> n_col_offset, end_lineno,",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageDataInFile"" <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageDataInFile""",0
237,,1
238,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
239,"<S2SV_ModStart> : if ( psf -> header == NULL ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; return ; } ; <S2SV_ModStart> : if ( psf -> header == NULL ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; return ; } ; <S2SV_ModStart> : if ( psf -> header == NULL ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; return ; } ; <S2SV_ModStart> : if ( psf -> header == NULL ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; return ; } ; if ( psf -> header == NULL ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; return ; } ; if ( psf -> header == NULL ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; return ; } ; if ( psf -> header ==",0
240,<S2SV_ModStart> ) IHEVCD_SUCCESS ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
241,<S2SV_ModStart> prev_line_has_list_loosening_effect ) { if ( prev_line_has_list_loosening_effect ) { if ( line -> type == MD_LINE_LIST_LOOSEING_EFFECT ) { if ( line -> type == MD_LINE_LIST_LOOSEING_EFFECT ) { if ( line -> type == MD_LINE_LIST_LOOSEING_EFFECT ) { if ( prev_line_has_list_loosening_effect ) { if ( line -> type == MD_LINE_LIST_LOOSEING_EFFECT ) { if ( line -> type == MD_LINE_LIST_LOOSEING_EFFECT ) { if ( line -> type == MD_LINE_LIST_LOOSEING_EFFECT ) { if ( line -> type == MD_LINE_LIST_LOOSEING_EFFECT ) { if ( prev_line_has_list_loosening_effect ) { if ( line -> type == MD_LINE_LIST_LOOSEING_EFFECT ) { if ( line -> type == MD_LINE_LIST_LOOSEING_EFFECT,0
242,<S2SV_ModStart> perf_event_context * ctx <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> state = PERF_EVENT_STATE_OFF <S2SV_ModEnd> ; } raw_spin_unlock_irq,0
243,<S2SV_ModStart>. post_proc_flag ; flags -> color_ref_frame_flag = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_display_mv_flag? VP9D_DEBUG_DRAW_MV : 0 ) ; flags -> <S2SV_ModStart> noise_level ; flags -> color_ref_frame_flag = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_,0
244,"<S2SV_ModStart> = 0 ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6 ) ) ; goto trunc ; } <S2SV_ModStart> = 0 ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6 ) ) ; goto trunc ; } ND_TCHECK2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )",0
245,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,1
246,"<S2SV_ModStart> { fprintf ( stderr <S2SV_ModEnd>, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone""",0
247,<S2SV_ModStart> k_start ) { memset <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart> k_start ) ; memcpy <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart> k_start ) ; memcpy <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart> k_start ) ; memcpy <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart> k_start ) ; memcpy <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart> k_start ) { memcpy <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart> k_start ) ; memcpy <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart> k_start ) ; memcpy <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart> k_start ) ; memcpy <S2SV_ModEnd> ( ptr_hbe_txposer ->,0
248,"<S2SV_ModStart> lua_module ) ; <S2SV_ModEnd> const lua_authz_provider_spec * <S2SV_ModStart> lua_authz_provider_spec * prov_spec <S2SV_ModEnd> = parsed_require_line ; <S2SV_ModStart> r ) ; if (! lua_checkstack ( L, - 1 ) ) { ap_log_rerror ( APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO ( 02319 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", prov_spec -> function_name, prov_spec -> file_name ) ; ap_lua_release_state ( L, spec, r ) ; return AUTHZ_GENERAL_ERROR ; } lua_getglobal ( L, prov_spec -> function_name ) ; if (! lua_isfunction ( L, - 1 ) { ap_log_rerror ( APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO ( 02319 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"",",0
249,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
250,"<S2SV_ModStart>! proto_end ) { printk ( KERN_ERR ""Malformed <S2SV_blank> credential <S2SV_blank> URL: <S2SV_blank> %s\\n"", url ) ; printk ( KERN_ERR ""Malformed <S2SV_blank> credential <S2SV_blank> URL: <S2SV_blank> %s\\n"", url ) ; printk ( KERN_ERR ""Malformed <S2SV_blank> credential <S2SV_blank> URL: <S2SV_blank> %s\\n"", url ) ; printk ( KERN_ERR ""Malformed <S2SV_blank> credential <S2SV_blank> URL: <S2SV_blank> %s\\n"", url ) ; printk ( KERN_ERR ""Malformed <S2SV_blank> credential <S2SV_blank> URL: <S2SV_blank> %s\\n"", url ) ; printk ( KERN_ERR ""Malformed <S2SV_blank> credential <S2SV_blank> URL: <S2SV_blank> %s\\n"", url ) ; printk ( KERN_ERR ""Malformed <S2SV_blank> credential <S2SV_blank> URL: <S2SV_blank> %s\\n"", url ) ; printk ( KERN_ERR ""Malformed <S2SV_blank> credential <S2SV_blank> URL: <S2SV_blank> %s\\n"", url ) ; printk ( KERN_ERR ""Malformed <S2SV_blank> credential <S2SV_blank> URL: <S2SV_blank> %s\\n"", url ) ; printk ( KERN_ERR ""Malformed <S2SV_blank> credential <S2SV_blank> URL: <S2SV_blank> %s\\n"",",0
251,"<S2SV_ModStart> fdt ) ; const char * const name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> case FDT_PROP : include = want >= 2 ; stop_at = offset ; str = fdt_string ( fdt, fdt32_to_cpu ( name -> nameoff ) ) ; if (! str ) return - FDT_ERR_BADSTRUCTURE ; if ( str_in_list ( name, inc, inc_count ) ) include = 0 ; break ; case FDT_BEGIN_NODE : depth ++ ; if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BADSTRUCTURE ; name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_BADSTRUCTURE ; <S2SV_ModStart> = fdt_get_name ( fdt, offset, & len ) ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR",0
252,"<S2SV_ModStart> ) ) { if (! ( loops % 50 ) ) { redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."", j, used, vkeys ) ; redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."", j, used, vkeys ) ; redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."", j, used, vkeys ) ; redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."", j, used, vkeys ) ; redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."", j, used, vkeys ) ; }",0
253,<S2SV_ModStart> channel ) ; <S2SV_ModEnd> set_description ( client,1
254,<S2SV_ModStart> book -> dim && i < n,1
255,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; printf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; printf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; printf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; printf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank>",0
256,"<S2SV_ModStart> this_h ) { if (! check_scale_factors ( sf -> x_scale_fp, sf -> y_scale_fp, other_w, this_w, this_h ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; return ; } if (! check_scale_factors ( sf -> x_scale_fp, sf -> y_scale_fp, other_w, this_w, this_h ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; return ; } if (! check_scale_factors ( sf -> x_scale_fp, sf -> y_scale_fp, other_w, this_w, this_h ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; return ; } if (! check_scale_factors ( sf -> x_scale_fp, sf -> y_scale_fp, other_w, this_w, this_h ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; return ; } if (! check_scale_factors ( sf -> x_scale_fp, sf -> y_scale_fp",0
257,<S2SV_ModStart> = 0 ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
258,"<S2SV_ModStart> case IPV6_PKTOPTIONS : { struct ipv6_pktoptions_rcu * rcu = rcu_dereference_protected ( np -> rxopt. bits. rcu, sock_owned_by_user ( sk ) ) ; rcu = rcu_dereference_protected ( np -> rxopt. bits. rcu, sock_owned_by_user ( sk ) ) ; if ( rcu && rcu_dereference_protected ( sk -> sk, sock_owned_by_user ( sk ) ) ) { struct ipv6_pktoptions_rcu * rcu = rcu_dereference_protected ( np -> rxopt. bits. rcu, sock_owned_by_user ( sk ) ) ; rcu = rcu_dereference_protected ( np -> rxopt. bits. rcu, sock_owned_by_user ( sk ) ) ; if ( rcu && rcu_dereference_protected ( sk -> sk_owned_by_user ( sk ) ) { struct ipv6_pktoptions_rcu * rcu = rcu_dereference",0
259,<S2SV_ModStart> ; unregister_pernet_subsys ( <S2SV_ModEnd> & sctp_net_ops ) <S2SV_ModStart> sctp_net_ops ) ; <S2SV_ModEnd> sctp_v6_protosw_exit ( ) <S2SV_ModStart> sctp_v4_protosw_exit ( ) ; <S2SV_ModEnd> sctp_sysctl_unregister ( ),0
260,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> ) ; ovpsnr = sse_to_psnr <S2SV_ModEnd> ( ( double <S2SV_ModStart> ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; if ( ovpsnr > 255.0 ) ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; if ( ovpsnr > 255.0 ) ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; if ( ovpsnr > 255.0 ) ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; if ( ovpsnr > 255.0 ) ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_",0
261,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
262,"<S2SV_ModStart> init ( ) ; TRACE_DEBUG ( ""CIDER=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_CIDER ) ) ; TRACE_DEBUG ( ""PHY1ILR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1ILR ) ) ; TRACE_DEBUG ( ""PHY1IHR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1IHR ) ) ; TRACE_DEBUG ( ""CIDER=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_CIDER ) ) ; TRACE_DEBUG ( ""PHY1IHR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1IHR ) ) ; if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_RE",0
263,"<S2SV_ModStart>. skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
264,"<S2SV_ModStart> ; if ( size < IMAGE_SIZE_MIN ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> size!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - EINVAL ; } <S2SV_ModStart> ; if ( size > IMAGE_SIZE_MAX ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> size!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - EINVAL ; } <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT ) ; if ( size < IMAGE_SIZE_MIN ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> size!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - EINVAL ; }",0
265,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ; TEMP_FAILURE_RETRY (,0
266,<S2SV_ModStart> )? ( <S2SV_ModEnd> rc -> av_per_frame_bandwidth <S2SV_ModStart> ) : ( <S2SV_ModEnd> rc -> av_per_frame_bandwidth <S2SV_ModStart> ) : ( <S2SV_ModEnd> rc -> av_per_frame_bandwidth <S2SV_ModStart> ) : ( <S2SV_ModEnd> rc -> av_per_frame_bandwidth <S2SV_ModStart> ) : ( <S2SV_ModEnd> rc -> av_per_frame_bandwidth <S2SV_ModStart> ) : ( <S2SV_ModEnd> rc -> av_per_frame_bandwidth,0
267,"<S2SV_ModStart> ++ ) { if ( strcmp ( argv [ i ], ""allow-untrusted"" ) == 0 ) { errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; } else { if ( strcmp ( argv [ i ], ""allow-untrusted"" ) == 0 ) { errx ( 1, ""%s: <S2SV_blank> untrusted <S2SV_blank> option"", ""--allow-untrusted"" ) ; } else { if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) { errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; } } else { if ( strcmp ( argv [ i ], ""allow-untrusted"" ) == 0 ) { errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; } else { if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) { errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; } else { errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option""",0
268,"<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch <S2SV_ModStart> == - 1 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_list ( o -> v. Module. type_ignores, ast2obj_type_ignore ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_type_ignores, value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_list ( o -> v. Module. type_ignores, ast2obj_type_ignore ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_type_ignores, value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_list ( o -> v. Module. type_ignores, ast2obj_type_ignore ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_type_ignores, value ) == - 1 ) goto failed ; Py_DECREF ( value )",0
269,"<S2SV_ModStart> ib ] ; # if CONFIG_VP8_HIGHBITDEPTH if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) { vp8_highbitdepth_b ( mb, d ) ; } else if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) { vp8_highbitdepth_b ( mb, d ) ; } else { # if CONFIG_VP8_HIGHBITDEPTH if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) { vp8_highbitdepth_b ( mb, d ) ; } else if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) { vp8_highbitdepth_b ( mb, d ) ; } else { # if CONFIG_VP12_HIGHBITDEPTH if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH )",0
270,<S2SV_ModStart> FN_REFLEN ] ; if ( strlen ( opt_basedir ) > FN_REFLEN ) { error = - 1 ; goto exit ; },0
271,"<S2SV_ModStart> int n = <S2SV_ModEnd> ( data_end - <S2SV_ModStart> - data ) ; if ( n < 0 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> to <S2SV_blank> decode <S2SV_blank> packet"" ) ; } else { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> to <S2SV_blank> decode <S2SV_blank> packet"" ) ; } if ( pbi -> ec_active ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> to <S2SV_blank> decode <S2SV_blank> packet"" ) ; } if ( pbi -> ec_active ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> to <S2SV_blank> decode <S2SV_blank> packet"" ) ; } if ( pbi -> ec_active ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Not <S2SV_blank> enough <S2SV_blank> data",0
272,"<S2SV_ModStart> getprivs_ret ret ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
273,"<S2SV_ModStart> * returnrate, RATE_DISTORTION <S2SV_ModEnd> * returndistortion, <S2SV_ModStart> * returnintra ) { # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # else unsigned int zero_mv_sse = INT_MAX, best_rd_sse = INT_MAX, <S2SV_ModEnd> best_rd_sse = INT_MAX <S2SV_ModStart> ; # endif mode_mv = mode_mv_sb [ sign_bias ] ; # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # else unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif",0
274,<S2SV_ModStart> goto error ; if ( statbuf. st_size < 0 ) goto error ;,0
275,"<S2SV_ModStart> ; uWORD8 u1_profile_idc, u1_level_idc, u1_seq_parameter_set_id <S2SV_ModEnd> ; UWORD16 i2_max_frm_num <S2SV_ModStart> ; u1_level_idc = ih264d_get_level_idc_h264 ( ps_bitstrm ) <S2SV_ModEnd> ; u1_seq_parameter_set_id = <S2SV_ModStart> ; u1_seq_parameter_set_id = ih264d_get_level_idc_h264 ( ps_bitstrm ) <S2SV_ModEnd> ; u1_seq_parameter_set_id = <S2SV_ModStart> ; u1_level_idc = ih264d_get_level_idc_h264 ( ps_bitstrm ) <S2SV_ModEnd> ; u1_seq_parameter_set_id = <S2SV_ModStart> ; u1_seq_parameter_set_id = ih264d_get_level_idc_h264 ( ps_bitstrm ) <S2SV_ModEnd> ; u1_seq_parameter_set_id =",0
276,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ; vpx_svc_parameters_t * <S2SV_ModEnd> params = va_arg <S2SV_ModStart> * ) ; if ( cpi -> svc. spatial_layer_id == 0 || cpi -> svc. temporal_layer_id == 0 ) return VPX_CODEC_INVALID_PARAM ; if ( cpi -> svc. spatial_layer_id == 0 || cpi -> svc. temporal_layer_id == 0 ) return VPX_CODEC_INVALID_PARAM ; cpi -> svc. spatial_layer_id = params -> spatial_layer ; cpi -> svc. temporal_layer_id = params -> temporal_layer ; cpi -> lst_fb_idx = params -> lst_fb_idx ; cpi -> gld_fb_idx = params -> gld_fb_idx ; cpi -> alt_fb_idx = params -> alt_fb_idx ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer",0
277,"<S2SV_ModStart> out ) { uint32 width, length ; uint16 bitspersample, samplesperpixel ; uint16 <S2SV_ModEnd> input_compression, input_photometric <S2SV_ModStart>, input_photometric ; if ( bitspersample!= ( uint16 ) - 1 ) { TIFFSetField ( out, TIFFTAG_BITSPERSAMPLE, bitspersample ) ; } else if ( samplesperpixel!= ( uint16 ) - 1 ) { TIFFSetField ( out, TIFFTAG_SAMPLESPERPIXEL, samplesperpixel ) ; } else { if ( bitspersample!= ( uint16 ) - 1 ) { TIFFSetField ( out, TIFFTAG_BITSPERSAMPLE, bitspersample ) ; } if ( samplesperpixel!= ( uint16 ) - 1 ) { TIFFSetField ( out, TIFFTAG_SAMPLESPERPIXEL, samplesperpixel ) ; } else if ( samplesperpixel!= ( uint16 ) - 1 ) { TIFFSetField ( out, TIFFTAG_SAMPLESPERPIXEL, samplesperpixel ) ; } else { if ( bitspersample!= ( uint16 ) - 1 ) { TIFFSetField ( out, TIFFTAG_BITSPERSAMPLE, bitspersample )",0
278,"<S2SV_ModStart> a ) { <S2SV_ModEnd> char * pn <S2SV_ModStart> = '\\0' ; if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else if ( S_ISLNK ( a -> mode ) ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } } else if ( S_ISLNK ( st. st_mode ) ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ;",0
279,"<S2SV_ModStart> unsigned int link_count ; struct kernel_lb_addr loc ; struct indirectEntry * ie ; ie = ( struct indirectEntry * ) ibh -> b_data ; if ( ie -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; make_bad_inode ( inode ) ; return ; } if ( ie -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } bh = udf_read_ptagged ( inode -> i_sb, & iinfo -> i_location, 0, & ident ) ; if ( bh ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ;",0
280,<S2SV_ModStart> -> tx_size ; const uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> above_y [ tx_size_y ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; int i = 0 ; for ( i = 0 ; i < w ; i ++ ) { uint64_t * const above_y = & lfm -> above_y [ index ] ; uint64_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv [ tx_size_uv ] ; uint16_t * const int_4x4_y = & lfm -> above_y [ tx_size_y ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_,0
281,"<S2SV_ModStart> mq_ops ) { list_for_each_entry_safe ( rq, n, running, flush. list ) { unsigned int seq = blk_flush_cur_seq ( rq ) ; BUG_ON ( seq!= REQ_FSEQ_PREFLUSH && seq!= REQ_FSEQ_POSTFLUSH ) ; queued |= blk_flush_complete_seq ( rq, fq, seq, error ) ; } if ( q -> mq_ops ) { spin_unlock_irqrestore ( & fq -> mq_flush_lock, flags ) ; flush_rq -> tag = - 1 ; } else { list_for_each_entry_safe ( rq, n, running, flush. list ) { unsigned int seq = blk_flush_cur_seq ( rq ) ; BUG_ON ( seq!= REQ_FSEQ_PREFLUSH && seq!= REQ_FSEQ_POSTFLUSH ) ; } if ( q -> mq_ops ) spin_unlock_irqrestore ( & fq -> mq_flush_lock, flags ) ; if ( q -> mq_ops ) spin_unlock_irqrestore ( & fq -> mq_flush_lock,",0
282,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) return ( uint32_t ) - 1 ;,0
283,"<S2SV_ModStart> ) ) { if (! smatch ( option, "" <S2SV_blank> =\\t,"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! ovalue ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! ovalue ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; }",0
284,"<S2SV_ModStart> || * replySize > <S2SV_ModEnd> sizeof ( effect_param_t <S2SV_ModStart> == NULL || * replySize > <S2SV_ModEnd> sizeof ( effect_param_t <S2SV_ModStart> == NULL || * replySize > <S2SV_ModEnd> sizeof ( effect_param_t <S2SV_ModStart> == NULL || * replySize > <S2SV_ModEnd> sizeof ( effect_param_t <S2SV_ModStart> == NULL || * replySize > <S2SV_ModEnd> sizeof ( effect_param_t <S2SV_ModStart> == NULL || * replySize > sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } effect_param_t * p = ( effect_param_t * ) pCmdData ; if ( * replySize > sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( * replySize < sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; }",0
285,<S2SV_ModStart> ; if ( ret [ j ] -> key_data_length [ 0 ] == 0 || ret [ j ] -> key_data_length [ 0 ] == 0 ) { err = EINVAL ; goto cleanup ; } <S2SV_ModStart> ; if ( ret [ j ] -> key_data_length [ 0 ] == 0 || ret [ j ] -> key_data_length [ 0 ] == 0 || ret [ j ] -> key_data_contents [ 0 ] == NULL ) { err = EINVAL ; goto cleanup ; } <S2SV_ModStart> ; if ( ret [ j ] -> key_data_length [ 0 ] == 0 || ret [ j ] -> key_data_length [ 0 ] == 0 || ret [ j ] -> key_data_length [ 0 ] == 0 || ret [ j ] -> key_data_length [ 0 ] == 0 || ret [ j ] -> key_data_length [ 0 ] == 0 || ret [ j ] -> key_data_contents [ 0 ] == NULL ) { err = EINVAL ; goto cleanup ; },0
286,<S2SV_ModStart> 0x02 ) ; if ( crgram_len > SC_MAX_APDU_BUFFER_SIZE - 1 ) { if ( crgram_len > SC_MAX_APDU_BUFFER_SIZE - 1 ) { if ( crgram_len <= SC_MAX_APDU_BUFFER_SIZE - 1 ) { if ( crgram_len <= SC_MAX_APDU_BUFFER_SIZE - 1 ) { if ( crgram_len <= SC_MAX_APDU_BUFFER_SIZE - 1 ) { if ( crgram_len <= SC_MAX_APDU_BUFFER_SIZE - 1 ) { if ( crgram_len <= SC_MAX_APDU_BUFFER_SIZE - 1 ) { if ( crgram_len <= SC_MAX_APDU_BUFFER_SIZE - 1 ) { if ( crgram_len <= SC_MAX_APDU_BUFFER_SIZE - 1 ) { if ( crgram_len <= SC_MAX_APDU_BUFFER_SIZE - 1 ) { if ( crgram_len <= SC_MAX_APDU_BUFFER_SIZE - 1 ) { if ( crgram_len <= SC_MAX_APDU_BUFFER_SIZE,0
287,"<S2SV_ModStart> ; ch = i40e_channel_alloc ( vsi ) ; if (! ch ) { dev_err ( & pf -> pdev -> dev, ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> channel: <S2SV_blank> %d\\n"", __func__ ) ; return - ENOMEM ; } <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> ch ) ; if (! ch ) { dev_err ( & pf -> pdev -> dev, ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> channel: <S2SV_blank> %d\\n"", __func__ ) ; return - ENOMEM ; } if (! ch ) { dev_err ( & pf -> pdev -> dev, ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> channel: <S2SV_blank> %d\\n"", __func__ ) ; return - ENOMEM ; } <S2SV_ModEnd> ch = i40e_channel_alloc <S2SV_ModStart> ch ) ; if (! ch ) { dev_err ( & pf -> pdev -> dev, ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> channel: <S2SV_blank> %d\\n"", __func__ ) ; return - ENOMEM ; } if (! ch ) { dev_err ( & pf -> pdev -> dev, ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> channel: <S2SV_blank> %d",0
288,"<S2SV_ModStart> } } } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; if ( cmd_cb ( core_ptr, ""ds"", NULL, 0 ) < 0 ) { send_msg ( g, ""E01"" ) ; return",0
289,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
290,<S2SV_ModStart> 0 ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 0 ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 0 ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 0 ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 0 ) { memcpy <S2SV_ModEnd> ( lf_mic ->,0
291,<S2SV_ModStart> NULL ) ; } quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
292,"<S2SV_ModStart> len ) { <S2SV_ModEnd> if ( len <S2SV_ModStart> ) { PyObject * w ; int kind ; void * data ; Py_ssize_t len, i ; w = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) { Py_DECREF ( u ) ; return NULL ; } kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = PyUnicode_GET_LENGTH ( w ) ; for ( i = 0 ; i < len ; i ++ ) { Py_UCS4 chr = PyUnicode_READ ( kind, data, i ) ; Py_UCS4 chr = PyUnicode_READ ( kind, data, i ) ; p += 10 ; } assert ( p - buf <= Py_SIZE ( u ) ) ; Py_DECREF ( w ) ; } if ( * s & 0x80 ) { PyObject * w ; int kind ; void * data ; Py_ssize_t len ; i = PyUnicode_GET_LENGTH ( w ) ; for ( i = 0 ; i < len ; i ++ ) { Py_UCS4 chr = PyUnicode_READ ( kind, data,",0
293,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart> NO, DISPLAYED } wrerr <S2SV_ModEnd> ; BUF buffer <S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> int setimes, <S2SV_ModStart>, setimes, <S2SV_ModEnd> targisdir, wrerrno <S2SV_ModStart>, setimes, <S2SV_ModEnd> targisdir, wrerrno <S2SV_ModStart>, setimes, <S2SV_ModEnd> targisdir, wrerrno <S2SV_ModStart>, setimes, <S2SV_ModEnd> targisdir, wrerrno <S2SV_ModStart>, setimes, <S2SV_ModEnd> targisdir, wrerrno",0
294,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
295,"<S2SV_ModStart> 0 ) { memset ( oci -> mip, 0, sizeof ( MODE_INFO ) ) ; memset ( oci -> mi, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; if (! oci -> mi ) { memset ( oci -> above_context, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; memset ( oci -> above_context, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; memset ( oci -> mi, 0, sizeof ( ENTROPY_CONTEXT ) ) ; memset ( oci -> mi, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; if (! oci -> above_context ) { memset ( oci -> above_context, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; memset ( oci -> above_context, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; memset ( oci -> mi, 0, sizeof ( ENTROPY_CONTEXT ) ) ; memset ( oci -> mi, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; memset ( oci -> above_",0
296,<S2SV_ModStart> return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,0
297,<S2SV_ModStart> ) ) { if ( u1_num_mbs > u1_num_mbsNby2 ) { ps_dec -> u1_num_mbs = u1_num_mbsNby2 ; ps_dec -> u1_slice_end = u1_num_mbs + u1_num_mbsNby2 ; ps_dec -> u1_slice_end = u1_num_mbsNby2 ; } else { if ( u1_num_mbs > u1_num_mbsNby2 ) { ps_dec -> u1_num_mbs = u1_num_mbsNby2 ; ps_dec -> u1_slice_end = u1_num_mbs + u1_num_mbsNby2 ; ps_dec -> u1_slice_end = u1_num_mbsNby2 ; } else { if ( u1_num_mbsNby2 > u1_num_mbsNby2 ) { ps_dec -> u1_num_mbsNby2 = u1_num_mbsNby2,0
298,<S2SV_ModStart> 1 ] ) vterm_allocator_free <S2SV_ModEnd> ( screen ->,0
299,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
300,"<S2SV_ModStart> one ) { if ( number_planes_filled > MagickMax ( number_planes, number_planes_filled ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; number_planes_filled = MagickMax ( number_planes, number_planes_filled ) ; if ( number_planes_filled > MagickMax ( number_planes, number_planes_filled ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled > MagickMax ( number_planes, number_planes_filled ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; number_planes_filled = MagickMax ( number_planes, number_planes_filled ) ; if ( number_planes_filled > MagickMax ( number_planes, number_planes_filled ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled > MagickMax ( number_planes, number_planes_filled ) ) ThrowReaderException (",0
301,"<S2SV_ModStart> value ) { if ( strlen ( value ) > 1 ) { <S2SV_ModStart> "" <S2SV_blank> \\t,"", NULL ) ; } else if ( strlen ( value ) > 1 ) { httpSetHostName ( state -> host, stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) ; if ( strlen ( value ) > 1 ) { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } else if ( strlen ( value ) > 1 ) { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } else if ( strlen ( value ) > 1 ) { if ( strlen ( value ) > 1 ) { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } else if ( strlen ( value ) > 1 ) { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ; state -> endpoints = sclone",0
302,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data <S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data <S2SV_ModStart>. raw_data = description ; ctx. match_data. lookup_type = KEYRING_SEARCH_LOOKUP_DIRECT ; ret = request_key ( key_get ( dest_keyring ), & ctx. match_data ) ; if ( ret < 0 ) { key = ERR_PTR ( ret ) ; goto error_free ; } ret = key_link ( dest_keyring, key ) ; if ( ret < 0 ) { key_put ( dest_keyring ) ; ret = ERR_PTR ( ret ) ; goto error_free ; } if ( dest_keyring ) construct_get_dest_keyring ( dest_keyring ) ; ret = construct_get_dest_keyring ( dest_keyring ) ; if ( ret < 0 ) { key_put ( dest_keyring ) ; ret = key_link ( dest_keyring, key ) ; if ( ret < 0 ) { key_put ( dest_keyring ) ; ret = ERR_PTR ( ret ) ; goto error_free",0
303,<S2SV_ModStart>! job_id || <S2SV_ModEnd>! prev_hash || <S2SV_ModStart>! prev_hash || <S2SV_ModEnd>! coinbase1 || <S2SV_ModStart>! coinbase2 || <S2SV_ModEnd>! bbversion || <S2SV_ModStart>! ntime ) { if ( prev_hash ) free ( prev_hash ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ;,0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
305,"<S2SV_ModStart> unused ) { <S2SV_ModEnd> _Py_IDENTIFIER ( __dict__ <S2SV_ModStart> __dict__ ) ; if ( _PyObject_GetAttrId ( self, & PyId___dict__ ) == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } <S2SV_ModStart> dict ) { if ( _PyObject_GetAttrId ( self, & PyId___dict__ ) == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( _PyObject_GetAttrId ( self, & PyId___dict__ ) == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( dict ) { if ( _PyObject_GetAttrId ( self, & PyId___dict__ ) == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( _PyObject_GetAttrId ( self, & PyId___dict__ ) == NULL ) { if ( Py",0
306,"<S2SV_ModStart> USB_DT_OTG, ( struct usb_descriptor * * ) & desc, sizeof ( * desc )",0
307,"<S2SV_ModStart> -> private_data ; <S2SV_ModEnd> u32 flags = <S2SV_ModStart> ) ; case PERF_EVENT_IOC_PERIOD : return perf_event_period ( event, ( u64 __user * ) arg ) ; case PERF_EVENT_ID : { u64 id = primary_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; return 0 ; } case PERF_EVENT_SET_OUTPUT : { int ret ; if ( arg!= - 1 ) { struct perf_event * output_event ; fdput ( output ) ; ret = perf_event_set_output ( event, output_event ) ; } else { ret = perf_event_set_output ( event, NULL ) ; } return ret ; } case PERF_EVENT_SET_FILTER : { int ret ; if ( arg!= - 1 ) { struct fd output ; ret = perf_fget_light ( arg, & output ) ; if ( ret ) return ret ; ret = perf_event_set_filter ( event, output_event ) ; } else { ret = perf_event_set_filter",0
308,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> y_mode ) { <S2SV_ModEnd> const MB_PREDICTION_MODE uv_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode",0
309,"<S2SV_ModStart> - EINVAL ; if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 )",0
310,"<S2SV_ModStart> sizeof iv ) ; if ( key [ EVP_MAX_KEY_LENGTH ] > MAX_KEY_LENGTH ) ossl_raise ( eCipherError, ""key <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d) <S2SV_blank> (%d)"", key [ EVP_MAX_KEY_LENGTH ], ( unsigned int ) ( sizeof ( key ) - 1 ) ) ) { ossl_raise ( eCipherError, ""key <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> maximum <S2SV_blank> (%d)"", ( unsigned int ) ( sizeof ( key ) - 1 ) ) ; ossl_raise ( eCipherError, ""key <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d) <S2SV_blank> (%d) <S2SV_blank> (%d) <S2SV_blank> (%d) <S2SV_blank> (%d) <S2SV_blank> (%d)"", key [ EVP_MAX_KEY_LENGTH ], ( unsigned int ) ( sizeof ( key ) - 1 ), ( unsigned int ) ( sizeof ( key ), ( unsigned int ) ( sizeof ( key ) - 1 ) ) ) ; }",0
311,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
312,<S2SV_ModStart> case NGHTTP2_IB_READ_CLIENT_MAGIC : if ( iframe -> payloadleft < NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } <S2SV_ModStart> case NGHTTP2_IB_READ_CLIENT_MAGIC : if ( iframe -> payloadleft < NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } <S2SV_ModStart> case NGHTTP2_IB_READ_CLIENT_MAGIC : if ( iframe -> payloadleft < NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } iframe -> payloadleft -= NGHTTP2_CLIENT_MAGIC_LEN ; if ( iframe -> payloadleft < NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } iframe -> state = NGHTTP2_IB_READ_CLIENT_MAGIC ; if ( iframe -> payloadleft < NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR,0
313,"<S2SV_ModStart> x86_pmu. max_pebs_events = max_t ( unsigned, MAX_PEBS_EVENTS, x86_pmu. max_counters ) ; if ( x86_pmu. max_pebs_events > MAX_PEBS_EVENTS ) x86_pmu. max_pebs_events = max_t ( unsigned, MAX_PEBS_EVENTS, x86_pmu. max_counters ) ;",0
314,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> pack_mb_tokens ( vpx_writer <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ] ; const vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> & 1 ; vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> & 1 ) ; vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> & 1 ) ; vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> & 1 ) ; vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> & 1 ) ; vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> & 1 ) ; vpx_write_bit <S2SV_ModEnd> ( w,",0
315,"<S2SV_ModStart>, uncompressed_hdr_size ; vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> 0 } ; vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> += uncompressed_hdr_size ; vpx_compute_update_table ( ) ; first_part_size = write_compressed_header ( cpi, & wb ) ; data += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; data += encode_tiles ( cpi, data ) ; * size = data - dest ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
317,"<S2SV_ModStart> ikev2_id id ; <S2SV_ModEnd> ND_TCHECK ( * <S2SV_ModStart> ND_TCHECK ( * ep <S2SV_ModEnd> ) ; int <S2SV_ModStart> ND_TCHECK ( * ep <S2SV_ModEnd> ) ; UNALIGNED_MEMCPY <S2SV_ModStart> ) ; } if ( id_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank>",0
318,<S2SV_ModStart> ) ) { if ( jas_tvparser_gettag ( tvp ) == MIF_TLX ) { if ( jas_tvparser_gettag ( tvp ) == MIF_TLY ) { if ( jas_tvparser_gettag ( tvp ) == MIF_TLY ) { if ( jas_tvparser_gettag ( tvp ) == MIF_TLX ) { if ( jas_tvparser_getval ( tvp ) == MIF_TLX ) { if ( jas_tvparser_gettag ( tvp ) == MIF_TLY ) { if ( jas_tvparser_gettag ( tvp ) == MIF_TLY ) { if ( jas_tvparser_gettag ( tvp ) == MIF_TLX ) { if ( jas_tvparser_gettag ( tvp ) == MIF_TLX ) { if ( jas_tvparser_getval ( tvp ) == MIF_TLX ) { if ( jas_tvparser_gettag ( tvp ) == MIF_TLY ) { if ( jas_tvparser_,0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb_context ) ;,0
320,"<S2SV_ModStart>, fft_jmp ; WORD32 xh0_0, xh1_0, xh20_0, xh21_0, xl0_0, xl1_0, xl20_0, xl21_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_0, x_l2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l1_1, x_l2_0, x_l2_0, x_l2_0, x_l1_1 ; x_l1 = & ( x [ l1 ] ) ; x_l1 = & ( x [ l1 ] ) ; x_l2 = & ( x [ l2",0
321,<S2SV_ModStart> mntent ) { if ( IS_ERR ( mntent -> mnt_dir ) ) return PTR_ERR ( mntent -> mnt_dir ) ;,0
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
323,"<S2SV_ModStart> ) ) ; rb_hash_aset ( env, server_name_val, req_server_name ( req ) ) ; rb_hash_aset ( env, server_port_val, req_server_port ( req ) ) ; fill_headers ( req, env ) ; rb_hash_aset ( env, request_method_val, req_method ( req ) ) ; rb_hash_aset ( env, script_name_val, script_name_val ) ; rb_hash_aset ( env, query_string_val, query_string_val ) ; rb_hash_aset ( env, script_name_val, script_name_val ) ; rb_hash_aset ( env, script_name_val, script_name_val ) ; rb_hash_aset ( env, script_name_val, script_name_val ) ; rb_hash_aset ( env, query_string_val, query_string_val ) ; rb_hash_aset ( env, query_string_val, query_string_val ) ; rb_hash_aset ( env, query_string_val, query_string_val ) ; rb_hash",0
324,"<S2SV_ModStart> endif # endif MYSQL_BIND * bind, * bind_end <S2SV_ModEnd> ; imp_sth_phb_t * <S2SV_ModStart>, prepare_retval ; <S2SV_ModEnd> if ( DBIc_TRACE_LEVEL <S2SV_ModStart> 2 ) PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t-> <S2SV_blank> dbd_st_prepare_MYSQL_VERSION_ID <S2SV_blank> %d, <S2SV_blank> SQL <S2SV_blank> statement: <S2SV_blank> %s\\n"", MYSQL_VERSION_ID, statement ) ; if ( DBIc_TRACE_LEVEL ( imp_xxh ) >= 2 ) PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t-> <S2SV_blank> dbd_st_prepare <S2SV_blank> MYSQL_VERSION_ID <S2SV_blank> %d, <S2SV_blank> SQL <S2SV_blank> statement: <S2SV_blank> %s\\n"", MYSQL_VERSION_ID, statement ) ; if ( imp_dbh -> use_server_side_prepare ) { imp_sth -> is_async = FALSE ; do_error ( sth, 2000, ""Async <S2SV_blank> support <S2SV_blank> was <S2SV_blank> not <S2SV_blank> built <S2SV_blank> into <S2SV_blank> this <S2SV_blank> version <S2SV_blank> of <S2SV_blank> DBD::mysql"", ""HY000"" ) ; return 0 ;",0
325,"<S2SV_ModStart> int need = 0 ; int width = 0 ; int height = 0 ; <S2SV_ModStart> screen, { width = width <S2SV_ModEnd> ; } ) <S2SV_ModStart>, { width = width <S2SV_ModEnd> * 4 ; <S2SV_ModStart>, { width = width <S2SV_ModEnd> * 4 ; <S2SV_ModStart> *= 4 ; height = height <S2SV_ModEnd> * 4 ; <S2SV_ModStart>, { width = width <S2SV_ModEnd> * 4 ; <S2SV_ModStart>, { width = width <S2SV_ModEnd> * 4 ; <S2SV_ModStart>, { width = width <S2SV_ModEnd> * 4 ; <S2SV_ModStart> *= 4 ; height = height <S2SV_ModEnd> } ) ;",0
326,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ftoa_bounded_extra ( JsVarFloat <S2SV_ModStart> JsVarFloat stopAtError = 0.0000001 <S2SV_ModEnd> ; if ( <S2SV_ModStart> val ) ) { if ( val < 0 ) strcpy ( str, ""-NaN"", len ) ; else strcpy ( str, ""Infinity"", len ) ; } else if (! isfinite ( val ) ) { if ( val < 0 ) strcpy ( str, ""-NaN"", len ) ; else strcpy ( str, ""Infinity"", len ) ; } else { if (! isfinite ( val ) ) { if ( val < 0 ) { if ( -- len <= 0 ) { * str = 0 ; return ; } * ( str ++ ) = '-' ; val = - val ; } if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ) ) ; val = - val ; } if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ) ) { int v = ( int ) ( val / radix )",0
327,"<S2SV_ModStart> cycles ) ; if ( unlikely ( fast_pool -> count >= 64 ) && crng_fast_load ( ( char * ) fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { fast_pool -> count = 0 ; fast_pool -> last = now ; return ; }",0
328,"<S2SV_ModStart> ; strncat ( str <S2SV_ModEnd>, jslGetTokenValueAsString ( <S2SV_ModStart> ; strncat ( str <S2SV_ModEnd>, jslGetTokenValueAsString ( <S2SV_ModStart> ; strncat ( str <S2SV_ModEnd>, jslGetTokenValueAsString ( <S2SV_ModStart> ; strncat ( str <S2SV_ModEnd>, jslGetTokenValueAsString ( <S2SV_ModStart> ; strncat ( str <S2SV_ModEnd>, jslGetTokenValueAsString (",0
329,,1
330,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
331,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
332,<S2SV_ModStart> s2 ) { if ( strlen ( s1 )!= strlen ( s2 ) ) return - 1 ;,0
333,"<S2SV_ModStart> ) ) { parse_global_option ( CMD_PRINT_HELP, NULL, NULL ) ; parse_service_option ( CMD_PRINT_HELP, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! <S2SV_ModStart> ) ) { parse_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-version"" ) ) { parse_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-sockets"" ) ) { socket_options_print ( ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-options"" ) ) { print_ssl_options ( ) ; log_",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,"<S2SV_ModStart> md -> raw_packet ) { if ( st -> st_v1_new_iv. len > st -> st_v1_new_iv. len ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; st -> st_v1_new_iv. len = st -> st_v1_new_iv. len ; st -> st_v1_new_iv. len = st -> st_v1_new_iv. len ; } else if ( st -> st_v1_new_iv. len > st -> st_v1_new_iv. len ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; st -> st_v1_new_iv. len = st -> st_v1_new_iv. len ; } else if ( st -> st_v1_new_iv. len > st -> st_v1_new_iv. len ) { libresw",0
336,<S2SV_ModStart> u4_num_Bytes ) { if ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_max_bytes_consumed ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_max_bytes_consumed ; } else { if ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_max_bytes_consumed ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_max_bytes_consumed ; },0
337,<S2SV_ModStart> <S2SV_null> static char * <S2SV_ModEnd> print_string ( cJSON <S2SV_ModStart> item ) { return print_string_ptr <S2SV_ModEnd> ( item -> <S2SV_ModStart> valuestring ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
338,<S2SV_ModStart> enc. encode <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> enc. encode <S2SV_ModEnd> ( ctx ->,0
339,"<S2SV_ModStart> cols0 ) ; } else if ( arg1 == 3 ) { win_set_geom ( 0, - 1, 0, 0 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 4 ) { win_set_geom ( 0, - 1, 0, 0 ) ; term. rows0 = rows0 ; term. cols0 = rows0 ; } else if ( arg1 == 5 ) { win_set_geom ( 0, - 1, 0, 0 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 6 ) { win_set_geom ( 0, - 1, 0, 0 ) ; term. rows0 = rows0 ; term. cols0 = rows0 ; } else if ( arg1 == 7 ) { win_set_geom ( 0, - 1, 0, 0 ) ; term. rows0 = rows0 ; term. cols0 = rows0 ; } else if ( arg1 == 8 ) { win_set_geom ( 0, - 1, 0, 0 ) ; term. rows0 = rows0 ; term. cols0 =",0
340,<S2SV_ModStart> ++ ) s [ i ] = 0 ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; } for ( i = - 8,0
341,"<S2SV_ModStart> ) ; } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif i -> posX = i -> parent -> width ; } if ( ( i -> posY + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> Y <S2SV_blank> position\\n"" ) ; # endif i -> posY = i -> parent -> height ; } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif i -> posX = i -> parent -> width ; # endif",0
342,"<S2SV_ModStart> encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 16 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 32 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 64 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 64 ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",0
343,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; } else { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; },0
344,<S2SV_ModStart> ) ) { switch ( c ) { case 'A' : psf -> rwf_endian = SF_ENDIAN_LITTLE_ENDIAN ; break ; case 'A' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'A' : psf -> rwf_endian = SF_ENDIAN_LITTLE_ENDIAN ; break ; case 'A' : psf -> rwf_endian = SF_ENDIAN_LITTLE_ENDIAN ; break ; case 'A' : psf -> rwf_endian = SF_ENDIAN_LITTLE_ENDIAN ; break ; case 'A' : psf -> rwf_endian = SF_ENDIAN_LITTLE_ENDIAN ; break ; case 'A' : psf -> rwf_endian = SF_ENDIAN_LITTLE_ENDIAN ; break ; case 'A' : psf -> rwf_endian = SF_ENDIAN_LITTLE_ENDIAN ; break ; case 'A' : psf -> rwf_endian = SF_ENDIAN_LITTLE_ENDIAN ; break ; case 'A' : psf -> rwf_endian = SF_ENDIAN_LITTLE_ENDIAN ; break ; case 'A' : psf -> rwf,0
345,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
346,"<S2SV_ModStart> } pid_t child ; if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; return 0 ; } child = fork ( ) ; if ( child < 0 ) errExit ( ""fork"" ) ; if ( copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } _exit ( 0 ) ; } if ( copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } <S2SV_ModEnd> waitpid ( child",0
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> : return vp9_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> : return vp9_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> : return vp9_mse8x16 <S2SV_ModEnd> ; default :,0
348,"<S2SV_ModStart> ; } } if ( padata -> pa_type == KRB5_PA_PK_AS_REQ ) { <S2SV_ModStart> ; } } if ( padata -> pa_type == KRB5_PA_PK_AS_REQ ) { <S2SV_ModStart> ; } if ( padata -> pa_type == KRB5_PA_PK_AS_REQ_KX ) { return return_pkinit_kx ( context, request, reply, encrypting_key, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, request, reply, encrypting_key, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PA_PK_AS_REQ_KX ) { return return_pkinit_kx ( context, request, reply, encrypting_key, moddata, send_pa ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, request, reply, encrypting_key, moddata",0
349,"<S2SV_ModStart> flags ) ; <S2SV_ModEnd> v4l2_buf = to_vb2_v4l2_buffer <S2SV_ModStart> vb2_buf ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", frame_len ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to",0
350,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
351,<S2SV_ModStart> -> serviceId == EXTRACT_16BITS <S2SV_ModEnd> ( & rxh,1
352,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > IEEE80211_MAX_SSID_LEN ) { memset ( adhoc_start -> ssid, 0, sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_",0
353,"<S2SV_ModStart> ; if ( sfe -> valuelen > context -> bufsize ) { error = context -> put_listent ( context, sfe -> flags, sfe -> nameval, sfe -> namelen, sfe -> valuelen, & sfe -> nameval [ 0 ] ) ; if ( context -> put_listent ( context, sfe -> flags, sfe -> nameval, sfe -> namelen, sfe -> valuelen, & sfe -> nameval [ sfe -> valuelen ] ) ; if ( context -> put_listent ( context, sfe -> flags, sfe -> nameval, sfe -> namelen, sfe -> valuelen, & sfe -> nameval [ sfe -> namelen ] ) ; if ( context -> put_listent ( context, sfe -> flags, sfe -> nameval, sfe -> namelen, sfe -> valuelen, & sfe -> nameval [ sfe -> namelen ] ) ; if ( context -> put_listent ( context, sfe -> flags, sfe -> nameval, sfe -> namelen, sfe -> valuel",0
354,"<S2SV_ModStart> ; struct l2cap_conf_rfc <S2SV_ModEnd> rfc = { <S2SV_ModStart>. mode = L2CAP_MODE_ERTM ; rfc. txwin_size = L2CAP_DEFAULT_TX_WINDOW ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; l2cap_add_conf_opt ( & ptr, L2CAP_",0
355,"<S2SV_ModStart> r ) { if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } <S2SV_ModStart> MSG_WAITALL ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
356,<S2SV_ModStart> u1_nal_ref_idc ) ; if ( ( u1_nal_ref_idc < 0 ) || ( u1_nal_ref_idc > IDR_SLICE_NAL ) || ( ( u1_nal_ref_idc > IDR_SLICE_NAL_MAX ) || ( ( u1_nal_ref_idc > IDR_SLICE_NAL_MAX ) || ( ( u1_nal_ref_idc < 0 ) || ( u1_nal_ref_idc > IDR_SLICE_NAL_MAX ) || ( u1_nal_ref_idc > IDR_SLICE_NAL_MAX ) || ( u1_nal_ref_idc > IDR_SLICE_NAL_MAX ) || ( u1_nal_ref_idc > IDR_SLICE_NAL_MAX ) || ( u1_nal_ref_idc > IDR_SLICE_NAL_MAX ) || ( u1_nal_ref,0
357,<S2SV_ModStart> tok ) ; if ( pair == NULL ) return ;,0
358,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd>, int open_flags <S2SV_ModStart> = 0 ; fmode <S2SV_ModEnd> &= ( FMODE_READ <S2SV_ModStart> FMODE_WRITE ) ; fmode &= ( FMODE_READ | FMODE_WRITE ) ; <S2SV_ModStart> ; __update_open_stateid ( state, fmode <S2SV_ModEnd>, & deleg_cur <S2SV_ModStart> ; __update_open_stateid ( state, fmode <S2SV_ModEnd>, & deleg_cur <S2SV_ModStart> ; __update_open_stateid ( state, fmode <S2SV_ModEnd>, & deleg_cur <S2SV_ModStart> ; __update_open_stateid ( state, fmode <S2SV_ModEnd>, & deleg_cur <S2SV_ModStart> ; __update_open_stateid ( state, fmode <S2SV_ModEnd>, & deleg_cur <S2SV_ModStart> ; __update_open_stateid ( state, fmode <S2SV_ModEnd>, & deleg_cur <S2SV_ModStart> ; __update_open_stateid ( state, fmode <S2SV_ModEnd>, & deleg_cur <S2SV_ModStart> ; __update_open_stateid ( state, fmode <S2SV_ModEnd>, & deleg_cur",0
359,"<S2SV_ModStart> ""btif_hl_select_close_connected"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
360,"<S2SV_ModStart> int * out_rate_sum <S2SV_ModEnd>, int64_t * <S2SV_ModStart> int sse ; int64_t * out_dist_sum <S2SV_ModEnd> ; for ( <S2SV_ModStart> ; i < <S2SV_ModEnd> MAX_MB_PLANE ; ++ <S2SV_ModStart> ]. vf ( p -> src. buf, p -> src. stride, pd -> dst. buf, pd -> dst. stride, & sse ) ; if ( i == 0 ) x -> pred_sse [ ref ] = sse ; if ( cpi -> speed > 4 ) { int64_t rate ; int64_t dist ; int64_t square_error ; int quantizer ; vp9_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], pd -> dequant [ 1 ] >> 3, & rate, & dist ) ; rate_sum += rate ; dist_sum += dist ; } else { int rate ; int64_t dist ; vp9_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], pd -> dequant [ 1 ] >> 3, & rate, & dist ) ;",0
361,<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
362,<S2SV_ModStart> { if ( <S2SV_ModEnd> ( * ptr <S2SV_ModStart> =='<S2SV_blank>') || ( * ptr == '\\t' ) ) break ; else { username [ index ] = * ptr ; index ++ ; ptr ++ ; } } if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ;,0
363,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { vpx_read_tree <S2SV_ModEnd> ( r, <S2SV_ModStart> -> tree_probs ) ; vpx_read_tree <S2SV_ModEnd> ( r,",0
364,"<S2SV_ModStart> ++ i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ i ) { memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ i ) { memcpy <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",0
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,"<S2SV_ModStart> ++ ; buf = smb_fdata1 ( ndo, buf, NULL, maxbuf, unicodestr ) ; if ( buf == NULL ) return ( NULL ) ; <S2SV_ModStart> ++ ; buf = smb_fdata1 ( ndo, buf, NULL, maxbuf, unicodestr ) ; if ( buf == NULL ) return ( NULL ) ; <S2SV_ModStart> ++ ; buf = smb_fdata1 ( ndo, buf, NULL, maxbuf, unicodestr ) ; if ( buf == NULL ) return ( NULL ) ; buf = smb_fdata1 ( ndo, buf, NULL, maxbuf, unicodestr ) ; if ( buf == NULL ) return ( NULL ) ; buf = smb_fdata1 ( ndo, buf, NULL, maxbuf, unicodestr ) ; if ( buf == NULL ) return ( NULL ) ; buf = smb_fdata1 ( ndo, buf, NULL, maxbuf, unicodestr ) ; if ( buf == NULL ) return ( NULL ) ;",0
367,"<S2SV_ModStart> ; } n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n < ( length + 8 ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_INVALID_LENGTH ; } netBufferRead ( context -> txBuffer, buffer, offset, length ) ; header. controlWord = htole16 ( TX_CTRL_TXIC | ( context -> frameId ++ & TX_CTRL_TXFID ) ) ; header. byteCount = htole16 ( length ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA ) ; ksz8851SetBit ( interface, KSZ8851_TXQCR, KSZ8851_TXQCR_METFE ) ; netBufferRead ( context -> txBuffer, buffer, offset, length ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n < ( length + 8 ) ) { osSetEvent ( & interface ->",0
368,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> if ( domains_to_finalize,0
369,"<S2SV_ModStart>, x_7 ; WORD32 x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 x_10, x_11, x_12, x_13, x_23, x_33 ; WORD32 x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; x_10 = x_0 + x_2 ; x_1 = x_1 + x_3 ; x_2 = x_4 + x_6 ; x_3 = x_5 + x_6 ; x_6 = x_5 + x_7 ; x_7 = x_4 + x_7 ; x_8 = * x0 ++ ; x_9 = * x0 ++ ; x_a = * x0 ++ ; x_b = * x0 ++ ; x_c = * x0 ++ ; x_d = * x0 ++ ; x_e = * x0 ++ ; x_d = * x0 ++ ; x_e = * x0 ++ ; x",0
370,<S2SV_ModStart> ; if ( pmd_trans_huge <S2SV_ModEnd> ( * pmd,0
371,"<S2SV_ModStart>, frames ; <S2SV_ModEnd> if ( argc <S2SV_ModStart> 5 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } if (! parse_dim ( argv [ 1 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 1 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } if (! parse_dim ( argv [ 2 ], & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpout = fopen (",0
372,<S2SV_ModStart> num_fields ) { <S2SV_ModEnd> _Py_IDENTIFIER ( _attributes,0
373,"<S2SV_ModStart> = VPX_CODEC_OK ; <S2SV_ModEnd> struct vpx_codec_alg_priv * <S2SV_ModStart> struct vpx_codec_alg_priv * priv <S2SV_ModEnd> ; vpx_codec_enc_cfg_t * <S2SV_ModStart> vpx_codec_alg_priv ) ) ; if (! priv ) { return VPX_CODEC_MEM_ERROR ; } ctx -> priv = calloc ( 1, sizeof ( struct vpx_codec_alg_priv ) ) ; ctx -> priv -> sz = sizeof ( * ctx -> priv ) ; ctx -> priv -> iface = ctx -> iface ; ctx -> priv -> init_flags = ctx -> init_flags ; if ( ctx -> config. enc ) { struct vpx_codec_enc_cfg_t * cfg ; memcpy ( & cfg, & ctx -> config. enc, sizeof ( * cfg ) ) ; if (! cfg ) { return VPX_CODEC_MEM_ERROR ; } <S2SV_ModEnd> cfg = & <S2SV_ModStart> i ++ ) ; priv -> cfg = * cfg ; priv -> vp8_cfg = extracfg_map [ i ]. cfg ; priv -> cx_data_sz = priv -> cfg. g_w * priv ->",0
374,"<S2SV_ModStart> ; } if ( ( ret = s -> decode ( gb, rc, cumfr, cnt_c, totfr ) ) < 0 ) return ret ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> lookup [ x ] = cnt_x + step ; if ( ( ret = s -> decode ( gb, rc, cumfr, cnt_c, totfr ) ) < 0 ) return ret ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> freq [ c ] = cnt_x + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> total_freq = totfr ; return 0 ;",0
375,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ( void,0
376,"<S2SV_ModStart> EIO ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, efe -> icbTag. strategyType ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, efe -> icbTag. strategyType ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"",",0
377,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & ENC28J60_MISTAT_BUSY <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & ENC28J60_MISTAT_BUSY",0
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> bad_format_imginfo ( char <S2SV_ModStart> fmt ) { int n = 0 ; char * ptr = fmt ; while ( * ptr!= '\\0' ) if ( * ptr == '%' ) return 1 ; if ( * ptr =='s' || * ptr == 'S' ) { n = 1 ; ptr ++ ; } else if ( * ptr =='<S2SV_blank>') ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; if ( * ptr,0
379,"<S2SV_ModStart> ""IPV6DefragInOrderSimpleTest"", IPV6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""IPV6DefragReverseSimpleTest"", IPV6DefragReverseSimpleTest ) ; UtRegisterTest ( ""IPV6DefragInOrderSimpleTest"", IPV6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakBsdTest"", IPV6DefragSturgesNovakBsdTest ) ; UtRegisterTest ( ""IPV6DefragInOrderSimpleTest"", IPV6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""IPV6DefragReverseSimpleTest"", IPV6DefragReverseSimpleTest ) ; UtRegisterTest ( ""IPV6DefragInOrderSimpleTest"", IPV6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakBsdTest"", IPV6DefragSturgesNovakLinuxTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakWindowsTest"", IPV6DefragSturgesNovakWindowsTest ) ; U",0
380,<S2SV_ModStart> ; if ( object_length > sizeof ( new_object. data ) - add_v1_record ) { sc_cardctl_coolkey_object_t new_obj ; new_obj = malloc ( sizeof ( new_obj ) - add_v1_record ) ; if ( new_obj == NULL ) { sc_cardctl_coolkey_object_t new_obj = malloc ( sizeof ( new_obj ) - add_v1_record ) ; if ( new_obj == NULL ) { sc_cardctl_coolkey_object_t new_obj = malloc ( sizeof ( new_obj ) - add_v1_record ) ; if ( new_obj == NULL ) { sc_cardctl_coolkey_object_t new_obj = malloc ( sizeof ( new_obj ) - add_v1_record ) ; if ( new_obj == NULL ) { sc_cardctl_coolkey_object_t new_obj = malloc ( sizeof ( new_obj ) - add_v1_record ) ; if ( new_obj == NULL ) { sc_cardctl_coolkey_object,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,<S2SV_ModStart> b_go ) { if (! p_sys -> started ) { if (! p_sys -> b_eos_signalled ) { if (! p_sys -> b_eos_signalled ) { if (! p_sys -> b_eos_signalled ) { if (! p_sys -> b_eos_signalled ) { if (! p_sys -> b_eos_signalled ) { if (! p_sys -> b_eos_signalled ) { if (! p_sys -> b_eos_signalled ) { if (! p_sys -> b_eos_signalled ) { if (! p_sys -> b_eos_signalled ) { if (! p_sys -> b_eos_signalled ) { if (! p_sys -> b_eos_signalled ) { if (! p_sys -> b_eos_signalled ) { if (! p_sys -> b_eos_signalled ) { if (! p_sys -> b_eos_signalled ) { if (! p_sys -> b_eos_signalled,0
384,"<S2SV_ModStart> bfname. len ) { if (! mp_path_exists ( mf -> names ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ mf -> nr_of_files - 1 ] ) ; } else if (! mp_path_exists ( mf -> names [ mf -> nr_of_files - 1 ] ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ mf -> nr_of_files - 1 ] ) ; } else if (! mp_path_exists ( mf -> names [ mf -> nr_of_files - 1 ] ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ mf -> nr_of_files - 1 ] ) ; } else if (! mp_path_exists ( mf -> names [ mf -> nr_of_files - 1 ] ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ mf -> nr_of_files -",0
385,"<S2SV_ModStart> 4 ) ; size_t <S2SV_ModEnd> num_properties = GETINT32 <S2SV_ModStart> len ) ; if ( a -> names [ i ]. len > MAX_ATTR_SIZE / 4 ) { <S2SV_ModStart> ]. len > MAX_ATTR_SIZE / 4 <S2SV_ModEnd> ) { a <S2SV_ModStart> ]. len > MAX_ATTR_SIZE / 4 <S2SV_ModEnd> ) { a <S2SV_ModStart> ]. len > MAX_ATTR_SIZE / 4 <S2SV_ModEnd> ) { a <S2SV_ModStart> ]. len > MAX_ATTR_SIZE / 4 <S2SV_ModEnd> ) { a <S2SV_ModStart> ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; } else if ( a -> names [ i ]. len > MAX_ATTR_SIZE / 4 ) { a -> names [ i ]. data = CHECKED_XMALLOC ( unsigned char, a -> names [ i ]. len ) ; for ( j = 0 ; j < a -> names [ i ]. len >> 1 ; j ++ ) { a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]",0
386,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; YV12_BUFFER_CONFIG * fb ; vpx_get_reference_dec <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> * fb ; yuvconfig2image ( & data -> img, fb, NULL ) ; return VPX_CODEC_OK <S2SV_ModEnd> ; } <S2SV_null>",0
388,"<S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> SOS <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA",0
389,"<S2SV_ModStart> expr_stmt ) ; if ( TYPE ( CHILD ( n, 0 ) ) == testlist ) { expr_ty e = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; if (! e ) return NULL ; return Expr ( e, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c -> c_arena ) ; } else { expr_ty e = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; if (! e ) return NULL ; expr_ty e = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; if (! e ) return NULL ; return Expr ( e, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c -> c_arena ) ; } <S2SV_ModStart>, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c -> c_",0
390,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static unsigned char <S2SV_ModEnd> vp8_denoiser_filter_c ( YV12_BUFFER_CONFIG <S2SV_ModStart> 16 ; unsigned char * mc_running_avg_y = mc_running_avg -> y_buffer + y_offset ; int mc_avg_y_stride = mc_running_avg -> y_stride ; unsigned char * running_avg_y = running_avg -> y_buffer + y_offset ; int avg_y_stride = running_avg -> y_stride ; int r, c, i ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 16 ; ++ c ) { int diff = mc_running_avg_y [ c ] - sig [ c ] ; int absdiff = abs ( diff ) ; if ( absdiff >= 4 && absdiff <= 7 ) { running_avg_y [ c ] = mc_running_avg_y [",0
391,"<S2SV_ModStart> ) ) { if ( reqPtr -> avail < 1 ) { Ns_Log ( Ns_LogRequestDebug, ""request <S2SV_blank> header <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> short"" ) ; return SOCK_MORE ; } <S2SV_ModStart> ) ) { if ( reqPtr -> avail < 1 ) { Ns_Log ( Ns_LogRequestDebug, ""request <S2SV_blank> header <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> short"" ) ; return SOCK_MORE ; } <S2SV_ModStart> ) ) { if ( reqPtr -> request. line == NULL ) { if ( reqPtr -> request. line == NULL ) { Ns_Log ( Ns_LogRequestDebug, ""request <S2SV_blank> header <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> short"" ) ; return SOCK_MORE ; } <S2SV_ModStart> ) ) { if ( reqPtr -> avail < 1 ) { Ns_Log ( Ns_LogRequestDebug, ""request <S2SV_blank> header <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> short"" ) ; return SOCK_MORE ; } <S2SV_ModStart> ) ) { if ( reqPtr -> request. line == NULL ) { if ( reqPtr -> request. line == NULL ) { Ns_Log ( Ns_LogRequestDebug, ""request <S2SV_blank> header <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> short"" ) ; return SOCK_MORE ; } }",0
392,<S2SV_ModStart> = 0 ; # if XTENSA_HAVE_COPROCESSORS coprocessor_flush_all ( ti ) ; coprocessor_release_all ( ti,0
393,<S2SV_ModStart> size ) ; if ( message -> length > queueItem -> size ) { message -> length = queueItem -> size ; message -> srcIpAddr = queueItem -> srcIpAddr ; message -> srcPort = queueItem -> srcPort ; message -> destIpAddr = queueItem -> destIpAddr ; message -> ttl = queueItem -> ancillary. ttl ; } else { message -> srcIpAddr = queueItem -> srcIpAddr ; message -> srcPort = queueItem -> srcPort ; } message -> destIpAddr = queueItem -> destIpAddr ; message -> ttl = queueItem -> ancillary. ttl ; message -> switchPort = queueItem -> switchPort ; # if ( ETH_SUPPORT == ENABLED ) message -> switchPort = queueItem -> ancillary. port ; # endif # if ( ETH_PORT_TAGGING_SUPPORT == ENABLED ) message -> switchPort = queueItem -> ancillary. port ; # endif # if ( ETH_TIMESTAMP_SUPPORT == ENABLED ) message -> timestamp = queueItem -> ancillary. timestamp ; # endif,0
394,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" <S2SV_ModStart> -> src_dev ; <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" <S2SV_ModStart> -> dst_dev ; <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for""",0
395,<S2SV_ModStart> int error ; struct ext2_inode_info * ei = EXT2_I ( inode ) ; struct ext2_inode_info * ei_info = EXT2_I ( inode ) ; struct ext2_inode_info * ei_info = EXT2_I ( inode ) ; struct ext2_inode_info * ei_info = EXT2_I ( inode ) ; struct ext2_inode_info * ei_info = EXT2_I ( inode ) ; struct ext2_inode_info * ei_info = EXT2_I ( inode ) ; struct ext2_inode_info * ei_info = EXT2_I ( inode ) ; struct ext2_inode_info * ei_info = EXT2_I ( inode ) ; struct ext2_inode_info * ei_info = EXT2_I ( inode ) ; struct ext2_inode_info * ei_info = EXT2_I ( inode ) ; int flags = EXT2_I ( inode ) -> i_flags & ( EXT2_I ( inode ) -> i_flags & ( EXT2_I ( inode ) -> i_flags & (,0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> (! vp9_set_active_map <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> ) ) return VPX_CODEC_INVALID_PARAM <S2SV_ModEnd> ; } <S2SV_null>",0
397,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
398,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
399,"<S2SV_ModStart> ; imsy = 2048 ; dmbuf = ( unsigned char * ) AcquireQuantumMemory ( imsx * imsy, 1 ) ; if ( dmbuf == NULL ) { return ( MagickFalse ) ; }",0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { <S2SV_ModEnd> return vp9_copy_reference_dec ( <S2SV_ModStart> VP9_REFFRAME ) frame <S2SV_ModEnd> -> frame_type, <S2SV_ModStart> VP9_REFFRAME ) frame <S2SV_ModEnd> -> frame_type, <S2SV_ModStart> VP9_REFFRAME ) frame <S2SV_ModEnd> -> frame_type, <S2SV_ModStart> VP9_REFFRAME ) frame <S2SV_ModEnd> -> frame_type, <S2SV_ModStart> VP9_REFFRAME ) frame <S2SV_ModEnd> ; return vp9_copy_reference_dec",0
401,<S2SV_ModStart> ) ) { if ( u1_num_mbs > u1_num_mbsNby2 ) { ps_dec -> u1_num_mbs = u1_num_mbsNby2 ; ps_dec -> u1_slice_end = u1_num_mbs + u1_num_mbsNby2 ; ps_dec -> u1_slice_end = u1_num_mbsNby2 ; } else { if ( u1_num_mbs > u1_num_mbsNby2 ) { ps_dec -> u1_num_mbs = u1_num_mbsNby2 ; ps_dec -> u1_slice_end = u1_num_mbs + u1_num_mbsNby2 ; ps_dec -> u1_slice_end = u1_num_mbsNby2 ; } else { if ( u1_num_mbsNby2 > u1_num_mbsNby2 ) { ps_dec -> u1_num_mbsNby2 = u1_num_mbsNby2,0
402,"<S2SV_ModStart> u4_y_offset ; UWORD8 * pu1_out_p ; UWORD8 * pu1_pred ; WORD32 u4_pred_strd ; <S2SV_ModStart> B_PIC ) { memset ( pu1_out_p, 0, sizeof ( pu1_out ) ) ; memset ( pu1_pred, 0, sizeof ( pu1_pred ) ) ; memset ( pu1_pred, 0, sizeof ( pu1_pred ) ) ; memset ( pu1_out_p, 0, sizeof ( pu1_out ) ) ; memset ( pu1_pred, 0, sizeof ( pu1_pred ) ) ; <S2SV_ModStart> == B_PIC ) { memset ( pu1_out_p, 0, sizeof ( pu1_out ) ) ; memset ( pu1_pred, 0, sizeof ( pu1_pred ) ) ; memset ( pu1_pred, 0, sizeof ( pu1_pred ) ) ; memset ( pu1_pred, 0, sizeof ( pu1_pred ) ) ; memset ( pu1_pred, 0, sizeof ( pu1_pred ) ) ; memset ( pu1_out",0
403,"<S2SV_ModStart> VP9_LAST_FLAG ) { <S2SV_ModEnd> const YV12_BUFFER_CONFIG * <S2SV_ModStart> const YV12_BUFFER_CONFIG * const cfg = cm -> frame_bufs [ <S2SV_ModEnd> cm -> ref_frame_map <S2SV_ModStart> ] ]. buf ; if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; } else if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank>",0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
405,<S2SV_ModStart> -> mbmi ; <S2SV_ModEnd> const TX_SIZE tx_size <S2SV_ModStart> 1 ) ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ plane_bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ plane_bsize ] ; const int max_blocks_wide = num_4x4_w ; const int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_y ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_,0
406,<S2SV_ModStart> { # if CONFIG_VP8_HIGHBITDEPTH <S2SV_ModEnd> dst [ 0 <S2SV_ModStart> ] = src [ 0 ] ; dst [ 1 ] = src [ 1 ] ; dst [ 2 ] = src [ 2 ] ; dst [ 3 ] = src [ 3 ] ; dst [ 4 ] = src [ 4 ] ; dst [ 5 ] = src [ 5 ] ; dst [ 6 ] = src [ 6 ] ; dst [ 7 ] = src [ 7 ] ; # else ( ( uint32_t * ) dst ) [ 0 ] = ( ( uint32_t * ) src ) [ 0 ] ; ( ( uint32_t * ) dst ) [ 1 ] = ( ( uint32_t * ) src ) [ 1 ] ; ( ( uint32_t * ) src ) [ 2 ] ; ( ( uint32_t * ) dst ) [ 0 ] = ( ( uint32_t * ) src ) [ 0 ] ; ( ( uint32_t * ) src ) [ 1 ] ; ( ( uint32_t * ) dst ) [ 2 ] = ( ( uint32_t * ) src ) [ 2 ] ; ( ( uint32_t * ) dst ) [ 3 ] = ( ( uint32,0
407,"<S2SV_ModStart> nrow ) { if ( ( row + img -> row_offset ) % rowsperstrip == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""gtStripSeparate"" ) ; return ( 0 ) ; } <S2SV_ModStart> % rowsperstrip ; if ( ( row + img -> row_offset ) % scanline == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""gtStripSeparate"" ) ; return ( 0 ) ; } <S2SV_ModStart> -> row_offset ; if ( ( row + img -> row_offset ) % scanline == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""gtStripSeparate"" ) ; return ( 0 ) ; } <S2SV_ModStart> % scanline ; if ( ( row + img -> row_offset ) % scanline == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""gtStripSeparate"" ) ; return ( 0 ) ; } <S2SV_ModStart> -> row_offset ; if ( ( row + img -> row_offset ) % scanline == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""gtStripSeparate"" ) ; return ( 0 )",0
408,"<S2SV_ModStart> } } } if ( TYPE ( n )!= TYPE_COMMENT ) { Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %s"", TYPE ( CHILD ( n, 1 ) ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %s"", TYPE ( CHILD ( n, 1 ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %s"", TYPE ( CHILD ( n, 2 ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %s"", TYPE ( CHILD ( n, 2 ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %s"", TYPE ( CHILD ( n, 1 ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %s"", TYPE ( CHILD ( n, 2 ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %s"", TYPE ( CHILD ( n, 3 ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %s"", TYPE ( CHILD ( n, 3 ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment",0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header,0
410,<S2SV_ModStart> number ) ) { if ( num & ( 1 << ( number - 1 ) ) ) return num - ( 1 << ( number - 1 ) ) ; else return num ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
411,"<S2SV_ModStart> [ plane ] ; const int x = vpx_img_plane_x ( img, plane ) ; const int y = vpx_img_plane_y ( img, plane ) ; const int y2 = vpx_img_plane_y ( img, plane ) ; const int w = vpx_img_plane_width ( img, plane ) ; const int h = vpx_img_plane_height ( img, plane ) ; const int x = vpx_img_plane_x ( img, plane ) ; const int y2 = vpx_img_plane_y ( img, plane ) ; int w = vpx_img_plane_width ( img, plane ) ; const int x = vpx_img_plane_x ( img, plane ) ; const int y2 = vpx_img_plane_height ( img, plane ) ; for ( y = 0 ; y < y2 ; ++ y ) { if ( fread ( buf, 1, x, file )!= x ) return 0 ; buf += stride ; } } return 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
412,"<S2SV_ModStart> ; uint16_t attr_len <S2SV_ModEnd> ; uint16_t last_block_len <S2SV_ModStart> ; if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small",0
413,"<S2SV_ModStart> ; if ( ctx -> cipher_data == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_INITIALIZATION_ERROR ) ; return 0 ; }",0
414,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
415,"<S2SV_ModStart> sk ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> sk <S2SV_blank> %p"" <S2SV_ModEnd>, sock,",0
416,"<S2SV_ModStart> ) { memcpy <S2SV_ModEnd> ( pass_salt, <S2SV_ModStart> cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PASSSALT ) { memcpy <S2SV_ModEnd> ( pass_salt, <S2SV_ModStart> cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PLAINDATA ) { fwrite ( ( const void * ) cpkt. data, 1, cpkt. length, stdout ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 1 ; if ( is_a_tty ) { setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; }",0
417,"<S2SV_ModStart> ; goto err_close_conn <S2SV_ModEnd> ; } if <S2SV_ModStart> ; goto err_close_conn <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc!= IMAP_EXEC_ERROR ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc!= IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc!= IMAP_EXEC_ERROR ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc!= IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ; mutt_socket_empty (",0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,"<S2SV_ModStart> 0 ) { if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModStart> 0 ) { if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModStart> 0 ) { if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModStart> 0 ) { if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModStart> 0 ) { if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; }",0
420,"<S2SV_ModStart>, & rlen, 0",1
421,"<S2SV_ModStart> ; read_userfile ( ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md",0
422,"<S2SV_ModStart> ; if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; }",0
423,"<S2SV_ModStart> off } ; if ( strlen ( str ) < i ) { return - 1 ; } for ( i = j = 0 ; i < sizeof ( buf ) - 1 && str [ i ] ; i ++, j ++ ) { if ( str [ i ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } for ( i = j = 0 ; i < sizeof ( buf ) - 1 ; i ++, j ++ ) { if ( str [ i ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } for ( i = 0 ; i < sizeof ( buf ) - 1 ; i ++, j ++ ) { if ( str [ i ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } for ( i = 0 ; i < sizeof ( buf ) - 1 ; j ++ ) { if ( str [ i ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ]",0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,"<S2SV_ModStart> ; return FALSE ; } if (! credssp_authenticate ( transport -> credssp ) ) { fprintf ( stderr, ""Authentication <S2SV_blank> failure, <S2SV_blank> check <S2SV_blank> credentials.\\n"" ""If <S2SV_blank> credentials <S2SV_blank> are <S2SV_blank> valid, <S2SV_blank> the <S2SV_blank> NTLMSSP <S2SV_blank> implementation <S2SV_blank> may <S2SV_blank> be <S2SV_blank> to <S2SV_blank> blame.\\n"" ""If <S2SV_blank> credentials <S2SV_blank> are <S2SV_blank> valid, <S2SV_blank> the <S2SV_blank> NTLMSSP <S2SV_blank> implementation <S2SV_blank> may <S2SV_blank> be <S2SV_blank> to <S2SV_blank> blame.\\n"" ) ; credssp_free ( transport -> credssp ) ; return FALSE ;",0
426,"<S2SV_ModStart> size_t s ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } s = exif_get_short ( buf + o, EXIF_BYTE_ORDER_INTEL ) ; if ( CHECKOVERFLOW ( s, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( CHECKOVERFLOW ( s, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji""",0
427,<S2SV_ModStart> bd_addr ) { if ( interface_ready ( ) == FALSE ) return BT_STATUS_NOT_READY,0
428,<S2SV_ModStart> int i ; size_t <S2SV_ModEnd> avail ; int <S2SV_ModStart> 4 ) ; size_t <S2SV_ModEnd> expect ; txid <S2SV_ModStart> ; if ( size < 8 ) goto bad_format ; expect = 8 + 8 + nxip * 8 ; if ( expect < 0 || expect > avail ) goto bad_format ; xmin = 0 ; xmax = 0 ; if ( xmin == 0 || xmax == 0 || xmin > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; if ( snap == NULL || snap -> xmin == 0 || snap -> xmax == 0 || snap -> xmin == 0 || snap -> xmax == 0 || snap -> xmin > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax ) goto bad_format ; snap -> xip [ i ] = cur ; last = cur ; },0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header,0
430,<S2SV_ModStart> 1 ; oe_epoll_t <S2SV_ModEnd> * epoll = <S2SV_ModStart> = 0 ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
431,"<S2SV_ModStart> { errstr = parse_global_option ( CMD_INITIALIZE, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_ERR, ""Global <S2SV_blank> options: <S2SV_blank> %s"", errstr ) ; return 1 ; } } if ( * section_ptr == & new_service_options || eof ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_DIR_MAX : * ( size_t * ) val = ms -> elf_dir_max ; return 0 ; case MAGIC_PARAM_NAME_MAX : * ( size_t * ) val = ms -> name_max ; return 0 ; case MAGIC_PARAM_ELF_PHNUM_MAX : * ( size_t * ) val = ms -> elf_phnum_max ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ; case MAGIC_PARAM_ELF_DIR_MAX : * ( size_t * ) val = ms -> elf_dir_max ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ;,0
433,<S2SV_ModStart> journal_t * journal <S2SV_ModEnd> = EXT4_JOURNAL (,0
434,"<S2SV_ModStart> ++ ) { if ( i + 1 >= trackCount ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG ( GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR",0
435,"<S2SV_ModStart> 100 ] ; size_t <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> pass_salt ; md5_init <S2SV_ModStart> = '\\0' ; memcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> strlen ( password ), pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 )",0
436,<S2SV_ModStart> = NULL ; if ( _mibindexes ) { int i ; for ( i = 0 ; i < _mibindex_max ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; if ( _mibindexes [ i ] -> label ) SNMP_FREE ( _mibindexes [ i ] -> label ) ; SNMP_FREE ( _mibindexes [ i ] -> label ) ; SNMP_FREE ( _mibindexes ) ; _mibindexes = NULL ; } if ( _mibindexes ) { int i ; for ( i = 0 ; i < _mibindex_max ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; if ( _mibindexes [ i ] -> label ) SNMP_FREE ( _mibindexes [ i ] -> label ) ; SNMP_FREE ( _mibindexes [ i ] -> label ) ; SNMP_FREE ( _mibindexes ) ; _mibindexes = NULL ; },0
437,"<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && <S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && <S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i + 1 ) ) == COMMA ) i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case DOUBLESTAR : if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i + 1 ) ) == COMMA ) i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE",0
438,"<S2SV_ModStart> ( ) ; headers = web_socket_util_new_headers ( ) ; g_hash_table_insert ( headers, g_strdup ( ""Cookie"" ), g_strdup ( ""CockpitAuth=v=3;k=blah"" ) ) ; if ( g_hash_table_check_cookie ( test -> auth, ""/cockpit"", headers ) ) g_assert_not_reached ( ) ; g_hash_table_insert ( headers, g_strdup ( ""Cookie"" ), g_strdup ( ""CockpitAuth=v=4;k=blah"" ) ) ; if ( cockpit_auth_check_cookie ( test -> auth, ""/cockpit"", headers ) ) g_assert_not_reached ( ) ; if ( cockpit_auth_check_cookie ( test -> auth, ""/cockpit"", headers ) ) g_assert_not_reached ( ) ; if ( cockpit_auth_check_cookie ( test -> auth, ""/cockpit"", headers ) ) g_assert_not_reached",0
439,<S2SV_ModStart> -> y_buffer ; # if CONFIG_VP9_HIGHBITDEPTH if ( ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( ( src_ybc -> flags & YV12_FLAG_HIGHBIT,0
440,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> mi_col = tile -> mi_col_start <S2SV_ModEnd> ; mi_col < <S2SV_ModStart> mi_col_end ; mi_col += MI_BLOCK_SIZE ) { int dummy_rate ; int64_t dummy_dist ; MACROBLOCK * x = & cpi -> mb ; if ( sf -> adaptive_pred_interp_filter ) { for ( i = BLOCK_4X4 ; i < BLOCK_8X8 ; ++ i ) { const int num_4x4_w = num_4x4_blocks_wide_lookup [ i ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ i ] ; const int num_4x4_blk = MAX ( 4, num_4x4_blocks_wide_lookup [ i ] ) ; for ( x -> sb_index = 0 ; x -> sb_index < 4 ; ++ x -> sb_index ) for ( x -> b_index =",0
441,"<S2SV_ModStart>, obj_tlen ; u_int hexdump ; u_int offset ; u_int link_type ; union { float f ; uint32_t i ; } bw ; ND_TCHECK ( * obj_tptr ) ; obj_tlen = EXTRACT_16BITS ( obj_tptr ) ; if ( obj_tlen < sizeof ( struct lmp_object_header ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> object <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( obj_tlen < sizeof ( struct lmp_object_header ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> object <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> obj_tlen = EXTRACT_16BITS ( obj_tptr ) ; if ( obj_tlen < sizeof ( struct lmp_object_header ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> object <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( obj_tlen < sizeof ( struct lmp_object_header ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> object <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" ) ) ; return",0
442,"<S2SV_ModStart> const MB_MODE_INFO * mbmi <S2SV_ModEnd>, nmv_context_counts *",0
443,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
444,"<S2SV_ModStart> ; if ( pskb_expand_head ( skb_out, size - skb -> len, GFP_ATOMIC ) < 0 ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } skb_pull_rcsum ( skb_out, hdr_size ) ; memmove ( skb_out -> data - ETH_HLEN, skb_mac_header ( skb_out ), ETH_HLEN ) ; if ( pskb_expand_head ( skb_out, size - skb -> len, GFP_ATOMIC ) < 0 ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } skb_pull_rcsum ( skb_out, hdr_size ) ; memmove ( skb_out -> data - ETH_HLEN, skb_mac_header ( skb_out ), ETH_HLEN ) ; skb_set_mac_header ( skb_out ) ; skb_set_mac_header ( skb_out, - ETH_HLEN )",0
445,"<S2SV_ModStart> return ; netsnmp_mibindex_load ( ) ; <S2SV_ModEnd> DEBUGMSGTL ( ( <S2SV_ModStart> ""init_mib"", ""Seen <S2SV_blank> MIBDIRS: <S2SV_blank> Looking <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> mib <S2SV_blank> dirs <S2SV_blank>...\\n"", env_var ) ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibdir ( entry ) ; entry = strtok_r ( NULL, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ; } <S2SV_ModEnd> netsnmp_init_mib_internals ( ) <S2SV_ModStart>",0
446,"<S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_RDWR ) ) <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd",0
447,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
448,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s,",0
449,<S2SV_ModStart> <S2SV_null> <S2SV_null> static krb5_error_code <S2SV_ModEnd> iakerb_alloc_context ( iakerb_ctx_id_t <S2SV_ModStart> 0 ; code = krb5_gss_init_context ( & ctx -> k5c ) ; if ( code!= 0 <S2SV_ModEnd> ) goto cleanup,0
450,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; bitmapDC = CreateCompatibleDC ( hDC ) ; if ( bitmapDC == ( HDC ) NULL ) { DeleteDC ( hDC ) ; ThrowReaderException ( CoderError, ""UnableToCreateDC"" ) ; }",0
451,"<S2SV_ModStart> ( ps_stream, <S2SV_ModEnd> START_CODE_PREFIX_LEN )!= <S2SV_ModStart> )!= START_CODE_PREFIX ) { if ( ps_stream -> u4_offset < ps_stream -> u4_offset ) { if ( ps_stream -> u4_offset >= ps_stream -> u4_max_offset ) { if ( ps_stream -> u4_offset >= ps_stream -> u4_max_offset ) { if ( ps_stream -> u4_offset >= ps_stream -> u4_max_offset ) { if ( ps_stream -> u4_offset >= ps_stream -> u4_max_offset ) { if ( ps_stream -> u4_offset < ps_stream -> u4_offset ) { if ( ps_stream -> u4_offset >= ps_stream -> u4_max_offset ) { if ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ) { if ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ) { if ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ) { if (",0
452,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { kfree ( string ) ;",0
453,<S2SV_ModStart> imethod ) ; if ( inflated == NULL ) { g_assert_not_reached ( ) ; <S2SV_ModStart> imethod ) ; if ( inflated == NULL ) { g_assert_not_reached ( ) ; return NULL ; } <S2SV_ModStart> imethod ) ; if ( inflated == NULL ) { g_assert_not_reached ( ) ; <S2SV_ModStart> imethod ) ; if ( inflated == NULL ) { g_assert_not_reached ( ) ; return NULL ; } <S2SV_ModStart> imethod ) ; if ( inflated == NULL ) { g_assert_not_reached ( ) ; <S2SV_ModStart> imethod ) ; if ( inflated == NULL ) { g_assert_not_reached ( ) ; return NULL ; } <S2SV_ModStart> imethod ) ; if ( inflated == NULL ) { g_assert_not_reached ( ) ; <S2SV_ModStart> imethod ) ; if ( inflated == NULL ) { g_assert_not_reached ( ) ; return NULL ; },0
454,"<S2SV_ModStart> ""nnnnn\\0"" ) ] ; long <S2SV_ModEnd> tmp ; if <S2SV_ModStart> copy_from_user ( buf <S2SV_ModEnd>, buffer, <S2SV_ModStart> count ) ) return - EFAULT <S2SV_ModEnd> ; tmp =",0
455,"<S2SV_ModStart> ( ( ( strncmp ( & name [ 1 ], ""ORIGIN"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 1 ], ""PLATFORM"", 8 ) == 0 && ( len = 9 )!= 0 ) ) && ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 7 ) == 0 && ( len = 9 )!= 0 ) ) && ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( len = 11 )!= 0 ) ) ) { const char * repl ; if ( repl!= NULL && repl!= ( const char *",0
456,"<S2SV_ModStart> } pDecCont = ( decContainer_t * ) H264SwDecMalloc ( <S2SV_ModEnd> sizeof ( decContainer_t <S2SV_ModStart> ) ) ; if ( pDecCont == NULL ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> Memory <S2SV_blank> allocation <S2SV_blank> failed"" ) ; return ( H264SWDEC_MEMFAIL ) ; }",0
457,"<S2SV_ModStart> drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), & opt -> opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> optlen < sizeof ( struct iphdr ) ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INDISCARDS ) ; goto drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), & opt -> opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> optlen < sizeof ( struct iphdr ) ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INDISCARDS ) ; goto drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), & opt -> opt, skb )",0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,"<S2SV_ModStart> errout ; for ( j = 0 ; j < info -> partitions ; j ++ ) { int cascade = oggpack_read ( opb, 3 ) ; if ( oggpack_read ( opb, 1 ) ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ) ; if ( cascade ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ) ; if ( cascade ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ) ; if ( cascade ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ) ; if ( cascade ) cascade |= ( oggpack_read ( opb, 1 ) ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ) ; if ( cascade ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ) ; if ( cascade ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ) ; if ( cascade ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ) ; if ( cascade ) cascade |= ( oggpack_read ( opb, 1 )",0
460,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( n_key_data <S2SV_ModStart> ; if ( n_key_data > KRB5_MAX_KEY_DATA ) { err = EINVAL ; goto cleanup ; } <S2SV_ModStart> & err ) ; if ( key_data == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_contents [ 1 ] = NULL ; } for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL",0
461,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
462,"<S2SV_ModStart> ] ) ; if ( nByte > UINT32_MAX / sizeof ( * pCsr -> zInput ) ) { rc = SQLITE_NOMEM ; } else if ( nByte > UINT32_MAX / sizeof ( * pCsr -> zInput ) ) { rc = SQLITE_CAST ( int, zByte ) ; if ( nByte > UINT32_MAX / sizeof ( * pCsr -> zInput ) ) { rc = SQLITE_CAST ( int, zByte ) ; if ( nByte > UINT32_MAX / sizeof ( * pCsr -> zInput ) ) { rc = SQLITE_NOMEM ; } else if ( nByte > UINT32_MAX / sizeof ( * pCsr -> zInput ) ) { rc = SQLITE_CAST ( int, zByte ) ; if ( nByte > UINT32_MAX / sizeof ( * pCsr -> zInput ) ) { rc = SQLITE_CAST ( int, zByte ) ; if ( nByte > UINT32_MAX / sizeof ( * pCsr -> zInput ) ) { rc = SQLITE_NOMEM ; } else { rc = SQLITE_CAST ( int, zByte ) ;",0
463,<S2SV_ModStart> filp ) { if ( IS_ERR ( filp ) ) return PTR_ERR ( filp ) ;,0
464,"<S2SV_ModStart> asdl_seq * orelse, string type_comment, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. type_comment = type_comment <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. type_comment <S2SV_ModStart> = orelse ; p -> v. AsyncFor. type_comment <S2SV_ModStart> = orelse ; p -> v. AsyncFor. type_comment",0
465,"<S2SV_ModStart> MI_CHECK * param <S2SV_ModEnd>, char * <S2SV_ModStart> name ) { if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM <S2SV_blank> table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM <S2SV_blank> table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM <S2SV_blank> table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM <S2SV_blank> table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM <S2SV_blank> table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM <S2SV_blank> table <S2SV_blank> \'%s\'\\n",0
466,"<S2SV_ModStart> case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case <S2SV_ModStart> case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ;",0
467,"<S2SV_ModStart> UINT error ; # ifdef WITH_DEBUG_RDPEI WLog_DBG ( TAG, ""rdpei_recv_pdu: <S2SV_blank> eventId: <S2SV_blank> %"" PRIu16 "" <S2SV_blank> (%s) <S2SV_blank> length: <S2SV_blank> %"" """", eventId, rdpei_eventid_string ( eventId ) ) ; WLog_DBG ( TAG, ""rdpei_recv_pdu: <S2SV_blank> pduLength: <S2SV_blank> %"" PRIu32 """", pduLength ) ; # endif switch ( eventId ) { case EVENTID_SC_READY : if ( ( error = rdpei_recv_sc_ready_pdu ( callback, s ) ) { WLog_ERR ( TAG, ""rdpei_recv_sc_ready_pdu <S2SV_blank> failed <S2SV_blank> with <S2SV_blank> error <S2SV_blank> %"" PRIu32 ""!"", error ) ; return error ; } if ( ( error = rdpei_send_cs_ready_pdu ( callback ) ) { WLog_ERR ( TAG, ""rdpei_send_cs_ready_pdu <S2SV_blank> failed <S2SV_blank> with <S2SV_blank> error <S2SV_blank> %"" PRIu32 ""!"", error ) ; return error ; } if ( ( error = rdpei_recv",0
468,"<S2SV_ModStart> ; } } if ( pData -> socket == NULL ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", pData -> description, zmq_strerror ( errno ) ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; } <S2SV_ModStart> ; if ( pData -> socket == NULL ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", pData -> description, zmq_strerror ( errno ) ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; } if ( pData -> socket == NULL ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", pData -> description, zmq_strerror ( errno ) ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; }",0
469,"<S2SV_ModStart> struct flowi6 fl6 ; struct ipv6_txoptions * opt <S2SV_ModStart> ; pr_debug ( ""%s: <S2SV_blank> skb:%p, <S2SV_blank> len:%d, <S2SV_blank> src:%pI6 <S2SV_blank> dst:%pI6\\n"", __func__, skb, skb -> len, & fl6. saddr, & fl6. daddr ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if ( opt ) { struct ipv6_txoptions * opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; fl6. flowlabel = np -> flow_label ; IP6_ECN_flow_xmit ( sk, fl6. flowlabel ) ; IP6_ECN_flow_xmit ( sk, fl6. flowlabel ) ; } <S2SV_ModEnd> pr_debug ( ""%s: <S2SV_blank> skb:%p, <S2SV_blank> len:%d, <S2SV_blank> src:%pI6 <S2SV_blank> dst:%pI6\\n"" <S2SV_ModStart> skb, skb -> len, & fl6. saddr, & fl6.",0
470,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
471,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""Not <S2SV_blank> enough <S2SV_blank> bytes <S2SV_blank> to <S2SV_blank> read <S2SV_blank> RDP_NEG_FAILURE"" ) ; return ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""Not <S2SV_blank> enough <S2SV_blank> bytes <S2SV_blank> to <S2SV_blank> read <S2SV_blank> RDP_NEG_FAILURE"" ) ; return ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""Not <S2SV_blank> enough <S2SV_blank> bytes <S2SV_blank> to <S2SV_blank> read <S2SV_blank> RDP_NEG_FAILURE"" ) ; return ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""Not <S2SV_blank> enough <S2SV_blank> bytes <S2SV_blank> to <S2SV_blank> read <S2SV_blank> RDP_NEG_FAILURE"" ) ; return ;",0
472,"<S2SV_ModStart> = 0 ; bn_t <S2SV_ModEnd> t ; bn_null <S2SV_ModStart> ; RLC_TRY { bn_null ( t ) ; RLC_TRY { bn_new ( t ) ; RLC_TRY { bn_zero ( m ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = k_len - 3 - m_len ; for ( int i = 0 ; i < * p_len ; i ++ ) { rand_bytes ( & pad, 1 ) ; bn_add_dig ( m, m, pad ) ; } bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, 0 ) ; bn_lsh ( m, m, 8 ) ; bn_rsh ( t, m, 8 * m_len ) ; if (! bn_is_zero ( t ) ) { result = RLC_ERR ; } * p_len = m_len ; m_len -- ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ;",0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,"<S2SV_ModStart> SF_PRIVATE ) ) == NULL ) { sf_errno = SFE_MALLOC_FAILED ; return NULL ; } ; psf_init_files ( psf ) ; if ( copy_filename ( psf, path )!= 0 ) { sf_errno = psf -> error ; return NULL ; } ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; if ( copy_filename ( psf, path )!= 0 ) { sf_errno = psf -> error ; return NULL ; } ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; if ( copy_filename ( psf, path )!= 0 ) { sf_errno = psf -> error ; return NULL ; } ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; if ( copy_filename ( psf, path )!= 0 ) { sf_errno = psf -> error ; return NULL ; } ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; if ( copy_filename ( psf, path )!= 0 ) { sf_errno = psf -> error",0
475,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> ++ j ) <S2SV_ModEnd> count [ i,0
476,"<S2SV_ModStart> ) { VP9_COMMON * const cm = & cpi -> common ; <S2SV_ModStart> -> act_zbin_adj = 0 <S2SV_ModEnd> ; vp9_setup_src_planes ( <S2SV_ModStart> = 0 ; vp9_setup_pre_planes ( xd, 0, cpi -> Source, 0, 0, NULL ) ; vp9_setup_dst_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vpx_memset ( xd -> above_context [ 0 ], 0, sizeof ( * xd -> above_context [ 0 ] ) * aligned_mi_cols ) ; vpx_memset ( xd -> above_seg_context, 0, sizeof ( * xd -> above_seg_context ) * aligned_mi_cols ) ; vpx_memset ( xd -> above_context, 0, sizeof ( * xd -> above_context ) * aligned_mi_cols ) ; vpx_memset ( xd -> above_seg_context, 0, sizeof ( * xd -> above_seg_context ) * aligned_mi_cols ) ; vpx_memset ( xd ->",0
477,"<S2SV_ModStart> = htc_request_check_host_hdr ( sp <S2SV_ModEnd>, hp ) <S2SV_ModStart> = htc_request_check_host_hdr ( sp <S2SV_ModEnd>, hp ) <S2SV_ModStart> = htc_request_check_host_hdr ( sp <S2SV_ModEnd>, hp ) <S2SV_ModStart> = htc_request_check_host_hdr ( sp <S2SV_ModEnd>, hp ) <S2SV_ModStart> = htc_request_check_host_hdr ( sp <S2SV_ModEnd>, hp ) <S2SV_ModStart> = htc_request_check_host_hdr ( sp <S2SV_ModEnd>, hp ) <S2SV_ModStart> = htc_request_check_host_hdr ( sp <S2SV_ModEnd>, hp ) <S2SV_ModStart> = htc_request_check_host_hdr ( sp <S2SV_ModEnd>, hp ) <S2SV_ModStart> = htc_request_check_host_hdr ( sp <S2SV_ModEnd>, hp ) <S2SV_ModStart> = htc_request_check_host_hdr ( sp <S2SV_ModEnd>, hp ) <S2SV_ModStart> = htc_request_check_host_hdr ( sp <S2SV_ModEnd>, hp ) <S2SV_ModStart> = htc_request_check_host_hdr ( sp <S2SV_ModEnd>, hp )",0
478,"<S2SV_ModStart> EOFOp 0x07 <S2SV_ModEnd> Image * image <S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) <S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status",0
479,<S2SV_ModStart> len ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY (,0
480,<S2SV_ModStart> u2_frame_num ) ; if ( ps_prev_poc -> i4_delta_pic_order_cnt_lsb < 0 || ps_prev_poc -> i4_delta_pic_order_cnt_msb < 0 ) { ps_dec -> i4_delta_pic_order_cnt_lsb = 0 ; ps_dec -> i4_delta_pic_order_cnt_msb = 0 ; ps_dec -> i4_delta_pic_order_cnt_lsb = ps_prev_poc -> i4_delta_pic_order_cnt_lsb ; ps_dec -> i4_delta_pic_order_cnt_msb = ps_prev_poc -> i4_delta_pic_order_cnt_msb ; ps_dec -> i4_delta_pic_order_cnt_lsb = ps_prev_poc -> i4_delta_pic_order_cnt_lsb ; ps_dec -> i4_delta_pic_order_cnt_msb = ps_cur_poc -> i4_delta_pic_order_cnt_msb ;,0
481,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_iocinfo * karg <S2SV_ModEnd> ; struct pci_dev <S2SV_ModStart> * pdev ; <S2SV_ModEnd> int port ; <S2SV_ModStart> return PTR_ERR ( karg <S2SV_ModEnd> ) ; } <S2SV_ModStart> return PTR_ERR ( karg <S2SV_ModEnd> ) ; }",0
482,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
483,"<S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv",0
484,"<S2SV_ModStart> -> offset ; if ( ( datao + 12 < datao ) || ( datao + 12 < 12 ) || ( datao + 12 > buf_size ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; if ( ( datao + 2 < datao ) || ( datao + 2 < 2 ) || ( datao + 2 > buf_size ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + o, EXIF_BYTE_ORDER_INTEL ) ; if (! c ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } exif_mnote_data_fuji",0
485,"<S2SV_ModStart> 0 ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModStart> 0 ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModStart> 1 ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModStart> 0 ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModStart> 0 ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModStart> 1 ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; }",0
486,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> unbind_ports ( void <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> CRYPTO_THREAD_write_lock ( stunnel_locks <S2SV_ModStart> LOCK_SECTIONS ] ) ; while ( service_options. next ) { unsigned i ; service_options. next = opt -> next ; opt -> next = NULL ; service_free ( & service_options ) ; while ( opt ) { unsigned i ; s_log ( LOG_DEBUG, ""Unbinding <S2SV_blank> service <S2SV_blank> [%s]"", opt -> servname ) ; for ( i = 0 ; i < opt -> local_addr. num ; ++ i ) unbind_port ( opt, i ) ; if ( opt -> exec_name && opt -> connect_addr. names ) { SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; } if ( opt -> ctx ) SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; s_log ( LOG_DEBUG, ""Service <S2SV_blank> [%s] <S2SV_blank> closed"", opt -> servname",0
487,"<S2SV_ModStart> void ) { if ( strchr ( mnemonic, '\\0' ) ) { mnemonic [ strlen ( mnemonic ) - 1 ] = '\\0' ; }",0
488,"<S2SV_ModStart> ( interface, ENC624J600_EHT0 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT0 <S2SV_ModEnd> ) ; enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT0 <S2SV_ModEnd> ) ; enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>,",0
489,"<S2SV_ModStart> ) packets ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
490,"<S2SV_ModStart> ps_slice_hdr ) { memset ( ps_slice_hdr, 0, sizeof ( slice_header_t ) ) <S2SV_ModStart> ps_slice_hdr ) ; memset ( ps_slice_hdr, 0, sizeof ( slice_header_t ) ) <S2SV_ModStart> ps_slice_hdr ) ; memcpy <S2SV_ModEnd> ( ps_pic_buf, <S2SV_ModStart> ps_slice_hdr ) ; memcpy <S2SV_ModEnd> ( ps_mv_buf, <S2SV_ModStart> ps_slice_hdr ) ; memcpy <S2SV_ModEnd> ( ps_dpb_mgr -> <S2SV_ModStart> ps_slice_hdr ) ; memcpy <S2SV_ModEnd> ( ps_mv_buf, <S2SV_ModStart> ps_slice_hdr ) ; memcpy <S2SV_ModEnd> ( ps_slice_hdr, <S2SV_ModStart> ps_slice_hdr ) ; memcpy <S2SV_ModEnd> ( ps_pic_buf, <S2SV_ModStart> ; memcpy <S2SV_ModEnd> ( ps_mv_buf, <S2SV_ModStart> ps_slice_hdr ) ; memcpy <S2SV_ModEnd> ( ps_pic_buf, <S2SV_ModStart> ps_slice_hdr ) ; memcpy <S2SV_ModEnd> ( ps_dpb_mgr -> <S2SV_ModStart> ps_slice_hdr ) ; memcpy <S2SV_ModEnd> ( ps_mv_buf, <S2SV_ModStart> ps_slice_hdr ) ; memcpy <S2SV_ModEnd>",0
491,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> print_object ( cJSON <S2SV_ModStart> ; while ( child ) { ++ numentries ; child = child -> next ; } if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) { ++ numentries ; child = child -> next ; } if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) { cJSON_free ( names ) ; cJSON_free ( names ) ; cJSON_,0
492,"<S2SV_ModStart> ; other = rcu_dereference_protected ( sk -> sk_wmem_alloc, sock_owned_by_user ( sk ) <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; if ( rcu_dereference_protected ( sk -> sk_wmem_alloc, sock_owned_by_user ( sk ) ) ) <S2SV_ModStart> ; if ( rcu_dereference_protected ( sk -> sk_wmem_alloc, sock_owned_by_user ( sk ) ) <S2SV_ModStart> ; if ( rcu_dereference_protected ( sk -> sk_wmem_alloc, sock_owned_by_user ( sk ) ) <S2SV_ModStart> ; if ( rcu_dereference_protected ( sk -> sk_wmem_alloc, sock_owned_by_user ( sk ) ) ) { if ( rcu_dereference_protected ( sk -> sk_wmem_alloc, sock_owned_by_user ( sk ) ) == 0 ) writable = 0 ; } if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else mask |= POLLOUT | POLLWRBAND ; else mask |=",0
493,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> += sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> += sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> += sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> += sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> += sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> += sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> += sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3",0
494,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return GSS_S_DEFECTIVE_TOKEN ; <S2SV_ModStart> return GSS_S_DEFECTIVE_TOKEN ; } if ( header -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN <S2SV_ModStart> return GSS_S_DEFECTIVE_TOKEN ; },0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { <S2SV_ModEnd> vp9_ref_frame_t * frame <S2SV_ModStart> vp9_ref_frame_t * ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> NULL ) { <S2SV_ModEnd> vp9_get_reference_enc ( ctx <S2SV_ModStart> YV12_BUFFER_CONFIG * fb <S2SV_ModEnd> ; yuvconfig2image (",0
496,<S2SV_ModStart> plug ) ; if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_,0
497,"<S2SV_ModStart> const char * name <S2SV_ModEnd> ) { int <S2SV_ModStart> rep_quick ) { if ( param -> testflag & T_UNPACK ) { printf ( ""- <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %s\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %s\\n"", llstr ( start_records, llbuff ) ) ; } else if ( param -> testflag & T_UNPACK ) { printf ( ""- <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %s\\n"", llstr ( start_records, llbuff ) ) ; } if ( param -> testflag & T_SILENT ) { printf ( ""- <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %s\\n"", llstr ( start_records, llbuff ) )",0
498,"<S2SV_ModStart> s } ; <S2SV_ModEnd> uECC_word_t carry ; <S2SV_ModStart> curve ) ; if (! g_rng_function ) { uECC_vli_clear ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } <S2SV_ModStart> curve ) ; if (! g_rng_function ) { uECC_generate_random_int ( tmp, curve -> n, num_n_words ) ; tmp [ 0 ] = 1 ; } else { uECC_generate_random_int ( tmp, curve -> n, num_n_words ) ; if (! g_rng_function ) { uECC_vli_clear ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } if (! g_rng_function ) { uECC_generate_random_int ( tmp, curve -> n, num_n_words ) ; tmp [ 0 ] = 1 ; } else { uECC_generate_random_int ( tmp, curve -> n, num_n_words ) ; if (! g_rng_function ) { uECC_vli_clear ( tmp, num_",0
499,"<S2SV_ModStart> trunc : ND_TCHECK2 ( * ( bp + 1 ), ND_RPL_DAOACK_TRUNC_LEN ) ; if ( length < ND_RPL_DAOACK_TRUNC_LEN ) goto trunc ; <S2SV_ModStart> trunc : ND_TCHECK2 ( * ( bp + 1 ), ND_RPL_DAOACK_TRUNC_LEN ) ; if ( length < ND_RPL_DAOACK_TRUNC_LEN ) { ND_TCHECK2 ( * ( bp + 1 ), ND_RPL_DAOACK_TRUNC_LEN ) ; if ( length < ND_RPL_DAOACK_TRUNC_LEN ) goto trunc ; ND_TCHECK2 ( * ( bp + 1 ), ND_RPL_DAOACK_TRUNC_LEN ) ; if ( length < ND_RPL_DAOACK_TRUNC_LEN ) { ND_TCHECK2 ( * ( bp + 1 ), ND_RPL_DAOACK_TRUNC_LEN ) ; if ( length < ND_RPL_DAOACK_",0
500,"<S2SV_ModStart> = buf ; memset ( pool -> free_arr, 0, sizeof ( nw_buf * ) ) ;",0
501,"<S2SV_ModStart> tp ) { <S2SV_ModEnd> const char hex <S2SV_ModStart> = ""00112233445566778899aAbBcCdDeEfF"" ; <S2SV_ModEnd> const char * <S2SV_ModStart> = ""00112233445566778899aAbBcCdDeEfF"" ; const <S2SV_ModStart> = ""00112233445566778899aAbBcCdDeEfF"" ; const <S2SV_ModStart> = ""00112233445566778899aAbBcCdDeEfF"" ; if ( * cp == 'x' || * cp == 'X' ) for ( ++ cp ; * cp && ( index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; else if ( * cp == 'o' || * cp == 'O' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp - '0' ) ; else for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 10",0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,"<S2SV_ModStart> * lined ; l_uint32 pixm, * pixg, * pixd ; PROCNAME ( ""pixFewColorsOctcubeQuantMixed"" ) ; if (! pixs ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; if ( pixGetDepth ( pixs )!= 32 ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; if ( pixGetDepth ( pixs )!= 32 ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; if ( pixGetDepth ( pixs )!= 32 ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; if ( pixGetDepth ( pixs )!= 32 ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL )",0
504,<S2SV_ModStart> = 256 ; vp8_variance_fn_ptr_t <S2SV_ModEnd> vf = vp8_mse16x16 <S2SV_ModStart> = vp8_mse16x16 ; vp8_variance_fn_ptr_t <S2SV_ModEnd> vf = vp8_mse16x16 <S2SV_ModStart> = vp8_mse16x16 ; vp8_variance_fn_ptr_t <S2SV_ModEnd> vf = vp8_mse16x16 <S2SV_ModStart> = vp8_mse16x16 ; vp8_variance_fn_ptr_t <S2SV_ModEnd> vf = vp8_mse16x16 <S2SV_ModStart> = vp8_mse16x16 ; vp8_variance_fn_ptr_ptr_t <S2SV_ModEnd> vf = vp8_mse16x16 <S2SV_ModStart> = vp8_mse16x16 ; vp8_variance_fn_ptr_t <S2SV_ModEnd> vf = vp8_mse16x16 <S2SV_ModStart> = vp8_mse16x16 ; vp8_variance_fn_ptr_t <S2SV_ModEnd> vf = vp8_mse16x16 <S2SV_ModStart> = vp8_mse16x16 ; vp8_variance_fn_ptr_t <S2SV_ModEnd> vf = vp8_,0
505,"<S2SV_ModStart> char * data ; size_t <S2SV_ModEnd> size = overhead <S2SV_ModStart> = overhead ; if ( count < 0 ) return MONGO_ERROR ; for ( i = 0 ; i < count ; i ++ ) { if ( bson_bson_valid ( conn, bsons [ i ], 1 )!= MONGO_OK ) return MONGO_ERROR ; if ( mongo_validate_ns ( conn, ns )!= MONGO_OK ) return MONGO_ERROR ; for ( i = 0 ; i < count ; i ++ ) { size += bson_size ( bsons [ i ] ) ; if ( mongo_bson_valid ( conn, bsons [ i ], 1 )!= MONGO_OK ) return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; }",0
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_response ( rdpNego <S2SV_ModStart> = NEGO_STATE_FAIL ; return FALSE <S2SV_ModEnd> ; } Stream_Read_UINT8 <S2SV_ModStart> = NEGO_STATE_FINAL ; return TRUE <S2SV_ModEnd> ; } <S2SV_null>,0
507,"<S2SV_ModStart> int i, target_bits_per_mb ; const double correction_factor = get_rate_correction_factor ( cpi ) ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs <S2SV_ModStart> ; do { const int bits_per_mb_at_this_q = ( int ) vp9_rc_bits_per_mb ( cm -> frame_type, i, correction_factor ) ; if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { if ( ( target_bits_per_mb - bits_per_mb_at_this_q ) <= last_error ) q = i - 1 ; break ; } if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { if ( ( target_bits_per_mb - bits_per_mb_at_this_q ) <= last_error ) q = i - 1 ; break ; } else { last_error = bits_per_mb_at_this_q - target_bits_",0
508,<S2SV_ModStart> value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
509,"<S2SV_ModStart> ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i",0
510,"<S2SV_ModStart>, MB_PREDICTION_MODE mode <S2SV_ModEnd>, TX_SIZE tx_size <S2SV_ModStart>, TX_SIZE tx_size <S2SV_ModEnd>, int up_available <S2SV_ModStart> ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 16 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 16 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 16 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 16 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 16 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 16 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 16 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 16 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 16 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 16 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 16 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 16 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 16 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 16 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 16 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16,",0
511,"<S2SV_ModStart> ; } else if ( end == 0 ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> empty <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end == 0 ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> empty <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end == 0 ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> empty <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( end == 0 ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> empty <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end == 0 ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> empty <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end == 0 ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> empty <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( end == 0 ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> :",0
512,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ;,1
513,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> -> common ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_",0
514,"<S2SV_ModStart> stroff ) { if ( stroff > 0 ) strncpy <S2SV_ModEnd> ( parsetime_error, <S2SV_ModStart> stroff ) ; if ( stroff > 0 ) strncpy <S2SV_ModEnd> ( parsetime_error, <S2SV_ModStart> stroff ) ; if ( stroff > 0 ) strncpy <S2SV_ModEnd> ( parsetime_error, <S2SV_ModStart> stroff ) ; if ( stroff > 0 ) strncpy <S2SV_ModEnd> ( parsetime_error, <S2SV_ModStart> stroff ) ; if ( stroff > 0 ) strncpy <S2SV_ModEnd> ( parsetime_error, <S2SV_ModStart> stroff ) ; if ( stroff > 0 ) strncpy <S2SV_ModEnd> ( parsetime_error, <S2SV_ModStart> stroff ) ; if ( stroff > 0 ) strncpy <S2SV_ModEnd> ( parsetime_error, <S2SV_ModStart> stroff ) ; if ( stroff > 0 ) strncpy <S2SV_ModEnd> ( parsetime_error, <S2SV_ModStart> stroff ) ; if ( stroff > 0 ) strncpy <S2SV_ModEnd> ( parsetime_error, <S2SV_ModStart> stroff ) ; if ( stroff > 0 ) strncpy <S2SV_ModEnd> ( parsetime_error,",0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart>'<S2SV_blank>') ; if ( p == NULL ) return ERROR_INVALID_SYNTAX ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart>'<S2SV_blank>') ; if ( p == NULL ) return ERROR_INVALID_SYNTAX ; q = osStrchr <S2SV_ModEnd> ( p +,0
516,"<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && <S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && <S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i + 1 ) ) == COMMA ) i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case DOUBLESTAR : if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i + 1 ) ) == COMMA ) i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE",0
517,<S2SV_ModStart> KEY_FRAME ) { memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd ->,0
518,"<S2SV_ModStart> error ; uint16_t n <S2SV_ModEnd> ; uint32_t status <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & n, sizeof ( uint16_t ) ) ; n = letoh16 ( n ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & status, sizeof ( uint32_t ) ) ; status = letoh32 ( status ) ; if ( ( status & RSV_RECEIVED_OK )!= 0 ) { n = MIN ( n, ETH_MAX_FRAME_SIZE ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & status, sizeof ( uint32_t ) ) ; status = letoh32 ( status ) ; if (",0
519,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> read_memory ( VALUE <S2SV_ModStart> VALUE content ) { xmlSchemaParserCtxtPtr ctx = xmlSchemaNewMemParserCtxt ( ( const char * ) StringValuePtr ( content ), ( int ) RSTRING_LEN ( content ) ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; schema = xmlSchemaParse ( ctx ) ; if ( NULL == schema ) { xmlErrorPtr error = xmlGetLastError ( ) ; if ( error ) Nokogiri_error_raise ( NULL, error ) ; else rb_raise ( rb_eRuntimeError, ""Could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> document"" ) ; return Qnil ; } rb_iv_set ( rb_schema, ""@errors"", errors )",0
520,"<S2SV_ModStart> config_arg ) { if ( strlen ( config_arg ) < 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> argument <S2SV_blank> in <S2SV_blank> service <S2SV_blank> options <S2SV_blank> file"" ) ; print_syntax ( ) ; return 1 ; } else if ( strlen ( config_arg ) < 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> argument <S2SV_blank> in <S2SV_blank> service <S2SV_blank> options <S2SV_blank> file"" ) ; print_syntax ( ) ; return 1 ; }",0
521,<S2SV_ModStart> / 2 ] ; out [ 3 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; <S2SV_ModStart> / 2 ] ; out [ 5 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; <S2SV_ModStart> / 2 ] ; out [ 3 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; <S2SV_ModStart> / 2 ] ; out [ 4 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; out [ 5 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 13 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; out [ 14 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; out [ 15 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; out [ 13 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; out [ 15 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; out [ 14 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; out [ 15,0
522,<S2SV_ModStart> err = - EBUSY <S2SV_ModEnd> ; if (,0
523,"<S2SV_ModStart>, POLL_IN ) ; perf_event_wakeup ( handle -> event ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> utf8s_to_utf16s ( const <S2SV_ModStart> len, wchar_t <S2SV_ModEnd> * pwcs ) <S2SV_ModStart> - EINVAL ; size = utf8_to_utf32 ( s, len, & u ) ; if ( size < 0 ) return - EINVAL ; <S2SV_ModStart> ( u >= PLANE_SIZE <S2SV_ModEnd> ) { u <S2SV_ModStart> -= PLANE_SIZE ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u",0
525,"<S2SV_ModStart> EPROTONOSUPPORT ) { <S2SV_ModEnd> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure""",0
526,"<S2SV_ModStart> nicContext ; status = ksz8851ReadReg ( interface, KSZ8851_RXFHSR ) ; if ( ( status & ( RXFHSR_RXFV | RXFHSR_RXFV_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE ) )!= 0 ) { if ( ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE ) )!= 0 ) { if ( ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE ) )!= 0 ) { if ( ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RX",0
527,"<S2SV_ModStart> const node * n, const asdl_seq * decorator_seq <S2SV_ModEnd>, int is_async <S2SV_ModStart> ) { identifier name ; arguments_ty args ; expr_ty returns = NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 2 ), 0 ) ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 3 ), 0 ) ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 3 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 3 ) ; body = ast_for_suite ( c, CHILD ( n, name_i + 3 ) ) ; if (! body ) return NULL ; if",0
528,"<S2SV_ModStart> int i ; if ( pgd_none_or_clear_bad ( pgd ) ) goto out ; if ( pud_none_or_clear_bad ( pud ) ) goto out ; pud = pud_offset ( pgd, 0xA0000 ) ; if ( pud_none_or_clear_bad ( pud ) ) goto out ; pmd = pmd_offset ( pmd, 0xA0000 ) ; if ( pmd_none_or_clear_bad ( pmd ) ) goto out ;",0
529,"<S2SV_ModStart> ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } <S2SV_ModEnd> dst_coap_msg_ptr -> token_len <S2SV_ModStart> ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; }",0
530,"<S2SV_ModStart> ) ) { if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; }",0
531,"<S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD if ( ( RAW ( row, col ) = pred [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; # else for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { if ( ( RAW ( row, col ) = pred [ row & 1 ] ) > 4098 && row < width ) derror ( ) ; # else for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ )",0
532,<S2SV_ModStart> len < needed || len > param -> data_size,0
533,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
534,<S2SV_ModStart> bfqq ) return bfq_idle_slice_timer_body <S2SV_ModEnd> ( bfqq ),0
535,<S2SV_ModStart> ; length += <S2SV_ModEnd> PRIMARY_DRAWING_ORDER_FIELD_BYTES [ orderInfo,0
536,<S2SV_ModStart>! OVL_TYPE_UPPER ( old_type <S2SV_ModEnd> ) ) { <S2SV_ModStart>! OVL_TYPE_UPPER ( new_type <S2SV_ModEnd> ) ) { <S2SV_ModStart>! OVL_TYPE_UPPER ( old_type <S2SV_ModEnd> ) ) { <S2SV_ModStart>! OVL_TYPE_UPPER ( new_type <S2SV_ModEnd> ) ) { <S2SV_ModStart>! OVL_TYPE_UPPER ( old_type <S2SV_ModEnd> ) ) { <S2SV_ModStart>! OVL_TYPE_UPPER ( new_type <S2SV_ModEnd> ) ) { <S2SV_ModStart>! OVL_TYPE_UPPER ( old_type <S2SV_ModEnd> ) ) { <S2SV_ModStart>! OVL_TYPE_UPPER ( old_type <S2SV_ModEnd> ) ) { <S2SV_ModStart>! OVL_TYPE_UPPER ( old_type <S2SV_ModEnd> ) ) { <S2SV_ModStart>! OVL_TYPE_UPPER ( new_type <S2SV_ModEnd> ) ) { <S2SV_ModStart>! OVL_TYPE_UPPER ( old_type <S2SV_ModEnd> ) ) { <S2SV_ModStart>! OVL_TYPE_UPPER ( new_type <S2SV_ModEnd> ) ) { <S2SV_ModStart>! OVL_TYPE_UPPER ( old_type <S2SV_ModEnd> ) ) { <S2SV_ModStart>! OVL_TYPE_UPPER ( old_type <S2SV_ModEnd> ) ) { <S2SV_ModStart>! OVL_TYPE_UPPER ( old_type <S2SV_ModEnd> ) ),0
537,"<S2SV_ModStart> int plane ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) vpx_foreach_transformed_block_in_plane ( xd, bsize, visit, arg ) ; # else for ( plane = 0 ; plane < MAX_MB_PLANE ; plane ++ ) vpx_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) vpx_foreach_transformed_block_in_plane ( xd, bsize, visit, arg ) ; # else for ( plane = 0 ; plane < MAX_MB_PLANE ; plane ++ ) vpx_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) vpx_foreach_transformed_block_in_plane ( xd, bsize",0
538,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nonrd_pick_sb_modes ( VP9_COMP <S2SV_ModStart> -> e_mbd ; <S2SV_ModEnd> set_offsets ( cpi <S2SV_ModStart>, mi_row, mi_col, rate, dist, bsize ) ; if ( xd -> mi [ 0 ] -> mbmi. sb_type!= bsize ) { vp9_pick_inter_mode ( cpi, x, tile, xd, mi_row, mi_col, rate, dist, bsize ) ; } else if ( xd -> mi [ 0 ] -> mbmi. sb_type!= bsize ) { vp9_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; } if ( frame_is_intra_only ( cm ) ) { vp9_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else { MB_PREDICTION_MODE intramode = DC",0
539,"<S2SV_ModStart> = NULL ; if ( feof ( reader. fhd ) ) { log ( ""cannot <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s\\n"", filename ) ; * err = errno ; return NULL ; }",0
540,"<S2SV_ModStart> = 1 ; memset ( pMap -> ranges, 0, sizeof ( MappedRange ) ) ;",0
541,<S2SV_ModStart> ; if ( flags & ( VP8_EFLAG_NO_UPD_GF | VP8_EFLAG_NO_UPD_ARF ) ) { int ref = 7 ; if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) ref ^= VP8_ALTR_FRAME ; if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) ref ^= VP8_ALTR_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; if ( flags & VP8_,0
542,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
543,<S2SV_ModStart> event ) ; <S2SV_ModEnd> hlist_add_head_rcu ( & <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> } hlist_add_head_rcu (,0
544,"<S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) { <S2SV_ModStart> case BGPTYPE_IPV4_ADDRESS : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGPTYPE_IPV6_ADDRESS : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGPTYPE_IPV6_ADDRESS : if ( len < 6 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> ip <S2SV_blank> address <S2SV_blank> length"" ) ) ; break ; } <S2SV_ModStart> case BGPTYPE_IPV6_ADDRESS : if ( len < 6 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> ip <S2SV_blank> address <S2SV_blank> length"" ) ) ; break ; } <S2SV_ModStart> case BGPTYPE_IPV6_ADDRESS : if ( len < 6 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> ip <S2SV_blank> address <S2SV_blank> length"" ) ) ; break ; } <S2SV_ModStart> case BGPTYPE_IPV6_ADDRESS : if ( len < 6 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> ip <S2SV_blank> address <S2SV_blank> length"" ) ) ; break",0
545,"<S2SV_ModStart> ""<table <S2SV_blank> id=\'status-table\'><tr>"" ""<th <S2SV_blank> width=\'40%%\'>Parameter</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'40%%\'>Environment</th>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'40%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""</th>""",0
546,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
547,"<S2SV_ModStart> ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ) ; if ( isAddLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ; } else if ( isRemoveLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"" ; } <S2SV_ModStart> ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"" ) ; if ( isAddLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ; } else if ( isAddLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ; } else if ( isRemoveLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"" ; }",0
548,"<S2SV_ModStart> ++ ) { if ( len < sizeof ( struct usb_descriptor_header ) ) { dev_err ( ddev, ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d\\n"", cfgidx ) ; return - EINVAL ; } <S2SV_ModStart> ++ ) { if ( len < sizeof ( struct usb_descriptor_header ) ) { dev_err ( ddev, ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d\\n"", cfgidx ) ; return - EINVAL ; } <S2SV_ModStart> ++ ) { if ( len < sizeof ( struct usb_descriptor_header ) ) { dev_err ( ddev, ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d\\n"", cfgidx ) ; return - EINVAL ; } <S2SV_ModStart> ++ ) { if ( len < sizeof ( struct usb_descriptor_header ) ) { dev_err ( ddev, ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d\\n"", cfgidx ) ; return - EINVAL ; } <S2SV_ModStart> ++ ) { if ( len < sizeof ( struct usb_descriptor_header ) ) { dev_err ( ddev, ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %",0
549,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
550,"<S2SV_ModStart> 16 ) ; if ( xd -> mode_info_context -> mbmi. mode == DC_PRED ) { distortion = vp8_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; } else { distortion = vp8_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; distortion = vp8_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; distortion = vp8_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; rate = x -> mbmode_cost [ xd -> frame_type ] [ mode ] ; if ( error16x16 > this_rd ) { error16x16 = this_rd ; best_mode = mode ; best_sse = sse ; } }",0
551,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN <S2SV_ModEnd> | ENC624J600_ECON2_STRCH ) <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR4 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR5 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR6 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR4 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR5 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR4 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR5 <S2SV_ModEnd> ) ; interface",0
552,"<S2SV_ModStart> * start ; va_start ( argptr, format ) ; vsnprintf ( start, maxlen, format, argptr ) ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> = 0 ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> = 0 ; <S2SV_ModEnd> psf -> headindex",0
553,<S2SV_ModStart> alg_priv ) { vpx_alg_destroy_priv <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> alg_priv ) ; vpx_alg_destroy_priv <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> alg_priv ) ; vpx_alg_destroy_priv <S2SV_ModEnd> ( ctx ->,0
554,"<S2SV_ModStart> speed ) { <S2SV_ModEnd> sf -> adaptive_rd_thresh <S2SV_ModStart> -> use_square_partition_only = <S2SV_ModEnd> frame_is_intra_only ( cm <S2SV_ModStart> ; sf -> <S2SV_ModEnd> tx_size_search_method = vp9_frame_is_boosted <S2SV_ModStart> = vp9_frame_is_boosted ( cpi )? USE_FULL_RD : USE_LARGESTALL ; if ( MIN ( cm -> width, cm -> height ) >= 720 ) sf -> disable_split_mask = DISABLE_ALL_SPLIT ; else sf -> disable_split_mask = DISABLE_COMPOUND_SPLIT ; if ( MIN ( cm -> width, cm -> height ) >= 720 ) sf -> disable_split_mask = DISABLE_ALL_INTER_SPLIT ; else sf -> disable_split_mask = DISABLE_COMPOUND_SPLIT ; if ( MIN ( cm -> width, cm -> height ) >= 720 ) sf -> disable_split_mask = DISABLE_ALL_SPLIT ; else sf -> disable_split_mask = DISABLE_ALL_INTER_SPLIT ; sf -> mode_skip_start = 10 ; sf -> adaptive_pred_interp_filter",0
555,"<S2SV_ModStart> ) ; int ret ; if ( ts [ h ]. thread_id < 0 ) { APPL_TRACE_ERROR ( ""socket <S2SV_blank> poll <S2SV_blank> thread <S2SV_blank> exiting, <S2SV_blank> h:%d"", h ) ; break ; } ret = select ( pfds, ts [ h ]. poll_count, - 1 ) ; if ( ret == - 1 ) { APPL_TRACE_ERROR ( ""socket <S2SV_blank> poll <S2SV_blank> thread <S2SV_blank> exiting, <S2SV_blank> h:%d"", h ) ; break ; } if ( ret == 0 ) { APPL_TRACE_ERROR ( ""socket <S2SV_blank> poll <S2SV_blank> thread <S2SV_blank> exiting, <S2SV_blank> errno:%d, <S2SV_blank> err:%s"", errno, strerror ( errno ) ) ; break ; }",0
556,"<S2SV_ModStart> ; int goodsize ; if ( inuse > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) { luaD_reallocstack ( L, goodsize, 0 ) ; } else if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) { luaD_reallocstack ( L, goodsize, 0 ) ; }",0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,"<S2SV_ModStart> n ) ; <S2SV_ModEnd> const char * <S2SV_ModStart> * s = STR ( CHILD ( n, 0 ) ) ; int quote = Py_CHARMASK ( * s ) ; char * ch, s_kind [ 3 ] = { 0, 0, 0 } ; while ( * raw && * raw!= '\\'' && * raw!= \'""\' ) { * ch ++ = * raw ++ ; } kind = PyUnicode_FromString ( kind ) ; if (! kind ) { return NULL ; } if ( str ) { # ifdef Py_USING_UNICODE if ( PyErr_ExceptionMatches ( PyExc_UnicodeError ) ) { PyErr_Fetch ( & type, & value, & tback ) ; errstr = PyObject_Str ( value ) ; if ( errstr ) { PyOS_snprintf ( buf, sizeof ( buf ), ""(unicode <S2SV_blank> error) <S2SV_blank> %s"", errstr ) ; ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF ( type ) ; Py_DECREF ( value ) ; Py_XDECREF (",0
559,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> break ; } if ( strcmp ( option_name, ""encoding-mode"" ) == 0 ) { res = set_option_encoding_mode ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""layers"", option_name ) == 0 ) { svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_factors ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers-keyframe"", option_name ) == 0 ) { res = parse_",0
560,"<S2SV_ModStart> ) ; } fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; mb_index = 0 ; fprintf ( mvs, ""Mb <S2SV_blank> mv <S2SV_blank> ref <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. ref_frame ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; mb_index ++ ; } fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. uv_mode ) ; mb_index ++ ; fprintf ( mvs, ""\\",0
561,<S2SV_ModStart> self ) { <S2SV_ModEnd> PyObject * new_memo,0
562,,1
563,"<S2SV_ModStart> ) ) { if ( imp_dbh -> pmysql ) { <S2SV_ModStart> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql )",0
564,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, FIONREAD, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, FIONREAD, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, FIONREAD, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, FIONREAD, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, FIONREAD, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, FIONREAD, TEMP_FAILURE_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_",0
565,<S2SV_ModStart> ieee_802_11_phdr phdr ; if ( len_remain < sizeof ( struct ieee_802_11_phdr ) ) { len_remain = sizeof ( struct ieee_802_11_phdr ) ; ampdu_len = sizeof ( struct ieee_802_11_phdr ) ; } <S2SV_ModStart> ieee_802_11_phdr phdr ; if ( ampdu_len > sizeof ( struct ieee_802_11_phdr ) ) { if ( ampdu_len < sizeof ( struct ieee_802_11_phdr ) ) { ampdu_len = sizeof ( struct ieee_802_11_phdr ) ; if ( ampdu_len > sizeof ( struct ieee_802_11_phdr ) ) { if ( ampdu_len > sizeof ( struct ieee_802_11_phdr ) ) ampdu_len = sizeof ( struct ieee_802_11_phdr ) ; if ( ampdu_len < sizeof ( struct ieee_802_11_phdr ) ) ampdu_len = sizeof ( struct i,0
566,<S2SV_ModStart> ; sh = s_malloc0 <S2SV_ModEnd> ( hdrlen +,0
567,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> BYTE a_val ; <S2SV_ModEnd> UINT32 scanline ; <S2SV_ModStart> UINT32 tempWidth ; scanline = ROUND_UP_TO ( scanline, 8 ) ; yplane = context -> priv -> PlaneBuffers [ 0 ] + y * scanline ; coplane = context -> priv -> PlaneBuffers [ 1 ] + y * scanline ; cgplane = context -> priv -> PlaneBuffers [ 2 ] + y * scanline ; aplane = context -> priv -> PlaneBuffers [ 3 ] + y * scanline ; for ( y = 0 ; y < context -> height ; y ++ ) { src = data + ( context -> height - 1 - y ) * scanline ; src ++ ; a_val = 0xFF ; break ; case PIXEL_FORMAT_BGR24 : b_val = * src ++ ; g_val = * src ++ ; r_val = * src ++ ; b_val = * src ++ ; a_val = 0xFF ; break ; case PIXEL_FORMAT_RGB",0
568,"<S2SV_ModStart> - EINVAL ) ; if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, ptr - str ) ; goto out_free ; } <S2SV_ModStart> - EINVAL ) ; if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, ptr - str ) ; goto out_free ; } <S2SV_ModStart> - EINVAL ) ; if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, ptr - str ) ; goto out_free ; }",0
569,<S2SV_ModStart> cpi ) { const VP9EncoderConfig <S2SV_ModEnd> * rc = <S2SV_ModStart> = ( ( cpi <S2SV_ModEnd> -> oxcf. <S2SV_ModStart>. starting_buffer_level / <S2SV_ModEnd> 2 ) > <S2SV_ModStart>. starting_buffer_level / <S2SV_ModEnd> 2 )? <S2SV_ModStart>. starting_buffer_level / <S2SV_ModEnd> 2 : ( <S2SV_ModStart>. starting_buffer_level / <S2SV_ModEnd> 2 ) ; <S2SV_ModStart>. starting_buffer_level / <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> ; if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { int kf_boost = ( int ) ( rc -> frames_since_key / cpi -> output_framerate / 2 ) ; if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { kf_boost = ( int ) ( kf_boost * rc -> frames_since_key / cpi -> output_framerate / 2 ) ; if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { kf_boost = ( int ) ( rc -> frames_since_key /,0
570,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",1
571,"<S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110",0
572,<S2SV_ModStart> -> cpi ; MACROBLOCK * const mb = & cpi -> mb ; <S2SV_ModStart> uint8_t token_cache [ 64 <S2SV_ModEnd> * 32 ] <S2SV_ModStart> uint8_t token_cache [ 64 <S2SV_ModEnd> * 32 ] <S2SV_ModStart> uint8_t token_cache [ 64 <S2SV_ModEnd> * 32 ] <S2SV_ModStart> uint8_t token_cache [ 64 <S2SV_ModEnd> * 32 ] <S2SV_ModStart> uint8_t token_cache [ 64 <S2SV_ModEnd> * 32 ] <S2SV_ModStart> uint8_t token_cache [ 64 <S2SV_ModEnd> ] ; const <S2SV_ModStart> int16_t * qcoeff <S2SV_ModEnd> = BLOCK_OFFSET ( <S2SV_ModStart> block ) ; const int16_t * const coef_probs = cpi -> fc -> coef_probs [ tx_size ] [ type ] [ ref ] ; vpx_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. fc -> coef_probs [ tx_size ] [ type ] [ ref ] ; vpx_prob ( * const eob_branch ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. counts. eob_branch [ tx_size ] [ type ] [ ref ],0
573,<S2SV_ModStart> ; SrcList * pSrc = pSelect -> pSrc ; if ( pSrc == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; } for ( i = 0 ; i < pSrc -> nSrc ; i ++ ) { struct SrcList_item * pItem = & pSrc -> a [ i ] ; if ( pItem -> zName == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; } for ( i = 0 ; i < pSrc -> nSrc ; i ++ ) { struct SrcList_item * pItem = & pSrc -> a [ i ] ; if ( pItem -> zName == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; } if ( pItem -> zName == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; } for ( i = 0 ; i < pSrc -> nSrc ; i ++ ) { struct SrcList_item * pItem = & pSrc -> a [ i ] ; if ( p,0
574,"<S2SV_ModStart> ) ; serv = svc_create ( & nfs4_callback_program, NFS4_CALLBACK_BUFSIZE, sv_ops ) ; if (! serv ) { printk ( KERN_ERR ""nfs_callback_create_svc: <S2SV_blank> create <S2SV_blank> service <S2SV_blank> failed\\n"" ) ; return ERR_PTR ( - ENOMEM ) ; }",0
575,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
576,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
577,<S2SV_ModStart> = fd ; msg. msg_namelen = 0 ;,0
578,"<S2SV_ModStart> s ) { if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } <S2SV_ModStart> 0 ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } if
579,"<S2SV_ModStart> = NULL ; if ( xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break",0
580,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> return NULL ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
581,"<S2SV_ModStart> ) ) { zval tmp ; INIT_PZVAL_ARRAY ( & tmp, params ) ; zval_copy_ctor ( & tmp, 1 TSRMLS_CC ) ; zval_copy_ctor ( & tmp, 1 TSRMLS_CC ) ; zval_copy_ctor ( & tmp, 1 TSRMLS_CC ) ; zval_copy_ctor ( & tmp, 1 TSRMLS_CC ) ; zval_copy_ctor ( & tmp, 1 TSRMLS_CC ) ; zval_copy_ctor ( & tmp, 1 TSRMLS_CC ) ; zval_copy_ctor ( & tmp, 1 TSRMLS_CC ) ; zval_copy_ctor ( & tmp, 1 TSRMLS_CC ) ; zval_copy_ctor ( & tmp, 1 TSRMLS_CC ) ; zval_copy_ctor ( & tmp, 1 TSRMLS_CC ) ; zval_copy_ctor ( & tmp, 1 TSRMLS_CC ) ; zval_copy_ctor ( & tmp, 1 TSRMLS_CC ) ; zval_copy",0
582,<S2SV_ModStart> only_420 ) { <S2SV_ModEnd> int ret ; <S2SV_ModStart> vpx_fmt = VPX_IMG_FMT_I420 <S2SV_ModEnd> ; if ( <S2SV_ModStart> vpx_bps = 12 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt = VPX_IMG_FMT_I420 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt = VPX_IMG_FMT_I420 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> vpx_bps = 12 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> vpx_fmt = VPX_IMG_FMT_I420 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt = VPX_IMG_FMT_I420 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> vpx_fmt = VPX_IMG_FMT_I420 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> vpx_bps = 12 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt = VPX_IMG_FMT_I420 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> vpx_fmt = VPX_IMG_FMT_I420 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> vpx_fmt = VPX_IMG_,0
583,"<S2SV_ModStart> obj * otmp ; if ( strlen ( buf ) < 1 ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } otmp = readobj ( buf, ( struct obj * ) 0 ) ; if (! otmp ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; }",0
584,"<S2SV_ModStart> { long long directory_table_end <S2SV_ModEnd>, table_start ; <S2SV_ModStart> ( read_uids_guids ( fd <S2SV_ModEnd>, & table_start <S2SV_ModStart> ( read_exports_table ( fd <S2SV_ModEnd>, & table_start <S2SV_ModStart> ( read_fragment_table ( fd <S2SV_ModEnd>, & directory_table_end <S2SV_ModStart> ; if ( read_inode_table ( fd, sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( fd, sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( fd, sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( fd, sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( fd, sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return",0
585,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct env * <S2SV_ModEnd> createenv ( const <S2SV_ModStart> rule ) { struct envnode * node ; <S2SV_ModStart> -> root ) ; node = createnode ( NULL, NULL ) ; if ( RB_INSERT ( envtree, & env -> root, node ) ) { freenode ( node ) ; } else { <S2SV_ModEnd> env -> count <S2SV_ModStart> ++ ; } }",0
586,"<S2SV_ModStart> -> seg ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ; vp9_clearall_segfeatures ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vpx_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vpx_compute_qdelta_by_rate ( & cm -> rc, cm -> base_qindex, cm -> in_frame_q_adj_ratio [ segment ] ) ; vpx_enable_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ; vpx_set_segdata ( seg, segment, SEG_LVL_ALT_Q, qindex_delta ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vpx_compute_qdelta_by_rate ( & cm -> rc, cm -> base_qindex, cm -> in_frame_q_adj",0
587,"<S2SV_ModStart> ; Module_type = make_type ( ""Module"", mod_type, Module_fields, 1 ) ; if (! Module_type ) return 0 ; <S2SV_ModStart> ; Interactive_type = make_type ( ""Interactive"", mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; FunctionDef_type = make_type ( ""FunctionDef"", stmt_type, FunctionDef_fields, 5 ) ; if (! FunctionDef_type ) return 0 ; AsyncFunctionDef_type = make_type ( ""AsyncFunctionDef"", stmt_type, AsyncFunctionDef_fields, 5 ) ; if (! AsyncFunctionDef_type ) return 0 ; ClassDef_type = make_type ( ""ClassDef"", stmt_type, ClassDef_fields, 5 ) ; if (! ClassDef_type )",0
588,"<S2SV_ModStart> ) ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_WRONLY | O_CREAT | O_TRUNC <S2SV_ModEnd>, S_IRUSR | <S2SV_ModStart> S_IWUSR | S_IWGRP <S2SV_ModEnd>, S_IRUSR | <S2SV_ModStart> S_IROTH ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""btsnoop\\0\\0\\0\\0\\0\\1\\0\\0\\x3\\xea"", TEMP_FAILURE_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""btsnoop\\0\\0\\0\\0\\1\\0\\0\\x3\\xea"", TEMP_FAILURE_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_",0
589,<S2SV_ModStart> ) ; } ++ x -> ymode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ;,0
590,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart>, * t <S2SV_ModEnd>, * StartClean <S2SV_ModStart>, * StartClean <S2SV_ModEnd> ; SetDefaults ( <S2SV_ModStart> ; outpos = outputbuffer ; outpos += sprintf ( outpos, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", s, t, TERMCHAR ) ; if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf ( outfile, ""%s"", outputbuffer ) ; return ( 0 ) ; } if ( * s == '0' && s [ 1 ] == ']' ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf",0
591,"<S2SV_ModStart> expr_ty step ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lower ) ) { int res ; tmp = _PyObject_GetAttrId ( obj, & PyId_lower ) ; if ( tmp == NULL ) goto failed ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( lookup_attr_id ( obj, & PyId_upper ) ) { int res ; tmp = _PyObject_GetAttrId ( obj, & PyId_upper ) ; if ( tmp == NULL ) goto failed ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( lookup_attr_id ( obj, & PyId_step ) ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { step = NULL ; }",0
592,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
593,"<S2SV_ModStart> int err ; list_for_each_entry ( iter, & alink -> dscp_map, list ) { u32 cmask ; if ( iter -> handle == knode -> handle ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } <S2SV_ModStart> ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } if ( iter -> band == knode -> res -> classid ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } cmask = iter -> mask & mask ; if ( ( iter -> val & cmask ) == ( val & cmask ) && iter -> band!= knode -> res -> classid ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; }",0
594,"<S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; } if ( stream -> config. cfg. g_pass == 2 ) stream -> config. cfg. g_pass = pass? VPX_RC_LAST_PASS : VPX_RC_FIRST_PASS ; else if ( stream -> config. cfg. g_pass == 3 ) stream -> config. cfg. g_pass = pass? VPX_RC_LAST_PASS : VPX_RC_ONE_PASS ; if (! stream -> config. cfg. rc_twopass_stats_in ) stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> cx_time = 0 ; stream -> nbytes = 0 ; stream -> frames_out = 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
595,"<S2SV_ModStart> if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) { g_error_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg (",0
596,<S2SV_ModStart> { VP9_COMMON * const cm = & pbi -> common ; const int tile_cols = 1 << cm -> log2_tile_cols ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_cols = 1 << cm -> log2_tile_cols ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_cols = 1 << cm -> log2_tile_cols ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_cols = 1 << cm -> log2_tile_,0
597,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static VP9Decoder <S2SV_ModEnd> * vp9_decoder_create ( <S2SV_ModStart> ) ) { const VP9_COMMON * const cm = pbi? & pbi -> common : NULL ; if (! cm ) return NULL ; if ( setjmp ( cm -> error. jmp ) ) { cm -> error. setjmp = 0 ; vp9_decoder_remove ( pbi ) ; return NULL ; } cm -> error. setjmp = 1 ; vpx_initialize_dec ( ) ; vpx_rtcd ( ) ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; cm -> ready_for_new_data = 1 ; pbi -> decoded_key_frame = 0 ; vp9_init_dequantizer ( cm ) ; cm -> error. setjmp = 0 ; vpx_worker_init ( & pbi -> lf_worker ) ; return pbi ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
598,"<S2SV_ModStart> { GF_LOG ( GF_LOG_ERROR <S2SV_ModEnd>, GF_LOG_CONTAINER, <S2SV_ModStart> ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; if (! ( ( GF_DataInformationBox * ) s ) -> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_D",0
599,<S2SV_ModStart> req ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> -> opt ; rcu_read_lock ( ) ; <S2SV_ModStart> -> opt ; rcu_read_unlock ( ) ;,0
600,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> tree2tok ( struct <S2SV_ModStart> ) { const vpx_tree_index <S2SV_ModEnd> j = tree <S2SV_ModStart> ++ ] ; if ( j <= 0 ) { tokens [ - j ]. value = v ; tokens [ - j ]. len = l ; } else { tree2tok ( tokens, tree, i, v, l ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
601,"<S2SV_ModStart> VPX_CODEC_OK ; if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP9_ALT_FLAG ; vp9_use_as_reference ( ctx -> cpi, ref ) ; } if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG",0
602,"<S2SV_ModStart>, & len ) ; if ( ret ) goto error ; if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } newseq = realloc ( seq, ( count + 1 ) * elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; } seq = newseq ; elem = ( char * ) seq + count * elemtype -> size ; memset ( elem, 0, elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; } newseq = realloc ( seq, ( count + 1 ) * elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto",0
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> fadst16_8col ( __m128i <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> fadst16_8col ( __m128i <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> fadst16_8col ( __m128i,0
604,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> frame_max_bits ( const <S2SV_ModStart> ( int64_t ) rc <S2SV_ModEnd> -> av_per_frame_bandwidth * <S2SV_ModStart> ( int64_t ) rc <S2SV_ModEnd> -> two_pass_vbrmax_section ),0
605,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
606,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_superblock ( VP9_COMP <S2SV_ModStart> * cpi, MACROBLOCK * x <S2SV_ModEnd>, int mi_row <S2SV_ModStart> BLOCK_SIZE bsize ) { <S2SV_ModEnd> VP9_COMMON * const <S2SV_ModStart> -> common ; <S2SV_ModEnd> MACROBLOCKD * const <S2SV_ModStart> -> e_mbd ; <S2SV_ModEnd> const MODE_INFO * <S2SV_ModStart> -> mbmi ; <S2SV_ModEnd> const int mi_width <S2SV_ModStart> ] ; const int mi_height = num_8x8_blocks_wide_lookup [ bsize ] ; const int mis_width = num_8x8_blocks_high_lookup [ bsize ] ; const int mis_height = num_8x8_blocks_high_lookup [ bsize ] ; const int use_lp32x32fdct = cpi -> sf. use_lp32x32fdct ; x -> use_lp32x32fdct = cpi -> sf. use_lp32x32fdct ; x -> use_lp32x32fdct = cpi -> sf. use_lp32x32fdct ; x -> skip_encode = (! output_enabled && cpi ->",0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header,0
608,"<S2SV_ModStart> ) { uint32_t <S2SV_ModEnd> value ; int <S2SV_ModStart> ; uint32_t value <S2SV_ModEnd> ; int position <S2SV_ModStart> ; int zeroes <S2SV_ModEnd> ; while ( <S2SV_ModStart> 1 ) { if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> 1 ) { if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits1 ( gbc",0
609,"<S2SV_ModStart> { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c )",0
610,"<S2SV_ModStart> -> http_contentlen. ptr = NULL, packet -> http_contentlen. len = 0, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_origin. ptr = NULL, packet -> http_origin. len = 0, packet -> http_response. ptr = NULL, packet -> http_response. len = 0, packet -> server_line. ptr = NULL, packet -> server_line. len = 0,",0
611,"<S2SV_ModStart>, y, <S2SV_ModEnd> exception ) ; <S2SV_ModStart>, y, <S2SV_ModEnd> exception ) ; <S2SV_ModStart>, y, <S2SV_ModEnd> exception ) ; <S2SV_ModStart>, exception ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; c0 = ReadBlobLSBShort ( image ) ; c1 = ReadBlobLSBShort ( image ) ; bits = ReadBlobLSBLong ( image ) ; SetColors ( c0, c1, & colors, MagickFalse ) ; for ( j = 0 ; j < 4 ; j ++ ) { if ( ( x + i ) < ( ssize_t ) dds_info -> width && ( y + j ) < ( ssize_t ) dds_info -> height ) { if ( ( x + i ) < ( ssize_t ) dds_info -> width && ( y + j ) < ( ssize_t ) dds_info -> height ) { SetPixelRed ( q, ScaleCharToQuantum ( colors. r [ code ] ) ; SetPixelGreen ( q, ScaleCharToQuantum ( colors. g [ code ] ) ) ; SetPixelBlue ( q, ScaleCharToQuantum ( colors. b [ code ] ) ;",0
612,"<S2SV_ModStart> length ) { int ret ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY (",0
613,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> ) ; } sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"",",0
614,"<S2SV_ModStart> ) ) { fprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; fprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; fprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; fprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; fprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; fprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %",0
615,"<S2SV_ModStart> ; WLog_VRB ( AUTODETECT_TAG <S2SV_ModEnd>, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" )",0
616,<S2SV_ModStart> ; # endif # if ( CONFIG_REALTIME_ONLY & CONFIG_ONTHEFLY_BITPACKING ) if ( cm -> yv12_fb [ ref_fb_idx ]. y_stride!= x -> y_stride || cm -> yv12_fb [ ref_fb_idx ]. uv_stride!= x -> uv_stride || cm -> yv12_fb [ ref_fb_idx ]. uv_stride!= x -> uv_stride || cm -> yv12_fb [ ref_fb_idx ]. y_stride!= x -> y_stride || cm -> yv12_fb [ ref_fb_idx ]. uv_stride!= x -> uv_stride || cm -> yv12_fb [ ref_fb_idx ]. uv_stride!= x -> uv_stride || cm -> yv12_fb [ ref_fb_idx ]. uv_stride!= x -> uv_stride || cm -> yv12_fb [ ref_fb_idx ]. y_stride!= x -> y_stride || cm -> yv12_fb [ ref_fb_idx ]. uv_stride!= x -> uv_stride || cm -> y,0
617,"<S2SV_ModStart> -> b_multithreaded_rd ) vpxmt_de_alloc_temp_buffers <S2SV_ModEnd> ( pbi,",0
618,<S2SV_ModStart> 0 ) { if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT <S2SV_ModEnd> - ( xWantedSize <S2SV_ModStart> 0x00 ) { if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT <S2SV_ModEnd> - ( xWantedSize <S2SV_ModStart> 0x00 ) { if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ;,0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,"<S2SV_ModStart> s ) { <S2SV_ModEnd> logger ( Protocol <S2SV_ModStart> Debug, ""%s()"" <S2SV_ModEnd>, __func__ ) <S2SV_ModStart> i ++ ) { in_uint16_le ( s, left ) ; in_uint16_le ( s, top ) ; in_uint16_le ( s, right ) ; in_uint16_le ( s, bottom ) ; in_uint16_le ( s, width ) ; in_uint16_le ( s, height ) ; in_uint16_le ( s, <S2SV_ModStart> i ++ ) { in_uint16_le ( s, left ) ; in_uint16_le ( s, top ) ; in_uint16_le ( s, right ) ; in_uint16_le ( s, bottom ) ; in_uint16_le ( s, width ) ; in_uint16_le ( s, height ) ; in_uint16_le ( s, bpp ) ; Bpp = ( bpp + 7 ) / 8 ; if (! compress ) { ui_paint_bitmap ( left, top, cx, cy, width, height, bmpdata ) ; xfree ( bmpdata ) ; continue ; } if ( compress &",0
621,"<S2SV_ModStart> } else { if (! smatch ( option, ""filename"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Missing <S2SV_blank> filename"" ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( option, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! smatch ( option, ""anew"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""backup"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""anew"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""path"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Path <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" ) ; return MPR_ERR_BAD_SYNTAX ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Path <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K",0
622,"<S2SV_ModStart> tx_size, vpx_coeff_stats <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model <S2SV_ModEnd> coef_probs = cpi <S2SV_ModStart> -> frame_coef_probs [ tx_size ] ; vpx_coeff_count * coef_counts = cpi -> coef_counts [ tx_size ] ; unsigned int ( * eob_branch_ct ) [ REF_TYPES ] [ COEF_BANDS ] [ COEFF_CONTEXTS ] = cpi -> common. counts. eob_branch [ tx_size ] ; for ( i = 0 ; i < PLANE_TYPES ; ++ i ) { for ( j = 0 ; j < REF_TYPES ; ++ j ) { vp9_tree_probs_from_distribution ( vp9_coef_tree, coef_counts [ i ] [ j ] [ k ] [ l ], coef_counts [ i ] [ j ] [ k ] [ l ] ) ; coef_branch_ct [ i ] [ j ] [ k ] [ 0 ] = eob_branch_ct [ i ] [ j ] [ k ] [ l ] - coef_branch_ct",0
623,"<S2SV_ModStart> = { } ; if (! access_ok ( VERIFY_READ, name, & tc ) ) r = - EACCES ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> %s <S2SV_blank> term <S2SV_blank> processing <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> %s"", name, & tc ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> %s <S2SV_blank> term <S2SV_blank> processing <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> %s <S2SV_blank> term <S2SV_blank> processing <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> %s <S2SV_blank> term <S2SV_blank> processing <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable",0
624,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> su3000_frontend_attach ( struct <S2SV_ModStart> ; if ( dvb_usb_generic_rw <S2SV_ModEnd> ( d -> <S2SV_ModStart> ( d -> dev, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; obuf [ 0 ] = 0xe ; obuf [ 1 ] = 0x83 ; obuf [ 2 ] = 1 ; if ( dvb_usb_generic_rw ( d -> dev, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; obuf [ 0 ] = 0xe ; obuf [ 1 ] = 0x83 ; obuf [ 2 ] = 0 ; if ( dvb_usb_generic_rw ( d -> dev, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; obuf [ 0 ] = 0xe ; obuf [ 1 ] = 0x83 ; obuf [ 2 ] = 1 ; if",0
625,"<S2SV_ModStart> cfg, vpx_codec_flags_t flags <S2SV_ModEnd> ) { vpx_codec_err_t <S2SV_ModStart> VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC",0
626,"<S2SV_ModStart> stride, int mv_row, int mv_col, const InterpKernel * <S2SV_ModEnd> kernel = vp9_get_interp_kernel <S2SV_ModStart> const kernel = vp9_get_interp_kernel ( xd -> mi [ 0 ] -> mbmi. interp_filter ) ; enum mv_precision mv_precision_uv ; if ( uv_block_size == 8 ) { uv_stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q4 ; } else { uv_stride = ( stride + 1 ) >> 1 ; } vp9_build_inter_predictor ( y_mb_ptr, stride, & pred [ 0 ], 16, & mv, scale, 16, 16, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vp9_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], 16, & mv, scale, 16, 16, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vp9_build_inter_predictor ( v_mb_ptr, uv_stride, & pred [ 512",0
627,"<S2SV_ModStart> = TRUE ; if ( strchr ( origbuf,'<S2SV_blank>') ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } bufp = find_optparam ( buf ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ;",0
628,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static cJSON * <S2SV_ModEnd> cJSON_CreateFloatArray ( double <S2SV_ModStart> ) ; for ( i = 0 ; a && i < count ; ++ i ) { n = cJSON_CreateFloat ( numbers [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } return a ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
629,"<S2SV_ModStart> data_end ) { <S2SV_ModEnd> const int aligned_mi_cols <S2SV_ModStart> const cm = pbi -> oxcf ; const int tile_cols = 1 << cm -> log2_tile_cols ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int num_workers = MIN ( pbi -> oxcf. max_threads & ~ 1, tile_cols ) ; TileBuffer tile_buffers [ 1 << 6 ] ; int final_worker = - 1 ; if ( pbi -> num_tile_workers == 0 ) { const int num_threads = MIN ( pbi -> oxcf. max_threads, tile_cols ) ; const int tile_workers = MIN ( pbi -> oxcf. max_threads, num_workers ) ; vpx_malloc ( num_workers * sizeof ( * pbi -> tile_workers ) ) ; CHECK_MEM_ERROR ( cm, tile_workers, vpx_malloc ( sizeof ( * pbi -> tile_workers ) ) ) ; for ( i = 0 ; i < num_workers ; ++ i ) { VP9Worker * const worker = & pbi -> tile_workers [ i ]",0
630,"<S2SV_ModStart> 0x101 ; offset = base + get4 ( ) + 8 ; while ( ( save = ftell ( ifp ) ) < offset ) { for ( tag = i = 0 ; i < 4 ; i ++ ) tag = tag << 8 | fgetc ( ifp ) ; if ( tag == 0x505244 ) { fseek ( ifp, 1L, SEEK_CUR ) ; high = get2 ( ) ; wide = get2 ( ) ; fseek ( ifp, 4L, SEEK_CUR ) ; imgdata. makernotes. sony. prd_ImageHeight = get2 ( ) ; fseek ( ifp, 1L, SEEK_CUR ) ; imgdata. makernotes. sony. prd_ImageWidth = get2 ( ) ; fseek ( ifp, 1L, SEEK_CUR ) ; imgdata. makernotes. sony. prd_StorageMethod = ( ushort ) fgetc ( ifp ) ; fseek ( ifp, 4L, SEEK_CUR ) ; imgdata. makernotes. sony. prd_BayerPattern = ( ushort ) fgetc ( ifp ) ; imgdata.",0
631,"<S2SV_ModStart> -> common ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> = SEGMENT_DELTADATA ; vpx_clear_segmentation ( seg ) ; for ( i = ENERGY_MIN ; i <= ENERGY_MAX ; i ++ ) { int qindex_delta, segment_rdmult ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vpx_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; segment_rdmult = vpx_compute_rd_mult ( cpi, cm -> base_qindex + qindex_delta + cm -> y_dc_delta_q ) ; RDMULT_RATIO ( i ) = ( double ) segment",0
632,<S2SV_ModStart>. err_detail = <S2SV_ModEnd> error -> detail,0
633,<S2SV_ModStart> ; pocstruct_t * ps_prev_poc <S2SV_ModEnd> ; ih264d_free_dynamic_bufs (,0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>. congest_packet ) ),0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> getnum ( const <S2SV_ModStart> int df ) <S2SV_ModEnd> { int a <S2SV_ModStart> = 0 ; if ( isdigit ( * * fmt ) ) { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } else { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; },0
636,"<S2SV_ModStart> ; markold ( g, g -> allgc, g -> reallyold ) ; markold ( g, g -> allgc, g -> old ) ; markold ( g, g -> allgc, g -> old ) ; markold ( g, g -> allgc, g -> reallyold ) ; markold ( g, g -> allgc, g -> old ) ; markold ( g, g -> allgc, g -> reallyold ) ; markold ( g, g -> finobj, g -> finobjrold ) ; atomic ( L ) ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; markold ( g, g -> allgc, g -> reallyold ) ; markold ( g, g -> allgc, g -> old ) ; markold ( g, g -> allgc, g -> reallyold ) ; markold ( g, g -> allgc, g -> reallyold ) ;",0
637,<S2SV_ModStart> else return - EINVAL <S2SV_ModEnd> ; deb_info (,0
638,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { if ( safe_memcmp ( buffer, ssl_request, sizeof ssl_request ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModStart> ; if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModEnd>",0
639,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> cib_tls_signon ( cib_t <S2SV_ModStart> cib -> variant_opaque <S2SV_ModEnd> ; struct sockaddr_in <S2SV_ModStart> struct sockaddr_in addr <S2SV_ModEnd> ; int rc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> struct mainloop_fd_callbacks cib_fd_callbacks <S2SV_ModStart> = NULL ; connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ;",0
640,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( & cpi <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( & cpi <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( & cpi <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( & cpi <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( & cpi <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( & cpi <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( & cpi <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( & cpi <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( & cpi <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( & cpi <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( & cpi <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( & cpi <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( & cpi <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( & cpi <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( & cpi <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( & cpi <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( & cpi <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( & cpi <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( & cpi <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( & cpi <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> (",0
641,"<S2SV_ModStart> ndo_vflag ) { if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x08 ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%",0
642,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> if ( copy_from_user <S2SV_ModStart> = mptctl_do_mpt_command ( ioc <S2SV_ModEnd>, & uarg <S2SV_ModStart> return rc ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
643,"<S2SV_ModStart> MaxTextExtent ] ; <S2SV_ModEnd> MagickBooleanType status ; <S2SV_ModStart>, length, <S2SV_ModEnd> padding, value <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } width = 0 ; height = 0 ; while ( ReadBlobString ( image, buffer )!= ( char * ) NULL ) if ( sscanf ( buffer, ""#define <S2SV_blank> %32s <S2SV_blank> %u"", name, & width ) == 2 ) if ( ( strlen ( name ) >= 6 ) && ( LocaleCompare ( name + strlen ( name ) - 6, ""_width"" ) == 0 ) ) break ; while ( ReadBlobString ( image, buffer )!= ( char * ) NULL ) if ( ( strlen ( name ) >= 7 ) && ( LocaleCompare ( name + strlen ( name ) - 7, ""_height"" ) == 0 ) ) break ; status = SetImageExtent ( image, buffer, width, height ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) )",0
644,"<S2SV_ModStart> ; if ( bandno >= JPC_MAXBANDS ) { jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ;",0
645,"<S2SV_ModStart> = '\\0' ; if (! strchr ( str_temp,'<S2SV_blank>') ) strcpy ( str_temp,'<S2SV_blank>') ; if (! strcpy ( str_temp,'<S2SV_blank>') ) strcpy ( str_temp,'<S2SV_blank>') ; if (! strcpy ( str_temp,'<S2SV_blank>') ) strcpy ( str_temp,'<S2SV_blank>') ; if (! strcpy ( str_temp,'<S2SV_blank>') ) strcpy ( str_temp,'<S2SV_blank>') ; if (! strcpy ( str_temp,'<S2SV_blank>') ; if (! strcpy ( str_temp,'<S2SV_blank>') ) strcpy ( str_temp,'<S2SV_blank>') ; if (! strcpy ( str_temp,'<S2SV_blank>') ) strcpy ( str_temp,'<S2SV_blank>') ; if (! strcpy ( str_temp,'<S2SV_blank>') strcpy ( str_temp,'<S2SV_blank>') ; if (! strcpy ( str_temp,'<S2SV_blank>') ) strcpy ( str_temp,'<S2SV_blank>') ; if (",0
646,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_bit_t <S2SV_ModEnd> decode_uniform ( vpx_reader <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - 1 ) <S2SV_ModEnd> ; return ( <S2SV_ModStart> m + vpx_read_bit <S2SV_ModEnd> ( r )",0
647,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
648,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> ( REFERENCE_MODE ) vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx <S2SV_ModStart> (! cm -> fc -> <S2SV_ModEnd> parallel_decoding_mode ) ++",0
649,"<S2SV_ModStart>! stream ) fatal <S2SV_ModEnd> ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) <S2SV_ModStart>! stream ) fatal <S2SV_ModEnd> ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) <S2SV_ModStart> ; res = vpx_codec_enc_config_default ( global -> codec -> interface ( ), & stream -> config. cfg, global -> usage ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. stereo_fmt = ST",0
650,"<S2SV_ModStart> nd_opt_mtu * opm = ( const struct nd_opt_mtu * ) cp ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", opm -> nd_opt_mtu ), opm -> nd_opt_mtu ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", opm -> nd_opt_mtu ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", opm -> nd_opt_mtu ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", opm -> nd_opt_mtu ) ) ) ;",0
651,<S2SV_ModStart> = 0 ; if ( ( * re_ast ) -> root_node == NULL ) { yr_error ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( ) ) ) ) ) ) ) ) ) ) ) { yr_error ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( ) ) ) ) ) ) ) ) ) ) ) ) ; },0
652,"<S2SV_ModStart> ) ) ; if ( key -> key -> key!= NULL ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } <S2SV_ModStart> 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> lookup <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", str_c ( path ), error ) ; return - 1 ; } else if ( ret < 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> lookup <S2SV_blank> key <S2SV_blank> %",0
653,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> tok -> altwarning <S2SV_ModStart> = 0 ; <S2SV_ModEnd> tok -> alterror <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
654,"<S2SV_ModStart> maxBitrate ; } if ( av1 -> av1_config ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1 -> av1_config -> config ) ; if ( av1_cfg ) { gf_odf_av1_cfg_write ( av1_cfg, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> data, & av1 -> emul_esd -> decoderConfig -> dataLength ) ; av1 -> av1_config = AV1_DuplicateConfig ( av1 -> av1_config -> config ) ; if ( av1_cfg ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1_cfg ) ; if ( av1_cfg ) { gf_odf_av1_cfg_write ( av1_cfg, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> dataLength ) ; av1 -> av1_config = AV1_DuplicateConfig ( av1 -> av1_config -> config ) ; if ( av1_cfg ) { GF_AV1Config * av1_cfg = AV",0
655,"<S2SV_ModStart> maxFrameNum ) ; <S2SV_ModEnd> dpb -> maxLongTermFrameIdx <S2SV_ModStart> NO_LONG_TERM_FRAME_INDICES ) ; if ( dpb -> maxLongTermFrameIdx > MAX_LONG_TERM_FRAME_INDICES ) { dpb -> maxLongTermFrameIdx = MAX_LONG_TERM_FRAME_INDICES ; dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; if ( dpb -> buffer == NULL ) return ( MEMORY_ALLOCATION_ERROR ) ; H264SwDecMemset ( dpb -> buffer, 0, ( MAX_NUM_REF_IDX_L0_ACTIVE + 1 ) * sizeof ( dpbPicture_t ) ) ; for ( i = 0 ; i < dpb -> dpbSize + 1 ; i ++ ) { if ( dpb -> buffer [ i ]. pAllocatedData == NULL ) return ( MEMORY_ALLOCATION_ERROR ) ; H264SwDecMemset ( dpb -> buffer, 0, ( MAX_NUM_REF_IDX_L0_ACTIVE + 1 ) * sizeof ( dpbPicture_t )",0
656,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> = 0 ; if (! addr ||! addrlen ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_in > OE_SSIZE_MAX ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; addrlen_in = * addrlen ; } <S2SV_ModStart> ; if ( addrlen_in > OE_SSIZE_MAX ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_in > OE_SSIZE_MAX ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( oe_syscall_getpeername_ocall ( & ret, sock -> host_fd, addr, addrlen_in, & addrlen_out )!= OE_OK ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; }",0
657,,1
658,"<S2SV_ModStart> FALSE ; } if ( Stream_GetRemainingLength ( s ) >= 8 ) { Stream_Read_UINT8 ( s, type ) ; <S2SV_ModStart> FALSE ; } if ( Stream_GetRemainingLength ( s ) >= 8 ) { Stream_Read_UINT8 ( s, type ) ; if ( type!= TYPE_RDP_NEG_REQ ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> negotiation <S2SV_blank> request <S2SV_blank> type <S2SV_blank> %"" PRIu8 """", type ) ; return FALSE ; } <S2SV_ModStart> FALSE ; } if ( Stream_GetRemainingLength ( s ) >= 8 ) { Stream_Read_UINT8 ( s, type ) ; if ( type!= TYPE_RDP_NEG_REQ ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> negotiation <S2SV_blank> request <S2SV_blank> type <S2SV_blank> %"" PRIu8 """", type ) ; return FALSE ; }",0
659,"<S2SV_ModStart> ipv6_pinfo * np = rcu_dereference_protected ( np -> ipv6_opt, sock_owned_by_user ( sk ), sock_owned_by_user ( sk ) ) <S2SV_ModStart> final_p = rcu_dereference_protected <S2SV_ModEnd> ( np -> <S2SV_ModStart> np -> ipv6_opt, sock_owned_by_user ( sk ) ) ; if ( rcu_dereference_protected ( np -> ipv6_opt, sock_owned_by_user ( sk ) ) ) { struct ipv6_txoptions * opt = rcu_dereference_protected ( np -> ipv6_opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( np -> ipv6_opt, sock_owned_by_user ( sk ) ) ; if ( rcu_dereference_protected ( np -> ipv6_opt, sock_owned_by_user ( sk ) ) ) { struct ipv6_txoptions * opt = rcu_dereference_protected ( np -> ipv6_opt, sock_owned_by_user (",0
660,"<S2SV_ModStart>, at ; <S2SV_ModEnd> unsigned int i <S2SV_ModStart>, found, upx_success <S2SV_ModEnd> = 0, <S2SV_ModStart>, found, upx_success <S2SV_ModEnd> ; unsigned int <S2SV_ModStart>, found, upx_success <S2SV_ModEnd>, min, <S2SV_ModStart>, found, upx_success <S2SV_ModEnd>, min, <S2SV_ModStart>, found, upx_success <S2SV_ModEnd>, max, <S2SV_ModStart>, found, upx_success <S2SV_ModEnd>, max, <S2SV_ModStart>, found, upx_success <S2SV_ModEnd>, max, <S2SV_ModStart>, found, upx_success <S2SV_ModEnd> )!= CL_ENULLARG",0
661,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR <S2SV_ModEnd>, DM9000_EPCR_EPOS | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR <S2SV_ModEnd>, DM9000_EPCR_ERPRR ) <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR <S2SV_ModEnd>, DM9000_EPCR_EPOS | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR <S2SV_ModEnd>, DM9000_EPCR_EPOS | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR <S2SV_ModEnd>, DM9000_EPCR_EPOS ) <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR <S2SV_ModEnd>, DM9000_EPCR_EPOS ) <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR <S2SV_ModEnd>, DM9000_EPCR_EPOS ) <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR <S2SV_ModEnd>, DM9000_EPCR_EPOS ) <S2SV_ModStart> ; dm9000WriteReg ( DM",0
662,"<S2SV_ModStart> pcmk_ok ) { xmlNode * hello ; <S2SV_ModStart> pcmk_ok ) { hello = cib_create_op ( 0, private -> command. token, CRM_OP_REGISTER, NULL, NULL, NULL, 0, NULL ) ; crm_xml_add ( hello, F_CIB_CLIENTNAME, name ) ; crm_send_remote_msg ( hello, F_CIB_CLIENTNAME, name ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, NULL, NULL, 0, NULL ) ; crm_xml_add ( hello, F_CIB_CLIENTNAME, name ) ; crm_send_remote_msg ( hello, F_CIB_CLIENTNAME, name ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, NULL, NULL, 0, NULL ) ;",0
663,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
664,"<S2SV_ModStart> >> 3 } ; int <S2SV_ModEnd> sr = 0 <S2SV_ModStart> bsize ] ; int <S2SV_ModEnd> new_mv_mode_penalty = 256 <S2SV_ModStart> new_mv_mode_penalty = 256 <S2SV_ModEnd> ; while ( <S2SV_ModStart> bsize ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, &",0
665,"<S2SV_ModStart> ntreg_header ) ; if ( h -> addr == NULL ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; }",0
666,"<S2SV_ModStart> ) ; } # ifdef DEBUG_CONF ap_log_perror ( APLOG_MARK, APLOG_STARTUP | APLOG_NOERRNO, 0, mp, ""Merge <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp <S2SV_blank> RESULT <S2SV_blank> %pp"", _parent, _child, merged ) ; ap_log_perror ( APLOG_MARK, APLOG_NOERRNO, 0, mp, ""Merge <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp"", parent, _child, merged ) ; # ifdef DEBUG_CONF ap_log_perror ( APLOG_MARK, APLOG_STARTUP | APLOG_NOERRNO, 0, mp, ""Merge <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp <S2SV_blank> RESULT <S2SV_blank> %pp"", _parent, _child, merged ) ; # endif",0
667,"<S2SV_ModStart>, one ; size_t <S2SV_ModEnd> pixel_info_length ; size_t <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) break <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) break ;",0
668,"<S2SV_ModStart> 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0",0
669,"<S2SV_ModStart> ) ) { sscanf ( option, "" <S2SV_blank> =\\t,"", & ovalue ) ; if ( smatch ( option, ""content"" ) ) { httpSetTraceContentSize ( route -> trace, ( ssize ) getnum ( ovalue ) ) ; } else if ( smatch ( option, ""event"" ) ) { httpSetTraceEventLevel ( route -> trace, ( ssize ) getnum ( ovalue ) ) ; } else if ( smatch ( option, ""event"" ) ) { httpSetTraceEventLevel ( route -> trace, ( ssize ) getnum ( ovalue ) ) ; if ( smatch ( option, ""event"" ) ) { httpSetTraceEventLevel ( route -> trace, ( ssize ) getnum ( ovalue ) ) ; } else if ( smatch ( option, ""event"" ) ) { httpSetTraceEventLevel ( route -> trace, ( ssize ) getnum ( ovalue ) ) ; } else if ( smatch ( option, ""event"" ) ) { httpSetTraceEventLevel ( route -> trace, ( ssize ) getnum ( ovalue ) ) ; }",0
670,"<S2SV_ModStart> user_data ) { <S2SV_ModEnd> crm_trace ( ""Cleaning <S2SV_blank> up <S2SV_blank> after <S2SV_blank> client <S2SV_blank> disconnect: <S2SV_blank> %s/%s"" <S2SV_ModStart> client ) ; <S2SV_ModEnd> crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client""",0
671,"<S2SV_ModStart> * uv ; if ( thread -> twups == NULL ) thread -> twups = NULL ; else <S2SV_ModStart> uv ) { if (! iswhite ( uv ) ) markvalue ( g, uv -> v ) ; } else { <S2SV_ModStart> uv ) { if (! iswhite ( uv ) ) markvalue ( g, uv -> v ) ; } else { markvalue ( g, uv -> v ) ; } <S2SV_ModStart> next ) { if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) mark",0
