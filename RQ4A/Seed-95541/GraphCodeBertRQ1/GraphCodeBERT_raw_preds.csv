,raw_predictions,correctly_predicted
0,<S2SV_ModStart> ; if ( n2size < 1 ) <S2SV_ModEnd> { applog (,0
1,<S2SV_ModStart> case EAP_FRAME_TYPE_PACKET : ND_TCHECK_8BITS ( tptr ) ; <S2SV_ModStart> * ( tptr + 1 ) <S2SV_ModStart> 2 ) { ND_TCHECK_8BITS ( tptr + 2 ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr + subtype ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr + 2 ) ; <S2SV_ModStart> case EAP_TYPE_TCHECK_8BITS ( tptr + 2 ) ; <S2SV_ModStart> case EAP_TYPE_TTLS : ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> case EAP_TYPE_TTLS : ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> ) ) { ND_TCHECK_32BITS ( tptr + 6 ) ; <S2SV_ModStart> case EAP_TYPE_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> case EAP_TYPE_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> case EAP_TYPE_TCHECK_8BITS,0
2,<S2SV_ModStart> ; goto out_free <S2SV_ModEnd> ; } <S2SV_null>,0
3,"<S2SV_ModStart> ; memset ( yy, 0 <S2SV_ModEnd>, sizeof (",0
4,<S2SV_ModStart> if ( fhdr <S2SV_ModEnd> ( skb ),0
5,"<S2SV_ModStart>, offset ; if ( avio_feof ( f ) ) { index -> item_count = 0 ; av_freep ( & index -> items ) ; return AVERROR_INVALIDDATA ; }",1
6,<S2SV_ModStart> * tpg ; u16 <S2SV_ModEnd> tpgt ; int <S2SV_ModStart> ; if ( kstrtou16 <S2SV_ModEnd> ( name + <S2SV_ModStart> ) || tpgt >= VHOST_SCSI_MAX_TARGET <S2SV_ModEnd> ) return ERR_PTR,1
7,<S2SV_ModStart> stream ) { <S2SV_ModEnd> if (!,0
8,"<S2SV_ModStart> { u32 data <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return ; kvm_read_guest_cached ( vcpu -> kvm, & <S2SV_ModEnd> vcpu -> arch <S2SV_ModStart>. apic -> vapic_cache, & data, sizeof ( u32 ) <S2SV_ModEnd> ) ; apic_set_tpr",1
9,<S2SV_ModStart> src ) ; __switch_to_tm ( src ) ; tm_recheckpoint_new_task ( src ) ;,1
10,<S2SV_ModStart> c ) { <S2SV_ModEnd> return c ;,0
11,"<S2SV_ModStart> ( sb, KERN_ERR,",1
12,"<S2SV_ModStart> ipv6_select_ident ( fptr, ( struct rt6_info * ) skb_dst ( skb )",1
13,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",0
14,<S2SV_ModStart> < INDIRECT_BLOCKS ) { <S2SV_ModStart> ] ) ; },0
15,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t <S2SV_ModEnd> output [ 0 <S2SV_ModStart> 0 ] ; tran_high_t t1 = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) output [ 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_t ) <S2SV_ModStart> 0 ] = ( tran_low_t )",0
16,<S2SV_ModStart> == 0 ) sanitize_dead_code ( env ) ; if ( ret == 0 ),1
17,"<S2SV_ModStart> int i ; if (! config -> sample_rate ) { strcpy ( wpc -> error_message, ""sample <S2SV_blank> rate <S2SV_blank> cannot <S2SV_blank> be <S2SV_blank> zero!"" ) ; return FALSE ; }",1
18,"<S2SV_ModStart> = 0 ; unsigned char sense_buffer [ SCSI_SENSE_BUFFERSIZE ], * senseptr = NULL ; <S2SV_ModStart> cd -> device ; if ( cgc -> sense ) memcpy ( cgc -> sense, sense ) ; if ( cgc -> sense ) memcpy ( cgc -> sense, sense, sense, sense, sense, NULL ) ; if ( cgc -> sense ) memcpy ( cgc -> sense, sense, sizeof ( * <S2SV_ModEnd> ) ; if",0
19,<S2SV_ModStart> ] ) ; if ( len < 0 ) return 0 ;,0
20,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> get_frame ) { const VP9_COMMON * const cm = & cpi -> common ; MACROBLOCK * const lf_err = & cpi -> td_err ; <S2SV_ModStart> - 1 ; memset <S2SV_ModEnd> ( cm, <S2SV_ModStart> NULL ) ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( cpi -> flags & YV12_FLAG_HIGHBITDEPTH if ( cpi -> flags & YV12_FLAG_HIGHBITDEPTH ) ) { YV12_HIGHBITDEPTH if ( cpi -> filt_err ) { fprintf ( st_err, ""%s: <S2SV_blank> - <S2SV_blank> %d\\n"", lf_show ) ; return - 1 ; } # endif <S2SV_ModStart> NULL ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ) ; } # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( lf_y_y == LAST_HIGHBITDEPTH ) { memcpy ( cpi, lf_",0
21,"<S2SV_ModStart> offset, luaL_checkstack <S2SV_ModEnd> ( L,",0
22,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_write_bit <S2SV_ModEnd> read_mv_tree ( vpx_write_writer <S2SV_ModStart> * w, vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart>, w, vpx_write_bit <S2SV_ModEnd> ( w )",0
23,<S2SV_ModStart> ) ; return <S2SV_ModEnd> ralg -> seedsize,1
24,<S2SV_ModStart> ; if ( sockaddr_len < sizeof ( struct sockaddr_pppox ) ) return - EINVAL ; if (,1
25,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> = COAP_BLOCK_32 ; } else { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> = COAP_BLOCK_128 ; } <S2SV_ModStart> = COAP_BLOCK_128 ; } <S2SV_ModStart> = COAP_BLOCK_128 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } else { <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_1024 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } <S2SV_ModStart> = COAP_BLOCK_1024 ; } <S2SV_ModStart> = COAP_BLOCK_512 ; } else { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } <S2SV_ModStart> ( ) { <S2SV_ModStart> ( ) { <S2SV_ModStart> ( ) ; },0
26,<S2SV_ModStart> char * fmtname ; int debug <S2SV_ModStart> = 0 ; debug = 0 ; <S2SV_ModStart> break ; case OPT_DEBUG : debug = atoi ( jas_optarg ) ; break ; case <S2SV_ModStart> ; } } jas_stream_close ( fmtid ) ; <S2SV_ModStart> ) ) { jas_log ( debug ) ; <S2SV_ModStart> break ; } case,0
27,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
28,"<S2SV_ModStart> ) ) { if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ; ptr ++ ; length -= 2 ; if ( length < 2 ) { ND_PRINT ( ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ; ptr ++ ; length -= 2 ; if ( length < 2 ) { ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",0
29,"<S2SV_ModStart> intf ) { struct usb_host_interface * <S2SV_ModEnd> alt ; alt <S2SV_ModStart> ; if (! alt ) return - ENODEV <S2SV_ModEnd> ; return usb_set_interface <S2SV_ModStart> ( udev, alt -> <S2SV_ModEnd> desc. bInterfaceNumber <S2SV_ModStart> bInterfaceNumber, alt -> desc. bAlternateSetting",1
30,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> rc_pc_to_char ( struct <S2SV_ModStart> p ) { if ( tolen < 2 ) return - ENAMETOOLONG ; <S2SV_ModStart> = 0 ; tolen ; <S2SV_ModStart> case 2 : if ( tolen == 0 ) return - ENAMETOOLONG ; <S2SV_ModStart> = '/' ; tolen -- ; tolen -- ; return - ENAMETOOLONG ; <S2SV_ModStart> case 2 : if ( tolen < 2 ) return - ENAMETOOLONG ; <S2SV_ModStart> = '/' ; tolen -= 3 ; <S2SV_ModStart> = '/' ; tolen -= 3 ; tolen ; tolen ; tolen ; tolen -= 3 ; <S2SV_ModStart> = '/' ; tolen -= 3 ; if ( tolen == '/' ) return - ENAMETOOLONG ; <S2SV_ModStart> += 3 ; tolen -= 3 ; <S2SV_ModStart> += 3 ; tolen -= comp_len ; if ( tolen == 0 ) return - ENAMETOOLONG ;,0
31,<S2SV_ModStart> == - 1 || class == CLIENT_TYPE_MAX,0
32,<S2SV_ModStart> unsigned long flags ; if ( qid > NVMET_NR_QUEUES ) return NULL,1
33,"<S2SV_ModStart> -> bbuffer ; <S2SV_ModEnd> retval = usb_set_info <S2SV_ModStart> ) ) ; usb_free_data ( interface, NULL ) ;",0
34,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,0
35,<S2SV_ModStart> dest_keyring ) { mutex_lock ( & dest_key -> user_keyring ) ; <S2SV_ModStart> ) ; } else { dev_err ( & dest_key -> keyring ) ; if ( dest_keyring == NULL ) { dev_err ( & dest_keyring ) ; if ( dest_keyring && dest_key -> user_keyring ) { dev_err ( & dest_key -> dest_keyring ) ; break ; } },0
36,<S2SV_ModStart> ; if ( ctx -> priv_ctx == 0 ),0
37,<S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_l2tpip <S2SV_ModEnd> ) ) return <S2SV_ModStart> ; if ( addr -> l2tp_family!= AF_INET <S2SV_ModEnd> ) return - <S2SV_ModStart> ; if ( addr -> l2tp_family!= AF_INET <S2SV_ModEnd> ) goto out_unlock,0
38,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> int max_random_int ( <S2SV_ModStart> int max, unsigned int max <S2SV_ModEnd> ) { return <S2SV_ModStart> ; } } return max <S2SV_ModEnd> ; } <S2SV_null>",0
39,"<S2SV_ModStart>, _ ( ""_Cancel"" ), GTK_RESPONSE_CANCEL ), GTK_RESPONSE_OK <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } _ ( dialog ), GTK_RESPONSE_CANCEL <S2SV_ModEnd> ) ; }",0
40,<S2SV_ModStart> str ) ; strncpy <S2SV_ModEnd> ( tm ->,0
41,<S2SV_ModStart> USER_LEN - 1,0
42,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0x51 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd>, 0 )",0
43,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
44,,0
45,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horAcc8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
46,"<S2SV_ModStart> tsample_t s ; uint16 bps = 0 ; ( void ) TIFFGetField ( in, TIFFTAG_BITSPERSAMPLE, & bps ) ; if ( bps!= 8 ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> can <S2SV_blank> only <S2SV_blank> handle <S2SV_blank> BitsPerSample=8 <S2SV_blank> in <S2SV_blank> %s"", ""cpContig2SeparateByRow"" ) ; return 0 ; }",1
47,"<S2SV_ModStart> ) ; struct hugepage_subpool * spool = ( struct hugepage_subpool <S2SV_ModEnd> * ) page_private <S2SV_ModStart> hugetlb_lock ) ; hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, 1 )",1
48,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) { return AVERROR_EOF ; } if (,1
49,<S2SV_ModStart> goto not_found ; if ( e - p > HOST_NAME_MAX - 1 ) goto not_found ;,0
50,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> bool <S2SV_ModEnd> generic_pipe_buf_get ( struct <S2SV_ModStart> buf ) { return try_get_page <S2SV_ModEnd> ( buf ->,1
51,"<S2SV_ModStart>, cp, ep2, map, nmap ) ; } else cp = ikev1_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) goto trunc ; } if <S2SV_ModStart> < ep2 ) <S2SV_ModEnd> ND_PRINT ( (",1
52,"<S2SV_ModStart> { if (! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",0
53,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL ) )",0
54,<S2SV_ModStart> config -> pm_max_requests ; fpm_globals. listening_socket = dup ( wp -> listening_socket ),1
55,"<S2SV_ModStart> this_frame ) { const TWO_PASS <S2SV_ModEnd> * twopass = <S2SV_ModStart> this_frame ) { const FIRSTPASS_STATS * const twopass = NULL ; TWO_PASS <S2SV_ModEnd> * twopass <S2SV_ModStart> ( twopass, twopass, twopass -> <S2SV_ModEnd> ctx ) ; <S2SV_ModStart> ( twopass, twopass, twopass -> stats_in ) ; TWO_PASS_STATS * twopass = NULL ; } <S2SV_ModStart> ( twopass, twopass, twopass -> <S2SV_ModEnd> this_frame ) ;",0
56,<S2SV_ModStart> 0 ; } err = handle -> h_err ; <S2SV_ModStart> h_transaction ) { rc <S2SV_ModEnd> = jbd2_journal_stop ( <S2SV_ModStart> ) ; return err? err : rc <S2SV_ModEnd> ; } sb <S2SV_ModStart> t_journal -> j_private <S2SV_ModEnd> ; rc =,1
57,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if (,0
58,<S2SV_ModStart> valuelen ) ; args -> rmtvaluelen = args -> valuelen ;,1
59,"<S2SV_ModStart> crypto, name <S2SV_ModEnd> ) ; if",0
60,"<S2SV_ModStart> 2 ) { ND_TCHECK2 ( * tptr, 2 ) ; <S2SV_ModStart> len - 2 ; if ( len < stlv_len ) goto trunc ; ND_TCHECK2 ( * ( tptr ), stlv_len ) <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ; stlv_len = stlv_len <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> - ISIS_SUBTLV_SPB_SPB_INSTANCE_MIN_LEN ; st",0
61,<S2SV_ModStart> ) ; } if ( p_buf_size < 1 ) { return - EINVAL ; } if (,0
62,"<S2SV_ModStart> flags ) ; memset ( & ddi, 0, sizeof ( ddi ) ) ;",1
63,<S2SV_ModStart> == 12 && ( <S2SV_ModStart> flags & TH_SYN ),1
64,"<S2SV_ModStart> -> ipc_socket ; <S2SV_ModEnd> * ipc_socket = <S2SV_ModStart> 1 ; int procfd ; <S2SV_ModStart> { ERROR ( ""Unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> %s"", strerror ( 0 ) <S2SV_ModEnd> ) ; shutdown <S2SV_ModStart> { ERROR ( ""Unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> (0): <S2SV_blank> %s."", strerror ( errno ) <S2SV_ModEnd> ) ; shutdown <S2SV_ModStart> } } shutdown : { shutdown ( ipc_socket ) ; shutdown ( ipc_socket ) ; shutdown ( procfd ) ; } shutdown ( ipc_socket, SHUT_RDWR ) ; <S2SV_ModStart> { ERROR ( ""Error <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> process <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> %s."", strerror ( errno ) <S2SV_ModEnd> ) ; shutdown <S2SV_ModStart> } } close ( procfd ) ;",0
65,<S2SV_ModStart> = 0 ; size_t len = 0 ; <S2SV_ModStart> len ) { if ( len < sizeof ( line ) ) return - 1 ; <S2SV_ModStart> ] ) { <S2SV_ModEnd> error = (,0
66,"<S2SV_ModStart> ( header -> biBitCount == 0 ) { fprintf ( stderr, ""Error, <S2SV_blank> invalid <S2SV_blank> biBitCount <S2SV_blank> %d\\n"", 0 ) ; return OPJ_FALSE ; } if ( header ->",1
67,<S2SV_ModStart> NULL ; } sas_probe_devices ( port ) ;,1
68,<S2SV_ModStart> 0 ) { if ( image -> colors < tga_info. colormap_index ) image -> colors = tga_info. colormap_index ;,1
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,"<S2SV_ModStart> ENOBUFS ; } memset ( & line, 0, sizeof ( line ) ) ;",1
71,"<S2SV_ModStart> arg ) { int ret ; ret = scsi_verify_blk_ioctl ( bd, cmd ) ; if ( ret < 0 ) return ret ;",1
72,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_decode_read_state ( struct <S2SV_ModStart> s ) { return FALSE <S2SV_ModEnd> ; } <S2SV_null>,0
73,<S2SV_ModStart> * req ; <S2SV_ModEnd> return - EFAULT,0
74,"<S2SV_ModStart> int m ; if ( n < 0 ) { jas_deprecated ( ""negative <S2SV_blank> count <S2SV_blank> for <S2SV_blank> jas_stream_pad"" ) ; }",1
75,<S2SV_ModStart> j ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ) ) ; },0
76,<S2SV_ModStart> av_log ( mxf -> fc,1
77,<S2SV_ModStart> mntpath ) ; return - ENOMEM ;,0
78,<S2SV_ModStart> + 10 ; if ( psf -> fileoffset < psf -> filelength ) { <S2SV_ModStart> ; } ; } ;,1
79,"<S2SV_ModStart> -> header_len ; ND_TCHECK ( p [ 0 ] ) ; <S2SV_ModStart> case LS_COOKIE_ID : ND_TCHECK2 ( p [ 0 ], 2 ) ; <S2SV_ModStart> case LS_COOKIE_ID : ND_TCHECK2 ( p [ 0 ], 2 ) ;",0
80,<S2SV_ModStart> NF_STOLEN ; return err == 0? NF_ACCEPT : NF_DROP <S2SV_ModEnd> ; } <S2SV_null>,1
81,"<S2SV_ModStart> * up ; int klen ; <S2SV_ModStart> rta ) ; klen = <S2SV_ModEnd> xfrm_len ( ulen <S2SV_ModStart> * up = klen_replay_state_len ( klen <S2SV_ModStart> ; pp = klen ( <S2SV_ModEnd> ) ; } <S2SV_ModStart> ; pp = kzalloc ( klen <S2SV_ModEnd>, GFP_KERNEL ) <S2SV_ModStart> ; if ( klen < nla_len ) return - EINVAL ; memcpy ( rta, GFP_KERNEL ) ;",0
82,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> io_cleanup ( io <S2SV_ModStart> ; } io -> io_cleanup = io -> io_cleanup ;,0
83,<S2SV_ModStart> ) ; } else { return ( <S2SV_ModStart> ) ) ; },0
84,<S2SV_ModStart> NULL ) ; <S2SV_ModEnd> return - EINVAL,0
85,"<S2SV_ModStart> ( buf = jas_alloc3 ( bufsize, numcols <S2SV_ModEnd>, sizeof (",1
86,<S2SV_ModStart> ( cfg ) <S2SV_ModEnd> return 0 ;,0
87,"<S2SV_ModStart> size ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""GSO <S2SV_blank> size <S2SV_blank> must <S2SV_blank> not <S2SV_blank> be <S2SV_blank> zero.\\n"" ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> gso. type ) ; netbk_fatal_tx_err ( vif",1
88,"<S2SV_ModStart> * object, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void * <S2SV_ModStart> < 0 ) <S2SV_ModEnd> bitmap_pos = ext_index_add_object <S2SV_ModStart> name ) ; <S2SV_ModEnd> bitmap_set ( base",1
89,"<S2SV_ModStart> xfr_cmd, fname <S2SV_ModEnd> ) ; free",1
90,<S2SV_ModStart> mixer ) { snd_usb_mixer_disconnect ( mixer ) ;,1
91,<S2SV_ModStart> ) { struct * rollover = NULL ; struct <S2SV_ModStart> - ENOMEM ; * rollover = NULL ; <S2SV_ModStart> rollover ) ; mutex_lock ( & rollover -> fanout_mutex ) ; err = - EINVAL ; <S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num <S2SV_ModStart> rollover ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_long_tty <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_mutex ) ; <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_long_set ( & <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> rollover <S2SV_ModStart> atomic_long_long_set ( & <S2SV_ModEnd> ) ; } <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num,0
92,<S2SV_ModStart> ; newnp -> inet_opt <S2SV_ModEnd> = NULL ;,0
93,<S2SV_ModStart> ) ; } if ( page_goto out_goto out ;,0
94,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
95,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
96,"<S2SV_ModStart> ( interface, ENC28J60_ECON1 ) & ENC28J60_START ) ; enc28j60WriteReg ( interface, ENC28J60_START <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC28J60_START ) <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC28J60_START ) & ENC28J60_ECON1 <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_START ) ; enc28j60SetBit ( interface, ENC28J60_START <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC28J60_START ) ; <S2SV_ModStart> ( interface, ENC28J60_START ) ; enc28j60SetBit ( interface, ENC28J60SetBit <S2SV_ModEnd> ) ; <S2SV_ModStart> ( interface, ENC28J60_START",0
97,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,0
98,"<S2SV_ModStart> } if (! page_name_len ( page ) ) { fput_line ( ""%s"", page ) ; return NULL ; } if (!",0
99,"<S2SV_ModStart> ; if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) ) <S2SV_ModEnd> { ret = <S2SV_ModStart> inode, EXT4_STATE_DIO_UNWRITTEN ) ; if ( ext4_should_dioread_nolock ( inode ) ) set_buffer_uninit ( bh_result <S2SV_ModStart> } if ( ( flags & EXT4_GET_BLOCKS_CONVERT ) <S2SV_ModEnd> ) { ret",1
100,<S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ;,1
101,"<S2SV_ModStart> if (! caller_may_see_dir ( fc -> pid, controller, cgroup ) ) { ret = - ENOENT ; goto out ; } if (!",1
102,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> y_stride ) { <S2SV_ModStart> intra_stride ) { VP9_COMMON * const mb = vpx_stride ; <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( source_stride, <S2SV_ModStart> int64 ) ; memcpy <S2SV_ModEnd> ( source, <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( source -> <S2SV_ModStart> -> y_buffer, mb_stride ) ; memcpy <S2SV_ModEnd> ( source -> <S2SV_ModStart> -> y_stride, mb_stride ) ; memcpy <S2SV_ModEnd> ( source, <S2SV_ModStart> -> y_stride ) ; memcpy <S2SV_ModEnd> ( source, <S2SV_ModStart> ++ ) ; memcpy <S2SV_ModEnd> ( vpx_stride ) ;",0
103,<S2SV_ModStart> return ret ; ptr += len ;,0
104,"<S2SV_ModStart> : if (! cap_issubset ( new -> cap_permitted, old -> cap_permitted ) ) bprm -> per_clear |= PER_CLEAR_ON_SETID ; if (",1
105,"<S2SV_ModStart> int error ; struct mb2_cache_entry <S2SV_ModEnd> * cache, <S2SV_ModStart> int error ; <S2SV_ModEnd> h = mb2_cache_entry_delete_block ( cache, bh, hash, bh -> bh ) ; <S2SV_ModStart> int error ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
106,"<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( strlen <S2SV_ModStart> ""\\n"" ) ; return NULL ;",0
107,<S2SV_ModStart> tf = ( <S2SV_ModEnd> luaY_parser ) (,1
108,<S2SV_ModStart> ; int err ; if ( protocol < 0 || protocol >= IPPROTO_MAX ) return - EINVAL,1
109,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> opt.",1
110,"<S2SV_ModStart> ; dl = kzalloc <S2SV_ModEnd> ( size,",1
111,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static u_int <S2SV_ModEnd> rpki_rtr_pdu_print ( const <S2SV_ModStart> pki_rtr_pdu ) { ND_TCHECK ( * tptr, const u_int len ) ; if ( len < sizeof ( rpki_rtr_pki_pki_rtr_pdu ) ) { ND_PRINT ( ( ( ndo, ""(invalid <S2SV_blank> bytes)"" ) ) ; <S2SV_ModStart> length ) ; } if ( len < sizeof ( * tptr ) ) { ND_PRINT ( ( rpki_rtr_pdu ) ) ; if ( len < sizeof ( * tptr ) ) { ND_PRINT ( ( rpki_pki_rtr_pki_pdu ) ; return NULL ; } <S2SV_ModStart> case RPKI_RTRACE : if ( len < sizeof ( rpki_pki_rtr_pki_pdu ) ) { ND_PRINT ( ( ( rpki_pki_rtr_pki_pdu, sizeof ( rpki_rtr_pdu ) ) ; <S2SV_ModStart> case",0
113,"<S2SV_ModStart> ; int n <S2SV_ModEnd> ; skb -> <S2SV_ModStart> rose_facilities_struct ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> data + ROSE_CALL_REQ_FACILITIES_OFF, skb -> len - ROSE_CALL_REQ_FACILITIES_OFF, <S2SV_ModEnd> & facilities )",1
114,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr,1
115,<S2SV_ModStart> ; if ( is_comment > 0 &&,0
116,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; } ret",0
117,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; int ret <S2SV_ModStart> ) ; } o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> cl_nodes_lock ) ; o2nm_unlock_subsystem ( ) ;,1
118,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; break",1
119,"<S2SV_ModStart> == '/' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> is <S2SV_blank> absolute"" ) ; return ( ARCHIVE_FAILED ) ; } separator = * src ++ ; } <S2SV_ModEnd> for ( ;",1
120,"<S2SV_ModStart> TPM_R_SUCCESS ) { TPM_RC result = TPM_DIGEST <S2SV_ModEnd> ; TPM_RC_RC_DIGEST ( <S2SV_ModStart> TPM_RX ) { TPM_RC_ERROR_SUCCESS <S2SV_ModEnd> return TPM_R_SUCCESS ; <S2SV_ModStart> = 0 ; TPM_RC_SUCCESS <S2SV_ModEnd> if (! <S2SV_ModStart> ) { TPM_SUCCESS_ERR ( tpm_to_init ) ; TPM_RC_FAILURE_DIGEST ( & ctx, md, md ) ; TPM_RC_RC_RC_RC_DIGEST ) { TPM_ERROR_DIGEST ( ""%s: <S2SV_blank> %x%x"", md ) ; TEMPTYP_FAILURE_R ( md ) ; return TPM_DIGEST ; } if (! rc ) { TPM_RC_RC_R ( <S2SV_ModStart> ) ; } return TPM_DIGEST ;",0
121,"<S2SV_ModStart> inmem ) { jas_stream_memopen2 <S2SV_ModEnd> ( 0, <S2SV_ModStart> if (! jas_stream_memopen2 <S2SV_ModEnd> ( 0,",0
122,<S2SV_ModStart> s ) { if ( s == 0 ) return ( ( void * ) NULL ) ;,1
123,<S2SV_ModStart> ; if ( WARN_ON_ONCE (! ib_safe_file_access ( fp ) ) ) return - EACCES ; if (,1
124,"<S2SV_ModStart> 6 ) ) { MATLAB_KO : clone_info = DestroyImageInfo ( clone_info ) ; <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart> ""ImproperImageHeader"" ) ; }",0
125,<S2SV_ModStart> ( peer ) peer = maybe_get_net <S2SV_ModEnd> ( peer ),1
126,<S2SV_ModStart> } while ( ( i < ( int ) header_buf_used ) && ( <S2SV_ModStart> ] == '\\n' ),1
127,<S2SV_ModStart> m_family ) ; if ( proto == LLDP_MGMT_ADDR_NONE ) continue <S2SV_ModEnd> ; if (,1
128,"<S2SV_ModStart>, 1 << 24 <S2SV_ModEnd> ) ) {",0
129,<S2SV_ModStart> default_auto_asconf ) { spin_lock ( & sock_net ( sk ) -> sctp. addr_wq_lock ) ; <S2SV_ModStart> do_auto_asconf = 1 ; spin_unlock ( & sock_net ( sk ) -> sctp. addr_wq_lock ) <S2SV_ModStart> ; } else { <S2SV_ModStart> do_auto_asconf = 1 ; } <S2SV_ModStart> do_auto_asconf = 1 ; spin_unlock ( & sock_net ( sk ) -> sctp. addr_wq_lock ) ; <S2SV_ModStart> ; break ; },0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> reading ) { <S2SV_ModStart> return AVERROR_INVALIDDATA ; <S2SV_ModEnd> if ( s <S2SV_ModStart> return AVERROR_INVALIDDATA ; <S2SV_ModEnd> if ( s,0
131,<S2SV_ModStart> { if (! vpx_read_bit ( ww ) ) return 0 ; if (,0
132,<S2SV_ModStart> rule ) ; if (! entry -> lsm [ lsm_rule ]. rule ) return - EINVAL ;,1
133,<S2SV_ModStart> file ) ; <S2SV_ModEnd> file_free ( file,1
134,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
135,"<S2SV_ModStart> ""\\n"" ) ; int poll_interval = 0 ; <S2SV_ModStart> s\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> %s\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> timeout\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> set\\n"" ) ; int poll_interval = 0 ; if ( s_poll_poll_interval < 0 ) { int poll_interval = s_poll_poll_interval <S2SV_ModEnd> ( s_poll_poll_interval,",0
136,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> attrs_buffer ( struct <S2SV_ModStart> * ext4_attr_buffer <S2SV_ModEnd> * ext4_hdr, <S2SV_ModStart> * ext4_len = xdr_len ; unsigned char * xdr_len = NULL <S2SV_ModStart> ) return - EINVAL <S2SV_ModEnd> ; if ( <S2SV_ModStart> inode_buffer ) { if ( acl_len < AX2SV_null> <S2SV_null>",0
137,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,1
138,<S2SV_ModStart> ; while ( ( i < to_read ) && <S2SV_ModStart>!= 0 ) <S2SV_ModEnd> ) { i,1
139,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
140,<S2SV_ModStart> [ plane ] && in -> linesize [ plane ],1
141,"<S2SV_ModStart> ( szFileName, pszFileName, <S2SV_ModStart> ) - 5 <S2SV_ModEnd> ) ; }",1
142,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
143,<S2SV_ModStart> >> 2 ; if ( q + o >= e ) goto out ;,0
144,"<S2SV_ModStart> __be32 new_saddr ; struct ip_options_rcu * inet_opt ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. srr ) daddr = inet_opt -> opt. <S2SV_ModEnd> faddr ; rt",1
145,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
146,"<S2SV_ModStart> return ; } if ( len < sizeof ( struct eigrp_common_header ) ) { ND_PRINT ( ( ndo, ""EIG: <S2SV_blank> %s, <S2SV_blank> (too <S2SV_blank> < <S2SV_blank> %u)"", ( u_int ) sizeof ( struct eigrp_header ) ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( len < sizeof ( struct eigrp_header ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short, <S2SV_blank> < <S2SV_blank> %u)"", ( u_int ) sizeof ( struct eigrp_header ) ) ) ; break ; } <S2SV_ModStart> ) ) ; if ( len < sizeof ( struct eigrp_header ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> %u)"", ( u_int ) sizeof ( struct eigrp_header ) ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( eigrp_tlv_len < sizeof ( struct eigrp_header ) ) { ND_PRINT ( ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short, <S2SV_blank> (too <S2SV_blank> short, <S2SV_blank> < <S2SV_blank> (too <S2SV_blank> short, <S2SV_blank> < <S2SV_blank> %u)"", ( u_",0
147,<S2SV_ModStart> * addr2 ; <S2SV_ModEnd> if ( addr_len <S2SV_ModStart> ADDR ) ; <S2SV_ModEnd> } <S2SV_null>,0
148,<S2SV_ModStart> long long * table_start <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> = SQUASHFS_FRAGMENT_BLOCKS ( s ) <S2SV_ModEnd> ; long long <S2SV_ModStart> = SQUASHFS_FRAGMENT_ERROR ; if ( s -> s. table_start!= NULL ) return FALSE ; if (,0
149,"<S2SV_ModStart>, '/' ) ; if ( ptr == NULL ) return ( ENOENT ) ; ptr ++ <S2SV_ModEnd> ; rw_exit (",1
150,<S2SV_ModStart> |= EXT4_EXT_MARK_UNINIT2 ; if ( flags & EXT4_GET_BLOCKS_CONVERT ) split_flag |= EXT4_EXT_DATA_VALID2 ;,1
151,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; } ret",0
152,<S2SV_ModStart> ; return NULL ; } if (,0
153,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ), & final ) ; rcu_read_unlock ( <S2SV_ModEnd> ) ; dst",1
154,"<S2SV_ModStart> = 0 ; uint32 nstrips = 0 ; <S2SV_ModStart> 2 ) ; if ( buffsize > 0xFFFFU - 3 ) { TIFFError ( ""loadImage"" ) ; return ( - 1 ) ; } <S2SV_ModStart> 3 ) ; }",0
155,<S2SV_ModStart> arg ) { const char * config = NULL ; <S2SV_ModStart> arg ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( config -> config == NULL ) return I444 ; # endif <S2SV_ModStart> arg ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( config -> codec_stride == NULL ) return I444 ; # endif <S2SV_ModStart> arg1 ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( arg2 == NULL ) return I444 ; # endif <S2SV_ModStart> arg1 ) ; # if CONFIG_VP9_HIGHBITS_null> <S2SV_null> <S2SV_null>,0
156,<S2SV_ModStart> options. disable_forwarding ||! use_privsep,1
157,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
158,"<S2SV_ModStart> ) ; } if ( ( ( MagickSizeType ) image -> columns * image -> rows ) > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ;",1
159,"<S2SV_ModStart> errout ; } <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart>. value = ""xxxx"" ; <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart> -> gr_ctx. length = 4 <S2SV_ModEnd> ; gr ->",1
160,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> out ; } ext_size = sizeof ( EXT4_I ( inode ) -> i_data ) ; <S2SV_ModStart> -> i_data, ext_size ) ; memset ( bh -> b_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size <S2SV_ModEnd> ) ; neh",1
161,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> sock ) { if ( c -> session == NULL ) return - 1 ; <S2SV_ModStart> sock ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> sock ) ; } return 1 ;,0
162,<S2SV_ModStart> ; int ret ; if ( current_chrooted ( ) ) return - EPERM,1
163,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
164,"<S2SV_ModStart> c -> nreslevels <= <S2SV_ModEnd> s -> reduction_factor <S2SV_ModStart> -> reduction_factor ) { av_log ( s -> avctx, AV_LOG_ERROR, ""reduction_factor <S2SV_blank> too <S2SV_blank> large\\n"" ) ; return AVERROR ( EINVAL ) ; } if (",0
165,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
166,<S2SV_ModStart> ; bool do_n_hdr ) { <S2SV_ModStart> = 0 ; do_vnet = false ; do_vnet <S2SV_ModStart> ; if ( do_vnet <S2SV_ModEnd> ) { do_hdr,0
167,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> sctp_auth_asoc_init_active_key ( asoc,1
168,<S2SV_ModStart> return false ; if ( ndp_msg_type_type_info ( msg_type ) -> addrto_validate ) return ndp_msg_type_type_type_validate ( msg_type ) ; else,0
169,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> lsm_label_set_label_label_label_labelfd ) { int fret <S2SV_ModEnd> = - 1 <S2SV_ModStart> = - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> = 0 ; <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
170,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
171,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
172,"<S2SV_ModStart> -> rc ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1 ], 0 ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> cpi -> rc.",0
173,"<S2SV_ModStart> } num ++ ; if ( num > MaxAllocSize / ITEMSIZE ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> levels <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", num, ( int ) ( MaxAllocSize / ITEMSIZE ) ) ) )",1
174,"<S2SV_ModStart> header, struct mb2_cache_entry <S2SV_ModEnd> * * ce <S2SV_ModStart> header ) { struct mb2_cache_entry * ce ; struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache = <S2SV_ModStart> header ) ; ce = mb2_cache_entry_find_first <S2SV_ModEnd> ( ext4_mb_cache, <S2SV_ModStart> ( ext4_mb_cache, <S2SV_ModEnd> hash ) ; <S2SV_ModStart> ; ce = mb2_cache_entry <S2SV_ModEnd> ( ext4_mb_cache,",0
175,"<S2SV_ModStart> { gint64 offset <S2SV_ModEnd> ; char line <S2SV_ModStart> = offset ; return parse_cosine_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart> -> phdr, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart> wth -> frame_buffer, line",1
176,<S2SV_ModStart> = line_end ; <S2SV_ModEnd> error = add_push_report_pkt,1
177,<S2SV_ModStart> if ( left == 0 && extend ) return 0 ; if ( left,1
178,<S2SV_ModStart> < INDIRECT_BLOCKS ) { <S2SV_ModStart> ] ) ; },0
179,"<S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
180,"<S2SV_ModStart> - ENOMEM ; * ( ( struct vbg_ioctl_hdr * ) buf ) = hdr ; <S2SV_ModStart> copy_from_user ( buf + sizeof ( hdr ) <S2SV_ModStart> * ) arg + sizeof ( hdr ), hdr. size_in - sizeof ( hdr ) <S2SV_ModEnd> ) ) {",1
181,"<S2SV_ModStart> * bufptr ; size_t numrows = 0 ; <S2SV_ModStart> int hstartrow <S2SV_ModEnd> ; if ( <S2SV_ModStart> if ( numrows < numcols ) { jas_alloc ( buf, numcols, & bufsize ) ; if ( numrows < hstartrow <S2SV_ModEnd> ) { goto",0
182,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
183,"<S2SV_ModStart> number_colormaps, MagickMax ( number_planes_filled, number_planes_filled <S2SV_ModEnd> ) ; number_planes_filled <S2SV_ModStart> -> rows * number_planes_filled <S2SV_ModEnd> ) ; number_planes_filled <S2SV_ModStart> ( number_planes_filled, <S2SV_ModStart> ( number_planes_filled, <S2SV_ModEnd> )!= ( <S2SV_ModStart> ( number_planes_filled <S2SV_ModEnd> ) ) ThrowReaderException <S2SV_ModStart> -> rows * number_planes_filled <S2SV_ModEnd> ; pixel_info =",0
184,<S2SV_ModStart> DQUOT_LIMITS_ENABLED ) ; if ( sbi -> s_mb_cache ) { ext2_xattr_destroy_cache ( sbi -> s_mb_cache ) ; sbi -> s_mb_cache = NULL ; } <S2SV_ModEnd> if (!,1
185,"<S2SV_ModStart> return - EINTERVAL ; if ( get_desc -> bNumEndpoints < 1 ) { dev_err ( & gf -> dev, ""%s: <S2SV_blank> interface <S2SV_blank> interface <S2SV_blank> %d\\n"", __func__, GFP_KERNEL ) ; goto fail3 ; } if (",0
186,"<S2SV_ModStart> ""setregid"" ) ; <S2SV_ModEnd> char * arg <S2SV_ModStart> 0 ] = ""/bin/sh"" <S2SV_ModEnd> ; arg [",1
187,<S2SV_ModStart> node ) { if ( node -> nd_item. ci_parent ) <S2SV_ModStart> ci_parent ) ; else return NULL ;,1
188,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
189,<S2SV_ModStart> ( pb ) ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA,1
190,<S2SV_ModStart> if ( q < p || q,1
191,<S2SV_ModStart> protostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> cryptostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> timingstats ) ; <S2SV_ModEnd> step_callback = &,1
192,"<S2SV_ModStart> * tmpname, fname <S2SV_ModEnd> ) ; }",0
193,<S2SV_ModStart> prev ) ; n -> mounts += n -> pending_mounts ; n -> pending_mounts = 0 ;,1
194,"<S2SV_ModStart> ; savesegment ( fs, fsindex ) ; savesegment ( next, fsindex ) ; savesegment ( next, cpu ) ; savesegment ( next, cpu ) ; savesegment ( next, gs <S2SV_ModEnd> ) ; savesegment",0
195,<S2SV_ModStart> dd ) ; <S2SV_ModEnd> } } <S2SV_null>,1
196,<S2SV_ModStart> 1 ) ; if ( ret == 0 ) { return EINVAL ; },0
197,<S2SV_ModStart> 1u << DB_VECTOR ) | ( 1u << AC_VECTOR,1
198,<S2SV_ModStart> sfsname ) { <S2SV_ModEnd> char stringlen <S2SV_ModStart> ; temp [ stringlen <S2SV_ModEnd> ] ; stringlen <S2SV_ModStart> ) ; stringlen <S2SV_ModEnd> ) ; stringlen,0
199,"<S2SV_ModStart> unsigned int flags, struct rt6_info * rt <S2SV_ModStart> ( & fhdr, rt",1
200,<S2SV_ModStart> ( res ) goto err_add_port <S2SV_ModEnd> ; res = <S2SV_ModStart> port ) ; err_add_port : hsr_del_node ( & hsr -> self_node_db ) ;,1
201,<S2SV_ModStart> ; n = 0 <S2SV_ModEnd> ; if (,0
202,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_buffer = vp9_stride <S2SV_ModEnd> ( src, <S2SV_ModStart> src = { <S2SV_ModEnd> vp9_get_stride <S2SV_ModEnd> ( src, <S2SV_ModStart> int src = vp9_stride <S2SV_ModEnd> ( src,",0
203,<S2SV_ModStart> ; if (! p -> iov_base ) return 0 ; if (,0
204,"<S2SV_ModStart> <S2SV_null> static inline int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> dst ) { return assign_eip_far ( ctxt, dst, ctxt -> mode == X86EMUL_MODE_PROT64 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",1
205,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
206,"<S2SV_ModStart> ; remaining = tvb_reported_length_remaining <S2SV_ModEnd> ( tvb,",1
207,<S2SV_ModStart> -> inode = get_verify_block ( inode ) ; <S2SV_ModStart> out ; } else <S2SV_ModEnd> } else {,0
208,<S2SV_ModStart> return rc ; <S2SV_ModEnd> copied = skb,1
209,<S2SV_ModStart> ; if ( strlen ( line ) > 0 &&,0
210,<S2SV_ModStart> ; if ( pmc_overflow ( val ) <S2SV_ModEnd> ) write_pmc (,1
211,"<S2SV_ModStart> ( * b + len, * avail - len <S2SV_ModEnd>, nl )",1
212,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> const fname, * <S2SV_ModEnd>, * <S2SV_ModStart> = NULL ; unsigned char * <S2SV_ModEnd> = NULL ; <S2SV_ModStart> if (! coerce_name <S2SV_ModEnd> ) return ; <S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj_name, <S2SV_ModStart>, & PyExc_Type_Type ) < 0 ) { PyErr_Set ( & PyExc_TypeError, "" <S2SV_blank> field <S2SV_blank> \\""%s\\"", __func__, fname ) ; return NULL ; } else { PyErr_Set ( & PyExc_TYPE_name ) ; PyErr_SetString ( & PyExc_TypeError, ""Unable <S2SV_blank> field <S2SV_blank> %s <S2SV_blank> \\"", __func__, fname ) ; return NULL ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { PyErr_SetString ( & PyExc_TypeError, ""in <S2SV_blank> field <S2SV_blank> too <S2SV_blank> large\\n"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> if (! <S2SV_ModEnd> ) ; return <S2SV_ModStart> c_name ) { Py_DECODE_TYPE_ONLY",0
213,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
214,<S2SV_ModStart> string ) { <S2SV_ModEnd> c = c,0
215,"<S2SV_ModStart> == 0 ) mark_key_instantiated ( key, 0 <S2SV_ModEnd> ) ; up_write",1
216,<S2SV_ModStart> <= * len && plen > 0,1
217,<S2SV_ModStart> ; args. rmtvaluelen = valuelen ; args.,1
218,<S2SV_ModStart> ; if ( <S2SV_ModEnd> timeout == NULL <S2SV_ModStart> ; if ( compat_get_timespec <S2SV_ModEnd> ( & ktspec <S2SV_ModStart> > 0 && compat_put_timespec <S2SV_ModEnd> ( & ktspec,1
219,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
220,<S2SV_ModStart> ndev ) ; <S2SV_ModEnd> assert ( skb <S2SV_ModStart> q_num ) ; return <S2SV_ModEnd> hns_nic_net_xmit_hw ( ndev <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
221,<S2SV_ModStart> |= MSG_TRUNC ; <S2SV_ModEnd> lock_sock ( sk,1
222,<S2SV_ModStart> } if ( <S2SV_ModEnd> udp_specified && settings,1
223,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
224,<S2SV_ModStart> = 0 ;,0
225,<S2SV_ModStart> found = 0 <S2SV_ModEnd> ; const char <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( found,1
226,"<S2SV_ModStart> int validate_event ( struct pmu * pmu, <S2SV_ModStart> arm_pmu * armpmu <S2SV_ModEnd> ; struct pmu",0
227,"<S2SV_ModStart> bool new_idmap_permitted ( const struct file * file, <S2SV_ModStart>, cap_setid ) && file_ns_capable ( file, ns -> parent, cap_setid )",1
228,<S2SV_ModStart> j ++ ) { if ( a -> type == szMAPI_BINARY ) <S2SV_ModStart> ) ; } },1
229,"<S2SV_ModStart> hx ; u8 * buf <S2SV_ModEnd> ; int ret <S2SV_ModStart> = 0 ; buf [ 1 ] = kmalloc ( sizeof ( * buf ), GFP_KERNEL ) ; if (! buf ) return - ENOMEM ; buf [ 0 ] = * buf <S2SV_ModEnd> ; kfree ( <S2SV_ModStart> ; kfree ( buf <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; } udev",0
230,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( val_l ) ; break ; } if ( length < 2 ) { ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ) ; return ; } <S2SV_ModStart> ; ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; val_h = EXTRACT_16BITS ( val_l ) ; val_h = EXTRACT_16BITS ( val_l ) ; if ( length < 2 ) { ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> +=",0
231,<S2SV_ModStart> princ ) ; <S2SV_ModEnd> break ; },0
232,<S2SV_ModStart> ; if ( shader_rec_offset < args -> bin_cl_size ||,1
233,<S2SV_ModStart> endif # if HAVE_LZMA_H <S2SV_ModEnd> && HAVE_LIBLZMA if,1
234,<S2SV_ModStart> vma -> vm_file ) ; down_read ( & EXT4_I ( inode ) -> i_mmap_sem <S2SV_ModStart> ; out : up_read ( & EXT4_I ( inode ) -> i_mmap_sem ) ;,1
235,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
236,<S2SV_ModStart> arg ) { char ch = * arg ; switch ( ch <S2SV_ModEnd> ) { case <S2SV_ModStart> ';' : case '=' : case <S2SV_ModStart> b ++ = ch <S2SV_ModEnd> ; break ;,1
237,"<S2SV_ModStart> && nmap ) <S2SV_ModEnd> cp = ikev1_attrmap_print <S2SV_ModStart>, cp, ep2, map, nmap ) ; else cp = ikev1_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) goto trunc ; } if <S2SV_ModStart> < ep2 ) <S2SV_ModEnd> ND_PRINT ( (",1
238,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
239,<S2SV_ModStart> if ( ( skb_mac_header <S2SV_ModEnd> ( skb ) <S2SV_ModStart> skb ) < skb -> head +,1
240,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
241,<S2SV_ModStart>. val =!! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ; <S2SV_ModStart>. val =!! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ;,1
242,<S2SV_ModStart> & RCV_SHUTDOWN ) return 0 ; <S2SV_ModEnd> return err ; <S2SV_ModStart> msg_namelen ) ; <S2SV_ModEnd> } skb_free_datagram (,1
243,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
244,<S2SV_ModStart> const buffers [ 3 <S2SV_ModEnd> ] = { <S2SV_ModStart> src -> vp9_buffer <S2SV_ModEnd> ) ; const <S2SV_ModStart> int strides [ 0 <S2SV_ModEnd> ] = {,0
245,"<S2SV_ModStart>, * ret = NULL ; if ( <S2SV_ModStart> cert ) ) goto cleanup ; <S2SV_ModEnd> ret = rfc",0
246,<S2SV_ModStart> (! npages || base_gfn!= old. base_gfn,1
247,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ru,1
248,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
249,"<S2SV_ModStart> * ni ; unsigned int length_left ; u_int length_left ; u_int length_left ; if ( length_left < ( sizeof ( struct netinfo6 ) ) ) goto trunc ; ND_PRINT ( ( ndo, "" <S2SV_blank> %u"", length_left ) ) ; length_left <S2SV_ModEnd> = ( <S2SV_ModStart> ) ; } if ( length_left < sizeof ( struct rip6_nets ) ) { ND_PRINT ( ( ( ndo, "" <S2SV_blank> [%u] <S2SV_blank> %u]"", length_left ) ) ; length_left = length_left ; } <S2SV_ModStart> ni ) ; if ( length_left < 4 ) goto trunc ; <S2SV_ModStart> case 0 : if ( length_left < sizeof ( rp -> rip6_left ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %u"", length_left ) ) ; length = length_left ; } <S2SV_ModStart> ni ) goto trunc ; length_left <S2SV_ModEnd> ; } <S2SV_null>",0
250,<S2SV_ModStart> < 0 ) goto error ; <S2SV_ModEnd> goto set ;,1
251,<S2SV_ModStart> cpi ) { memcpy <S2SV_ModEnd> ( & cpi <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & cpi,0
252,"<S2SV_ModStart> argc ++ ; retval = bprm_change_interp ( iname, bprm ) ; if ( retval < 0 ) goto _error <S2SV_ModEnd> ; interp_file =",1
253,<S2SV_ModStart> ; int iSrc <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; } } <S2SV_ModEnd> res -> ContribRow <S2SV_ModStart> u ]. Left = iLeft ; res -> ContribRow [ u ]. Right = iRight ; for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ].,1
254,<S2SV_ModStart> user ) ; <S2SV_ModEnd> struct user =,0
255,"<S2SV_ModStart> Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; return ; } if (! COM_CompareExtension ( filename, "".cfg"" ) ) { Com_Printf ( ""Com_WriteConfig_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".cfg\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n""",1
256,<S2SV_ModStart> ; int n <S2SV_ModEnd> ; if (,0
257,"<S2SV_ModStart>, mobj ) { size_t granularity = BIT ( tee_mm_sec_ddr_ddr ) ; <S2SV_ModStart> ( mobj ) ) ; <S2SV_ModEnd> return mobj ;",0
258,<S2SV_ModStart> -> it_overrun += 1LL <S2SV_ModEnd> << i ;,1
259,"<S2SV_ModStart> == 0 ) { <S2SV_ModStart> if (! <S2SV_ModEnd> n_async ) return <S2SV_ModStart> ; } } else if ( CHILD ( n, 2 ) == TYPE ( CHILD ( n, n, 1 ) ) ) return NULL ; <S2SV_ModStart> } else { if ( <S2SV_ModEnd> is_async_async_async_async_async_async ( CHILD ( n, 1 ), CHILD ( n, 1 ), <S2SV_ModStart> ; if ( n, CHILD ( n, 0 ) == CHILD ( n ) ) ) { if ( n = CHILD ( n, 1 ) == 0 ) return NULL ; } else { if ( <S2SV_ModStart> ) ; } else { if ( has_async_async_async_async ( CHILD ( n, CHILD ( n, 1 ), 1 ), NULL ) ; } else { if ( <S2SV_ModStart> == NULL ) return NULL ; }",0
260,<S2SV_ModStart> src -> state == NULL <S2SV_ModEnd> ) return 0,0
261,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> BLOCKD * <S2SV_ModStart> = xd -> mi <S2SV_ModEnd> ; const MODE_INFO <S2SV_ModStart> MODE_INFO * const mbmi_ext = xd -> mbmi_ext <S2SV_ModEnd> ; const MODE_INFO <S2SV_ModStart> MODE_INFO * const MODE_INFO * const mbmi_ext = xd -> mbmi_ext <S2SV_ModEnd> ; const MODE_INFO <S2SV_ModStart> MODE_INFO_INFO * const mbmi_ext = xd -> mbmi_ext <S2SV_ModStart> * w ) ; const MODE_INFO * const mbmi_ext = xd -> mbmi_ext ; const mbmi -> mbmi_ext = xd -> mbmi_ext -> mbmi_ext <S2SV_ModEnd> ; const int <S2SV_ModStart> } } <S2SV_null> <S2SV_null>,0
262,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; saddr,1
263,"<S2SV_ModStart>, r -> qiov. size <S2SV_ModEnd> ) ; n <S2SV_ModStart> = r -> qiov. size <S2SV_ModEnd> / 512 ; <S2SV_ModStart>, r -> qiov. size <S2SV_ModEnd> ) ; }",1
264,<S2SV_ModStart> if ( cs >= <S2SV_ModEnd> CQSPI_MAX_CHIPSELECT ) {,1
265,<S2SV_ModStart> n ) { size_t <S2SV_ModEnd> n ; int <S2SV_ModStart> ) ) ; } <S2SV_ModEnd> if ( n <S2SV_ModStart> ) ) ; } return 0 ;,0
266,<S2SV_ModStart> ) break ; if ( l > ll ) l = ll ;,1
267,<S2SV_ModStart> out ; } } if ( free < 0 ) { err = - ENOMEM ; goto out ;,1
268,<S2SV_ModStart> & 0 ) && <S2SV_ModEnd> ND_TTEST ( *,0
269,<S2SV_ModStart> -> server. <S2SV_ModEnd> ) return ;,0
270,"<S2SV_ModStart> ret ; uint8_t * buffer ; buffer = kmalloc ( 1, GFP_KERNEL ) ; if (! buffer ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart> ret ; } kfree ( buffer ) ;",0
271,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
272,"<S2SV_ModStart> ; } } s -> append_char ( s, 0 ) ; strncpy <S2SV_ModEnd> ( outbuffer,",1
273,<S2SV_ModStart> ) ) ; if ( gboolean ( cpi,0
274,<S2SV_ModStart> = 0 ; ( i + 3 ) <S2SV_ModEnd> < sec -> <S2SV_ModStart> = 0 ; ( i + 7 ) <S2SV_ModEnd> < sec ->,1
275,<S2SV_ModStart> case ISIS_SUBTLV_EXT_IS_REACH_BW_CONSTRAINTS_OLD : if ( subl == 0 ) break ; <S2SV_ModStart> ++ ) { <S2SV_ModEnd> bw. i,1
276,<S2SV_ModStart> ; if ( ptr_tx ->,0
277,"<S2SV_ModStart> ONIG_INFINITE_DISTANCE ) { if ( p - str < reg -> dmax ) { * low = ( UChar * ) str ; if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; } else { <S2SV_ModStart> low ) ; }",0
278,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> int blkfqcoef_debug ( <S2SV_ModStart> struct bfq ) { struct bqcoef * flags ; <S2SV_ModStart> ) ) { struct bq_debug <S2SV_ModEnd> ; struct <S2SV_ModStart> ) ; } <S2SV_ModEnd> return bq ;,0
279,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
280,<S2SV_ModStart> ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> tx_err ) ; netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> size ) ; netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> size ) ; netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> ) ) ; continue ; },0
281,<S2SV_ModStart> ; n = 0 <S2SV_ModEnd> ; if (,0
282,<S2SV_ModStart> xfrm_dump_free ( void ),0
283,<S2SV_ModStart> conn ) ; if ( <S2SV_ModStart> ( conn )!= 0 ) return,1
284,"<S2SV_ModStart> netbk, pending_idx, XEN_NETIF_RSP_OKAY <S2SV_ModStart>, pending_idx, pending_NETIF_RSP_ERROR ) <S2SV_ModStart> XEN_NETIF_RSP_OKAY ; <S2SV_ModEnd> pending_idx = XEN_NETIF_RSP_ERROR <S2SV_ModStart> XEN_NETIF_RSP_ERROR ) { XEN_NETIF_ERROR <S2SV_ModStart> XEN_NETIF_RSP_ERROR ) ; <S2SV_ModEnd> if ( pending_idx <S2SV_ModStart> netbk, XEN_NETIF_RSP_OKAY",0
285,,1
286,"<S2SV_ModStart> ) NULL ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> ) NULL ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> NULL ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ;",1
287,"<S2SV_ModStart> len < 0 <S2SV_ModEnd> ) { syslog <S2SV_ModStart> 1 ; } if ( addr. nl_pid ) { syslog ( LOG_WARNING, ""Received <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> untrusted <S2SV_blank> pid:%u"", addr. nl_pid ) ; continue ; }",1
288,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
289,<S2SV_ModStart> ipc == NULL && client -> session == NULL,1
290,"<S2SV_ModStart> NewLen ) { PyErr_SetString ( newLen, - 1 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( newLen > ( newLen - 1 ) <S2SV_ModEnd> ) { PyErr_Set <S2SV_ModStart> ( newLen - 1 <S2SV_ModEnd> ) ; }",0
291,"<S2SV_ModStart>, nameptr, lfi, fname, UDF_NAME_LEN <S2SV_ModEnd> ) ; if",1
292,"<S2SV_ModStart> ip_vs_timeout_user t ; memset ( & t, 0, sizeof ( t ) ) ;",1
293,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> ( fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
294,<S2SV_ModStart> ; ssize_t result ; if ( WARN_ON_ONCE (! ib_safe_file_access ( filp ) ) ) return - EACCES,1
295,"<S2SV_ModStart>, * controller, * next = NULL <S2SV_ModStart> if (! caller_is_in_ancestor ( fc -> pid, controller, fc -> pid, controller, & next ) ) { ret = - ENOENT ; goto out ; } if (! <S2SV_ModStart> ) ) { ret = - EINVAL ; goto out ; } if ( fc_may_access ( fc -> pid, controller, path1, controller, & next ) ) { ret = - EACCES ; goto out ; } if (!",0
296,<S2SV_ModStart> ) ) { put_disk ( disk ) ;,1
297,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
298,<S2SV_ModStart> NULL ) { status = MagickFalse ; break <S2SV_ModEnd> ; } image,0
299,<S2SV_ModStart> i ] ) { if (! avio_feof ( s ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ; } } if (,0
300,<S2SV_ModStart> ; rinfo = kzalloc <S2SV_ModEnd> ( SZ_SG_REQ_INFO *,1
301,"<S2SV_ModStart> ; # endif install_keyword ( ""umask"", & umask_handler ) ;",1
302,<S2SV_ModStart> ( ctx ) { ( void ) ;,0
303,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> kfree ( tmpbuf,1
304,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; }",1
305,<S2SV_ModStart> len = 0 <S2SV_ModEnd> ; box -> <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } if,0
306,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> * new_size ; size_t <S2SV_ModEnd> new_size = malloc",0
307,<S2SV_ModStart> ; int copylen = 0 <S2SV_ModStart> goto err ; err = - EMSGSIZE ; if ( count > MAX_SKB_FRAGS ) goto err ;,0
308,<S2SV_ModStart> ( struct ipv6hdr <S2SV_ModEnd> ) ; unsigned <S2SV_ModStart> offset ) ; if ( offset < sizeof ( struct ipv6_opt_hdr ) ) return - EINVAL <S2SV_ModEnd> ; * <S2SV_ModStart> offset ) ; } return offset <S2SV_ModEnd> ; } <S2SV_null>,0
309,"<S2SV_ModStart> void vpx_wb_write_bit_buffer ( struct vpx_wb_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; } vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
310,"<S2SV_ModStart>, mbmi_ref_frame <S2SV_ModEnd> ) ; }",0
311,<S2SV_ModStart> out_free ; } msg -> msg_namelen = 0 ;,0
312,<S2SV_ModStart> } if ( <S2SV_ModEnd> djrcv_dev -> paired_dj_devices,1
313,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
314,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
315,<S2SV_ModStart> asconf ) { sctp_addip_chunk_t * addip = sctp_addip_chunk_t * addip ; <S2SV_ModStart> sctp_hdr ; sctp_addip = false ; sctp_addip_chunk_t * addip = sctp_addip_chunk_hdr <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( sctp_params param. addip ) { if ( param. addip_hdr. p -> type == SCTP_PARAM_IPV4_ADDRESS || param. p -> type == SCTP_PARAM_IPV4_ADDRESS || param. addip_code == SCTP_PARAM_PARAM_IPV4_ADDRESS ) { if ( param. p -> type == SCTP_PARAM_IPV4_IPV6_ADDRESS || param. p -> type == SCTP_IPV4_IPV4_ADDRESS || param. p -> type == SCTP_IPV4IPV4_IPV6_ERROR ) { if ( err_code == SCTP,0
316,"<S2SV_ModStart> 101, ( ""jas_realloc(%x, <S2SV_blank> %zu)\\n"" <S2SV_ModEnd>, ptr,",1
317,<S2SV_ModStart> exit ; } m -> msg_namelen = 0 ;,0
318,<S2SV_ModStart> CPU_FTR_TM_COMP ) && hv_enabled <S2SV_ModEnd> ; break ;,1
319,<S2SV_ModStart> dev ) ; if (! <S2SV_ModEnd> ( dev ),0
320,"<S2SV_ModStart> key_name ), UTF16_HOST_ENDIAN, <S2SV_ModStart> data. value, HV_KVP_EXCHANGE_MAX_SIZE / 2",0
321,<S2SV_ModStart> -> private_data ; <S2SV_ModEnd> if ( d,0
322,<S2SV_ModStart> return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
323,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> return - ENOMEM ; int n = _IOC_WRITE ; if ( _IOC_SIZE ( cmd ) == - ENOMEM ) { err = - ENOMEM ; goto out ; } if ( _IOC_SIZE ( cmd ) == NULL ) { memset ( & _IOC_WRITE, GFP_KERNEL, GFP_KERNEL, GFP_KERNEL, GFP_KERNEL ) ; if ( cmd ) goto out ; } if (! _IOC_DIR ( cmd ) ) return - ENOMEM ; memset ( parg, 0, _IOC_SIZE ( cmd ) ) ; if ( _IOC_DIR ( cmd ) == NULL ) { memset ( parg, 0, GFP_KERNEL ) ; if ( _IOC_KERNEL ) { err = - ENOMEM ; } else { memset ( parg, ( cmd ) ; if ( parg = NULL ) goto out ; } } memset ( parg, 0, _IOC_",0
324,<S2SV_ModStart> else if ( c -> mode == NULL ) return (,0
325,"<S2SV_ModStart> data ) { void * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM ; ret = <S2SV_ModEnd> usb_control_msg ( dev <S2SV_ModStart>, 0, buf <S2SV_ModEnd>, size, <S2SV_ModStart> 500 ) ; kfree ( buf ) ; return ret ;",0
326,"<S2SV_ModStart> return - EINTERVAL ; if ( get_desc -> bNumEndpoints < 1 ) { dev_err ( & gf -> dev, ""%s: <S2SV_blank> interface <S2SV_blank> interface <S2SV_blank> %d\\n"", __func__, GFP_KERNEL ) ; goto fail3 ; } if (",0
327,"<S2SV_ModStart> ) { case GTK_RESPONSE_OK : { file = nautilus_file_get_location ( parameters -> file ) ; nautilus_file_set_metadata ( parameters -> file, NAUTILUS_METADATA_KEY_DESKTOP_FILE_TRUSTED, NULL, NULL, ""yes"" ) ; nautilus_file_get_metadata ( parameters -> file, parameters -> file, NULL, NAUTILUS_METADATA_KEY_DESKTOP_DESKTOP_FILE_TRUSTED, NULL, NULL, NULL ) ; nautilus_file_file_attributes ( parameters -> file ) ; <S2SV_ModEnd> if ( file",0
328,<S2SV_ModStart> ; if ( urb -> actual_length > 0 &&,1
329,"<S2SV_ModStart> * server, <S2SV_ModEnd> struct cifsSV_null> <S2SV_null> static <S2SV_ModStart> S2SV_null> <S2SV_null> <S2SV_null> static",0
330,"<S2SV_ModStart> ; if ( cfg -> g_w && ( cfg -> g_w, cfg -> g_w, cfg -> g_w, cfg -> g_w, cfg -> g_w, cfg -> g_w, cfg -> g_w, ctx -> g_w, cfg -> g_w, cfg -> g_w, ctx -> g_w, cfg -> g_w, cfg -> g_w <S2SV_ModEnd> ) ) ; <S2SV_ModStart> } else if ( ( ( cfg -> g_w!= ( cfg -> g_w, cfg -> g_w, cfg -> g_w, cfg -> g_w, cfg -> g_w, cfg -> g_w, cfg -> g_w <S2SV_ModEnd> ) ) ==",0
331,<S2SV_ModStart> offset ) { <S2SV_ModStart> ) ) ; } else { <S2SV_ModStart> offset ) ; },0
332,"<S2SV_ModStart> inode ) ; struct hugepage_subpool * spool = subpool_inode ( inode ) ; <S2SV_ModStart> ; if ( hugepage_subpool_get_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> 0 ) { hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg )",1
333,<S2SV_ModStart> key * keyring ; if ( new -> thread_keyring ) return 0,1
334,<S2SV_ModStart> ; if ( <S2SV_ModEnd> size_t ) return,0
335,"<S2SV_ModStart> orig ) ; fptr_orig = io_get_open_fptr ( mrb, orig ) ; <S2SV_ModStart> mrb_io_alloc ( mrb <S2SV_ModEnd> ) ; DATA_TYPE",1
336,<S2SV_ModStart> ; if ( <S2SV_ModEnd> key. r,0
337,<S2SV_ModStart> cpi ) { const VP9_COMMON * cpi <S2SV_ModEnd> = cpi -> <S2SV_ModStart> -> common ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. pass == 2 ) { cpi -> oxcf. pass = cpi -> oxcf. mb_mode == 0 ; cpi -> oxcf. cpi -> oxcf. mb_mode = cpi -> oxcf. rc -> = cpi -> oxcf. oxcf. rc ; },0
338,"<S2SV_ModStart> return res ; res = utee_param_to_param ( utc, <S2SV_ModEnd> param, callee_params <S2SV_ModStart>, callee_params ) ; if ( res!= TEE_SUCCESS ) return res",1
339,"<S2SV_ModStart> int rc ; struct desc_struct old_desc, new_desc ; const struct x86_emulate_ops * ops = ctxt -> ops ; struct x86_emulate_ops * ops = ctxt -> ops -> cpl ( ctxt ) ; if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) ops -> get_segment ( ctxt, & old_cs, & old_desc, NULL, VCPU_SREG_CS ) <S2SV_ModStart> ; rc = __load_segment_descriptor <S2SV_ModEnd> ( ctxt, <S2SV_ModStart> sel, VCPU_SREG_CS, VCPU_SREG_CS, & new_desc ) ; if ( rc!= X86EMUL_CONTINUE ) return X86EMUL_CONTINUE <S2SV_ModEnd> ; rc = <S2SV_ModStart> return X86EMUL_CONTINUE ; rc = assign_eip_far ( ctxt, ctxt -> src. val, new_desc. l ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; ops -> set_segment ( ctxt, & old_cs, & old_desc ) ; if ( rc!= X86EM",0
340,<S2SV_ModStart> -> band = av_calloc <S2SV_ModEnd> ( reslevel -> <S2SV_ModStart> -> prec = av_calloc <S2SV_ModEnd> ( reslevel ->,1
341,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
342,<S2SV_ModStart> ; uint32_t size ; if ( <S2SV_ModStart> obj ) ) return - 1,0
343,<S2SV_ModStart> info. si_code!= si_code <S2SV_ModEnd> ) return -,0
344,,0
345,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * p <S2SV_ModStart> char * fname <S2SV_ModEnd> ) { int <S2SV_ModStart> { if ( ( * fname == '\\\\' ) ) { <S2SV_ModEnd> char * p <S2SV_ModStart> ) ) { <S2SV_ModEnd> char * p <S2SV_ModStart> ) ) { if ( out <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ) ; } return out <S2SV_ModEnd> ; } <S2SV_null>,0
346,<S2SV_ModStart> classes = NULL ; zval * retval <S2SV_ModStart> ; } } retval = var_tmp_var ( & var_var ) ; <S2SV_ModStart> return retval ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> RETURN_FALSE ; },0
347,<S2SV_ModStart> goto __err ; tu -> qtail = tu -> qtail = 0 ;,0
348,<S2SV_ModStart> ) ) ; if (! zfound ) { zfound = GF_ISOM_INVALID_FILE ; break ; } <S2SV_ModStart> ++ ; } if (! zfound ) return GF_ISOM_INVALID_FILE ;,0
349,<S2SV_ModStart>. get_alg_priv ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },0
350,"<S2SV_ModStart> == 0 ) if ( received_protocol ) { fprintf ( stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; } else",0
351,<S2SV_ModStart> info. si_code!= si_code <S2SV_ModEnd> ) return -,0
352,"<S2SV_ModStart> -> off = strtoull <S2SV_ModEnd> ( p, <S2SV_ModStart> -> filesize = strtoull <S2SV_ModEnd> ( slash +",1
353,"<S2SV_ModStart> * cr ; size_t <S2SV_ModEnd> maxw, maxh <S2SV_ModStart> maxh = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> maxh = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> goto fails ; offx = ( size_t ) img -> comps [ 0 ]. w ; offx = img -> comps [ 0 ]. w = img -> comps [ 1 ]. w ; cr = img -> comps [ 0 ]. w = ( size_t ) img -> comps [ 0 ]. r = img -> comps [ 0 ]. w ; d1 = img -> comps [ 0 ]. w = img -> comps [ 0 ]. data ; d2 = img -> comps [ 1 ]. data ; d1 = img -> comps [ 1 ]. w = img -> comps [ 0 ]. w ; cr = img -> comps [ 1 ]. w ; loopmaxh = img -> comps [ 1 ]. w ; offx = img -> comps [ 0 ]. w = img -> comps",0
354,"<S2SV_ModStart> * state, fmode_t state, fmode_t state <S2SV_ModEnd> ) { int <S2SV_ModStart> ( state, fmode <S2SV_ModEnd> ) ; switch <S2SV_ModStart> { switch ( state <S2SV_ModEnd> ) { case <S2SV_ModStart> state -> state = fmode <S2SV_ModEnd> ; switch ( <S2SV_ModStart> state -> state <S2SV_ModEnd> ) ; } <S2SV_ModStart> state -> state = fmode <S2SV_ModEnd> ; } <S2SV_null>",0
355,"<S2SV_ModStart> return SSH_ERR_INVALID_ARGUMENT ; ssh_dispatch_set ( ssh, SSH2_MSG_KEXINIT, NULL ) ;",1
356,"<S2SV_ModStart> { assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> { <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
357,<S2SV_ModStart> read_info ) ; <S2SV_ModEnd> if ( EOFBlob,1
358,"<S2SV_ModStart> char lbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char strbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char ltest [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char strtest [ 512 <S2SV_ModEnd> ] ; if <S2SV_ModStart> ( ltest, ""%511[^\\r\\n]"" <S2SV_ModEnd>, strtest ) <S2SV_ModStart> ( ltest, ""%511[^\\r\\r\\n]"" <S2SV_ModEnd>, strtest ) <S2SV_ModStart> && ntest!= 511 <S2SV_ModEnd> ) ; if",0
359,<S2SV_ModStart> intf ) { <S2SV_ModEnd> if ( cdc_ncm_select_altsetting <S2SV_ModStart> - ENODEV ; return <S2SV_ModEnd> cdc_ncm_bind_common ( dev <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
360,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
361,<S2SV_ModStart> * xpc ; if (! <S2SV_ModEnd> ) return ;,0
362,"<S2SV_ModStart>, e -> elems, e ->",1
363,<S2SV_ModStart> bpp <= 8 && c -> format!= CHUNKY,0
364,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
365,<S2SV_ModStart> q ) { mutex_lock ( & q -> timer_mutex ) ; <S2SV_ModStart> snd_seq_timer_close ( q ) ; mutex_unlock ( & q -> timer_mutex,1
366,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int error <S2SV_ModEnd> ; int error <S2SV_ModStart> = 0 ; error = gfs2_inode_block_block ( inode ) ; error = gfs2_map_buffer ( struct bh_map ) ; error = gfs2_map_buffer ( inode, & bh_map ) ; if ( error ) goto error ; <S2SV_ModStart> = 0 ; error = gfs2_buffer_put ( inode ) ; error = gfs2_map. bh_map. bh_map. bh_map. bh_map. bh_map ) ; gfs2_map = gfs2_bind_buffer ( & bh, & bh -> i_map ) ; if ( error ) goto out ; error = gfs2_buffer_map. bh_map. bh_map. bh_map ) ; error = gfs2_block ( ip, bh_map. bh_map ) ; if ( error ) { error = gfs2_blks ( inode -> i_map. bh_map ) ; bh_map.",0
367,<S2SV_ModStart> VIPS_FOREIGN_LOAD_MAX ) { if ( load -> error ) return ( NULL ) ; <S2SV_ModStart> -> load ) ; if ( load -> error ) return ( NULL,0
368,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
369,<S2SV_ModStart> ; if (! retval ) <S2SV_ModEnd> retval = context,1
370,<S2SV_ModStart> state ) ; <S2SV_ModEnd> return ret ;,0
371,<S2SV_ModStart> miux_tlv_length ) ; if (! miux_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> rw_tlv_length ) ; if (! rw_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> miux_length ) ; if (! rw_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> rw_length ) ; if (! rw_tlv ) { err = - ENOMEM ; goto error_tlv ; },0
372,<S2SV_ModStart> bdcrypto_free ( void ) ; <S2SV_ModEnd> return NULL ;,0
373,<S2SV_ModStart> vpx_codec_alg_priv_t * ctx ; if ( flags & VPX_CODEC_IMG_FMT_T_HIGHBITDEPTH ) { if ( flags & VPX_CODEC_IMG_FMT_HIGHBITDEPTH ) { if ( flags & VPX_CODEC_IMG_FMT_HIGHBITDEPTH ) { if ( ctx -> flags & VPX_CODEC_IMG_F_HIGHBITDEPTH ) return - 1 ; } else { vpx_codec_free ( cfg_alg_priv_t ) ; },0
374,<S2SV_ModStart> char * ctx [ 0 ],0
375,"<S2SV_ModStart> ( interface, TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1 ) )",0
376,<S2SV_ModStart> inode -> ipv4 <S2SV_ModEnd> ) ; if,0
377,<S2SV_ModStart> len ; } ND_TCHECK_32BITS <S2SV_ModEnd> ( p + <S2SV_ModStart> p + 2 <S2SV_ModEnd> ) ; ND_PRINT,1
378,<S2SV_ModStart> 0 ; } if ( unlikely ( IPCB ( skb ) -> opt. optlen ) ) skb_dst_force ( skb ) ; else,1
379,<S2SV_ModStart> private ) { struct skcipher_tfm * tfm = private ; crypto_free_skcipher ( tfm -> skcipher ) ; kfree ( tfm <S2SV_ModEnd> ) ; },1
380,<S2SV_ModStart> bprm ) { <S2SV_ModEnd> int retval ; <S2SV_ModStart> int retval ; bprm_fill_uid ( bprm ) ; <S2SV_ModEnd> retval = security_bprm_set_creds,1
381,<S2SV_ModStart> ; if ( <S2SV_ModEnd> count > 0,0
382,<S2SV_ModStart> ; dlen -= 3 <S2SV_ModEnd> ; for (,0
383,<S2SV_ModStart> { rq = tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; fn (,1
384,<S2SV_ModStart> ; if ( cfg_get_alg_priv ( cfg ) <S2SV_ModEnd> ) return 0,0
385,<S2SV_ModStart> - EOPNOTSUPP ; msg -> msg_namelen = 0 ; <S2SV_ModStart> goto out ; <S2SV_ModEnd> if ( msg,0
386,<S2SV_ModStart> ; if ( skb -> len < sizeof ( struct nla_data ) return 0 ; if (,0
387,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; return",0
388,"<S2SV_ModStart> bp, len ) ; break ; case ETHERTYPE_TEB : ether_print ( ndo, bp, len <S2SV_ModStart> ndo_snapend - bp <S2SV_ModEnd>, NULL,",1
389,"<S2SV_ModStart> ; } } if ( tile_buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> overflow <S2SV_blank> buffer <S2SV_blank> size"" ) ; exit ( - 1 ) ; } <S2SV_ModStart> 0 ) ; }",0
390,<S2SV_ModStart> O_APPEND | O_CREAT | O_NOFOLLOW,1
391,<S2SV_ModStart> 0 ] ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
392,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart> -> nd_num ) { ret = <S2SV_ModEnd> - EBUSY ; <S2SV_ModStart> - EBUSY ; goto out ; } <S2SV_ModStart> - EBUSY ; o2nm_unlock_subsystem ( ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>,0
393,"<S2SV_ModStart> 0 ) { if ( fp [ L_BUFSIZE ] == 0 ) { return ERR_PRINT ( "" <S2SV_blank> <S2SV_blank> <S2SV_blank> \\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\n"" ) ; return ERR_PTRACTED ; } <S2SV_ModStart> ( pf ) <S2SV_ModEnd> ; } return",0
394,<S2SV_ModStart> NULL ) { if ( len < 0 ) { return - 1 ; },0
395,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
396,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
397,<S2SV_ModStart> return - E_NOTHANDLED ; if ( ninst == 0 ) return - E_INVALID,1
398,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
399,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
400,"<S2SV_ModStart> return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> p + offset <S2SV_ModEnd>, tim.",0
401,"<S2SV_ModStart> 1 ) ; if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf = opipe",0
402,<S2SV_ModStart> ( ) ; if (! tbuf ) { return NULL ; },1
403,"<S2SV_ModStart> = INT_MAX ; memset ( & old_fs, 0, sizeof ( r ) ) ;",0
404,"<S2SV_ModStart> -> memcpy <S2SV_ModEnd>, NULL, <S2SV_ModStart> return NULL ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
405,<S2SV_ModStart> ; if ( pid == NULL ) { if (,0
406,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nsc_encode ( NSC_CONTEXT <S2SV_ModStart> rowstride ) { if (! context ||! bmpdata || ( rowstride == 0 ) ) return FALSE ; if (! <S2SV_ModStart>, rowstride ) ) return FALSE <S2SV_ModStart> ChromaSubsamplingLevel ) { if (! <S2SV_ModStart> ( context ) ) return FALSE ; } return TRUE ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
407,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
408,<S2SV_ModStart> stringset == ETH_SS_STATS || stringset == ETH_SS_PRIV_FLAGS,1
409,<S2SV_ModStart> return ( ( ( <S2SV_ModStart> ) / 8 ) * GetPSDPacketSize ( image ),1
410,<S2SV_ModStart> } if ( p_id >= 32 ) { dev_err = - 1 ; return FALSE ; } if (,0
411,<S2SV_ModStart> bMasterInterface0 ) ; if (! pcu -> data_intf ) return - EINVAL ;,0
412,"<S2SV_ModStart> const char * devname = kstrdup ( dev_name ( & <S2SV_ModEnd> d -> udev <S2SV_ModStart> udev -> dev ), GFP_KERNEL ) ; const char * drvname = d -> name <S2SV_ModEnd> ; const char <S2SV_ModStart> ) ; } kfree ( d ) ;",0
413,"<S2SV_ModStart> pirlvl ) { if ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 || pirlvl -> prcheightexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 ) { return - 1 ; } <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> ) % ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << rpx ) <S2SV_ModStart> ) % ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << rpy )",1
414,<S2SV_ModStart> target_enc ) { return ONIGERR_NOT_SUPPORTED_ENCODING_COMBINATION <S2SV_ModEnd> ; } else,1
415,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static MagickBooleanType <S2SV_ModEnd> InsertRow ( ssize_t <S2SV_ModStart> exception ) { SetPixelChannels ( image, image, image -> columns, image -> colormap ) ; if ( status == MagickFalse ) { SetPixelChannels ( ssize_t ) ; switch ( ssize_t ) { case ( ssize_t ) index = ( image -> columns, image -> columns ) ; if ( ssize_t ) index == MagickFalse ) return ( <S2SV_ModStart> index ) ; ssize_t bit <S2SV_ModEnd> ( ssize_t ) <S2SV_ModStart> ; ssize_t bit <S2SV_ModEnd> ( ssize_t ) <S2SV_ModStart> bit ) index = ( <S2SV_ModEnd> ( ssize_t ) <S2SV_ModStart> bit <S2SV_ModEnd> ( ssize_t ) <S2SV_ModStart> ; if ( index < ( ssize_t ) index <S2SV_ModEnd> ( ssize_t ) <S2SV_ModStart> bit < ( ssize_t ) index",0
416,"<S2SV_ModStart> u_char * tptr, const u_int length ) { if ( length == NULL ) { ND_PRINT ( ( ndo, ""(invalid <S2SV_blank> type <S2SV_blank> %u)"", length ) ) ; hexdump = TRUE ; break ; } <S2SV_ModStart> case AFNUM_INET6 : if ( length!= 1 ) { ND_PRINT ( ( ndo, ""(invalid <S2SV_blank> IPv4 <S2SV_blank> address <S2SV_blank> %u)"", length - 1 ) ) ; hexdump = TRUE ; break ; }",0
417,"<S2SV_ModStart> * ctxt, rcx, rdx <S2SV_ModStart> = X86EMUL_MODE_PROT64 ; rcx = reg_read ( rdx ) ; <S2SV_ModStart> = X86EMUL_CONTINUE ; rdx = reg_read ( ctxt, VCPU_REGS_RDX ) ; if ( rcx!= X86EMUL_MODE_PROT64 ) return X86EMUL_CONTINUE ; <S2SV_ModStart> = X86EMUL_CONTINUE ; <S2SV_ModEnd> return X86EMUL_CONTINUE ;",0
418,<S2SV_ModStart> dev ) ; ssize_t len ; device_lock ( dev ) ; len = <S2SV_ModEnd> sprintf ( buf <S2SV_ModStart> driver_override ) ; device_unlock ( dev ) ; return len ;,1
419,"<S2SV_ModStart> BIO * tmpout ; tmpout = BIO_get_text_size ( tmpout, flags ) ; if (! tmpout ) { CMSerr ( CMS_F_FAILURE ) ; goto err ; } <S2SV_ModEnd> if (!",0
420,<S2SV_ModStart> = KRB5_PREAUTH_FAILED ; if ( retval == 0 ) rs. enc_tkt_reply -> flags |= TKT_FLG_PRE_AUTH ;,1
421,"<S2SV_ModStart> void vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> * probs ) <S2SV_ModStart> int i ; vpx_prob <S2SV_ModEnd> * probs =",0
422,"<S2SV_ModStart> = ""/tmp"" ; # ifdef HAVE_MKDTEMP tmp_dir = mkdtemp ( Strnew_m_charp ( tmp_dir, ""/w3m-XXXXXX"", NULL ) -> ptr ) ; if ( tmp_dir == NULL ) tmp_dir = rc_dir ; # endif",1
423,"<S2SV_ModStart> = 0 ; size_t pathlen = 0 ; <S2SV_ModStart> ( pathlen, pathlen <S2SV_ModEnd> ) ; if",0
424,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output,",0
425,<S2SV_ModStart> return ret ; if ( len < 2 ) goto out ;,0
426,"<S2SV_ModStart> ) { struct hugepage_subpool * spool = subpool_vma ( vma ) ; struct <S2SV_ModStart> page * page <S2SV_ModEnd> ; long chg <S2SV_ModStart> ) if ( hugepage_subpool_get_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> page ) { hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> unsigned long ) spool <S2SV_ModEnd> ) ; vma_commit_reservation",1
427,"<S2SV_ModStart> filegen_string ) ; if ( NULL == filegen ) { msyslog ( LOG_ERR, ""stats <S2SV_blank> %s <S2SV_blank> unrecognized"", filegen_string ) ; continue ; } if (",0
428,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; timer_set_state",1
429,"<S2SV_ModStart> * input, tran_low_t x1, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> * input, tran_high_t x0, x0, tran_high_t <S2SV_ModEnd> * input, <S2SV_ModStart> 4 ] ; tran_high_t <S2SV_ModEnd> x0, x <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> 4 ] = ( tran_low_t ) input, tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 5 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 5 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] =",0
430,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return 0 ;,0
431,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
432,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF <S2SV_ModStart> wc ) ; return,1
433,"<S2SV_ModStart> tot_len ) ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
434,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> AVINDEX_KEYFRAME ) ; },1
435,"<S2SV_ModStart>, 1 << 24 <S2SV_ModEnd> ) ) {",0
436,"<S2SV_ModStart>, * controller, * next = NULL <S2SV_ModStart> if (! caller_is_in_ancestor ( fc -> pid, controller, & next ) ) { ret = - ENOENT ; goto out ; } if (! <S2SV_ModStart> cgoto out ; free ( fc ) ;",0
437,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flag & CL_UNPRIVILEGED <S2SV_ModStart> ; if ( unlikely (,0
438,<S2SV_ModStart> rds_loop_transport ; } <S2SV_ModEnd> } conn ->,1
439,<S2SV_ModStart> * rsize >= 112 <S2SV_ModEnd> && rdesc [,1
440,<S2SV_ModStart> if ( ( ( <S2SV_ModStart> ) < bodyLength ) || ( bodyLength < sizeof ( EAPOL_RSN_KEY ) ),1
441,<S2SV_ModStart> ( likely ( serio <S2SV_ModEnd> &&! filtered,1
442,"<S2SV_ModStart>! er ) { ND_TCHECK ( <S2SV_ModEnd> dp [ 0 <S2SV_ModStart> 0 ] ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> c <S2SV_blank> %04x"", EXTRACT_32BITS ( & dp [ 0 ] ) ) ) ; } <S2SV_ModEnd> return ; case",1
443,"<S2SV_ModStart> * newName, int newLen, <S2SV_ModStart> * newLen, int newLen = newLen - CRC_LEN <S2SV_ModEnd> ) newName [ <S2SV_ModStart> } newLen = newLen - CRC_LEN <S2SV_ModEnd> ; newLen =",0
444,"<S2SV_ModStart> void vp9_segment_segs ( VP9_COMMON * * cm, MACROBLOCKD * * * xd <S2SV_ModEnd>, int * <S2SV_ModStart> BLOCK_SIZE bs ) { <S2SV_ModEnd> struct mi_segment_id * <S2SV_ModStart> mi_segment_id = mi <S2SV_ModEnd> ; MACROBLOCK_SIZE bsize ; <S2SV_ModStart> { vp9_segment_segment_id = get_segment_seg_segment_segment_id <S2SV_ModEnd> ( bs, <S2SV_ModStart>, mi_segment_id, <S2SV_ModEnd>, bsize, <S2SV_ModStart> ) ) ; vp9_seg_seg_seg_segment_id = get_segment_segment_id <S2SV_ModEnd> ( bs, <S2SV_ModStart> ) ; }",0
445,<S2SV_ModStart> 0 ) { if ( c -> next == 0 ) continue ;,0
446,<S2SV_ModStart> ; if ( memset <S2SV_ModEnd> ( mp ->,0
447,"<S2SV_ModStart> * s ; const unsigned char * p = sigbuf ; unsigned char * der = NULL ; int derlen = - 1 ; <S2SV_ModStart> s, & p <S2SV_ModEnd>, siglen ) <S2SV_ModStart> == NULL ) goto err ; derlen = i2d_SV_null> <S2SV_null>",0
448,"<S2SV_ModStart> NULL ) ; if (! _gdImageWBMPCtx <S2SV_ModEnd> ( im, <S2SV_ModStart>, out ) ) { <S2SV_ModEnd> rv = gdDPExtractData <S2SV_ModStart> size ) ; } else { rv = NULL ; }",0
449,<S2SV_ModStart> ) ; } if ( bprm -> interp!= bprm -> filename ) kfree ( bprm -> interp ) ;,1
450,"<S2SV_ModStart> ; int oe_sockaddr = 0 ; oe_socklen_addr = 0 ; oe_sock ( oe_addr, & oe_addr ) ; <S2SV_ModStart> return - EINVAL <S2SV_ModEnd> ; oe_sockaddr = oe_sockaddr_lookup <S2SV_ModStart> ; if ( oe_sockaddr && memcmp ( & oe_addr, & oe_addr, sizeof ( struct oe_addr_inode ) ) { if ( oe_sockaddr_en == 0 ) { ret = - EINVAL ; } if ( oe_sockaddr ( oe, & oe_sockaddr_lookup ) { ret = - EINVAL ; goto out ; } oe_RAISE_ERRNO ( oe, & oe_E_ERRNO ) ; } if ( oe_E_EINVAL ) goto out ;",0
451,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
452,"<S2SV_ModStart> ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, ""Invalid <S2SV_blank> image <S2SV_blank> dimensions"" ) ; goto done ; }",1
453,<S2SV_ModStart> px_prob ) { memcpy <S2SV_ModEnd> ( c ->,0
454,"<S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
455,<S2SV_ModStart> p ) { return false <S2SV_ModEnd> ; } } if,0
456,<S2SV_ModStart> destroy_list ) ; <S2SV_ModEnd> } } <S2SV_null>,1
457,"<S2SV_ModStart> int mode ; vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ; # if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> data == 0 ) { vpx_write_bit_buffer ( ctx, AV_CODING ) ; # endif <S2SV_ModStart> ) ; } # if CONFIG_VP9_HIGHBITS2SV_null> <S2SV_null>",0
458,<S2SV_ModStart> ) ; } fuse_conn_put ( & cc -> fc ) ;,1
459,"<S2SV_ModStart> ( code ) { * status = ""DECODE_PA_S4U_X509_USER"" ; return code ; } <S2SV_ModEnd> code = verify_s4u_x509_user_checksum",1
460,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
461,<S2SV_ModStart> cur_pic. field_picture <S2SV_ModEnd> ) return 0,1
462,<S2SV_ModStart> off ) { int ret = goto out <S2SV_ModEnd> ; } struct <S2SV_ModStart> 0 ) { goto out <S2SV_ModEnd> ; } <S2SV_null> <S2SV_ModStart> 0 ) { return ret <S2SV_ModEnd> ; } <S2SV_null>,0
463,<S2SV_ModStart> buf ) ) { return 0 ; } <S2SV_ModEnd> ext_block = (,1
464,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = key_permission,1
465,<S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; },0
466,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
467,"<S2SV_ModStart> = hmi_data ; uint32_t data_siz ; <S2SV_ModStart> ; if ( hmi_track_offset [ i ] >= hmi_track_size ) { _WM_GLOBAL_ERROR ( __FUNCTION__, WM_ERR_NOT_HMI, __FUNCTION__, WM_ERR_NOT_HMI, ""file <S2SV_blank> too <S2SV_blank> short"" ) ; goto _hmi_end ; } hmi_offset = hmi_track_offset [ i ] ; <S2SV_ModStart> += 4 ; if ( hmi_data [ i ]!= 0 ) { _WM_GLOBAL_GLOBAL_ERROR ( __FUNCTION__, __FUNCTION__, WM_ERR_ERR_NOT_HMI, ""file <S2SV_blank> too <S2SV_blank> short"", 0 ) ; goto _hmi_end ; } data_siz = hmi_track_offset ; } else { _WM_GLOBAL_GLOBAL_ERROR ( __FUNCTION__, WM_ERR_NOT_HMI, hmi_HMI, __FUNCTION__, WM_ERR_NOT_HMI, hmi_",0
468,<S2SV_ModStart> -> id ; haddr -> hci_channel = 0 ;,1
469,<S2SV_ModStart> -> i_iget5_offset ; fh16 [ 3 ] = 0 ;,1
470,"<S2SV_ModStart> ( kdc_active_realm, client. princ <S2SV_ModEnd>, request ->",1
471,<S2SV_ModStart> break ; } <S2SV_ModEnd> dst_reg -> smin_value <S2SV_ModStart> = S64_MAX ; <S2SV_ModEnd> if ( src_known,1
472,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> } else { const VP9_COMMON_TARGET_BITDEPTH if ( cpi -> oxcf. bit_depth > 0 && cm -> bit_depth > 1 ) { return AVERROR_IN_IN_INVALIDDATA ; } <S2SV_ModStart> ; } } else if (,0
473,"<S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> b ), 0 )",0
474,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
475,"<S2SV_ModStart> = getnum ( <S2SV_ModEnd> fmt, MAXALIGN",0
476,<S2SV_ModStart> void usage_exit ( void,1
477,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
478,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
479,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
480,<S2SV_ModStart> data ) { <S2SV_ModEnd> return ( data,0
481,<S2SV_ModStart> ; if ( * value == 0 ||,1
482,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int i_sb (,0
483,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
484,"<S2SV_ModStart> ; if ( snpal == NULL ) ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> SNPA <S2SV_blank> (length: <S2SV_blank> %u): <S2SV_blank> %u)"", snpal, linkaddr_string ( snpal, snpal ) ) ) ; else ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> SNPA <S2SV_blank> (length: <S2SV_blank> %u): <S2SV_blank> %u): <S2SV_blank> ID: <S2SV_blank> %u)"", snpal, linkaddr_string ( snpal, linkaddr_string ( ndo, linkaddr_string ( ndo, snpal ) ) ) ) ; else ND_PRINT ( ( ndo, ""\\n\\n\\t <S2SV_blank> (length: <S2SV_blank> %u): <S2SV_blank> (length: <S2SV_blank> %u): <S2SV_blank> %u): <S2SV_blank> (length: <S2SV_blank> %u): <S2SV_blank> %u)"", linkaddr_string ( ndo, snpal, linkaddr_string ( ndo, snpal, snpal ) ) ) ) ; else ND_PRINT ( ( ndo, ""\\n\\n\\n\\n\\n\\t <S2SV_blank> ID: <S2SV_blank> %u\\n\\n\\n\\n\\n\\n\\n\\n",0
485,"<S2SV_ModStart> y ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> c"", <S2SV_ModStart> ) ) ; sendClean ( ) ;",0
486,<S2SV_ModStart> } else { return false ; } else if ( r -> CRn == 0 ) return false ; if (,0
487,<S2SV_ModStart> case IS_STRING : { zval dval ; dval = * * * tmp ; zval_copy_ctor ( & dval ) ; convert_to_double ( & dval <S2SV_ModEnd> ) ; convert_elem <S2SV_ModStart> i ] = Z_DVAL ( dval ) ; } <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( lval )!= IS_LONG ) { zval lval ; lval = * * * * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; } <S2SV_ModStart>. x = Z_DVAL ( lval ) ; } else { rect. y = <S2SV_ModStart> ) ; } } <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( lval )!= IS_LONG ) { zval lval ; lval = * * * * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; rect <S2SV_ModStart>. y = Z_LVAL ( lval ) ; } <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP,0
488,<S2SV_ModStart> void * obj <S2SV_ModEnd> ; if (,0
489,<S2SV_ModStart> SQL_DROP ) ; <S2SV_ModEnd> return 0 ;,1
490,"<S2SV_ModStart> ; r = __copy_from_user <S2SV_ModEnd> ( data,",1
491,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart>,0
492,<S2SV_ModStart> = 0 ; info -> port = NULL ;,1
493,<S2SV_ModStart> -> ctx. <S2SV_ModEnd> pmu = pmu,1
494,"<S2SV_ModStart> iovec * iovec, struct iovec * iter",0
495,<S2SV_ModStart> ext4_group_t flex_group ; unsigned <S2SV_ModStart> -> s_log_groups_per_flex ; if ( sbi -> s_log_groups_per_flex < 1 || sbi -> s_log_groups_per_flex < 1 ) { sbi -> s_log_groups_per_flex = 1 ; return 1 ; } <S2SV_ModStart> -> s_log_groups_per_flex ; <S2SV_ModEnd> flex_group_count = (,0
496,<S2SV_ModStart> ( unlikely ( chunk -> pdiscard ) ) return 0 ; if ( unlikely (,1
497,,0
498,"<S2SV_ModStart> { if ( * parv [ 1 ] =='<S2SV_blank>'|| strchr ( cptr, sptr, sptr ) ) return exit_client ( cptr, sptr, sptr, ""Malformed <S2SV_blank> AUTHENTICATE"" ) ; if (",0
499,<S2SV_ModStart> <= w - ( int ),1
500,<S2SV_ModStart> callback_args -> forward_matches ; assert ( match_offset + match_length <= callback_args -> data_size ),1
501,<S2SV_ModStart> options. disable_forwarding && use_privsep,1
502,"<S2SV_ModStart> { if ( length > SMKTREE_DECODE_MAX_RECURSION ) { av_log ( NULL, AV_LOG_ERROR, ""Maximum <S2SV_blank> tree <S2SV_blank> recursion <S2SV_blank> level <S2SV_blank> exceeded.\\n"" ) ; return AVERROR_INVALIDDATA ; } if (",1
503,<S2SV_ModStart> err ; } if ( m -> msg_name ),1
504,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_args, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> expr"" ) ; return 1 ; } else <S2SV_ModEnd> { int res <S2SV_ModStart> obj_asdl_seq_ignores <S2SV_ModEnd> ; res = <S2SV_ModStart> ) ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> tmp"" ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> field <S2SV_blank> \\"" ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> field <S2SV_blank> \\"" <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" ) ; return 1 ;",0
505,<S2SV_ModStart> m ; int hstartrow <S2SV_ModEnd> ; if ( <S2SV_ModStart> 2 ) { hstartrow <S2SV_ModEnd> = ( numrows <S2SV_ModStart> = numrows - hstartrow <S2SV_ModEnd> ; n = <S2SV_ModStart> & a [ hstartrow <S2SV_ModEnd> * stride ],1
506,"<S2SV_ModStart> ""REPLY_ADD_STA <S2SV_blank> PASSED\\n"" ) ; ret = iwl_sta_ucode_activate ( priv, sta_id ) <S2SV_ModEnd> ; break ;",1
507,"<S2SV_ModStart> ; log_file = fopen_safe <S2SV_ModEnd> ( file_name,",1
508,"<S2SV_ModStart> ""a\\0x\\0x\\0x\\0"" ) ; assert_true_rule_blob ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /\\\\babc/\\\\x"" ) ; assert_true_rule_blob ( ""\\\\b\\0"" ) ;",0
509,"<S2SV_ModStart> & HB_LOCK ) spin_lock_irqsave ( & hashbin -> hb_spinlock, flags ) ; <S2SV_ModStart> & HB_LOCK ) { if ( free_func ) spin_unlock_irqrestore ( & hashbin -> hb_spinlock ) ; <S2SV_ModStart> & HB_LOCK ) spin_unlock_irqrestore ( & hashbin -> hb_spinlock, flags ) ; if ( hashbin -> hb_type & HB_LOCK ) spin_irqrestore ( & HB_LOCK ) spin_unlock_irqrestore ( & hashbin -> hb_spinlock, hashbin -> hb_spinlock, <S2SV_ModEnd> ) ; }",0
510,<S2SV_ModStart> ; if (! ( mnt -> mnt. mnt_flags & MNT_LOCK_NODEV ) ) { return - EPERM ; } if ( mnt -> mnt. mnt_flags & MNT_NOEXEC ) { return - EPERM ; } if ( mnt -> mnt. mnt_flags & MNT_LOCK_NODEV ) { return - EPERM ; } if ( mnt -> mnt. mnt_flags & MNT_LOCK_NODEV ) { return - EPERM ; } if ( mnt_flags & MNT_NOEXEC ) { return - EPERM ; } if ( mnt -> mnt. mnt_flags & MNT_NOEXEC ) { return - EPERM ; } if ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) { return - EPERM ; } },0
511,<S2SV_ModStart> msg -> msg_namelen ; struct sock * msg_namelen = 0 ; <S2SV_ModStart> msg -> msg_namelen ) { <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> msg -> msg_namelen = sizeof ( sll ) ; } copied = len ; <S2SV_ModStart> msg -> msg_namelen ) ; if ( err ) goto out_free ;,0
512,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
513,"<S2SV_ModStart> ( serial -> num_bulk_out <S2SV_ModEnd> < 2 ) <S2SV_ModStart> < 2 ) { dev_err ( & serial -> interface -> dev, ""missing <S2SV_blank> bulk <S2SV_blank> out <S2SV_blank> endpoints\\n"" ) ; return - ENODEV ; } <S2SV_ModEnd> port = serial",1
514,"<S2SV_ModStart> write_junk * cs64_chunk = 0, CS64Chunk ds64_chunk ds64_chunk * sizeof ( CS64_chunk ) ) <S2SV_ModStart> ; DS64Chunk = CS64Chunk * table_chunk * sizeof ( CS64Chunk ), CS64_riff_riff_chunk * sizeof ( CS64Chunk ), table_length * sizeof ( CS64Chunk ) ) <S2SV_ModStart> total_bytes ) ; cs64_chunk = CS64_chunk * sizeof ( CS64_chunk ) ; total_riff_riff_bytes = table_bytes * sizeof ( CS64_chunk ) ) ; if ( cs64_chunk. ckID64_riff_bytes ) { error_line ( CS64Chunk * sizeof ( CS64Chunk ), CS64Chunk ) ; cs64_chunk. ckID = CS64_chunk * sizeof ( CS64Chunk ) ; cs64_chunk. total_bytes = table_length * sizeof ( CS64_chunk ) ; } if ( cs64_chunk. ckID64_riff_",0
515,"<S2SV_ModStart> -> name ; <S2SV_ModEnd> if ( msg_namelen <S2SV_ModStart> -> name, msg_name, sizeof ( struct user_sys ) ) <S2SV_ModStart> ( msg_sys ) <S2SV_ModEnd> ; err = <S2SV_ModStart> out ; <S2SV_ModEnd> } if (",0
516,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ] ; int bhdr ; unsigned int bhdr ; <S2SV_ModStart> -> bhdr ; unsigned int i_offset ; unsigned int bhdr = 0 ; <S2SV_ModStart> ) ; if ( unlikely ( ip_bh -> bhdr ) ) return - EINVAL ;,0
517,<S2SV_ModStart> ; ) { <S2SV_ModEnd> return ; },0
518,<S2SV_ModStart> return FALSE ; { BOOL rc ; <S2SV_ModStart> -> prof_nsc_rle_decompress_data ) rc = <S2SV_ModStart> return FALSE ; } { BOOL rc ; },0
519,,0
520,"<S2SV_ModStart> ; if ( is_link ( fname ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank> %s <S2SV_blank> file\\n"", fname ) ; exit ( 1 ) ; } if ( <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> ; } } if ( is_link ( fname ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> invalid <S2SV_blank> file\\n"", fname ) ; exit ( 1 ) ; } if ( <S2SV_ModStart> ) ) { copy_file_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ; } } if ( is_link ( fname ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> invalid <S2SV_blank> file\\n"", fname ) ; exit ( 1 ) ; } if ( is_link ( fname ) == - 1 ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> invalid <S2SV_blank> %skel/.zshrc"", fname ) ; exit ( 1 ) ; } if ( fname ) { fprintf ( stderr",0
521,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> attrs_buffer ( struct <S2SV_ModStart> * ext4_attr_buffer <S2SV_ModEnd> * ext4_hdr, <S2SV_ModStart> * ext4_len = xdr_len ; unsigned char * xdr_len = NULL <S2SV_ModStart> ) return - EINVAL <S2SV_ModEnd> ; if ( <S2SV_ModStart> inode_buffer ) { if ( acl_len < AX2SV_null> <S2SV_null>",0
522,<S2SV_ModStart> f &&! sf -> sf <S2SV_ModEnd> ) return ;,0
523,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
524,<S2SV_ModStart> = timespec_to_ns ( & <S2SV_ModStart> = timespec_to_ns ( & <S2SV_ModStart> = timespec_to_ns ( &,1
525,"<S2SV_ModStart> { if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
526,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> static,0
527,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline int <S2SV_ModEnd> t_ranges [ <S2SV_ModStart> ] ; size_t content_length ; size_t <S2SV_ModEnd> len ; size_t <S2SV_ModStart> len ) { size_t content_len = & r -> range [ i ] ; <S2SV_ModStart> len = 0 ; size_t range = 0 ; <S2SV_ModStart> len - 1 ; size_t content_length = & r -> range [ i ] = & r -> range [ 0 ] ; <S2SV_ModStart> } else { range = & clt -> range [ i ] ; <S2SV_ModStart> len = & r -> range [ 0 ] ; size_t -> range [ i ] ; size_t -> range = & r -> range [ 0 ] = & r -> range [ 0 ] ; <S2SV_ModStart> if ( ( nranges [ 0 ], & clt -> range [ 0 ]. r -> range <S2SV_ModEnd> ) { error <S2SV_ModStart> } else { range = snprintf ( stderranges, ""%s: <S2SV_blank> %s\\n"", & clt <S2SV_blank> %s\\n"", clt -> range ) ) ; <S2SV_ModEnd> if ( nranges <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; }",0
528,"<S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_ISR_LCISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR_LCISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR_LCISR_LCIS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_IS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR_CTY <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR_MARK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> } if ( status & KSZ8851_ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_IS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_IS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR_CTY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_IER_IS <S2SV_ModEnd> ) ) & KSZ8851_IS <S2SV_ModEnd> ) ; <S2SV_ModStart> ( interface, KSZ8851_IS <S2SV_ModEnd> )",0
529,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
530,<S2SV_ModStart> bpp <= 8 && c -> format!= CHUNKY,0
531,"<S2SV_ModStart> ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
532,<S2SV_ModStart> tmp ) { goto softfail <S2SV_ModEnd> ; } case <S2SV_ModStart> ) ) { goto softfail <S2SV_ModEnd> ; } state <S2SV_ModStart> end ) ; softfail : state -> offset = 0 ;,1
533,"<S2SV_ModStart> struct fb_vblank vblank ; memset ( & vblank, 0, sizeof ( vblank ) )",1
534,<S2SV_ModStart> flags ) { spin_lock ( & ctx -> cancel_lock ) ; <S2SV_ModStart> } } else { __timerfd_remove_cancel <S2SV_ModEnd> ( ctx ) <S2SV_ModStart> ) ; } spin_unlock ( & ctx -> cancel_lock ) ;,1
535,"<S2SV_ModStart> ) ) ; if ( c16 -> Curves [ i ] == NULL ) { _cmsFree ( ContextID, c16 ) ; return NULL ; }",0
536,<S2SV_ModStart> { if (! dev_name ||,1
537,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
538,"<S2SV_ModStart> ) ) { if ( buf_size < sizeof ( * msg ) ) { return - EINVAL ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> memcpy_fromio ( buf <S2SV_ModStart>, buf, buf <S2SV_ModEnd>, bus -> <S2SV_ModStart> -> m_pdwGetRing + sizeof ( * msg ) - space_rem ) ; if ( msg ) memcpy_fromio ( buf <S2SV_ModEnd>, bus -> <S2SV_ModStart> -> m_pdwGetRing + space_rem, buf <S2SV_ModEnd>, bus -> <S2SV_ModStart> -> m_pdwGetRing, buf <S2SV_ModEnd> ) ; } <S2SV_ModStart> } else { if ( buf ) memcpy_fromio ( buf <S2SV_ModEnd>, bus -> <S2SV_ModStart> -> m_pdwGetRing, buf <S2SV_ModEnd> ) ; }",0
539,<S2SV_ModStart> TSRMLS_CC ) ; if ( new_len > INT_MAX ) { efree ( replaced ) ; RETURN_FALSE ; },1
540,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
541,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_buf_line_array ) + 1_buf_array ) + 1, T1_BUF_SIZE",0
542,"<S2SV_ModStart> * xd, <S2SV_ModEnd> int mb_row, <S2SV_ModStart> BLOCK_SIZE bsize, <S2SV_ModStart> ) ) { <S2SV_ModEnd> VP9_COMMON * x <S2SV_ModStart> { BLOCK_MODE_INFO * x = xd -> mb_row <S2SV_ModEnd> ; MACROBLOCKD * <S2SV_ModStart> * bsize = xd_row <S2SV_ModEnd> ; MACROBLOCKD * <S2SV_ModStart> break ; } xd -> mi_row = xd -> mi_col ; <S2SV_ModStart> } break ; <S2SV_ModEnd> } } xd_col =",0
543,"<S2SV_ModStart> name ) ; if (! strcmp ( key, ""url"" ) && value && looks_like_command_line_option ( value ) ) data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_URL, ""disallowed <S2SV_blank> submodule <S2SV_blank> url: <S2SV_blank> %s"", value ) ;",1
544,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> rows ; int <S2SV_ModStart> = 8 ; if ( s -> buffer_size > 8 ) { av_log ( s -> avctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> %d\\n"", s -> buf_size ) ; return AVERROR_INVALIDDATA ; } if ( <S2SV_ModStart> ++ ) { av_assert0 ( s -> avctx, AV_LOG_ERROR ) ;",0
545,<S2SV_ModStart> cnt ) { ssize_t <S2SV_ModEnd> n ; assert,1
546,<S2SV_ModStart> ; __be16 type ; if ( NAPI_GRO_CB ( skb ) -> encap_mark ) goto out ; NAPI_GRO_CB ( skb ) -> encap_mark = 1,1
547,<S2SV_ModStart> ; if ( numrows < 0 || numcols < 0 ) { return 0 ; } if (,1
548,<S2SV_ModStart> Session * t = 0 <S2SV_ModEnd> ; } },0
549,"<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key, 0 ) ; if ( ret < 0 ) goto error2 ;",0
550,"<S2SV_ModStart> buflen, buf_size - 8",0
551,"<S2SV_ModStart> BPF_ALU64 ) { coerce_reg_to_size ( dst_reg, 4 ) ; coerce_reg_to_size <S2SV_ModEnd> ( & src_reg <S2SV_ModStart> ( & src_reg, 4",0
552,"<S2SV_ModStart>, dname, fpath <S2SV_ModEnd> ) ; if",0
553,"<S2SV_ModStart> vfio_irq_set hdr ; size_t size ; <S2SV_ModStart> NULL ; int max, <S2SV_ModStart> ; if ( hdr. count > max ) return - EINVAL ; if (",0
554,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ext4_has_inline_data ( inode,1
555,<S2SV_ModStart> -> filesize = UINT64_MAX <S2SV_ModEnd> ; s ->,1
556,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
557,"<S2SV_ModStart> char * in, size_t olen <S2SV_ModStart> += 4 ; if ( len == olen ) return len ; <S2SV_ModStart> '=' ) { if ( len == olen ) return len ; <S2SV_ModStart> '=' ) { if ( len == olen ) return len ;",1
558,<S2SV_ModStart> gc ) ; <S2SV_ModEnd> return 0 ;,1
559,"<S2SV_ModStart> i, bytes <S2SV_ModEnd> ) ; bytes <S2SV_ModStart> ++ ) { for ( i = 0 ; i < bytes ; i ++ ) put_pages ( wdata ) ; nr_pages -- ; nr_pages = ( wdata -> pages [ i ] ) ; for ( i = 0 ; i < bytes ; i ++ ) put_page ( wdata -> pages [ nr_pages ] ) ; nr_pages -- ; nr_pages --",0
560,<S2SV_ModStart> & CP_RDESC_SWAPPED_MIN_MAX ) ) return rdesc ; if ( * rsize < 4,1
561,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_frame ( SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> i ) { SvcInternal_t <S2SV_ModEnd> unsigned int i <S2SV_ModStart> i ; size_t svc_frame_buffer_count = svc_ctx -> svc_count ; size_t <S2SV_ModEnd> i = 0 <S2SV_ModStart> i ] ; size_t <S2SV_ModEnd> i -> svc_buffer_count <S2SV_ModStart> i ] ; size_t <S2SV_ModEnd> ; i <S2SV_null> <S2SV_null>,0
562,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_rle_decode ( BYTE <S2SV_ModStart> DATA ) { if ( outSize < 4 ) return FALSE ; <S2SV_ModStart> } else { if ( outSize < len ) return FALSE ; <S2SV_ModStart> } else { if ( outSize < len ) return FALSE ; outSize -- ; <S2SV_ModStart> } else { if ( outSize < len ) return FALSE ; outSize -- ; memcpy ( outSize < 4 ) return FALSE ; } else { if ( outSize < len ) return FALSE ; outSize -- ; return FALSE ; } if ( outSize < 4 ) return FALSE ;,0
563,<S2SV_ModStart> ; screen_free ( screen ) ; if (,0
564,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> char * str, int len <S2SV_ModEnd> ) { int <S2SV_ModStart> = '\\n' ; if ( * str == '\\0' ) return - 1 ; <S2SV_ModStart> == '\\0' ) { * end_new_end ++ ; if ( * str == '\\0' ) return - 1 ; <S2SV_ModStart> } else { * end_start = strdup ( str + 1 ) <S2SV_ModEnd> ; for ( <S2SV_ModStart> = '\\0' ; if ( * end_start == '\\0' ) return - 1 ; <S2SV_ModStart> == '\\0' ) return - 1 ; <S2SV_ModStart> } else { * end_start = str ; <S2SV_ModStart> if ( is_end - 1 ; for ( = 0 ; i < end_start ++ ) <S2SV_ModEnd> { if ( <S2SV_ModStart> == '\\0' ) { if ( * str == '\\0' ) return - 1 ; <S2SV_ModStart> } else { * end_end ++ ; } <S2SV_ModEnd> for ( c <S2SV_ModStart> = '\\0' ; if ( str == '\\0' ) <S2SV_ModEnd> return 1 ; <S2SV_ModStart> } else { if ( str == '\\0' ) return - 1 ; <S2SV_ModStart>",0
565,"<S2SV_ModStart> * m, size_t <S2SV_ModEnd> bufsize ) { <S2SV_ModStart> * m ; <S2SV_ModEnd> JAS_DBGLOG ( 100 <S2SV_ModStart> 100, ( ""mem_resize(%p, <S2SV_blank> %zu)\\n"" <S2SV_ModEnd>, m, <S2SV_ModStart> ) ) ; if (! bufsize ) { jas_eprintf ( ""mem_resize <S2SV_blank> was <S2SV_blank> not <S2SV_blank> really\\n"" ) ; }",0
566,<S2SV_ModStart> dir ) { <S2SV_ModEnd> return 0 ;,0
567,<S2SV_ModStart> NULL ) ; <S2SV_ModEnd> return false ;,0
568,<S2SV_ModStart> pcrypt_free ( struct aead_instance <S2SV_ModEnd> * inst ) <S2SV_ModStart> * ctx = aead_instance_ctx <S2SV_ModEnd> ( inst ),1
569,<S2SV_ModStart> } if ( ptr [ 0 ] == NULL ) { return NULL ; },0
570,"<S2SV_ModStart> } if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if (",1
571,"<S2SV_ModStart> icmp6_hop_limit ) { if ( <S2SV_ModStart> cnf. hop_limit < <S2SV_ModEnd> ra_msg -> icmph <S2SV_ModStart> icmph. icmp6_hop_limit ) { warn ( icmp6_dev -> hop_limit, icmp6_msg -> hop_limit ) ; } else { if ( hop_limit <S2SV_null> <S2SV_null>",0
572,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
573,<S2SV_ModStart> * up ; int ulen ; <S2SV_ModStart> rp ) ; ulen = xfrm_replay_state_esn_len ( up ) ; if ( up ) return - EINVAL ; <S2SV_ModStart> : if ( <S2SV_ModEnd> xfrm_replay_state_esn_len ( up <S2SV_ModStart> replay_state_esn )!= ulen <S2SV_ModEnd> ) return -,0
574,"<S2SV_ModStart> int ret = proc_dointvec_minmax <S2SV_ModEnd> ( table,",1
575,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",1
576,<S2SV_ModStart> opj_calloc ( ( size_t ) ( <S2SV_ModStart> -> numlayers + 1U <S2SV_ModEnd> ) * l_step_l,0
577,"<S2SV_ModStart> name ), ""crypto-%s"" <S2SV_ModEnd>, name )",1
578,<S2SV_ModStart> ps ) { int i ; <S2SV_ModStart> ) ) ; for ( i = 0 ; i < 3 ; i ++ ) <S2SV_ModStart> -> channels [ i <S2SV_ModEnd> ] = 0,0
579,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart>, MODE_INFO * * td <S2SV_ModEnd>, MODE_INFO * <S2SV_ModStart> mi_col ) { MODE_INFO * pc_tree = & td <S2SV_ModEnd> -> mb ; <S2SV_ModStart> ; MODE_INFO * pc_tree = & td <S2SV_ModEnd> -> mb ; <S2SV_ModStart> mi_partition ; memset <S2SV_ModEnd> ( cm, <S2SV_ModStart> ( tp, mi_row, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, xd -> mb_col ) ; <S2SV_ModStart> ; } ; memset <S2SV_ModEnd> ( cm, <S2SV_ModStart> ( tp, mi_row, mi_col, mi_col, mi_col, mi_col, mi_col ) ; vpx_free ( xd ) ;",0
580,"<S2SV_ModStart> 1 ) ; if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf = opipe",1
581,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
582,<S2SV_ModStart> } else { # ifdef UPNP_ENABLE_POST_WRITE <S2SV_ModStart> return HTTP_UNAUTHORIZED ; # else return HTTP_NOT_FOUND ; # endif,1
583,"<S2SV_ModStart> * tmpname, fname <S2SV_ModEnd> ) ; }",0
584,<S2SV_ModStart> blkg ) ) <S2SV_ModEnd> return PTR_ERR ( <S2SV_ModStart> blkg ) ; <S2SV_ModEnd> q -> root_blkg,1
585,<S2SV_ModStart> ; if ( bpp == 1 && <S2SV_ModStart> else if ( bpp == 8 &&,1
586,"<S2SV_ModStart> ; krb5_data rgt_realm = krb5_principal_get_realm <S2SV_ModEnd> ( krb,",0
587,<S2SV_ModStart> mnt ) ; nd -> last_type = LAST_BIND ;,1
588,"<S2SV_ModStart> struct usbdevfs_connectinfo ci ; memset ( & ci, 0, sizeof ( ci ) ) ; ci <S2SV_ModEnd>. devnum = <S2SV_ModStart> dev -> devnum ; ci <S2SV_ModEnd>. slow = <S2SV_ModStart> speed == USB_SPEED_LOW <S2SV_ModEnd> ; if (",1
589,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> * opt -> opt. <S2SV_ModStart> len = opt -> opt. <S2SV_ModStart> len ; struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> optlen <S2SV_ModEnd> ) ; if,0
590,<S2SV_ModStart> ( args -> rmtvaluelen <S2SV_ModEnd> ) ; },0
591,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) break ; if ( TEMP_FAILURE_REQUEST ( memcpy ( & request -> DevicePath, 0, & devicePathLen ) ) { if (! memcpy ( request -> IoStatus. Information ) ) return - EINVALID_PARAMETER ; memcpy ( & rp -> DevicePath, 0, 0, sizeof ( * ) ) ) ; if (! ( memcmp ( request -> IoStatus. Status, ""\\n"" ) ) ) return - EINVAL ; } else { <S2SV_ModStart> ) ; } else { size = 0 ; Irp -> IoStatus. Status = 0 ; break ; } if (! readBuffer ) { size = readBuffer -> IoStatus. Status = 0 ; Irp -> IoStatus. Information = 0 ; break ; } <S2SV_ModStart> ) ) { if (! readBuffer ) { size = readBuffer -> IoStatus. Information = 0 ; Irp -> IoStatus. Information = 0 ; Irp -> IoStatus. Information = 0 ; Irp -> devicePathLen = 0 ; break ;",0
592,<S2SV_ModStart> error = 0 ; break ; case,0
593,<S2SV_ModStart> ; int err = - ENOMEM <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( addr ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> if (! addr ) return - EFAULT,0
594,"<S2SV_ModStart> ) ) { g_settings_copy_data ( gid, g_settings_in ) ; <S2SV_ModStart> goto out ; } <S2SV_ModEnd> } } else {",0
595,<S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x <S2SV_ModStart> index ) ; x <S2SV_ModEnd> ++ ; },0
596,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
597,"<S2SV_ModStart>, int tstype, bool opt_stats <S2SV_ModStart> ; int err ; BUILD_BUG_ON ( sizeof ( struct sock_exterr_skb ) > sizeof ( skb -> cb ) ) <S2SV_ModStart> ee_info = tstype ; serr -> opt_stats = opt_stats",1
598,"<S2SV_ModStart> 0 ) { if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""UnexpectedEndOfFile"" ) ;",0
599,<S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( bp [ 0 ] ) ;,0
600,"<S2SV_ModStart>, CONST_STR_LEN ( ""/%2f?"" ), __LINE__, flags, CONST_STR_LEN ( ""/%2f?"" ) ) ; run_burl_normalize ( psrc, psrc, __LINE__, __LINE__, flags, __LINE__, __LINE__, __LINE__, __LINE__, flags ) ; if (",0
601,<S2SV_ModStart> { uid_t task = rcu_read_lock ( ) ;,0
602,<S2SV_ModStart> <= w - ( int ),1
603,<S2SV_ModStart> page ) ; <S2SV_ModEnd> memset ( addr,1
604,<S2SV_ModStart> * row ; jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,0
605,<S2SV_ModStart> i2 ) { if ( ps_codec -> s_parse. i4_cur_slice_type == 0 ) { ps_codec -> s_parse. i4_cur_slice_id = 0 ; },0
606,"<S2SV_ModStart> * priv ; if (! port -> interrupt_out_urb ||! port -> interrupt_in_urb ) { dev_err ( & port -> dev, ""required <S2SV_blank> endpoint <S2SV_blank> is <S2SV_blank> missing\\n"" ) ; return - ENODEV ; }",1
607,<S2SV_ModStart> ) ) ; if ( dd < 0 ) goto out_err ;,0
608,<S2SV_ModStart> -> device_data ; cancel_autoload_drivers ( ) ;,1
609,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> char * my_data_len <S2SV_ModStart>, KEY_FRAME, my_open_data ) <S2SV_ModStart>, KEY_FLAGS ) <S2SV_ModEnd> ; if (",0
610,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> p == q ) || ( <S2SV_ModEnd> size < 16 <S2SV_ModStart> size < 16 ) || ( <S2SV_ModEnd> size > 256 <S2SV_ModStart> size > 256 ),1
611,"<S2SV_ModStart> uint dblocks = xfs_attr3_rmt_blocks <S2SV_ModEnd> ( mp,",1
612,"<S2SV_ModStart> bufsize ; } if ( pcount > MaxAllocSize / sizeof ( Pairs ) ) ) { errmsg ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> data <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", __func__, pcount, ( pcount ) ) ) ; }",0
613,<S2SV_ModStart> ; if (! strchr ( s ) ),0
614,<S2SV_ModStart> ] == EOF || text [ 1 ] == 0 <S2SV_ModStart> ; if (! isxdigit ( <S2SV_ModStart> [ 2 ] ) <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if (! isxdigit ( <S2SV_ModStart> [ 3 ] ) <S2SV_ModEnd> ) return 0,1
615,<S2SV_ModStart> { if (! strlen ( c ) ) return AVERROR_INVALIDDATA ; if (,0
616,"<S2SV_ModStart> vp9_iht16x16_add_c ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> int i, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ j <S2SV_ModStart> ++ j ; tran_low_t <S2SV_ModEnd> temp_in [ j <S2SV_ModStart> ++ j ) {",0
617,<S2SV_ModStart> ; gchar * data ; if ( data_len == NULL ) continue ; if (,0
618,"<S2SV_ModStart> fh_dentry ) ; error = fh_want_write ( fh ) ; if ( error ) <S2SV_ModEnd> goto out_errno ; <S2SV_ModStart> goto out_errno ; fh_lock ( fh ) ; error = set_posix_acl ( inode, ACL_TYPE_ACCESS <S2SV_ModEnd>, argp -> <S2SV_ModStart> argp -> acl_access <S2SV_ModEnd>, argp ->",0
619,<S2SV_ModStart> * ue ; if <S2SV_ModEnd> ( tree_root == <S2SV_ModStart> == NULL ) return 0,1
620,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> str ) { const char * file = fp ; <S2SV_ModStart> str ) ; if (! strchr ( fp, config ) ) goto out ; <S2SV_ModStart> ) ; } if (! is_inode ( fp ) ) goto out ;",0
621,<S2SV_ModStart> elen ) ; elen += sizeof ( struct pathComponent ) ; <S2SV_ModStart> > 0 ) { elen += pc -> lengthComponentIdent ; break ; } <S2SV_ModEnd> case 2 : <S2SV_ModStart> case 4 : elen += pc -> lengthComponentIdent ; break ; },0
622,<S2SV_ModStart> ( dp [ 4 <S2SV_ModEnd> ] ) ;,0
623,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr ) ;,0
624,<S2SV_ModStart> ( ctxt ) && ( ( ctxt -> mode == 0 ) && ( ctxt -> mode == 0 ),0
625,<S2SV_ModStart> ; bool slow <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ; * addr_len = sizeof ( * sin ) ;,1
626,"<S2SV_ModStart> len ) { <S2SV_ModEnd> if (! <S2SV_ModStart> } while ( len ) { u_int pdu_len = <S2SV_ModEnd> rpki_rtr_pdu_print ( len <S2SV_ModStart>, 8 ) ; len <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>",0
627,"<S2SV_ModStart> int tagval ; struct stream packet ; <S2SV_ModStart> return False ; packet = * s ; <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> token <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> return False ; packet = * s ;",0
628,"<S2SV_ModStart> 0 ) { if (! ND_TTEST2 ( * i ) ) { ND_PRINT ( ( ndo, ""%s"", i ) ) ; return ( NULL ) ; } if (! ND_TTEST2 ( * cp ) ) { ND_PRINT ( ( ndo, ""%s"", INDIR_MASK ) ) ; return ( - 1 ) ; } <S2SV_ModStart> 0 ) ; if ( ( i == 0 ) { ND_PRINT ( ( ( ndo, ""%s"", INDIR_MASK ) ) ; return ( NULL ; } <S2SV_ModEnd> ND_MASK ) ;",0
629,"<S2SV_ModStart>, args -> rmtvaluelen <S2SV_ModEnd> ) ; error <S2SV_ModStart> = args -> rmtvaluelen <S2SV_ModEnd> ; while (",1
630,<S2SV_ModStart> * data ; ND_TCHECK_16BITS ( s ) ;,0
631,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>",0
632,<S2SV_ModStart> -> fc ; <S2SV_ModEnd> if ( fc,0
633,"<S2SV_ModStart> -> x = MagickMin <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> -> w = MagickMin <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 0.0f, MagickMax <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 0.0f, MagickMax <S2SV_ModEnd> ( 0.0f,",0
634,"<S2SV_ModStart> PKT_LEN_SIZE ) { giterr_set_str ( GITERR_NET, ""Invalid <S2SV_blank> empty <S2SV_blank> packet"" ) ; return GIT_ERROR <S2SV_ModEnd> ; } if",1
635,<S2SV_ModStart> ; if ( vma -> vm_flags & VM_SHARED ) return VM_FAULT_SIGBUS ; if (,1
636,"<S2SV_ModStart> return res -> s1 ; memset ( src -> s_password, 0 ) ;",0
637,<S2SV_ModStart> env -> insn_aux_data ; int i <S2SV_ModStart> ) ) ; for ( i = off ; i < off + cnt - 1 ; i ++ ) new_data [ i ]. seen = true ;,1
638,<S2SV_ModStart> ; ND_TCHECK ( * dp <S2SV_ModEnd> ) ; if,1
639,<S2SV_ModStart> trunc ; } ND_TCHECK_16BITS ( & bp [ i + 2 ] ) ;,1
640,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
641,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( occ0 <S2SV_ModStart> % rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""PredictorDecodeTile"", ""%s"", ""occ0%rowsize <S2SV_blank>!= <S2SV_blank> 0"" ) ; return 0 ; } <S2SV_ModEnd> assert ( sp <S2SV_ModStart> 0 ) { if (! <S2SV_ModStart>, rowsize ) ) return 0",1
642,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteCanonEntry ) ) ;",0
643,<S2SV_ModStart> ; if ( ctx -> terminated ||,1
644,<S2SV_ModStart> = NULL ; if ( sbi -> spool ) hugepage_put_subpool ( sbi -> spool ) ;,1
645,<S2SV_ModStart> ; if (! file &&,0
646,<S2SV_ModStart> in ) { size_t alloc ; size_t len = 0 ; <S2SV_ModStart> in )out = ( alloc <S2SV_ModEnd> strlen ) ; <S2SV_ModStart> out ) { if (! alloc ) return - 1 ; } <S2SV_ModStart> str ) ; out = ( alloc <S2SV_ModEnd> in + 1 <S2SV_ModStart> out ) ; if ( alloc > 0 ) return - 1 ;,0
647,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
648,"<S2SV_ModStart> ( ) ; iov_iter_advance ( i, copied ) ; <S2SV_ModStart> again ; } <S2SV_ModEnd> pos += copied",1
649,<S2SV_ModStart> unlikely ( len + ring -> frameoffset,1
650,<S2SV_ModStart> ; sas_auth_regname = 0 ;,0
651,"<S2SV_ModStart> ( obj, <S2SV_ModEnd> name, data <S2SV_ModStart>, show_object, & base <S2SV_ModEnd>, path,",1
652,<S2SV_ModStart> sub ) { return 0 ; } if (,0
653,<S2SV_ModStart> src < zsize + ( sub_type!= 2 ) <S2SV_ModStart> bits ) { if ( src >= src_end ) return AVERROR_INVALIDDATA ;,1
654,<S2SV_ModStart> q ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
655,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
656,<S2SV_ModStart> ++ ) { if ( ssize_t ) break ;,0
657,<S2SV_ModStart> slave_active ) { spin_lock_irq ( & timeri -> lock ) ; <S2SV_ModStart> ) ; } spin_unlock_irq ( & list_del_init <S2SV_ModEnd> ) ; },0
658,<S2SV_ModStart> len ; } ND_TCHECK ( p [ 2 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT,1
659,<S2SV_ModStart> -> cpu = <S2SV_ModEnd> ; char * <S2SV_ModStart> cpu ) { <S2SV_ModEnd> cpu = info <S2SV_ModStart> ; cpu = info -> cpu <S2SV_ModEnd> cpu ) ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> cpu && * <S2SV_ModStart> cpu ) { <S2SV_ModEnd> cpu ) ; <S2SV_ModStart> cpu ) ; free ( arch,0
660,"<S2SV_ModStart> sas_probe_devices ( struct asd_sas_port * port <S2SV_ModEnd> ) { struct <S2SV_ModStart>, * n <S2SV_ModEnd> ; list_for_each_entry (",1
661,<S2SV_ModStart> -> u4_first_slice_buffer ) { if ( ps_dec -> u4_first_slice_in_slice == 0 ) { ret = ps_dec -> u4_slice_error ; ps_dec -> u4_slice_in_buffer = 0 ; ps_dec -> u4_slice_cur_slice -> u4_slice = 0 ; ps_dec -> u4_cur_slice -> u4_slice_buffer = 0 ; },0
662,"<S2SV_ModStart> gint64 offset ; <S2SV_ModEnd> char line [ <S2SV_ModStart> line [ NETSCREEN_LINE_LENGTH <S2SV_ModEnd> ] ; offset <S2SV_ModStart> return FALSE ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! parse_netscreen_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart> wth -> fh <S2SV_ModEnd>, & wth <S2SV_ModStart> wth -> frame_buffer, line",1
663,<S2SV_ModStart> 0 ) ; if ( <S2SV_ModStart>. seq_num ) < 0 ) return - 1,1
664,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
665,"<S2SV_ModStart> : ret = - EOPNOTSUPP ; if ( key -> type -> type -> type_type, & key -> type ) { down_read ( & key -> type -> sem ) ; down_read ( & key -> sem ) ; error2 : up_read <S2SV_ModEnd> ( & key <S2SV_ModStart> type -> sem ) ; <S2SV_ModEnd> } error2 :",0
666,<S2SV_ModStart> ) { return ret <S2SV_ModEnd> ; } if <S2SV_ModStart> S2SV_null> <S2SV_null>,0
667,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",1
668,"<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if <S2SV_ModStart> - JAS_CAST ( jas_longlong <S2SV_ModEnd>, ( ( <S2SV_ModStart> : JAS_CAST ( jas_longlong <S2SV_ModEnd>, tmp )",1
669,<S2SV_ModStart> page ) ; rm -> atomic. op_active = 0 ;,1
670,<S2SV_ModStart> dev ) ; if ( bi == NULL ) return - ENOMEM ;,0
671,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = 0 <S2SV_ModStart> ) ) ; msg -> msg_namelen = sizeof ( * sin ) ;",0
672,"<S2SV_ModStart> sizeof ( spath ) ) return - 1 ; if ( strstr ( name, "".."" ) || strchr ( name, '/'",1
673,<S2SV_ModStart> * s ; unsigned long len = 0 ; <S2SV_ModStart> t ) { if ( s == ( s ) - 1 ) continue ;,0
674,"<S2SV_ModStart> -> bcache, cache_id ( <S2SV_ModStart> ] -> data )",1
675,<S2SV_ModStart> objp ) ; * objp = NULL ;,1
676,"<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
677,<S2SV_ModStart> return 1 ; consume_skb ( skb ) ; return 0 <S2SV_ModEnd> ; } if,1
678,<S2SV_ModStart> dev ) ; if (! <S2SV_ModEnd> dev ) return 0,0
679,<S2SV_ModStart> ) ; goto out_put <S2SV_ModEnd> ; } <S2SV_null>,0
680,<S2SV_ModStart> ; if ( p [ 0 ] &&,0
681,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> } if (! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if (",1
682,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> read_bit_buffer ( vpx_read_bit <S2SV_ModStart> * rb, vpx_read_literal <S2SV_ModEnd> ( rb,",0
683,<S2SV_ModStart> 1 ) ; if ( strlen ( line ) == 0 ) return - 1 ;,1
684,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return 0 ;,0
685,<S2SV_ModStart> ++ ) { if ( band -> prec ) { <S2SV_ModStart> ) ; } },1
686,<S2SV_ModStart> < 0 ) { xmlFreeInputStream ( input ) ; return ; } <S2SV_ModEnd> if ( entity,1
687,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart>, & final ) ; rcu_read_unlock (",0
688,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ] ; } else { const <S2SV_ModStart> = cpi -> oxcf. mode ; if ( cpi -> oxcf. mode == LAST_FRAME ) { <S2SV_ModStart> ) ; } else { if ( cpi -> oxcf. mode == LAST_FILTER ; } else { const int cpi -> sf. mode_mode == LAST_FILTER ; } else { const int cpi -> sf_mode = & cpi -> sf. mode_mode == LAST_FILTER ; } else { if ( cpi -> sf. mode == LAST_FILTERRING ) { if ( cpi -> sf. mode == LAST_FILTER ; return - 1 ; } else { int cpi -> sf_mode = cpi -> sf_mode == LAST_FILTER ; } else { const int cpi -> sf_mode = cpi -> sf. mode ; } else { if ( cpi -> sf. use_mode == FALSE ) { if ( cpi -> sf_mode == FALSE ) { if ( cpi -> sf.,0
689,"<S2SV_ModStart> ( u32 size, u32 num ) { if ( size > UINT32_MAX / num ) { return NULL ; } <S2SV_ModEnd> return malloc ( <S2SV_ModStart> malloc ( size * num",1
690,<S2SV_ModStart> else if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1 <S2SV_ModStart> { if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1,1
691,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,1
692,<S2SV_ModStart> ) ) { if ( <S2SV_ModStart> buf -> size < 0 ) return 0 ;,0
693,"<S2SV_ModStart> scn, root_storage <S2SV_ModEnd> ) ) <",1
694,<S2SV_ModStart> info = NULL <S2SV_ModEnd> ; if (,0
695,<S2SV_ModStart> (! eof && vars -> str. c!= vars -> ptr,1
696,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
697,"<S2SV_ModStart> PERF_COUNT_SW_EMULATION_FAULTS, 1 <S2SV_ModEnd>, regs,",0
698,"<S2SV_ModStart> -> _eip ; rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val ) ; if ( rc!= X86EMUL_CONTINUE ) break <S2SV_ModStart> case 4 : rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val )",1
699,<S2SV_ModStart> if (! strlen ( buf ) <S2SV_ModEnd> ) { err,0
700,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void * ticket_buf <S2SV_ModEnd> ; void * <S2SV_ModStart> ) { void * ticket_buf ; void * ticket_buf = NULL ; <S2SV_ModStart> bad ) ; void * ticket_buf = kmalloc ( dlen, & ticket_buf, GFP_X_NOFS ) ; <S2SV_ModStart> ; if (! tp ) { ret = - ENOMEM ; goto out ; } tp = ticket_buf ; <S2SV_ModStart> bad ) ; ticket_buf = kmalloc ( dlen, GFP_X_NOFS ) ; if (! tp ) { ret = - ENOMEM ; goto out ; } <S2SV_ModStart> ; out : kfree ( ticket_buf ) ;",0
701,<S2SV_ModStart> ( count > 0 <S2SV_ModEnd> ) ) {,0
702,<S2SV_ModStart> -> server. <S2SV_ModEnd> ) return -,0
703,"<S2SV_ModStart> -> ssl_id ; SSL_SESSION * s = s -> session_ctx -> session_sess ; if ( s -> session_ctx -> session_id_sess == NULL ) { SSLerr ( s -> session_sess, SSL_SESS_SESS ) ; if ( s -> session_ctx -> session_sess == NULL ) ssl_sess = s -> session_ctx -> session_sess ; SSL_CACHE_SESSION_SESSION_SESS ; if ( s -> session_ctx -> session_id_sess == NULL ) { if ( s -> session_ctx -> session_sess == NULL ) s -> session = ssl_sess ; s -> session_ctx -> session_ctx -> session_id_sess ; ssl_free ( s -> session ) ; ssl_sess = s -> session_ctx -> session_ctx -> session_sess ; } else { if ( ssl_sess == NULL ) { SSLerr ( s -> session, SSL_F_CUTILURE ) ; ssl_free ( s -> session ) ; }",0
704,<S2SV_ModStart> ) ; } if ( bd -> data ),0
705,<S2SV_ModStart> ( error = 0,0
706,<S2SV_ModStart> NULL ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_FIELD_REF,0
707,<S2SV_ModStart> dev ) ; if ( cmd -> dev ) return ;,0
708,"<S2SV_ModStart>, annotation, type_comment, <S2SV_ModStart> ) ) ; } else type_comment = NEW_TYPE_COMMENT ; if (! type_comment ) return NULL ; <S2SV_ModStart>, type_comment,",0
709,"<S2SV_ModStart> err = 0 ; if (! net_eq ( current -> nsproxy -> net_ns, sock_net ( sk ) ) ) return - EINVAL",1
710,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
711,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,1
712,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
713,"<S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
714,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> == 0 ) rc = <S2SV_ModStart> ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>,0
715,,1
716,"<S2SV_ModStart> -> memset <S2SV_ModEnd> ( res,",0
717,"<S2SV_ModStart> { if ( psf -> header. indx >= <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ) return ; <S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd>, psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( psf -> header. indx ) { if ( psf -> header. end > <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd> ) ) { <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ) ) { <S2SV_ModStart> return ; }",0
718,<S2SV_ModStart> out_mutex ; } ext4_inode_block_unlocked_dio ( inode ) ; inode_dio_wait ( inode ) ; down_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart> ioffset ) ; <S2SV_ModEnd> credits = ext4_writepage_trans_blocks <S2SV_ModStart> ) ; goto out_mmap <S2SV_ModEnd> ; } down_write <S2SV_ModStart> handle ) ; out_mmap : up_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModEnd> ext4_inode_resume_unlocked_dio ( inode,1
719,"<S2SV_ModStart> uint32_t * tmp_tracks ; uint32_t * midi_data ; uint32_t * track_size <S2SV_ModEnd> ; uint32_t * midi_tracks <S2SV_ModStart> = * track_size <S2SV_ModEnd> ; uint32_t * midi_tracks <S2SV_ModStart> |= * track_size <S2SV_ModEnd> ; track_size = <S2SV_ModStart> ( midi_size < tmp_size ) { tmp_tracks <S2SV_ModEnd> = * midi_data <S2SV_ModStart> = * midi_data ; tmp_size <S2SV_ModEnd> = * midi_data <S2SV_ModStart> |= * midi_data <S2SV_ModEnd> ; track_size = <S2SV_ModStart> ( midi_size < tmp_size <S2SV_ModEnd> ) { _WM_GLOBAL_ERROR <S2SV_ModStart> ( midi_data [ tmp_size <S2SV_ModEnd> - 4 ] <S2SV_ModStart> ( midi_data [ tmp_size ], tmp_val <S2SV_ModEnd> ; midi_data [ <S2SV_ModStart> ( midi_data [ tmp_size ] = tmp_data [ tmp_size ] ; tmp_val = tmp_data [ i ] = tmp_val <S2SV_ModEnd> ; midi_data [ <S2SV_ModStart> ( midi_data [ tmp_size ] = tmp_val <S2SV_ModEnd> ; midi_data [ <S2SV_ModStart> ( midi_data [ tmp_size",0
720,"<S2SV_ModStart> = max_t ( int <S2SV_ModEnd>, val * <S2SV_ModStart> = max_t ( int <S2SV_ModEnd>, val *",1
721,"<S2SV_ModStart> * bh ; unsigned int table_len ; <S2SV_ModStart> -> b_data ; table_len = le32_to_cpu ( lvd -> s_blocksize ) ; if ( sizeof ( * lvd ) + table_len > sb -> s_blocksize ) { goto out_err ; } table_len = le16_to_cpu ( sb ) + table_len <S2SV_ModEnd> ; table_len <S2SV_ModStart> -> s_len, table_len, sizeof ( * lvd ) - sizeof ( * lvd ) ) - sizeof ( * lvd ) ) ; table_len = le16_to_cpu ( * lvd -> sb ) + table_len <S2SV_ModEnd> ; table_len <S2SV_ModStart> -> sb, table_len <S2SV_ModEnd> ) ; if",0
722,"<S2SV_ModStart> long n ; image = 0 ; info = 0 ; <S2SV_ModStart> ""cannot <S2SV_blank> get <S2SV_blank> header\\n"" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ""cannot <S2SV_blank> get <S2SV_blank> header\\n"" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> 0 ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> 0 ; } JAS_DBGLOG ( ""BMP <S2SV_blank> information: <S2SV_blank> %ld; <S2SV_blank> %ld; <S2SV_blank> width <S2SV_blank> %ld; <S2SV_blank> %ld\\n"", info -> depth, info -> depth ) ; goto error ; } JAS_DBGLOG ( ""BMP <S2SV_blank> %ld; <S2SV_blank> %ld; <S2SV_blank> %ld; <S2SV_blank> %ld; <S2SV_blank> %ld; <S2SV_blank> hres <S2SV_blank> %ld; <S2SV_blank> vres <S2SV_blank> %ld; <S2SV_blank> numcolors <S2SV_blank> %ld\\n"", info -> depth ) ; goto error ; } JAS_CAST ( long <S2SV_ModEnd> info -> depth <S2SV_ModStart> info -> depth ), JAS_CAST ( long <S2SV_ModStart> info -> depth ), JAS_CAST ( long <S2SV_ModStart> info -> depth ), JAS_CAST ( long <S2SV_ModStart> info -> depth ), JAS_CAST ( long <S2SV_ModEnd> info -> depth <S2SV_ModStart> info",0
723,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> dev ), func <S2SV_ModEnd>, line, <S2SV_ModStart> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"", func <S2SV_ModEnd>, line,",1
724,<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1 + 1 ) ),0
725,"<S2SV_ModStart> g_tv_comment, FILENAME_COMMENT ) ; problem_data_reload_from_dump_dir ( ) ; update_gui_state_from_problem_data ( 0",1
726,"<S2SV_ModStart> * p ; if (! p -> name ) return - EINVAL ; <S2SV_ModStart>, name, p",0
727,<S2SV_ModStart> ; if ( n == 0 &&,0
728,"<S2SV_ModStart> pixels, image -> rows, image -> rows ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { image -> exception = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; q = SetImageExtent ( image, image -> columns, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; break ; } }",0
729,"<S2SV_ModStart>, krb5_principal client_principal, const char * tgt_realm <S2SV_ModStart> principal ), tgt_realm <S2SV_ModEnd> ) ; if",1
730,"<S2SV_ModStart> ReadBlobLSBLong ( image ) ; if ( bmp_info. number_colors > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
731,<S2SV_ModStart> ; newinet -> inet_opt <S2SV_ModEnd> = ireq ->,1
732,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
733,"<S2SV_ModStart>!= 0 ) { int tend_off = skb_transport_offset ( skb ) + tlen ; <S2SV_ModStart> ( tend_off + tlen <S2SV_ModEnd> offset, csum <S2SV_ModStart> ( skb, csum, tlen <S2SV_ModEnd> ) ) ;",0
734,"<S2SV_ModStart> gfn, page_size >> PAGE_SHIFT <S2SV_ModStart> pfn, page_size >> PAGE_SHIFT",0
735,<S2SV_ModStart> 0x00 } ; if ( cmd -> msg_len > sizeof ( b ) - 4 ) return - EINVAL ;,1
736,<S2SV_ModStart> perf_event_context * ctx ; ctx = perf_event_ctx_lock <S2SV_ModEnd> ( event ),0
737,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ; return ( <S2SV_ModStart> ; } <S2SV_null>,0
738,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> free_nid_cache ) { ret = - ENOMEM ; goto err ; } <S2SV_ModStart> free_nid ) { if ( free_cache_tree ( s, GFP_NOFS ) ) { err = - EINVAL ; goto err ; ret = - EINVAL ; goto err ; } if ( free_nid_tree_list ( sbi, GFP_NOFS ) ) { err = - EINVAL ; goto err ; } ret = - EINVAL ; goto err_free_nid_nid_tree_cache_list ( nm, GFP_NOFS ) ; err = - ENOMEM ; goto err_out ; } if ( err ) goto err_out ; err = true ; err = - EINVAL ; goto err_free_nid_list ( sbi -> nid ) ; err = - ENOMEM ; goto err_out ; err = - EINVAL ; goto err_out ; err_free_nid_cache_list ( fid ) ; err = true ; goto err_",0
739,<S2SV_ModStart> NULL ) { <S2SV_ModEnd> return ( ctx,0
740,"<S2SV_ModStart> ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> ++ cons ; netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> extra. type ) ; netbk_fatal_tx_err ( vif",1
741,<S2SV_ModStart> ) ) ; hdr -> sadb_msg_reserved = 0 ;,1
742,"<S2SV_ModStart> ) return ; memset ( & r1, 0, sizeof ( r1 ) ) ;",1
743,"<S2SV_ModStart> len ) { luaL_arg ; luaL_arg ( L, L, ""arg <S2SV_blank> must <S2SV_blank> be <S2SV_blank> 1 <S2SV_blank> 1 <S2SV_blank> "" ) ; luaL_arg ( L, pos + 1 ) ; luaL_arg ( L, luaL_arg - 1 ) <S2SV_ModStart> ; luaL_arg ( L, <S2SV_ModEnd> size <= ld <S2SV_ModStart> ( L, <S2SV_ModEnd> size - 1 <S2SV_ModStart> ; luaL_arg ( L, <S2SV_ModEnd> size <= ld <S2SV_ModStart> ( L, L, L, <S2SV_ModEnd> size - 1 ) <S2SV_ModStart> ; luaL_arg ( L,",0
744,<S2SV_ModStart> * tptr ; ND_TCHECK2 ( * tptr ) ;,0
745,<S2SV_ModStart> -> data ; unsigned <S2SV_ModStart> body -> unit_size || len < sizeof ( struct oz_multiple_fixed ) - 1 <S2SV_ModStart> ( len - ( <S2SV_ModStart> struct oz_multiple_fixed ) - 1 ) <S2SV_ModEnd> ) / body,1
746,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return 0 ;,0
747,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0644 ) ; <S2SV_ModEnd> } if (",0
748,<S2SV_ModStart> if (! s,0
749,<S2SV_ModStart> return res ; <S2SV_ModEnd> return 0 ;,1
750,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> ) ; } ext_size = sizeof ( struct ext4_extent_header ) + sizeof ( struct ext4_extent ) * le16_to_cpu ( neh -> eh_data ) ; memset ( bh -> b_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size ) ; <S2SV_ModStart> ) ; } ext_size = sizeof ( struct ext4_extent_header ) * sizeof ( struct ext4_extent_header ) * le16_to_cpu ( neh -> eh_data ) ) ; memset ( bh -> eh_data + ext4_size, 0, inode -> i_sb -> s_sb -> s_blocksize ) ; memset ( neh -> b_blocksize, 0, sizeof ( struct ext4_data ) ) ; memset ( neh -> b_blocksize - ext_size ) ;",0
751,<S2SV_ModStart> ) ) ; ptr_hdr -> h_len = 0 ;,0
752,<S2SV_ModStart> ; xattr = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> ; image_len = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> ; y_origin = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> ; image_ushort = get_tga_ushort <S2SV_ModEnd> ( & tga,0
753,<S2SV_ModStart> ; ssize_t ret ; if ( WARN_ON_ONCE (! ib_safe_file_access ( filp ) ) ) return - EACCES,1
754,<S2SV_ModStart> cpu ) { <S2SV_ModEnd> cpu. sched_to_timespec <S2SV_ModStart> cpu ) ; else <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
755,<S2SV_ModStart> ; uint32 nstrips <S2SV_ModEnd> ; nstrips =,1
756,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = 0 <S2SV_ModStart> ) ) ; msg -> msg_namelen = sizeof ( * sin ) ;",0
757,<S2SV_ModStart> lua_list ) { <S2SV_ModEnd> if (! <S2SV_ModStart> NULL ) { <S2SV_ModEnd> return - 1,0
758,<S2SV_ModStart> ; int error = 0 <S2SV_ModStart> &= PAGE_MASK ; if ( address < mmap_min_addr ) return - EPERM <S2SV_ModEnd> ; prev =,1
759,"<S2SV_ModStart> { umode_t mode <S2SV_ModEnd> ; error = <S2SV_ModStart> ; error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & mode <S2SV_ModStart>, & mode, & acl <S2SV_ModStart> if ( error <S2SV_ModEnd> ) return error <S2SV_ModStart> return error ; <S2SV_ModEnd> error = xfs_set_mode",1
760,"<S2SV_ModStart>, int optional, const char * rootfs <S2SV_ModStart> endif if ( safe_mount <S2SV_ModEnd> ( fsname, <S2SV_ModStart> MS_REMOUNT, data, data ) < 0",0
761,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
762,"<S2SV_ModStart> it_overrun = - 1LL <S2SV_ModEnd> ; ++ timr <S2SV_ModStart> info -> si_overrun = timer_overrun_to_int ( timr, info -> si_overrun ) <S2SV_ModEnd> ; } unlock_timer",1
763,"<S2SV_ModStart> c -> url, 0",0
764,<S2SV_ModStart> struct static_key * once_key <S2SV_ModEnd> ) { static <S2SV_ModStart> ; __net_random_once_disable_jump ( once_key <S2SV_ModEnd> ) ; return,1
765,<S2SV_ModStart> -> io_data ; if ( io_data -> kiocb && io_data -> kiocb ) ) ret = - EFAULT ; if ( ret < 0 ) ret = - EIO ; <S2SV_ModStart> ki_data -> mm <S2SV_ModEnd> ; ret =,0
766,<S2SV_ModStart> ; if ( IPCB ( skb ) -> flags & IPSKB_DOREDIRECT <S2SV_ModEnd> &&! opt,1
767,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
768,"<S2SV_ModStart> struct trusted_key_payload * p ; struct trusted_key_payload * new_p ; struct trusted_key_options * new_o ; size_t datalen = key -> datalen ; char * datablob ; int ret = 0 ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) return - ENOKEY ; <S2SV_ModStart> 0 ] ; <S2SV_ModEnd> if (!",0
769,"<S2SV_ModStart> v |= ( JAS_CAST ( uint_fast32_t, c ) <S2SV_ModEnd> << 24 )",1
770,<S2SV_ModStart> NULL ) { if ( skb -> len < ROSE_MIN_LEN ) { kfree_skb ( skb ) ; continue ; } <S2SV_ModStart> -> data + ROSE_CALL_REQ_OFF <S2SV_ModEnd> ) ; if,0
771,<S2SV_ModStart> (! npages || base_gfn!= old. base_gfn,0
772,<S2SV_ModStart> = newinet -> inet_opt <S2SV_ModEnd> ; newinet ->,0
773,"<S2SV_ModStart> off = offset, 0 <S2SV_ModStart> if ( offset + offset",0
774,"<S2SV_ModStart> char * buff ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } buff",1
775,"<S2SV_ModStart> } if ( data_body == NULL && in_bio == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_NO_CONTENT ) ; goto err ; } if ( <S2SV_ModStart> } if ( <S2SV_ModEnd> in_bio!= NULL <S2SV_ModStart>!= NULL ) <S2SV_ModEnd> { bio =",1
776,<S2SV_ModStart> ( server. ds_enabled <S2SV_ModEnd> ) server.,0
777,"<S2SV_ModStart> } if ( options -> flags & ( UV_PROCESS_SETUID | UV_PROCESS_SETGID ) ) { SAVE_ERRNO ( setgroups ( 0, NULL ) ) ; } if (",1
778,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> EOPNOTSUPP ; } mutex_lock ( & d -> data_len ) ; if (! ret ) return - ENODEV ; <S2SV_ModEnd> mutex_lock ( & <S2SV_ModStart> w,0
779,<S2SV_ModStart> client -> priv ; },0
780,<S2SV_ModStart> book -> dim && i < n,1
781,"<S2SV_ModStart> * r ; sprintf ( outputbuffer [ 0 ], ""%12.0f <S2SV_blank> %12.3f <S2SV_blank> 0lf <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> c"", r ) ; sendClean ( r ) ;",0
782,<S2SV_ModStart> == - EEXIST || ret == - EOVERFLOW,1
783,<S2SV_ModStart> fp ) ; spin_lock ( & unix_gc_lock ) ; <S2SV_ModStart> unix_sk ( s <S2SV_ModEnd> ) ; if <S2SV_ModStart> unix_tot_inflight ++ ; } fp -> f_cred -> user -> unix_inflight -- ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
784,"<S2SV_ModStart> size_t chanmap_size = SF_MIN ( <S2SV_ModStart> sf. channels, layout_tag & 0xffff )",1
785,"<S2SV_ModStart> ; sf -> yv_twop = sf_set <S2SV_ModEnd> ( sf, <S2SV_ModStart> } else { sf ->",0
786,<S2SV_ModStart> ms ) { uint32_t <S2SV_ModEnd> nestsize = ( <S2SV_ModStart> nestsize = ( uint32_t <S2SV_ModEnd> ) ms ->,1
787,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
788,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
789,<S2SV_ModStart> -> xrefs = safe_calloc ( <S2SV_ModEnd> sizeof ( xref_t,1
790,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
791,"<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ) <S2SV_ModStart> ( opt ) { atomic_sub ( <S2SV_ModEnd> opt -> tot_len <S2SV_ModStart> opt -> tot_len, & sk -> sk_omem_alloc ) ; txopt_put ( opt <S2SV_ModStart> ) ; } }",1
792,"<S2SV_ModStart>, * tmpout = NULL, * tmpout <S2SV_ModStart> out ) ; if (! ( flags & SMIME_BINARY ) ) { tmpout = SMIME_F_BINARY ; goto err ; } <S2SV_ModStart> ) ; } if (! tmpout ) { tmpout = cms_read_bio ( cms, flags & SMIME_BINARY ) ; if (! tmpout ) { tmpout = SMIME_bio_bio ( cms, flags & SMIME_BINARY ) ; goto err ; } } if (! tmpout ) { if ( flags & SMIME_BINARY ) goto err ; } if ( tmpout ) { tmpout = CMSerr ( tmpout, out ) ; if (! tmpout ) { tmpout = SMIME_free ( tmpout ) ; goto err ; } } } if ( tmpout ) { cmsbio = cmsbio ; if (! tmpout ) goto err ; if (! tmpout ) { tmpout = cmsbio_get_bio ( cmsbio, cmsbio, flags & SMIME_TEXT ) ; if ( tmpout ) { if (",0
793,"<S2SV_ModStart> ) ) ; memset ( & sk, 0, sizeof ( * sk ) ) ;",0
794,<S2SV_ModStart> sctp ) ; <S2SV_ModEnd> S2SV_null> <S2SV_null> <S2SV_null>,0
795,<S2SV_ModStart> cs_flags ) ; hook_del_nick_register ( check_registration_keywords ) ;,0
796,"<S2SV_ModStart> ) { struct in_device * idev <S2SV_ModEnd> = ( ( <S2SV_ModStart> ) -> ifa_dev <S2SV_ModEnd> ; struct netdev_notifier_info <S2SV_ModStart> netdev_notifier_info info ; if ( idev -> dead ) return NOTIFY_DONE ; <S2SV_ModStart> & info, idev ->",1
797,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return 0 ;,0
798,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
799,<S2SV_ModStart> val ) { int temp = malloc ( temp_size ) ; char * temp = malloc ( temp ) <S2SV_ModEnd> ; } if,0
800,<S2SV_ModStart> task ) { <S2SV_ModEnd> del_timer ( & <S2SV_ModStart> -> timer ) <S2SV_ModEnd> ; complete (,1
801,<S2SV_ModStart> ; out = safe_calloc <S2SV_ModEnd> ( strlen (,0
802,"<S2SV_ModStart> NULL ) { if <S2SV_ModEnd> ( errno == <S2SV_ModStart> == ENOMEM ) <S2SV_ModEnd> log_warn ( ""lldp""",0
803,"<S2SV_ModStart> object + size < * object || * object + size <S2SV_ModStart> size * object || * object + size <S2SV_ModStart> size < * object || * object <S2SV_ModStart> size * object || * object + size <S2SV_ModStart> object + size < * object || * object + size <S2SV_ModStart> size < * object || * object + size <S2SV_ModStart> object + size < * object || * object + size <S2SV_ModStart> object ) { if ( * object < * object || * object + size < * object || * object || * object >= size * object || <S2SV_ModStart> size * object || * object + size * object + size < * object || * object + size < * object || * object + size < * object || <S2SV_ModStart> size * object || * object || <S2SV_ModStart> size * object + size < * object || * object -> offset_table ) { PLIST_ERR ( ""%s <S2SV_blank> : <S2SV_blank> BPLIST_BPLIST_BPLIST_BIN: <S2SV_blank> bytes <S2SV_blank> of <S2SV_blank> of <S2SV_blank> valid <S2SV_blank> range\\n"" <S2SV_ModEnd> ) ; return",0
804,"<S2SV_ModStart> ( interface, KSZ8851_P1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_P1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_P1 <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, KSZ8851_P1 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_P1 <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_P1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_P1 <S2SV_ModEnd>, interface,",0
805,<S2SV_ModStart> all_channels_lock ) ; put_net ( pch -> chan_net ) ; pch -> chan_net = NULL ;,1
806,"<S2SV_ModStart> btrfs_dir_item * di = NULL <S2SV_ModStart> - ENOMEM ; btrfs_xattr ) ; btrfs_delete_name_len = btrfs_xattr ( trans, btrfs_xattr ) ; if ( di ) { di = btrfs_lookup_xattr ( trans, btrfs_xattr ) ; btrfs_insert_item * di = btrfs_lookup_item ( trans, btrfs_xattr ) ; di = btrfs_lookup_ino ( trans, btrfs_ino ( trans, btrfs_xattr ) ; if (! btrfs_xattr ) { ret = btrfs_lookup_xattr ( trans, btrfs_xattr ) ; di = btrfs_lookup_item <S2SV_ModEnd> ( trans, <S2SV_ModStart>, btrfs_item, btrfs_xattr ) ; btrfs_put ( inode ) ; di = btrfs_insert_item <S2SV_ModEnd> ( trans, <S2SV_ModStart>, path, btrfs_ino ( trans, btrfs_xattr ) ; } ret = btrfs_lookup_",0
807,"<S2SV_ModStart> count ) { char * txt = op -> txt ; int txtLen = strlen ( op -> txt ) ; int txtLen = R_ASM_BUFSIZE - txtLen ; int txtLen = strlen ( op -> txt ) - txtLen ; <S2SV_ModStart> ++ ) { snprintf ( txt, txtLeft <S2SV_ModEnd>, ""%d <S2SV_blank> "", <S2SV_ModStart> ] ) ; txtLen = strlen ( txt ) ; txt += txtLen ; txtLen -= txtLen ; <S2SV_ModStart> } snprintf ( txt, txtLeft - 1 <S2SV_ModEnd>, ""%d"",",0
808,"<S2SV_ModStart> client -> proxy ) ; g_byte_array_free ( client -> auth_buffer, TRUE",1
809,<S2SV_ModStart> = xd -> plane [ xd -> plane ],0
810,<S2SV_ModStart> ; if ( key_is_negative ( key <S2SV_ModEnd> ) ) return,1
811,<S2SV_ModStart> ip + TEMP_FAILURE_RETRY ( <S2SV_ModStart> op ) ) { <S2SV_ModEnd> if ( i + <S2SV_ModStart> + 1 ) { <S2SV_ModStart> 8 ) ; } if ( i + len > length_len ) { <S2SV_ModEnd> return 0 ; <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> t ) { <S2SV_ModStart> 8 ) ; },0
812,<S2SV_ModStart> ) ) { if ( len < 0 ) goto out ; <S2SV_ModStart> 0 ) ; if ( ret_name_len < 1 ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart> FUT_ERROR ; },0
813,<S2SV_ModStart> { vpn_packet_t outpkt ; if ( len > sizeof outpkt. data ) return,1
814,<S2SV_ModStart> vmx_vpid_bitmap ) ; <S2SV_ModEnd> for ( msr <S2SV_ModStart> 0x83f ) ; <S2SV_ModEnd> if ( enable_ept,1
815,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,0
816,"<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1, 0 )",0
817,"<S2SV_ModStart> rc ; const VP9EncoderConfig <S2SV_ModEnd> * oxcf = <S2SV_ModStart>, rc -> avg_frame_bandwidth <S2SV_ModEnd> * oxcf -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> ) /",0
818,<S2SV_ModStart> ; if ( type == NULL ) return - 1 ; if (,0
819,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
820,<S2SV_ModStart> INDENT_INCR ; } if ( tbl -> indent < 0 ) tbl -> indent = 0 ; <S2SV_ModStart> -= INDENT_INCR ; if ( offset < 0 ) offset = 0 ;,1
821,"<S2SV_ModStart>, ss ) <S2SV_null> <S2SV_null> <S2SV_null>",0
822,"<S2SV_ModStart> : # line 113 <S2SV_ModEnd> ""re_grammar.c"" { RE_AST <S2SV_ModStart> } # line 1348 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""re_grammar.c"" { ( <S2SV_ModStart> } # line 1345 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 1337 <S2SV_ModEnd> ""re_grammar.c"" { incr_ast_levels ( ) ; <S2SV_ModStart> } # line 1372 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 1372 <S2SV_ModEnd> ""re_grammar.c"" { incr_ast_levels ( ) ; <S2SV_ModStart> } # line 1447 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 1348 <S2SV_ModEnd> ""re_grammar.c"" { incr_grammar.c"" break ; <S2SV_ModStart> : # line 1054 <S2SV_ModEnd> ""re_grammar.c"" { incr_ast_grammar.c"" break ; <S2SV_ModStart> : # line 1054 <S2SV_ModEnd> ""re_grammar.c"" { incr_ast_ast_levels ( ) ; <S2SV_ModStart> : # line 1447 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line",0
823,<S2SV_ModStart> return 0 ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { # endif <S2SV_ModStart> return ; } <S2SV_ModEnd> if ( mb,0
824,<S2SV_ModStart> ; } } next_path = 0 ;,0
825,<S2SV_ModStart> ; if ( key_is_positive ( key <S2SV_ModEnd> ) ) zap,1
826,"<S2SV_ModStart> ) -> filter ; memset ( & uf, 0, sizeof ( uf ) )",1
827,<S2SV_ModStart> int n ; # if CONFIG_VP9_HIGHBITDEPTH if ( vpx_read_buffer_buffer_sizeof ( pbi -> common. buffer_size ) > 0 ) { vpx_free ( pbi -> denoiser ) ; return ( 1 ) ; } if (,0
828,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> ) ; } exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
829,<S2SV_ModStart> -> peer. auth_capable = new -> peer. auth_capable ; new -> peer. auth_capable = NULL ;,0
830,<S2SV_ModStart> ) ; } if ( free_sb ) { <S2SV_ModStart> - EINVAL ; } <S2SV_ModStart> ) ; } },0
831,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( cc0 <S2SV_ModStart> % rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""PredictorEncodeTile"", ""%s"", ""(cc0%rowsize)!=0"" ) ; return 0 ; } <S2SV_ModEnd> while ( cc",1
832,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
833,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> RE_SCAN_LIMIT ) { size_t input_re_backwards_size = ( input, character_size, character_size, character_size <S2SV_ModEnd> ) ; int <S2SV_ModStart> = 0 ; size_t input_backwards_size = ( input, character_size <S2SV_ModEnd> ) ; } <S2SV_ModStart> = ( character_size <S2SV_ModEnd>, RE_SCAN_FLAGS_LIMIT ) <S2SV_ModStart> RE_SCAN_LIMIT ) { <S2SV_ModStart> RE_SCAN_LIMIT ) ; } <S2SV_ModStart> RE_SCAN_LIMIT ) { <S2SV_ModStart> RE_SCAN_LIMIT ) { <S2SV_ModStart> RE_SCAN_LIMIT ) ; } <S2SV_ModStart> match = ( input_re_word <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( input, character_size <S2SV_ModEnd> ) ; } <S2SV_ModStart> RE_SCAN_LIMIT ) { <S2SV_ModStart> match = ( input_re_forwards_char ( input, character_size, character_size, character_size <S2SV_ModEnd> ) ; }",0
834,"<S2SV_ModStart> intra_sse = UINT_MAX <S2SV_ModEnd> ; best_sse = <S2SV_ModStart>, best_rd_sse = UINT_MAX <S2SV_ModEnd>, best_mode, <S2SV_ModStart>, best_sse = UINT_MAX <S2SV_ModEnd>, best_sse = <S2SV_ModStart>, best_sse = UINT_MAX <S2SV_ModEnd> ; best_rd_sse = <S2SV_ModStart> this_sse = UINT_MAX ; # if CONFIG_PREDICTION_REFERENCE_PREDICTION_MODE <S2SV_ModEnd> best_predictor_mode = YV12_PREDICTION_PRED <S2SV_ModStart> this_REFERENCE_REFERENCE_PRED ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_PREDICTION_REFERENCE == KEY_FRAME ) { unsigned char * x = x -> denoiser_uvoffset ; unsigned char * target_data [ 0 ] = x -> plane [ 0 ] ; unsigned char * target_predictor = x -> block [ 0 ] ; unsigned char * target_predictor = x -> denoiser_predictor [ 0 ] ; unsigned char * target_predictor = 0 ; unsigned char * target_",0
835,"<S2SV_ModStart> svm, AC_VECTOR ) ; set_exception_intercept ( svm, DB_VECTOR",0
836,<S2SV_ModStart> h -> file = NULL <S2SV_ModEnd> ; if (,0
837,"<S2SV_ModStart> sst, const cdf_directory_t * root_storage <S2SV_ModEnd> ) { cdf_summary_info_header_t <S2SV_ModStart> break ; } if ( root_storage ) { <S2SV_ModStart> = cdf_clsid_to_mime ( root_storage -> d_storage_uuid <S2SV_ModEnd>, clsid2desc ) <S2SV_ModStart> - 2 ; } <S2SV_ModStart>, count, root_storage <S2SV_ModEnd> ) ; free",1
838,<S2SV_ModStart> IVD_STREAM_WIDTH_HEIGHT_NOT_SUPPORTED ; } if ( ( u1_pic_wd > MAX_MB_STREAM_STREAM_WIDTH ) { return WORD32 ; },0
839,<S2SV_ModStart> -> length ) ; if ( err ) return - EFAULT,1
840,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args <S2SV_ModStart> vpx_codec_err_t * ) { vpx_codec_alg_priv_t * const worker = ctx -> cfg ; VPX_CODEC_CODEC_INVALIDDATA ; ctx -> set_flags = ( VPX_CODEC_INVALIDX_PARAM ) ; if ( ctx -> svc. fmt == VPX_IMG_CODEC_INVAL ) { VPX_CODEC_ERROR_INVALID_PARAM ; return VPX_CODEC_INVALID ; } if ( ctx -> set_mode == VPX_CODEC_INVALID_PARAM ) { VPX_CODEC_INVALIDX_PARAM = ( ctx -> svc. fmt == VPX_CODEC_INVALID_PARAM ) return VPX_IMG_CODEC_PARAM ; } if ( cpi -> sz_id == VPX_CODEC_IN_ID ) return VPX_CODEC_",0
841,<S2SV_ModStart> if (! fq ) goto discard_fq ; <S2SV_ModEnd> if ( next <S2SV_ModStart> > 0 ) goto discard_fq ; <S2SV_ModEnd> if ( next <S2SV_ModStart> > 0 ) goto discard_fq ; <S2SV_ModEnd> } if ( <S2SV_ModStart> > 0 ) goto discard_fq ; <S2SV_ModEnd> - 1 ;,0
842,<S2SV_ModStart> { uint16 bitspersample = 1,0
843,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ; char * a = strlen ( a, ARCHIVE_ERR ) ; if ( <S2SV_ModStart> == NULL ) { archive_set_error ( & a, ARCHIVE_ERRNO_FILE_DATA ) ; <S2SV_ModStart> ; } } else if ( a -> flags & a -> flags ) { archive_set_error ( & a, ARCHIVE_ERR, ""%s"", a -> flags ) ; <S2SV_ModStart> == NULL ) { archive_set_error ( & a, ARCHIVE_ERRNO_FILE ) ; } <S2SV_ModStart> ) ; } free ( a ) ;",0
844,"<S2SV_ModStart> ; if ( safe_mount ( hostpath, path, 0, MS_BIND, NULL, rootfs -> path? rootfs -> mount : <S2SV_ModEnd> NULL )!=",1
845,"<S2SV_ModStart> new_data ) { struct binfo * inode_sb ; unsigned int i_len ; <S2SV_ModStart> ( inode -> i_sb && inode_sb -> i_sb == bs ) goto out ; if ( <S2SV_ModStart> ( inode -> i_sb > bs ) goto out_free_sb ; if ( inode -> i_sb ) { if ( inode_sb -> i_sb!= b_len ) goto out_free_sb ; } <S2SV_ModStart> ) ) ; if ( inode -> i_sb ) goto out_free_sb ; <S2SV_ModStart> ( inode ) ; if ( inode -> i_sb ) > inode -> i_sb -> i_len ) { goto out_free_sb ; } <S2SV_ModStart> ( inode ), i_sb -> i_sb ) > b_len ) goto out_sb ; if ( inode -> i_sb -> i_len ) goto out_free ; } <S2SV_ModStart> ( inode ) goto out ; if ( inode_sb -> i_sb ) > b_len ) goto out_sb ; if ( inode -> i_sb ) goto out_free_sb ; <S2SV_ModStart> ( inode ) ; if ( inode!=",0
846,<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ++ ) { # if CONFIG_VP9_HIGHBITDEPTH if,0
847,<S2SV_ModStart> data ) { size_t data_size ; <S2SV_ModStart> ; if ( data_end - data_size ) return - <S2SV_ModEnd> ; } <S2SV_null>,0
848,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_buf_line_array ) + 1_buf_array ) + 1, T1_BUF_SIZE",0
849,<S2SV_ModStart> mq ) ; <S2SV_ModEnd> return fq ;,0
850,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
851,<S2SV_ModStart> sub ) { return 0 ; } if (,0
852,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF <S2SV_ModStart> / 2 ; if (! <S2SV_ModStart>, cc ) ) return 0 <S2SV_ModStart> wc ) ; return 1 ;",1
853,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
854,"<S2SV_ModStart> ; int err ; struct ip_options_rcu * inet_opt <S2SV_ModStart>. s_addr ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt <S2SV_ModEnd>!= NULL &&",0
855,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
856,"<S2SV_ModStart> * mgr_hdl ; <S2SV_ModEnd> memset ( s_path <S2SV_ModStart> ( c_path ) <S2SV_ModEnd> ) ; switch <S2SV_ModStart> ( c_path, ""%s%s%d_C_XXXXXX"" <S2SV_ModEnd>, HSM_FM_SCK_PREFIX, <S2SV_ModStart> hdl -> instance <S2SV_ModEnd> ) ; if",1
857,<S2SV_ModStart> ; if ( pCmdData == NULL ) return - EINVAL ; if (,0
858,"<S2SV_ModStart> ""`%s\'"", option ) ; geometry = DestroyString ( page_geometry",0
859,"<S2SV_ModStart> ) ) ; memset ( & sk, 0, sizeof ( * sk ) ) ;",0
860,<S2SV_ModStart> ; if ( kfree ( key_data ) &&,0
861,"<S2SV_ModStart> OP_ENDCATCH ) ; emit ( J, F, OP_ENDTRY ) ;",1
862,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_row_idx <S2SV_ModStart> return ; } LIBXSMM_ASSERT ( 0!= l_row && 0!= l_column ) ;",1
863,<S2SV_ModStart> [ 1 ] <S2SV_ModEnd> ) ; return,0
864,<S2SV_ModStart> uint8 result ; uint32 <S2SV_ModEnd> length ; STREAM <S2SV_ModStart> ; STREAM s ; struct stream packet <S2SV_ModStart> return False ; packet = * s ;,0
865,"<S2SV_ModStart> ; cleanup : if ( status == NULL ) status = ""UNKNOWN_REASON"" <S2SV_ModEnd> ; if (",1
866,<S2SV_ModStart> } if ( ( c == '\\0' ) && ( c == '\\0' ) ) return ( ctxt ) ; if (! c ++ ) return ( ctxt ) ; if (,0
867,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> if ( ctxt,0
868,<S2SV_ModStart> * rsize >= 18 <S2SV_ModEnd> && rdesc [,1
869,<S2SV_ModStart> & new_map ) <S2SV_ModEnd> ) goto out,0
870,<S2SV_ModStart> goto invalid ; else { if (! data ) return - EINVAL ;,0
871,"<S2SV_ModStart> sr ) { <S2SV_ModEnd> uint16_t StructSize ; <S2SV_ModStart> ) ; } smb_ofile_flush ( sr, <S2SV_ModEnd> sr -> fid_ofile <S2SV_ModStart> sr -> fid_ofile <S2SV_ModEnd> ) ; (",1
872,,0
873,<S2SV_ModStart> 1 ) { memcpy <S2SV_ModEnd> ( ( pbi <S2SV_ModStart> 8 ) { memcpy <S2SV_ModEnd> ( ( ( <S2SV_ModStart> 1 ) ; memcpy <S2SV_ModEnd> ( ( pbi,0
874,"<S2SV_ModStart> addrtype = TIPC_ADDR_ID ; memset ( & addr -> addr, 0, sizeof ( addr -> addr ) )",1
875,<S2SV_ModStart> ( user_alloc && mem -> memory_size,0
876,"<S2SV_ModStart> 6 ) ) { MATLAB_KO : clone_info = DestroyImageInfo ( clone_info ) ; <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart> ""ImproperImageHeader"" ) ; }",0
877,<S2SV_ModStart> } if ( tmp_line_len >= 1 && <S2SV_ModStart> ; if ( tmp_line_len >= 1 && <S2SV_ModStart> ; } } \\\n} <S2SV_ModEnd> if ( strncasecmp,1
878,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> char * p <S2SV_ModStart> u8 * p <S2SV_ModEnd> ; const char * <S2SV_ModStart> ) { int len = ( UINT64 ) - 1 ; if ( p == '\\0' ) { return NULL ; } char * p = _PyMemcpy ( s, p ) ; if (! buf ) return NULL ; <S2SV_ModStart> ) ; } return NULL <S2SV_ModEnd> ; } <S2SV_null>",0
879,"<S2SV_ModStart> { if ( user_sid_size > ( record_size - 4 ) ) { libcerror_error_set ( error, LIBCERROR_RUNTIME_OUT_VALUE_BOUNDS, LIBCERROR_RUNTIME_OF_BOUNDS, LIBCERROR_RUNTIME, LIBCERROR_DOMAIN_RUNTIME_OUT_VALUE_VALUE_BOUNDS <S2SV_ModEnd> ) ; if <S2SV_ModStart> 0 ) { if ( ( record_data_size > ( record_data_size ) ) { libcerror_set ( error, LIBCERROR_ERROR_RUNTIME, LIBCERROR_RUNTIME_RUNTIME, LIBCERROR_RUNTIME_RUNTIME, LIBCERROR_DOMAIN_RUNTIME, LIBCERROR_ERROR_RUNTIME_RUNTIME, LIBCERROR_RUNTIME_OUT ) ; if ( data_size > ( record_data_size ) ) { libcerror_error_set ( error, LIBCERROR_RUNTIME_RUNTIME, LIBCERROR_RUNTIME_RUNTIME, LIBCERROR_ERROR_RUNTIME, LIBCERROR_",0
880,"<S2SV_ModStart> WaveHeader WaveHeader ; int format_chunk = 0 ; <S2SV_ModStart>, format ; if ( format_chunk ++ ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",1
881,"<S2SV_ModStart> ; uint16_t numChannels = 0 <S2SV_ModStart> numChannels < 1 || numChannels > 256 <S2SV_ModStart> ) ) { if (! config -> num_channels ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
882,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr ) ;,0
883,<S2SV_ModStart> ~ SNDRV_TIMER_IFLG_RUNNING ; list_del_init ( & timeri -> ack_list ) ; list_del_init ( & timeri -> active_list ) ;,1
884,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> const char * <S2SV_ModStart> = NULL ; size_t <S2SV_ModEnd> len = 0 <S2SV_ModStart> ) ) { <S2SV_ModEnd> printf ( st <S2SV_ModStart> ) ; },0
885,<S2SV_ModStart> else if ( anope_flags_compat && <S2SV_ModStart> else if ( anope_flags_compat && <S2SV_ModStart> else if ( anope_flags_compat &&,1
886,<S2SV_ModStart> -> buffer ; if (! ctx -> gf128 ) return - ENOKEY ;,1
887,"<S2SV_ModStart> ; if ( strcmp ( sub_demuxer -> name, ""srt"" ) && strcmp ( sub_demuxer -> name, ""ass"" ) ) goto error ; if (",1
888,"<S2SV_ModStart> ; if ( krb5_data_len < sizeof ( struct rbuf ) ) { krb5_principal_data ( krb, KRB5_ERR, ""Invalid <S2SV_blank> data <S2SV_blank> data <S2SV_blank> len"" ) ; return - 1 ; } if (",0
889,"<S2SV_ModStart> write_bit ( vpx_write_bit <S2SV_ModEnd> * w ) <S2SV_ModStart> w ) { vpx_write_bit <S2SV_ModEnd> ( w,",0
890,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; } ret",1
891,<S2SV_ModStart> dptr ++ = ROSE_CALL_REQ_ADDR_LEN_VAL <S2SV_ModEnd> ; memcpy (,1
892,<S2SV_ModStart> = new_ns ; new_ns -> mounts ++ ;,1
893,<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi ->,0
894,<S2SV_ModStart> ; zip_object_handlers. get_gc = php_zip_get_gc ; zip_object_handlers.,1
895,<S2SV_ModStart> return - EFAULT ; if <S2SV_ModEnd> mem -> iova <S2SV_ModStart> mem -> length > <S2SV_ModEnd> mem -> iova,0
896,"<S2SV_ModStart> = 0 ; ND_TCHECK2 ( * dp, sizeof ( * ni6 ) ) ; <S2SV_ModStart> ) + 4 ; ND_TCHECK ( cp [ 0 ] )",1
897,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",1
898,<S2SV_ModStart> sent = 0 <S2SV_ModEnd> ; smb_msg.,1
899,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> buffer_pipe_buf_get ( struct <S2SV_ModStart> -> private ; if ( ref -> ref > INT_MAX / 2 ) return false ; <S2SV_ModStart> ref ++ ; return true ;,1
900,<S2SV_ModStart> fs -> clusters + <S2SV_ModEnd> 1 ) get_fat,1
901,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
902,<S2SV_ModStart> sk_nulls_node ) ; sk_nulls_node_init ( & sk -> sk_node ) ;,0
903,<S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> } ps_dec ->,0
904,<S2SV_ModStart> (! mm ||! mm -> env_end,1
905,"<S2SV_ModStart> inode * inode, int relocated ) { <S2SV_ModEnd> int inode = <S2SV_ModStart> inode, inode <S2SV_ModEnd> ) ; } <S2SV_ModStart>, inode, flags <S2SV_ModEnd> ) ; }",0
906,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int group = <S2SV_ModStart> -> inotify_data. group <S2SV_ModEnd> ; group = <S2SV_ModStart> -> inotify_data. inotify_data. user = NULL <S2SV_ModEnd> ; group -> <S2SV_ModStart> -> inotify_data. inotify_devs = inotify_data. user -> inotify_devs ) ; atomic_return ( & group -> inotify_devs ) ; if ( group -> inotify_data. user -> inotify_data. inotify_data. user -> inotify_devs ) { fprintf ( & group -> inotify_data. user -> inotify_devs ) ; return ER <S2SV_ModEnd> ; } },0
907,<S2SV_ModStart> [ p ] && in -> linesize [ p ],1
908,"<S2SV_ModStart> bufsize ; } if ( pcount > MaxAllocSize / sizeof ( Pairs ) ) ) { errmsg ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> data <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", __func__, pcount, ( pcount ) ) ) ; }",0
909,<S2SV_ModStart> term ) ; if ( screen -> buffer == NULL ) return NULL,0
910,"<S2SV_ModStart> SCALAR_VALUE ) { coerce_reg_to_size ( & <S2SV_ModStart> [ value_regno ], size <S2SV_ModEnd> ) ; }",1
911,<S2SV_ModStart> } bufp += stripsize <S2SV_ModEnd> ; } return,0
912,<S2SV_ModStart> base_name ) ; char need_to_append_dot ; struct search_domain * dom ; if (! base_len ) return NULL ; <S2SV_ModEnd> need_to_append_dot = base_name <S2SV_ModStart> : 1 ; <S2SV_ModEnd> for ( dom,1
913,<S2SV_ModStart> ) ) ; return err <S2SV_ModEnd> ; } <S2SV_null>,0
914,<S2SV_ModStart> goto out ; <S2SV_ModEnd> if (!,0
915,"<S2SV_ModStart> number_colormaps, number_planes_filled <S2SV_ModStart> ( number_planes_filled, number_planes_filled <S2SV_ModEnd> ) ; number_planes_filled <S2SV_ModStart> ( number_planes_filled, number_planes_filled <S2SV_ModEnd> )!= ( <S2SV_ModStart> -> rows * number_planes_filled <S2SV_ModEnd> )!= 0",0
916,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> UINT32 originalSize ; if ( context -> priv -> priv, context ) < 0 ) return FALSE ; <S2SV_ModStart> < context ) { if (! context -> priv -> priv -> priv -> PlaneBuffersLength ) return FALSE ; } <S2SV_ModStart> < 0 ) { if (! context -> priv -> priv -> priv -> PlaneBuffersLength ) return FALSE ; } else { if ( context -> priv -> priv -> PlaneBuffersLength < originalSize ) return FALSE ; } else { if ( context -> priv -> priv -> PlaneBuffersLength < originalSize ) return FALSE ; } else { if ( context -> priv -> priv -> priv -> PlaneBuffersLength < originalSize ) return FALSE ; } else { if ( context -> priv -> priv -> priv -> PlaneBuffersLength < originalSize ) return FALSE ;",0
917,<S2SV_ModStart> policy ) { if (! inode_owner_or_capable ( inode ) ) return - EACCES ;,1
918,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } else {,0
919,"<S2SV_ModStart>. key_data, & key_len <S2SV_ModEnd> ) ; if",0
920,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) -> iif ) ; * addr_len = sizeof ( * sin6,1
921,"<S2SV_ModStart> ) ) ) { applog ( LOG_WARNING, ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> header <S2SV_blank> to <S2SV_blank> header_bin, <S2SV_blank> got <S2SV_blank> %s"", __func__, header ) ; pool_failed ( pool ) ; return false ; } <S2SV_ModEnd> cb1 = (",0
922,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
923,"<S2SV_ModStart> size ) { size_t res ; if ( check_mul_overflow ( num, size, & res ) ) abort ( ) ; <S2SV_ModEnd> = malloc ( <S2SV_ModStart> sizeof ( res <S2SV_ModEnd> ) ) ;",0
924,<S2SV_ModStart> ; io_context ( task <S2SV_ModEnd> ) ; },0
925,<S2SV_ModStart> obj ) { Py_RETURN_NONE <S2SV_ModEnd> ; } as,0
926,"<S2SV_ModStart> ) ; } if (! dev -> desc. bNumEndpoints ) { dev_err ( & dev -> dev, ""too <S2SV_blank> short <S2SV_blank> 0)\\n"" ) ; return - ENODEV ; }",0
927,<S2SV_ModStart> * arg ; <S2SV_ModEnd> struct fd_event_init ( <S2SV_ModStart> arg ) ; mutex_lock ( & arg ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>,0
928,<S2SV_ModStart> sacked_out ) ; if ( WARN_ON_ONLY ) return ;,0
929,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode ( VP9_COMMON <S2SV_ModStart> * cm, MACROBLOCKD * xd, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> ) { FRAME_COUNTS * counts = vpx_read_bit <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> intra_mode_mode_prob ) ; FRAME_COUNTS * counts = xd ->",0
930,<S2SV_ModStart> ) { return false <S2SV_ModEnd> ; } <S2SV_null>,0
931,<S2SV_ModStart> -> server ; <S2SV_ModEnd> if ( ctx <S2SV_ModStart> ) ; } if ( ctx -> data == NULL ) return - EINVAL ;,0
932,"<S2SV_ModStart> c -> tile_width <S2SV_ModEnd>, 16 ) <S2SV_ModStart>, 16 ) * 3",1
933,"<S2SV_ModStart> ; if ( rkey_set <S2SV_ModEnd> ( key,",0
934,,1
935,<S2SV_ModStart> ) ; } <S2SV_ModEnd> return s ;,0
936,"<S2SV_ModStart> p ) { return <S2SV_ModEnd> chdlc_print ( ndo <S2SV_ModStart>, p, h -> len <S2SV_ModEnd> ) ; }",1
937,<S2SV_ModStart> (! rc <S2SV_ModEnd> && tcon ),1
938,<S2SV_ModStart> -> len && SKB_EXT_ERR ( skb ) -> opt_stats <S2SV_ModEnd> ) put_cmsg (,1
939,"<S2SV_ModStart> ) ) ; raptor_sax2_set_option ( rdf_parser -> sax2, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES, NULL, NULL, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES ) ;",0
940,<S2SV_ModStart> ; if ( SSL_C_IS_UNEXPECTED_MESSAGE ) { if (,0
941,<S2SV_ModStart> { return SECURE_ELEMENT_ERROR_NPE ; } if ( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE ) { return SECURE_ELEMENT_ERROR_BUF_SIZE,1
942,"<S2SV_ModStart> + 1 ; if ( s -> max_settings == NGHTTP2_CMD_SETTINGS ) { if ( nghttp2_session_entries > session -> max_settings ) { if ( ssize_t ) return NGHTTP2_CALM ; } if ( nghttp2_session_entries > session -> max_session_reason ) { if ( ssize_t ) ( ssize_t ) session -> max_session_reason = NGHTTP2_ENALM ; } else { if ( nghttp2_session_entries > session -> max_nghttp2_reason ) { rv = nghttp2_session_set_reason ( s, NGHTTP2_INVALID_SETTINGS ) ; if ( ssize_t ) ssize_t ) { if ( nghttp2_is_fatal ( s, NGHTTP2_UNKERN_SETTIONS ) ) { rv = nghttp2_session_set_reason ( s, session, session, session -> max_entries ) ; }",0
943,<S2SV_ModStart> = ucounts ; new_ns -> mounts = 0 ; new_ns -> pending_mounts = 0 ;,1
944,"<S2SV_ModStart> += dif ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
945,<S2SV_ModStart> ] ) ; if ( x86_pmu == 0 ) return - ENOMEM ;,0
946,"<S2SV_ModStart> ; unsigned int limit_end = r -> begin < actual_size? r -> end : actual_size ; unsigned int limit_r_end = limit_r_begin ( r, actual_size ) ; unsigned int limit_r_end = ( r -> end < actual_size? r -> end : actual_size ) ;",0
947,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
948,"<S2SV_ModStart> struct llc_pktinfo info ; memset ( & info, 0, sizeof ( info ) )",1
949,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int i ; vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> int i, vpx_tree_prob <S2SV_ModEnd> ) { const <S2SV_ModStart> int i ; vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> p ) { vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> p ) ; vpx_write_bit <S2SV_ModEnd> ( w,",0
950,"<S2SV_ModStart> write_buffer ) { vpx_write_bit_buffer <S2SV_ModEnd> ( wb, <S2SV_ModStart> write_buffer ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
951,<S2SV_ModStart> * dev ) <S2SV_ModEnd> return - EINVAL,0
952,"<S2SV_ModStart> ndescriptor ; int num_descriptors ; size_t offset = offsetof ( struct hid_descriptors, hdesc -> bLength ) ; if ( hdesc -> bLength < sizeof ( struct hid_descriptor ) ) { dev_hid ( ""%s: <S2SV_blank> descriptors <S2SV_blank> is <S2SV_blank> too <S2SV_blank> short\\n"", hdesc -> bLength ) ; return - EINVAL ; } <S2SV_ModStart> ENODEV ; } <S2SV_ModStart> hdesc -> bLength < sizeof ( struct hid_descriptor ) n <S2SV_ModEnd> ; n ++",0
953,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_printlen ) {,0
954,<S2SV_ModStart> ) exit_io_context ( tsk ) ; group_dead = 1 ; if ( group_dead ) get_dead ( tsk ) ; group_dead ( tsk ) ; group_put ( tsk ) ; group_dead = group_dead ( tsk ) ; module_put ( tsk ) ; module_put ( tsk ) ; if ( group_dead ) get_dead ( tsk ) ; group_dead ( tsk ) ; group_free ( tsk ) ; group_dead ( tsk ) ; module_put ( tsk ) ; group_dead = 0 ; if ( tsk -> binf_dead ) get_thread ( tsk ) ; exit_put ( tsk ) ; tsk -> binf_dead = 0 ; tsk -> binf_dead = 1 ; if ( tsk -> group_dead ) get_thread ( tsk ) ; if ( group_dead ) get_dead ( tsk -> binfmt -> group_dead ) ; exit_put ( tsk ) ; group_dead ( tsk ) ; group_put ( tsk ) ; if ( tsk -> binfmt -> binfmt -> binfmt ->,0
955,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void * <S2SV_ModStart> data ) { <S2SV_ModEnd> add_preferred_base_object ( name <S2SV_ModStart> |= OBJECT_ADDED ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
956,<S2SV_ModStart> = 0 ; if (! opts ) break ;,0
957,<S2SV_ModStart> ) ; goto err <S2SV_ModEnd> ; } if,0
958,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> x3 ) { tran_low_t i ; tran_low_t <S2SV_ModEnd> * x0x ; <S2SV_ModStart> ] ) ; tran_low_t <S2SV_ModEnd> * d1 ; <S2SV_ModStart> ++ ) { if ( x0 ) x0x0x0 ) { goto out ; } <S2SV_ModStart> x0 ) ; x2 = ( x1, x1, x1 ) ; if ( x0x2 ) { if ( w1 -> y_row [ 0 ] == 0 ) { w1 = ( x1 -> y_len - 1 ) ; tran_low_t [ 0 ] = ( x1_low_t ) - 1 ] = ( tran_low_t ) - ( tran_low_t ) - 1 ) ; } else { x1 = ( tran_low_t ) ; <S2SV_ModStart> 0x2 ] = ( tran_low_t ) ; x1 = ( x0 [ 0 ] = ( tran_low_t ) - 1 ) ; } else { if ( tran_low_t ) ret = ( x",0
959,<S2SV_ModStart> ( tag == ASN1_EOC <S2SV_ModEnd> ) { if <S2SV_ModStart> <= 0x7f ) goto check_length ; <S2SV_ModStart> goto data_overrun_error ; <S2SV_ModEnd> if ( check,0
960,<S2SV_ModStart> ) val ; <S2SV_ModEnd> memset ( ptr,1
961,<S2SV_ModStart> mnt ) { return 0 ; },0
962,"<S2SV_ModStart> PHP_SHA512_CTX context ; if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_SHA256_CTX context ; } if ( error < sizeof ( digest ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; return FAILURE ; } } return FAILURE ; } <S2SV_ModStart> PHP_CTX context ; } if ( error < sizeof ( digest ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } return FAILURE ; } } <S2SV_ModStart> PHP_SHA256_CTX context ; if ( error < sizeof ( digest ) { spprintf ( error ) ; if ( error ) { if ( error ) { if ( error ) { if ( error < sizeof ( error ) ) { spprintf ( error ; } return FAIL_MD5_CTX context ; } } return FAIL_CTX context ; } } return FAIL_CTX",0
963,<S2SV_ModStart> ] <= max && value [ n ] - min < field -> maxusage <S2SV_ModStart> && field -> value [ n ] - min < field -> maxusage && field -> <S2SV_ModStart> <= max && value [ n ] - min < field -> maxusage &&,1
964,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
965,<S2SV_ModStart> if ( argReg > <S2SV_ModEnd> regsz ) { <S2SV_ModStart> regsz ) { return ;,1
966,"<S2SV_ModStart> ) ) ; if ( req_is_zero ( req, & rb_val ) ) { <S2SV_ModStart>, ) ; } else { <S2SV_ModStart> ) ; } }",0
967,"<S2SV_ModStart> 0 ) ; args -> rmtvaluelen <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> -> i_mount, args -> rmtvaluelen <S2SV_ModEnd> ) ; if <S2SV_ModStart> -> valuelen = args -> rmtvaluelen <S2SV_ModEnd> ; return 0 <S2SV_ModStart> -> valuelen < args -> rmtvaluelen ) { args -> valuelen = args -> rmtvaluelen <S2SV_ModEnd> ; return XFS_ERROR <S2SV_ModStart> -> valuelen = args -> rmtvaluelen <S2SV_ModEnd> ; } return",1
968,<S2SV_ModStart> info = NULL <S2SV_ModEnd> ; if (,0
969,<S2SV_ModStart> 0 ) { const int i ; <S2SV_ModStart> ) ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
970,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) &&! test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) &&",1
971,"<S2SV_ModStart> ) ) ; if ( LTXTQUERY_TOO_BIG ( state. num, state. sumlen ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""ltxtquery <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large"" ) ) ) ;",1
972,<S2SV_ModStart> ; int new_buffer = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> cols ) ) return NULL,0
973,<S2SV_ModStart> ; if (! EXT4_SB ( inode -> i_sb ) -> s_journal <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd>! handle ),1
974,"<S2SV_ModStart> len ) { char * val ; size_t len = 0 ; <S2SV_ModStart> 0 ) { if ( strlen ( str ) == '\\0' ) { return NULL ; } <S2SV_ModStart> == '\\0' ) { if ( val == '\\0' ) { break ; } <S2SV_ModEnd> if ( len <S2SV_ModStart> == '\\0' ) { val = str ; break ; } <S2SV_ModEnd> } else { <S2SV_ModStart> ) ; } <S2SV_ModEnd> } else { <S2SV_ModStart> == '\\0' ) { val = strcpy ( val, len ) ; return 0 ; } <S2SV_ModStart> == '\\0' ) { if ( val ) { if ( str == - 1 ) { if ( strcmp ( str, ""Bad <S2SV_blank> a <S2SV_blank> a <S2SV_blank> to <S2SV_blank> "" ) ) ; return NULL ; } } } <S2SV_ModEnd> return 0 ;",0
975,"<S2SV_ModStart> ( f, ""PG%31[ <S2SV_blank> \\t]%c%31[ <S2SV_blank> \\t]%31[ <S2SV_blank> \\t]%31[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp,",0
976,"<S2SV_ModStart> ( size < 5 + 1 <S2SV_ModEnd> ) ASSERT ( <S2SV_ModStart> ) ; } if ( size < 1 ) { size ++ ; memcpy ( buf, ""%s"", & buf, & size ) ; ASSERT ( result!= NULL ) ; ASSERT ( strlen ( buf ) == 0 ) ; if ( result!= NULL ) free ( buf ) ; }",0
977,<S2SV_ModStart> ) { return <S2SV_ModEnd> ; } if,0
978,"<S2SV_ModStart> len ) { strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, len <S2SV_ModEnd> ) ; strlen <S2SV_ModStart> ( str, len <S2SV_ModEnd> ) ; str",0
979,"<S2SV_ModStart> g ) { size_t g. hname = strlen ( g. inf ) ; if ( <S2SV_ModEnd> g. g. <S2SV_ModStart> g. g. hname ) == 0 ) { sufx = g. inf = g. inf = g. inf ; } else if ( <S2SV_ModEnd> g. g. <S2SV_ModStart> g. hname ) memcpy ( g. inf, g. inf ) ; g. outf = g. hname + strlen ( g. g. inf ) ; if ( g. strlen ( g. inf ) == 0 ) g. hname = g. hlen ( g. hname + strlen ( g. inf ) <S2SV_ModEnd> g. outf <S2SV_ModStart> g. hname ) ; if ( g. fname == 0 ) { g. stderr ( g. hname ) ; g. outf = g. hname + g. hlen ( g. hname + strlen ( g. inf, g. hname ) + len ) ; if ( g. outf == 0 ) memcpy ( g. inf, GFP_NOFSZERO ) ; } else if ( g. hname == 0 ) memcpy ( g. inf, g",0
980,,1
981,<S2SV_ModStart> * output ; MagickBooleanType status ; <S2SV_ModStart> ) ; } status = MagickTrue ; <S2SV_ModStart> i ++ ) { <S2SV_ModEnd> input = fopen_utf8 <S2SV_ModStart> input ) ) if ( status == MagickFalse ) return MagickFalse ; <S2SV_ModStart> ) ; } status = MagickFalse ; <S2SV_ModStart> ( output ) fclose ( ) ;,0
982,,0
983,<S2SV_ModStart> bdev ) ) { <S2SV_ModEnd> return ret ;,0
984,"<S2SV_ModStart> passwd * pwd, const char * prefix <S2SV_ModStart> = NULL ; <S2SV_ModEnd> pw_init ( ) <S2SV_ModStart> & tmpname, ""/etc"", prefix <S2SV_ModEnd> ) ) ==",1
985,,0
986,<S2SV_ModStart> s1 ) { if ( s1 == strlen ( s1 ) ) return NULL ;,0
987,<S2SV_ModStart> jid ) { Jid * my_jid = jid * <S2SV_ModStart> jid ) ; const char * my_jid = jid * my_jid = jid_jid_jid ( stanza_get_jid ( stanza_create ( stanza_jid ) ) ; if ( stanza_create ( stanza )!= 0 ) { Jid ( stanza_jid -> stanza_create ( stanza_from ) ) ; return TRUE ; },0
988,<S2SV_ModStart> cnt ) ; if ( s == NULL ) return - 1 ;,0
989,<S2SV_ModStart> * dev ) <S2SV_ModEnd> return - EINVAL,0
990,"<S2SV_ModStart> ( arg2, ""SV_null> <S2SV_null> <S2SV_null>",0
991,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; BT_DBG (,1
992,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
993,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } } },0
994,<S2SV_ModStart> = e_error ; if ( IMPEG2D_UNSUPPORTED_DIMENSIONS == 0 ) ps_op -> u4_reinit_stream -> u4_max_width = 0 ;,0
995,<S2SV_ModStart> * zone ; size_t tilemap_size ; <S2SV_ModStart>. height ; tilemap_size = <S2SV_ModEnd> x_size * y_size <S2SV_ModStart> struct map_tile ) ; if ( x_size == 0 || tilemap_size / x_size / sizeof ( struct map_tile )!= y_size ||! ( tilemap = malloc ( tilemap_size,1
996,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_printroute ( netdissect_options <S2SV_ModStart> ) ; return ( 0 ) <S2SV_ModStart>, length ) ) ; ND_TCHECK ( cp [ len ] <S2SV_ModStart> ) ; } return ( 0 ) ;",0
997,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> print_string ) { if (! str_safe_string ( val ) ) return 0 ; return NULL ;,0
998,"<S2SV_ModStart>, sizeof ( * ) <S2SV_ModEnd> ) ; }",0
999,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> + 1, ""prestring=%490s"" <S2SV_ModEnd>, buf ) <S2SV_ModStart> ) ) > L_BUFSIZE <S2SV_ModEnd> + 1 ) <S2SV_ModStart> + 1, ""protos=%490s"" <S2SV_ModEnd>, buf ) <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd>, ""protos=%490s"", <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd>, ""protos=%490s"",",0
1000,<S2SV_ModStart> if ( chunk_num >= <S2SV_ModEnd> chm -> num_chunks,1
1001,"<S2SV_ModStart>! validate_event ( event -> pmu, <S2SV_ModStart>! validate_event ( event -> pmu, <S2SV_ModStart>! validate_event ( event -> pmu,",1
1002,"<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1 ), NULL ) ) return 0 ;",0
1003,<S2SV_ModStart> studio_profile ) { <S2SV_ModEnd> if (!,1
1004,<S2SV_ModStart> nsops < 1 || nsops > SEMOPM,1
1005,<S2SV_ModStart> ; i += 4 <S2SV_ModEnd> ( s [,0
1006,<S2SV_ModStart> < INDIRECT_BLOCKS ) { <S2SV_ModStart> ] ) ; },1
1007,"<S2SV_ModStart> i ) { if ( i -> width > i -> parent -> width ) fprintf ( i -> width ) - 1 ) ; if ( i -> log ) fprintf ( NGIFLG_NO_FILE, ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %d <S2SV_blank> file <S2SV_blank> %d\\n"", i -> width ) ; if ( i -> width > i -> height ) { fprintf ( i -> log ) ; return - 1 ; } if ( i -> log ) fprintf ( NGIFLG_NO_FILE ) ; if ( i -> log ) fprintf ( NGIFLG_NO_FILE ) ; if ( i -> parent -> parent -> width > i -> width ) if ( i -> log ) fprintf ( i -> log, ""Invalid <S2SV_blank> file <S2SV_blank> position\\n"" ) ; return - 1 ; }",0
1008,<S2SV_ModStart> >> 2 ; if ( q + o >= e ) goto out ;,0
1009,<S2SV_ModStart> ++ ) { <S2SV_ModEnd> if ( bytes_matched <S2SV_ModStart> max_bytes_matched ) break ;,0
1010,"<S2SV_ModStart> len ) { assert ( len > 8 ) ; <S2SV_ModStart> case LEX_EOF : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""EOF"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_ID : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""EOF"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_STR : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""EOF"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_STR : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""FLOAT"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_STR : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""STRING"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_STR : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""FLOAT"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_TEMPLATE_LITERAL : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""FLOAT"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_STR : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""FLOAT"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> str <S2SV_ModEnd> ) ; return",0
1011,"<S2SV_ModStart> mnt_instance ) ; if ( unlikely (! list_empty ( & mnt -> mnt_mounts ) ) ) { struct mount * p, * tmp ; list_for_each_entry_safe ( p, tmp, & mnt -> mnt_mounts, mnt_child ) { umount_mnt ( p ) ; } }",1
1012,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> write_bit ) { vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> w ) ; vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> 8 ) ; vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> w, w ) ; vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 8 ) ; vpx_write_bit <S2SV_ModEnd> ( w,",0
1013,,1
1014,<S2SV_ModStart> goto not_found ; if ( e - p > HOST_NAME_MAX - 1 ) goto not_found ;,0
1015,<S2SV_ModStart> ; int err <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> uint32_t pos ; if ( inode -> i_size > inode -> i_sb -> s_blocksize ) { err = - ENAMETOOLONG ; goto out_unmap ; } <S2SV_ModStart>! bh ) { err = - EIO ; goto out_unlock_inode ; } <S2SV_ModEnd> symlink = bh <S2SV_ModStart> return 0 ; out_unlock_inode <S2SV_ModEnd> : up_read ( <S2SV_ModStart> page ) ; out_unmap :,1
1016,<S2SV_ModStart> else if ( cpu_has_secondary_exec_ctrls ( ) && ( vmcs_read32 ( SECONDARY_VM_EXEC_CONTROL ) & SECONDARY_EXEC_VIRTUALIZE_X2APIC_MODE ) <S2SV_ModEnd> ) { if,1
1017,"<S2SV_ModStart> if ( ent == NULL ) { st = KRB5_KDB_NOENTRY ; <S2SV_ModEnd> goto cleanup ; <S2SV_ModStart> cleanup ; } st = populate_policy ( context, ld, ent, pol_name, * policy ) ;",1
1018,<S2SV_ModStart> 1 ) ; if ( ret == 0 ) { return EINVAL ; },0
1019,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ] ; int bhdr ; unsigned int bhdr ; <S2SV_ModStart> -> bhdr ; unsigned int i_offset ; unsigned int bhdr = 0 ; <S2SV_ModStart> ) ; if ( unlikely ( ip_bh -> bhdr ) ) return - EINVAL ;,0
1020,"<S2SV_ModStart> ) ) { if ( psf -> header. indx + count > 0 ) { <S2SV_ModStart> psf -> header. len = psf_bump_header_allocation ( psf, 0, <S2SV_ModStart> ) ) ; break ; }",0
1021,<S2SV_ModStart> ; if ( d -> msg_len > sizeof ( d -> msg ) ) return - EINVAL ; if ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( i,1
1022,"<S2SV_ModStart> break ; } memset ( & cinfo, 0, sizeof ( cinfo ) ) ;",1
1023,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
1024,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0644 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; return",0
1025,"<S2SV_ModStart> int num_items_scanned ; guint pkt_len ; int <S2SV_ModEnd> pktnum, hr <S2SV_ModStart> + 64, ""LEN=%9u"" <S2SV_ModEnd>, & pkt_len <S2SV_ModStart> FALSE ; } if ( pkt_len > WTAP_MAX_PACKET_SIZE ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup_printf ( ""toshiba: <S2SV_blank> File <S2SV_blank> has <S2SV_blank> %u-byte <S2SV_blank> packet, <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> maximum <S2SV_blank> of <S2SV_blank> %u"", pkt_len, WTAP_MAX_PACKET_SIZE ) ; return FALSE ; } <S2SV_ModStart> ( buf, pkt_len <S2SV_ModEnd> ) ; pd",0
1026,<S2SV_ModStart> ; int err = 0 ; msg -> msg_namelen,1
1027,"<S2SV_ModStart> ; if ( zend_hash_find <S2SV_ModEnd> ( ht,",1
1028,<S2SV_ModStart> if (! err <S2SV_ModEnd> ) return 0,0
1029,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> io_cleanup ( io <S2SV_ModStart> ; } io -> io_cleanup = io -> io_cleanup ;,0
1030,"<S2SV_ModStart> 1 ) ; if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf = opipe",0
1031,<S2SV_ModStart> p -> tokenpos >= ( <S2SV_ModEnd> p -> tokenlen <S2SV_ModStart> p -> tokenlen - 1 ),1
1032,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) { return vpx_read_bit <S2SV_ModEnd> ( r, <S2SV_ModStart> ) { case MODE_INFO : if (! vpx_write_bit <S2SV_ModEnd> ( bsize, <S2SV_ModStart> ) ) { return vpx_write_bit <S2SV_ModEnd> ( bsize, <S2SV_ModStart> ) ) ; return result <S2SV_ModEnd> ; } <S2SV_null>",0
1033,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
1034,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ; },0
1035,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
1036,"<S2SV_ModStart> ( kz, EINVAL <S2SV_ModEnd>, NULL,",0
1037,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
1038,"<S2SV_ModStart> -> stratum_port ; snprintf ( address, 254 <S2SV_ModEnd>, ""%s:%s"",",1
1039,"<S2SV_ModStart> } if (! page_name_len ( page ) ) { fput_line ( ""%s"", page ) ; return NULL ; } if (!",0
1040,<S2SV_ModStart> + i ; unsigned int actual_size = r -> begin < actual_size? r -> begin : actual_size ; int limit_end = r -> begin < actual_size? r -> end : actual_size ; unsigned int limit_end =,0
1041,<S2SV_ModStart> head -> iov_base ; if ( hdr > head -> iov_len ) return 0,1
1042,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> cl_nodes_lock ) ; o2nm_unlock_subsystem ( ) ;,1
1043,"<S2SV_ModStart> ; if ( vpx_reader <S2SV_ModEnd> ( & i2 -> <S2SV_ModStart> ) ) ; # if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModStart> ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> buf_buf -> buf [ 2 ]!= NULL ) { vc_err ( & vpx_buf -> dev, ""%s <S2SV_blank> of <S2SV_blank> buffer <S2SV_blank> %d\\n"", __func__ ) ; return AVERROR_INVALIDTH ; } <S2SV_ModStart> ++ ) { vpx_free ( vc2 ) ; return vpx_free ( vc2 ) ;",0
1044,<S2SV_ModStart> size ) { size_t res ;,0
1045,<S2SV_ModStart> ; ssize_t count ; if ( bytes == 0 || items == 0 ) return 0,1
1046,<S2SV_ModStart> -> serviceId = EXTRACT_16BITS <S2SV_ModEnd> ( & rxh,0
1047,"<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key, 0 ) ; if ( ret < 0 ) goto error2 ;",0
1048,<S2SV_ModStart> ) ) ; if ( req -> sip == NULL ) goto cleanup ;,0
1049,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( sb ->,0
1050,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1051,<S2SV_ModStart> 0 ) ; hrtimer_try_to_cancel <S2SV_ModEnd> ( & stime,1
1052,"<S2SV_ModStart> ONIG_INFINITE_DISTANCE ) { if ( p - str < reg -> dmax ) { * low = ( UChar * ) str ; if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; } else { <S2SV_ModStart> low ) ; }",0
1053,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> case L2CAP_CONNECT_MODE_CONN2CAP_MODE_ERRING : if ( pi -> flags & L2CAP_CONTEXT * pi -> flags &= L2CAP_CONF_MODE ) { struct l2cap_mode ; l2cap_get_state ( rfc, pi -> dev, L2CAP_MODE_ER_MODE ) ; l2cap_mode = pi -> num_rsp [ L2cap_mode - 1 ] ; struct l2cap_mode [ L2cap_CONNONE | L2CAP_CONNONE ; rfc. mode = L2CAP_CONN_REQ_DEFAULT_STREAM ; l2cap_mode = L2CAP_CONN_REQ_DEVICE ; l2cap_mode ( pi, L2CAP_CONNONE, L2CAP_CONNONE, sizeof ( rfc ) ) ; memcpy ( rfc, L2CAP_CONNONE, & rfc. mode ) ; l2cap_mode = r",0
1054,"<S2SV_ModStart> { int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1055,<S2SV_ModStart> -> chunksize = UINT64_MAX <S2SV_ModEnd> ; for (,1
1056,<S2SV_ModStart> u1_first_slice_in_flag ) && ( ps_dec -> u1_nal_unit_type == 0 ),0
1057,<S2SV_ModStart> { ssplit = 0 <S2SV_ModEnd> ; } else,0
1058,<S2SV_ModStart> } err = crypto_rng_alg ( tfm ) <S2SV_ModEnd> -> seed (,1
1059,<S2SV_ModStart> = uid ; <S2SV_ModEnd> new -> count <S2SV_ModStart> new -> count = 0 <S2SV_ModEnd> ; spin_lock_irq ( <S2SV_ModStart> } if ( <S2SV_ModEnd> ucounts -> count <S2SV_ModStart> ucounts -> count == INT_MAX ) ucounts = NULL <S2SV_ModEnd> ; spin_unlock_irq (,0
1060,<S2SV_ModStart> ) ; } if ( err == 0 ) goto out_put ; if ( datagrams <S2SV_ModEnd> == 0 ) <S2SV_ModStart> == 0 ) goto out_put ; if ( err <S2SV_ModEnd> == 0 ) <S2SV_ModStart> == 0 ) goto out_put ; } if ( err <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1061,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1062,<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline <S2SV_ModStart> = 0 ; len - i >= 8 * 32 <S2SV_ModEnd> ; i += <S2SV_ModStart> ] ; } for ( ; i < len ; i += 32 ) { ( void ) tab [ i ] ; },1
1063,<S2SV_ModStart> ; if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) ) <S2SV_ModEnd> { if ( <S2SV_ModStart> ) ; } if ( ext4_should_dioread_nolock ( inode ) ) set_buffer_uninit ( bh_result ) ;,1
1064,"<S2SV_ModStart> * fmode, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> -> state_flags & ( fmode <S2SV_ModEnd> ), fmode <S2SV_ModStart> -> state, fmode <S2SV_ModEnd> ) ; if <S2SV_ModStart> -> state. fmode ) { fmode = fmode <S2SV_ModEnd> ; goto done",0
1065,"<S2SV_ModStart> ResourceLimitError, ""MemoryAllocationFailed"" ) ; ( void ) ResetMagickMemory ( global_colormap, global_colormap ) ;",0
1066,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
1067,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1068,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int64_t dist_block ( int, int64_t <S2SV_ModEnd> * const int <S2SV_ModStart> * sse ; const int64_t dist_thr, int64_t dist_thr, int64_t dist_dist_block ) { const int64_t dist_thr, sse ; const int64_t * sse = sse ; int64_t ret ; const int64_t dist_thr = 0 ; const int64_t dist_dist_thr = 0 ; int64_t ret = 0 ; int64_t ret = ( sse ) >> ( sse ) >> 1 ; if ( sse == 0 ) { if ( cpi -> common. tx_mode == TX_ERROR ) { * out = xd -> tx_size [ 0 ] ; * sse = & sse ; } else if ( cpi -> common. tx_mode == TX_64_32 ) { unsigned int64_t ret = ( cpi -> tx_size_size - 1 ) >> ( cpi, sse ) ; if ( cpi -> common.",0
1069,<S2SV_ModStart> ; if ( addr_len < <S2SV_ModEnd> 0 ) goto,0
1070,"<S2SV_ModStart> ; if ( snpal == NULL ) ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> SNPA <S2SV_blank> (length: <S2SV_blank> %u): <S2SV_blank> %u)"", snpal, linkaddr_string ( snpal, snpal ) ) ) ; else ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> SNPA <S2SV_blank> (length: <S2SV_blank> %u): <S2SV_blank> %u): <S2SV_blank> ID: <S2SV_blank> %u)"", snpal, linkaddr_string ( snpal, linkaddr_string ( ndo, linkaddr_string ( ndo, snpal ) ) ) ) ; else ND_PRINT ( ( ndo, ""\\n\\n\\t <S2SV_blank> (length: <S2SV_blank> %u): <S2SV_blank> (length: <S2SV_blank> %u): <S2SV_blank> %u): <S2SV_blank> (length: <S2SV_blank> %u): <S2SV_blank> %u)"", linkaddr_string ( ndo, snpal, linkaddr_string ( ndo, snpal, snpal ) ) ) ) ; else ND_PRINT ( ( ndo, ""\\n\\n\\n\\n\\n\\t <S2SV_blank> ID: <S2SV_blank> %u\\n\\n\\n\\n\\n\\n\\n\\n",0
1071,<S2SV_ModStart> * ptr = NULL ; if ( * ptr == '\\0' ) return - ENOMEM ; <S2SV_ModStart> ) ) { if ( * ptr == * ptr ) return - 1 ; } <S2SV_ModStart> ) ) { if ( * ptr == '\\0' || * ptr == '\\0' ) { * ptr = NULL ; } <S2SV_ModEnd> return s ;,0
1072,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> { return vpx_read <S2SV_ModEnd> ( r,",0
1073,<S2SV_ModStart> ; uint32_t backup_handle = 0 <S2SV_ModStart> ret == 0 ) { if ( <S2SV_ModEnd> res -> backup <S2SV_ModStart> goto out_unlock ; } else { backup_handle = req -> buffer_handle ; },1
1074,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool get_struct <S2SV_ModEnd> desc ( struct <S2SV_ModStart> struct * out, <S2SV_ModEnd> unsigned short sel",0
1075,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memcpy ( dst_ptr2, src_ptr1, src_ptr2, src_ptr1 ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",0
1076,"<S2SV_ModStart> saddr ) { struct ipv6_p * sctp = inet_sk ( sk ) ; <S2SV_ModStart>, fl6, & final ; <S2SV_ModStart>, fl6, & final ; <S2SV_ModStart>, false ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1077,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1078,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return NULL ;,0
1079,<S2SV_ModStart> ; gss_return NULL ; client ->,0
1080,<S2SV_ModStart> >= 0 && <S2SV_ModEnd> ND_TTEST ( * <S2SV_ModStart> < ie && <S2SV_ModEnd> ND_TTEST ( *,1
1081,"<S2SV_ModStart> ( interface, KSZ8851_RST <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, KSZ8851_CR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, EINVAL <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, KSZ8851_CR <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, KSZ8851_CR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, EINVAL",0
1082,"<S2SV_ModStart> NULL ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
1083,<S2SV_ModStart> ; pr_leaves_cluster_together : pr_devel <S2SV_ModEnd> ; if (,0
1084,<S2SV_ModStart>. udpport = 0 <S2SV_ModEnd> ; settings.,1
1085,<S2SV_ModStart> ) ; } # endif,0
1086,"<S2SV_ModStart> * x1 ; # ifdef CONFIG_AVE32 x0, xd_ADDR_LEN - x1 ) nl = ( x1 -> y_x0, x1 ) ; <S2SV_ModStart> x3 ) { xd_unlock ( x1 ) ; xd_sess = ( xn -> y_j [ 0 ], x1 ) ; y_unlock ( x1, x1, x0, x1 ) ; x1 = ( x1 -> y_strdup [ 0 ], x1 ) ) ; xd_unlock ( x0 ) ; <S2SV_ModEnd> ++ = ( <S2SV_ModStart> * x1 ) <S2SV_ModEnd> ; x1 = <S2SV_ModStart> * x1 ) <S2SV_ModEnd> ; } }",0
1087,<S2SV_ModStart> clips_ptr ) { if ( num_clips < 0 || num_clips < 0 ) { ret = - EINVAL ; goto out_err1 ; },0
1088,<S2SV_ModStart> ; if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1089,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1090,<S2SV_ModStart> 0 ) ; int minsz = R_MIN ( j + idx - 1 ) ; <S2SV_ModStart> ; j < minsz <S2SV_ModEnd> ; j ++ <S2SV_ModStart>!= UT64_MAX ) { <S2SV_ModStart> ; j < minsz <S2SV_ModEnd> ; j ++ <S2SV_ModStart> 0 ) ; } <S2SV_ModStart>!= UT64_MAX ) { <S2SV_ModStart> 0 ) ; } <S2SV_ModStart> 0 ) ; },0
1091,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) ) { printf ( "" <S2SV_blank> attrs <S2SV_blank> %d <S2SV_blank> in <S2SV_blank> %s\\n"", void ) ; return NULL ; } <S2SV_ModStart> ) ) ; printf ( ""\\n"", outputbuffer <S2SV_blank> %s <S2SV_blank> %s\\n"", width ) ; printf ( ""\\n\\n"" <S2SV_ModEnd>, <S2SV_blank> %s\\n"", <S2SV_ModStart> ) ) ; printf ( "" <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> %d\\n"", dst_width ) ; exit ( 1 ) ; <S2SV_ModStart> ) ) { printf ( ""\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> %s\\n"", dst_width ) ; return NULL ; } <S2SV_ModStart> ) ) ; printf ( ""\\n\\n\\n\\n"" <S2SV_ModEnd>, <S2SV_blank> %s\\n"", <S2SV_ModStart> 4 ) ; printf ( ""\\n\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> <S2SV_blank> %s <S2SV_blank> %s\\n"", out ) ; printf ( "" <S2SV_blank> %s\\n"", <S2SV_ModStart> ) ) ; return NULL ;",0
1092,"<S2SV_ModStart> + DSPQ_DATA_BUFF ; head, tail, tail, size ; head <S2SV_ModEnd> = readw ( <S2SV_ModStart> + JQS_wHead ) ; tail = readw ( head ) ; head = readw ( head <S2SV_ModEnd> + JQSSPQS_wHead, head <S2SV_ModStart> + JQS_wHead ) ; tail = <S2SV_ModEnd> ; readw ( <S2SV_ModStart> + JQS_wDSPQS_wHead ) ; tail = readw ( head ) ; tail = <S2SV_ModEnd> ; readw ( <S2SV_ModStart> + JQS2SV_null> <S2SV_null>",0
1093,<S2SV_ModStart> * opcode_desc ; if ( len < 2 ) { return NULL ; },1
1094,<S2SV_ModStart> ACTP ) { <S2SV_ModEnd> return NULL ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1095,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
1096,<S2SV_ModStart> [ sizeof ( the_url <S2SV_ModEnd> ) - 1,0
1097,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } if,0
1098,"<S2SV_ModStart>. key_data, & key_len <S2SV_ModEnd> ) ; if",0
1099,<S2SV_ModStart> vpx_codec_alg_priv_t * priv <S2SV_ModEnd> ; const int <S2SV_ModStart> ; priv = vpx_codec_alg_priv_t * priv <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> cfg ; priv = vpx_codec_alg_priv_t * priv <S2SV_ModEnd> ; priv -> <S2SV_ModStart> -> cfg ; priv = vpx_codec_alg_priv_t * priv <S2SV_ModEnd> ; priv -> <S2SV_ModStart> NULL ; } return VPX_CODEC_ERROR ; priv <S2SV_ModEnd> -> cfg ;,0
1100,"<S2SV_ModStart> error ) { if ( bp && ( <S2SV_ModEnd> xfs_da_shrink_inode ( args <S2SV_ModStart>, bp )!= 0 ) <S2SV_ModEnd> ) goto out",1
1101,<S2SV_ModStart> ; } return rc <S2SV_ModEnd> ; } <,0
1102,<S2SV_ModStart> slave_active ) { spin_lock_irq ( & timeri -> lock ) ; <S2SV_ModStart> ) ; } spin_unlock_irq ( & list_del_init <S2SV_ModEnd> ) ; },0
1103,<S2SV_ModStart> return err ; if (! <S2SV_ModEnd> attrs [ TIPC_SOCK <S2SV_ModStart> attrs [ TIPC_SOCK_NLA_SOCK <S2SV_ModStart> [ TIPC_SOCK_SOCK_MAX ] <S2SV_ModEnd> ) return err ; if <S2SV_ModStart> [ TIPC_SOCK_SOCK_MAX ] <S2SV_ModEnd> - EINVAL ; <S2SV_ModStart> - EINVAL ; err = sock [ TIPC_NLA_NLA_SOCK_REF ] ; if (! sock [ TIPC_NLA_SOCK_SOCK_REF ] ) return err ; if ( err [ TIPC_SOCK_SOCK_REF ] ) return - EINVAL ; if ( err = sock [ TIPC_NLA_SOCK_REF ] <S2SV_ModEnd> - EINVAL ; <S2SV_ModStart> - EINVAL ; if ( err < 0 ) return err ;,0
1104,"<S2SV_ModStart> data ) { memset <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> ) ) ; if (! ctx -> size ) return 0 ; <S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> data, 0, sizeof ( ctx ) ) ; } return 0 ;",0
1105,<S2SV_ModStart> = v ; if (! IS_ERR ( vma ) ),1
1106,<S2SV_ModStart> ) buf ; if ( total_len < sizeof ( * cap ) || total_len < <S2SV_ModEnd> cap -> b,0
1107,<S2SV_ModStart> task = current <S2SV_ModEnd> ; if (,1
1108,<S2SV_ModStart> ( iinfo -> i_lenEAttr > bs || iinfo -> i_lenAlloc > bs ) goto out ; if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenAlloc > bs ) goto out ; if ( iinfo ->,0
1109,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_BUSY <S2SV_ModEnd>, data ) <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) <S2SV_ModStart> ( interface, ENC28J60_BUSY <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, ENC28J60_BUSY <S2SV_ModEnd> ) ; while",0
1110,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> char * const <S2SV_ModStart> * str, const char * ptr <S2SV_ModEnd> ) { if",0
1111,"<S2SV_ModStart> ) ) ; memset ( & sk, 0, sizeof ( sk ) ) ;",0
1112,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
1113,<S2SV_ModStart>! saw_digit ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart>!= '\\r' ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart>!= '\\n' ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart> ; trunc : * endp = bp ; <S2SV_ModStart> ; invalid : * endp = bp ;,1
1114,"<S2SV_ModStart> ; args -> rmtvaluelen = be32_to_cpu ( name_rmt -> valuelen ) ; args -> rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ( name_rmt -> <S2SV_ModEnd> valueblk ) ; <S2SV_ModStart>, args -> rmtvaluelen <S2SV_ModEnd> ) ; return",1
1115,<S2SV_ModStart> ) ) ; goto done <S2SV_ModEnd> ; } },0
1116,"<S2SV_ModStart> client_data, new_len <S2SV_ModEnd> ) ; }",0
1117,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,0
1118,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
1119,<S2SV_ModStart> u8 label_len ; <S2SV_ModEnd> GET8 ( label_len <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ;,1
1120,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpAcc ( TIFF <S2SV_ModStart> cc ) ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> stride ) )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""fpDiff"", ""%s"", ""(cc%(bps*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> tmp ) return 0 <S2SV_ModStart> tmp ) ; return 1 ;",0
1121,"<S2SV_ModStart> -> vm_ops ) <S2SV_ModEnd> return do_fault ( <S2SV_ModStart>, address, pte, entry ) ; <S2SV_ModEnd> return do_d ;",0
1122,"<S2SV_ModStart> s ) { size_t len = strlen ( s ) + 1 ; <S2SV_ModStart> = pool_alloc ( len ) ; memcpy <S2SV_ModEnd> ( r, <S2SV_ModStart> r, s, len",1
1123,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1124,"<S2SV_ModStart>! new_idmap_permitted ( file,",1
1125,,0
1126,<S2SV_ModStart> p_enc -> i_sf_inode -> i_pic <S2SV_ModEnd> ) ; },0
1127,"<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( s,",0
1128,<S2SV_ModStart> 0 ) { if ( len < u_int ) advance ; <S2SV_ModStart> ) ) ; if ( advance < 0 ) return ; <S2SV_ModStart> ip6 ) ; if ( advance < 0 ) return ; <S2SV_ModStart> ip6 ) ; if ( advance < 0 ) return ;,0
1129,"<S2SV_ModStart> i ] ) { size_t <S2SV_ModEnd> mem = 0 <S2SV_ModStart> ) ; } memset ( & buf, 0, sizeof ( a ) ) ;",0
1130,<S2SV_ModStart> ( iinfo -> i_lenEAttr > bs || iinfo -> i_lenAlloc > bs ) goto out ; if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenAlloc > bs ) goto out ; if ( iinfo ->,0
1131,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
1132,<S2SV_ModStart> ; sse -> y_stride <S2SV_ModEnd> ( cpi ->,0
1133,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, T1_BUF_SIZE ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) + 1_SIZE",0
1134,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
1135,"<S2SV_ModStart> ctxt ) ; if (! ( em_syscall_is_enabled ( ctxt ) ) ) return emulate_ud ( ctxt ) ; <S2SV_ModStart>, & ss ) ; if (! ( efer & EFER_SCE ) ) return emulate_ud ( ctxt",1
1136,<S2SV_ModStart> ; if (! c -> data_size ) return AVERROR_INVALIDDATA ; if (,0
1137,"<S2SV_ModStart>, expr, true,",0
1138,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> int mi_row, int <S2SV_ModStart> int mi_cols = 0 <S2SV_ModStart> motion_avg_y_y_avg_y_stride, int motion_y_stride, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * running_avg_y, int <S2SV_ModEnd> motion_avg_y_y_stride, int <S2SV_ModStart> unsigned char * running_avg_y_y_stride, running_avg_y <S2SV_ModEnd> ) { int <S2SV_ModStart> = 0 ; int <S2SV_ModEnd> motion_avg_y_y_avg_y_stride <S2SV_ModStart> ; if ( running_y < 0 ) { unsigned char * running_avg_y = running_avg_avg_y ; int increase_avg_y = running_avg_y ; int increase_avg_y = 0 ; int increase_to_y = 0 ; for ( i = 0 ; i < 6 ; i ) { int i = 0 ; int increase_to_y = 0 ; for ( i = 0 ; i < 2 ; i ) { int i = 0",0
1139,<S2SV_ModStart> ; if ( osStrchr <S2SV_ModEnd> ( req +,0
1140,<S2SV_ModStart> -> tp [ 0 ],0
1141,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
1142,<S2SV_ModStart> dev ) { int remote_dev ; <S2SV_ModStart> = remote_dev ; <S2SV_ModEnd> remote_dev -> dev_dev,0
1143,"<S2SV_ModStart> ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_HOPS."" ) ; ret = - 1 ; goto errno ; } if ( ndp, sizeof ( sock_sockopt ) ) { errno = - 1 ; goto err ; } sock_set ( sock, IPV6_RECVHOPLIMIT, ""Failed <S2SV_blank> to <S2SV_blank> IPV6_RECVHOPLIMIT, <S2SV_blank> IPV6_HOPLIMIT, <S2SV_blank> IPV6_RECVHOPLIMIT, sizeof ( val ) ) ; err = - 1 ; goto err ; } sock_set ( sock, sock, & val, sizeof ( ndp, ""IPV6_sockopt <S2SV_blank> setsockopt <S2SV_blank> IPV6_RECVHOPLIMIT, & val ) ; } errno",0
1144,<S2SV_ModStart> ; new_bh = new_bh <S2SV_ModEnd> ( new_bh ) <S2SV_ModStart> ) ; } if <S2SV_ModEnd> ( new_bh ) {,0
1145,"<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp. <S2SV_ModStart>. type, ""compression"", sizeof ( rcomp. type ) <S2SV_ModEnd> ) ; if",1
1146,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { ( void ) ctx ; ( void ) args ;",0
1147,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( rc ) return rc ; rc = posix_acl_update_mode ( inode -> i_mode, GFP_KERNEL ) ; if (! inode -> i_type, & acl ) return - ENOMEM ; } break ; case ACL_TYPE_DEFAULT : return - ENOMEM ; } break ; default_xattr = posix_acl_inode ( acl ) ; value = size ; if ( size < acl ) return rc <S2SV_ModEnd> goto out ;",0
1148,<S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( file,0
1149,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
1150,<S2SV_ModStart> 3 * len + 8,1
1151,<S2SV_ModStart> SUCCESS ) { if ( Z_TYPE_PP ( var )!= IS_LONG ) { zval lval ; lval = * * var ; zval_copy_ctor ( & lval <S2SV_ModEnd> ) ; convert_to_long <S2SV_ModStart> ; convert_to_long ( & lval <S2SV_ModEnd> ) ; points <S2SV_ModStart>. x = Z_LVAL ( lval ) ; } else { points [ i ]. x = <S2SV_ModStart> var ) ; } <S2SV_ModStart> SUCCESS ) { if ( Z_TYPE_PP ( var )!= IS_LONG ) { zval lval ; lval = * * var ; zval_copy_ctor ( & lval <S2SV_ModEnd> ) ; convert_to_long <S2SV_ModStart> ; convert_to_long ( & lval <S2SV_ModEnd> ) ; points <S2SV_ModStart>. y = Z_LVAL ( lval ) ; } else { points [ i ]. y = <S2SV_ModStart> ; } } },1
1152,<S2SV_ModStart> ; sig_none = <S2SV_ModEnd> timr -> it_sigev_notify <S2SV_ModStart> timr -> it_sigev_notify <S2SV_ModEnd> == SIGEV_NONE ;,1
1153,<S2SV_ModStart> NULL ) { <S2SV_ModEnd> return 0 ;,0
1154,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, T1_BUF_SIZE ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) + 1_SIZE",0
1155,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; if ( ctx -> frame_parallel_decode ) { set_error_detail ( ctx, ""Not <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> frame <S2SV_blank> parallel <S2SV_blank> decode"" ) ; return VPX_CODEC_INCAPABLE ; }",0
1156,"<S2SV_ModStart>. path ; return Curl_urldecode <S2SV_ModEnd> ( data, <S2SV_ModStart>, 0, & <S2SV_ModEnd> pop3c -> mailbox <S2SV_ModStart> pop3c -> mailbox, NULL, TRUE ) <S2SV_ModEnd> ; } <S2SV_null>",1
1157,<S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ; <S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ;,1
1158,"<S2SV_ModStart> gb ) ; if ( s -> ref && sh -> first_slice_in_pic_flag ) { av_log ( s -> avctx, AV_LOG_ERROR, ""Two <S2SV_blank> slices <S2SV_blank> reporting <S2SV_blank> being <S2SV_blank> the <S2SV_blank> first <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> frame.\\n"" ) ; return 1 ; }",1
1159,<S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> } ps_dec ->,0
1160,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1161,<S2SV_ModStart> ) ) { const VP9_COMMON * cm = cm -> frame_type ; <S2SV_ModStart> cm ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( cm -> last_bufs [ ref_frame_bufs * cm -> frame_bufs ] == NULL ) return VPX_CODEC_ERROR ;,0
1162,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
1163,"<S2SV_ModStart> int mbmi ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { vpx_free ( xd ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_H ) { # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { vp9_highbd_log ( xd, 0, bw, bw, bw, bw, bh, & xd -> mbmi_col ) ; } else { int bd = xd -> mbmi_ext ; const int bw = xd -> mbmi_ext ; int bw = ( xd -> mbmi_cols [ 0 ]. mbmi -> mbmi_cols + ( xd -> mbmi_col ) >> ( xd -> mbmi_col ) >> 1 ) ; } else { int bw = vp9_",0
1164,<S2SV_ModStart> -> mmap_legacy_base = TASK_UNMAPPED_BASE + random_factor <S2SV_ModEnd> ; if (,1
1165,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 8 ) ; <S2SV_ModEnd> src += src_stride",1
1166,"<S2SV_ModStart> return getnum ( <S2SV_ModEnd> fmt, 1 <S2SV_ModStart> = getnum ( <S2SV_ModEnd> fmt, sizeof",1
1167,"<S2SV_ModStart> 0 ; } memset ( trow, 0, offset ) ; <S2SV_ModStart> 0 ) { TIFFErrorExt ( tif -> tif ) ; } <S2SV_ModStart> 0 ) ; }",0
1168,<S2SV_ModStart> case suite : case func_body_suite :,0
1169,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1170,<S2SV_ModStart> ( upid == INT_MIN ) return - ESRCH ; if ( upid ==,1
1171,"<S2SV_ModStart> siocb -> scm, false",1
1172,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1173,<S2SV_ModStart> ) { return 1 <S2SV_ModEnd> ; } <S2SV_null>,0
1174,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> r_len - 1 <S2SV_ModEnd> ) { uint8_t <S2SV_ModStart> -> data_len ; uint8_t prev_len ; uint8_t av_mask_len = malloc ( struct <S2SV_ModStart> data ) ; if (! av_len ) return - 1 ; <S2SV_ModStart> 1 ) ; if (! av_assert_len ) return - 1 ;,0
1175,"<S2SV_ModStart> -> private ; struct dm_dev * dev = lc -> dev ; int r = 0 ; if <S2SV_ModEnd> ( lc -> <S2SV_ModStart> ( lc -> start || ti -> len!= i_size_read ( dev -> bdev -> bd_inode ) >> SECTOR_SHIFT ) r = scsi_verify_blk_ioctl ( NULL, cmd ) ; return r? : __blkdev_driver_ioctl ( <S2SV_ModStart> -> bdev, <S2SV_ModEnd> dev -> mode",1
1176,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> return len ;,0
1177,"<S2SV_ModStart> crypto, name <S2SV_ModEnd> ) ; if",0
1178,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",0
1179,<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ;,1
1180,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1181,"<S2SV_ModStart> = 0 ; memset ( & sa, 0, sizeof ( sa ) ) ;",0
1182,<S2SV_ModStart> ; if ( <S2SV_ModEnd> packet -> pkt,0
1183,<S2SV_ModStart> NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC | NTLMSSP_NEGOTIATE_SEAL <S2SV_ModStart> -> sign ) <S2SV_ModEnd> flags |= NTLMSSP_NEGOTIATE_SIGN <S2SV_ModStart> |= NTLMSSP_NEGOTIATE_KEY_XCH ; <S2SV_ModEnd> tmp = *,1
1184,"<S2SV_ModStart>, ""STARTTLS"", IMAP_CMD_SINGLE ) { mutt_socket_empty ( adata -> conn <S2SV_ModEnd> ) ; if <S2SV_ModStart> NULL ) { mutt_socket_empty ( adata -> conn <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } mutt_socket_empty ( adata -> conn <S2SV_ModEnd> ) ; }",0
1185,<S2SV_ModStart> crypto_report_predictor_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp.,0
1186,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horDiff8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
1187,<S2SV_ModStart> -> head <= 0 || ( unsigned char ) ( ( g -> sect << 2 ) >> FD_SIZECODE ( g ) ) ==,1
1188,"<S2SV_ModStart> NULL, NULL <S2SV_ModEnd> ) ; if",0
1189,"<S2SV_ModStart>, & rlen, 0",1
1190,"<S2SV_ModStart>, * tmpdata <S2SV_ModEnd> ; int ret <S2SV_ModStart> NULL ) ; mutex_unlock ( & buf -> user_mutex ) ; if (! buf ) { ret = - ENOMEM ; goto cleanup ; } <S2SV_ModStart> clientdata ) ; <S2SV_ModEnd> mutex_unlock ( &",0
1191,"<S2SV_ModStart> mntent, path, rootfs -> mount",1
1192,<S2SV_ModStart> ; if (! str ) return 1 ; <S2SV_ModEnd> } if (,0
1193,<S2SV_ModStart> = prev_bi_vcnt ; if ( bio == bio -> bi_vcnt ) break ;,0
1194,,0
1195,"<S2SV_ModStart> state. path <S2SV_ModEnd> ; char localhost <S2SV_ModStart> ""localhost"" ; } result = Curl_urldecode ( conn -> data, path, 0, & <S2SV_ModStart> smtpc -> domain, NULL, TRUE ) ; if ( result ) return result <S2SV_ModEnd> ; state (",1
1196,"<S2SV_ModStart> len ) { strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, len <S2SV_ModEnd> ) ; strlen <S2SV_ModStart> ( str, len <S2SV_ModEnd> ) ; str",0
1197,<S2SV_ModStart> i < 0 || len,0
1198,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
1199,<S2SV_ModStart> ; if ( len < 0 ) return - EINVAL ; if (,0
1200,<S2SV_ModStart> 0 ) ; if (! r ) return - EINVAL ;,1
1201,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1202,,1
1203,"<S2SV_ModStart> { r_cons_printf ( ""\\""k <S2SV_blank> bin/%s/%s/%d=%s\\""\\n"" <S2SV_ModEnd>, module,",0
1204,"<S2SV_ModStart>, rqstp, res <S2SV_ModEnd> ) ; out",1
1205,<S2SV_ModStart> mnt ) { return 0 ; },0
1206,"<S2SV_ModStart> ; if ( rkey_set <S2SV_ModEnd> ( key,",0
1207,"<S2SV_ModStart> ) ) { * status = ""INVALID_S4U2PROXY_OPTIONS"" ; <S2SV_ModStart> ) ) { * status = ""EVIDENCE_TICKET_MISMATCH"" ;",1
1208,<S2SV_ModStart> thread -> tp_value [ 0 ],0
1209,"<S2SV_ModStart> bufsize ) { char * new_bufsize <S2SV_ModEnd> ; JAS_DBGLOG ( <S2SV_ModStart> ; if ( bufsize < 0 ) { jas_deprecated ( ""negative <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> jas_stream_memopen <S2SV_blank> buffer\\n"" ) ; return 0 ; } new_bufsize = 0 <S2SV_ModEnd> ; } <S2SV_null>",0
1210,"<S2SV_ModStart> sshbuf * b = NULL <S2SV_ModStart> char * pkalg = NULL <S2SV_ModStart> ; if (! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> disabled <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if (",0
1211,<S2SV_ModStart> ; uint32_t bcount ; CLEAR ( WaveHeader ),1
1212,<S2SV_ModStart> -> inode = get_verify_block ( inode ) ; <S2SV_ModStart> out ; } else <S2SV_ModEnd> } else {,0
1213,"<S2SV_ModStart> ) ; } memset ( s, 0, sizeof ( sz_sock ) ) ;",0
1214,<S2SV_ModStart> tn_buf ) ; return - EACCES ;,1
1215,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteOlympusEntry ) ) ;",0
1216,<S2SV_ModStart> failed_mount3 ; } ext2_xattr_create_cache ( sbi -> s_mb_cache ) ;,0
1217,<S2SV_ModStart> ) { return TEMP_FAILURE_RETRY <S2SV_ModEnd> ; } <S2SV_null>,0
1218,<S2SV_ModStart> len < tcp_hdrlen || tcp_hdrlen < sizeof ( struct tcphdr ) <S2SV_ModStart> ; if ( tcp_hdrlen >= 15 * 4 ) return 0 ; if (,1
1219,<S2SV_ModStart> int i ; size_t size ; <S2SV_ModStart> 0 ) { goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } <S2SV_null>,0
1220,"<S2SV_ModStart> ipv6_select_ident ( fh, rt <S2SV_ModStart> ipv6_select_ident ( fh, rt",1
1221,"<S2SV_ModStart> int error ; struct mb2_cache_entry <S2SV_ModEnd> * cache, <S2SV_ModStart> int error ; <S2SV_ModEnd> h = mb2_cache_entry_delete_block ( cache, bh, hash, bh -> bh ) ; <S2SV_ModStart> int error ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1222,<S2SV_ModStart> * req ; <S2SV_ModEnd> req = scsi_req_alloc <S2SV_ModStart> hba_private ) ; <S2SV_ModEnd> return req ;,1
1223,"<S2SV_ModStart>, buf ; int max_size = MIN ( EXIT_FAILURE_RETRY ( <S2SV_ModStart>, & buf, len <S2SV_ModEnd> ) ) ) <S2SV_ModStart> ; if ( total_sizeof ( buf <S2SV_ModEnd>, & x",0
1224,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1225,<S2SV_ModStart> ( ret ||! cm_id -> device ||,1
1226,<S2SV_ModStart> xfrm_policy_walk * ) <S2SV_ModEnd> cb -> args <S2SV_ModStart> cb -> args <S2SV_ModEnd> ; struct xfrm_dump_info <S2SV_ModStart> struct xfrm_dump_info info <S2SV_ModEnd> ; info. <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> ( void ),1
1227,<S2SV_ModStart> (! file || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
1228,"<S2SV_ModStart> dentry * upper <S2SV_ModEnd> ; int err <S2SV_ModStart> I_MUTEX_PARENT ) ; upper = lookup_one_len ( dentry -> d_name. name, dentry -> d_name. name, upper ) ; err = PTR_ERR ( upper ) ; if ( IS_ERR ( upper ) ) goto out_unlock ; <S2SV_ModStart> if ( is_inode ) { <S2SV_ModEnd> if ( is_dentry <S2SV_ModStart> dentry ) ; goto out_unlock ; } <S2SV_ModStart> dentry ) ; out_unlock :",0
1229,"<S2SV_ModStart> ( section_options, SIZE_MAX - 1",0
1230,<S2SV_ModStart> * ptrptr && <S2SV_ModEnd> nmemb && size <S2SV_ModStart> nmemb && size <S2SV_ModEnd> ) return AVERROR,1
1231,<S2SV_ModStart> ( a -> type == szMAPI_BINARY && a -> <S2SV_ModStart> else if ( a -> type == szMAPI_BINARY &&,1
1232,"<S2SV_ModStart> i ) { if ( i -> width > i -> parent -> width ) fprintf ( i -> width ) - 1 ) ; if ( i -> log ) fprintf ( NGIFLG_NO_FILE, ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %d <S2SV_blank> file <S2SV_blank> %d\\n"", i -> width ) ; if ( i -> width > i -> height ) { fprintf ( i -> log ) ; return - 1 ; } if ( i -> log ) fprintf ( NGIFLG_NO_FILE ) ; if ( i -> log ) fprintf ( NGIFLG_NO_FILE ) ; if ( i -> parent -> parent -> width > i -> width ) if ( i -> log ) fprintf ( i -> log, ""Invalid <S2SV_blank> file <S2SV_blank> position\\n"" ) ; return - 1 ; }",0
1233,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : ms -> elf_notes_max = * ( const size_t * ) val ; return 0 ;,0
1234,"<S2SV_ModStart> { jas_eprintf ( ""got <S2SV_blank> box <S2SV_blank> type <S2SV_blank> %s\\n"" <S2SV_ModEnd>, box ->",1
1235,,1
1236,<S2SV_ModStart> return ret ; if ( len < 2 ) goto out ;,0
1237,<S2SV_ModStart> ( page ) <S2SV_ModEnd> ; if (,0
1238,<S2SV_ModStart> ; if ( data -> count < 1 ||,0
1239,<S2SV_ModStart> UINT32 nsc_rle_encode ( const,1
1240,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> read_state ) ; int ret = <S2SV_ModEnd> ; int ret <S2SV_ModStart> NULL ) ; mutex_unlock ( & buf, & data_mut ) ; if ( ret == - ENOMEM ) { ret = - ENOMEM ; goto cleanup ; } <S2SV_ModStart> ( ) ; ret = <S2SV_ModEnd> ; } read2SV_null>",0
1241,"<S2SV_ModStart> * dllhandle ; if ( COM_CompareExtension ( name, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", name ) ; return NULL ; }",1
1242,<S2SV_ModStart> tmp_free ( void ) ;,0
1243,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1244,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1245,<S2SV_ModStart> g_string ) ; g_free ( g_table ) ;,0
1246,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> * pw2SV_null> <S2SV_null> static <S2SV_ModStart> 2SV_null> <S2SV_null> <S2SV_null>,0
1247,<S2SV_ModStart> * xpc ; if (! <S2SV_ModEnd> ) return ;,0
1248,"<S2SV_ModStart> src ) { memcpy <S2SV_ModEnd> ( dst, <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( src ->",0
1249,"<S2SV_ModStart> AVERROR_INVALIDDATA ; } if ( c -> log2_cblk_width > 6 || c -> log2_cblk_height > 6 ) { avpriv_request_sample ( s -> avctx, ""cblk <S2SV_blank> size <S2SV_blank> > <S2SV_blank> 64"" ) ; return AVERROR_PATCHWELCOME ; }",1
1250,<S2SV_ModStart> == * ptr && ptr [ 1 ],1
1251,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_row, int mi_col ; VP9_COMMON * const tile_col = & cpi -> common ; MACROBLOCK * const xd = & xd -> mbmi_row * xd -> mbmi_col ; <S2SV_ModStart> ) ) { memcpy <S2SV_ModEnd> ( xd -> <S2SV_ModStart>, mi_col, 0, sizeof ( x <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ; } } # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { MODE_INFO * xd = & cpi -> mbmi_ext ; memcpy <S2SV_ModEnd> ( x -> <S2SV_ModStart> mi_col ) ; memcpy <S2SV_ModEnd> ( x ->",0
1252,"<S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
1253,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1254,"<S2SV_ModStart> ; encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ),",0
1255,<S2SV_ModStart> ; kfree_skb ( skb ) ; kfree_skb ( skb ) ;,0
1256,<S2SV_ModStart> sta -> lock ) ; spin_lock_init ( & sta -> ps_lock,1
1257,<S2SV_ModStart> tp_event ) && perf_paranoid_tracepoint_raw <S2SV_ModEnd> ( ) &&,1
1258,<S2SV_ModStart> sctp ) ; <S2SV_ModEnd> S2SV_null> <S2SV_null> <S2SV_null>,0
1259,"<S2SV_ModStart>, 0 ) ; if (! data_interface ||! control_interface ) return - ENODEV",1
1260,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1261,<S2SV_ModStart> env ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1262,"<S2SV_ModStart> * head ; <S2SV_ModEnd> newsk -> sk_sndbuf <S2SV_ModStart> -> sk_rcvbuf ; sctp_copy_descendant <S2SV_ModEnd> ( newsk,",1
1263,"<S2SV_ModStart> int fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> XAT | O_CLOENT ) <S2SV_ModStart> { if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) ) ) <S2SV_ModStart> return 0 ; <S2SV_ModEnd> if ( fd",0
1264,"<S2SV_ModStart> { struct desc_struct <S2SV_ModEnd> desc ; short <S2SV_ModStart> return sel ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! get_desc ( & desc, sel ) <S2SV_ModEnd> ) return - <S2SV_ModStart>! ( desc. <S2SV_ModEnd> type & BIT <S2SV_ModStart> ( ( desc. <S2SV_ModEnd> l << 1 <S2SV_ModStart> ) | desc. <S2SV_ModEnd> d ) {",1
1265,<S2SV_ModStart> ctx ) { vpx_free_buffers ( ctx ) ;,0
1266,"<S2SV_ModStart> 1 ) { vpx_lpf_horizontal_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> } else { vpx_lpf_horizontal_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) ; vpx_lpf_horizontal_16 <S2SV_ModEnd> ( s +",0
1267,<S2SV_ModStart> return ret ; fsnotify_put_group ( group ) ;,1
1268,<S2SV_ModStart> ; if ( * ctx <S2SV_ModEnd> ) return 0,0
1269,"<S2SV_ModStart> BPF_ALU64 ) { coerce_reg_to_size ( dst_reg, 4 ) ; coerce_reg_to_size <S2SV_ModEnd> ( & src_reg <S2SV_ModStart> ( & src_reg, 4",0
1270,<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ;,0
1271,<S2SV_ModStart> ; while ( ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ),0
1272,<S2SV_ModStart> size_t ret = 0 <S2SV_ModEnd> ; if (,0
1273,<S2SV_ModStart> ) ; } if ( mono_method!= NULL ) return 0 ;,0
1274,"<S2SV_ModStart> * buf ; size_t buf, count <S2SV_ModStart> ; if ( count < 0 ) return - EINVAL ; if (",0
1275,<S2SV_ModStart> input -> cur ) ; <S2SV_ModEnd> if ( input,0
1276,"<S2SV_ModStart> } if ( le32_to_cpu ( raw_super -> segment_count ) > F2FS_MAX_SEGMENT ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> segment <S2SV_blank> count <S2SV_blank> (%u)"", le32_to_cpu ( raw_super -> segment_count ) ) ; return 1 ; } if (",1
1277,"<S2SV_ModStart> ; if ( is_path && name [ 0 ] == '\\0' ) || ( name [ 1 ] == '\\0' ) ) { const char * name = '\\0' ; if (! strncpy ( name, name, ""Path <S2SV_blank> path <S2SV_blank> "" ) ) ; return - 1 ; } else <S2SV_ModEnd> else if (",0
1278,<S2SV_ModStart> H264 ) { return <S2SV_ModEnd> ; } if,0
1279,<S2SV_ModStart> len ) { struct ipv6_txoptions * opt_to_free = NULL ; <S2SV_ModStart>! opt ) { opt = txopt_get ( np ) ; opt_to_free = opt ; } <S2SV_ModEnd> if ( flowlabel <S2SV_ModStart> flowlabel ) ; txopt_put ( opt_to_free ) ;,1
1280,<S2SV_ModStart> ; if ( inet -> opt. opt &&,0
1281,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> } break ;",1
1282,<S2SV_ModStart> ; if ( rb [ 0 ] == NULL ) return - EINVAL ; if (,0
1283,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1284,<S2SV_ModStart> ; if ( info -> count < 0 ||,0
1285,"<S2SV_ModStart> { if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
1286,<S2SV_ModStart> ) break ; <S2SV_ModEnd> tp -> copied_seq <S2SV_ModStart> = seq ; } tp -> copied_seq = seq ;,1
1287,<S2SV_ModStart> ; if ( key_data == NULL ) { kfree ( key_data ) ; kfree ( nr_data ) ; kfree ( key_data ) ; if (,0
1288,"<S2SV_ModStart> * object, size_t <S2SV_ModEnd> self -> idx",0
1289,,0
1290,<S2SV_ModStart> inode ) ; ss_free ( inode ) ;,0
1291,"<S2SV_ModStart> expr_ty returns, string type_comment, <S2SV_ModStart> returns = type_comment ; p -> v. AsyncFunctionDef.",0
1292,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1293,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ),1
1294,"<S2SV_ModStart> ) { case AC_VECTOR : kvm_queue_exception_e ( vcpu, AC_VECTOR, error_code ) ; return 1 ; case",1
1295,<S2SV_ModStart> { if ( NGHTTP2_ERR_INTERNAL_EXPLICIT_ERROR <S2SV_ModEnd> ( ( <S2SV_ModStart> ] ) == NULL ) { return NGHTTP2_ERR_INVALID_EXTERNAL_ERROR ; } else { if ( ( <S2SV_ModStart> & NGHTTP2_EXTERNAL_ERROR )!= NULL ) { return - 1 ; } } <S2SV_ModEnd> if ( ( ndo,0
1296,"<S2SV_ModStart>, NULL, <S2SV_ModEnd> rdp_dev )",0
1297,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return 0 ;,0
1298,<S2SV_ModStart> < 0 ) { ret = chg ; goto out_err ; } <S2SV_ModEnd> if ( hugepage_subpool_get_pages <S2SV_ModStart> chg ) ) { ret = <S2SV_ModEnd> - ENOSPC ; <S2SV_ModStart> - ENOSPC ; goto out_err ; } <S2SV_ModStart> chg ) ; goto out_err <S2SV_ModEnd> ; } if <S2SV_ModStart> return 0 ; out_err : resv_map_put ( vma ) ; return ret ;,1
1299,"<S2SV_ModStart> struct fl6 * fl6 ; struct rcu_dereference ( <S2SV_ModStart> np -> opt ) ; opt = rcu_dereference ( <S2SV_ModStart> np -> opt ) ; rcu_read_unlock ( ) ; <S2SV_ModStart> & fl6, & final ) ; rcu_read_unlock ( ) ;",0
1300,<S2SV_ModStart> = path ; if ( s -> s_stack_depth > MAX_DEPTH ) { rc = - EINVAL ; goto out_free ; },0
1301,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1302,"<S2SV_ModStart> 6 ) ) { MATLAB_KO : clone_info = DestroyImageInfo ( clone_info ) ; <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart> ""ImproperImageHeader"" ) ; }",0
1303,<S2SV_ModStart> * s ; uint16_t flags ; <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1304,"<S2SV_ModStart> ret, n_new_keys <S2SV_ModEnd>, kdb ->",0
1305,"<S2SV_ModStart> int result = RLC_OK <S2SV_ModEnd> ; bn_t t <S2SV_ModStart> { bn_len = RLC_ERR ; bn_t * p_len = RLC_OK <S2SV_ModEnd> ; if ( <S2SV_ModStart>! p_len ) { bn_dig ( t, * p_len = RLC_ERR ; bn_dig ( p_len ) ; bn_lsh ( p_len ) ; bn_dig ( t ) ; bn_len = RLC_P ( p_2 ) ; bn_dig ( p_len - 8 ) ; bn_len = RLC_OK <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ; } else { <S2SV_ModEnd> if (! <S2SV_ModStart> { result = RLC_OK <S2SV_ModEnd> ; break ; <S2SV_ModStart> { result = RLC_OK <S2SV_ModEnd> ; } }",0
1306,"<S2SV_ModStart> -> length, 0,",1
1307,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1308,<S2SV_ModStart> { rq = <S2SV_ModEnd> hctx -> tags <S2SV_ModStart> hctx -> tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; if (,1
1309,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
1310,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1311,"<S2SV_ModStart> { token ++ ; } if ( operand >= MAX_OPERANDS ) { eprintf ( ""Too <S2SV_blank> many <S2SV_blank> operands\\n"" ) ; return false",1
1312,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ; memset <S2SV_ModEnd> ( xd ->,0
1313,<S2SV_ModStart> ; out = safe_calloc <S2SV_ModEnd> ( strlen (,0
1314,<S2SV_ModStart> -> h ) kfree ( ret ) ;,0
1315,"<S2SV_ModStart> number_colormaps, MagickMax ( number_planes_filled, number_planes_filled <S2SV_ModEnd> ) ; number_planes_filled <S2SV_ModStart> -> rows * number_planes_filled <S2SV_ModEnd> ) ; number_planes_filled <S2SV_ModStart> ( number_planes_filled, <S2SV_ModEnd> )!= ( <S2SV_ModStart> ( number_planes_filled <S2SV_ModEnd> ) ) ThrowReaderException <S2SV_ModStart> ( CorruptImageError, ""ImproperImageHeader"" ) <S2SV_ModEnd> ; pixel =",0
1316,<S2SV_ModStart> ctl_files_rwlock ) ; mutex_init ( & card -> user_ctl_lock ) ;,1
1317,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } else { <S2SV_ModStart> ++ ) ; <S2SV_ModEnd> s = cnt_ffs,0
1318,"<S2SV_ModStart> ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1319,<S2SV_ModStart> ; ps_dec -> u2_cur_slice_num = 0 ; ps_dec ->,0
1320,<S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rbuf -> rbuf. buf!= NULL ) <S2SV_ModStart> OPENSSL_free ( rdata -> rbuf. buf ) ; OPENSSL_free ( rbuf,0
1321,"<S2SV_ModStart> struct fl6 * fl6 ; struct rcu_dereference ( <S2SV_ModStart> np -> opt ) ; opt = rcu_dereference ( <S2SV_ModStart> np -> opt ) ; rcu_read_unlock ( ) ; <S2SV_ModStart> & fl6, & final ) ; rcu_read_unlock ( ) ;",0
1322,<S2SV_ModStart> - EINVAL ; if ( args -> num_count > MAX_BUFFER ) return - EINVAL ;,0
1323,"<S2SV_ModStart> int mptctl_do_reset ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_dev * ioc, <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } dctlprintk",0
1324,"<S2SV_ModStart> offset, luaL_checkstack <S2SV_ModEnd> ( L,",0
1325,"<S2SV_ModStart> char * path, const char * rootfs <S2SV_ModStart> mntdata, optional, rootfs",1
1326,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1327,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> * buf ; size_t ret <S2SV_ModStart> ; int ret <S2SV_ModEnd> ; BUFFER_SV_null> <S2SV_null> <S2SV_null>,0
1328,"<S2SV_ModStart> | O_NOCTTY, ( mode == 0 || mode == MODE_INVALID )? 0644 : mode <S2SV_ModEnd> ) ; if",1
1329,<S2SV_ModStart> err_info ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> FALSE ; } return FALSE ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1330,<S2SV_ModStart> * rq ) <S2SV_ModEnd> { int cpu <S2SV_ModStart> ) ; return <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>,0
1331,<S2SV_ModStart> ++ ) { if ( ssize_t ) break ;,0
1332,"<S2SV_ModStart> == 0 ) { <S2SV_ModStart> return ; } else { strcpy ( stderr, ""file <S2SV_blank> name <S2SV_blank> "" ) ; exit ( 1 ) ; } <S2SV_ModStart> ) ; } if ( options. type == 0 ) { fprintf ( stderr, ""\\n"" ) ; exit ( 1 ) ; }",0
1333,<S2SV_ModStart> int blk ; <S2SV_ModEnd> spin_lock_irqsave ( & <S2SV_ModStart> case BLKIF_PROTOCOL_X86_X86_64 : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> ) ; break ; case BLKIF_X86_PROTOCOL_X86_64 : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> RING_GET_RESPONSE ) ; break ; <S2SV_ModStart> case BLKIF_PROTOCOL_X86_X86_X86_32 : resp = <S2SV_ModEnd> RING_GET_PROTOCOL_GET_RESPONSE ( & <S2SV_ModStart> RING_PROTOCOL_X86_32 ) ; resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> ) ; break ; } break ;,0
1334,<S2SV_ModStart> ; if ( mask == NULL ) return EINVAL ; if (,0
1335,"<S2SV_ModStart> ; if ( CHECKOVERFLOW ( oe, buf_size, 8 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; if ( CHECKOVERFLOW ( ndo, buf_size, 8 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; if ( CHECKOVERFLOW ( o + o + o + o_size_t ) n -> entries [ tcount ]. exif_log <S2SV_ModEnd> ) { exif_log <S2SV_ModStart> ; if ( buf_size < n -> entries [ tcount ]. exif_short <S2SV_ModEnd> ) { exif_log",0
1336,<S2SV_ModStart> char * nameptr ; if ( lname [ 0 ] == '\\0' ) { <S2SV_ModStart> ) ) ; } else { <S2SV_ModStart> ) ) ; } <S2SV_ModStart> ) ) ; },0
1337,<S2SV_ModStart> 0 ) { ND_TCHECK_16BITS ( & dp -> icmp_cksum ) ;,0
1338,<S2SV_ModStart> dentry * dir <S2SV_ModEnd> ; int dir_has_key <S2SV_ModStart> 0 ; } <S2SV_ModEnd> spin_lock ( & <S2SV_ModStart> dir_has_key = ( d_inode ( dir ) -> i_crypt_info <S2SV_ModEnd>!= NULL ),1
1339,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) ;S2SV_null> <S2SV_null> static <S2SV_ModStart> S2SV_null> <S2SV_null>,0
1340,"<S2SV_ModStart> ARCHIVE_WARN ; } if ( argc >= MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } <S2SV_ModStart> p ) ; <S2SV_ModEnd> } if (",1
1341,"<S2SV_ModStart> parent ) ; if ( ( i -> width > i -> width ) || ( i -> height > i -> height ) fprintf ( NGIFLIB_NO_FILE ) ) fprintf ( NGIFLIB_NO_FILE ) ; if ( ( i -> width > i -> width ) { # if! defined ( NGIFLIB_NO_FILE ) fprintf ( i -> parent -> width ) fprintf ( NGIFLIB_NO_FILE, ""*** <S2SV_blank> Adjusting <S2SV_blank> position\\n"" ) ; # endif return - 1 ; } if ( ( NGIFLIB_NO_FILE ) if ( ( i -> parent -> width ) > i -> width ) { # if! defined ( NGIFLIB_NO_FILE ) fprintf ( i -> width ), ""*** <S2SV_blank> Adjusting <S2SV_blank> position\\n"" ) ; # endif return - 1 ; } if ( ( i -> width + i -> width ) > i -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( NGIFLIB_FILE ) fprintf ( i -> width - i -> width ) ; # if! defined ( NGIFLIB_NO_FILE ) fprintf (",0
1342,<S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ),1
1343,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
1344,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> break ; } if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",0
1345,<S2SV_ModStart> ) { return false <S2SV_ModEnd> ; } if,0
1346,"<S2SV_ModStart> ( interface, ENC624J600_EIR_EHT0 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT0 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC6 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ;",0
1347,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1348,"<S2SV_ModStart> error ; } memset ( newserv, 0, sizeof ( struct service ) ) ;",1
1349,<S2SV_ModStart> ) ) { WORD32 i ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } } ;,0
1350,<S2SV_ModStart> ) -> tp_value [ 0 ],1
1351,"<S2SV_ModStart> ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; ret = - EINVAL ;",1
1352,"<S2SV_ModStart> * p ; size_t len = 0 ; <S2SV_ModStart> len ) { if (! strcpy ( out, out ) ) return 0 ; <S2SV_ModStart> child = ensure ( p, 1 ) ; if (! out ) return 0 ; out = ensure ( p, 2 ) ; if (! out ) return 0 ; <S2SV_ModStart> goto out ; out = ensure ( p, len ) ; if (! out ) return 0 ; out = ensure ( p, len ) ; if ( out ) strcpy ( out, out, out, len ) ; if (! out ) { out = '\\0' ; * ptr = '\\0' ; * ptr = ensure ( p ) cJSON_malloc ( child -> next ) ; if (! out ) return 0 ; } if ( p ) { len = ensure ( p ) ; out = ensure ( p, 1 ) ; if (! out ) return 0 ; if ( fmt == 0 ) { cJSON_malloc ( p ) cJSON_malloc ( child -> offset, len ) ; if (! out ) return 0 ; p = '\\0' ; * ptr = '\\0' ; } if (! ptr ) return 0 ; p = ensure (",0
1353,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_printlen ) {,0
1354,"<S2SV_ModStart> int tagval, uint32 <S2SV_ModEnd> * length )",1
1355,<S2SV_ModStart> ) ) { struct sock_device * sk ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } else { <S2SV_ModStart> = sock_sk ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> ; break ; <S2SV_ModEnd> } if (,0
1356,<S2SV_ModStart> 4 ] ; unsigned int <S2SV_ModEnd> value = 0 <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ; return (,0
1357,"<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> c"", <S2SV_ModStart> y ) ; sendClean ( outputbuffer ) ;",0
1358,<S2SV_ModStart> ; kfree_skb ( skb ) ; kfree_skb ( skb ) ;,0
1359,<S2SV_ModStart> void exit_io_context ( struct task_struct * task <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; task_lock ( task <S2SV_ModEnd> ) ; ioc <S2SV_ModStart> ; ioc = task <S2SV_ModEnd> -> io_context ; <S2SV_ModStart> -> io_context ; task <S2SV_ModEnd> -> io_context = <S2SV_ModStart> ; task_unlock ( task <S2SV_ModEnd> ) ; if,1
1360,<S2SV_ModStart> -> tp [ 0 ],0
1361,<S2SV_ModStart> ; if ( ctx -> terminated ||,0
1362,"<S2SV_ModStart> ) { int ret = pci_read_config_word <S2SV_ModEnd> ( dev, <S2SV_ModStart> offset, value ) ; const struct pci_cmd_info * cmd = data ; * value &= PCI_COMMAND_GUEST ; <S2SV_ModEnd> * value |= <S2SV_ModStart> * value |= cmd -> val & ~ PCI_COMMAND_GUEST ; <S2SV_ModEnd> return ret ;",1
1363,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
1364,<S2SV_ModStart> ] ) ; free_uid ( fpl -> user ) ;,1
1365,<S2SV_ModStart> ; } return err ;,0
1366,"<S2SV_ModStart> -> dwc ; dwc3_gadget_del_and_unmap_request ( dep, req, status <S2SV_ModEnd> ) ; spin_unlock <S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
1367,"<S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""grammar.y"" { YYPE <S2SV_ModStart> } # line 8 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> } # line 8 <S2SV_ModEnd> ""grammar.c"" { ( <S2SV_ModStart> } # line 8 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 8 <S2SV_ModEnd> ""grammar.c"" { ( <S2SV_ModStart> } # line 8 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 834 <S2SV_ModEnd> ""grammar.c"" { <S2SV_ModStart> } # line 8 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 8 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> : # line 8 <S2SV_ModEnd> ""grammar.y"" { ( <S2SV_ModStart> } # line 834 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> } # line 936 <S2SV_ModEnd> ""grammar.c"" { ( <S2SV_ModStart> } # line 1464 <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> } # line 973 <S2SV_ModEnd> ""grammar.c"" { ( <S2SV_ModStart> } # line 2547 <S2SV_ModEnd> ""grammar.c""grammar.y"" break ; <S2SV_ModStart> = ( 1 ) - ( yyvsp [ ( 1 ) - ( 1 ) - ( 1 ) - ( 1 ) - ( 1 ) -",0
1368,"<S2SV_ModStart> sas_revalidate_domain, [ <S2SV_ModEnd> DISCE_SUSPEND ] = <S2SV_ModStart> ] = sas_resume_devices <S2SV_ModEnd>, } ;",1
1369,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1370,<S2SV_ModStart> return res ; <S2SV_ModEnd> if (!,0
1371,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
1372,<S2SV_ModStart> sk -> sk_family <S2SV_ModEnd> ; struct sk_buff <S2SV_ModStart> goto out ; <S2SV_ModEnd> if ( flags <S2SV_ModStart> AF_INET ) { struct sockaddr_in * <S2SV_ModStart> ) ) ; * addr_len = sizeof ( * sin ) ; <S2SV_ModStart> skb ) ; <S2SV_ModEnd> struct sockaddr_in6 * <S2SV_ModStart> struct sockaddr_in6 * sin6 = ( struct sockaddr_in6 * <S2SV_ModStart> ) -> iif ) ; * addr_len = sizeof ( * sin6,1
1373,<S2SV_ModStart> = 0 ; mutex_lock ( & inode_mutex ) ; mutex_lock ( & inode -> i_mutex ) ; if (! ( mode & EXT4_GET_FLOW ( inode ) ) ) { ret = - ENOMEM ; goto out_mutex ; } if (! inode_mutex ) { ret = - ENOMEM ; goto out_mutex ; } if (! ( mode & FALLOC_FL_KEEP_SIZE ) ) { ret = - ENOMEM ; goto out_mutex ; } if (! ( flags & FALLOC_GET_FL_KEEP_KEEP_KEEP_KEEP_SIZE ) ) { ret = - ENOMEM ; goto out_mutex ; } if (! inode_mutex_unlock ( & inode_mutex ) ) { ret = - ENOMEM ; goto out_mutex ; } ret = inode_mutex_unlocked_mutex ( & inode_mutex ) ; if ( ret ) goto out_unlocked_down ( & FALLOC_GET_FL_FL_KEEP_KEEP_K,0
1374,<S2SV_ModStart> ; free ( pool <S2SV_ModEnd> ) ; } else,0
1375,<S2SV_ModStart> return map ; map =,1
1376,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> char * cp <S2SV_ModStart> * cp, const char * dp <S2SV_ModEnd> ) { int <S2SV_ModStart> = '\\0' ) { if ( * cp == '\\\\' ) return NULL ; } else if ( ( * cp == '\\\\' ) ) return 0 ; <S2SV_ModStart> } else { * cp = ( * cp ++ ) == '\\\\' ) return ( * cp ++ ) ; } else if ( ( * cp == '\\0' ) return ( * cp == '\\\\' ) || * cp == '\\0' ) { if ( * cp == '\\0' ) continue ; } else { <S2SV_ModEnd> if ( * cp <S2SV_ModStart> ) ; } <S2SV_ModEnd> } else { <S2SV_ModStart> == '\\0' ) return NULL ; } <S2SV_ModEnd> } else { <S2SV_ModStart> == '\\\\' <S2SV_ModEnd> } else { <S2SV_ModStart> == '\\0' ) return 0 ; } <S2SV_ModEnd> } else { <S2SV_ModStart> == '\\0' ) return 0 ;",0
1377,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1378,<S2SV_ModStart> ; if ( <S2SV_ModEnd> size_left < 4,1
1379,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> char * pixhea <S2SV_ModEnd>, char * <S2SV_ModStart>, pix ) ; <S2SV_ModEnd> p = pix <S2SV_ModStart>, 0, pix <S2SV_ModEnd> ) ; }",0
1380,<S2SV_ModStart> { int i ; int <S2SV_ModEnd> ubits = BN_num_bits <S2SV_ModStart> ( v ) ; int <S2SV_ModEnd> ubits = BN_num_bits <S2SV_ModStart> ( u ) ; int <S2SV_ModEnd> ubits <= 0 <S2SV_ModStart> 0 ) { if ( <S2SV_ModEnd> udp [ 0 <S2SV_ModStart> ) break ; },0
1381,<S2SV_ModStart> best_mv ; memcpy <S2SV_ModEnd> ( x ->,0
1382,<S2SV_ModStart> crypto_report_predictor_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp.,0
1383,<S2SV_ModStart> = alloc ; size_t <S2SV_ModEnd> strindex = 0,1
1384,"<S2SV_ModStart>, nbits ; if ( msg -> readcount > msg -> cursize ) { return 0 ; } <S2SV_ModStart> ) ) { if ( msg -> readcount > msg -> cursize ) { msg -> cursize = msg -> cursize + 1 ; return 0 ; } <S2SV_ModStart> & 7 ; if ( msg -> cursize << 3 ) { msg -> cursize = msg -> cursize + 1 ; return 0 ; } <S2SV_ModStart> & 7 ; if ( msg -> bit > msg -> cursize << 3 ) { msg -> cursize = msg -> cursize + 1 ; return 0 ; }",0
1385,<S2SV_ModStart> int idx ; unsigned int count ; <S2SV_ModStart> -> count ; count = kcontrol -> count ; <S2SV_ModStart> ; idx < <S2SV_ModEnd> count ; idx,1
1386,<S2SV_ModStart> ; out1 : cancel_work_sync ( & dev -> kevent ) ; del_timer_sync ( & dev -> delay ) ;,1
1387,"<S2SV_ModStart> * data, size_t <S2SV_ModEnd> len ) {",0
1388,"<S2SV_ModStart>, _ ), NULL <S2SV_ModEnd> ) ; else",0
1389,<S2SV_ModStart> ; if ( plen < 0 ||,0
1390,"<S2SV_ModStart> acl ) { struct iattr iattr ; retval = posix_acl_update_mode ( inode, & acl ) ; if ( retval <S2SV_ModEnd> ) goto err_out <S2SV_ModStart> iattr ) ; <S2SV_ModEnd> } retval =",0
1391,<S2SV_ModStart> header. types_size <S2SV_ModEnd> ) { continue,1
1392,<S2SV_ModStart> : case NPPVformValue : case NPPVpluginUrlRequestsDisplayedBool : case NPPVformValue :,0
1393,<S2SV_ModStart> in ) { size_t alloc ; size_t len = 0 ; <S2SV_ModStart> in )out = ( alloc <S2SV_ModEnd> strlen ) ; <S2SV_ModStart> out ) { if (! alloc ) return - 1 ; } <S2SV_ModStart> str ) ; out = ( alloc <S2SV_ModEnd> in + 1 <S2SV_ModStart> out ) ; if ( alloc > 0 ) return - 1 ;,0
1394,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> s ; return FALSE <S2SV_ModEnd> ; } <S2SV_null>,0
1395,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> } else { <S2SV_ModEnd> int bit_depth_perf_cpu ( cpi,0
1396,<S2SV_ModStart> name ) { <S2SV_ModEnd> if (!,0
1397,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1398,<S2SV_ModStart> & 0 ) && <S2SV_ModEnd> ND_TTEST ( *,0
1399,"<S2SV_ModStart>, NULL, <S2SV_ModEnd> data ) ;",1
1400,"<S2SV_ModStart> -> memset <S2SV_ModEnd> ( res,",0
1401,<S2SV_ModStart> return NULL ; <S2SV_ModEnd> i = 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1402,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int md_rows ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> int64_ALIGNED if ( left_to_intra_alloc ) { memset ( xd, 0, sizeof ( xd -> col ) ) ; memcpy <S2SV_ModEnd> ( xd -> <S2SV_ModStart> int, sizeof ( xd <S2SV_ModEnd> ) ) ;",0
1403,,0
1404,"<S2SV_ModStart> len ) { char * val ; size_t len = 0 ; <S2SV_ModStart> 0 ) { if ( strlen ( str ) == '\\0' ) { return NULL ; } <S2SV_ModStart> == '\\0' ) { if ( val == '\\0' ) { break ; } <S2SV_ModEnd> if ( len <S2SV_ModStart> == '\\0' ) { val = str ; break ; } <S2SV_ModEnd> } else { <S2SV_ModStart> ) ; } <S2SV_ModEnd> } else { <S2SV_ModStart> == '\\0' ) { val = strcpy ( val, len ) ; return 0 ; } <S2SV_ModStart> == '\\0' ) { if ( val ) { if ( str == - 1 ) { if ( strcmp ( str, ""Bad <S2SV_blank> a <S2SV_blank> a <S2SV_blank> to <S2SV_blank> "" ) ) ; return NULL ; } } } <S2SV_ModEnd> return 0 ;",0
1405,"<S2SV_ModStart> * jas_iccprof_createfrombuf ( jas_uchar <S2SV_ModEnd> * buf,",1
1406,<S2SV_ModStart> i_flags = NULL <S2SV_ModEnd> ; ei ->,0
1407,<S2SV_ModStart> count ) ; <S2SV_ModEnd> } if (,0
1408,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct ion_handle * <S2SV_ModStart> ; handle = ion_handle_get_by_id_nolock ( client, id <S2SV_ModEnd> ) ; mutex_unlock <S2SV_ModStart> ; return handle <S2SV_ModEnd> ; } <S2SV_null>",1
1409,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart>!= 0 ) vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> rc ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart>!= 0 ) vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> } } } <S2SV_null>",0
1410,<S2SV_ModStart> : if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> : if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; },1
1411,"<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( p, <S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( p +",0
1412,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1413,<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( xd ->,0
1414,"<S2SV_ModStart> data ) { uint16_t status ; <S2SV_ModStart> ( interface, ENC624J600_ECON_RST <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC624J600_EIR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_STY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_EIR_RST <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_ECON2 ) & ENC624J600_RST <S2SV_ModEnd> ) ; # <S2SV_ModStart> ( interface, ENC624J600_EIR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_EIR_ST <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_START ) & ( interface, ENC624J600_RST <S2SV_ModEnd> ) ; <S2SV_ModStart> ( interface, ENC624J600_ST <S2SV_ModEnd> ) ; }",0
1415,<S2SV_ModStart> ] == 0x01 && i < gemsafe_cert_max,1
1416,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
1417,"<S2SV_ModStart> VALUE read_const char * argc, VALUE * argv, VALUE klass ; VALUE parse_options ; int scanned_args ; VALUE parse_options ; int scanned_args ; xmlRelaxNGPtr ctx ; VALUE errors ; int scanned_args = parse_args ( argc, argv, argv, & parse_options ) ; if (! parse_options ) { parse_options = rb_get ( argv, ""@parse_options"", & parse_options ) ; } if (! parse_options ) { parse_options = rb_options ; parse_options = rb_options ; if (! content ) { parse_options = rb_get ( parse_options, ""@parse_options"", & parse_options ), parse_options ) ; } if (! parse_options ) { parse_options = rb_options ; parse_options = rb_options ; parse_options = rb_options ; if (! ( parse_options ) ) { parse_options ( rb_options, ""@parse_options"", & parse_options ), parse_options ) ; return ( rb_options ),",0
1418,"<S2SV_ModStart> vma ) { <S2SV_ModEnd> struct au1200fb_device * <S2SV_ModStart> info -> par <S2SV_ModEnd> ; vma -> <S2SV_ModStart> _CACHE_MASK ; return vm_iomap_memory <S2SV_ModEnd> ( vma, <S2SV_ModStart> ( vma, fbdev -> fb_phys, fbdev -> fb_len <S2SV_ModEnd> ) ; }",1
1419,<S2SV_ModStart> ( line [ <S2SV_ModEnd> ] ; if,0
1420,<S2SV_ModStart> out ; } state -> data [ 2 ] = 0 ; state -> data [ 2 ] ; state -> data [ 2 ] ; state -> data [ 2 ] = NULL ; state -> xfree ( state -> data ) ;,0
1421,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
1422,<S2SV_ModStart> ; if ( <S2SV_ModEnd> arg >= cdi,1
1423,<S2SV_ModStart> out_free ; } } mutex_lock ( & in -> fanout_mutex ) ;,0
1424,<S2SV_ModStart> handle ) { <S2SV_ModEnd> release ( handle <S2SV_ModStart> handle ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1425,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_t s <S2SV_ModStart> * s ; int len <S2SV_ModEnd> = ( int <S2SV_ModStart> s ) { if (! ND_TCHECK2 ( s + len ) ) return - 1 ; <S2SV_ModStart> w ) { if (! s ) return FALSE ; <S2SV_ModEnd> } else { <S2SV_ModStart> s ++ ; } return len ;,0
1426,"<S2SV_ModStart>, i ; if (! ( s -> state & PNG_IHDR ) ) { av_log ( avctx, AV_LOG_ERROR, ""trns <S2SV_blank> before <S2SV_blank> IHDR\\n"" ) ; return AVERROR_INVALIDDATA ; } if (",0
1427,<S2SV_ModStart> return false ; <S2SV_ModEnd> } if (,0
1428,<S2SV_ModStart> } dt -> proto = IP_GET_IPPROTO ( p ) ; dt ->,1
1429,"<S2SV_ModStart> ( interface, KSZ8851_RX <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( interface, KSZ8851_R, KSZ8851_R <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_R_CR <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, KSZ8851_P1SR ) ; <S2SV_ModEnd> } if ( <S2SV_ModStart> ( interface, KSZ8851_RD <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_R_CR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_CR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_RD <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_RD <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, KSZ8851_R <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_R1SR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_R_P1SR <S2SV_ModEnd> ) ; <S2SV_ModStart> ( interface, KSZ8851_P1SR <S2SV_ModEnd> ) ; }",0
1430,"<S2SV_ModStart> const node * name, const <S2SV_ModStart> is_async ) { const node * const node = NULL ; <S2SV_ModStart>, CHILD ( n, 0 ), n0 <S2SV_ModEnd> ; name = <S2SV_ModStart>, NULL, n0 <S2SV_ModEnd> ) ; if",0
1431,<S2SV_ModStart> pdi ) ; goto out <S2SV_ModEnd> ; } <S2SV_null>,0
1432,"<S2SV_ModStart> ( AUDIT_APPARMOR_DENIED, __aa_current_profile ( ), GFP_KERNEL, & sa, NULL <S2SV_ModEnd> ) ; }",1
1433,"<S2SV_ModStart> uint_fast8_t tmp ; siz -> width = 0 ; <S2SV_ModStart> ) ) { goto error ; } if (! siz -> width ||! siz -> height ) { jas_eprintf ( ""not <S2SV_blank> zero <S2SV_blank> area\\n"" ) ; goto error ; } if (",0
1434,"<S2SV_ModStart> = NULL ; sncu_read_lock ( & packet_length, packet_len, NULL, FALSE <S2SV_ModEnd> ) ; }",0
1435,"<S2SV_ModStart>, xmi_data, xmi_size,",1
1436,"<S2SV_ModStart> size_t total_len ; struct iov_iter * buf ; size_t total_len = 0 <S2SV_ModStart> ; size_t total_len = sizeof ( struct iov ) <S2SV_ModStart> -> ops ; <S2SV_ModEnd> size_t total_len <S2SV_ModStart> ; if ( written < total_len ) { err = - EINVAL ; <S2SV_ModStart> break ; } ret = copy_from_iter ( buf -> page, buf -> offset, & iter ) ; if (! ret ) ret = - EFAULT ; if (! buf -> size_t chars ) ret = - EFAULT <S2SV_ModStart> ; break ; } if (! iov_iter_init ( & iter ) ) { ret = - EFAULT ; if (! ret ) ret = - EFAULT <S2SV_ModEnd> ; break ; <S2SV_ModStart> ; break ; <S2SV_ModEnd> } ret =",0
1437,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits <S2SV_ModStart> ) ; } \\\n} <S2SV_ModEnd> Quantum index ; <S2SV_ModStart> ++ ) { next_pixel = MagickFalse ; displacement = 1 ; <S2SV_ModStart> -= MaxHashTable ; if ( k < 0 ) continue <S2SV_ModEnd> ; if (,0
1438,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1439,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> hdl ) { goto cleanup ; <S2SV_ModStart> ] ) ; goto cleanup <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto cleanup <S2SV_ModEnd> ; } if <S2SV_ModStart> 0 ) { if ( hdl -> sm_hdl -> sm_path ) { if ( hdl -> sm_hdl ) unlink ( hdl -> sm_hdl -> c_path [ 0 ] ) unlink ( hdl -> sm_hdl ) ; } if ( hdl -> sm_hdl -> c_hdl ) { if ( hdl -> sm_hdl -> c_path [ 0 ] ) unlink ( hdl -> sm_hdl -> c_path ) ; } if ( hdl -> fe_hdl ) { if ( hdl -> sm_hdl -> c_path [ 0 ] ) unlink ( hdl -> fe_hdl -> c_hdl -> c_hdl ) ; <S2SV_ModStart> hdl ) ; },0
1440,"<S2SV_ModStart> size_t max_samples ; size_t max_samples = 0 ; <S2SV_ModStart> break ; } optstr [ 0 ] = 0 ; size_t max_samples = 0 ; <S2SV_ModStart> break ; case JAS_DBGLOG ( ""%s <S2SV_blank> name <S2SV_blank> %d\\n"", optstr, optstr ) ; case <S2SV_ModStart> break ; case JAS_DBGLOG ( optstr, optstr ) ) ; break ; case",0
1441,<S2SV_ModStart> ; } } if ( config -> cmd ) goto cleanup ;,0
1442,<S2SV_ModStart> ) { return ret <S2SV_ModEnd> ; } if <S2SV_ModStart> S2SV_null> <S2SV_null>,0
1443,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1444,"<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( param,",0
1445,<S2SV_ModStart> 2 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,1
1446,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) ) goto out_mutex ; kvm_unlock ( & nr_info ) ; if ( unlikely ( nr ) ) return - EINVAL ; if (,0
1447,<S2SV_ModStart> -> private_data ; if <S2SV_ModEnd> ( bq ->,0
1448,<S2SV_ModStart> else { return false <S2SV_ModEnd> ; } case,1
1449,"<S2SV_ModStart> = 0 ; memset ( & sa, 0, sizeof ( sa ) ) ;",0
1450,<S2SV_ModStart> (! handle ||! SecIsValidHandle ( handle ),1
1451,<S2SV_ModStart> -> private_data ; size_t <S2SV_ModEnd> order = 0,0
1452,<S2SV_ModStart> break ; } old_dentry -> d_name = 0 ; if ( new_dir!= old_dentry ) goto out ;,0
1453,<S2SV_ModStart> OP_EXACT1 ) ; <S2SV_ModEnd> DATA_ENSURE ( 1 <S2SV_ModStart> ++ ; s <S2SV_ModEnd> ++ ; MOP_OUT,1
1454,<S2SV_ModStart> = vpx_writer <S2SV_ModEnd> ( xd ->,0
1455,<S2SV_ModStart> = - EINVAL ; msg -> msg_namelen = 0,0
1456,<S2SV_ModStart> mntpath ) ; return - ENOMEM ;,0
1457,<S2SV_ModStart> ) ) { return <S2SV_ModEnd> 1 ; },0
1458,<S2SV_ModStart> dest_keyring ) { mutex_lock ( & dest_key -> user_keyring ) ; <S2SV_ModStart> ) ; } else { dev_err ( & dest_key -> keyring ) ; if ( dest_keyring == NULL ) { dev_err ( & dest_keyring ) ; if ( dest_keyring && dest_key -> user_keyring ) { dev_err ( & dest_key -> dest_keyring ) ; break ; } },0
1459,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> -> common ; PREDICTION_MODE <S2SV_ModEnd> MODE_INFO * <S2SV_ModStart> mi_col = & cpi -> td <S2SV_ModEnd> -> mb ; <S2SV_ModStart>, mi_col, x <S2SV_ModEnd>, mi_row,",0
1460,<S2SV_ModStart> NETIF_F_HW_CSUM | NETIF_F_SG <S2SV_ModEnd> ; if ( <S2SV_ModStart> NETIF_F_HW_CSUM | NETIF_F_SG <S2SV_ModEnd> ; if (,1
1461,<S2SV_ModStart> ; goto read <S2SV_ModEnd> ; if (,0
1462,"<S2SV_ModStart> pixel_info ) ; ( void ) ResetMagickMemory ( pixels, pixel_length ) ;",0
1463,"<S2SV_ModStart> * buf ; size_t buf, count <S2SV_ModStart> ; if ( count < 0 ) return - EINVAL ; if (",0
1464,"<S2SV_ModStart> -> length ; memset ( pMap, 0, length ) ;",0
1465,<S2SV_ModStart> ) ) ; if (! xfs_is_addr_inode -> i_sb ) return 0 ;,0
1466,<S2SV_ModStart> ; } return rc <S2SV_ModEnd> ; } <,0
1467,<S2SV_ModStart> = 0 ; if (! opts ) break ;,0
1468,<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
1469,"<S2SV_ModStart>, sizeof ( double <S2SV_ModEnd> ) ) ;",1
1470,<S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1471,"<S2SV_ModStart>, flags ; ND_TCHECK2 ( tptr [ 0 ], 5 ) ; <S2SV_ModStart> tlen = len <S2SV_ModEnd> ; ND_PRINT (",0
1472,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1473,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( src,",0
1474,<S2SV_ModStart> ( data + len <S2SV_ModEnd> ) ; },0
1475,<S2SV_ModStart> int u ; if ( n < 0 || n >= 32 ) { return - 1 ; } <S2SV_ModEnd> v = 0,1
1476,"<S2SV_ModStart> iovec, req, & iter <S2SV_ModStart> len, & iter",0
1477,"<S2SV_ModStart> } if ( ptr - c -> rcurr > 100 || ( strncmp ( ptr, ""get <S2SV_blank> "", 5 ) && strncmp <S2SV_ModEnd> ( ptr, <S2SV_ModStart> ptr, ""gets <S2SV_blank> "", 5 )",0
1478,"<S2SV_ModStart> ) ; } if (! dev -> desc. bNumEndpoints ) { dev_err ( & dev -> dev, ""too <S2SV_blank> short <S2SV_blank> 0)\\n"" ) ; return - ENODEV ; }",0
1479,"<S2SV_ModStart> length ) { if ( config -> desc. bNumEndpoints < 1 ) { dev_err ( ""too <S2SV_blank> descriptor <S2SV_blank> short"" ) ; return ; } if ( <S2SV_ModStart> config -> desc. bNumEndpoints < 1 ) { dev_err ( & interface -> dev, ""Too <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> config\\n"" ) ; return - EINVAL ; }",0
1480,<S2SV_ModStart> ; ue -> card = card ; ue ->,0
1481,"<S2SV_ModStart> client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; return 0 ; } if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) { exit_client ( client_p, client_p, client_p, ""Malformed <S2SV_blank> AUTHENTICATE""",1
1482,<S2SV_ModStart> ctxt -> rip_relative && likely ( ctxt -> memopp ),1
1483,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",0
1484,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; random_ether_addr (,1
1485,<S2SV_ModStart> ; } } memset <S2SV_ModEnd> ( xd ->,0
1486,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( interface, ENC624J600_ECON2SV_null> static <S2SV_ModStart> ( interface, ENC624J600_MACROBLOCKD <S2SV_ModEnd>, & <S2SV_ModStart> ( interface, ENC624J600_MACON2 ) & ( interface -> <S2SV_ModStart> ( interface, ENC624J600_ECON2 ) <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( interface, ENC624J600_MAADR0 ) & ( interface -> <S2SV_ModStart> ( interface, ENC624J600_BUSY <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_MAADR2, ENC624J600_ERXST <S2SV_ModEnd> ) ; }",0
1487,"<S2SV_ModStart> 1 ] ; size_t <S2SV_ModEnd> len ; memset <S2SV_ModStart> ( psf -> header. len!= psf -> header. len ) <S2SV_ModStart> ) return ; memset ( psf, 0, sizeof ( psf -> header. indx ) ) ;",0
1488,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
1489,"<S2SV_ModStart> ) ) ) { applog ( LOG_WARNING, ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> header <S2SV_blank> to <S2SV_blank> header_bin, <S2SV_blank> got <S2SV_blank> %s"", __func__, header ) ; pool_failed ( pool ) ; return false ; } <S2SV_ModEnd> cb1 = (",0
1490,<S2SV_ModStart>,0
1491,<S2SV_ModStart> case EXIT_REASON_VMON : case EXIT_REASON_INVEPT :,1
1492,"<S2SV_ModStart> ) { const VP9EncoderConfig <S2SV_ModEnd> * const oxcf <S2SV_ModStart>, sf -> <S2SV_ModEnd> ; sf -> <S2SV_ModStart> = cpi -> td. <S2SV_ModEnd> ; sf -> <S2SV_ModStart> ; sf -> <S2SV_ModEnd> s_interval = cpi <S2SV_ModStart> ; sf -> <S2SV_ModEnd> flags = KEY_FRAME <S2SV_ModStart> ; sf -> <S2SV_ModEnd> ; } <S2SV_null>",0
1493,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
1494,<S2SV_ModStart> -> tp ) <S2SV_ModEnd> return 0 ;,0
1495,"<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1496,<S2SV_ModStart> NULL ) { <S2SV_ModEnd> return - 1,0
1497,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1498,"<S2SV_ModStart> char * n <S2SV_ModEnd> ; int n <S2SV_ModStart> = 0 ; if ( n == NULL ) { PyErr_SetString ( n, ""required <S2SV_blank> field <S2SV_blank> from <S2SV_blank> %s"", ch <S2SV_ModEnd> ) ; return",0
1499,<S2SV_ModStart> == NULL ) { <S2SV_ModStart> return 0 ; } <S2SV_ModEnd> if ( svc_ctx,0
1500,<S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1501,<S2SV_ModStart> * s ; unsigned long len = 0 ; <S2SV_ModStart> t ) { if ( s == ( s ) - 1 ) continue ;,0
1502,<S2SV_ModStart> ; if ( entry == NULL ) return EINVAL ; if ( <S2SV_ModStart> KADM5_POLICY ) && entry -> policy == NULL <S2SV_ModEnd> ) return KADM5_BAD_MASK <S2SV_ModStart> ; if ( ( mask & KADM5_POLICY ) && ( mask & KADM5_POLICY_CLR ) ) return KADM5_BAD_MASK <S2SV_ModEnd> ; if (,1
1503,<S2SV_ModStart> frame -> data [ plane ] && frame -> linesize <S2SV_ModStart> [ plane ] && frame -> linesize [ plane ],1
1504,,0
1505,<S2SV_ModStart> * new_memo ; size_t <S2SV_ModEnd> new_memo_add ( &,0
1506,,1
1507,<S2SV_ModStart> NULL ) { if ( len < 0 ) { return - 1 ; },0
1508,<S2SV_ModStart> int imp_dbh && ( imp_dbh -> pmysql ),0
1509,<S2SV_ModStart> * handle = TEMP_FAILURE_RETRY ( <S2SV_ModStart> OENT ) ) <S2SV_ModStart> ( 0 ) ) <S2SV_ModStart> { if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> OENT ) ),0
1510,"<S2SV_ModStart> ) ) ; memset ( fb, 0, sizeof ( struct di ) ) ;",0
1511,<S2SV_ModStart> ++ ) { if ( szlen > SIZE_MAX - 1 ) return - EINVAL ;,0
1512,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_val ( NSC_CONTEXT <S2SV_ModStart> ; UINT16 rw ; if (! context ) return FALSE ; <S2SV_ModStart> ; } } ; if (! context ) return FALSE ;,0
1513,<S2SV_ModStart> while ( offset > 0 && offset <S2SV_ModStart> < end_offset ) { <S2SV_ModStart> hf_keybuffer ) ; },1
1514,<S2SV_ModStart> STRING ) { return ret ; },0
1515,<S2SV_ModStart> ) { const VP9EncoderConfig <S2SV_ModEnd> * const oxcf <S2SV_ModStart> = get_layer_context ( cpi <S2SV_ModEnd> ) ; int <S2SV_ModStart> ; if ( cpi -> oxcf. screen_mode == KEY_FRAME ) { <S2SV_ModStart> = 0 ; } else if ( cpi -> oxcf. bit_depth > 0 && ( cpi -> oxcf. bit_depth > 0 ) || ( cpi -> oxcf. bit_depth > 0 ) ) { int i ; for ( i = 0 ; i < 2 ; ++ i ) { if ( cpi -> oxcf. bit_depth = 0 ; for ( i = 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1516,<S2SV_ModStart> X86_EFLAGS_RF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1517,"<S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
1518,"<S2SV_ModStart> void write_mode_t vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> { if ( vpx_read_bit <S2SV_ModEnd> ( r ) <S2SV_ModStart> ) return vpx_read_bit <S2SV_ModEnd> ( r, <S2SV_ModStart> ) ; } return vpx_read_bit <S2SV_ModEnd> ( r,",0
1519,<S2SV_ModStart> op + OSPF6HDR_LEN ) ; ND_TCHECK_32BITS ( & hellop -> hello_options,1
1520,<S2SV_ModStart> { if ( datalen!= 1 ) return - EINVAL ; if (,1
1521,<S2SV_ModStart> rc ) { struct task_struct * * <S2SV_ModEnd> rc = KERN_ERR <S2SV_ModStart> task ) { if ( KERN_ERR ( KERN_ERR ( KERN_ERR ) ) { <S2SV_ModStart> rc -> uwbd. task = NULL ; } else { <S2SV_ModEnd> rc -> uwbd <S2SV_ModStart> pid ; } },0
1522,"<S2SV_ModStart> : # line 101 ""hex_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1042 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 102 ""hex_grammar.c"" { yr_re_node_destroy ( ( * yyvaluep ). re_node ) ) ; } # line 1036 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 102 ""hex_grammar.c"" { yr_re_node_destroy ( ( * yyvaluep ). re_node ) ) ; } # line 1042 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 1036 <S2SV_ModEnd> ""hex_grammar.c"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1048 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 107 ""hex_grammar.c"" { yr_re_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line",0
1523,<S2SV_ModStart> : idx ; assert ( ptr >= gfx -> backendData && ptr < ( ( char * ) gfx -> backendData + graphicsGetMemoryRequired ( gfx ) ) ) ;,1
1524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static const VP9_COMMON * const MACROBLOCK * const xd = & td -> mb ; MACROBLOCK * const xd = & td -> mb ; MACROBLOCKD * const xd = & xd -> e_mbd ; MACROBLOCKD * const xd = & td -> mb ; <S2SV_ModStart> ] ; tran_low_t <S2SV_ModEnd> * const xd <S2SV_ModStart> ] ; const tran_low_t <S2SV_ModEnd> t * <S2SV_ModStart> block ) ; const tran_low_t <S2SV_ModEnd> * const xd <S2SV_ModStart> block ) ; tran_low_t <S2SV_ModEnd> * tp = <S2SV_ModStart> ] ; vp9_coeff = vp9_get_coef_prob <S2SV_ModEnd> ( xd -> <S2SV_ModStart> p9_block ) ; vp9_coef_prob <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> ) ; const int vp9_get_prob <S2SV_ModEnd> ( tp, <S2SV_ModStart> p9_id, tx_size, tx_size, tx_size, tx_size ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( tp9_",0
1525,,0
1526,<S2SV_ModStart> { if ( ( <S2SV_ModStart> shmflg & SHM_RND ) && addr >= shmlba,1
1527,<S2SV_ModStart> fd ) { if ( free_data ) fgc = - 1 ;,0
1528,<S2SV_ModStart> ) ) { if ( r1 == NULL ) { return 0 ; },0
1529,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1530,<S2SV_ModStart> : case NPNVSupportsWindowless : case NPNVprivateModeBool : case NPNVsupportsAdvancedKeyHandling,1
1531,"<S2SV_ModStart> ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
1532,"<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> s, 0 )",0
1533,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) { return <S2SV_ModEnd> ; } } <S2SV_ModStart> ) { return NULL ; } <S2SV_ModEnd> } if (,0
1534,<S2SV_ModStart> char * nameptr ; if ( lname [ 0 ] == '\\0' ) { <S2SV_ModStart> ) ) ; } else { <S2SV_ModStart> ) ) ; } <S2SV_ModStart> ) ) ; },0
1535,<S2SV_ModStart> <S2SV_null> <S2SV_null> static const SvcInternal_,0
1536,<S2SV_ModStart> mq ) ; <S2SV_ModEnd> return fq ;,0
1537,<S2SV_ModStart> s ) { uint32 length ; struct stream packet = * s <S2SV_ModEnd> ; struct stream,0
1538,<S2SV_ModStart> * tmp ; zval ; zval_copy_ctor ( & tmp ) ; <S2SV_ModStart> tmp ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> (! tmp <S2SV_ModEnd> ) ; },0
1539,<S2SV_ModStart> ; int i <S2SV_ModEnd> ; if (,0
1540,<S2SV_ModStart> char * buf <S2SV_ModEnd> ; if (,0
1541,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> sBlob = NULL <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return FALSE <S2SV_ModEnd> ; if ( <S2SV_ModStart> S2SV_null> <S2SV_null> <S2SV_null>,0
1542,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1543,<S2SV_ModStart> if ( fhdr <S2SV_ModEnd> ( skb ),0
1544,"<S2SV_ModStart> cpi ) { memset <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( seg, <S2SV_ModStart> } } <S2SV_null> <S2SV_null>",0
1545,"<S2SV_ModStart> * obj_type ; const <S2SV_ModStart> == 0 ) { set_type_comment = NULL ; <S2SV_ModStart> ; if ( set_type_type ( stderr, ""Error"" ) ) return - 1 ; if ( <S2SV_ModStart> ( stderr, ""Invalid <S2SV_blank> field <S2SV_blank> type"" ) ) return - 1 ; } else if ( set_type_type_comment <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if ( set_type_type_comment <S2SV_ModEnd> == 0 ) <S2SV_ModStart> ( stderr, ""Invalid <S2SV_blank> field <S2SV_blank> field <S2SV_blank> "", mi_type_col_type"" ) { <S2SV_ModStart> return 0 ; } <S2SV_ModStart> = 0 ; set_type_comment = 0 ; if ( set_type_type_comment < 0 ) { set_type_type_comment = 0 ; if ( set_type_type_comment <S2SV_ModEnd> ) goto failed <S2SV_ModStart> ; if ( set_type_type_type_comment <S2SV_ModEnd> ) { <S2SV_ModStart> return 0 ; }",0
1546,<S2SV_ModStart>,0
1547,<S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 4 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> ; break ; } while ( context -> pass > 0 && context -> pass < 4 && context -> curY >= p -> height ) { switch ( ++ context -> pass ) { case 2 : context -> curY = i -> posY + 4 ; break ; case 3 : context -> curY = i -> posY + 2 ; break ; case 4 : context -> curY = i -> posY + 1 ; break ; },1
1548,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( x,0
1549,"<S2SV_ModStart> ) ; } smb_ofile_flush <S2SV_ModEnd> ( sr, <S2SV_ModStart> f_mutex ) ; smb_ofile_flush <S2SV_ModEnd> ( sr,",1
1550,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_t s <S2SV_ModStart> * s ; int len <S2SV_ModEnd> = ( int <S2SV_ModStart> s ) { if (! ND_TCHECK2 ( s + len ) ) return - 1 ; <S2SV_ModStart> w ) { if (! s ) return FALSE ; <S2SV_ModEnd> } else { <S2SV_ModStart> s ++ ; } return len ;,0
1551,"<S2SV_ModStart> ; if ( * cp == '\\0' || <S2SV_ModEnd> strchr ( cp <S2SV_ModStart> )!= NULL || <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> ( cp, ""."" ) == 0 || strcmp ( cp, <S2SV_ModStart> ) == 0 <S2SV_ModEnd> ) { run_err",1
1552,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> char * s = TEMPTYP <S2SV_ModEnd> ; char * <S2SV_ModStart> 0 ) { int i ; char * tp = 0 ; char * outbuffer [ 0 ] = '\\0' ; if ( * s == '\\0' ) return <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( * s == '\\0' ) { outputbuffer [ 0 ] = '\\0' ; } else if ( * s == '\\0' ) { outputbuffer = '\\0' ; } else { if ( * s == '\\0' ) goto out ; } } <S2SV_ModEnd> = '\\0' ; <S2SV_ModStart> } else { if ( tp == '\\0' ) { <S2SV_ModEnd> print ( & <S2SV_ModStart> ) ) ; if ( outputbuffer == '\\0' ) { printf ( stderr, "" <S2SV_blank> [\\n"" ) ; else { <S2SV_ModEnd> return 0 ; <S2SV_ModStart> 0' ; } <S2SV_ModStart> } else { if ( isdigit ( outputbuffer ) == '\\0' <S2SV_ModEnd> ; } } <S2SV_ModStart> 0' ) { <S2SV_ModEnd> return ( <S2SV_ModStart> 0' ; }",0
1553,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : ms -> elf_notes_max = * ( const size_t * ) val ; return 0 ;,0
1554,"<S2SV_ModStart> segs ) { <S2SV_ModEnd> u32 hash, <S2SV_ModStart> ; if ( unlikely ( siphash_key_is_zero ( & net -> ipv4. ip_id_key ) ) ) get_random_bytes ( & net -> ipv4. ip_id_key <S2SV_ModEnd>, sizeof ( <S2SV_ModStart>, hash, & net -> ipv4. ip_id_key <S2SV_ModEnd> ) ; id",0
1555,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lineno, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""lineno\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> expr"" ) ; return 1 ; } else <S2SV_ModEnd> { int res <S2SV_ModStart> int res ; res = obj2ast_identifier ( tmp, & lineno, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> obj, & PyId_id <S2SV_ModEnd> ) ==",0
1556,"<S2SV_ModStart> void write_inter_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_prob <S2SV_ModEnd> * w )",0
1557,"<S2SV_ModStart> ctl -> pw, "".chfn""",1
1558,<S2SV_ModStart> { if ( max_length < sizeof ( struct ieee80211_radiotap_header ) ) return - EINVAL ; if ( <S2SV_ModStart> iterator -> _rtheader + sizeof ( uint32_t ),1
1559,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> chunk_free_set ( KERNEL_ERR, inode ) ; <S2SV_ModStart> errno ) ; goto out <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; return - EINVAL ;",0
1560,<S2SV_ModStart> src -> state == NULL <S2SV_ModEnd> ) return 0,0
1561,<S2SV_ModStart> return ; } if ( input <= 0.0 ) { php_error_docref ( NULL ) ; RETURN_FALSE ; },0
1562,<S2SV_ModStart> vpx_codec_alg -> <S2SV_ModEnd> const char * <S2SV_ModStart> const. stats -> <S2SV_ModEnd> ; if (,0
1563,<S2SV_ModStart> dev ) ; if ( cmd -> dev ) return ;,0
1564,<S2SV_ModStart> ; gchar * data ; if ( data_len == NULL ) continue ; if (,0
1565,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> tile_cols ) { <S2SV_ModStart> int tile_col ; memset <S2SV_ModEnd> ( ( tile, <S2SV_ModStart> tile_col ) ; memcpy <S2SV_ModEnd> ( & tile_tile_col <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( & tile_data <S2SV_ModStart>, & tile_data -> tile_col ) ; memcpy <S2SV_ModEnd> ( & tile_data <S2SV_ModStart>, & tile_col, tile_data -> tile_col, tile_cols <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( & tile_data <S2SV_ModStart>, & tile_data -> tile_data -> tile_col ) ;",0
1566,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> NULL <S2SV_ModEnd> vp9_decode ( VP9_COMMON <S2SV_ModStart> cm ) { VP9_COMMON * const cm = NULL ; vpx_get_decode ( cm -> common, NULL ) ; vpx_clear_system_data <S2SV_ModEnd> ( ) ; <S2SV_ModStart> cm ) ; vpx_free <S2SV_ModEnd> ( cm -> <S2SV_ModStart> frame_data ) ; vpx_read <S2SV_ModEnd> ( cm ) ;",0
1567,"<S2SV_ModStart> s ) { if ( s -> GF_IS_INVALID_FILE && ( <S2SV_ModStart>, s ) ) < GF_LOG_ERROR ) { return GF_LOG_ERROR ; } <S2SV_ModEnd> if ( s",0
1568,<S2SV_ModStart> client -> priv ; },0
1569,<S2SV_ModStart> -> count ; new_fpl -> user = get_uid ( fpl -> user ) ;,1
1570,<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> * opt ; opt = rcu_dereference ( inet -> opt ) ; if ( opt ) <S2SV_ModStart> & opt -> opt.,0
1571,<S2SV_ModStart> vpx_tree ) { vpx_free ( vpx_tree ) ;,0
1572,"<S2SV_ModStart> ) ) { memset ( & ctx, 0, sizeof ( ctx ) ) ; <S2SV_ModStart> ( ctx ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> flags & VP8_IMG_FMT_HIGHBITDEPTH ) { # endif <S2SV_ModStart> ) ) ; } # ifdef CONFIG_HIGHBITDEPTH if ( ctx -> flags & VP9_IMG_HIGHBITDEPTH ) { if ( ctx -> flags & VPX_IMG_FMT_HIGHBITDEPTH ) ; # endif <S2SV_ModStart> ) ) ; } if ( ctx -> flags & VPX_IMG_FMT_HIGHBITDEPTH ) { if ( ctx -> next_buf -> flags & VPX_IMG_FMT_HIGHBITDEPTH ) ; } memcpy ( ctx -> flags & VPX_IMG_FMT_HIGHBITDEPTH ) ; # endif <S2SV_ModStart> ) ) ; } # endif",0
1573,<S2SV_ModStart> ) ; } atomic_decode_timerid <S2SV_ModEnd> ( &,0
1574,<S2SV_ModStart> ) ; struct mnt_namespace * ns = ns -> mnt_ns ; struct <S2SV_ModStart> ; if (! pending_mounts ( ns ) ) { err = - ENOMEM ; goto out ; } if (,0
1575,"<S2SV_ModStart>, & len, 0",1
1576,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = _mm_set1_epi16 ( ( int16_t ),0
1577,<S2SV_ModStart> int rc ; const VP9EncoderConfig <S2SV_ModEnd> * oxcf =,0
1578,"<S2SV_ModStart> * buf ; jas_uchar <S2SV_ModEnd> buf [ 0 <S2SV_ModStart> ] ) ; jas_uchar <S2SV_ModEnd> ( buf,",0
1579,"<S2SV_ModStart> int fout, int maxoffset <S2SV_ModStart> NULL, fout, maxoffset",0
1580,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart>, MODE_INFO * cpi <S2SV_ModEnd> ) { MACROBLOCKD * <S2SV_ModStart> x = & td <S2SV_ModEnd> -> mb ; <S2SV_ModStart> -> mb ; vpx_writer * const x = & cpi -> mbmi_ext ; RD_COUNTS * const x = & cpi -> td. mbmi_ext ; <S2SV_ModStart> ] ; MB_MODE_INFO_EXT * const mbmi_ext = x -> mbmi_ext ; const int cpi -> mbmi_ext = cpi -> mbmi_ext ; const int bsize = cpi -> mbmi_ext ; cpi -> sf. mbmi_ext = cpi -> td. mbmi_ext ; cpi -> sf_id = cpi -> mbmi_ext <S2SV_ModEnd> ; x -> <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( cpi",0
1581,"<S2SV_ModStart> length ) { if ( config -> desc. bNumEndpoints < 1 ) { dev_err ( ""too <S2SV_blank> descriptor <S2SV_blank> short"" ) ; return ; } if ( <S2SV_ModStart> config -> desc. bNumEndpoints < 1 ) { dev_err ( & interface -> dev, ""Too <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> config\\n"" ) ; return - EINVAL ; }",0
1582,<S2SV_ModStart> key ) { <S2SV_ModEnd> unsigned char key2 <S2SV_ModStart> ] ; struct crypto_cipher * tfm_des <S2SV_ModEnd> ; str_to_key ( <S2SV_ModStart> ] ) ; if ( tfm_des ) { crypto_free_des ( tfm_cipher ) ; return 0 <S2SV_ModEnd> ; } <S2SV_null>,0
1583,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1584,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> read_bit_buffer ( int <S2SV_ModStart> ) return AVERROR_INVALIDDATA ; size_t <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return AVERROR_INVALIDDATA ; size_t <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { return AVERROR_INVALIDDATA ; } <S2SV_ModEnd> } else { <S2SV_ModStart> ) ; } return AVERROR_INVALIDDATA ;,0
1585,<S2SV_ModStart> i > pos + delta <S2SV_ModStart> off + 1 <= pos + delta <S2SV_ModEnd> ) insn ->,1
1586,<S2SV_ModStart> case EXIT_REASON_INVEPT : case EXIT_REASON_INVVPID :,1
1587,<S2SV_ModStart> ; if ( p == '\\0' ) { continue ; } if (,0
1588,<S2SV_ModStart> ; if ( packet -> payload_len < NULL ) return 0 ; if (,0
1589,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
1590,"<S2SV_ModStart> ++ r ; if <S2SV_ModEnd> ( pow ( <S2SV_ModStart>, dim ) <= entries ) return - 1 ; if <S2SV_ModEnd> ( ( int <S2SV_ModStart> dim ) ) > entries ) return - 1 <S2SV_ModEnd> ; return r",1
1591,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> x ), exception ) <S2SV_ModEnd> ; return (",0
1592,<S2SV_ModStart> ; if ( inet -> opt. opt &&,0
1593,<S2SV_ModStart> * tmp ; zval ; zval_copy_ctor ( & tmp ) ; <S2SV_ModStart> tmp ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> (! tmp <S2SV_ModEnd> ) ; },0
1594,"<S2SV_ModStart> int ret ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, 0 )",0
1595,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1596,<S2SV_ModStart> cfg ) { struct stat st ; FILE * file = NULL ; int fd = - 1 ; <S2SV_ModStart> } else { fd = open ( O_WRONLY | O_APPEND | O_CLOEXEC | O_NOFOLLOW | O_NOFOLLOW | O_CLOEXEC | O_NOFOLLOW | O_CLOEXEC | O_NOFOLLOW | O_CLOEXEC | O_CLOEXEC | O_NOCTTY ) ; if ( fd == - 1 ) fd = - 1 ; fd = - 1 ; fd = - 1 ; fd = - 1 ; fd = open ( fd ) ; if ( fd == - 1 ) fd = - 1 ; fclose ( fd ) ; <S2SV_ModStart> } else { fclose ( fd <S2SV_ModEnd> ) ; } <S2SV_ModStart> } else { fclose ( fd <S2SV_ModEnd> ) ; },0
1597,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! f2fs_readonly (,1
1598,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
1599,"<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n"", <S2SV_ModStart> y3 ) ; sendClean ( outputbuffer ) ;",0
1600,<S2SV_ModStart> ) return FALSE <S2SV_ModEnd> ; if (,0
1601,<S2SV_ModStart> user ) ; <S2SV_ModEnd> struct user =,0
1602,<S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( cpi ->,0
1603,<S2SV_ModStart> == ARPHRD_ETHER ) { <S2SV_ModStart> ether_setup ) ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; },1
1604,"<S2SV_ModStart> * data ; struct stream packet = * s ; <S2SV_ModStart> ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } if (",1
1605,<S2SV_ModStart> pbi ) { ( void ) buf ;,0
1606,<S2SV_ModStart> { if ( l == NULL ) break ; if (,1
1607,<S2SV_ModStart> 0 ) { if ( ( xWantedSize > portBYTE_ALIGNMENT_MASK ) ) { xWantedSize = ( xWantedSize + ( xWantedSize & portBYTE_ALIGNMENT_MASK ) > xWantedSize ) ) { xWantedSize = 0 ; },0
1608,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1609,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1610,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpDiff ( TIFF <S2SV_ModStart> cc ) ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> stride ) )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""fpDiff"", ""%s"", ""(cc%(bps*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> tmp ) return 0 <S2SV_ModStart> cp -- ) return 1 ;",1
1611,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1612,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( sb ->,0
1613,<S2SV_ModStart> * tptr ; ND_TCHECK2 ( * tptr ) ;,0
1614,<S2SV_ModStart> { uint16 bitspersample = 1,0
1615,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1616,"<S2SV_ModStart> * cpi, vpx_prob <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> ] ; vpx_probs <S2SV_ModEnd> [ i ] <S2SV_ModStart> ] ; vpx_prob <S2SV_ModEnd> coeff_prob = cpi",0
1617,"<S2SV_ModStart>, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
1618,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0x0 ; state -> data [ 1 ] = 0x87 ; state -> data [ 1 ] = 0x0 ; state -> data [ 1 ] = 0x86 ; state -> data [ 1 ] = 0x86 ; state -> data [ 1 ] = 0x0 ; state -> data [ 1 ] = 0x86 ; state -> data [ 1 ] = 0x0 ; state -> data [ 1 ] = 0x0x0 ; state -> data [ 1 ] = 0x86 ; state -> data [ 1 ] = 0x0x0x0e ( d, 3, 3, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> 0x0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; state -> data <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> 2 ] = 0 <S2SV_ModEnd> ; if",0
1619,<S2SV_ModStart> inode ) ; ss_free ( inode ) ;,0
1620,<S2SV_ModStart> ( cfg ) <S2SV_ModEnd> return 0 ;,0
1621,"<S2SV_ModStart> int mv_inter_mode_cost ; vpx_prob <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_prob <S2SV_ModEnd> * w, <S2SV_ModStart> * stride, vpx_prob <S2SV_ModEnd> * w, <S2SV_ModStart> mv_cost, vpx_probs <S2SV_ModEnd> NULL ) { <S2SV_ModStart> } return ; <S2SV_ModEnd> } } <S2SV_null>",0
1622,<S2SV_ModStart> return NULL ; <S2SV_ModEnd> if ( buf,0
1623,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> init ( c <S2SV_ModStart> ) { int n = 0 <S2SV_ModEnd> ; for ( <S2SV_ModStart> = 0 ; i = cJSON_GetRemaining ( p, c ) ; if (! * p ) return AVERROR_INVALID ; if ( c == 0 ) { cJSON_free ( c ) ; return AVERROR_INVALID ; }",0
1624,<S2SV_ModStart> ; if ( task == NULL ) return - EINVAL ;,0
1625,"<S2SV_ModStart> new_data ) { struct binfo * inode_sb ; unsigned int i_len ; <S2SV_ModStart> ( inode -> i_sb && inode_sb -> i_sb == bs ) goto out ; if ( <S2SV_ModStart> ( inode -> i_sb > bs ) goto out_free_sb ; if ( inode -> i_sb ) { if ( inode_sb -> i_sb!= b_len ) goto out_free_sb ; } <S2SV_ModStart> ) ) ; if ( inode -> i_sb ) goto out_free_sb ; <S2SV_ModStart> ( inode ) ; if ( inode -> i_sb ) > inode -> i_sb -> i_len ) { goto out_free_sb ; } <S2SV_ModStart> ( inode ), i_sb -> i_sb ) > b_len ) goto out_sb ; if ( inode -> i_sb -> i_len ) goto out_free ; } <S2SV_ModStart> ( inode ) goto out ; if ( inode_sb -> i_sb ) > b_len ) goto out_sb ; if ( inode -> i_sb ) goto out_free_sb ; <S2SV_ModStart> ( inode ) ; if ( inode!=",0
1626,"<S2SV_ModStart>, n ) ; if ( w == NULL ) return 0",1
1627,"<S2SV_ModStart> i ] ) { size_t <S2SV_ModEnd> mem = 0 <S2SV_ModStart> ) ; } memset ( & buf, 0, sizeof ( a ) ) ;",0
1628,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int i ; int tile_buffer_info = 0 <S2SV_ModEnd> ; int tile_buffer_info <S2SV_ModStart> * const tile_info = vpx_writer <S2SV_ModEnd> ( & pbi <S2SV_ModStart> ] ) ; vpx_free ( tile_data ) ; vpx_write_bit <S2SV_ModEnd> ( & pbi <S2SV_ModStart> ) ) ; vpx_free ( pbi -> tile_buffer ) ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( pbi -> num_alloc_buffers ( & pbi -> num_alloc ) ) { vpx_free ( pbi -> tile_data ) ; return - 1 ; } <S2SV_ModStart> ] ) ; vpx_free ( pbi -> tile_data ) ; vpx_free ( pbi ) ;,0
1629,<S2SV_ModStart> = 0 ; last_pos = ( unsigned ) malloc ( ) ; if ( len > 16 ) return - 1 ;,0
1630,<S2SV_ModStart> out_free ; } } mutex_lock ( & in -> fanout_mutex ) ;,0
1631,"<S2SV_ModStart> * seg, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> i ) { const PREDICTION_MODE_FRAME = get_seg_active ( seg, <S2SV_ModEnd> i = get_d <S2SV_ModStart> i ) ; vpx_codec_delta_tree <S2SV_ModEnd> ( seg, <S2SV_ModStart> i ) ; vpx_clear_system_state ( ) ; vpx_rd_rd_tree <S2SV_ModEnd> ( seg, <S2SV_ModStart> i ) ; vpx_clear_system_state ( seg, <S2SV_ModEnd> ) ; } <S2SV_ModStart> i ) ; for ( i = 0 ; i <S2SV_null>",0
1632,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
1633,"<S2SV_ModStart> ( void ) TIFFGetFieldDefaulted <S2SV_ModEnd> ( in,",1
1634,<S2SV_ModStart> : if ( error == NULL ) {,0
1635,<S2SV_ModStart> i < 0 || len,0
1636,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1637,"<S2SV_ModStart> ""corrupt <S2SV_blank> BSON"" ) ; VALIDATE_TEST ( ""test59.bson"", BSON_VALIDATE_NONE, 9, BSON_VALIDATE_NONE, ""corrupt <S2SV_blank> BSON"" ) ;",1
1638,<S2SV_ModStart> ] ) ; if ( x86_pmu == 0 ) return - ENOMEM ;,0
1639,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } ps_dec ->,0
1640,<S2SV_ModStart> -> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock,0
1641,<S2SV_ModStart> ; if ( key_data == NULL ) { kfree ( key_data ) ; kfree ( nr_data ) ; kfree ( key_data ) ; if (,0
1642,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1643,<S2SV_ModStart> { uid_t task = rcu_read_lock ( ) ;,0
1644,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0x0 ; state -> data [ 1 ] = 0x87 ; state -> data [ 1 ] = 0x0 ; state -> data [ 1 ] = 0x86 ; state -> data [ 1 ] = 0x86 ; state -> data [ 1 ] = 0x0 ; state -> data [ 1 ] = 0x86 ; state -> data [ 1 ] = 0x0 ; state -> data [ 1 ] = 0x0x0 ; state -> data [ 1 ] = 0x86 ; state -> data [ 1 ] = 0x0x0x0e ( d, 3, 3, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> 0x0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; state -> data <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> 2 ] = 0 <S2SV_ModEnd> ; if",0
1645,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1646,<S2SV_ModStart> L ) ; g -> gcstate = GCSswpallgc ;,0
1647,<S2SV_ModStart> ; goto out_free <S2SV_ModEnd> ; } <S2SV_null>,0
1648,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> sock ) { const struct ssl_log ( ssl_socket, c ) ; if ( ssl_socket == NULL ) { if ( ssl_log ( ssl_log ( LOG_ERR, ""SSL_ERROR: <S2SV_blank> packet <S2SV_blank> failed"" ) ; return NULL ; } else { c -> s_log ( LOG_ERR, ""SSL_READ <S2SV_blank> failed.\\n"" ) ; return NULL ; } <S2SV_ModStart> c ) ; <S2SV_ModEnd> return NULL ;",0
1649,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int i ; int <S2SV_ModEnd> crypto_info = 0 <S2SV_ModStart> ; int sockaddr = sizeof ( struct sockaddr_in ) ; <S2SV_ModStart> ; struct sockaddr_info * sockaddr = cipv6_calloc ( sockaddr, 0, 0, sizeof ( struct sockaddr ) ) ; <S2SV_ModStart> ; memcpy ( sockaddr, 0, sizeof ( struct sockaddr ) ) ; <S2SV_ModStart> ; if ( ret = 0 <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ) ) { <S2SV_ModEnd> ; } } <S2SV_ModStart> ; if ( sockaddr ) { <S2SV_ModStart> ) ; } <S2SV_ModEnd> return 0 ;",0
1650,<S2SV_ModStart> ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi ->,0
1651,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
1652,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MIN, 1 <S2SV_ModEnd>, regs,",1
1653,<S2SV_ModStart> ( bp [ 4 <S2SV_ModEnd> ] ) ;,0
1654,"<S2SV_ModStart> ctx, expr -> unary. child",1
1655,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1656,"<S2SV_ModStart> int mptctl_gettargetinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_targetinfo karg ; <S2SV_ModEnd> int ret ; <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } dctlprintk",0
1657,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> image ) { const char * data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; ThrowReaderException ( CorruptImageDataInFile"" ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageDataInFile"" ) ; ThrowReaderException ( CorruptImageError, ""UnexpectedEndOfFile"" ) ; if ( data == 0 ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) <S2SV_ModStart> ) ) ; if ( status == 0 ) ThrowReaderException ( CorruptImageError, ""UnexpectedEndOfFile""",0
1658,<S2SV_ModStart> ; } } size_t <S2SV_ModEnd> j ; if,0
1659,"<S2SV_ModStart> 0 ; } strchr ( name, 0 ) ;",0
1660,"<S2SV_ModStart> int decode_r, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> { return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
1661,<S2SV_ModStart> ; int is_valid = ( error == GIT_OK ) <S2SV_ModStart> giterr_clear ( ) <S2SV_ModEnd> ; error =,1
1662,<S2SV_ModStart> tree ) { const vpx_prob <S2SV_ModEnd> * probs =,0
1663,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_inter_mode ( VP9_COMMON <S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> inter_mode = xd",0
1664,<S2SV_ModStart> goto invalid ; else { if (! data ) return - EINVAL ;,0
1665,<S2SV_ModStart> vpx_codec_alg_priv ) { int error = 0 ; struct vpx_codec_err_t * global = & ctx -> cfg ; const int error = 0 ; for ( i = 0 ; i < VPX_IMG_FMT_HIGHBITS ) { goto error ; } <S2SV_ModEnd> if (! <S2SV_ModStart> codec_err ) { set_err ( & dec -> codec. corrupted ) ; CONFIG_VP9_HIGHBITS2SV_null> <S2SV_null>,0
1666,"<S2SV_ModStart> op ) ; if ( ndo -> nd_opt == 0 ) { ND_PRINT ( ( ( ndo, "" <S2SV_blank> "" ) ) ) ; break ; }",0
1667,<S2SV_ModStart> * re_mem = 0 <S2SV_ModEnd> ; if (,0
1668,<S2SV_ModStart> ) ) { struct sock_device * sk ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } else { <S2SV_ModStart> = sock_sk ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> ; break ; <S2SV_ModEnd> } if (,0
1669,<S2SV_ModStart> key ) { const char * key = key -> data ; <S2SV_ModStart> ; if ( ret == KEY_IS_INVALID &&,0
1670,<S2SV_ModStart> ; if ( skb -> len < sizeof ( struct nlattr ) ) return 0 ; if ( <S2SV_ModStart> -> nla_len > <S2SV_ModEnd> skb -> len <S2SV_ModStart> skb -> len - A,1
1671,"<S2SV_ModStart> ]. size ; if ( ~ length < 16 ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" )",1
1672,"<S2SV_ModStart> ; stbbr_send ( ""<message <S2SV_blank> type=\'chat\'>"" <S2SV_ModEnd> ) ) ;",0
1673,"<S2SV_ModStart> -> cac_id, serial -> len <S2SV_ModEnd> ) ; SC_FUNC_RETURN",1
1674,<S2SV_ModStart> * tok ) <S2SV_ModEnd> ; tok -> <S2SV_ModStart> tok = NULL ; tok -> curtok = NULL ; for ( tok -> ik ) <S2SV_ModEnd> ; tok ->,0
1675,<S2SV_ModStart> ) ) { return AVERROR_INVALIDDATA,0
1676,"<S2SV_ModStart> s ) { if (! ( scoeff ) ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_ERROR ) ; return GF_NIS_INVALID_FILE ; } <S2SV_ModStart>, s ) )",0
1677,<S2SV_ModStart> 0 ) ; if ( len < 0 ) {,0
1678,<S2SV_ModStart> dio -> numSamples ) <S2SV_ModEnd> ; if (,0
1679,<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> ; if ( addrlen_out > sizeof ( struct oe_sockaddr ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_out > addrlen_out ) OE_RAISE_ERRNO ( OE_EINVAL ) ;,0
1680,,1
1681,<S2SV_ModStart> ; if (! s ) return FALSE ; if (,0
1682,"<S2SV_ModStart> ip6_t opt ; struct ipv6_txoptions * opt <S2SV_ModStart> ) ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> & fl6, <S2SV_ModEnd> opt, &",0
1683,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> uint32_t tmp_step ; int <S2SV_ModEnd> uint32_t * <S2SV_ModStart> ; int i ; uint32_t size_t max_step = 0 ; <S2SV_ModStart> ; if (! ( uint32_t ) ) { goto out ; } <S2SV_ModStart> ) ; uint32_t tmp_start = 0 ; uint32_t path [ i ] = 0 ; for ( i = 0 ; i = 0 ; uint32_t 0 ; uint32_t fu [ i ] = 0 ; uint32_t tmpsize ; uint32_t tmp_step [ i ] = 0 ; if (! (! __func__ ) ) { fprintf ( ""Not <S2SV_blank> too <S2SV_blank> short"" ) ; goto out ; } if (! __func__ ) { if (! __func__ ) goto out ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { goto fail ; } <S2SV_ModStart> ; } # if CONFIG_HDRV_HDRESS <S2SV_ModEnd> extent = <S2SV_ModStart> ; # ifdef CONFIG_HDR_HDRESS <S2SV_ModEnd> ; ifdef <S2SV_ModStart> goto out ; uint32_t",0
1684,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPCR, DM9000_EPAR <S2SV_ModEnd> ) ; dm9000WriteReg ( DM9000_EPAR <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPAR <S2SV_ModEnd> ) ; dm9000WriteReg ( DM9000_EPAR <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPOS <S2SV_ModEnd> ) ; dm9000WriteReg ( <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPOS <S2SV_ModEnd> ) ; }",0
1685,"<S2SV_ModStart>, buffer, t2p -> tiff_datasize,",1
1686,"<S2SV_ModStart> { if (! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",0
1687,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_val ( NSC_CONTEXT <S2SV_ModStart> ; UINT16 rw ; if (! context ) return FALSE ; <S2SV_ModStart> ; } } ; if (! context ) return FALSE ;,0
1688,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int i_sb (,0
1689,"<S2SV_ModStart> new_parent ) { <S2SV_ModEnd> __ptrace_link ( child <S2SV_ModStart>, new_parent, current_cred ( ) <S2SV_ModEnd> ) ; }",1
1690,<S2SV_ModStart> * re_mem = 0 <S2SV_ModEnd> ; if (,0
1691,"<S2SV_ModStart> c -> remote, NULL <S2SV_ModEnd> ) ; }",0
1692,<S2SV_ModStart> size = INT_MAX <S2SV_ModEnd> ; memset (,0
1693,"<S2SV_ModStart> best_predict ) { const VP9_COMMON * const x = & cpi -> common ; <S2SV_ModStart> = x -> mv_err ; vp9_system_param ; <S2SV_ModStart> & cpi -> mv_err, & tmp_cost. mv_err, & cpi -> mv_ext <S2SV_ModEnd> ) { int <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( x -> <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( x ->",0
1694,<S2SV_ModStart> h -> filepath <S2SV_ModEnd> ) ; if,0
1695,<S2SV_ModStart> ; if ( child -> nr == NULL ) break ; if (,0
1696,<S2SV_ModStart> ( used_address && msg_sys -> name,0
1697,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
1698,"<S2SV_ModStart> number_colormaps, number_planes_filled <S2SV_ModStart> ( number_planes_filled, number_planes_filled <S2SV_ModEnd> ) ; number_planes_filled",0
1699,<S2SV_ModStart> ( bb ) && <S2SV_ModEnd> sshbuf_put ( b,0
1700,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1701,<S2SV_ModStart> client ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1702,<S2SV_ModStart> Timestamp ) { <S2SV_ModEnd> return 0 ;,0
1703,<S2SV_ModStart> = 0 ;,0
1704,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1705,<S2SV_ModStart> break ; } old_dentry -> d_name = 0 ; if ( new_dir!= old_dentry ) goto out ;,0
