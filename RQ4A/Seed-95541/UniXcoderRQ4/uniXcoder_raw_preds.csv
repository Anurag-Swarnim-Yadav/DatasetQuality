,raw_predictions,correctly_predicted
0,,0
1,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> if ( skb,0
2,,0
3,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
4,"<S2SV_ModStart> perf_data <S2SV_ModEnd>, void",0
5,<S2SV_ModStart> * buf ; size_t buf ; size_t len = 0 ; <S2SV_ModStart> ) ) { if (! buf ) { if (! buf ) return - 1 ; },0
6,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> output ) { tran_low_t <S2SV_ModEnd> t <S2SV_ModStart> ] = ( tran_t ) { tran_low_t ) ; tran_t = ( tran_t ) ; tran_low_t ) { tran_t = ( tran_t ) ; tran_low_t ) { tran_t ) ; tran_t = ( tran_low_t ) ; tran_t ) { tran_t = ( tran_low_t ) ; tran_t ) ; tran_t = ( tran_low_t ) ; tran_t ) { tran_t = ( tran_t ) ; tran_low_t ) = ( tran_t ) ; tran_t ) ; tran_t = ( tran_low_t ) ; tran_t ) = ( tran_t ) = ( tran_low_t ) ; tran_t ) = ( tran_low_t ) ; tran_t ) = ( tran_t ) = ( tran_t ) ; tran_t ) = ( tran_t ) = ( tran_t ) ; tran_t ) = ( tran_low_t ) = ( tran_t )",0
7,,0
8,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null<S2SV_null> static <S2SV_ModStart> int filt_err ; int filt_frame = 0 ; int filt_frame ; int filt_frame ; int filt_level ; int filt_level ; int filt_level ; int filt_level ; int filt_level ; int filt_level ; int filt_level ; int filt_level = 0 ; int filt_level ; int filt_level ; int filt_level = 0 ; int filt_err ; int filt_level ; int filt_level = 0 ; int filt_level = 0 ; int filt_level = 0 ; int filt_level = 0 ; int filt_level = 0 ; int filt_err ; int filt_level = MIN ( cpi -> filt_level ) ; if ( cpi -> filt_level < 2 ) { if ( cpi -> filt_err = get_level ( cpi -> filt_err, cpi -> filt_frame, cpi -> filt_level ) ; if ( cpi -> filt_level < 2 ) { sse_err = get_err = get_err ; break ; } else if ( cpi -> filt_err = get_",0
9,,0
10,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
11,<S2SV_ModStart> == 64 ) { <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_SIZE_SIZE_32 ; } <S2SV_ModStart> = COAP_SIZE_SIZE_32 ; } <S2SV_ModStart> = COAP_SIZE_SIZE_16 ; } <S2SV_ModStart> = COAP_SIZE_SIZE_32 ; } <S2SV_ModStart> = COAP_SIZE_SIZE_32 ; } <S2SV_ModStart> = COAP_SIZE_SIZE_SIZE_32 ; },0
12,"<S2SV_ModStart> <S2SV_null> <S2SV_null> if ( length < 4 ) { ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> short"" ) ) ) ; return ; } ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> short"" ) ) ) ; if ( length < 4 ) { ND_PRINT ( ndo, ""AVP <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModEnd> ND_PRINT (",0
13,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
14,<S2SV_ModStart> ; size = 0 ;,0
15,,0
16,,0
17,,0
18,<S2SV_ModStart> ; if (! ( inode -> i_uid ) ) return - EINVAL ; if (,0
19,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
20,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
21,<S2SV_ModStart> inode ) ; <S2SV_ModEnd> if ( inode,0
22,,0
23,<S2SV_ModStart> ; int len <S2SV_ModEnd> ; if (,0
24,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
25,,0
26,,0
27,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( io,0
28,<S2SV_ModStart> length ) ; break ; break ;,0
29,<S2SV_ModStart> ; ret = FALSE ; ret = FALSE ;,0
30,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
33,,0
34,"<S2SV_ModStart> ( interface, ENC28J60_EIR <S2SV_ModEnd> ) ; enc28J60_EIR <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC28J60_EIR <S2SV_ModEnd>, interface, ENC28J60_EIR <S2SV_ModEnd>, interface, ENC28J60_ECON1 ) <S2SV_ModStart> ( interface, ENC28J60_ECON2 <S2SV_ModEnd> ) ; return",0
35,<S2SV_ModStart> o ) ; Py_RETURN_NONE <S2SV_ModEnd> ; } result,0
36,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
37,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
38,"<S2SV_ModStart> <S2SV_null> <S2SV_null> struct mb2SV_cache_cache_cache_cache ( struct mb2_cache * mb2_cache * mb2_cache * mb2_cache <S2SV_ModEnd> ) ; struct mb2_cache * mb2_cache <S2SV_ModStart> bh ) { struct mb2_cache_cache_cache_entry * mb2_cache <S2SV_ModEnd> ( bh -> mb2_cache, <S2SV_ModStart> bh ) ; mb2_cache ( bh -> mb2_cache, bh -> mb2_cache ) ; mb2_cache_cache_cache_cache_entry ( bh -> mb2_cache, bh -> mb2_cache, bh -> mb2_cache, bh -> mb2_cache ) ; mb2_cache_cache_cache_entry ( bh -> mb2_cache, bh -> mb2_cache, bh -> mb2_cache ) ; mb2_cache_cache_entry ( bh -> mb2_cache, bh -> mb2_cache, bh -> mb2_cache ) ; mb2_cache_cache_cache_cache_entry ( bh -> mb2_cache, bh -> mb2_cache, bh -> mb2_cache,",0
39,,0
40,"<S2SV_ModStart> * opt, <S2SV_ModEnd> int opt, <S2SV_ModStart> = opt -> opt.",0
41,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
42,,0
43,"<S2SV_ModStart> { ret = posix_acl_mode ( inode <S2SV_ModEnd>, & acl",0
44,,0
45,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( len,0
46,<S2SV_ModStart> <S2SV_null> <S2SV_,0
47,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
48,,0
49,<S2SV_ModStart> * addr ; <S2SV_ModEnd> size = addr,0
50,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
51,,0
52,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
53,<S2SV_ModStart> ; int session <S2SV_ModEnd> ; if (,0
54,<S2SV_ModStart> ( size_t ) <S2SV_ModEnd> ; if (,0
55,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
56,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; break ; }",0
57,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> dev -> desc,0
58,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd>, int",0
59,"<S2SV_ModStart>, & dir ) <S2SV_ModEnd> ; if (",0
60,,0
61,,0
62,<S2SV_ModStart> <S2SV_null> <S2SV_null,0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,<S2SV_ModStart> ( iter ) <S2SV_ModEnd> ; if (,0
65,,0
66,<S2SV_ModStart> char * o <S2SV_ModEnd> ; char * <S2SV_ModStart> str = NULL ; char * type_string = NULL <S2SV_ModStart> = NULL ; if (! type_name ) return NULL ; <S2SV_ModStart> = NULL ; if (! value == NULL ) return NULL ; <S2SV_ModStart> = NULL ; <S2SV_ModEnd> return NULL ;,0
67,,0
68,,0
69,<S2SV_ModStart> uint16BITS ( ptr ) ) ; if ( ptr < 2 ) { ND_16BITS ( ptr ) ) ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ND_16BITS ( ptr ) ) ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; <S2SV_ModStart> ) ) ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ptr ++ ptr ++ ; ptr ++ ; ptr ++ ptr ++ ; ptr ++ ; ptr ++ ) ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ptr ++ ; ptr ++ ) ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ptr ++ ) ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ) ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ) ptr ++ ; ptr ++ ) ptr ++ ; ptr ++ ptr ++ ) ptr ; ptr ++ ptr ++ ) ptr ++ ; ptr ++ ) ptr ++ ; ptr ++ ) ptr ++ ; ptr ++ ; ptr ++ ; ptr ++ ) ptr ++ ; ptr ++ ) ptr ++ ; ptr ++ ) ptr ++ ptr ++ ; ptr ; ptr,0
70,<S2SV_ModStart> ( ) { test_test2 <S2SV_ModEnd> ; },0
71,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
72,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,0
73,"<S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( cpi,",0
74,,0
75,,0
76,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null,0
77,,0
78,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
79,<S2SV_ModStart> = 0 ;,0
80,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
81,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
82,<S2SV_ModStart> <S2SV_null> void,0
83,,0
84,<S2SV_ModStart> ( p + 1 <S2SV_ModEnd> ) ; } if,0
85,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int,0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,<S2SV_ModStart>,0
89,<S2SV_ModStart> ) ) ; rcu_unlock ( ) ;,0
90,,0
91,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
92,"<S2SV_ModStart> * new_size, size_t",0
93,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> vpx_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) { vpx_wb_wb_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_bit <S2SV_ModEnd> ( wb,",0
94,"<S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( mv,",0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> goto out ; msg -> msg_namelen = 0 ;,0
97,<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> (!,0
98,,0
99,,0
100,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
101,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
102,"<S2SV_ModStart> ; ptr = GF_SIZE ( ptr, 1 )",0
103,<S2SV_ModStart>,0
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { struct fmode <S2SV_ModStart> = fmode <S2SV_ModEnd> ; if (",0
105,<S2SV_ModStart> ) break ; <S2SV_ModEnd> break ; },0
106,"<S2SV_ModStart> len, len <S2SV_ModEnd> ) ; if",0
107,,0
108,,0
109,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
110,,0
111,<S2SV_ModStart> ) ; return ret <S2SV_ModEnd> ; ret =,0
112,,0
113,,0
114,<S2SV_ModStart> ; if ( skb -> opt.,0
115,,0
116,<S2SV_ModStart> msg -> msg_namelen = 0,0
117,"<S2SV_ModStart>, arg -> name <S2SV_ModEnd> ) ; return",0
118,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; break ;,0
119,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,"<S2SV_ModStart> tlen ) ; ND_TCHECK2 ( ndo, 1 ) ;",0
122,<S2SV_ModStart> ; if (!,0
123,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
124,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
125,"<S2SV_ModStart> * probs, vpx_prob <S2SV_ModEnd> * probs,",0
126,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
127,,0
128,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 0 ] ; tran_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 0 ] ; tran_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 0 ] = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 0 ] = input <S2SV_ModStart> 3 ] = input ; tran_low_t <S2SV_ModEnd> x4 = input = input <S2SV_ModStart> 0 ] = input ; tran_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 0 ] = input [ 3 ] = input <S2SV_ModStart> 3 ] = input <S2SV_ModEnd> x4 ] = input <S2SV_ModStart> 4 ] ; tran_low_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] = input <S2SV_ModStart> 4 ] = input <S2SV_ModStart> 4 ] = input [ 3 ] = input <S2SV_ModStart> 4 ] = input [ 3 ] = input [ 3 ] = input ] = input",0
129,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
131,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> const VP9_COMMON * const VP9_COMMON * cm, MACROBLOCKD * cm, MACROBLOCKD * cm, MACROBLOCKD * cm, MACROBLOCKD * cm, MACROBLOCKD * const MACROBLOCKD * td, MACROBLOCK_SIZE bsize, MACROBLOCK_SIZE bsize ) { const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCK_SIZE bsize = & td -> mbmi_id = & td -> mbmi_col ) { <S2SV_ModEnd> -> mbmi_col ; <S2SV_ModStart> -> mbmi_size ) { <S2SV_ModEnd> ( mbmi, <S2SV_ModStart> -> mbmi, <S2SV_ModStart> -> mbmi, mi_col ) ; if ( mbmi_col ) { <S2SV_ModStart> -> mbmi_col ) { <S2SV_ModEnd> (",0
132,,0
133,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if (,0
134,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> OE_RAISE_RAISE_RAISE_ERRNO ( OE_ERRNO ( OE_ERRNO ( OE_ERRNO ( OE_ERRNO ( OE_ERRNO ( OE_ERRNO ( OE_ERRNO ( OE_ERRNO ( OE_EINVAL ), OE_EINVAL ) ) ; if ( ret > OE_EINVAL ) { ret = - 1 ; } if ( ret > OE_EINVAL ) { OE_ERRNO ( OE_EINVAL ) ; } if ( ret > OE_EINVAL ) { OE_ERRNO ( OE_EINVAL ) ; }",0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( separator,",0
136,<S2SV_ModStart> size ) { memcpy <S2SV_ModEnd> ( fc ->,0
137,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct <S2SV_ModStart> data * data ; int ret ; if (! buf ) return - EINVAL ; if (! buf ) return - EINVAL ;,0
138,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct,0
139,<S2SV_ModStart> <S2SV_null> <S2SV_null,0
140,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
141,,0
142,,0
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,<S2SV_ModStart> vpx_codec_t data <S2SV_ModEnd> ; if (,0
145,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if (,0
146,"<S2SV_ModStart> y ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12",0
147,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
148,<S2SV_ModStart> = c = cJSON_Number <S2SV_ModEnd> ; if (,0
149,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ) < 0 ) { return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_id, & PyId_id <S2SV_ModEnd> ) ; return <S2SV_ModStart> ) ; } if ( tmp == NULL ) { return 1 ; } if ( tmp == NULL ) { return 1 ; } if ( tmp == PyExc_CLEAR ( tmp ) ; } if ( tmp ) { return 1 ; } if ( tmp == PyId_TypeError, & PyId_CLEAR ( PyId_id <S2SV_ModEnd> ) ; <S2SV_ModStart> ) ; } if ( tmp == NULL ) { return 1 ; } if ( tmp == NULL ) { return 1 ; } if ( tmp == Py_CLEAR ( tmp ) ; } else { return 1 ; } if ( tmp == PyExc_CLEAR ( tmp ) ; } else { return 1 ; } if ( tmp == NULL ) { return 1 ; } if ( tmp == PyExc_SetString ( PyId_CLEAR ( PyId_CLEAR ( PyId_id, & PyId_id, & PyId_id, & PyId_id <S2SV_ModEnd> ) ;",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,<S2SV_ModStart> goto err ; <S2SV_ModEnd> if ( msg,0
152,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
153,<S2SV_ModStart> ; int i <S2SV_ModEnd> ; if (,0
154,,0
155,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> if ( fname ) { fprintf ( fname ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( fname ) { <S2SV_ModStart> ) ; } if ( fname ) { fprintf ( fname, fname ) ; free ( fname ) ;",0
156,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
157,,0
158,<S2SV_ModStart> = 0 ;,0
159,"<S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR_ISR_ISR, KSZ8851_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_ISR_ISR_ISR_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR_ISR_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR_ISR, KSZ8851_ISR <S2SV_ModEnd> ) ; }",0
160,"<S2SV_ModStart> void wb, vpx_write_bit <S2SV_ModEnd> * wb )",0
161,"<S2SV_ModStart> ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
162,,0
163,,0
164,<S2SV_ModStart> <S2SV_null> <S2SV_null,0
165,<S2SV_ModStart> ; ret = ret <S2SV_ModEnd> ; ret =,0
166,<S2SV_ModStart> = 0 ; ps_dec -> u4_size = 1 ;,0
167,<S2SV_ModStart> ; ret = insn_reg_reg_reg_reg_reg_val <S2SV_ModEnd> ( & src_reg,0
168,<S2SV_ModStart>,0
169,<S2SV_ModStart> = 0 ;,0
170,<S2SV_ModStart> <S2SV_null> <S2SV_,0
171,,0
172,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null,0
173,<S2SV_ModStart> file ) ; <S2SV_ModEnd> return 0 ;,0
174,,0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
176,"<S2SV_ModStart> in_stride, in_stride <S2SV_ModEnd> ) ; if",0
177,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_col ; MACROBLOCKD * const tile_col = & cpi -> common ; MACROBLOCKD * const tile_col ; MACROBLOCKD * const tile_info = & cpi -> common ; MACROBLOCKD * const tile_info = & cpi -> common ; MACROBLOCKD * const tile_info = & cpi -> common ; MACROBLOCKD * const tile_info = & cpi -> common ; MACROBLOCKD * const tile_col ; MACROBLOCKD * const tile_info = & cpi -> mi_col ; MACROBLOCKD * const MACROBLOCKD * const tile_info = & cpi -> mi_col ; MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const tile_info = & cpi -> common ; MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const int64_t * const uint8_t * const int64_t * const int64_t * const int mi_,0
178,"<S2SV_ModStart> ), NULL <S2SV_ModEnd> ) ; if",0
179,,0
180,,0
181,<S2SV_ModStart> ; int len <S2SV_ModEnd> ; if (,0
182,,0
183,,0
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,"<S2SV_ModStart> ) ThrowReaderException ( CorruptImageHeader"" ) ;",0
186,<S2SV_ModStart> len ; } ND_TCHECK2 ( bp [ len ] ) ;,0
187,<S2SV_ModStart> return - ENOMEM <S2SV_ModEnd> ; if (,0
188,<S2SV_ModStart> * jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_matind_matind_t,0
189,<S2SV_ModStart> ; ps_dec -> i4_size = 0,0
190,,0
191,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
192,,0
193,"<S2SV_ModStart> ( r, str <S2SV_ModEnd> ) ; }",0
194,,0
195,,0
196,,0
197,"<S2SV_ModStart> char * tmp_filename, ""%s: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, tmp_filename, <S2SV_ModStart> char tmp_filename ) ; if (! tmp_filename ) { <S2SV_ModStart> ) ; goto out ; } <S2SV_ModEnd> if ( tmp_filename <S2SV_ModStart> ) ; goto cleanup <S2SV_ModEnd> ; } <S2SV_ModStart> ; if ( tmp_filename ) ;",0
198,<S2SV_ModStart> ) ) ; ND_TCHECK2 ( tptr ) ;,0
199,,0
200,<S2SV_ModStart> char * data <S2SV_ModEnd> ; char *,0
201,"<S2SV_ModStart> ) ; } copy_user <S2SV_ModEnd> ( src,",0
202,<S2SV_ModStart> = 0 ;,0
203,"<S2SV_ModStart> ( MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd>",0
204,<S2SV_ModStart>,0
205,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi ->,0
206,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TIFF,0
207,"<S2SV_ModStart> ( mi_data, NULL <S2SV_ModEnd> ) ; }",0
208,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * <S2SV_ModStart> len ; size_t <S2SV_ModEnd> len = NULL <S2SV_ModStart> = NULL ; if ( len > len ) return NULL ; <S2SV_ModStart> = NULL ; <S2SV_ModEnd> return NULL ;,0
209,,0
210,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
211,,0
212,,0
213,<S2SV_ModStart> ( size_t ) <S2SV_ModEnd> ; if (,0
214,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
215,,0
216,<S2SV_ModStart> ; size_t <S2SV_ModEnd> ; if (,0
217,,0
218,<S2SV_ModStart> dev ) ; <S2SV_ModEnd> if ( bi,0
219,<S2SV_ModStart> 0 ) ; msg -> msg_namelen = 0,0
220,,0
221,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
222,<S2SV_ModStart> <S2SV_null> <S2SV_null,0
223,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
224,<S2SV_ModStart> NULL ) { <S2SV_ModEnd> char * p,0
225,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
226,,0
227,,0
228,"<S2SV_ModStart> ( info, size_t <S2SV_ModEnd> size,",0
229,,0
230,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, regs",0
231,<S2SV_ModStart> ; r = TEMP_FAILURE_RETRY (,0
232,,0
233,,0
234,,0
235,<S2SV_ModStart> len ) ; <S2SV_ModEnd> return 0 ;,0
236,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) break ;",0
237,,1
238,,0
239,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; if ( <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header. indx <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> += psf -> header. indx <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> += psf -> header. indx <S2SV_ModStart> = psf -> header. indx <S2SV_ModEnd> ; if ( <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> += psf -> header. indx <S2SV_ModStart> = psf -> header. indx <S2SV_ModEnd> ; if (,0
240,,0
241,,0
242,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> perf_event_event_event_event_event ( event <S2SV_ModEnd> ) ; struct <S2SV_ModStart> event ) ; perf_event_event_event_event_event_event_event ( event <S2SV_ModEnd> ) ; },0
243,<S2SV_ModStart> ; ctx -> <S2SV_ModEnd> ; ctx ->,0
244,"<S2SV_ModStart> ( tptr, sizeof ( tptr ) )",0
245,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
246,"<S2SV_ModStart> ) ; } copy_user <S2SV_ModEnd> ( src,",0
247,,0
248,,0
249,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> rows ) ; }",0
250,,0
251,,0
252,<S2SV_ModStart> ( server. ds_enabled <S2SV_ModEnd> ) ==,0
253,,0
254,,0
255,<S2SV_ModStart> r ) { sprintf ( outputbuffer ) ;,0
256,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
257,<S2SV_ModStart> = 0 ; size_t count = 0 ;,0
258,<S2SV_ModStart> = 0 ; opt.,0
259,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
260,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
261,,0
262,"<S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> ) ; status <S2SV_ModStart> ( interface, KSZ8851_LEN <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, KSZ8864 <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_MAR2 <S2SV_ModEnd> ) ; }",0
263,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
264,<S2SV_ModStart> ; size_t <S2SV_ModEnd> ; size_t,0
265,<S2SV_ModStart> ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ),0
266,<S2SV_ModStart> = cpi -> gf_bandwidth <S2SV_ModEnd> ; if (,0
267,,0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null>,0
270,,0
271,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( pbi ->,0
272,,0
273,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
274,<S2SV_ModStart> ; h -> size <S2SV_ModEnd> ; if (,0
275,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null,0
276,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> v2SV_null> <S2SV_null> <S2SV_null>,0
277,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
278,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> char * <S2SV_ModStart> ) { if ( a -> path == '\\0' ) { archive_error ( a -> path, ""Header"" ) ; return NULL ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( a <S2SV_ModStart> ) ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) ; } <S2SV_ModEnd> if (!",0
279,<S2SV_ModStart> int i_len ; struct bh ; struct i_bh ; struct i_offset * i_offset ; struct i_offset = inode_offset ; if ( i_offset ) goto out_offset <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto out_bh <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto out_bh <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto out_bh <S2SV_ModEnd> ; if (,0
280,<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm,0
281,<S2SV_ModStart> wq ) ; spin_lock ( q ) ;,0
282,<S2SV_ModStart> uint32_t val ; if ( addr + sizeof ( val ) > vdev -> config ) return,0
283,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
284,,0
285,,0
286,<S2SV_ModStart> ; size_t len <S2SV_ModEnd> ; size_t,0
287,,0
288,,0
289,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
290,,0
291,<S2SV_ModStart> ) break ; status = DestroyImageList ( image ) ;,0
292,<S2SV_ModStart> <S2SV_null> <S2SV_null> static char *,0
293,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> char * cp ; char * cp = '\\0' ; char * cp ; char * cp ; char * cp = '\\0' ; char * cp ; char * cp = '\\0' ; char * cp ; char * cp = '\\0' ; char * cp ; char * cp = '\\0' ; char * cp = '\\0' ; char * cp ; char * cp = '\\0' ; char * cp = NULL ; char * cp = '\\0 <S2SV_ModEnd> ; char * <S2SV_ModStart> ; if ( cp == NULL ) { char * cp = '\\0' ; if ( cp == '\\0' || strcmp ( cp, '\\0' ) == '\\0' <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( cp, <S2SV_ModEnd> ) ;",0
294,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
295,,0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,<S2SV_ModStart> ; if ( ps_dec -> ps_slice -> ps_cur_slice -> ps_slice -> ps_slice -> ps_cur_slice -> ps_slice -> ps_slice -> ps_slice -> ps_slice -> ps_dec -> ps_dec -> ps_dec -> ps_slice ) { ps_dec -> ps_dec -> ps_dec -> ps_slice ; },0
298,,0
299,,0
300,"<S2SV_ModStart>, number_planes, number_planes_planes_planes <S2SV_ModEnd> ) ; number_planes",0
301,,0
302,,0
303,<S2SV_ModStart> ( pool ) <S2SV_ModEnd> ; if (,0
304,<S2SV_ModStart> = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length ),0
305,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
306,,0
307,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> struct perf_event_event_event_event_event_event_event_event ( struct <S2SV_ModStart> ) ) { struct perf_event_event_event_event_event_event_event_event_event_event_event_event_event_event_event_event_event_event_event_event_event_event_event_event ( event, & event, & event ) ; if ( event ) ) return ret ;",0
308,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> read_mode ( PREDICTION_MODE <S2SV_ModStart> * r, PREDICTION_MODE <S2SV_ModStart> * r, PREDICTION_MODE <S2SV_ModEnd> mode_MODE <S2SV_ModStart> * r ) { PREDICTION_MODE <S2SV_ModEnd> mode = xd -> <S2SV_ModStart> ; const PREDICTION_MODE <S2SV_ModEnd> mode = vp9_mode_mode_mode",0
309,<S2SV_ModStart> return - 1 <S2SV_ModEnd> ; if (,0
310,<S2SV_ModStart> NULL ) ; <S2SV_ModEnd> return NULL ;,0
311,,0
312,,0
313,,0
314,,0
315,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> vpx_write_buffer <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_write_buffer <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_write_buffer <S2SV_ModEnd> ( wb,",0
316,<S2SV_ModStart> char * name <S2SV_ModEnd> ; if (,0
317,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
318,,0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
320,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
321,<S2SV_ModStart> * mnt ; <S2SV_ModEnd> return mnt ->,0
322,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) { vpx_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_bit <S2SV_ModEnd> ( wb,",0
323,"<S2SV_ModStart> ) ; } rb_val = rb_string ( req, NULL, NULL ) ;",0
324,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
325,<S2SV_ModStart> ; size_t <S2SV_ModEnd> ; size_t,0
326,"<S2SV_ModStart> len ) { memset <S2SV_ModEnd> ( str,",0
327,,0
328,"<S2SV_ModStart> len ) ; strcpy <S2SV_ModEnd> ( len, <S2SV_ModStart> len, ""len"", strlen ( len <S2SV_ModEnd> ) ; if",0
329,,1
330,,0
331,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
332,,0
333,"<S2SV_ModStart> ( argv, NULL <S2SV_ModEnd> ) ; if",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,,0
336,<S2SV_ModStart> ; ps_dec -> u4_size = 0,0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
338,<S2SV_ModStart> ( ctx ) <S2SV_ModEnd> ; if (,0
339,<S2SV_ModStart> break ; } break ; break ;,0
340,,0
341,,0
342,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
343,,0
344,<S2SV_ModStart> ; if ( psf -> header. size_t ) return 0 ;,0
345,"<S2SV_ModStart> image -> columns, image -> rows",0
346,"<S2SV_ModStart> ) ; } copy_user <S2SV_ModEnd> ( src,",0
347,,0
348,,0
349,<S2SV_ModStart> ; if (,0
350,,0
351,,0
352,"<S2SV_ModStart> ) ) ; memset ( dev, sizeof ( dev ) ) ;",0
353,,0
354,<S2SV_ModStart> ; L2CAP_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX = L2CAP_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX ; int len = L2CAP_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX ; l2cap_len = L2CAP_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_len = L2CAP_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX ; l2cap_len = l2cap_len = L2CAP_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX_MAX ;,0
355,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & r )",0
356,,0
357,,0
358,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null,0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int64_t <S2SV_ModEnd> VP9_HIGHBITDEPTH int64_t <S2SV_ModStart> = 0 ; const int64_t * const int64_t * const int64_t * const int64_t * const int64_t * const int64_t * const int64_t * const int64_t * const int64_t * dist, int64_t * dist, int64_t * const int64_t * const int64_t * const int64_t * const int64_t * const int64_t * const int64_t * const int64_t * const int64_t * const int64_t * const int64_t * const int64_t * dist, int64_t * const int64_t * dist, int64_t * dist, int64_t * const int64_t * const int64_t * const int64_t * const int64_t * const int64_t * const int64_t * const int64_t * const int64_t * const int64_t * const int64_",0
361,,0
362,<S2SV_ModStart> ; if ( ( * ptr == NULL ),0
363,"<S2SV_ModStart> * r, vpx_reader <S2SV_ModEnd> * r,",0
364,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst_ptr1,",0
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,,0
367,"<S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_RXIF <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_RSP <S2SV_ModEnd> ) ; }",0
368,,0
369,,0
370,,0
371,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
372,,0
373,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
374,,0
375,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ctx ->,0
376,<S2SV_ModStart> ; if ( iinfo -> i_len > i_len ) goto out ; if (,0
377,,0
378,"<S2SV_ModStart> char * ptr, <S2SV_ModEnd> char *",0
379,,0
380,,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,,0
384,,0
385,,0
386,<S2SV_ModStart> x ) { memcpy <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
388,,0
389,,0
390,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
391,,0
392,<S2SV_ModStart> ) ; return ret <S2SV_ModEnd> ; ret,0
393,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
394,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
395,"<S2SV_ModStart> buffer ) { struct mb2_cache * ext2_mb_mb_cache ; ext2_mb_cache = ext2_cache ( ext2_mb_mb_cache ) ; ext2_cache ( new_bh ) ; ext2_bh ( new_bh ) ; ext2_bh ( new_bh ) ; ext2_bh ( & ext2_bh -> b_bh ) ; ext2_bh = ext2_bh ( new_bh ) ; ext2_bh ( new_bh ) ; ext2_bh ( new_bh ( new_bh ), new_bh ) -> b_bh ( new_bh ) -> b_bh ) ; ext2_bh ( new_bh ( new_bh ), ext2_bh ) ; ext2_bh ( new_bh ) -> b_bh ) ; ext2_bh ( new_bh ) ; ext2_bh ( new_bh ( new_bh ), new_bh ) ; ext2_bh ( new_bh ( new_bh ), new_bh ) ; if ( new_bh ( new_bh ) ) ) { ext2_bh ( new_bh ( new_bh (",0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
397,"<S2SV_ModStart> ) ThrowReaderException ( CorruptImageHeader"" ) ;",0
398,"<S2SV_ModStart> data, size <S2SV_ModEnd> ) ; if",0
399,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (,0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ctx ; <S2SV_ModEnd> v2SV_null> <S2SV_null>",0
401,<S2SV_ModStart> ; if ( ps_dec -> ps_slice -> ps_cur_slice -> ps_slice -> ps_slice -> ps_slice -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_dec -> ps_cur_slice ) ;,0
402,,0
403,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
404,<S2SV_ModStart> n ) { jas_matind_t <S2SV_ModEnd> j ; jas_matind_t,0
405,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
406,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( src,",0
407,<S2SV_ModStart> row ; } if ( row == 0 ) { TIFFErrorExt ( tif -> tif ) ; return 0 ; },0
408,,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header,0
410,,0
411,<S2SV_ModStart> ( buf ) <S2SV_ModEnd> ; if (,0
412,<S2SV_ModStart> int length ; uint16_t * len ; uint16_t * len ; uint16_t * len ; <S2SV_ModStart> ] ; uint16_t * len ; uint16_t * len ; uint16_t * len ; <S2SV_ModStart> ; uint16_t * len <S2SV_ModEnd> ; uint16_t <S2SV_ModStart> ; if (,0
413,,0
414,"<S2SV_ModStart>, size, <S2SV_ModEnd> size ) ;",0
415,<S2SV_ModStart> = 0 ; rc = 0 ;,0
416,"<S2SV_ModStart>, cpkt. length <S2SV_ModEnd> ) ; if",0
417,<S2SV_ModStart> ) ; } if ( adata -> conn -> conn ) goto error ;,0
418,"<S2SV_ModStart> skb ) ; memset <S2SV_ModEnd> ( skb,",0
419,,0
420,"<S2SV_ModStart>, & rlen, 0",1
421,"<S2SV_ModStart> char * data <S2SV_ModEnd> ; unsigned char * <S2SV_ModStart>, 0, sizeof ( unsigned char * data ) <S2SV_ModStart> ) ) ; unsigned char * data = TEMP_FAILURE <S2SV_ModEnd> ; if (",0
422,,0
423,,0
424,,0
425,,0
426,<S2SV_ModStart> ; if ( buf_size < 8 <S2SV_ModEnd> ) { exif_log ( exif_log,0
427,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
428,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header,0
430,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
431,<S2SV_ModStart> return - 1 <S2SV_ModEnd> ; if (,0
432,,0
433,,0
434,,0
435,<S2SV_ModStart> char data = TEMP_FAILURE_RETRY ( <S2SV_ModStart> size - 1 <S2SV_ModEnd> ) ; size_t,0
436,,0
437,,0
438,,0
439,"<S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( src,",0
440,<S2SV_ModStart> <S2SV_null> <S2SV_null,0
441,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
442,<S2SV_ModStart> <S2SV_null>,0
443,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
444,<S2SV_ModStart> ; skb ->,0
445,,0
446,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; if ( fd,0
447,,0
448,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> vpx_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) ; vpx_lpf_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) vpx_16 <S2SV_ModEnd> ( s,",0
449,<S2SV_ModStart> ( ctx ) <S2SV_ModEnd> ; ctx ->,0
450,<S2SV_ModStart> ( size ) NULL <S2SV_ModEnd> ; if (,0
451,<S2SV_ModStart> ( ps_stream -> u4_offset,0
452,"<S2SV_ModStart> ( count,",0
453,,0
454,<S2SV_ModStart> char * buf <S2SV_ModEnd> ; char *,0
455,<S2SV_ModStart> char * name <S2SV_ModEnd> ; char *,0
456,,0
457,<S2SV_ModStart> ; if ( iph ->,0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,<S2SV_ModStart> ; if ( size > 64 ) return (,0
460,,0
461,,0
462,,0
463,<S2SV_ModStart> ) { struct sockaddr_lock <S2SV_ModEnd> ( inode ),0
464,"<S2SV_ModStart> comment, string type_comment, int",0
465,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> char *,0
466,,0
467,<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY (,0
468,,0
469,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct <S2SV_ModStart> np -> opt ; struct <S2SV_ModStart> np -> opt ; rcu_read_read_read_lock ( ) ; <S2SV_ModStart> = opt ; rcu_unlock ( ) ;,0
470,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> rows ) ;",0
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
472,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null,0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
475,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
476,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( xd ->,0
477,<S2SV_ModStart> ; if ( hdr -> url == NULL ),0
478,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; break ; }",0
479,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> len ),0
480,<S2SV_ModStart> ; ps_dec ->,0
481,"<S2SV_ModStart> int mptctl_cmd ( MPT_ADAPTER * ioc, <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; if ( <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; if (",0
482,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; break ; }",0
483,<S2SV_ModStart> ; } } if ( strlen ( str ) == - 1 ) { <S2SV_ModStart> ) ; break ; },0
484,<S2SV_ModStart> ; if ( exif_log <S2SV_ModEnd> ( buf +,0
485,,0
486,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> void ) { struct service_options_options_options_options_options_options_options ( & opt, & opt -> opt.",0
487,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
488,,0
489,<S2SV_ModStart> ( image -> rows * image -> rows,0
490,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
491,,0
492,<S2SV_ModStart> ; if (! sk ) return 0 ;,0
493,<S2SV_ModStart> w ) { memset ( outputbuffer ) ;,0
494,,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
496,<S2SV_ModStart> ctx ) ; ret = - EINVAL ;,0
497,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
498,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
499,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
500,<S2SV_ModStart> ; } } free ( pool ) ;,0
501,,0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,<S2SV_ModStart> 0 ) ; if ( len < 0 ) { <S2SV_ModStart> 0 ) ; },0
504,<S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cpi ->,0
505,,0
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
507,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
508,,0
509,,0
510,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
511,,0
512,<S2SV_ModStart> ) ; } ret = 0 ;,0
513,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm ) ; vpx_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_write_bit <S2SV_ModEnd> ( wb,",0
514,<S2SV_ModStart> : if ( optarg ) { <S2SV_ModEnd> return ; },0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context ->,0
516,,0
517,<S2SV_ModStart> 0 ) ; memset <S2SV_ModEnd> ( pc ->,0
518,"<S2SV_ModStart> ( interface, ENC624J600_MAX <S2SV_ModEnd> ) ; uint16_t <S2SV_ModStart> ( interface, ENC624J600_t ) <S2SV_ModStart> ( interface, ENC624J600_t ) <S2SV_ModEnd>, & <S2SV_ModStart> ( interface, ENC624J600_t ) <S2SV_ModStart> ( interface, ENC624J600_t ) <S2SV_ModStart> ( interface, ENC624J600_t ) <S2SV_ModEnd> ) ; enc624J600_t <S2SV_ModStart> ( interface, ENC624J600_LEN <S2SV_ModEnd> ) ; enc624J600_t <S2SV_ModStart> ( interface, ENC624J600_t ) ; }",0
519,"<S2SV_ModStart> args ) { int rb_args ; VALUE rb_args = rb_options ; VALUE rb_args = rb_args ; VALUE rb_args = rb_options ; VALUE rb_args = rb_args ( rb_args, & parse_args, rb_args, rb_args, rb_args, & parse_args, rb_args, & parse_args, rb_args, rb_options ) ; if ( parse_options == 0 ) { rb_args = rb_int ( rb_args, rb_args, rb_args, rb_args, rb_args, rb_args, rb_args, rb_args, & parse_args, rb_options ) ; rb_args = rb_int ( rb_args, rb_args, rb_args, rb_args, rb_args, rb_args, rb_args, & parse_args, & parse_options ) ; rb_int ( rb_args, rb_args, rb_options ) ; rb_args = rb_set ( rb_args, rb_args, rb_args, rb_args, rb_args, rb_args, rb_args, rb_args, rb_",0
520,,0
521,<S2SV_ModStart> 0 ) ; if ( ++ ) return 0 ;,0
522,<S2SV_ModStart> goto out ; err = - EINVAL ;,0
523,<S2SV_ModStart> event ) ; <S2SV_ModEnd> return 0 ;,0
524,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> uint8_t <S2SV_ModStart> uint8_t ) { unsigned char * r ; uint8_t <S2SV_ModEnd> char * <S2SV_ModStart> len ; unsigned int len ; unsigned char * len ; unsigned char * len ; unsigned char * len ; unsigned char * len ; unsigned char * len ; unsigned char * len ; unsigned char * len = MIN ( unsigned char * ) ; unsigned char * ) ; unsigned char * ) { unsigned char * ) ; unsigned char * len = ( unsigned char * ) * ) ; if (! u16_t ) return ( size_t ) ; if (! addr_t ) { unsigned char * ) return ( * ) ; } <S2SV_ModEnd> if ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) ;,0
525,,0
526,"<S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_RXIF <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_RXIF <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_RSP <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_RXIF <S2SV_ModEnd> ) ; }",0
527,,0
528,<S2SV_ModStart> ) ; goto out <S2SV_ModEnd> ; } if,0
529,<S2SV_ModStart> ) ) { return - 1 ; } if (,0
530,<S2SV_ModStart> ) ; return - 1 <S2SV_ModEnd> ; } if,0
531,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( row,0
532,<S2SV_ModStart> len ) ; <S2SV_ModEnd> return 0 ;,0
533,,0
534,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null>,0
535,,0
536,,0
537,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
538,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
539,,0
540,,0
541,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
542,,0
543,<S2SV_ModStart> = 0 ; hdr = 0 ;,0
544,"<S2SV_ModStart> len, length <S2SV_ModEnd> ) ; uint32_t <S2SV_ModStart> len ) ; if ( length < 4 ) goto trunc ;",0
545,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TEMP_ERROR ( ""%s"", strbuffer ) ; memset ( res -> outputbuffer, NULL, sizeof ( stderr ) ) ;",0
546,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( src,",0
547,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( data_len,0
548,,0
549,,0
550,,0
551,"<S2SV_ModStart> ( interface, ENC624J600_MAADR <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd>, & <S2SV_ModStart> ( interface, ENC624J600_MAADR4 <S2SV_ModEnd>, & <S2SV_ModStart> ( interface, ENC624J600_MAADR ) <S2SV_ModStart> ( interface, ENC624J600_MACON2 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_MAADR4 <S2SV_ModEnd>, & <S2SV_ModStart> ( interface, ENC624J600_MACON2 <S2SV_ModEnd> ) ; }",0
552,<S2SV_ModStart> char * header <S2SV_ModEnd> ; char *,0
553,<S2SV_ModStart> ( ctx ) <S2SV_ModEnd> ; if (,0
554,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> v2SV_null> <S2SV_null> <S2SV_null>,0
555,"<S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
556,<S2SV_ModStart> < 0,0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,,0
559,<S2SV_ModStart> ; if ( option [ i ] == INT_MAX ) { if ( option_type == 1 ) { av_arg = 1 ; } <S2SV_ModEnd> if (,0
560,,0
561,,0
562,,1
563,<S2SV_ModStart> NULL ) { <S2SV_ModEnd> return NULL ;,0
564,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ),0
565,<S2SV_ModStart> = 0 ; struct phdr * phdr = 0 ; <S2SV_ModStart> ) ) ; if (! phdr ) { return - EINVAL ; },0
566,<S2SV_ModStart> len - 1 <S2SV_ModEnd> ; if (,0
567,,0
568,,0
569,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> VP9EncoderConfig <S2SV_ModEnd> vp9EncoderConfig <S2SV_ModStart> ) { const VP9EncoderConfig <S2SV_ModEnd> cpi -> oxcf = & cpi -> oxcf <S2SV_ModStart> = 1 ; const int oxcf = ( cpi -> oxcf -> oxcf. avg_frame_frame_bandwidth * cpi -> oxcf. total_bandwidth <S2SV_ModEnd> ) ; const int <S2SV_ModStart> = 1 ; if ( cpi -> avg_frame_frame_frame_frame_frame == ( cpi -> oxcf. total_frame_size ) / 2 ) ; if ( cpi -> oxcf. avg_frame_frame_frame == KEY_FRAME ) { const int rc -> oxcf = ( cpi -> oxcf. avg_frame_frame_frame_size ) ; } else if ( cpi -> oxcf. avg_buffer_frame == ( cpi -> oxcf. avg_frame_size ) ) ; } else if ( cpi -> oxcf. avg_frame_size = ( cpi -> oxcf -> oxcf. avg_frame_size_size_size_size_size ) ; if ( cpi -> oxcf. avg_t oxcf. avg_size =,0
570,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> * r, vpx_reader <S2SV_ModEnd> * r )",0
571,,0
572,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
573,,0
574,,0
575,,0
576,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_arg,0
577,,0
578,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> len ),0
579,<S2SV_ModStart> ) ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
580,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
581,,0
582,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
583,<S2SV_ModStart> ( buf ) <S2SV_ModEnd> ; if (,0
584,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> uint64_table_table_table_table_table_table ( struct table_table_table_table ) ; if (! table_table ) return NULL ; <S2SV_ModStart> ) ) { if (! table_table ) return NULL ; } <S2SV_ModEnd> if (,0
585,<S2SV_ModStart> <S2SV_null>,0
586,"<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm ->",0
587,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
588,<S2SV_ModStart> file_file ) ; TEMP_FAILURE_RETRY (,0
589,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
590,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
591,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { return 1 ; } if ( tmp == NULL ) { return 1 ; } if ( tmp == PyId_CLEAR ( tmp ) { return 1 ; } if ( tmp == NULL ) { return 1 ; } if ( tmp == Py_CLEAR ( tmp ) ; } if ( tmp == NULL ) { return 1 ; } if ( tmp == NULL ) { int res = NULL ; } if ( tmp == NULL ) { int res = NULL ; if ( tmp == Py_CLEAR ( tmp ) { int res = NULL ; } else { int res = obj2ast_id ( tmp, & tmp, & tmp, & tmp, & tmp, & tmp ) ; if ( tmp ) { int res = NULL ; if ( tmp == NULL ) { int res = NULL ; if ( tmp == NULL ) { int res = NULL ; } if ( tmp == Py_CLEAR ( tmp ) { int res = NULL ; } if ( tmp ) { int res = NULL",0
592,"<S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w,",0
593,<S2SV_ModStart> node ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { err = - EINVAL ; <S2SV_ModStart> - EINVAL ; } <S2SV_ModEnd> } <S2SV_null>,0
594,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
595,,0
596,<S2SV_ModStart> <S2SV_null> <S2SV_null,0
597,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModStart> = NULL ; cm -> frame_frame_frame = & cm -> frame_data ; <S2SV_ModStart> = NULL ; cm -> frame_frame = 0 ; vpx_decode = 0 ; <S2SV_ModStart> = 0 ; vpx_decode = 0 ; vpx_free ( cm -> frame_frame_frame_frame_data ) ; vpx_free ( & cm -> frame_frame == NULL ) ; vpx_free ( ) ;,0
598,<S2SV_ModStart> ( s ) <S2SV_ModEnd> if (,0
599,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
600,"<S2SV_ModStart> * tree, vpx_writer <S2SV_ModEnd> * tree,",0
601,<S2SV_ModStart> <S2SV_null> <S2SV_null,0
602,"<S2SV_ModStart>, & len, 0",1
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
604,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int64_t <S2SV_ModEnd> int64_t,0
605,<S2SV_ModStart> char * buf <S2SV_ModEnd> ; if (,0
606,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header,0
608,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> - 1 ; if (! data == 0 ) return AVERROR ( <S2SV_ModEnd> ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> if (!,0
609,,0
610,,0
611,"<S2SV_ModStart>, height, image -> rows",0
612,<S2SV_ModStart> = 0 ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> len ),0
613,<S2SV_ModStart> w ) { sprintf ( outputbuffer ) ;,0
614,<S2SV_ModStart> y1 ) { sprintf ( outputbuffer <S2SV_ModEnd> ) ;,0
615,<S2SV_ModStart> ( s + 2 <S2SV_ModEnd> ) ; if,0
616,<S2SV_ModStart> ) ) { memcpy <S2SV_ModEnd> ( cpi ->,0
617,,0
618,<S2SV_ModStart> { xWantedSize = 0,0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,,0
621,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
622,,0
623,"<S2SV_ModStart> ; r = umask <S2SV_ModEnd> ( fd,",0
624,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int flags <S2SV_ModStart> = 0 ; unsigned char * data [ 1 ] = 0xe ; unsigned char * data [ 2 ] = 0xff ; unsigned char * data [ 2 ] = 0xff ; unsigned char * data [ 2 ] = 0xff ; unsigned char * data [ 2 ] = 0xff ; unsigned char * data [ 2 ] = 0 ] ; state -> data [ 2 ] = 0 ] ; state -> data [ 2 ] ; state -> data [ 2 ] = 0xff ; state -> data [ 2 ] = 0 ] <S2SV_ModStart> ( d -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> = 0, state -> data <S2SV_ModEnd>, 2, <S2SV_ModStart>, 2, state -> data <S2SV_ModEnd>, 2, <S2SV_ModStart>, 2, state -> data <S2SV_ModEnd>, 2, <S2SV_ModStart>, 2, state -> data <S2SV_ModEnd>, 2, <S2SV_ModStart> = 0, state -> data <S2SV_ModEnd>, 2, <S2SV_ModStart> = 0, state -> data <S2SV_ModEnd>, 2, <S2SV_ModStart>, 2, state -> data <S2SV_ModEnd>, 2, <S2SV_ModStart>, 2, state -> data <S2SV_ModEnd>, 2, <S2SV_ModStart> = 0, state -> data <S2SV_ModEnd>, 2, <S2SV_ModStart>, 2, state -> data <S2SV_ModEnd>, 2, <S2SV_ModStart> = 0, <S2SV_ModStart>",0
625,<S2SV_ModStart> ( ctx ) <S2SV_ModEnd> if (,0
626,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null,0
627,"<S2SV_ModStart> buf, & buf <S2SV_ModEnd> ) ; }",0
628,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
629,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> uint8_t <S2SV_ModEnd> uint8_t <S2SV_ModStart> ; uint8_t tile_t tile_rows <S2SV_ModEnd> ; uint8_t <S2SV_ModStart> ; uint8_t tile_t tile_rows <S2SV_ModEnd> ; uint8_t <S2SV_ModStart> ; uint8_t counts = <S2SV_ModEnd> ; uint8_t <S2SV_ModStart> ; uint8_t counts ; uint8_t counts = <S2SV_ModEnd> ; uint8_t <S2SV_ModStart> ) ) { uint8_t <S2SV_ModEnd> ; uint8_t <S2SV_ModStart> ; uint8_t * <S2SV_ModEnd> ; uint8_t * <S2SV_ModStart> ; uint8_t * <S2SV_ModStart> ; uint8_t <S2SV_ModEnd> ; uint8_t * <S2SV_ModStart> ; uint8_t * <S2SV_ModStart> ; uint8_t num_tile_cols = <S2SV_ModEnd> ; uint8_cols = <S2SV_ModStart> ; if ( <S2SV_ModStart>, & tile_data -> tile_rows - <S2SV_ModEnd> ) ) <S2SV_ModStart> ; if ( <S2SV_ModStart> ) ) { vpx_alloc ( & tile_read <S2SV_ModEnd> ( & <S2SV_ModStart> ) ) ; } vpx_read <S2SV_ModEnd> ( & <S2SV_ModStart> ) ) ; vpx_alloc ( & pbi -> tile_alloc ( & pbi <S2SV_ModStart> ) ) ; if ( & pbi -> tile_",0
630,<S2SV_ModStart> = 0 ; unsigned int len = 0 ; <S2SV_ModStart> ; if ( len < 4 ) return 0 ;,0
631,<S2SV_ModStart> <S2SV_null> <S2SV_null,0
632,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
633,<S2SV_ModStart> ; ps_t <S2SV_ModEnd> ; ps_dec ->,0
634,<S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len ),0
635,<S2SV_ModStart> char * c <S2SV_ModEnd> ; if (,0
636,,0
637,<S2SV_ModStart> return - ENOMEM <S2SV_ModEnd> ; if (,0
638,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null,0
639,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModStart> client -> remote_socket = NULL ; int rc ; int rc ; int rc ; int rc = 0 ; int rc = 0 ; <S2SV_ModStart> cib_socket = NULL ; int rc = 0 ; int rc = 0 ; int rc = sizeof ( struct sockaddr_socket ) <S2SV_ModEnd> ; int <S2SV_ModStart> cib_socket = NULL ; if (! cib_timeout == NULL ) return - EINVAL ; if (! cib_socket == NULL ) return - EINVAL ; if (! cib_socket == NULL ) { cib_free ( cib_socket = NULL ; } cib_socket = NULL ; if ( cib_socket == NULL ) { cib_socket = NULL ; cib_socket = cib_socket = cib_socket = NULL ; cib_socket = NULL ; } cib_socket = NULL ; cib_socket = NULL ; if (! cib_socket == NULL ) { cib_socket = NULL ; cib_socket = NULL ; cib_socket = NULL ; },0
640,<S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cpi ->,0
641,<S2SV_ModStart> ( bp [ 0 ] <S2SV_ModEnd> ) ;,0
642,"<S2SV_ModStart> int mptctl_eventcmd ( MPT_ADAPTER * ioc, <S2SV_ModStart> int mpt_ioctl_ioctl_eventarg ; <S2SV_ModEnd> if ( ioc",0
643,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; break ; }",0
644,,0
645,,0
646,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_read_read_bit <S2SV_ModEnd> ( r ) <S2SV_ModStart> ) ; return vpx_read_literal <S2SV_ModEnd> ( r,",0
647,,0
648,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r )",0
649,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> codec_codec_codec_t <S2SV_ModEnd> codec_codec_codec_codec_codec_t <S2SV_ModEnd> ( stream ->,0
650,"<S2SV_ModStart> ndo, cp <S2SV_ModEnd> ) ; ND_TCHECK (",0
651,,0
652,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
653,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
654,,0
655,<S2SV_ModStart> ; size - 2 <S2SV_ModEnd> ; if (,0
656,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
657,,1
658,<S2SV_ModStart> ) ) ; return FALSE,0
659,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct ipv6_txoptions <S2SV_ModStart> -> opt ; struct ipv6_options * opt = rcu_read_lock ( sk ) ; <S2SV_ModStart> ; if ( opt ) return - EINVAL ;,0
660,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null,0
661,<S2SV_ModStart> { dm9000WriteReg ( DM9000ReadReg ( DM9000ReadReg <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; dm9000ReadReg ( DM9000ReadReg ( DM9000_EPCR ) & DM9000ReadReg ( DM9000_EPCR ) & DM9000ReadReg ( DM9000_EPCR ) ; if ( DM9000ReadReg ( DM9000ReadReg ( DM9000_EPCR )!= 0 )!= 0 ) ;,0
662,<S2SV_ModStart> cib ) ; if ( rc == NULL ) { rc = NULL ; },0
663,<S2SV_ModStart> msg_namelen = 0,0
664,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
665,,0
666,,0
667,"<S2SV_ModStart>, number_planes, number_planes_planes <S2SV_ModEnd> ) ; number_planes_planes",0
668,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
669,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
670,<S2SV_ModStart> client ) { <S2SV_ModEnd> if ( client,0
671,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
