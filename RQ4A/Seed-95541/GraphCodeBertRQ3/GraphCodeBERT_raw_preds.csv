,raw_predictions,correctly_predicted
0,<S2SV_ModStart> ; goto out <S2SV_ModEnd> ; } <S2SV_null>,0
1,<S2SV_ModStart> ( skb ) <S2SV_ModEnd> ; if (,0
2,,0
3,<S2SV_ModStart> c ) { <S2SV_ModEnd> return c ;,0
4,"<S2SV_ModStart> perf_event * regs <S2SV_ModEnd>, struct perf_sample_data",0
5,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
6,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output [ <S2SV_ModStart> 4 ] ; tran_low_t <S2SV_ModEnd> * output [ <S2SV_ModStart> 4 ] = ( tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> 4 ] = ( tran_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_t ) <S2SV_ModEnd> ; input [ <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_",0
7,"<S2SV_ModStart> = 0 ; memset ( & cgc -> sense, 0, sizeof ( cgc ) ) ;",0
8,<S2SV_ModStart> ; if ( len < 0 ||,0
9,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static VP9_COMMON * const VP9_COMMON * const MACROBLOCKD * const xd = & cpi -> common ; MACROBLOCKD * const int64_t_low_t * const int64_t * const int64_t_t * const int64_t <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; int64_t <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( & cpi -> <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( & cpi -> <S2SV_ModStart> ) ; memset <S2SV_ModEnd> ( & cpi",0
10,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
11,"<S2SV_ModStart> int vpx_writer * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> int mb ; vpx_write_literal <S2SV_ModEnd> ( w,",0
12,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; } <S2SV_ModStart> = COAP_BLOCK_1024 ; } <S2SV_ModStart> = COAP_BLOCK_BLOCK_SIZE_1024 ; } <S2SV_ModStart> = COAP_BLOCK_BLOCK_1024 ; } <S2SV_ModStart> = COAP_BLOCK_BLOCK_SIZE_128 ; } <S2SV_ModStart> = COAP_BLOCK_BLOCK_BLOCK_SIZE_128 ; } <S2SV_ModStart> = COAP_BLOCK_BLOCK_SIZE_1024 ; },0
13,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",0
14,<S2SV_ModStart> user_keyring ) { if (! ref_key_key_key -> user_keyring ) return false ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( dest <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( dest_key_key_key_key_key <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( dest <S2SV_ModStart> ) ; },0
15,,0
16,<S2SV_ModStart> ; if (! sk ) return - EINVAL ; if (,0
17,,0
18,,0
19,,0
20,"<S2SV_ModStart> ) ||! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",0
21,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY (,0
22,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> frame_frame_frame ( TWO_PASS <S2SV_ModEnd> * twopass <S2SV_ModStart> ( twopass, twopass ) { const TWO_PASS_PASS_PASS_STATS * const twopass = & twopass -> twopass. gf_frame_frame_frame_stats ( twopass, twopass, twopass ) ; if (! twopass ) { TWO_PASS_PASS_PASS_STATS ( twopass, twopass ) ; } if (! twopass -> twopass. next_frame_frame_frame_frame_frame_frame ) { fprintf ( twopass, twopass, twopass, twopass -> twopass, twopass, twopass, twopass, twopass -> stats_frame_in_frame ) ; if (! twopass. next_frame ) { if (! twopass -> twopass. next_frame_frame_frame_frame_frame ) { if (! twopass. next_frame_",0
23,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
24,,0
25,<S2SV_ModStart> = 0 ; if ( len < 0 ) return - EINVAL ;,0
26,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
27,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ;,0
28,"<S2SV_ModStart> mnt, false",0
29,<S2SV_ModStart> ; io -> file = NULL ; io ->,0
30,<S2SV_ModStart> } else { return 0 ; },0
31,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
32,<S2SV_ModStart> ( vpx_codec_alg_priv_t * ),0
33,<S2SV_ModStart> * f ; mutex_lock ( & fanout_mutex ) ; mutex_lock ( & fanout_mutex ) ; mutex_lock ( & fanout_mutex ) ; mutex_lock ( & fanout_mutex ) ; if ( & fanout_mutex ) { err = - EINVAL ; goto out ; } mutex_mutex_lock ( & fanout_mutex ) { err = - EINVAL ; mutex_lock ( & fanout_mutex ) ; mutex_mutex_unlock ( & fanout_mutex ) ; err = - EINVAL ; } mutex_mutex_mutex_lock ( & fanout_mutex ) ; mutex_mutex_lock ( & fanout_mutex ) ; mutex_mutex_unlock ( & fanout_mutex ) ; mutex_mutex_lock ( & fanout_mutex ) ; mutex_lock ( & fanout_mutex ) ; mutex_unlock ( & fanout_mutex ) ; mutex_unlock ( & fanout_mutex ) ; if ( & fanout_mut,0
34,,0
35,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
36,,0
37,"<S2SV_ModStart> ( interface, ENC28J60_ENC28J60_EIR <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR, ENC28J60_TXIF <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_TXIF <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC28J60_EIR_TXIF <S2SV_ModEnd>, ENC28J60_TXIF <S2SV_ModEnd>, ENC28J60_TXIF <S2SV_ModEnd>, ENC28J60_START ) <S2SV_ModStart> ( interface, ENC28J60_TXIF <S2SV_ModEnd>, ENC28J60_TXIF <S2SV_ModEnd>, ENC28J60_TXIF <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC28J60_TXIF <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_TXIF <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_EIR_TXIF <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC28J60_TXIF <S2SV_ModEnd> )!= <S2SV_ModStart> ( interface, ENC28J60_TXIF <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC28J60",0
38,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,0
39,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (,0
40,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> vp9_stride ) { vpx_stride ( vpx_stride, vpx_stride, vpx_stride ) ; memcpy <S2SV_ModEnd> ( source_stride, <S2SV_ModStart> stride ) ; memcpy <S2SV_ModEnd> ( source_stride, <S2SV_ModStart> stride ) ; memcpy <S2SV_ModEnd> ( source_stride,",0
41,<S2SV_ModStart> ptr ) ; <S2SV_ModEnd> return NULL ;,0
42,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int error ; struct mb2_mb_cache_cache_mb_cache * bh = NULL <S2SV_ModEnd> ; struct mb2_cache_mb_cache <S2SV_ModStart> * bh ; int bh = mb_mb_cache_cache_mb_cache ( bh, bh, bh ) ; <S2SV_ModStart> ; if ( bh -> bh ) { error = bh -> bh_hash_hash_hash_hash_hash ( bh ) ; error = bh -> bh_hash_hash_hash_hash_hash ( bh ) ; } <S2SV_ModEnd> if ( bh",0
43,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
44,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
45,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
46,,0
47,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & acl )",0
48,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
49,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
50,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
51,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> int error ; int <S2SV_ModStart> - EINVAL ; if ( ret == 0 ) return - EINVAL ; <S2SV_ModStart> - EINVAL ; if ( ret == 0 ) return - EINVAL ;,0
52,<S2SV_ModStart> value ) { u32 rem ; u64_t <S2SV_ModEnd> rem ; value,0
53,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> break ; if,0
54,"<S2SV_ModStart> * addr, <S2SV_ModEnd> addr ) ;",0
55,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
56,<S2SV_ModStart> ) ; },0
57,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ;,0
58,"<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ), ""reloadImage"" ) ; return ( - 1 ) ; }",0
59,"<S2SV_ModStart> arg ) { const char * arg = & arg ; <S2SV_ModStart> arg ) ; # if CONFIG_VP9_HIGHBITDEPTH if (! arg ) { arg_init ( & arg, arg, arg, arg, arg ) ; # endif <S2SV_ModStart> arg ) ; } # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH ) { arg = 1 ; } else { argcpy ( arg, arg, arg, & arg, & arg, arg, arg ) ; # endif <S2SV_ModStart> arg ) ; # endif if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH ) { argcpy ( arg, & arg, arg ) ; } else { argcpy ( arg, & arg, arg, arg, arg, arg, arg, arg, arg, & arg ) ; } else { argcpy ( arg, arg, arg, arg, arg, arg, arg ) ; } else { arg. fprintf ( arg ) ; } else { argcpy ( arg, arg, arg, arg, arg, arg, arg ) ; } else { arg. fprintf ( arg, arg, arg, arg ) ; } else { arg",0
60,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
61,"<S2SV_ModStart> = 0 ; memset ( inode -> i_data, 0, 0, sizeof ( ext4_data ) ) ; <S2SV_ModStart> ) ) ; memset ( inode -> i_data, 0, sizeof ( ext4_data ) ) ;",0
62,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
63,,0
64,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
65,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
66,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
67,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
68,<S2SV_ModStart> ; int retval ; if ( dev_errno >= 0 ) return - EINVAL ;,0
69,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { fmode",0
70,<S2SV_ModStart> char * tmpname <S2SV_ModEnd> ; if (,0
71,"<S2SV_ModStart> ps_codec -> i4_sps_sps_sps, ps_codec -> i4_sps_sps_sps_sps, ps_codec -> i_sps_sps_codec -> i4_sps_sps_max_sps -> i_sps_sps_sps_sps_codec ) ; if ( ps_codec -> i_sps -> i_sps_sps_sps -> i_sps_sps_max_sps -> i_sps_max_sps_sps_sps_max_sps -> i ; }",0
72,,0
73,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> vp9_buffer_stride ( VP9_COMMON * const <S2SV_ModStart> int mi_stride, vp9_stride, vp9_stride, int64_stride, const uint8_t * const uint8_t * const uint8_t * const uint8_t * const int64_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * out ; const uint8_t * const uint8_t * const uint8_t * const uint8_t * out ; const uint8_t * const uint8_t * const uint8_t * const uint8_t * src_stride = vp9_buffer_stride ; const int64_stride = vp9_stride ; const int64_stride = ( src_stride, src_stride, src_stride, src_stride, src_stride,",0
74,<S2SV_ModStart> ) { return rc <S2SV_ModEnd> ; } <S2SV_null>,0
75,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
76,<S2SV_ModStart> goto out ; if (! inode -> i_block ) goto out ;,0
77,,0
78,"<S2SV_ModStart> char * obj, const char * <S2SV_ModStart> = NULL ; char * e = NULL ; char * o = NULL ; <S2SV_ModStart> = NULL ; ND_TCHECK ( n + 1 ) ; if (! str ) { PyErr_SetString ( & PyExc_Type_TypeError, ""missing <S2SV_blank> from <S2SV_blank> from <S2SV_blank> from <S2SV_blank> from <S2SV_blank> from <S2SV_blank> from <S2SV_blank> "" ) ; return NULL ; } if (! str ) { PyErr_SetString ( & PyExc_Type_TypeError, ""\\n"" ) ; return NULL ; } <S2SV_ModStart> == NULL ) { PyErr_SetString ( & PyExc_Type_TypeError, ""\\n"" ) ; return NULL ; } if (! PyExc_Type_Type_TypeError"" ) { PyErr_SetString ( & PyExc_TYPE_TypeError, & PyExc_TypeError, ""\\n"" ) ; return NULL ; } <S2SV_ModStart> ) ; fprintf ( & PyExc_TypeError, ""\\n"" ) ; return NULL ; } if (! strcmp (! str, & PyExc_TypeError"" ) ) { PyErr_SetString ( & PyExc_TYPE_TYPE_TypeError, """,0
79,,0
80,<S2SV_ModStart> } else { if (,0
81,,0
82,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; ND_PRINT ( ndo, EXTRACT_16BITS ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ) ; return ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; <S2SV_ModStart> ) ) ; if ( length < 2 ) { ND_PRINT ( ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> too <S2SV_blank> short"" ) ) ) ; return ; } if ( ndo_l = EXTRACT_16BITS ( ndo, EXTRACT_16BITS ( ndo, "" ) ) ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ) ; return ; }",0
83,,0
84,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
85,<S2SV_ModStart>,0
86,<S2SV_ModStart> skb ) ; msg -> msg_namelen = 0,0
87,<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi ->,0
88,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
89,,0
90,"<S2SV_ModStart> == 0 ) { const int n = 0 ; <S2SV_ModStart> is_async ) ; if ( CHILD ( n, CHILD ( n, n, CHILD ( n, 1 ) == 0 ) ) { return - 1 ; } if ( CHILD ( n, CHILD ( n, CHILD ( n, 0 ) == 0 ) ) return - 1 ; } if ( CHILD ( n, CHILD ( n ) == 0 ) ) { return - 1 ; } if ( CHILD ( n, CHILD ( n ) == 0 ) ) { return - 1 ; } if ( CHILD ( CHILD ( n ), CHILD ( n ), CHILD ( n, 1 ) == 0 ) ) { if ( n ) == 0 ) return - 1 ; } if ( CHILD ( n, CHILD ( n, CHILD ( n ) == 0 ) ) return NULL ; } if ( n ) == 0 ) return 1 ; if ( CHILD ( n ) == 0 ) { CHILD ( n, CHILD ( n ) ) ; if ( CHILD ( n ) == 0 ) return 1 ; } if ( CHILD ( n ) == 0 ) { if ( CHILD ( CHILD ( n",0
91,,0
92,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> const VP9_COMMON * const VP9_COMMON * const MACROBLOCKD * const MACROBLOCKD * const xd = & cm -> mbmi ; MACROBLOCKD * const mbmi = xd -> mbmi ; MACROBLOCKD * const MODE_INFO * const mbmi = xd -> mbmi_ext ; const mbmi_ext = xd -> mbmi_ext ; const mbmi = xd -> mbmi. mbmi_ext ; const mbmi = mbmi -> mbmi. mbmi. mbmi_ext ; const int mbmi_ext = xd -> mi [ 0 ]. mbmi_ext = mi [ 0 ]. mbmi. mbmi. mbmi. mbmi. mbmi. mbmi. mbmi. mbmi_ext ; const mbmi_ext = MIN ( w, w, w, w, w, w, w, w, w, w",0
93,<S2SV_ModStart> ) ) { size_t <S2SV_ModEnd> n = 0 <S2SV_ModStart> ) ; } if (! <S2SV_ModStart> ( n ) ) { <S2SV_ModStart> ) ) ; } <S2SV_ModEnd> if (!,0
94,<S2SV_ModStart> ; if ( len < 4 ) return ; if (,0
95,,0
96,,0
97,,0
98,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
99,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int bq_null>,0
100,,1
101,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
102,"<S2SV_ModStart> 2 ] ; if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""Failed"" ) ; return NULL ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""Exprinc"" ) ; return NULL ; }",0
103,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ;,0
104,<S2SV_ModStart> NULL ) { status = MagickFalse ; break <S2SV_ModEnd> ; } if,0
105,<S2SV_ModStart> 0 ) ; if ( avio_feof ( s -> pb ) ) { ret = AVERROR_INVALIDDATA ; goto end ; },1
106,,0
107,,0
108,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) { vpx_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_write_bit <S2SV_ModEnd> ( wb,",0
109,<S2SV_ModStart> ; memset <S2SV_ModEnd> ( cm ->,0
110,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,0
111,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> sctp_addip_t sctp_param_param_params ( sctp_param_params ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> == SCTP_PARAM_PARAM_ERROR ) { sctp_param_params ( SCTP_PARAM_PARAM_PARAM_PARAM_ERROR, SCTP_PARAM_PARAM_ERROR, SCTP_PARAM_PARAM_PARAM_PARAM_PARAM_PARAM ) ; if ( param. addip_code == SCTP_PARAM_PARAM_PARAM_PARAM_PARAM_PARAM_PARAM ) { sctp_param_params ( sctp, SCTP_PARAM_PARAM_PARAM_ADDRESS ) ; if ( err_pass == SCTP_PARAM_PARAM_PARAM_PARAM_ERROR ) { err_param_param_param_pass = sctp_param_param_pass ; sctp_param_param_param_hdr (",0
113,<S2SV_ModStart> exit ; } m -> msg_namelen = 0 ;,0
114,<S2SV_ModStart> dev ) { <S2SV_ModEnd> return 0 ;,0
115,<S2SV_ModStart> ) ; } <S2SV_ModEnd> c -> data,0
116,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = vpx_codec_err_t cfg ; if ( cfg -> g_w >= cpi -> cfg. g_w || ( cpi -> g_w!= cpi -> cfg. g_w && cfg -> g_w. g_w!= cpi -> cfg. g_w && cfg -> cfg. g_w!= cpi -> g_w && cfg -> g_w!= cpi -> g_w && cfg -> g_w!= cpi -> cfg_w && cfg -> g_w!= cpi -> g_w && ( cpi -> g_w, cfg -> g_w, cpi -> g_w, cfg -> g_w, cfg_w, cfg -> g_w, cpi -> g_w, cpi -> g_w, cpi -> g_w, cpi -> g_w, cfg -> g_w, cpi -> g_w, cpi -> g_w ) ) ; if ( cpi",0
117,,0
118,"<S2SV_ModStart> int cpl, VCPU_SREG_CONTINUE, cpl, VCPU_SREG_CS <S2SV_ModEnd>, cpl, <S2SV_ModStart> ctxt, VCPU_SREG_CS, new_desc, VCPU_SREG_CS, VCPU_SREG_CS, VCPU_CS <S2SV_ModEnd>, VCPU_SREG_CS, VCPU_SREG_CS <S2SV_ModEnd>, ctxt -> <S2SV_ModStart> sel, VCPU_SREG_CS, VCPU_CS ) ; if ( ctxt -> old_descriptor!= X86EMUL_CONTINUE ) { rc = assign_eip_descriptor ( ctxt, cpl, VCPU_SREG_CS, VCPU_CS, VCPU_SREG_CS, VCPU_CS, VCPU_SREG_CS, VCPU_CONTINUE ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; rc = assign_eip_eip_eip_descriptor ( ctxt, VCPU_CS, VCPU_desc, VCPU_SREG_CS, VCPU_CONTINUE ) ; if ( ctxt -> src.",0
119,<S2SV_ModStart> ) return - EINVAL <S2SV_ModEnd> ; if (,0
120,<S2SV_ModStart> tmp_str ; } if ( tmp_strsize < 1 ) { zfound = GF_ISOM_INVALID_INVALID_FILE ; zfound = 1 ; zfound = 1 ; zfound = 0 ; },0
121,<S2SV_ModStart>. get_alg_priv ( ctx ) <S2SV_ModEnd> ; if (,0
122,"<S2SV_ModStart> * state, fmode_t state, fmode_t state <S2SV_ModEnd> ) { switch <S2SV_ModStart> ( state, fmode <S2SV_ModEnd> ) ; state <S2SV_ModStart> ( state, fmode <S2SV_ModEnd> ) ; state <S2SV_ModStart> state ) ; state = state -> fmode <S2SV_ModEnd> ( state, <S2SV_ModStart> state & state -> fmode <S2SV_ModEnd> ) ; }",0
123,<S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> fputc ( c,0
124,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
125,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
126,,0
127,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; break",0
128,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
129,<S2SV_ModStart> ( & <S2SV_ModEnd> ) ; return ret,0
130,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, NULL,",0
131,"<S2SV_ModStart> ( interface, TEMP_FAILURE_RETRY (",0
132,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
133,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
134,<S2SV_ModStart> { rq -> tags [ <S2SV_ModEnd> off + bit,0
135,<S2SV_ModStart> ( vpx_codec_alg_priv_t * ) <S2SV_ModEnd> ; if (,0
136,<S2SV_ModStart> goto out ; <S2SV_ModEnd> if ( skb,0
137,<S2SV_ModStart> skb ) return 0,0
138,,0
139,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
140,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
141,"<S2SV_ModStart> ( fp, fp",0
142,<S2SV_ModStart> ; if ( len < 0 &&,0
143,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
144,<S2SV_ModStart> ; if ( len < 0 ) return ; if (,0
145,"<S2SV_ModStart> 1 ) ; if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; }",0
146,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
147,"<S2SV_ModStart> } ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0, 0 )",0
148,"<S2SV_ModStart> ctxt ) ; if ( ctxt -> rdx!= X86EMUL_MODE_PROT64 ) return X86EMUL_CONTINUE ; <S2SV_ModStart> = ctxt ; rcx = VCPU_REGS_RDWRITE ( ctxt, VCPU_RX ) ; if ( rdx!= X86EMUL_CONTINUE ) return X86EMUL_CONTINUE ; <S2SV_ModStart> VCPU_CONTINUE ; rcx = rdx ; rcx = reg_read ( ctxt, VCPU_REGS_REGS_CONTINUE ) ; if ( rdx!= X86EMUL_CONTINUE ) return X86EMUL_CONTINUE ; <S2SV_ModStart>, VCPU_REGS_CONTINUE ) ; if ( rcx!= X86EMUL_CONTINUE ) return rcx ;",0
149,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
150,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output,",0
151,<S2SV_ModStart> perf_event * event <S2SV_ModEnd> ; if (,0
152,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static tran_low_t <S2SV_ModEnd> x8 ( tran_low_t <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> x8 ] ; tran_low_t <S2SV_ModEnd> x8 ; tran_t <S2SV_ModStart> x8 ] ; tran_low_t <S2SV_ModEnd> x8 ] ; tran_t <S2SV_ModStart> x8 ] ; tran_low_t <S2SV_ModEnd> x8 ; tran_t <S2SV_ModStart> 0 ] = ( tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> + 1 ; tran_low_t <S2SV_ModEnd> x8 ] = input <S2SV_ModStart> ] ; tran_low_t <S2SV_ModEnd> x8 ; tran_t <S2SV_ModStart> ] = ( tran_low_t ) tran_t <S2SV_ModEnd> x1 ; tran_low_t <S2SV_ModStart> 0 ] = ( tran_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_low_t ) ( tran_t",0
153,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return 0 ;,0
154,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
155,<S2SV_ModStart> = 0 ; atomic_set ( & opt -> refcnt ) ;,0
156,<S2SV_ModStart> ; mnt -> mnt_flags |= MNT_NODEV ; if ( mnt -> mnt_flags |= MNT_NODEV ; if ( mnt -> mnt_flags & MNT_NOSUID ) mnt -> mnt_flags |= MNT_NODEV ; if ( mnt -> mnt_flags |= MNT_NODEV ; if ( mnt -> mnt_flags & MNT_NODEV ) mnt -> mnt_flags |= MNT_NODEV ; if ( mnt -> mnt_flags & MNT_NODEV ) mnt -> mnt_flags |= MNT_NODEV ; if ( mnt -> mnt_flags & MNT_NODEV ) mnt -> mnt_flags |= MNT_NODEV ; if ( mnt -> mnt_flags & MNT_NODEV ) mnt_flags |= MNT_NODEV ; if ( mnt -> mnt_flags & MNT_NOEXEC ) mnt -> mnt. mnt_flags |= MNT_NODEV ; if (,0
157,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> int mi_cols = mi_cols <S2SV_ModStart>, mi_col, int mi_cols, int mi_cols <S2SV_ModEnd>, mi_cols, <S2SV_ModStart>, mi_col ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( bs > mi_cols ) { <S2SV_ModEnd> segment_segment_segment_id <S2SV_ModEnd> ( bs, <S2SV_ModStart>, mi_cols, mi_cols, mi_cols, mi_cols, mi_cols, mi_cols, mi_cols * mi_cols, mi_cols, mi_col, mi_cols, mi_cols, mi_cols, mi_cols, mi_cols, mi_cols, mi_cols ) ; if ( mi_cols > 0 ) { vpx_segment_segment_segment_segment_segment_se ( & mi_se ) ; if ( bs > 0 ) { vpx_segment_segment_segment_segment_se ( bs ( bs,",0
158,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
159,<S2SV_ModStart> ; if ( mb_flags & EXT4_NOFS ) &&,0
160,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ; if ( <S2SV_ModStart> OE_E_E_RAISE_ERRNO ( OE_EINVAL ) ; if ( oe -> namelen == OE_RAISE_ERRNO ( OE_EINVAL ) ) { ret = - EINVAL ; goto out ; } if ( oe -> oe_namelen == OE_RAISE_ERRNO ( OE_EINVAL ) ) goto out ; } if ( oe -> oe_namelen == 0 ) goto out ; oe_namelen = 0 ; oe -> oe_namelen = 0 ; oe_addr = 0 ; if ( oe -> oe_namelen == 0 ) goto out ; oe_addr = 0 ; if ( oe -> oe_namelen == 0 ) goto out ; oe_namelen = 0 ; if ( oe -> oe_namelen == 0 ) goto out ; oe_namelen = 0 ; oe -> oe_namelen = 0 ; oe ->,0
161,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
162,<S2SV_ModStart> ) ) { memcpy <S2SV_ModEnd> ( cpi ->,0
163,"<S2SV_ModStart> data ) { u8 * buf ; int ret = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart> ret ) ; return - ENOMEM <S2SV_ModEnd> ; } <S2SV_null>",0
164,,0
165,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
166,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
167,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
168,,0
169,"<S2SV_ModStart> = getnum ( L,",1
170,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
171,<S2SV_ModStart> ; if ( ctx -> data_sz == NULL ) return VPX_CODEC_OK <S2SV_ModEnd> ; ctx ->,0
172,"<S2SV_ModStart> ; int i_mb_cache <S2SV_ModEnd> ( inode,",0
173,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
174,,0
175,,0
176,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lineno, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""lineno\\"" ) ; return 1 ; } if ( tmp == NULL ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( tmp, & PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""lineno\\"" ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, & PyExc_TypeError, ""required <S2SV_blank> missing <S2SV_blank> missing <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> \\"" ) ; return 1 ; } if ( tmp == NULL ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, & PyExc_TypeError, & PyExc_TypeError, ""required <S2SV_blank> missing <S2SV_blank> \\"" ) ; return 1 ; } else { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank>",0
177,<S2SV_ModStart> mnt_flags & MNT_NODEV ) { if (! ( mnt -> mnt_flags & MNT_MASK ) ) { return - EPERM ; } if (! ( mnt -> mnt_flags & MNT_MASK ) ) { return - EPERM ; },0
178,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ jas_uchar,0
179,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
180,<S2SV_ModStart> -> msg_name ; if ( msg_namelen == NULL ) { err = - EINVAL ; goto err ; } if (,0
181,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> int bhdr ; int <S2SV_ModStart> = 0 ; if ( unlikely ( bhdr -> bhdr ) ) ) return - EINVAL ; <S2SV_ModStart> ) ; if ( <S2SV_ModEnd> inode -> bhdr,0
182,<S2SV_ModStart> ; vp9_zero ( void ) ;,0
183,,0
184,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int if ( fp ( fp ) ) { fprintf ( fname, ""Error: <S2SV_blank> invalid <S2SV_blank> invalid <S2SV_blank> %s\\n"", fname ) ; exit ( fname ) ; } if ( fclose ( fname ) ) { fprintf ( fname, fname ) ; exit ( fname ) ; } if ( fname ) { fprintf ( fname, ""Error: <S2SV_blank> invalid <S2SV_blank> %s\\n"", fname ) ; exit ( fname ) ; } else { fprintf ( fname, stderr, fname ) ; exit ( fname ) ; } if ( fprintf ( fname ) ) { fprintf ( fname, ""Error: <S2SV_blank> %s <S2SV_blank> invalid <S2SV_blank> invalid <S2SV_blank> %s\\n"", fname ) ; exit ( fname ) ; exit ( fname ) ; } if ( fname ) { fclose ( fname ) ; exit ( fname ) ; } fprintf ( fprintf ( fname, fname ) ; } if ( fclose ( fname ) ) { fprintf ( fclose ( fname ) ;",0
185,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
186,"<S2SV_ModStart> { if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
187,<S2SV_ModStart> == 0 ) { <S2SV_ModEnd> return ; },0
188,"<S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_ISR_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR, KSZ8851_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_TXIF <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR_ISR, KSZ8851_ISR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_TXIF <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR_TXIF <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_TXIF <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZERO <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, KSZ8851_ISR_ISR_ISR, KSZERO <S2SV_ModEnd> ) ; }",0
189,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_wb_wb_write_bit <S2SV_ModEnd> ( wb,",0
190,"<S2SV_ModStart> { TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
191,<S2SV_ModStart> ; goto err <S2SV_ModEnd> ; if (,0
192,"<S2SV_ModStart> ( t1_buf_array ) ; T1_BUF_SIZE ( t1_array, t1_array ) ; T1_BUF_SIZE",0
193,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE_MODE ( MACROBLOCKD * xd, xd, MACROBLOCKD * xd, xd, xd -> mi_row, xd -> mi_row, xd, xd -> mi_row, xd -> mi_row, xd -> mi_row, xd -> mi_row, xd -> mi_row, xd -> mb_row, xd -> mi_cols - 1 ) ; if ( xd -> mi_row > xd -> mi_row ) return - ENODE_cols ; <S2SV_ModStart> ( xd, xd, xd, xd, xd, xd, xd, xd -> mi_row, xd <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( xd, xd, xd <S2SV_ModEnd> ) ) return",0
194,,0
195,"<S2SV_ModStart> key_read ) ; ret = key_read ( key, key ) ; if ( ret < 0 ) goto out ;",0
196,<S2SV_ModStart> -> u4_first_slice_in_pic = 1 <S2SV_ModEnd> ; ps_dec ->,0
197,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
198,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if (!,0
199,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
200,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
201,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static VP9_COMP vpx_codec_t <S2SV_ModEnd> * svc_ctx ; <S2SV_ModStart> i ] ; uint16_t svc_t svc_t <S2SV_ModEnd> * svc. <S2SV_ModStart> i ; uint16_t svc_t <S2SV_ModEnd> i = svc_t <S2SV_ModStart> i ] ; size_t <S2SV_ModEnd> i ; int <S2SV_ModStart> ; if ( svc_t ) svc_frame_count = ( svc. spatial_t ) svc_t <S2SV_ModEnd> ; if ( <S2SV_ModStart> i ] = ( svc_frame_t ) vpx_codec_t <S2SV_ModEnd> ( svc_t ) <S2SV_ModStart> ; if ( svc_ctx -> temporal_layer_id ) svc_id = svc_id <S2SV_ModEnd> ; i <S2SV_null> <S2SV_null>,0
202,<S2SV_ModStart> ; if ( screen == NULL ) return NULL,0
203,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> int i ; int <S2SV_ModStart> ; if (! str ) return - 1 ; if ( <S2SV_ModStart> == '\\0' ) return - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == '\\0' ) return - 1 ; if ( * strcmp ( str, '\\0' ) == '\\0' ) return - 1 ; if (! strcmp ( str, '\\0' ) ) return - 1 ; <S2SV_ModStart> == '\\0' ; if ( strcmp ( * ) == '\\0' ) return - 1 ; if ( * end - 1 ) return - 1 ; <S2SV_ModStart> == '\\0' ) return - 1 ; if ( strcmp ( str, '\\0' ) == '\\0' ) return - 1 ; if ( strcmp ( str, '\\0' ) == '\\0' ) return - 1 ; if ( c == '\\0' ) return 1 ; <S2SV_ModStart> } else { if ( strcmp ( str, '\\0' ) == '\\0' ) return - 1 ; }",0
204,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
205,<S2SV_ModStart> byte ) ; if ( ptr == NULL ) return NULL ;,0
206,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
207,,0
208,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
209,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_col ; MACROBLOCKD * xd = & td -> mi_col ; MACROBLOCKD * xd ; MACROBLOCKD * const xd = & td -> mi_row ; MACROBLOCKD * xd -> mi_cols = & td -> mi_row ; <S2SV_ModStart> mi_col ; memset ( mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col ) ; memset ( mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col ) ; memset ( & cpi, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col",0
210,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
211,<S2SV_ModStart> char * tmpname <S2SV_ModEnd> ; if (,0
212,,0
213,<S2SV_ModStart> * optlen ; struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> + opt -> optlen ; struct ip_options_rcu <S2SV_ModEnd> * opt =,0
214,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
215,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
216,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
217,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } <S2SV_null>,0
218,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
219,<S2SV_ModStart>!= MagickFalse ) break ;,0
220,<S2SV_ModStart> ) ; } ND_TCHECK ( bp [ 0 ] ) ;,0
221,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
222,<S2SV_ModStart> * jas_matind_t i ; jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_matind_t,0
223,,0
224,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
225,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
226,<S2SV_ModStart> ; if ( <S2SV_ModEnd> size_t ),0
227,<S2SV_ModStart> 0 ) ; if ( pcount < 0 ) goto out ;,0
228,<S2SV_ModStart> ; } } if (!,0
229,<S2SV_ModStart> } else { size_t <S2SV_ModEnd> len = 0 <S2SV_ModStart> ; } } if ( <S2SV_ModEnd> ( c ->,0
230,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart>, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> out [ j",0
231,"<S2SV_ModStart> - EINVAL ; if ( g_assert ( file == NULL ) { gfprintf ( ""A\\n"" ) ; return - EINVAL ; }",0
232,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int fp_set_init ( fp, GFP_KERNEL ) ; <S2SV_ModStart> ; if (! fp ) { fmode_t fp = - ENOMEM ; goto error ; } if (! fp -> config. stderr ) { fmode = - ENOMEM ; goto out ; } <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> if (!",0
233,<S2SV_ModStart> case EOF : if ( elen == NULL ) return ;,0
234,<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( tptr ) ;,0
235,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
236,"<S2SV_ModStart> uint8_t s ; struct stream packet ; struct stream packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""consume <S2SV_blank> of <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
237,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
238,"<S2SV_ModStart> ) ; } copy_as_user <S2SV_ModEnd> ( src,",0
239,<S2SV_ModStart> -> fc ; <S2SV_ModEnd> if ( fc,0
240,"<S2SV_ModStart> ( 1.0f, MagickMin <S2SV_ModEnd> ( 1.0f,",0
241,,0
242,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi ->,0
243,"<S2SV_ModStart> size_t s ; memset ( & tcount, 0, sizeof ( tcount ) ) ;",0
244,,0
245,<S2SV_ModStart> * out ; size_t <S2SV_ModEnd> out ; if,0
246,,0
247,,0
248,<S2SV_ModStart> ) ) { return 0 ; },0
249,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
250,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
251,<S2SV_ModStart> ) ; } spin_lock ( & snd_lock ) ;,0
252,<S2SV_ModStart> ps_dec -> i2_dpb_cmds_commands_dec ) { if ( ps_dec -> u4_dpb_cmds_cmds_cmds_commands_dec -> u4_cmds_cmds_t ps_dec ) { if ( ps_dec -> u4_cmds_cmds_buf > ps_dec -> u4_dpb_cmds_cmds_commands_dec -> u4_buf_cmds_temp ) { return ERROR ; },0
253,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
254,"<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL, NULL )",0
255,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( message",0
256,<S2SV_ModStart> dev ) ; <S2SV_ModEnd> return 0 ;,0
257,<S2SV_ModStart> ) ) ; msg -> msg_namelen = 0 ;,0
258,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
259,"<S2SV_ModStart> = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
260,<S2SV_ModStart> dev ) { return <S2SV_ModEnd> ; } if,0
261,<S2SV_ModStart> ; goto done <S2SV_ModEnd> ; if (,0
262,"<S2SV_ModStart> int vpx_read_bit_literal <S2SV_ModEnd> ( rb,",0
263,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return 0 ;,0
264,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ;,0
265,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
266,<S2SV_ModStart> return ; } <S2SV_ModEnd> return - 1,0
267,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
268,,0
269,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY (,0
270,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
271,"<S2SV_ModStart> ; rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src",0
272,"<S2SV_ModStart> list. name, true",1
273,,0
274,<S2SV_ModStart> ; r = TEMP_FAILURE_RETRY (,0
275,,0
276,<S2SV_ModStart> cmd ) ; sas_cmd ( cmd ) ;,0
277,"<S2SV_ModStart>, body, type_comment, <S2SV_ModStart> ; if (! type_comment ) return NULL ; if (! type_comment ) return NULL ; <S2SV_ModStart> ; if (! type_comment ) return NULL ; if (",0
278,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
279,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) break",0
280,<S2SV_ModStart> ctxt ) { int rc ; <S2SV_ModStart> ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>,0
281,,1
282,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } if (,0
283,"<S2SV_ModStart> ( psf -> header. indx ) { <S2SV_ModStart> psf -> header. indx = psf -> header. indx ; <S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd> + psf -> header. indx <S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd>, psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd>, psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd>, psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ) ; }",0
284,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
285,<S2SV_ModStart> ; if (,0
286,<S2SV_ModStart> perf_event * ctx <S2SV_ModEnd> ) { struct,0
287,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return 0 ;,0
288,<S2SV_ModStart> ) ) ; if ( len < 0 ) goto trunc ;,0
289,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( & cpi,0
290,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src,",0
291,"<S2SV_ModStart> = 0 ; memset ( bh -> b_size, 0, sizeof ( struct ext4_data ) ) ;",0
292,,0
293,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
294,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
295,,0
296,<S2SV_ModStart> case 0 : if ( len < 0 ) return - EINVAL ;,0
297,<S2SV_ModStart> ( server. ds_enabled <S2SV_ModEnd> ( server.,0
298,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
299,,0
300,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
301,"<S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( sf, <S2SV_ModStart> 1 ) ; vpx_prob <S2SV_ModEnd> ( sf, <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( sf,",0
302,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
303,<S2SV_ModStart> (! buf || count > OE_SSIZE_MAX,0
304,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * ) <S2SV_ModStart> ( opt ) ; atomic_sub ( & sk -> tot_len ) ;,0
305,"<S2SV_ModStart> sk ) ; memset ( & sk, 0, sizeof ( sk ) ) ;",0
306,<S2SV_ModStart> sock ) ; <S2SV_ModEnd> Sctp_null> <S2SV_null>,0
307,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
308,<S2SV_ModStart> task ) { <S2SV_ModEnd> task_timer ( &,0
309,,0
310,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( interface, KSZ8851_P ( interface, KSZ8851_PTR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_PTR <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, KSZ8851_PTR ( interface, KSZ8851_PTR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_R, KSZ8851_PTR <S2SV_ModEnd> ) ) ;",0
311,,0
312,"<S2SV_ModStart> NEED_IP ( t, <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, <S2SV_ModStart> NEED_IP ( t, 0, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0, 0 <S2SV_ModStart> NEED_IP ( t, 0, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP",0
313,"<S2SV_ModStart> ; if ( len < 0 ) { pr_err ( ""%s: <S2SV_blank> %d, <S2SV_blank> %d, <S2SV_blank> %d, <S2SV_blank> %d, <S2SV_blank> %d, <S2SV_blank> %d)\\n"", __func__, GFP_NO_SUCCESS ) ; goto out ; } if (",0
314,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
315,<S2SV_ModStart> = rc -> avg_frame_bandwidth <S2SV_ModEnd> ( rc ->,0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
317,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
318,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return ;,0
319,,0
320,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
321,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> ) ; } exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
322,<S2SV_ModStart> -> peer. auth_capable = asoc -> peer. auth_capable ; if (,0
323,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
324,<S2SV_ModStart> goto out ; h -> h = h -> h -> h_size ;,0
325,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
326,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
327,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
328,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
329,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int i_sb_sb ( struct bs * inode_sb ) { struct bs * inode_sb = inode_sb ( inode_sb -> i_sb -> i_sb ) ; if ( inode_sb -> i_sb == bs ) goto out ; if ( inode_sb -> i_bytes > bs ) goto out_free ; if ( inode -> i_sb -> i_sb ) { if ( inode_sb -> i_sb > bs ) goto out_sb ; } if ( inode_sb -> i_sb -> i_offset ( inode_sb ) goto out_sb ; if ( inode -> i_sb -> i_sb!= bs ) goto out_sb ; if ( inode_len > b_len ) goto out_len ( inode ) goto out_sb ; if ( inode ( inode -> i_sb ) goto out_sb ; if ( inode ( inode )!= i_sb -> i_len ) goto out_sb ; if ( inode,0
330,<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfi,0
331,<S2SV_ModStart> q ) ; fq -> tag = NULL ;,0
332,<S2SV_ModStart> uint32_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ; },0
333,<S2SV_ModStart> ) ) { return 0 ; },0
334,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
335,<S2SV_ModStart> ; if ( pCmdData == NULL ||,0
336,"<S2SV_ModStart> ""`%s\'"", option ) ; geometry = DestroyString ( geometry",0
337,"<S2SV_ModStart> sk ) ; memset ( & sk, 0, sizeof ( sk ) ) ;",0
338,<S2SV_ModStart> ; if ( kfree ( key_data ) &&,0
339,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
340,"<S2SV_ModStart> uint16 buffer ; struct stream packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mip(), <S2SV_blank> consume <S2SV_blank> stream <S2SV_blank> overrun"", & packet ) ; }",0
341,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
342,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; ret =,0
343,<S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } <S2SV_null>,0
344,,0
345,<S2SV_ModStart> 1 ) { memset <S2SV_ModEnd> ( ( pbi,0
346,<S2SV_ModStart> ) break ; quantum_info = DestroyImageInfo ( image ) ;,0
347,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> p ) { Py_DECREF ( u, u, * buf ) ; if (! buf ) return 1 ; <S2SV_ModStart> ; } if (! buf ) { PyErr_DECREF ( * p ) ; return 1 ; } if ( * p ) { PyErr_DECREF ( * p ) ; return 1 ; } if (! buf ) { PyErr_DECREF ( p ) ; } return 1 ; } } if (! buf ) { PyErr_DECREF ( p ) ; return 1 ; } return 1 ; } } if (! buf ) { PyErr_DECREF ( p ) ; } return 1 ; } } } } if (! buf ) { PyErr_DECREF ( p ) ; } return 1 ; } }",0
348,"<S2SV_ModStart> char * st, int <S2SV_ModEnd> ) { int <S2SV_ModStart> = 0 ; <S2SV_ModEnd> strchr ( cp <S2SV_ModStart> ) ; goto out <S2SV_ModEnd> ; } <S2SV_null>",0
349,<S2SV_ModStart> -> buffer ; if (! ctx -> gf128 ) return - ENOKEY ;,1
350,<S2SV_ModStart> void write_bit ( vpx_write_bit <S2SV_ModEnd> * w ),0
351,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi ->,0
352,<S2SV_ModStart> ) ) { memcpy <S2SV_ModEnd> ( & t_left,0
353,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } ps_dec ->,0
354,<S2SV_ModStart> buffer ) ; if ( buffer == NULL ) return NULL ;,0
355,<S2SV_ModStart> ) ; goto out <S2SV_ModEnd> ; } if,0
356,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
357,<S2SV_ModStart> ( state -> state == NULL ) ;,0
358,<S2SV_ModStart> goto out_key_key <S2SV_ModEnd> ) ; if,0
359,<S2SV_ModStart> ) ) { size_t <S2SV_ModEnd> bufs = 0 <S2SV_ModStart> ) ) ; goto out <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto out <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { <S2SV_ModEnd> FALSE ; } <S2SV_ModStart> FALSE ) ; goto out <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { <S2SV_ModEnd> FALSE ; },0
360,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
361,<S2SV_ModStart> ioc ) ; },0
362,<S2SV_ModStart> ) ; Py_RETURN_NONE <S2SV_ModEnd> ; } if,0
363,"<S2SV_ModStart> ) ; } if (! dev -> desc. bNumEndpoints ) { dev_err ( & dev, ""BINVAL ) ; return - ENODEV ; }",0
364,<S2SV_ModStart> perf_event * event <S2SV_ModEnd> ) { return,0
365,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> intra_mode_mode ( VP9_COMMON <S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> ) { FRAME_COUNTS * counts = vpx_reader <S2SV_ModEnd> ( r,",0
366,<S2SV_ModStart> -> ctx ; <S2SV_ModEnd> if ( ctx,0
367,<S2SV_ModStart> ) ) ; kfree ( key ) ;,0
368,<S2SV_ModStart> dev ) ; kfree ( s ) ;,0
369,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
370,<S2SV_ModStart> = 0 ; atomic_set ( & opt ) ;,0
371,<S2SV_ModStart> ) ; } if ( u32 ) return - EINVAL ;,0
372,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> p = vpx_writer ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> p, vpx_tree, vpx_tree, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> p ) { vpx_tree_tree <S2SV_ModEnd> ( w,",0
373,"<S2SV_ModStart> write_buffer ) { vpx_write_buffer <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
374,<S2SV_ModStart> char * name <S2SV_ModEnd> ; if (,0
375,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
376,<S2SV_ModStart> ( jas_uchar <S2SV_ModEnd> ) ; } if,0
377,<S2SV_ModStart> ) ; goto err <S2SV_ModEnd> ; } if,0
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> w2S2SV_null> <S2SV_null>,0
379,"<S2SV_ModStart> mnt, false",0
380,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
381,,0
382,<S2SV_ModStart> ) ) { int err_sn = 0 ; <S2SV_ModStart> ) ) ; } <S2SV_ModEnd> } <S2SV_null>,0
383,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
384,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
385,"<S2SV_ModStart> ) { char * buf ; memset ( & buf, 0, 0, sizeof ( buf ) ) ;",0
386,<S2SV_ModStart> ) { return 1 <S2SV_ModEnd> ; } if,0
387,"<S2SV_ModStart> len ) { strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""cpy <S2SV_blank> string"", str, len <S2SV_ModEnd> ) ; str",0
388,,1
389,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> output ) { fprintf ( void ) fclose ( void ) ; <S2SV_ModStart> output ) ; exit ( void ) ; <S2SV_ModStart> ; } status = MagickFalse ;,0
390,,0
391,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
392,,0
393,<S2SV_ModStart> s2 ) { return 0 ; },0
394,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
395,<S2SV_ModStart> ; if ( options -> fmode == NULL ) { LOG_ERR_FAILURE_MODE_FAILURE ; } if (,0
396,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
397,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
398,<S2SV_ModStart>,0
399,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
400,,0
401,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; L_BUFSIZE <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd>, ""n"",",0
402,,0
403,,0
404,<S2SV_ModStart> i ) { <S2SV_ModEnd> return 0 ;,0
405,"<S2SV_ModStart> void write_bit ( vpx_bit <S2SV_ModEnd> * w, <S2SV_ModStart> 8 ) { vpx_write_bit <S2SV_ModEnd> ( w,",0
406,<S2SV_ModStart> if ( ent == NULL ) { st = KRB5_NOENTRY ; },0
407,"<S2SV_ModStart> ps_codec -> i4_sps_sps_sps, ps_codec -> i4_sps_sps_sps_sps, ps_codec -> i_sps_sps_sps_sps_sps_sps_sps_sps -> i_sps_sps_sps_sps_max_sps -> i ; if ( ps_codec -> i_sps_codec -> i_sps_sps_sps_sps_sps -> i_sps_max_sps_sps_sps_max_sps -> i ; }",0
408,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
409,<S2SV_ModStart> ; if ( d -> msg_len > sizeof ( d -> msg ) ) return - EINVAL ; if (,0
410,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
411,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src,",0
412,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <SV_null> <S2SV_null>,0
413,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
414,"<S2SV_ModStart>, NULL, NULL,",0
415,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
416,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 2SV_null> <S2SV_null> <SV_null> static int <S2SV_ModEnd> ; if (,0
417,<S2SV_ModStart> size ) { ASSERT_NO_SIZE_OVERFLOW ( size ) ;,1
418,<S2SV_ModStart> ; if ( bytes == 0 ) return 0 ; if (,0
419,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
420,<S2SV_ModStart> ) ) ; kfree ( req_sock ) ;,0
421,,0
422,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> L2S2SV_null> L2SV_null> <S2SV_null>,0
423,"<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
424,,0
425,,0
426,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
427,"<S2SV_ModStart> * fmode_t fmode, fmode_t fmode <S2SV_ModEnd> ) { fmode",0
428,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
429,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int64_t tran_low_t <S2SV_ModEnd> * const int64_t <S2SV_ModStart>, int64_t bd, int64_t dist_t <S2SV_ModEnd>, int64_t * <S2SV_ModStart>, int64_t dist, int64_t * const int64_t dist_t <S2SV_ModEnd>, int64_t * <S2SV_ModStart> dist_t res ; const int64_t * const int64_t * const int64_t dist_t dist ; const int64_t dist ; const int64_t * const int64_t dist_t dist ; const int64_t dist_t dist ; const int64_t * out ; const uint64_t * out ; const int64_t dist ; const int64_t * out_t dist ; const int64_t * out ; const int64_t dist ; const int64_t dist_t dist_t dist_t * out ; const int64_t * out ; const int64_t * out_dist_sse ; const int64_t dist ; const int64_t * out ; const int64_t",0
430,,0
431,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
432,"<S2SV_ModStart> void write_seg ( vpx_reader <S2SV_ModEnd> * seg,",0
433,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst_ptr1,",0
434,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
435,<S2SV_ModStart> ) ; } buf2,0
436,"<S2SV_ModStart> ( interface, ENC8X <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, KSZ8851_TXP ( interface, KSZ8851_TXQ <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_TXIF <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_TXR_TXST <S2SV_ModEnd> ) ; interface",0
437,,0
438,<S2SV_ModStart>. udpport = 0 <S2SV_ModEnd> ; settings.,1
439,<S2SV_ModStart> ) ; },0
440,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
441,,0
442,<S2SV_ModStart> ; if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
443,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
444,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> } if ( fc -> output_size == 0 ) { fprintf ( stderr, O_INVALID ) ; exit ( <S2SV_ModStart> ) ) ; } <S2SV_ModEnd> } printf ( <S2SV_ModStart> ) ; printf ( fd <S2SV_ModEnd>, ""%s: <S2SV_blank> %d <S2SV_blank> %d\\n"", <S2SV_ModStart> ) ) ; return 1 <S2SV_ModEnd> ; } <S2SV_null>",0
445,,0
446,<S2SV_ModStart> vpx_codec_alg_priv_t * priv <S2SV_ModEnd> ) { priv <S2SV_ModStart> = NULL ; vpx_codec_alg_priv_t * priv <S2SV_ModEnd> = NULL ; <S2SV_ModStart> ; priv = priv <S2SV_ModEnd> ; priv ->,0
447,<S2SV_ModStart> ; } return rc <S2SV_ModEnd> ; } return,0
448,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
449,<S2SV_ModStart> = v ; if (! IS_ERR ( vma ) ),1
450,<S2SV_ModStart> ) ) ; if ( iinfo -> i_leninfo_len > i_len ) goto out ; if ( i_len > i_len ) goto out_b ; i_alloc_info ( iinfo -> i_len ) ; if ( i_len > i_len ) goto out_len ; i_alloc_info ( iinfo -> i_len ) bs + i_len > bs ) goto out ; if ( i_len > i_len ) goto out ;,0
451,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC28J60_MIREGADR, ENC28J60_MIREGADR, ENC28J60_MIREGADR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC28J60_BUSY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT | ENC28J60_BUSY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_BUSY <S2SV_ModEnd> )!= 0",0
452,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
453,,0
454,,0
455,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
456,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
457,,0
458,<S2SV_ModStart> ) ; },0
459,"<S2SV_ModStart> ) ) { memset ( & buf, 0, 0, sizeof ( a ) ) ;",0
460,<S2SV_ModStart> ) ) ; if ( iinfo -> i_leninfo_len > i_len ) goto out ; if ( i_len > i_len ) goto out_b ; i_alloc_info ( iinfo -> i_len ) ; if ( i_len > i_len ) goto out_len ; i_alloc_info ( iinfo -> i_len ) bs + i_len > bs ) goto out ; if ( i_len > i_len ) goto out ;,0
461,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
462,"<S2SV_ModStart>, y ; memset <S2SV_ModEnd> ( cpi ->",0
463,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
464,,0
465,,0
466,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> int mi_stride, int <S2SV_ModStart> int mi_stride, int motion_yv_y, int motion_y_y, int64_y, int increase_denoiser_denoiser_denoiser_stride ) { int increase_denoiser = 0 ; int increase_denoiser = 0 ; int increase_denoiser = 0 ; int increase_denoiser = 0 ; int increase_denoiser_y = 0 ; int increase_denoiser_denoiser = 0 ; int increase_denoiser = 0 ; int increase_denoiser_denoiser = 0 ; int increase_denoiser_denoiser_denoiser = 0 ; int increase_y = 0 ; int increase_denoiser_denoiser_y = 0 ; int increase_denoiser = 0 ; int increase_denoiser_denoiser = 0 ; int increase_denoiser_denoiser_y = 0 ; int increase_denoiser = 0 ; int increase_denoiser_",0
467,,0
468,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 0 ;,0
469,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
470,<S2SV_ModStart> = get_dev ( <S2SV_ModEnd> ) ; if,0
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
472,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
473,<S2SV_ModStart>!= MagickFalse ) break,0
474,"<S2SV_ModStart>, size,",0
475,"<S2SV_ModStart> AcquireQuantumMemory ( dmsx, ( size_t ) <S2SV_ModEnd> ) ; if",0
476,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
477,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } ps_dec ->,0
478,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
479,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
480,<S2SV_ModStart> * j ; jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t,0
481,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> int mi_row ; int <S2SV_ModStart> int mi_row ; int mi_cols = ( xd -> mbmi, xd -> mbmi, xd -> mbmi, xd -> mbmi ) ; if ( xd -> plane [ 0 ] == 0 ) { memcpy ( xd -> plane [ 0 ], xd -> plane [ 0 ], xd -> plane [ 0 ], 0 ) ; if ( xd -> plane [ 0 ] == 0 ) { xd -> plane [ 0 ] = ( xd -> plane [ 0 ], xd -> plane [ 0 ], xd -> plane [ 0 ], xd -> plane [ 0 ], xd -> plane [ 0 ], xd -> plane ) ; if ( xd -> plane [ 0 ] ) { xd -> plane [ 0 ] = xd -> plane [ 0 ] ; } else { if ( xd -> plane [ 0 ] == 0 ) { xd -> plane [ 0 ] = ( xd -> plane [ 0 ], xd -> plane [ 0",0
482,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( src,",0
483,<S2SV_ModStart> ; if ( rowsize < 0 ||,0
484,,0
485,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] =,0
486,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
487,<S2SV_ModStart> ( buf + 1 <S2SV_ModEnd> ) return 0,0
488,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
489,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
490,,0
491,"<S2SV_ModStart>, size,",0
492,<S2SV_ModStart> file ) ; free ( fd ) ;,0
493,<S2SV_ModStart> ; if ( addr_len < 0 ) return ;,0
494,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( cpkt.,0
495,<S2SV_ModStart> ) ; } mutt_socket_empty ( adata -> conn ) ;,0
496,,0
497,,0
498,"<S2SV_ModStart>, & rlen, 0",1
499,"<S2SV_ModStart> cpt_password ) ; mutex_lock ( & u32 ) ; mutex_unlock ( & <S2SV_ModEnd>, &",0
500,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
501,,0
502,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
503,<S2SV_ModStart> NULL ) ;,0
504,<S2SV_ModStart> ) ) ; kfree ( key ) ;,0
505,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> if (! authctype ) { if ( authctxt -> user == NULL || authctxt -> user == NULL || authctxt -> user == NULL ) { goto error ; } if (,0
506,<S2SV_ModStart> ; uint32_t bcount = 0,0
507,,0
508,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
509,"<S2SV_ModStart> uint8_t buf ; int total_size ; <S2SV_ModStart> ; if ( len < 4 ) { ND_PRINT ( ndo, ""n"" ) ; return - 1 ; } <S2SV_ModEnd> if ( buf",0
510,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] =,0
511,<S2SV_ModStart> ( ret ||! cm_id -> device ||,1
512,<S2SV_ModStart> (! ret || count > OE_SSIZE_MAX <S2SV_ModEnd> ) ; if,0
513,,0
514,<S2SV_ModStart> i ) { <S2SV_ModEnd> return 0 ;,0
515,<S2SV_ModStart> - EINVAL ; if ( num > 0 ) return - 1 ;,0
516,,0
517,<S2SV_ModStart> ; if ( data -> size < 0 ||,0
518,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
519,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
520,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
521,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
522,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
523,"<S2SV_ModStart> ; memset <S2SV_ModEnd> ( src,",0
524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_row ) { VP9_COMMON * const tile_col = & cpi -> mi_col ; MACROBLOCKD * const xd = & td -> mbmi_row ; MACROBLOCKD * const xd = & x -> mbmi_cols ; MACROBLOCKD * const xd = xd -> mbmi_cols ; memset <S2SV_ModEnd> ( xd, <S2SV_ModStart> ) ; memcpy <S2SV_ModEnd> ( xd, <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( x -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( x -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( x ->",0
525,"<S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
526,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
527,<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ),0
528,<S2SV_ModStart> skb ) ; kfree ( skb ) ;,0
529,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
530,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart> ) ; } <S2SV_ModEnd> if (!,0
531,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int fd = T_FAILURE_RETRY ( <S2SV_ModStart> d ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, bd ) ) <S2SV_ModStart> ; if ( <S2SV_ModEnd> ( fd ) <S2SV_ModStart> - EINVAL ; fd = fd",0
532,<S2SV_ModStart> ctx ) { vpx_free <S2SV_ModEnd> ( ctx ->,0
533,"<S2SV_ModStart> 1 ) { vpx_lpf_horizontal_8 <S2SV_ModEnd> ( s,",0
534,,0
535,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( screen,0
536,,0
537,<S2SV_ModStart> return - EINVAL ; if ( size_t ) return - EINVAL,0
538,,0
539,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
540,"<S2SV_ModStart> ; if ( strlen ( L ) == '\\0' ) { if ( strlen ( name ) == '\\0' ) { error = '\\0' ; } else if ( strlen ( str ) == '\\0' ) { return - 1 ; } else { char * name = str ; } else if ( strlen ( str ) == '\\0' ; } else { if (! strlen ( name ) ) { if ( str [ 0 ] =='<S2SV_blank>') ; } else { error ='<S2SV_blank>'; } else { error ='<S2SV_blank>'; } else { if (! strlen ( name,'<S2SV_blank>') ; } else { if (! strlen (! str ) ) return 0 ; } else { error = str ; } else { if ( str [ 0 ] == '\\0' ; } else { if ( strlen ( name, ""failed"" ) ; } else { if (! str ) ; } else { if (! strcmp ( name, ""Failed"" ) ) ; } else { if (! str [ 0 ] =='<S2SV_blank>') ; } else { if (! strcmp ( str ) ) ; } else { if (",0
541,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
542,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
543,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( skb ),0
544,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
545,<S2SV_ModStart> ; if ( info -> info. data ) return 0 ; if (,0
546,"<S2SV_ModStart> { if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
547,<S2SV_ModStart> ) ; } tp -> seq ;,0
548,<S2SV_ModStart> key_data ) { kfree ( key_data ) ; kfree ( key_data ) ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> key_data [ KEY_DATA,0
549,,0
550,,0
551,"<S2SV_ModStart> ; if ( inet_opt <S2SV_ModEnd> ( inet_opt,",0
552,"<S2SV_ModStart> expr_ty returns, string type_comment,",0
553,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
554,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ),1
555,<S2SV_ModStart> } if ( osStrchr <S2SV_ModEnd> ( request ->,0
556,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
557,,0
558,"<S2SV_ModStart> ( sk, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & final )",0
559,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
560,"<S2SV_ModStart> ""Improper_info"" ) ;",0
561,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
562,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> m_t m ; bp_len <S2SV_ModStart> ; bn_len = bp_len <S2SV_ModEnd> ; bn_len = <S2SV_ModStart> ; bn_len = <S2SV_ModEnd> ; bn_len = <S2SV_ModStart> ; bn_len = bn_len <S2SV_ModEnd> ; bn_len = <S2SV_ModStart> ; bn_len = <S2SV_ModEnd> ; bn_len = <S2SV_ModStart> ; bn_len = <S2SV_ModEnd> ; bn_len =,0
563,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
564,<S2SV_ModStart> off ) { <S2SV_ModEnd> off = rq,0
565,<S2SV_ModStart> ( psf ) && <S2SV_ModEnd> ( psf ->,0
566,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
567,,0
568,<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( x ->,0
569,<S2SV_ModStart> ; ret = 0 <S2SV_ModEnd> ; break ;,0
570,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
571,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY (,0
572,,0
573,"<S2SV_ModStart> int mptctl_getinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> int mpt_ioctl_ioctl_data ; <S2SV_ModEnd> int mptctl_size ; <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } hdr",0
574,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
575,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
576,<S2SV_ModStart> * rq ) <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
577,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
578,"<S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size_size <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; if ( CHECKOVERFLOW ( CHECKOVERFLOW, buf_size, buf_size ) ) { exif_log ( EXIF_LOG_CORRUPT_CORRUPT_CORRUPT_TAG, ""ExifData"", ""ExifData"", ""ExifData"" ) ; break ; } memset ( buf_size, buf_size, n -> entries [ tcount ]. entries [ tcount ]. entries [ tcount ]. entries [ tcount ]. entries [ tcount ]. entries [ tcount ]. entries [ tcount ]. entries [ tcount ]. entries [ tcount ]. entries ]. entries ]. entries [ tcount ]. entries [ tcount ]. entries [ tcount ]. entries [ tcount ]. entries [ tcount ]. entries ]. entries [ tcount ]. entries [ tcount ]. entries [ tcount ]. entries [ tcount ]. entries ]. entries [ tcount ]. entries [ tcount ]. entries [ tcount ]. entries [ tcount",0
579,<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; if,0
580,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
581,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
582,"<S2SV_ModStart> i -> i, i",0
583,<S2SV_ModStart> op ) { return ; },0
584,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info",0
585,,0
586,"<S2SV_ModStart> ( interface, ENC624J600_EIR <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_EIR <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_EIR, ENC624J600_EIR, ENC624J600_EIR <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EIR_EIR, ENC624J600_EIR <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_EIR, ENC624J600_EIR_EIR, ENC624J600_EIR_EIR <S2SV_ModEnd> ) ; <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_EIR, ENC624J600_EIR <S2SV_ModEnd> ) ) ;",0
587,,0
588,<S2SV_ModStart> ; if ( <S2SV_ModEnd> buf > 0,0
589,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
590,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> malloc ( int <S2SV_ModStart> ) ) { if (! str ) { return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> } if (! str ) { return 0 ; } <S2SV_ModEnd> } if ( <S2SV_ModStart> ) ) { pr_err ( ""%s"", out ) ; return 0 ; } <S2SV_ModEnd> return 0 ;",0
591,"<S2SV_ModStart> int tagval, uint32 <S2SV_ModEnd> * length )",1
592,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> lock_sock ( sk,0
593,<S2SV_ModStart> y ) { sprintf ( outputbuffer <S2SV_ModEnd> ) ; },0
594,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct task_context <S2SV_ModEnd> ; struct task_context <S2SV_ModStart> ; task_context * task <S2SV_ModEnd> ; task_context = <S2SV_ModStart> ; task_context = task_context ( task <S2SV_ModEnd> ) ; task <S2SV_ModStart> ; task_context ( task <S2SV_ModEnd> ) ; task,0
595,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 0 ;,0
596,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
597,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
598,"<S2SV_ModStart> * ctx,",0
599,"<S2SV_ModStart> * data, size_t <S2SV_ModEnd> ) { int",0
600,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
601,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
602,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
603,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> char * cp <S2SV_ModStart> ) { int <S2SV_ModEnd> char * cp <S2SV_ModStart> ) { if ( cp == '\\0' ) { if ( cp == '\\0' ) return - 1 ; } if ( cp == '\\0' ) return ( cp == '\\0' ) { if ( cp == '\\"" ) return NULL ; } <S2SV_ModEnd> } else { <S2SV_ModStart> } else { if ( cp == '\\0' ) { if ( cp == '\\0' || ( cp == '\\"" ) || ( cp =='<S2SV_blank>') || ( cp == '\\"" ) ) { char * cp [ 1 ] == '\\"" ) ; } else { cp ++ = ( cp ++ ) ; } else { if ( cp == '\\n"" ) { if ( cp == '\\n"" ) { if ( cp == '\\n"" ) return 1 ; } <S2SV_ModEnd> } else { <S2SV_ModStart> } else { if ( cp == '\\n"" ) return 1 ; } <S2SV_ModEnd> } else { <S2SV_ModStart> } else { if ( cp == '\\n"" ) { if ( cp == '\\n",0
604,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
605,<S2SV_ModStart> char * p [ L_INT32 <S2SV_ModEnd> ] ; if,0
606,"<S2SV_ModStart> best_cost ; memset <S2SV_ModEnd> ( in,",0
607,,0
608,<S2SV_ModStart> int idx ; if ( idx >= UINT_MAX - kcontrol -> count ) goto error ;,0
609,,0
610,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
611,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
612,"<S2SV_ModStart> ( interface, TEMP_FAILURE_RETRY (",0
613,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
614,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
615,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_cols ; DECLARE_ALIGNEDICTION_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 16 ) { DECLARE_ALIGNEDICTION_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 16 ) ; memset <S2SV_ModEnd> ( 16, <S2SV_ModStart> 16 ) ; memset <S2SV_ModEnd> ( 16, <S2SV_ModStart> 16 ) ; memset <S2SV_ModEnd> ( 16,",0
616,,0
617,,0
618,<S2SV_ModStart> ( ) ; if (! thresholds -> thresholds ) goto unlock ;,0
619,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
620,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_wb_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) { vpx_wb_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_write_bit <S2SV_ModEnd> ( wb,",0
621,<S2SV_ModStart> : if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> : if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; },1
622,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context ->,0
623,,0
624,<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,0
625,"<S2SV_ModStart> ( interface, ENC624J600_ENC624J600_EIR, ENC624J600_TXIF <S2SV_ModEnd> ) ; size <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_EIR, ENC624J600_EIR, ENC624J600_EIR, ENC624J600_TXIF <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_EIR_TXIF <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_RETRY <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_EIR_TXIF <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_EIR_TXIF | ENC624J600_TXIF <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_RETRY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_DEFAULT <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_RETRY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600WriteReg ( <S2SV_ModStart> ( interface, ENC624J600_E",0
626,,0
627,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
628,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
629,,0
630,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
631,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
632,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
633,<S2SV_ModStart> handle ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
634,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> u8 ( uint8_t <S2SV_ModStart> 16_t len ) { if ( len <S2SV_null>,0
635,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( c,0
636,"<S2SV_ModStart> ( interface, KSZ8851_RX <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( interface, KSZ8851_R_RX <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, KSZ8851_R_RX <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_R_RX <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_R, KSZ8851_R <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, KSZ8851_R_R_TXSR <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, KSZ8851_R_RX <S2SV_ModEnd> ) ; }",0
637,,0
638,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
639,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } else {,0
640,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( index,0
641,"<S2SV_ModStart> ; # if CONFIG_VP9_HANDLED <S2SV_ModEnd> ( config,",0
642,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
643,,0
644,<S2SV_ModStart> 2 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,1
645,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
646,,0
647,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
648,,0
649,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
650,<S2SV_ModStart> ; if ( <S2SV_ModEnd>!= NULL ),0
651,"<S2SV_ModStart> ( number_planes_planes_filled,",0
652,<S2SV_ModStart> ) ) ; size_t <S2SV_ModEnd> size = 0,0
653,<S2SV_ModStart> case XFS_DIR : if ( xfs_dinode_dinode_dinode_verify_fork ( dip ) ) { return XFS_FORK ; },0
654,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 0 ;,0
655,<S2SV_ModStart> ) break ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
656,<S2SV_ModStart> ) ; } <S2SV_ModEnd> spin_lock ( &,0
657,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
658,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
659,"<S2SV_ModStart> ) ) { memcpy <S2SV_ModEnd> ( src,",0
660,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
661,"<S2SV_ModStart> length ) { if ( desc -> desc. bNumEndpoints < 0 ) { dev_err ( ""too <S2SV_blank> descriptor <S2SV_blank> descriptor <S2SV_blank> descriptor <S2SV_blank> short"" ) ; return - EINVAL ; }",0
662,<S2SV_ModStart> ; if ( info -> access == - EINVAL ) return - EINVAL <S2SV_ModEnd> ; if (,0
663,"<S2SV_ModStart>, size,",0
664,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,0
665,,0
666,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( interface, ENC624J600WriteReg ( interface, ENC624J600_BUSY <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC624J600_ERR, ENC624J600_EIR, ENC624J600_BUSY <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR, ENC624J600_BUSY <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_BUSY <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600WriteReg ( interface, ENC624J600_MAADR1 ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> ( interface, ENC624J600WriteReg ( interface, ENC624J600_EIR, ENC624J600_BUSY <S2SV_ModEnd> ) ; <S2SV_ModStart> ( interface, ENC624J600_BUSY <S2SV_ModEnd> ) ; }",0
667,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
668,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, ctx ->",0
669,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE_mode_mode ( VP9_FRAME ) { VP9_COMMON * const cm = & cpi -> frames_mode ; MACROBLOCKD_MODE_mode = & cpi -> common. subsampling_mode ; if ( cpi -> frames_mode == KEY_FRAME ) { if ( cpi -> mode == KEY_FRAME ) { sf -> mode_FRAME = 1 ; sf -> segment_id = 1 ; sf -> frames_key = 1 ; } if (! sf -> use_mode == KEY_FRAME ) { if (! sf -> mode_FRAME ) { cpi -> sf_mode_mode = 1 ; sf -> use_mode_mode = 1 ; cpi -> use_mode = 1 ; } else if ( cpi -> use_mode == KEY_FRAME ) { if ( cpi -> mode == KEY_FRAME ) { if ( cpi -> mode == KEY_FRAME ) { sf_FRAME ) { vp9_,0
670,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
671,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
672,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
673,<S2SV_ModStart> ) { Py_RETURN_NONE <S2SV_ModEnd> ; } },0
674,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
675,<S2SV_ModStart> ) ; } <S2SV_ModEnd> spin_lock ( &,0
676,"<S2SV_ModStart> ] ) ; memset <S2SV_ModEnd> ( mb,",0
677,,0
678,,1
679,,0
680,"<S2SV_ModStart> FALSE ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
681,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
682,,0
683,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> n2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModStart> 2SV_null> static BOOL <S2SV_ModEnd> ; if (,0
684,<S2SV_ModStart> ) ; goto out <S2SV_ModEnd> ; } if,0
685,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> cpi ) { const VP9EncoderConfig <S2SV_ModEnd> * const VP9EncoderConfig <S2SV_ModStart> 0 ) { const VP9EncoderConfig * const VP9EncoderConfig * const oxcf = & cpi -> oxcf ; const VP9EncoderConfig * const oxcf = & cpi -> oxcf ; <S2SV_ModStart> = cpi -> oxcf ; if ( cpi -> oxcf. gf_mode == KEY_FRAME ) { if ( cpi -> oxcf. gf_mode == KEY_FRAME ) { if ( cpi -> oxcf. bit_level == KEY_FRAME ) { if ( cpi -> oxcf. gf_level == KEY_FRAME ) ; } else if ( cpi -> oxcf. rc -> oxcf. gf_mode == KEY_FRAME ) { cpi -> oxcf. MAX_FRAME ; } else if ( cpi -> oxcf. rc_mode == KEY_FRAME ) { int64_t_t_t * const int64_t_t_t_t_t,0
686,"<S2SV_ModStart> void vpx_read_bit ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> ) { vpx_read_bit <S2SV_ModEnd> ( r, <S2SV_ModStart> ) ; return vpx_read_bit <S2SV_ModEnd> ( r,",0
687,"<S2SV_ModStart> : # line 101 ""hex_grammar.y"" { yyvalue_node_node_node_node_node_node_node_node_node_node_node ( yyvalue. re_node_node ) ; yyvalue_node_node_node_node_node_node_node ( yyval ) ; yyval_node_node_node_node_node_node ( yyvalue ( ) ). re_node_node_node ) ;",0
688,<S2SV_ModStart> <S2SV_null> <S2SV_null> static const VP9_COMMON * const MACROBLOCKD * const MACROBLOCKD * const xd = & td -> mb ; MACROBLOCKD * const xd = & td. mb ; MACROBLOCKD * const xd = & td -> mb ; MACROBLOCKD * const xd -> plane [ 0 ] ; MACROBLOCKD * const xd = & xd -> plane [ 0 ] ; MACROBLOCKD * const xd = & td -> plane [ 0 ] ; MACROBLOCKD * const xd = & td. mb ; MACROBLOCKD * const xd = xd -> plane [ 0 ] ; const xd -> plane [ 0 ] = xd -> plane [ 0 ] ; const xd -> plane [ 0 ] = xd -> plane [ 0 ] ; const int xd -> plane [ 0 ] = xd -> plane [ 0 ] ; const uint8_t * const int xd = xd -> plane [ 0 ] ; const xd -> plane [ 0 ] = xd -> plane [ plane [,0
689,,0
690,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
691,<S2SV_ModStart> vpx_codec_alg_priv_t * sb ;,0
692,,0
693,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
694,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_DONTWAIT ) )",0
695,"<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, 0 )",0
696,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
697,<S2SV_ModStart> <S2SV_null> <S2SV_null> staticS2SV_null> static,0
698,<S2SV_ModStart> q ) ; fq -> tag = NULL ;,0
699,,0
700,<S2SV_ModStart> ; if ( zval == NULL ) { zval = zval_copy_to_long ( & <S2SV_ModEnd> ) ; zval,0
701,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if (,0
702,,0
703,<S2SV_ModStart> ) return FALSE <S2SV_ModEnd> ; if (,0
704,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
705,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ; memset <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm ->",0
706,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ; if ( type_type_type ( type_type )!= 0 ) return - EINVAL ; if (,0
707,,0
708,<S2SV_ModStart> ; if ( context -> pass == 0 ) { switch ( context -> pass == 0 ) { switch ( context -> curY ) ; break ; case 2 : context -> curY = 0 ; case 2 : context -> curY : context -> curY = i -> curY ; break ; case 2 : context -> curY = i -> curY = i -> curY ; break ; case 2 : context -> curY = 0 ; case 2 : context -> curY : context -> curY = i -> curY ; break ; case 2 : context -> curY = 0 ; break ; case 2 : context -> curY : context -> curY : context -> curY = i -> curY ; break ; case 2 : context -> curY = i -> curY : context -> curY = i -> curY ; break ; case 2 : context -> curY = 0 ; break ; case 2 : context -> curY : context -> curY : context -> curY : context -> curY = i -> curY + 2 ; break ; case 2 : context -> curY = 0 ; break ; case 2 : context -> curY : if ( context -> curY ) break ; case 2 : if ( context -> curY,0
709,<S2SV_ModStart> ) { memcpy <S2SV_ModEnd> ( x ->,0
710,<S2SV_ModStart> ) { return <S2SV_ModEnd> ; } if,0
711,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
712,"<S2SV_ModStart> ip_idents_hashrnd_hashrnd_idents ( net -> ip_idents_hashrnd_idents_hashrnd_hashrnd_idents_hashrnd_hashrnd_idents_hashrnd_hashrnd_idents_hashrnd_hash ( & net -> ip_idents_hashrnd_hashrnd_idents_hashrnd_hashrnd_hashrnd_hash ( net, sizeof ( net -> ip_idents_hashrnd_idents_idents_hashrnd_hashrnd_hashrnd_hashrnd_idents_hashrnd_hashrnd_idents_hash ( net -> ip_idents_hashrnd_idents_hashrnd_hashrnd_idents_hash ( & net -> ip_idents_idents_hashrnd_idents_hashrnd_hashrnd_idents_hashrnd_hashrnd_idents_idents_hashrnd_hashrnd_idents ( & net -> ip_idents_idents_hashrnd_idents_idents_hashrnd_idents_idents_idents_hashrnd_hashrnd_idents ( net -> ip_",0
713,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj,",0
714,"<S2SV_ModStart> void vpx_writer <S2SV_ModEnd> * w,",0
715,,0
716,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
717,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
718,"<S2SV_ModStart> - EINVAL ; if ( g_assert ( file == NULL ) { gfprintf ( ""A\\n"" ) ; return - EINVAL ; }",0
719,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> tile_cols ( int <S2SV_ModStart> tile_cols ) { VP9_COMMON * tile_COMMON * tile_info = & tile_data -> tile_cols ; tile_cols = & tile_data -> tile_cols ; int tile_cols ; tile_cols = tile_data -> tile_cols ; tile_cols * tile_tile_cols = tile_cols ; tile_cols = tile_data -> tile_cols ; tile_data -> tile_cols ; tile_cols = tile_cols ; tile_data -> tile_cols = 0 ; memset ( tile_tile_tile_tile_tile_tile_tile_col, tile_col, tile_col, tile_col, tile_col, tile_tile_col, tile_col, tile_cols ) ; if ( tile_col < tile_col ) { tile_cols ( tile_cols ) ; tile_data -> tile_cols = tile_tile_cols ( tile_cols",0
720,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> vp9_decode ) { VP9_COMMON * const VP9_COMMON * const cm = & cm -> frame_data ; MACROBLOCKD * const cm = & pbi -> frame_data ; MACROBLOCK ; MACROBLOCKD * pbi = & pbi -> frame_data ; MACROBLOCK ; MACROBLOCKD * const xd = & pbi -> frame_data ; vpx_read_decode ) ; vpx_read_decode <S2SV_ModEnd> ( pbi, <S2SV_ModStart> pbi ) ; vpx_read_decode ) ; memset <S2SV_ModEnd> ( pbi,",0
721,<S2SV_ModStart> ) ) { return GF_IS_INVALID_INFO <S2SV_ModEnd> ; } if,0
722,<S2SV_ModStart> * opt ; struct ip_options_rcu <S2SV_ModEnd> * opt =,0
723,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
724,"<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx, <S2SV_ModStart> ) ) ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( ctx -> flags & VPX_IMG_HIGHBITDEPTH ) { if ( ctx -> flags & VPX_CODEC_IMG_HIGHBITDEPTH ) img -> flags & VPX_IMG_FMT_HIGHBITDEPTH ) ; # if CONFIG_HIGHBITDEPTH if ( ctx -> flags & VP9_HIGHBITDEPTH ) ( ctx -> flags & VPX_IMG_HIGHBITDEPTH ) img -> flags & VP9_IMG_HIGHBITDEPTH ) ; # endif vpx_get_close ( img ) ; # endif <S2SV_ModStart> VP9_HIGHBITDEPTHRESHIGHBITDEPTH ) ; # endif <S2SV_ModEnd> ( img,",0
725,"<S2SV_ModStart>, & len, 0",1
726,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
727,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
728,<S2SV_ModStart> * buf ; jas_uchar <S2SV_ModEnd> buf [ 0,0
729,<S2SV_ModStart> <S2SV_null> <S2SV_null> static VP9_COMP * const MACROBLOCKD * const xd = & td -> mbmi ; MACROBLOCKD * const xd = & cpi -> td. mbmi ; MACROBLOCKD * const xd = & cpi -> td. mbmi_ext ; MACROBLOCKD * const xd = & cpi -> mbmi_ext ; MACROBLOCKD * const xd = & cpi -> td. mbmi ; MACROBLOCKD * const xd = & cpi -> td. mbmi ; MACROBLOCKD * const xd = & cpi -> mbmi ; x -> mbmi_ext = x -> mbmi_ext ; x -> mbmi_ext = x -> mbmi_ext ; x -> mbmi_ext = cpi -> mbmi_ext ; if ( cpi -> oxcf. seg_mode == 0 ) { cpi -> seg_mode_mode_mode_mode = & cpi -> seg ; } else { cpi ->,0
730,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] =,0
731,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) return AVERROR_INVALIDDATA ; if (! GFP_INVALIDDATA <S2SV_ModEnd> ) return AVERROR_INVALIDDATA <S2SV_ModStart> ; if ( <S2SV_ModEnd> ) return AVERROR_INVALIDDATA,0
732,,0
733,"<S2SV_ModStart> { p = osStrchr <S2SV_ModEnd> ( p,",0
734,,0
735,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
736,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( ( int <S2SV_ModStart> ) ) ) return <S2SV_ModEnd> ; } <S2SV_null>,0
737,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4,",0
738,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( skb ),0
739,<S2SV_ModStart> { TEMP_FAILURE_RETRY (,0
740,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
741,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
742,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
743,,0
744,<S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( x ->,0
745,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,0
746,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
747,<S2SV_ModStart> pbi ) { ( void ) pbi ;,0
748,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
749,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
750,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
751,,0
752,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
753,<S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> coef_probs [ tx_size,0
754,,0
755,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = 0 ; state -> data [ 1 ] = 0x80 ; state -> data [ 1 ] = 0x80 ; state -> data [ 0x80 ; state -> data [ 1 ] = 0x80 ; state -> data [ 1 ] = 0x80 ; state -> data [ 0x80 ; state -> data [ 1 ] = 0x80 ; state -> data [ 1 ] = 0x80 ; state -> data [ 1 ] = 0x80 ; state -> data [ 1 ] = 0x80 ; state -> data [ 1 ] = 0x80 ; state -> data [ 1 ] = 0x80 ; state -> data [ 1 ] = 0x80 ; state -> data [ 1 ] = 0x80 ; state -> data [ 1 ] = 0x80 ; state -> data [ 1 ] = 0xe ; state -> data [ 0x83 ; state -> data [ 1 ] = 0x83 ; state -> data [ 1 ] = 0x80 ; state -> data [ 1 ] = 0x80 ; state -> data [ 1 ] = 0x80 ; state -> data,0
756,<S2SV_ModStart> vpx_codec_alg_priv_t * ctx,0
757,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int i, vpx_prob_writer, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> int i, vpx_writer, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart>, vpx_writer, vpx_writer, vpx_prob_writer <S2SV_ModEnd> ) ; vpx_writer",0
758,<S2SV_ModStart> char buf [ BUFSIZE <S2SV_ModEnd> ] ; if,0
759,,0
760,<S2SV_ModStart> tk_status ) ; task_status = - EIO ;,0
761,"<S2SV_ModStart>, n ) ; if ( w == NULL ) return 0",1
762,"<S2SV_ModStart> ) ) { memset ( & buf, 0, 0, sizeof ( a ) ) ;",0
763,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> int tile_tile_tile_tile_tile_cols ( VP9_COMMON * ) { VP9_COMMON * const tile_COMMON * const tile_info = & pbi -> tile_buffer ; MACROBLOCK_SIZE * pbi = & pbi -> tile_tile_info -> tile_data -> tile_size ; vpx_read_tile_tile_tile_tile_tile_tile_info <S2SV_ModEnd> ( pbi, <S2SV_ModStart> ) ; vpx_read_tile_tile_tile_tile_tile_tile_tile_tile_tile_tile_info <S2SV_ModEnd> ( pbi, <S2SV_ModStart> ) ; vpx_writer <S2SV_ModEnd> ( pbi, <S2SV_ModStart> ) ; vpx_writer <S2SV_ModEnd> ( pbi, <S2SV_ModStart> ) ; } vpx_writer <S2SV_ModEnd> ( pbi, <S2SV_ModStart> ) ; vpx_writer <S2SV_ModEnd> ( pbi, <S2SV_ModStart> ) ) ; vpx_free ( pbi -> tile_data ) ; vpx_buffer ( ) ; vpx_free ( pbi -> tile_data ) ;",0
764,<S2SV_ModStart> ; if ( len < 0 ) return - 1 ; if (,0
765,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE_MODE_PROC ( VP9_COMMON * cpi, MACROBLOCKD * cpi ) { MACROBLOCKD * const MACROBLOCKD * const xd = & cpi -> seg ; MACROBLOCKD_S2SV_null>",0
766,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
767,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
768,,0
769,<S2SV_ModStart> -> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock,0
770,"<S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
771,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
772,,0
773,<S2SV_ModStart> ) ; goto out <S2SV_ModEnd> ; } ret,0
774,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
775,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) { struct sockbuf ; struct sockaddr_rcu * <S2SV_ModEnd> ; struct sockaddr <S2SV_ModStart> ; struct sockaddr * <S2SV_ModEnd> ; struct sockaddr_rcu <S2SV_ModStart> ; struct sockaddr ; struct sockaddr * <S2SV_ModStart> ; struct sockaddr ; struct sockaddr * <S2SV_ModEnd> ; struct sockaddr_p_rcu * <S2SV_ModStart> ; struct sockaddr ; struct sockaddr * rcu_read_rcu <S2SV_ModEnd> ; int <S2SV_ModStart> = 0 ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> rcu == 0 ) <S2SV_ModStart> ; if ( <S2SV_ModEnd> rcu == 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; if ( <S2SV_ModEnd> ) ; } <S2SV_null>,0
776,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( & cpi,0
777,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
778,<S2SV_ModStart> ) ; } ND_TCHECK2 ( bp [ 0 ] ) ;,0
779,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
780,"<S2SV_ModStart> int mptctl_targetinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; if (",0
781,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
782,<S2SV_ModStart> 0 ; } jas_uchar <S2SV_ModEnd> ( jas ->,0
783,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } else {,0
784,<S2SV_ModStart> void vpx_read_bit_bit ( vpx_read_bit <S2SV_ModEnd> * r ),0
785,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
786,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r )",0
787,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ; int vpx_codec_alg_priv_t * <S2SV_ModStart> ; if (! vpx_codec_err ) { vpx_codec_err_err ( ) ; return - 1 ; } if (,0
788,<S2SV_ModStart> ) ) ; if ( ndo_len < 2 ) goto out ;,0
789,,0
790,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
791,<S2SV_ModStart> skb -> len < 0 || skb -> len,0
792,<S2SV_ModStart> ; if ( EOFBlob ( image )!= 0 ) break,0
793,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
794,,0
795,<S2SV_ModStart> ; # endif tok -> type_comments = 0 ;,0
796,,0
797,<S2SV_ModStart> ) ) { return GF_IS_INVALID_INFO <S2SV_ModEnd> ; } if,0
798,<S2SV_ModStart> ; buf [ size_t <S2SV_ModEnd> ] = 0,0
799,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
800,<S2SV_ModStart> = 0 ; size_t data_socklen_socklen_t addrlen_out = 0 ; <S2SV_ModStart> OE_RAISE_ERRNO ( OE_E_EINVAL ) ; if (! addrlen_out ) OE_RAISE_ERRNO ( OE_EINVAL ) ;,0
801,,1
802,<S2SV_ModStart> ; if (! s ) return FALSE ; if (,0
803,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
804,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = 0 ; int <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; uint32_times = 0 ; int <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; if ( uint32_tlen < 0 ) { <S2SV_ModStart> = 0 ; uint32_tried = 0 ; <S2SV_ModStart> = 0 ; uint32_tried = 0 ; uint32_tgrowval = 0 ; uint32_tgrowval = 0 ; uint32_tiles = 0 ; uint32_tgrowval = 0 ; uint32_tgrowval = 0 ; uint32_tgrowval = 0 ; uint32_tgrowval = 0 ; uint32_tgrowval = 0 ; uint32_tgrowval = 0 ; uint32_tgrowval = 0 ; uint32_tgrowval = 0 ; uint32_tgrowval = 0 ; uint32_tgrowval = 0 ; uint32_t * sizeof ( uint32_tgrowval ) ; uint32_tgrowval = 0 ; uint32_tgrowval = 0 ; uint32_tgrow = 0 ; if ( uint32_t,0
805,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> dm9000ReadReg ( DM9000ReadReg ( DM9000_P <S2SV_ModEnd> ) ; dm9000ReadReg <S2SV_ModStart> ; dm9000ReadReg ( DM9000ReadReg ( DM9000_P <S2SV_ModEnd> ) ; dm9000WriteReg <S2SV_ModStart> ; dm9000ReadReg ( DM9000ReadReg ( DM9000_REQ <S2SV_ModEnd> ) ; dm9000WriteReg <S2SV_ModStart> ; dm9000ReadReg ( DM9000_PT ) ; dm9000WriteReg ( DM9000_PT ) ; dm9000WriteReg ( DM9000_ERR, dm9000_PT ) ; dm9000WriteReg ( DM9000_ERR ) ; dm9000ReadReg ( DM9000_PT ) ; dm9000WriteReg ( DM9000_PT ) ; dm9000WriteReg ( DM9000_ERR ) ; dm9000WriteReg ( DM9000_PT ) ; dm9000WriteReg ( DM9000_PT ) ; dm9000_",0
806,,0
807,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
808,"<S2SV_ModStart> cpl, NULL, NULL <S2SV_ModEnd> ) ; }",0
809,<S2SV_ModStart> -> msg_namelen = 0,0
810,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int rc ; const PREDICTION_MODE_MODE_PRINT_MAX ; MV_MODE_PRINT32 <S2SV_ModEnd> = 0 ; <S2SV_ModStart> best_cost = vp9_err_cost ( & cpi, & cpi -> mf_cost, & cpi -> mv_cost. mv_cost. mv_cost. mv_cost. mv_cost. mv_cost. mv_cost. mv_cost. mv_cost. mv_cost. mv_cost. mv_mv_cost. mv_cost. mv_cost. mf_cost. mv_mv_cost. mf_cost. mv_mv_costsse ; int64_t <S2SV_ModEnd> best_mv_mv_cost_mv_mv_mv_cost_cost_costs ( cpi, <S2SV_ModStart> ( cpi, <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( cpi, & new_cost_mv_mv_cost_mv_mv_",0
811,<S2SV_ModStart> goto out ; <S2SV_ModEnd> } if (,0
812,<S2SV_ModStart> ) ; },0
813,,0
814,"<S2SV_ModStart> -> rows, number_planes_planes_planes_filled <S2SV_ModEnd> ) ; if",0
815,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
816,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
817,<S2SV_ModStart> client ) { <S2SV_ModEnd> client -> client <S2SV_ModStart> ) ; } <S2SV_ModEnd> client -> client,0
818,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
