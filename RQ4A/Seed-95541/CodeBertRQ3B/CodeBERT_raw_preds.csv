,raw_predictions,correctly_predicted
0,<S2SV_ModStart> goto out ; } <S2SV_ModEnd> if (!,0
1,<S2SV_ModStart> skb ) ; <S2SV_ModEnd> if ( skb,0
2,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
3,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
4,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",0
5,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
6,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
7,,0
8,,0
9,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
10,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
11,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
12,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModEnd> ) { ND_PRINT",0
13,<S2SV_ModStart> keyring ) ; <S2SV_ModEnd> keyring_keyring,0
14,,0
15,,0
16,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
17,,0
18,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",0
19,,0
20,,0
21,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
22,,0
23,<S2SV_ModStart> return 0 ; if ( len < 0 ) return 0 ;,0
24,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
25,,0
26,,0
27,<S2SV_ModStart> out_data ) ; <S2SV_ModEnd> return 0 ;,0
28,,0
29,,0
30,,0
31,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> free ( page,0
32,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
33,,0
34,,0
35,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,0
36,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (,0
37,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
38,,0
39,,0
40,"<S2SV_ModStart> <S2SV_null> static struct ip_options_rcu <S2SV_ModEnd> * opt,",0
41,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
42,,0
43,<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd> ) ; },0
44,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
45,"<S2SV_ModStart>, 1, <S2SV_ModEnd> ) ; if",0
46,,0
47,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
48,,0
49,<S2SV_ModStart> ( addr + <S2SV_ModEnd> ) -,0
50,"<S2SV_ModStart> NULL, NULL, false",0
51,,0
52,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
53,,0
54,,0
55,,0
56,,0
57,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
58,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { unsigned",0
59,<S2SV_ModStart> * dir ; <S2SV_ModEnd> if (!,0
60,,0
61,,0
62,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,,0
65,,0
66,,0
67,,0
68,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
69,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
70,<S2SV_ModStart> ) ) ; return,0
71,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
72,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,0
73,,0
74,<S2SV_ModStart> flags ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
75,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
76,"<S2SV_ModStart>, NULL, true <S2SV_ModEnd> ) ; assert",0
77,,0
78,,0
79,<S2SV_ModStart> ) ) ; if (! tx_mode ) return FALSE ;,0
80,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
82,,0
83,,0
84,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
85,,0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,,0
89,<S2SV_ModStart> ) ; struct ip_options_rcu <S2SV_ModEnd> * opt =,0
90,,0
91,,0
92,,0
93,"<S2SV_ModStart> write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) ; vpx_write_bit <S2SV_ModEnd> ( wb,",0
94,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,,0
97,<S2SV_ModStart> goto err ; <S2SV_ModEnd> if ( addr,0
98,,0
99,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
100,<S2SV_ModStart> cpi ) { memset <S2SV_ModEnd> ( cpi ->,0
101,<S2SV_ModStart> return - EINVAL <S2SV_ModEnd> ; if (,0
102,,0
103,,0
104,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
105,,0
106,<S2SV_ModStart> 0 ) ; if ( len > 0 ) { return NULL ; },0
107,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
108,,0
109,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; break",0
110,,0
111,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if (!,0
112,,0
113,,0
114,<S2SV_ModStart> ; if ( skb &&,0
115,,0
116,<S2SV_ModStart> ) ; msg -> msg_namelen = 0 ;,0
117,<S2SV_ModStart> ) ; return 0,0
118,<S2SV_ModStart> dev ) ; <S2SV_ModEnd> return - EINVAL,0
119,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,,0
122,"<S2SV_ModStart>, ibuf ) ; if ( ret == 0 ) { ret = - EFAULT ; }",0
123,,0
124,,0
125,,0
126,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output,",0
127,<S2SV_ModStart> return - EINVAL <S2SV_ModEnd> ; if (,0
128,,0
129,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
131,,0
132,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
133,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
134,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( connection,",0
136,,0
137,,0
138,,0
139,,0
140,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
141,,0
142,,0
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,,0
145,"<S2SV_ModStart>, inode, inode <S2SV_ModEnd> ) ; if",0
146,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
147,,0
148,,0
149,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj,",0
150,,0
151,"<S2SV_ModStart>, msg_namelen, msg_namelen <S2SV_ModEnd> ) ; if",0
152,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
153,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
154,,0
155,,0
156,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
157,,0
158,"<S2SV_ModStart>, offset, offset <S2SV_ModEnd> ) ; if",0
159,,0
160,"<S2SV_ModStart> void vpx_write_bit_literal <S2SV_ModEnd> ( wb,",0
161,"<S2SV_ModStart> { if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
162,<S2SV_ModStart> ; if (,0
163,,0
164,,0
165,,0
166,,0
167,,0
168,,0
169,<S2SV_ModStart> ; if (,0
170,,0
171,,0
172,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
173,,0
174,,0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModEnd> ) dat ; if",0
176,"<S2SV_ModStart> ), in_stride <S2SV_ModEnd> ) ; if",0
177,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModEnd> int mi_row, <S2SV_ModStart> int mi_row, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_cols, mi_cols <S2SV_ModEnd> ) { <S2SV_ModStart> ( mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_cols <S2SV_ModEnd> ) ; }",0
178,,0
179,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
180,,0
181,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
182,,0
183,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
186,,0
187,<S2SV_ModStart> ; if (,0
188,,0
189,,0
190,<S2SV_ModStart> = - EINVAL <S2SV_ModEnd> ; if (,0
191,"<S2SV_ModStart>, int ret <S2SV_ModEnd> ; if (",0
192,,0
193,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
194,,0
195,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output,",0
196,,0
197,<S2SV_ModStart> file ) ; <S2SV_ModEnd> if (!,0
198,<S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( tptr ) ;,0
199,,0
200,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
201,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src,",0
202,<S2SV_ModStart> ; int ret = 0 ; if (,0
203,,0
204,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
205,<S2SV_ModStart> cpi ) { memcpy <S2SV_ModEnd> ( cpi ->,0
206,,0
207,"<S2SV_ModStart>, int ret <S2SV_ModEnd> ; if (",0
208,<S2SV_ModStart> ) ) { if ( ptr == NULL ) { return NULL ; },0
209,,0
210,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
211,,0
212,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
213,,0
214,<S2SV_ModStart> slave_mutex ) ; spin_lock_lock ( & timer -> lock ) ;,0
215,,0
216,,0
217,,0
218,<S2SV_ModStart> ; if ( bi == NULL ) return ;,0
219,<S2SV_ModStart> ) ) ; msg -> msg_namelen = 0 ;,0
220,,0
221,,0
222,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
223,,0
224,,0
225,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> cpi ) { VP9EncoderConfig <S2SV_ModEnd> VP9_COMMON * const VP9_COMMON * const <S2SV_ModStart> cpi ) { VP9_COMMON * const VP9_COMMON * const cm = cpi -> common ; if ( cpi -> common. cpi -> common. cpi ) return cpi -> common ; if ( cpi -> common. layer_type == KEY_FRAME ) return ctx_FRAME ; if ( cpi -> svc. layer_type == KEY_FRAME ) return AVERROR_FRAME ; if ( cpi -> svc. pass == KEY_FRAME ) { if ( cpi -> svc. pass == KEY_FRAME ) return cpi -> temporal_FRAME ; } else if ( cpi -> sf_frame == KEY_FRAME ) return cpi -> temporal_FRAME ; if ( cpi -> temporal_frame == KEY_FRAME ) { if ( cpi -> svc. layer_FRAME ) return cpi -> temporal_FRAME ; if ( cpi ->,0
226,<S2SV_ModStart> return - 1,0
227,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
228,<S2SV_ModStart> size_t new_size <S2SV_ModEnd> ; if (,0
229,<S2SV_ModStart> return - EINVAL <S2SV_ModEnd> ; if (,0
230,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
231,<S2SV_ModStart> ) ; return - EINVAL,0
232,,0
233,,0
234,"<S2SV_ModStart>, annotation, true, true",0
235,<S2SV_ModStart> iv ) ;,0
236,,0
237,,1
238,,0
239,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
240,,0
241,,0
242,"<S2SV_ModStart> perf_event ) ; perf_event_context ( event, event ) ;",0
243,,0
244,,0
245,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
246,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src,",0
247,,0
248,"<S2SV_ModStart>, NULL, <S2SV_ModEnd> ) ; }",0
249,,0
250,,0
251,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
252,,0
253,,0
254,<S2SV_ModStart> book -> dim && i < n,1
255,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
256,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
257,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
258,<S2SV_ModStart> return - EINVAL <S2SV_ModEnd> ; if (,0
259,,0
260,,0
261,,0
262,"<S2SV_ModStart> ( interface, KSZ8851_MAH <S2SV_ModEnd> ) ) ; interface",0
263,,0
264,,0
265,,0
266,,0
267,,0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( x,",0
270,,0
271,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
272,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat,0
273,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH mode_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH mode_VP9_HIGHBITDEPTH if CONFIG_VP9_VP9_HIGHBITDEPTH mode_VP9_HIGHBITDEPTH if ( x_HIGHBITDEPTH ) { # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_VP9_VP9_VP9_VP9_HIGHBITDEPTH ) { # if CONFIG_VP9_VP9_HIGHBITDEPTH if CONFIG_VP9_VP9_VP9_VP9_HIGHBITDEPTH if CONFIG_VP9_VP9_VP9_HIGHBITDEP,0
274,<S2SV_ModStart> ; if (,0
275,,0
276,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
277,,0
278,,0
279,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
280,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
281,<S2SV_ModStart> q ) ; spin_lock_lock ( ) ;,0
282,<S2SV_ModStart> if ( addr + <S2SV_ModEnd> sizeof ( val,0
283,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
284,,0
285,,0
286,,0
287,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
288,,0
289,,0
290,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( cpi,",0
291,,0
292,,0
293,,0
294,"<S2SV_ModStart> write_literal <S2SV_ModEnd> ( w,",0
295,,0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,,0
298,,0
299,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
300,,0
301,,0
302,,0
303,,0
304,,0
305,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",0
306,<S2SV_ModStart> bus ) ; return - EINVAL,0
307,,0
308,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> cm ->,0
309,,0
310,,0
311,,0
312,,0
313,,0
314,,0
315,,0
316,<S2SV_ModStart> ) return <S2SV_ModEnd> ; if (,0
317,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
318,,0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
320,,0
321,,0
322,"<S2SV_ModStart> void vpx_write_literal <S2SV_ModEnd> ( wb,",0
323,,0
324,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
325,,0
326,,0
327,,0
328,,0
329,,1
330,,0
331,,0
332,,0
333,,0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
336,,0
337,,0
338,,0
339,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
340,,0
341,,0
342,"<S2SV_ModStart> void vpx_write_literal <S2SV_ModEnd> ( w,",0
343,,0
344,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
345,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; }",0
346,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src,",0
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
348,,0
349,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
350,<S2SV_ModStart> size ) { ASSERT_NO_SIZE_OVERFLOW ( size ) ;,1
351,,0
352,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( req_len,0
353,,0
354,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static l2SV_null> <S2SV_null> static l2SV_null> static l2SV_null> <S2SV_null> static l2SV_null>,0
355,"<S2SV_ModStart> { if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, 0 )",0
356,,0
357,,0
358,,0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModStart> int64_t * const VP9_COMMON * const VP9_COMMON * const uint16_t * const int64_t * const int64_t * const int64_t * const uint32_t * const int64_t * const int64_t * const uint32_t * const int64_t * const uint32_t * const int64_t * const uint32_t * const uint32_t * const uint32_t * const uint32_t * const uint32_t * const uint32_t * const uint32_t * const uint32_t * const uint32_t * const uint32_t * const uint32_t * const uint32_t * const uint32_t * const uint32_t * const uint32_t * const uint32_t * pd_t * const uint32_t * const uint32_t * const uint32_t * const uint32_t * const uint32_t * const uint32_t * const uint32_,0
361,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
362,,0
363,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r,",0
364,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dest_ptr1,",0
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,,0
367,,0
368,,0
369,,0
370,,0
371,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
372,,0
373,,0
374,,0
375,,0
376,<S2SV_ModStart> ; if (,0
377,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd> ) ; }",0
378,,0
379,,0
380,,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,,0
384,,0
385,,0
386,,0
387,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
388,,0
389,,0
390,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> int bit_mv_mode_mv_mv_mv_mv_mv_size, int <S2SV_ModStart> int max_mv_mv_mv_mv_size, int max_mv_mv_mv_mv_mv_mv_mv_size, int <S2SV_ModEnd>, int <S2SV_ModStart> } # if CONFIG_VP9_HIGHBITSV_HIGHBITS2 ( int max_mv_mv_mv_mv_mv_mv_mv_mv_mv_size, int <S2SV_ModEnd> ) { int <S2SV_ModStart> } # if CONFIG_HIGHBITSV_HIGHBITSV_HIGHBITSV_mv_mv_mv_mv_mv_mv_mv_mv_mv_mv_size ( int <S2SV_ModEnd> ) { int <S2SV_ModStart> } # if CONFIG_HIGHBITSV_HIGHBITSIG_HIGHBITSV_HIGHBITSV_HIGHBIT",0
391,,0
392,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",0
393,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
394,<S2SV_ModStart> dev ) ; <S2SV_ModEnd> return 0 ;,0
395,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
396,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
397,,0
398,,0
399,,0
400,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
401,,0
402,,0
403,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
404,,0
405,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const MACROBLOCKD * const xd, xd, xd, xd, xd, xd, xd, xd, xd, xd, xd -> plane, xd, xd, xd, xd -> plane [ 0 ]. plane ] ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( xd ) { vp9_VP9_HIGHBITDEPTH if ( xd ) { vp9_highbd_variance ( xd, xd, xd, xd, xd, bsize, xd -> plane, xd, bsize, bsize, bsize, bsize, bsize, bsize, xd -> plane, bsize, bsize, bsize, bsize, bsize, bsize, bsize, bsize, bsize, bsize, bsize",0
406,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( src,",0
407,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
408,,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header,0
410,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
411,,0
412,,0
413,,0
414,,0
415,,0
416,<S2SV_ModStart> ) ; return - EINVAL,0
417,<S2SV_ModStart> ) ) ; mutt_socket_empty ( conn ) ;,0
418,,0
419,,0
420,"<S2SV_ModStart>, & rlen, 0",1
421,<S2SV_ModStart> data ) ; <S2SV_ModEnd> return 0 ;,0
422,,0
423,,0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,,0
426,,0
427,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
428,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header,0
430,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
431,,0
432,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
433,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
434,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
435,,0
436,,0
437,,0
438,,0
439,<S2SV_ModStart> ) { memcpy <S2SV_ModEnd> ( src ->,0
440,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int cpi -> common ; MACROBLOCKD * const xd = & cpi -> common ; MACROBLOCKD * const xd = & cpi -> common ; MACROBLOCKD * const xd = & cpi -> common ; MACROBLOCKD * const xd = & cpi -> mb ; MACROBLOCKD * const xd = & cpi -> mb ; MACROBLOCKD * const xd = & cpi -> mb ; MACROBLOCKD * const xd = & xd -> mi_row, xd -> mi_row, xd -> mi_row, xd -> mi_row, xd ) ; <S2SV_ModStart> = xd ; memset <S2SV_ModEnd> ( xd <S2SV_ModStart> ; vp9_row, xd <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ; memset <S2SV_ModEnd> ( xd <S2SV_ModEnd> ( xd ->",0
441,"<S2SV_ModStart> ( ndo, ""%s"" <S2SV_ModEnd> ) ) ;",0
442,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
443,"<S2SV_ModStart> ( decoder -> codec_interface <S2SV_ModEnd> ( ),",0
444,<S2SV_ModStart> skb ) ; <S2SV_ModEnd> if ( skb,0
445,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
446,"<S2SV_ModStart> int flags, TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1, 0 )",0
447,,0
448,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
449,,0
450,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( screen,0
451,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
452,<S2SV_ModStart> return - EINVAL <S2SV_ModEnd> ; if (,0
453,,0
454,<S2SV_ModStart> int ret = - EINVAL,0
455,,0
456,,0
457,"<S2SV_ModStart> ; if ( ip_options_rcu <S2SV_ModEnd> ( skb,",0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,,0
460,,0
461,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
462,,0
463,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
464,,0
465,"<S2SV_ModStart>, int ret <S2SV_ModEnd> ; if (",0
466,,0
467,,0
468,,0
469,,0
470,,0
471,<S2SV_ModStart> ( s ) <S2SV_null> <S2SV_null>,0
472,,0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,,0
475,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
476,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
477,<S2SV_ModStart> sock ) ; <S2SV_ModEnd> return ret ;,0
478,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
479,,0
480,<S2SV_ModStart> ; ps_dec ->,0
481,<S2SV_ModStart> return - EINVAL <S2SV_ModEnd> ; if (,0
482,,0
483,,0
484,"<S2SV_ModStart>, buf, buf_size <S2SV_ModEnd> ) ; if",0
485,,0
486,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
487,,0
488,,0
489,,0
490,,0
491,,0
492,<S2SV_ModStart> ) ; } spin_lock_lock ( sk ) ;,0
493,<S2SV_ModStart> y3 ) { sprintf ( outputbuffer ) ;,0
494,,0
495,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
496,<S2SV_ModStart> goto out ; } <S2SV_ModEnd> if (!,0
497,"<S2SV_ModStart>, int ret <S2SV_ModEnd> ; if (",0
498,,0
499,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
500,,0
501,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
503,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
504,"<S2SV_ModStart> ) ; memset <S2SV_ModEnd> ( cpi,",0
505,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
507,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
508,,0
509,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
510,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
511,,0
512,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( inode,0
513,,0
514,,0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context ->,0
516,,0
517,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( x ->,0
518,,0
519,,0
520,,0
521,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
522,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY (,0
523,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
524,,0
525,,0
526,,0
527,,0
528,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
529,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
530,,0
531,,0
532,,0
533,,0
534,,0
535,,0
536,,0
537,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
538,,0
539,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
540,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
541,,0
542,,0
543,<S2SV_ModStart> event ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
544,,0
545,,0
546,,0
547,,0
548,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
549,,0
550,,0
551,,0
552,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
553,,0
554,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_frame_frame ( VP9_COMMON * cpi, VP9_FRAME ) { VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * cm = cpi -> sf ; const VP9_COMMON * cpi -> sf = cpi -> sf ; if ( cpi -> oxcf. segment_mode == VPX_FRAME ) { VPX_FRAME = cpi -> sf_FRAME ; cpi -> sf = cpi -> sf -> sf -> sf -> sf -> sf_skip_skip_skip_skip_skip_skip_frame ; cpi -> sf_frame = cpi -> sf -> sf -> sf_skip_skip_skip_skip_frame ; sf -> sf",0
555,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY (,0
556,,0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
559,,0
560,"<S2SV_ModStart> ) ; } memset <S2SV_ModEnd> ( cm,",0
561,,0
562,,1
563,,0
564,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
565,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
566,<S2SV_ModStart> * s ; size_t <S2SV_ModEnd> len = len,0
567,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
568,,0
569,,0
570,"<S2SV_ModStart> * r, vpx_reader <S2SV_ModEnd> * r )",0
571,,0
572,,0
573,,0
574,,0
575,,0
576,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
577,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( msg,0
578,,0
579,,0
580,,0
581,,0
582,,0
583,"<S2SV_ModStart> NULL, NULL <S2SV_ModEnd> ) ; }",0
584,,0
585,<S2SV_ModStart> env ) { <S2SV_ModEnd> const char *,0
586,"<S2SV_ModStart> cm ) { memset <S2SV_ModEnd> ( cm,",0
587,,0
588,"<S2SV_ModStart>, - 1,",0
589,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
590,,0
591,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj,",0
592,"<S2SV_ModStart> void vpx_writer <S2SV_ModEnd> * w,",0
593,<S2SV_ModStart> goto out ; if (! err ) return - EINVAL ;,0
594,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
595,,0
596,,0
597,,0
598,<S2SV_ModStart> ) ) { return NULL ; },0
599,<S2SV_ModStart> ) ; struct ip_options_rcu <S2SV_ModEnd> * opt =,0
600,,0
601,,0
602,"<S2SV_ModStart>, & len, 0",1
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
604,,0
605,,0
606,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static VP9_COMMON * const VP9_COMMON * const xd, MACROBLOCKD * const xd, MACROBLOCKD * const xd, MACROBLOCKD * const xd, MACROBLOCKD * const xd, xd, xd, xd, xd -> mi_row, xd, xd, xd, xd, xd -> plane [ 0 ]. mbmi_cols [ 0 ]. mbmi_col ]. mbmi_col ]. mbmi_col ] ; const xd = cpi -> mbmi_cols [ cpi -> mbmi ]. mbmi_col ]. mbmi_cols = cpi -> mbmi_cols [ cpi -> mbmi_col ]. mbmi_cols [ cpi -> mbmi ]. mbmi_ext, cpi -> mb_type ]. mbmi_ext, cpi -> mb_ext, cpi, cpi, cpi, cpi,",0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header,0
608,,0
609,,0
610,,0
611,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
612,<S2SV_ModStart> return - EINVAL <S2SV_ModEnd> ; if (,0
613,<S2SV_ModStart> w ) { sprintf ( outputf <S2SV_ModEnd> ) ; },0
614,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
615,,0
616,"<S2SV_ModStart> cpi ] ; memset <S2SV_ModEnd> ( cpi,",0
617,,0
618,,0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
621,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
622,,0
623,"<S2SV_ModStart>, 1,",0
624,,0
625,,0
626,,0
627,,0
628,,0
629,,0
630,,0
631,"<S2SV_ModStart> q ) { memset <S2SV_ModEnd> ( q, <S2SV_ModStart> q ) ; memset <S2SV_ModEnd> ( q, <S2SV_ModStart> q ) ; memset <S2SV_ModEnd> ( q,",0
632,,0
633,,0
634,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> int ),0
635,,0
636,,0
637,"<S2SV_ModStart>, 0 ) ; if ( ret == 0 ) return - EINVAL ;",0
638,<S2SV_ModStart> SV_null> <S2SV_null> static,0
639,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
640,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi ->,0
641,<S2SV_ModStart> ) ) ; ND_TCHECK ( * ) ;,0
642,,0
643,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
644,,0
645,,0
646,"<S2SV_ModStart> void vpx_reader <S2SV_ModEnd> ( r,",0
647,,0
648,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r,",0
649,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> v_null> <S2SV_null>,0
650,<S2SV_ModStart> ) ; } ND_TCHECK ( * tp ) ;,0
651,,0
652,<S2SV_ModStart> int error ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
653,,0
654,,0
655,,0
656,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
657,,1
658,,0
659,,0
660,,0
661,,0
662,<S2SV_ModStart> cipher ) ; private -> private = NULL ;,0
663,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
664,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> mv_ref_mv_mv_mv_mv_mv_mv_mv_mv_mv_ref_mv_mv_mv_mv_mv ( ref_mv, ref_mv, ref_mv, ref_mv_mv, ref_mv, ref_mv, ref_mv, ref_mv, ref_mv, ref_mv, ref_mv, ref_mv, ref_mv, ref_mv, ref_mv, ref_mv, ref_mv, ref_mv, ref_mv, ref_mv, ref_mv, ref_mv, ref_mv, ref_mv, ref_mv, ref_mv, ref_mv, ref_mv, ref_mv, ref_mv, ref_mv, ref_mv, ref_mv, ref_mv, ref_mv, ref_mv, ref_",0
665,<S2SV_ModStart> ; if (,0
666,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
667,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
668,,0
669,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
670,,0
671,,0
