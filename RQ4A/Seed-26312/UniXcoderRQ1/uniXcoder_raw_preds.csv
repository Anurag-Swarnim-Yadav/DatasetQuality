,raw_predictions,correctly_predicted
0,<S2SV_ModStart> ; if ( n2size < 1 ) <S2SV_ModEnd> { applog (,0
1,"<S2SV_ModStart> case EAP_FRAME_TYPE_PACKET : ND_TCHECK_8BITS ( tptr ) ; <S2SV_ModStart> * ( tptr ) { ND_TCHECK_8BITS ( tptr + 2 <S2SV_ModStart> 2 ) { ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart>, ""unknown"", subtype ), subtype <S2SV_ModEnd> ) ) ; <S2SV_ModStart> len ) { ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> case EAP_TYPE_TTLS : case EAP_TYPE_TLS : ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModEnd> ND_TCHECK_8BITS ( tptr",0
2,<S2SV_ModStart> ; out_mutex : <S2SV_ModEnd> ( &,0
3,<S2SV_ModStart> return - EINVAL ; case,0
4,<S2SV_ModStart> if ( ( skb_hdr <S2SV_ModEnd> ( skb ),0
5,"<S2SV_ModStart>, offset ; if ( avio_feof ( f ) ) { index -> item_count = 0 ; av_freep ( & index -> items ) ; return AVERROR_INVALIDDATA ; }",1
6,<S2SV_ModStart> * tpg ; u16 <S2SV_ModEnd> tpgt ; int <S2SV_ModStart> ; if ( kstrtou16 <S2SV_ModEnd> ( name + <S2SV_ModStart> ) || tpgt >= VHOST_SCSI_MAX_TARGET <S2SV_ModEnd> ) return ERR_PTR,1
7,<S2SV_ModStart> g ) { <S2SV_ModEnd> if ( gf_list,0
8,"<S2SV_ModStart> { u32 data <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return ; kvm_read_guest_cached ( vcpu -> kvm, & <S2SV_ModEnd> vcpu -> arch <S2SV_ModStart>. apic -> vapic_cache, & data, sizeof ( u32 ) <S2SV_ModEnd> ) ; apic_set_tpr",1
9,<S2SV_ModStart> src ) ; __switch_to_tm ( src ) ; tm_recheckpoint_new_task ( src ) ;,1
10,<S2SV_ModStart> item ) { <S2SV_ModEnd> c = c <S2SV_ModStart> -> next ; <S2SV_ModEnd> if ( c,0
11,"<S2SV_ModStart> ( sb, KERN_ERR,",1
12,"<S2SV_ModStart> ipv6_select_ident ( fptr, ( struct rt6_info * ) skb_dst ( skb )",1
13,"<S2SV_ModStart> u64 nr, <S2SV_ModEnd> struct perf_sample_data * <S2SV_ModStart>, nr, <S2SV_ModEnd> data, regs",0
14,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> unsigned char <S2SV_ModStart> ] ) { return 0 ; } <S2SV_ModStart> ] ) ; } <S2SV_ModStart> ] ) { break ; } <S2SV_ModStart> ] ) ; } <S2SV_ModEnd> start = (,0
15,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static tran_low_t <S2SV_ModEnd> fdct1, tran_low_t <S2SV_ModStart> low_t * input, tran_low_t <S2SV_ModEnd> ] ; tran_low_t <S2SV_ModStart> out1 ) { tran_low_t <S2SV_ModEnd> step = ( tran_low_t <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> ] = input [ 8 ] ; tran_low_t <S2SV_ModEnd> ] ; tran_low_t <S2SV_ModStart> 1 ] = ( tran_low_t )",0
16,<S2SV_ModStart> == 0 ) sanitize_dead_code ( env ) ; if ( ret == 0 ),1
17,"<S2SV_ModStart> int i ; if (! config -> sample_rate ) { strcpy ( wpc -> error_message, ""sample <S2SV_blank> rate <S2SV_blank> cannot <S2SV_blank> be <S2SV_blank> zero!"" ) ; return FALSE ; }",1
18,"<S2SV_ModStart> = 0 ; unsigned char sense_buffer [ SCSI_SENSE_BUFFERSIZE ], * senseptr = NULL ; <S2SV_ModStart> cd -> senseptr = NULL ; if ( cgc -> senseptr ) memset ( cgc -> sense, NULL, 0, NULL, 0, 0, NULL ) ;",0
19,"<S2SV_ModStart> ) ) { # ifdef LIBRAW_LIBRARY_FAILURE <S2SV_ModEnd> ( 0,",0
20,<S2SV_ModStart>,0
21,"<S2SV_ModStart> = 0 ; memset ( L, 0, sizeof ( * c ) ) ;",0
22,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> ) vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w,",0
23,<S2SV_ModStart> ) ; return <S2SV_ModEnd> ralg -> seedsize,1
24,<S2SV_ModStart> ; if ( sockaddr_len < sizeof ( struct sockaddr_pppox ) ) return - EINVAL ; if (,1
25,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; else { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> = COAPx ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; },0
26,<S2SV_ModStart> char * fmtname ; int debug <S2SV_ModStart> = 0 ; debug = 0 ; <S2SV_ModStart> break ; case OPT_DEBUG : debug = atoi ( jas_optarg ) ; break ; case <S2SV_ModStart> ; } } } break ; <S2SV_ModStart> ) ) { jas_stream_close ( instream ) ;,0
27,"<S2SV_ModStart> esr ) { uint64_t info ; void __user * pc = ( void __user * ) instruction_regs ( regs ) ; <S2SV_ModStart> esr ) ; memset ( regs, 0, 0, sizeof ( regs ) ) ;",0
28,"<S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ) ; ptr ++ ; length -= 3 ; <S2SV_ModStart> 2 ) ; ptr ++ ; if ( length < <S2SV_ModEnd> 2 ) { <S2SV_ModStart> 2 ) { ND_PRINT ( ( ( ndo, "" <S2SV_blank> AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; length -= 2 ; length -= 3 ; if ( length < 2 ) { ND_PRINT ( ( ( ndo, "" <S2SV_blank> AVP <S2SV_blank> short"" ) ) ) ; return ; } <S2SV_ModStart> ptr ++ ; ptr ++ ; ptr ++ ; length -= 2 <S2SV_ModEnd> ND_PRINT ( ( ( <S2SV_ModStart> ) ) ; if ( length < 4 ) { ND_PRINT ( ( ( ( ( ndo, "" <S2SV_blank> AVP <S2SV_blank> AVP <S2SV_blank> AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ) ; return ; }",0
29,"<S2SV_ModStart> intf ) { struct usb_host_interface * <S2SV_ModEnd> alt ; alt <S2SV_ModStart> ; if (! alt ) return - ENODEV <S2SV_ModEnd> ; return usb_set_interface <S2SV_ModStart> ( udev, alt -> <S2SV_ModEnd> desc. bInterfaceNumber <S2SV_ModStart> bInterfaceNumber, alt -> desc. bAlternateSetting",1
30,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> udf_pc_to_char ( struct <S2SV_ModStart> char * elen <S2SV_ModEnd>, int tolen <S2SV_ModStart> = 0 ; tolen -= 2 ; <S2SV_ModStart> case 3 : if ( tolen == 0 ) return - ENAMETOOLONG ; tolen -= 2 ; <S2SV_ModStart> case 3 : if ( tolen < 2 ) return - ENAMETOOLONG ; tolen -= comp_len ; <S2SV_ModStart> = '/' ; tolen -= 2 ; tolen -= 2 ; <S2SV_ModStart> case 3 : if ( tolen < 2 ) return - ENAMETOOLONG ; tolen -= comp_len ; <S2SV_ModStart> case 3 ; tolen -= comp_len ; tolen -= comp_len ; tolen -= comp_len ; <S2SV_ModStart> case 3 ; tolen -= comp_len ; tolen -= comp_len ; tolen -= comp_len ; <S2SV_ModStart> = '/' ; tolen -= comp_len ; tolen -= comp_len ; <S2SV_ModStart> p <S2SV_ModEnd> ; break ;",0
31,<S2SV_ModStart> == - 1 || class == NULL,0
32,<S2SV_ModStart> unsigned long flags ; if ( qid > NVMET_NR_QUEUES ) return NULL,1
33,<S2SV_ModStart> -> b,0
34,<S2SV_ModStart> < 1 || vstart + vdaux < vstart <S2SV_ModEnd> ) { sdb_free,1
35,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct <S2SV_ModStart> ; if ( dest_dest_keyring ) { ret = key_get ( dest_keyring ) ; <S2SV_ModStart> dest_keyring ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
36,<S2SV_ModStart> = create_spnego_ctx ( 0,0
37,"<S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_l2tpip <S2SV_ModEnd> ) ) return <S2SV_ModStart> ; if ( addr -> l2tp_family!= AF_INET <S2SV_ModEnd> ) return - <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> ret = - <S2SV_ModStart> ( sk ) ; if (! sock_flag ( sk, SOCK_ZAPPED ) ) goto out",1
38,<S2SV_ModStart>,0
39,<S2SV_ModStart>,0
40,<S2SV_ModStart> int len ; if ( len < 0 ) return - 1 ;,0
41,<S2SV_ModStart> length ) ; if ( strlen ( password ),0
42,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0x51 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> 0x51 <S2SV_blank> transfer <S2SV_blank> failed."" ) ; mutex_unlock ( & d -> data_mutex ) ; adap <S2SV_ModEnd> -> fe_adap [ <S2SV_ModStart> ; if ( adap <S2SV_ModEnd> -> fe_adap ) <S2SV_null> <S2SV_null>",0
43,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
44,,0
45,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horAcc8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
46,"<S2SV_ModStart> tsample_t s ; uint16 bps = 0 ; ( void ) TIFFGetField ( in, TIFFTAG_BITSPERSAMPLE, & bps ) ; if ( bps!= 8 ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> can <S2SV_blank> only <S2SV_blank> handle <S2SV_blank> BitsPerSample=8 <S2SV_blank> in <S2SV_blank> %s"", ""cpContig2SeparateByRow"" ) ; return 0 ; }",1
47,"<S2SV_ModStart> ) ; struct hugepage_subpool * spool = ( struct hugepage_subpool <S2SV_ModEnd> * ) page_private <S2SV_ModStart> hugetlb_lock ) ; hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, 1 )",1
48,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) { return AVERROR_EOF ; } if (,1
49,<S2SV_ModStart> goto not_found ; if ( e - p > HOST_NAME_MAX - 1 ) goto not_found ;,0
50,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> bool <S2SV_ModEnd> generic_pipe_buf_get ( struct <S2SV_ModStart> buf ) { return try_get_page <S2SV_ModEnd> ( buf ->,1
51,"<S2SV_ModStart>, cp, ep2, map, nmap ) ; } else cp = ikev1_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) goto trunc ; } if <S2SV_ModStart> < ep2 ) <S2SV_ModEnd> ND_PRINT ( (",1
52,<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode ) <S2SV_ModStart> ) return - EPERM <S2SV_ModEnd> ; if (,0
53,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart> & read_fd, NULL )",0
54,<S2SV_ModStart> config -> pm_max_requests ; fpm_globals. listening_socket = dup ( wp -> listening_socket ),1
55,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int prev_stats ( const FIRSTPASS_STATS * twopass, const FIRSTPASS_stats * twopass, const FIRSTPASS_STATS * twopass, const TWO_PASS <S2SV_ModEnd> * twopass <S2SV_ModStart> two_stats ) { const FIRSTPASS_STATS * const TWO_PASS_PASS_STATS * const <S2SV_ModEnd> * twopass, <S2SV_ModStart> -> pcnt ) { const TWO_PASS_PASS_STATS * tmp_stats = 0 ; <S2SV_ModStart> tmp ) { const FIRSTPASS_stats = 0 ; <S2SV_ModEnd> } } <S2SV_null> <S2SV_null>",0
56,<S2SV_ModStart> 0 ; } err = handle -> h_err ; <S2SV_ModStart> h_transaction ) { rc <S2SV_ModEnd> = jbd2_journal_stop ( <S2SV_ModStart> ) ; return err? err : rc <S2SV_ModEnd> ; } sb <S2SV_ModStart> t_journal -> j_private <S2SV_ModEnd> ; rc =,1
57,<S2SV_ModStart> ; if ( io -> i_size > 0 ) return ret ; if (,0
58,<S2SV_ModStart> valuelen ) ; args -> rmtvaluelen = args -> valuelen ;,1
59,<S2SV_ModStart> ) ) { <S2SV_ModEnd> if (!,0
60,"<S2SV_ModStart> 2 ) { ND_TCHECK2 ( * tptr, 2 ) ; <S2SV_ModStart> len - 2 ; if ( len < stlv_len ) goto trunc ; ND_TCHECK2 ( * ( tptr ), stlv_len ) <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ; stlv_len = stlv_len - ISIS_SUBTLV_SPB_INSTANCE_MIN_MIN_LEN ; stlv_len = stlv_len",0
61,"<S2SV_ModStart> s, body_size, <S2SV_ModEnd> ) { return",0
62,"<S2SV_ModStart> flags ) ; memset ( & ddi, 0, sizeof ( ddi ) ) ;",1
63,<S2SV_ModStart> == 12 && ( <S2SV_ModStart> flags & TH_SYN ),1
64,"<S2SV_ModStart> -> ipc_socket ; int procfd = payload -> procfd ; <S2SV_ModStart> & LXC_ATTACH_LSM ) && initfd = payload -> lsm_label <S2SV_ModStart> int on_exec ; <S2SV_ModEnd> on_exec ; <S2SV_ModStart> : 0 ; if ( lsm_set_at ( procfd, on_exec, <S2SV_ModEnd> init_ctx -> lsm_label <S2SV_ModStart> init_label ) <S2SV_ModEnd> < 0 ) <S2SV_ModStart> } } close ( procfd ) ; <S2SV_ModStart> } } close ( procfd ) ;",0
65,<S2SV_ModStart>,0
66,"<S2SV_ModStart> ( header -> biBitCount == 0 ) { fprintf ( stderr, ""Error, <S2SV_blank> invalid <S2SV_blank> biBitCount <S2SV_blank> %d\\n"", 0 ) ; return OPJ_FALSE ; } if ( header ->",1
67,<S2SV_ModStart> NULL ; } sas_probe_devices ( port ) ;,1
68,<S2SV_ModStart> 0 ) { if ( image -> colors < tga_info. colormap_index ) image -> colors = tga_info. colormap_index ;,1
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,"<S2SV_ModStart> ENOBUFS ; } memset ( & line, 0, sizeof ( line ) ) ;",1
71,"<S2SV_ModStart> arg ) { int ret ; ret = scsi_verify_blk_ioctl ( bd, cmd ) ; if ( ret < 0 ) return ret ;",1
72,<S2SV_ModStart> <S2SV_null> <,0
73,<S2SV_ModStart> * ureq ; unsigned,0
74,"<S2SV_ModStart> int m ; if ( n < 0 ) { jas_deprecated ( ""negative <S2SV_blank> count <S2SV_blank> for <S2SV_blank> jas_stream_pad"" ) ; }",1
75,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ) ) ; },0
76,<S2SV_ModStart> av_log ( mxf -> fc,1
77,"<S2SV_ModStart> mntent, rootfs -> mount",0
78,<S2SV_ModStart> + 10 ; if ( psf -> fileoffset < psf -> filelength ) { <S2SV_ModStart> ; } ; } ;,1
79,<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( p + l2info -> cookie_len ) ;,1
80,<S2SV_ModStart> NF_STOLEN ; return err == 0? NF_ACCEPT : NF_DROP <S2SV_ModEnd> ; } <S2SV_null>,1
81,"<S2SV_ModStart> * up ; int klen, ulen ; <S2SV_ModStart> rta ) ; klen = <S2SV_ModEnd> xfrm_replay_state_esn_len ( up <S2SV_ModStart> ( up ) ; ulen = nla_len ( rta ) >= klen? klen : sizeof ( * up ) ; p = <S2SV_ModEnd> xfrm_replay_replay_esn_len <S2SV_ModStart> ( up ) ; memcpy ( p, ulen ) ; memcpy ( p, ulen ) ; memcpy ( pp, ulen ) ; memcpy ( p, ulen ) ;",0
82,"<S2SV_ModStart> io, mem <S2SV_ModEnd> ) ; }",0
83,<S2SV_ModStart> ( size_t ) <S2SV_ModEnd> break ;,0
84,<S2SV_ModStart> ) ; return btstr <S2SV_ModEnd> ; } <S2SV_null>,0
85,"<S2SV_ModStart> ( buf = jas_alloc3 ( bufsize, numcols <S2SV_ModEnd>, sizeof (",1
86,<S2SV_ModStart> ; int res ;,0
87,"<S2SV_ModStart> size ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""GSO <S2SV_blank> size <S2SV_blank> zero.\\n"" ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> gso ) ; netbk_fatal_tx_err ( vif",0
88,"<S2SV_ModStart> * object, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void * <S2SV_ModStart> < 0 ) <S2SV_ModEnd> bitmap_pos = ext_index_add_object <S2SV_ModStart> name ) ; <S2SV_ModEnd> bitmap_set ( base",1
89,"<S2SV_ModStart> xfr_cmd, fname <S2SV_ModEnd> ) ; free",1
90,<S2SV_ModStart> mixer ) { snd_usb_mixer_disconnect ( mixer ) ;,1
91,<S2SV_ModStart> ) { struct packet_rollover * rollover = NULL ; struct <S2SV_ModStart> EINVAL ; } mutex_lock ( & fanout_mutex ) ; err = - EINVAL ; <S2SV_ModStart> -> running ) goto out <S2SV_ModEnd> ; atomic_long_set ( <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> rollover <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> rollover <S2SV_ModStart> atomic_long_long_set ( & <S2SV_ModEnd> rollover -> rollover <S2SV_ModStart> atomic_long_long_set ( & <S2SV_ModEnd> rollover -> rollover <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> rollover <S2SV_ModStart> atomic_long_long_set ( & <S2SV_ModEnd> rollover -> num_failed <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> rollover <S2SV_ModStart> ) ; } mutex_lock,0
92,<S2SV_ModStart> ( newnp -> inet_sk <S2SV_ModEnd> ) ; newsk,0
93,<S2SV_ModStart> ) ) ; kfree ( table ) ;,0
94,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
95,<S2SV_ModStart> ; if ( ret > 0 &&,0
96,"<S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd>, buffer",0
97,<S2SV_ModStart> o ) ; if (! value ) goto failed ; Py_RETURN_NONE <S2SV_ModEnd> ; } value =,0
98,"<S2SV_ModStart> } if (! page_name_string_value <S2SV_ModEnd> ( req, <S2SV_ModStart> if ( page_name ) ) { <S2SV_ModEnd> ( req, <S2SV_ModStart> 1 ) { <S2SV_ModEnd> return ; }",0
99,<S2SV_ModStart> ; if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) <S2SV_ModEnd> ) { ret,0
100,<S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ;,1
101,"<S2SV_ModStart> if (! caller_may_see_dir ( fc -> pid, controller, cgroup ) ) { ret = - ENOENT ; goto out ; } if (!",1
102,"<S2SV_ModStart> int flags ; memcpy <S2SV_ModEnd> ( void ) <S2SV_ModStart> int ) ; memcpy <S2SV_ModEnd> ( source -> <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( source, <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( source,",0
103,<S2SV_ModStart> ) ) { ptr -> ptr [ 0 ] = 0 ;,0
104,"<S2SV_ModStart> : if (! cap_issubset ( new -> cap_permitted, old -> cap_permitted ) ) bprm -> per_clear |= PER_CLEAR_ON_SETID ; if (",1
105,"<S2SV_ModStart> int error ; <S2SV_ModEnd> struct mb2_cache_entry * <S2SV_ModStart> int error ; struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache_cache_insert ( <S2SV_ModStart> h_cache, hash ) ; <S2SV_ModEnd> int error <S2SV_ModStart> error ) ; <S2SV_ModEnd> error = mb2_cache_insert ( bh <S2SV_ModStart> bh ) ; <S2SV_ModEnd> return ;",0
106,<S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> } else,0
107,<S2SV_ModStart> tf = ( <S2SV_ModEnd> luaY_parser ) (,1
108,<S2SV_ModStart> ; int err ; if ( protocol < 0 || protocol >= IPPROTO_MAX ) return - EINVAL,1
109,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> opt.",1
110,"<S2SV_ModStart> ; dl = kzalloc <S2SV_ModEnd> ( size,",1
111,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static u_rtr_rtr_rtr_pdu_print ( u_int <S2SV_ModEnd> * tptr, <S2SV_ModStart> * msg ; ND_TCHECK2 ( * tptr ) ; if ( * tptr == 0 ) { ND_TCHECK2 ( * tptr ) ; goto trunc ; } ND_TCHECK2 ( * tptr, len ) ; <S2SV_ModStart> * msg ; if ( len < sizeof ( rpki_rtr_rtr_pdu ) || pdu_len < sizeof ( rpki_rtr_rtr_pdu ) ) { ND_PRINT ( ( ( ndo, "")"" ) ) ; return FALSE ; } ND_TCHECK2 ( ( rpki_rtr_rtr_rtr_pdu, sizeof ( rpki_rtr_rtr_pdu ) ) ; <S2SV_ModStart> pdu ) ; if ( pdu_len < sizeof ( rpki_rtr_rtr_pdu ) || pdu_len < sizeof ( rpki_rtr_pdu ) ) goto invalid <S2SV_ModStart> case RPKI_PDU : if ( pdu_len!= sizeof ( rpki_rtr",0
113,<S2SV_ModStart> ; int n <S2SV_ModEnd> ; skb -> <S2SV_ModStart> rose_facilities_struct ) ) <S2SV_ModEnd> ; if (,0
114,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr,1
115,<S2SV_ModStart> = - 1 <S2SV_ModEnd> ; if (,0
116,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & acl <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; } ret",0
117,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; int ret <S2SV_ModStart> ) ; } o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> cl_nodes_lock ) ; o2nm_unlock_subsystem ( ) ;,1
118,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; break",1
119,"<S2SV_ModStart> == '/' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> is <S2SV_blank> absolute"" ) ; return ( ARCHIVE_FAILED ) ; } separator = * src ++ ; } <S2SV_ModEnd> for ( ;",1
120,"<S2SV_ModStart> TPM_RC tpm_ md, TPM_DIGEST <S2SV_ModEnd> tpm2bAlg ) { <S2SV_ModStart> ; TPM_RC md = TPM_RC_MD_DIGEST <S2SV_ModEnd> ( hashAlg, <S2SV_ModStart> ) ) { TPM_RC_RC_SUCCESS <S2SV_ModStart> = 1 ; if (! md ) { TPM_RC_ERR ( ""HMAC <S2SV_blank> not <S2SV_blank> %s"", key -> size ) ; return TPM_RC_RC_DIGEST ; } md = HMAC_HASH ; int rc = HMAC_CTX_CTX_init ( & ctx, key -> size, key -> size, key -> size ) ; if (! rc ) { LOG_ERR ( ""HMAC <S2SV_blank> Init <S2SV_blank> failed: <S2SV_blank> %s"", key -> size, TPM_DIGEST ) ; return TPM2B_DIGEST ; } TPM2B_DIGEST <S2SV_ModEnd> ; } <",0
121,<S2SV_ModStart> inmem ) { jas_safe_t <S2SV_ModEnd> inmem ; <S2SV_ModStart> 0 ) && size < 0? 0 ;,0
122,<S2SV_ModStart> s ) { if ( s == 0 ) return ( ( void * ) NULL ) ;,1
123,<S2SV_ModStart> ; if ( WARN_ON_ONCE (! ib_safe_file_access ( fp ) ) ) return - EACCES ; if (,1
124,"<S2SV_ModStart> ""MemoryAllocationFailed"" ) ; ( void ) ResetMagickMemory ( BImgBuff, 0, ldblk * sizeof ( double ) ) ;",1
125,<S2SV_ModStart> ( peer ) peer = maybe_get_net <S2SV_ModEnd> ( peer ),1
126,<S2SV_ModStart> } while ( ( i < ( int ) header_buf_used ),0
127,<S2SV_ModStart> m_family ) ; if ( proto == LLDP_MGMT_ADDR_NONE ) continue <S2SV_ModEnd> ; if (,1
128,<S2SV_ModStart> ( datalen + 1 <S2SV_ModEnd> ) return,0
129,<S2SV_ModStart> default_auto_asconf ) { spin_lock ( & sock_net ( sk ) -> sctp. addr_wq_lock ) ; <S2SV_ModStart> do_auto_asconf = 1 ; spin_unlock ( & sock_net ( sk ) -> sctp. addr_wq_lock ) <S2SV_ModStart> ; } else { <S2SV_ModStart> = 0 ; },1
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> read_profile ( MpegEnc <S2SV_ModStart> ( Mpeg ) { if ( avctx -> profile == 1 ) { return AVERROR ( MpegEncContext <S2SV_ModEnd> ( gb ) <S2SV_ModStart> ) ; } else if ( <S2SV_ModEnd> ( s -> <S2SV_ModStart> ) ) { return AVERROR_INVALIDDATA ; },0
131,"<S2SV_ModStart> int val ; size_t ppu = 0 ; <S2SV_ModStart> 0 ) ; if ( mpu -> enabled_w > JQS_MIN_BUF_BUFF_BUFF_BUFF_BUFF ( <S2SV_ModEnd>, flags ) <S2SV_ModStart> ) ) ; if ( mpu [ JQS_w > JQS ( mpu -> enabled ) ) continue ;",0
132,<S2SV_ModStart> rule ) ; if (! entry -> lsm [ lsm_rule ]. rule ) return - EINVAL ;,1
133,<S2SV_ModStart> file ) ; <S2SV_ModEnd> file_free ( file,1
134,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
135,"<S2SV_ModStart> ""\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
136,"<S2SV_ModStart> * reqp, int size_t req_len <S2SV_ModEnd> ) { int <S2SV_ModStart> - EINVAL ; size_t req_len ; if (! xdr_len ) return - EPERM ; <S2SV_ModStart> if (! xdr_len ) return - EPERM <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto out_lock <S2SV_ModEnd> ; } <S2SV_null>",0
137,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,1
138,<S2SV_ModStart> ; while ( ( i < to_read ) && <S2SV_ModStart>!= 0 ) <S2SV_ModEnd> ) { i,1
139,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
140,<S2SV_ModStart> [ plane ] && in -> linesize [ plane ],1
141,"<S2SV_ModStart> ( szFileName, pszFileName, <S2SV_ModStart> ) - 5 <S2SV_ModEnd> ) ; }",1
142,"<S2SV_ModStart> { tok = ssplit <S2SV_ModEnd> ( tok,",0
143,"<S2SV_ModStart> if ( q < p ) { DPRINTF ( ( ""Wrapped <S2SV_blank> around <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> %p\\n"", p ) ) ; goto out ; } if ( q",0
144,"<S2SV_ModStart> __be32 new_saddr ; struct ip_options_rcu * inet_opt ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. srr ) daddr = inet_opt -> opt. <S2SV_ModEnd> faddr ; rt",1
145,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
146,"<S2SV_ModStart> return ; } if ( len < sizeof ( struct eigrp_common_header ) ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> %s, <S2SV_blank> length: <S2SV_blank> %u <S2SV_blank> (too <S2SV_blank> short, <S2SV_blank> %u)"", tok2str ( u_int ) sizeof ( struct eigrp_common_header ) ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( tlv_len < sizeof ( struct eigrp_common_header ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short, <S2SV_blank> %u <S2SV_blank> (too <S2SV_blank> short, <S2SV_blank> %u)"", ( u_int ) sizeof ( struct eigrp_tlv_header ) ) ) ; return ; }",0
147,<S2SV_ModStart> * addr ; <S2SV_ModEnd> int size ;,0
148,<S2SV_ModStart> long long res ; long bytes <S2SV_ModEnd> ; long long <S2SV_ModStart> ) ; if (! sBlk. table_start ) return FALSE <S2SV_ModEnd> ; if (,0
149,"<S2SV_ModStart>, '/' ) ; if ( ptr == NULL ) return ( ENOENT ) ; ptr ++ <S2SV_ModEnd> ; rw_exit (",1
150,<S2SV_ModStart> |= EXT4_EXT_MARK_UNINIT2 ; if ( flags & EXT4_GET_BLOCKS_CONVERT ) split_flag |= EXT4_EXT_DATA_VALID2 ;,1
151,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & acl <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; } ret",0
152,<S2SV_ModStart> } else return NULL <S2SV_ModEnd> ; } else,0
153,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ), & final ) ; rcu_read_unlock ( <S2SV_ModEnd> ) ; dst",1
154,"<S2SV_ModStart> = 0.0 ; uint32 nstrips = 0, ntiles = 0 ; uint16 <S2SV_ModEnd> planar = 0 <S2SV_ModStart>! read_buff ) { if ( buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""loadImage"", ""Unable <S2SV_blank> to <S2SV_blank> allocate/reallocate <S2SV_blank> read <S2SV_blank> buffer"" ) ; return ( - 1 ) ; } <S2SV_ModStart> 3 ) ; } <S2SV_ModStart> buffsize ) { if ( buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""loadImage"", ""Unable <S2SV_blank> to <S2SV_blank> allocate/reallocate <S2SV_blank> read <S2SV_blank> buffer"" ) ; return ( - 1 ) ; }",1
155,"<S2SV_ModStart> arg = 0 ; else if ( arg_is_match ( arg, & argj ) ) { arg = 0 ; } else if ( arg_is_match ( arg, & argi ) ) { arg = 0 ; } else if ( arg_is_match ( arg, & argi ) ) { arg = 0 ; } else if ( arg_match ( arg_match ( & arg, & arg, sizeof ( arg ) ) ) { arg_match = ( argj ++ ; } else { argi ++ ; } else <S2SV_ModEnd> arg = * <S2SV_ModStart> arg = arg_match ( arg_count - 1 ; } else <S2SV_ModEnd> arg = * <S2SV_ModStart> arg ; } else { arg_match = 0 ;",0
156,<S2SV_ModStart> options. disable_forwarding ||! use_privsep,1
157,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
158,"<S2SV_ModStart> ) ; } if ( ( ( MagickSizeType ) image -> columns * image -> rows ) > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ;",1
159,"<S2SV_ModStart> errout ; } <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart>. value = ""xxxx"" ; <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart> -> gr_ctx. length = 4 <S2SV_ModEnd> ; gr ->",1
160,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> out ; } ext_size = sizeof ( EXT4_I ( inode ) -> i_data ) ; <S2SV_ModStart> -> i_data, ext_size ) ; memset ( bh -> b_data + ext_size, 0, inode -> s_data + ext_size <S2SV_ModEnd> ) ; neh",0
161,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> # if (! SSL_get_options ( c ) ) { SSL_get_session ( c ) ; SSL_session_session_options ( c -> options, 0 ) ; SSL_LOG_ERROR ; } <S2SV_ModEnd> return 1 ;",0
162,<S2SV_ModStart> ; int ret ; if ( current_chrooted ( ) ) return - EPERM,1
163,<S2SV_ModStart> ] ) goto exit <S2SV_ModEnd> ; if (,0
164,"<S2SV_ModStart> c -> nreslevels <= <S2SV_ModEnd> s -> reduction_factor <S2SV_ModStart> -> reduction_factor ) { av_log ( s -> avctx, AV_LOG_ERROR, ""reduction_factor <S2SV_blank> too <S2SV_blank> large <S2SV_blank> for <S2SV_blank> %d\\n"", c -> nreslevels - 1 ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModEnd> c -> nreslevels 1 ;",0
165,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
166,<S2SV_ModStart> ; bool is_drop_vnet <S2SV_ModEnd> ; bool is_drop_vnet <S2SV_ModStart> = false ; do_vnet = false ; <S2SV_ModStart> < 0 ) { if ( do_vnet <S2SV_ModEnd> ) { if,0
167,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> sctp_auth_asoc_init_active_key ( asoc,1
168,<S2SV_ModStart> return false ; if ( ndp_msg_type_info ( msg_type ) -> addrto_validate ) return ndp_msg_type_info ( msg_type ) -> addrto_validate ( & msg -> addrto ) ; else,1
169,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> lsm_set_label_at ( int lsm_label_label, <S2SV_ModEnd> * lsm_label <S2SV_ModStart> * lsm_label ) return 0 <S2SV_ModEnd> ; const char <S2SV_ModStart> = - 1 <S2SV_ModEnd> ; const char <S2SV_ModStart> == 0 ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( strcmp <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> set <S2SV_blank> profile"" ) ; <S2SV_ModEnd> goto out ; <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> profile"" ) ; <S2SV_ModEnd> goto out ; <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> profile"" ) ; <S2SV_ModEnd> goto out ; <S2SV_ModStart> ( write ( lsm_label, command, command ) <S2SV_ModEnd> ) ; if",0
170,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
171,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
172,<S2SV_ModStart> cpi ) { const VP9EncoderConfig * const twopass = & cpi -> twopass. twopass ; <S2SV_ModStart> = 0 ; if ( cpi -> oxcf. pass == 0 ) { vp9_assert ( cpi -> twopass. pass == KEY_FRAME ) { cpi -> twopass. pass = 0 ; } else { cpi -> twopass. index = MIN ( cpi -> twopass. bits_type ) ; } else { vp9_assert ( cpi -> <S2SV_ModEnd> cpi -> twopass,0
173,"<S2SV_ModStart> } num ++ ; if ( num > MaxAllocSize / ITEMSIZE ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> levels <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", num, ( int ) ( MaxAllocSize / ITEMSIZE ) ) ) )",1
174,"<S2SV_ModStart> header, struct mb2_cache_entry <S2SV_ModEnd> * * pce <S2SV_ModStart> ) ; struct mb2_cache_entry * ce ; struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache = <S2SV_ModStart> header ) ; struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache = <S2SV_ModStart> ( ext4_mb_cache, <S2SV_ModEnd> hash ) ; <S2SV_ModStart> ( ext4_mb_cache, <S2SV_ModEnd> hash ) ;",0
175,"<S2SV_ModStart> { gint64 offset <S2SV_ModEnd> ; char line <S2SV_ModStart> = offset ; return parse_cosine_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart> -> phdr, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart> wth -> frame_buffer, line",1
176,<S2SV_ModStart> = line_end ; <S2SV_ModEnd> error = add_push_report_pkt,1
177,<S2SV_ModStart> if ( left == 0 && extend ) return 0 ; if ( left,1
178,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> unsigned char <S2SV_ModStart> ] ) { return 0 ; } <S2SV_ModStart> ] ) ; } <S2SV_ModStart> ] ) { break ; } <S2SV_ModStart> ] ) ; } <S2SV_ModEnd> start = (,0
179,<S2SV_ModStart> size_t ) ldblk + 1,0
180,"<S2SV_ModStart> - ENOMEM ; * ( ( struct vbg_ioctl_hdr * ) buf ) = hdr ; <S2SV_ModStart> copy_from_user ( buf + sizeof ( hdr ) <S2SV_ModStart> * ) arg + sizeof ( hdr ), hdr. size_in - sizeof ( hdr ) <S2SV_ModEnd> ) ) {",1
181,<S2SV_ModStart> m ; int hstartrow <S2SV_ModEnd> ; if ( <S2SV_ModStart> 1 ) { hstartrow <S2SV_ModEnd> = ( numrows,0
182,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
183,"<S2SV_ModStart> pixel_info ) ; SetImageExtent ( image, image -> rows, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
184,<S2SV_ModStart> DQUOT_LIMITS_ENABLED ) ; if ( sbi -> s_mb_cache ) { ext2_xattr_destroy_cache ( sbi -> s_mb_cache ) ; sbi -> s_mb_cache = NULL ; } <S2SV_ModEnd> if (!,1
185,"<S2SV_ModStart> ) ; } if ( desc. bNumEndpoints < 1 ) { dev_err ( & USB_KERNEL ) ; dev_err ( & interface -> dev, ""Too <S2SV_blank> %d\\n"", interface -> desc. bNumEndpoints ) ; return - EINVAL ; }",0
186,"<S2SV_ModStart> ""setregid"" ) ; <S2SV_ModEnd> char * arg <S2SV_ModStart> 0 ] = ""/bin/sh"" <S2SV_ModEnd> ; arg [",1
187,<S2SV_ModStart> node ) { if ( node -> nd_item. ci_parent ) <S2SV_ModStart> ci_parent ) ; else return NULL ;,1
188,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart> ( state, fmode <S2SV_ModEnd> ) ; write_seqlock <S2SV_ModStart> ( state, fmode <S2SV_ModEnd> ) ; write_sequnlock",0
189,<S2SV_ModStart> ( pb ) ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA,1
190,<S2SV_ModStart> if ( q < p || q,1
191,<S2SV_ModStart> protostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> cryptostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> timingstats ) ; <S2SV_ModEnd> step_callback = &,1
192,<S2SV_ModStart> * dir ; <S2SV_ModEnd> char * dir <S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( fd,0
193,<S2SV_ModStart> prev ) ; n -> mounts += n -> pending_mounts ; n -> pending_mounts = 0 ;,1
194,"<S2SV_ModStart> ; savesegment ( fs, fsindex ) ; savesegment ( gs, gsindex ) ; load_TLS ( next, cpu ) ; savesegment ( <S2SV_ModStart> next -> ds <S2SV_ModEnd> ) ; if",0
195,<S2SV_ModStart> dd ) ; <S2SV_ModEnd> } } <S2SV_null>,1
196,,0
197,<S2SV_ModStart> 1u << DB_VECTOR ) | ( 1u << AC_VECTOR,1
198,"<S2SV_ModStart> sfsname ) { <S2SV_ModEnd> char temp [ <S2SV_ModStart> 1 ] ; u_int stringlen ; stringlen = len ; if ( stringlen > NFSX_V3FHMAX ) stringlen = NFSX_V3FHMAX ; <S2SV_ModStart>, sfsname, stringlen <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ; temp [ stringlen <S2SV_ModEnd> ] = '\\0'",1
199,"<S2SV_ModStart> unsigned int flags, struct rt6_info * rt <S2SV_ModStart> ( & fhdr, rt",1
200,<S2SV_ModStart> ( res ) goto err_add_port <S2SV_ModEnd> ; res = <S2SV_ModStart> port ) ; err_add_port <S2SV_ModEnd> ( & hsr ->,0
201,<S2SV_ModStart> ; # endif <S2SV_ModEnd> if ( cmd,0
202,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int vp9_init ( MACROBLOCK * xd -> uv_buffer <S2SV_ModEnd>, int <S2SV_ModStart> src -> uv_stride, int stride <S2SV_ModEnd>, const <S2SV_ModStart> src -> v_stride <S2SV_ModEnd> ) { const <S2SV_ModStart> int strides [ i <S2SV_ModEnd> ] = { <S2SV_ModStart> i ] = { # if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModEnd> ( xd ->",0
203,<S2SV_ModStart> p ++ ) return 0,0
204,"<S2SV_ModStart> <S2SV_null> static inline int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> dst ) { return assign_eip_far ( ctxt, dst, ctxt -> mode == X86EMUL_MODE_PROT64 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",1
205,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
206,"<S2SV_ModStart> ; remaining = tvb_reported_length_remaining <S2SV_ModEnd> ( tvb,",1
207,<S2SV_ModStart> ( iter_block ) ; <S2SV_ModEnd> return 0 ;,0
208,<S2SV_ModStart> return rc ; <S2SV_ModEnd> copied = skb,1
209,<S2SV_ModStart> ; if ( str < 2 ) continue ; if (,0
210,<S2SV_ModStart> ; if ( pmc_overflow ( val ) <S2SV_ModEnd> ) write_pmc (,1
211,"<S2SV_ModStart> ( * b + len, * avail - len <S2SV_ModEnd>, nl )",1
212,"<S2SV_ModStart> u_string ) { Py_ssize <S2SV_ModEnd> * o ; <S2SV_ModStart> int i ; size_t len ; <S2SV_ModEnd> char * <S2SV_ModStart> = 1 ; if (! op_end ) return NULL <S2SV_ModStart> NULL ; } else { <S2SV_ModStart> NULL ; } else { type = Py_malloc ( p, 1 ) ; if (! arg_end ) return NULL <S2SV_ModEnd> ; o <S2SV_null>",0
213,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
214,<S2SV_ModStart> string ) { c -> next = c -> next ; <S2SV_ModEnd> if ( c,0
215,"<S2SV_ModStart> == 0 ) mark_key_instantiated ( key, 0 <S2SV_ModEnd> ) ; up_write",1
216,<S2SV_ModStart> <= * len && plen > 0,1
217,<S2SV_ModStart> ; args. rmtvaluelen = valuelen ; args.,1
218,<S2SV_ModStart> ; if ( <S2SV_ModEnd> timeout == NULL <S2SV_ModStart> ; if ( compat_get_timespec <S2SV_ModEnd> ( & ktspec <S2SV_ModStart> > 0 && compat_put_timespec <S2SV_ModEnd> ( & ktspec,1
219,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
220,<S2SV_ModStart> ndev ) ; <S2SV_ModEnd> assert ( skb <S2SV_ModStart> q_num ) ; return <S2SV_ModEnd> hns_nic_nic_hw ( skb <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
221,<S2SV_ModStart> |= MSG_TRUNC ; <S2SV_ModEnd> lock_sock ( sk,1
222,<S2SV_ModStart> } if ( <S2SV_ModEnd> udp_specified && settings,1
223,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
224,<S2SV_ModStart> -> ft_file = NULL,0
225,<S2SV_ModStart> found = 0 <S2SV_ModEnd> ; const char <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( found,1
226,"<S2SV_ModStart> int validate_event ( struct pmu * pmu, <S2SV_ModStart> arm_pmu * armpmu <S2SV_ModEnd> ; struct hw_perf_event <S2SV_ModStart> -> pmu!= pmu ) return 0 ; if ( event -> pmu!= <S2SV_ModStart> return 1 ; armpmu = to_arm_pmu ( event -> pmu ) ;",1
227,"<S2SV_ModStart> bool new_idmap_permitted ( const struct file * file, <S2SV_ModStart>, cap_setid ) && file_ns_capable ( file, ns -> parent, cap_setid )",1
228,<S2SV_ModStart> j ++ ) { if ( a -> type == szMAPI_BINARY ) <S2SV_ModStart> ) ; } },1
229,"<S2SV_ModStart> hx ; u8 * buf <S2SV_ModEnd> ; int ret <S2SV_ModStart> = 0 ; u16 cpu_cs_register = <S2SV_ModEnd> cypress [ type <S2SV_ModStart> ]. cpu_cs_register ; buf = kmalloc ( sizeof ( * hx ), GFP_KERNEL ) ; if (! buf ) return - ENOMEM ; hx = ( struct hexline * ) buf ; buf [ 0 ] = 1 ; if ( usb_cypress_writemem ( udev, cpu_cs_register, buf, 1 <S2SV_ModEnd> )!= 1 <S2SV_ModStart> ; kfree ( buf <S2SV_ModEnd> ) ; return <S2SV_ModStart> 0 ) { buf [ 0 ] = 0 ; if ( <S2SV_ModEnd> usb_cypress_writemem ( udev <S2SV_ModStart> ( udev, cpu_cs_register, buf <S2SV_ModEnd>, 1 ) <S2SV_ModStart> ; kfree ( buf <S2SV_ModEnd> ) ; return",1
230,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val ) ; if ( length < 4 ) { ND_PRINT ( ( ( ndo, ""Seek <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 2 ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 4 ; if ( length < 4 ) { ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ) ; length -= 2 ; val_h = EXTRACT_16BITS ( ptr ) ; length -= 2 ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_h = EXTRACT_16BITS ( ptr ) ; if ( length < 4 ) { ND_PRINT ( ( ( ndo, ""Seek <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } val_l = EXTRACT_16BITS ( ptr ) ; val_h = EXTRACT_16BITS ( ptr ) ; val_h = EXTRACT_16BITS ( ptr ) ; val_h = EXTRACT_16BITS ( ptr ) ; if",0
231,"<S2SV_ModStart> princ ) ; success = data_eq_string ( * realm, <S2SV_ModEnd> handle -> params <S2SV_ModStart> params. realm ) && data_eq_string ( * c1, ""kadmin"" ) &&! data_eq_string ( * c2, ""history"" ) ; <S2SV_ModEnd> fail_princ : if",1
232,<S2SV_ModStart> ; if ( shader_rec_offset < args -> bin_cl_size ||,1
233,<S2SV_ModStart> endif # if HAVE_LZMA_H <S2SV_ModEnd> && HAVE_LIBLZMA if,1
234,<S2SV_ModStart> vma -> vm_file ) ; down_read ( & EXT4_I ( inode ) -> i_mmap_sem <S2SV_ModStart> ; out : up_read ( & EXT4_I ( inode ) -> i_mmap_sem ) ;,1
235,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
236,<S2SV_ModStart> arg ) { char ch = * arg ; switch ( ch <S2SV_ModEnd> ) { case <S2SV_ModStart> ';' : case '=' : case <S2SV_ModStart> b ++ = ch <S2SV_ModEnd> ; break ;,1
237,"<S2SV_ModStart> && nmap ) <S2SV_ModEnd> cp = ikev1_attrmap_print <S2SV_ModStart>, cp, ep2, map, nmap ) ; else cp = ikev1_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) goto trunc ; } if <S2SV_ModStart> < ep2 ) <S2SV_ModEnd> ND_PRINT ( (",1
238,<S2SV_ModStart>,0
239,<S2SV_ModStart> if ( ( skb_mac_header <S2SV_ModEnd> ( skb ) <S2SV_ModStart> skb ) < skb -> head +,1
240,<S2SV_ModStart> ( GIT_GIT_LEN <S2SV_ModEnd> ) ; # endif,0
241,<S2SV_ModStart>. val =!! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ; <S2SV_ModStart>. val =!! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ;,1
242,<S2SV_ModStart> & RCV_SHUTDOWN ) return 0 ; <S2SV_ModEnd> return err ; <S2SV_ModStart> msg_namelen ) ; <S2SV_ModEnd> } skb_free_datagram (,1
243,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
244,<S2SV_ModStart> src -> uv_buffer <S2SV_ModEnd> } =,0
245,"<S2SV_ModStart>, j ; * md_out = NULL ; md = calloc ( 1, sizeof ( <S2SV_ModEnd> * md ) <S2SV_ModStart> goto cleanup ; ret = rfc2253_name <S2SV_ModEnd> ( X509_get_subject_name ( <S2SV_ModStart> cert ), & <S2SV_ModEnd> md -> subject_dn <S2SV_ModStart> md -> issuer_dn ) ; if ( ret ) goto cleanup ; ret = rfc2253_name <S2SV_ModEnd> ( X509_get_subject_name ( <S2SV_ModStart> md ), & <S2SV_ModEnd> md -> issuer_dn <S2SV_ModStart> md -> issuer_dn ) ; if ( ret ) goto cleanup ; <S2SV_ModEnd> ret = crypto_get_sans",0
246,<S2SV_ModStart> (! npages || base_gfn!= old. base_gfn,1
247,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ru,1
248,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
249,"<S2SV_ModStart> * ni ; unsigned int length_left ; u_int j ; ND_TCHECK ( rp -> rip6_cmd <S2SV_ModEnd> ) ; switch <S2SV_ModStart> case RIP6_REQUEST : length_left = length ; if ( length_left < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) - sizeof ( struct netinfo6 ) ) goto trunc ; ND_TCHECK ( rp -> rip6 ) ; ND_TCHECK ( rp -> rip6_nets ) ; <S2SV_ModStart> ni ) ; ND_TCHECK ( rp -> rip6_nets ) ; ND_TCHECK ( rp -> rip6_nets ) ; <S2SV_ModStart> ni ) ; length_left = length_left - sizeof ( * ni ) ; ND_TCHECK ( rp -> rip6 ) ; <S2SV_ModStart> ni ) { ND_PRINT ( ( ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %u]"", j ) ) ; return ; } }",0
250,<S2SV_ModStart> < 0 ) goto error ; <S2SV_ModEnd> goto set ;,1
251,<S2SV_ModStart> 2 ) ; memcpy <S2SV_ModEnd> ( cpi ->,0
252,"<S2SV_ModStart> argc ++ ; retval = bprm_change_interp ( iname, bprm ) ; if ( retval < 0 ) goto _error <S2SV_ModEnd> ; interp_file =",1
253,<S2SV_ModStart> ; int iSrc <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; } } <S2SV_ModEnd> res -> ContribRow <S2SV_ModStart> u ]. Left = iLeft ; res -> ContribRow [ u ]. Right = iRight ; for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ].,1
254,<S2SV_ModStart> user ) ; <S2SV_ModEnd> return - 1,0
255,"<S2SV_ModStart> Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; return ; } if (! COM_CompareExtension ( filename, "".cfg"" ) ) { Com_Printf ( ""Com_WriteConfig_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".cfg\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n""",1
256,<S2SV_ModStart> * buf ; size_t <S2SV_ModEnd> limit ; int,0
257,"<S2SV_ModStart> ( mobj ) { size_t granularity = BIT ( tee_mm_sec_ddr. shift ) ; <S2SV_ModStart>, 0, granularity ) ; } <S2SV_ModEnd> return mobj ;",0
258,<S2SV_ModStart> -> it_overrun += 1LL <S2SV_ModEnd> << i ;,1
259,"<S2SV_ModStart> = NULL ; int n_async <S2SV_ModStart> = 0 ; as_async = is_async ( n, n, n, 1 ) ; if ( TYPE ( TYPE ( CHILD ( n, 1 ) ) == TYPE_COMMENT ) { ast_async <S2SV_ModStart>, CHILD ( n, 1 ), 1 <S2SV_ModEnd> ) ; int <S2SV_ModStart> = 0 ; for ( <S2SV_ModEnd> = 0 ; <S2SV_ModStart> ; for ( <S2SV_ModEnd> ; i <S2SV_null>",0
260,<S2SV_ModStart> src ) ; dst -> curframe [ i ] = NULL ;,0
261,"<S2SV_ModStart> write_mb_mode ( const VP9_COMMON * const VP9_COMMON * const MACROBLOCKD * const xd, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> w ) { <S2SV_ModEnd> const MODE_INFO * * const PREDICTION_INFO * <S2SV_ModStart> mbmi = xd -> mi <S2SV_ModEnd> ; const MODE_INFO * <S2SV_ModStart> mbmi -> mi <S2SV_ModEnd> y = mi",0
262,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; saddr,1
263,"<S2SV_ModStart>, r -> qiov. size <S2SV_ModEnd> ) ; n <S2SV_ModStart> = r -> qiov. size <S2SV_ModEnd> / 512 ; <S2SV_ModStart>, r -> qiov. size <S2SV_ModEnd> ) ; }",1
264,<S2SV_ModStart> if ( cs >= <S2SV_ModEnd> CQSPI_MAX_CHIPSELECT ) {,1
265,"<S2SV_ModStart> { memset ( n, 0, <S2SV_ModStart> ) ) ; return - 1 <S2SV_ModEnd> ; case",0
266,<S2SV_ModStart> ) break ; if ( l > ll ) l = ll ;,1
267,<S2SV_ModStart> out ; } } if ( free < 0 ) { err = - ENOMEM ; goto out ;,1
268,<S2SV_ModStart> < 0 || <S2SV_ModEnd> ND_TTEST ( * <S2SV_ModStart> [ 0 ] ),0
269,<S2SV_ModStart> -> ctx -> sched = 0,0
270,"<S2SV_ModStart> ret ; uint8_t * buffer ; uint8_t value ; buffer = kmalloc ( 1, GFP_KERNEL ) ; if (! buffer ) return - ENOMEM <S2SV_ModEnd> ; dev_dbg ( <S2SV_ModStart>, reg, buffer <S2SV_ModEnd>, 1, <S2SV_ModStart> 1000 ) ; if ( <S2SV_ModEnd> ret >= 0 <S2SV_ModStart> ret >= 0 ) { value = buffer [ 0 ] ; kfree ( buffer ) ; return value ; } else { kfree ( buffer ) ; return <S2SV_ModEnd> ret ; } <S2SV_ModStart> ret ; } }",1
271,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
272,"<S2SV_ModStart> ; } } s -> append_char ( s, 0 ) ; strncpy <S2SV_ModEnd> ( outbuffer,",1
273,,0
274,<S2SV_ModStart> = 0 ; ( i + 3 ) <S2SV_ModEnd> < sec -> <S2SV_ModStart> = 0 ; ( i + 7 ) <S2SV_ModEnd> < sec ->,1
275,<S2SV_ModStart> case ISIS_SUBTLV_EXT_IS_REACH_BW_CONSTRAINTS_OLD : if ( subl == 0 ) break ; <S2SV_ModStart> ++ ) { <S2SV_ModEnd> bw. i,1
276,"<S2SV_ModStart> ), i",0
277,<S2SV_ModStart> ONIG_INFINITE_DISTANCE ) { if ( p - str < reg -> dmax ) { * low = ( UChar * ) str ; if ( low_prev ) * low_prev = reg -> dmax ) ; } else <S2SV_ModStart> low ) ; },0
278,<S2SV_ModStart> void bfq_id ( <S2SV_ModEnd> ) { struct <S2SV_ModStart> mb_queue ) ; <S2SV_ModEnd> if (!,0
279,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
280,"<S2SV_ModStart> ) continue ; if ( vif -> tx. req_cons > XEN_NETIF_TX_SIZE ) { netdev_err ( vif -> dev, XEN_NETIF_tx_err ( vif -> tx. sring -> tx. req_cons, XEN_NETIF_TX_RING_SIZE ) ; continue ; } <S2SV_ModStart> ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> 0 ) ; netbk_fatal_tx_err ( vif <S2SV_ModEnd> ) ; continue <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } ret =",0
281,<S2SV_ModStart> ; # endif <S2SV_ModEnd> if ( cmd,0
282,<S2SV_ModStart> cb -> args <S2SV_ModEnd> ) { struct xfrm_policy_state,0
283,<S2SV_ModStart> conn ) ; if ( <S2SV_ModStart> ( conn )!= 0 ) return,1
284,"<S2SV_ModStart> ) ; struct <S2SV_ModEnd> skb_info * shinfo <S2SV_ModStart> err ) xen_netbk_idx ) xen_netbk_release ( netbk, pending_idx <S2SV_ModEnd>, XEN_NETIF_RSP_ERROR ) <S2SV_ModStart> XEN_NETIF_RSP_ERROR ) ; <S2SV_ModEnd> start = ( <S2SV_ModStart> netbk, pending_idx, pending_idx, pending_idx, XEN_NETIF_RSP_OKAY <S2SV_ModStart> netbk, pending_idx, XEN_OKAY",0
285,,1
286,<S2SV_ModStart> ) NULL ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ),0
287,"<S2SV_ModStart> len < 0 <S2SV_ModEnd> ) { syslog <S2SV_ModStart> 1 ; } if ( addr. nl_pid ) { syslog ( LOG_WARNING, ""Received <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> untrusted <S2SV_blank> pid:%u"", addr. nl_pid ) ; continue ; }",1
288,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
289,<S2SV_ModStart> ipc == NULL && client -> session == NULL,1
290,<S2SV_ModStart>,0
291,"<S2SV_ModStart>, nameptr, lfi, fname, UDF_NAME_LEN <S2SV_ModEnd> ) ; if",1
292,"<S2SV_ModStart> ip_vs_timeout_user t ; memset ( & t, 0, sizeof ( t ) ) ;",1
293,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
294,<S2SV_ModStart> ; ssize_t result ; if ( WARN_ON_ONCE (! ib_safe_file_access ( filp ) ) ) return - EACCES,1
295,"<S2SV_ModStart>, * controller, * next = NULL <S2SV_ModStart> if (! caller_is_in_ancestor ( fc -> pid, controller, path1, & next <S2SV_ModEnd> ) ) { <S2SV_ModStart> ) ) { if ( fpath && strcmp ( next, fpath ) == 0 ) ret = - ENOENT <S2SV_ModEnd> ; goto out <S2SV_ModStart> cgdir ) ; free ( next ) ;",0
296,<S2SV_ModStart> ) ) { put_disk ( disk ) ;,1
297,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
298,"<S2SV_ModStart> { if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( ( image <S2SV_ModStart> { if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( number_pixels,",1
299,<S2SV_ModStart> ) ) ; if ( ret < 0 ) return AVERROR_INVALIDDATA ; if (,0
300,<S2SV_ModStart> ; rinfo = kzalloc <S2SV_ModEnd> ( SZ_SG_REQ_INFO *,1
301,"<S2SV_ModStart> ; # endif install_keyword ( ""umask"", & umask_handler ) ;",1
302,<S2SV_ModStart> ) { int ctx ; ( void ) ctx ;,0
303,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> kfree ( tmpbuf,1
304,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; }",1
305,<S2SV_ModStart> ( box = jp2_create0 ;,0
306,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> size ) {",0
307,"<S2SV_ModStart> ; int copylen = 0 <S2SV_ModStart> goto err ; err = - EMSGSIZE ; if ( unlikely ( count > UIO_MAXIOV ) ) goto err ; <S2SV_ModStart> zerocopy ) { if ( count > MAX_SKB_FRAGS ) { copylen = iov_length ( iv, count - MAX_SKB_FRAGS ) ; if ( copylen < vnet_hdr_len ) copylen = 0 ; else copylen -= vnet_hdr_len ; } if ( copylen < vnet_hdr. hdr_len )",1
308,<S2SV_ModStart> ( struct ipv6hdr <S2SV_ModEnd> ) ; unsigned <S2SV_ModStart> while ( offset <S2SV_ModEnd> <= packet_len ) <S2SV_ModStart> packet_len ) { struct ipv6_opt_hdr * exthdr ; <S2SV_ModStart> offset ; } if ( offset + sizeof ( struct ipv6_opt_hdr ) > packet_len ) return - EINVAL ; exthdr = ( struct ipv6_opt_hdr * ) ( skb_network_header ( skb ) + offset ) ; <S2SV_ModStart> -> nexthdr ; } return - EINVAL <S2SV_ModEnd> ; } <S2SV_null>,1
309,"<S2SV_ModStart> write_ delta, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
310,<S2SV_ModStart> ] ) ; memset <S2SV_ModEnd> ( mvs [,0
311,<S2SV_ModStart> out_free ; } copied = len ; if ( err -> msg_name ) goto out_free ;,0
312,<S2SV_ModStart> } if ( <S2SV_ModEnd> djrcv_dev -> paired_dj_devices,1
313,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
314,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
315,"<S2SV_ModStart> asconf ) { sctp_addip_chunk_t * addip = ( sctp_addip_chunk_len <S2SV_ModEnd> ; sctp_addip <S2SV_ModEnd> ( asconf, <S2SV_ModStart> goto done ; sctp_chunk_len = false <S2SV_ModEnd> ; if <S2SV_ModStart> goto done ; sctp_addip = false <S2SV_ModEnd> ( asconf,",0
316,"<S2SV_ModStart> 101, ( ""jas_realloc(%x, <S2SV_blank> %zu)\\n"" <S2SV_ModEnd>, ptr,",1
317,<S2SV_ModStart> exit ; } m -> msg_namelen = 0 ;,0
318,<S2SV_ModStart> CPU_FTR_TM_COMP ) && hv_enabled <S2SV_ModEnd> ; break ;,1
319,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> pci_msicap ( void,0
320,"<S2SV_ModStart> key_name ), UTF16_HOST_ENDIAN, <S2SV_ModStart> data. value, HV_KVP_EXCHANGE_MAX_SIZE / 2",0
321,<S2SV_ModStart> -> log_file = <S2SV_ModEnd> ; break ;,0
322,<S2SV_ModStart> return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
323,"<S2SV_ModStart> * parg = ( void * ) arg ; long err = - EINVAL ; int err = - EINVAL ; long err = - EINVAL ; if ( _IOC_DIR ( cmd ) < _IOC_DIR ( cmd ) ) { parg = - EINVAL ; } err = - EINVAL ; if ( _IOC_DIR ( cmd ) { uint8_t * ) memset ( parg, 0, n ) ; parg = NULL ; if ( _IOC_DIR ( cmd ) memset ( parg, 0, _IOC_SIZE ( cmd ) ) ; parg = nlmsg_from_user ( cmd ) ; } else { memset ( parg, 0, 0, _IOC_FILE_SIZE ( cmd ) ) ; } else { memset ( parg, parg, 0, _IOC_SIZE ( cmd ) ) ; parg = NULL ; } else { memset ( parg, _IOC_SIZE ( parg, _IOC_SIZE ( cmd ) ) ; } else { memset ( parg, _IOC_SIZE ( cmd ) ) ; } else { memset ( parg, parg, 0, n ) ; } } } } err = copy_user ( parg, _IOC_SIZE (",0
324,<S2SV_ModStart>,0
325,"<S2SV_ModStart> u16 size, const <S2SV_ModStart> data ) { void * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM ; ret = <S2SV_ModEnd> usb_control_msg ( dev <S2SV_ModStart>, 0, buf <S2SV_ModEnd>, size, <S2SV_ModStart> 500 ) ; kfree ( buf ) ; return ret ;",0
326,"<S2SV_ModStart> ) ; } if ( desc. bNumEndpoints < 1 ) { dev_err ( & USB_KERNEL ) ; dev_err ( & interface -> dev, ""Too <S2SV_blank> %d\\n"", interface -> desc. bNumEndpoints ) ; return - EINVAL ; }",0
327,"<S2SV_ModStart> ) { case GTK_RESPONSE_OK : { file = nautilus_file_get_metadata ( parameters -> file ) ; nautilus_file_set_metadata ( parameters -> file, NAUTILUS_METADATA_TRUSTED, NULL, ""yes"" ) ; nautilus_file_unref ( parameters -> file ) ; nautilus_file_file_unref ( parameters -> file ) ; nautilus_file_unref ( parameters -> file ) ; <S2SV_ModEnd> screen = nautilus_file_get_executable ( file",0
328,<S2SV_ModStart> ; if ( urb -> actual_length > 0 &&,1
329,"<S2SV_ModStart> * server, struct smb_vol * vol ) { <S2SV_ModEnd> struct cifsS2SV_null> <S2SV_null> <S2SV_ModStart> cifs_null> <S2SV_null> <S2SV_ModEnd> struct cifsS2SV_null> <S2SV_null>",0
330,<S2SV_ModStart> ; if ( ( cfg -> g_h || ( cfg -> g_h > 1 || ( int ) && ( int ) cfg -> g_w!= VPX_RC_PASS <S2SV_ModEnd> ) || ( <S2SV_ModStart> g_count!= VPX_RC_PASS <S2SV_ModEnd> ) return 1,0
331,"<S2SV_ModStart> =='<S2SV_blank>') { input ++ ; } <S2SV_ModEnd> ptr = strchr <S2SV_ModStart> off ) ) { <S2SV_ModStart> ) ; } } <S2SV_ModStart> ) ) ) { <S2SV_ModStart> ""Unknown <S2SV_blank> filesystem <S2SV_blank> type\\n"" ) ; } <S2SV_ModStart> offset ) ) { <S2SV_ModStart> input ) ; }",1
332,"<S2SV_ModStart> inode ) ; struct hugepage_subpool * spool = subpool_inode ( inode ) ; <S2SV_ModStart> ; if ( hugepage_subpool_get_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> 0 ) { hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg )",1
333,<S2SV_ModStart> key * keyring ; if ( new -> thread_keyring ) return 0,1
334,<S2SV_ModStart> size_r ) { size_t readsize ; <S2SV_ModStart> return - 1 ; size_t total_r = 0,0
335,"<S2SV_ModStart> orig ) ; fptr_orig = io_get_open_fptr ( mrb, orig ) ; <S2SV_ModStart> mrb_io_alloc ( mrb <S2SV_ModEnd> ) ; DATA_TYPE",1
336,<S2SV_ModStart>. cmp = <S2SV_ModEnd> ; if (,0
337,<S2SV_ModStart> = 0 ; vpx_init_mode_index <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ] = 0 ; vpx_free ( & cpi -> mb. sb ) ;,0
338,"<S2SV_ModStart> return res ; res = utee_param_to_param ( utc, <S2SV_ModEnd> param, callee_params <S2SV_ModStart>, callee_params ) ; if ( res!= TEE_SUCCESS ) return res",1
339,"<S2SV_ModStart> int rc ; struct desc_struct old_desc, old_desc ; const struct x86_emulate_ops * ops = ctxt -> ops ; int cpl = ctxt -> cpl ( ctxt ) ; old_eip = ctxt -> get_segment ( ctxt, & old_desc, & old_desc, & old_desc, NULL <S2SV_ModEnd>, VCPU_SREG_CS ) <S2SV_ModStart> ) return X86EMUL_CONTINUE <S2SV_ModEnd> ; rc = <S2SV_ModStart> 2 ] ; if ( rc!= X86EMUL_CONTINUE <S2SV_ModEnd> ( ctxt, <S2SV_ModStart> ) return X86EMUL_CONTINUE <S2SV_ModEnd> ; rc = <S2SV_ModStart> return X86EMUL_CONTINUE ; rc = assign_eip ; if ( rc!= X86EMUL_CONTINUE <S2SV_ModEnd> ( ctxt ->",0
340,<S2SV_ModStart> -> band = av_calloc <S2SV_ModEnd> ( reslevel -> <S2SV_ModStart> -> prec = av_calloc <S2SV_ModEnd> ( reslevel ->,1
341,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
342,<S2SV_ModStart> ( obj ) <S2SV_ModEnd> return 0 ; <S2SV_ModStart> out_error + 1 <S2SV_ModEnd> ) ; if,0
343,<S2SV_ModStart> info -> si_code!= SI_QUEUE ) { WARN_ON_ONCE ( info -> si_code < 0 ) ; <S2SV_ModEnd> return - EPERM <S2SV_ModStart> - EPERM ; },1
344,<S2SV_ModStart> * p_tx0 = ( OPJ_INT32 ) opj_uint_max <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_ty1 = ( OPJ_INT32 ) opj_uint_min <S2SV_ModEnd> ( p_ty1,0
345,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char *,0
346,"<S2SV_ModStart> classes = NULL ; zval * retval <S2SV_ModStart> ; } } retval = var_tmp_var ( & var_hash ) ; <S2SV_ModStart>! php_var_unserialize_ex ( & p <S2SV_ModEnd>, & p <S2SV_ModStart> ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> RETURN_FALSE ; } NULL",0
347,<S2SV_ModStart> goto __err ; tu -> qhead = tu -> qtail = tu -> qused = 0 ;,1
348,<S2SV_ModStart> char * tmp_str ; if (! zfound ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> ++ ; } if (! zfound ) return GF_FALSE ; zfound = GF_FALSE ; <S2SV_ModStart> } if (! zfound ) return GF_FALSE ; zfound = GF_FALSE ; <S2SV_ModStart> i ] ) return GF_FALSE ; zfound = GF_FALSE ; <S2SV_ModStart> ++ ; } if (! zfound ) return GF_ISOM_INVALID_FILE ; zfound = GF_FILE ; <S2SV_ModStart> i ] ) { zfound = GF_FALSE ; break ; } <S2SV_ModEnd> i ++ ;,0
349,<S2SV_ModStart>. get_alg_priv ( ctx ) <S2SV_ModEnd> ; if (,0
350,"<S2SV_ModStart> == 0 ) if ( received_protocol ) { fprintf ( stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; } else <S2SV_ModStart> { uschar * hn ; if ( received_protocol ) { fprintf ( stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; }",1
351,<S2SV_ModStart> info -> si_code!= SI_QUEUE ) { WARN_ON_ONCE ( info -> si_code < 0 ) ; <S2SV_ModEnd> return - EPERM <S2SV_ModStart> - EPERM ; },1
352,"<S2SV_ModStart> -> off = strtoull <S2SV_ModEnd> ( p, <S2SV_ModStart> -> filesize = strtoull <S2SV_ModEnd> ( slash +",1
353,"<S2SV_ModStart> * cr ; size_t <S2SV_ModEnd> maxw, maxh <S2SV_ModStart> maxw = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> maxw = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> maxw = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> max ) * <S2SV_ModEnd> ; upb = <S2SV_ModStart> max ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> goto fails ; offx = img -> x0 & 1U ; <S2SV_ModStart> j ) { sycc_to_rgb ( offx = img -> comps [ 2 ]. w = img -> comps [ 1 ]. w ; <S2SV_ModStart> j ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> j ) ; offx = img -> x0 & 1U ; <S2SV_ModStart> j < max ) { sycc_to_rgb ( offset <S2SV_ModEnd> ) { sycc_rgb <S2SV_ModStart> j = img -> comps <S2SV_ModStart> ( j < maxw <S2SV_ModEnd> ) { sycc_to_rgb <S2SV_ModStart> ( j ) ; <S2SV_ModStart>. w = img -> comps [ 1U ]. w = img -> comps <S2SV_ModEnd> img -> x2 ]. w",0
354,<S2SV_ModStart> * statemode_t fmode <S2SV_ModEnd> ) { int <S2SV_ModStart> { if ( fmode == FMODE_WRITE <S2SV_ModEnd> ) { state <S2SV_ModStart> ( ( fmode & fmode <S2SV_ModEnd> ) ; },0
355,"<S2SV_ModStart> return SSH_ERR_INVALID_ARGUMENT ; ssh_dispatch_set ( ssh, SSH2_MSG_KEXINIT, NULL ) ;",1
356,"<S2SV_ModStart> { assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\\n <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
357,<S2SV_ModStart> read_info ) ; <S2SV_ModEnd> if ( EOFBlob,1
358,"<S2SV_ModStart> char lbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char strbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char strtest [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char strbase [ 512 <S2SV_ModEnd> ] ; if <S2SV_ModStart> ( lbase, ""%511[^\\r\\n]"" <S2SV_ModEnd>, strbase ) <S2SV_ModStart> ( ltest, ""%511[^\\r\\n]"" <S2SV_ModEnd>, strtest ) <S2SV_ModStart> ( ltest!= 511 <S2SV_ModEnd> && ntest!= <S2SV_ModStart> ( ltest!= 511 <S2SV_ModEnd> ) ; if",0
359,<S2SV_ModStart> intf ) { <S2SV_ModEnd> if ( cdc_ncm_select_altsetting <S2SV_ModStart> - ENODEV ; return <S2SV_ModEnd> cdc_ncm_bind_common ( dev <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
360,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> memcpy ( buf,0
361,"<S2SV_ModStart> ], 0 <S2SV_ModEnd> ) ; }",0
362,"<S2SV_ModStart>, e -> elems, e ->",1
363,<S2SV_ModStart> bpp <= CHUNKY && c -> color_size,0
364,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
365,<S2SV_ModStart> q ) { mutex_lock ( & q -> timer_mutex ) ; <S2SV_ModStart> snd_seq_timer_close ( q ) ; mutex_unlock ( & q -> timer_mutex,1
366,"<S2SV_ModStart> int error ; unsigned int bh_blks ; inode_t lblock <S2SV_ModEnd> = offset >> <S2SV_ModStart> = offset >> PAGE_SHIFT ; error = gfs2_map ( ip -> i_blkbits ) ; if ( unlikely ( unlikely ( error ) ) ) return error ; error = gfs2_get_blks ( ip -> i_map ) ; if ( unlikely ( error ) ) goto out ; error <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { unlikely ( error <S2SV_ModEnd>, bh_map.",0
367,<S2SV_ModStart> VIPS_FOREIGN_LOAD_GET_CLASS ( load ) ; if ( load -> error ) return ( NULL <S2SV_ModStart> -> error ) || <S2SV_ModEnd> vips_iscompat ( load,0
368,"<S2SV_ModStart> size_t name = fit_get_name <S2SV_ModEnd> ( fit,",0
369,<S2SV_ModStart> ; if (! retval ) <S2SV_ModEnd> retval = context,1
370,<S2SV_ModStart> ; if ( state -> dev ) return - EINVAL ;,0
371,<S2SV_ModStart> service_name_tlv_length ) ; if (! service_name_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> miux_tlv_length ) ; if (! miux_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> rw_tlv_length ) ; if (! rw_tlv ) { err = - ENOMEM ; goto error_tlv ; },1
372,<S2SV_ModStart> ssh * ssh_state = NULL <S2SV_ModEnd> ( void *,0
373,"<S2SV_ModStart> vpx_codec_alg_priv_t * cfg <S2SV_ModEnd>, int res <S2SV_ModStart>  VPX_CODEC_OK ; } else { res = 1 ; <S2SV_ModStart> ( ctx ) ; <S2SV_ModEnd> if ( ctx",0
374,<S2SV_ModStart> unsigned int ch ; ctype = 0,0
375,"<S2SV_ModStart> value ) ; memcpy <S2SV_ModEnd> ( interface,",0
376,<S2SV_ModStart> if (! sk,0
377,<S2SV_ModStart> len ; } ND_TCHECK_32BITS <S2SV_ModEnd> ( p + <S2SV_ModStart> p + 2 <S2SV_ModEnd> ) ; ND_PRINT,1
378,<S2SV_ModStart> 0 ; } if ( unlikely ( IPCB ( skb ) -> opt. optlen ) ) skb_dst_force ( skb ) ; else,1
379,<S2SV_ModStart> private ) { struct skcipher_tfm * tfm = private ; kfree_tfm ( tfm <S2SV_ModEnd> ) ; },0
380,<S2SV_ModStart> bprm ) { <S2SV_ModEnd> int retval ; <S2SV_ModStart> int retval ; bprm_fill_uid ( bprm ) ; <S2SV_ModEnd> retval = security_bprm_set_creds,1
381,<S2SV_ModStart> if ( headcount >= sizeof ( headcount ),0
382,<S2SV_ModStart> ; dlen -= 3 <S2SV_ModEnd> ; for (,0
383,<S2SV_ModStart> { rq = tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; fn (,1
384,<S2SV_ModStart> ( res ) <S2SV_ModEnd> return res ;,0
385,<S2SV_ModStart> - EOPNOTSUPP ; msg -> msg_namelen = 0 ;,0
386,<S2SV_ModStart> ; if ( skb -> len < sizeof ( struct skb ) ) return 0 ; if (,0
387,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; return",0
388,"<S2SV_ModStart> bp, len ) ; break ; case ETHERTYPE_TEB : ether_print ( ndo, bp, len <S2SV_ModStart> ndo_snapend - bp <S2SV_ModEnd>, NULL,",1
389,"<S2SV_ModStart> ; } } if ( tile_buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> overflow <S2SV_blank> calculating <S2SV_blank> buffer <S2SV_blank> size."" ) ; exit ( - 1 ) ; } <S2SV_ModStart> _TIFFmalloc ( tile_buffsize + 1 )",0
390,<S2SV_ModStart> O_APPEND | O_CREAT | O_NOFOLLOW,1
391,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
392,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart> -> nd_num ) { ret = <S2SV_ModEnd> - EBUSY ; <S2SV_ModStart> - EBUSY ; goto out ; } <S2SV_ModStart> ( ret ) goto out <S2SV_ModEnd> ; } if <S2SV_ModStart> nd_num ; } ret = count ; out : o2nm_unlock_subsystem ( ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>,1
393,<S2SV_ModStart> ( pval [ 0 <S2SV_ModEnd> ] ) ; if,0
394,<S2SV_ModStart> 0x0 ) {,0
395,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
396,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
397,<S2SV_ModStart> return - E_NOTHANDLED ; if ( ninst == 0 ) return - E_INVALID,1
398,<S2SV_ModStart> trunc ) ; ND_TCHECK_16BITS ( & data + 1 ) ;,0
399,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
400,"<S2SV_ModStart> return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> p + offset <S2SV_ModEnd>, tim.",0
401,"<S2SV_ModStart> 1 ) { if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf = opipe",0
402,<S2SV_ModStart> ( ) ; if (! tbuf ) { return NULL ; },1
403,<S2SV_ModStart> int err ; <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) ; if (! ru,0
404,"<S2SV_ModStart> NULL, MS_NT_NO_BIND, root_mode <S2SV_ModEnd>, ""r"", <S2SV_ModStart> NULL, MS_BIND_NT_NOEXEC <S2SV_ModEnd>, ""%s"",",0
405,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } else {,0
406,<S2SV_ModStart> <S2SV_null> <S2SV_,0
407,<S2SV_ModStart> vp9_tree_probs ( void <S2SV_ModEnd> * tree ),0
408,<S2SV_ModStart> stringset == ETH_SS_STATS || stringset == ETH_SS_PRIV_FLAGS,1
409,<S2SV_ModStart> return ( ( ( <S2SV_ModStart> ) / 8 ) * GetPSDPacketSize ( image ),1
410,<S2SV_ModStart> if ( ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> p_handle ) ),0
411,<S2SV_ModStart> bMasterInterface0 ) ; if (! pcu -> ctrl_intf ) return - EINVAL ; <S2SV_ModStart> bSlaveInterface0 ) ; if (! pcu -> data_intf ) return - EINVAL ;,1
412,"<S2SV_ModStart> const char * devname = kstrdup ( & dev_name <S2SV_ModStart> d -> udevname ), GFP_KERNEL ) ; const char * devname = d -> name <S2SV_ModStart> d ) ; kfree ( devname <S2SV_ModEnd> ; kfree ( <S2SV_ModStart> d ) ; kfree ( dev",0
413,"<S2SV_ModStart> pirlvl ) { if ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 || pirlvl -> prcheightexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 ) { return - 1 ; } <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> ) % ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << rpx ) <S2SV_ModStart> ) % ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << rpy )",1
414,<S2SV_ModStart> target_enc ) { return ONIGERR_NOT_SUPPORTED_ENCODING_COMBINATION <S2SV_ModEnd> ; } else,1
415,<S2SV_ModStart> <S2SV_null> <S2SV_null,0
416,"<S2SV_ModStart> u_char * tptr, const u_int length ) { u_int network_addr_type ; u_int <S2SV_ModEnd> hexdump = FALSE <S2SV_ModStart> = FALSE ; if ( length < 1 ) { ND_PRINT ( ( ( ndo, ""\\n\\t <S2SV_blank> Network <S2SV_blank> Address <S2SV_blank> Type <S2SV_blank> Type <S2SV_blank> Type <S2SV_blank> Type <S2SV_blank> "" ) ) ; return hexdump ; } <S2SV_ModStart> case AFNUM_INET : if ( length!= 1 ) { ND_PRINT ( ( ( ndo, ""(invalid <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> length <S2SV_blank> %u)"", length - 1 ) ) ; hexdump = FALSE ; break ; } <S2SV_ModStart> case AFNUM_INET6 : if ( length!= 1!= 1 + 4 ) { ND_PRINT ( ( ( ( ndo, ""(invalid <S2SV_blank> IPv6 <S2SV_blank> IPv6 <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> length <S2SV_blank> %u)"", length - 1 ) ) ; hexdump = TRUE ; break ; }",0
417,"<S2SV_ModStart> ; u64 msr_data, rcx, rdx <S2SV_ModStart> = X86EMUL_MODE_PROT32 ; rcx = reg_read ( ctxt, VCPU_REGS_RDX ) ; rdx = reg_read ( ctxt, VCPU_REGS_RDX ) ; <S2SV_ModStart> = 1 ; if ( is_noncanonical_descriptor ) return X86EMUL_CONTINUE",0
418,<S2SV_ModStart> dev ) ; ssize_t len ; device_lock ( dev ) ; len = <S2SV_ModEnd> sprintf ( buf <S2SV_ModStart> driver_override ) ; device_unlock ( dev ) ; return len ;,1
419,"<S2SV_ModStart> BIO * tmpout ; tmpout = cms_get_bio ( in, flags ) ; if (! tmpout ) { tmpout ; goto err ; } <S2SV_ModEnd> tmpout ; } if",0
420,<S2SV_ModStart> = KRB5_PREAUTH_FAILED ; if ( retval!= 0 ) rs. enc_tkt_reply -> flags |= TKT_PRE_PRE_FAILED ;,0
421,"<S2SV_ModStart> const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> c, vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> c, vpx_prob <S2SV_ModEnd> c )",0
422,"<S2SV_ModStart> = ""/tmp"" ; # ifdef HAVE_MKDTEMP tmp_dir = mkdtemp ( Strnew_m_charp ( tmp_dir, ""/w3m-XXXXXX"", NULL ) -> ptr ) ; if ( tmp_dir == NULL ) tmp_dir = rc_dir ; # endif",1
423,"<S2SV_ModStart> = 0 ; size_t pathlen = 0 ; <S2SV_ModStart> case AF_UNIX : pathlen = sizeof ( <S2SV_ModEnd> ( ( struct <S2SV_ModStart> ) -> sun_path ) ; if ( MAXPATHLEN <= pathlen ) { pathlen = MAXPATHLEN - 1 ; } strncpy ( addr_text, ( ( struct sockaddr_un * ) sock_addr ) -> sun_path, pathlen ) ; addr_text [ pathlen <S2SV_ModEnd> ] = '\\0'",1
424,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
425,"<S2SV_ModStart> ], p <S2SV_ModEnd>, p )",0
426,"<S2SV_ModStart> ) { struct hugepage_subpool * spool = subpool_vma ( vma ) ; struct <S2SV_ModStart> page * page <S2SV_ModEnd> ; long chg <S2SV_ModStart> ) if ( hugepage_subpool_get_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> page ) { hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> unsigned long ) spool <S2SV_ModEnd> ) ; vma_put_pages ( spool",0
427,"<S2SV_ModStart> filegen_string ) ; if ( NULL == filegen ) { msyslog ( LOG_ERR, ""stats <S2SV_blank> %s <S2SV_blank> unrecognized"", filegen_string ) ; continue ; } <S2SV_ModStart> filegen_file ) ; if ( NULL == filegen ) { msyslog ( LOG_ERR, ""filegen <S2SV_blank> category <S2SV_blank> \'%s\' <S2SV_blank> unrecognized"", filegen_file ) ; continue ; }",1
428,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; timer_set_state",1
429,"<S2SV_ModStart> fadst16 ( const tran_low_t * input, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> output ) { tran_low_t * tran_low_t <S2SV_ModEnd> x0 <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> 1 ] ; tran_low_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> 1 ] ; tran_low_low_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> 1 ] ; tran_low_low_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> 2 ] ; tran_low_low_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> 2 ] = input <S2SV_ModStart> 2 ] ; tran_low_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> 2 ] = input <S2SV_ModStart> 2 ] ; tran_low_t <S2SV_ModEnd> x0 ] = input <S2SV_ModStart> 2 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 5 ] = (S )",0
430,<S2SV_ModStart> flags ) ; if ( flags & HAVE_AUDIO_MAX ) > INT_MAX_MAX ),0
431,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
432,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF <S2SV_ModStart> wc ) ; return,1
433,"<S2SV_ModStart> tot_len ) ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
434,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> AVINDEX_KEYFRAME ) ; },1
435,<S2SV_ModStart> ( datalen + 1 <S2SV_ModEnd> ) return,0
436,"<S2SV_ModStart>, * controller, * next = NULL <S2SV_ModStart> out ; } <S2SV_ModEnd> if (! <S2SV_ModStart>, cgroup, & next ) ) { if (! fpath || strcmp ( next, fpath ) == 0 ) ret = - ENOENT ; else ret = - ENOENT <S2SV_ModEnd> if (! <S2SV_ModStart> cgdir ) ; free ( next ) ;",0
437,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flag & CL_UNPRIVILEGED <S2SV_ModStart> & CL_UNPRIVILEGED ) { mnt -> mnt. mnt_flags |= MNT_LOCK_UNPRIVILEGED,0
438,<S2SV_ModStart> rds_loop_transport ; } <S2SV_ModEnd> } conn ->,1
439,<S2SV_ModStart> * rsize >= 112 <S2SV_ModEnd> && rdesc [,1
440,<S2SV_ModStart> if ( ( ( <S2SV_ModStart> ) < bodyLength ) || ( bodyLength < sizeof ( EAPOL_RSN_KEY ) ),1
441,<S2SV_ModStart> ( likely ( serio <S2SV_ModEnd> &&! filtered,1
442,<S2SV_ModStart>! er ) { ND_TCHECK ( <S2SV_ModEnd> dp [ 0,0
443,"<S2SV_ModStart> * newName, int newLen, <S2SV_ModStart> * udfName, int udfLen, <S2SV_ModEnd> uint8_t * fidName <S2SV_ModStart> ( newIndex < newLen <S2SV_ModEnd> ) newName [",0
444,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> get_seg_context ( VP9_COMMON <S2SV_ModStart> MODE_COMMON * cm, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCK_SIZE bsize, MACROBLOCKD * xd <S2SV_ModEnd>, int mi_col, <S2SV_ModStart> BLOCK_SIZE bsize, vpx_segs_get_8x8x ) { <S2SV_ModEnd> ( cpi, <S2SV_ModStart> BLOCK_SIZE hbs, hbs, hbs, x <S2SV_ModEnd>, hbs, <S2SV_ModStart> BLOCK_SIZE bsize, <S2SV_ModEnd>, hbs = <S2SV_ModEnd>, hbs_8x8x8_16 <S2SV_ModEnd>, h",0
445,<S2SV_ModStart> ; if (! c -> requestbuf ) return ; if (,0
446,<S2SV_ModStart> ; if ( <S2SV_ModEnd> & 0 ||,0
447,"<S2SV_ModStart> * s ; const unsigned char * p = sigbuf ; unsigned char * der = NULL ; int derlen = - 1 ; <S2SV_ModStart> s, & p <S2SV_ModEnd>, siglen ) <S2SV_ModStart> == NULL ) goto err ; derlen = i2d_DSA_SIG ( s, & der ) ; if ( derlen!= siglen || memcmp ( sigbuf, der, derlen ) ) <S2SV_ModStart> ; err : if ( derlen > 0 ) { OPENSSL_cleanse ( der, derlen ) ; OPENSSL_free ( der ) ; }",1
448,"<S2SV_ModStart> NULL ) ; if (! _gdImageCtx <S2SV_ModEnd> ( im, <S2SV_ModStart>, out ) ) { <S2SV_ModEnd> rv = gdDPExtractData <S2SV_ModStart> size ) ; } else { rv = NULL ; }",0
449,<S2SV_ModStart> ) ; } if ( bprm -> interp!= bprm -> filename ) kfree ( bprm -> interp ) ;,1
450,<S2SV_ModStart> = 0 ; size_t ret_namelen = 0 ; <S2SV_ModStart> ) ) ; if ( ret > 0 ) { ret = - 1 ; OE_E_E_E_EINVAL ; goto done ; } <S2SV_ModStart> p ) ; if ( ret > ( ssize_t ) { ret = 0 ; } if ( ret > ( ret ) { ret = - 1 ; } else { ret = - 1 ; OE_E_E_E_E_E_EINVAL ; } else { ret = - 1 ; } if ( ret > ( ret ) { ret = - 1 ; } if ( ret > ( ret ) { ret = - 1 ; goto done ; } if ( ret ) { ret = - 1 ; } if ( ret!= ret ) goto done ; } if ( ret ) { ret = - 1 ; } if ( ret > ( ret ) { ret = - 1 ) goto fail ; } else { ret = - 1 ; } if ( ret!= ret ) { ret = - 1 ; } if ( ret >,0
451,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
452,"<S2SV_ModStart> ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, ""Invalid <S2SV_blank> image <S2SV_blank> dimensions"" ) ; goto done ; }",1
453,<S2SV_ModStart> cm ) { memcpy <S2SV_ModEnd> ( pc ->,0
454,"<S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; else if ( ret <= size ) memcpy ( data, buf, ret ) ; kfree ( buf ) ;",0
455,<S2SV_ModStart> expr ) { if (! p -> v. type ) return NULL ;,0
456,<S2SV_ModStart> destroy_list ) ; <S2SV_ModEnd> } } <S2SV_null>,1
457,"<S2SV_ModStart> flags, int64_t <S2SV_ModEnd> flags, int <S2SV_ModStart> flags = 0 ; # if CONFIG_VP9_BUFFER_SIZE <S2SV_ModEnd> ( src, <S2SV_ModStart> flags ) { # else { # else vpx_write_frame_size = 0 ; } # else vpx_write_frame <S2SV_ModEnd> ( src, <S2SV_ModStart> ctx ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> ) break ; } else { # else vpx_write <S2SV_ModEnd> ( src_size",0
458,<S2SV_ModStart> ) ; } fuse_conn_put ( & cc -> fc ) ;,1
459,"<S2SV_ModStart> ( code ) { * status = ""DECODE_PA_S4U_X509_USER"" ; return code ; } <S2SV_ModEnd> code = verify_s4u_x509_user_checksum",1
460,<S2SV_ModStart> uint8_t * s <S2SV_ModEnd> ) { if,0
461,<S2SV_ModStart> cur_pic. field_picture <S2SV_ModEnd> ) return 0,1
462,<S2SV_ModStart> off ) { struct rds_header * sgp = & rm -> data_sg [ sg ] ; int ret = sizeof ( struct rds_header ) + be32_to_cpu ( rm -> m_inc. i_hdr. h_len ) ; <S2SV_ModStart> 0 ) ; ret = size <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>,0
463,<S2SV_ModStart> buf ) ) { return 0 ; } <S2SV_ModEnd> ext_block = (,1
464,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = key_permission,1
465,<S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) ; if ( mh -> ip6m_data16BITS ( & bp [ hlen ] <S2SV_ModEnd> ) ) { <S2SV_ModStart> = IP6M_MINLEN ; ND_TCHECK_16BITS ( & bp [ hlen ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) ; if ( mh -> ip6m_data16BITS ( & bp [ hlen ] <S2SV_ModEnd> ) ) { <S2SV_ModStart> = IP6M_MINLEN ; ND_TCHECK_16BITS ( & bp [ hlen ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> = IP6m_16BITS ( & bp [ hlen ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> = IP6M_MINLEN ; ND_TCHECK_,0
466,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
467,"<S2SV_ModStart> = hmi_data ; uint32_t data_siz ; <S2SV_ModStart> } * note <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( hmi_track_offset [ i ] >= hmi_siz ) { _WM_ERROR ( __FUNCTION__, __FUNCTION__, WM_ERR_NOT_HMI, ""file <S2SV_blank> too <S2SV_blank> short"", 0 ) ; goto _hmi_siz ; } data_siz = hmi_data <S2SV_ModEnd> ; } hmi_siz <S2SV_ModStart> += 4 ; if ( <S2SV_ModStart> += 4 ; hmi_tmp ; hmi_tmp += 4 ; <S2SV_ModStart> += 4 ; hmi_tmp = 4 ; hmi_data <S2SV_ModEnd> += 4 ; <S2SV_ModStart> += 4 ; hmi_tmp ; hmi_track_offset [ i ] += 4 ; <S2SV_ModStart> += 4 ; hmi_tmp = hmi_tmp ; if ( hmi_tmp > hmi_siz ) { _WM_ERROR ( __FUNCTION__, WM_ERROR ( __FUNCTION__, ""file <S2SV_blank> too <S2SV_blank> short"", 0 ) ; goto _hmi_tmp ; } data_siz -= hmi_siz ; <S2SV_ModStart> hmi_tmp ; } data_siz -= hmi_siz <S2SV_ModStart> hmi_siz ;",0
468,<S2SV_ModStart> -> id ; haddr -> hci_channel = 0 ;,1
469,<S2SV_ModStart> -> i_iget5_offset ; fh16 [ 3 ] = 0 ;,1
470,"<S2SV_ModStart> ( kdc_active_realm, client. princ <S2SV_ModEnd>, request ->",1
471,<S2SV_ModStart> break ; } <S2SV_ModEnd> dst_reg -> smin_value <S2SV_ModStart> = S64_MAX ; <S2SV_ModEnd> if ( src_known,1
472,"<S2SV_ModStart> ) { const VP9EncoderConfig <S2SV_ModEnd> * const oxcf <S2SV_ModStart> = get_key_level ( <S2SV_ModEnd>, 0, <S2SV_ModStart> = 0 ; if ( <S2SV_ModEnd> ( cm -> <S2SV_ModStart> == 1 ) ) { <S2SV_ModStart> else if ( <S2SV_ModEnd> ( cm ->",0
473,,0
474,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
475,"<S2SV_ModStart> = getnum ( <S2SV_ModEnd> fmt, MAXALIGN",0
476,<S2SV_ModStart> void usage_exit ( void,1
477,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
478,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
479,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
480,"<S2SV_ModStart>. decoder_alg_priv ( ctx ) <S2SV_ModEnd>, data, <S2SV_ModStart>, ctx ) <S2SV_ModEnd> ; if (",0
481,<S2SV_ModStart> ; if ( * value == 0 ||,1
482,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
483,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
484,"<S2SV_ModStart> ; if ( snpal == 6 ) ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> SNPA <S2SV_blank> <S2SV_blank> <S2SV_blank> (length: <S2SV_blank> %u): <S2SV_blank> "", snpal, snpal ) ) ; else ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> (length: <S2SV_blank> %u: <S2SV_blank> %u): <S2SV_blank> (length: <S2SV_blank> %u): <S2SV_blank> %s"", snpal, snpal, snpal, snpal, <S2SV_ModEnd> ) ) ;",0
485,"<S2SV_ModStart> y ++ ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> d"", <S2SV_ModStart> yfree ( outputbuffer ) ;",0
486,<S2SV_ModStart> } else { return false <S2SV_ModEnd> ; } } else <S2SV_ModStart> } else { return false <S2SV_ModEnd> ; } } <S2SV_null>,0
487,<S2SV_ModStart> case IS_STRING : { zval dval ; dval = * * tmp ; zval_copy_ctor ( & dval ) ; affine = * tmp ; convert_to_double ( & dval <S2SV_ModEnd> ) ; affine <S2SV_ModStart> i ] = Z_DVAL ( dval ) ; } <S2SV_ModEnd> break ; default <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; rect <S2SV_ModStart>. x = Z_LVAL ( lval ) ; } else { rect. x = <S2SV_ModStart> ) ; } } <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; rect <S2SV_ModStart>. x = Z_LVAL ( lval ) ; } else { rect. x = <S2SV_ModStart> ) ; } } <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval l,0
488,<S2SV_ModStart> kw ) { Py_free <S2SV_ModEnd> * type,0
489,<S2SV_ModStart> SQL_DROP ) ; <S2SV_ModEnd> return 0 ;,1
490,"<S2SV_ModStart> ; r = __copy_from_user <S2SV_ModEnd> ( data,",1
491,"<S2SV_ModStart>, * q <S2SV_ModEnd> ; Clp_Parser * <S2SV_ModStart> ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992.\\n\\\n\\\n\\\n\\\n\\\n\\\n\\\n <S2SV_blank> is <S2SV_blank> is <S2SV_blank> no <S2SV_blank> free <S2SV_blank> a.\\n\\\n\\\n\\\n\\\n\\\n\\\n\\\n\\\n\\\n\\\n <S2SV_blank> is <S2SV_blank> is <S2SV_blank> free <S2SV_blank> warranty, <S2SV_blank> warranty, <S2SV_blank> purpose.\\n\\\n\\\n\\\n"" <S2SV_ModEnd> ) ; exit <S2SV_ModStart> && isspace ( unsigned char ) <S2SV_ModStart> ; isspace ( unsigned char ) <S2SV_ModStart> ; isspace ( unsigned char ) <S2SV_ModStart> && isspace ( ( ( unsigned char ) <S2SV_ModStart> && isspace ( ( ( unsigned char ) <S2SV_ModStart> && isspace ( ( ( unsigned char ) <S2SV_ModStart> 0 ) <S2SV_ModStart> && isspace ( ( ( unsigned char ) <S2SV_ModStart> && isspace ( ( unsigned char )",0
492,<S2SV_ModStart> = 0 ; info -> port = NULL ;,1
493,<S2SV_ModStart> -> ctx. <S2SV_ModEnd> pmu = pmu,1
494,"<S2SV_ModStart> iovec * iov, struct iov_iter * iter ) { if ( len > MAX_RW_COUNT ) len = MAX_RW_COUNT ; <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> = 1 ; iov_iter_init ( iter, iter ) ;",0
495,<S2SV_ModStart> ext4_group_t flex_group ; unsigned <S2SV_ModStart> -> s_log_groups_per_flex ; if ( sbi -> s_log_per_flex < 1 || sbi -> s_log_groups_per_flex > 31 ) { sbi -> s_log_per_flex = 0 ; return 1 ; } <S2SV_ModStart> -> s_log_per_flex ; <S2SV_ModEnd> flex ; if,0
496,<S2SV_ModStart> ( unlikely ( chunk -> pdiscard ) ) return 0 ; if ( unlikely (,1
497,<S2SV_ModStart> int i ; n = 0 ; <S2SV_ModEnd> if ( i,0
498,"<S2SV_ModStart> { if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) return exit_client ( cptr, sptr, sptr, ""Malformed <S2SV_blank> AUTHENTICATE"" ) ; if ( <S2SV_ModStart> { if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) return exit_client ( cptr, sptr, sptr, ""Malformed <S2SV_blank> AUTHENTICATE"" ) ; if (",1
499,<S2SV_ModStart> <= w - ( int ),1
500,<S2SV_ModStart> callback_args -> forward_matches ; assert ( match_offset + match_length <= callback_args -> data_size ),1
501,<S2SV_ModStart> options. disable_forwarding && use_privsep,1
502,"<S2SV_ModStart> { if ( length > SMKTREE_DECODE_MAX_RECURSION ) { av_log ( NULL, AV_LOG_ERROR, ""Maximum <S2SV_blank> tree <S2SV_blank> recursion <S2SV_blank> level <S2SV_blank> exceeded.\\n"" ) ; return AVERROR_INVALIDDATA ; } if (",1
503,<S2SV_ModStart> err ; } if ( m -> msg_name ),1
504,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type"" ) ; return 1 ; } else <S2SV_ModEnd> { int res <S2SV_ModStart> ; Py_ssize_t i <S2SV_ModEnd> ; res = <S2SV_ModStart> ) ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ( obj, & PyId_type_ignores, & PyId_ignores <S2SV_ModEnd>, i, <S2SV_ModStart> ) ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\"" <S2SV_blank> missing <S2SV_blank> \\""type"" ) ; return 1 ; } else { int res <S2SV_ModEnd> ; res = <S2SV_ModStart> ; res = <S2SV_ModStart> ( Py_TypeError, & tmp ) <S2SV_ModEnd> ; res = <S2SV_ModStart> ) ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, arena ) < 0 ) { return 1 ; } if ( tmp == Py_CLEAR ( tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( Py_SetString ( PyExc_TypeError, """,0
505,<S2SV_ModStart> m ; int hstartrow <S2SV_ModEnd> ; if ( <S2SV_ModStart> 2 ) { hstartrow <S2SV_ModEnd> = ( numrows <S2SV_ModStart> = numrows - hstartrow <S2SV_ModEnd> ; n = <S2SV_ModStart> & a [ hstartrow <S2SV_ModEnd> * stride ],1
506,"<S2SV_ModStart> ""REPLY_ADD_STA <S2SV_blank> PASSED\\n"" ) ; ret = iwl_sta_ucode_activate ( priv, sta_id ) <S2SV_ModEnd> ; break ;",1
507,"<S2SV_ModStart> ; log_file = fopen_safe <S2SV_ModEnd> ( file_name,",1
508,"<S2SV_ModStart> "" <S2SV_blank> <S2SV_blank> <S2SV_blank> xy <S2SV_blank> <S2SV_blank> <S2SV_blank> x"" ) ; assert_syntax_error ( ""\\\\x0"" ) ;",0
509,"<S2SV_ModStart> & HB_LOCK ) spin_lock_irqsave ( & hashbin -> hb_spinlock, flags ) ; <S2SV_ModEnd> for ( i <S2SV_ModStart> ++ ) { if (! queue ) spin_unlock_irqsave ( & hashbin -> hb_spinlock, flags ) ; if (! queue ) break ; <S2SV_ModEnd> if ( free_func <S2SV_ModStart> & HB_LOCK ) spin_unlock_irqsave ( & hashbin -> hb_irqsave ( & hashbin -> hb_state, flags ) ; if ( hashbin -> hb_type & HB_LOCK ) spin_unlock_irqsave ( & hashbin -> hb_spinlock, flags ) ; <S2SV_ModEnd> for ( i",0
510,<S2SV_ModStart>! mnt_flags & MNT_NOSUID <S2SV_ModEnd> ) { return,0
511,"<S2SV_ModStart> copied, err <S2SV_ModEnd> ; int vnet_hdr_len <S2SV_ModStart> out_free ; } copied = skb -> len ; if ( copied > len ) { copied = 0 ; msg -> msg_namelen = 0 ; goto out_free ; } copied",0
512,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
513,"<S2SV_ModStart> ( serial -> num_bulk_out <S2SV_ModEnd> < 2 ) <S2SV_ModStart> < 2 ) { dev_err ( & serial -> interface -> dev, ""missing <S2SV_blank> bulk <S2SV_blank> out <S2SV_blank> endpoints\\n"" ) ; return - ENODEV ; } <S2SV_ModEnd> port = serial",1
514,"<S2SV_ModStart> read_junk = 1, table_length = 0 <S2SV_ModStart> ; CS64Chunk ds64_chunk ; CS64Chunk ds64_chunk <S2SV_ModStart> ds64_chunk ) ; table_length = table_length * sizeof ( ds64_chunk ) <S2SV_ModStart> ds64_chunk ) ) ; table_length = table_bytes <S2SV_ModStart> ( ds64_chunk, table_length * sizeof ( cs64_chunk ) <S2SV_ModStart> ( ds64_chunk ) ; cs64_chunk. total_chunk. total_data_length = table_length <S2SV_ModStart> total_data_bytes ; cs64_chunk. table_length = total_data_length",0
515,"<S2SV_ModStart> ) { if ( msg_sys -> msg_name && <S2SV_ModStart> -> msg_name, & msg_name, sizeof ( msg_sys ) ) <S2SV_ModEnd> err = msg_sys",0
516,<S2SV_ModStart> ; int nblock_blocks = 0 <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> int nblock_bh = 0 <S2SV_ModEnd> ; memset (,0
517,<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( ) ; <S2SV_ModEnd> } else {,0
518,<S2SV_ModStart> return FALSE ; { BOOL rc ; <S2SV_ModStart> -> prof_nsc_rle_decompress_data ) rc = <S2SV_ModStart> -> prof_nsc_rle_decompress_data ) if (! rc ) return FALSE ; } { BOOL rc ; <S2SV_ModStart> -> prof_nsc_decode ) rc = <S2SV_ModStart> -> prof_nsc_decode ) if (! rc ) return FALSE ; },1
519,<S2SV_ModStart> -> dict )!= 0,0
520,"<S2SV_ModStart> ; if ( is_link ( fname ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank> %s <S2SV_blank> file\\n"", fname ) ; exit ( 1 ) ; } if ( <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( stderr, <S2SV_ModStart> 0 ) ; } if ( is_link ( fname ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> file\\n"", fname ) ; exit ( 1 ) ; } if ( <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"",",0
521,"<S2SV_ModStart> * reqp, int size_t req_len <S2SV_ModEnd> ) { int <S2SV_ModStart> - EINVAL ; size_t req_len ; if (! xdr_len ) return - EPERM ; <S2SV_ModStart> if (! xdr_len ) return - EPERM <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto out_lock <S2SV_ModEnd> ; } <S2SV_null>",0
522,<S2SV_ModStart> ; if ( f &&,0
523,<S2SV_ModStart> ) ) { if ( msix,0
524,<S2SV_ModStart> = timespec_to_ns ( & <S2SV_ModStart> = timespec_to_ns ( & <S2SV_ModStart> = timespec_to_ns ( &,1
525,"<S2SV_ModStart> ; if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
526,<S2SV_ModStart> == 0 ) if ( ( <S2SV_ModStart> == 0 ) <S2SV_ModEnd> break ; },0
527,"<S2SV_ModStart> multipart_media ; struct range_data * r = & clt -> clt_ranges ; struct range * range <S2SV_ModEnd> ; size_t content_length <S2SV_ModStart> ; size_t content_length = 0 <S2SV_ModStart> nranges, ret <S2SV_ModEnd> ; size_t content_length <S2SV_ModStart> ; size_t content_length = <S2SV_ModEnd> ; size_t content_length <S2SV_ModStart> 1 ) ) { range = <S2SV_ModEnd> if ( nranges <S2SV_ModStart> 1 ) { range [ 0 ] ; <S2SV_ModStart> } else { range = snprintf ( & r -> range [ 0 ], sizeof ( clt -> clt -> clt_ranges ) - 1 ; } else { range = & r -> range [ 0 ] ; for ( i = 0 ; i = 0 ; i < nranges ; i ++ ) { range = & r -> range [ 0 ] ; if ( ( ( i ++ ) < nranges [ 0 ] ) { range = snprintf ( & r -> range [ 0 ], ""\\r\\n\\n\\n\\n\\r\\r\\n\\n"" ""Content-Range: <S2SV_blank> %s\\r\\r\\n"" ""Content-Range: <S2SV_blank> %s\\r\\r\\r\\r\\n"" ""Content-Range: <S2SV_blank>",0
528,"<S2SV_ModStart> ( interface, KSZ8851_ISR ) ; if ( (! KSZ8851_ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR, KSZ8851_ISR, KSZ8851_RXIS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( ( interface, KSZ8851_RXIS <S2SV_ModEnd> ) )!= 0 <S2SV_ModStart> ( interface, KSZ8851_RXIS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_RXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_RXIS <S2SV_ModEnd> ) ;",0
529,"<S2SV_ModStart> write_bit_buffer ( const vpx_write_bit <S2SV_ModEnd> * wb, <S2SV_ModStart> cm, const vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
530,<S2SV_ModStart> bpp <= CHUNKY && c -> color_size,0
531,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> p ) ),0
532,<S2SV_ModStart> tmp ) { goto softfail <S2SV_ModEnd> ; } case <S2SV_ModStart> ) ) { goto softfail <S2SV_ModEnd> ; } state <S2SV_ModStart> end ) ; softfail : state -> offset = 0 ;,1
533,"<S2SV_ModStart> struct fb_vblank vblank ; memset ( & vblank, 0, sizeof ( vblank ) )",1
534,<S2SV_ModStart> flags ) { spin_lock ( & ctx -> cancel_lock ) ; <S2SV_ModStart> } } else { __timerfd_remove_cancel <S2SV_ModEnd> ( ctx ) <S2SV_ModStart> ) ; } spin_unlock ( & ctx -> cancel_lock ) ;,1
535,"<S2SV_ModStart> ) ) ; if ( c16 -> Curves [ i ] == NULL ) { for ( j = 0 ; j < i ; j ++ ) { _cmsFree ( ContextID, c16 -> Curves [ j ] ) ; } _cmsFree ( ContextID, c16 -> Curves ) ; _cmsFree ( ContextID, c16 ) ; return NULL ; }",1
536,<S2SV_ModStart> { if (! dev_name ||,1
537,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
538,"<S2SV_ModStart> size ) ; memset ( & msg, 0, sizeof ( * msg ) ) ; <S2SV_ModStart> ) ) { <S2SV_ModEnd> memcpy_fromio ( buf <S2SV_ModStart> ) ) ; } else if ( buf ) memcpy_fromio ( buf <S2SV_ModEnd>, bus -> <S2SV_ModStart> -> m_pdwGetRing + sizeof ( * msg ) - space_rem, buf ) ; memcpy_fromio ( buf <S2SV_ModEnd>, bus -> <S2SV_ModStart> -> m_pdwGetRing + sizeof ( * msg ) <S2SV_ModEnd> ) ; } else if",0
539,<S2SV_ModStart> TSRMLS_CC ) ; if ( new_len > INT_MAX ) { efree ( replaced ) ; RETURN_FALSE ; },1
540,<S2SV_ModStart> if ( buf == NULL ) goto done,0
541,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_line_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) ; <S2SV_ModStart> t1_buf_array, t1_line_array ) ; alloc_array ( t1_line, strlen ( t1_buf_array ) + 1, T1_BUF_SIZE",1
542,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> set_block ( MACROBLOCK * <S2SV_ModStart>, BLOCK_SIZE bsize, MACROBLOCK * x, <S2SV_ModEnd> ) { MACROBLOCKD * <S2SV_ModStart> x = bsize ; if ( bsize == BLOCK_SIZE subsize ) { vpx_set_block ( cm, bsize, bsize, bsize, bsize, hbs_block <S2SV_ModEnd> ) ; if <S2SV_ModStart> case PARTITION_NONE : if <S2SV_ModEnd> ( x <S2SV_ModStart> = bsize == BLOCK_8X8 ) { <S2SV_ModEnd> set_block ( cm <S2SV_ModStart> ( cm, x, x, x, x <S2SV_ModEnd> ) ; } <S2SV_ModStart> case PARTITION_NONE : if ( x == BLOCK_8X_SIZE ) { <S2SV_ModEnd> set_info ( cm <S2SV_ModStart> ( cm, x, x, x <S2SV_ModEnd> ) ; return <S2SV_ModStart> case PARTITION_NONE : pc_context_info_info ( x <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( cm, x <S2SV_ModEnd> ) ; }",0
543,"<S2SV_ModStart> name ) ; if (! strcmp ( key, ""path"" ) && value && looks_like_command_line_option ( value ) ) data -> ret |= report ( data -> obj, data -> ret <S2SV_ModEnd>, data ->",0
544,"<S2SV_ModStart> int block_ptr ; memset <S2SV_ModEnd> ( s -> <S2SV_ModStart> block_ptr ], 0",0
545,<S2SV_ModStart> cnt ) { ssize_t <S2SV_ModEnd> n ; assert,1
546,<S2SV_ModStart> ; __be16 type ; if ( NAPI_GRO_CB ( skb ) -> encap_mark ) goto out ; NAPI_GRO_CB ( skb ) -> encap_mark = 1,1
547,<S2SV_ModStart> ; if ( numrows < 0 || numcols < 0 ) { return 0 ; } if (,1
548,<S2SV_ModStart> ) ) { if ( session -> session == 0 ) { TPM_RC_SUCCESS ; },0
549,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = key_read,0
550,<S2SV_ModStart> u4_first_slice_in_pic = 1 <S2SV_ModEnd> ; ps_dec ->,0
551,<S2SV_ModStart> break ; } <S2SV_ModEnd> dst_off = dst,0
552,"<S2SV_ModStart>, di ) <S2SV_ModEnd> ; if (",0
553,"<S2SV_ModStart> vfio_irq_set hdr ; size_t size ; <S2SV_ModStart> NULL ; int max, <S2SV_ModStart> || hdr. count >= ( U32_MAX - hdr. start ) || hdr. <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> max = vcpu",0
554,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ext4_has_inline_data ( inode,1
555,<S2SV_ModStart> -> filesize = UINT64_MAX <S2SV_ModEnd> ; s ->,1
556,<S2SV_ModStart> & sk -> opt.,0
557,"<S2SV_ModStart> char * in, size_t olen <S2SV_ModStart> += 4 ; if ( len == olen ) return len ; <S2SV_ModStart> '=' ) { if ( len == olen ) return len ; <S2SV_ModStart> '=' ) { if ( len == olen ) return len ;",1
558,<S2SV_ModStart> gc ) ; <S2SV_ModEnd> return 0 ;,1
559,<S2SV_ModStart> i ; size_t bytes <S2SV_ModEnd> = 0,0
560,<S2SV_ModStart> & CP_RDESC_SWAPPED_MIN_MAX ) ) return rsize <S2SV_ModEnd> ; if (,0
561,"<S2SV_ModStart> * svc_frame, <S2SV_ModEnd> int i, <S2SV_ModStart> num_frame_count ) { const <S2SV_ModStart> ; VSV_null> <S2SV_null> <S2SV_null>",0
562,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decode ( BYTE <S2SV_ModStart> BYTE * out, UINT32 outSize <S2SV_ModStart> 16 outSize ; if ( outSize < 1 ) return FALSE ; outSize -- ; <S2SV_ModStart> 4 ; } if ( outSize < 1 ) return FALSE ;",0
563,<S2SV_ModStart> ( screen ) <S2SV_ModEnd> ) ; },0
564,"<S2SV_ModStart> str ) { const char * str = NULL ; int end <S2SV_ModEnd> ; int <S2SV_ModStart> == '\\\\' ) { * str_start = end <S2SV_ModEnd> ; if ( <S2SV_ModStart> == '\\\\'' ) { * str_end = NULL ; <S2SV_ModStart> == '}' ) { * str = NULL ; } <S2SV_ModStart> end = end - 1 ; if ( * str == end!= end ) { * str = NULL ; if ( * str =='<S2SV_blank> \'"" ) { * str = NULL ; } else if ( * str_start == end - 1 ) { * str = NULL ; } else if ( <S2SV_ModStart> == '}' ) { * str = NULL ; for ( i = 0 ; end < end - 1 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> == '}' ) <S2SV_ModEnd> return 1 ; <S2SV_ModStart> == '}' ) { * literal_start = end - 1 ; } <S2SV_ModStart> literal + end - 1 ; end < end <S2SV_ModEnd> return 1 ;",0
565,"<S2SV_ModStart> * m, size_t <S2SV_ModEnd> bufsize ) { <S2SV_ModStart> * buf ; <S2SV_ModEnd> JAS_DBGLOG ( 100 <S2SV_ModStart> 100, ( 100 <S2SV_ModEnd> ) ) ; if",0
566,<S2SV_ModStart> ) ) { <S2SV_ModEnd> char * dd,0
567,,0
568,<S2SV_ModStart> pcrypt_free ( struct aead_instance <S2SV_ModEnd> * inst ) <S2SV_ModStart> * ctx = aead_instance_ctx <S2SV_ModEnd> ( inst ),1
569,,0
570,"<S2SV_ModStart> } if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if (",1
571,<S2SV_ModStart> icmp6_hop_limit ) { if ( <S2SV_ModStart> icmph. icmp6_limit < <S2SV_ModEnd> rc ) {,0
572,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
573,<S2SV_ModStart> * up ; int ulen ; <S2SV_ModStart> rp ) ; ulen = xfrm_replay_state_esn_len ( up ) ; if ( nla_len ( rp ) < ulen || <S2SV_ModEnd> xfrm_replay_state_esn_len ( replay_esn <S2SV_ModStart> replay_esn )!= ulen <S2SV_ModEnd> ) return -,1
574,"<S2SV_ModStart> int ret = proc_dointvec_minmax <S2SV_ModEnd> ( table,",1
575,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",1
576,<S2SV_ModStart> opj_calloc ( ( size_t ) ( <S2SV_ModStart> -> numlayers + 1U <S2SV_ModEnd> ) * l_step_l,0
577,"<S2SV_ModStart> name ), ""crypto-%s"" <S2SV_ModEnd>, name )",1
578,<S2SV_ModStart> ps ) { <S2SV_ModEnd> SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
579,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_null> static <S2SV_ModEnd> encode_row ( MACROBLOCK * <S2SV_ModStart> int mi_col ) { <S2SV_ModEnd> encode_row ( & tile <S2SV_ModStart> mi_col ) ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> mi_col ) ; memcpy <S2SV_ModEnd> ( cpi, <S2SV_ModStart> mi_col ) ; memcpy <S2SV_ModEnd> ( cpi, <S2SV_ModStart> mi_col ) ; memcpy <S2SV_ModEnd> ( xd, <S2SV_ModStart> mi_col ) ; memcpy <S2SV_ModEnd> ( xd ->",0
580,"<S2SV_ModStart> 1 ) ; if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf = opipe",1
581,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd>, 0",0
582,<S2SV_ModStart> } else { # ifdef UPNP_ENABLE_POST_WRITE <S2SV_ModStart> return HTTP_UNAUTHORIZED ; # else return HTTP_NOT_FOUND ; # endif,1
583,<S2SV_ModStart> char dirname = NULL <S2SV_ModEnd> ; if (,0
584,<S2SV_ModStart> blkg ) ) <S2SV_ModEnd> return PTR_ERR ( <S2SV_ModStart> blkg ) ; <S2SV_ModEnd> q -> root_blkg,1
585,<S2SV_ModStart> ; if ( bpp == 1 && <S2SV_ModStart> else if ( bpp == 8 &&,1
586,"<S2SV_ModStart> ; krb5_data rspac ; const char * tgt_realm = krb5_principal_get_realm ( context, krbtgt -> entry. principal ) <S2SV_ModStart>, cp, tgt_realm,",1
587,<S2SV_ModStart> mnt ) ; nd -> last_type = LAST_BIND ;,1
588,"<S2SV_ModStart> struct usbdevfs_connectinfo ci ; memset ( & ci, 0, sizeof ( ci ) ) ; ci <S2SV_ModEnd>. devnum = <S2SV_ModStart> dev -> devnum ; ci <S2SV_ModEnd>. slow = <S2SV_ModStart> speed == USB_SPEED_LOW <S2SV_ModEnd> ; if (",1
589,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> opt.",0
590,<S2SV_ModStart> args -> rmtvaluelen <S2SV_ModEnd> ; retval =,0
591,"<S2SV_ModStart> LARGE_INTEGER offset ; size_t devicePathLen = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) break ; if (! request -> IoStatus. Information || ( devicePathLen < 16 ) || ( memcmp ( request -> DevicePathLen - 8 ) || ( request -> DevicePath [ devicePath [ devicePath [ devicePathLen - 8 ], 16 * sizeof ( request -> DevicePathLen ) ) ) || ( memcmp ( request -> IoStatus. Information [ devicePath [ devicePathLen - 4 ] ) ) || (! request -> IoStatus. Information [ devicePathLen ]. Information = 0 <S2SV_ModEnd> ; break",0
592,<S2SV_ModStart> ) ) goto error <S2SV_ModEnd> ; if (,0
593,<S2SV_ModStart> ; uint16 d -> name = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto error <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto error <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto error <S2SV_ModEnd> ; if,0
594,"<S2SV_ModStart>, - 1 <S2SV_ModEnd> ) ; }",0
595,<S2SV_ModStart> ; x += 4 <S2SV_ModEnd> ) { index,1
596,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
597,"<S2SV_ModStart>, int tstype, bool opt_stats <S2SV_ModStart> ; int err ; BUILD_BUG_ON ( sizeof ( struct sock_exterr_skb ) > sizeof ( skb -> cb ) ) <S2SV_ModStart> ee_info = tstype ; serr -> opt_stats = opt_stats",1
598,"<S2SV_ModStart> 0 ) { if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""UnexpectedEndOfFile"" ) ;",0
599,<S2SV_ModStart> ( len < 2 <S2SV_ModEnd> ) ) {,0
600,"<S2SV_ModStart>, CONST_STR_LEN ( ""%2f?"" ), CONST_STR_LEN ( ""/?"" ) ) ; run_burl_normalize ( ptmp, flags, CONST_STR_LEN (",0
601,<S2SV_ModStart> out ) ; else if <S2SV_ModEnd> (!,0
602,<S2SV_ModStart> <= w - ( int ),1
603,<S2SV_ModStart> page ) ; <S2SV_ModEnd> memset ( addr,1
604,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,0
605,<S2SV_ModStart> = 1 ; if ( ps_parse -> s_bytes < 0 ) { return ; },0
606,"<S2SV_ModStart> * priv ; if (! port -> interrupt_out_urb ||! port -> interrupt_in_urb ) { dev_err ( & port -> dev, ""required <S2SV_blank> endpoint <S2SV_blank> is <S2SV_blank> missing\\n"" ) ; return - ENODEV ; }",1
607,<S2SV_ModStart> ) ; return ret <S2SV_ModEnd> ; } if,0
608,<S2SV_ModStart> -> device_data ; cancel_autoload_drivers ( ) ;,1
609,"<S2SV_ModStart>, int ret, <S2SV_ModEnd> ) { MY_ON",0
610,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> p == q ) || ( <S2SV_ModEnd> size < 16 <S2SV_ModStart> size < 16 ) || ( <S2SV_ModEnd> size > 256 <S2SV_ModStart> size > 256 ),1
611,"<S2SV_ModStart> uint dblocks = xfs_attr3_rmt_blocks <S2SV_ModEnd> ( mp,",1
612,"<S2SV_ModStart> ) ; } if ( pcount!= 0 ) ereport ( ERROR, ( errcode ( ERR_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> (%d)"", ( int ) ) ) ;",0
613,"<S2SV_ModStart> val, val <S2SV_ModEnd> ) ; if",0
614,<S2SV_ModStart> ] == EOF || text [ 1 ] == 0 <S2SV_ModStart> ; if (! isxdigit ( <S2SV_ModStart> [ 2 ] ) <S2SV_ModEnd> ) return 0,0
615,"<S2SV_ModStart> } if ( strncpy <S2SV_ModEnd> ( c,",0
616,"<S2SV_ModStart> vp9_fdct16x16_c ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> * output, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> out [ 4 <S2SV_ModStart> ++ j ) { vpx_fdct_c <S2SV_ModEnd> ( temp_in [",0
617,"<S2SV_ModStart>, new_name, false <S2SV_ModEnd> ) ; if",0
618,"<S2SV_ModStart> fh_dentry ) ; error = fh_want_write ( fh ) ; if ( error ) <S2SV_ModEnd> goto out_errno ; <S2SV_ModStart> goto out_errno ; fh_lock ( fh ) ; error = set_posix_acl ( inode, ACL_TYPE_ACCESS, argp -> acl_access <S2SV_ModEnd> ) ; if <S2SV_ModStart> error ) goto out_drop_lock ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT <S2SV_ModEnd>, argp -> <S2SV_ModStart> argp -> acl_default ) ; out_drop_lock : fh_unlock ( fh ) ; <S2SV_ModEnd> fh_drop_write ( fh",1
619,<S2SV_ModStart> * ue ; if <S2SV_ModEnd> ( tree_root == <S2SV_ModStart> == NULL ) return 0,1
620,"<S2SV_ModStart> fp ) ; char * TEMP_FAILURE_RETRY ( <S2SV_ModStart> name ) ; if (! temp_filename ) { TEMP_ERROR ( ""%s: <S2SV_blank> %s: <S2SV_blank> %s\\n"", filename, path ) ; goto error ; } if ( <S2SV_ModStart> ) ) { if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> key ) ) ; goto error ; } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> path ) ) ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> value ) )",0
621,<S2SV_ModStart> elen ) ; elen += sizeof ( struct pathComponent ) ; <S2SV_ModStart> > 0 ) { elen += pc -> lengthComponentIdent ; break ; } <S2SV_ModEnd> case 2 : <S2SV_ModStart> case 5 : elen += pc -> lengthComponentIdent ; elen += pc -> lengthComponentIdent ; break ; } <S2SV_ModEnd> } if (,0
622,"<S2SV_ModStart> ( dp [ 4 <S2SV_ModEnd> ] ) ; <S2SV_ModStart> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> <%s>"", tok2str ( nfsv3_writemodes, NULL, EXTRACT_32BITS ( & dp [ 3 ] <S2SV_ModEnd> ) ) )",1
623,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr ) ;,0
624,<S2SV_ModStart> ( ctxt -> data == 0 )? 0 :,0
625,<S2SV_ModStart> ; bool slow <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ; * addr_len = sizeof ( * sin ) ;,1
626,"<S2SV_ModStart> len ) { <S2SV_ModEnd> if (! <S2SV_ModStart> } while ( len ) { u_int pdu_len = <S2SV_ModEnd> rpki_rtr_pdu_print ( ndo <S2SV_ModStart> ( ndo, pptr, len, 1 <S2SV_ModEnd>, 8 ) <S2SV_ModStart>, 8 ) ; len <S2SV_ModEnd> -= pdu_len ; <S2SV_ModStart> -= pdu_len ; pptr <S2SV_ModEnd> += pdu_len ; <S2SV_ModStart> pdu_len ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
627,"<S2SV_ModStart> int tagval ; struct stream packet ; <S2SV_ModStart> length ) ; packet = * s ; <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModEnd> return False ;",0
628,"<S2SV_ModStart> 0 ; int max_offset ; u_int offset ; u_int offset ; if ( ( ( i, cp = * cp ) & INDIR_MASK )!= 0 ) return ( NULL ) ; if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; if ( ( ( ( i = * cp + cp + offset ) & INDIR_MASK )!= INDIR_MASK ) { ND_PRINT ( ( ndo, ""\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\ndo, cp ) ; assert ( ( & INDIR_MASK ) == INDIR_MASK ) ; rc = cp + l = cp + l = cp + l ; if ( ( i == INDIR_MASK ) { if ( ( ( ( i & INDIR_MASK ) & INDIR_MASK )!= INDIR_MASK ) { ND_PRINT ( ( ( ndo, ""\\n"" ) ; return ( NULL ) ; } if ( ( ( i == INDIR_MASK ) == INDIR_MASK ) { ND_MASK ) { ND_PRINT ( ( ( ( ndo,",0
629,"<S2SV_ModStart>, args -> rmtvaluelen <S2SV_ModEnd> ) ; error <S2SV_ModStart> = args -> rmtvaluelen <S2SV_ModEnd> ; while (",1
630,"<S2SV_ModStart>, ""\\r\\n"", <S2SV_ModEnd> data ) ;",0
631,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> S_IWUSR ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; unlink",0
632,<S2SV_ModStart> ) ) ; hstats_enabled = NULL ;,0
633,"<S2SV_ModStart> -> x = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMin <S2SV_ModEnd> ( 1.0f,",0
634,"<S2SV_ModStart> PKT_LEN_SIZE ) { giterr_set_str ( GITERR_NET, ""Invalid <S2SV_blank> empty <S2SV_blank> packet"" ) ; return GIT_ERROR <S2SV_ModEnd> ; } if",1
635,<S2SV_ModStart> ; if ( vma -> vm_flags & VM_SHARED ) return VM_FAULT_SIGBUS ; if (,1
636,"<S2SV_ModStart> -> sasl_password = g_snprintf <S2SV_ModEnd> ( src,",0
637,<S2SV_ModStart> env -> insn_aux_data ; int i <S2SV_ModStart> ) ) ; for ( i = off ; i < off + cnt - 1 ; i ++ ) new_data [ i ]. seen = true ;,1
638,<S2SV_ModStart> ; ND_TCHECK ( * dp <S2SV_ModEnd> ) ; if,1
639,<S2SV_ModStart> trunc ; } ND_TCHECK_16BITS ( & bp [ i + 2 ] ) ;,1
640,<S2SV_ModStart> = 1 ; memset <S2SV_ModEnd> ( cpi ->,0
641,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( occ0 <S2SV_ModStart> % rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""PredictorDecodeTile"", ""%s"", ""occ0%rowsize <S2SV_blank>!= <S2SV_blank> 0"" ) ; return 0 ; } <S2SV_ModEnd> assert ( sp <S2SV_ModStart> 0 ) { if (! <S2SV_ModStart>, rowsize ) ) return 0",1
642,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteCanonEntry ) ) ;",0
643,<S2SV_ModStart> ; if ( ctx -> terminated ||,1
644,<S2SV_ModStart> = NULL ; if ( sbi -> spool ) hugepage_put_subpool ( sbi -> spool ) ;,1
645,<S2SV_ModStart> | 1 ) <S2SV_ModEnd> ; if (,0
646,"<S2SV_ModStart> * s ; unsigned char * in, <S2SV_ModStart> = alloc ; size_t res = 0 ; int alloc * s ; <S2SV_ModStart> = alloc ; if ( len < 2 ) return NULL <S2SV_ModEnd> ; } <S2SV_null>",0
647,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
648,"<S2SV_ModStart> ( ) ; iov_iter_advance ( i, copied ) ; <S2SV_ModStart> again ; } <S2SV_ModEnd> pos += copied",1
649,<S2SV_ModStart> unlikely ( len + ring -> frameoffset,1
650,<S2SV_ModStart> ; if ( <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
651,"<S2SV_ModStart> ( obj, <S2SV_ModEnd> name, data <S2SV_ModStart>, show_object, & base <S2SV_ModEnd>, path,",1
652,"<S2SV_ModStart>, eflags ) ; if (!",0
653,<S2SV_ModStart> src < zsize + ( sub_type!= 2 ) <S2SV_ModStart> bits ) { if ( src >= src_end ) return AVERROR_INVALIDDATA ;,1
654,<S2SV_ModStart> key ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
655,<S2SV_ModStart> 0 ] ; <S2SV_ModEnd> } else {,0
656,<S2SV_ModStart> ( ssize_t ) - 1,0
657,<S2SV_ModStart> slave_timer ) { spin_lock ( & timer -> timer -> lock ) ; <S2SV_ModStart> lock ) ; spin_unlock ( & timer -> timer -> lock ) ; },0
658,<S2SV_ModStart> len ; } ND_TCHECK ( p [ 2 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT,1
659,"<S2SV_ModStart> -> has_va ; <S2SV_ModEnd> char * arch <S2SV_ModStart> * arch = strdup ( info -> arch ) ; char * cpu = info -> cpu? strdup ( info -> cpu ) : NULL <S2SV_ModEnd> ; ut16 bits <S2SV_ModStart> ; if ( <S2SV_ModEnd> cpu && * <S2SV_ModStart> cpu && * <S2SV_ModEnd> cpu ) { <S2SV_ModStart>, ""anal.cpu"", <S2SV_ModEnd> cpu ) ; <S2SV_ModStart> r, binfile ) ; free ( cpu ) ; free ( arch",1
660,"<S2SV_ModStart> sas_probe_devices ( struct asd_sas_port * port <S2SV_ModEnd> ) { struct <S2SV_ModStart>, * n <S2SV_ModEnd> ; list_for_each_entry (",1
661,<S2SV_ModStart> %S2SV_null> <S2SV_null> <S2SV_null> ps_dec ->,0
662,"<S2SV_ModStart> gint64 offset ; <S2SV_ModEnd> char line [ <S2SV_ModStart> line [ NETSCREEN_LINE_LENGTH <S2SV_ModEnd> ] ; offset <S2SV_ModStart> return FALSE ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! parse_netscreen_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart> wth -> fh <S2SV_ModEnd>, & wth <S2SV_ModStart> wth -> frame_buffer, line",1
663,<S2SV_ModStart> 0 ) ; if ( <S2SV_ModStart>. seq_num ) < 0 ) return - 1,1
664,<S2SV_ModStart> ) ) { uint32_t newHeight ; <S2SV_ModEnd> newSize = 0 <S2SV_ModStart> ( info -> imageWidth ) <S2SV_ModEnd> ; switch ( <S2SV_ModStart> ( gf -> image ) <S2SV_ModEnd> = NULL ; for (,0
665,<S2SV_ModStart> : ret = - EOPNOTSUPP ; if ( key -> read ) { ret = <S2SV_ModStart> sem ) ; ret = <S2SV_ModEnd> key -> read <S2SV_ModStart> sem ) ; up_read ( & key -> sem ) ; <S2SV_ModStart> sem ) ; <S2SV_ModEnd> } error2 :,0
666,<S2SV_ModStart> return ret ; if ( ret == 0 ) { ret = - 1 ; return ret ; },0
667,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",1
668,"<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if <S2SV_ModStart> - JAS_CAST ( jas_longlong <S2SV_ModEnd>, ( ( <S2SV_ModStart> : JAS_CAST ( jas_longlong <S2SV_ModEnd>, tmp )",1
669,<S2SV_ModStart> page ) ; rm -> atomic. op_active = 0 ;,1
670,<S2SV_ModStart> bus ] ; if ( bi == NULL ) return - EINVAL ;,0
671,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = 0 <S2SV_ModStart> ) ) ; msg -> msg_namelen = sizeof ( * sin ) ;",0
672,"<S2SV_ModStart> sizeof ( spath ) ) return - 1 ; if ( strstr ( name, "".."" ) || strchr ( name, '/'",1
673,"<S2SV_ModStart> (! s &&! isspace ( s, strlen ( s ) ) )",0
674,"<S2SV_ModStart> -> bcache, cache_id ( <S2SV_ModStart> ] -> data )",1
675,<S2SV_ModStart> objp ) ; * objp = NULL ;,1
676,"<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL ) )",1
677,<S2SV_ModStart> return 1 ; consume_skb ( skb ) ; return 0 <S2SV_ModEnd> ; } if,1
678,<S2SV_ModStart> msgnum ) ; if <S2SV_ModEnd> ( msgnum <= 0,0
679,<S2SV_ModStart> dentry * upper <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto out_unlock <S2SV_ModEnd> ; if (,0
680,<S2SV_ModStart> ( p [ '/' <S2SV_ModEnd> ] ),0
681,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> } if (! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if (",1
682,"<S2SV_ModStart> int decode_unsigned_max ( vpx_read_bit <S2SV_ModEnd> ( rb,",0
683,<S2SV_ModStart> 1 ) ; if ( strlen ( line ) == 0 ) return - 1 ;,1
684,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
685,<S2SV_ModStart> ++ ) { if ( band -> prec ) { <S2SV_ModStart> ) ; } },1
686,<S2SV_ModStart> < 0 ) { xmlFreeInputStream ( input ) ; return ; } <S2SV_ModEnd> if ( entity,1
687,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart>, & final ) ; rcu_read_unlock ( <S2SV_ModStart> -> ir_v6_rmt_addr ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ), <S2SV_ModEnd> np -> tclass <S2SV_ModStart> np -> tclass ) ; rcu_read_unlock (",1
688,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> get_tx_mode ( VP9_COMP <S2SV_ModStart> cpi ) { return VPX_MODE_COMP * const oxcf = & cpi -> common ; if ( cpi -> oxcf. pass == 1 ) { break ; } else { <S2SV_ModStart> cpi ) { return VPX_MODE_LOAD_SIZES2SV_null> <S2SV_null>,0
689,"<S2SV_ModStart> ( u32 size, u32 num ) { if ( size > UINT32_MAX / num ) { return NULL ; } <S2SV_ModEnd> return malloc ( <S2SV_ModStart> malloc ( size * num",1
690,<S2SV_ModStart> else if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1 <S2SV_ModStart> { if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1,1
691,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,1
692,<S2SV_ModStart> (! buf,0
693,"<S2SV_ModStart> scn, root_storage <S2SV_ModEnd> ) ) <",1
694,<S2SV_ModStart> size_t info <S2SV_ModEnd> ; if (,0
695,<S2SV_ModStart> (! eof && vars -> str. c!= vars -> ptr,1
696,<S2SV_ModStart> ; if ( & domain == NULL ) return - EINVAL ; if (,0
697,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
698,"<S2SV_ModStart> -> _eip ; rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val ) ; if ( rc!= X86EMUL_CONTINUE ) break <S2SV_ModStart> case 4 : rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val )",1
699,"<S2SV_ModStart> list. name, true",1
700,"<S2SV_ModStart> void * end <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; void * dbuf = NULL ; void * <S2SV_ModStart> struct ceph_crypto_key old_key ; void * ticket_buf = NULL <S2SV_ModStart>, end, & dbuf, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart> bad ) ; if (! ticket_buf ) { ret = - ENOMEM ; goto out ; } tp = ticket_buf ; <S2SV_ModStart> bad ) ; if (! ticket_buf ) { ret = - ENOMEM ; goto out ; } tp = ticket_buf ; <S2SV_ModStart> bad ) ; if (! ticket_buf ) { ret = - ENOMEM ; goto out ; } ticket_buf = ticket_buf ; <S2SV_ModStart> bad <S2SV_ModEnd> ; out",0
701,<S2SV_ModStart> ( count ) <S2SV_ModEnd> ; if (,0
702,<S2SV_ModStart> -> ctx -> sched = 0,0
703,<S2SV_ModStart> -> init_msg = 0 <S2SV_ModEnd> ; if (,0
704,<S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY (,0
705,<S2SV_ModStart> ; if (! test_wrong <S2SV_ModEnd> ) return,0
706,<S2SV_ModStart> NULL ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_FIELD_REF,0
707,<S2SV_ModStart> -> dev ) <S2SV_ModEnd> = cmd ->,0
708,"<S2SV_ModStart>, type_comment ; if (! type_comment ) return NULL ; <S2SV_ModStart> name ) ; if (! type_comment ) return NULL ; <S2SV_ModStart> name, type_comment",0
709,<S2SV_ModStart> err = 0 ; if (! net_net ( sk ) ) return - EINVAL,0
710,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
711,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,1
712,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
713,<S2SV_ModStart> -> rows = 1 <S2SV_ModEnd> ; image -> <S2SV_ModStart> ( BImgBuff ) <S2SV_ModEnd> ; break ;,1
714,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>,0
715,,1
716,<S2SV_ModStart> 0 ) ; if (! dev -> start ) return - ENOMEM ;,0
717,"<S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd> ++ ; if <S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd> >= psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ) { psf <S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd> ) ; break <S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd> + ( psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ) { psf <S2SV_ModStart> + psf -> header. indx <S2SV_ModEnd> ) ) goto <S2SV_ModStart> - psf -> header. indx <S2SV_ModEnd> += psf -> header <S2SV_ModStart> - psf -> header. indx <S2SV_ModEnd> ; psf -> <S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd>, psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; psf -> header. indx <S2SV_ModEnd> ; psf -> <S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd> + psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ) ; psf -> <S2SV_ModStart> ( psf -> header. ptr",0
718,<S2SV_ModStart> out_mutex ; } ext4_inode_block_unlocked_dio ( inode ) ; inode_dio_wait ( inode ) ; down_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart> ioffset ) ; <S2SV_ModEnd> credits = ext4_writepage_trans_blocks <S2SV_ModStart> ) ; goto out_mmap <S2SV_ModEnd> ; } down_write <S2SV_ModStart> handle ) ; out_mmap : up_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModEnd> ext4_inode_resume_unlocked_dio ( inode,1
719,"<S2SV_ModStart> uint32_t midi_type ; uint32_t * tracks ; uint32_t * * track_size <S2SV_ModEnd> ; uint32_t end_tracks <S2SV_ModStart> no_tracks ) ; track_size = malloc ( sizeof ( uint32_t ) * track_size <S2SV_ModEnd> ; track_size = <S2SV_ModStart> ( midi_data ) ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> i ] ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 8 ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> ( midi_size < tmp_val <S2SV_ModEnd> ) { if <S2SV_ModStart> ( midi_data [ tmp_val <S2SV_ModEnd> - 1 ] <S2SV_ModStart> i ] += tmp_val <S2SV_ModEnd> ; midi_data <S2SV_ModStart> ( midi_data [ tmp_val <S2SV_ModEnd> - 1 ] <S2SV_ModStart> ( midi_data [ tmp_val <S2SV_ModEnd> - 1 ] <S2SV_ModStart> i ] -- ; track_size [ i ] = tmp_val <S2SV_ModEnd> ; midi_data += <S2SV_ModStart> i ] += tmp_val ; midi_data += tmp_val <S2SV_ModEnd> ; midi_data += <S2SV_ModStart> ; midi_data += tmp_val <S2SV_ModEnd> ; midi_size [ <S2SV_ModStart> ] ++ ; track_size [ i ] -- ; <S2SV_ModStart> i ] ++ ; track_size [ i ] -- <S2SV_ModStart> i ],",0
720,"<S2SV_ModStart> = max_t ( int <S2SV_ModEnd>, val * <S2SV_ModStart> = max_t ( int <S2SV_ModEnd>, val *",1
721,<S2SV_ModStart> * bh ; unsigned int table_len ; <S2SV_ModStart> -> b_data ; table_len = le32_to_cpu ( lvd -> mapTableLength ) ; if ( sizeof ( * lvd ) + table_len > sb -> s_blocksize ) goto out_bh ; if ( sizeof ( * lvd ) + table_len > sb -> s_blocksize ) goto out_bh <S2SV_ModEnd> ; i ++,0
722,"<S2SV_ModStart> long n ; image = 0 ; info = 0 ; <S2SV_ModStart> ""cannot <S2SV_blank> get <S2SV_blank> header\\n"" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ""cannot <S2SV_blank> get <S2SV_blank> info\\n"" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> 1, ( ""BMP <S2SV_blank> information: <S2SV_blank> len <S2SV_blank> %ld; <S2SV_blank> width <S2SV_blank> %ld; <S2SV_blank> height <S2SV_blank> %ld; <S2SV_blank> numplanes <S2SV_blank> %ld; <S2SV_blank> %ld; <S2SV_blank> %ld; <S2SV_blank> hres <S2SV_blank> %ld; <S2SV_blank> siz <S2SV_blank> %ld\\n"", JAS_CAST ( long <S2SV_ModEnd>, info -> <S2SV_ModStart> info -> len ), JAS_CAST ( long <S2SV_ModStart> info -> len ), JAS_CAST ( long <S2SV_ModStart> info -> depth ), JAS_CAST ( long <S2SV_ModEnd> ), JAS_CAST ( long <S2SV_ModStart> info -> len ), JAS_CAST ( long <S2SV_ModStart> info -> depth ), JAS_CAST ( long <S2SV_ModStart> info -> depth ), JAS_CAST ( long <S2SV_ModStart> info -> depth ), JAS_CAST ( long <S2SV_ModEnd> info -> len ), JAS_CAST ( long <S2SV_ModStart> info -> len ), JAS_CAST ( long <S2SV_ModStart> info -> hres ), JAS_CAST ( long <S2SV_ModStart>",0
723,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> dev ), func <S2SV_ModEnd>, line, <S2SV_ModStart> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"", func <S2SV_ModEnd>, line,",1
724,<S2SV_ModStart> ) ; } <S2SV_ModEnd> return 0 ;,0
725,"<S2SV_ModStart> g_tv_comment, FILENAME_comment",0
726,<S2SV_ModStart> ; if (! op -> type ) return - EINVAL ; if (,0
727,<S2SV_ModStart> = SIZE_T <S2SV_ModEnd> ; if (,0
728,"<S2SV_ModStart>, extent, height, <S2SV_ModStart> ""UnableToReadImageData"" ) ; <S2SV_ModEnd> height = sun_info <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; if ( sun_info. type == RT_ENCODED ) <S2SV_ModStart> sun_data ) ; <S2SV_ModEnd> p = sun_pixels",0
729,"<S2SV_ModStart>, krb5_principal client_principal, const char * tgt_realm <S2SV_ModStart> principal ), tgt_realm <S2SV_ModEnd> ) ; if",1
730,<S2SV_ModStart> = MagickFalse ; break <S2SV_ModEnd> ; } image,0
731,<S2SV_ModStart> ; newinet -> inet_opt <S2SV_ModEnd> = ireq ->,1
732,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
733,"<S2SV_ModStart>!= 0 ) { int tend_off = skb_transport_offset ( skb ) + tlen ; <S2SV_ModStart> ( csum, skb_checksum ( skb, tend_off, <S2SV_ModEnd> offset, 0 <S2SV_ModStart> ) ) ; }",1
734,"<S2SV_ModStart> pfn ) ; kvm_unpin_pages ( kvm, pfn, page_size ) ; <S2SV_ModStart> base_gfn, gfn - slot -> base_gfn",1
735,<S2SV_ModStart> 0x00 } ; if ( cmd -> msg_len > sizeof ( b ) - 4 ) return - EINVAL ;,1
736,<S2SV_ModStart> perf_event_context * event <S2SV_ModEnd> ) { ctx,0
737,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ; return ( <S2SV_ModStart> ; return ( <S2SV_ModEnd> value & 0xffffffff <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ) ; } <S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> [ 3 ] ; return <S2SV_ModEnd> ( value & <S2SV_ModStart> & 0xffffffff ) <S2SV_ModEnd> ; } <S2SV_null>,0
738,"<S2SV_ModStart> free_nid * i, * e <S2SV_ModStart> ; int err = - EINVAL ; bool ret = false <S2SV_ModStart> return false ; i = true ; spin_lock_lock ( & nm_slab, GFP_PTR ( sbi ) ; i -> nid = nid ; i -> state = NID_NEW ; i -> state = nid ; i -> state = true ; <S2SV_ModStart> return false <S2SV_ModEnd> ; if (",0
739,<S2SV_ModStart> ( ctx -> <S2SV_ModEnd> flags & 0,0
740,"<S2SV_ModStart> ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> ++ cons ; netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> extra. type ) ; netbk_fatal_tx_err ( vif",1
741,<S2SV_ModStart> ) ) ; hdr -> sadb_msg_reserved = 0 ;,1
742,"<S2SV_ModStart> ) return ; memset ( & r1, 0, sizeof ( r1 ) ) ;",1
743,"<S2SV_ModStart>, 1 ) ; luaL_checkstack ( L, h <S2SV_ModStart>, ""data <S2SV_blank> too <S2SV_blank> short"" ) ; ret = 0 ; if (! ret && pos > 0 ) { luaL_check ( L, ""data <S2SV_blank> too <S2SV_blank> short"" ) ; return - 1 ; } <S2SV_ModStart>, 2, <S2SV_ModEnd> 2 ) ; size <S2SV_ModStart> ) ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
744,<S2SV_ModStart> return 0 ; msg_len = sizeof ( * tptr ) ;,0
745,<S2SV_ModStart> -> data ; unsigned <S2SV_ModStart> body -> unit_size || len < sizeof ( struct oz_multiple_fixed ) - 1 <S2SV_ModStart> ( len - ( <S2SV_ModStart> struct oz_multiple_fixed ) - 1 ) <S2SV_ModEnd> ) / body,1
746,<S2SV_ModStart> ; # else <S2SV_ModEnd> uint64_t res ; # <S2SV_ModStart> = 0 ; <S2SV_ModEnd> return res,0
747,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; unlink",0
748,<S2SV_ModStart> s -> status == 0,0
749,<S2SV_ModStart> return res ; <S2SV_ModEnd> return 0 ;,1
750,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> ) ; } ext_size = sizeof ( struct ext4_extent_header ) + sizeof ( struct ext4_extent ) * le16_to_cpu ( neh -> eh_cpu ) ; memset ( bh -> b_data + ext_size, 0, inode -> s_size ) ;",0
751,<S2SV_ModStart> 3,0
752,<S2SV_ModStart> ; cmap_len = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> 0 x_origin = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> ; y_origin = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> endif image_w = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> ; image_h = get_tga_ushort <S2SV_ModEnd> ( & tga,1
753,<S2SV_ModStart> ; ssize_t ret ; if ( WARN_ON_ONCE (! ib_safe_file_access ( filp ) ) ) return - EACCES,1
754,<S2SV_ModStart> == CPUCLOCK_SCHED ) * tp = ns_to_timespec <S2SV_ModEnd> ( cpu. <S2SV_ModStart> cpu. sched ) ; else <S2SV_ModEnd> cputime_to_timespec ( cpu <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
755,<S2SV_ModStart> ; uint32 nstrips <S2SV_ModEnd> ; nstrips =,1
756,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = 0 <S2SV_ModStart> ) ) ; msg -> msg_namelen = sizeof ( * sin ) ;",0
757,"<S2SV_ModStart> * r ; lua_check_parser ( LLOG_ERR, 0, <S2SV_ModStart> * i ; func = APLOG_ERROR <S2SV_ModEnd> ( L, <S2SV_ModStart> -> size_to_module ) <S2SV_ModEnd> ; if <S2SV_ModStart> == APLOG_ERR ( 0 ) { ap_error ( 0, 0, APLOG_ERR, 0 ) ; }",0
758,<S2SV_ModStart> ; int error = 0 <S2SV_ModStart> &= PAGE_MASK ; if ( address < mmap_min_addr ) return - EPERM <S2SV_ModEnd> ; prev =,1
759,"<S2SV_ModStart> { umode_t mode <S2SV_ModEnd> ; error = <S2SV_ModStart> ; error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & mode <S2SV_ModStart>, & mode, & acl <S2SV_ModStart> if ( error <S2SV_ModEnd> ) return error <S2SV_ModStart> return error ; <S2SV_ModEnd> error = xfs_set_mode",1
760,"<S2SV_ModStart>, int optional, const char * rootfs <S2SV_ModStart> endif if ( safe_mount <S2SV_ModEnd> ( fsname, <S2SV_ModStart> MS_REMOUNT, data, data ) < 0",0
761,<S2SV_ModStart> = MagickFalse ; break <S2SV_ModEnd> ; } image,0
762,"<S2SV_ModStart> it_overrun = - 1LL <S2SV_ModEnd> ; ++ timr <S2SV_ModStart> info -> si_overrun = timer_to_int ( timr, info -> si_overrun ) <S2SV_ModEnd> ; } unlock_timer",0
763,,0
764,<S2SV_ModStart> struct static_key * once_key <S2SV_ModEnd> ) { static <S2SV_ModStart> ; __net_random_once_disable_jump ( once_key <S2SV_ModEnd> ) ; return,1
765,<S2SV_ModStart>,0
766,<S2SV_ModStart> ; if ( IPCB ( skb ) -> flags & IPSKB_DOREDIRECT <S2SV_ModEnd> &&! opt,1
767,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
768,"<S2SV_ModStart> struct trusted_key_payload * p ; struct trusted_key_payload * new_p ; struct trusted_key_options * new_o ; size_t datalen = prep -> datalen ; char * datablob ; int ret = 0 ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) return - ENOKEY ; <S2SV_ModStart> 0 ] ; <S2SV_ModEnd> if (!",1
769,"<S2SV_ModStart> v |= ( JAS_CAST ( uint_fast32_t, c ) <S2SV_ModEnd> << 24 )",1
770,<S2SV_ModStart> NULL ) { if ( skb -> len < ROSE_MAX_OFF ) { kfree_skb ( skb ) ; continue ; } <S2SV_ModStart> 2 ] ; if ( lci_o &&,0
771,<S2SV_ModStart> (! npages || base_gfn!= old. base_gfn,0
772,<S2SV_ModStart> ) ; if <S2SV_ModEnd> if (!,0
773,"<S2SV_ModStart>, path ; size_t start ; <S2SV_ModStart> len ) ) ; if ( end == __func__ ) break ; <S2SV_ModStart> = path ; <S2SV_ModEnd> end = fdt",0
774,"<S2SV_ModStart> char * buff ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } buff",1
775,"<S2SV_ModStart> } if ( data_body == NULL && in_bio == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_NO_CONTENT ) ; goto err ; } if ( <S2SV_ModStart> } if ( <S2SV_ModEnd> in_bio!= NULL <S2SV_ModStart>!= NULL ) <S2SV_ModEnd> { bio =",1
776,<S2SV_ModStart> server. cache_clients <S2SV_ModEnd> ; server.,0
777,"<S2SV_ModStart> } if ( options -> flags & ( UV_PROCESS_SETUID | UV_PROCESS_SETGID ) ) { SAVE_ERRNO ( 0, NULL ) ; } if (",0
778,"<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> EINVAL ; } if ( rlen > MAX_XFER_SIZE ) { warn ( ""i2c <S2SV_blank> rd: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", rlen ) ; return - EOPNOTSUPP ; } <S2SV_ModEnd> mutex_lock ( & <S2SV_ModStart> ) ; } <S2SV_ModEnd> mutex_lock",0
779,"<S2SV_ModStart>, - 1 ) <S2SV_ModEnd> ; client ->",0
780,<S2SV_ModStart> book -> dim && i < n,1
781,<S2SV_ModStart> } if ( outputbuffer <S2SV_ModEnd> ( outputbuffer ),0
782,<S2SV_ModStart> == - EEXIST || ret == - EOVERFLOW,1
783,<S2SV_ModStart> fp ) ; spin_lock ( & unix_gc_lock ) ; <S2SV_ModStart> unix_sk ( s <S2SV_ModEnd> ) ; BUG_ON <S2SV_ModStart> unix_tot_inflight -- ; } fp -> f_cred -> user -> unix_inflight -- ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
784,"<S2SV_ModStart> size_t chanmap_size = SF_MIN ( <S2SV_ModStart> sf. channels, layout_tag & 0xffff )",1
785,<S2SV_ModStart> cm -> x_w <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) { sf -> vpx_decode_f_f_fp <S2SV_ModEnd> ( sf -> <S2SV_ModStart> 0 ) ; <S2SV_ModEnd>  sf,0
786,<S2SV_ModStart> ms ) { uint32_t <S2SV_ModEnd> nestsize = ( <S2SV_ModStart> nestsize = ( uint32_t <S2SV_ModEnd> ) ms ->,1
787,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
788,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
789,<S2SV_ModStart> -> xrefs = safe_calloc ( <S2SV_ModEnd> sizeof ( xref_t,1
790,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
791,"<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ) <S2SV_ModStart> ( opt ) { atomic_sub ( <S2SV_ModEnd> opt -> tot_len <S2SV_ModStart> opt -> tot_len, & sk -> tot_len <S2SV_ModEnd> ) ; }",0
792,"<S2SV_ModStart>, * tmpin = NULL, * tmpout",0
793,<S2SV_ModStart> ; val = x -> msg_namelen <S2SV_ModEnd> ; if (,0
794,<S2SV_ModStart> sctp_v6_addr ) ; sctp_init <S2SV_ModEnd> ( &,0
795,"<S2SV_ModStart> cs_flags ) ; hook_can_register ( check_registration_flags ( ""ANOPE_COMPAT"", & chansvs. conf ) ;",0
796,"<S2SV_ModStart> ) { struct in_device * idev <S2SV_ModEnd> = ( ( <S2SV_ModStart> ) -> ifa_dev <S2SV_ModEnd> ; struct netdev_notifier_info <S2SV_ModStart> netdev_notifier_info info ; if ( idev -> dead ) return NOTIFY_DONE ; <S2SV_ModStart> & info, idev ->",1
797,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto out <S2SV_ModEnd> ; if (,0
798,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> log2SV_null> static,0
799,<S2SV_ModStart> val ) { int temp_size = 500 ; char * temp = malloc ( temp_size ) <S2SV_ModEnd> ; char *,0
800,<S2SV_ModStart> task ) { <S2SV_ModEnd> del_timer ( & <S2SV_ModStart> -> timer ) <S2SV_ModEnd> ; complete (,1
801,<S2SV_ModStart> ; out_name = safe_calloc <S2SV_ModEnd> ( strlen (,0
802,"<S2SV_ModStart> NULL ) { if <S2SV_ModEnd> ( errno == <S2SV_ModStart> == ENOMEM ) <S2SV_ModEnd> log_warn ( ""lldp""",0
803,<S2SV_ModStart> object + size > bplist -> offset,0
804,<S2SV_ModStart>,0
805,<S2SV_ModStart> all_channels_lock ) ; put_net ( pch -> chan_net ) ; pch -> chan_net = NULL ;,1
806,"<S2SV_ModStart> btrfs_dir_item * di = NULL <S2SV_ModStart> - ENOMEM ; path -> count = 0 ; if (! di ) ret = 0 ; if (! di ) ret = btrfs_xattr ( trans, name_len, name, name_len, name_len, name_len, 0 ) ; if (! di && <S2SV_ModEnd> ( flags & <S2SV_ModStart> & XATTR_REPLACE ) ) ret = - ENODATA ; else if ( di ) ret = btrfs_delete_name <S2SV_ModEnd> ( trans, <S2SV_ModStart>, path, name_len, <S2SV_ModEnd> di ) ; <S2SV_ModStart> out ; } if ( flags & XATTR_REPLACE ) { ret = btrfs_lookup_is_xattr ( inode ) ; di = btrfs_xattr ( inode ), name_len, name_len, name_len, name_len, name_len, 0 ) ; di = 0 ; if (! di && <S2SV_ModEnd> ( ret ) <S2SV_ModStart> out ; } ret = btrfs_delete_ino ( inode_ino ( inode ), name_len, name_len, name_len, name_len, name_len, name_len, name_len ) ; if ( ret == - EOVERFLOW ) { ret = 0 ; goto out ; } ret = btrfs",0
807,"<S2SV_ModStart> > 0xbf ) { <S2SV_ModStart> return 1 ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto err ; } <S2SV_ModStart> ) ) ) { <S2SV_ModStart> goto err ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto beach ; } <S2SV_ModStart> buf_len ) ) { <S2SV_ModStart> goto beach ; } <S2SV_ModStart> -> txt ) + 10 <S2SV_ModStart> ++ ) { int optxtlen = strlen ( op -> txt ) ; <S2SV_ModStart> -> txt + optxtlen, R_ASM_BUFSIZE - optxtlen <S2SV_ModEnd>, ""%d <S2SV_blank> "",",1
808,"<S2SV_ModStart> client -> proxy ) ; g_byte_array_free ( client -> auth_buffer, TRUE",1
809,<S2SV_ModStart> = - plane <S2SV_ModEnd> ; return ;,0
810,<S2SV_ModStart> ; if ( key_is_negative ( key <S2SV_ModEnd> ) ) return,1
811,<S2SV_ModStart>,0
812,<S2SV_ModStart>,0
813,<S2SV_ModStart> { vpn_packet_t outpkt ; if ( len > sizeof outpkt. data ) return,1
814,<S2SV_ModStart> vmx_vpid_bitmap ) ; <S2SV_ModEnd> for ( msr,0
815,<S2SV_ModStart> = 0 ; vstart_off += vdaux <S2SV_ModEnd> ; if (,0
816,"<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ), 0 )",0
817,<S2SV_ModStart> rc -> avg_frame_bandwidth <S2SV_ModEnd> ) ; #,0
818,<S2SV_ModStart> ; if ( err,0
819,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
820,<S2SV_ModStart> INDENT_INCR ; } if ( tbl -> indent < 0 ) tbl -> indent = 0 ; <S2SV_ModStart> -= INDENT_INCR ; if ( offset < 0 ) offset = 0 ;,1
821,"<S2SV_ModStart> + tail ; size_t ss = sst -> sst_dirlen < h -> h_max_stream? CDF_SEC_SIZE ( h ) : CDF_SEC_SIZE ( h ) ; <S2SV_ModStart> b ), ss <S2SV_ModEnd> * sst -> <S2SV_ModStart> b ), ss <S2SV_ModEnd> * sst ->",0
822,"<S2SV_ModStart> : # line 113 <S2SV_ModEnd> ""hex_grammar.y"" { RE_AST <S2SV_ModStart> } # line 1337 <S2SV_ModEnd> ""hex_grammar.y"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""hex_grammar.y"" { ( <S2SV_ModStart> } # line 122 <S2SV_ModEnd> ""hex_grammar.y"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""hex_grammar.y"" { incr_ast_levels ( <S2SV_ModStart> } # line 97 <S2SV_ModEnd> ""hex_grammar.y"" break ; <S2SV_ModStart> } # line 1392 <S2SV_ModEnd> ""hex_grammar.y"" break ; <S2SV_ModStart> : # line 147 <S2SV_ModEnd> ""hex_grammar.y"" { incr_ast_levels ( <S2SV_ModStart> } # line 97 <S2SV_ModEnd> ""hex_grammar.y"" break ; <S2SV_ModStart> } # line 147 <S2SV_ModEnd> ""hex_grammar.y"" { incr_ast_levels ( <S2SV_ModStart> } # line 97 <S2SV_ModEnd> ""hex_grammar.y"" break ; <S2SV_ModStart> : # line 1337 <S2SV_ModEnd> ""hex_grammar.y"" { RE_grammar.y"" break ; <S2SV_ModStart> : # line 147 <S2SV_ModEnd> ""hex_grammar.y"" break ; <S2SV_ModStart> : # line 918 <S2SV_ModEnd> ""hex_grammar.y"" { incr_ast_levels ( <S2SV_ModStart> } # line 1",0
823,"<S2SV_ModStart> 0 ] ; # if CONFIG_VP8_HIGHBITS <S2SV_ModEnd> ( b, <S2SV_ModStart> d ) ; # endif <S2SV_ModStart> return 0 ; } # endif",0
824,"<S2SV_ModStart> ) ) ; memset ( buff, 0, sizeof ( data ) - 1",0
825,<S2SV_ModStart> ; if ( key_is_positive ( key <S2SV_ModEnd> ) ) zap,1
826,"<S2SV_ModStart> ) -> filter ; memset ( & uf, 0, sizeof ( uf ) )",1
827,<S2SV_ModStart> (! data_end <S2SV_ModEnd> ) { int,0
828,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> ) ; } exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
829,<S2SV_ModStart> -> peer. auth_capable = new -> peer. auth_capable ; asoc -> peer.,1
830,<S2SV_ModStart> } if ( <S2SV_ModEnd> if (!,0
831,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( cc0 <S2SV_ModStart> % rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""PredictorEncodeTile"", ""%s"", ""(cc0%rowsize)!=0"" ) ; return 0 ; } <S2SV_ModEnd> while ( cc",1
832,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
833,"<S2SV_ModStart> input_data, size_t input_forwards_size, size_t input_forwards_size <S2SV_ModEnd>, int flags <S2SV_ModStart> { if ( input == 0 && ( input == 0 && * max_bytes_matched > max_bytes_matched ) ) { <S2SV_ModStart> >= max_bytes_matched ) { <S2SV_ModStart> input_matched ) ; } else { <S2SV_ModStart> >= max_bytes_matched ) { <S2SV_ModStart> RE ; } else { <S2SV_ModStart> >= max_bytes_backwards_matched ) yr_matched = ( int ) yr_min ( input + 1 ) yr_backwards_backwards_size <S2SV_ModEnd>, RE_SCAN_LIMIT ) <S2SV_ModStart> >= max_bytes_matched ) { <S2SV_ModStart> RE_backwards_backwards_backwards_backwards_size, RE_SCAN_SCAN_SCAN_LIMIT ) ; } else { <S2SV_ModStart> = TRUE ; } else { <S2SV_ModStart> >= max_bytes_matched ) yr_matched ; } else { <S2SV_ModStart> = TRUE ; } else { <S2SV_ModStart> = TRUE ; } else { <S2SV_ModStart> = TRUE ; } <S2SV_ModStart> > <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>",0
834,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> int best_sse = UINT_MAX <S2SV_ModStart> int ret ; memset <S2SV_ModEnd> ( x -> <S2SV_ModStart> mode ) ; memcpy <S2SV_ModEnd> ( x ->,0
835,"<S2SV_ModStart> svm, AC_VECTOR ) ; set_exception_intercept ( svm, DB_VECTOR",0
836,<S2SV_ModStart> -> st_size = 1 ; <S2SV_ModEnd> goto error,0
837,"<S2SV_ModStart> sst, const cdf_directory_t * root_storage <S2SV_ModEnd> ) { cdf_summary_info_header_t <S2SV_ModStart> break ; } if ( root_storage ) { <S2SV_ModStart> = cdf_clsid_to_mime ( root_storage -> d_storage_uuid <S2SV_ModEnd>, clsid2desc ) <S2SV_ModStart> - 2 ; } <S2SV_ModStart>, count, root_storage <S2SV_ModEnd> ) ; free",1
838,<S2SV_ModStart> NULL ; } if ( u1_coded == 0 ) { return I264_FRAME_FRAME_WIDTH ; },0
839,<S2SV_ModStart> -> length ) ; if ( err ) return - EFAULT,1
840,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args = ( vpx_codec_alg_priv_t * ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> return VPX_CODEC_INVALID_PARAM ; <S2SV_ModEnd> if ( params <S2SV_ModStart> == 0 ) { VPX_CODEC_ERROR_INVALID_PARAM ; <S2SV_ModStart> return VPX_CODEC_INVALID_PARAM ; } else { VPX_CODEC_INVALID_PARAM ; <S2SV_ModStart> return VPX_CODEC_INVALID_PARAM ; } if ( params -> current_fb_id = 1 ; <S2SV_ModStart> ) { VPX_CODEC_INVALID_PARAM ; } else { VPX_CODEC_PARAM <S2SV_ModEnd> return VPX_CODEC_INVALID_PARAM ; <S2SV_ModStart> vp9_data_id <S2SV_ModEnd> ; } <S2SV_null>",0
841,<S2SV_ModStart> if ( prev && <S2SV_ModEnd> ( FRAG6_CB ( <S2SV_ModStart> ) - offset <S2SV_ModEnd> > 0 ) <S2SV_ModStart> > 0 ) goto discard_fq ; if <S2SV_ModEnd> ( next && <S2SV_ModStart> < end ) goto discard_fq ; <S2SV_ModEnd> FRAG6_CB ( skb <S2SV_ModStart> - 1 ; discard_fq : fq_kill ( fq ) ;,1
842,<S2SV_ModStart> { uint16 bitspersample = 0,0
843,"<S2SV_ModStart> { if ( archive_set_symlinks!= NULL <S2SV_ModEnd> ) { archive_set_error ( & <S2SV_ModStart> ) ) { archive_set_error ( & a -> archive, ARCHIVE_ISDIR ) ; if ( <S2SV_ModEnd> == NULL ) <S2SV_ModStart> 0 ) { archive_set_error ( & a -> archive, ARCHIVE_SUCCESS ) ; } else { archive_set_error ( & a -> archive, ARCHIVE_FAILURE ) ; } else { archive_set_error ( & a -> archive, ARCHIVE_SUCCESS ) ; if ( & a -> archive_set ) { archive_set_error ( & a -> archive_error_set_error ( & a -> archive, ARCHIVE_SUCCESS ) ; } <S2SV_ModEnd> if ( & <S2SV_ModStart> ) ) { archive_set_set_error ( & a -> archive, ARCHIVE_FAILURE <S2SV_ModEnd> ) ; }",0
844,"<S2SV_ModStart> ; if ( safe_mount ( hostpath, path, 0, MS_BIND, NULL, rootfs -> path? rootfs -> mount : <S2SV_ModEnd> NULL )!=",1
845,<S2SV_ModStart> * i_count ; unsigned char * i_count ; <S2SV_ModStart> uint16_t i_count ; if ( iinfo -> i_len > bs ) goto out ; if ( udf_read ( inode ) -> i_sb ) goto out_alloc_offset ; <S2SV_ModStart> < 0 ) { <S2SV_ModEnd> err ( &,0
846,<S2SV_ModStart> tx_size ) { memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ) ) { memcpy <S2SV_ModEnd> ( lfm,0
847,<S2SV_ModStart> dst_size ) { 4 <S2SV_ModEnd> return - <S2SV_ModStart> ; if ( data >= data_end <S2SV_ModEnd> ) return - <S2SV_ModStart> - 1 ; goto out <S2SV_ModEnd> ; if (,0
848,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_line_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) ; <S2SV_ModStart> t1_buf_array, t1_line_array ) ; alloc_array ( t1_line, strlen ( t1_buf_array ) + 1, T1_BUF_SIZE",1
849,<S2SV_ModStart> mq_ops ) { <S2SV_ModEnd> spin_lock_lock ( &,0
850,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
851,<S2SV_ModStart> ) ; return!,0
852,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF <S2SV_ModStart> / 2 ; if (! <S2SV_ModStart>, cc ) ) return 0 <S2SV_ModStart> wc ) ; return 1 ;",1
853,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
854,"<S2SV_ModStart> ; int err ; struct ip_options_rcu * inet_opt <S2SV_ModStart> = 0 ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_by_user ( sk ) ) ; <S2SV_ModStart> ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> &&! rt",0
855,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
856,<S2SV_ModStart> * mgr_hdl ; <S2SV_ModEnd> memset ( s_path <S2SV_ModStart> ( c_path ) <S2SV_ModEnd> ) ; if,0
857,<S2SV_ModStart> == NULL || replySize < 0,0
858,"<S2SV_ModStart> ""`%s\'"", option ) ; page_geometry = DestroyString ( page_geometry",1
859,<S2SV_ModStart> ; val = x -> msg_namelen <S2SV_ModEnd> ; if (,0
860,<S2SV_ModStart> if ( key_key && key_data_inc,0
861,"<S2SV_ModStart> OP_ENDCATCH ) ; emit ( J, F, OP_ENDTRY ) ;",1
862,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_row_idx <S2SV_ModStart> return ; } LIBXSMM_ASSERT ( 0!= l_row && 0!= l_column ) ;",1
863,<S2SV_ModStart> ] ) ; if (! rio. datalen + 1 ) return ;,0
864,"<S2SV_ModStart> uint8 result ; uint32 <S2SV_ModEnd> length ; STREAM <S2SV_ModStart> ; STREAM s ; struct stream packet <S2SV_ModStart> return False ; packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> from <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
865,"<S2SV_ModStart> ; cleanup : if ( status == NULL ) status = ""UNKNOWN_REASON"" <S2SV_ModEnd> ; if (",1
866,<S2SV_ModStart> ( c == 0 ) <S2SV_ModEnd> ; while (,0
867,<S2SV_ModStart> ) ) ; if ( ret == 0 ) return - EINVAL ;,0
868,<S2SV_ModStart> * rsize >= 18 <S2SV_ModEnd> && rdesc [,1
869,<S2SV_ModStart> & new_map ) <S2SV_ModEnd> ) goto out <S2SV_ModStart> out ; } if ( ret < 0 ) goto out ;,0
870,<S2SV_ModStart> + 0 ; return <S2SV_ModEnd> } } if,0
871,"<S2SV_ModStart> sr ) { <S2SV_ModEnd> uint16_t StructSize ; <S2SV_ModStart> ) ; } smb_ofile_flush ( sr, <S2SV_ModEnd> sr -> fid_ofile <S2SV_ModStart> sr -> fid_ofile <S2SV_ModEnd> ) ; (",1
872,<S2SV_ModStart> uint_fast32 <S2SV_ModEnd> * streams ;,0
873,<S2SV_ModStart> -> yv12 ; memcpy <S2SV_ModEnd> ( pc -> <S2SV_ModStart> 1 ) ; memcpy <S2SV_ModEnd> ( pc,0
874,"<S2SV_ModStart> addrtype = TIPC_ADDR_ID ; memset ( & addr -> addr, 0, sizeof ( addr -> addr ) )",1
875,"<S2SV_ModStart> ( user_alloc && ( <S2SV_ModStart> PAGE_SIZE - 1 ) ) ||! access_ok ( VERIFY_WRITE, mem -> userspace_addr, mem -> memory_size",1
876,"<S2SV_ModStart> 6 ) ) { MATLAB_KO : clone_info = DestroyImageInfo ( clone_info ) ; <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart> ""ImproperImageHeader"" ) ; }",0
877,<S2SV_ModStart> } if ( tmp_line_len >= 1 && <S2SV_ModStart> ; if ( tmp_line_len >= 1 && <S2SV_ModStart> ; } } \\\n} <S2SV_ModEnd> if ( strncasecmp,1
878,"<S2SV_ModStart> u ) { const char * p ; char * p ; char * p = len ; char * p ; char * p ; char * p = len ; char * p ; char * p ; if (! buf ) return NULL <S2SV_ModEnd> ; } if ( <S2SV_ModStart> p ) { if (! buf ) return NULL ; } else { p = ensure ( u ) ; return NULL ; } <S2SV_ModStart> p, len <S2SV_ModEnd> p <S2SV_ModStart> p, len ) ; if (! buf ) return NULL <S2SV_ModEnd> ; } <S2SV_ModStart> p ) { <S2SV_ModEnd> if (! <S2SV_ModStart> p ) ; } return NULL ; }",0
879,"<S2SV_ModStart> { if ( user_sid_size > ( ( record_data_data_size - 4 ) - 4 ) ) { libcerror_set ( error, LIBLogDebug_ERROR_DOMAIN_DOMAIN_DOMAIN_VALUE_OF_OF_BOUNDS, ""%s: <S2SV_blank> value <S2SV_blank> value <S2SV_blank> value <S2SV_blank> value <S2SV_blank> bounds."", function ) ; goto on_error ; } <S2SV_ModStart> 0 ) { if ( ( ( ( record_data_size > ( ( record_data_size - 4 ) - 4 ) - 4 ) ) { libcerror_error_set ( error, ""%s: <S2SV_blank> value <S2SV_blank> value <S2SV_blank> of <S2SV_blank> value <S2SV_blank> value <S2SV_blank> of <S2SV_blank> value <S2SV_blank> value <S2SV_blank> value <S2SV_blank> bounds."", function ) ; goto on_error ; } if (",0
880,"<S2SV_ModStart> WaveHeader WaveHeader ; int format_chunk = 0 ; <S2SV_ModStart>, format ; if ( format_chunk ++ ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",1
881,<S2SV_ModStart> ; uint32_t numChannels = 0 <S2SV_ModStart> numChannels < 1 || numChannels > 1024,0
882,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr ) ;,0
883,<S2SV_ModStart> ~ SIGNAL_TIMER_IFLG_RUNNING ; list_del_init ( & timeri -> active_list ) ; list_del_init ( & timeri -> ack_list ) ;,0
884,<S2SV_ModStart> ) { char * st <S2SV_ModEnd> ; int <S2SV_ModStart> = 0 <S2SV_ModEnd> ; break ;,0
885,<S2SV_ModStart> else if ( anope_flags_compat && <S2SV_ModStart> else if ( anope_flags_compat && <S2SV_ModStart> else if ( anope_flags_compat &&,1
886,<S2SV_ModStart> -> buffer ; if (! ctx -> gf128 ) return - ENOKEY ;,1
887,"<S2SV_ModStart> ; if ( strcmp ( sub_demuxer -> name, ""srt"" ) && strcmp ( sub_demuxer -> name, ""ass"" ) ) goto error ; if (",1
888,<S2SV_ModStart> ; int ret ; k5_data = 0 ; <S2SV_ModStart> return 0 ; } if (! tbuf ) { if (! retval ) return KRB5_ERROR ; <S2SV_ModStart> ( inbuf == 0 || inbuf == 0 && inbuf. data == 0 ) { error = 0 ; } status = 0 ;,0
889,"<S2SV_ModStart> write_literal ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) { return vpx_write_literal <S2SV_ModEnd> ( w,",0
890,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; } ret",1
891,<S2SV_ModStart> dptr ++ = ROSE_CALL_REQ_ADDR_LEN_VAL <S2SV_ModEnd> ; memcpy (,1
892,<S2SV_ModStart> = new_ns ; new_ns -> mounts ++ ;,1
893,<S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( &,0
894,<S2SV_ModStart> ; zip_object_handlers. get_gc = php_zip_get_gc ; zip_object_handlers.,1
895,<S2SV_ModStart> case RXE_MEM_TYPE_FMR : if <S2SV_ModEnd> ( mem -> <S2SV_ModStart> mem -> length > mem -> length ) return - EFAULT ; return <S2SV_ModEnd> 0 ; default,0
896,"<S2SV_ModStart> = 0 ; ND_TCHECK2 ( * dp, sizeof ( * ni6 ) ) ; <S2SV_ModStart> ) + 4 ; ND_TCHECK ( cp [ 0 ] )",1
897,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",1
898,<S2SV_ModStart> sent = 0 <S2SV_ModEnd> ; smb_msg.,1
899,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> buffer_pipe_buf_get ( struct <S2SV_ModStart> -> private ; if ( ref -> ref > INT_MAX / 2 ) return false ; <S2SV_ModStart> ref ++ ; return true ;,1
900,<S2SV_ModStart> fs -> clusters + <S2SV_ModEnd> 1 ) get_fat,1
901,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
902,<S2SV_ModStart> sk_nulls_node ) ; sk_nulls_node_init ( & sk -> sk_nulls_node ) ;,1
903,<S2SV_ModStart> } } } <S2SV_ModEnd> } else {,0
904,<S2SV_ModStart> (! mm ||! mm -> env_end,1
905,"<S2SV_ModStart> inode * inode, int relocated ) { int relocated = relocated? relocated : 0 ; <S2SV_ModEnd> int result = <S2SV_ModStart>, inode, flags <S2SV_ModEnd>, inode,",0
906,<S2SV_ModStart> * inotify_new_group ( <S2SV_ModEnd> unsigned int max_events <S2SV_ModStart> -> inotify_data. fa = NULL <S2SV_ModEnd> ; group -> <S2SV_ModStart> -> inotify_data. user = get_user ( ) <S2SV_ModEnd> ; if (,0
907,<S2SV_ModStart> [ p ] && in -> linesize [ p ],1
908,"<S2SV_ModStart> ) ; } if ( pcount!= 0 ) ereport ( ERROR, ( errcode ( ERR_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> (%d)"", ( int ) ) ) ;",0
909,<S2SV_ModStart> ( screen ) <S2SV_ModEnd> free ( screen,0
910,"<S2SV_ModStart> SCALAR_VALUE ) { coerce_reg_to_size ( & <S2SV_ModStart> [ value_regno ], size <S2SV_ModEnd> ) ; }",1
911,<S2SV_ModStart> } bufp += stripsize <S2SV_ModEnd> ; int32,0
912,<S2SV_ModStart> base_name ) ; char need_to_append_dot ; struct search_domain * dom ; if (! base_len ) return NULL ; <S2SV_ModEnd> need_to_append_dot = base_name <S2SV_ModStart> : 1 ; <S2SV_ModEnd> for ( dom,1
913,"<S2SV_ModStart> ) ) { if <S2SV_ModEnd> ( delay,",0
914,<S2SV_ModStart> goto out ; <S2SV_ModEnd> if (!,0
915,"<S2SV_ModStart> number_colormaps, number_planes, number_planes_filled <S2SV_ModStart> -> rows ; number_planes_filled = ( number_planes % 2 == 0 )? number_planes : number_planes + 1 ; <S2SV_ModStart> ( number_pixels * number_planes_filled <S2SV_ModEnd> )!= ( <S2SV_ModStart> ( number_pixels * number_planes_filled <S2SV_ModEnd> ) ) ThrowReaderException <S2SV_ModStart> -> rows * number_planes_filled <S2SV_ModEnd> ; pixel_info =",0
916,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> UINT32 originalSize ; if (! context ) return FALSE ; <S2SV_ModStart> == 0 ) { if ( context -> priv -> PlaneBuffersLength < originalSize ) return FALSE ; <S2SV_ModStart> 0xFF ) ; } <S2SV_ModStart> < originalSize ) { if (! <S2SV_ModStart> i ], context -> priv -> PlaneBuffersLength, originalSize ) ) return FALSE ; } else { if ( context -> priv -> PlaneBuffersLength < originalSize ) return FALSE ; <S2SV_ModEnd> CopyMemory ( context <S2SV_ModStart> originalSize ) ; } <S2SV_ModStart> planeSize ; } return TRUE ;",1
917,<S2SV_ModStart> policy ) { if (! inode_owner_or_capable ( inode ) ) return - EACCES ;,1
918,,0
919,<S2SV_ModStart>. cmp_data. match_data <S2SV_ModEnd> ; if (,0
920,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) -> iif ) ; * addr_len = sizeof ( * sin6,1
921,"<S2SV_ModStart> ) ) ) { applog ( LOG_WARNING, ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> bin"", __func__ ) ; pool_failed ( pool ) ; return false ; } <S2SV_ModEnd> cb1 = (",0
922,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, length )",0
923,"<S2SV_ModStart> size ) { size_t res ; if ( check_mul_overflow ( num, size, & res ) ) abort ( ) ; void * ptr ; <S2SV_ModEnd> ptr = malloc <S2SV_ModStart> = malloc ( res <S2SV_ModEnd> ) ; if <S2SV_ModStart> '\\0', ( res <S2SV_ModEnd> ) ) ;",1
924,<S2SV_ModStart> ) ; } if <S2SV_ModEnd> ( ioc ->,0
925,<S2SV_ModStart> * res ; Py_TYPE_TypeError <S2SV_ModEnd> * res <S2SV_ModStart> ) ) { <S2SV_ModEnd> Py_TYPE,0
926,<S2SV_ModStart>,0
927,<S2SV_ModStart> ) { struct perf_event_event_event * event ; u64 <S2SV_ModEnd> * event <S2SV_ModStart> - 1 ; struct perf_event_event_event_event_event_event_ctx * ctx ; <S2SV_ModStart> - arg ; <S2SV_ModEnd> return ret ;,0
928,<S2SV_ModStart> sacked_out ) ; if ( unlikely (! tp -> prior_cwnd ) ) return ;,0
929,<S2SV_ModStart>,0
930,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> crypto_alloc_put ( void <S2SV_ModStart> mask ) ; crypto_free ( name ) ; return err ;,0
931,<S2SV_ModStart> -> ctx -> uid_size <S2SV_ModEnd> ) { return -,0
932,"<S2SV_ModStart> c -> tile_width <S2SV_ModEnd>, 16 ) <S2SV_ModStart>, 16 ) * 3",1
933,"<S2SV_ModStart>, ivbuf, NULL <S2SV_ModEnd> ) ; }",0
934,,1
935,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> set_net_set ( s,0
936,"<S2SV_ModStart> p ) { return <S2SV_ModEnd> chdlc_print ( ndo <S2SV_ModStart>, p, h -> len <S2SV_ModEnd> ) ; }",1
937,<S2SV_ModStart> (! rc <S2SV_ModEnd> && tcon ),1
938,<S2SV_ModStart> -> len && SKB_EXT_ERR ( skb ) -> opt_stats <S2SV_ModEnd> ) put_cmsg (,1
939,"<S2SV_ModStart> ) ) ; raptor_sax2_set_option ( rdf_xml_parser -> sax2, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES, NULL, RAPTOR_OPTIONS_GET_NUMERIC ( rdf_parser, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES ) ) ;",1
940,<S2SV_ModStart> { if (! SSL_R_UNEXPECTED_MESSAGE <S2SV_ModEnd> ) { al,0
941,<S2SV_ModStart> { return SECURE_ELEMENT_ERROR_NPE ; } if ( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE ) { return SECURE_ELEMENT_ERROR_BUF_SIZE,1
942,,0
943,<S2SV_ModStart> = ucounts ; new_ns -> mounts = 0 ; new_ns -> pending_mounts = 0 ;,1
944,"<S2SV_ModStart> += dif ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
945,<S2SV_ModStart>,0
946,<S2SV_ModStart>. dimensions ; unsigned int limit_r_end = ( r -> begin < actual_size? r -> end : actual_size,0
947,<S2SV_ModStart> ; if ( timer_count < 0 ) return ; packet_count = 0 ;,0
948,"<S2SV_ModStart> struct llc_pktinfo info ; memset ( & info, 0, sizeof ( info ) )",1
949,"<S2SV_ModStart> void get_mb_writer ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * tp, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> ) { const vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> i ; const vpx_writer <S2SV_ModEnd> * tp = <S2SV_ModStart> i ] ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ; } vpx_write <S2SV_ModEnd> ( w,",0
950,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ; <S2SV_ModStart> 0 } ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 } ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
951,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct dev *,0
952,"<S2SV_ModStart> ret, n ; int num_descriptors ; size_t offset = offsetof ( struct hid_descriptor, desc ) <S2SV_ModStart> dev ; } if ( hdesc -> bLength < sizeof ( struct hid_descriptor ) ) { dbg_hid ( ""hid <S2SV_blank> descriptor <S2SV_blank> is <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return - EINVAL ; } <S2SV_ModStart> hdesc -> bLength - n ++ <S2SV_ModEnd> ; n ++",0
953,<S2SV_ModStart> ND_TCHECK ( * ext <S2SV_ModEnd> ) { UNALIGNED_MEMCPY,0
954,"<S2SV_ModStart> group_dead ) ; if ( group_dead ) audit_exit ( ) ; if ( group_dead ) audit_exit ( ) ; if ( unlikely ( group_dead ) ) audit_exit ( tsk ) ; if ( unlikely ( group_dead ) ) audit_exit ( ) ; exit_exit ( tsk ) ; exit_exit ( tsk ) ; exit_exit ( tsk ) ; exit_exit ( tsk ) ; exit_io ( tsk ) ; exit_io ( ) ; exit_exit ( tsk ) ; exit_exit ( tsk ) ; exit_io ( ) ; exit_io ( ) ; exit_context ( tsk ) ; if ( group_dead ) module ) ; if ( group_dead &&! tsk -> module ) module ) module_exit ( tsk ) ; exit_exit ( tsk ) ; exit_thread ( tsk ) ; module ) ; exit_exit ( tsk ) ; exit_exit ( tsk, 1 ) ; exit_fs ( tsk ) ; # ifdef CONFIG_C ( tsk -> module ) ; module ) ; module_put ( tsk -> module ) ; exit_put ( tsk, group_dead ) ;",0
955,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void * <S2SV_ModStart> data ) { <S2SV_ModEnd> add_preferred_base_object ( name <S2SV_ModStart> |= OBJECT_ADDED ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
956,<S2SV_ModStart> = 0 ; if (! jas_samples ( cmpt_t ) ) { break ; },0
957,<S2SV_ModStart> ) ; goto err_free_urb,0
958,"<S2SV_ModStart> x1 ; memcpy ( x, x1, x1, x1, x1, x1 ) ; x1 = x2 ; if ( x2 == x2 ) { x2 = x -> w2 ; }",0
959,<S2SV_ModStart> ( tag == ASN1_EOC <S2SV_ModEnd> ) { if <S2SV_ModStart> <= 0x7f ) goto check_length ; <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> > sizeof ( len <S2SV_ModEnd> ) - 1 <S2SV_ModStart> goto data_overrun_error ; len = 0 ; for ( <S2SV_ModEnd> ; n > <S2SV_ModStart> ] ; } check_length : if ( len > datalen - dp ) goto data_overrun_error ;,1
960,<S2SV_ModStart> ) val ; <S2SV_ModEnd> memset ( ptr,1
961,<S2SV_ModStart> mntent ) { if ( mnt -> mnt + mnt_dir ) { mount = <S2SV_ModEnd> mntent *,0
962,"<S2SV_ModStart> PHP_SHA512_CTX context ; if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_SHA256_CTX context ; if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_MD1_CTX context ; if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_MD5_CTX context ; if ( sig_len < sizeof ( buf ) ) { spprintf ( & context, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_MD5_CTX context ; if ( sig_len < sizeof ( buf ) ) { read_size = sizeof ( buf ) ; } return FAILURE ; } return FAILURE ; }",0
963,<S2SV_ModStart> ] <= max && value [ n ] - min < field -> maxusage <S2SV_ModStart> && field -> value [ n ] - min < field -> maxusage &&,0
964,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
965,<S2SV_ModStart> if ( argReg > <S2SV_ModEnd> regsz ) { <S2SV_ModStart> regsz ) { return ;,1
966,"<S2SV_ModStart> ) ) ; rb_hash_a ( env, remote_name, NULL",0
967,"<S2SV_ModStart> 0 ) ; args -> rmtvaluelen <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> -> i_mount, args -> rmtvaluelen <S2SV_ModEnd> ) ; if <S2SV_ModStart> -> valuelen = args -> rmtvaluelen <S2SV_ModEnd> ; return 0 <S2SV_ModStart> -> valuelen < args -> rmtvaluelen ) { args -> valuelen = args -> rmtvaluelen <S2SV_ModEnd> ; return XFS_ERROR <S2SV_ModStart> -> valuelen = args -> rmtvaluelen <S2SV_ModEnd> ; } return",1
968,<S2SV_ModStart> size_t info <S2SV_ModEnd> ; if (,0
969,<S2SV_ModStart> p_retval ; int ret <S2SV_ModEnd> ; int ret <S2SV_ModStart> p ) ; <S2SV_ModEnd> return 0 ;,0
970,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) &&! test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) &&",1
971,"<S2SV_ModStart> ) ) ; if ( LTXTQUERY_TOO_BIG ( state. num, state. sumlen ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""ltxtquery <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large"" ) ) ) ;",1
972,<S2SV_ModStart> ; int end <S2SV_ModEnd> ; 0,0
973,<S2SV_ModStart> ; if (! EXT4_SB ( inode -> i_sb ) -> s_journal <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd>! handle ),1
974,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> int,0
975,,0
976,"<S2SV_ModStart> ( size < 5 + 1 <S2SV_ModEnd> ) ASSERT ( <S2SV_ModStart> ) ; } for ( size = 0 ; size < 8 ; size ++ ) ASSERT ( strcmp ( result, ""DEADBEEF"", ""DEADBEEF"" )!= 0 ) ; ASSERT ( strlen ( buf )!= buf ) ; break ;",0
977,<S2SV_ModStart> ( cr ) <S2SV_ModEnd> ; if (,0
978,"<S2SV_ModStart> len ) { if <S2SV_ModEnd> ( str, <S2SV_ModStart> len ) { return ; } <S2SV_ModStart> len ) ; strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> len ) ; strcpy <S2SV_ModEnd> ( str,",0
979,"<S2SV_ModStart> char * to = g. inf, * sufx = NULL ; size_t pre = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) { if ( <S2SV_ModEnd> ( pre ) <S2SV_ModStart> = 0 ; strcpy ( <S2SV_ModEnd> ( to",0
980,,1
981,<S2SV_ModStart> * output ; MagickBooleanType status ; <S2SV_ModStart> ) ; } status = MagickFalse ; <S2SV_ModStart> i ++ ) { <S2SV_ModEnd> input = fopen_utf8 <S2SV_ModStart> input ) ) if ( status == 0 ) fclose ( <S2SV_ModEnd> output ) <S2SV_ModStart> ( void ) fclose ( <S2SV_ModEnd> ) ; ( <S2SV_ModStart> ( void ) fclose ( <S2SV_ModEnd> ) ; ( <S2SV_ModStart> ) ; },0
982,<S2SV_ModStart> ) { SvcInternal_t <S2SV_ModEnd> * const si,0
983,"<S2SV_ModStart> dev ) ; dev_msg ( sb, NULL ) ;",0
984,"<S2SV_ModStart> passwd * pwd, const char * prefix <S2SV_ModStart> = NULL ; <S2SV_ModEnd> pw_init ( ) <S2SV_ModStart> & tmpname, ""/etc"", prefix <S2SV_ModEnd> ) ) ==",1
985,"<S2SV_ModStart> int get_distribution ( vpx_tree_tree, <S2SV_ModEnd> int i )",0
986,<S2SV_ModStart> ) { return s2SV_null> <S2SV_null>,0
987,"<S2SV_ModStart> TRUE ; } Jid * my_jid = jid_get_from ( ) ; const char * const stanza_from = jid_get_from ( stanza_from ) ; Jid * const stanza_from = jid_create ( stanza_from ) ; Jid * constjid = jid_create ( stanza_get_from ) ; Jid * msg_jid -> barejid -> barejid, msg_jid -> barejid -> barejid ) ; constjid = jid_create ( stanza_from ) ; Jid_create ( ""received: <S2SV_blank> from: <S2SV_blank> %s"" <S2SV_ModEnd> ) ; return",0
988,,0
989,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct dev *,0
990,"<S2SV_ModStart> ( CMD_PRINT_OPTIONS ) { if (! new_service_options ) { log_flush ( LOG_INFO, ""Invalid <S2SV_blank> service <S2SV_blank> is <S2SV_blank> empty <S2SV_blank> the <S2SV_blank> supported"" ) ; exit ( CMD_FILE ) ; } <S2SV_ModStart> 1 ) { if ( arg1 == - 1 ) { log_log ( LOG_ERR, ""Invalid <S2SV_blank> service <S2SV_blank> option <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported <S2SV_blank> the <S2SV_blank> %s\\n"", arg1 ) ; exit ( LOG_INFO ) ; } else { <S2SV_ModStart> 1 ) ; } log_log_flush ( LOG_MODE_INFO ) ; } # endif",0
991,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; BT_DBG (,1
992,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
993,<S2SV_ModStart> -> st_v1_packet = ( int ) <S2SV_ModEnd> ; if (,0
994,,0
995,<S2SV_ModStart> * zone ; size_t tilemap_size ; <S2SV_ModStart>. height ; tilemap_size = <S2SV_ModEnd> x_size * y_size <S2SV_ModStart> struct map_tile ) ; if ( x_size == 0 || tilemap_size / x_size / sizeof ( struct map_tile )!= y_size ||! ( tilemap = malloc ( tilemap_size,1
996,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_printroute ( netdissect_options <S2SV_ModStart> ) ; return ( 0 ) <S2SV_ModStart>, length ) ) ; ND_TCHECK ( cp [ 2 ] <S2SV_ModStart> 4 ) { ND_TCHECK2 ( cp [ len ], 4 ) ; <S2SV_ModStart> ) ; } return ( 0 ) ; trunc : return ( - 1 ) ;",1
997,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> char *,0
998,"<S2SV_ModStart>. enc_alg_priv ( ctx ) <S2SV_ModEnd>, ctx )",0
999,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> + 1, ""prestring=%5"" <S2SV_ModEnd>, buf ) <S2SV_ModStart> + 1, L_BUFSIZE <S2SV_ModEnd>, buf ) <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd>, ""protos"",",0
1000,<S2SV_ModStart> if ( chunk_num >= <S2SV_ModEnd> chm -> num_chunks,1
1001,"<S2SV_ModStart>! validate_event ( event -> pmu, <S2SV_ModStart>! validate_event ( event -> pmu,",0
1002,"<S2SV_ModStart> } } } TEMP_FAILURE_RETRY ( w, 1 ) ;",0
1003,<S2SV_ModStart> studio_profile ) { <S2SV_ModEnd> if (!,1
1004,<S2SV_ModStart> nsops < 1 || nsops > SEMOPM,1
1005,<S2SV_ModStart> [ i ] ; if ( i < 0 ) return 0 ;,0
1006,<S2SV_ModStart> < INDIRECT_BLOCKS ) { <S2SV_ModStart> ] ) ; },1
1007,"<S2SV_ModStart> size ) ; if ( ( i -> width > i -> height ) || ( i -> height > i -> height ) ) fprintf ( NGIFLIB_NO_FILE ) ; <S2SV_ModStart> -> log, i -> height + i -> height ) <S2SV_ModEnd> ; # if",0
1008,"<S2SV_ModStart> if ( q < p ) { DPRINTF ( ( ""Wrapped <S2SV_blank> around <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> %p\\n"", p ) ) ; goto out ; } if ( q",0
1009,"<S2SV_ModStart> ++ ) { <S2SV_ModEnd> if ( bytes_matched <S2SV_ModStart> max_bytes_matched ) break ; next_input = input + i * input_incr <S2SV_ModStart> -> min ; bytes_matched = yr_min ( bytes_matched, max_bytes_matched ) ;",1
1010,"<S2SV_ModStart> len ) { assert ( len > 28 ) ; <S2SV_ModStart> case LEX_INT : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""EOF"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_INT : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""ID"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_INT : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""STRING"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_INT : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""FLOAT"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_INT : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""STRING"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED_LITERAL : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""STRING"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED_LITERAL : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""TEMPLATE <S2SV_blank> LITERAL"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_LITERAL : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""REGEX"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED_LITERAL : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> LITERAL"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED_LITERAL : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> REGEX"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> str,",0
1011,"<S2SV_ModStart> mnt_instance ) ; if ( unlikely (! list_empty ( & mnt -> mnt_mounts ) ) ) { struct mount * p, * tmp ; list_for_each_entry_safe ( p, tmp, & mnt -> mnt_mounts, mnt_child ) { umount_mnt ( p ) ; } }",1
1012,"<S2SV_ModStart> write_bit_depth ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> w ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> } else { vpx_write_literal <S2SV_ModEnd> ( w,",0
1013,,1
1014,<S2SV_ModStart> goto not_found ; if ( e - p > HOST_NAME_MAX - 1 ) goto not_found ;,0
1015,<S2SV_ModStart> ; int err <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> uint32_t pos ; if ( inode -> i_size > inode -> i_sb -> s_blocksize ) { err = - ENAMETOOLONG ; goto out_unmap ; } <S2SV_ModStart>! bh ) { err = - EIO ; goto out_unlock_inode ; } <S2SV_ModEnd> symlink = bh <S2SV_ModStart> return 0 ; out_unlock_inode <S2SV_ModEnd> : up_read ( <S2SV_ModStart> page ) ; out_unmap :,1
1016,<S2SV_ModStart> else if ( cpu_read32 ( ) <S2SV_ModEnd> ) { if,0
1017,"<S2SV_ModStart> if ( ent == NULL ) { st = KRB5_KDB_NOENTRY ; <S2SV_ModEnd> goto cleanup ; <S2SV_ModStart> cleanup ; } st = populate_policy ( context, ent, ent, ent, * policy ) ;",0
1018,,0
1019,<S2SV_ModStart> ; int nblock_blocks = 0 <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> int nblock_bh = 0 <S2SV_ModEnd> ; memset (,0
1020,<S2SV_ModStart>. count = 0 <S2SV_ModEnd> ; break ;,0
1021,<S2SV_ModStart> ; if ( d -> msg_len > sizeof ( d -> msg ) ) return - EINVAL ; if ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( i,1
1022,"<S2SV_ModStart> break ; } memset ( & cinfo, 0, sizeof ( cinfo ) ) ;",1
1023,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
1024,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; unlink",0
1025,"<S2SV_ModStart> int num_items_scanned ; int pkt_len, <S2SV_ModEnd> pktnum, hr <S2SV_ModStart> + 64, ""LEN=%9u"" <S2SV_ModEnd>, &pkt",0
1026,<S2SV_ModStart> ; int err = 0 ; msg -> msg_namelen,1
1027,"<S2SV_ModStart> ; if ( zend_hash_find <S2SV_ModEnd> ( ht,",1
1028,<S2SV_ModStart> return - EINVAL ; if ( len < 0 ) return - EINVAL,0
1029,"<S2SV_ModStart> io, mem <S2SV_ModEnd> ) ; }",0
1030,"<S2SV_ModStart> 1 ) { if (! <S2SV_ModStart>, ibuf ) ) { if (!",0
1031,<S2SV_ModStart> p -> tokenpos >= ( <S2SV_ModEnd> p -> tokenlen <S2SV_ModStart> p -> tokenlen - 1 ),1
1032,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> MACROBLOCK_0 : return vpx_m8x8x8_len <S2SV_ModEnd> ; switch ( <S2SV_ModStart> = vpx_m8x8x8x8x8 ( BLOCK_8x8x8x8x8 ) { case BLOCK_SIZE : case BLOCK_8X8X8 : case BLOCK_8x8x8x8x8x8x8 : case BLOCK : case BLOCK_8x8x8x8x8 : case BLOCK_8x8x8x8x8x8x8 ( BLOCK_8x8x8x8x8x8x8x8 ( BLOCK_8x8x8x8x8x8x8x8x8 ) ; case BLOCK_8x8x8x8x8x8x8x8x8x8x8x8 ( BLOCK ) ) ; case BLOCK_8x8x8x8x8x8 * const BLOCK_8x8 ) ; case BLOCK_8x8x8X8_8x8x8 ( BLOCK ) ; case BLOCK_8X8,0
1033,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
1034,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> & 0xFFFF ; },1
1035,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
1036,<S2SV_ModStart> ( reply ) <S2SV_ModEnd> ; if (,0
1037,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
1038,"<S2SV_ModStart> -> stratum_port ; snprintf ( address, 254 <S2SV_ModEnd>, ""%s:%s"",",1
1039,"<S2SV_ModStart> } if (! page_name_string_value <S2SV_ModEnd> ( req, <S2SV_ModStart> if ( page_name ) ) { <S2SV_ModEnd> ( req, <S2SV_ModStart> 1 ) { <S2SV_ModEnd> return ; }",0
1040,<S2SV_ModStart> + i ; unsigned int actual_size = f -> begin < actual_size? r -> begin : actual_size ; unsigned int end,0
1041,<S2SV_ModStart> head -> iov_base ; if ( hdr > head -> iov_len ) return 0,1
1042,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> cl_nodes_lock ) ; o2nm_unlock_subsystem ( ) ;,1
1043,<S2SV_ModStart> -> v4_vs_len = ( int ) <S2SV_ModEnd> ; if (,0
1044,<S2SV_ModStart> size ) { ASSERT_NO_SIZE_OVERFLOW ( size ) ;,1
1045,<S2SV_ModStart> ; ssize_t count ; if ( bytes == 0 || items == 0 ) return 0,1
1046,<S2SV_ModStart> -> serviceId = EXTRACT_16BITS <S2SV_ModEnd> ( & rxh,0
1047,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = key_read,0
1048,<S2SV_ModStart> = 0 ; if ( addr_len < sizeof ( struct dev ) ) return - EINVAL ;,0
1049,<S2SV_ModStart> ) ) ; if ( ss >= 0 ) return 0 ;,0
1050,"<S2SV_ModStart>, v -> signature_type <S2SV_ModEnd> ) { return",0
1051,<S2SV_ModStart> 0 ) ; hrtimer_try_to_cancel <S2SV_ModEnd> ( & stime,1
1052,<S2SV_ModStart> ONIG_INFINITE_DISTANCE ) { if ( p - str < reg -> dmax ) { * low = ( UChar * ) str ; if ( low_prev ) * low_prev = reg -> dmax ) ; } else <S2SV_ModStart> low ) ; },0
1053,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2CAP_MODE_MODE_MODE_MODE ( struct l2cap_mode * pi ; struct l2cap_mode = data. mode ; if ( pi -> mode == L2CAP_MODE_MODE_MODE_MODE ) { pi. mode = cpu. mode = l2cap_to_le16 ( & pi -> mode, L2CAP_MODE_MODE_MODE_RSP ) ; if (! l2cap_mode ( pi -> mode ) ) return - ENOMEM ; } <S2SV_ModStart> case L2CAP_MODE_MODE_WRITE : pi -> dcid = l2cap_to_le16 ( & pi -> mode, L2CAP_mode ) ; if (! l2cap_mode ( pi -> mode ) ) return L2CAP_MODE_MODE_MODE_RSP ; <S2SV_ModStart> & rfc. mode = cpu_to_to_to_le16 ( & pi -> mode ) ; <S2SV_ModStart> ) ; if (! l2cap_to_to_le16 ( cpu ) ) return L2cap_to_to_le16 ( & pi -> dcid ) ; <S2SV_ModStart> ) ; } else {",0
1054,"<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, MSG_WAIT )",0
1055,<S2SV_ModStart> -> chunksize = UINT64_MAX <S2SV_ModEnd> ; for (,1
1056,<S2SV_ModStart> u1_first_slice_pic!= 0 <S2SV_ModEnd> ) { if,0
1057,<S2SV_ModStart> ( )!= 0 &&,0
1058,<S2SV_ModStart> } err = crypto_rng_alg ( tfm ) <S2SV_ModEnd> -> seed (,1
1059,<S2SV_ModStart> = uid ; <S2SV_ModEnd> new -> count <S2SV_ModStart> new -> count = 0 <S2SV_ModEnd> ; spin_lock_irq ( <S2SV_ModStart> } if ( <S2SV_ModEnd> ucounts -> count <S2SV_ModStart> ucounts -> count == INT_MAX ) ucounts = NULL ; else ucounts -> count += 1 <S2SV_ModEnd> ; spin_unlock_irq (,1
1060,"<S2SV_ModStart> ) ; } if ( err == 0 ) goto out_put ; if ( datagrams <S2SV_ModEnd> == 0 ) <S2SV_ModStart> == 0 ) { datagrams = err ; goto out_put ; } <S2SV_ModEnd> if ( err <S2SV_ModStart> err ; } out_put : fput_light ( sock -> file, fput_needed ) ; <S2SV_ModStart> datagrams ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",1
1061,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1062,<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline <S2SV_ModStart> = 0 ; len - i >= 8 * 32 <S2SV_ModEnd> ; i += <S2SV_ModStart> ] ; } for ( ; i < len ; i += 32 ) { ( void ) tab [ i ] ; },1
1063,<S2SV_ModStart> ; if ( ( flags & EXT4_GET_BLOCKS_IO ) <S2SV_ModEnd> ) { err,0
1064,"<S2SV_ModStart> * deleg_stateid, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart>, fmode_t fmode, fmode <S2SV_ModEnd> ) ) {",0
1065,"<S2SV_ModStart> ResourceLimitError, ""MemoryAllocationFailed"" ) ; ( void ) ResetMagickMemory ( global_colormap, 0, 3 * MagickMax ( global_colors, 256 ) * sizeof ( * global_colormap )",1
1066,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
1067,<S2SV_ModStart> ( r ) <S2SV_ModEnd> if ( r,0
1068,"<S2SV_ModStart> int64_t * out_thr, int64_t dist, int64_t <S2SV_ModEnd> * out_dist_size, int64_t <S2SV_ModStart> 0 ] ; int64_t dist_dist_sum = 0 ; # if CONFIG_MB_HIGHBITDEPTH if ( cpi -> dequant == MAX_MB_SIZE ) { x -> mi_size = 0 ; int64_t rate = MAX_MB_PLANE ; int64_t sse ; int64_t rate = MIN ( p -> dq == MAX_MB_SIZE ) ; const int64_t rate = 0 ; int64_t dist_sum = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> flags & YV12_FLAG_HIGHBITDEPTH ) { vp9_error ( cpi -> dequant, & YV12_FLAG_HIGHBITDEPTH ) ; # endif <S2SV_ModStart> = sse_get_sse ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> flags & YV12_FLAG_HIGHBITDEPTH ) { vp9_error ( cpi -> dequant, & sse_size ) ; * out_error = vp9_setup_size_size_t <S2SV_ModEnd> (",0
1069,<S2SV_ModStart> } if ( pmd_none_trans_bad <S2SV_ModEnd> ( pmd ),0
1070,"<S2SV_ModStart> ; if ( snpal == 6 ) ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> SNPA <S2SV_blank> <S2SV_blank> <S2SV_blank> (length: <S2SV_blank> %u): <S2SV_blank> "", snpal, snpal ) ) ; else ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> (length: <S2SV_blank> %u: <S2SV_blank> %u): <S2SV_blank> (length: <S2SV_blank> %u): <S2SV_blank> %s"", snpal, snpal, snpal, snpal, <S2SV_ModEnd> ) ) ;",0
1071,<S2SV_ModStart> { if ( * ret == '\\\\' ) return ( p ) <S2SV_ModEnd> ) return (,0
1072,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> <S2SV_null> <S2SV_null>",0
1073,<S2SV_ModStart> ; uint32_t backup_handle = 0 <S2SV_ModStart> ret == 0 ) { if ( <S2SV_ModEnd> res -> backup <S2SV_ModStart> goto out_unlock ; } else { backup_handle = req -> buffer_handle ; },1
1074,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool get_desc ( <S2SV_ModStart> struct desc_struct * out, <S2SV_ModEnd> unsigned short sel <S2SV_ModStart> SEGMENT_LDT ) { bool success = false <S2SV_ModEnd> ; struct ldt_struct <S2SV_ModStart> -> nr_entries ) { * out = <S2SV_ModEnd> ldt -> entries <S2SV_ModStart> sel ] ; success = true ; } <S2SV_ModStart> ) ; return success <S2SV_ModEnd> ; } # <S2SV_ModStart> size ) return false ; * out = * <S2SV_ModEnd> ( struct desc_struct <S2SV_ModStart> desc_base ) ; return true ;",1
1075,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",0
1076,<S2SV_ModStart> bp ; struct ipv6_addr * final ; struct,0
1077,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1078,<S2SV_ModStart> char * buf <S2SV_ModEnd> ; if (,0
1079,<S2SV_ModStart> client -> protocol = 0 ; if ( client -> protocol < 0 ) return FALSE ;,0
1080,<S2SV_ModStart> >= 0 && <S2SV_ModEnd> ND_TTEST ( * <S2SV_ModStart> < ie && <S2SV_ModEnd> ND_TTEST ( *,1
1081,"<S2SV_ModStart> ; ksz8851ReadReg ( interface, KSZ8851_TX_SIZE <S2SV_ModEnd> ) ; ksz8851_t <S2SV_ModStart> ( interface ; interface = ksz8851_t length ; ksz8851_t <S2SV_ModEnd> ( interface",0
1082,"<S2SV_ModStart> NULL ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
1083,<S2SV_ModStart> goto new_leaves_node <S2SV_ModEnd> ; if (,0
1084,<S2SV_ModStart>. udpport = 0 <S2SV_ModEnd> ; settings.,1
1085,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> NULL,0
1086,"<S2SV_ModStart> x2 ; UINT32 x, x2, x2 <S2SV_ModEnd> x = x2 <S2SV_ModStart> x3 = x2 [ 0 ] ; x2 = x2 [ 0 ]. x2 = x3 ; x2 = ( x2 <S2SV_ModEnd> x3 <S2SV_ModStart> x7, x2, x2 <S2SV_ModStart> x3 = x2 <S2SV_ModEnd> x2 = x",0
1087,<S2SV_ModStart> clips_ptr ) { if ( num_clips < 0 || num_clips > DRM_MODE_FB_DIRTY_MAX_CLIPS ) { ret = - EINVAL ; goto out_err1 ; },1
1088,<S2SV_ModStart> ) return 0 <S2SV_ModEnd> ; if (,0
1089,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1090,"<S2SV_ModStart> 0 ) ; int minsz = R_MIN ( len, size ) ; minsz = R_MAX ( minsz, 0 ) ; <S2SV_ModStart> ; j < minsz <S2SV_ModEnd> ; j ++ <S2SV_ModStart> ++ ) { <S2SV_ModStart> val ) ; } <S2SV_ModStart> val ) ; ret = ( j + idx - 1 ) { <S2SV_ModStart> val ) ; } <S2SV_ModStart> ptr ) { <S2SV_ModStart> ptr ) ; } <S2SV_ModStart> val ) ; }",0
1091,"<S2SV_ModStart> * fout ; uint8_t <S2SV_ModEnd> height = 0 <S2SV_ModStart> ) ; return 0 ; } <S2SV_ModStart> ) ) ; printf ( ""Failed <S2SV_blank> error <S2SV_blank> to <S2SV_blank> %s\\n"", height, height, <S2SV_ModEnd> ) ) ; if <S2SV_ModStart> ) ) ; return 1 ; } if ( out == 0 ) { printf ( ""Error: <S2SV_blank> (%d\\n"", ""Error: <S2SV_blank> to <S2SV_blank> to <S2SV_blank> %s\\n"", height ) ; return 1 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { printf ( ""Error: <S2SV_blank> %d\\n"" <S2SV_ModEnd>, fout <S2SV_ModStart> ) ) ; return 1 ; } <S2SV_ModStart> ) ) ; return 1 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>",0
1092,"<S2SV_ModStart> + DSPQ_DATA_BUFF ; u16 head, tail, size ; head <S2SV_ModEnd> = DSPQ ( <S2SV_ModStart> + JQS_wTail ) ; head = <S2SV_ModEnd> += size ; <S2SV_ModStart> + JQS_wTail ) ; tail = <S2SV_ModEnd> memcpy ( chip <S2SV_ModStart> + JQS_wSize ) ; if ( head > size || tail > size ) goto out ; if ( head!= tail ) goto out ;",0
1093,<S2SV_ModStart> * opcode_desc ; if ( len < 2 ) { return NULL ; },1
1094,<S2SV_ModStart> ACPI_THREAD ) ; <S2SV_ModEnd> ACPI_FUNCTION_TRACE ( KERN_OBJECT * <S2SV_ModStart> ) ; } } <S2SV_ModEnd> ACPI_FUNCTION_TRACE ( vcpu,0
1095,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
1096,<S2SV_ModStart> [ sizeof ( the_url <S2SV_ModEnd> ) - 1,0
1097,"<S2SV_ModStart> i, num <S2SV_ModEnd> ) ; if",0
1098,<S2SV_ModStart>. cmp_data. match_data <S2SV_ModEnd> ; if (,0
1099,<S2SV_ModStart> vpx_codec_alg_priv_t * priv = NULL ; <S2SV_ModStart> vpx_codec_alg_priv_t res ; priv = ( vpx_codec_alg_priv_t * ) ; <S2SV_ModStart> ctx -> cfg ; priv = ( vpx_codec_alg_priv_t * ) priv <S2SV_ModEnd> ; priv = <S2SV_ModStart> vpx_codec_alg_priv_t * priv <S2SV_ModEnd> ( ) <S2SV_ModStart> priv_t ) <S2SV_ModEnd> ; priv ->,0
1100,"<S2SV_ModStart> error ) { if ( bp && ( <S2SV_ModEnd> xfs_da_shrink_inode ( args <S2SV_ModStart>, bp )!= 0 ) <S2SV_ModEnd> ) goto out",1
1101,<S2SV_ModStart> ; if ( ( c == 0 ) return ret ; if (,0
1102,<S2SV_ModStart> slave_timer ) { spin_lock ( & timer -> timer -> lock ) ; <S2SV_ModStart> lock ) ; spin_unlock ( & timer -> timer -> lock ) ; },0
1103,"<S2SV_ModStart> return err ; if (! <S2SV_ModEnd> attrs [ TIPC_NLA_SOCK <S2SV_ModStart> attrs [ TIPC_NLA_SOCK <S2SV_ModEnd> ] ) return <S2SV_ModStart> - EINVAL ; err = nla_parse_NLA_SOCK <S2SV_ModEnd> ( sock, <S2SV_ModStart> attrs [ EINVAL ] <S2SV_ModEnd> ] ; if",0
1104,"<S2SV_ModStart>. fragments ) { memset ( ctx -> fragments, 0, sizeof ( * fragments ) ) ; <S2SV_ModStart> = data_sz ; memset ( & ctx -> fragments, 0, sizeof ( * fragments ) ) <S2SV_ModEnd> ; } else",0
1105,<S2SV_ModStart> = v ; if (! IS_ERR ( vma ) ),1
1106,<S2SV_ModStart> ) buffer ; if ( total_len < sizeof ( * cap ) || total_len < <S2SV_ModEnd> cap -> bNumEndpoints,0
1107,<S2SV_ModStart> task = current <S2SV_ModEnd> ; if (,1
1108,<S2SV_ModStart> ( iinfo -> i_lenEAttr > bs || iinfo -> i_lenAlloc > bs ) goto out ; if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenAlloc > bs ) goto out ; if ( iinfo ->,0
1109,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIIRH <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIRDH <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIRDH <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_BUSY <S2SV_ModEnd> ) ; }",0
1110,"<S2SV_ModStart> char * fmt, <S2SV_ModEnd> char *",0
1111,<S2SV_ModStart> opt_alloc ) ; sk_dst_free ( sk ) ;,0
1112,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
1113,<S2SV_ModStart>! saw_digit ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart>!= '\\r' ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart>!= '\\n' ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart> ; trunc : * endp = bp ; <S2SV_ModStart> ; invalid : * endp = bp ;,1
1114,"<S2SV_ModStart> ; args -> rmtvaluelen = be32_to_cpu ( name_rmt -> valuelen ) ; args -> rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ( name_rmt -> <S2SV_ModEnd> valueblk ) ; <S2SV_ModStart>, args -> rmtvaluelen <S2SV_ModEnd> ) ; return",1
1115,<S2SV_ModStart> ) ) ; if ( 3,0
1116,"<S2SV_ModStart>! new_object ) { memset ( & new_length, 0, sizeof ( new_object ) ) ;",0
1117,"<S2SV_ModStart>, j ) int vdaux = verdef -> vd_aux ; if ( vdaux < 1 ) { sdb_free ( sdb_verdef ) ; goto out_error ; } vstart += vdaux <S2SV_ModEnd> ; if (",0
1118,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
1119,<S2SV_ModStart> u8 label_len ; <S2SV_ModEnd> GET8 ( label_len <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ;,1
1120,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpAcc ( TIFF <S2SV_ModStart> cc ) ; if <S2SV_ModEnd> ( cc % <S2SV_ModStart> * stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""fpAcc"", ""%s"", ""cc%(bps*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> tmp ) return 0 <S2SV_ModStart> tmp ) ; return 1 ;",1
1121,"<S2SV_ModStart> -> vm_ops ) <S2SV_ModEnd> return do_fault ( <S2SV_ModStart>, pte, pmd, flags, entry ) ; <S2SV_ModEnd> return do_anonymous_page ( <S2SV_ModStart>, address, pte, pmd, <S2SV_ModEnd> flags ) ;",1
1122,"<S2SV_ModStart> s ) { size_t len = strlen ( s ) + 1 ; <S2SV_ModStart> = pool_alloc ( len ) ; memcpy <S2SV_ModEnd> ( r, <S2SV_ModStart> r, s, len",1
1123,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1124,"<S2SV_ModStart>! new_idmap_permitted ( file,",1
1125,,0
1126,,0
1127,<S2SV_ModStart> ) ) ; if ( b,0
1128,"<S2SV_ModStart> 0 ) { if ( len < ( u_int ) advance ) goto trunc ; <S2SV_ModStart> ip6 ) ; if ( advance < 0 ) return ; <S2SV_ModStart> case IPPROTO_ROUTING : ND_TCHECK ( * cp ) ; <S2SV_ModStart> ip6 ) ; if ( advance < 0 ) return ; <S2SV_ModStart>, cp ) ; if ( advance < 0 ) return <S2SV_ModStart> padlen ) ; if ( advance < 0 ) return ;",1
1129,<S2SV_ModStart> int j ; size_t <S2SV_ModEnd> idx = 0 <S2SV_ModStart> ++ ) { for ( i = len ; i < 3 ; i ++ ) { for ( i = 0 <S2SV_ModEnd> ; j < <S2SV_ModStart> ++ ) return NULL ; } if ( i < 3 ) e,0
1130,<S2SV_ModStart> ( iinfo -> i_lenEAttr > bs || iinfo -> i_lenAlloc > bs ) goto out ; if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenAlloc > bs ) goto out ; if ( iinfo ->,0
1131,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
1132,<S2SV_ModStart> in ) ; vpx_variance16x16 <S2SV_ModEnd> ( sse.,0
1133,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_line_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) ; <S2SV_ModStart> t1_buf_array, t1_line_array ) ; alloc_array ( t1_line, strlen ( t1_buf_array ) + 1, T1_BUF_SIZE",1
1134,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) { ( void ) data ; ( FrameWorker * ) data = <S2SV_ModStart> ( data + 1 <S2SV_ModEnd> -> pbi ->",0
1135,<S2SV_ModStart> ctxt ) ; if (! ( efer & EFER_SCE ) ) return emulate_ud ( ctxt,0
1136,<S2SV_ModStart>,0
1137,<S2SV_ModStart> ; if (!,0
1138,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> unsigned char * mc_avg_y_stride, int mc_stride, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * mc_y_stride, int motion_avg_y_y_y_stride, unsigned char * <S2SV_ModStart> ++ ) { unsigned char * running_avg_y ; unsigned char * avg_y ; unsigned char * avg_y_y ; unsigned char * avg_y ; unsigned char * avg_y_stride, <S2SV_ModStart> = 0 ; unsigned char * running_y_stride = 0 ; unsigned char * avg_y_stride = 0 ; unsigned char * avg_y_y_avg_y ; unsigned char * avg_y ; unsigned char * avg_y = avg_y_y <S2SV_ModEnd> unsigned char <S2SV_ModStart> ++ ) { unsigned char * avg_y_y_stride = avg_y_avg [ c ] ; unsigned char * avg_y = avg_y_y_avg_y <S2SV_ModEnd> unsigned char * <S2SV_ModStart> motion_y_y_size ) { unsigned char * avg_y_y = stride [ c ; int avg_y [ c ++ ] = avg_",0
1139,<S2SV_ModStart> == 0 ) {,0
1140,<S2SV_ModStart> ret = 0,0
1141,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
1142,<S2SV_ModStart> ) { struct se_dev * remote_dev ; struct xop * remote_dev = xop -> src_dev ; if (! xop -> src_dev ) goto out_dev ; <S2SV_ModEnd> if (!,0
1143,"<S2SV_ModStart> ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_MULTICAST_HOPS."" ) ; err = - errno ; goto close_sock ; } val = 1 ; ret = setsockopt ( sock, IPPROTO_IPV6, IPV6_RECVHOPLIMIT, & val, sizeof ( val ) ) ; if ( ret == - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_RECVHOPLIMIT,.""",1
1144,<S2SV_ModStart> ; if ( new_cache_bh <S2SV_ModEnd> ( new_bh ) <S2SV_ModStart> ) ) { struct ext2_mb_cache <S2SV_ModEnd> ( new_bh,0
1145,"<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp. <S2SV_ModStart>. type, ""compression"", sizeof ( rcomp. type ) <S2SV_ModEnd> ) ; if",1
1146,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { <S2SV_ModEnd> if (!",0
1147,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( rc ) return - ENOMEM <S2SV_ModEnd> ; } break ; <S2SV_ModStart> goto out ; <S2SV_ModEnd> } break ;",0
1148,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1149,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
1150,<S2SV_ModStart> 3 * len + 8,1
1151,<S2SV_ModStart> SUCCESS ) { if ( Z_TYPE_PP ( var )!= IS_LONG ) { zval lval ; lval = * * var ; zval_copy_ctor ( & lval <S2SV_ModEnd> ) ; convert_to_long <S2SV_ModStart> ; convert_to_long ( & lval <S2SV_ModEnd> ) ; points <S2SV_ModStart>. x = Z_LVAL ( lval ) ; } else { points [ i ]. x = <S2SV_ModStart> var ) ; } <S2SV_ModStart> SUCCESS ) { if ( Z_TYPE_PP ( var )!= IS_LONG ) { zval lval ; lval = * * var ; zval_copy_ctor ( & lval <S2SV_ModEnd> ) ; convert_to_long <S2SV_ModStart> ; convert_to_long ( & lval <S2SV_ModEnd> ) ; points <S2SV_ModStart>. y = Z_LVAL ( lval ) ; } else { points [ i ]. y = <S2SV_ModStart> ; } } },1
1152,<S2SV_ModStart> ; sig_none = <S2SV_ModEnd> timr -> it_sigev_notify <S2SV_ModStart> timr -> it_sigev_notify <S2SV_ModEnd> == SIGEV_NONE ;,1
1153,"<S2SV_ModStart>, sizeof ( <S2SV_ModEnd> ) ) ; if",0
1154,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_line_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) ; <S2SV_ModStart> t1_buf_array, t1_line_array ) ; alloc_array ( t1_line, strlen ( t1_buf_array ) + 1, T1_BUF_SIZE",1
1155,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; if ( ctx -> frame_worker_data >= 0 ) { VPxWorker * const worker = ( FrameWorkerData * ) worker ->",0
1156,"<S2SV_ModStart>. path ; return Curl_urldecode <S2SV_ModEnd> ( data, <S2SV_ModStart>, 0, & <S2SV_ModEnd> pop3c -> mailbox <S2SV_ModStart> pop3c -> mailbox, NULL, TRUE ) <S2SV_ModEnd> ; } <S2SV_null>",1
1157,<S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ; <S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ;,1
1158,"<S2SV_ModStart> gb ) ; if ( s -> first_slice_in_pic_flag ) { av_log ( s -> avctx, AV_LOG_ERROR, ""Two <S2SV_blank> slices <S2SV_blank> same <S2SV_blank> frame.\\n"" ) ; return 1 ; }",0
1159,<S2SV_ModStart> } } } <S2SV_ModEnd> } else {,0
1160,<S2SV_ModStart> = BMPEG2D_MPEG2D_DECODE_ERR ; if ( 0 >= ps_dec -> u2_offset ) { break ; } <S2SV_ModStart> -> u2_left = 0 ; },0
1161,<S2SV_ModStart> { const VP9_COMMON * const frame_bufs = cm -> ref_frame_bufs,0
1162,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
1163,<S2SV_ModStart> ( mbmi -> mbmi <S2SV_ModEnd> ) { const <S2SV_ModStart> = get_uv_tx_size ( <S2SV_ModEnd> r ) ; <S2SV_ModStart> int i ; <S2SV_ModEnd> v = get_uv_tx_size <S2SV_ModStart> ( tx_size ) << 1 ; <S2SV_ModEnd> } } <S2SV_null>,0
1164,<S2SV_ModStart> -> mmap_legacy_base = TASK_UNMAPPED_BASE + random_factor <S2SV_ModEnd> ; if (,1
1165,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 8 ) ; <S2SV_ModEnd> src += src_stride",1
1166,"<S2SV_ModStart> return getnum ( <S2SV_ModEnd> fmt, 1 <S2SV_ModStart> = getnum ( <S2SV_ModEnd> fmt, sizeof",1
1167,<S2SV_ModStart> nrow ) { uint32 temp ; <S2SV_ModStart> ( row + img -> row_offset ) <S2SV_ModEnd> if ( row,0
1168,<S2SV_ModStart> ; } } default :,0
1169,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1170,<S2SV_ModStart> ( upid == INT_MIN ) return - ESRCH ; if ( upid ==,1
1171,"<S2SV_ModStart> siocb -> scm, false",1
1172,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1173,"<S2SV_ModStart>, plane ) * ( ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH )? 2 : 1 )",0
1174,<S2SV_ModStart> ; uint8_t prev_len = NULL <S2SV_ModEnd> ; uint16_t ret <S2SV_ModStart> ; uint8_t prev_len = <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( avp -> length - L2TP_DIGEST ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; avp_debug ( & avp -> length <S2SV_ModEnd> ) ; } else,0
1175,"<S2SV_ModStart> -> private ; struct dm_dev * dev = lc -> dev ; int r = 0 ; if <S2SV_ModEnd> ( lc -> <S2SV_ModStart> ( lc -> start || ti -> len!= i_size_read ( dev -> bdev -> bd_inode ) >> SECTOR_SHIFT ) r = scsi_verify_blk_ioctl ( NULL, cmd ) ; return r? : __blkdev_driver_ioctl ( <S2SV_ModStart> -> bdev, <S2SV_ModEnd> dev -> mode",1
1176,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> if ( ptr,0
1177,<S2SV_ModStart> ) ) { <S2SV_ModEnd> if (!,0
1178,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",0
1179,<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ;,1
1180,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1181,<S2SV_ModStart> -> sk ; sizeof ( sa ) ;,0
1182,"<S2SV_ModStart> ) ) { memset ( cpkt, 0, sizeof ( cpkt ) ) ;",0
1183,<S2SV_ModStart> NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC | NTLMSSP_NEGOTIATE_SEAL <S2SV_ModStart> -> sign ) <S2SV_ModEnd> flags |= NTLMSSP_NEGOTIATE_SIGN <S2SV_ModStart> |= NTLMSSP_NEGOTIATE_KEY_XCH ; <S2SV_ModEnd> tmp = *,1
1184,<S2SV_ModStart> ) ) ; mutt_socket_empty ( adata -> conn <S2SV_ModEnd> ) ; goto,0
1185,"<S2SV_ModStart> crypto_report_kppppp ) ; strncpy <S2SV_ModEnd> ( skb,",0
1186,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horDiff8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
1187,<S2SV_ModStart> -> head <= 0 || ( unsigned char ) ( ( g -> sect << 2 ) >> FD_SIZECODE ( g ) ) ==,1
1188,<S2SV_ModStart> ; exit ( <S2SV_ModEnd> ) ; if,0
1189,"<S2SV_ModStart>, & rlen, 0",1
1190,"<S2SV_ModStart> * user ; memset ( & data, 0, sizeof ( data ) ) ; <S2SV_ModEnd> ( data, <S2SV_ModStart> ) ) ; if <S2SV_ModEnd> (!",0
1191,"<S2SV_ModStart> mntent, path, rootfs -> mount",1
1192,"<S2SV_ModStart> ], p <S2SV_ModEnd> ; if (",0
1193,<S2SV_ModStart> - offset ; unsigned short prev_bi_vcnt = bio -> bi_vcnt ; <S2SV_ModStart> ) break ; if ( bio -> bi_vcnt == prev_bi_vcnt ) put_page ( pages [ j ] ) ;,1
1194,<S2SV_ModStart> & hdr -> size <S2SV_ModEnd> ; for (,0
1195,"<S2SV_ModStart> state. path <S2SV_ModEnd> ; char localhost <S2SV_ModStart> ""localhost"" ; } result = Curl_urldecode ( conn -> data, path, 0, & <S2SV_ModStart> smtpc -> domain, NULL, TRUE ) ; if ( result ) return result <S2SV_ModEnd> ; state (",1
1196,"<S2SV_ModStart> len ) { if <S2SV_ModEnd> ( str, <S2SV_ModStart> len ) { return ; } <S2SV_ModStart> len ) ; strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> len ) ; strcpy <S2SV_ModEnd> ( str,",0
1197,<S2SV_ModStart> break ; } if ( i < sizeof ( str ) ) return - 1,0
1198,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
1199,<S2SV_ModStart> ( ret ) ; if ( ret < 0 ) goto out ;,0
1200,<S2SV_ModStart> 0 ) ; if (! r ) return - EINVAL ;,1
1201,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1202,,1
1203,"<S2SV_ModStart> { r_cons_printf ( ""\\""k <S2SV_blank> bin/pe/%s/%d=%s.%s\\""\\n"" <S2SV_ModEnd>, module, <S2SV_ModStart> { r_cons_printf ( ""\\""k <S2SV_blank> bin/pe/%s/%d=%s\\""\\n"" <S2SV_ModEnd>, module,",1
1204,"<S2SV_ModStart>, rqstp, res <S2SV_ModEnd> ) ; out",1
1205,<S2SV_ModStart> mntent ) { if ( mnt -> mnt + mnt_dir ) { mount = <S2SV_ModEnd> mntent *,0
1206,"<S2SV_ModStart>, ivbuf, NULL <S2SV_ModEnd> ) ; }",0
1207,"<S2SV_ModStart> ) ) { * status = ""INVALID_S2' ;",0
1208,<S2SV_ModStart> thread -> tp_value [ 0 ] <S2SV_ModStart> childregs -> ARM_r3 ; thread -> tp_value [ 1 ] = get_tpuser ( ),1
1209,<S2SV_ModStart> bufsize ) { char * new_bufsize <S2SV_ModEnd> ; JAS_DBGLOG ( <S2SV_ModStart> ; if ( bufsize < 0 ) { new_buf = 0 <S2SV_ModEnd> ; } else <S2SV_ModStart> = bufsize ; <S2SV_ModEnd> if ( buf,0
1210,"<S2SV_ModStart> sshbuf * b = NULL <S2SV_ModStart> char * pkalg = NULL <S2SV_ModStart> u_char * pkalg = NULL <S2SV_ModStart>, * sig = NULL <S2SV_ModStart> ; if ( <S2SV_ModEnd> ( r = <S2SV_ModStart> r ) ) ; } if (! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done <S2SV_ModStart> b ) ; <S2SV_ModEnd> auth2_key ( authctxt <S2SV_ModStart> ) ) ; if (! authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done <S2SV_ModStart> b ) ; free ( sig ) ;",0
1211,<S2SV_ModStart> ; uint32_t bcount ; CLEAR ( WaveHeader ),1
1212,<S2SV_ModStart> ( iter_block ) ; <S2SV_ModEnd> return 0 ;,0
1213,<S2SV_ModStart> ( s ) ||! Zsasl ) { <S2SV_ModStart> ) ; },0
1214,<S2SV_ModStart> tn_buf ) ; return - EACCES ;,1
1215,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteData ) ) ;",0
1216,<S2SV_ModStart> failed_mount3 ; } # ifdef CONFIG_EXT2_FS_CACHE ( sb ) ;,0
1217,<S2SV_ModStart> if (! bt_addr ) return FALSE ;,0
1218,<S2SV_ModStart> len < tcp_hdrlen || tcp_hdrlen < sizeof ( struct tcphdr ) <S2SV_ModStart> ; if ( tcp_hdrlen >= 15 * 4 ) return 0 ; if (,1
1219,"<S2SV_ModStart> int i ; size_t size ; matrix = 0 ; <S2SV_ModStart> 0 ) { goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } matrix <S2SV_ModStart> -> datasize_ = 0 ; if (! jas_safe_size_mul ( numrows, numcols, & size ) ) { goto error ; } matrix -> datasize_ = size <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } } <S2SV_ModStart> return matrix ; error : if ( matrix ) { jas_matrix_destroy ( matrix ) ; } return 0 ;",1
1220,"<S2SV_ModStart> ipv6_select_ident ( fh, rt <S2SV_ModStart> ipv6_select_ident ( fh, rt",1
1221,"<S2SV_ModStart> int error ; <S2SV_ModEnd> struct mb2_cache_entry * <S2SV_ModStart> int error ; struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache_cache_insert ( <S2SV_ModStart> h_cache, hash ) ; <S2SV_ModEnd> int error <S2SV_ModStart> error ) ; <S2SV_ModEnd> error = mb2_cache_insert ( bh <S2SV_ModStart> bh ) ; <S2SV_ModEnd> return ;",0
1222,<S2SV_ModStart> * req ; <S2SV_ModEnd> req = scsi_req_alloc <S2SV_ModStart> hba_private ) ; <S2SV_ModEnd> return req ;,1
1223,"<S2SV_ModStart> int n ; memset ( buf, 0, sizeof ( buf ) ) ;",0
1224,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1225,<S2SV_ModStart> ( ret ||! cm_id -> device ||,1
1226,<S2SV_ModStart> xfrm_policy_walk * ) <S2SV_ModEnd> cb -> args <S2SV_ModStart> cb -> args <S2SV_ModEnd> ; struct xfrm_dump_info <S2SV_ModStart> struct xfrm_dump_info info <S2SV_ModEnd> ; info. <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> ( void ),1
1227,<S2SV_ModStart> (! count ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
1228,<S2SV_ModStart> dentry * upper <S2SV_ModEnd> ; int err <S2SV_ModStart> I_MUTEX_MAX ) ; upper = PTR_ERR ( upper -> d_name. name -> d_name. len ) ; err = PTR_ERR ( upper ) ; if ( upper == PTR_ERR ( upper ) ) { <S2SV_ModEnd> if ( upper <S2SV_ModStart> ) goto out_unlock ; } dput ( upper ) ; <S2SV_ModStart> NULL ) ; out_unlock :,0
1229,<S2SV_ModStart> ; if ( * section_options <S2SV_ModEnd> ) if,0
1230,<S2SV_ModStart> * ptrptr && <S2SV_ModEnd> nmemb && size <S2SV_ModStart> nmemb && size <S2SV_ModEnd> ) return AVERROR,1
1231,<S2SV_ModStart> ( a -> type == szMAPI_BINARY && a -> <S2SV_ModStart> else if ( a -> type == szMAPI_BINARY &&,1
1232,"<S2SV_ModStart> parent ) ; if ( ( i -> width > i -> height ) || ( i -> height > i -> height ) ) { # if ( NGIFLIB_NO_FILE ) fprintf ( i -> log, NG_NO_FILE ) ; # endif if ( i -> parent -> parent -> parent -> height > i -> height ) { ND_ERROR ( i -> log, NGIFLIB_NO_FILE ) ; } else if ( i -> parent -> parent -> log ) fprintf ( i -> log, NGIFLIB_NO_FILE ) ; # endif if ( i -> log ) fprintf ( i -> log, NGIFLIB_NO_FILE ) ; # endif",0
1233,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_ELF_NOTES_MAX : ms -> elf_notes_max = * ( size_t * ) val ; return 0 ;,0
1234,"<S2SV_ModStart> { jas_eprintf ( ""got <S2SV_blank> box <S2SV_blank> type <S2SV_blank> %s\\n"" <S2SV_ModEnd>, box ->",1
1235,,1
1236,"<S2SV_ModStart> ], p <S2SV_ModEnd>, p )",0
1237,<S2SV_ModStart> page ) { <S2SV_ModEnd> return ; },0
1238,<S2SV_ModStart> return GF_ISOM_INVALID <S2SV_ModEnd> ; if (,0
1239,<S2SV_ModStart> UINT32 nsc_rle_encode ( const,1
1240,<S2SV_ModStart> ; unsigned char data <S2SV_ModEnd> = 0 ; size_t,0
1241,"<S2SV_ModStart> * dllhandle ; if ( COM_CompareExtension ( name, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", name ) ; return NULL ; }",1
1242,<S2SV_ModStart> return ( NULL <S2SV_ModEnd> ) ; if,0
1243,<S2SV_ModStart> ( n ) \\\n{ <S2SV_ModEnd> sum = ( <S2SV_ModStart> ++ ; } \\\n} <S2SV_ModEnd> typedef struct PCDTable <S2SV_ModStart> buffer ) ; for ( j = 0 ; j < i ; j ++ ) pcd_table [ j ] = ( PCDTable * ) RelinquishMagickMemory ( pcd_table [ j ] ) ; <S2SV_ModStart> RelinquishMagickMemory ( buffer ) ; for ( j = 0 ; j <= i ; j ++ ) pcd_table [ j ] = ( PCDTable * ) RelinquishMagickMemory ( pcd_table [ j ],1
1244,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1245,"<S2SV_ModStart> ) ) ; g_strdup <S2SV_ModEnd> ( test,",0
1246,"<S2SV_ModStart> # ifdef HAVE_IPV6 <S2SV_ModEnd> if ( * <S2SV_ModStart> 2 ) { char * <S2SV_ModStart> - 2 ), * e = NULL <S2SV_ModStart> * portno = NULL <S2SV_ModStart> * portno = NULL <S2SV_ModStart> p + 1, * e <S2SV_ModEnd> * portno = <S2SV_ModStart> * portno, * e, & e <S2SV_ModEnd> ) ; } <S2SV_ModStart> * portno = NULL ; if ( get_err ) { if ( get_err ) { <S2SV_ModEnd> return e",0
1247,"<S2SV_ModStart> ], 0 <S2SV_ModEnd> ) ; }",0
1248,"<S2SV_ModStart> ) ) { memcpy <S2SV_ModEnd> ( dst, <S2SV_ModStart> src ) ; memcpy <S2SV_ModEnd> ( src,",0
1249,"<S2SV_ModStart> AVERROR_INVALIDDATA ; } if ( c -> log2_cblk_width > 6 || c -> log2_cblk_width > 6 ) { avpriv_request_sample ( s -> avctx, ""cblk <S2SV_blank> size <S2SV_blank> > <S2SV_blank> 64"" ) ; return AVERROR_PATCHWELCOME ; }",0
1250,<S2SV_ModStart> == * ptr && ptr [ 1 ],1
1251,"<S2SV_ModStart> void encode_rd_row_col ( MACROBLOCK * xd <S2SV_ModEnd>, int mi_row <S2SV_ModStart> x ; memcpy <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) { memcpy <S2SV_ModEnd> ( xd -> <S2SV_ModStart> mi_col ; memcpy <S2SV_ModEnd> ( xd ->",0
1252,"<S2SV_ModStart> int hexdump ; u_int <S2SV_ModEnd> hexdump ; u_int <S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ; if <S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
1253,"<S2SV_ModStart> * mbmi, const mbmi <S2SV_ModEnd> ) { const PRE_MODE",0
1254,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ),",0
1255,<S2SV_ModStart> skb ) ; kfree_skb ( skb ) ;,0
1256,<S2SV_ModStart> sta -> lock ) ; spin_lock_init ( & sta -> ps_lock,1
1257,<S2SV_ModStart> tp_event ) && perf_paranoid_tracepoint_raw <S2SV_ModEnd> ( ) &&,1
1258,<S2SV_ModStart> sctp_v6_addr ) ; sctp_init <S2SV_ModEnd> ( &,0
1259,"<S2SV_ModStart>, 0 ) ; if (! data_interface ||! control_interface ) return - ENODEV",1
1260,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1261,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> assert ( entry <S2SV_ModStart> ) ; } if (! entry,0
1262,"<S2SV_ModStart> * head ; <S2SV_ModEnd> newsk -> sk_sndbuf <S2SV_ModStart> -> sk_rcvbuf ; sctp_copy_descendant <S2SV_ModEnd> ( newsk,",1
1263,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1 ) ) ) <S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_SYN ) ) <S2SV_ModStart> } else { ret = TEMP_FAILURE_RETRY ( <S2SV_ModEnd> dev, O_RDONLY ) <S2SV_ModStart> ) ; } TEMP_FAILURE_RETRY ( <S2SV_ModEnd> fd <S2SV_ModStart> ) ; return - 1 <S2SV_ModStart> - 1 ; ret = TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1264,"<S2SV_ModStart> { struct desc_struct <S2SV_ModEnd> desc ; short <S2SV_ModStart> return sel ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! get_desc ( & desc, sel ) <S2SV_ModEnd> ) return - <S2SV_ModStart>! ( desc. <S2SV_ModEnd> type & BIT <S2SV_ModStart> ( ( desc. <S2SV_ModEnd> l << 1 <S2SV_ModStart> ) | desc. <S2SV_ModEnd> d ) {",1
1265,<S2SV_ModStart> ctx ) ; vpx_free_buffer <S2SV_ModEnd> ( ctx ),0
1266,"<S2SV_ModStart> } else { vpx_lpf_horizontal_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>",0
1267,<S2SV_ModStart> return ret ; fsnotify_put_group ( group ) ;,1
1268,<S2SV_ModStart> ( ctx ) <S2SV_ModEnd> ; if (,0
1269,<S2SV_ModStart> break ; } <S2SV_ModEnd> dst_off = dst,0
1270,<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; <S2SV_ModStart> ) NULL ; } status =,0
1271,<S2SV_ModStart> ; while ( ( <S2SV_ModStart> ps_stream -> u4_offset < ps_stream -> u4_max_offset,0
1272,<S2SV_ModStart> ) return - EINVAL ; if ( count > 0 ) return - EINVAL ;,0
1273,<S2SV_ModStart> ; if ( queue &&,0
1274,<S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; if (,0
1275,<S2SV_ModStart> input -> cur ) ; } else ( ( ( ctxt ) == 0 ) ;,0
1276,"<S2SV_ModStart> } if ( le32_to_cpu ( raw_super -> segment_count ) > F2FS_MAX_SEGMENT ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> segment <S2SV_blank> count <S2SV_blank> (%u)"", le32_to_cpu ( raw_super -> segment_count ) ) ; return 1 ; } if (",1
1277,<S2SV_ModStart> name ) { const char * name = '\\0' ; if ( is_path && ( is_path && name [ 0 ] == '\\0' || ( * ) == '\\0' || ( * name == '\\0' ) ) ) { * result = '\\0' ; } <S2SV_ModEnd> if (!,0
1278,<S2SV_ModStart> ( decColumn ) <S2SV_ModEnd> ; if (,0
1279,<S2SV_ModStart> len ) { struct ipv6_txoptions * opt_to_free = NULL ; <S2SV_ModStart>! opt ) { opt = txopt_to_free,0
1280,<S2SV_ModStart> ; if ( opt -> opt.,0
1281,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> } break ;",1
1282,<S2SV_ModStart> = 0 ;,0
1283,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1284,<S2SV_ModStart> ) goto errout <S2SV_ModEnd> ; if (,0
1285,"<S2SV_ModStart> ; if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
1286,<S2SV_ModStart> ) break ; <S2SV_ModEnd> tp -> copied_seq <S2SV_ModStart> = seq ; } tp -> copied_seq = seq ;,1
1287,<S2SV_ModStart> return NULL ; <S2SV_ModEnd> if ( key_key,0
1288,"<S2SV_ModStart> * self, <S2SV_ModEnd> idx ) {",0
1289,<S2SV_ModStart> ) ) ; if ( sqlite3_int64 ),0
1290,<S2SV_ModStart> ) { return <S2SV_ModEnd> ; } <S2SV_null>,0
1291,<S2SV_ModStart> expr_ty returns ; p -> v. type_comment = type_comment ; p ->,0
1292,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> mi -> base_file,0
1293,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ),1
1294,"<S2SV_ModStart> ) { case AC_VECTOR : kvm_queue_exception_e ( vcpu, AC_VECTOR, error_code ) ; return 1 ; case",1
1295,"<S2SV_ModStart> ""Unable"" ) ; case NGHTTP2 : case NGHTTP2 : case NGHTTP2 : case NGHTTP2 : case NGHTTP2 : case NGHTTP2 : case NGHTTP2 : case NGHTTP2 : case NGHTTP2 : case NGHTTP2 : case NGHTTP2 : case NGHTTP2 : case NGHTTP2 : case NGHTTP2 : case NGhttp2 : case NGHTTP2 : case NGHTTP2 : case NGHTTP2 : case NGHTTP2 : case NGHTTP2 : case NGHTTP2 : case NGHTTP2 : case NGHTTP2 : case NGHTTP2 : case NGHTTP2 : case NGHTTP2 : case NGHTTP2 : case NGHTTP2 : case NGHTTP2 : case NGHTTP2 : case NGHTTP2 : case NGHTTP2 : case NGHTTP2 : case NGHTTP2 : case TLS2 : case NGHTTP2 : case NGHTTP2 : case NGHTTP2 : case TLS2 : case NGHTTP2 : case NGHTTP2 : case NGHTTP2 : case TRUE ; case NGHTTP2 : case NGHTTP2 : case NGHTTP2 : case NGHTTP2 : case TLS2 : case NGHTTP2 : case TLS2 : case TRUE ; case",0
1296,<S2SV_ModStart> void error ; UINT32 error = 0,0
1297,<S2SV_ModStart> data -> socket <S2SV_ModEnd> ) ) ;,0
1298,<S2SV_ModStart> < 0 ) { ret = chg ; goto out_err ; } <S2SV_ModEnd> if ( hugepage_subpool_get_pages <S2SV_ModStart> chg ) ) { ret = <S2SV_ModEnd> - ENOSPC ; <S2SV_ModStart> - ENOSPC ; goto out_err ; } <S2SV_ModStart> chg ) ; goto out_err <S2SV_ModEnd> ; } if <S2SV_ModStart> return 0 ; out_err : resv_map_put ( vma ) ; return ret ;,1
1299,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart>, & fl6, rcu_read_unlock ( <S2SV_ModEnd> ) ; }",0
1300,,0
1301,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1302,"<S2SV_ModStart> 6 ) ) { MATLAB_KO : clone_info = DestroyImageInfo ( clone_info ) ; <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart> ""ImproperImageHeader"" ) ; }",0
1303,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TEMP_FAILURE_FAILURE ; if (! ( void ) ) return TRUE ; <S2SV_ModStart> EINVAL ; } return TRUE ;,0
1304,"<S2SV_ModStart> ret, last_pwd, n_new_keys <S2SV_ModStart> keyblocks ) { n_new_keys = count_new_keys ( kdb -> n_key_data, kdb -> key_data ) ; <S2SV_ModStart> -> context, n_new_keys <S2SV_ModEnd>, kdb ->",1
1305,<S2SV_ModStart> int result = RLC_ERR <S2SV_ModEnd> ; if ( <S2SV_ModStart> 8 ) { <S2SV_ModEnd> m_is_zero ( t <S2SV_ModStart> 8 ) ; result = RLC_ERR <S2SV_ModEnd> m_zero ( t <S2SV_ModStart> 8 ) ; result = RLC_ERR <S2SV_ModEnd> * m_len = <S2SV_ModStart> 8 ) ; if ( <S2SV_ModEnd> bn_is_zero ( t <S2SV_ModStart> 8 ) { <S2SV_ModEnd> bn_zero ( t <S2SV_ModStart> ) ; } bn_zero ( t ) ; result = RSA_SIG <S2SV_ModEnd> * p_len <S2SV_ModStart> 8 ) ; result = RLC_ERR ( m ) ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> bn_is_zero ( t <S2SV_ModStart> ) ) { <S2SV_ModEnd> * p_len = <S2SV_ModStart> -> dp [ 0 ] ; result = RLC_OK <S2SV_ModEnd> bn_is_zero ( m <S2SV_ModStart> ] ) ; result = RLC_OK <S2SV_ModEnd> ; break ;,0
1306,"<S2SV_ModStart> -> length, 0,",1
1307,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1308,<S2SV_ModStart> { rq = <S2SV_ModEnd> hctx -> tags <S2SV_ModStart> off + bit ) <S2SV_ModEnd> ; if (,0
1309,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
1310,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1311,"<S2SV_ModStart> { token ++ ; } if ( operand >= MAX_OPERANDS ) { eprintf ( ""Too <S2SV_blank> many <S2SV_blank> operands\\n"" ) ; return false",1
1312,<S2SV_ModStart> -> mb ; vpx_set_mbd <S2SV_ModEnd> ( * <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( * <S2SV_ModStart> & cpi ->,0
1313,<S2SV_ModStart> ; out_name = safe_calloc <S2SV_ModEnd> ( strlen (,0
1314,<S2SV_ModStart>,0
1315,"<S2SV_ModStart> -> y ; status = SetImageExtent ( image, image -> rows, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1316,<S2SV_ModStart> ctl_files_rwlock ) ; mutex_init ( & card -> user_ctl_lock ) ;,1
1317,"<S2SV_ModStart> ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; } ( * psig ) = s + <S2SV_ModEnd> padlen + 2",0
1318,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, len )",0
1319,<S2SV_ModStart> ; ps_dec -> <S2SV_ModEnd> u2_cur_slice_num = 0,0
1320,<S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata -> rbuf. buf!= NULL ) <S2SV_ModStart> OPENSSL_free ( rdata -> rbuf. buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata -> rbuf. buf!= NULL ) <S2SV_ModStart> OPENSSL_free ( rdata -> rbuf. buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; },1
1321,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart>, & fl6, rcu_read_unlock ( <S2SV_ModEnd> ) ; }",0
1322,<S2SV_ModStart> ; if ( args -> buffer_count > 0 ||,0
1323,"<S2SV_ModStart> int mptctl_getinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_dev ; <S2SV_ModEnd> struct mptctl_dev info",0
1324,"<S2SV_ModStart> = 0 ; luaL_checkstack ( L, <S2SV_ModEnd> c ) ;",0
1325,"<S2SV_ModStart> char * path, const char * rootfs <S2SV_ModStart> mntdata, optional, rootfs",1
1326,"<S2SV_ModStart> ) rows ; columns = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1327,"<S2SV_ModStart> ctx ) { <S2SV_ModEnd> char * len <S2SV_ModStart> - ENOMEM ; char * <S2SV_ModStart> ; size_t len ; size_t len <S2SV_ModEnd> - 1 ; <S2SV_ModStart> ++ ) { size_t len = kmalloc ( ctx -> arg, GFP_KERNEL ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) return ; } <S2SV_ModEnd> for_user",0
1328,"<S2SV_ModStart> | O_NOCTTY, ( mode == 0 || mode == MODE_INVALID )? 0644 : mode <S2SV_ModEnd> ) ; if",1
1329,"<S2SV_ModStart> err_info ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> line [ NETSCREEN_LINE_LENGTH <S2SV_ModEnd> ] ; if <S2SV_ModStart> FALSE ; } return parse_netscreen_packet ( wth -> random_fh, phdr, buf <S2SV_ModEnd>, line, <S2SV_ModStart>, line, <S2SV_ModEnd> err, err_info <S2SV_ModStart> err_info ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
1330,<S2SV_ModStart> * rq ) <S2SV_ModEnd> { int cpu <S2SV_ModStart> ; u64 irq_time ; if ( rq -> skip_clock_update ) return <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1331,<S2SV_ModStart> ( ssize_t ) - 1,0
1332,<S2SV_ModStart> } else { switch ( ctx [ - 1 ] ) ;,0
1333,<S2SV_ModStart> { struct blkif_response * <S2SV_ModStart> int notify ; <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> case BLKIF_PROTOCOL_64 : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> x86_32. rsp_prod_prod_prod_pvt <S2SV_ModEnd> ) ; break <S2SV_ModStart> case BLKIF_PROTOCOL_32 : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> x86_32. rsp_prod_pvt <S2SV_ModEnd> ) ; break <S2SV_ModStart> case BLKIF_PROTOCOL_64 : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart>. rsp_pvt ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> ) ; } resp -> id = id ; resp -> status = op ;,0
1334,<S2SV_ModStart>! password ) if ( * mask & KRB5_DEFAULT ) return ; if (,0
1335,"<S2SV_ModStart> ; if ( CHECKOVERFLOW ( datao, o )",0
1336,<S2SV_ModStart> ] = 0 <S2SV_ModEnd> ; if (,0
1337,<S2SV_ModStart> ndo -> ndo_snapend ; ND_TCHECK_16BITS ( & ip -> ip_len ),1
1338,<S2SV_ModStart> dentry * dir <S2SV_ModEnd> ; int dir_has_key <S2SV_ModStart> 0 ; } <S2SV_ModEnd> spin_lock ( & <S2SV_ModStart> dir_has_key = ( d_inode ( dir ) -> i_crypt_info <S2SV_ModEnd>!= NULL ),1
1339,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> void get_port ( void * opt,0
1340,"<S2SV_ModStart> ARCHIVE_WARN ; } if ( argc >= MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } <S2SV_ModStart> p ) ; <S2SV_ModEnd> } if (",1
1341,<S2SV_ModStart> parent ) ; if ( ( i -> parent -> parent -> parent -> parent. width > i -> parent -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> log ) if ( i -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> parent. width ) { # if! defined ( NGIFLIB_NO_FILE ) fprintf ( i -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> width ) ; # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> parent -> log ) > i -> log ) { # if! defined ( NGIFLIB_NO_FILE ) fprintf ( i -> parent -> parent -> parent -> parent -> parent -> parent -> log ) ; # if! defined ( NGIFLIB_NO_FILE ) fprintf ( i -> log ) ; # if! defined ( i -> log ) fprintf ( i -> log ) <S2SV_ModEnd> ( i ->,0
1342,<S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( unsigned ),0
1343,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
1344,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> break ; } if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",0
1345,<S2SV_ModStart> void ) { recovery_started = 0 ;,0
1346,"<S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4_EHT3_EHT4 <S2SV_ModEnd> ) ) ; }",0
1347,"<S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1348,"<S2SV_ModStart> error ; } memset ( newserv, 0, sizeof ( struct service ) ) ;",1
1349,<S2SV_ModStart> ) { WORD16 ai_slice_hdr ; <S2SV_ModEnd> i ] ; WORDS2SV_null> <S2SV_null>,0
1350,<S2SV_ModStart> ) -> tp_value [ 0 ],1
1351,"<S2SV_ModStart> ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; ret = - EINVAL ;",1
1352,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> print_object_value ( char <S2SV_ModStart>, p ) { size_t out, <S2SV_ModEnd> * out, <S2SV_ModStart> ) { if ( p ) out = ( p ) len ; p -> next [ 3 ] = ( char <S2SV_ModEnd> * ) cJSON_malloc <S2SV_ModStart> ) cJSON_malloc ( out, fmt ) ; if ( p ) len = ensure ( p ) ; if ( p ) len = ensure ( p, 1 ) ; if ( p ) len = ensure ( p ) cJSON_malloc ( p ) ; p -> next ) ; ptr = ensure ( p, 1 ) ; if ( p ) len = ( p ) cJSON_malloc ( p ) ; if ( p ) { len = ensure ( p ) cJSON_malloc ( out, len ) ; ptr = ensure ( p, 1 ) ; if (! ptr ) return 0 ; * ptr = child = ensure ( p -> offset, len + 1 ) cJSON_malloc ( 3 ) ; if (! ptr ) return 0 ; * ptr = 0 ; p -> next ) { ptr = 0 ; } ptr = ensure ( p, 1 ) ; if ( p -> offset + 1",0
1353,<S2SV_ModStart> ND_TCHECK ( * ext <S2SV_ModEnd> ) { UNALIGNED_MEMCPY,0
1354,"<S2SV_ModStart> int tagval, uint32 <S2SV_ModEnd> * length )",1
1355,<S2SV_ModStart> old ) { struct unix_dgram_peer * old = 0 ; <S2SV_ModStart> mutex_lock ( & old -> peer_lock ) ; if (,0
1356,<S2SV_ModStart> 4 ] ; unsigned int <S2SV_ModEnd> value ; if <S2SV_ModStart> value = ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 <S2SV_ModEnd> ; value |= <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart>. unsigned_value = <S2SV_ModEnd> value & 0xffffffff <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ; return (,1
1357,"<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> d"", <S2SV_ModStart> y3 ) ; sendClean ( outputbuffer ) ;",0
1358,<S2SV_ModStart> skb ) ; kfree_skb ( skb ) ;,0
1359,<S2SV_ModStart> void exit_io_context ( struct task <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; task <S2SV_ModEnd> -> io_context ; <S2SV_ModStart> ; ioc = task <S2SV_ModEnd> -> io_context ; <S2SV_ModStart> ; task <S2SV_ModEnd> -> io_context ; <S2SV_ModStart> ; task <S2SV_ModEnd> -> io_context =,0
1360,<S2SV_ModStart> ret = 0,0
1361,<S2SV_ModStart> ) { return GSS_S2SV_null> <S2SV_null>,0
1362,"<S2SV_ModStart> ) { int ret = pci_read_config_word <S2SV_ModEnd> ( dev, <S2SV_ModStart> offset, value ) ; const struct pci_cmd_info * cmd = data ; * value &= PCI_COMMAND_GUEST ; <S2SV_ModEnd> * value |= <S2SV_ModStart> * value |= cmd -> val & ~ PCI_COMMAND_GUEST ; <S2SV_ModEnd> return ret ;",1
1363,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ctx ; if ( frame_worker_data == NULL ) { VPxWorker * const frame_worker_data = ( FrameWorkerData * ) worker -> data + 1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const worker -> data1 ; VPxWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; if ( frame_data == NULL ) { VPX_CODEC_ERROR_ERROR_OK ; return VPX_CODEC_OK ; } <S2SV_ModStart> * ) ; if ( frame_worker_data <S2SV_ModEnd> ( ctx ->",0
1364,<S2SV_ModStart> ] ) ; free_uid ( fpl -> user ) ;,1
1365,<S2SV_ModStart> ret ; } if ( unlikely ( read_iocb ) ) return - EINVAL ;,0
1366,"<S2SV_ModStart> -> dwc ; dwc3_gadget_del_and_unmap_request ( dep, req, status <S2SV_ModEnd> ) ; spin_unlock <S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
1367,<S2SV_ModStart> ++ ) { assert ( yyvsp [ ( 1 ]. String ) - ( yyvsp [ 0 ]. String ) - ( yyvsp [ 0 ]. String ) - ( 1 ) - ( yyvsp [ ( 1 ) ]. String ) ] = ( yyvsp [ ( 1 ) - ( yyvsp [ ( 1 ) ]. String ) - ( yyvsp [ ( yyvsp [ ( 1 ) ]. String ) - ( yyvsp [ ( 1 ) ]. String ) - ( yyvsp [ ( 1 ) - ( yyvsp [ ( 1 ) ]. String ) - ( yyvsp [ ( 1 ) - ( 1 ) ]. String ) ; } break ; case 3 : prefix = ( yyvsp [ ( 3 ) - ( yyvsp [ ( 3 ) - ( 3 ) - ( yyvsp [ ( 3 ) - ( 3 ) - ( yyvsp [ ( 3 ) - ( 1 ) - ( yyvsp [ ( 1 ) - ( 3 ) - ( 1 ) - ( 3 ) - ( 3 ) - ( yyvsp [ ( 3 ) - ( 3 ) ]. String ) ) ; } break ; type = type = check_val. String ( yyvsp [ ( yyvsp [ ( 3 ) ],0
1368,"<S2SV_ModStart> sas_revalidate_domain, [ <S2SV_ModEnd> DISCE_SUSPEND ] = <S2SV_ModStart> ] = sas_resume_devices <S2SV_ModEnd>, } ;",1
1369,"<S2SV_ModStart>, int ret, TEMP_FAILURE_ON",0
1370,<S2SV_ModStart> u64 ) ; if ( tmp == 0 ) { u256_error = 0 ; u128 ; u128 ; return 0 ; } <S2SV_ModStart> tmp ) ; if ( tmp == 0 &&,0
1371,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
1372,<S2SV_ModStart> sk -> sk_family <S2SV_ModEnd> ; struct sk_buff <S2SV_ModStart> goto out ; <S2SV_ModEnd> if ( flags <S2SV_ModStart> AF_INET ) { struct sockaddr_in * <S2SV_ModStart> ) ) ; * addr_len = sizeof ( * sin ) ; <S2SV_ModStart> skb ) ; <S2SV_ModEnd> struct sockaddr_in6 * <S2SV_ModStart> struct sockaddr_in6 * <S2SV_ModStart> ) ) ; * addr_len = sizeof ( * sin6,0
1373,"<S2SV_ModStart> -= lblk ; mutex_lock ( & inode -> i_mutex ) ; if (! ( ext4_inode_flags ( inode, EXT4_GET_BLOCKS_SIZE ) ) ) { ret = - EOPNOTSUPP ; goto out_mutex ; } if (! <S2SV_ModEnd> ( mode &",0
1374,<S2SV_ModStart> ; } else if ( buf -> free < free ) <S2SV_ModStart> buf ; } else { free ( buf ) ; },0
1375,<S2SV_ModStart> return map ; map =,1
1376,<S2SV_ModStart> ) { int cp ; size_t <S2SV_ModEnd> cp = 0 <S2SV_ModStart> ; if (! cp ++ ; if ( cp [ 0 ] == '\\0' ) ||! cp ++ ) { if ( cp [ 1 ] == '\\0' ) { * cp ++ ; return - 1 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ( cp ++ ) && cp [ 0 ] == '\\0' ) { if (! cp && cp ['<S2SV_blank>') ||! cp [ '0' ) return - 1 ] == '\\0' ) { if ( cp [ 0 ] == '\\0' ) { cp ++ ; } else if ( cp == '\\0' ) { return - 1 ; } <S2SV_ModEnd> cpi ++ ;,0
1377,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1378,<S2SV_ModStart> ; if ( <S2SV_ModEnd> size_left < 4,1
1379,"<S2SV_ModStart>, * line, <S2SV_ModEnd> ) ) ; if <S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( pixlen <S2SV_ModStart> = 0 ; pixlen = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ; if ( pixlen > 0 ) { pixlen = 0 ; }",0
1380,<S2SV_ModStart> { int i ; int <S2SV_ModEnd> ubits = BN_num_bits <S2SV_ModStart> ( u ) ; int <S2SV_ModEnd> vbits = BN_num_bits <S2SV_ModStart> ( v ) ; int <S2SV_ModEnd> top = p <S2SV_ModStart> ubits <= BN_BITS2 ) { if ( <S2SV_ModEnd> udp [ 0 <S2SV_ModStart> 0 ] == 0 ) goto err ; if ( udp [ 0 ] == <S2SV_ModStart> ) break ; },1
1381,<S2SV_ModStart> -> v_mv ; memcpy <S2SV_ModEnd> ( cpi ->,0
1382,"<S2SV_ModStart> crypto_report_kppppp ) ; strncpy <S2SV_ModEnd> ( skb,",0
1383,<S2SV_ModStart> = alloc ; size_t <S2SV_ModEnd> strindex = 0,1
1384,"<S2SV_ModStart>, nbits ; if ( msg -> readcount > msg -> cursize ) { return 0 ; } <S2SV_ModStart> oob ) { if ( msg -> cursize + ( bits >> 3 ) > msg -> cursize ) { msg -> readcount = msg -> cursize + 1 ; return 0 ; } <S2SV_ModStart> & 7 ; if ( msg -> cursize > msg -> cursize << 3 ) { msg -> readcount = msg -> cursize + 1 ; return 0 ; }",0
1385,<S2SV_ModStart> int idx ; unsigned int count ; <S2SV_ModStart> -> count ; count = kcontrol -> count ; <S2SV_ModStart> ; idx < <S2SV_ModEnd> count ; idx,1
1386,<S2SV_ModStart> ; out1 : abort ( & dev -> delay ) ;,0
1387,"<S2SV_ModStart>, count ; size_t <S2SV_ModEnd> count ; int",0
1388,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } else {,0
1389,<S2SV_ModStart> ; if (! max_id ) return 0 ; if (,0
1390,"<S2SV_ModStart> acl ) { struct iattr iattr ; retval = posix_acl_update_mode ( inode, & iattr. ia_mode, & acl ) ; if ( retval <S2SV_ModEnd> ) goto err_out <S2SV_ModStart> goto err_out ; if (! acl ) { value = NULL ; size = 0 ; } <S2SV_ModEnd> iattr. ia_valid <S2SV_ModStart> iattr ) ; <S2SV_ModEnd> } break ;",1
1391,<S2SV_ModStart> header. types_size <S2SV_ModEnd> ) { continue,1
1392,<S2SV_ModStart>,0
1393,"<S2SV_ModStart> * s ; unsigned char * in, <S2SV_ModStart> = alloc ; size_t res = 0 ; int alloc * s ; <S2SV_ModStart> = alloc ; if ( len < 2 ) return NULL <S2SV_ModEnd> ; } <S2SV_null>",0
1394,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ni ) ; if (! ( Stream_GetRemainingLength ( s ) ) return FALSE <S2SV_ModStart> -> state ) ; return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1395,"<S2SV_ModStart> int target_bits_per_worst, target_bits_per_mb ( cpi <S2SV_ModEnd> ) ; const <S2SV_ModStart> ; if ( target_bits_per_mb_bits_per_worst_mb ( cpi, target_bits_per_mb ) ) { const int target_mb = i ; for ( i < target_bits ; i < target_perst_mb ; i ++ i ] <S2SV_ModEnd> } break",0
1396,<S2SV_ModStart> value ) ; value |= FALSE ;,0
1397,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1398,<S2SV_ModStart> < 0 || <S2SV_ModEnd> ND_TTEST ( * <S2SV_ModStart> [ 0 ] ),0
1399,"<S2SV_ModStart>, NULL, <S2SV_ModEnd> data ) ;",1
1400,<S2SV_ModStart> 0 ) ; if (! dev -> start ) return - ENOMEM ;,0
1401,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
1402,"<S2SV_ModStart> int mode_stride ; memset <S2SV_ModEnd> ( dst, <S2SV_ModStart> 8 ) ; memset <S2SV_ModEnd> ( src, <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( src,",0
1403,<S2SV_ModStart> ; end < 0 &&,0
1404,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> int,0
1405,"<S2SV_ModStart> * jas_iccprof_createfrombuf ( jas_uchar <S2SV_ModEnd> * buf,",1
1406,<S2SV_ModStart> i_sem ) ; <S2SV_ModEnd> if (!,0
1407,<S2SV_ModStart> kvm -> umask <S2SV_ModEnd> ; } else,0
1408,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct ion_handle * <S2SV_ModStart> ; handle = ion_handle_get_by_id_nolock ( client, id <S2SV_ModEnd> ) ; mutex_unlock <S2SV_ModStart> ; return handle <S2SV_ModEnd> ; } <S2SV_null>",1
1409,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 3 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } } } vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
1410,<S2SV_ModStart> : if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; },0
1411,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context ->,0
1412,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1413,<S2SV_ModStart> && segvc ) { memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( pc ->,0
1414,"<S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT <S2SV_ModEnd> ; uint16_t <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_E <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> ) ; status <S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ESC <S2SV_ModEnd> ) ; status <S2SV_ModStart> ( interface, ENC624J600_ESV_null> & ENC624J600_null> <S2SV_null>",0
1415,<S2SV_ModStart> ] == 0x01 && i < gemsafe_cert_max,1
1416,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
1417,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv, VALUE klass ) { VALUE parse_options ; VALUE parse_options ; VALUE rb_options ; VALUE rb_options ; VALUE rb_options ; VALUE rb_options ; int scanned_args = 0 ; scanned_options ; scanned_args = rb_get ( rb_const_get ( ""11"", & content ) ) ; if ( scanned_options == 0 ) { parse_options = rb_const_get ( rb_get ( rb_ary_get ( ""ParseOptions"" ) ), rb_const_get ( ""ParseOptions"" ) ) ; } parse_options = rb_const_get ( rb_get ( & parse_options ) ) ;",0
1418,"<S2SV_ModStart> vma ) { <S2SV_ModEnd> struct au1200fb_device * <S2SV_ModStart> info -> par <S2SV_ModEnd> ; vma -> <S2SV_ModStart> _CACHE_MASK ; return vm_iomap_memory <S2SV_ModEnd> ( vma, <S2SV_ModStart> ( vma, fbdev -> fb_phys, fbdev -> fb_len <S2SV_ModEnd> ) ; }",1
1419,<S2SV_ModStart>,0
1420,<S2SV_ModStart> ; out <S2SV_null> <S2SV_null>,0
1421,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
1422,<S2SV_ModStart> ; if ( <S2SV_ModEnd> arg >= cdi,1
1423,<S2SV_ModStart> ) err = - EINVAL <S2SV_ModEnd> ; if (,0
1424,<S2SV_ModStart> perf ) { mutex_lock ( & handle -> pending_wakeup ) ; <S2SV_ModStart> event_wakeup ) ; <S2SV_ModEnd> } else {,0
1425,<S2SV_ModStart> <S2SV_null> <S2SV_null> static uint16_t <S2SV_ModEnd> uint16_t <S2SV_ModStart> len ) { if ( len < 2 ) return - 1 ; <S2SV_ModStart> + 1 ; } if ( len < len ) return - 1 ; <S2SV_ModStart> + 1 ; } if ( len == 0 ) return - 1 ; <S2SV_ModStart> ) ) { if ( len < len ) return - 1 ; } memcpy ( ( u16 ) ; <S2SV_ModStart> + 1 ; if ( len < end ) { if ( len ) return - 1 ; } <S2SV_ModStart> ; } <S2SV_null> <S2SV_null>,0
1426,"<S2SV_ModStart>, i ; if (! ( s -> state & PNG_IHDR ) ) { av_log ( avctx, AV_LOG_ERROR, ""trns <S2SV_blank> before <S2SV_blank> IHDR\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( s -> state & PNG_IDAT ) { av_log ( avctx, AV_LOG_ERROR, ""trns <S2SV_blank> after <S2SV_blank> IDAT\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart>!= 6 ) || s -> bit_depth == 1",1
1427,<S2SV_ModStart> = NULL ; return 0 ;,0
1428,<S2SV_ModStart> } dt -> proto = IP_GET_IPPROTO ( p ) ; dt ->,1
1429,"<S2SV_ModStart> ( interface, KSZ8851_RXFFM <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_RXFCR2 )!= 0 ) { ksz8851SetReg ( interface, KSZ8851_TX_SIZE ) ; ksz8851_t status = KSZ8851_T <S2SV_ModEnd> ; ( <S2SV_ModStart> ( interface, KSZ8851_RXFCR2 ) ; <S2SV_ModEnd> } if ( <S2SV_ModStart> ( status ) ) ; <S2SV_ModEnd> } if (",0
1430,"<S2SV_ModStart> const ast_async, bool <S2SV_ModEnd> asdl, bool",0
1431,<S2SV_ModStart> ) ) ; if ( unlikely (! pte ) ) goto out ;,0
1432,"<S2SV_ModStart> ( AUDIT_APPARMOR_DENIED, __aa_current_profile ( ), GFP_KERNEL, & sa, NULL <S2SV_ModEnd> ) ; }",1
1433,"<S2SV_ModStart> uint_fast8_t tmp ; siz -> comps = 0 ; <S2SV_ModStart> ) ) { goto error ; } if (! siz -> tilewidth ||! siz -> height ) { jas_eprintf ( ""tile <S2SV_blank> area\\n"" ) ; goto error ; } if (! siz -> tilewidth ||! siz -> tilewidth ||! siz -> tilexoff >= siz -> tilexoff >= siz -> tilexoff || siz -> tilexoff >= siz -> tilexoff >= siz -> tilexoff ) { jas_eprintf ( ""YOsiz <S2SV_blank> %d\\n"", siz -> tilexoff >= siz -> tilexoff ) ; jas_free ( siz -> tilexoff ) ; return - 1 ; } if (! siz -> tilexoff && siz -> tilexoff >= siz -> tilexoff ) { jas_eprintf ( ""tile <S2SV_blank> permissible <S2SV_blank> range\\n"" ) ; goto error ; } if (! siz -> tilexoff >= siz -> tilexoff || siz -> tilexoff >= siz -> tilexoff || siz -> tilexoff >= siz -> tilexoff >= siz -> tilexoff || siz -> tilexoff + siz -> tile",0
1434,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } else {,0
1435,"<S2SV_ModStart>, xmi_data, xmi_size,",1
1436,<S2SV_ModStart> size_t total_len ; struct iov_iter iter ; <S2SV_ModStart> ) return 0 ; buf -> len = 0 ; if ( unlikely (! ret ) ) ret = - EFAULT ; if ( unlikely (! ret ) ) ret = - EFAULT <S2SV_ModEnd> ; break ;,0
1437,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits <S2SV_ModStart> ) ; } \\\n} <S2SV_ModEnd> Quantum index ; <S2SV_ModStart> ++ ) { next_pixel = MagickFalse ; displacement = 1 ; <S2SV_ModStart> -= MaxHashTable ; if ( k < 0 ) continue <S2SV_ModEnd> ; if (,0
1438,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1439,<S2SV_ModStart> { p_fm_config_hlt hdl = NULL <S2SV_ModStart> ) ; goto cleanup <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto cleanup <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto cleanup <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto cleanup <S2SV_ModEnd> ; } if <S2SV_ModStart> 0 ) { if ( hdl ) { if ( hdl -> sm_hdl ) { if ( hdl -> c_path [ 0 ] ) unlink ( hdl -> c_hdl -> c_path [ 0 ] ) ; } if ( hdl -> c_path [ 0 ] ) { if ( hdl -> c_hdl -> c_path [ 0 ] ) unlink ( hdl -> c_path [ 0 ] ) ; } if ( hdl -> c_hdl ) { if ( hdl -> c_path [ 0 ] ) unlink ( hdl -> c_path ) ; } <S2SV_ModEnd> free ( hdl <S2SV_ModStart> hdl ) ; },0
1440,"<S2SV_ModStart> size_t max_mem ; char optstr [ 0 ] ; <S2SV_ModStart> 0 ; } optstr = strtoull ( jas_optarg, 0, optstr <S2SV_ModEnd> ; break ; <S2SV_ModStart> ( optstr, optstr, sizeof ( optstr ) ) <S2SV_ModStart> ) ; } printf ( ""%s <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d\\n"", optstr <S2SV_ModEnd>, fmtname, <S2SV_ModStart>, max_samples, max_samples, max_samples <S2SV_ModEnd> ) )",0
1441,<S2SV_ModStart>,0
1442,<S2SV_ModStart> return ret ; if ( ret == 0 ) { ret = - 1 ; return ret ; },0
1443,<S2SV_ModStart> ( row = 0 <S2SV_ModEnd> ; if (,0
1444,"<S2SV_ModStart> ++, len <S2SV_ModEnd> ) ; if",0
1445,<S2SV_ModStart> 2 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,1
1446,"<S2SV_ModStart> int ret ; kvm_irq_info = - EINVAL ; if ( kvm_read_vcpu_info ( kvm, & kvm -> nr_rt ) ) { ret = - EINVAL ; goto out <S2SV_ModEnd> ; }",0
1447,<S2SV_ModStart> ) ) return NULL <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>,0
1448,<S2SV_ModStart> else { return false <S2SV_ModEnd> ; } case,1
1449,<S2SV_ModStart> -> sk ; sizeof ( sa ) ;,0
1450,<S2SV_ModStart> (! handle ||! SecIsValidHandle ( handle ),1
1451,"<S2SV_ModStart>, length ) <S2SV_ModEnd> ; length +=",0
1452,<S2SV_ModStart>! out ) goto out ;,0
1453,<S2SV_ModStart> OP_EXACT1 ) ; <S2SV_ModEnd> ++ ; MOP_OUT,0
1454,<S2SV_ModStart>,0
1455,<S2SV_ModStart> = - EINVAL ; msg -> msg_namelen = 0,0
1456,"<S2SV_ModStart> mntent, rootfs -> mount",0
1457,<S2SV_ModStart> ; if ( fd_fdt && fd ->,0
1458,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct <S2SV_ModStart> ; if ( dest_dest_keyring ) { ret = key_get ( dest_keyring ) ; <S2SV_ModStart> dest_keyring ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1459,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_pick_inter_mode_mode ( VP9_COMMON * const x, MACROBLOCKD * const x, MACROBLOCKD * const x = & x -> mi_row, bsize, bsize, x -> mi_row ) ; <S2SV_ModStart> = bsize ; vpx_pick_inter_inter_info ( & x, bsize, bsize, bsize, x <S2SV_ModEnd>, bsize,",0
1460,<S2SV_ModStart> NETIF_F_SG <S2SV_ModEnd> ; if (,0
1461,"<S2SV_ModStart>, - 1 <S2SV_ModEnd> ; if (",0
1462,"<S2SV_ModStart> pixel_info ) ; ( void ) ResetMagickMemory ( pixels, 0, pixel_info_length ) ;",1
1463,<S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; if (,0
1464,<S2SV_ModStart> = malloc ( size_t <S2SV_ModEnd> ) ; pMap ->,0
1465,<S2SV_ModStart> ; if ( unlikely (,0
1466,<S2SV_ModStart> ; if ( ( c == 0 ) return ret ; if (,0
1467,<S2SV_ModStart> = 0 ; if (! jas_samples ( cmpt_t ) ) { break ; },0
1468,<S2SV_ModStart> ; if ( flags & VP8_E_NONE <S2SV_ModEnd> ( flags &,0
1469,"<S2SV_ModStart>, sizeof ( double <S2SV_ModEnd> ) ) ;",1
1470,<S2SV_ModStart> head ) ; if <S2SV_ModEnd> (! hdr,0
1471,"<S2SV_ModStart>, u_int flags ; ND_TCHECK2 ( * tptr ) ; <S2SV_ModStart> tlen = len <S2SV_ModEnd> ; ND_PRINT (",0
1472,,0
1473,"<S2SV_ModStart> dest_width ) ; memcpy <S2SV_ModEnd> ( dest_size,",0
1474,<S2SV_ModStart> ) ) ; if (! overflow2 ) { return false ; },0
1475,<S2SV_ModStart> int u ; if ( n < 0 || n >= 32 ) { return - 1 ; } <S2SV_ModEnd> v = 0,1
1476,"<S2SV_ModStart> iovec, compat, & iter <S2SV_ModStart> len, iovec, & iter <S2SV_ModStart> len, & iter",0
1477,"<S2SV_ModStart> } if ( ptr - c -> rcurr > 100 || ( strncmp ( ptr, ""get <S2SV_blank> "", 4 ) && strncmp <S2SV_ModEnd> ( ptr, <S2SV_ModStart> ptr, ""gets <S2SV_blank> "", 5 )",0
1478,<S2SV_ModStart>,0
1479,<S2SV_ModStart> ( ddev -> bLength < sizeof ( struct usb_descriptor ) <S2SV_ModEnd> ) ; if,0
1480,<S2SV_ModStart> ; ue -> card = card ; ue ->,0
1481,"<S2SV_ModStart> client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; return 0 ; } if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) { exit_client ( client_p, client_p, client_p, ""Malformed <S2SV_blank> AUTHENTICATE""",1
1482,<S2SV_ModStart> OpMask ) ; <S2SV_ModEnd> if ( ctxt <S2SV_ModStart> -> _eip ; done :,0
1483,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",0
1484,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; random_ether_addr (,1
1485,<S2SV_ModStart> break ; } memcpy <S2SV_ModEnd> ( b ->,0
1486,"<S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd>, interface -> <S2SV_ModStart> ( interface, ENC624J600_MAADR2, ENC624J600_ECON2 <S2SV_ModEnd>, temp <S2SV_ModStart> ( interface, ENC624J600_MAADR2, ENC624J600_ECON2 <S2SV_ModEnd>, temp <S2SV_ModStart> ( interface, ENC624J600_MAADR2, ENC624J600_MAADR2, ENC624J600_MAADR2 <S2SV_ModEnd>, temp",0
1487,"<S2SV_ModStart> * header ; size_t len ; <S2SV_ModStart> length ) ; memset ( psf -> header, sizeof ( * header ) ) ; <S2SV_ModStart> psf -> header = sizeof ( * header ) ;",0
1488,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
1489,"<S2SV_ModStart> ) ) ) { applog ( LOG_WARNING, ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> bin"", __func__ ) ; pool_failed ( pool ) ; return false ; } <S2SV_ModEnd> cb1 = (",0
1490,"<S2SV_ModStart>. get_alg_priv ( get_alg_priv ( ctx ) <S2SV_ModEnd>, priv )",0
1491,<S2SV_ModStart> case EXIT_REASON_VMON : case EXIT_REASON_INVEPT :,1
1492,<S2SV_ModStart> cm ) { VP9_COMMON * const cm = & cpi -> common ; const VP9_COMMON * const cm = & cpi -> frame_type = & cpi -> oxcf ; <S2SV_ModStart> = 1 ; <S2SV_ModEnd> sf -> oxcf <S2SV_ModStart> = 1 ; <S2SV_ModEnd> sf -> oxcf <S2SV_ModStart> ; } else { <S2SV_ModEnd> sf -> vp9_inter <S2SV_ModStart> = 1 ; <S2SV_ModEnd> sf -> oxcf <S2SV_ModStart> = 1 ; <S2SV_ModEnd> sf -> oxcf <S2SV_ModStart> = 1 ; <S2SV_ModEnd> sf -> oxcf <S2SV_ModStart> ; } } else { <S2SV_ModEnd> sf -> rc <S2SV_ModStart> = 1 ; <S2SV_ModEnd> sf -> rc <S2SV_ModStart> ; sf -> use_inter_frame_size = 1 ; <S2SV_ModEnd> sf -> use_skip_frame,0
1493,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
1494,<S2SV_ModStart> rtp ) <S2SV_ModEnd> return - EFAULT,0
1495,"<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1, 0 )",0
1496,"<S2SV_ModStart> in ) ; memset ( L, 0, sizeof ( L ) ) ;",0
1497,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1498,"<S2SV_ModStart> s, s <S2SV_ModEnd> ; char * <S2SV_ModStart> ( c, str <S2SV_ModEnd> ) ; if",0
1499,<S2SV_ModStart> vpx_codec_err_t res ; int i ; <S2SV_ModStart> break ; } else { const char * input_size = 0 ; <S2SV_ModStart> } else { for ( i = 0 ; i < sizeof ( svc_options ) ) { if ( svc_name == 0 ) { res = 2 ; } else if ( svc_options == 0 ) break ; } else if ( svc_options == 0 ) { res = parse_option ( svc_key ) ; } else if ( svc_value == 0 ) { res = 2 ; } else if ( <S2SV_ModStart> ) break ; } <S2SV_ModStart> } res : if ( strcmp ( svc_name_value ) == 0 ) { <S2SV_ModEnd> return res ;,0
1500,<S2SV_ModStart> head ) ; if <S2SV_ModEnd> (! head,0
1501,"<S2SV_ModStart> (! s &&! isspace ( s, strlen ( s ) ) )",0
1502,<S2SV_ModStart> ; if ( entry == NULL ) return EINVAL ; if (,0
1503,<S2SV_ModStart> frame -> data [ plane ] && frame -> linesize <S2SV_ModStart> [ plane ] && frame -> linesize [ plane ],1
1504,"<S2SV_ModStart> 1 ) ; memcpy <S2SV_ModEnd> ( mvs,",0
1505,<S2SV_ModStart> self ) { <S2SV_ModEnd> Py_ssize_t new_memo_size,0
1506,,1
1507,<S2SV_ModStart> 0x0 ) {,0
1508,<S2SV_ModStart> ( imp_dbh -> pmysql_error <S2SV_ModEnd> ) ) {,0
1509,"<S2SV_ModStart> = 0 ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size )",0
1510,"<S2SV_ModStart> phdr ) ; memset ( phdr, 0, sizeof ( phdr ) ) ;",0
1511,<S2SV_ModStart> 1 ) ; if ( initlen < 0 ) return NULL ;,0
1512,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
1513,<S2SV_ModStart> while ( offset > 0 && offset <S2SV_ModStart> < end_offset ) { <S2SV_ModStart> hf_keybuffer ) ; },1
1514,<S2SV_ModStart> ) ) goto out_free <S2SV_ModEnd> ; } if,0
1515,<S2SV_ModStart> ) { const VP9EncoderConfig <S2SV_ModEnd> * const oxcf <S2SV_ModStart> = get_frame_level ( <S2SV_ModEnd> -> frames_level <S2SV_ModStart> -> frames_buffer_level ) <S2SV_ModEnd> ( rc -> <S2SV_ModStart> -> frames_to_bandwidth <S2SV_ModEnd> ( rc -> <S2SV_ModStart> -> frames_buffer_level ) <S2SV_ModEnd> ; } <S2SV_null>,0
1516,<S2SV_ModStart> X86_EFLAGS_RF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1517,"<S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; else if ( ret <= size ) memcpy ( data, buf, ret ) ; kfree ( buf ) ;",0
1518,<S2SV_ModStart>,0
1519,<S2SV_ModStart> op + OSPF6HDR_LEN ) ; ND_TCHECK_32BITS ( & hellop -> hello_options,1
1520,<S2SV_ModStart> { if ( datalen!= 1 ) return - EINVAL ; if (,1
1521,<S2SV_ModStart> rc ) { struct task_struct * <S2SV_ModEnd> task = task <S2SV_ModStart> ; if ( task ) { rc -> task = NULL ; <S2SV_ModEnd> rc -> uwbd <S2SV_ModStart> pid ; } } },0
1522,"<S2SV_ModStart> : # line 101 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1030 <S2SV_ModEnd> "" break ; <S2SV_ModStart> : # line 103 ""re_node_destroy"" { yr_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1042 <S2SV_ModEnd> "" break ; <S2SV_ModStart> : # line 1042 <S2SV_ModEnd> "" { yr_re_node_destroy ( <S2SV_ModStart> : # line 1042 <S2SV_ModEnd> "" { yr_re_node_destroy ( ( ( ( * yyvaluep ). re_node ) ) ; } # line 1042 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 104 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1048 <S2SV_ModEnd> "" break ; <S2SV_ModStart> : # line 102 ""re_grammar.c"" { yr_re_node_destroy ( ( ( ( * yyvaluep ). re_node ) ; } # line 1042 <S2SV_ModEnd> "" { yr_re_node_destroy ( ( ( ( * yyvaluep ).",0
1523,<S2SV_ModStart> : idx ; assert ( ptr >= gfx -> backendData && ptr < ( ( char * ) gfx -> backendData + graphicsGetMemoryRequired ( gfx ) ) ) ;,1
1524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> struct macroblock_plane_plane ] ; tran_low_t * const mbmi = & td -> mbmi -> mbmi ; const tx_size = & td -> mbmi -> mbmi_type ; const int <S2SV_ModStart> 0 ] ; tran_low_t eob = get_block ( tx_size ) ; # if CONFIG_VP9_VP9_HIGHBITDEPTH const int16_t * const tx_size = get_size ( tx_size ) ; const tx_size_size = get_size ( tx_size, block ) ; # endif <S2SV_ModStart> tx_size ) ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH const int16_t * const tx_size = get_size ( tx_size, tx_size ) ; const int16_size ) ; const int16_t * const tx_size = get_size ( tx_size ) ; const tx_size = get_size_size ( tx_size ) ; const int16_t * const tx_size = get_tx_size ( tx_size )",0
1525,<S2SV_ModStart> -> pSelect <S2SV_ModEnd> ; if (,0
1526,<S2SV_ModStart> { if ( ( <S2SV_ModStart> shmflg & SHM_RND ) && addr >= shmlba,1
1527,<S2SV_ModStart> s2SV_null> <S2SV_null> static,0
1528,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1529,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1530,<S2SV_ModStart> : case NPNVSupportsWindowless : case NPNVprivateModeBool : case NPNVsupportsAdvancedKeyHandling,1
1531,"<S2SV_ModStart>, ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",0
1532,"<S2SV_ModStart> { if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, 0 )",0
1533,"<S2SV_ModStart> x -> name ) { int pos ; <S2SV_ModStart> ) ) ; } if (! xrm_valid ( xml_name, 0 ) ) { <S2SV_ModStart> i ++ ; } } }",0
1534,<S2SV_ModStart> ] = 0 <S2SV_ModEnd> ; if (,0
1535,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * const SvcInternal_t <S2SV_ModStart> NULL ; if ( SvcInternal_t <S2SV_ModEnd> * ) {,0
1536,<S2SV_ModStart> mq_ops ) { <S2SV_ModEnd> spin_lock_lock ( &,0
1537,"<S2SV_ModStart> s ) { uint32 length ; struct stream packet = * s <S2SV_ModEnd> ; ber_parse_header ( <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> overrun"", & packet ) ; }",0
1538,<S2SV_ModStart> val ) ; <S2SV_ModEnd> if ( zval,0
1539,<S2SV_ModStart> { int ret ; int ret ; <S2SV_ModStart> - 1 ; } <S2SV_ModEnd> ( & VPX_IMG,0
1540,<S2SV_ModStart> * obj = <S2SV_ModEnd> buf ) {,0
1541,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> long long <S2SV_ModStart>  FALSE ; if (! sBlk ) return FALSE <S2SV_ModStart> FALSE ; if (! sBlk ) return FALSE ; if (! sBlk. file_start ) return FALSE ; <S2SV_ModStart> NULL ) return FALSE ; if (! sBlk_table_start ) return FALSE ; <S2SV_ModStart> NULL ) return FALSE ; if (! sBlk. table_start_start_start ) ) return FALSE ; <S2SV_ModStart> = FALSE ; <S2SV_ModEnd> if (!,0
1542,<S2SV_ModStart> rule ) { <S2SV_ModEnd> return 0 ; <S2SV_ModStart> ) ; } } <S2SV_null> <S2SV_null>,0
1543,<S2SV_ModStart> if ( ( skb_hdr <S2SV_ModEnd> ( skb ),0
1544,"<S2SV_ModStart> seg ; memset <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ; } memset <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ; } memset <S2SV_ModEnd> ( seg,",0
1545,"<S2SV_ModStart> ""Invalid"" ) ; if (! type_type_type_type_type ) return 0 ; <S2SV_ModStart> + 1 ; <S2SV_ModEnd> if (! <S2SV_ModStart> (! type_type_type ) return 0 ; if (! <S2SV_ModStart> ( check_type ) ) return 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart>",0
1546,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd, 0 )",0
1547,<S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> ; break ; } while ( context -> pass > 0 && context -> pass < 4 && context -> curY >= p -> height ) { switch ( ++ context -> pass ) { case 2 : context -> curY = i -> posY + 4 ; break ; case 3 : context -> curY = i -> posY + 1 ; break ; case 4 : context -> curY = i -> posY + 1 ; break ; },0
1548,<S2SV_ModStart> ; # endif <S2SV_ModEnd> if ( x,0
1549,"<S2SV_ModStart> ) ; } smb_ofile_flush <S2SV_ModEnd> ( sr, <S2SV_ModStart> f_mutex ) ; smb_ofile_flush <S2SV_ModEnd> ( sr,",1
1550,<S2SV_ModStart> <S2SV_null> <S2SV_null> static uint16_t <S2SV_ModEnd> uint16_t <S2SV_ModStart> len ) { if ( len < 2 ) return - 1 ; <S2SV_ModStart> + 1 ; } if ( len < len ) return - 1 ; <S2SV_ModStart> + 1 ; } if ( len == 0 ) return - 1 ; <S2SV_ModStart> ) ) { if ( len < len ) return - 1 ; } memcpy ( ( u16 ) ; <S2SV_ModStart> + 1 ; if ( len < end ) { if ( len ) return - 1 ; } <S2SV_ModStart> ; } <S2SV_null> <S2SV_null>,0
1551,"<S2SV_ModStart> ; if ( * cp == '\\0' || <S2SV_ModEnd> strchr ( cp <S2SV_ModStart> )!= NULL || <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> ( cp, ""."" ) == 0 || strcmp ( cp, <S2SV_ModStart> ) == 0 <S2SV_ModEnd> ) { run_err",1
1552,"<S2SV_ModStart> * arg, * * c <S2SV_ModEnd>, * <S2SV_ModStart> 0 ) { <S2SV_ModEnd> char * <S2SV_ModStart>'; int t = 0 <S2SV_ModStart>') { if ( * outputbuffer == '\\0' ) return - 1 ; } <S2SV_ModStart> ) ) { printf ( stderr, "" <S2SV_blank> \'"" ) ; return - 1 ; } <S2SV_ModStart> ) ; } if ( * outputbuffer == 0 ) { printf ( stderr, "" <S2SV_blank> \'%s"", t ) ; return ( stderr ) ; } <S2SV_ModStart> ( outputbuffer ) <S2SV_ModEnd> ; } <S2SV_ModStart> ) ) { printf ( stderr, "" <S2SV_blank> \'%s"" <S2SV_ModEnd>, "" <S2SV_blank> %s\' <S2SV_blank> \' <S2SV_blank> \'\\n"", <S2SV_ModStart> "" <S2SV_ModEnd> ) ; } <S2SV_ModStart> { fprintf ( outputbuffer ) ;",0
1553,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_ELF_NOTES_MAX : ms -> elf_notes_max = * ( size_t * ) val ; return 0 ;,0
1554,"<S2SV_ModStart> segs ) { <S2SV_ModEnd> u32 hash, <S2SV_ModStart>, id ; if ( unlikely ( siphash_is_zero ( & net -> ipv4. ip_key ) ) ) get_random_bytes ( & net -> ipv4. ip_key <S2SV_ModEnd>, sizeof ( <S2SV_ModStart>, sizeof ( net -> ipv4. ip_key <S2SV_ModEnd> ) ) ; id",0
1555,<S2SV_ModStart>,0
1556,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
1557,"<S2SV_ModStart> ctl -> pw, "".chfn""",1
1558,<S2SV_ModStart> { if ( max_length < sizeof ( struct ieee80211_radiotap_header ) ) return - EINVAL ; if ( <S2SV_ModStart> iterator -> _rtheader + sizeof ( uint32_t ),1
1559,<S2SV_ModStart> ) ) goto err <S2SV_ModEnd> ; } err <S2SV_ModStart> ) ) goto err <S2SV_ModEnd> ; if <S2SV_ModEnd> ; if <S2SV_ModStart> ( iter -> list ) goto err <S2SV_ModEnd> ; } <S2SV_null>,0
1560,<S2SV_ModStart> src ) ; dst -> curframe [ i ] = NULL ;,0
1561,<S2SV_ModStart> return ; } if ( input <= 0.0 || output <= 0.0 || output <= 0.0,0
1562,<S2SV_ModStart>!= Vpx_RC_PASS <S2SV_ModEnd> ) ; stream,0
1563,<S2SV_ModStart> -> dev ) <S2SV_ModEnd> = cmd ->,0
1564,"<S2SV_ModStart>, new_name, false <S2SV_ModEnd> ) ; if",0
1565,<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( pbi <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( cm -> <S2SV_ModStart> tile_col ) ; memcpy <S2SV_ModEnd> ( cm -> tile_cols,0
1566,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> vpx_decode_init <S2SV_ModEnd> ( * <S2SV_ModStart> -> common ; vpx_decode_get_frame_frame ( ) ; vpx_init <S2SV_ModEnd> ( * <S2SV_ModStart> pbi ) ; vpx_init <S2SV_ModEnd> ( * <S2SV_ModStart> -> ref_frame = 0 ; vpx_init <S2SV_ModEnd> ( cm ->,0
1567,<S2SV_ModStart> ) ) { GF_LOG_CONTAINER * s -> dref = 0 ; <S2SV_ModStart> ( srefrefrefrefrefref = ) <S2SV_ModEnd> ; } if ( <S2SV_ModStart> ) ) { GF_LOG_ERROR ; return GF_LOG_ERROR ; },0
1568,"<S2SV_ModStart>, - 1 ) <S2SV_ModEnd> ; client ->",0
1569,<S2SV_ModStart> -> count ; new_fpl -> user = get_uid ( fpl -> user ) ;,1
1570,<S2SV_ModStart> opt ) { <S2SV_ModEnd> ip_options_rcu ( struct <S2SV_ModStart> * opt ; opt =,0
1571,"<S2SV_ModStart> int tree, vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> * tree, vpx_tree <S2SV_ModEnd> i )",0
1572,"<S2SV_ModStart> ( ctx, vpx_codec_err_t res <S2SV_ModEnd> ( ctx ) <S2SV_ModStart> img ) ; <S2SV_ModEnd> if ( flags <S2SV_ModStart> ; if (! vpx_codec_err_t flags <S2SV_ModEnd> ( ctx, <S2SV_ModStart> & VPX_E_OK ) ) { <S2SV_ModEnd> return VPX_CODEC_OK ; } else <S2SV_ModStart> ; res = 0 ;",0
1573,<S2SV_ModStart> -> w ) <S2SV_ModEnd> if ( ctx,0
1574,"<S2SV_ModStart> ) ; struct mnt_namespace * ns = dest_mnt -> mnt_ns ; struct <S2SV_ModStart> ; if (! parent_path ) { err = count_mounts ( ns, source_mnt <S2SV_ModEnd> ) ; if <S2SV_ModStart> goto out ; } if ( ns -> mnt_ns -> pending_mounts ) { err = 0 ; <S2SV_ModStart> mnt ) ; if ( err ) goto out ; <S2SV_ModEnd> } out :",0
1575,"<S2SV_ModStart>, & len, 0",1
1576,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = _mm_set1_epi16 ( ( int16_t ),0
1577,"<S2SV_ModStart> * oxcf, const <S2SV_ModStart> rc -> avg_frame_bandwidth <S2SV_ModEnd> * oxcf ->",0
1578,"<S2SV_ModStart> { JAS_CAST ( jas_filesize <S2SV_ModEnd>, buf",0
1579,"<S2SV_ModStart> char * fout, int maxoffset <S2SV_ModStart> NULL, fout, 0",0
1580,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const x, MACROBLOCK * const x, MACROBLOCK * const x, MACROBLOCK * const x, xd, MACROBLOCKD * const x, MACROBLOCKD * const x = & cpi -> mi_col ; MACROBLOCK * const x = & x -> skip ; <S2SV_ModStart> x ) { <S2SV_ModEnd> x = vp9_get_block_size <S2SV_ModStart> x ) ; MACROBLOCKD * const <S2SV_ModStart> -> skip_block ) ; <S2SV_ModEnd> if ( cpi <S2SV_ModStart> -> skip_frame_type!= BLOCK_SIZE bsize ) { <S2SV_ModEnd> if ( cpi <S2SV_ModStart> ( cpi -> skip_frame_type && cpi -> skip_frame_id, x -> skip_frame_id, x -> skip_frame_id <S2SV_ModStart> -> skip_frame ; } # if CONFIG_VP9_VP9_VP9_HIGHBITDEPTH if ( cpi -> skip_frame_size ( cpi ) ) { x -> skip_x32x32 ( cpi, x -> skip_frame, xd -> skip_frame, x -> skip_frame, x -> skip_frame_frame",0
1581,<S2SV_ModStart> ( ddev -> bLength < sizeof ( struct usb_descriptor ) <S2SV_ModEnd> ) ; if,0
1582,"<S2SV_ModStart> key ) { <S2SV_ModEnd> unsigned char key2 <S2SV_ModStart> ] ; struct crypto_cipher * tfm_des <S2SV_ModEnd> ; struct crypto_cipher <S2SV_ModStart> ; tfm_cipher_des <S2SV_ModEnd> ( tfm_des ) ; <S2SV_ModStart> ; tfm_des = crypto_des <S2SV_ModEnd> ( tfm_des, <S2SV_ModStart> 8 ) ; if (! crypto_free_des ) return - ENOMEM <S2SV_ModEnd> ; } <S2SV_null>",0
1583,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1584,"<S2SV_ModStart> uint32_t i ; uint32_t value = 0 ; <S2SV_ModStart> ++ ) { if (! get_bits ( ctx ) ) { av_log ( ctx, AV_LOG_ERROR, ""invalid <S2SV_blank> length <S2SV_blank> %u\\n"", name, 0 ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ) ) { av_log ( ctx -> av_log, AV_LOG_ERROR, ""invalid <S2SV_blank> length <S2SV_blank> %d\\n"", value ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> -> size_t value = 0 ; if (! ctx -> size_t ) { av_log ( ctx -> log, AV_LOG_ERROR, ""invalid <S2SV_blank> value <S2SV_blank> depth <S2SV_blank> range\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ) ) { if (! av_log ( ctx -> count ) { av_log_log ( ctx -> count ) ; return AVERROR_INVALIDDATA ; } } else { av_log_log_log ( ctx -> data_size = 0 ; } } else { av_log ( ctx -> log, AV_LOG_ERROR, ""be <S2SV_blank> must <S2SV_blank> be <S2SV_blank> range <S2SV_blank> range <S2SV_blank> of <S2SV_blank> %d\\n"", value ) ; return AVERROR_INVALIDDATA ; }",0
1585,<S2SV_ModStart> i > pos + delta <S2SV_ModStart> off + 1 <= pos + delta <S2SV_ModEnd> ) insn ->,1
1586,<S2SV_ModStart> case EXIT_REASON_INVEPT : case EXIT_REASON_INVVPID :,1
1587,<S2SV_ModStart> } else { if ( c!= NULL ) { error = ERROR ; } else if (,0
1588,<S2SV_ModStart> packet_header. pkt_length = 0 ; packet ->,0
1589,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
1590,"<S2SV_ModStart> ++ r ; if <S2SV_ModEnd> ( pow ( <S2SV_ModStart>, dim ) <= entries ) return - 1 ; if <S2SV_ModEnd> ( ( int <S2SV_ModStart> dim ) ) > entries ) return - 1 <S2SV_ModEnd> ; return r",1
1591,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> x ), MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> ; } } return ( <S2SV_ModStart> dds_info, 8, exception ) ) <S2SV_ModEnd> ; } <S2SV_null>",1
1592,<S2SV_ModStart> ; if ( opt -> opt.,0
1593,<S2SV_ModStart> val ) ; <S2SV_ModEnd> if ( zval,0
1594,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL )",0
1595,<S2SV_ModStart> } if ( outputbuffer <S2SV_ModEnd> ( outputbuffer ),0
1596,"<S2SV_ModStart> cfg ) { struct stat st ; FILE * file = NULL ; int fd = - 1 ; <S2SV_ModStart> } else { fd = open ( fd <S2SV_ModEnd>, ""a"" ) <S2SV_ModStart> } } if ( fd >= 0 && <S2SV_ModEnd>",0
1597,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! f2fs_readonly (,1
1598,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
1599,"<S2SV_ModStart> y12 ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> c"", x ) ;",0
1600,<S2SV_ModStart> return FALSE ; if ( rdp -> header == 0,0
1601,<S2SV_ModStart> user ) ; <S2SV_ModEnd> return - 1,0
1602,<S2SV_ModStart> ) ) { memcpy <S2SV_ModEnd> ( xd ->,0
1603,<S2SV_ModStart> == ARPHRD_ETHER ) { <S2SV_ModStart> ether_setup ) ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; },1
1604,"<S2SV_ModStart> * data ; struct stream packet = * s ; <S2SV_ModStart> ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } if (",1
1605,<S2SV_ModStart> pbi ) { vpx_free_buffer <S2SV_ModEnd> ( pbi ->,0
1606,<S2SV_ModStart> { if ( l == NULL ) break ; if (,1
1607,<S2SV_ModStart> { if ( ( xWantedSize > xWantedSize ) && ( ( xWantedSize + xWantedSize ) > xWantedSize ),0
1608,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1609,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1610,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpDiff ( TIFF <S2SV_ModStart> cc ) ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> stride ) )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""fpDiff"", ""%s"", ""(cc%(bps*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> tmp ) return 0 <S2SV_ModStart> cp -- ) return 1 ;",1
1611,"<S2SV_ModStart> int num ; uint16 y = 0 ; <S2SV_ModStart> i ) { if (! s ) { if ( s_check_rem ( s, height ) ) { out = - 1 ; } <S2SV_ModStart> 1 ) ; if (! s_check_bmp_rem ( s, width ) ) { out = 0 ; }",0
1612,<S2SV_ModStart> ) ) ; if ( ss >= 0 ) return 0 ;,0
1613,<S2SV_ModStart> return 0 ; msg_len = sizeof ( * tptr ) ;,0
1614,<S2SV_ModStart> { uint16 bitspersample = 0,0
1615,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1616,<S2SV_ModStart> coef_probs ) { vpx_prob <S2SV_ModEnd> * coef_probs [,0
1617,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1618,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x02 ; state -> data [ 2 ] = 0x0 ; if ( dvb_usb_generic_rw ( d, state -> data, 3, state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x83 ; state -> data [ 2 ] = 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; state -> data [ 1 ] = 0x83 ; state -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 2 ] = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state",0
1619,<S2SV_ModStart> ) { return <S2SV_ModEnd> ; } <S2SV_null>,0
1620,<S2SV_ModStart>. cfg_cfg_t * cfg <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( ctx ) <S2SV_ModEnd> ( ctx ),0
1621,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> vpx_get_segment_size <S2SV_ModEnd> ( vpx_filter, <S2SV_ModStart> int uv_stride, uint8_t uv_stride <S2SV_ModEnd> * uv_stride, <S2SV_ModStart> uv_stride, int uv_stride <S2SV_ModEnd> ; if (",0
1622,<S2SV_ModStart>,0
1623,"<S2SV_ModStart> int n, <S2SV_ModEnd> c ) { <S2SV_ModStart> return 0 ; <S2SV_ModEnd> if ( i",0
1624,<S2SV_ModStart> ) goto retry <S2SV_ModEnd> ; } if,0
1625,<S2SV_ModStart> * i_count ; unsigned char * i_count ; <S2SV_ModStart> uint16_t i_count ; if ( iinfo -> i_len > bs ) goto out ; if ( udf_read ( inode ) -> i_sb ) goto out_alloc_offset ; <S2SV_ModStart> < 0 ) { <S2SV_ModEnd> err ( &,0
1626,"<S2SV_ModStart>, n ) ; if ( w == NULL ) return 0",1
1627,<S2SV_ModStart> i ++ ) { <S2SV_ModEnd> i ++ ; <S2SV_ModStart> i ++ ) ; <S2SV_ModEnd> if ( i,0
1628,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> vpx_worker <S2SV_ModEnd> * const uint8_t <S2SV_ModStart> int i ; memset <S2SV_ModEnd> ( pbi -> <S2SV_ModStart> tile_rows ) ; memset <S2SV_ModEnd> ( & tile_rows <S2SV_ModStart> 1 ) ; memset <S2SV_ModEnd> ( pbi -> <S2SV_ModStart> pbi -> num_tile_rows ], 0, sizeof ( tile_rows ) ) <S2SV_ModEnd> ; const uint8_t <S2SV_ModStart> int i ; memset ( pbi -> num_tile_rows - 1 ) ; memset ( pbi -> num_tile_rows, 0, sizeof ( pbi -> tile_rows ) ) ; memset ( pbi -> tile_rows - 1 ), 0, sizeof ( pbi -> tile_worker ) ) ; vpx_error <S2SV_ModEnd> ( & <S2SV_ModStart> ++ ) { vp9_init <S2SV_ModEnd> ( & <S2SV_ModStart> ) ) ; vpx_init <S2SV_ModEnd> ( & <S2SV_ModStart> ) ) ; }",0
1629,<S2SV_ModStart> ) ; # ifdef LIBRAW_LIBRARY_LIBRARY_BUILD if ( ( c )!= 8 ) # ifdef LIBRAW_LIBRARY_LIBRARY_BUILD # endif <S2SV_ModStart> ) ) ; # ifdef LIBRAW_LIBRARY_LIBRARY_BUILD # endif,0
1630,<S2SV_ModStart> ) err = - EINVAL <S2SV_ModEnd> ; if (,0
1631,"<S2SV_ModStart> cm -> seg ; const vpx_set_segdata <S2SV_ModEnd> ( seg, <S2SV_ModStart> * seg ; if ( segfeature_active ) { vpx_set_segdata <S2SV_ModEnd> ( seg, <S2SV_ModStart> i ) ; } else { vpx_set_segdata <S2SV_ModEnd> ( seg, <S2SV_ModStart> i ] ) ; vpx_set_q <S2SV_ModEnd> ( seg, <S2SV_ModStart> i ], seg_qindex <S2SV_ModEnd> ) ; }",0
1632,<S2SV_ModStart> ; if ( & domain == NULL ) return - EINVAL ; if (,0
1633,"<S2SV_ModStart> ( void ) TIFFGetFieldDefaulted <S2SV_ModEnd> ( in,",1
1634,<S2SV_ModStart> ( error ) <S2SV_ModEnd> ; if (,0
1635,<S2SV_ModStart> break ; } if ( i < sizeof ( str ) ) return - 1,0
1636,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1637,"<S2SV_ModStart> ""corrupt <S2SV_blank> BSON"" ) ; VALIDATE_TEST ( ""test59.bson"", BSON_VALIDATE_NONE, 9, BSON_VALIDATE_NONE, ""corrupt <S2SV_blank> BSON"" ) ;",1
1638,<S2SV_ModStart>,0
1639,<S2SV_ModStart> * ps_cur_cur_slice_params = 0 <S2SV_ModEnd> ; ps_dec ->,0
1640,<S2SV_ModStart> ) ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock,0
1641,<S2SV_ModStart> return NULL ; <S2SV_ModEnd> if ( key_key,0
1642,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> t ) ),0
1643,<S2SV_ModStart> out ) ; else if <S2SV_ModEnd> (!,0
1644,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x02 ; state -> data [ 2 ] = 0x0 ; if ( dvb_usb_generic_rw ( d, state -> data, 3, state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x83 ; state -> data [ 2 ] = 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; state -> data [ 1 ] = 0x83 ; state -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 2 ] = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state",0
1645,<S2SV_ModStart> int getnum ( <S2SV_ModEnd> const char *,0
1646,<S2SV_ModStart> L ) ; g -> gcstate = GCSswpallgc ;,0
1647,<S2SV_ModStart> - EIO ; goto err ;,0
1648,<S2SV_ModStart> ) ) { <S2SV_ModEnd> const char * <S2SV_ModStart> == NULL ) { <S2SV_ModEnd> log ( LOG_ERR <S2SV_ModStart> NULL ; } s_write_exception ( ) ; <S2SV_ModStart> ) ; } return NULL ;,0
1649,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct vpx_remote_remote_connection ( <S2SV_ModEnd> cib -> socket <S2SV_ModStart> client ; int rc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart> ) { cib -> session <S2SV_ModStart> = 0 ; } <S2SV_ModEnd> return 0 ;,0
1650,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( cpi ->,0
1651,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd>, 0",0
1652,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MIN, 1 <S2SV_ModEnd>, regs,",1
1653,<S2SV_ModStart> ( len <S2SV_ModEnd> ) ) ; return,0
1654,"<S2SV_ModStart> ctx, expr -> unary. child",1
1655,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1656,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg ; <S2SV_ModEnd> if ( ioc",0
1657,"<S2SV_ModStart> Image * image ; int c <S2SV_ModStart>. red = ( MagickRealType ) <S2SV_ModStart>. red = ( MagickFalse ) <S2SV_ModStart>. red = ( MagickRealType ) <S2SV_ModStart>. blue = ( MagickRealType ) <S2SV_ModStart>. blue = 0.0 <S2SV_ModEnd> ; image -> <S2SV_ModStart>. green = 0.0 <S2SV_ModEnd> ; image -> <S2SV_ModStart>. green = 0.0 <S2SV_ModEnd> ; image -> <S2SV_ModStart> ) ) ; if ( c < 0 ) { data = ( unsigned char * ) RelinquishMagickMemory ( image ) ; ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) <S2SV_ModStart> ) ) ; } if ( c < 0 ) { data = ( unsigned char * ) RelinquishMagickMemory ( image ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; ThrowReaderException ( CorruptImageError, ""UnexpectedEndOfFile"" ) <S2SV_ModEnd> ; } if",0
1658,<S2SV_ModStart> ) ) ; if (! JAS_null>,0
1659,<S2SV_ModStart> 0 ] = 0 <S2SV_ModEnd> ; if (,0
1660,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> int m ) { const vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> ) ; return vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> 1 ) ; return vpx_read <S2SV_ModEnd> ( r,",0
1661,<S2SV_ModStart> ; int is_valid = ( error == GIT_OK ) <S2SV_ModStart> giterr_clear ( ) <S2SV_ModEnd> ; error =,1
1662,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
1663,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> { if ( <S2SV_ModEnd> cm -> fc",0
1664,<S2SV_ModStart> + 0 ; return <S2SV_ModEnd> } } if,0
1665,<S2SV_ModStart>,0
1666,<S2SV_ModStart> ( cp + op -> ndo_opt <S2SV_ModEnd> ) ) goto,0
1667,<S2SV_ModStart> return 0 ; <S2SV_ModEnd>,0
1668,<S2SV_ModStart> old ) { struct unix_dgram_peer * old = 0 ; <S2SV_ModStart> mutex_lock ( & old -> peer_lock ) ; if (,0
1669,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> ret ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> ret ) ; <S2SV_ModEnd> } else {,0
1670,<S2SV_ModStart> ; if ( skb -> len < sizeof ( struct nlattr ) ) return 0 ; if ( <S2SV_ModStart> -> nla_len > <S2SV_ModEnd> skb -> len <S2SV_ModStart> skb -> len - A,1
1671,"<S2SV_ModStart> ]. size ; if ( ~ length < 16 ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" )",1
1672,,0
1673,"<S2SV_ModStart> -> cac_id, serial -> len <S2SV_ModEnd> ) ; SC_FUNC_RETURN",1
1674,<S2SV_ModStart> = 0 ; tok -> start = 0 ; tok ->,0
1675,<S2SV_ModStart> ( av1 ) ; <S2SV_ModEnd> if ( av1,0
1676,<S2SV_ModStart> ) ) { GF_LOG_CONTAINER * sref = <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { GF_LOG_ERROR ( GF_FILE ) ; return GF_LOG_ERROR ; },0
1677,<S2SV_ModStart> ; r = 0 <S2SV_ModEnd> ; if (,0
1678,<S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ; if (,0
1679,<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> (! sock ||! addrlen ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_in > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> ) ; } if ( addrlen_in > addrlen_in ) OE_RAISE_ERRNO ( OE_EINVAL ) ;,0
1680,,1
1681,"<S2SV_ModStart> return FALSE ; } if (! <S2SV_ModStart>, s ) ) return FALSE",0
1682,"<S2SV_ModStart> final_p ) ; struct ipv6_txoptions * opt <S2SV_ModStart> ) ) ; opt = rcu_dereference_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ; <S2SV_ModStart> & fl6, <S2SV_ModEnd> opt, & <S2SV_ModStart> ; if ( <S2SV_ModEnd> ) goto out",0
1683,"<S2SV_ModStart>, uint32_t fsize, <S2SV_ModStart> ; uint32_t fsize, upsize <S2SV_ModEnd> ; uint32_t <S2SV_ModStart> = 0 ; uint32_t ret <S2SV_ModEnd> ; uint32_t <S2SV_ModStart> = 0 ; if ( extsize < 0 ) { break ; } <S2SV_ModStart> = 0 ; unsigned int ret = 0 ; if ( hdr == 0 ) {",0
1684,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR, DM9000ReadReg ( DM9000_ERPR <S2SV_ModEnd> ) ; while <S2SV_ModStart> = dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR ) ; dm9000ReadReg ( DM9000_EPCR_EPCR ) ; dm9000ReadReg ( DM9000_EPCR ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR ) ;",0
1685,"<S2SV_ModStart>, buffer, t2p -> tiff_datasize,",1
1686,<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode ) <S2SV_ModStart> ) return - EPERM <S2SV_ModEnd> ; if (,0
1687,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
1688,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1689,"<S2SV_ModStart> new_parent ) { <S2SV_ModEnd> __ptrace_link ( child <S2SV_ModStart>, new_parent, current_cred ( ) <S2SV_ModEnd> ) ; }",1
1690,<S2SV_ModStart> return 0 ; <S2SV_ModEnd>,0
1691,<S2SV_ModStart> } if (! private -> callback ) return - 1 ; if (,0
1692,<S2SV_ModStart> size = 0 ; if ( unlikely (! address ) ) return - EFAULT,0
1693,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = 0 ; int <S2SV_ModEnd> new_mv_err = vp9_get_mv ( cpi <S2SV_ModStart>, & cpi, tmp_mv, tmp_err <S2SV_ModEnd>, & <S2SV_ModStart>, 1, tmp_err, tmp_err ) <S2SV_ModStart> = 0 ; tmp_err = 0 ; if ( cpi -> ref_mv. col >= MAX_MV ) { tmp_err = vp9_get_sad16 ( cpi, cpi, tmp_mv, & cpi -> ref_mv, sizeof ( x -> common ) ) ; } else { if ( tmp_err ) goto out_err ; }",0
1694,<S2SV_ModStart> ; if (,0
1695,<S2SV_ModStart> ) ) ; if ( child == 0 ) return NULL ;,0
1696,<S2SV_ModStart> ( err ) <S2SV_ModEnd> if ( msg_sys,0
1697,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
1698,"<S2SV_ModStart> number_colormaps, number_planes, number_planes_filled <S2SV_ModStart> -> rows ; number_planes_filled = ( number_planes % 2 == 0 )? number_planes : number_planes + 1 ; <S2SV_ModStart> ( number_planes_filled <S2SV_ModEnd> )!= ( <S2SV_ModStart> ( number_planes_filled <S2SV_ModEnd> ) ) ThrowReaderException <S2SV_ModStart> -> rows * number_planes_filled <S2SV_ModEnd> ; pixel_info =",0
1699,<S2SV_ModStart> ( r = <S2SV_ModEnd> sshbuf_put_string ( b,0
1700,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1701,<S2SV_ModStart> user ) { <S2SV_ModEnd> if ( client,0
1702,<S2SV_ModStart> * uv ) <S2SV_ModEnd> ; if (,0
1703,<S2SV_ModStart> -> ft_file = NULL,0
1704,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1705,<S2SV_ModStart>! out ) goto out ;,0
