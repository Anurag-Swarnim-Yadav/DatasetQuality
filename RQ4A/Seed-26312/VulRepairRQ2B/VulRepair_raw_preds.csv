,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
1,<S2SV_ModStart> ; if ( unlikely ( unfrag_ip6hlen < frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz - sizeof ( struct frag_hdr ) - sizeof ( struct frag_hdr ) - sizeof ( struct frag_hdr ) - sizeof ( struct frag_hdr ) - sizeof ( struct frag_hdr ) ) { if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz - sizeof ( struct frag_hdr ) - sizeof ( struct frag_hdr ) - sizeof ( struct frag_hdr ) ) ) { if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz - sizeof ( struct frag_hdr ) - sizeof ( struct frag_hdr ) - sizeof ( struct frag_hdr ) - sizeof ( struct frag_hdr ) - sizeof ( struct frag_hdr ) ) ) { if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz - sizeof ( struct frag_hdr ) - sizeof ( struct frag_hdr ) - sizeof ( struct frag_hdr ) ) ) ) { if ( unfrag_ip6hlen > frag_hdr_sz - sizeof ( struct frag_hdr ) -,0
2,<S2SV_ModStart> writer = ( TrackWriter <S2SV_ModEnd> * ) gf_list_get,0
3,<S2SV_ModStart> item ) { return <S2SV_ModEnd> cJSON_GetArrayItem ( array <S2SV_ModStart> -> child ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
4,"<S2SV_ModStart> u32 event_id, u64 <S2SV_ModEnd> nr, int <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",0
5,"<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { char * buf = grub_malloc ( EXT2_BLOCK_SIZE ( data ) ) ; if (! buf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } <S2SV_ModEnd> struct grub_ext4_extent_header * <S2SV_ModStart> leaf ) { <S2SV_ModEnd> grub_error ( GRUB_ERR_BAD_FS <S2SV_ModStart> ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) ( leaf + 1 ) ; for ( i = 0 ; i < grub_le_to_cpu16 ( leaf -> entries ) ; i ++ ) { if ( fileblock < grub_le_to_cpu32 ( ext [ i ]. block ) ) break ; if ( fileblock >= grub_le_to_cpu16 ( ext [ i ]. len ) ) return 0 ; else { grub_disk_addr_t start ; start = grub_le_to_cpu32 ( ext [ i ]. start ) ; start = ( start << 32 ) + grub_le_to_cpu32 (",0
6,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fdct16 ( const <S2SV_ModStart> 16 ] ) { int step0 [ 8 ] ; int step1 [ 8 ] ; int step2 [ 8 ] ; int step3 [ 8 ] ; int input [ 8 ] ; int temp0, temp1, temp2 ; int input [ 0 ] = in [ 0 ] + in [ 15 ] ; input [ 1 ] = in [ 1 ] + in [ 14 ] ; input [ 2 ] = in [ 2 ] + in [ 15 ] ; input [ 3 ] = in [ 3 ] + in [ 14 ] ; input [ 4 ] = in [ 4 ] + in [ 11 ] ; input [ 5 ] = in [ 5 ] + in [ 12 ] ; input [ 6 ] = in [ 6 ] + in [ 10 ] ; input [ 7 ] = in [ 0 ] - in [ 8 ] ; input [ 0 ] = in [ 0 ] + in [ 15 ] ; input [ 1 ] = in [ 1 ] + in [ 14 ] ; input [ 2 ] = in [ 2 ] + in [ 13 ] ; input [ 3 ] = in [ 3 ] + in [ 12 ] ; input",0
7,"<S2SV_ModStart> = 0 ; unsigned char sense_buffer [ SCSI_SENSE_BUFFERSIZE ] ; <S2SV_ModStart> -> buflen, sense_buffer <S2SV_ModEnd>, & sshdr <S2SV_ModStart> cgc -> sense, & sshdr, cgc -> timeout, IOCTL_RETRIES, 0, 0, NULL ) ; if ( driver_byte ( result )!= 0 ) { switch ( sshdr. sense_key ) { case UNIT_ATTENTION : SDev -> changed = 1 ; if (! cgc -> quiet ) sr_printk ( KERN_INFO, cd, ""CDROM <S2SV_blank> not <S2SV_blank> ready <S2SV_blank> yet.\\n"" ) ; err = - ENOMEDIUM ; break ; } if (! cgc -> quiet ) sr_printk ( KERN_INFO, cd, ""CDROM <S2SV_blank> not <S2SV_blank> ready <S2SV_blank> yet.\\n"" ) ; if ( retries ++ < 10 ) goto retry ; if (! cgc -> quiet ) sr_printk ( KERN_INFO, cd, ""CDROM <S2SV_blank> not <S2SV_blank> ready <S2SV_blank> yet.\\n"" ) ; err = - ENOMEDIUM ; break ; } if (! cgc -> quiet ) sr_printk ( KER",0
8,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> ( ) == 0x48454150 ) { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; # endif <S2SV_ModStart> ( ) == LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; # else imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; # endif,0
9,"<S2SV_ModStart> void search_filter_level ( const YV12_BUFFER_CONFIG * sd, VP9_COMMON * const cm, struct loopfilter * lf, <S2SV_ModStart> partial_frame ) { VP9_COMMON * const cm = & cpi -> common ; struct loopfilter * const lf = & cm -> lf ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int min_filter_level = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; int best_err ; int filt_best ; int filt_direction = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; int filt_mid = clamp ( lf -> filter_level, max_filter_level ) ; int filter_step = MIN ( filt_mid + filter_step, max_filter_level ) ; int bias = ( best_err >> ( 15 - ( filt_mid / 8 )",0
10,"<S2SV_ModStart> left == 0 ) { luaL_error ( L, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> offset <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> and <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d."", offset, len ) ; return luaL_error ( L, ""Start <S2SV_blank> offset <S2SV_blank> %d <S2SV_blank> greater <S2SV_blank> than <S2SV_blank> input <S2SV_blank> length <S2SV_blank> %d."", offset, len ) ; } <S2SV_ModStart> left == 0 ) { luaL_error ( L, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d."", offset, len ) ; return luaL_error ( L, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> offset <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> and <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d."", offset, len ) ; return luaL_error ( L, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> offset <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> and <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d."", offset, len ) ; }",0
11,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( w, mvcomp -> sign <S2SV_ModEnd> ) ; vpx_write_token <S2SV_ModStart> i ) vpx_write <S2SV_ModEnd> ( w,",0
12,<S2SV_ModStart> -> rxBlockSzx = COAP_BLOCK_SIZE_16 ; else if ( blockSize == 24 ) request -> rxBlockSzx = COAP_BLOCK_SIZE_24 ; else if ( blockSize == 16 ) request -> rxBlockSzx = COAP_BLOCK_SIZE_16 ; <S2SV_ModStart> == 32 ) request -> rxBlockSzx = COAP_BLOCK_SIZE_32 ; else if ( blockSize == 64 ) request -> rxBlockSzx = COAP_BLOCK_SIZE_64 ; else if ( blockSize == 32 ) request -> rxBlockSzx = COAP_BLOCK_SIZE_32 ; else if ( blockSize == 64 ) request -> rxBlockSzx = COAP_BLOCK_SIZE_64 ; else if ( blockSize == 128 ) request -> rxBlockSzx = COAP_BLOCK_SIZE_128 ; else if ( blockSize == 256 ) request -> rxBlockSzx = COAP_BLOCK_SIZE_256 ; else if ( blockSize == 512 ) request -> rxBlockSzx = COAP_BLOCK_SIZE_512 ; else if ( request -> rxBlockSzx > coapClientGetMaxBlockSize ( ) ) request -> rxBlock,0
13,"<S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",0
14,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; if ( dest_keyring ) { key_get ( dest_keyring ) ; return 0 ; } <S2SV_ModEnd> switch ( cred <S2SV_ModStart> KEY_REQKEY_DEFL_DEFAULT : case KEY_REQKEY_DEFL_REQUESTOR_KEYRING : if ( cred -> request_key_auth ) { authkey = cred -> request_key_auth ; up_read ( & authkey -> sem ) ; if (! test_bit ( KEY_FLAG_REVOKED, & authkey -> flags ) ) dest_keyring = key_get ( authkey -> dest_keyring ) ; break ; } case KEY_REQKEY_DEFL_THREAD_KEYRING : dest_keyring = key_get ( cred -> thread_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_PROCESS_KEYRING : dest_keyring = key_get ( cred -> process_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_USER",0
15,<S2SV_ModStart> = create_spnego_ctx ( 0,0
16,"<S2SV_ModStart> ; if ( addr -> l2tp_family!= AF_INET <S2SV_ModEnd> ) return - <S2SV_ModStart> - EINVAL ; ret = - EADDRINUSE ; read_lock_bh ( & l2tp_ip_lock ) ; if ( __l2tp_ip_bind_lookup ( net, addr -> l2tp_addr. s_addr, sk -> sk_bound_dev_if, addr -> l2tp_conn_id ) ) goto out_in_use ; ret = - EADDRNOTAVAIL ; if ( addr -> l2tp_addr. s_addr && chk_addr_ret!= RTN_LOCAL && chk_addr_ret!= RTN_MULTICAST && chk_addr_ret!= RTN_BROADCAST ) goto out ; ret = - EADDRNOTAVAIL ; if ( addr -> l2tp_addr. s_addr && chk_addr_ret!= RTN_MULTICAST && chk_addr_ret!= RTN_BROADCAST ) goto out ;",0
17,<S2SV_ModStart> ; tm = g_time_to_tm <S2SV_ModEnd> ( & t,0
18,"<S2SV_ModStart> strlen ( password ) ) ; if ( type == PW_PASSWORD ) { attr = find_attribute ( request, PW_OLD_PASSWORD ) ; if (! attr ) { add_attribute ( request, PW_PASSWORD, hashed, length ) ; } else { memcpy ( attr -> data, hashed, length ) ; } }",0
19,"<S2SV_ModStart> ; if (! e ) goto not_found ; r = parse_uid ( e + 1, & uid ) ; if ( r < 0 ) goto not_found ; machine = strndupa ( p, e - p ) ; if (! machine_name_is_valid ( machine ) ) goto not_found ; r = sd_bus_open_system ( & bus, ""org.freedesktop.machine1"", ""/org/freedesktop/machine1.Manager"", ""MapFromMachineUser"", & error, & reply, ""su"", ( uint32_t ) uid ) ; if ( r < 0 ) goto not_found ; r = sd_bus_call_method ( bus, ""org.freedesktop.machine1"", ""/org/freedesktop/machine1"", ""MapFromMachineUser"", & error, & reply, ""su"", ( uint32_t ) uid ) ; if ( r < 0 ) goto not_found ; r = sd_bus_message_read ( reply, ""u"", & mapped ) ; if ( r < 0 ) goto not_found ;",0
20,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gidgid <S2SV_ModEnd> ( inode,",0
21,"<S2SV_ModStart> ; select ( <S2SV_ModEnd> reader -> bytes_available_fd <S2SV_ModStart> reader -> bytes_available_fd <S2SV_ModEnd>, NULL,",0
22,"<S2SV_ModStart> int detect_transition_to_still ( TWO_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> last_decay_rate ) { <S2SV_ModEnd> int trans_to_still = <S2SV_ModStart> ; if ( frame_interval < MIN_GF_INTERVAL && loop_decay_rate >= 0.999 && last_decay_rate < 0.9 ) { int j ; const FIRSTPASS_STATS * position = twopass -> stats_in ; for ( j = 0 ; j < still_interval ; ++ j ) { if ( EOF == input_stats ( twopass, & tmp_next_frame ) ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; if ( <S2SV_ModStart> pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 <S2SV_ModEnd> ) break ; <S2SV_ModStart> } reset_fpf_position ( twopass, position ) ; if ( j == still_interval ) trans_to_still = 1 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
23,"<S2SV_ModStart> ; if ( unlikely ( offset + size > inode -> i_sb -> s_blocksize ) ) { ret = ext4_convert_unwritten_extents ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; return ret ; }",0
24,"<S2SV_ModStart> alg ) { if (! capable ( CAP_SYS_MODULE ) ) return ERR_PTR ( - EPERM ) ; <S2SV_ModStart> ( ""%s-all"", name ) ; if (! capable ( CAP_SYS_MODULE ) ) return ERR_PTR ( - EPERM ) ; <S2SV_ModStart> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
25,"<S2SV_ModStart> = GIT_PKT_NG ; if ( strlen ( line ) < 3 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> += 3 ; if ( strlen ( line ) < 3 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } <S2SV_ModEnd> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
26,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_request ( rdpNego <S2SV_ModStart> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nego_process_negotiation_request ( rdpNego <S2SV_ModStart> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nego_process_negotiation_request ( rdpNego <S2SV_ModStart> = NEGO_STATE_FINAL ; return TRUE ;,0
27,"<S2SV_ModStart> num ) { if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; <S2SV_ModStart> num ) { if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; <S2SV_ModStart> num ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num ) ; return AVERROR_PATCHWELCOME ; } <S2SV_ModStart> num ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num ) ; return AVERROR_PATCHWELCOME ; } <S2SV_ModStart> num ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num ) ; return AVERROR_PATCHWELCOME ; } <S2SV_ModStart> num ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num ) ; return AVERROR",0
28,"<S2SV_ModStart> 1 ; } if ( check_mount_permission ( mntent, path ) < 0 ) { ERROR ( ""mount <S2SV_blank> permission <S2SV_blank> denied"" ) ; return - 1 ; } else if ( check_mount_permission ( mntent, path ) < 0 ) { ERROR ( ""mount <S2SV_blank> permission <S2SV_blank> denied"" ) ; return - 1 ; } else if ( check_mount_permission ( mntent, path ) < 0 ) { ERROR ( ""mount <S2SV_blank> permission <S2SV_blank> denied"" ) ; return - 1 ; } else { if ( check_mount_permission ( mntent, path ) < 0 ) { ERROR ( ""mount <S2SV_blank> permission <S2SV_blank> denied"" ) ; return - 1 ; } else if ( check_mount_permission ( mntent, path ) < 0 ) { ERROR ( ""mount <S2SV_blank> permission <S2SV_blank> denied"" ) ; return - 1 ; } else if ( check_mount_permission ( mntent, path ) < 0 ) { ERROR ( ""mount <S2SV_blank> permission <S2SV_blank> denied"" ) ; return - 1 ; }",0
29,"<S2SV_ModStart> - ENODEV ; for ( idx = 0 ; idx < io -> io_size ; idx ++ ) { if ( request_mem_region ( addr + idx * io -> regspacing, io -> regsize, DEVICE_NAME ) == NULL ) { mem_region_cleanup ( io, idx ) ; return - EIO ; } } mapsize = ( ( io -> io_size * io -> regspacing ) - ( io -> regspacing - io -> regsize ) ) ; for ( idx = 0 ; idx < io -> io_size ; idx ++ ) { if ( request_mem_region ( addr + idx * io -> regspacing, io -> regsize, DEVICE_NAME ) == NULL ) { mem_region_cleanup ( io, idx ) ; return - EIO ; } } } io -> addr = ioremap ( addr, mapsize ) ; if ( io -> addr == NULL ) { mem_region_cleanup ( io, io -> io_size ) ; return - EIO ; }",0
30,<S2SV_ModStart> = ( MagickRealType ) <S2SV_ModStart> = ( MagickRealType ) <S2SV_ModStart> = ( MagickRealType ) <S2SV_ModStart> = ( MagickRealType ) <S2SV_ModStart> = ( MagickRealType ) <S2SV_ModStart> = ( MagickRealType ) <S2SV_ModStart> = ( MagickRealType ) <S2SV_ModStart> = ( MagickRealType ) <S2SV_ModStart> = ( MagickRealType ) <S2SV_ModStart> = ( MagickRealType ) <S2SV_ModStart> = ( MagickRealType ) <S2SV_ModStart> = ( MagickRealType ) <S2SV_ModStart> = ( MagickRealType ) <S2SV_ModStart> = ( MagickRealType ) <S2SV_ModStart> = ( MagickRealType ) <S2SV_ModStart> = ( MagickRealType ) <S2SV_ModStart> = ( MagickRealType ) <S2SV_ModStart> = ( MagickRealType ) <S2SV_ModStart> = ( MagickRealType ) <S2SV_ModStart> = ( MagickRealType ) <S2SV_ModStart> = ( MagickRealType ) <S2SV_ModStart> = ( MagickRealType ) <S2SV_ModStart> = ( MagickRealType ) <S2SV_ModStart> = ( MagickRealType ) <S2SV_ModStart> = ( MagickRealType ) <S2SV_ModStart> = ( MagickRealType ) <S2SV_ModStart> = ( MagickRealType ) <S2SV_ModStart> = ( MagickRealType ) <S2SV_ModStart> = ( MagickRealType ) <S2SV_ModStart> = ( MagickRealType ) <S2SV_ModStart> = ( MagickRealType ) <S2SV_ModStart> = ( MagickReal,0
31,"<S2SV_ModStart> ) ) ; btif_config_set_bin ( bdstr, ""LinkKeyType"", ( int ) key_type ) ; ret &= btif_config_set_int ( bdstr, ""PinLength"", ( int ) pin_length ) ; ret &= btif_config_set_bin ( bdstr, ""LinkKeyType"", ( int ) key_type ) ; ret &= btif_config_set_bin ( bdstr, ""LinkKey"", link_key, sizeof ( LINK_KEY ) ) ; ret &= btif_config_set_bin ( bdstr, ""LinkKeyType"", ( int ) key_type ) ; ret &= btif_config_set_bin ( bdstr, ""PinLength"", ( int ) pin_length ) ; ret &= btif_config_set_bin ( bdstr, ""LinkKeyType"", ( int ) key_type ) ; ret &= btif_config_set_bin ( bdstr, ""LinkKey"", link_key, sizeof ( LINK_KEY ) ) ; ret &= btif_config_flush ( ) ;",0
32,<S2SV_ModStart> ; vpx_codec_enc_cfg_map_t * <S2SV_ModEnd> map ; if <S2SV_ModStart> VPX_CODEC_INVALID_PARAM ; for ( map = iface -> enc. cfg_maps ; map -> usage >= 0 ; map -- ) { if (! ( map -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ),0
33,<S2SV_ModStart> type_flags ) { mutex_lock ( & fanout_mutex ) ; <S2SV_ModStart> EINVAL ; } err = - EINVAL ; if ( po -> rollover ) { <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> atomic_long_set ( & <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> po -> rollover <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> po -> rollover <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> po -> rollover <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> po -> rollover <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> po -> rollover <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> po -> rollover <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> po -> rollover <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> po -> rollover <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> po -> rollover <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> po -> rollover <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> po -> rollover <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> po -> rollover <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> po -> rollover <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> po -> rollover <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> po -> rollover <S2SV_ModStart> atomic_long_set ( &,0
34,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
35,"<S2SV_ModStart> int frame_out, uint64_t <S2SV_ModEnd> dx_time ) {",0
36,"<S2SV_ModStart> ; if ( imp_sth -> num_cols > imp_sth -> num_cols ) { imp_sth -> num_cols = imp_sth -> num_cols ; do_error ( sth, JW_ERR_SEQUENCE, ""number <S2SV_blank> of <S2SV_blank> fields <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", imp_sth -> num_cols, imp_sth -> num_cols ) ; return Nullav ; } if ( imp_sth -> num_cols > imp_sth -> num_cols ) { do_error ( sth, JW_ERR_SEQUENCE, ""number <S2SV_blank> of <S2SV_blank> fields <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", imp_sth -> num_cols, imp_sth -> num_cols ) ; return Nullav ; } if ( imp_sth -> num_cols > imp_sth -> num_cols ) { do_error ( sth, JW_ERR_SEQUENCE, ""number <S2SV_blank> of <S2SV_blank> fields <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", imp_sth -> num_cols, imp_sth -> num_cols ) ; return Nullav ; }",0
37,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ETXSTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXSTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TX",0
38,"<S2SV_ModStart> ; value = ast2obj_int ( o -> lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; <S2SV_ModStart> ; value = ast2obj_int ( o -> col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o ->",0
39,"<S2SV_ModStart> ( page && ( file_access <S2SV_ModEnd> ( page, <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( page, R_OK <S2SV_ModEnd> ) == 0",0
40,"<S2SV_ModStart> flag ) { ( void ) post ; ( void ) low_var_thresh ; ( void ) flag ; ( void ) low_var_thresh ; ( void ) flag ; int mb_rows = source -> y_width >> 4 ; int mb_cols = source -> y_height >> 4 ; unsigned char * limits = cm -> pp_limits_buffer ; int mbr, mbc ; ( void ) post ; ( void ) low_var_thresh ; ( void ) flag ; memset ( limits, ( unsigned char ) ppl, 16 * mb_cols ) ; for ( mbr = 0 ; mbr < mb_rows ; mbr ++ ) { vpx_post_proc_down_and_across_mb_row ( source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_stride, source -> y_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> u_buffer + 8 * mbr * source -> uv_stride, source -> uv_stride, source -> uv_width, limits, 8 ) ; vpx_post_proc_down_and",0
41,"<S2SV_ModStart> { ret = __copy_to_user <S2SV_ModEnd> ( param, <S2SV_ModStart> ) ) ; if ( ret ) return ret ; param += sizeof ( struct floppy_raw_cmd ) ; if ( ( ptr -> flags & FD_RAW_READ ) && ptr -> buffer_length ) { long length = ptr -> buffer_length - ptr -> length ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; param += length ; } <S2SV_ModEnd> return 0 ;",0
42,"<S2SV_ModStart> void ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; <S2SV_ModEnd> ce = mb_cache_entry_alloc <S2SV_ModStart> gfp_nofs ) ; if (! ce ) { ea_bdebug ( bh, ""out <S2SV_blank> of <S2SV_blank> memory"" ) ; return ; } error = mb2_cache_entry_insert ( ext4_mb_cache, bh -> b_bdev, bh -> b_blocknr, hash ) ; if ( error ) <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> } } <S2SV_null>",0
43,"<S2SV_ModStart> ) ) ; r_socket_set_header ( s, ""Content-Type"", ""application/x-www-form-urlencoded\\r\\n"" ) ; r_socket_set_header ( s, ""Host"", host ) ; r_socket_set_header ( s, ""Host"", host ) ; r_socket_set_header ( s, ""Host"", host ) ; r_socket_set_header ( s, ""Host"", host ) ; r_socket_set_header ( s, ""Host"", host ) ; r_socket_set_header ( s, ""Content-Length"", strlen ( data ) ) ; r_socket_set_header ( s, ""Host"", host ) ; r_socket_set_header ( s, ""Host"", host ) ; r_socket_set_header ( s, ""Host"", host ) ; r_socket_set_header ( s, ""Host"", host ) ; r_socket_set_header ( s, ""Host"", host ) ; r_socket_set_header ( s, ""Host"", path ) ; r_socket_set_header (",0
44,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> ip_options_get_from_user ( struct <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ; if ( copy_from_user ( & opt -> opt, data, optlen ) ) { kfree ( opt ) ; return - EFAULT ; } <S2SV_ModEnd> return ip_options_get_finish (",0
45,"<S2SV_ModStart> ; trunc : if ( length < sizeof ( struct rpl_dio_genoption ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|truncated]"" ) ) ; length = sizeof ( struct rpl_dio_genoption ) ; } else if ( length < sizeof ( struct rpl_dio_genoption ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|truncated]"" ) ) ; length = sizeof ( struct rpl_dio_genoption ) ; } else { if ( length < sizeof ( struct rpl_dio_genoption ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|truncated]"" ) ) ; length = sizeof ( struct rpl_dio_genoption ) ; } else if ( length < sizeof ( struct rpl_dio_genoption ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|truncated]"" ) ) ; length = sizeof ( struct rpl_dio_genoption ) ; }",0
46,"<S2SV_ModStart> NULL ) { if ( ( * varp ) [ 0 ] == NUL ) errmsg = ( char_u * ) N_ ( ""E529: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> a <S2SV_blank> non-empty <S2SV_blank> string"" ) ; else if ( ( * varp ) [ 0 ] == NUL ) errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> a <S2SV_blank> non-empty <S2SV_blank> string"" ) ; else if ( ( * varp ) [ 0 ] == NUL ) errmsg = ( char_u * ) N_ ( ""E531: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> a <S2SV_blank> non-empty <S2SV_blank> string"" ) ; else if ( ( * varp ) [ 0 ] == NUL ) errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> a <S2SV_blank> non-empty <S2SV_blank> string"" ) ; else if ( ( * varp ) [ 0 ] == NUL ) errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> a",0
47,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart> & new_mode, & acl ) ; if ( ret <S2SV_ModEnd> ) goto out",0
48,"<S2SV_ModStart> size_t size ; if ( width == 0 || height == 0 ) { goto error ; } if (! jas_safe_intfast32_add ( tlx, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ) { goto error ; } if (! jas_safe_intfast32_add ( hstep, height, 0 ) ||! jas_safe_intfast32_add ( vstep, width, 0 ) ) { goto error ; } if (! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ) { goto error ; } cmpt -> stream_ = 0 ; if ( inmem ) { jas_stream_memopen2 ( 0, size ) ; if (! jas_stream_memopen2 ( 0, size ) ) { goto error ; } cmpt -> stream_ = jas_stream_memopen2 ( 0, size ) ; if (! jas_stream_memopen2 ( 0",0
49,<S2SV_ModStart> i ] == '\\r' && i < ( int ) header_buf_used ) { i ++ ; if ( i < ( int ) header_buf_used ) { i ++ ; if ( i < ( int ) header_buf_used ) { i ++ ; if ( i < ( int ) header_buf_used ) { i ++ ; if ( i < ( int ) header_buf_used ) { i ++ ; if ( i < ( int ) header_buf_used ) { i ++ ; if ( i < ( int ) header_buf_used ) { i ++ ; if ( i < ( int ) header_buf_used ) { i ++ ; if ( i < ( int ) header_buf_used ) { i ++ ; if ( i < ( int ) header_buf_used ) { i ++ ; if ( i < ( int ) header_buf_used ) { i ++ ; if ( i < ( int ) header_buf_used ) { i ++ ; if ( i < ( int ) header_buf_used ) { i ++ ; if ( i < ( int ) header_buf_used ) { i ++ ; if ( i < ( int ) header_buf,0
50,<S2SV_ModStart> == datalen ) { if ( ( flags & FLAG_LAST_MATCHED ) && ( pc + asn1_op_lengths [ op ] > datalen ) ) goto machine_overrun_error ; <S2SV_ModStart> == datalen ) { if ( ( flags & FLAG_MATCHED ) && ( pc + asn1_op_lengths [ op ] > datalen ) && ( pc + asn1_op_lengths [ op ] > datalen ) && ( pc + asn1_op_lengths [ op ] > datalen ) ) { if ( ( flags & FLAG_LAST_MATCHED ) && ( pc + asn1_op_lengths [ op ] > datalen ) ) goto machine_overrun_error ; } else { if ( ( flags & FLAG_MATCHED ) && ( pc + asn1_op_lengths [ op ] > datalen ) && ( pc + asn1_op_lengths [ op ] > datalen ) && ( pc + asn1_op_lengths [ op ] > datalen ) ) { if ( ( flags & FLAG_LAST_MATCHED ) && ( pc + asn1_op_lengths [ op ] > datalen ) ) goto machine_overr,0
51,"<S2SV_ModStart> req, size_t <S2SV_ModEnd> acl_len ) { <S2SV_ModStart> status ; __be32 <S2SV_ModEnd> savep ; uint32_t <S2SV_ModStart> int status ; * acl_len = 0 ; if ( ( status = decode_op_hdr ( xdr, OP_GETATTR ) )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & savep ) )!= 0 ) goto out ; if ( likely ( req -> rq_rcv_buf. len < hdrlen <S2SV_ModEnd> ) { dprintk <S2SV_ModStart> ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
52,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
53,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth, <S2SV_ModStart>, & tok ) ; if ( owner && * owner ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { gid = ( int ) stoi ( group ) ; } else if ( smatch ( group, ""APPWEB"" ) ) { gid = groupToID ( group ) ; } } if ( owner && * owner ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { uid = ( int ) stoi ( owner ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { gid = ( int ) stoi ( group ) ; } } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; } }",0
54,"<S2SV_ModStart> ; # if CONFIG_MMU if ( vpx_mm_create_heap_memory ( ) < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> create <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) } number_aau = ( ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ; addr = VPX_MALLOC_L ( size + align - 1 + ADDRESS_STORAGE_SIZE ) ; # endif <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr",0
55,"<S2SV_ModStart> int res ; unsigned <S2SV_ModStart> int indexes = read_fs_blocks <S2SV_ModEnd> ( fd, <S2SV_ModStart>. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } <S2SV_ModEnd> res = read_fs_bytes <S2SV_ModStart>. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } res = read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\",0
56,"<S2SV_ModStart> HASH_DISABLED ; } else { return apr_psprintf ( cmd -> pool, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"", p1 ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
57,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
58,"<S2SV_ModStart> = 0.0 ; uint32 nstrips = 0, ntiles = 0 ; uint16 <S2SV_ModEnd> planar = 0 <S2SV_ModStart> planar ) ; if ( buffsize < 0 ) { TIFFError ( ""loadImage"", ""InsufficientImageDataInFile"" ) ; return - 1 ; } <S2SV_ModStart> nstrips ) { if ( buffsize < 0 ) { TIFFError ( ""loadImage"", ""InsufficientImageDataInFile"" ) ; return - 1 ; } <S2SV_ModStart> ntiles ) { if ( buffsize < 0 ) { TIFFError ( ""loadImage"", ""InsufficientImageDataInFile"" ) ; return - 1 ; } if ( buffsize < 0 ) { TIFFError ( ""loadImage"", ""InsufficientImageDataInFile"" ) ; return - 1 ; } <S2SV_ModStart> nstrips ) { if ( buffsize < 0 ) { TIFFError ( ""loadImage"", ""InsufficientImageDataInFile"" ) ; return - 1 ; } <S2SV_ModStart> ntiles ) { if ( buffsize < 0 ) { TIFFError ( ""loadImage"", ""InsufficientImageDataInFile"" ) ; return - 1 ; } if ( buffsize < 0 ) { TIFFError ( ""loadImage""",0
59,"<S2SV_ModStart> = 0 ; # if CONFIG_VP10_ENCODER else if ( strcmp ( global -> codec -> name, ""vp10"" ) == 0 ) { ctrl_args = vp10_args ; ctrl_args_map = vp10_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp11"" ) == 0 ) { ctrl_args = vp11_args ; ctrl_args_map = vp11_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp12"" ) == 0 ) { ctrl_args = vp12_args ; ctrl_args_map = vp12_arg_ctrl_map ; # endif } else if ( arg_match ( & arg, & outputfile, argi ) ) { config -> out_fn = arg. val ; } else if ( arg_match ( & arg, & fpf_name, argi ) ) { config -> stats_fn = arg. val ; } else if ( arg_match ( & arg, & use_ivf, argi ) ) { config -> write_webm = 1 ; } else if ( arg_match",0
60,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
61,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> out ; } ext_size = sizeof ( EXT4_I ( inode ) -> i_data ) ; <S2SV_ModStart> -> i_data, ext_size <S2SV_ModEnd> ) ; neh <S2SV_ModStart> le16_to_cpu ( EXT4_EXT_MAGIC ( inode ) ) ; neh = ext_block_hdr ( bh ) ; if ( ext_depth ( inode ) ) neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block_idx ( inode, 0 ) ) ; neh -> eh_magic = cpu_to_le16 ( EXT4_EXT_MAGIC ( inode ) ) ; neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block ( inode, 0 ) ) ; neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block ( inode, 0 ) ) ; neh -> eh_magic = cpu_to_le16 ( EXT4_EXT_MAGIC ( inode ) ) ; neh -> eh_magic = cpu_to_le16 ( EXT4_EXT_MAGIC (",0
62,"<S2SV_ModStart> 1 ; } SSL_SET_ex_data ( c -> ssl, index_session_authenticated, ( void * ) ( - 1 ) ) ; <S2SV_ModStart> 1 ; } <S2SV_ModEnd> if ( c <S2SV_ModStart> -> protocol ) { SSL_SET_ex_data ( c -> ssl, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if (! sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } <S2SV_ModEnd> if ( c <S2SV_ModStart>. names ) { SSL_SET_ex_data ( c -> ssl, index_session_authenticated, ( void * ) ( - 1 ) ) ; } <S2SV_ModEnd> if ( c <S2SV_ModStart>. names ) { SSL_SET_ex_data ( c -> ssl, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } <S2SV_ModEnd> return 0 ;",0
63,"<S2SV_ModStart> ; if ( memcmp ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE ) ) goto exit ;",0
64,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
65,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
66,"<S2SV_ModStart> cpi ) { ( void ) cpi ; ( void ) cpi ; <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> ; cpi -> twopass. gf_group_bits -= bits_used ; cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
67,"<S2SV_ModStart> EOFOp 0x07 <S2SV_ModEnd> Image * image <S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> -> page. x <S2SV_ModEnd> = ReadBlobLSBShort ( <S2SV_ModStart> = ReadBlobLSBShort ( image ) ; image -> page. y <S2SV_ModEnd> = ReadBlobLSBShort ( <S2SV_ModStart> = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; flags = ( MagickStatusType ) ReadBlobByte ( image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModEnd>",0
68,"<S2SV_ModStart> err_free_urbinfo ; } dev_dbg ( & usbinterface -> dev, ""gtco <S2SV_blank> # <S2SV_blank> interfaces: <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg (",0
69,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
70,"<S2SV_ModStart> char * dir ; tmpname = malloc ( sizeof ( tmpname ), GFP_KERNEL ) ; if ( tmpname == NULL ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> create <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( tmpname == NULL ) { ulckpwdf ( ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> create <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( tmpname [ sizeof ( tmpname ) - 1 ]!= tmpname [ sizeof ( tmpname ) - 1 ] ) ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> create <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } <S2SV_ModEnd> copyfile ( lockfd",0
71,"<S2SV_ModStart> ps_bitstrm ) ; if ( ps_codec -> i4_pic_done ) return IHEVCD_UNSUPPORTED_PPS_ID ; ps_pps -> i1_pic_id = CLIP3 ( ps_pps -> i1_pic_id, 0, MAX_PPS_CNT - 1 ) ; ps_sps -> i1_sps_id = CLIP3 ( ps_sps -> i1_sps_id, 0, MAX_SPS_CNT - 2 ) ; ps_sps -> i1_sps_id = CLIP3 ( ps_sps -> i1_sps_id, 0, MAX_SPS_CNT - 3 ) ; ps_sps -> i1_sps_id = CLIP3 ( ps_sps -> i1_sps_id, 0, MAX_SPS_CNT - 3 ) ; ps_sps -> i1_sps_id = CLIP3 ( ps_sps -> i1_sps_id, 0, MAX_SPS_CNT - 3 ) ; ps_sps -> i",0
72,"<S2SV_ModStart> n ++ ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> n ++ ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> n ++ ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; }",0
73,"<S2SV_ModStart> void vp9_setup_dst_planes ( MACROBLOCKD * xd, <S2SV_ModEnd> const YV12_BUFFER_CONFIG * <S2SV_ModStart> const buffers [ 4 <S2SV_ModEnd> ] = { <S2SV_ModStart> -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; const int i ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
74,"<S2SV_ModStart> <S2SV_null> static inline int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> dst ) { return assign_eip_far ( ctxt, dst, ctxt -> mode == X86EMUL_MODE_PROT64 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",1
75,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
76,<S2SV_ModStart> == READ ) { <S2SV_ModStart> = ocfs2_get_block ; } else { <S2SV_ModStart> = ocfs2_dio_get_block ; },0
77,"<S2SV_ModStart> if ( fscanf <S2SV_ModEnd> ( f, <S2SV_ModStart>, def, strparm ) == 2 ) { if ( strparm [ 0 ] == \'""\' ) { isstring = true ; len = strlen ( strparm ) ; newstring = ( char * ) malloc ( len ) ; strparm [ len - 1 ] = 0 ; } else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else sscanf ( strparm, ""%i"", & parm ) ; } else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else sscanf ( strparm, ""%i"", & parm ) ; for ( i = 0 ; i < numdefaults ; i ++ ) if (! strcmp ( def, defaults [ i ]. name ) ) { if (! isstring ) * defaults [ i ]. location = parm ; else * defaults [ i ]. location = ( int )",0
78,"<S2SV_ModStart> n ) { assert ( expr_end >= expr_start ) ; assert ( * ( expr_start - 1 ) == '{' ) ; assert ( * ( expr_start - 1 ) == '{' ) ; assert ( * ( expr_end - 1 ) == '}' ) ; assert ( * ( expr_start - 1 ) == '!' || * expr_end == ':' ) ; o = PyUnicode_DecodeUTF8 ( expr_start, expr_end - expr_start, NULL ) ; if ( o == NULL ) return NULL ; len = expr_end - expr_start ; kind = PyUnicode_KIND ( o ) ; data = PyUnicode_DATA ( o ) ; for ( i = 0 ; i < len ; i ++ ) { if (! PyUnicode_ISSPACE ( PyUnicode_READ ( kind, data, i ) ) ) { all_whitespace = 0 ; break ; } } Py_DECREF ( o ) ; str [ 0 ] = '(' ; memcpy ( str + 1, expr_start, len ) ; str [ len + 1 ] = ')' ; str [ len + 2 ] = 0 ; cf. cf_flags = PyCF_ONLY_AST ; fstring",0
79,<S2SV_ModStart> string ) { return <S2SV_ModEnd> cJSON_strcasecmp ( object <S2SV_ModStart> -> child ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
80,"<S2SV_ModStart> NO_HASHEXPAND, SLAB_REASSIGN, SLAB_AUTOMOVE, SLAB_AUTOMOVE_RATIO, SLAB_AUTOMOVE_WINDOW, TAIL_REPAIR_TIME <S2SV_ModStart> NO_HASHEXPAND, SLAB_REASSIGN, SLAB_AUTOMOVE, SLAB_AUTOMOVE_RATIO, SLAB_AUTOMOVE_WINDOW, NO_HASHEXPAND, <S2SV_ModStart> NO_HASHEXPAND, SLAB_REASSIGN, SLAB_AUTOMOVE, SLAB_AUTOMOVE, SLAB_AUTOMOVE_RATIO, SLAB_AUTOMOVE_WINDOW, TAIL_REPAIR_TIME <S2SV_ModStart> NO_HASHEXPAND, SLAB_REASSIGN, SLAB_AUTOMOVE, SLAB_AUTOMOVE_RATIO, SLAB_AUTOMOVE_RATIO, SLAB_AUTOMOVE_RATIO, SLAB_AUT",0
81,<S2SV_ModStart> size ) ; if ( px -> ft == NULL ) return FALSE ;,0
82,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; ND_TCHECK_16BITS ( length ) ; <S2SV_ModStart>, val_l ; ND_TCHECK_16BITS ( length ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( length ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( length ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( length ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( length ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( length ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( length ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( length ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( length ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( length ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( length ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( length ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( length ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( length )",0
83,<S2SV_ModStart> endif # if HAVE_LZMA_H <S2SV_ModEnd> && HAVE_LIBLZMA if,1
84,"<S2SV_ModStart> void ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> "".git/foobar"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> "".git/foobar"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> "".git/foobar"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> "".git/foobar"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> "".git/foobar"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> "".git/foobar"" ) ;",0
85,"<S2SV_ModStart> uint8_t * const buffers <S2SV_ModEnd> [ 4 ] <S2SV_ModStart> 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers <S2SV_ModEnd> [ i ]",0
86,<S2SV_ModStart> ; lock_sock ( sk <S2SV_ModEnd> ) ; for,0
87,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
88,<S2SV_ModStart> user ) { if (! capable ( CAP_SYS_RAWIO ) ) return - EPERM ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
89,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen <S2SV_ModStart> + 1 ; size_t <S2SV_ModEnd> limit = 0,0
90,"<S2SV_ModStart> * for_ch ; if ( NCH ( n ) < 3 ) { ast_error ( c, n, ""async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } if ( NCH ( n ) < 4 ) { ast_error ( c, n, ""async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } for_ch = CHILD ( n, 1 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if ( NCH ( for_ch ) == 1 ) comp = comprehension ( Tuple ( t, Store, first -> lineno, first -> col_offset, c -> c_arena ) ; else comp = comprehension ( Tuple ( t, Store, first -> lineno, first -> col_offset, c -> c_arena ) ; if (! comp ) return NULL ;",0
91,"<S2SV_ModStart> NULL ; } for ( i = src -> curframe + 1 ; i <= dst_state -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst",0
92,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> write_mb_modes_kf ( const <S2SV_ModStart> * mi_8x8, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> ] ; const MODE_INFO * const above_mi = mi_8x8 [ - xd -> mi_stride ] ; const MODE_INFO * const left_mi = xd -> left_available? mi_8x8 [ - 1 ] : NULL ; const MB_MODE_INFO * const mbmi = & mi -> mbmi ; const BLOCK_SIZE bsize = mbmi -> sb_type ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ bsize ] ; <S2SV_ModStart> TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size, bsize, w ) ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size,",0
93,"<S2SV_ModStart> maxn ) { switch ( actions [ n ]. SWF_ACTIONRECORD. ActionCode ) { case SWFACTION_END : return 0 ; case SWFACTION_CONSTANTPOOL : decompileCONSTANTPOOL ( & actions [ n ] ) ; return 0 ; case SWFACTION_GOTOFRAME : decompileGOTOFRAME ( n, actions, maxn, 1 ) ; case SWFACTION_GOTOFRAME2 : decompileGOTOFRAME2 ( n, actions, maxn, 0 ) ; case SWFACTION_GETURL : decompileGETURL ( & actions [ n ] ) ; return 0 ; case SWFACTION_PUSHDUP : decompilePUSHDUP ( & actions [ n ] ) ; return 0 ; case SWFACTION_SETPROPERTY : decompileSETPROPERTY ( n, actions, maxn ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n, actions, maxn ) ; return 0 ; case SWFACTION_TRACE : decompileTRACE ( n, actions, maxn ) ; return 0 ; case SWFACTION_CALLFRAME : decompileCALLFRAME ( n, actions, maxn ) ;",0
94,"<S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( & prep -> pp_n ) ; <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> n = EXTRACT_32BITS <S2SV_ModStart> n >= 0 && ND_TTEST ( * ps ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %u/%s:%u"", ps -> slot, ps -> nid ) ) ; ps = ( const struct pgstate * ) io ; while ( -- n >= 0 && ND_TTEST ( * ps ) ) { ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( const struct pgstate * ) io ; } ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( const struct pgstate * ) io ; while ( -- n >= 0 && ND_TTEST ( * ps ) ) { const struct id_off * ie ; char c = '<' ; ND_PRINT ( ( ndo, "" <S2SV_blank> %c%s:%u"", c, ipaddr_string ( ndo, & ps -> page. p_sid ), EXTRACT_32BITS ( & ps -> page. p_uid ) ) ) ; io = ( const struct id_off * )",0
95,<S2SV_ModStart> rq ) ; rcu_read_lock ( ) ; <S2SV_ModStart> skip_clock_update = 0 ; rcu_read_unlock ( ) ;,0
96,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static sqlite3_int64 <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> * * azModuleArg ; sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> * * azModuleArg = sqlite3DbRealloc ( db, pTable -> azModuleArg, nBytes ) ; if ( azModuleArg == 0 ) { sqlite3DbFree ( db, zArg ) ; return - 1 ; } else { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> * * azModuleArg = sqlite3DbRealloc ( db, pTable -> azModuleArg, nBytes ) ; if ( azModuleArg == 0 ) { sqlite3DbFree ( db, zArg ) ; return - 1 ; }",0
97,<S2SV_ModStart> ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ] ; if ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ]!= 0 && ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ]!= 0 && ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ]!= 0 && ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ]!= 0 && ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ]!= 0 && ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_,0
98,<S2SV_ModStart> -> dmin ; if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_,0
99,"<S2SV_ModStart> bfq_idle_slice_timer_body ( struct bfq_data <S2SV_ModEnd> * bfqd, <S2SV_ModStart> * bfqd = bfqq -> bfqd <S2SV_ModEnd> ; enum bfqq_expiration <S2SV_ModStart> unsigned long flags ; if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_TOO_IDLE ; else { spin_unlock_irqrestore ( & bfqd -> lock, flags ) ; return ; } spin_lock_irqsave ( & bfqd -> lock, flags ) ; bfq_clear_bfqq_wait_request ( bfqq ) ; if ( bfqq!= bfqd -> in_service_queue ) { spin_unlock_irqrestore ( & bfqd -> lock, flags ) ; return ; } if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_",0
100,,1
101,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
102,"<S2SV_ModStart> + x > origDataLength <S2SV_ModEnd> || diffPtr + <S2SV_ModStart> + x > origDataLength <S2SV_ModEnd> || extraPtr + <S2SV_ModStart> NULL ; } if ( newpos + x > newDataLength ) { PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } <S2SV_ModStart> + x > origDataLength <S2SV_ModEnd> || diffPtr + <S2SV_ModStart> + diffBlockLength || extraPtr + y > extraBlock + extraBlockLength ) { PyErr_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( newpos + x > newDataLength ) { PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } <S2SV_ModStart> + x > origDataLength <S2SV_ModEnd> || diffPtr + <S2SV_ModStart> + diffBlockLength || extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; }",0
103,"<S2SV_ModStart> pktopts ) ; rcu_read_lock ( ) ; <S2SV_ModStart>, fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
104,"<S2SV_ModStart> = MagickMax ( number_pixels, max_packets ) ; if ( MagickMax ( count, x ) > MagickMax ( number_pixels, max_packets ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( MagickMax ( number_pixels, max_packets ) > MagickMax ( number_pixels, max_packets ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( MagickMax ( number_pixels, max_packets, ""InsufficientImageDataInFile"" ) > MagickMax ( number_pixels, max_packets ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( MagickMax ( number_pixels, max_packets ) > MagickMax ( number_pixels, max_packets ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( MagickMax ( number_pixels, max_packets, ""InsufficientImageDataInFile"" ) > MagickMax ( number_pixels, max_packets ) ) ThrowReaderException ( CorruptImageError,",0
105,<S2SV_ModStart> ; int64_t index_pts ; if ( avio_feof ( s -> pb ) ) { goto end ; },0
106,<S2SV_ModStart> data ) { ( void ) data ; ( void ) ctx ;,0
107,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
108,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
109,"<S2SV_ModStart> mbmi. mv. as_int ; mv_bias ( ref_frame_sign_bias [ above -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ left -> mbmi. ref_frame ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ left -> mbmi. ref_frame ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ left -> mbmi. ref_frame ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ left -> mbmi. ref_frame ], ref_frame_sign_bias ) ;",0
110,<S2SV_ModStart> MSG_CMSG_COMPAT ) { msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_name = NULL ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; <S2SV_ModStart> out_free ; } if ( skb_is_gso ( skb ) ) { struct virtio_net_hdr vnet_hdr = { 0 } ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_name = NULL ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; } else { if ( skb_is_gso ( skb ) ) { struct virtio_net_hdr vnet_hdr = { 0 } ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net,0
111,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
112,"<S2SV_ModStart> asconf ) { sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) asconf -> chunk_hdr ; sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) addip <S2SV_ModEnd> ; __u32 serial <S2SV_ModStart> __u32 serial ; sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) asconf -> chunk_hdr -> data + sizeof ( sctp_addiphdr_t ) ; <S2SV_ModStart> goto done ; addip = ( sctp_addip_chunk_t * ) asconf -> chunk_hdr ; addip -> addip_hdr = addip ; addip -> addip_hdr_len = ntohs ( addip -> addip_hdr. length ) ; serial = ntohl ( hdr -> serial ) ; length = ntohs ( addr_param -> p. length ) ; asconf_param = ( void * ) addr_param + length ; chunk_len -= length ; asconf_ack = sctp_make_asconf_ack ( asoc, addip, add",0
113,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
114,"<S2SV_ModStart> msicap ; int rc ; if ( <S2SV_ModEnd> pci_populate_msicap ( & <S2SV_ModStart> msicap, msgnum, 1 ) < 0 ) { pr_err ( ""%s: <S2SV_blank> Invalid <S2SV_blank> msicap <S2SV_blank> number <S2SV_blank> %d\\n"", __func__, msgnum ) ; return - EINVAL ; } rc = pci_emul_add_capability ( dev, ( u_char * ) & msicap, sizeof ( msicap ) ) ; if ( rc < 0 ) { pr_err ( ""%s: <S2SV_blank> Invalid <S2SV_blank> msicap <S2SV_blank> number <S2SV_blank> %d\\n"", __func__, msgnum ) ; return - EINVAL ; } <S2SV_ModEnd> return pci_emul_add_capability (",0
115,"<S2SV_ModStart>!= psubscribeCommand ) { addReplyError ( c, ""only <S2SV_blank> (P)SUBSCRIBE <S2SV_blank> / <S2SV_blank> (P)UNSUBSCRIBE <S2SV_blank> / <S2SV_blank> QUIT <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> this <S2SV_blank> context"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" )",0
116,"<S2SV_ModStart> ; if ( ( <S2SV_ModStart>. g_h ) && ( <S2SV_ModStart> VPX_RC_ONE_PASS ) ) <S2SV_ModEnd> ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" <S2SV_ModStart> ""Cannot <S2SV_blank> change <S2SV_blank> height <S2SV_blank> or <S2SV_blank> lag_in_frames"" ) ; if ( ( cfg -> g_w > ctx -> cfg. g_w ) || ( cfg -> g_h > ctx -> cfg. g_h ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_w > ctx -> cfg. g_w ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_lag_in_frames > ctx -> cfg. g_lag_in_frames ) ) ERROR ( ""Cannot <S2SV_blank> increase <S2SV_blank> lag_in_frames"" ) ; if ( ( cfg -> g_lag_in_frames > ctx -> cfg. g_lag_in_frames ) ) ERROR ( ""Cannot <S2SV_blank> increase <S2SV_blank> lag_in_frames"" ) ; res = validate_config ( ctx, cfg, & ctx -> vp8_cfg",0
117,"<S2SV_ModStart> cpi ) { # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. rc_mode == VPX_CBR ) { cpi -> mb. rc_mode = VPX_CBR_HIGHBITDEPTH ; } else { cpi -> mb. rc_mode = VPX_CBR_HIGHBITDEPTH ; } # endif <S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. rc_mode == VPX_CBR || cpi -> oxcf. rc_mode == VPX_CBR ) { vpx_init_plane_quantizers ( cpi, & cpi -> mb. rc_mode, & cpi -> mb. rc_mode ) ; } else { vpx_init_plane_quantizers ( cpi, & cpi -> mb. rc_mode ) ; } # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. rc_mode == VPX_CBR || cpi -> oxcf. rc_mode == VPX_CBR ) { vpx_init_plane_quant",0
118,"<S2SV_ModStart> int rc ; struct desc_struct old_desc, new_desc ; const struct x86_emulate_ops * ops = ctxt -> ops ; if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) ops -> get_segment ( ctxt, & old_cs, & old_desc, NULL <S2SV_ModEnd> ) ; old_eip <S2SV_ModStart> 2 ) ; rc = assign_eip_far ( ctxt, new_desc. l ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; rc = assign_eip_far ( ctxt, new_desc. l ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; rc = assign_eip_far ( ctxt, new_desc. l ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; ops -> set_segment ( ctxt, old_cs, new_desc. l ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; ctxt -> src. val = old_cs ; rc = assign_eip_far ( ctxt, new_desc. l ) ; if ( rc!= X86EMUL_CONTINUE ) return rc",0
119,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> info -> si_code <S2SV_ModStart> >= 0 ) { info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
120,"<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if ( ptr -> movie_identifier == NULL ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_PARSER, ( GF_LOG_PARSER ( GF_LOG_PARSER, ( GF_LOG_PARSER ( GF_LOG_PARSER ) ), ( GF_LOG_PARSER ( GF_LOG_PARSER ) ), ( GF_LOG_PARSER ( GF_LOG_PARSER, GF_LOG_PARSER ( GF_LOG_PARSER ( GF_LOG_PARSER ) ), ( GF_LOG_PARSER ( GF_LOG_PARSER, ( GF_LOG_PARSER ( GF_LOG_PARSER ( GF_LOG_PARSER, ( GF_LOG_PARSER ) ) ), ( GF_LOG_PARSER ( GF_LOG_PARSER ) ) ), ( GF_LOG_PARSER ( GF_LOG_PARSER ( GF_LOG_PARSER, GF_LOG_PARSER ( GF_LOG_PARSER ) ) ), ( GF_LOG_PARSER ( GF_LOG_PARSER, ( GF_LOG",0
121,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
122,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state == fmode <S2SV_ModEnd> ) return ; <S2SV_ModStart> FMODE_WRITE )!= ( fmode & FMODE_WRITE ) ) { if ( ( state -> state & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { list_move ( & state -> open_states, & state -> owner -> so_states ) ; } else { if ( ( state -> state & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { if ( state -> state & FMODE_WRITE ) list_move ( & state -> open_states, & state -> owner -> so_states ) ; } else { if ( ( state -> state & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { list_move ( & state -> open_states, & state -> owner -> so_states ) ; } else { list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } } }",0
123,<S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c,0
124,"<S2SV_ModStart> 0 ; } if ( elem. in_sg [ 0 ]. iov_len!= len ) { return 0 ; } memcpy ( elem. in_sg [ 0 ]. iov_base, buf, len ) ; virtqueue_push ( vq, & elem, len ) ; virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } <S2SV_ModEnd> memcpy ( elem",0
125,"<S2SV_ModStart> i ] ), ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] )",0
126,"<S2SV_ModStart> AV_PIX_FMT_PAL8 ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; }",0
127,"<S2SV_ModStart> 1 ) ; } if ( caplen > length - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; }",0
128,"<S2SV_ModStart> { const char * name ; name = fit_get_name ( fit, noffset, NULL ) ; if (! strncmp ( name, FIT_SIG_NODENAME, strlen ( FIT_SIG_NODENAME ) ) ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) { puts ( ""- <S2SV_blank> "" ) ; } else { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) { puts ( ""- <S2SV_blank> "" ) ; } else { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; } } <S2SV_ModEnd> if ( noffset",0
129,"<S2SV_ModStart> ; if (! kfifo_alloc ( & state -> rx_kfifo, CX23888_IR_RX_KFIFO_SIZE, GFP_KERNEL ) ) return - ENOMEM ; state -> dev = dev ; state -> sd = NULL ; v4l2_subdev_init ( & state -> v4l2_dev, & dev -> v4l2_dev ) ; snprintf ( sd -> name, sizeof ( sd -> name ), ""%s/888-ir"", dev -> name ) ; sd -> grp_id = CX23885_HW_888_IR ; ret = v4l2_device_register_subdev ( & dev -> v4l2_dev, sd ) ; if ( ret == 0 ) { cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; mutex_init ( & state -> rx_params_lock ) ; default_params = default_rx_params ; v4l2_subdev_call ( sd, ir, rx_s_parameters, & default_params ) ;",0
130,"<S2SV_ModStart> * iface, <S2SV_ModEnd> vpx_codec_flags_t flags, <S2SV_ModStart> VPX_CODEC_ABI_MISMATCH ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) && ( iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) && ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_FRAGMENTS ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC",0
131,"<S2SV_ModStart> value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ;",0
132,<S2SV_ModStart> icmp_param ) { struct icmp_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
133,<S2SV_ModStart> = nlogs ; if ( unlikely ( headcount >= UIO_MAXIOV ) ) { r = - ENOBUFS ; goto err ; },0
134,<S2SV_ModStart> { rq = tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; fn (,1
135,<S2SV_ModStart> else if ( <S2SV_ModEnd> ( flags & <S2SV_ModStart> VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) && ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) && ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODE,0
136,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
137,<S2SV_ModStart> skb_is_nonlinear ( skb ) ) return 0 ; if ( skb -> len < sizeof ( struct nlattr,1
138,"<S2SV_ModStart> ; encode_share_access ( xdr <S2SV_ModEnd>, arg ->",0
139,"<S2SV_ModStart> } if ( tile_buffsize < 0 ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> calculating <S2SV_blank> buffer <S2SV_blank> size"" ) ; exit ( - 1 ) ; } tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0",0
140,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ""modify_bar_registration: <S2SV_blank> bypass <S2SV_blank> for <S2SV_blank> pci-gvt\\n"" ) ; return 0 <S2SV_ModEnd> ; } switch <S2SV_ModStart> break ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
141,"<S2SV_ModStart> ( fp, "" <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %s\\n"" <S2SV_ModEnd>, & n",0
142,<S2SV_ModStart> : case 0x1a : case 0x1b : case 0x1c : case 0x1f : case 0x2a : case 0x2b : case 0x2c : case 0x2f : case 0x4a : case 0x4b : case 0x4f : case 0x5a : case 0x5b : case 0x5c : case 0x5f : case 0x6a : case 0x6b : case 0x6f : case 0x7a : case 0x7b : case 0x7c : case 0x7f : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 :,0
143,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
144,"<S2SV_ModStart> goto trunc ; if ( lshp -> ls_length < sizeof ( struct lsa6_hdr ) ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_router ), lshp -> ls_seq, lshp -> ls_length ) ) ; goto trunc ; } if ( lshp -> ls_length < sizeof ( struct lsa6_hdr ) ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_seq ), lshp -> ls_age ) ) ; goto trunc ; }",0
145,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { if ( ret ) break ; ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",0
146,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
147,"<S2SV_ModStart> fd = open ( dev_path <S2SV_ModEnd>, O_RDWR | <S2SV_ModStart> O_CLOEXEC ) ; if ( p_dev -> fd == - 1 ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%d"", __FUNCTION__, p_dev -> errno ) ; p_dev -> fd = - 1 ; break ; }",0
148,"<S2SV_ModStart>, ss ; u32 <S2SV_ModEnd> msr_data ; int <S2SV_ModStart> = X86EMUL_MODE_PROT32 ; <S2SV_ModEnd> ops -> get_msr <S2SV_ModStart> msr_data ) ; if ( ( ops -> get_msr ( ctxt, MSR_IA32_SYSENTER_CS, & msr_data )!= 0x0 ) return emulate_gp ( ctxt, 0 ) ; cs. dpl = 3 ; ss. dpl = 3 ; ops -> get_msr ( ctxt, MSR_IA32_SYSENTER_SS, & msr_data ) ; switch ( usermode ) { case X86EMUL_MODE_PROT32 : cs_sel = ( u16 ) ( msr_data + 16 ) ; if ( ( msr_data & 0xfffc ) == 0x0 ) return emulate_gp ( ctxt, 0 ) ; ss. l = 1 ; break ; case X86EMUL_MODE_PROT64 : cs_sel = ( u16 ) ( msr_data + 24 ) ; if ( ( msr_data & 0xfffc ) == 0x0 ) return emulate_gp ( ctxt, 0",0
149,"<S2SV_ModStart> costs, vpx_tree <S2SV_ModEnd> * tree, <S2SV_ModStart> c ) { vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> i / 2 ] ; int b ; for ( b = 0 ; b <= 1 ; ++ b ) { const int cc = c + vp9_cost_bit ( prob, b ) ; if ( ii <= 0 ) costs [ - ii ] = cc ; else costs [ - ii ] = cc ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
150,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
151,"<S2SV_ModStart> & 0xffff ; if ( fmt == SEQ_LOAD ) { <S2SV_ModStart> c, 0 ) ; } else { err = synth_devs [ dev ] -> load_patch ( dev, fmt, buf, p + 4, c, 0 ) ; if ( err < 0 ) return err ; if ( seq_mode == SEQ_2 ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> 4 <S2SV_blank> byte <S2SV_blank> event <S2SV_blank> in <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> mode\\n"" ) ; return err ; } if ( ev_code >= 128 ) { if ( seq_mode == SEQ_2 ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> 4 <S2SV_blank> byte <S2SV_blank> event <S2SV_blank> in <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> mode\\n"" ) ; return - EINVAL ; } else { if ( seq_mode == SEQ_2 ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> 2 <S2SV_blank> byte <S2SV_blank> event <S2SV_blank> in <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> mode\\n"" ) ; return - EINVAL ; }",0
152,"<S2SV_ModStart> fadst16 ( const tran_low_t * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t x0 = input [ 15 ] ; tran_high_t x0 = input [ 0 ] ; tran_high_t x1 = input [ 1 ] ; tran_high_t x2 = input [ 2 ] ; tran_high_t x3 = input [ 3 ] ; tran_high_t x4 = input [ 5 ] ; tran_high_t x5 = input [ 6 ] ; tran_high_t x7 = input [ 7 ] ; tran_high_t x8 = input [ 8 ] ; tran_high_t x9 = input [ 9 ] ; tran_high_t x10 = input [ 10 ] ; tran_high_t x11 = input [ 11 ] ; tran_high_t x12 = input [ 12 ] ; tran_high_",0
153,<S2SV_ModStart> ; # if HAVE_EDSP <S2SV_ModEnd> flags |= HAS_EDSP <S2SV_ModStart> # endif # if HAVE_MEDIA <S2SV_ModEnd> flags |= HAS_MEDIA <S2SV_ModStart> # endif # if HAVE_NEON <S2SV_ModEnd> flags |= HAS_NEON,0
154,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
155,"<S2SV_ModStart> tot_len ) ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
156,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> flag & CL_UNPRIVILEGED <S2SV_ModStart> ; if ( <S2SV_ModEnd> flag & CL_UNPRIVILEGED <S2SV_ModStart> & CL_UNPRIVILEGED ) mnt -> mnt. mnt_flags & MNT_READONLY ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( ( flag & CL_UNPRIVILEGED ) mnt -> mnt. mnt_flags & MNT_LOCKED ; atomic_inc ( & sb -> s_active ) ; mnt -> mnt. mnt_root = dget ( root ) ; mnt -> mnt. mnt_mountpoint = mnt -> mnt. mnt_mountpoint ; mnt -> mnt_parent = mnt ; lock_mount_hash ( ) ; list_add_tail ( & mnt -> mnt_instance, & old -> mnt_mounts ) ; unlock_mount_hash ( ) ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_READONLY ) ) mnt -> mnt. mnt_flags |= M",0
157,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> count_segs_sb ( VP9_COMP <S2SV_ModStart> * const tile, MODE_INFO * <S2SV_ModEnd> mi_8x8, int <S2SV_ModStart> bsize ) { VP9_COMMON * const cm = & cpi -> common ; const int mis = cm -> mi_stride ; const int bs = num_8x8_blocks_wide_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; const int hbs = num_8x8_blocks_high_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; if ( bw >= bs && bh >= bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, bs, mi_row, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_un",0
158,<S2SV_ModStart> ; if ( <S2SV_ModEnd> c -> flags <S2SV_ModStart> CLIENT_CLOSE_AFTER_REPLY ) break ; if (! c -> reqtype ) { if ( c -> querybuf [ 0 ] == '*' ) { c -> reqtype = PROTO_REQ_INLINE ; } else if ( c -> querybuf [ 0 ] == '*' ) { c -> reqtype = PROTO_REQ_MULTIBULK ; } else if ( c -> querybuf [ 0 ] == '*' ) { c -> reqtype = PROTO_REQ_INLINE ; } else if ( c -> reqtype == PROTO_REQ_INLINE ) { if ( processInlineBuffer ( c )!= C_OK ) break ; } else if ( c -> reqtype == PROTO_REQ_MULTIBULK ) { if ( processMultibulkBuffer ( c )!= C_OK ) break ; } else if ( c -> reqtype == PROTO_REQ_INLINE ) { if ( processInlineBuffer ( c )!= C_OK ) break ; } else if ( c -> reqtype == PROTO_REQ_MULTIBULK ) { if ( processMultibulkBuffer ( c )!= C_OK ) break ; },0
159,"<S2SV_ModStart> = 0 ; err = ext4_get_blocks ( handle, mpd -> inode, next, max_blocks, & new, get_blocks_flags ) ; if ( err ) return err ; if ( mpd -> b_state & ( 1 << BH_Mapped ) ) { ext4_msg ( mpd -> inode -> i_sb, KERN_CRIT, ""delayed <S2SV_blank> block <S2SV_blank> allocation <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> inode <S2SV_blank> "" ""logical <S2SV_blank> offset <S2SV_blank> %llu <S2SV_blank> with <S2SV_blank> max <S2SV_blank> blocks <S2SV_blank> %zd <S2SV_blank> with <S2SV_blank> error <S2SV_blank> %d\\n"", mpd -> inode -> i_ino, mpd -> b_size >> mpd -> inode -> i_blkbits, err ) ; mpd -> retval = err ; return 0 ; } if ( mpd -> b_state & ( 1 << BH_Unwritten ) ) { ext4_msg ( mpd -> inode -> i_sb, KERN_CRIT, ""delayed <S2SV_blank> block <S2SV_blank> allocation <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> at <S2SV_blank> "" ""logical <S2SV_blank> offset <S2SV_blank> %llu <S2SV_blank> with <S2SV_blank> max <S2SV_blank> blocks <S2SV_blank> %zd <S2SV_blank> with <S2SV_blank> "" """,0
160,"<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> ai_flags = 0 <S2SV_ModStart>, handle, & ai_flags, & ai_family, & ai_socktype, & ai_protocol, & ai_addrlen, NULL, & canonnamelen, NULL )!= OE_OK ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval!= OE_1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; goto done ; } if ( oe_syscall_getaddrinfo_read_ocall ( & retval, handle, & ai_flags, & ai_family, & ai_socktype, & ai_protocol, & ai_addrlen, & ai_addrlen, NULL, & canonnamelen, NULL, & canonnamelen, NULL )!= OE_OK ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL )",0
161,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
162,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
163,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int set_registers ( pegasus_t * pegasus, __u16 indx, __u16 <S2SV_ModEnd> size, void <S2SV_ModStart> data ) { int ret ; ret = usb_control_msg ( pegasus -> usb, 0, PEGASUS_REQ_SET_REGS, PEGASUS_REQT_WRITE, 0, indx, data, size, 100 ) ; if ( ret < 0 ) netif_dbg ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d\\n"", __func__, ret ) ; else ret = usb_control_msg ( pegasus -> usb, 0, PEGASUS_REQ_SET_REGS, 0, indx, data, size, 100 ) ; if ( ret < size ) netif_dbg ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d\\n"", __func__, ret ) ;",0
164,"<S2SV_ModStart> asdl_seq * body <S2SV_ModEnd>, PyArena * <S2SV_ModStart> body ; return ( mod_ty ) PyArena_Malloc ( arena, sizeof ( * p ) ) <S2SV_ModEnd> ; } <S2SV_null>",0
165,"<S2SV_ModStart> * src, <S2SV_ModEnd> unsigned int flags <S2SV_ModStart> ; # endif # if CONFIG_VP9_HIGHBITDEPTH if ( flags & VP9_HIGHBITDEPTH ) flags |= VP9_HIGHBITDEPTH ; <S2SV_ModStart> >> 4 ; # endif <S2SV_ModStart> write_idx ) ; <S2SV_ModEnd> active_map = mb_cols <S2SV_ModStart> } else { vpx_copy_and_extend_frame ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) << 4 ) ; } # else vpx_copy_and_extend_frame ( src, & buf -> img, row << 4, 16, ( active_end - col ) << 4 ) ; # endif # if CONFIG_VP9_HIGHBITDEPTH if ( flags & VP9_HIGHBITDEPTH ) { vpx_copy_and_extend_frame ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) << 4 ) ; } # else vpx_copy_and_extend_frame ( src, & buf -> img, row << 4, 16, ( active_end - col ) << 4 ) ; # endif",0
166,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
167,"<S2SV_ModStart>. sharpness ; const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; lf -> filter_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ; lf -> sharpness_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ; lf -> sharpness_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ; lf -> filter_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ; lf -> sharpness_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ; if ( method == LPF_PICK_FROM_Q ) { search_filter_level ( sd, cpi, method == LPF_PICK_FROM_Q ) ; } else { search_filter_level ( sd, cpi, method == LPF_PICK_FROM_SUBIMAGE ) ;",0
168,"<S2SV_ModStart> BT_STATUS_SUCCESS ) { BT_DBG_EVENT ( ""btif_dm_upstreams_evt: <S2SV_blank> %s"", dump_dm_event ( event ) ) ; BT_DBG_EVENT ( ""btif_dm_upstreams_evt: <S2SV_blank> %s"", dump_dm_event ( event ) ) ; BT_DBG_EVENT ( ""btif_dm_upstreams_evt: <S2SV_blank> %s"", dump_dm_event ( event ) ) ; BT_DBG_EVENT ( ""btif_dm_upstreams_evt: <S2SV_blank> %s"", dump_dm_event ( event ) ) ; } break ; case BT_DM_DISABLE_EVT : { BT_DBG_EVENT ( ""btif_dm_upstreams_evt: <S2SV_blank> %s"", dump_dm_event ( event ) ) ; BT_DBG_EVENT ( ""btif_dm_upstreams_evt: <S2SV_blank> %s"", dump_dm_event ( event ) ) ; BT_DBG_EVENT ( ""btif_dm_upstreams_evt",0
169,<S2SV_ModStart> : { int <S2SV_ModEnd> a = getnum,0
170,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
171,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> data && data_sz <S2SV_ModStart> data && data_sz <S2SV_ModEnd> ) res = <S2SV_ModStart>. decode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, data, <S2SV_ModStart> deadline ) ; if ( res!= VPX_CODEC_OK ) return res ; res = ctx -> iface -> dec. decode ( ctx -> priv -> alg_priv, data, data_sz, user_priv, deadline ) ; if ( res!= VPX_CODEC_OK ) return res ; res = ctx -> iface -> dec. decode ( ctx -> priv -> alg_priv, data, data_sz, user_priv, deadline ) ; if ( res!= VPX_CODEC_OK ) return res ; if ( res!= VPX_CODEC_OK ) return res ; res = ctx -> iface -> dec. decode ( ctx -> priv -> alg_priv, data, data_sz, user_priv, deadline ) ; if ( res!= VPX_CODEC_ERROR ) return res <S2SV_ModEnd> ; } <S2SV_null>",0
172,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> isofs_read_inode ( struct <S2SV_ModStart> inode ) ; if ( de -> name_len > inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize ) { printk ( KERN_INFO ""%s: <S2SV_blank> directory <S2SV_blank> name <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)\\n"", __func__, inode -> i_sb -> s_blocksize - inode -> i_iget5_offset ) ; ret = - EIO ; goto fail ; } if ( de -> name_len > inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize ) { printk ( KERN_INFO ""%s: <S2SV_blank> directory <S2SV_blank> name <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)\\n"", __func__, inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize ) ; ret = - E",0
173,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> ) ; } sendClean ( outputbuffer ) ;",1
174,<S2SV_ModStart> self ) { if ( self -> dict ) Py_CLEAR ( self -> dict ) ;,0
175,"<S2SV_ModStart> ; for ( i = 0 ; a && i < count ; ++ i ) { n = cJSON_CreateString ( strings [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
176,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from",0
177,"<S2SV_ModStart> EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOSUID ) &&! ( mnt_flags & MNT_NOSUID ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOSUID ) &&! ( mnt_flags & MNT_NOSUID ) ) { return - EPERM ; } err = security_sb_remount ( sb, data ) ; if ( err ) return err ; down_write ( & sb -> s_umount ) ; if ( flags & MS_BIND ) err = change_mount_flags ( path -> mnt, flags ) ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else err = do_remount_sb ( sb, flags, data,",0
178,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
179,"<S2SV_ModStart> { int do_rf64 = 0, write_junk = 0 <S2SV_ModStart> ds64_chunk ; DS64Chunk ds64_chunk <S2SV_ModEnd> ; JunkChunk junkchunk <S2SV_ModStart> ; ds64_chunk = ( DS64Chunk ) malloc ( ds64_chunk. Length ) ; if (! ds64_chunk ) { error_line ( ""can\'t <S2SV_blank> create <S2SV_blank> valid <S2SV_blank> RIFF <S2SV_blank> wav <S2SV_blank> header <S2SV_blank> for <S2SV_blank> non-normalized <S2SV_blank> floating <S2SV_blank> data!"" ) ; return FALSE ; } if (! ds64_chunk ) { error_line ( ""can\'t <S2SV_blank> create <S2SV_blank> valid <S2SV_blank> RIFF <S2SV_blank> wav <S2SV_blank> header <S2SV_blank> for <S2SV_blank> non-normalized <S2SV_blank> floating <S2SV_blank> data!"" ) ; return FALSE ; } ds64_chunk = ( DS64Chunk ) malloc ( ds64_chunk. Length ) ; if (! ds64_chunk ) { error_line ( ""can\'t <S2SV_blank> create <S2SV_blank> valid <S2SV_blank> RIFF <S2SV_blank> wav <S2SV_blank> header <S2SV_blank> for <S2SV_blank> non-normalized <S2SV_blank> floating <S2SV_blank> data!"" ) ; return FALSE ; } if (! ds64_chunk ) { error_line ( ""can\'t <S2SV_blank> create <S2SV_blank> valid <S2SV_blank> RIFF <S2SV_blank> wav <S2SV_blank> header <S2SV_blank> for <S2SV_blank> non-normalized <S2SV_blank>",0
180,"<S2SV_ModStart> msg ) ; memset ( & addr, 0, sizeof ( addr ) ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( msg_sys <S2SV_ModStart> msg_flags & ( MSG_CMSG_COMPAT | MSG_TRUNC ) ) { <S2SV_ModStart> -> msg_control ; <S2SV_ModEnd> if ( msg_sys <S2SV_ModStart> msg_flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ) msg_sys -> msg_flags |= MSG_CMSG_COMPAT ; } else { if ( msg_sys -> msg_flags & MSG_TRUNC ) msg_sys -> msg_flags |= MSG_CMSG_COMPAT ; }",0
181,"<S2SV_ModStart> inode ) ; struct metapath * mp2 = & mp -> mp_metapath [ height ] ; struct buffer_head * dibh = NULL <S2SV_ModEnd> ; u64 bn <S2SV_ModStart> unsigned end_of_metadata = ( bh_map -> b_size / sizeof ( struct metapath ) ) - 1 <S2SV_ModEnd> ; int eob <S2SV_ModStart> end_of_metadata = ( bh_map -> b_size / sizeof ( struct metapath ) ) - 1 ; if ( dibh ) gfs2_trans_add_bh ( ip -> i_gl, dibh, 1 ) ; if ( height == 1 ) { struct buffer_head * bh ; ptr = metapointer ( end_of_metadata, mp ) ; bh = mp -> mp_bh [ end_of_metadata ] ; dblks = min ( maxlen, ptrs_per_blk - mp -> mp_list [ end_of_metadata ] ) ; if ( ptrs_per_blk < mp -> mp_list [ end_of_metadata ] ) { struct buffer_head * bh ; bh = mp -> mp_bh [ end_of_metadata ] ; struct buffer_",0
182,"<S2SV_ModStart> codec_iface_name ( global -> codec -> interface ( ) ) ) ; fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> index ) ; if ( input -> use_i420 ) fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; if ( input -> use_i420 ) fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; if ( input -> use_i420 ) fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input ->",0
183,"<S2SV_ModStart> ; if ( value == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> value <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } valueAVT = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; value = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; if ( valueAVT == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> value <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } if ( valueAVT == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> dictionary <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; }",0
184,"<S2SV_ModStart> 0 ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_",0
185,<S2SV_ModStart> msix_tab_size % 4096 <S2SV_ModEnd> == 0 ),0
186,<S2SV_ModStart>! js_regexec ( <S2SV_ModEnd> re -> prog,0
187,"<S2SV_ModStart> ( Field ( <S2SV_ModEnd> dest, 1 <S2SV_ModStart> 1 ) )!= 0 ) { <S2SV_ModEnd> caml_set_oo_id ( ( <S2SV_ModStart> ) dest ) ; } else { * intern_dest = Make_header ( size, tag, intern_color ) ; * intern_dest += 1 + size ; if ( tag == Object_tag ) { * intern_dest = Make_header ( size, tag, intern_color ) ; * intern_dest += 1 + size ; } else { * intern_dest = Make_header ( size, tag, intern_color ) ; * intern_dest += 1 + size ; } } else { * intern_dest = Make_header ( size, tag, intern_color ) ; * intern_dest += 1 + size ; if ( tag == Object_tag ) { * intern_dest = Make_header ( size, tag, intern_color ) ; * intern_dest += 1 + size ; * intern_dest += 1 + size ; } else { * intern_dest = Make_header ( size, tag, intern_color ) ; * intern_dest += 1 + size ; } } else { * intern_dest = Make_header ( size, tag, intern_color",0
188,"<S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, KSZ8851_ISR ) ; if ( ( isr & KSZ8851_ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_LCIS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_TXIS <S2SV_ModEnd> ) ; n <S2SV_ModStart> ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } if ( ( isr & ISR_RXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_IER, ier <S2SV_ModEnd> ) ; return",0
189,"<S2SV_ModStart> void encode_quantization ( VP9_COMMON * cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm -> base_qindex, QINDEX_BITS ) ; write_delta_q ( wb, cm -> y_dc_delta_q ) ; write_delta_q ( wb, cm -> uv_dc_delta_q ) ; write_delta_q ( wb, cm -> uv_ac_delta_q ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
190,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> msglen ) ),0
191,"<S2SV_ModStart> goto sslerr ; if ( BIO_reset ( rawcert ) == 1 && ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == 1 && ( localrsa = d2i_RSAPublicKey_bio ( rawcert, NULL ) ) == 1 && ( localkey = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == 1 && ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) { if ( BIO_reset ( rawcert ) == 1 && ( localrsa = d2i_RSAPublicKey_bio ( rawcert, NULL ) ) == 1 && ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == 1 && ( localkey = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == 1 && ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) { if ( BIO_reset ( rawcert ) == 1 && ( localrsa = d2i_RSAPublicKey_bio ( rawcert, NULL ) ) ==",0
192,"<S2SV_ModStart> ( ) ; strcpy ( t1_buf_array, t1_line_array ) ; strcpy ( t1_line_array, t1_buf_array ) ; strcpy ( t1_line_array, t1_buf_array ) ; strcpy ( t1_line_array, t1_buf_array ) ; t1_line_ptr = eol ( t1_line_array ) ; } else { strcpy ( t1_buf_array, t1_line_array ) ; strcpy ( t1_line_array, t1_buf_array ) ; strcpy ( t1_line_array, t1_buf_array ) ; strcpy ( t1_line_array, t1_buf_array ) ; t1_line_ptr = eol ( t1_line_array ) ; }",0
193,"<S2SV_ModStart>, BLOCK_SIZE bsize, int mi_offset <S2SV_ModEnd> ) { MACROBLOCKD <S2SV_ModStart> -> e_mbd ; int bsl = b_width_log2_lookup [ bsize ], hbs = ( 1 << bsl ) / 4 ; <S2SV_ModStart> case PARTITION_NONE : * get_sb_index ( x, subsize ) = 0 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; <S2SV_ModStart> case PARTITION_VERT : * get_sb_index ( x, subsize ) = 1 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; * ( xd -> mi [ 0 ] ) = get_block_context",0
194,"<S2SV_ModStart> name ) ; if (! check_submodule_name ( value ) ) data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> value: <S2SV_blank> %s"", value ) ;",0
195,"<S2SV_ModStart> ; ret = key_read_state ( key ) ; if ( ret == 0 ) goto error ; if ( key -> type -> read ) ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( key -> type -> read ) ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ;",0
196,<S2SV_ModStart> ps_dec -> u4_first_slice_in_pic = ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = ps_dec -> u4_first_slice_in_pic = ps_dec -> u4_first_slice_in_pic = ps_dec -> u4_first_slice_in_pic = ps_dec -> u4_first_slice_in_pic = ps_dec -> u4_first_slice_in_pic = ps_dec -> u4_first_slice_in_pic = ps_dec -> u4_first_slice_in_pic = ps_dec -> u4_first_slice_in_pic = ps_dec -> u4_first_slice_in_pic = ps_dec -> u4_,0
197,<S2SV_ModStart> var_off ) ; if ( src_known ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else if ( dst_reg -> umin_value + umin_val < umin_val || dst_reg -> umax_value + umax_val < umax_val ) { dst_reg -> umin_value = 0 ; } else if ( dst_reg -> smin_value + umin_val < umax_val ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else if ( dst_reg -> umin_value + umin_val < umin_val || dst_reg -> umax_value + umax_val < umax_val ) { dst_reg -> umin_value = 0 ; } else if ( dst_reg -> smin_value + smin_val > S64_MAX ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; },0
198,"<S2SV_ModStart> ; if ( newInode ) { cFYI ( 1, ""parent <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x%p"", newInode, direntry -> d_name. name, direntry ) ; cFYI ( 1, ""non-existing <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode, direntry ) ; } else { cFYI ( 1, ""parent <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode, direntry ) ; cFYI ( 1, ""non-existing <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode, direntry ) ; cFYI ( 1, ""non-existing <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode, direntry ) ; cFYI ( 1, ""non-existing <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%",0
199,"<S2SV_ModStart> ; if ( rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ) ) ) { if ( tcp_synq_no_recent_overflow ( sk ) || ( mss = cookie_check ( skb, cookie ) ) == 0 ) { NET_INC_STATS_BH ( sock_net ( sk ), LINUX_MIB_SYNCOOKIESFAILED ) ; goto out ; } }",0
200,"<S2SV_ModStart> char * in, size_t len <S2SV_ModStart> += 4 ; * out ++ = ( ( base64val ( digit1 ) << 2 ) | ( base64val ( digit2 ) >> 4 ) ; len ++ ; if ( digit3!= '=' ) { * out ++ = ( ( base64val ( digit2 ) << 4 ) & 0xf0 ) | ( base64val ( digit3 ) >> 4 ) ; len ++ ; if ( digit4!= '=' ) { * out ++ = ( ( base64val ( digit3 ) & 0xc0 ) | ( base64val ( digit4 ) >> 2 ) ; len ++ ; } } else { * out ++ = ( ( base64val ( digit1 ) << 2 ) & 0xf0 ) | ( base64val ( digit2 ) >> 4 ) & 0xf0 ) | ( base64val ( digit3 ) >> 4 ) ; len ++ ; if ( digit4!= '=' ) { * out ++ = ( ( base64val ( digit3 ) & 0xc0 ) | ( base64val ( digit4 ) >> 2 ) ; len ++ ; } } <S2SV_ModEnd> } <S2SV_null>",0
201,"<S2SV_ModStart> ) { int <S2SV_ModEnd> number_of_frames, number_of_keyframes <S2SV_ModStart> double y_scale ; SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> const si = get_svc_internal <S2SV_ModEnd> ( svc_ctx ) <S2SV_ModStart> svc_ctx ) ; <S2SV_ModEnd> svc_log_reset ( svc_ctx <S2SV_ModStart> svc_ctx ) ; <S2SV_ModEnd> svc_log_reset ( svc_ctx <S2SV_ModStart> svc_ctx ) ; <S2SV_ModEnd> return vpx_svc_get_message ( <S2SV_ModStart> ""\\n"" ) ; number_of_keyframes = encode_frame_count / <S2SV_ModEnd> si -> kf_dist <S2SV_ModStart> + 1 ; for ( i = 0 ; i < <S2SV_ModEnd> si -> layers <S2SV_ModStart> ++ i ) { number_of_frames = encode_frame_count ; if ( svc_ctx -> encoding_mode == ALT_INTER_LAYER_PREDICTION_IP && ( i == 1 || i == 3 ) ) { number_of_frames -= number_of_keyframes ; } svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes=[%u",0
202,"<S2SV_ModStart> -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if ( new_cols > old_cols ) { VTermRect rect = { 0, 0, 0, 0 } ; rect. end_row = old_rows ; rect. end_col = old_cols ; scrollrect ( rect, first_blank_row - new_rows, 0, user ) ; vterm_screen_flush_damage ( screen ) ; delta -> row -= first_blank_row - new_rows ; } if ( screen -> buffers [ 1 ] ) screen -> buffers [ 1 ] = realloc_buffer ( screen, screen -> buffers [ 1 ], new_rows, new_cols ) ; if ( screen -> buffers [ 2 ] ) screen -> buffers [ 2 ] = realloc_buffer ( screen, screen -> buffers [ 2 ], new_rows, new_cols ) ; if ( screen -> buffers [ 3 ] ) screen -> buffers [ 3 ] = realloc_buffer ( screen, screen",0
203,<S2SV_ModStart> ) { const <S2SV_ModEnd> char * literal_start <S2SV_ModStart> * str ; int literal_end ; int in_named_escape = 0 ; int result = 0 ; assert ( * literal == NULL ) ; for ( ; * str < end ; ( * str ) ++ ) { char ch = * * str ; if (! in_named_escape && ch == '{' && * ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( ch == '{' && * ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '{' ) { if ( * str + 1 < end && * ( * str + 1 ) ==,0
204,<S2SV_ModStart> struct dump_dir * <S2SV_ModEnd> dd = create_dump_dir_from_problem_data,0
205,<S2SV_ModStart> 0 ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + h1 ) > ( ptr -> height ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + h1 ) > ( ptr -> height ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr,0
206,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
207,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mv_stride <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost",0
208,"<S2SV_ModStart> name ) { int ret ; ret = try_then_request_module ( __crypto_lookup_template ( name ), ""%s"", name ) ; if ( ret < 0 ) return ERR_PTR ( ret ) ; if ( ret < 0 ) return ERR_PTR ( ret ) ; ret = try_then_request_module ( __crypto_lookup_template ( name ), ""%s"", name ) ; if ( ret < 0 ) { err <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
209,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ( mi_col = <S2SV_ModEnd> tile -> mi_col_start <S2SV_ModStart> mi_col < tile -> mi_col_end <S2SV_ModEnd> ; mi_col += <S2SV_ModStart> BLOCK_SIZE bsize ; cpi -> mb. source_variance = UINT_MAX ; vp9_zero ( cpi -> mb. pred_mv ) ; switch ( cpi -> sf. partition_search_type ) { case VAR_BASED_PARTITION : choose_partitioning ( cpi, tile, mi_row, mi_col ) ; nonrd_use_partition ( cpi, tile, mi_8x8, mi_row, BLOCK_64X64, & dummy_rate, & dummy_dist ) ; break ; case SOURCE_VAR_BASED_PARTITION : set_offsets ( cpi, tile, mi_row, mi_col, BLOCK_64X64 ) ; set_source_var",0
210,"<S2SV_ModStart> ( skb, dataoff <S2SV_ModEnd> ), & <S2SV_ModStart>, & dh ) ; if ( dh == NULL ) goto out_invalid ; state = dccp_state_table [ CT_DCCP_ROLE_CLIENT ] [ dh -> dccph_type ] [ CT_DCCP_NONE ] ; else state = dccp_state_table [ CT_DCCP_ROLE_SERVER ] [ dh -> dccph_type ] [ CT_DCCP_NONE ] ; if ( state == CT_DCCP_INVALID ) { msg = ""nf_ct_dccp: <S2SV_blank> invalid <S2SV_blank> state <S2SV_blank> transition <S2SV_blank> "" ; goto out_invalid ; } dn = dccp_pernet ( net ) ; if ( dn -> dccp_loose == 0 ) { msg = ""nf_ct_dccp: <S2SV_blank> not <S2SV_blank> picking <S2SV_blank> up <S2SV_blank> existing <S2SV_blank> connection <S2SV_blank> "" ; goto out_invalid ; } ct -> proto. dccp. role [ IP_CT_DIR_ORIGINAL ] = CT_DCCP_ROLE_CLIENT ; ct -> proto. dccp. state [ IP_CT_DIR_REPLY ] = CT_DCCP_",0
211,"<S2SV_ModStart> char * dir ; tmpname = malloc ( sizeof ( tmpname ), GFP_KERNEL ) ; if ( tmpname == NULL ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> create <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( tmpname == NULL ) { ulckpwdf ( ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> create <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( tmpname [ sizeof ( tmpname ) - 1 ]!= tmpname [ sizeof ( tmpname ) - 1 ] ) ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> create <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } <S2SV_ModEnd> copyfile ( lockfd",0
212,<S2SV_ModStart> mnt ) ; nd -> last_type = LAST_BIND ;,1
213,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_options_get_finish ( struct <S2SV_ModStart> * optp, unsigned <S2SV_ModStart> int optlen ) { struct ip_options_rcu * rcu = & net -> ipv4. ip_options ; <S2SV_ModStart> 3 ) { rcu = rcu_dereference_protected ( net -> ipv4. ip_options, lockdep_is_held ( & net -> ipv4. ip_options. lock ) ) ; if (! rcu_dereference_protected ( net -> ipv4. ip_options, lockdep_is_held ( & net -> ipv4. ip_options ) ) ) { struct ip_options_rcu * rcu = & net -> ipv4. ip_options ; rcu = rcu_dereference_protected ( net -> ipv4. ip_options, lockdep_is_held ( & net -> ipv4. ip_options ) ) ; if ( unlikely ( rcu_dereference_protected ( net -> ipv4. ip_options, lockdep_is_held ( & net -> ipv4. ip_options ) ) ) ;",0
214,"<S2SV_ModStart> ; if ( connection == NULL ) goto error ; else { bool found_upgrade = false ; int count ; sds * tokens = sdssplit ( connection, strlen ( connection ), "","", 1, & count ) ; if ( tokens == NULL ) goto error ; for ( int i = 0 ; i < count ; i ++ ) { sds token = tokens [ i ] ; sdstrim ( token, ""Upgrade"" ) ; if ( strcasecmp ( token, ""Connection"" ) == 0 ) { found_upgrade = true ; break ; } } else { bool found_upgrade = false ; int count ; sds * tokens = sdssplit ( connection, strlen ( connection ), "","", 1, & count ) ; if ( tokens == NULL ) goto error ; for ( int i = 0 ; i < count ; i ++ ) { sds * token = tokens [ i ] ; sdstrim ( token, "" <S2SV_blank> "" ) ; if ( strcasecmp ( token, ""Upgrade"" ) == 0 ) { found_upgrade = true ; break ; } } else { bool found_upgrade = false ; int count ; sds * tokens = sdssplit ( connection, strlen ( connection ), "","", 1, & count",0
215,"<S2SV_ModStart> uint16 nif = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ; } plen -= sizeof ( struct rpcap_findalldevs_if ) ; for ( d = alldevs ; d!= NULL ; d = d -> next ) { if ( rpcapd_discard ( pars -> sockctrl, plen ) == - 1 ) { return - 1 ; } if ( rpcap_senderror ( pars -> sockctrl, ver, PCAP_ERR_NOREMOTEIF, ""No <S2SV_blank> interfaces <S2SV_blank> found! <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed"" "" <S2SV_blank> and <S2SV_blank> you <S2SV_blank> have <S2SV_blank> the <S2SV_blank> right <S2SV_blank> to <S2SV_blank> access <S2SV_blank> to <S2SV_blank> the <S2SV_blank> remote <S2SV_blank> device."", errbuf ) == - 1 ) goto error ; if ( pcap_findalldevs ( & alldevs, errmsgbuf ) == - 1 ) goto error ; if ( alldevs == NULL ) { if ( rpcap_senderror ( pars -> sockctrl, ver, PCAP_ERR_NOREMOTEIF, ""No <S2SV_blank> interfaces <S2SV_blank> found! <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed"" "" <S2SV_blank> and <S2SV_blank> you <S2SV_blank> have <S2SV_blank>",0
216,"<S2SV_ModStart> ; struct dump_dir <S2SV_ModEnd> dd = dd_create <S2SV_ModStart> DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; }",0
217,"<S2SV_ModStart> 1 ) ; index = ConstrainColormapIndex ( image, ( * p >> 2 ) & 0x3 ) ; SetPixelIndex ( indexes + x, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; p ++ ; } if ( ( image -> columns % 2 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 2 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 4 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 4 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x, index ) ; SetPixelRGBO ( q, image -> colormap + (",0
218,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> t1, t2 <S2SV_ModStart> ; BN_ULONG c1, c2, c3 ; r [ 0 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 0, c1, c2 ) ; r [ 1 ] = c2 ; c2 = 0 ; sqr_add_c2 ( a, 2, 0, c1, c2 ) ; r [ 3 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 3, 0, c1, c2 ) ; r [ 4 ] = c2 ; c2 = 0 ; sqr_add_c2 ( a, 5, 0, c1, c2 ) ; r [ 6 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 6, 0, c1, c2 ) ; r [ 7 ] = c2 ; c3 = 0 ; sqr_add_c ( a, 8, 0, c1, c2 ) ; r [ 8 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 9, 0,",0
219,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
220,"<S2SV_ModStart> in_cksum ) { ND_TCHECK2 ( bp [ 0 ], len ) ; <S2SV_ModStart> in_cksum ) { ND_TCHECK2 ( bp [ 0 ], len ) ; <S2SV_ModStart> in_cksum ) { ND_TCHECK2 ( bp [ 0 ], len ) ; <S2SV_ModStart> in_cksum ) { ND_TCHECK2 ( bp [ 0 ], len ) ; <S2SV_ModStart> in_cksum ) { ND_TCHECK2 ( bp [ 0 ], len ) ; } else { ND_TCHECK2 ( bp [ 0 ], len ) ; <S2SV_ModStart> in_cksum ) { ND_TCHECK2 ( bp [ 0 ], len ) ; <S2SV_ModStart> in_cksum ) { ND_TCHECK2 ( bp [ 0 ], len ) ; } } else { <S2SV_ModStart> in_cksum ) { ND_TCHECK2 ( bp [ 0 ], len ) ; } <S2SV_ModStart> in_cksum ) { ND_TCHECK2 ( bp [ 0 ], len ) ; }",0
221,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> ptrace_has_cap ( __task_cred <S2SV_ModStart> user_ns, mode ) <S2SV_ModEnd> ) { rcu_read_unlock",0
222,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
223,<S2SV_ModStart> i1_sei_parameters_present_flag = 1 <S2SV_ModEnd> ; ps_codec -> <S2SV_ModStart> i1_sei_parameters_present_flag = 1 <S2SV_ModEnd> ; ps_codec -> <S2SV_ModStart> i1_sei_parameters_present_flag = 1 <S2SV_ModEnd> ; ps_codec -> <S2SV_ModStart> i1_sei_parameters_present_flag = 1 <S2SV_ModEnd> ; ps_codec -> <S2SV_ModStart> i1_sei_parameters_present_flag = 1 <S2SV_ModEnd> ; ps_codec -> <S2SV_ModStart> i1_sei_parameters_present_flag = ps_codec -> i1_sei_parameters_present_flag = ps_codec -> i1_sei_parameters_present_flag = ps_codec -> i1_sei_parameters_present_flag = ps_codec -> i1_sei_parameters_present_flag = ps_codec -> i1_sei_parameters_present_flag = ps_codec -> i1_sei_parameters_present_flag = ps_codec -> i1_sei_parameters_present_flag <S2SV_ModEnd> ; ps_codec ->,0
224,"<S2SV_ModStart> ; tmp_sdma_rht = kmalloc ( sizeof ( * tmp_sdma_rht ), GFP_KERNEL ) ; if (! tmp_sdma_rht ) { kfree ( tmp_sdma_rht ) ; return - ENOMEM ; }",0
225,"<S2SV_ModStart> * info, <S2SV_ModEnd> int rep_quick ) <S2SV_ModStart>, MY_MUTEX_INIT_FAST ) ; mysql_mutex_init ( mi_key_mutex_MI_SORT_INFO_mutex, & sort_info. mutex, MY_MUTEX_INIT_FAST ) ; mysql_cond_init ( mi_key_cond_MI_SORT_INFO_cond, & sort_info. cond, MY_MUTEX_INIT_FAST ) ; mysql_mutex_init ( mi_key_mutex_MI_SORT_INFO_mutex, & sort_info. mutex, MY_MUTEX_INIT_FAST ) ; mysql_cond_init ( mi_key_cond_MI_SORT_INFO_cond, MY_MUTEX_INIT_FAST ) ; mysql_cond_init ( mi_key_cond_MI_SORT_INFO_cond, & sort_info. cond, MY_MUTEX_INIT_FAST ) ;",0
226,"<S2SV_ModStart> q, 10 ) ; if ( q == ( char * ) NULL ) return ( DestroyImageList ( images ) ) ; p = q ; sizes [ i ++ ] = size ; while ( ( isspace ( ( int ) ( ( unsigned char ) * p ) )!= 0 ) || ( * p == ',' ) ) return ( DestroyImageList ( images )",0
227,"<S2SV_ModStart> ) ; } if ( pcount > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, ( int ) MaxAllocSize ) )",0
228,"<S2SV_ModStart> val ) ; if (! val ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> value"", r -> name ) ;",0
229,"<S2SV_ModStart> qend ) ) { agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> id, c -> buf ) ; * hend = '\\0' ; agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> kind, c -> id, c -> buf ) ; * hend = '\\r' ; agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", agoo_con_kind_str ( c -> bind -> kind ), c -> id, c -> buf ) ; * hend = '\\r' ; agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> id, c -> buf ) ; * hend = '\\0' ; agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> id, c -> buf ) ; * hend = '\\0' ;",0
230,"<S2SV_ModStart> vp9_fht16x16_c ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; <S2SV_ModEnd> int i, <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16 <S2SV_ModStart> ++ j ) out <S2SV_ModEnd> [ j *",0
231,"<S2SV_ModStart> new_data_len ) ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s"", tmpfile_name ) ; g_auto ( GStrv ) groups = NULL ; g_auto ( GString ) new_exec = g_strdup_printf ( ""%s"", tmpfile_name ) ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto",0
232,"<S2SV_ModStart> char * temp_filename = osi_calloc ( <S2SV_ModEnd> strlen ( filename <S2SV_ModStart> 5 ) ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; goto error ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } for ( const list_node_t * node = list_begin ( config -> sections ) ; node!= list_end ( config -> sections ) ) { fprintf ( fp, ""[%s]\\n"", section -> name ) ; } for ( const list_node_t * enode = list_begin ( section -> entries ) ; enode!= list_end ( section -> entries ) ; enode = list_next ( node )!= list_end ( config -> sections ) ) { fputc ( '\\",0
233,"<S2SV_ModStart> elen ) ; elen += pc -> lengthComponentIdent ; <S2SV_ModStart> 0 ) break ; case 3 : if ( tolen < 3 ) return - ENAMETOOLONG ; memcpy ( p, ""../"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 4 : if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""./"", 2 ) ; p += 2 ; tolen -= 2 ; break ; case 5 : comp_len = udf_get_filename ( sb, pc -> componentIdent, pc -> lengthComponentIdent, p, tolen ) ; p += comp_len ; tolen -= comp_len ; if ( tolen == 0 ) return - ENAMETOOLONG ; * p ++ = '/' ; tolen -- ; break ; case 6 : if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""./"", 2 ) ; p += 2 ; tolen -= 2 ; break ; case 7 : comp_len = udf_get_filename ( sb, pc -> componentIdent, pc -> lengthComponentIdent, p, tolen ) ; p += comp_len ; tolen -= comp_",0
234,<S2SV_ModStart> case VTP_SUMMARY_VLAN : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> case VTP_UNSPECIFIED_VLAN : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> case VTP_UNSPECIFIED_VLAN : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> case VTP_UNSPECIFIED_VLAN : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> case VTP_UNSPECIFIED_VLAN : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> case VTP_UNSPECIFIED_VLAN : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> case VTP_UNSPECIFIED_VLAN : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> case VTP_UNSPECIFIED_VLAN : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> case VTP_UNSPECIFIED_VLAN : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> case VTP_UNSPECIFIED_VLAN : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> case VTP_,0
235,<S2SV_ModStart> ) ) { xmlFree ( buf ) ; ctxt -> instate = state ; return ; } if ( ( ctxt -> instate == XML_PARSER_PI ) ) { xmlFree ( buf ) ; ctxt -> instate = state ; return ; } if ( ( ctxt -> instate == XML_PARSER_PI ) ) { xmlFree ( buf ) ; ctxt -> instate = state ; return ; } if ( ( ctxt -> instate == XML_PARSER_PI ) ) { xmlFree ( buf ) ; ctxt -> instate = XML_PARSER_PI ; return ; } if ( ( ctxt -> instate == XML_PARSER_PI ) ) { xmlFree ( buf ) ; ctxt -> instate = state ; return ; } if ( ( ctxt -> instate == XML_PARSER_PI ) ) { xmlFree ( buf ) ; ctxt -> instate = XML_PARSER_PI ; return ; } if ( ( ctxt -> instate == XML_PARSER_PI ) ) { xmlFree ( buf ) ; ctxt -> instate = XML_PARSER_PI ; return ; } if ( ( ctxt -> instate == XML_PARSER_PI ) ) { xmlFree ( buf ) ; ctxt -> instate = XML_PARSER,0
236,"<S2SV_ModStart> int tagval ; struct stream packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> tag <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
237,"<S2SV_ModStart> ; int rv = Socket_print ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" <S2SV_ModEnd> ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd> ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd> ""Content-Length: <S2SV_blank> %s\\r\\n"", <S2SV_ModStart> request, _auth? _auth : """", StringBuffer_toString ( data ) ) ; if ( rv < 0 ) THROW ( IOException, ""Monit: <S2SV_blank> cannot <S2SV_blank> send <S2SV_blank> command <S2SV_blank> to <S2SV_blank> the <S2SV_blank> monit <S2SV_blank> daemon <S2SV_blank> -- <S2SV_blank> %s"", STRERROR ) ;",0
238,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ; int rv = copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.asoundrc <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } <S2SV_ModEnd> waitpid ( child <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> chown ( dest <S2SV_ModStart> ; if ( chmod ( dest, S_IRUSR | S_IWUSR ) < 0 ) errExit ( ""chmod"" ) ; unlink ( src ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
239,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; return NULL ; } <S2SV_ModEnd> hstats -> seconds_since_last_reset <S2SV_ModStart> hstats -> seconds_since_last_reset = fcstats -> fc. secs_reset ; hstats -> tx_frames = fcstats -> fc. tx_frames ; hstats -> tx_words = fcstats -> fc. tx_words ; hstats -> rx_frames = fcstats -> fc. rx_frames ; hstats -> tx_words = fcstats -> fc. rx_words ; hstats -> lip_count = fcstats -> fc. lip_count ; hstats -> nos_count = fcstats -> fc. nos_count ; hstats -> error_count = fcstats -> fc. error_count ; hstats -> dumped_count = fcstats -> fc. dropped_count ; hstats -> link_failure_count = fcstats -> fc. link_failures ; hstats -> loss_of_sync_count = fcstats -> fc. loss_of_syncs ; hstats -> loss_of_syncs = fcstats -> fc. loss_of_syncs ; hstats -> loss_of_,0
240,"<S2SV_ModStart> ) { value -> a = MinF ( 1.0f, MaxF ( 0.0f, value -> a ) ) ; value -> b = MinF ( 1.0f, MaxF ( 0.0f, value -> b ) ) ; value -> c = MinF ( 1.0f, MaxF ( 0.0f, value -> c ) ) ; value -> d = MinF ( 1.0f, MaxF ( 0.0f, value -> d ) ; value -> e = MinF ( 1.0f, MaxF ( 0.0f, value -> e ) ) ; value -> a = MinF ( 1.0f, MaxF ( 0.0f, value -> a ) ) ; value -> c = MinF ( 1.0f, MaxF ( 0.0f, value -> c ) ) ; value -> d = MinF ( 1.0f, MaxF ( 0.0f, value -> d ) ) ; value -> e = MinF ( 1.0f, MaxF ( 0.0f, value -> e ) ) ; value ->",0
241,<S2SV_ModStart> -> sasl_mechanism ; if ( rec -> sasl_username ) { rec -> sasl_username [ 0 ] = g_strdup ( src -> sasl_username ) ; rec -> sasl_password [ 0 ] = g_strdup ( src -> sasl_password ) ; } else { rec -> sasl_username [ 0 ] = g_strdup ( src -> sasl_username ) ; rec -> sasl_password [ 0 ] = g_strdup ( src -> sasl_password ) ; },0
242,<S2SV_ModStart> ; } memset <S2SV_ModEnd> ( cpi ->,0
243,"<S2SV_ModStart>, o, datao ; if ( CHECKOVERFLOW ( 6 + n -> offset, buf_size, 2 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + datao, n -> order ) ; datao += 2 ; if ( CHECKOVERFLOW ( c, buf_size, 12 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. entries = exif_mem_alloc ( ne -> mem, sizeof ( MnoteCanonEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( ne -> log, ""ExifMnoteCanon"", sizeof ( MnoteCanonEntry ) * c ) ; break ; } n -> entries [ tcount ]. entries = exif_mem_alloc ( ne -> mem, sizeof ( MnoteCanonEntry ) *",0
244,<S2SV_ModStart> ; if ( ( param -> testflag & ( T_DESCRIPT | T_READONLY ) )? HA_OPEN_IGNORE_IF_LOCKED : ( param -> testflag & ( T_DESCRIPT | T_READONLY ) )? HA_OPEN_ABORT_IF_LOCKED : ( ( param -> testflag & ( T_DESCRIPT | T_READONLY ) )? HA_OPEN_IGNORE_IF_LOCKED : ( param -> testflag & ( T_DESCRIPT | T_READONLY ) )? HA_OPEN_IGNORE_IF_LOCKED : ( param -> testflag & ( T_DESCRIPT | T_READONLY ) )? HA_OPEN_IGNORE_IF_LOCKED : ( param -> testflag & ( T_DESCRIPT | T_READONLY ) )? HA_OPEN_IGNORE_IF_LOCKED : ( param -> testflag & ( T_DESCRIPT | T_READONLY ) )? HA_OPEN_ABORT_IF_LOCKED : ( param -> testflag & ( T_DESCRIPT | T_READONLY ) )? HA_OPEN_IGNORE_IF_LOCKED : ( param -> testflag & (,0
245,"<S2SV_ModStart> len ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> string ) ) + 1 ; size_t <S2SV_ModEnd> strindex = 0 <S2SV_ModStart> unsigned long hex <S2SV_ModEnd> ; CURLcode res <S2SV_ModStart> CURLcode res ; if (! ns ) return NULL ; while ( alloc > 0 ) { in = * string ; if ( ( '%' == in ) && ISXDIGIT ( string [ 1 ] ) && ISXDIGIT ( string [ 2 ] ) && ISXDIGIT ( string [ 3 ] ) ) { char * ns = malloc ( alloc ) ; char * ns = malloc ( alloc ) ; if (! ns ) return NULL ; while ( -- alloc > 0 ) { unsigned char * ptr ; char * hex = strtoul ( hexstr, & ptr, 16 ) ; in = curlx_ultouc ( hex ) ; res = Curl_convert_from_network ( handle, & in, 1 ) ; if ( res ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; } ns [ strindex ++ ] = in ; string ++ ; } ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ; return ns ; } <S2SV_ModEnd> <S",0
246,<S2SV_ModStart> 4 ) ; RAnalOp <S2SV_ModEnd> next_op ; avr_op_analyze,0
247,<S2SV_ModStart> -> pdu_free_state_ref = usm_free_usmStateReference <S2SV_ModEnd> ; def ->,0
248,"<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) { <S2SV_ModStart>, sub ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
249,"<S2SV_ModStart> ] ; # ifdef NETSNMP_NO_WRITE_SUPPORT switch ( action ) { case MODE_SET_RESERVE1 : if ( var_val_type!= ASN_INTEGER ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> type <S2SV_blank>!= <S2SV_blank> int\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= * ( ( long * ) var_val ) ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; } if ( idx!= * ( ( long * ) var_val ) ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= * ( ( long * ) var_val ) ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; }",0
250,<S2SV_ModStart> ; break ; case 3 : { CheckNumberPixels ( 4 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 5 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 4 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 2 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 3 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >>,0
251,"<S2SV_ModStart> timer ) ; mutex_unlock ( & register_mutex ) ; list_for_each_entry ( slave, tmp, & timeri -> slave_list_head, open_list ) { spin_lock_irq ( & slave_active_lock ) ; _snd_timer_stop ( slave, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail ( & slave -> open_list, & snd_timer_slave_list ) ; slave -> timer = NULL ; } mutex_unlock ( & register_mutex ) ;",0
252,<S2SV_ModStart> -> u4_bitoffset = ih264d_read_mmco_commands <S2SV_ModEnd> ( ps_dec ),0
253,<S2SV_ModStart> { int_fast32_t widthOverflow = gifFilePtr -> Image. Width - info -> originalWidth ; int_fast32_t heightOverflow = gifFilePtr -> Image. Height - info -> originalHeight ; if ( widthOverflow > 0 && heightOverflow > 0 ) { const uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize ) { info -> rasterSize = newRasterSize ; break ; } } else { uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( widthOverflow > 0 && heightOverflow > 0 ) { uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize ) { info -> rasterSize = newRasterSize ; break ; } <S2SV_ModStart> uint_fast32_t newRasterSize = ( uint_fast32_t ) ( gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ) ; if ( newRasterSize > info -> rasterSize ) { break ; },0
254,"<S2SV_ModStart> || cherokee_buffer_is_empty ( <S2SV_ModEnd> conn -> validator <S2SV_ModStart> user ) ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user -> len ) return ret_error ; ret = init_user_filter ( ldap, props, conn ) ; if ( ret!= ret_ok ) return ret ; re = ldap_count_entries ( ldap -> conn, message ) ; if ( re!= 1 ) { LOG_ERROR ( CHEROKEE_ERROR_VALIDATOR_LDAP_SEARCH, props -> basedn. buf ) ; return ret_not_found ; } first = ldap_first_entry ( ldap -> conn, message ) ; if ( first == NULL ) { ldap_msgfree ( message ) ; return ret_not_found ; } dn = ldap_get_dn ( ldap -> conn, first ) ; if ( dn == NULL ) { ret_error ( message ) ; return ret_error ; } ldap_msgfree ( message ) ; ret = validate_dn ( props, dn, conn -> validator -> passwd. buf ) ; if (",0
255,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
256,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> has <S2SV_blank> wrong <S2SV_blank> bus <S2SV_blank> %d <S2SV_blank> info!\\n"", __func__, dev -> name, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",1
257,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = 0 ;",0
258,"<S2SV_ModStart> 0 ) { if ( ( len -= 9 ) < 1 ) { t1mac_output_data ( ( byte * ) s, len ) ; return ; } <S2SV_ModStart> ++ s ; if ( ( len -= 9 ) < 1 ) { t1mac_output_data ( ( byte * ) s, len ) ; return ; } <S2SV_ModStart> * t && ( len -= 9 ) < 1 ) { t1mac_output_data ( ( byte * ) s, len ) ; s = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char",0
259,"<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL, NULL )",0
260,"<S2SV_ModStart> msixcap ; assert ( msgnum >= 1 && msgnum <= MAX_MSIX_TABLE_ENTRIES ) ; if ( barnum < 0 || barnum >= PCIR_MAX_BAR_0 ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> msix <S2SV_blank> bar <S2SV_blank> %d, <S2SV_blank> barnum <S2SV_blank> %d\\n"", __func__, barnum, PCIR_MAX_BAR_0 ) ; return - EINVAL ; } <S2SV_ModEnd> pci_msix_table_init ( dev <S2SV_ModStart> msgnum ) ; pci_populate_bar ( dev, barnum, PCIBAR_MEM32, tab_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; <S2SV_ModEnd> return ( pci_emul_add_capability",0
261,"<S2SV_ModStart> ; if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if (",0
262,"<S2SV_ModStart> int decode_unsigned_max ( vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int max ) { vpx_read_bit_buffer <S2SV_ModEnd> * rb = <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",0
263,"<S2SV_ModStart> == NULL ) { retval = KRB5KDC_ERR_PREAUTH_FAILED ; <S2SV_ModEnd> pkiDebug ( ""found <S2SV_blank> kdcPkId <S2SV_blank> in <S2SV_blank> AS <S2SV_blank> REQ\\n"" <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } retval =",0
264,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> -> ir_v6_rmt_addr ; rcu_read_unlock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
265,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static TX_MODE select_tx_mode ( const VP9_COMMON * cm, const VP9EncoderConfig <S2SV_ModEnd> * cpi ) <S2SV_ModStart> ) { return ONLY_4X4 <S2SV_ModEnd> ; } else <S2SV_ModStart> else if ( cm <S2SV_ModEnd> -> sf. <S2SV_ModStart> == USE_LARGESTALL ) { return ALLOW_32X32 ; } else if ( cpi -> sf. tx_size_search_method == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ TX_MODE_SELECT ]? ALLOW_32X32 : TX_MODE_SELECT ; } else if ( cpi -> sf. tx_size_search_method == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_",0
266,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> prline_cnt ++ ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> prline_cnt ++ ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> prline_cnt ++ ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> prline_cnt ++ ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> prline_cnt ++ ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> prline_cnt ++ ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> prline_cnt ++ ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> prline_cnt ++ ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> prline_cnt ++ ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> prline_cnt ++ ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> prline_cnt ++ ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> prline_cnt ++ ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> prline_cnt ++ ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> prline_cnt ++ ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> prline_cnt ++ ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> prline_cnt ++ ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> prline_cnt ++ ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> prline_cnt ++ ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> prline_cnt ++ ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> prline_cnt ++ ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> prline_cnt ++ ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> prline_cnt ++ ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> prline_cnt ++ ; <S2SV_ModStart>,0
267,<S2SV_ModStart> ; if ( buf1 -> num_tiles < buf2 -> num_tiles ) { return 1 ; } else if ( buf1 -> num_tiles == buf2 -> num_tiles ) { return - 1 ; } else if ( buf1 -> num_tiles == buf2 -> num_tiles ) { return 1 ; } else if ( buf1 -> num_tiles == buf2 -> num_tiles ) { return - 1 ; } else if ( buf1 -> num_tiles < buf2 -> num_tiles ) { return 1 ; } else if ( buf1 -> num_tiles == buf2 -> num_tiles ) { return 1 ; } else if ( buf1 -> num_tiles == buf2 -> num_tiles ) { return 1 ; } else if ( buf1 -> num_tiles == buf2 -> num_tiles ) { return - 1 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
268,"<S2SV_ModStart> = NULL ; size_t <S2SV_ModEnd> sz = sizeof <S2SV_ModStart> + size ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) { info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) return NULL ; }",0
269,<S2SV_ModStart> ; if ( protocol < 0 || protocol >= AX25_MAX_PROTOCOL ) return - EINVAL ; if (,0
270,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
271,"<S2SV_ModStart> -> _eip ; rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val <S2SV_ModEnd> ) ; break",0
272,"<S2SV_ModStart> name ) ; if ( url. path [ strlen ( url. path ) - 1 ]!= '\\0' ) { mutt_debug ( 1, ""Malformed <S2SV_blank> mailbox <S2SV_blank> URL: <S2SV_blank> %s\\n"", url. path ) ; url. path [ strlen ( url. path ) - 1 ] = '\\0' ; url. user = NULL ; url_tostring ( & url, buf + 11, sizeof ( buf ) - 11, 0 ) ; url. path [ strlen ( url. path ) - 1 ] = '\\0' ; url_tostring ( & url, buf + 11, sizeof ( buf ) - 11, 0 ) ; url_tostring ( & url, buf + 11, sizeof ( buf ) - 11, 0 ) ; url_tostring ( & url, buf + 10, sizeof ( buf ) - 10, 0 ) ; url_tostring ( & url, buf + 10, sizeof ( buf ) - 10, 0 ) ; url_tostring ( & url, buf + 10, sizeof ( buf ) - 10, 0 ) ; url_tostring ( & url, buf + 10, sizeof ( buf ) - 10, 0 ) ;",0
273,<S2SV_ModStart> rq ) ; rcu_read_lock ( ) ; <S2SV_ModStart> skip_clock_update = 0 ; rcu_read_unlock ( ) ;,0
274,"<S2SV_ModStart> ( b ) ; sd_event_add_io ( & b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } r = sd_event_add_io ( & b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { r = log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } r = log_debug_errno ( SYNTHETIC_ERRNO ( EADDRNOTAVAIL ), ""Device <S2SV_blank> %s <S2SV_blank> does <S2SV_blank> not <S2SV_blank> expose <S2SV_blank> keys <S2SV_blank> or <S2SV_blank> switches <S2SV_blank> relevant <S2SV_blank> to <S2SV_blank> us, <S2SV_blank> ignoring."", p ) ; if ( r < 0 ) { r = log_error_errno ( errno, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ;",0
275,<S2SV_ModStart> ( errors ) return TEST_ERR_MAJOR_BAD ; else return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
276,<S2SV_ModStart> -> lun ) sas_eh_finish_cmd <S2SV_ModEnd> ( cmd ),1
277,"<S2SV_ModStart> ; REQ ( n, funcdef ) ; name = NEW_IDENTIFIER ( CHILD ( n, name_i ) ) ; if (! name ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == RARROW ) { returns = ast_for_expr ( c, CHILD ( n, name_i + 3 ) ) ; if (! returns ) return NULL ; name_i += 2 ; } body = ast_for_suite ( c, CHILD ( n, name_i + 3 ) ) ; if (! body ) return NULL ; get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; <S2SV_ModStart> is_async ) return AsyncFunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n0 ), n0 -> n_col_offset, end_lineno, end_col_offset, c -> c_arena ) ; else return FunctionDef ( name, args, body, decorator_seq, returns, L",0
278,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
279,"<S2SV_ModStart> == MagickFalse ) { status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } else { status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } else { status = SetImageExtent ( image, image -> columns, image -> rows ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } } if ( status == MagickFalse ) { ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } else { status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } else { status = SetImageExtent ( image, image -> columns ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; }",0
280,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> ) ) { rc = <S2SV_ModStart>. val ) ; if ( rc!= X86EMUL_CONTINUE ) break ; <S2SV_ModStart> ) ) { rc = <S2SV_ModStart>. val ) ; if ( rc!= X86EMUL_CONTINUE ) break ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
281,,1
282,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
283,"<S2SV_ModStart> ( position > <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + psf -> headerend, 1, <S2SV_ModStart> psf -> header + psf -> headerend <S2SV_ModEnd>, 1, <S2SV_ModStart> psf -> header + psf -> headerend <S2SV_ModEnd>, 1, <S2SV_ModStart> psf -> header + psf -> headerend <S2SV_ModEnd>, 1, <S2SV_ModStart> psf -> header + psf -> headerend <S2SV_ModEnd>, 1, <S2SV_ModStart> psf -> header + psf -> headerend <S2SV_ModEnd>, 1, <S2SV_ModStart> psf -> header + psf -> headerend <S2SV_ModEnd>, 1, <S2SV_ModStart> psf -> header + psf -> header + psf -> headerend <S2SV_ModEnd>, 1, <S2SV_ModStart> psf -> header + psf -> headerend <S2SV_ModEnd>, 1, <S2SV_ModStart> psf -> header + psf -> headerend <S2SV_ModEnd>, 1, <S2SV_ModStart> psf -> header + psf -> headerend <S2SV_ModEnd>, 1, <S2SV_ModStart> psf -> header + psf -> headerend <S2SV_ModEnd>, 1, <S2SV_ModStart> psf -> header + psf -> headerend <S2SV_ModEnd>, 1,",0
284,<S2SV_ModStart> ) IHEVCD_SUCCESS ) ; if ( ps_cabac -> u4_ofst >= ps_bitstrm -> u4_nxt_word ) { ps_cabac -> u4_ofst = 0 ; ps_cabac -> u4_range = ( UWORD32 ) ps_bitstrm -> u4_nxt_word - ps_bitstrm -> u4_cur_word ; ps_cabac -> u4_ofst = 0 ; } else { if ( ps_cabac -> u4_ofst >= ps_bitstrm -> u4_nxt_word ) { ps_cabac -> u4_ofst = 0 ; ps_cabac -> u4_range = ( UWORD32 ) ps_bitstrm -> u4_nxt_word - ps_bitstrm -> u4_cur_word ; ps_cabac -> u4_cur_word = 0 ; } else { ps_cabac -> u4_range = ( UWORD32 ) ps_bitstrm -> u4_cur_word ; ps_cabac -> u4,0
285,<S2SV_ModStart> prev_line_has_list_loosening_effect ) { line -> type = MD_LINE_EMPTY ; ctx -> last_line_has_list_loosening_effect = 0 ; } else if ( CH ( pivot_line -> beg ) == _T ( '#' ) ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 1 ; } else if ( CH ( pivot_line -> beg ) == _T ( '#' ) ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 1 ; } else { line -> type = MD_LINE_BLANK ; } } else if ( CH ( pivot_line -> beg ) == _T ( '#' ) ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 1 ; } else if ( CH ( pivot_line -> beg ) == _T ( '#' ) ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 0,0
286,<S2SV_ModStart> event ) { <S2SV_ModEnd> struct task_struct * <S2SV_ModStart> ; event -> <S2SV_ModEnd> state = PERF_EVENT_STATE_OFF <S2SV_ModStart> state = PERF_EVENT_STATE_OFF <S2SV_ModEnd> ; } raw_spin_unlock_irq,0
287,<S2SV_ModStart> ; flags -> color_ref_frame_flag = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_display_mv_flag? VP9D_DEBUG_DRAW_MV : 0 ) <S2SV_ModEnd> ; flags -> <S2SV_ModStart> noise_level ; flags -> color_ref_frame_flag = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ),0
288,"<S2SV_ModStart> = 0 ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_hello ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, ( ptr. common -> packet_seq ), length ) ) ; goto trunc ; } if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, ( ptr. common -> packet_seq ), length ) ) ; goto trunc ; } <S2SV_ModStart> struct olsr_msg4 ) ) ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", (",0
289,"<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> = 0 ; memset ( store_reg, 0, sizeof ( store_reg ) ) ;",0
290,"<S2SV_ModStart> { fprintf ( stderr <S2SV_ModEnd>, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) <S2SV_ModStart> ; int rv = copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> copy <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } <S2SV_ModEnd> waitpid ( child <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> if ( chown <S2SV_ModStart> ( dest, getuid ( ), getgid ( ) ) == - 1 ) errExit ( ""fchown"" ) ; if ( chmod ( dest, 0600 ) == - 1 ) errExit ( ""chmod"" ) ; return 1 ; } <S2SV_ModEnd> return 0 ;",0
291,"<S2SV_ModStart> ; if ( unlikely (! path [ depth ]. p_ext ) ) { EXT4_ERROR_INODE ( inode, ""p_ext <S2SV_blank> > <S2SV_blank> EXT_MAX_EXTENT!"" ) ; return - EFSCORRUPTED ; } if (",0
292,<S2SV_ModStart> } else { sfb = ptr_hbe_txposer -> sfb [ ptr_hbe_txposer -> sfb [ ptr_hbe_txposer -> sfb [ ptr_hbe_txposer -> sfb ] ] ; if ( sfb > ptr_hbe_txposer -> sfb [ ptr_hbe_txposer -> sfb ] ) sfb = ptr_hbe_txposer -> sfb [ ptr_hbe_txposer -> sfb ] ; if ( sfb > ptr_hbe_txposer -> sfb [ ptr_hbe_txposer -> sfb ] ) sfb = ptr_hbe_txposer -> sfb [ ptr_hbe_txposer -> sfb ] ; if ( sfb > ptr_hbe_txposer -> sfb [ ptr_hbe_txposer -> sfb ] ) sfb = ptr_hbe_txposer -> sfb [ ptr_hbe_txposer -> sfb ] ; if ( sfb > ptr_hbe_txposer -> sfb [ ptr_hbe_txposer -> sfb ] ) sfb = ptr_hbe_txposer ->,0
293,"<S2SV_ModStart> lua_authz_provider_spec * prov_spec <S2SV_ModEnd> = parsed_require_line ; <S2SV_ModStart> r ) ; if (! lua_checkstack ( L, prov_spec -> args -> nelts ) ) { ap_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02314 ) ""Unable <S2SV_blank> to <S2SV_blank> check <S2SV_blank> stack <S2SV_blank> for <S2SV_blank> authz <S2SV_blank> provider <S2SV_blank> arguments"" ) ; return AUTHZ_GENERAL_ERROR ; } lua_getglobal ( L, prov_spec -> function_name ) ; if (! lua_checkstack ( L, - 1 ) ) { ap_log_rerror ( APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO ( 02319 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", prov_spec -> function_name, prov_spec -> file_name ) ; ap_lua_release_state ( L, spec, r ) ; return AUTHZ_GENERAL_ERROR ; } lua_getglobal ( L, prov_spec -> function",0
294,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
295,"<S2SV_ModStart> ; if (! proto_end ) return 0 ; cp = url + 3 ; at = strchr ( cp, '@' ) ; colon = strchr ( cp, ':' ) ; if (! at || slash <= at ) { c -> username = xmemdupz ( cp, at - ( cp + 1 ) ) ; c -> password = xmemdupz ( cp, slash - ( cp + 1 ) ) ; c -> host = xmemdupz ( cp, slash - ( cp + 1 ) ) ; } else { c -> username = xmemdup ( cp, at - ( cp + 1 ) ) ; c -> password = xmemdupz ( cp, slash - ( cp + 1 ) ) ; c -> username = xmemdupz ( cp, at - ( cp + 1 ) ) ; c -> username = xmemdupz ( cp, slash - ( cp + 1 ) ) ; c -> password = xmemdupz ( cp, slash - ( cp + 1 ) ) ; }",0
296,"<S2SV_ModStart> fdt ) ; if ( end == path ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> = nextoffset ; if ( end == path ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> case FDT_PROP : include = want >= 2 ; stop_at = offset ; prop = fdt_get_property_by_offset ( fdt, offset, NULL ) ; str = fdt_string ( fdt, fdt32_to_cpu ( prop -> nameoff ) ) ; if (! str ) return - FDT_ERR_BADSTRUCTURE ; if ( str_in_list ( path, inc, inc_count ) ) return - FDT_ERR_BADSTRUCTURE ; if ( str_in_list ( path, exc_prop, exc_prop_count ) ) include = 0 ; break ; case FDT_END_NODE : depth -- ; if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BADSTRUCTURE ; name = fdt_get_name ( fdt, offset, & len ) ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if",0
297,"<S2SV_ModStart> ) ) { redisLog <S2SV_ModEnd> ( REDIS_VERBOSE, <S2SV_ModStart> ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."" <S2SV_ModEnd>, j, <S2SV_ModStart> ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> expires <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."" <S2SV_ModEnd>, j, <S2SV_ModStart> ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."" <S2SV_ModEnd>, j, <S2SV_ModStart> ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."" <S2SV_ModEnd>, j, <S2SV_ModStart> ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."" <S2SV_ModEnd>, j, <S2SV_ModStart> ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %",0
298,"<S2SV_ModStart> ; client -> priv -> connection_timeout = g_timeout_add_seconds ( 5, ( GSourceFunc ) _client_connection_timeout <S2SV_ModEnd>, client )",0
299,<S2SV_ModStart> - 1 ; if ( i + book -> dim > n ) return - 1 ;,0
300,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
301,"<S2SV_ModStart> this_h ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } if (! check_scale_factors ( other_w, other_h, this_w, this_h ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; return ; } sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> x_step_q4 = scaled_y ( 16, sf ) ; if ( vp9_is_scaled ( sf ) ) { sf -> scale_value_x = unscaled_x ; sf -> scale_value_y = unscaled_y ; } else { sf -> predict [ 0 ] [ 0 ] = vp9_convolve_copy ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve_avg ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve8_horiz ; } else { sf -> predict [ 0 ] [ 0 ] = vp9_convolve8_vert ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve8_",0
302,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
303,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
304,"<S2SV_ModStart> sk ) ; rcu_read_lock ( ) ; <S2SV_ModStart> ( opt ) { atomic_sub ( <S2SV_ModEnd> opt -> tot_len <S2SV_ModStart> opt -> tot_len, & sk -> sk_omem_alloc ) ; txopt_put ( opt ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
305,"<S2SV_ModStart> 0 ) { struct ipv6_txoptions * opt = rcu_dereference_protected ( np -> txopt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> 0 ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> 0 ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if ( opt ) { struct ipv6_txoptions * opt = rcu_dereference_protected ( np -> txopt, sock_owned_by_user ( sk ) ) ; rcu_assign_pointer ( np -> txopt, opt ) ; } <S2SV_ModEnd> break ; case <S2SV_ModStart> break ; case IPV6_RXINFO : opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if ( opt ) { struct ipv6_txoptions * opt = rcu_dereference_protected ( np -> txopt, sock_owned_by_user ( sk ) ) ; rcu_assign_pointer ( np ->",0
306,<S2SV_ModStart> ) ; unregister_pernet_subsys ( & sctp_ipv6_net_ops ) ; unregister_pernet_subsys ( & sctp_ipv4_net_ops <S2SV_ModEnd> ) ; sctp_v6_protosw_exit <S2SV_ModStart> ( ) ; unregister_pernet_subsys ( & sctp_ipv6_net_ops <S2SV_ModEnd> ) ; sctp_v4_protosw_exit,0
307,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> ) ; ovpsnr = sse_to_psnr <S2SV_ModEnd> ( ( double <S2SV_ModStart> ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr ) ; for ( i = 0 ; i < 4 ; i ++ ) { fprintf ( stderr, "" <S2SV_blank> %.3f"", ( double ) stream -> psnr_totals [ i ] / stream -> psnr_count ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
308,<S2SV_ModStart> task ) { <S2SV_ModEnd> del_timer ( & <S2SV_ModStart> -> timer ) <S2SV_ModEnd> ; complete (,1
309,"<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen ( <S2SV_ModStart> 2 + 16 ) ) ; if (! dst_name ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> writing\\n"" ) ; return ; }",0
310,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> TRACE_DEBUG ( ""CIDER=0x%04"" <S2SV_ModStart> ( ""PHY1ILR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1ILR ) ) ; TRACE_DEBUG ( ""PHY1IHR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1IHR ) ) ; if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } ksz8851DumpReg ( interface ) ; context -> frameId = 0 ; context -> txBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; context -> rxBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; if ( context -> txBuffer == NULL || context -> rxBuffer == NULL ) { memPoolFree ( context -> txBuffer ) ; memPoolFree ( context -> rxBuffer ) ; return ERROR_OUT_OF_MEMORY ;",0
311,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
312,<S2SV_ModStart> NEED_IP ( 1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> HAVE_IP ( t <S2SV_ModEnd> + 15 ) <S2SV_ModStart> HAVE_OP ( t <S2SV_ModEnd> + 15 ) <S2SV_ModStart> HAVE_IP ( t <S2SV_ModEnd> + 15 ) <S2SV_ModStart> HAVE_OP ( t <S2SV_ModEnd> + 15 ) <S2SV_ModStart> HAVE_IP ( t <S2SV_ModEnd> + 3 ) <S2SV_ModStart> HAVE_OP ( t <S2SV_ModEnd> + 3 ) <S2SV_ModStart> HAVE_IP ( t <S2SV_ModEnd> + 3 ) <S2SV_ModStart> HAVE_OP ( t <S2SV_ModEnd> + 3 ) <S2SV_ModStart> HAVE_OP ( t <S2SV_ModEnd> ) ) ) <S2SV_ModStart> HAVE_IP ( t <S2SV_ModEnd> + 3 ) <S2SV_ModStart> HAVE_IP ( t <S2SV_ModEnd> + 3 ) <S2SV_ModStart> HAVE_OP ( t <S2SV_ModEnd> + 3 ) <S2SV_ModStart> HAVE_IP ( t <S2SV_ModEnd> + 3 ) <S2SV_ModStart> HAVE_OP ( t <S2SV_ModEnd> + 3 ) <S2SV_ModStart> HAVE_IP ( t <S2SV_ModEnd> + 3 ) <S2SV_ModStart> HAVE_OP ( t <S2SV_ModEnd> + 3 ) <S2SV_ModStart> HAVE_IP ( t <S2SV_ModEnd> + 3 ) <S2SV_ModStart> HAVE_OP ( t <S2SV_ModEnd> + 3 ) <S2SV_ModStart> HAVE_IP ( t <S2SV_ModEnd> + 3 ) <S2SV_ModStart> HAVE_IP ( t <S2SV_ModEnd> + 3 ) <S2SV_ModStart> HAVE_IP ( t <S2SV_ModEnd> + 3 ) <S2SV_ModStart> HAVE_OP ( t <S2SV_ModEnd> + 3 ) <S2SV_ModStart>,0
313,"<S2SV_ModStart> ; if ( fit_check_format <S2SV_ModEnd> ( fit, <S2SV_ModStart> { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"" <S2SV_ModEnd>, prop_name ) <S2SV_ModStart> ; return - EINVAL <S2SV_ModEnd> ; } bootstage_mark <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; if ( fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } bootstage_mark ( bootstage_id + BOOTSTAGE_SUB_FORMAT_OK ) ; if ( fit_uname ) { bootstage_mark ( bootstage_id + BOOTSTAGE_SUB_UNIT_NAME ) ; noffset = fit_image_get_node ( fit, fit_uname ) ; } else { bootstage_mark ( bootstage_id + BOOTSTAGE_SUB_UNIT_NAME ) ; noffset = fit_image_get_node ( fit, fit_uname_config ) ; }",0
314,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ),0
315,<S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ) )? ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval * af_ratio ) / ( rc -> baseline_gf_interval + af_ratio - 1 ) : ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval + af_ratio - 1 ) ; # else target = ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval * af_ratio ) / ( rc -> baseline_gf_interval + af_ratio - 1 )? ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval ) / ( rc -> baseline_gf_interval + af_ratio - 1 ) : ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval + af_ratio - 1 ) ; # else target = ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval ) / ( rc -> baseline_gf_interval + af_ratio - 1 ) ; # endif,0
316,"<S2SV_ModStart> ++ ) { if ( strcmp ( argv [ i ], ""allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; else",0
317,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
318,"<S2SV_ModStart> ib ] ; memset ( d, 0, sizeof ( BLOCKD ) ) ;",0
319,"<S2SV_ModStart> FN_REFLEN ] ; if ( strlen ( opt_basedir ) > sizeof ( buff ) - 1 ) { error = - 1 ; goto exit ; } strncat ( buff, opt_basedir, sizeof ( buff ) - 1 ) ; strncat ( buff, ""/"", sizeof ( buff ) - 1 ) ; strncat ( buff, FN_DIRSEP, sizeof ( buff ) - 1 ) ; buff [ sizeof ( buff ) - 1 ] = 0 ; my_free ( opt_basedir ) ; opt_basedir = my_strdup ( buff, MYF ( MY_FAE ) ) ; opt_basedir = my_strdup ( buff, MYF ( MY_FAE ) ) ; opt_datadir = my_strdup ( opt_datadir ) ; opt_datadir = my_strdup ( opt_datadir ) ; opt_datadir = my_strdup ( opt_datadir ) ; opt_datadir = my_strdup ( opt_datadir ) ; opt_datadir = my_strdup ( opt_datadir ) ; opt_datadir = my_strdup ( opt_datad",0
320,"<S2SV_ModStart> int n = MIN ( <S2SV_ModStart> - data ) ; if ( n < 0 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } else { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; }",0
321,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
322,"<S2SV_ModStart> peer. i = new -> peer. i ; sctp_tsnmap_init ( & asoc -> peer. tsn_map, SCTP_TSN_MAP_INITIAL, asoc -> peer. i. initial_tsn, GFP_ATOMIC ) ; list_for_each_entry ( pos, temp, & new -> peer. transport_addr_list ) { sctp_assoc_rm_peer ( asoc, trans ) ; continue ; } if ( asoc -> state >= SCTP_STATE_ESTABLISHED ) { list_for_each_entry ( trans, & asoc -> peer. transport_addr_list, transports ) { if (! sctp_assoc_lookup_paddr ( asoc, & trans -> ipaddr ) ) continue ; } if ( asoc -> state >= SCTP_STATE_ESTABLISHED ) { sctp_assoc_rm_peer ( asoc, trans ) ; continue ; } if ( asoc -> state >= SCTP_STATE_ESTABLISHED ) { list_for_each_entry ( trans, & asoc -> peer. transport_addr_list, transports ) {",0
323,"<S2SV_ModStart> * returnrate, RATE_DISTORTION * returndistortion, int * returnintra ) { BLOCK * b = & x -> block [ 0 ] ; BLOCKD * d = & x -> e_mbd. block [ 0 ] ; MACROBLOCKD * xd = & x -> e_mbd. block [ 0 ] ; MACROBLOCKD * xd = & x -> e_mbd. block [ 0 ] ; MACROBLOCKD * xd = & x -> e_mbd. block [ 0 ] ; <S2SV_ModStart> = INT_MAX ; # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse <S2SV_ModEnd> = INT_MAX, <S2SV_ModStart> best_rd_sse = INT_MAX ; # endif mode_mv = best_ref_mv_sb [ sign_bias ] ; best_ref_mv. as_int = 0 ; best_mode_index = 0 ; memset ( plane, 0, sizeof ( plane [ 4 ] ) ) ; memset ( ref_frame_map, 0, sizeof ( ref_frame_map ) ) ; memset ( ref_frame_map, 0, sizeof ( ref_frame_map ) )",0
324,<S2SV_ModStart> goto error ; if ( statbuf. st_size < 0 ) goto error ;,0
325,"<S2SV_ModStart> ; UWORD8 u1_profile_idc, u1_level_idc, u1_seq_parameter_set_id ; WORD32 i2_max_frm_num ; WORD32 u2_pic_wd, u2_pic_ht ; WORD32 u2_crop_offset_y, u2_crop_offset_uv ; WORD32 u4_num_reorder_frames ; WORD32 u4_temp ; u2_pic_wd = 0 ; u2_pic_ht = 0 ; u2_pic_wd = 0 ; u2_pic_ht = 0 ; u2_crop_offset_y = 0 ; u2_crop_offset_uv = 0 ; u2_num_reorder_frames = 0 ; u1_level_idc = ih264d_get_bits_h264 ( ps_bitstrm, 8 ) ; COPYTHECONTEXT ( ""SPS: <S2SV_blank> level_idc"", u1_level_idc ) ; COPYTHECONTEXT ( ""SPS: <S2SV_blank> max_frm_num"", u2_max_frm_num ) ; COPYTHECONTEXT ( """,0
326,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; vpx_svc_parameters_t * const params = va_arg ( args, vpx_svc_parameters_t * ) ; if ( params == NULL ) return VPX_CODEC_INVALID_PARAM ; cpi -> svc. spatial_layer_id = params -> spatial_layer ; cpi -> svc. <S2SV_ModEnd> temporal_layer_id = params <S2SV_ModStart> -> temporal_layer ; cpi -> lst_fb_idx = params -> lst_fb_idx ; cpi -> gld_fb_idx = params -> gld_fb_idx ; cpi -> alt_fb_idx = params -> alt_fb_idx ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer",0
327,"<S2SV_ModStart> out ) { uint32 width, length ; uint16 <S2SV_ModEnd> bitspersample, samplesperpixel <S2SV_ModStart> samplesperpixel ; uint16 <S2SV_ModEnd> input_compression, input_photometric <S2SV_ModStart> input_photometric ; copyFunc cp = ( copyFunc ) TIFFGetFieldDefaulted ( in, TIFFTAG_COMPRESSION, & input_compression ) ; if ( cp!= ( copyFunc ) - 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Can\'t <S2SV_blank> copy <S2SV_blank> convert <S2SV_blank> image.\\n"", TIFFFileName ( in ) ) ; return FALSE ; } if ( cp!= ( copyFunc ) - 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Can\'t <S2SV_blank> copy/convert <S2SV_blank> subsampled <S2SV_blank> image.\\n"", TIFFFileName ( in ) ) ; return FALSE ; } if ( cp!= ( copyFunc ) - 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Can\'t <S2SV_blank> convert <S2SV_blank> subsampled <S2SV_blank> image.\\n"", TIFFFileName ( in ) ) ; return FALSE ; } if ( cp!= ( copyFunc ) - 1 ) { fprintf ( stderr, ""tiffcp:",0
328,"<S2SV_ModStart> ) { int r <S2SV_ModEnd> ; char * <S2SV_ModStart> = '\\0' ; r = safe_lstat <S2SV_ModEnd> ( a -> <S2SV_ModStart> name, & st ) ; if ( r!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } <S2SV_ModStart> ARCHIVE_FAILED ) ; <S2SV_ModEnd> } else if <S2SV_ModStart> ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_",0
329,"<S2SV_ModStart> unsigned int link_count ; struct kernel_lb_addr loc ; struct indirectEntry * ie ; struct indirectEntry * ie ; ie = ( struct indirectEntry * ) ibh -> b_data ; loc = lelb_to_cpu ( ie -> indirectICB. extLocation ) ; if ( ie -> indirectICB. extLength < 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> inode\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( ie -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { struct buffer_head * nbh = NULL ; struct kernel_lb_addr loc ; struct indirectEntry * ie ; ie = ( struct indirectEntry * ) ibh -> b_data ; loc = lelb_to_cpu ( ie -> indirectICB. extLocation ) ; if ( ie -> indirectICB. extLength < 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> inode\\n"", inode -> i_ino ) ; make_bad_inode",0
330,"<S2SV_ModStart> -> tx_size ; const int filter_level = get_filter_level ( lfi_n, mbmi ) ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> left_uv [ tx_size_uv ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_y = & lfm -> int_4x4_y [ tx_size_y ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv <S2SV_ModEnd> ; index += <S2SV_ModStart> ++ ) { uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const above_uv = &",0
331,"<S2SV_ModStart> mq_ops ) { list_for_each_entry ( rq, n, running, flush. list ) { unsigned int seq = blk_flush_cur_seq ( rq ) ; BUG_ON ( seq!= REQ_FSEQ_PREFLUSH && seq!= REQ_FSEQ_POSTFLUSH ) ; queued |= blk_flush_complete_seq ( rq, fq, seq, error ) ; }",0
332,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
333,"<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) { <S2SV_ModStart>, sub ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
334,"<S2SV_ModStart> ) ) { if (! smatch ( option, "" <S2SV_blank> =\\t,"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! ovalue ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> \' <S2SV_blank> \'"" ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! ovalue ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> \'%s\'"", option ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! ovalue ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, """,0
335,"<S2SV_ModStart> || * replySize > <S2SV_ModEnd> sizeof ( effect_param_t <S2SV_ModStart> NULL || * replySize > <S2SV_ModEnd> sizeof ( effect_param_t <S2SV_ModStart> NULL || * replySize > <S2SV_ModEnd> sizeof ( effect_param_t <S2SV_ModStart> ) sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } effect_param_t * p = ( effect_param_t * ) pCmdData ; if ( * replySize > sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } effect_param_t * p = ( effect_param_t * ) pCmdData ; if ( * pReplyData == NULL || * replySize < sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; }",0
336,"<S2SV_ModStart> ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> length ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> length ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> length ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> length ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> length ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> length ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, CorruptImageError,",0
337,"<S2SV_ModStart> ; if ( np -> rxopt. bits. optlen ) { struct in6_pktinfo src_info ; memset ( & src_info, 0, sizeof ( src_info ) ) ; memcpy ( & src_info, np -> rxopt. bits. optlen ) ; if ( src_info. src_addr. s6_addr, sizeof ( src_info. src_addr. s6_addr. s6_addr. s6_addr. s6_addr. s6_addr. s6_addr. s6_addr. s6_addr. s6_addr. s6_addr. s6_addr. s6_addr. s6_addr. s6_addr. s6_addr. s6_addr. s6_addr. s6_addr. s6_addr. s6_addr. s6_addr. s6_addr. s6_addr. s6_addr. s6_addr. s6_addr. s6_addr. s6_addr. s6_addr. s6_addr. s6_addr. s6_addr. s6_addr.",0
338,"<S2SV_ModStart> berval ) ; if ( ret [ j ] == NULL ) { err = ENOMEM ; goto cleanup ; } <S2SV_ModEnd> ret [ j <S2SV_ModStart> j ] -> key_data_length [ 0 ] = 0 ; ret [ j ] -> key_data_contents [ 0 ] = k5_malloc ( sizeof ( struct berval ), & err ) ; if ( ret [ j ] -> key_data_length [ 0 ] == 0 ) { err = ENOMEM ; goto cleanup ; } ret [ j ] -> key_data_length [ 0 ] = 0 ; ret [ j ] -> key_data_contents [ 0 ] = k5_malloc ( sizeof ( struct berval ), & err ) ; if ( ret [ j ] == NULL ) { err = ENOMEM ; goto cleanup ; } <S2SV_ModEnd> ret [ j <S2SV_ModStart> j ] -> key_data_length [ 0 ] = 0 ; ret [ j ] -> key_data_length [ 0 ] = 0 ; ret [ j ] -> key_data_length [ 0 ] = 0 ; ret [ j ] -> key_data_contents [ 0 ] = k5_malloc ( sizeof ( struct berval ), & err ) ; if ( ret [",0
339,"<S2SV_ModStart> 0x02 ) ; if ( crgram_len > sizeof ( sbuf ) - 1 ) { r = sc_transmit_apdu ( card, & apdu ) ; LOG_TEST_RET ( card -> ctx, r, ""APDU <S2SV_blank> transmit <S2SV_blank> failed"" ) ; return r ; }",0
340,"<S2SV_ModStart> uint8 result ; uint16 <S2SV_ModEnd> length ; STREAM <S2SV_ModStart> ; STREAM s ; struct stream packet <S2SV_ModStart> return False ; packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> connect <S2SV_blank> response <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> connect <S2SV_blank> response <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
341,"<S2SV_ModStart> ( ret ) { dev_err ( & vdev -> dev, ""Invalid <S2SV_blank> macvlan <S2SV_blank> count <S2SV_blank> %u\\n"", vsi -> num_queue_pairs ) ; return ret ; } <S2SV_ModEnd> ch = i40e_find_channel <S2SV_ModStart> ch ) ; if ( ret ) { dev_err ( & vdev -> dev, ""Invalid <S2SV_blank> macvlan <S2SV_blank> count <S2SV_blank> %u\\n"", vsi -> num_queue_pairs ) ; return ret ; } <S2SV_ModEnd> ch = i40e_find_channel <S2SV_ModStart> ( ch ) ; if ( ch ) { dev_err ( & vdev -> dev, ""Invalid <S2SV_blank> macvlan <S2SV_blank> count <S2SV_blank> %u\\n"", vsi -> num_queue_pairs ) ; return ret ; } if ( ch ) { dev_err ( & vdev -> dev, ""Invalid <S2SV_blank> macvlan <S2SV_blank> count <S2SV_blank> %u\\n"", vsi -> num_queue_pairs ) ; return ret ; } <S2SV_ModEnd> ch = i40e_find_channel <S2SV_ModStart> ch ) ; if ( ch ) { dev_err ( & vdev -> dev, ""Invalid <S2SV_blank> macvlan <S2SV_blank> count <S2SV_blank> %u\\n"", vsi -> num_queue_pairs ) ;",0
342,"<S2SV_ModStart> ; if ( idx >= map -> nr_extents ) { ret = uid_gid_map_write_nolock ( file, & new_map, map -> nr_extents - 1 ) ; if ( ret < 0 ) goto out ; ret = uid_gid_map_write_nolock ( file, & new_map, map -> nr_extents - 1 ) ; if ( ret < 0 ) goto out ; ret = uid_gid_map_write_nolock ( file, & new_map, map -> nr_extents - 1 ) ; if ( ret < 0 ) goto out ; ret = uid_gid_map_write_nolock ( file, & new_map -> first ) ; if ( ret < 0 ) goto out ; ret = uid_gid_map_write_nolock ( file, & new_map -> first ) ; if ( ret < 0 ) goto out ; ret = uid_gid_map_write_nolock ( file, & new_map -> lower_first ) ; if ( ret < 0 ) goto out ; ret = uid_gid_map_write_nolock ( file, & new_",0
343,"<S2SV_ModStart> } } } if (! ( action = strtok ( NULL, "";"" ) ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; switch ( action [ 0 ] ) { case 'u' : if ( cmd_cb ( core_ptr, ""u"", NULL, 0 ) < 0 ) { send_msg ( g, ""E01"" ) ; return - 1 ; } return send_msg ( g, ""E01"" ) ; } if ( action = strtok ( NULL, "";"" ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; switch ( action [ 0 ] ) { case 'u' : if ( cmd_cb ( core_ptr, ""u"", NULL, 0 ) < 0 ) { send_msg ( g, ""E01"" ) ; return - 1 ; } return send_msg ( g, ""OK"" ) ; } return send_msg ( g, ""E01"" )",0
344,<S2SV_ModStart> * dataptr ; jas_uchar <S2SV_ModEnd> datacnt ; uint_fast32_t,0
345,"<S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, lf_mic, mb_row, mb_col <S2SV_ModEnd> ) ; pbi <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, lf_mic, mb_row, mb_col <S2SV_ModEnd> ) ; pbi <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, lf_mic, mb_row, mb_col <S2SV_ModEnd> ) ; pbi <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, lf_mic, mb_row, mb_col <S2SV_ModEnd> ) ; pbi <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, lf_mic, mb_row, mb_col <S2SV_ModEnd> ) ; pbi <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, lf_mic, mb_row, mb_col <S2SV_ModEnd> ) ; pbi <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, lf_mic, mb_row, mb_col <S2SV_ModEnd> ) ; pbi",0
346,<S2SV_ModStart> NULL ) ; <S2SV_ModEnd> } quantum_info =,0
347,"<S2SV_ModStart> len ) { return decode_unicode_with_escapes ( c, n, s, len ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_ModStart> char * p <S2SV_ModEnd> ; const char <S2SV_ModStart> char * end <S2SV_ModEnd> ; while ( <S2SV_ModStart> ++ ; if ( * s & 0x80 ) { PyObject * w ; int kind ; void * data ; Py_ssize_t i ; w = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) { Py_DECREF ( w ) ; return NULL ; } kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = PyUnicode_GET_LENGTH ( w ) ; for ( i = 0 ; i < len ; i ++ ) { Py_UCS4 chr = PyUnicode_READ ( kind, data, i ) ; sprintf ( p, ""\\\\U%08x"", chr ) ; p += 10 ; } assert ( p - buf <= Py_SIZE ( u ) ) ; Py_DECREF ( w ) ; } else { * p ++ = * s ++ ; } if ( * s & 0x80 ) {",0
348,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart> NO, DISPLAYED } wrerr = 0 ; int setimes, targisdir, wrerrno = 0 ; char ch, * * patterns = NULL ; size_t n, npatterns = 0 ; if ( targetshouldbedirectory ) verifydir ( targ ) ; if (! Tflag ) ( void ) umask ( 0 ) ; if (! pflag ) ( void ) umask ( mask ) ; if (! pflag ) ( void ) umask ( mask ) ; if (! pflag ) ( void ) umask ( mask ) ; if (! pflag ) ( void ) umask ( mask ) ; if (! pflag ) ( void ) umask ( mask ) ; if (! pflag ) ( void ) umask ( mask ) ; if (! pflag ) ( void ) umask ( mask ) ; if (! pflag ) ( void ) umask ( mask ) ; if (! pflag ) ( void umask ( mask ) ; if (! pflag ) ( void umask ( mask ) ; if (! pflag ) ( void umask ( mask ) ) umask ( mask ) ; if (! pflag ) ( void umask ( mask ) ) umask ( mask )",0
349,<S2SV_ModStart> -> buffer ; if (! ctx -> gf128 ) return - ENOKEY ;,1
350,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
351,<S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vp8_mip_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vp8_mip_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vp8_mip_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vp8_mip_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vp8_mip_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vp8_mip_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vp8_mip_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vp8_mip_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vp8_mip_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES,0
352,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
353,<S2SV_ModStart> ; ps_dec -> ps_cur_slice -> u1_total_mbs_coded += u1_num_mbs ; ps_dec -> ps_cur_slice -> u1_total_mbs_coded += u1_num_mbs ; ps_dec -> ps_cur_slice -> u1_total_mbs_coded += u1_num_mbs ; ps_dec -> ps_cur_slice -> u1_total_mbs_coded += u1_num_mbs ; ps_dec -> ps_cur_slice -> u1_total_mbs_coded += u1_num_mbs ; ps_dec -> ps_cur_slice -> u1_total_mbs_coded += u1_num_mbs ; ps_dec -> ps_cur_slice -> u1_total_mbs_coded += u1_num_mbs ; ps_dec -> ps_cur_slice -> u1_total_mbs_coded += u1_num_mbs ; ps_dec -> ps_cur_slice -> u1_total_mbs_coded += u1_num_mbs ;,0
354,<S2SV_ModStart> ] ) ; vterm_allocator_free <S2SV_ModEnd> ( screen ->,0
355,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
356,"<S2SV_ModStart>, one, <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError,",0
357,"<S2SV_ModStart> value ) { if ( stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } else if ( <S2SV_ModStart> value ) { if ( stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } else { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } } else if ( value ) { if ( stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } else { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ;",0
358,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
359,"<S2SV_ModStart>! job_id || <S2SV_ModEnd> prev_hash ||! <S2SV_ModStart> prev_hash ||! coinbase1 ||! coinbase2 ||! bbversion ||! nbit ||! ntime ) { if ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ; goto out ; } cg_wlock ( & pool -> data_lock ) ; pool -> swork. job_id = job_id ; snprintf ( pool -> prev_hash, 65, ""%s"", prev_hash ) ; snprintf ( pool -> bbversion, 9, ""%s"", bbversion ) ; snprintf ( pool -> nbit, 9, ""%s"", nbit ) ; snprintf ( pool -> ntime, 9, ""%s"", ntime ) ;",0
360,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
361,<S2SV_ModStart> ioc ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
362,"<S2SV_ModStart> unused ) { _Py_IDENTIFIER ( __dict__ ) ; <S2SV_ModStart> * dict = _PyObject_GetAttrId <S2SV_ModEnd> ( self, <S2SV_ModStart> ( self, & PyId___dict__ ) ; if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; return NULL ; } <S2SV_ModEnd> if ( dict <S2SV_ModStart> ) { res = Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } if ( dict ) { res = Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } res = Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res <S2SV_ModEnd> ; } <S2SV_null>",0
363,"<S2SV_ModStart> USB_DT_OTG, ( struct usb_otg_descriptor * ) & desc ) ; if ( err ) dev_err ( & udev -> dev, ""Dual-Role <S2SV_blank> OTG <S2SV_blank> device <S2SV_blank> on <S2SV_blank> %sHNP <S2SV_blank> port\\n"", ( port1 == bus -> otg_port )? """" : ""non-"" ) ; if (! ( desc -> bmAttributes & USB_OTG_HNP ) ) return 0 ; dev_info ( & udev -> dev, ""Dual-Role <S2SV_blank> OTG <S2SV_blank> device <S2SV_blank> on <S2SV_blank> %sHNP <S2SV_blank> port\\n"", ( port1 == bus -> otg_port )? """" : ""non-"" ) ; if ( port1 == bus -> otg_port ) { dev_info ( & udev -> dev, ""Dual-Role <S2SV_blank> OTG <S2SV_blank> device <S2SV_blank> on <S2SV_blank> %sHNP <S2SV_blank> port\\n"", ( port1 == bus -> otg_port )? """" : ""non-"" ) ; return 0 ; } dev_info ( & udev -> dev, ""Dual-Role <S2SV_blank> OTG <S2SV_blank> device <S2SV_blank> on <S2SV_blank> %sHNP <S2SV_blank> port\\n"" )",0
364,"<S2SV_ModStart> -> private_data ; u64 <S2SV_ModEnd> flags = arg <S2SV_ModStart> ; case PERF_EVENT_IOC_PERIOD : return perf_event_period ( event, ( u64 __user * ) arg ) ; case PERF_EVENT_ID : { u64 id = primary_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; return 0 ; } case PERF_EVENT_SET_OUTPUT : { int ret ; if ( arg!= - 1 ) { struct perf_event * output_event ; struct fd output ; ret = perf_event_set_output ( event, output_event ) ; fdput ( output ) ; ret = perf_event_set_output ( event, output_event ) ; } else { ret = perf_event_set_output ( event, NULL ) ; } return ret ; } case PERF_EVENT_SET_FILTER : return perf_event_set_filter ( event, ( void __user * ) arg ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
365,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> * cm, PREDICTION_MODE <S2SV_ModEnd> y_mode ) { <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode",0
366,"<S2SV_ModStart> - EINVAL ; if (! sha -> digest ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4",0
367,"<S2SV_ModStart> sizeof iv ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",0
368,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
369,"<S2SV_ModStart> = nghttp2_min ( inlen, session -> recv_window_size ) ; if ( nghttp2_is_fatal ( rv ) ) { return rv ; } stream = iframe -> stream ; if ( nghttp2_is_fatal ( rv ) ) { return rv ; } stream = iframe -> stream ; if ( nghttp2_is_fatal ( rv ) ) { return rv ; } stream = iframe -> stream ; if ( nghttp2_is_fatal ( rv ) ) { return rv ; } stream = iframe -> stream ; if ( nghttp2_is_fatal ( rv ) ) { return rv ; } stream = iframe -> stream ; if ( nghttp2_is_fatal ( rv ) ) { return rv ; } stream = iframe -> stream ; if ( nghttp2_is_fatal ( rv ) ) { return rv ; } stream = iframe -> stream ; if ( nghttp2_is_fatal ( rv ) ) { return rv ; } stream = iframe -> stream ; if ( nghttp2_is_fatal ( rv ) ) { return rv ; } stream = iframe -> stream ; if ( nghttp2_is_fatal ( rv ) ) { return rv ; }",0
370,"<S2SV_ModStart> += dif ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
371,"<S2SV_ModStart> x86_pmu. max_pebs_events = max_t ( unsigned, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ; <S2SV_ModStart> x86_pmu. max_counters_fixed = max_t ( unsigned, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ; if ( version > 1 ) { rdmsrl ( MSR_IA32_PERF_CAPABILITIES, x86_pmu. intel_cap. capabilities ) ; x86_pmu. intel_cap. capabilities = x86_pmu. intel_cap. capabilities ; } else { rdmsrl ( MSR_IA32_PERF_CAPABILITIES, x86_pmu. intel_cap. capabilities ) ; x86_pmu. intel_cap. capabilities = x86_pmu. intel_cap. capabilities ; }",0
372,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> pack_mb_tokens ( vpx_writer <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ] ; const vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> t ] ; int i = 0 ; int v = a -> value ; int n = a -> len ; if ( p -> skip_eob_node ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int bits = v >> ( n - len ) ; vpx_write_tree ( w, vp9_coef_tree, p -> context_tree, bits, len, i ) ; vpx_write_tree ( w, vp9_coef_con_tree, vp9_pareto8_full [ p -> context_tree [ PIVOT_NODE ] - 1 ], v, n - len, 0 ) ; } else { vpx_write_tree ( w, vp9",0
373,"<S2SV_ModStart>, uncompressed_hdr_size ; struct vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> data, 0, 0, 0 <S2SV_ModStart> struct vp9_write_bit_buffer saved_wb ; write_uncompressed_header ( cpi, & wb ) ; write_uncompressed_header ( cpi, & wb ) ; saved_wb = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> 16 ) ; vpx_rb_bytes_written ( & wb ) ; data += uncompressed_hdr_size ; vpx_compute_update_table ( ) ; data += first_part_size ; vpx_clear_system_state ( ) ; first_part_size = write_compressed_header ( cpi, & saved_wb ) ; data += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; data += encode_tiles ( cpi, data ) ; * size = data - dest ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
374,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
375,"<S2SV_ModStart> struct ikev2_id id <S2SV_ModEnd> ; int id_len <S2SV_ModStart> * typedata ; ND_TCHECK ( * ext ) ; UNALIGNED_MEMCPY ( & id, ext, sizeof ( id ) ) ; ikev2_pay_print ( ndo, NPSTR ( tpay ), id. h. critical ) ; id_len = ntohs ( id. h. len ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> len=%d"", id_len ) ) ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; }",0
376,<S2SV_ModStart> = atoi ( jas_tvparser_getval ( tvp ) ) ; if (! ( cmpt -> width ||! ( cmpt -> height ||! ( cmpt -> width ||! ( cmpt -> width ) ) ) ) { goto error ; } cmpt -> width = atoi ( jas_tvparser_getval ( tvp ) ) ; cmpt -> height = atoi ( jas_tvparser_getval ( tvp ) ) ; break ; case MIF_VSAMP : cmpt -> sampperx = atoi ( jas_tvparser_getval ( tvp ) ) ; break ; case MIF_PREC : cmpt -> prec = atoi ( jas_tvparser_getval ( tvp ) ) ; break ; case MIF_SGND : cmpt -> sgnd = atoi ( jas_tvparser_getval ( tvp ) ) ; break ; case MIF_DATA : if (! ( cmpt -> data = atoi ( jas_tvparser_getval ( tvp ) ) ) ) { goto error ; },0
377,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
378,"<S2SV_ModStart>, yt0_0, yt1_0, xt2_0, yt2_0 ; WORD32 xh0_0, xh1_0, xh20_0, xh21_0, xl0_0, xl1_0, xl20_0, xl21_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1",0
379,<S2SV_ModStart> mntent ) { if ( IS_ERR ( mntent -> mnt_dir ) ) return PTR_ERR ( mntent -> mnt_dir ) ;,0
380,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
381,"<S2SV_ModStart> ) ) ; rb_hash_aset ( env, server_name_val, req_server_name ( req ) ) ; rb_hash_aset ( env, server_port_val, req_server_port ( req ) ) ; fill_headers ( req, env ) ; rb_hash_aset ( env, rack_name_val, rack_name_val_val ) ; rb_hash_aset ( env, rack_url_scheme_val, rack_url_scheme_val ) ; rb_hash_aset ( env, rack_input_val, req_rack_input ( req ) ) ; rb_hash_aset ( env, rack_errors_val, Qfalse ) ; rb_hash_aset ( env, rack_logger_val, Qfalse ) ; rb_hash_aset ( env, rack_upgrade_val, Qfalse ) ; rb_hash_aset ( env, rack_hijackq_val, self ) ; rb_hash_aset ( env, rack_hijack_io_val, Qnil ) ;",0
382,"<S2SV_ModStart> endif # endif int <S2SV_ModEnd> col_type, prepare_retval <S2SV_ModStart> ; # endif # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION imp_sth -> use_server_side_prepare = imp_dbh -> use_server_side_prepare ; imp_sth -> use_server_side_prepare = ( attribs )? SvTRUE ( attribs ) : imp_dbh -> use_server_side_prepare ; if ( attribs ) { svp = DBD_ATTRIB_GET_SVP ( attribs, ""mysql_server_prepare"", 20 ) ; imp_sth -> use_server_side_prepare = ( svp )? SvTRUE ( * svp ) : imp_dbh -> use_server_side_prepare ; imp_sth -> use_server_side_prepare = ( svp )? SvTRUE ( * svp ) : imp_dbh -> use_server_side_prepare ; if ( svp && SvTRUE ( * svp ) ) { imp_sth -> is_async = TRUE ; imp_sth -> use_server_side_prepare = FALSE ; do_error ( sth, 2000, ""Async <S2SV_blank> support <S2SV_blank>",0
383,"<S2SV_ModStart> int need = 0 ; char * line = ( Char * ) malloc ( ( size_t ) need + 1 ) ; if ( line == 0 ) { SysError ( ERROR_BMALLOC2 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( char * ) malloc ( ( size_t ) need + 1 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( char * ) malloc ( ( size_t ) need + 1 ) ; free ( line ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( char * ) malloc ( ( size_t ) need + 1 ) ; free ( line ) ; return ; } <S2SV_ModEnd> if ( need <S2SV_ModStart> screen, { if ( ( line = ( char * ) malloc ( ( size_t ) need + 1 ) ) == 0 ) SysError ( ERROR_BMALLOC2 ) ; free ( line ) ; scp -> data_buffer = ( char * ) malloc ( ( size_t ) need + 1 ) ; free ( line ) ;",0
384,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ftoa_bounded_extra ( JsVarFloat <S2SV_ModStart> ) ) strncat ( str <S2SV_ModEnd>, ""NaN"", <S2SV_ModStart> ( val ) ) strncat ( str <S2SV_ModEnd>, ""-Infinity"", <S2SV_ModStart> else strncat ( str <S2SV_ModEnd>, ""Infinity"",",0
385,"<S2SV_ModStart> ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; char * result ; memcpy ( buf, ""DEADBEEF"", 8 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( result!= NULL ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( length == 5 ) ; if ( size < 6 ) ASSERT ( result!= buf ) ; ASSERT ( memcmp ( buf + size, & ""DEADBEEF"" [ size ], 8 - size ) == 0 ) ; if ( result!= buf ) free ( result ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; char * result ; memcpy ( buf, ""DEADBEEF"", 8 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( result!= NULL ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( strcmp ( result, ""12345"" ) ==",0
386,"<S2SV_ModStart> ; if ( unlikely ( fast_pool -> count >= 64 ) && crng_load ( fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { fast_pool -> count = 0 ; fast_pool -> last = now ; return ; } <S2SV_ModEnd> if ( (",0
387,"<S2SV_ModStart> { strncat ( str, ""ID:"" <S2SV_ModEnd>, len ) <S2SV_ModStart> len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; } else if ( lex -> tk == LEX_STR ) { strncat ( str, ""String:\'"" <S2SV_ModEnd>, len ) <S2SV_ModStart> len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; } else if ( lex -> tk == LEX_ID ) { strncat ( str, ""ID:"" <S2SV_ModEnd>, len ) <S2SV_ModStart> len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; } else if ( lex -> tk == LEX_STR ) { strncat ( str, ""String:\'"" <S2SV_ModEnd>, len ) <S2SV_ModStart> len ) ; strncat ( str, ""\'"" <S2SV_ModEnd>, len )",0
388,,1
389,"<S2SV_ModStart> * output ; <S2SV_ModEnd> for ( i <S2SV_ModStart> ) ; } input = fopen_utf8 ( argv [ i ], ""rb"" ) ; if ( input == ( FILE * ) NULL ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ i ] ) ; continue ; } for ( c = fgetc ( input ) ; c!= EOF ; c = fgetc ( input ) ) ( void ) fputc ( ( char ) c, output ) ; ( void ) remove_utf8 ( argv [ i ] ) ; } ( void ) fclose ( input ) ; ( void ) fclose ( output ) ; <S2SV_ModEnd> ( void )",0
390,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
391,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NULL ; <S2SV_ModEnd> pw_init ( ) <S2SV_ModStart> ( fp = mkstemp <S2SV_ModEnd> ( & tmpname <S2SV_ModStart> atomic_dir ) ) == NULL ) return - 1 ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( lckpwdf ( ) < 0 ) goto fail ; pwf = fopen ( PASSWD_FILE, ""r"" ) ; if (! pwf ) goto fail ; namelen = strlen ( pwd -> pw_name ) ; if (! found && linebuf [ namelen ] == ':' &&! strncmp ( linebuf, pwd -> pw_name, namelen ) ) { if ( putpwent ( pwd, fp ) < 0 ) goto fail ; found = true ; continue ; } if (! found && linebuf [ namelen ] == ':' &&! strncmp ( linebuf, pwd -> pw_name, namelen ) ) { if ( putpwent ( pwd, fp ) < 0 ) goto fail ; namelen = strlen",0
392,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, const <S2SV_ModStart> num_events [ ] ) { if ( tree [ i ] <= 0 ) left = num_events [ - tree [ i ] ] ; else left = num_events [ - tree [ i ] ] ; if ( tree [ i + 1 ] <= 0 ) right = convert_distribution ( tree [ i + 1 ], tree, branch_ct, num_events ) ; if ( tree [ i ] <= 0 ) left = num_events [ - tree [ i ] ] ; if ( tree [ i + 1 ] <= 0 ) right = num_events [ - tree [ i + 1 ] ] ; if ( tree [ i + 2 ] <= 0 ) right = num_events [ - tree [ i + 2 ] ] ; if ( tree [ i + 3 ] <= 0 ) left = num_events [ - tree [ i + 3 ] ] ; else right = convert_distribution ( tree [ i + 3 ], tree, branch_ct, num_events ) ; if ( tree [ i + 3 ] <= 0 ) left = num_events [ - tree [ i + 3 ] ] ; else",0
393,"<S2SV_ModStart> s2 ) { size_t len = strlen ( s1 ) ; <S2SV_ModStart> s2, len <S2SV_ModEnd> ) ; }",0
394,"<S2SV_ModStart> TRUE ; } Jid * jid_from = jid_create ( from ) ; Jid * jid_to = jid_create ( to ) ; if (! jid_from ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> jid <S2SV_blank> from <S2SV_blank> for <S2SV_blank> Carbon"" ) ; return TRUE ; } <S2SV_ModStart> jid_create ( to ) ; if (! jid_to ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> jid <S2SV_blank> from <S2SV_blank> for <S2SV_blank> Carbon"" ) ; return TRUE ; } <S2SV_ModEnd> jid_to = jid_create <S2SV_ModStart> jid_create ( to ) ; if (! jid_from ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> jid <S2SV_blank> from <S2SV_blank> for <S2SV_blank> Carbon"" ) ; return TRUE ; } <S2SV_ModEnd> jid_from = jid_create <S2SV_ModStart> jid_create ( jid_from ) ; if (! jid_to ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> jid <S2SV_blank> from <S2SV_blank> for <S2SV_blank> Carbon"" ) ; return TRUE ; } <S2SV_ModEnd> jid_to = jid_create <S2SV_ModStart> jid_to ) ; if (! jid_from ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> jid <S2SV_blank> from <S2SV_blank> for <S2SV_blank> Carbon"" ) ;",0
395,"<S2SV_ModStart> ) ) { parse_global_option ( CMD_PRINT_HELP, NULL, NULL ) ; parse_service_option ( CMD_PRINT_HELP, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! <S2SV_ModStart> ) ) { parse_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1,",0
396,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
397,<S2SV_ModStart> ; if ( st -> st_v1_new_iv. len == 0 ) { st -> st_v1_new_iv. len = md -> packet_pbs. len ; } else if ( st -> st_v1_new_iv. len > md -> packet_pbs. len ) { st -> st_v1_new_iv. len = md -> packet_pbs. len ; } else if ( st -> st_v1_new_iv. len > md -> packet_pbs. len ) { st -> st_v1_new_iv. len = st -> st_v1_new_iv. len ; } else if ( st -> st_v1_new_iv. len > md -> packet_pbs. len ) { st -> st_v1_new_iv. len = md -> packet_pbs. len ; } else if ( st -> st_v1_new_iv. len > md -> packet_pbs. len ) { st -> st_v1_new_iv. len = st -> st_v1_new_iv. len ; },0
398,<S2SV_ModStart> u4_num_bytes ) { if ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; } else { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_,0
399,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> print_string ( cJSON <S2SV_ModStart> item ) { return print_string_ptr <S2SV_ModEnd> ( item -> <S2SV_ModStart> valuestring ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
400,"<S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img, <S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img,",1
401,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> ++ ; ret = sscanf ( argv [ i ] + 1, ""prestring=%s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> prestring\\n"" ) ; return 1 ; } if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; return 1 ; } if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; return 1 ; } if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; return 1 ; } if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omit",0
402,"<S2SV_ModStart> cols0 ) ; } else if ( arg1 == 1 ) { <S2SV_ModStart> cols0 ) ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 2 ) { win_maximise ( - 2 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 3 ) { win_set_geom ( 0, 0, 0, 0 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 1 ) { win_maximise ( 1 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; win_set_chars ( rows0, 0 ) ; } else if ( arg1 == 1 ) { win_maximise (",0
403,<S2SV_ModStart> ++ ) s [ i ] = 0 ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sum += s [ i ] * s [ i ] ; } for ( c = 0 ; c < cols + 8 ; c ++ ) { int x = s [ c + 7 ] - s [ c - 8 ] ; int y = s [ c + 7 ] + s [ c - 8 ] ; int x = s [ c + 7 ] + s [ c - 8 ] ; int y = s [ c + 7 ] + s [ c ] ; for ( i = - 8 ; i <= 6 ; i ++ ) { sum += s [ i ] * s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sum += s [ i ] * s [ i ] ; d [ i + 8 ] = 0 ; } for ( c = 0 ; c < cols + 8 ; c ++ ) { int x = s [ c + 7 ] + s [ c - 8 ] ; int y = s [ c +,0
404,"<S2SV_ModStart> ; # endif if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif i -> posX = i -> parent -> width ; # endif } if ( ( i -> posY + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> Y <S2SV_blank> position\\n"" ) ; # endif i -> posY = i -> parent -> height ; # endif } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif",0
405,"<S2SV_ModStart> encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 16 ) ) vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 32 ) ) vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 64 ) ) vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 64 ) ) vpx_write_literal <S2SV_ModEnd> ( w,",0
406,"<S2SV_ModStart> ( ent!= NULL && ( st = populate_policy ( context, ld, ent, pol_name, * policy ) )!= 0 <S2SV_ModEnd> ) goto cleanup <S2SV_ModStart> cleanup ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
407,"<S2SV_ModStart> ps_bitstrm ) ; if ( ps_codec -> i4_pic_done ) return IHEVCD_UNSUPPORTED_PPS_ID ; ps_pps -> i1_pic_id = CLIP3 ( ps_pps -> i1_pic_id, 0, MAX_PPS_CNT - 1 ) ; ps_sps -> i1_sps_id = CLIP3 ( ps_sps -> i1_sps_id, 0, MAX_SPS_CNT - 2 ) ; ps_sps -> i1_sps_id = CLIP3 ( ps_sps -> i1_sps_id, 0, MAX_SPS_CNT - 3 ) ; ps_sps -> i1_sps_id = CLIP3 ( ps_sps -> i1_sps_id, 0, MAX_SPS_CNT - 3 ) ; ps_sps -> i1_sps_id = CLIP3 ( ps_sps -> i1_sps_id, 0, MAX_SPS_CNT - 3 ) ; ps_sps -> i",0
408,<S2SV_ModStart> ) ) { if ( count >= SF_MAX_BINHEADER_SIZE ) return - 1 ; switch ( <S2SV_ModEnd> c ) { <S2SV_ModStart> break ; case 'u' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'U' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'V' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'V' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'W' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'U' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'V' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'V' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'V' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'W' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'V' : psf -> rwf_endian = SF_,0
409,<S2SV_ModStart> ; if ( d -> msg_len > sizeof ( d -> msg ) ) { return - EINVAL ; } <S2SV_ModEnd> for ( i <S2SV_ModStart> CX24116_ARGLEN - CX24116_DISEQC_MSGOFS ) ) return - EINVAL ; for ( i = 0 ; i < d -> msg_len ; i ++ ) state -> dsec_cmd. args [ CX24116_DISEQC_MSGOFS + i ] = d -> msg [ i ] ; state -> dsec_cmd. args [ CX24116_DISEQC_MSGLEN ] = d -> msg_len ; state -> dsec_cmd. len = CX24116_DISEQC_MSGOFS + state -> dsec_cmd. args [ CX24116_DISEQC_MSGLEN ] ; if ( toneburst == CX24116_DISEQC_TONEOFF ) state -> dsec_cmd. args [ CX24116_DISEQC_BURST ] = 0 ; else if ( toneburst == CX24116_DISEQC_TONECACHE ) state -> dsec_cmd. args [ CX,0
410,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
411,"<S2SV_ModStart> } pid_t child ; if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; return 0 ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> link\\n"" ) ; return 0 ; } child = fork ( ) ; if ( child < 0 ) errExit ( ""fork"" ) ; copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } _exit ( 0 ) ; } copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs",0
412,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> : return vpx_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X8 <S2SV_ModStart> : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> : return vpx_mse16x8 <S2SV_ModEnd> ; default : <S2SV_ModStart> : return vpx_mse8x16 <S2SV_ModEnd> ; } <S2SV_null>,0
413,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
414,"<S2SV_ModStart> ; if ( reqp == NULL ) { retval = pkinit_server_return_reqp ( context, request, reply ) ; if ( retval == 0 ) { retval = pkinit_server_return_reqp ( context, request, reply ) ; if ( retval == 0 ) { retval = pkinit_server_return_reqp ( context, request, reply ) ; if ( retval == 0 ) { retval = pkinit_server_return_reqp ( context, request, reply ) ; } else { retval = pkinit_server_return_reqp ( context, request, reply ) ; } if ( retval == 0 ) { retval = pkinit_server_return_reqp ( context, request, reply ) ; if ( retval == 0 ) { retval = pkinit_server_return_reqp ( context, request, reply ) ; if ( retval == 0 ) { retval = pkinit_server_return_reqp ( context, request, reply ) ; } else { retval = pkinit_server_return_reqp ( context, request, reply ) ; } if ( retval == 0 ) { retval = pkinit_server_return_reqp ( context, request,",0
415,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
416,"<S2SV_ModStart> flags ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", frame_len ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", frame_len ) ; return ; }",0
417,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
418,<S2SV_ModStart> ; ssize_t count ; if ( bytes == 0 || items == 0 ) return 0,1
419,<S2SV_ModStart> -> serviceId == EXTRACT_16BITS <S2SV_ModEnd> ( & rxh,1
420,<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host,0
421,"<S2SV_ModStart>. valuelen ; if ( sfe -> namelen > XFS_ATTR_SF_MAXNAMELEN ) { error = context -> put_listent ( context, sfe -> flags, sfe -> nameval, ( int ) sfe -> namelen, ( int ) sfe -> valuelen, & sfe -> nameval [ 0 ] ) ; if ( context -> put_listent ( context, sfe -> flags, sfe -> nameval, ( int ) sfe -> namelen, & sfe -> valueval [ sfe -> namelen ] ) ; if ( context -> put_listent ( context, sfe -> flags, sfe -> nameval, ( int ) sfe -> namelen, ( int ) sfe -> valuelen, & sfe -> nameval [ 0 ] ) ; if ( context -> put_listent ( context, sfe -> flags, sfe -> nameval, ( int ) sfe -> namelen, & sfe -> valueval [ sfe -> namelen ] ) ; if ( context -> put_listent ( context, sfe -> flags, sfe -> nameval, ( int )",0
422,"<S2SV_ModStart> = data ; struct l2cap_conf_rfc <S2SV_ModEnd> rfc = { <S2SV_ModStart>. mode = L2CAP_MODE_ERTM ; rfc. txwin_size = L2CAP_DEFAULT_TX_WINDOW ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; l2cap_add_conf_opt ( & ptr, L2",0
423,"<S2SV_ModStart> { do { if ( r < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } ret = <S2SV_ModStart>, MSG_WAITALL ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } ret = recv ( sock_fd, buf, r, MSG_WAITALL ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno ) ; return - 1 ; } if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d",0
424,<S2SV_ModStart> { if ( ps_dec -> u2_total_mbs_coded == 0 ) { ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> u2_total_mbs_coded = ps_dec -> u2_total_mbs_coded ; ps_dec -> u2_total_mbs_coded = ps_dec -> u2_total_mbs_coded ; ps_dec -> u2_total_mbs_coded = ps_dec -> u2_total_mbs_coded ; ps_dec -> u2_total_mbs_coded = ps_dec -> u2_total_mbs_coded ; } else { ps_dec -> u2_total_mbs_coded = ps_dec -> u2_total_mbs_coded ; ps_dec -> u2_total_mbs_coded = ps_dec -> u2_total_mbs_coded = ps_dec -> u2_total_mbs_coded ; ps_dec -> u2_total_mbs_coded = ps_dec -> u2_total_mbs_coded ; },0
425,<S2SV_ModStart> while ( pair!= NULL <S2SV_ModEnd> ) { mprAddItem,0
426,<S2SV_ModStart> = uid ; <S2SV_ModEnd> new -> count <S2SV_ModStart> new -> count = 0 <S2SV_ModEnd> ; spin_lock_irq ( <S2SV_ModStart> } if ( <S2SV_ModEnd> ucounts -> count <S2SV_ModStart> ucounts -> count == INT_MAX ) ucounts = NULL ; else ucounts -> count += 1 <S2SV_ModEnd> ; spin_unlock_irq (,1
427,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd>, int open_flags <S2SV_ModStart> ; open_flags &= ( FMODE_READ | FMODE_WRITE ) ; rcu_read_lock ( ) ; deleg_cur = rcu_dereference ( nfsi -> delegation ) ; if ( <S2SV_ModStart> -> type & fmode )!= fmode <S2SV_ModEnd> ) goto no_delegation_unlock <S2SV_ModStart> ) ; __update_open_stateid <S2SV_ModEnd> ( state, <S2SV_ModStart> NULL ) { __update_open_stateid <S2SV_ModEnd> ( state, <S2SV_ModStart> NULL, open_flags <S2SV_ModEnd> ) ; ret",0
428,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
429,"<S2SV_ModStart> int64_t * out_rate_sum, int64_t * out_dist_sum ) { int i ; ( void ) cpi -> fn_ptr [ bs ]. vf ( p -> src. buf, p -> src. stride, pd -> dst. buf, pd -> dst. stride, & sse ) ; ( void ) cpi -> fn_ptr [ bs ]. vf ( p -> src. buf, p -> src. stride, pd -> dst. buf, pd -> dst. stride, & sse ) ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblock_plane * const p = & x -> plane [ i ] ; struct macroblockd_plane * const pd = & x -> plane [ i ] ; const BLOCK_SIZE bs = get_plane_block_size ( bsize, pd ) ; ( void ) cpi -> fn_ptr [ bs ]. vf ( p -> src. buf, p -> src. stride, pd -> dst. buf, pd -> dst. stride, & sse ) ; ( void ) cpi -> fn_ptr [ bs ]. vf ( p -> src. buf, p ->",0
430,<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
431,<S2SV_ModStart> { if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( <S2SV_ModStart> + 1 ) > PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_,0
432,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { vpx_read_tree <S2SV_ModEnd> ( r, <S2SV_ModStart> return vpx_read_tree ( <S2SV_ModEnd> r, vp9_segment_tree",0
433,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",1
434,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
435,"<S2SV_ModStart>, fmt, maxbuf + 1 <S2SV_ModStart> depth ++ ; buf = smb_fdata1 ( ndo, buf, s, maxbuf + 1, unicodestr ) ; if ( buf == NULL ) return ( NULL ) ;",0
436,"<S2SV_ModStart> ; } n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; } header. controlWord = htole16 ( TX_CTRL_TXIC | ( context -> frameId ++ & TX_CTRL_TXFID ) ) ; header. byteCount = htole16 ( length ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA ) ; ksz8851SetBit ( interface, KSZ8851_TXQCR, KSZ8851_TXQCR_METFE ) ; ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; } netBufferRead ( buffer, offset, length ) ;",0
437,"<S2SV_ModStart> NULL ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
438,<S2SV_ModStart>. udpport = 0 <S2SV_ModEnd> ; settings.,1
439,"<S2SV_ModStart> ; # endif # ifdef MONO_HAS_SEMAPHORES ( finalizer_event ) ; # else WaitForSingleObjectEx ( finalizer_event, INFINITE, FALSE ) ; # endif",0
440,"<S2SV_ModStart>, x_7 ; WORD32 x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 x_10, x_11, x_12, x_13, x_23, x_34 ; WORD32 x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 x_0, x_1, x_2, x_3 ; WORD32 x_4, x_5, x_6, x_7 ; WORD32 x_8 = * x0 ++ ; x_9 = * x0 ++ ; x_8 = * x0 ++ ; x_9 = * x0 ++ ; x_a = x_0 + x_2 ; x_b = x_1 + x_3 ; x_c = x_2 ; x_d = x_1 + x_3 ; x_e = x_4 + x_6 ; x_7 = x_5 + x_7 ; x_8 = * x0 ++ ; x_9",0
441,<S2SV_ModStart> clips_ptr ) { if ( num_clips < 0 || num_clips > DRM_MODE_FB_DIRTY_MAX_CLIPS ) { ret = - EINVAL ; goto out_err1 ; },1
442,<S2SV_ModStart> ; if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
443,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
444,"<S2SV_ModStart>, frames ; int width, height ; int target_width, target_height ; if ( argc < 4 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; return 1 ; } if (! parse_dim ( argv [ 2 ], & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; return 1 ; } if ( argc >= 6 ) frames = atoi ( argv [ 5 ] ) ; else frames = INT",0
445,"<S2SV_ModStart>, result ; if ( num_fields < 0 ) { return 0 ; } _Py_IDENTIFIER ( _attributes ) ; PyObject * l = PyTuple_New ( num_fields ) ; if (! l ) return 0 ; for ( i = 0 ; i < num_fields ; i ++ ) { s = PyUnicode_FromString ( attrs [ i ] ) ; if (! s ) { Py_DECREF ( l ) ; return 0 ; } PyTuple_SET_ITEM ( l, i, s ) ; } result = _PyObject_SetAttrId ( ( PyObject * ) type, & PyId__attributes, l ) >= 0 ; Py_DECREF ( l ) ; return result <S2SV_ModEnd> ; } <S2SV_null>",0
446,"<S2SV_ModStart> ; struct vpx_codec_alg_priv <S2SV_ModEnd> * priv ; <S2SV_ModStart> -> priv = calloc ( <S2SV_ModEnd> 1, sizeof <S2SV_ModStart> struct vpx_codec_alg_priv ) ) ; if (! ctx -> config ) { return VPX_CODEC_MEM_ERROR ; } ctx -> priv = & priv -> base ; ctx -> priv -> sz = sizeof ( * ctx -> priv ) ; ctx -> priv -> iface = ctx -> iface ; ctx -> priv -> init_flags = ctx -> init_flags ; } cfg = & ctx -> config ; for ( i = 0 ; extracfg_map [ i ]. usage ; i ++ ) ; priv -> vp8_cfg = extracfg_map [ i ]. cfg ; priv -> vp8_cfg. pkt_list = malloc ( priv -> cx_data_sz ) ; if (! priv -> cx_data ) { return VPX_CODEC_MEM_ERROR ; } priv -> cx_data_sz = 32768 ; priv -> cx_data_sz = 32768 ; priv -> cx_data_sz = 32768 ; if ( mr_cfg ) ctx -> priv -> enc. total_encoders = mr_cfg",0
447,<S2SV_ModStart> } if ( cnt_c > BOT ) { pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> freq [ c ] = cnt_x + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> total_freq = totfr ; return ret ; },0
448,"<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ctx -> fragments. ptrs, 0, sizeof ( ctx -> fragments. ptrs ) ) ; memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ctx -> fragments. sizes, 0, sizeof ( ctx -> fragments. sizes ) ) ; } if ( ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; } else { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; } if (! ctx -> fragments. enabled ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count = 1 ; } <S2SV_ModEnd> return 1 ;",0
449,<S2SV_ModStart> = v ; if (! IS_ERR ( vma ) ),1
450,"<S2SV_ModStart>! efe ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> efe\\n"", inode -> i_ino ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( fe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> efe\\n"", inode -> i_ino ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> efe\\n"", ident ) ; goto out ; } if ( fe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld",0
451,"<S2SV_ModStart> data ) { uint16_t status ; <S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",0
452,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> bad_format_imginfo ( char <S2SV_ModStart> fmt ) { int n = 0 ; char * ptr = fmt ; while ( * ptr!= '\\0' ) if ( * ptr ++ == '%' ) { if ( * ptr =='s' || * ptr == 'S' ) { n = 1 ; ptr ++ ; } else if ( * ptr =='s' || * ptr == 'S' ) { n = 1 ; ptr ++ ; } else { if ( * ptr =='<S2SV_blank>') ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; if ( * ptr == ',0
453,"<S2SV_ModStart> ""DefragIPv4NoDataTest"", DefragIPv4NoDataTest ) ; UtRegisterTest ( ""IPV6DefragInOrderSimpleTest"", IPV6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""IPV6DefragReverseSimpleTest"", IPV6DefragReverseSimpleTest ) ; UtRegisterTest ( ""IPV6DefragInOrderSimpleTest"", IPV6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakLinuxTest"", IPV6DefragSturgesNovakLinuxTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakWindowsTest"", IPV6DefragSturgesNovakWindowsTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakFirstTest"", IPV6DefragSturgesNovakFirstTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakLastTest"", IPV6DefragSturgesNovakLastTest ) ;",0
454,<S2SV_ModStart> ; if ( object_length > sizeof ( new_object. data ) - add_v1_record ) { new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { return SC_ERROR_OUT_OF_MEMORY ; } if ( object_length > sizeof ( new_object. data ) - add_v1_record ) { new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { return SC_ERROR_OUT_OF_MEMORY ; } if ( object_length > sizeof ( new_object. data ) - add_v1_record ) { new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { return SC_ERROR_OUT_OF_MEMORY ; } if ( add_v1_record ) { new_object. data [ 0 ] = COOLKEY_V1_OBJECT ; new_object. length ++ ; } memcpy ( & new_object. data [ add_v1,0
455,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
456,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
457,"<S2SV_ModStart> NULL ; } if ( p_sys -> p_format -> interlaced ) { p_sys -> p_format -> interlaced = false ; p_sys -> p_format -> top_field_first = false ; if ( p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""top_field_first"",! p_pic -> b_progressive ) ; if ( p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""auto_field_coding"",! p_pic -> b_progressive ) ; if ( p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""auto_field_coding"",! p_pic -> b_progressive ) ; if ( p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""auto_field_coding"",! p",0
458,"<S2SV_ModStart> bfname ) ; if ( bfname. len < 1 ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", fname ) ; break ; }",0
459,"<S2SV_ModStart> 4 ) ; size_t <S2SV_ModEnd> num_properties = GETINT32 <S2SV_ModStart> len ) ; if ( a -> num_names > 0 ) { size_t i ; a -> names = CHECKED_XCALLOC ( VarLenData, a -> num_names ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> names [ i ]. len = GETINT32 ( buf + idx ) ; idx += 4 ; a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; } } else { size_t i ; a -> names = CHECKED_XCALLOC ( VarLenData, a -> num_names ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]",0
460,"<S2SV_ModStart>! efe ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> efe\\n"", inode -> i_ino ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( fe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> efe\\n"", inode -> i_ino ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> efe\\n"", ident ) ; goto out ; } if ( fe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld",0
461,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
462,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
463,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ( data ) { VPxWorker * const worker = ctx -> worker ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data0 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data0 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; YV12_BUFFER_CONFIG * fb ; yuvconfig2image ( & frame_worker_data -> img, fb, NULL ) ; return VPX_CODEC_OK ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
464,"<S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> bytes <S2SV_blank> at <S2SV_blank> "" ""beginning <S2SV_blank> of <S2SV_blank> image.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> "" ""no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } for ( j = 0 ; j < length ; j ++ ) { if ( j + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> "" ""no <S2SV_blank> bytes <S2SV_blank> at <S2SV_blank> "" ""beginning <S2SV_blank> of <S2SV_blank> image.\\n"" ) ; return AVERROR_INVALIDDATA ; } for ( j = 0 ; j < length ; j ++ ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image",0
465,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == testlist ) expr1 = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; else expr1 = ast_for_expr ( c, ch ) ; if (! expr1 ) return NULL ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; ch = CHILD ( n, 2 ) ; if ( TYPE ( CHILD ( n, 1 ) ) == augassign ) expr2 = ast_for_augassign ( c, CHILD ( n, 1 ) ) ; if (! expr2 ) return NULL ; newoperator = ast_for_augassign ( c, CHILD ( n, 1 ) ) ; if (! newoperator ) return NULL ; <S2SV_ModEnd> return AugAssign ( <S2SV_ModStart>, newoperator, expr2, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c -> c_arena ) ;",0
466,"<S2SV_ModStart> int vp8_denoiser_filter_c ( <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * mc_running_avg_y, int mc_avg_y_stride, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * running_avg_y, int avg_y_stride, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * mc_running_avg_y, int avg_y_stride, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * running_avg_y, int y_offset, int uv_offset ) { unsigned char * mc_running_avg_y = mc_running_avg -> y_buffer + y_offset ; int mc_running_avg_stride = mc_running_avg -> y_stride ; unsigned char * running_avg_y = running_avg -> y_buffer + y_offset ; int running_avg_y_stride = running_avg -> y_stride ; int r, c, i ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( r = 0 ; r < 16 ; ++ r ) { for ( c",0
467,"<S2SV_ModStart> ) == 0 ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; return SOCK_MORE ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) == 0 ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; return SOCK_MORE ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) == 0 ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; return SOCK_MORE ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) == 0 ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; return SOCK_MORE ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) == 0 ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; return SOCK_MORE ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) == 0 ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; return SOCK_MORE ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) == 0 ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; return SOCK_MORE ;",0
468,<S2SV_ModStart> ret = 0 ; if ( xtregs -> cp0 >= sizeof ( xtregs_coprocessor_t ) ) return - EINVAL,0
469,<S2SV_ModStart> -> srcIpAddr = queueItem -> srcIpAddr ; message -> srcPort = queueItem -> srcPort ; message -> ttl = queueItem -> ancillary. ttl ; # if ( ETH_SUPPORT == ENABLED ) message -> srcMacAddr = queueItem -> ancillary. srcMacAddr ; # endif # if ( ETH_PORT_TAGGING_SUPPORT == ENABLED ) message -> switchPort = queueItem -> ancillary. port ; # endif # if ( ETH_TIMESTAMP_SUPPORT == ENABLED ) message -> timestamp = queueItem -> ancillary. timestamp ; # endif,0
470,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" <S2SV_ModStart> -> src_dev ; if ( xop -> dst_dev ) { pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ; target_undepend_item ( & remote_dev -> dev_group. cg_item ) ; target_undepend_item ( & remote_dev -> dev_group. cg_item ) ; } else { pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ; target_undepend_item ( & remote_dev -> dev_group. cg_item ) ; } }",0
471,<S2SV_ModStart> int error ; unsigned long <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
472,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> { if ( ctx -> frame_workers!= NULL ) { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data0 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data0 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * )",0
473,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> rows, image -> columns ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
474,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
475,"<S2SV_ModStart> AcquireQuantumMemory ( imsx, imsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory",0
476,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { if ( ctx -> frame_parallel_decode ) { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data0 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; VPxWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data0 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data0 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data ; FrameWorker",0
477,<S2SV_ModStart> ; ps_dec -> ps_cur_slice -> u1_total_mbs_coded += u1_num_mbs ; ps_dec -> ps_cur_slice -> u1_total_mbs_coded += u1_num_mbs ; ps_dec -> ps_cur_slice -> u1_total_mbs_coded += u1_num_mbs ; ps_dec -> ps_cur_slice -> u1_total_mbs_coded += u1_num_mbs ; ps_dec -> ps_cur_slice -> u1_total_mbs_coded += u1_num_mbs ; ps_dec -> ps_cur_slice -> u1_total_mbs_coded += u1_num_mbs ; ps_dec -> ps_cur_slice -> u1_total_mbs_coded += u1_num_mbs ; ps_dec -> ps_cur_slice -> u1_total_mbs_coded += u1_num_mbs ; ps_dec -> ps_cur_slice -> u1_total_mbs_coded += u1_num_mbs ;,0
478,"<S2SV_ModStart> ; UWORD32 u4_y_offset ; WORD16 * pu1_out_p ; WORD16 * pu1_pred ; WORD32 u4_pred_strd ; IMPEG2D_TRACE_MB_START ( ps_dec -> u2_mb_x, ps_dec -> u2_mb_y ) ; if ( ps_dec -> e_pic_type == B_PIC ) { memset ( ps_dec -> pu1_out_p, 0, sizeof ( ps_dec -> pu1_out ) ) ; memset ( ps_dec -> pu1_pred, 0, sizeof ( ps_dec -> pu1_pred ) ) ; } else { if ( ps_dec -> e_pic_type == B_PIC ) { memset ( ps_dec -> pu1_out_p, 0, sizeof ( ps_dec -> pu1_out ) ) ; memset ( ps_dec -> pu1_pred, 0, sizeof ( ps_dec -> pu1_pred ) ) ; } else { memset ( ps_dec -> pu1_pred, 0, sizeof ( ps_dec -> pu1_pred ) ) ; }",0
479,"<S2SV_ModStart> VP9_LAST_FLAG ) { <S2SV_ModEnd> const YV12_BUFFER_CONFIG * <S2SV_ModStart> const cfg = cm -> frame_bufs [ <S2SV_ModEnd> cm -> ref_frame_map <S2SV_ModStart> ] ]. buf ; if ( cfg == NULL ) { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Missing <S2SV_blank> buffer <S2SV_blank> configuration"" ) ; } else { vp8_yv12_copy_frame ( cfg, sd ) ; } } else { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Missing <S2SV_blank> buffer <S2SV_blank> configuration"" ) ; } if ( ref_frame_flag == VP9_LAST_FLAG ) { const YV12_BUFFER_CONFIG * const cfg = cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd",0
480,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
481,"<S2SV_ModStart> -> mbmi ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ pd -> subsampling_x ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ pd -> subsampling_y ] ; const int max_blocks_wide = num_4x4_w ; const int max_blocks_high = num_4x4_h ; const int step = 1 << ( tx_size << 1 ) ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) { int r, c ; int max_blocks_wide = num_4x4_w ; int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling",0
482,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 4 ) ; <S2SV_ModEnd> src += src_stride",0
483,"<S2SV_ModStart> nrow ) { if ( ( row + img -> row_offset ) % rowsperstrip!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""gtStripSeparate"", ""%s"", ""(row+img->row_offset)%rowsperstrip <S2SV_blank>!=0"" ) ; return ( 0 ) ; } <S2SV_ModStart> += img -> row_offset ; if ( ( row + img -> row_offset ) % rowsperstrip!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""gtStripSeparate"", ""%s"", ""(row+img->row_offset)%rowsperstrip <S2SV_blank>!=0"", ""(row+img->row_offset)%rowsperstrip <S2SV_blank>!=0)"" ) ; return ( 0 ) ; } <S2SV_ModStart> += img -> row_offset ; if ( ( row + img -> row_offset ) % rowsperstrip!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""gtStripSeparate"", ""%s"", ""(row+",0
484,<S2SV_ModStart> } } } <S2SV_ModEnd> return 0 ;,0
485,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
486,<S2SV_ModStart> ( num & ( 1U << ( number - 1 ) ) ) return num - ( 1U << ( number - 1 ) ) ; else if ( num & ( 1U << ( number - 1 ) ) ) return num - ( 1U << ( number - 1 ) ) ; else return num - ( 1U << ( number - 1 ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
487,"<S2SV_ModStart> [ plane ] ; int w = vpx_img_plane_width ( img, plane ) ; const int h = vpx_img_plane_height ( img, plane ) ; int x = ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH )? img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH : img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ; <S2SV_ModStart> y ) { if ( ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) && ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) && ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) && ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) && ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) && ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) && ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) && ( img -> fmt & VPX_",0
488,"<S2SV_ModStart> = NULL ; uint16_t <S2SV_ModEnd> attr_len ; uint16_t <S2SV_ModStart> ; if ( avp -> length < sizeof ( struct l2tp_avp_t ) + 2 ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank>",0
489,"<S2SV_ModStart> ; if ( actx -> tag_len > CHACHA_CTR_SIZE - 8 ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
490,"<S2SV_ModStart> alg ) { if (! capable ( CAP_SYS_MODULE ) ) return ERR_PTR ( - EPERM ) ; <S2SV_ModStart> ( ""%s-all"", name ) ; if (! capable ( CAP_SYS_MODULE ) ) return ERR_PTR ( - EPERM ) ; <S2SV_ModStart> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
491,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
492,<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ;,1
493,"<S2SV_ModStart> ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> sk <S2SV_blank> %p"" <S2SV_ModEnd>, sock,",0
494,"<S2SV_ModStart> { memcpy ( pass_salt <S2SV_ModEnd>, cpkt. <S2SV_ModStart> cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PASSSALT ) { memcpy ( pass_salt <S2SV_ModEnd>, cpkt. <S2SV_ModStart> cpkt. length ) ; } else if ( cpkt. cptype == MT_CPTYPE_PLAINDATA ) { fwrite ( ( const void * ) cpkt. data, 1, cpkt. length, stdout ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 0 ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; }",0
495,"<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_empty ( adata -> conn ) ; <S2SV_ModStart> ) ; goto bail ; } if ( ans == MUTT_NO ) { enum ImapExecResult rc = imap_exec ( adata, ""STARTTLS"", IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc!= IMAP_EXEC_ERROR ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ) ; goto bail ; } } if ( ans == MUTT_NO ) { enum ImapExecResult rc = imap_exec ( adata, ""STARTTLS"", IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc!= IMAP_EXEC_ERROR ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ; goto bail ; } if (",0
496,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
497,"<S2SV_ModStart> = strncmp ( line <S2SV_ModEnd>, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", <S2SV_ModStart> = strncmp ( line <S2SV_ModEnd>, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", <S2SV_ModStart> = strncmp ( line <S2SV_ModEnd>, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", <S2SV_ModStart> = strncmp ( line <S2SV_ModEnd>, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", <S2SV_ModStart> = strncmp ( line <S2SV_ModEnd>, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", <S2SV_ModStart> = strncmp ( line <S2SV_ModEnd>, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", <S2SV_ModStart> = strncmp ( line <S2SV_ModEnd>, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", <S2SV_ModStart> = strncmp ( line <S2SV_ModEnd>, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"" <S2SV_ModEnd>, 32 )",0
498,"<S2SV_ModStart>, & rlen, 0",1
499,"<S2SV_ModStart> ; read_userfile ( ) ; <S2SV_ModStart> = 0 ; memcpy ( md5data, user -> password, 82 ) ; memcpy ( md5data + 1 <S2SV_ModEnd>, curconn -> <S2SV_ModStart> curconn -> pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; md5_finish ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; md5_finish ( & state, ( const md5_byte_t * ) md5sum + 1 ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> seskey, curconn -> outcounter ) ; send_udp ( curconn, & pdata, 0 )",0
500,"<S2SV_ModStart> ; if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> ; if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> ; if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name,",0
501,<S2SV_ModStart> i < sizeof ( buf ) <S2SV_ModEnd> && str [ <S2SV_ModStart> j ++ ) { if ( i >= sizeof ( buf ) ) { return - 1 ; } for ( i = 0 ; i < sizeof ( buf ) - 1 && str [ i ] ; i ++ ) { buf [ i ] = tolower ( ( const ut8 ) str [ i ] ) ; } for ( j = 0 ; j < sizeof ( buf ) - 1 && str [ i ] ; j ++ ) { if ( str [ j ] == '#' ) { i ++ ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } for ( j = 0 ; j < sizeof ( buf ) - 1 ; j ++ ) { if ( str [ j ] == '#' ) { buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } for ( j = 0 ; j < sizeof ( buf ) - 1 ; j ++ ) { if ( str [ j ] == '#' ) { i ++ ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } for ( i = 0 ; i < sizeof ( buf ) - 1,0
502,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
503,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
504,"<S2SV_ModStart> sizeof iv ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",0
505,"<S2SV_ModStart> sshbuf * b = NULL <S2SV_ModStart> char * pkalg = NULL, * userstyle = NULL, * key_s = NULL, * ca_s = NULL <S2SV_ModStart> ; u_char * pkblob = NULL <S2SV_ModStart> ; u_char * sig = NULL <S2SV_ModStart> ; if ( <S2SV_ModEnd> authctxt -> valid <S2SV_ModStart> authctxt -> valid <S2SV_ModEnd> ) { debug2 <S2SV_ModStart> ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if ( ( r = sshpkt_get_string ( ssh, & pkblob, & blen ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & pkblob, & blen ) )!= 0 || ( r = sshpkt_get_string ( ssh, & blen ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & blen ) )!= 0 || ( r = sshpkt_get_u8 ( ssh,",0
506,"<S2SV_ModStart> uint32_t bcount ; if (! ( config -> qmode & QMODE_NO_STORE_WRAPPER ) &&! WavpackAddWrapper ( wpc, & WaveHeader, sizeof ( WaveHeader ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
507,"<S2SV_ModStart> size_t s ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( CHECKOVERFLOW ( o, buf_size, 2 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } s = exif_get_long ( buf + o, EXIF_BYTE_ORDER_INTEL ) ; if ( CHECKOVERFLOW ( s, buf_size, 2 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( CHECKOVERFLOW ( s, buf_size, 2 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", """,0
508,<S2SV_ModStart> bd_addr ) { if ( interface_ready ( ) == FALSE ) return BT_STATUS_NOT_READY ;,0
509,"<S2SV_ModStart> int i ; size_t <S2SV_ModEnd> avail ; int <S2SV_ModStart> 4 ) ; size_t <S2SV_ModEnd> expect ; txid <S2SV_ModStart> ; avail = <S2SV_ModEnd> buf -> len <S2SV_ModStart> buf -> cursor ; expect = 8 + 8 + nxip * 8 ; if ( expect < 0 || expect > avail ) goto bad_format ; nxip = pq_getmsgint ( buf, 4 ) ; if ( nxip < 0 || nxip > avail || expect > avail ) goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmin > xmax || xmax > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; snap -> xmin = xmin ; snap -> xmax = xmax ; SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( snap, TXID_SNAPSHOT_SIZE ( snap, TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur >= xmax ) goto bad_",0
510,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] =,0
511,"<S2SV_ModStart> ; if (! ret || cm_id -> device ) { ret = - EADDRNOTAVAIL ; rdsdebug ( ""addr <S2SV_blank> %pI4 <S2SV_blank> ret <S2SV_blank> %d <S2SV_blank> node <S2SV_blank> type <S2SV_blank> %d\\n"", & addr, ret, cm_id -> device? cm_id -> device -> node_type : - 1 ) ; rdma_destroy_id ( cm_id ) ; return ret ; } <S2SV_ModEnd> ret = -",0
512,<S2SV_ModStart> - 1 ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; goto done ; } <S2SV_ModStart> = 0 ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
513,"<S2SV_ModStart> { errstr = parse_global_option <S2SV_ModEnd> ( CMD_INITIALIZE, <S2SV_ModStart> eof ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; } else { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ;",0
514,"<S2SV_ModStart> ; # endif if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif i -> posX = i -> parent -> width ; # endif } if ( ( i -> posY + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> Y <S2SV_blank> position\\n"" ) ; # endif i -> posY = i -> parent -> height ; # endif } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif",0
515,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_NAME_MAX : * ( size_t * ) val = ms -> name_max ; return 0 ; case MAGIC_PARAM_ELF_PHNUM_MAX : * ( size_t * ) val = ms -> elf_phnum_max ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ;,0
516,<S2SV_ModStart> journal_t * journal <S2SV_ModEnd> = EXT4_JOURNAL (,0
517,"<S2SV_ModStart> ++ ) { writer = GF_SAFEALLOC ( writer, TrackWriter ) ; if (! writer ) goto exit ; writer -> sampleNumber = 1 ; writer -> mdia = trak -> Media ; writer -> stbl = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer -> stbl ) return GF_OUT_OF_MEM ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer -> stbl ) return GF_OUT_OF_MEM ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer -> stsc ) return GF_OUT_OF_MEM ;",0
518,"<S2SV_ModStart> 17 ] ; size_t <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> endif strncpy ( md5data <S2SV_ModEnd>, password, <S2SV_ModStart> password, 82 ) ; md5data [ 83 ] = '\\0' ; memcpy ( md5data <S2SV_ModEnd> + 1, <S2SV_ModStart> password ), pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; md5_finish ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; if ( is_a_tty && get_terminal_size ( width, height )!= - 1 ) { width = htole16 ( width ) ; height = htole16 ( height ) ; } if ( is_a_tty && get_terminal_size ( width, height )!= - 1 ) { width = htole16 ( width ) ; height = htole16 ( height ) ; } if ( is_a_tty && get_terminal_size ( width, height )!= - 1 ) { width = htole16 ( width ) ;",0
519,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> SNMP_FREE ( _mibindexes,0
520,<S2SV_ModStart> ( n ) \\\n{ <S2SV_ModEnd> sum = ( <S2SV_ModStart> bits -= n ; \\\n} <S2SV_ModEnd> typedef struct PCDTable <S2SV_ModStart> buffer ) ; for ( j = 0 ; j < 3 ; j ++ ) { pcd_table [ j ] = ( PCDTable * ) RelinquishMagickMemory ( pcd_table [ j ] ) ; pcd_table [ j ] = ( PCDTable * ) RelinquishMagickMemory ( pcd_table [ j ] ) ; pcd_table [ j ] = ( PCDTable * ) RelinquishMagickMemory ( pcd_table [ j ] ) ; for ( j = 0 ; j < length ; j ++ ) { pcd_table [ j ] = ( PCDTable * ) RelinquishMagickMemory ( pcd_table [ j ] ) ; pcd_table [ j ] = ( PCDTable * ) RelinquishMagickMemory ( pcd_table [ j ] ) ; pcd_table [ j ] = ( PCDTable * ) RelinquishMagickMemory ( pcd_table [ j ] ) ; for ( j = 0 ; j <,0
521,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart>, i ) )!= TYPE_COMMENT ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case DOUBLESTAR : if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i + 1 ) ) == EQUAL ) { expression = ast_for_expr ( c, CHILD ( n, i + 1 ) ) ; if (! expression ) goto error ; asdl_seq_SET ( kwdefaults, j, NULL ) ; } else { asdl_seq_SET ( kwdefaults, j, NULL ) ; } <S2SV_ModEnd> i += 1",0
522,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
523,"<S2SV_ModStart> -> y_buffer ; # if CONFIG_VP9_HIGHBITDEPTH if ( ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( dst_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) ) memcpy_high ( dst, src, src_ybc -> y_width ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( dst_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( dst_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( dst_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) ) memcpy_high ( dst, src, src_ybc -> y_width ) ; # endif <S2SV_ModStart> row ) { memcpy_high ( dst, src, src_ybc -> y_width ) ; dst += dst_ybc",0
524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ; for ( int i = 0 ; i < BLOCK_4X4 ; ++ i ) { const int num_4x4_w = num_4x4_blocks_wide_lookup [ i ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ i ] ; const int num_4x4_blk = MAX ( 16, num_4x4_blk ) ; for ( x -> sb_index = 0 ; x -> sb_index < 4 ; ++ x -> sb_index ) for ( x -> b_index = 0 ; x -> b_index < 16 / num_4x4_blk ; ++ x -> b_index ) for ( x -> sb_index = 0 ; x -> mb_index < 16 / num_4x4_blk ; ++ x -> b_index ) for ( x -> sb_index = 0 ; x ->",0
525,"<S2SV_ModStart> int hexdump ; u_int offset ; u_int link_type ; union { float f ; uint32_t i ; } bw ; ND_TCHECK ( * lmp_obj_header ) ; tptr = pptr ; lmp_obj_header = ( const struct lmp_object_header * ) pptr ; obj_tlen = ( const struct lmp_object_header * ) pptr ; ND_TCHECK ( * lmp_obj_header ) ; obj_tptr = pptr ; ND_TCHECK ( * obj_tptr ) ; if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart>",0
526,"<S2SV_ModStart> void inc_mvs ( MB_MODE_INFO <S2SV_ModEnd> * mbmi, <S2SV_ModStart> * ref = <S2SV_ModEnd> mbmi -> ref_mvs <S2SV_ModStart> i ) { MV diff = { mvs [ i ]. as_mv. row - ref -> row, mvs [ i ]. as_mv. col - ref -> col } ; vp9_inc_mv ( & diff, counts ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
527,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
528,"<S2SV_ModStart> ; if ( pskb_expand_head <S2SV_ModEnd> ( skb_out,",0
529,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
530,"<S2SV_ModStart> ) return ; <S2SV_ModEnd> DEBUGMSGTL ( ( <S2SV_ModStart> env_var ) ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ; entry = strtok_r ( NULL, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibdir ( entry ) ; entry = strtok_r ( NULL, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibdir ( entry ) ; entry = strtok_r ( NULL, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ; } <S2SV_ModEnd> snmp_init_",0
531,<S2SV_ModStart> open ( uinput_dev_path <S2SV_ModEnd> [ x ] <S2SV_ModStart> open ( uinput_dev_path <S2SV_ModEnd> [ x ] <S2SV_ModStart> fd = open ( uinput_dev_path <S2SV_ModEnd> [ x ] <S2SV_ModStart> fd = open ( uinput_dev_path <S2SV_ModEnd> [ x ] <S2SV_ModStart> fd = open ( uinput_dev_path <S2SV_ModEnd> [ x ] <S2SV_ModStart> fd = open ( uinput_dev_path <S2SV_ModEnd> [ x ] <S2SV_ModStart> fd = open ( uinput_dev_path <S2SV_ModEnd> [ x ] <S2SV_ModStart> fd = open ( uinput_dev_path <S2SV_ModEnd> [ x ] <S2SV_ModStart> fd = open ( uinput_dev_path <S2SV_ModEnd> [ x ] <S2SV_ModStart> fd = open ( uinput_dev_path <S2SV_ModEnd> [ x ] <S2SV_ModStart> fd = open ( uinput_dev_path <S2SV_ModEnd> [ x ] <S2SV_ModStart> fd = open ( uinput_dev_path <S2SV_ModEnd> [ x ] <S2SV_ModStart> fd = open ( uinput_dev_path <S2SV_ModEnd> [ x ] <S2SV_ModStart> fd = open ( uinput_dev_path <S2SV_ModEnd> [ x ],0
532,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
533,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
534,<S2SV_ModStart> <S2SV_null> <S2SV_null> static krb5_error_code <S2SV_ModEnd> iakerb_alloc_context ( iakerb_ctx_id_t <S2SV_ModStart> ; code = krb5_gss_init_context <S2SV_ModEnd> ( & ctx,0
535,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> bitmapDC = CreateCompatibleDC",1
536,<S2SV_ModStart> ; while ( ( <S2SV_ModStart> )!= START_CODE_PREFIX ) && ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ),1
537,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { kfree ( string ) ; ret = - EINVAL ; goto out ; } if ( strcmp ( dentry -> d_name. name, ""ipc_flood_count"" ) && strcmp ( dentry -> d_name. name, ""ipc_flood_duration_ms"" ) ) flood_duration_test = true ; if ( flood_duration_test ) ret = kstrtoul ( string, 0, & ipc_count ) ; if ( ret < 0 ) goto out ;",0
538,<S2SV_ModStart> imethod ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
539,"<S2SV_ModStart> ""nnnnn\\0"" ) ] ; unsigned long <S2SV_ModEnd> tmp ; if <S2SV_ModStart> copy_from_user ( buf <S2SV_ModEnd>, buffer, <S2SV_ModStart> count ) ) return - EFAULT <S2SV_ModEnd> ; tmp =",0
540,"<S2SV_ModStart> char * last_elem <S2SV_ModEnd> ; do { <S2SV_ModStart> size_t len ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> 6 ) == 0 || ( strncmp ( & name [ 1 ], ""ORIGIN"", 7 ) == 0 && ( len = 9 )!= 0 ) ) || ( strncmp ( & name [ 1 ], ""PLATFORM"", 8 ) == 0 && ( len = 11 )!= 0 ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 9 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( len = 11 )!= 0 ) ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 2 ], ""ORIGIN}"", 9 ) == 0 && ( len = 11 )!= 0 ) )? l -> l_origin : _dl_origin ) ; if ( repl!= NULL && repl!= ( const char * ) - 1",0
541,<S2SV_ModStart> ) H264SwDecMalloc ( <S2SV_ModEnd> sizeof ( decContainer_t,0
542,"<S2SV_ModStart> len ) { struct ipv6_txoptions * opt = NULL ; <S2SV_ModStart> ) ; } opt = rcu_dereference_protected ( rp -> opt, sock_owned_by_user ( sk ) ) ; if ( opt ) { opt = rcu_dereference_protected ( opt -> opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; } <S2SV_ModEnd> if ( flowlabel <S2SV_ModStart> flowlabel ) { rcu_read_lock ( ) ; opt = rcu_dereference_protected ( flowlabel -> opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; if ( flowlabel ) { rcu_read_unlock (",0
543,"<S2SV_ModStart> drop ; } iph = ip_hdr ( skb ) ; if (! opt ) goto inhdr_error ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> optlen < sizeof ( struct iphdr ) ) ) goto inhdr_error ; if ( unlikely ( opt -> srr ) ) { struct in_device * in_dev = __in_dev_get_rcu ( dev ) ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop ; if ( opt -> srr ) { struct in_device * in_dev = __in_dev_get_rcu ( in_dev ) ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop ; if ( opt -> srr ) { struct in_device * in_dev = __in_dev_get_rcu ( dev ) ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE (",0
544,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
545,"<S2SV_ModStart> goto errout ; if ( info -> groupbook >= ci -> books ) goto errout ; <S2SV_ModStart> goto errout ; if ( info -> stagemasks [ j ] == 0xff ) { int cascade = oggpack_read ( opb, 3 ) ; if ( oggpack_read ( opb, 1 ) ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ) ; if ( cascade > ( info -> stagemasks [ j ] >> 1 ) ) cascade |= ( info -> stagemasks [ j ] >> 1 ) ; if ( cascade > ( info -> stagemasks [ j ] >> 1 ) ) { int cascade = oggpack_read ( opb, 3 ) ; if ( oggpack_read ( opb, 1 ) ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ) ; if ( cascade > ( info -> stagemasks [ j ] >> 1 ) ) cascade |= ( info -> stagemasks [ j ] >> 1 ) ; if ( cascade > ( info -> stagemasks [ j ] >> 1 ) ) { int cascade =",0
546,<S2SV_ModStart>! js_regexec ( <S2SV_ModEnd> re -> prog,0
547,"<S2SV_ModStart> ) break ; if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; }",0
548,"<S2SV_ModStart> ; krb5_key_data * key_data ; if ( key_data_in == NULL ) goto cleanup ; key_data = k5calloc ( n_key_data, sizeof ( * key_data ), & err ) ; if ( key_data == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_contents [ 1 ] = NULL ; } } for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_kvno!= key_data [ i + 1 ]. key_data_kvno ) num_versions ++ ; ret [",0
549,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
550,"<S2SV_ModStart> ] ) ; sqlite3_int64 <S2SV_ModEnd> zInput = sqlite3_malloc <S2SV_ModStart> + 1 ) ; if ( pCsr -> zInput == 0 ) { rc = SQLITE_NOMEM ; } else { memcpy ( pCsr -> zInput, zByte, nByte ) ; pCsr -> zInput [ nByte ] = 0 ; }",0
551,<S2SV_ModStart> filp ) { if (! capable ( CAP_SYS_RAWIO ) ) return - EACCES ; <S2SV_ModStart> ) ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
552,"<S2SV_ModStart> expr_ty iter, string type_comment, <S2SV_ModStart> ; p -> v. AsyncFor. type_comment = type_comment ; p ->",0
553,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ; if ( <S2SV_ModEnd> keyinfo -> key_alg <S2SV_ModStart> HA_OFFSET_ERROR ) { if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> lock <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank>",0
554,<S2SV_ModStart> } opt = xchg ( ( __force struct ipv6_txoptions * * ),0
555,"<S2SV_ModStart> ; case NGHTTP2_ERR_STREAM_ID_NOT_AVAILABLE : return ""Stream <S2SV_blank> ID <S2SV_blank> is <S2SV_blank> not <S2SV_blank> available"" ; case NGHTTP2_ERR_STREAM_CLOSING : return ""Stream <S2SV_blank> is <S2SV_blank> closing"" ; case NGHTTP2_ERR_STREAM_SHUT_WR : return ""The <S2SV_blank> transmission <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> for <S2SV_blank> this <S2SV_blank> stream"" ; case <S2SV_ModStart> ; case NGHTTP2_ERR_STREAM_ID_NOT_AVAILABLE : return ""Stream <S2SV_blank> ID <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> for <S2SV_blank> this <S2SV_blank> stream"" ; case NGHTTP2_ERR_STREAM_CLOSED : return ""Stream <S2SV_blank> was <S2SV_blank> already <S2SV_blank> closed <S2SV_blank> or <S2SV_blank> invalid"" ; case NGHTTP2_ERR_STREAM_ID_NOT_AVAILABLE : return ""Stream <S2SV_blank> ID <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> for <S2SV_blank> this <S2SV_blank> stream"" ; case NGHTTP2_ERR_INVALID_STREAM_ID : return ""Stream <S2SV_blank> ID <S2SV_blank> is <S2SV_blank> invalid"" ; case NGHTTP2_ERR_GOAWAY_ALREADY_SENT : return ""GOAWAY <S2SV_blank> has <S2SV_blank> already <S2SV_blank> been <S2SV_blank> sent"" ; case NGHTTP2_ERR_",0
556,"<S2SV_ModStart> UINT error ; # ifdef WITH_DEBUG_RDPEI WLog_DBG ( TAG, ""rdpei_recv_pdu: <S2SV_blank> eventId: <S2SV_blank> %"" PRIu16 "" <S2SV_blank> (%s) <S2SV_blank> length: <S2SV_blank> %"" PRIu32 """", eventId, rdpei_eventid_string ( eventId ), pduLength ) ; # endif",0
557,"<S2SV_ModStart> ; } } if ( pData -> socket == NULL ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s"", pData -> description ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; }",0
558,"<S2SV_ModStart> ) ; struct ipv6_txoptions * opt <S2SV_ModStart> struct flowi6 fl6 ; rcu_read_lock ( ) ; <S2SV_ModStart> ; SCTP_INC_STATS ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> = 1 ; rcu_read_unlock ( ) ;",0
559,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
560,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
561,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_failure ( rdpNego <S2SV_ModStart> ; WLog_DBG ( TAG <S2SV_ModEnd>, ""RDP_NEG_FAILURE"" ) <S2SV_ModStart> = NEGO_STATE_FAIL ; return TRUE ;",0
562,"<S2SV_ModStart> = 0 ; bn_t <S2SV_ModEnd> t ; RLC_TRY <S2SV_ModStart> ; RLC_TRY { bn_null ( t ) ; RLC_TRY { bn_new ( t ) ; switch ( operation ) { case RSA_ENC : bn_zero ( m ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = k_len - 3 - m_len ; for ( int i = 0 ; i < * p_len ; i ++ ) { bn_lsh ( m, m, 8 ) ; do { rand_bytes ( & pad, 1 ) ; bn_add_dig ( m, m, pad ) ; } bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, 0 ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, 0 ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, 0 ) ; bn_lsh ( m, m, 8 ) ; bn_rsh ( t, m, 8 * m",0
563,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
564,<S2SV_ModStart> { rq = <S2SV_ModEnd> hctx -> tags <S2SV_ModStart> hctx -> tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; if (,1
565,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
566,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> < SWITCHABLE_FILTER_CONTEXTS ; ++ j ) count [ i ] += cm -> counts. <S2SV_ModEnd> switchable_interp [ j,0
567,"<S2SV_ModStart> { token ++ ; } while ( token [ 0 ] =='<S2SV_blank>'|| token [ 0 ] == '[' || token [ 0 ] == ']' ) { token ++ ; } <S2SV_ModStart> [ operand ]. type = ARM_UNDEFINED ; op -> operands [ operand ]. reg_type = ARM_UNDEFINED ; op -> operands [ operand ]. shift = ARM_NO_SHIFT ; if (! strncmp ( token, ""lsl"", 3 ) ) { op -> operands [ operand ]. shift = ARM_LSL ; } else if (! strncmp ( token, ""asr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_ASR ; } if (! strncmp ( token, ""lsl"", 3 ) ) { op -> operands [ operand ]. shift = ARM_LSL ; } if (! strncmp ( token, ""lsr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_ASR ; } else if (! strncmp ( token, ""asr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_ASR ; }",0
568,"<S2SV_ModStart> cpi ) { VP9_COMMON * const cm = & cpi -> cm ; <S2SV_ModStart> -> act_zbin_adj = 0 <S2SV_ModEnd> ; vpx_setup_src_planes ( <S2SV_ModStart> cpi -> Source, 0, 0 ) ; vpx_setup_pre_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vpx_setup_dst_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vp9_setup_block_planes ( & x -> e_mbd, cm -> subsampling_x, cm -> subsampling_y ) ; vpx_memset ( xd -> above_context [ 0 ], 0, sizeof ( * xd -> above_context [ 0 ] ) * 2 * aligned_mi_cols * MAX_MB_PLANE ) ; memset ( xd -> above_seg_context, 0, sizeof ( * xd -> above_seg_context ) * aligned_mi_cols ) ; memset ( xd -> above_seg_context, 0, sizeof",0
569,"<S2SV_ModStart> = htc_request_check_host_hdr ( sp <S2SV_ModEnd> ) ; if <S2SV_ModStart> 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; retval = http_splitline ( sp -> wrk, sp -> fd, hp, htc, HTTP_HDR_REQ, HTTP_HDR_URL, HTTP_HDR_PROTO ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } retval = http_splitline ( sp -> wrk, sp -> fd, hp, htc, HTTP_HDR_URL, HTTP_HDR_PROTO ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; retval = http_splitline ( sp -> wrk, sp -> fd, hp, htc, HTTP_HDR_REQ, HTTP_HDR_URL, HTTP_HDR_PROTO ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval",0
570,"<S2SV_ModStart> EOFOp 0x07 <S2SV_ModEnd> Image * image <S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> -> page. x <S2SV_ModEnd> = ReadBlobLSBShort ( <S2SV_ModStart> = ReadBlobLSBShort ( image ) ; image -> page. y <S2SV_ModEnd> = ReadBlobLSBShort ( <S2SV_ModStart> = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; flags = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> matte = flags & 0x04 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return",0
571,<S2SV_ModStart> ; int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( tETH_HDR ) ),0
572,<S2SV_ModStart> ; ps_dec -> u2_cur_slice_num = ( ps_cur_slice -> i4_cur_slice_num + 1 ) >> 1 ; ps_dec -> u2_cur_slice_num_bits = ( ps_cur_slice -> i4_cur_slice_num + 1 ) >> 1 ; ps_dec -> u2_cur_slice_num_bits = ( ps_cur_slice -> i4_cur_slice_num + 1 ) >> 1 ; ps_dec -> u2_cur_slice_num_bits = ( ps_cur_slice -> i4_cur_slice_num + 1 ) >> 1 ; ps_dec -> u2_cur_slice_num_bits = ( ps_cur_slice -> i4_cur_slice_num + 1 ) >> 1 ; ps_dec -> u2_cur_slice_num_bits = ( ps_cur_slice -> i4_cur_slice_num + 1 ) >> 1 ; ps_dec -> u2_cur_slice_num_bits = ( ps_cur_slice -> i4_cur_slice_num + 1 ) >> 1 ; ps_,0
573,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_iocinfo * karg <S2SV_ModEnd> ; struct mpt_ioctl_iocinfo <S2SV_ModStart> mpt_ioctl_iocinfo * karg <S2SV_ModEnd> ; struct pci_dev <S2SV_ModStart> * pdev ; <S2SV_ModEnd> int port ; <S2SV_ModStart> return PTR_ERR ( karg ) ; if ( karg -> hdr. maxDataSize < data_size ) { printk ( MYIOC_s_ERR_FMT ""%s@%d <S2SV_blank> - <S2SV_blank> ioc%d <S2SV_blank> not <S2SV_blank> found!\\n"", __FILE__, __LINE__, ioc -> name ) ; kfree ( karg ) ; return - ENODEV ; } if ( ( ( iocnum = mpt_verify_adapter ( ioc -> hdr. iocnum, & ioc ) ) < 0 ) || ( ioc == NULL ) ) { printk ( MYIOC_s_ERR_FMT ""%s@%d <S2SV_blank> - <S2SV_blank> ioc%d <S2SV_blank> not <S2SV_blank> found!\\n"", __FILE__, __LINE__, iocnum ) ; kfree ( karg ) ; return - EN",0
574,"<S2SV_ModStart> left == 0 ) { luaL_error ( L, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> offset <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> and <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d."", offset, len ) ; return luaL_error ( L, ""Start <S2SV_blank> offset <S2SV_blank> %d <S2SV_blank> greater <S2SV_blank> than <S2SV_blank> input <S2SV_blank> length <S2SV_blank> %d."", offset, len ) ; } <S2SV_ModStart> left == 0 ) { luaL_error ( L, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d."", offset, len ) ; return luaL_error ( L, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> offset <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> and <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d."", offset, len ) ; return luaL_error ( L, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> offset <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> and <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d."", offset, len ) ; }",0
575,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
576,<S2SV_ModStart> * rq ) <S2SV_ModEnd> { int cpu <S2SV_ModStart> ; u64 irq_time ; if ( rq -> skip_clock_update ) return <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
577,"<S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv",0
578,"<S2SV_ModStart> ; if ( CHECKOVERFLOW ( datao, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( CHECKOVERFLOW ( datao, buf_size, 2 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( CHECKOVERFLOW ( datao, buf_size, 2 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; n -> entries = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnoteDataFuji""",0
579,"<S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"" <S2SV_ModEnd>, proc",0
580,<S2SV_ModStart> dentry * dir <S2SV_ModEnd> ; int dir_has_key <S2SV_ModStart> 0 ; } <S2SV_ModEnd> spin_lock ( & <S2SV_ModStart> dir_has_key = ( d_inode ( dir ) -> i_crypt_info <S2SV_ModEnd>!= NULL ),1
581,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> unbind_ports ( void <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> CRYPTO_THREAD_write_lock ( stunnel_locks <S2SV_ModStart> LOCK_SECTIONS ] ) ; while ( service_options. next ) { unsigned i ; SERVICE_OPTIONS * opt ; opt = service_options. next ; service_options. next = NULL ; service_free ( & service_options ) ; while ( opt ) { unsigned i = opt -> local_addr. num ; ++ i ) unbind_port ( opt, i ) ; if ( opt -> exec_name && opt -> connect_addr. names ) { opt -> option. retry = 0 ; } if ( opt -> ctx ) SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; s_log ( LOG_DEBUG, ""Service <S2SV_blank> [%s] <S2SV_blank> closed"", opt -> servname ) ; } else if ( opt -> ctx ) SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; s_log ( LOG_DEBUG,",0
582,<S2SV_ModStart> ; context. curX = i -> posX ; context. curY = i -> posY ; # ifdef NGIFLIB_HIGHBITDEPTH if ( ( i -> parent -> mode & NGIFLIB_MODE_HIGHBITDEPTH ) && ( ( i -> parent -> mode & NGIFLIB_MODE_HIGHBITDEPTH )!= ( i -> parent -> mode & NGIFLIB_MODE_HIGHBITDEPTH ) && ( ( i -> parent -> mode & NGIFLIB_MODE_HIGHBITDEPTH )!= ( i -> parent -> mode & NGIFLIB_MODE_HIGHBITDEPTH ) ) { if ( ( i -> parent -> mode & NGIFLIB_MODE_HIGHBITDEPTH ) && ( ( i -> parent -> mode & NGIFLIB_MODE_HIGHBITDEPTH )!= ( i -> parent -> mode & NGIFLIB_MODE_HIGHBITDEPTH ) && ( ( i -> parent -> mode & NGIFLIB_MODE_HIGHBITDEPTH )!= ( i -> parent -> mode & NGIFLIB_MODE_HIGHBITDEPTH ) ) ) { if ( ( i -> parent -> mode & NGIFLIB_MODE_HIGHBITDEPTH ),0
583,<S2SV_ModStart> 4 ) ; RAnalOp <S2SV_ModEnd> next_op ; avr_op_analyze,0
584,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> ) break ; if ( info. scale!= ( Quantum * ) NULL ) info. scale = ( Quantum * ) RelinquishMagickMemory ( info. scale ) ; if ( data!= ( unsigned char * ) NULL ) data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; if ( graymap!= ( int * ) NULL ) graymap = ( int * ) RelinquishMagickMemory ( graymap ) ; if ( redmap!= ( int * ) NULL ) redmap = ( int * ) RelinquishMagickMemory ( redmap ) ; if ( info. scale!= ( Quantum * ) NULL ) info. scale = ( Quantum * ) RelinquishMagickMemory ( info. scale ) ; if ( info. scale!= ( Quantum * ) NULL ) info. scale = ( Quantum * ) RelinquishMagickMemory ( info. scale ) ; if ( info. scale!= ( Quantum * ) NULL ) info. scale = ( Quantum * )",0
585,"<S2SV_ModStart> void ) { if ( strchr ( mnemonic, '\\0' ) ) { mnemonic = strchr ( mnemonic, '\\0' ) ; } else if ( strchr ( mnemonic, '\\0' ) ) { mnemonic = strchr ( mnemonic, '\\0' ) ; if ( strlen ( mnemonic ) > 0 && strchr ( mnemonic, '\\0' ) ) { mnemonic = strchr ( mnemonic, '\\0' ) ; } else if ( strlen ( mnemonic ) > 0 && strchr ( mnemonic, '\\0' ) ) { mnemonic = strchr ( mnemonic, '\\0' ) ; } else if ( strchr ( mnemonic, '\\0' ) ) { mnemonic = strchr ( mnemonic, '\\0' ) ; if ( strlen ( mnemonic ) > 0 && strchr ( mnemonic, '\\0' ) ) { mnemonic = strchr ( mnemonic, '\\0' ) ; } else { mnemonic [ strlen ( mnemonic ) - 1 ] = '\\0' ; } }",0
586,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT5 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT7 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT8 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT9 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT10 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT11 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT12 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT13 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT12 <S2SV_ModEnd> )",0
587,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
588,"<S2SV_ModStart> ; if ( ( m = read ( req -> socket, buf, sizeof ( buf ) ) ) < 0 ) { syslog ( LOG_ERR, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"", req -> socket ) ; goto error ; } if ( ( m = read ( req -> socket, buf, sizeof ( buf ) ) < 0 ) { syslog ( LOG_ERR, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"", req -> socket ) ; goto error ; } if ( ( m = read ( req -> socket, buf, sizeof ( buf ) ) < 0 ) { syslog ( LOG_ERR, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"", req -> socket ) ; goto error ; } if ( ( m = read ( req -> socket, buf, sizeof ( buf ) ) < 0 ) { syslog ( LOG_ERR, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"", req -> socket ) ; goto error ; } if ( ( m = read ( req -> socket, buf, sizeof ( buf ) ) < 0 ) { syslog ( LOG_ERR, ""(s=%d) <S2SV_blank> process",0
589,"<S2SV_ModStart> ) { WORD32 st_rps_idx, ai4_num_st_curr_before, u4_num_st_curr_after, u4_num_lt_curr, u4_num_total_curr ; WORD32 ai1_curr_delta_poc_msb_present_flag [ MAX_DPB_SIZE ], ai1_curr_delta_poc_msb_present_flag [ MAX_DPB_SIZE ], ai1_curr_delta_poc_msb_present_flag [ MAX_DPB_SIZE ], u1_curr_delta_poc_msb_present_flag [ MAX_DPB_SIZE ], u1_num_st_curr_before, u1_num_st_curr_after, u1_num_lt_curr, u1_curr_delta_poc_msb_present_flag [ MAX_DPB_SIZE ], ai1_curr_delta_poc_msb_present_flag [ MAX_DPB_SIZE ], u1_curr_delta_poc_msb_present_flag [ MAX_",0
590,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> print_object ( cJSON <S2SV_ModStart> ; while ( child ) { ++ numentries ; child = child -> next ; } if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; memset ( entries, 0, sizeof ( char * ) * numentries ) ; memset ( names, 0, sizeof ( char * ) * numentries ) ; memset ( entries, 0, sizeof ( char * ) * numentries ) ; memset ( names, 0, sizeof ( char * ) * numentries ) ; child = item -> child ; } if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; memset ( names, 0, sizeof ( char * ) * numentries ) ; memset ( names, 0, sizeof ( char * ) * numentries ) ; memset ( entries, 0, sizeof ( char",0
591,"<S2SV_ModStart> int tagval, uint32 <S2SV_ModEnd> * length )",1
592,"<S2SV_ModStart> ; other = rcu_dereference_protected ( sk -> sk_omem_alloc, sock_owned_by_user ( sk ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( rcu_dereference_protected ( sk -> sk_omem_alloc, sock_owned_by_user ( sk ) ) ) <S2SV_ModStart> ; if ( rcu_dereference_protected ( sk -> sk_omem_alloc, sock_owned_by_user ( sk ) ) ) writable = 0 ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> unix_recvq_full ( other <S2SV_ModStart> ) writable = POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; return mask <S2SV_ModEnd> ; } <S2SV_null>",0
593,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sendClean ( outputbuffer ) ;",1
594,<S2SV_ModStart> void exit_io_context ( struct task_struct * task <S2SV_ModEnd> ) { struct <S2SV_ModStart> * ioc ; mutex_lock <S2SV_ModEnd> ( current ) <S2SV_ModStart> ; ioc = task <S2SV_ModEnd> -> io_context ; <S2SV_ModStart> -> io_context ; task <S2SV_ModEnd> -> io_context = <S2SV_ModStart> -> io_context = NULL ; mutex_unlock <S2SV_ModEnd> ( current ) <S2SV_ModStart> task_unlock ( current ) ; if ( atomic_dec_and_test ( & ioc -> nr_tasks ) ) { if ( ioc -> aic && ioc -> aic -> exit ) ioc -> aic -> exit ( ioc -> aic ) ; cfq_exit ( ioc ) ; } <S2SV_ModEnd> if ( atomic_dec_and_test,0
595,<S2SV_ModStart> ret = 0 ; if ( xtregs -> cp0 >= sizeof ( xtregs_coprocessor_t ) ) return - EINVAL,0
596,<S2SV_ModStart> 0 ) { if ( header -> buffer. length < token_wrapper_len + 14 ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } <S2SV_ModEnd> if ( header <S2SV_ModStart> buffer. length > ( token_wrapper_len + 14 ) ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } <S2SV_ModEnd> if ( header <S2SV_ModStart> buffer. length > ( token_wrapper_len + 14 ) ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } ptr = ( unsigned char * ) header -> buffer. value + token_wrapper_len ; signalg |= ( unsigned int ) ( ptr [ 0 ] << 8 ) ; sealalg |= ( unsigned int ) ( ptr [ 1 ] << 8 ) ; if ( ptr [ 2 ]!= 0xFF || ptr [ 3 ]!= 0xFF ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } ptr = ( unsigned char * ) header -> buffer. value + token_wrapper_len ; signalg |= ( unsigned int ) ( ptr [ 0 ] << 8 ) ; sealalg |= ( unsigned int ) ( ptr [ 1 ],0
597,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { vpx_ref_frame_t * frame = ( vpx_ref_frame_t * ) <S2SV_ModEnd> va_arg ( args <S2SV_ModStart> ( args, vpx_ref_frame_t * <S2SV_ModEnd> ) ; if <S2SV_ModStart> NULL ) { VPxWorker * const worker = ctx -> worker ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data0 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data ; FrameWorkerData *",0
598,<S2SV_ModStart> plug ) ; <S2SV_ModEnd> put_ioctx ( ctx,0
599,"<S2SV_ModStart> * info, <S2SV_ModEnd> int rep_quick ) <S2SV_ModStart> (! rep_quick && init_io_cache ( & info -> read_cache, info -> dfile, ( uint ) param -> read_buffer_length, WRITE_CACHE, share -> pack. header_length, MYF ( MY_WME ) ) || init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, WRITE_CACHE, share -> pack. header_length, MYF ( MY_WME ) ) || (! rep_quick && init_io_cache ( & info -> read_cache, info -> dfile, ( uint ) param -> write_buffer_length, WRITE_CACHE, share -> pack. header_length, MYF ( MY_WME ) ) || init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, WRITE_CACHE, share -> pack. header_length, MYF ( MY_WME ) ) || (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint )",0
600,"<S2SV_ModStart> } ; # if uECC_VLI_NATIVE_LITTLE_ENDIAN uECC_word_t * p = ( uECC_word_t * ) signature ; # else uECC_word_t * p = ( uECC_word_t * ) signature ; # endif <S2SV_ModStart> curve ) ; if ( uECC_vli_isZero ( p, num_words ) ) { return 0 ; } carry = regularize_k ( k, tmp, s, curve ) ; if ( uECC_vli_cmp ( curve -> n, k, num_n_words )!= 1 ) { return 0 ; } if (! g_rng_function ) { uECC_generate_random_int ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! uECC_generate_random_int ( tmp, num_n_words ) ) { return 0 ; } uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_",0
601,"<S2SV_ModStart> ; trunc : if ( length < sizeof ( struct nd_rpl_daoack ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|dao-length <S2SV_blank> too <S2SV_blank> short]"" ) ) ; goto trunc ; } <S2SV_ModStart> ; tooshort : if ( length < sizeof ( struct nd_rpl_daoack ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|dao-length <S2SV_blank> too <S2SV_blank> short]"" ) ) ; goto trunc ; }",0
602,"<S2SV_ModStart> ; } else { size_t new_free_total = ( sizeof ( nw_buf * ) * pool -> free_total ) / sizeof ( nw_buf * ) ) ; if ( new_free_total < sizeof ( nw_buf * ) ) { free ( buf ) ; } else { free ( buf ) ; } } else { uint32_t new_free_total = pool -> free_total * 2 ; void * new_arr = pool -> free_arr ; if ( new_arr ) { pool -> free_total = new_free_total * sizeof ( nw_buf * ) ; new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ) ) ; if ( new_arr ) { pool -> free_total = new_free_total * sizeof ( nw_buf * ) ; new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ) ) ; if ( new_arr ) { pool -> free_total = new_free_total ; new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw",0
603,"<S2SV_ModStart> * cp ) { int cval = 0, meta = 0 ; const <S2SV_ModEnd> char hex [ <S2SV_ModStart> = ""00112233445566778899aAbBcCdDeEfF"" ; <S2SV_ModEnd> const char * <S2SV_ModStart> * dp ; <S2SV_ModEnd> if ( * <S2SV_ModStart> == 'x' || * cp == 'X' ) for ( ++ cp ; * cp && ( dp = index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; cp ++ ) cval = ( cval * 16 ) + ( ( int ) ( dp - hex ) / 2 ) ; else if ( * cp == 'o' || * cp == 'O' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp - '0' ) ; else for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 10 ) + ( * cp - '0' ) ; else for ( ; * cp && ( index ( ""0123456789"", *",0
604,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
605,"<S2SV_ModStart> * lined ; l_uint32 pixc, * pixm, * pixg, * pixd ; PROCNAME ( ""pixFewColorsOctcubeQuantMixed"" ) ; pixc = pixFewColorsOctcubeQuant1 ( pixs, level ) ; pixm = pixGetColormap ( pixc ) ; pixg = pixGetColormap ( pixg ) ; pixd = pixGetColormap ( pixd ) ; if ( pixc == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; if ( pixGetDepth ( pixs )!= 32 ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; if ( pixGetDepth ( pixs )!= 32 ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; if ( pixGetDepth ( pixs )!= 32 ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp""",0
606,<S2SV_ModStart> = 256 ; vpx_mse16x16_t <S2SV_ModEnd> vf = vp8_mse16x16 <S2SV_ModStart> = vp8_mse16x16 ; vpx_mse16x16_t <S2SV_ModEnd> vf = vp8_mse16x16 <S2SV_ModStart> = vp8_mse16x16 ; vpx_mse16x16_t <S2SV_ModEnd> vf = vp8_mse16x16 <S2SV_ModStart> vf = vp8_mse16x16 ; vpx_mse16x16_t <S2SV_ModEnd> vf = vp8_mse16x16 <S2SV_ModStart> = vp8_mse16x16 ; vpx_mse16x16_t <S2SV_ModEnd> vf = vp8_mse16x16 <S2SV_ModStart> = vp8_mse16x16 ; vpx_mse16x16_t <S2SV_ModEnd> vf = vp8_mse16x16,0
607,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
608,<S2SV_ModStart> int idx ; unsigned long <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
609,"<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> size = overhead <S2SV_ModStart> = overhead ; if ( bson_size ( bsons [ 0 ] ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } for ( i = 0 ; i < count ; i ++ ) { size += bson_size ( bsons [ i ] ) ; if ( mongo_bson_valid ( conn, bsons [ i ], 1 )!= MONGO_OK ) return MONGO_ERROR ; } for ( i = 0 ; i < count ; i ++ ) { size += bson_size ( bsons [ i ] ) ; if ( mongo_bson_valid ( conn, bsons [ i ], 1 )!= MONGO_OK ) return MONGO_ERROR ; } for ( i = 0 ; i < count ; i ++ ) { size += bson_size ( bsons [ i ] ) ; if ( mongo_bson_valid ( conn, bsons [ i ], 1 )!= MONGO_OK ) return MONGO_ERROR ; }",0
610,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_response ( rdpNego <S2SV_ModStart> state = NEGO_STATE_FAIL ; return FALSE ;,0
611,"<S2SV_ModStart>, target_bits_per_mb ; const double correction_factor = get_rate_correction_factor ( cpi ) ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; i = active_best_quality ; do { const int bits_per_mb_at_this_q = ( int ) vp9_rc_bits_per_mb ( cm -> frame_type, i, correction_factor ) ; if ( bits_per_mb_at_this_q <= target_bits_per_mb ) {",0
612,"<S2SV_ModStart> value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ ; tja1101WritePhyReg ( interface, TJA1101_CONFIG1, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_CONFIG1 ) ; value |= TJA1101_CONFIG1_MII_MODE_AUTO ; tja1101WritePhyReg ( interface, TJA1101_CONFIG1, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_CONFIG1 ) ; value |= TJA1101_CONFIG1_MII_MODE_AUTO ; tja1101WritePhyReg ( interface, TJA1101_CONFIG1, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_CONFIG1 ) ; value |= TJA1101_CONFIG1_MII_MODE_AUTO ; tja1101WritePhyReg ( interface, TJA1101_CONFIG1, value ) ; value = tja1101ReadPhyReg ( interface, T",0
613,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
614,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ;,0
615,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> TX_SIZE tx_size, int up_available, int left_available, int right_available, int plane ) { <S2SV_ModEnd> DECLARE_ALIGNED_ARRAY ( 16 <S2SV_ModStart> uint8_t, left_col, 64 ) ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, above_data, 128 + 16 ) ; uint8_t * const_above_row = above_data + 16 ; const int bs = 4 << tx_size ; if ( plane == 0 ) { frame_width = xd -> cur_buf -> y_width ; frame_height = xd -> cur_buf -> y_height ; } else { frame_width = xd -> cur_buf -> y_width ; frame_height = xd -> cur_buf -> y_height ; } <S2SV_ModStart> + y ; memset <S2SV_ModEnd> ( left_col, <S2SV_ModStart> 64 ) ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + 16 ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + 16 ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + 16 ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + 16 ; memset <S2SV_ModEnd>",0
616,"<S2SV_ModStart> } else { if ( end >= pattern [ current ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> too <S2SV_blank> many <S2SV_blank> patterns\\n"" ) ; goto error ; } else if ( end >= pattern [ current ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> patterns\\n"" ) ; goto error ; } else if ( end >= pattern [ current ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> too <S2SV_blank> many <S2SV_blank> patterns\\n"" ) ; goto error ; } else if ( end >= pattern [ current ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> too <S2SV_blank> many <S2SV_blank> patterns\\n"" ) ; goto error ; } else if ( end >= pattern [ current ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> too <S2SV_blank> many <S2SV_blank> patterns\\n"" ) ; goto error ; } else if ( end >= pattern [ current ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> too <S2SV_blank> many <S2SV_blank> patterns\\n"" ) ; goto error ;",0
617,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ;,1
618,"<S2SV_ModStart> ; BUG_ON (! thresholds ) ; usage = mem_cgroup_usage ( memcg, type == _MEM ) ; __mem_cgroup_threshold ( memcg, type == _MEM ) ; __mem_cgroup_threshold ( memcg, type == _MEMSWAP ) ; size = 0 ; for ( i = 0 ; i < thresholds -> primary -> size ; i ++ ) { if ( thresholds -> primary -> entries [ i ]. threshold < usage ) { kfree ( new ) ; new = NULL ; goto swap_buffers ; } new = thresholds -> spare ; if (! size ) { kfree ( new ) ; new = NULL ; goto swap_buffers ; } size = 0 ; for ( i = 0 ; i < thresholds -> primary -> size ; i ++ ) { if ( thresholds -> primary -> entries [ i ]. eventfd!= eventfd ) size ++ ; } new -> entries [ j ] = thresholds -> primary -> entries [ i ] ; if ( new -> entries [ j ]. threshold < usage ) { ++ new -> current_threshold ; } j ++ ; } <S2SV_ModEnd> } <S2SV_null>",0
619,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ion_handle <S2SV_ModEnd> * ion_handle_get_by_id ( <S2SV_ModStart> lock ) ; handle = ion_handle_get_by_id_nolock ( client, id <S2SV_ModEnd> ) ; mutex_unlock <S2SV_ModStart> lock ) ; mutex_unlock ( & client -> lock ) ;",0
620,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 2 ) ; write_profile <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit ( wb, cm -> profile > PROFILE_1 ) { assert ( cm -> bit_depth > BITS_8 ) ; vpx_wb_write_bit ( wb, cm -> bit_depth - BITS_10 ) ; } write_sync_code ( wb ) ; if ( cm -> profile > PROFILE_1 ) { assert ( cm -> bit_depth > BITS_8 ) ; vpx_wb_write_bit ( wb, cm -> bit_depth - BITS_10 ) ; } vp9_wb_write_literal ( wb, VP9_FRAME_MARKER, 3 ) ; write_profile ( cm -> profile, wb ) ; vpx_wb_write_bit ( wb, cm -> frame_type ) ; vpx_wb_write_bit ( wb, cm -> show_frame ) ; vpx_wb_",0
621,"<S2SV_ModStart> col_nam [ 0 <S2SV_ModEnd> ] = ""\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\n\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\",0
622,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> ; q = osStrchr <S2SV_ModEnd> ( p +,0
623,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ( CHILD ( n, i ) ) == TYPE_COMMENT ) arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case DOUBLESTAR : if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i + 1 ) ) == COMMA ) i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ;",0
624,"<S2SV_ModStart> KEY_FRAME ) { memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ; memset ( xd -> ref_lf_deltas, 0, sizeof ( xd -> ref_lf_deltas ) ) ; memset ( xd -> mode_lf_deltas, 0, sizeof ( xd -> mode_lf_deltas ) ) ; pc -> refresh_golden_frame = 1 ; pc -> copy_buffer_to_gf = 0 ; pc -> copy_buffer_to_arf = 0 ; pc -> ref_frame_sign_bias [ GOLDEN_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ ALTREF_FRAME ] = 0 ; pc -> copy_buffer_to_gf = 0 ; pc -> copy_buffer_to_arf = 0 ; pc -> copy_buffer_to_gf = 0 ; pc -> copy_buffer_to_arf = 0 ; pc -> copy_",0
625,"<S2SV_ModStart> error ; uint16_t n <S2SV_ModEnd> ; uint32_t status <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & n, sizeof ( uint16_t ) ) ; n = letoh16 ( n ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & status, sizeof ( uint32_t ) ) ; status = letoh32 ( status ) ; if ( ( status & RSV_RECEIVED_OK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, ENC624J600_RX_BUFFER_START ) <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, ENC624J",0
626,<S2SV_ModStart> == 0x01 ) { if ( i >= gemsafe_cert_max ) { r = gemsafe_get_cert_len_nolock ( card ) ; if ( r!= SC_ERROR_INTERNAL ) { r = gemsafe_get_cert_len_nolock ( card ) ; if ( r!= SC_ERROR_INTERNAL ) { r = gemsafe_get_cert_len_nolock ( card ) ; if ( r!= SC_ERROR_INTERNAL ) { r = gemsafe_get_cert_len_nolock ( card ) ; if ( r < 0 ) { r = gemsafe_get_cert_len_nolock ( card ) ; if ( r!= SC_ERROR_INTERNAL ) { r = gemsafe_get_cert_len_nolock ( card ) ; if ( r!= SC_ERROR_INTERNAL ) { r = gemsafe_get_cert_len_nolock ( card ) ; if ( r!= SC_ERROR_INTERNAL ) { r = gemsafe_get_cert_len_nolock ( card ) ; if ( r < 0 ) { r = gemsafe_get_cert_len_,0
627,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
628,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv, VALUE klass ) { VALUE content = rb_ary_new ( ) ; xmlSchemaParserCtxtPtr ctx = xmlSchemaNewMemParserCtxt ( argc ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; # ifdef HAVE_XMLSCHEMASETPARSERSTRUCTUREDERRORS xmlSchemaSetParserStructuredErrors ( ctx, Nokogiri_error_array_pusher, ( void * ) errors ) ; # endif schema = xmlSchemaParse ( ctx ) ; if ( NULL == schema ) { xmlErrorPtr error = xmlGetLastError ( ) ; xmlSetStructuredErrorFunc ( NULL, NULL )",0
629,"<S2SV_ModStart> ; config_arg = strchr ( config_line, '\\n' ) ; if ( config_arg ) strcpy ( config_arg, '\\n' ) ; else config_arg = strchr ( config_line, '\\n' ) ; if ( config_arg ) strcpy ( config_arg, '\\n' ) ; else config_arg = strchr ( config_line, '\\n' ) ; if ( config_arg ) strcpy ( config_arg, '\\n' ) ; else config_arg = strchr ( config_line, '\\n' ) ; if ( strchr ( config_arg, '\\n' ) || strchr ( config_arg, '\\n' ) || strchr ( config_arg, '\\n' ) || strchr ( config_arg, '\\n' ) || strchr ( config_arg, '\\n' ) || strchr ( config_arg, '\\n' ) || strchr ( config_arg, '\\n' ) || strchr ( config_arg, '\\n' ) || strchr ( config_arg, '\\n' ) || strchr ( config_arg, '\\n' ) || strchr ( config_arg",0
630,"<S2SV_ModStart> 2 ] ; memcpy <S2SV_ModEnd> ( out, <S2SV_ModStart> 2 ] ; memcpy <S2SV_ModEnd> ( out + <S2SV_ModStart> 2 ] ; memcpy <S2SV_ModEnd> ( out + <S2SV_ModStart> 2 ] ; memcpy <S2SV_ModEnd> ( out +",0
631,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
632,<S2SV_ModStart> fanout_mutex ) ; if ( id >= PACKET_MAX_FANOUT ) { err = - EINVAL ; goto out ; } if ( id >= PACKET_MAX_FANOUT ) { err = - EINVAL ; goto out ; },0
633,<S2SV_ModStart> ; if ( <S2SV_ModEnd> handle -> nmi <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
634,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> utf8s_to_utf16s ( const <S2SV_ModStart> len, wchar_t <S2SV_ModEnd> * pwcs ) <S2SV_ModStart> while ( * s && len <S2SV_ModStart> 0 ) { size = utf8_to_utf32 ( s, len, & u ) ; if ( size < 0 ) return - EINVAL ; if ( u >= PLANE_SIZE ) { u -= PLANE_SIZE ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( u & SURROGATE_BITS ) ) ; } else { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( u & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW",0
635,"<S2SV_ModStart> EPROTONOSUPPORT ) { <S2SV_ModEnd> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure""",0
636,"<S2SV_ModStart> = ksz8851ReadReg ( interface, KSZ8851_RXFHSR ) ; if ( ( status & ( RXFHSR_RXFV | RXFHSR_RXFV_RXCE ) ) == 0 ) { if ( ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE ) ) == 0 ) { if ( ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE ) ) == 0 ) { if ( ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE ) ) == 0 ) { if ( ( status & ( RXFHSR_RXFV | RXFHSR_RXFV ) ) == 0 ) { if ( ( status & ( RXF",0
637,"<S2SV_ModStart> const node * <S2SV_ModEnd> n, asdl_seq <S2SV_ModStart>, asdl_seq * <S2SV_ModEnd> decorator_seq, int <S2SV_ModStart> is_async ) { identifier name ; arguments_ty args ; expr_ty returns = NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i ), 0 ) ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 1 ) ) == RARROW ) { returns = ast_for_expr ( c, CHILD ( n, name_i + 2 ) ) ; if (! returns ) return NULL ; name_i += 3 ; } if ( TYPE ( CHILD ( n, name_i + 3 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 3 ) ) ; if (! type_comment ) return NULL ; body = ast_for_suite ( c, CHILD ( n, name_i + 4 ) ) ; if (! body ) return NULL ; if (! type_comment ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 5 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE",0
638,"<S2SV_ModStart> int i ; if ( mm -> pgd ) { if ( pgd_none_or_clear_bad ( pgd ) ) goto out ; pgd = NULL ; } if ( pgd_none_or_clear_bad ( pgd ) ) goto out ; pud = pud_offset ( pgd, 0xA0000 ) ; if ( pud_none_or_clear_bad ( pud ) ) goto out ; pmd = pmd_offset ( pud, 0xA0000 ) ; split_huge_page_pmd ( mm, pmd ) ; if ( pmd_none_or_clear_bad ( pmd ) ) goto out ; }",0
639,"<S2SV_ModStart> - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow",0
640,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits <S2SV_ModStart> } \\\n} <S2SV_ModEnd> IndexPacket index ; <S2SV_ModStart> ++ ) { if ( k >= data_size ) break ; <S2SV_ModStart> ++ ) { if ( k >= data_size ) break ; <S2SV_ModStart> ++ ) { if ( k >= data_size ) break ; <S2SV_ModStart> ++ ) { if ( k >= data_size ) break ; <S2SV_ModStart> ++ ) { if ( k >= data_size ) break ; <S2SV_ModStart> ++ ) { if ( k >= data_size ) break ; <S2SV_ModStart> ++ ) { if ( k >= data_size ) break ; <S2SV_ModStart> ++ ) { if ( k >= data_size ) break ; <S2SV_ModStart> ++ ) { if ( k >= data_size ) break ; <S2SV_ModStart> ++ ) { if ( k >= data_size ) break ; <S2SV_ModStart> ++ ) { if ( k >= data_size ) break ; <S2SV_ModStart> ++ ) { if ( k >= data_size ) break ; <S2SV_ModStart> ++ ) { if ( k >= data_size ) break ; },0
641,"<S2SV_ModStart> ) ) { if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; }",0
642,"<S2SV_ModStart> 0 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD if ( ( RAW ( row, col ) = pred [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD if ( checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD if ( checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD if ( checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_",0
643,<S2SV_ModStart> ; if (! nl ) { WARN_ON ( 1 ) ; return - EINVAL ; } <S2SV_ModEnd> param -> flags,0
644,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
645,<S2SV_ModStart> bfqq ) bfq_idle_slice_timer_body <S2SV_ModEnd> ( bfqq ),0
646,<S2SV_ModStart> ; length += <S2SV_ModEnd> PRIMARY_DRAWING_ORDER_FIELD_BYTES [ orderInfo,0
647,<S2SV_ModStart> if (! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( new_type ) ) { if ( ovl_dentry_lower ( old ) -> d_inode == ovl_dentry_lower ( new ) -> d_inode ) goto out ; } else { if (! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) ) { if ( ovl_dentry_lower ( old ) -> d_inode == ovl_dentry_lower ( new ) -> d_inode ) goto out ; } else { if ( ovl_dentry_lower ( old ) -> d_inode == ovl_dentry_lower ( new ) -> d_inode ) goto out ; } else { if (! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) ) { if ( ovl_dentry_lower ( old ) -> d_inode == ovl_dentry_lower ( new ) -> d_inode ) goto out ; } else {,0
648,"<S2SV_ModStart> int plane ; # if CONFIG_VP9_HIGHBITDEPTH switch ( bsize ) { case BLOCK_SIZE_8X8 : # endif vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case BLOCK_SIZE_8X8 : # endif vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case BLOCK_SIZE_8X8 : # if CONFIG_VP9_HIGHBITDEPTH switch ( bsize ) { case BLOCK_SIZE_8X8 : # endif vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case BLOCK_SIZE_8X8 : # endif vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
649,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nonrd_pick_sb_modes ( VP9_COMP <S2SV_ModStart> cpi, const TileDataEnc * tile_data, MACROBLOCK * const x, MACROBLOCKD * const xd <S2SV_ModEnd>, int mi_row <S2SV_ModStart> -> e_mbd ; # if CONFIG_VP9_HIGHBITDEPTH switch ( bsize ) { case BLOCK_SIZE_8X8 : xd -> mi [ 0 ] -> mbmi. sb_type = bsize ; break ; case BLOCK_SIZE_8X8 : xd -> mi [ 0 ] -> mbmi. sb_type = bsize ; break ; case BLOCK_SIZE_8X8 : xd -> mi [ 0 ] -> mbmi. sb_type = bsize ; break ; case BLOCK_SIZE_8X8 : xd -> mi [ 0 ] -> mbmi. sb_type = bsize ; break ; case BLOCK_SIZE_8X8 : xd -> mi [ 0 ] -> mbmi. sb_type = bsize ; break ; case BLOCK_SIZE_8X8 : xd -> mi [ 0 ] -> mbmi. sb_type = bsize ;",0
650,"<S2SV_ModStart> ; * err = MAKE_SUPERBLOCK ( <S2SV_ModEnd> reader. superblock <S2SV_ModStart> reader. superblock ) ; if (! * err ) { hrtf = getHrtf ( & reader, err ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
651,"<S2SV_ModStart> ReadBlobLSBShort ( image ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ReadBlobByte ( image ) ; number_planes = ( MagickSizeType ) <S2SV_ModStart> ReadBlobByte ( image ) ; number_planes = ( MagickSizeType ) <S2SV_ModStart> ReadBlobByte ( image ) ; number_planes_filled = ( MagickSizeType ) <S2SV_ModStart> ReadBlobByte ( image ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ReadBlobByte ( image ) ; number_planes = ( MagickSizeType ) <S2SV_ModStart> ReadBlobByte ( image ) ; number_planes_filled = ( MagickSizeType ) <S2SV_ModStart> ReadBlobByte ( image ) ; number_planes = ( MagickSizeType ) <S2SV_ModStart> ReadBlobByte ( image ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
652,"<S2SV_ModStart> = 1 ; memPtr = malloc ( length * sizeof ( MappedRange ) ) ; if ( memPtr == NULL ) { LOGW ( ""malloc(%d, <S2SV_blank> R, <S2SV_blank> PRIVATE, <S2SV_blank> %d, <S2SV_blank> %d) <S2SV_blank> failed: <S2SV_blank> %s\\n"", ( int ) length, fd, strerror ( errno ) ) ; return - 1 ; }",0
653,<S2SV_ModStart> return __this_address ; if ( be16_to_cpu ( dip -> di_nlink ) > be64_to_cpu ( dip -> di_nlink ) ) return __this_address ; if ( be16_to_cpu ( dip -> di_nlink ) > be64_to_cpu ( dip -> di_nblocks ) ) return __this_address ; if ( be16_to_cpu ( dip -> di_nlink ) > be64_to_cpu ( dip -> di_nblocks ) ) return __this_address ; if ( mode && be32_to_cpu ( dip -> di_nextents ) + be16_to_cpu ( dip -> di_anextents ) > be64_to_cpu ( dip -> di_blocks ) ) return __this_address ; if ( be16_to_cpu ( dip -> di_anextents ) > be64_to_cpu ( dip -> di_blocks ) ) return __this_address ; if ( be16_to_cpu ( dip -> di_nextents ) > be64_to_cpu ( dip -> di_anextents ) ) return __this_address ; if,0
654,"<S2SV_ModStart> VP8_EFLAG_NO_UPD_GF ) && ( ( flags & VP8_EFLAG_NO_UPD_GF ) || ( ( flags & VP8_EFLAG_NO_UPD_ARF ) && ( flags & VP8_EFLAG_FORCE_ARF ) ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME",0
655,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
656,<S2SV_ModStart> event ) ; <S2SV_ModEnd> WARN_ON_ONCE ( swhash <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
657,"<S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) { <S2SV_ModStart> case BGP_VPN_ADDR : if ( len < 2 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_VPN_ADDR : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; }",0
658,"<S2SV_ModStart> res -> outputbuffer, ""</table <S2SV_blank> id=\'status-table\'><tr>"" ""<th <S2SV_blank> width=\'40%%\'>Parameter</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""</th>"" ""</tr>"" ""</table <S2SV_blank> id=\'status-table\'><tr>"" ""<td>Hostfile</td><td>%s</td></tr>"", Run. system -> name ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Controlfile</td><td>%s</td></tr>"", Run. files. control ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Logfile</td><td>%s</td></tr>"", Run. files. log ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Pidfile</td><td>%s</td></tr>"", Run. files. pid ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>State <S2SV_blank> file</",0
659,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
660,"<S2SV_ModStart> ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ) ; strncpy <S2SV_ModEnd> ( tokbuf, <S2SV_ModStart> ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"" ) ; strncpy <S2SV_ModEnd> ( tokbuf, <S2SV_ModStart> ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ) ; strncpy <S2SV_ModEnd> ( tokbuf, <S2SV_ModStart> ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"" ) ; strncpy <S2SV_ModEnd> ( tokbuf, <S2SV_ModStart> ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ) ; strncpy <S2SV_ModEnd> ( tokbuf, <S2SV_ModStart> ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"" ) ; strncpy <S2SV_ModEnd> ( tokbuf, <S2SV_ModStart> ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ) ; strncpy <S2SV_ModEnd> ( tokbuf, <S2SV_ModStart> ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"" ) ; strncpy <S2SV_ModEnd> ( tokbuf, <S2SV_ModStart> ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"" ) ; strncpy <S2SV_ModEnd> ( tokbuf, <S2SV_ModStart> ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ) ; strncpy <S2SV_ModEnd> ( tokbuf, <S2SV_ModStart> ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"" ) ; strncpy <S2SV_ModEnd> ( tokbuf, <S2SV_ModStart>",0
661,"<S2SV_ModStart> iad_num ++ ; if ( iad_num > USB_MAXINTERFACES ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, iad_num, USB_MAXINTERFACES ) ; nintf = USB_MAXINTERFACES ; } else if ( iad_num > USB_MAXINTERFACES ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, USB_MAXINTERFACES ) ; nintf = USB_MAXINTERFACES ; } else if ( iad_num > USB_MAXINTERFACES ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, nalts, USB_MAXINTERFACES ) ; nalts = USB_MAXINTERFACES",0
662,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> card -> user_ctl_count <S2SV_ModStart> MAX_USER_CONTROLS ) return - EINVAL ; access = info -> access == 0? SNDRV_CTL_ELEM_ACCESS_READWRITE : ( info -> access & ( SNDRV_CTL_ELEM_ACCESS_READWRITE | SNDRV_CTL_ELEM_ACCESS_INACTIVE | SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ) ) ; info -> id. numid = 0 ; memset ( & kctl, 0, sizeof ( kctl ) ) ; if ( info -> count < 1 ) return - EINVAL ; access = info -> access == 0? SNDRV_CTL_ELEM_ACCESS_READWRITE : ( info -> access & ( SNDRV_CTL_ELEM_ACCESS_READWRITE | SNDRV_CTL_ELEM_ACCESS_INACTIVE | SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ) ) ; info -> id. numid = 0 ; memset ( & kctl, 0, sizeof ( kctl",0
663,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
664,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; random_ether_addr (,1
665,"<S2SV_ModStart> 16, & sse, x -> mbmode_cost [ xd -> frame_type ] [ mode ] ; if ( error16x16 > INT_MAX ) { error16x16 = INT_MAX ; distortion = vp8_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; rate = x -> mbmode_cost [ xd -> frame_type ] [ mode ] ; } else { distortion = vp8_variance16x16 <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
666,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR4 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR5 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR6 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR4 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR5 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR4 <S2SV_ModEnd> )",0
667,"<S2SV_ModStart> * start ; va_start ( argptr, format ) ; vsnprintf ( start, maxlen, format, argptr ) ; maxlen = sizeof ( psf -> header ) - maxlen ; va_start ( argptr, format ) ; vsnprintf ( start, maxlen, format, argptr ) ; va_end ( argptr ) ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header ) ; <S2SV_ModEnd> return ; }",0
668,<S2SV_ModStart> priv -> alg_priv && ctx -> iface -> destroy <S2SV_ModEnd> ) ctx -> <S2SV_ModStart> -> iface -> destroy <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> alg_priv ) ; if ( ctx -> priv -> iface ) ctx -> priv -> iface = NULL ; ctx -> priv -> name = NULL ; ctx -> name = NULL ; ctx -> priv = NULL ; res = VPX_CODEC_OK ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
669,<S2SV_ModStart> { sf -> <S2SV_ModEnd> adaptive_rd_thresh = 1 <S2SV_ModStart> -> use_square_partition_only = cpi <S2SV_ModEnd> -> frame_is_intra_only ( <S2SV_ModStart> -> less_rectangular_check = cpi <S2SV_ModEnd> -> frame_is_boosted ( <S2SV_ModStart> ( cpi ) <S2SV_ModEnd>? USE_FULL_RD <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
670,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
671,"<S2SV_ModStart> ; int goodsize ; if ( inuse > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) { luaD_reallocstack ( L, goodsize, 0 ) ; } else if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) { luaD_reallocstack ( L, goodsize, 0 ) ; }",0
672,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
673,"<S2SV_ModStart> ; const char <S2SV_ModEnd> * s = <S2SV_ModStart>, * s = STR ( CHILD ( n, 0 ) ) ; int quote = Py_CHARMASK ( * s ) ; char * ch, s_kind [ 3 ] = { 0, 0, 0, 0 } ; char * raw, * ch, * s_kind [ 3 ] = { 0, 0, 0, 0 } ; char * ch, s_kind [ 3 ] = { 0, 0, 0, 0, 0 } ; while ( * raw && * raw!= \'""\' ) { * ch ++ = * raw ++ ; } kind = PyUnicode_FromString ( s_kind ) ; if (! kind ) { return NULL ; } if (! PyErr_ExceptionMatches ( PyExc_UnicodeError ) ) { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF ( type ) ; Py_DECREF ( value ) ; Py_XDECREF ( tback ) ; } <S2SV_ModEnd> return NULL ;",0
674,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> ; } else if ( strcmp ( ""encoding-mode"", option_name ) == 0 ) { res = set_option_encoding_mode ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""layers"", option_name ) == 0 ) { svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_factors ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers-keyframe"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 )",0
675,<S2SV_ModStart> event ) ; <S2SV_ModEnd> WARN_ON_ONCE ( swhash <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
676,"<S2SV_ModStart> ) ; } fprintf ( mvs, ""\\n"" ) ; mb_index = 0 ; fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. uv_mode ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; mb_index = 0 ; fprintf ( mvs, ""Mb <S2SV_blank> ref <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. ref_frame ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; }",0
677,<S2SV_ModStart> self ) { size_t <S2SV_ModEnd> i ; PyObject,1
678,,1
679,"<S2SV_ModStart> ) ) { int mysql_errno = imp_dbh -> pmysql -> errno ; int mysql_error = mysql_error ( imp_dbh -> pmysql ) ; if ( mysql_errno!= 0 ) { do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; return FALSE ; } if ( mysql_errno ( imp_dbh -> pmysql )!= 0 ) { do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; return FALSE ; }",0
680,<S2SV_ModStart> ( flags & ( SOCK_THREAD_FD_READ | SOCK_THREAD_FD_WRITE ) <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & ( SOCK_THREAD_FD_WRITE | SOCK_THREAD_FD_EXCEPTION ) <S2SV_ModEnd> ) ) pthread_mutex_unlock <S2SV_ModStart> ( flags & ( SOCK_THREAD_FD_READ | SOCK_THREAD_FD_WRITE ) <S2SV_ModEnd> ) BTA_JvRfcommWrite ( <S2SV_ModStart> id ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> = 0 ; if ( flags & ( SOCK_THREAD_FD_WRITE | SOCK_THREAD_FD_EXCEPTION ) ) <S2SV_ModStart> ( need_close || ( flags & ( SOCK_THREAD_FD_WRITE | SOCK_THREAD_FD_WRITE ) <S2SV_ModEnd> )!= 0 <S2SV_ModStart>! size ) pthread_mutex_unlock ( & slot_lock ) ; <S2SV_ModEnd> cleanup_rfc_slot ( slot,0
681,"<S2SV_ModStart> struct ieee_802_11_phdr phdr ; if ( len_remain < sizeof ( struct ieee_802_11_phdr ) ) { pr_err ( ""%s: <S2SV_blank> len <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", __func__, len_remain ) ; return ; } <S2SV_ModStart> ampdu_len ) ; if ( len_remain < sizeof ( struct ieee_802_11_phdr ) ) { pr_err ( ""%s: <S2SV_blank> len <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", __func__, len_remain ) ; return ; } <S2SV_ModStart> struct ieee_802_11_phdr phdr ; if ( len_remain < sizeof ( struct ieee_802_11_phdr ) ) { pr_err ( ""%s: <S2SV_blank> len <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", __func__, len_remain ) ; return ; }",0
682,<S2SV_ModStart> ; sh = s_malloc0 <S2SV_ModEnd> ( hdrlen +,0
683,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> < S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> ; UINT32 tempWidth ; tempWidth = ROUND_UP_TO ( context -> width, 8 ) ; ccl = context -> ColorLossLevel ; yplane = context -> priv -> PlaneBuffers [ 0 ] + y * context -> width ; coplane = context -> priv -> PlaneBuffers [ 1 ] + y * context -> width ; cgplane = context -> priv -> PlaneBuffers [ 2 ] + y * context -> width ; aplane = context -> priv -> PlaneBuffers [ 3 ] + y * context -> width ; for ( y = 0 ; y < context -> height ; y ++ ) { src = data + ( context -> height - 1 - y ) * scanline ; yplane = context -> priv -> PlaneBuffers [ 0 ] + y * context -> width ; cgplane = context -> priv -> PlaneBuffers [ 1 ] + y * context -> width ;",0
684,"<S2SV_ModStart> nr_parens ) return ERR_PTR ( - EINVAL ) ; if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } * ( ++ top ) = invert ; continue ; case '!' : if (! is_not ( next ) ) break ; invert =! invert ; continue ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; }",0
685,<S2SV_ModStart> ) { const VP9EncoderConfig <S2SV_ModEnd> * rc = <S2SV_ModStart> = ( ( cpi <S2SV_ModEnd> -> oxcf. <S2SV_ModStart>. starting_buffer_level / <S2SV_ModEnd> 2 ) > <S2SV_ModStart> > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level / <S2SV_ModEnd> 2 ) : <S2SV_ModStart> > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level / <S2SV_ModEnd> 2 ) : <S2SV_ModStart> ; int kf_boost ; if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { kf_boost = ( int ) ( rc -> frames_since_key / ( cpi -> output_framerate / 2 ) ; if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { kf_boost = ( int ) ( kf_boost * rc -> frames_since_key / ( cpi -> output_framerate / 2 ) ) ; } else { kf_boost = ( int ) ( rc -> frames_since_key / ( cpi -> output_framerate / 2 ) ) ; } target = ( ( 16 + kf_boost ) * rc ->,0
686,<S2SV_ModStart> <S2SV_null> <S2SV_null> static tran_low_t <S2SV_ModEnd> read_tx_mode ( vpx_reader <S2SV_ModStart> r ) { tran_low_t <S2SV_ModEnd> tx_mode = vpx_read_literal <S2SV_ModStart> 2 ) ; if ( tx_mode == ALLOW_32X32 ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r ) <S2SV_ModStart> == ALLOW_32X32 ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r ),0
687,"<S2SV_ModStart> : # line 1044 ""re_grammar.y"" { yr_free ( ( ( * yyvaluep ). class_vector ) ) ; } # line 1046 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 1046 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 1045 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 1046 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1046 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1046 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1046 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1046 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 1046 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1046 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1046 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : #",0
688,"<S2SV_ModStart> -> cpi ; MACROBLOCKD * xd = args -> xd ; struct macroblock_plane * p = & cpi -> mb. plane [ plane ] ; struct macroblockd_plane * pd = & xd -> plane [ plane ] ; MB_MODE_INFO * mbmi = & xd -> mi [ 0 ] -> mbmi ; <S2SV_ModStart> 32 ] ; const int16_t * qcoeff = BLOCK_OFFSET ( p -> qcoeff, block ) ; const int segment_id = mbmi -> segment_id ; const int ref = is_inter_block ( mbmi ) ; vpx_prob ( * const counts ) [ COEFF_CONTEXTS ] [ ENTROPY_TOKENS ] = cpi -> fc -> coef_probs [ tx_size ] [ type ] [ ref ] ; vpx_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. fc -> coef_probs [ tx_size ] [ type ] [ ref ] ; unsigned int ( * const eob_branch ) [ COEFF_CONTEXTS ] = cpi -> common. counts. eob_branch [ tx_size ]",0
689,<S2SV_ModStart> ; SrcList * pSrc = pSelect -> pSrc ; if ( pSrc == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; } for ( i = 0 ; i < pSrc -> nSrc ; i ++ ) { struct SrcList_item * pItem = & pSrc -> a [ i ] ; if ( pItem -> zName == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; } for ( i = 0 ; i < pSrc -> nSrc ; i ++ ) { struct SrcList_item * pItem = & pSrc -> a [ i ] ; if ( pItem -> pTab == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; } for ( i = 0 ; i < pSrc -> nSrc ; i ++ ) { struct SrcList_item * pItem = & pSrc -> a [ i ] ; if ( pItem -> zName == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; } for ( i,0
690,<S2SV_ModStart> shmflg & SHM_RND ) { <S2SV_ModStart> shmflg & SHM_RND ) { if (! ( addr & ( shmlba - 1 ) ) ) { err = - EINVAL ; goto out ; } else { if ( ( addr & ( shmlba - 1 ) ) == ( ( shmlba - 1 ) ) ) { err = - EINVAL ; goto out ; } else { if ( ( addr & ( shmlba - 1 ) ) == ( ( shmflg & SHM_RND ) ) { if ( addr & ( shmlba - 1 ) ) == ( ( shmlba - 1 ) ) ) { err = - EINVAL ; goto out ; } else { if ( ( addr & ( shmlba - 1 ) ) == ( ( shmlba - 1 ) ) ) { err = - EINVAL ; goto out ; } } else { if ( ( addr & ( shmlba - 1 ) ) == ( ( shmlba - 1 ) ) ) { if ( ( addr & ( shmlba - 1 ) ) == ( ( shmlba - 1 ) ) == ( ( shmlba - 1,0
691,"<S2SV_ModStart> ; serv = svc_create ( & cb_info -> program, NFS4_CALLBACK_BUFSIZE, sv_ops ) ; if (! serv ) { printk ( KERN_ERR ""nfs_callback_create_svc: <S2SV_blank> create <S2SV_blank> service <S2SV_blank> failed\\n"" ) ; return ERR_PTR ( - ENOMEM ) ; }",0
692,"<S2SV_ModStart> point, const CurveZZ_p curve ) { PointZZ_p R0, R1 ; mpz_inits ( R0. x, R0. y, R1. x, R1. y, rop -> x, rop -> y, NULL ) ; mpz_init_set ( R1. x, R1. y, point -> x, point -> y, curve ) ; pointZZ_pDouble ( & R0, point, curve ) ; for ( i = dbits - 1 ; i >= 0 ; i -- ) { if ( mpz_tstbit ( scalar, i ) ) { mpz_set ( tmp. x, R0. x ) ; mpz_set ( tmp. y, R0. y ) ; pointZZ_pAdd ( & R0, & R1, curve ) ; mpz_set ( tmp. x, R0. x ) ; mpz_set ( tmp. y, R0. y ) ; pointZZ_pDouble ( & R1, & tmp, curve ) ; } else { mpz_set ( tmp. x, R0. x ) ; mpz_set ( tmp. y",0
693,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
694,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
695,"<S2SV_ModStart> s ) { if ( s < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } ret = <S2SV_ModStart>, 0 ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } ret = send ( sock_fd, buf, s, 0 ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_",0
696,"<S2SV_ModStart> xIter = crm_first_attr <S2SV_ModEnd> ( xml ) <S2SV_ModStart> -> name ; if ( xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ) ) ) ; break",0
697,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> NULL ; return ( SvcInternal_t <S2SV_ModEnd> * ) svc_ctx <S2SV_ModStart> -> internal ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
698,"<S2SV_ModStart> mq_ops ) { list_for_each_entry ( rq, n, running, flush. list ) { unsigned int seq = blk_flush_cur_seq ( rq ) ; BUG_ON ( seq!= REQ_FSEQ_PREFLUSH && seq!= REQ_FSEQ_POSTFLUSH ) ; queued |= blk_flush_complete_seq ( rq, fq, seq, error ) ; }",0
699,"<S2SV_ModStart> s ) { uint8 length ; struct stream packet = * s ; <S2SV_ModStart> length ) ; if (! s_check ( s ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> consume <S2SV_blank> domain <S2SV_blank> params <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; return RD_FALSE ; } <S2SV_ModStart> length ) ; if (! s_check ( s ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> consume <S2SV_blank> domain <S2SV_blank> params <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
700,"<S2SV_ModStart> ) ) { zval tmp ; INIT_PZVAL_ARRAY ( & tmp, params ) ; fprintf ( stderr, ""params <S2SV_blank> = <S2SV_blank> "" ) ; zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; Z_ADDREF_PP ( tmp ) ; Z_ADDREF_PP ( tmp ) ; Z_ADDREF_PP ( tmp ) ; Z_ZVAL ( tmp ) ; array_init ( tmp ) ; add_assoc_zval_ex ( tmp, ZEND_STRS ( ""name"" ), * ptr ) ; Z_ADDREF_PP ( tmp ) ; Z_ADDREF_PP ( tmp ) ; Z_ADDREF_PP ( tmp ) ; Z_ADDREF_PP ( tmp ) ; Z_ADDREF_PP ( tmp ) ; Z_ADDREF_PP ( tmp ) ; Z_ADDREF_PP ( tmp ) ; Z_ADDREF_PP ( tmp ) ; array_init ( tmp ) ; Z_ADDREF_PP ( tmp ) ; Z_ADDREF_PP ( tmp ) ; Z_ADDREF_PP ( tmp ) ;",0
701,<S2SV_ModStart> only_420 ) { <S2SV_ModEnd> int ret ; <S2SV_ModStart> -> vpx_bps = ( _y4m -> vpx_fmt == VPX_IMG_FMT_I420 )? 1 : 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> vpx_bps = ( _y4m -> vpx_fmt == VPX_IMG_FMT_I420 )? 1 : 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt = ( _y4m -> vpx_fmt == VPX_IMG_FMT_I420 )? 1 : 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt == VPX_IMG_FMT_I420 ) { <S2SV_ModStart> -> chroma_bps = ( _y4m -> vpx_fmt == VPX_IMG_FMT_I420 )? 1 : 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> vpx_fmt = ( <S2SV_ModStart> -> vpx_bps = ( _y4m -> vpx_fmt == VPX_IMG_FMT_I420 )? 1 : 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> vpx_fmt == VP,0
702,"<S2SV_ModStart> obj * otmp ; if ( strlen ( buf ) >= sizeof ( zeroobj ) ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } otmp = ( struct obj * ) 0 ; if ( otmp == NULL ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; }",0
703,"<S2SV_ModStart> { long long <S2SV_ModEnd> directory_table_end, table_start <S2SV_ModStart> 0 ) return FALSE ; if ( parse_exports_table ( & table_start ) == FALSE ) return FALSE ; <S2SV_ModEnd> if ( read_inode_table <S2SV_ModStart> == FALSE ) return FALSE ; if ( read_fragment_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_",0
704,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct env * <S2SV_ModEnd> createenv ( const <S2SV_ModStart> root ) ; u_int <S2SV_ModEnd> count = 0 <S2SV_ModStart> env -> count = 0 ; if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { struct envnode * node ; size_t len ; char keybuf [ 1024 ] ; node = createnode ( keybuf, eq + 1 ) ; if ( RB_INSERT ( envtree, & env -> root, NULL ) ) { freenode ( node ) ; } else { env -> count ++ ; } } }",0
705,"<S2SV_ModStart> -> seg ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ; vp9_clearall_segfeatures ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vp9_enable_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vpx_enable_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ; vpx_set_segdata ( seg, segment, SEG_LVL_ALT_Q, q",0
706,"<S2SV_ModStart> ; Module_type = make_type ( ""Module"", mod_type, Module_fields, 1 ) ; if (! Module_type ) return 0 ; <S2SV_ModStart> ; Interactive_type = make_type ( ""Interactive"", mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; FunctionDef_type = make_type ( ""FunctionDef"", stmt_type, FunctionDef_fields, 1 ) ; if (! FunctionDef_type ) return 0 ; AsyncFunctionDef_type = make_type ( ""AsyncFunctionDef"", stmt_type, AsyncFunctionDef_fields, 1 ) ; if (! AsyncFunctionDef_type ) return 0 ; ClassDef_type = make_type ( ""ClassDef"", stmt_type, ClassDef_fields, 1 ) ; if (! ClassDef_type )",0
707,"<S2SV_ModStart> O_WRONLY | O_CREAT | O_TRUNC | S_IRUSR | S_IWUSR | S_IWGRP | S_IROTH <S2SV_ModEnd> ) ; if <S2SV_ModStart> } write ( logfile_fd <S2SV_ModEnd>, ""btsnoop\\0\\0\\0\\0\\1\\0\\0\\x3\\xea"",",0
708,<S2SV_ModStart> ; if ( ++ ( context -> curY <S2SV_ModEnd> >= p -> <S2SV_ModStart> ; if ( ++ ( context -> curY <S2SV_ModEnd> >= p -> <S2SV_ModStart> ; if ( ++ ( context -> curY <S2SV_ModEnd> >= p -> <S2SV_ModStart> ; if ( ++ ( context -> curY <S2SV_ModEnd> >= p -> <S2SV_ModStart> ; if ( ++ ( context -> curY <S2SV_ModEnd> >= p -> <S2SV_ModStart> ; if ( ++ ( context -> curY <S2SV_ModEnd> >= p -> <S2SV_ModStart> ; if ( ++ ( context -> curY <S2SV_ModEnd> >= p -> <S2SV_ModStart> ; if ( ++ ( context -> curY <S2SV_ModEnd> >= p -> <S2SV_ModStart> ; if ( ++ ( context -> curY <S2SV_ModEnd> >= p -> <S2SV_ModStart> ; if ( ++ ( context -> curY <S2SV_ModEnd> >= p -> <S2SV_ModStart> ; if ( ++ ( context -> curY <S2SV_ModEnd> >= p -> <S2SV_ModStart> ; if ( ++ ( context -> curY <S2SV_ModEnd> >= p -> <S2SV_ModStart> ; if ( ++ ( context -> curY <S2SV_ModEnd> >= p -> <S2SV_ModStart> ; if ( ++ ( context -> curY <S2SV_ModEnd> >= p -> <S2SV_ModStart> ; if ( ++ ( context -> curY <S2SV_ModEnd> >= p -> <S2SV_ModStart> ; if ( ++ ( context -> curY <S2SV_ModEnd> >= p -> <S2SV_ModStart> ; if ( ++ ( context -> curY <S2SV_ModEnd> >= p,0
709,<S2SV_ModStart> ) ; } ++ x -> ymode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ;,0
710,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> atomicio ( read <S2SV_ModStart> remin, & stb, sizeof ( stb ) )!= sizeof ( stb ) ) { run_err ( ""unexpected <S2SV_blank> <newline>"" ) ; exit ( 1 ) ; } if ( <S2SV_ModEnd> atomicio ( read <S2SV_ModStart> remin, & stb, sizeof ( stb ) )!= sizeof ( stb ) ) { run_err ( ""unexpected <S2SV_blank> <newline>"" ) ; exit ( 1 ) ; } if ( <S2SV_ModEnd> atomicio ( read <S2SV_ModStart> remin, & stb, sizeof ( stb ) )!= sizeof ( stb ) ) { run_err ( ""unexpected <S2SV_blank> <newline>"" ) ; exit ( 1 ) ; } if ( <S2SV_ModEnd> atomicio ( read <S2SV_ModStart> remin, & stb, sizeof ( stb ) )!= sizeof ( stb ) ) { run_err ( ""unexpected <S2SV_blank> <newline>"" ) ; exit ( 1 ) ; } if ( <S2SV_ModEnd> atomicio ( read <S2SV_ModStart> remin, & stb, sizeof ( stb ) )!= sizeof ( stb ) ) { run_err ( ""unexpected <S2SV_blank> <",0
711,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart> * s, * <S2SV_ModEnd> t, * <S2SV_ModStart> * s, * <S2SV_ModEnd> t, * <S2SV_ModStart> * t, * StartClean, * <S2SV_ModEnd> argbuf = 0 <S2SV_ModStart> = outputbuffer ; if ( * s == '0' && s [ 1 ] == '[' ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf ( outfile, ""%s"", outputbuffer ) ; return ( 0 ) ; } if ( * s == '0' && s [ 1 ] == ']' ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf ( outfile, ""%s"", outputbuffer ) ; return ( 0 ) ; } else { fprintf ( stderr, ""%s: <S2SV_blank> Illegal <S2SV_blank> request <S2SV_blank> in <S2SV_blank> identification <S2SV_blank> string <S2SV_blank>",0
712,"<S2SV_ModStart> segs ) { <S2SV_ModEnd> u32 hash, <S2SV_ModStart> ; net_get_random_once ( <S2SV_ModEnd> & ip_idents_hashrnd, <S2SV_ModStart> ( ip_idents_hashrnd ) ) ; hash = jhash_3words ( ( __force u32 ) iph -> daddr, ( __force u32 ) iph -> saddr, ( __force u32 ) iph -> protocol ^ net_hash_mix ( net ), ip_idents_hashrnd ) ; id = ip_idents_reserve ( hash, segs ) ; iph -> id = htons ( id ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
713,"<S2SV_ModStart> expr_ty step ; lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lower, & tmp ) { if ( tmp == NULL ) goto failed ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_upper, & tmp ) { int res ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( lookup_attr_id ( obj, & PyId_step, & tmp ) ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { step = NULL ; } * out = Slice ( lower, upper, step, arena ) ; if ( * out == NULL ) goto failed ; return 0 ; } isinstance = lookup_attr_id ( obj, & PyId",0
714,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs ) <S2SV_ModStart> * probs ) { vpx_write_token <S2SV_ModEnd> ( w,",0
715,"<S2SV_ModStart> ( setpwnam ( ctl <S2SV_ModEnd>, ""Finger <S2SV_blank> information <S2SV_blank> *NOT* <S2SV_blank> changed. <S2SV_blank> <S2SV_blank> Try <S2SV_blank> again <S2SV_blank> later.\\n"" )",0
716,"<S2SV_ModStart> int err ; list_for_each_entry ( iter, & alink -> dscp_map, list ) { u32 cmask ; <S2SV_ModStart> ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; err = - EOPNOTSUPP ; goto err_delete ; } if ( iter -> handle == knode -> handle ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; err = - EOPNOTSUPP ; goto err_delete ; } cmask = iter -> mask & mask ; if ( ( iter -> val & cmask ) == ( val & cmask ) && iter -> band!= knode -> res -> classid ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; err = - EOPNOTSUPP ; goto err_delete ; } }",0
717,"<S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; } if ( stream -> config. stats_fn ) { if (! stats_open_file ( & stream -> stats, stream -> config. stats_fn, pass ) ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; } else { if (! stats_open_mem ( & stream -> stats, pass ) ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; } if ( stream -> config. stats_fn ) { if (! stats_open_file ( & stream -> stats, stream -> config. stats_fn, pass ) ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; } else { if (! stats_open_mem ( & stream -> stats, pass ) ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; } stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> cx_time = 0 ; stream -> nbytes = 0 ; stream -> frames_out = 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
718,"<S2SV_ModStart> new_data_len ) ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; g_autoptr ( GOutputStream ) out_stream = g_strdup_printf ( ""%s"", tmpfile_name ) ; g_auto ( GStrv ) groups = NULL ; g_auto ( GString ) new_exec = g_strdup_printf ( ""%s"", tmpfile_name ) ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto",0
719,"<S2SV_ModStart> data_end ) { const <S2SV_ModStart> tile_col ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; const int last_tile = tile_row == tile_rows - 1 && tile_col == tile_cols - 1 ; const size_t size = get_tile ( data_end, last_tile, & cm -> error, & data ) ; TileBuffer * const buf = & tile_",0
720,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static VP9Decoder * <S2SV_ModEnd> vp9_decoder_create ( const <S2SV_ModStart> ) { VP9Decoder * const pbi = vpx_memalign ( 32, sizeof ( * pbi ) ) ; VP9_COMMON * const cm = pbi? pbi -> common : NULL ; if (! pbi ) return NULL ; vpx_zero ( * pbi ) ; if ( setjmp ( cm -> error. setjmp ) ) { cm -> error. setjmp = 0 ; vp9_decoder_remove ( pbi ) ; return NULL ; } cm -> error. setjmp = 1 ; vpx_initialize_dec ( ) ; vpx_rtcd ( ) ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; cm -> oxcf = * oxcf ; cm -> ready_for_new_data = 1 ; vp9_init_dequantizer ( cm ) ; cm -> error. setjmp = 0 ; vpx_worker_init ( & pb",0
721,"<S2SV_ModStart> -> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; s -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { <S2SV_ModStart> -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; s -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } if (! s -> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; s -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
722,"<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> -> opt ; rcu_read_lock ( ) ; opt = rcu_dereference_protected ( req_inet -> inet_opt, sock_owned_by_user ( req ) ) ; if ( opt == NULL || opt -> opt. <S2SV_ModStart> ) return ; rcu_read_unlock ( ) ;",0
723,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> tree2tok ( struct <S2SV_ModStart> { const vpx_tree_index <S2SV_ModEnd> j = tree <S2SV_ModStart> ++ ] ; if ( j <= 0 ) { tokens [ - j ]. value = v ; tokens [ - j ]. len = l ; } else { tokens [ - j ]. len = l ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
724,"<S2SV_ModStart> ; if ( ( flags & VP8_EFLAG_NO_REF_LAST ) && ( flags & VP8_EFLAG_NO_REF_GF ) && ( flags & VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP9_ALT_FLAG ; vp9_use_as_reference ( ctx -> cpi, ref ) ; } if ( flags & ( VP8_EFLAG_NO_UPD_LAST | VP8_EFLAG_NO_UPD_GF | VP8_EFLAG_NO_UPD_ARF ) ) { int upd = 7 ; if ( flags & VP8_EFLAG_NO_UPD_LAST ) upd ^= VP9_LAST_FLAG ; if ( flags & V",0
725,"<S2SV_ModStart> 0 ) { if (! get_tag ( asn1, len, & t, & contents, & clen, & asn1, & len ) ) goto error ; if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } seq = ( char * ) seq + count * elemtype -> size ; elem = ( char * ) seq + count * elemtype -> size ; memset ( elem, 0, elemtype -> size ) ; if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } newseq = realloc ( seq, ( count + 1 ) * elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; } seq = newseq ; elem = ( char * ) seq + count * elemtype -> size ; memset ( elem, 0, elemtype -> size ) ; memset ( elem, 0, elemtype -> size ) ; ret = decode_atype ( & t, contents, clen, elemtype, elem ) ; if ( ret ) goto error ;",0
726,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> const __m128i k__cospi_p01_p31 = pair_set_epi16 ( cospi_1_64, cospi_31_64 ) ; const __m128i k__cospi_p31_m01 = pair_set_epi16 ( cospi_1_64, - cospi_31_64 ) ; const __m128i k__cospi_p05_p27 = pair_set_epi16 ( cospi_5_64, - cospi_5_64 ) ; const __m128i k__cospi_p27_m05 = pair_set_epi16 ( cospi_27_64, - cospi_27_64 ) ; const __m128i k__cospi_p23_m23 = pair_set_epi16 ( cospi_23_64, - cospi_23_64 ) ; const __m128i k__cospi_p17_p15 = pair_set_epi16 ( cospi_17_64, cospi_15_64",0
727,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> frame_max_bits ( const <S2SV_ModStart> ) rc -> avg_frame_bandwidth <S2SV_ModEnd> * oxcf ->,0
728,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
729,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_superblock ( VP9_COMP <S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart>, int mi_row, int mi_col, BLOCK_SIZE bsize ) { VP9_COMMON * const cm = & cpi -> common ; MACROBLOCKD * const xd = & td -> e_mbd ; <S2SV_ModStart> x = & td <S2SV_ModEnd> -> mb ; <S2SV_ModStart> -> select_txfm_size && mbmi -> sb_type >= BLOCK_8X8 && cpi -> oxcf. aq_mode!= COMPLEXITY_AQ && cpi -> oxcf. aq_mode!= CYCLIC_REFRESH_AQ && cpi -> sf. allow_skip_recode <S2SV_ModEnd> ; x -> <S2SV_ModStart> -> skip_recode =! x -> select_txfm_size && x -> select_txfm_size && cpi -> oxcf. aq_mode!= CYCLIC_REFRESH_AQ && cpi -> sf. allow_skip_recode ; x -> skip_optimize = ctx -> is_coded ; ctx -> is_coded =",0
730,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] =,0
731,"<S2SV_ModStart> range_max ) { int position, zeroes, i, j ; char bits [ 65 ] ; if ( ctx -> trace_enable ) position = get_bits_count ( gbc ) ; if ( position < 0 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits1 ( gbc ) ) { bits [ i ++ ]",0
732,"<S2SV_ModStart> case EXIT_REASON_NMI_WINDOW : if ( kvm_read_guest_cached ( vcpu -> kvm, & vmx -> nested. nmi_cached, & vmx -> nested. nmi_cached ) < 0 ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> nested <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmx -> nested. nmi_cached ) ; return 1 ; } else if ( kvm_read_guest_cached ( vcpu -> kvm, & vmx -> nested. nmi_cached, & vmx -> nested. nmi_cached ) < 0 ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> nested <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmx -> nested. nmi_cached ) ; return 0 ; } else if ( kvm_read_guest_cached ( vcpu -> kvm, & vmx -> nested. nmi_cached, & vmx -> nested. nmi_cached ) < 0 ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> nested <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n",0
733,"<S2SV_ModStart> else if ( strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> else if ( strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> else if ( strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> else if ( strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"",",0
734,"<S2SV_ModStart> -> http_contentlen. ptr = NULL, packet -> http_contentlen.",0
735,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
736,"<S2SV_ModStart> ++ r ; if ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) > entries ) { r = ( int ) floor ( pow ( ( float ) r + 1, dim ) ) ; if ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) > entries ) { r = ( int ) floor ( pow ( ( float ) r + 1, dim ) ) ; if ( ( int ) floor ( pow ( ( float ) r, dim ) ) > entries ) { r = ( int ) floor ( pow ( ( float ) r + 1, dim ) ) ; } else { r = ( int ) floor ( pow ( ( float ) r, dim ) ) ; if ( ( int ) floor ( pow ( ( float ) r + 1, dim ) > entries ) { r = ( int ) floor ( pow ( ( float ) r + 1, dim ) ) ; if ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) { r = ( int ) floor ( pow ( ( float ) r + 1, dim ) ) ; } else { r = ( int ) floor ( pow ( ( float ) r, dim )",0
737,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> x ), MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> ), exception ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; c0 = ReadBlobLSBShort ( image ) ; c1 = ReadBlobLSBShort ( image ) ; bits = ReadBlobLSBLong ( image ) ; CalculateColors ( c0, c1, & colors, MagickFalse ) ; for ( j = 0 ; j < 4 ; j ++ ) { if ( ( x + j ) < ( ssize_t ) dds_info -> width ) { SetPixelRed ( q, ScaleCharToQuantum ( colors. r [ code ] ) ) ; SetPixelGreen ( q, ScaleCharToQuantum ( colors. g [ code ] ) ) ; SetPixelBlue ( q, ScaleCharToQuantum ( colors. b [ code ] ) ) ; SetPixelOpacity ( q, ScaleCharToQuantum ( colors. a [ code ] ) ) ; q ++ ; } } if ( SyncAuthenticPixels ( image, exception ) == MagickFalse ) return MagickFalse ;",0
738,"<S2SV_ModStart> drop ; } iph = ip_hdr ( skb ) ; if (! opt ) goto inhdr_error ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> optlen < sizeof ( struct iphdr ) ) ) goto inhdr_error ; if ( unlikely ( opt -> srr ) ) { struct in_device * in_dev = __in_dev_get_rcu ( dev ) ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop ; if ( opt -> srr ) { struct in_device * in_dev = __in_dev_get_rcu ( in_dev ) ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop ; if ( opt -> srr ) { struct in_device * in_dev = __in_dev_get_rcu ( dev ) ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE (",0
739,<S2SV_ModStart> length ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY (,0
740,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
741,"<S2SV_ModStart> cfg ) { memset ( cfg, 0, sizeof ( cfg_t ) ) ; for ( i = 0 ; i < argc ; i ++ ) { if ( strncmp ( argv [ i ], ""help="", 12 ) == 0 ) sscanf ( argv [ i ], ""help=%u"", & cfg -> help ) ; for ( i = 0 ; i < argc ; i ++ ) { if ( strcmp ( argv [ i ], ""help="", 12 ) == 0 ) sscanf ( argv [ i ], ""help=%u"", & cfg -> help ) ; for ( i = 0 ; i < argc ; i ++ ) { if ( strcmp ( argv [ i ], ""help="", 12 ) == 0 ) sscanf ( argv [ i ], ""help=%u"", & cfg -> help ) ; for ( i = 0 ; i < argc ; i ++ ) { if ( strcmp ( argv [ i ], ""help="", 12 ) == 0 ) sscanf ( argv [ i ], ""help=%u"", & cfg -> help ) ; for ( i = 0 ; i < argc ; i ++ ) { if (",0
742,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; sendClean ( outputbuffer ) ;",1
743,"<S2SV_ModStart> ; WLog_VRB ( AUTODETECT_TAG <S2SV_ModEnd>, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" )",0
744,<S2SV_ModStart> ; # endif # if CONFIG_TEMPORAL_DENOISING if ( cpi -> oxcf. bit_depth > ( cpi -> oxcf. bit_depth - 1 ) ) { # if CONFIG_TEMPORAL_DENOISING if ( ( cpi -> oxcf. bit_depth > ( cpi -> oxcf. bit_depth - 1 ) )!= ( cpi -> oxcf. bit_depth - 1 ) ) { # endif # if CONFIG_TEMPORAL_DENOISING if ( cpi -> oxcf. bit_depth > ( cpi -> oxcf. bit_depth - 1 ) ) { # if CONFIG_TEMPORAL_DENOISING if ( cpi -> oxcf. bit_depth > ( cpi -> oxcf. bit_depth - 1 ) )!= ( cpi -> oxcf. bit_depth - 1 ) ) { # endif # if CONFIG_TEMPORAL_DENOISING if ( cpi -> oxcf. bit_depth > ( cpi -> oxcf. bit_depth - 1 ) ) { # if CONFIG_TEMPORAL_,0
745,"<S2SV_ModStart> ( pvc ) ; dev = alloc_netdev ( <S2SV_ModEnd> 0, ""pvceth%d"" <S2SV_ModStart> ether_setup ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; } <S2SV_ModEnd> if ( type",0
746,"<S2SV_ModStart> * data ; struct stream packet = * s ; <S2SV_ModStart> ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
747,"<S2SV_ModStart> -> b_multithreaded_rd ) vpx_de_alloc_temp_buffers <S2SV_ModEnd> ( pbi,",0
748,<S2SV_ModStart> { if ( ( <S2SV_ModStart> 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } } else { mtCOVERAGE_TEST_MARKER ( ) ; } xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGN,0
749,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
750,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
751,"<S2SV_ModStart> s ) { uint16 <S2SV_ModEnd> left, top <S2SV_ModStart> int i ; struct stream packet = * s ; <S2SV_ModStart> ) { in_uint16_le ( s, left ) ; in_uint16_le ( s, top ) ; in_uint16_le ( s, right ) ; in_uint16_le ( s, left ) ; in_uint16_le ( s, top ) ; in_uint16_le ( s, right ) ; in_uint16_le ( s, left ) ; in_uint16_le ( s, left ) ; in_uint16_le ( s, top ) ; in_uint16_le ( s, right ) ; in_uint16_le ( s, left ) ; in_uint16_le ( s, bottom ) ; in_uint16_le ( s, width ) ; in_uint16_le ( s, height ) ; in_uint16_le ( s, bpp ) ; Bpp = ( bpp + 7 ) / 8 ; if (! compress ) { int y ; bmpdata = ( uint8 * ) xmalloc ( width * height * Bpp ) ; for ( y = 0 ; y <",0
752,"<S2SV_ModStart> } else { if (! smatch ( option, ""filename"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Missing <S2SV_blank> filename"" ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if ( smatch ( option, ""flags"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""path"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Path <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if ( smatch ( option, ""flags"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""path"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Path <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank>",0
753,"<S2SV_ModStart> tx_size, vpx_coeff_stats <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model <S2SV_ModEnd> coef_probs = cpi <S2SV_ModStart> -> frame_coef_probs [ tx_size ] ; vpx_coeff_count * coef_counts = cpi -> coef_counts <S2SV_ModEnd> ; unsigned int",0
754,"<S2SV_ModStart> } ; assert ( fd >= 0 ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> terminal <S2SV_blank> processing <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; r = loop_write ( fd, ""\\033%G"", 3, false ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> terminal <S2SV_blank> processing <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; r = tcsetattr ( fd, TCSANOW, & tc ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; r = tcsetattr ( fd, TCSANOW, & tc ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8",0
755,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> su3000_frontend_attach ( struct <S2SV_ModStart> -> dev, d -> data <S2SV_ModEnd>, 3, <S2SV_ModStart> -> dev, d -> data <S2SV_ModEnd>, 3, <S2SV_ModStart> -> dev, d -> data <S2SV_ModEnd>, 3, <S2SV_ModStart> -> dev, d -> data <S2SV_ModEnd>, 3, <S2SV_ModStart> -> dev, d -> data <S2SV_ModEnd>, 3, <S2SV_ModStart> -> dev, d -> data <S2SV_ModEnd>, 3, <S2SV_ModStart> -> dev, d -> data <S2SV_ModEnd>, 3, <S2SV_ModStart> -> dev, d -> data <S2SV_ModEnd>, 3, <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; d -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; d -> data <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> -> dev, d -> data <S2SV_ModEnd>, 3, <S2SV_ModStart> -> dev, d -> data <S2SV_ModEnd>, 3, <S2SV_ModStart> -> dev, d -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> -> dev, d -> data <S2SV_ModEnd>, 3, <S2SV_ModStart> -> dev, d -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> -> dev, d -> data <S2SV_ModEnd>, 2, <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; d -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; d -> data <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> -> dev, d",0
756,"<S2SV_ModStart> * iface, <S2SV_ModEnd> vpx_codec_enc_cfg_t * cfg <S2SV_ModStart> VPX_CODEC_INCAPABLE ; else if ( ( flags & ( VPX_CODEC_USE_XMA | VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE",0
757,"<S2SV_ModStart> int stride, <S2SV_ModEnd> int uv_block_size, <S2SV_ModStart> int uv_block_size, int mv_row, int mv_col, tran_low_t <S2SV_ModEnd> * pred, <S2SV_ModStart> const kernel = vpx_get_interp_kernel <S2SV_ModEnd> ( xd -> <S2SV_ModStart> [ 0 ], stride, & pred [ 0 ], 16, & mv, scale, 16, 16, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vpx_build_inter_predictor ( y_mb_ptr, stride, & pred [ 0 ], 16, & mv, scale, 16, 16, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vpx_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, MV_PRECISION_uv, x, y ) ; vpx_build_inter_predictor ( v_mb_ptr, uv_stride, & pred [ 512 ], uv_block_size, & mv,",0
758,"<S2SV_ModStart> = TRUE ; if ( strchr ( buf,'<S2SV_blank>') ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } bufp = find_optparam ( buf ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return",0
759,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> cJSON * <S2SV_ModEnd> cJSON_CreateFloatArray ( double <S2SV_ModStart> ) ; for ( i = 0 ; a && i < count ; ++ i ) { n = cJSON_CreateFloat ( numbers [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } return a ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
760,"<S2SV_ModStart> tk_status ) ; if ( status == NLM_LCK_DENIED_GRACE_PERIOD ) { rpc_delay ( task, NLMCLNT_GRACE_WAIT ) ; goto retry_rebind ; } if ( status == NLM_LCK_DENIED_REBIND_PERIOD ) { rpc_delay ( task, NLMCLNT_GRACE_WAIT ) ; goto retry_unlock ; } if ( status == NLM_LCK_GRANTED ) printk ( KERN_WARNING ""lockd: <S2SV_blank> unexpected <S2SV_blank> unlock <S2SV_blank> status: <S2SV_blank> %d\\n"", status ) ;",0
761,"<S2SV_ModStart>, n ) ; if ( f -> previous_window [ i ] == NULL ) { f -> previous_window [ i ] = 0 ; } else { float * w = f -> previous_window [ i ] ; for ( i = 0 ; i < f -> channels ; ++ i ) for ( j = 0 ; j < n ; ++ j ) f -> channel_buffers [ i ] [ left + j ] = f -> channel_buffers [ i ] [ left + j ] * w [ j ] + f -> previous_window [ i ] [ j ] * w [ n - 1 - j ] ; } prev = f -> previous_length ; f -> previous_length = len - right ; for ( i = 0 ; i < f -> channels ; ++ i ) for ( j = 0 ; j < n ; ++ j ) f -> channel_buffers [ i ] [ left + j ] = f -> channel_buffers [ i ] [ left + j ] * w [ j ] ; for ( i = 0 ; i < f -> channels ; ++ i ) for ( j = 0 ; j < n ; ++ j ) for ( i = 0 ; i < f -> channels ; ++ i ) for ( j",0
762,"<S2SV_ModStart> 4 ) ; size_t <S2SV_ModEnd> num_properties = GETINT32 <S2SV_ModStart> len ) ; if ( a -> num_names > 0 ) { size_t i ; a -> names = CHECKED_XCALLOC ( VarLenData, a -> num_names ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> names [ i ]. len = GETINT32 ( buf + idx ) ; idx += 4 ; a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; } } else { size_t i ; a -> names = CHECKED_XCALLOC ( VarLenData, a -> num_names ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]",0
763,"<S2SV_ModStart> data_end ) { <S2SV_ModEnd> const int aligned_mi_cols <S2SV_ModStart> const cm = ( VP9Decoder * ) cm -> oxcf ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int num_workers = MIN ( pbi -> oxcf. max_threads, ( 1 << 6 ) ) ; TileBuffer tile_buffers [ 1 << 6 ] ; int final_worker = - 1 ; if ( pbi -> num_tile_workers == 0 ) { CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( num_workers * sizeof ( * pbi -> tile_workers ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data2, vpx_malloc ( sizeof ( TileInfo ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker",0
764,"<S2SV_ModStart> + 8 ; while ( ( save = ftell ( ifp ) ) < offset ) { tag = 0x505244 ; fseek ( ifp, 8, SEEK_CUR ) ; high = get2 ( ) ; wide = get2 ( ) ; fseek ( ifp, 1L, SEEK_CUR ) ; imgdata. makernotes. sony. prd_RawBitDepth = ( ushort ) fgetc ( ifp ) ; imgdata. makernotes. sony. prd_ImageWidth = ( ushort ) fgetc ( ifp ) ; imgdata. makernotes. sony. prd_StorageMethod = ( ushort ) fgetc ( ifp ) ; imgdata. makernotes. sony. prd_ImageHeight = ( ushort ) fgetc ( ifp ) ; imgdata. makernotes. sony. prd_ImageWidth = ( ushort ) fgetc ( ifp ) ; imgdata. makernotes. sony. prd_ImageHeight = ( ushort ) fgetc ( ifp ) ; imgdata. makernotes. sony. prd_ImageWidth = (",0
765,"<S2SV_ModStart> -> common ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; vp9_clear_system_state ( ) ; for ( i = ENERGY_MIN ; i <= ENERGY_MAX ; i ++ ) { int qindex_delta, segment_rdmult ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q )",0
766,<S2SV_ModStart> -> error_code ) { vpx_codec_err_t err_detail ; err_detail = <S2SV_ModEnd> error -> has_detail <S2SV_ModStart> -> has_detail? & err_detail : NULL ; return err_detail <S2SV_ModEnd> ; } <S2SV_null>,0
767,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
768,"<S2SV_ModStart> * ps_cur_slice ; pocstruct_t <S2SV_ModEnd> * ps_prev_poc, <S2SV_ModStart> * ps_cur_poc ; memset ( ps_dec -> ps_cur_slice, 0, sizeof ( dec_slice_params_t ) )",0
769,<S2SV_ModStart> ; if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) {,0
770,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ) ),0
771,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> getnum ( const <S2SV_ModStart> int df ) { if (! isdigit ( * * fmt ) ) return df ; else { int a = 0 ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * * fmt ) ) ; } <S2SV_ModEnd> return a ;,0
772,"<S2SV_ModStart> ; markold ( g, g -> allgc, g -> reallyold ) ; markold ( g, g -> finobj, g -> finobjrold ) ; atomic ( L ) ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> reallyold = g -> old ; g -> old = * psurvival ; g",0
773,<S2SV_ModStart> else return - ENODEV <S2SV_ModEnd> ; deb_info (,0
774,"<S2SV_ModStart> ; ( void ) phase <S2SV_ModEnd> ; if ( <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModEnd> memset ( buffer <S2SV_ModStart> buffer ) ; s_write ( c, c -> local_wfd. fd, ssl_ok, sizeof ssl_ok ) ; return NULL ; } <S2SV_ModEnd> s_read ( c <S2SV_ModStart> c -> local_rfd. fd, buffer, sizeof buffer ) ; if ( safe_memcmp ( buffer, ssl_request, sizeof ssl_request ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } s_write ( c, c -> local_wfd. fd, buffer, sizeof buffer ) ; if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; }",0
775,"<S2SV_ModStart> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> cib_tls_signon ( cib_t <S2SV_ModStart> cib -> variant_opaque ; char * server <S2SV_ModEnd> ; int rc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> static struct mainloop_fd_callbacks <S2SV_ModStart> = cib_remote_dispatch ; connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } bzero ( & hints, sizeof ( struct addrinfo ) ) ; hints. ai_flags = AI_CANONNAME ; hints. ai_socktype = SOCK_RAW ; res = getaddrinfo ( server, NULL, & hints, & res ) ; if ( ret_ga ) { crm_err ( ""getaddrinfo: <S2SV_blank> %s"", gai_strerror ( ret_ga ) ) ; close ( sock ) ; return - 1 ; } if ( res -> ai_canonname ) { server = res -> ai_canonname ; } else {",0
776,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; cpi -> gf_bitrate_adjustment = 0 ; cpi -> frames_till_gf_update_due = 0 ; cpi -> gf_overspend_bits = 0 ; cpi -> non_gf_bitrate_adjustment = 0 ; cpi -> temporal_pattern_counter = 0 ; cpi -> temporal_pattern_counter = 0 ; cpi -> temporal_pattern_counter = 0 ; if ( setjmp ( cm -> error. jmp ) ) { cpi -> common. error. setjmp = 1 ; CHECK_MEM_ERROR ( cpi -> mb. ss, vpx_calloc ( sizeof ( search_site ), ( MAX_MVSEARCH_STEPS * 8 ) + 1 ) ) ; vp8_create_common ( & cpi -> common ) ; init_config ( cpi, oxcf ) ; memcpy ( cpi -> base_skip_false_prob, vp8cx_base_skip_false_prob ) ; cpi -> common. current_video_frame = 0 ; cpi -> temporal_pattern_counter = 0",0
777,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MIN, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MIN, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MIN, 1 <S2SV_ModEnd>, regs,",0
778,"<S2SV_ModStart> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x08 ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robust",0
779,"<S2SV_ModStart> ; } } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
780,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_command karg ; <S2SV_ModEnd> MPT_ADAPTER * ioc <S2SV_ModStart> ; if ( copy_to_user ( & karg, & uarg, sizeof ( struct mpt_ioctl_command ) ) ) { printk ( KERN_ERR MYNAM ""%s@%d::mptctl_mpt_command <S2SV_blank> - <S2SV_blank> "" ""Unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> in <S2SV_blank> mpt_ioctl_command <S2SV_blank> struct <S2SV_blank> @ <S2SV_blank> %p\\n"", __FILE__, __LINE__, uarg ) ; return - EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command <S2SV_ModStart> MF ) ; <S2SV_ModEnd> return rc ;",0
781,"<S2SV_ModStart> Image * image <S2SV_ModEnd> ; MagickBooleanType status <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModEnd> if ( image <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModEnd> if ( image <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
782,"<S2SV_ModStart> ; if ( bandno >= JPC_MAXBANDS ) { jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; return - 1 ; } if ( bandno >= JPC_MAXBANDS ) { jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; return - 1 ; } <S2SV_ModStart> ; if ( bandno >= JPC_MAXBANDS ) { jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; return - 1 ; } for ( i = 0 ; i < JPC_MAXBANDS ; i ++ ) { if ( bandno >= JPC_MAXBANDS ) { jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; return - 1 ; } jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; return - 1 ; } jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; return - 1 ; } for ( i = 0 ; i < JPC_MAXBANDS ; ++ i ) { if ( bandno >= JPC_MAXBANDS ) { jas_eprintf ( ""invalid",0
783,"<S2SV_ModStart>, NULL, WEECHAT_STRING_STRIP_LEFT | WEECHAT_STRING_SPLIT_STRIP_RIGHT | WEECHAT_STRING_SPLIT_COLLAPSE_SEPS <S2SV_ModEnd>, 0, <S2SV_ModStart>, NULL, WEECHAT_STRING_STRIP_LEFT | WEECHAT_STRING_STRIP_RIGHT | WEECHAT_STRING_STRIP_RIGHT | WEECHAT_STRING_SPLIT_COLLAPSE_SEPS <S2SV_ModEnd>, 0, <S2SV_ModStart>, NULL, WEECHAT_STRING_STRIP_LEFT | WEECHAT_STRING_SPLIT_STRIP_RIGHT | WEECHAT_STRING_SPLIT_COLLAPSE_SEPS <S2SV_ModEnd>, 0, <S2SV_ModStart>, NULL, WEECHAT_STRING_STRIP_LEFT | WEECHAT_STRING_STRIP_RIGHT | WEECHAT_STRING_STRIP_RIGHT | WEECHAT_STRING_SPLIT_COLLAPSE_SEPS <S2SV_ModEnd>, 0,",0
784,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_reader <S2SV_ModEnd> decode_uniform ( vpx_reader <S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> int v = vpx_read_bit <S2SV_ModEnd> ( r ) <S2SV_ModStart> < m? v : ( v << 1 ) - m + vpx_read_bit <S2SV_ModEnd> ( r )",0
785,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
786,"<S2SV_ModStart>, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> r ) { return vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx <S2SV_ModStart> ] ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
787,"<S2SV_ModStart>! stream ) { <S2SV_ModStart> fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; } <S2SV_ModStart> ; res = vpx_codec_enc_config_default <S2SV_ModEnd> ( global -> <S2SV_ModStart> codec -> interface ( ), & stream -> config. cfg, global -> usage ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. stereo_fmt = STEREO_FORMAT_MONO ; stream -> config. write_webm = 1 ; stream -> ebml. last_pts_ms = - 1 ; stream -> ebml. debug = global -> debug ; stream -> config. cfg. g_lag_in_frames = 0 <S2SV_ModEnd> ; stream ->",0
788,"<S2SV_ModStart> nd_opt_mtu * opm = ( const struct nd_opt_mtu * ) cp ; if ( opm!= NULL ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", opm -> nd_opt_type ), opm -> nd_opt_type ) ) ; goto trunc ; } <S2SV_ModStart> nd_opt_mtu * opm = ( const struct nd_opt_mtu * ) cp ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", opm -> nd_opt_type ), opm -> nd_opt_type ) ) ; opm = ( const struct nd_opt_mtu * ) cp ; if ( opm!= NULL ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", opm",0
789,<S2SV_ModStart> -> root_node = ( RE_NODE * ) yr_malloc ( sizeof ( RE_NODE * ) ) ; if ( * re_ast -> root_node == NULL ) return ERROR_INSUFFICIENT_MEMORY ; ( * re_ast ) -> nodes = yr_malloc ( sizeof ( RE_NODE * ) ) ; if ( ( * re_ast ) -> nodes == NULL ) return ERROR_INSUFFICIENT_MEMORY ; ( * re_ast ) -> nodes = ( RE_NODE * ) yr_malloc ( sizeof ( RE_NODE * ) ) ; if ( * re_ast -> nodes == NULL ) return ERROR_INSUFFICIENT_MEMORY ; ( * re_ast ) -> nodes = yr_malloc ( sizeof ( RE_NODE * ) ) ; if ( ( * re_ast ) -> nodes == NULL ) return ERROR_INSUFFICIENT_MEMORY ; ( * re_ast ) -> nodes = ( RE_NODE * ) yr_malloc ( sizeof ( RE_NODE * ) ) yr_malloc ( sizeof ( RE_NODE * ) ) ; if ( * re_ast -> nodes == NULL ) return ERROR,0
790,"<S2SV_ModStart> ) ) ; if ( key -> key -> key!= NULL ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } <S2SV_ModEnd> ret = var_expand <S2SV_ModStart>, iter -> var_expand_table, & error ) ; if ( ret <= 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> lookup <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", str_c ( path ), error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool,",0
791,<S2SV_ModStart> ; if ( skb -> len < sizeof ( struct nlattr ) ) { kfree_skb ( skb ) ; return 0 ; } <S2SV_ModStart> A ] ; if ( nla -> nla_len > skb -> len ) { kfree_skb ( skb ) ; return 0 ; } <S2SV_ModStart> skb -> len ) { kfree_skb ( skb ) ; return 0 ; } <S2SV_ModEnd> nla = nla_find_nested,0
792,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
793,"<S2SV_ModStart> ""<message <S2SV_blank> type=\'chat\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost\'>"" ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\'>"" ""<body>test <S2SV_blank> carbon <S2SV_blank> from <S2SV_blank> recipient</body>"" ""</forwarded>"" ""</message>"" ""</forwarded>"" ""</message>""",0
794,"<S2SV_ModStart> -> cac_id, serial -> len <S2SV_ModEnd> ) ; SC_FUNC_RETURN",1
795,<S2SV_ModStart> ; tok -> type_comments = 0 ; tok -> type_comments [ 0 ]. type_comments <S2SV_ModStart> = 0 ; tok -> type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_,0
796,<S2SV_ModStart> } if ( av1 -> av1_config ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1 -> av1_config ) ; if ( av1_cfg ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1_cfg ) ; if ( av1_cfg ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1_cfg ) ; if ( av1_cfg ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1_cfg ) ; if ( av1_cfg ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1_cfg ) ; if ( av1_cfg ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1_cfg ) ; if ( av1_cfg ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1_cfg ) ; if ( av1_cfg ) { GF_AV1Config * av1_cfg = AV1,0
797,"<S2SV_ModStart> -> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; s -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { <S2SV_ModStart> -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; s -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } if (! s -> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; s -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
798,<S2SV_ModStart> ; buff [ sizeof ( buff ) - 1 <S2SV_ModStart> ; buff [ sizeof ( buff ) - 1 <S2SV_ModStart> ; buff [ sizeof ( buff ) - 1 <S2SV_ModStart> ; buff [ sizeof ( buff ) - 1 <S2SV_ModStart> ; buff [ sizeof ( buff ) - 1 <S2SV_ModStart> ; buff [ sizeof ( buff ) - 1 <S2SV_ModStart> ; buff [ sizeof ( buff ) - 1 <S2SV_ModStart> ; buff [ sizeof ( buff ) - 1 <S2SV_ModStart> ; buff [ sizeof ( buff ) - 1 <S2SV_ModStart> ; buff [ sizeof ( buff ) - 1 ] = '\\0' ; buff [ sizeof ( buff ) - 1 ] = '\\0' ; buff [ sizeof ( buff ) - 1 ] = '\\0' ; buff [ sizeof ( buff ) - 1 ] = '\\0' ; buff [ sizeof ( buff ) - 1 ] = '\\0' ; buff [ sizeof ( buff ) - 1 ] = '\\0' ; buff [ sizeof ( buff ) - 1 ] = '\\0' ; buff [ sizeof ( buff ) - 1 ] = '\\0' ;,0
799,"<S2SV_ModStart> maxFrameNum ) ; <S2SV_ModEnd> dpb -> maxLongTermFrameIdx <S2SV_ModStart> NO_LONG_TERM_FRAME_INDICES ; dpb -> numRefFrames = MAX ( maxRefFrames, 1 ) ; if ( dpb -> buffer == NULL ) return ( MEMORY_ALLOCATION_ERROR ) ; H264SwDecMemset ( dpb -> buffer, 0, ( MAX_NUM_REF_IDX_L0_ACTIVE + 1 ) * sizeof ( dpbPicture_t ) ) ; for ( i = 0 ; i < dpb -> dpbSize + 1 ; i ++ ) { if ( dpb -> buffer [ i ]. pAllocatedData == NULL ) return ( MEMORY_ALLOCATION_ERROR ) ; dpb -> buffer [ i ]. data = ALIGN ( dpb -> buffer [ i ]. pAllocatedData, 16 ) ; dpb -> buffer [ i ]. data = ALIGN ( dpb -> buffer [ i ]. pAllocatedData, 16 ) ; } for ( i = 0 ; i < dpb -> dpbSize + 1 ; i ++ ) { if ( dpb -> buffer [ i ]. pAllocatedData == NULL ) return ( MEMORY_ALLOCATION_ERROR",0
800,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> OE_RAISE_ERRNO ( OE_EINVAL ) ; if (! addr ) OE_RAISE_ERRNO ( OE_EINVAL ) ; addrlen_out = * addrlen ; if ( addrlen_out > sizeof ( struct oe_sockaddr_storage ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_in > sizeof ( struct oe_sockaddr_storage ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_out > sizeof ( struct oe_sockaddr_storage ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( oe_syscall_getpeername_ocall ( & ret, sock -> host_fd, ( struct oe_sockaddr * ) addr, addrlen_in, addrlen_out )!= OE_OK ) { OE_RAISE_ERRNO ( OE_E",0
801,,1
802,"<S2SV_ModStart> FALSE ; } if ( Stream_GetRemainingLength ( s ) < length ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> TPDU <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; }",0
803,"<S2SV_ModStart> ipv6_pinfo * np = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) )",0
804,"<S2SV_ModStart>, at ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; <S2SV_ModStart> ; uint32_t valign <S2SV_ModEnd> ; uint32_t <S2SV_ModStart> ; uint32_t hdr_",0
805,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> address ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> { } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; usleep <S2SV_ModStart> 5 ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; }",0
806,"<S2SV_ModStart> ""Can\'t <S2SV_blank> allocate <S2SV_blank> %lu <S2SV_blank> bytes <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"", ( unsigned long ) t2p -> tiff_datasize, TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } # ifdef CCITT_SUPPORT if ( t2p -> pdf_compression == T2P_COMPRESS_G4 ) { buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize ) ; if ( buffer == NULL ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> %lu <S2SV_blank> bytes <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"", ( unsigned long ) t2p -> tiff_datasize, TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; }",0
807,"<S2SV_ModStart> new_parent ) { <S2SV_ModEnd> __ptrace_link ( child <S2SV_ModStart>, new_parent, current_cred ( ) <S2SV_ModEnd> ) ; }",1
808,"<S2SV_ModStart> { rc = cib_tls_signon <S2SV_ModEnd> ( cib, <S2SV_ModStart> { rc = cib_tls_signon <S2SV_ModEnd> ( cib, <S2SV_ModStart> { rc = cib_tls_signon <S2SV_ModEnd> ( cib, <S2SV_ModStart> } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> command. session, CRM_OP_REGISTER, NULL, NULL, 0, NULL ) ; crm_xml_add ( hello, F_CIB_CLIENTNAME, name ) ; crm_send_remote_msg ( hello, F_CIB_CLIENTNAME, name ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, 0, NULL ) ; crm_xml_add ( hello, F_CIB_CLIENTNAME, name ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> command. session, CRM_OP",0
809,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
810,"<S2SV_ModStart> } ; int <S2SV_ModEnd> sr = 0 <S2SV_ModStart> bsize ] ; int <S2SV_ModEnd> new_mv_mode_penalty = 256 <S2SV_ModStart> = 256 ; int <S2SV_ModEnd> quart_frm = MIN <S2SV_ModStart> int quart_frm = MIN ( cpi -> common. width, cpi -> common. height ) ; while ( ( quart_frm << sr ) < MAX_FULL_PEL_VAL ) ++ sr ; v_fn_ptr. vf = get_block_variance_fn ( bsize ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_",0
811,<S2SV_ModStart> ntreg_header ) ; <S2SV_ModEnd> h -> ntreg_header <S2SV_ModStart> ntreg_header ) ; <S2SV_ModEnd> h -> ntreg_header <S2SV_ModStart> ntreg_header ) ; <S2SV_ModEnd> h -> ntreg_header <S2SV_ModStart> ntreg_header ) ; <S2SV_ModEnd> h -> ntreg_header <S2SV_ModStart> ntreg_header ) ; <S2SV_ModEnd> h -> ntreg_header <S2SV_ModStart> ntreg_header ) ; <S2SV_ModEnd> h -> ntreg_header <S2SV_ModStart> ntreg_header ) ; <S2SV_ModEnd> h -> ntreg_header <S2SV_ModStart> ntreg_header ) ; <S2SV_ModEnd> h -> ntreg_header <S2SV_ModStart> ntreg_header ) ; <S2SV_ModEnd> h -> ntreg_header <S2SV_ModStart> ntreg_header ) ; <S2SV_ModEnd> h -> ntreg_header <S2SV_ModStart> ntreg_header ) ; <S2SV_ModEnd> h -> ntreg_header <S2SV_ModStart> ntreg_header ) ; <S2SV_ModEnd> h -> ntreg_header <S2SV_ModStart> ntreg_header ) ; <S2SV_ModEnd> h -> ntreg_header <S2SV_ModStart> ntreg_header ) ; <S2SV_ModEnd> h -> ntreg_header,0
812,<S2SV_ModStart> -> reqbody_no_files_limit ; if ( child -> reqbody_limit == NOT_SET ) { merged -> reqbody_limit = ( parent -> reqbody_limit == NOT_SET? parent -> reqbody_limit : child -> reqbody_limit ) ; merged -> reqbody_limit = ( parent -> reqbody_limit == NOT_SET? parent -> reqbody_limit : child -> reqbody_limit ) ; merged -> reqbody_inmemory_limit = ( child -> reqbody_inmemory_limit == NOT_SET? parent -> reqbody_inmemory_limit : child -> reqbody_inmemory_limit ) ; merged -> reqbody_limit = ( child -> reqbody_limit == NOT_SET? parent -> reqbody_limit : child -> reqbody_limit ) ; merged -> reqbody_limit = ( child -> reqbody_limit == NOT_SET? parent -> reqbody_limit : child -> reqbody_limit ) ; merged -> reqbody_no_files_limit = ( child -> reqbody_no_files_limit == NOT_SET? parent -> reqbody_no_files_limit : child -> reqbody_no_files_,0
813,"<S2SV_ModStart> -> msg_name, msg_sys <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> msg_name, msg_sys <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> msg_namelen, msg_sys <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> msg_namelen, msg_sys <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> msg_namelen, msg_sys <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> msg_namelen, msg_sys <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> msg_namelen, msg_sys <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> msg_namelen, msg_compat <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> msg_namelen, msg_compat <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> msg_namelen, msg_compat <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> msg_namelen, msg_compat <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> msg_namelen, msg_compat <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> msg_namelen, msg_compat <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> msg_namelen, msg_compat",0
814,"<S2SV_ModStart>, one, <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; break ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; break ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image",0
815,"<S2SV_ModStart>!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_string ( b, comp -> key, comp -> key_len ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> cipher ) ) )!= 0 || ( r = sshbuf_put_string ( b, comp -> cipher, sizeof ( comp -> cipher ) ) )!= 0 || ( r = sshbuf_put_string ( b, comp -> key, comp -> key_len ) )!= 0 || ( r = sshbuf_put_string ( b, comp -> iv, comp -> iv_len ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> cipher ) ) )!= 0 || ( r = sshbuf_put_string ( b, comp -> key, comp -> key_len ) )!= 0 || ( r = sshbuf_put_string ( b",0
816,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
817,"<S2SV_ModStart> user_data ) { <S2SV_ModEnd> crm_trace ( ""Cleaning <S2SV_blank> up <S2SV_blank> after <S2SV_blank> client <S2SV_blank> disconnect: <S2SV_blank> %s/%s"" <S2SV_ModStart> num_clients ) ; <S2SV_ModEnd> free ( client <S2SV_ModStart> user ) ; <S2SV_ModEnd> crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client""",0
818,"<S2SV_ModStart> * uv ; if ( thread -> twups == NULL ) { thread -> twups = NULL ; continue ; } <S2SV_ModStart> next ) { if (! iswhite ( uv ) ) markvalue ( g, uv -> v ) ; } else { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> v ) ; } else { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> v ) ; }",0
