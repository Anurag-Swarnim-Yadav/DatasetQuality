,raw_predictions,correctly_predicted
0,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
2,,0
3,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
4,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",0
5,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
6,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
7,,0
8,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> vp9_get_frame ( int <S2SV_ModStart> = 0 ; if (! IS_ERR ( vp9_get_frame ( cpi ) ) ) return - ENOMEM <S2SV_ModEnd> ; } <S2SV_null>,0
9,,0
10,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
11,<S2SV_ModStart> == 32 ) { <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_BLOCK_BLOCK_BLOCK ; },0
12,"<S2SV_ModStart> ) ) { if ( length < 2 ) { ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ) ; return ; } <S2SV_ModStart> ) ) ; }",0
13,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int,0
14,<S2SV_ModStart> = 0 ;,0
15,"<S2SV_ModStart> str ) ; strncpy <S2SV_ModEnd> ( str,",0
16,,0
17,,0
18,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
19,<S2SV_ModStart> ( TEMP_FAILURE_RETRY (,0
20,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> cpi2SV_null> <S2SV_null> static int <S2SV_ModEnd> frame_null> <S2SV_null>,0
21,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
22,<S2SV_ModStart> ; r = 0 <S2SV_ModEnd> ; if (,0
23,<S2SV_ModStart> ; int len <S2SV_ModEnd> ; if (,0
24,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
25,,0
26,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
27,<S2SV_ModStart> -> io_data ; <S2SV_ModEnd> if (!,0
28,,0
29,,0
30,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( ctx ->,0
31,<S2SV_ModStart> page ) ; kfree ( page ) ;,0
32,,0
33,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if (,0
34,"<S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd> ) ; }",0
35,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,0
36,"<S2SV_ModStart> ) ; } if ( req_name_get_url ( req, 0 ) ) { rfb_get_get_get ( req, ""url"" ) ; } else if ( req_get_url ( req, ctx ) ) { if ( req_get_http_get_url ( req, ""url"" ) ) { return 0 ; } } else if (",0
37,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( void ) vpx_reader <S2SV_ModEnd> ( void ) <S2SV_ModStart> ( void ) memset <S2SV_ModEnd> ( void ) <S2SV_ModStart> ( void ) ; memset <S2SV_ModEnd> ( void ),0
38,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
39,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
40,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ip_options_rcu <S2SV_ModEnd> * opt =,0
41,"<S2SV_ModStart> ( ndo, ""%s"", rstr <S2SV_ModEnd> ) ) ;",0
42,,0
43,<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd> ) ; if,0
44,<S2SV_ModStart> 0 ) { jas_matind_t jas_matind_t <S2SV_ModEnd> j ; jas_matind_t,0
45,,0
46,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
47,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
48,,0
49,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( addr,0
50,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
51,,0
52,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
53,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
54,<S2SV_ModStart> ; #,0
55,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
56,,0
57,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
58,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { switch",0
59,<S2SV_ModStart> char * dir <S2SV_ModEnd> ; if (,0
60,,0
61,,0
62,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
65,,0
66,"<S2SV_ModStart> char * name, const char * fname <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( fname < 0 ) { PyErr_SetString ( PyExc_TypeError, ""PyObject"" ) ; return NULL ; } else { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> from <S2SV_blank> from <S2SV_blank> string"" ) ; return 0 ; } else { Py_DECREF ( i, & PyId_DECREF <S2SV_ModEnd> ) ; } <S2SV_ModStart> { if (! Py_DECREF <S2SV_ModEnd> ) { Py_DECREF",0
67,,0
68,,0
69,"<S2SV_ModStart> uint16_t length ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> short"" ) ) ) ; return ; }",0
70,,0
71,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
72,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; if (,0
73,<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi ->,0
74,<S2SV_ModStart> return false ;,0
75,<S2SV_ModStart> return 0 ; if (,0
76,"<S2SV_ModStart> ; if ( CHILD ( n0 ) == 0 ) { assert ( CHILD ( CHILD ( CHILD ( n, 1 ), 1 ) ) ; assert ( n0 ) == 0 ) ; assert ( CHILD ( n0 ) == 0 ) ; } else { const char * n = CHILD ( n, 1 ) ; if ( n0 ) == 0 ) { assert ( n0 ) ; } else { const int n = CHILD ( n, 1 ) ; if ( n0 ) == 0 ) { n = CHILD ( n0 ; } else { n = CHILD ( n0 ) ; } else { n = CHILD ( n, 1 ) ; } else if ( n0 ) == CHILD ( n, 1 ) { n, 1 ) ; } else { n = CHILD ( n, 1 ) ; } else if ( CHILD ( n0 ) == 0 ) { n = CHILD ( n, 1 ) ; } else { n = CHILD ( n, 1 ) ; } else if ( CHILD ( n, 1 ) == CHILD ( n, 1 ) ) == CHILD ( n, 1 ) ; } else { n, 1 ) ; } else {",0
77,,0
78,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> int mi_row, <S2SV_ModStart> int mi_row, int mi_col, int mi_row, int mi_cols <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) { if (! xd -> mbmi_cols ) return - ENOMEM ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ( xd ) ) return - ENOMEM <S2SV_ModEnd> ; } <S2SV_null>",0
79,,0
80,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
81,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if (!,0
82,,0
83,,0
84,,0
85,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,,0
89,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
90,,0
91,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
92,,0
93,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
94,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } m -> msg_namelen = 0 ;,0
97,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
98,,0
99,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
100,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( & cpi,0
101,<S2SV_ModStart> ; int ret = - EINVAL ; if (,0
102,"<S2SV_ModStart> } if (! ISOM_DECODE_SIZE ( ISOM_DECODE_SIZE ) ||! ISOM_DECREASE_SIZE ( ISOM_DECODE_SIZE ) ) ||! ISOM_DECREASE_SIZE ( ISOM_DECREASE_SIZE ) ) { ISOM_DECREASE_SIZE ( ISOM_DECREASE_SIZE ) ; break ; } if ( ISOM_DECODE_DECODE_DECREASE_SIZE ( ISOM_DECODE_DECREASE_SIZE ) ||! ISOM_DECREASE_SIZE ( ISOM_DECREASE_SIZE ) ) { ISOM_DECREASE_SIZE ( ISOM_DECREASE_SIZE ( ISOM_SIZE, 1 ) ) ; break ; } if (! ISOM_DECREASE_DECREASE_SIZE ( ISOM_SIZE ) ) { ISOM_DECREASE_SIZE ( ISOM_DECREASE_SIZE, 1 ) ; } if ( ISOM_DECREASE_SIZE ( ISOM_DECREASE_DECREASE_SIZE ( ISOM_DECREASE_SIZE ) ) ||! ISOM_SIZE ( ISOM",0
103,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( ctx ->,0
104,"<S2SV_ModStart> * state = fmode_t fmode <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( state, fmode <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( state, fmode <S2SV_ModEnd> ) ; }",0
105,,0
106,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
107,,0
108,,0
109,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
110,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
111,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
112,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( ctx ->,0
113,"<S2SV_ModStart> ( interface, 1 <S2SV_ModEnd> ) ; }",0
114,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
115,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( ctx ->,0
116,<S2SV_ModStart> goto out ; } <S2SV_ModEnd> if (!,0
117,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
118,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
119,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
120,<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( connection ->,0
121,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
122,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
123,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
124,,0
125,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
126,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
127,"<S2SV_ModStart>, len, len <S2SV_ModEnd> ; if (",0
128,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 1 ] ; tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> 8 ] = ( tran_low_t ) <S2SV_ModStart> 8 ] ; tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_t ) <S2SV_ModStart> 4 ] = ( tran_low_t )",0
129,,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
131,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
132,,0
133,<S2SV_ModStart> ; if ( <S2SV_ModEnd>!= 0 ),0
134,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( connection,",0
136,"<S2SV_ModStart> ( vpx_prob <S2SV_ModEnd> ( p,",0
137,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_data ( int <S2SV_ModStart>, int ) { if (! buf ) return - ENOMEM ; <S2SV_ModStart>, ret ) return - ENOMEM <S2SV_ModEnd> ; } <S2SV_null>",0
138,,0
139,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if (! ( cpi -> flags & YV_FLAG_HIGHBITDEPTH ) ) { return FALSE ; } # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if (! cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { return 0 ; } # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if (! cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { return FALSE ; } # else if CONFIG_VP9_HIGHBITDEPTH if ( flags & YV12_FLAG_HIGHBITDEPTH ) return 0 ; } # if CONFIG_HIGHBITDEPTH ifdef CONFIG_HIGHBITDEPTH if ( flags & YV12_HIGHBITDEPTH ) { ifdef CONFIG_HIGHBITDEPTH if (! is_HIGHBIT,0
140,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
141,,0
142,,0
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
145,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
146,,0
147,,0
148,,0
149,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj,",0
150,,0
151,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
152,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
153,<S2SV_ModStart> ; } } # if CONFIG_VP9_HIGHBITDEPTH if ( <S2SV_ModStart> ( ) ) { # if CONFIG_VP9_HIGHBITDEPTH return NULL ; } # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if (,0
154,,0
155,"<S2SV_ModStart> ; if ( fname <S2SV_ModEnd> ( fname,",0
156,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
157,,0
158,,0
159,"<S2SV_ModStart> ( interface, KSZ8851_IS <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( interface, KSZ8851_IS <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, KSZ8851_ISR ) ) ; if (! <S2SV_ModStart> ( interface, KSZ8851_IS <S2SV_ModEnd> ) ) ) { <S2SV_ModStart> ( interface, KSZ8851_ERR, KSZ8851_IS <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, KSZ8851_IER, KSZ8851_IS <S2SV_ModEnd> ) ) ; return <S2SV_ModStart> ( interface, KSZ8851_IS <S2SV_ModEnd> ) ) ; }",0
160,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
161,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
162,<S2SV_ModStart> ; if (,0
163,,0
164,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> int mi_row_row_cols ( struct <S2SV_ModStart> int mi_col ) ; memset ( & xd -> mb, 0, sizeof ( struct macroblock_info ) ) ; <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; }",0
165,,0
166,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
167,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( addr,0
168,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
169,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
170,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> 2SV_null> static <S2SV_ModStart> 2SV_null> static int i ; if ( svc_ctx_ctx_frame_t <S2SV_ModEnd> ( svc_ctx, <S2SV_ModStart>, svc_ctx_t ) ) { if ( svc_ctx -> svc_ctx -> temporal_mode == 0 ) { svc_temporal_layers = 0 ; } svc_temporal_layers ; svc_cpy ( svc_t ) ; svc_ctx -> temporal_mode = 0 ; } for ( i <S2SV_null>",0
171,,0
172,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> char * end_char * end <S2SV_ModEnd> ) { if <S2SV_ModStart> == '\\n' ) { if ( * end_start == '\\' ) { return - EINVAL ; } <S2SV_ModStart> == '\\n' ) { if ( * end_start == '\\' ) { if ( * end == '\\0' ) { return - EINVAL ; } else if ( * end == '\\0' ) { * end = * end ; } else { char * end_start = * end_start ; } else { * end_start = * end - 1 ; } else if ( * end == '\\0' ) { if ( * end == '\\0' ) { * end_start = * end ; } else if ( * end == '\\0' ) return 0 ; } else { * end_start = * end ; } else if ( * end && * end == '\\0' ) { if ( * end == '\\0' ; } else if ( * end == '\\0' ) { if ( * end == '\\0',0
173,,0
174,,0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
176,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) ; if",0
177,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_row_col ) { int mi_cols = 0 ; <S2SV_ModStart> = 0 ; if (! xd -> mi_cols ) return - ENOMEM <S2SV_ModEnd> ; } <S2SV_null>,0
178,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; if (,0
179,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ip_options_rcu <S2SV_ModEnd> * opt_rcu <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt =,0
180,,0
181,<S2SV_ModStart> 0 ; } <S2SV_ModEnd> if ( addr,0
182,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
183,,0
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,,0
186,"<S2SV_ModStart> ( bp, ""%s"", len <S2SV_ModEnd> ) ) ;",0
187,,0
188,,0
189,,0
190,,0
191,<S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> } if (,0
192,<S2SV_ModStart> NULL ; } if ( qcount > 0 ) ereport ( ERRCODE_PROGRAM_LIMIT_EXCEED ) ;,0
193,,0
194,<S2SV_ModStart> -> len = 0 <S2SV_ModEnd> ; if (,0
195,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
196,,0
197,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
198,,0
199,,0
200,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
201,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src,",0
202,"<S2SV_ModStart> ( cb, false",0
203,,0
204,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
205,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi ->,0
206,,0
207,<S2SV_ModStart> return 0 ;,0
208,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
209,,0
210,<S2SV_ModStart> = 0 ;,0
211,,0
212,,0
213,,0
214,<S2SV_ModStart> timer ) ; spin_lock ( & timer -> timer ) ;,0
215,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
216,,0
217,<S2SV_ModStart> } ret =,0
218,<S2SV_ModStart> ; if ( bi == NULL ) return NULL ;,0
219,<S2SV_ModStart> ) ) ; msg -> msg_namelen = 0 ;,0
220,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
221,<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY (,0
222,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
223,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
224,,0
225,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
226,<S2SV_ModStart> else if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1 <S2SV_ModStart> { if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1,1
227,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
228,,0
229,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY (,0
230,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
231,,0
232,,0
233,<S2SV_ModStart> ; if (! cmd ) return - EINVAL,0
234,,0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,"<S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
237,,1
238,<S2SV_ModStart> ; } } if (!,0
239,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> psf_codec_bytes <S2SV_ModEnd> ( psf -> <S2SV_ModStart> ) ) { if ( psf -> header. ptr <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ( psf -> header. ptr <S2SV_ModStart> ) ) ; } if ( psf -> header. ptr == psf -> header. ptr ) { psf -> header. indx = psf -> header. ptr ; psf -> header. ptr ; psf -> header. indx = psf -> header. ptr ; psf -> header. indx = psf -> header. indx <S2SV_ModEnd> ; psf -> <S2SV_ModStart> + psf -> header. indx <S2SV_ModEnd> ; psf -> <S2SV_ModStart> ( psf, psf -> header. end <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( psf -> header. end <S2SV_ModEnd> ) ) ; return <S2SV_ModStart> ( psf -> header. end <S2SV_ModEnd> ) ) ; }",0
240,,0
241,<S2SV_ModStart> ; if ( len < 0 &&,0
242,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
243,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
244,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
245,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( & cpi,0
246,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src,",0
247,<S2SV_ModStart> ; if (,0
248,<S2SV_ModStart> ; if ( l_protocol == 0 ) { return - 1 ; },0
249,,0
250,,0
251,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
252,,0
253,,0
254,<S2SV_ModStart> book -> dim && i < n,1
255,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
256,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
257,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
258,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
259,<S2SV_ModStart> sock_lock ) ; <S2SV_ModEnd> } <S2SV_null>,0
260,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
261,,0
262,"<S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_IS <S2SV_ModEnd> ) ; }",0
263,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
264,<S2SV_ModStart> ) ; } if ( name_len > INT_MAX - 1 ) { <S2SV_ModStart> ) ) ; },0
265,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY (,0
266,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
267,,0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,"<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( bp,",0
270,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
271,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
272,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,0
273,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> intra_mode_mode_t <S2SV_ModStart> int mi_row, int mi_row, int mi_row, int mi_row, int64_cols <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) { if ( xd_mode == 0 ) { return - ENOMEM ; } # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( xd_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { memcpy ( & YV12_FLAG_HIGHBITDEPTH ) ; }",0
274,"<S2SV_ModStart> ; if ( h -> h_error <S2SV_ModEnd> ( h,",0
275,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
276,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
277,,0
278,"<S2SV_ModStart> 0 ; } if ( r -> name [ 1 ] == '\\0' ) { archive_set_string ( & a -> archive, ARCHIVE_OK ) ; return - 1 ; }",0
279,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int iov_len, int iov_len, int iov_len ; if ( iov_len > iov_len ) goto out ; if ( iov_len > iov_len ) goto out_len ; <S2SV_ModStart> if ( iov_len ) goto out_len ; if ( iov_len < iov_len ) goto out ; if ( iov_len > i_len ) goto out ; if ( iov_len ) goto out ; if ( iov_len > i_len ) goto out ;",0
280,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
281,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
282,<S2SV_ModStart> uint16_t val ; uint32_t val = sizeof ( uint32_t ) <S2SV_ModEnd> ; if (,0
283,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
284,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
285,,0
286,,0
287,,0
288,,0
289,,0
290,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
291,,0
292,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> u2SV_null> static int <S2SV_ModEnd> encode_null> static <S2SV_ModStart> char * dlen ; if (! buf_size ) { return 0 ; } <S2SV_ModStart> { if (! buf ) { if (! buf ) { return 0 ; } else { Py_DECREF ( * ) ; } <S2SV_ModStart> { if (! buf ) { return 1 ; } else { Py_DECREF ( * ) ; } if (! buf ) { return - 1 ; } else { Py_DECREF ( * ) ; } else { Py_DECREF ( * ) ; } else { if (! buf ) { return - 1 ; } if (! buf ) { return - 1 ; } else { PyErr_DECREF ( * ) ; } if (! buf ) { return - 1 ; } else { Py_DECREF ( * ) ; } if (! buf ) { return - 1 ; } if (! buf ) { Py_SetString ( * 2 ) ; } else { Py_DECREF ( * ) ; } else { Py_DECREF ( * ) ; },0
293,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> rv_calloc <S2SV_ModStart>, int <S2SV_ModEnd> ; int ret <S2SV_ModStart> ; int ret = 0 <S2SV_ModEnd> ; int ret <S2SV_ModStart> = 0 ; if ( strcmp ( stderr, 0, sizeof ( stderr ) ) == 0 ) { run_errno = 0 ; } <S2SV_ModEnd> if ( strcmp ( stderr <S2SV_ModStart>, ""Error: <S2SV_blank> %s"", <S2SV_ModEnd>, ""Error: <S2SV_blank> %s"", <S2SV_ModStart> ) ; } if ( strcmp ( strcmp ( stderr, ""Error: <S2SV_blank> %s"", <S2SV_ModEnd>, ""Error: <S2SV_blank> %s <S2SV_blank> %s"", <S2SV_ModStart>, ""Error: <S2SV_blank> %s"", <S2SV_ModEnd>, ""Error: <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> %d <S2SV_blank> %s\\n"", __func__, <S2SV_ModEnd> ) ; }",0
294,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
295,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( & cpi,0
296,<S2SV_ModStart> * tl ; memcpy <S2SV_ModEnd> ( & t_left,0
297,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
298,<S2SV_ModStart> buffer ) { <S2SV_ModEnd> return NULL ;,0
299,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
300,,0
301,,0
302,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if (,0
303,,0
304,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, length )",0
305,,0
306,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
307,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
308,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> intra_mode_mode ( <S2SV_ModStart> intra_mode, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> intra_mode_t * const PREDICTION_MODE <S2SV_ModEnd> * const PREDICTION_MODE <S2SV_ModStart> ) { const PREDICTION_MODE <S2SV_ModEnd> * const PREDICTION_MODE <S2SV_ModStart> mode = vpx_read_mode <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ) ) ; } else { if ( vpx_reader <S2SV_ModEnd> ( r, <S2SV_ModStart> ) ) ; } <S2SV_null>",0
309,,0
310,,0
311,,0
312,<S2SV_ModStart> ; if (! ngh -> max_session_settings ) { if ( nghttp2_session_settings ) return - 1 ; } if (,0
313,<S2SV_ModStart> = - EINVAL <S2SV_ModEnd> ; if (,0
314,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
315,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
317,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> int i ; ND_TCHECK_16BITS ( & <S2SV_ModStart> ) ) { if (! ND_PRINT ( ( ( ( ( ndo, ""AVP <S2SV_blank> short"" ) ) ) ) ) goto trunc ; }",0
318,<S2SV_ModStart> = j ; jas_uchar <S2SV_ModEnd> ( j =,0
319,<S2SV_ModStart> ; int ret = - EINVAL ; if (,0
320,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
321,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
322,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
323,"<S2SV_ModStart> ( req_str, ""%s"",",0
324,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
325,,0
326,"<S2SV_ModStart> char * str ; if ( strlen ( str ) == '0' ) return NULL ; if ( strlen ( str ) == '\\0' ) { strchr ( str ) ; return NULL ; } else if ( strlen ( str ) == '\\0' ) { strcpy ( str, '\\0' ) ; } else if ( strlen ( str ) == '\\0' ) return NULL ; } else if ( strlen ( str ) == '0' ) { strlen ( str ) ; } else if ( strlen ( str )!= '0' ) { strcpy ( str, ""0"" ) ; return NULL ; } else if ( strlen ( strlen ( str, '\\0' ) == '\\0' ) ; } else if ( strcmp ( str ) == '0' ) return NULL ; } else if ( strlen ( str ) == '0' ) { strlen ( strlen ( str, '0' ) ; } else if ( strlen ( str ) == '0' ; if ( strlen ( str, '0' ) return NULL ; } else if ( str ) == '0' ; if ( strlen ( str",0
327,<S2SV_ModStart> ; if (,0
328,"<S2SV_ModStart> ( str, len <S2SV_ModEnd> ) ; str",0
329,,1
330,,0
331,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
332,,0
333,"<S2SV_ModStart> NULL ; } if (! CONFIG_DEFAULT_DEFAULT_DEFAULT_FAILURE ) { fprintf ( ""Failed"" ) ; return FALSE ; }",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,<S2SV_ModStart> ; if ( plen <S2SV_ModEnd> ) ) {,0
336,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
337,,0
338,<S2SV_ModStart> ; ctx ->,0
339,,0
340,,0
341,,0
342,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
343,,0
344,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
345,,0
346,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src,",0
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
348,,0
349,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
350,<S2SV_ModStart> size ) { ASSERT_NO_SIZE_OVERFLOW ( size ) ;,1
351,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
352,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
353,,0
354,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
355,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
356,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
357,,0
358,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { fmode <S2SV_ModStart> -> fmode = fmode <S2SV_ModEnd> ; if (",0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> int64_t * <S2SV_ModStart> int mi_row, int mi_row, int mi_row, int mi_row, int64_col, int64_t * r, int64_t ) { int ret = 0 ; if (! ssegs ) { if (! ( xd -> mb ) ) return - ENOMEM ; } # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( xd -> flags & YV12_FLAG_FLAG_HIGHBITDEPTH ) { if ( xd -> flags & YV12_FLAG_FLAG_HIGHBITDEPTH ) { if ( xd -> flags & YV12_FLAG_FLAG_FLAG_FLAG_HIGHBITDEPTH ) { if ( xd -> flags & YV12_FLAG_FLAG_FLAG_HIGHBITDEPTH ) { if ( xd -> flags & YV12_FLAG_FLAG_FLAG_FLAG_FLAG_HIGHBITDEPTH",0
361,<S2SV_ModStart> ( pm ) <S2SV_ModEnd> ; if (,0
362,<S2SV_ModStart> ; if (! buf_size ) return NULL ; if (,0
363,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
364,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst_ptr1,",0
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,,0
367,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( interface, ENC624J600_TX_SIZE tx_size <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_LINKIF <S2SV_ModEnd> ) ; }",0
368,,0
369,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
370,<S2SV_ModStart> ( pm ) <S2SV_ModEnd> ; if (,0
371,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; char <S2SV_ModStart> ( fclose, fname <S2SV_ModEnd> ) ; }",0
372,,0
373,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_init ( struct <S2SV_ModStart> vpx_codec_ctx ) { if (! ( vpx_codec_alg_priv_t ) ) return - 1 ; <S2SV_ModStart> ) ) { if ( vpx_codec_alg_priv_t * ) { if ( vpx_codec_alg_priv_t * ) { return - 1 ; },0
374,,0
375,<S2SV_ModStart> ; if (! ctx -> frame_size ) return 0 ; if (,0
376,,0
377,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd> ) ; }",0
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> char *,0
379,,0
380,,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,,0
384,,0
385,"<S2SV_ModStart>, j ; jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; j",0
386,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
388,,0
389,,0
390,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> int i ; uint8_t <S2SV_ModStart> int i ; uint8_t i ; uint8_t i ; uint8_t i ; uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * buf_size ; uint8_t * last_size = ( uint8_t ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ] = ( unsigned long ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ] == 0 ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) break ; } } <S2SV_ModEnd> if (! <S2SV_ModStart> ) break ; } <S2SV_null> <S2SV_null> <S2SV_null>,0
391,,0
392,<S2SV_ModStart> exit ; },0
393,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
394,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
395,<S2SV_ModStart> ; if ( <S2SV_ModEnd>!= 0 ),0
396,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
397,,0
398,"<S2SV_ModStart> size, 0",0
399,,0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
401,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
402,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
403,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_matind_t,0
405,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
406,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( src,",0
407,<S2SV_ModStart> int scanline = 0 <S2SV_ModEnd> ; if (,0
408,,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; } <S2SV_null>,0
410,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
411,,0
412,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ; if ( <S2SV_ModEnd> hdr ) { <S2SV_ModStart> - EINVAL ; }",0
413,,0
414,<S2SV_ModStart> size ) ; <S2SV_ModEnd> return 0 ;,0
415,,0
416,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
417,<S2SV_ModStart> ) ; } mutt_socket_empty ( adata -> conn ) ;,0
418,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
419,,0
420,"<S2SV_ModStart>, & rlen, 0",1
421,<S2SV_ModStart> NULL ; } if (! buf ) return - ENOMEM ;,0
422,,0
423,,0
424,,0
425,<S2SV_ModStart> = NULL ;,0
426,"<S2SV_ModStart> size_t s ; memset ( & buf, 0, sizeof ( buf ) ) ) ;",0
427,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
428,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; } <S2SV_null>,0
430,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
431,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
432,,0
433,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
434,,0
435,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
436,<S2SV_ModStart> NULL ; } free ( NULL ) ;,0
437,,0
438,,0
439,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
440,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
441,"<S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
442,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
443,"<S2SV_ModStart> ( decoder -> codec_interface <S2SV_ModEnd> ( ),",0
444,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
445,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
446,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
447,<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
448,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
449,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> ) { if",0
450,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( image,0
451,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
452,<S2SV_ModStart> ) ; return - ENOMEM <S2SV_ModEnd> ; if (,0
453,,0
454,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
455,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
456,<S2SV_ModStart> ( decoder ->,0
457,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( skb ->,0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,,0
460,<S2SV_ModStart> ; if (! strcmp ( key ) ) return 0 ;,0
461,,0
462,,0
463,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
464,,0
465,<S2SV_ModStart> ( size_t ) { <S2SV_ModEnd> return NULL ; },0
466,,0
467,,0
468,,0
469,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; if (,0
470,,0
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
472,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int result = RLC_OK <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { bn_len = RLC_OK <S2SV_ModEnd> ; bn_len <S2SV_ModStart> ( bn_len, bn_len, bn_len <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ) ; } bn_len = bn_len <S2SV_ModEnd> ; bn_len <S2SV_ModStart> ; } <S2SV_null>",0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
475,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
476,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( & cpi,0
477,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; ret =,0
478,,0
479,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> len ) ) ),0
480,<S2SV_ModStart> ; ps_dec ->,0
481,"<S2SV_ModStart> int mptctl_eventinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_device * ioc, <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; if (",0
482,,0
483,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
484,"<S2SV_ModStart> size_t s ; memset ( & buf_size, 0, sizeof ( buf_size ) ) ;",0
485,,0
486,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
487,,0
488,"<S2SV_ModStart> ( interface, ENC624J600_EIR <S2SV_ModEnd> ) ; }",0
489,,0
490,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
491,<S2SV_ModStart> char * fmt = 0 <S2SV_ModEnd> ; if (,0
492,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
493,"<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n"",",0
494,<S2SV_ModStart> ; ret = 0 <S2SV_ModEnd> ; if (,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
496,<S2SV_ModStart> ; if (! ret ) return - EINVAL ;,0
497,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
498,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
499,"<S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
500,,0
501,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> char *,0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,"<S2SV_ModStart> 0 ; } jas_uchar <S2SV_ModEnd> ( dp, <S2SV_ModStart> p, 0, 0 <S2SV_ModEnd> ) ; if",0
504,"<S2SV_ModStart> ( cpi, <S2SV_ModEnd> ) ; }",0
505,"<S2SV_ModStart>, size_t <S2SV_ModEnd> ; if (",0
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
507,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
508,,0
509,,0
510,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> ( xd, <S2SV_ModStart> int xd_stride ) ; memset <S2SV_ModEnd> ( xd, <S2SV_ModStart> ) ; } <S2SV_null>",0
511,,0
512,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( & i,0
513,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct vpx_wb_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> ( wb, vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; } vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> ( wb, sizeof ( struct vpx_wb_write_bit <S2SV_ModEnd> ) ) ; if",0
514,<S2SV_ModStart> ; if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; },0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
516,,0
517,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( xd ->,0
518,"<S2SV_ModStart> ( interface, ENC624J600_BUFFER_SIZE <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_TXIF <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_EIR <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_TXIF <S2SV_ModEnd> ) ; }",0
519,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void,0
520,,0
521,,0
522,<S2SV_ModStart> ; if (! err ) return - EINVAL ; if (,0
523,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null>,0
524,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
525,,0
526,"<S2SV_ModStart> ( interface, ENC624J600_EIR <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_EIR <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_EIR <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_RX <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J60_RD <S2SV_ModEnd> ) ; }",0
527,,0
528,<S2SV_ModStart> ( p ) <S2SV_ModEnd> ; if (,0
529,<S2SV_ModStart> = 0 ;,0
530,,0
531,,0
532,<S2SV_ModStart> ; if ( nt == 0 ) return 0 ;,0
533,<S2SV_ModStart> 2 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,1
534,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
535,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
536,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
537,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
538,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
539,,0
540,,0
541,<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> ; if (,0
542,,0
543,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
544,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
545,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
546,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
547,,0
548,<S2SV_ModStart> 0 ; } <S2SV_ModEnd> if ( nb,0
549,"<S2SV_ModStart> size, 0",0
550,"<S2SV_ModStart> ( cpi, <S2SV_ModEnd> ) ; }",0
551,"<S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_EIR <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_EIR <S2SV_ModEnd> ) ; }",0
552,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> int64BITSV_null> <S2SV_null> <S2SV_null>,0
553,,0
554,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE_MODE <S2SV_ModEnd> intra_mode = 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> intra_mode == VP9_COMP <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; } <S2SV_null>,0
555,"<S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1, 0 )",0
556,,0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,,0
559,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
560,,0
561,,0
562,,1
563,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
564,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> mutex ) ),0
565,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
566,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
567,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
568,<S2SV_ModStart> ; ret = - EINVAL ; if (,0
569,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
570,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
571,"<S2SV_ModStart> : # line 113 <S2SV_ModEnd> ""re_grammar.re_re_re_re_rere_rere_re_re_rere_re_rere_re_rere_rerere_re_re_rere_re_re_rere_re_rerere_re_re_rere_re_re_re_rere_re_re ( ( ( * re_re_re_rere_re_re_re_re_re_re_re_rerererererere_re_rererere_re ( ( ( ( ( ( * re_re_re_re_re_rere_rerere_re_re_re_re_rere_re_re_re_re_re_re_rere_rere_re_re_rere ( ( ( ( ( ) ) ) ). re_re_re_re_re_rerere_re_re_re_re_re_rere_re_re_re_re_re_rere_rerere_re_re_rerere ( ( ( ( (",0
572,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> void vpx_codec_t * cpi <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return 0 ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( xd -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( xd -> flags & YV12_FLAG_FLAG_HIGHBITDEPTH ) { if ( xd -> flags & YV12_FLAG_FLAG_HIGHBITDEPTH ) ) { if ( xd -> flags & YV12_FLAG_FLAG_FLAG_HIGHBITDEPTH ) { if ( xd -> flags & YV12_FLAG_FLAG_HIGHBITDEPTH ) { if ( xd -> flags & YV12_FLAG_HIGHBITDEPTH ) ( & YV12_FLAG_FLAG_HIGHBITDEPTH ) ) ) { vp9_get_variance ( & YV12_FLAG_FLAG_H ) ; },0
573,,0
574,,0
575,,0
576,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
577,"<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( msg,",0
578,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, 0 )",0
579,,0
580,<S2SV_ModStart> svc_ctx ) { SvcInternal_t <S2SV_ModEnd> * const si,0
581,,0
582,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
583,,0
584,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
585,<S2SV_ModStart> struct env * <S2SV_ModEnd> ; if (,0
586,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( & cpi,0
587,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
588,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
589,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
590,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> char char <S2SV_ModStart> char * outputbuffer [ 512 <S2SV_ModEnd> ] ; int <S2SV_ModStart> char * out ; const char * outputbuffer [ char * out <S2SV_ModEnd> ] ; char <S2SV_ModStart> 0'\\n"" ) ; if ( outputbuffer [ i ] == '\\0' ) { return NULL ; } <S2SV_ModEnd> char * <S2SV_ModStart> 0' ; if ( outputbuffer [ i ] == '\\0' || strlen ( strlen ( str ) ) ) ) { if ( strcmp ( ""\\n"" ) == '\\n"" ) ) return 0 ; } else { char * out = strcpy ( outputbuffer, ""\\n"" ) ; return 0 ; } else if ( output == '\\0' ) { return 0 ; } <S2SV_ModStart> } else { if ( strcmp ( strlen ( output + 1 ) == '\\n"" ) { return 0 ; } <S2SV_ModEnd> char * <S2SV_ModStart> 0' ; } <S2SV_ModStart> } if ( output == '\\0' ) { if ( strlen ( strcmp ( strcmp ( "" <S2SV_blank> %d <S2SV_blank> %s\\n"", ""\\n"", ""\\n"",",0
591,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj,",0
592,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
593,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
594,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
595,,0
596,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_null> static <S2SV_ModStart> int mi_row_col ) { int mi_cols = 0 ; int mi_cols ; int mi_cols = 0 ; <S2SV_ModStart> = 0 ; if (! vp9_get_tile_info ( mi_cols ) ) ) return - ENOMEM <S2SV_ModEnd> ; } <S2SV_null>,0
597,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> vp9_get_frame ( VP9_COMMON <S2SV_ModStart> ) { const VP9EncoderConfig <S2SV_ModEnd> * pbi -> <S2SV_ModStart> = 0 ; } # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( cpi ) { return NULL ; },0
598,,0
599,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
600,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
601,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
602,"<S2SV_ModStart>, ret = 0 <S2SV_ModEnd> ; if (",0
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
604,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
605,<S2SV_ModStart> 0 ) { jas_uchar <S2SV_ModEnd> buf [ jas_buf,0
606,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static VP9_COMMON * const <S2SV_ModStart> int mi_cols = & cpi -> common ; MACROBLOCKD * const xd = & cpi -> mb ; MACROBLOCKD * const xd = & cpi -> mb_mb_info ; if (! ( cpi -> mb ) ) return - ENOMEM ; } else { if (! ( cpi -> mbmi_ext ) ) return - ENOMEM ; } else { vp9_get_get_block ( & cpi -> mbmi ) ; } else if (! ( xd ) ) return - ENOMEM ; },0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
608,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
609,,0
610,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
611,,0
612,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_DONTWAIT )",0
613,<S2SV_ModStart> goto out_buffer ; },0
614,,0
615,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
616,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi ->,0
617,"<S2SV_ModStart> pbi, false",0
618,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
619,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
620,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
621,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
622,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
623,,0
624,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> v_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> dv_null> <S2SV_null>,0
625,<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> ; if (,0
626,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> ( void,0
627,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return 0 ;,0
628,,0
629,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> vp9_get_frame ( VP9_COMMON <S2SV_ModStart> ( const VP9_COMMON * cm, Vpx_BUFFER_BUFFER <S2SV_ModEnd> ) ; uint8_t <S2SV_ModStart> ) ; } vpx_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_writer <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ) { vpx_write_bit <S2SV_ModEnd> ( wb,",0
630,,0
631,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_row_row_cols = 0 ; if (! segfeature_active ( seg ) ) return - ENOMEM ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { if (! <S2SV_ModStart> ) return - ENOMEM ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { if (! seg ) return - ENOMEM ; },0
632,<S2SV_ModStart> ( ctx ->,0
633,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; ps_dec ->,0
634,"<S2SV_ModStart> = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
635,,0
636,,0
637,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
638,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
639,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
640,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi ->,0
641,<S2SV_ModStart> ) ) ; ND_TCHECK ( bp [ 0 ] ) ;,0
642,"<S2SV_ModStart> int mptctl_eventquery ( MPT_ADAPTER * ioc, <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } dctlprintk",0
643,,0
644,,0
645,,0
646,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
647,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
648,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_mode ( struct <S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r )",0
649,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> vpx_codec_codec_alg_priv_t <S2SV_ModEnd> ; vpx_codec_t * <S2SV_ModStart> ; vpx_writer <S2SV_ModEnd> ; vpx_codec ->,0
650,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
651,,0
652,<S2SV_ModStart> ; int key_len <S2SV_ModEnd> ; if (,0
653,<S2SV_ModStart> ; # endif tok -> type_comments = 0 ;,0
654,,0
655,,0
656,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
657,,1
658,,0
659,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
660,<S2SV_ModStart> ; if ( <S2SV_ModEnd> p_data_len > UINT32_MAX <S2SV_ModStart> 0 ) { if ( clp_data_data_len > UINT32_MAX - 1 ) { pr_errno = NULL ; } if ( ( clp_data_data_len > 0 ) ) { crm_errno = - 1 ; break ; } <S2SV_ModStart> 0 ] ; } <S2SV_ModStart> 0 ) { if ( len < 0 ) goto cleanup ; } <S2SV_ModStart> ; } if ( len < 0 ) goto cleanup ; } if ( <S2SV_ModStart> ) ) { crm_errno_data ) ; } if ( ( len < 0 ) ) { crm_errno = - 1 ; } if ( cli_errno < 0 ) goto cleanup ; },0
661,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
662,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
663,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( addr,0
664,"<S2SV_ModStart> ( cpi, <S2SV_ModEnd> ) ; } <S2SV_null> <S2SV_null>",0
665,,0
666,,0
667,,0
668,<S2SV_ModStart> ( r = 0 <S2SV_ModEnd> ; if (,0
669,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
670,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
671,,0
