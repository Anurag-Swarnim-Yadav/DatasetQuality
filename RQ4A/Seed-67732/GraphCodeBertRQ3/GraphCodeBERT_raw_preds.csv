,raw_predictions,correctly_predicted
0,<S2SV_ModStart> ; if (! wmi_wmi <S2SV_ModEnd> ) return -,0
1,<S2SV_ModStart> skb ) { <S2SV_ModEnd> if ( skb <S2SV_ModStart> ) ) ; } <S2SV_ModEnd> if ( len,0
2,<S2SV_ModStart> break ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
3,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
4,"<S2SV_ModStart> char * regs <S2SV_ModEnd>, struct perf_sample_data <S2SV_ModStart>, 1, <S2SV_ModEnd>, regs,",0
5,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> EXT4_BLOCKSV_BLOCKS2SV_null>,0
6,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> input [ tran_low_t <S2SV_ModEnd> input [ input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> input [ input,0
7,"<S2SV_ModStart> cgc ) ; memset ( & cgc -> sense, 0, sizeof ( cgc -> sense ) <S2SV_ModEnd> ) ; if",0
8,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int,0
9,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> int i ; int <S2SV_ModStart> int i ; int <S2SV_ModStart> = 0 ; int i ; int <S2SV_ModStart> = 0 ; int i ; memset <S2SV_ModEnd> ( sb, <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart>, 0, sizeof ( cpi -> <S2SV_ModStart> - 1 ) ) ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> intra_frame, sizeof ( cpi -> <S2SV_ModStart> intra_err_frame ) ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart>, sizeof ( cpi -> frame_err ) ) ) ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> - 1 ) ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ) ; } <S2SV_null> <S2SV_null>",0
10,"<S2SV_ModStart> int luaL_checkstack ( L, 1,",0
11,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
12,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> == 0 ) { <S2SV_ModStart> = COAP_BLOCK_BLOCK_SIZE ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> = COAP_BLOCK_BLOCK_SIZE ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> = COAP_BLOCK_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_BLOCK_SIZE_128 ; },0
13,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) ; if ( length < 2 ) { ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",0
14,<S2SV_ModStart> keyring_keyring ) { <S2SV_ModStart> return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
15,<S2SV_ModStart> = 0 ;,0
16,<S2SV_ModStart> ; if ( <S2SV_ModEnd> addr_len < sizeof <S2SV_ModStart> ) ) return - EINVAL <S2SV_ModEnd> ; if (,0
17,<S2SV_ModStart> char * str <S2SV_ModEnd> ; if (,0
18,<S2SV_ModStart> } } },0
19,,0
20,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",0
21,<S2SV_ModStart> ) ; return NULL,0
22,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> intra_inter_frame ( <S2SV_ModStart> interpct ) { const VP9EncoderConfig <S2SV_ModEnd> interpredict_inter_inter_inter_inter_frame <S2SV_ModEnd> ( twopass, <S2SV_ModStart> intra_inter ) { TWO_PASS_PASS_PASS <S2SV_ModEnd> ( twopass, <S2SV_ModStart> pcnt_frame, twopass, <S2SV_ModStart> pcnt_inter ) ; <S2SV_ModEnd> if ( twopass <S2SV_ModStart> intra_inter ) { vp9_interp9_interpct <S2SV_ModEnd> ( twopass, <S2SV_ModStart> ; } } <S2SV_null> <S2SV_null>",0
23,<S2SV_ModStart> ; unsigned long flags ; <S2SV_ModEnd> ext4_unlock_irqsave ( & EXT4_I ( inode,0
24,<S2SV_ModStart> ; char * name <S2SV_ModEnd> ; if (,0
25,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
26,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
27,<S2SV_ModStart> ) ) ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ;,0
28,"<S2SV_ModStart> mntent, path, rootfs",1
29,<S2SV_ModStart> io_lock ) ; if (! io -> io ) return - EINVAL ;,0
30,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, MagickFalse ) ; if (",0
31,,0
32,<S2SV_ModStart> ( cfg ) <S2SV_ModEnd> ; if (,0
33,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> rollover = NULL <S2SV_ModStart> atomic_long_set ( & fanout_long_long_long_long_long_long_long_long_long_long_long ( & <S2SV_ModStart> atomic_long_long_long_long_long_long_long_long ( & <S2SV_ModStart> atomic_long_long_long_long_long_to_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long ( & <S2SV_ModEnd> ) ; if <S2SV_ModStart> atomic_long_long_long_long_long_long_long_long_long ( & rollover -> num_long_long_long_long_long_long_long_long_long ( & rollover -> num_long_long_long_long_long_long_long_long_long ( & rollover -> rollover ) ; num_long_long_long_long_long_long_long_to_long_long_long_long ( & rollover ) ; <S2SV_ModEnd>,0
34,<S2SV_ModStart> ; if ( page == NULL ||,0
35,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
36,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if (,0
37,"<S2SV_ModStart> ( interface, ENC28J60_ECON <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd>, ENC28J60WriteReg ( interface <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd> ) ; }",0
38,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,0
39,<S2SV_ModStart> ) ) { <S2SV_ModEnd> char * <S2SV_ModStart> return - 1 ; <S2SV_ModEnd> } if (,0
40,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> int yv_stride_stride ( <S2SV_ModStart> int yv_stride, int <S2SV_ModEnd> int yv_stride, <S2SV_ModStart> int yv_stride, uv_stride ) { memcpy <S2SV_ModEnd> ( source_stride, <S2SV_ModStart> int yv_stride ) ; memset <S2SV_ModEnd> ( mb, <S2SV_ModStart> intra_width ) ; memset <S2SV_ModEnd> ( mb, <S2SV_ModStart> int i ; memset <S2SV_ModEnd> ( mb, <S2SV_ModStart> 16 ) ; memset <S2SV_ModEnd> ( mb, <S2SV_ModStart> 16 ) ; memset <S2SV_ModEnd> ( mb_stride, <S2SV_ModStart> 16 ) ; memset <S2SV_ModEnd> ( mb, <S2SV_ModStart> 16 ) ; memset <S2SV_ModEnd> ( mb_stride, <S2SV_ModStart> 16 ) ; memset <S2SV_ModEnd> ( mb, <S2SV_ModStart> 16 ) ; memset <S2SV_ModEnd> ( mb_stride, <S2SV_ModStart> 16 ) ; memset <S2SV_ModEnd> ( mb_stride, 0,",0
41,"<S2SV_ModStart> ptr ) { struct cmd * cmd = NULL ; cmd = NULL ; cmd. kernel_data <S2SV_ModEnd> ( cmd, <S2SV_ModStart>, sizeof ( cmd ), & cmd <S2SV_ModEnd> ) ; cmd",0
42,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int error = <S2SV_ModStart> int error ; <S2SV_ModEnd> int error = <S2SV_ModStart> int error ; struct mb_cache_entry_entry_entry_entry_entry_entry ( struct mb2_cache_entry_entry ( bh, <S2SV_ModStart> size ) ; <S2SV_ModEnd> return error ;",0
43,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
44,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
45,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
46,,0
47,<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd> ) ; if,0
48,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
49,<S2SV_ModStart> } while ( (,0
50,<S2SV_ModStart> ) ) goto out_free <S2SV_ModEnd> ; } if,0
51,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int error = <S2SV_ModStart> int iov_len ; if ( ext4_len > inode_len ) return - EINVAL ; <S2SV_ModStart> ) ; goto out <S2SV_ModEnd> ; } <S2SV_null>,0
52,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
53,<S2SV_ModStart> { if ( <S2SV_ModEnd> id == 0,0
54,"<S2SV_ModStart> ( addr, <S2SV_ModEnd> sizeof ( addr",0
55,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
56,<S2SV_ModStart> return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
57,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference (",0
58,<S2SV_ModStart> readbuffer ) { TIFFError = 0 ; },0
59,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ioc ( void,0
60,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
61,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> -> i_size ; memset ( & EXT4_I ( ext_size, 0, sizeof ( struct ext_data ) ) -> i_data_size ) ; <S2SV_ModStart> size ) ; memset ( & EXT4_I ( ext_size, 0, sizeof ( ext_data ) -> i_size ) ) ;",0
62,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( c,0
63,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
64,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
65,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
66,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = 0 ; if ( twopass -> twopass. gf_context [ 0 ] == 0 ) { return 0 ; } <S2SV_ModStart> = 0 ; if ( cpi -> gf_group == 0 ) return 0 ;,0
67,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
68,<S2SV_ModStart> 0 ) { int ret = - ENOMEM ; <S2SV_ModStart> - ENOMEM ; goto out_free_buffer <S2SV_ModEnd> ; } if,0
69,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { int",0
70,<S2SV_ModStart> char * fd = NULL <S2SV_ModEnd> ; if (,0
71,<S2SV_ModStart> ; if ( ps_sps -> u1_max_max_max ) { if ( ps_dec -> i2_pic_pic_sps == 0 ) { return ERROR_INVALID_PARAMETER ; },0
72,<S2SV_ModStart> if (! cmd &&,0
73,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> const uint8_t <S2SV_ModEnd> const VP9_COMMON * const <S2SV_ModStart> const VP9_COMMON * const <S2SV_ModEnd> const MACROBLOCKD * const <S2SV_ModStart> const xd = vpx_stride <S2SV_ModEnd> ( dst_stride,",0
74,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
75,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
76,<S2SV_ModStart> -> i_ops ; <S2SV_ModEnd> if ( iter,0
77,<S2SV_ModStart> ) ; } if ( fp == '\\0' ) { fprintf ( fp ) ; return ( fp ) ; },0
78,<S2SV_ModStart> char * fmt <S2SV_ModEnd> ; char * <S2SV_ModStart> 0 ) { Py_FALSE ; char * p = NULL ; char * p_new_name = NULL ; char * p = NULL ; char * p = NULL ; if (! strcmp ( * ) == NULL ) { Py_DECREF ( * ) ; return NULL ; } <S2SV_ModEnd> if (! <S2SV_ModStart> 0 ) { Py_DECREF (! <S2SV_ModStart> 0 ) ; return NULL ; } <S2SV_ModEnd> if (! <S2SV_ModStart> goto failed ; } else { Py_FALSE ; } else { Py_RETURN_FALSE ; } return NULL ; } <S2SV_ModEnd> } <S2SV_null>,0
79,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
80,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if (!,0
81,<S2SV_ModStart> -> xdr ; <S2SV_ModEnd> return 0 ;,0
82,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> uint16_t val_l ; if ( length < 2 ) { ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 2 ) { ND_PRINT ( ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ) ; goto trunc ; } <S2SV_ModStart> ) ; } ND_PRINT ( ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ) ; ptr ++ ; ptr ++ ; ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> short"" ) ) ; goto trunc ; } ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; } ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> too <S2SV_blank> short"" ) ) ) ; return ; }",0
83,<S2SV_ModStart> endif # endif,0
84,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
85,<S2SV_ModStart> src -> uv_stride <S2SV_ModEnd> ( const int,0
86,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
87,<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & cpi,0
88,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
89,"<S2SV_ModStart> -> data, size_t <S2SV_ModEnd> len ) {",0
90,"<S2SV_ModStart> ; int n_async = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { if ( CHILD ( CHILD ( CHILD ( n, 1 ) ) == 0 ) { return NULL ; } if ( CHILD ( CHILD ( n, 1 ) ) == 0 ) { return 1 ; } else if ( CHILD ( CHILD ( CHILD ( n, 1 ) ) == 0 ) { goto error ; } <S2SV_ModEnd> ; } }",0
91,<S2SV_ModStart> src ) { kfree ( src ) ;,0
92,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> VP9_8x8_8x8x8x8_8x8x8x8x8_8x8_8x8_8_8_8 ( cm, mi <S2SV_ModEnd>, mi, <S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * w,",0
93,<S2SV_ModStart> uint32_t n ; if ( n > 0 ||,0
94,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
95,<S2SV_ModStart> = 1 ; <S2SV_ModEnd> } <S2SV_null>,0
96,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
97,<S2SV_ModStart> ) ; } memset ( & xd ->,0
98,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
99,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
100,,1
101,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
102,"<S2SV_ModStart> { if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""Error"" ) ; return 1 ; } <S2SV_ModEnd> } if (",0
103,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
104,<S2SV_ModStart> NULL ) { status = MagickFalse ; break <S2SV_ModEnd> ; } image,0
105,<S2SV_ModStart> ) ) ; if ( avio_feof ( s -> pb ) ) { ret = AVERROR_INVALIDDATA ; goto fail ; },0
106,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, ctx )",0
107,<S2SV_ModStart> size_t new_size = 0,0
108,"<S2SV_ModStart> * wb, struct vpx_wb_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
109,<S2SV_ModStart> offset ) ; <S2SV_ModEnd> return 0 ;,0
110,<S2SV_ModStart> msg_namelen ; } msg_namelen = 0 ;,0
111,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
112,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> chunk_ack = sctp_asconf_asconf_ack <S2SV_ModStart> asconf_code ) { if ( err_pass == 0 ) { if ( err_pass == 0 ) { if ( err_error_pass == - 1 ) { if ( err_pass == SCTP_ERROR_ERROR_ERROR_ERROR ) { if ( err_pass == - 1 ) return - 1 ; } if ( err_pass == - 1 ) { if ( err_error_pass == - 1 ) { if ( err_pass == - 1 ) { if ( err_pass == SCTPACK_ERROR_ERROR_ERROR_ERROR_ERROR ) { sctp_error ( err_pass == - 1 ) { if ( err_pass == SCTPACK_ERROR ) { if ( err_error_pass == - 1 ) { if ( err_pass == SCTPACK_ERROR_ERROR_ERROR_ERROR ) { if ( errmsg ( err_pass == SCTPACK_ERROR ) { err_ERROR_ERROR_ERROR_ERROR,0
113,<S2SV_ModStart> exit ; } m -> msg_namelen = 0 ;,0
114,<S2SV_ModStart> msr ) ; <S2SV_ModEnd> return 0 ;,0
115,,0
116,<S2SV_ModStart> cfg ) { <S2SV_ModEnd> if ( cfg,0
117,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
118,"<S2SV_ModStart> int rc ; struct desc_struct old_desc ; struct x86_ops * ops = cpl ( cpl, & old_desc, VCPU_SREG_SREG_CS ) ; if (! ctxt -> mode == X86EMUL_CS ) return rc ; rc = assign_eip ( ctxt, VCPU_SREG_CS ) ; memcpy ( ctxt, & old_desc, VCPU_SREG_CS ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; rc = assign_descriptor ( ctxt, VCPU_SREG_CS ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; rc = assign_eip_far ( rc!= X86EMUL_CONTINUE ) ; if ( rc!= X86EMUL_CONTINUE ) rc = assign_eip ( ctxt -> mode!= X86EMUL_CONTINUE ) ; if ( rc!= X86EMUL_CONTINUE ) rc!= X86EMUL_CONTINUE ) return rc ; if ( rc!= X86EMUL_CONTINUE ; rc!= X86EM",0
119,<S2SV_ModStart> si_mutex ) { <S2SV_ModStart> return - 1 ; },0
120,"<S2SV_ModStart> tmp_strsize ) { ISOM_DECREASE_SIZE ( ptr, 1 ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> tmp_strsize ) { ISOM_DECREASE_SIZE ( ptr, 1 ) <S2SV_ModStart> tmp_strsize ) { ISOM_DECREASE_DECREASE_DECREASE_SIZE ( ptr, 1 ) <S2SV_ModStart> tmp_strsize ) ; ISOM_DECREASE_DECREASE_SIZE ( ptr, 1 ) <S2SV_ModStart> tmp_strsize ) { ISOM_DECREASE_DECREASE_DECREASE_SIZE ( ptr, 1 ) <S2SV_ModStart> tmp_strsize ) ; } if (! ISOM_DECREASE_DECREASE_SIZE ( tmp_strsize ) { zfound = GF_TRUE ; zfound = GF_TRUE ; break ; }",0
121,,0
122,<S2SV_ModStart> * state ; <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
123,<S2SV_ModStart> ) break ; <S2SV_ModEnd> } if (,0
124,"<S2SV_ModStart> size ) { memset ( buf, 0, sizeof ( buf ) ) ;",0
125,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
126,,0
127,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
128,<S2SV_ModStart> char * name <S2SV_ModEnd> ; if (,0
129,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return ret ;,0
130,<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> ; if (,0
131,"<S2SV_ModStart> ( interface, NULL <S2SV_ModEnd> ) ; }",0
132,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
133,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
134,<S2SV_ModStart> { rq = <S2SV_ModEnd> off + tags,0
135,<S2SV_ModStart> ( 1 ) <S2SV_ModEnd> ; if (,0
136,<S2SV_ModStart> goto out ; <S2SV_ModEnd> if ( msg,0
137,<S2SV_ModStart> skb ) return 0,0
138,<S2SV_ModStart> ) ; } <S2SV_ModEnd> return 0 ;,0
139,<S2SV_ModStart> } else { int tile_buffsize = 0 ; tile_buffsize = 0 ; tile_buffsize = 0 ;,0
140,<S2SV_ModStart> break ; } <S2SV_ModEnd> } if (,0
141,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
142,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return 0 ;,0
143,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
144,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; if,0
145,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { ret = - EFAULT ; }",0
146,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
147,<S2SV_ModStart> break ; } <S2SV_ModEnd> } if (,0
148,<S2SV_ModStart> ctxt ) ; if ( rcx == X86EMUL_MODE_REGS_REGS_RDX ) return X86EMUL_RDX ; <S2SV_ModStart> = X86EMUL_RDX ; if ( rcx == X86EMUL_REGS_REGS_RDX ) return rcx,0
149,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
150,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output,",0
151,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
152,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> x5 ] ; tran_high_t <S2SV_ModEnd> x8x8 ( tran_high_t <S2SV_ModStart> 4 ] ; tran_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] ; tran_high_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] ; tran_high_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] ; tran_low_t <S2SV_ModStart> 4 ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] ; tran_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] ; tran_high_high_high_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] ; tran_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] ; tran_high_high_high_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] = input <S2SV_ModStart> 4 ] ; tran_high_high_high_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] ; tran_high_high_high_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] = input <S2SV_ModStart> 4 ] ; tran_,0
153,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
154,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
155,"<S2SV_ModStart> tot_len ) ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
156,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flags & CL_UNPRIVILEGED <S2SV_ModStart> ; if ( mnt -> mnt_flags |= MNT_READONLY <S2SV_ModEnd> ; if (,0
157,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> int mi_row, <S2SV_ModStart> int mi_row, mi_col, mi_cols ( mi_col, mi_col, mi_col, mi_col, mi_col, mi_row, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col ) ; if ( mi_col < 0 ) { const int mi_row = mi_cols ( cm -> mi_cols, mi_cols, mi_cols, mi_cols, mi_cols, mi_cols, mi_col, mi_row, mi_col, mi_row, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_row, mi_col, mi_row, mi_col, mi_col, mi_col ) ; if ( <S2SV_ModEnd> ( mi_col ) <S2SV_ModStart> ( mi_col ) { <S2SV_ModStart> ( mi_row, mi_col, mi_col ) ; }",0
158,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
159,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> if (!,0
160,<S2SV_ModStart> ; int ret ; int ret = - EINVAL ; <S2SV_ModStart> EINVAL ; if ( ret > 0 ) { ret = - EINVAL ; goto error ; } if ( <S2SV_ModStart> OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( ret > OE_EINVAL ) { ret = - EINVAL ; goto error ; } <S2SV_ModEnd> ; } <S2SV_null>,0
161,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
162,<S2SV_ModStart> ) ) { memcpy <S2SV_ModEnd> ( fc ->,0
163,"<S2SV_ModStart> char * buf ; int ret ; buf = kmalloc ( size, GFP_KERNEL ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart> ret ) ; ret = kmalloc ( size, GFP_KERNEL ) ; if ( ret ) return - ENOMEM <S2SV_ModEnd> ; ret =",0
164,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
165,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> # if CONFIG_VP9_VP9_HIGHBITDEPTH <S2SV_ModEnd> * const <S2SV_ModStart> int flags ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( ctx ) { # endif # endif # endif # endif <S2SV_ModStart> VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH ) { # endif # endif # endif <S2SV_ModStart> VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_VP9_HIGHBITDEPTH if CONFIG_VP9_VP9_HIGHBITDEPTH return VPX_HIGHBITDEPTH <S2SV_ModEnd> ( buf_end, <S2SV_ModStart> VP9_end ) ; } # endif <S2SV_ModEnd> (",0
166,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
167,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int i ; const VP9_COMP * const VP9_COMP * const <S2SV_ModStart> int i ; if ( cm -> sf_level == 0 && cm -> bit_depth == 0 && cm -> common. bit_depth == 0 && cm -> bit_depth == 0 && cm -> bit_depth == 0 && cm -> bit_depth == 0 && cm -> bit_depth == 0 && cm -> bit_depth == 0 && cm -> bit_depth [ i ],0
168,<S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> b ) ) ),0
169,<S2SV_ModStart> = 0 ;,0
170,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
171,<S2SV_ModStart> * res ; <S2SV_ModEnd> return res ;,0
172,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
173,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
174,<S2SV_ModStart> NULL ) { <S2SV_ModEnd> return NULL ;,0
175,,0
176,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_seq, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\"" <S2SV_blank> \\"" ) ; return 1 ; } <S2SV_ModEnd> if ( tmp <S2SV_ModStart>, arena ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> field <S2SV_blank> \\"" ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( tmp ) ; return 1 ; } else { PyExc_TypeError ( tmp ) ; } if ( tmp == NULL ) { PyErr_SetString ( tmp ) ; return 1 ; } if ( tmp == NULL ) { PyErr_TypeError ( tmp ) ; } if ( tmp == NULL ) { PyErr_SetString ( tmp ) { PyErr_SetString ( tmp ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( tmp ) ; } else { PyErr_TypeError, ""required <S2SV_blank> field <S2SV_blank>",0
177,<S2SV_ModStart> mnt_flags ) { if ( (! ( mnt_flags & MNT_NODEV ) ) return - EPERM ; if ( ( ( ( mnt -> mnt_flags & MNT_NODEV ) ) ) return - EPERM ; },0
178,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 0,0
179,"<S2SV_ModStart> ; uint32 ds64_chunk = 0 <S2SV_ModStart> ; ds64_chunk = 0, sizeof ( CS64Chunk ) ) ; if (! table_chunk ) { cs64_chunk = sizeof ( CS64Chunk ) * table_chunk ) ; cs64_chunk = 0 ; cs64_chunk ( cs64_chunk, sizeof ( CS64_chunk ), sizeof ( CS64_chunk ) ) ; if ( cs64_chunk * sizeof ( CS64Chunk ) ) { cs64_chunk = 0 ; cs64_chunk = 0 ; } if ( cs64_chunk. cs64_chunk. cs64_chunk. data_chunk. cs64_chunk = sizeof ( CS64_chunk ) ) ; if ( cs64_chunk. cs64_chunk = sizeof ( CS64_chunk. cs64_chunk. table_chunk ) ; cs64_chunk = sizeof ( CS64_chunk. cs64_chunk. table_chunk. cs64_chunk. table_chunk ) ; if ( cs64_chunk.",0
180,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> msg_sys_sys ( msg_sys <S2SV_ModEnd> ) ; if,0
181,<S2SV_ModStart> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> int bh ; int <S2SV_ModStart> int b_blocks ; uint8_t b_blocks = 0 ; uint8_t * b_blocks = 0 ; int b_blocks = 0 ; uint8_t * b_blocks = 0 ; uint8_t * b_blocks = 0 ; uint8_t * b_blocks = 0 ; uint8_t * b_blocks = 0 ; uint8_t * b_blocks = 0 ; uint8_t * b_blocks = 0 ; uint8_t * b_blocks = 0 ; uint8_t * b_blocks = 0 ; uint32_t b_t * b_blocks = 0 ; uint32_t * b_blocks = 0 ; uint32_t * b_to_blocks = 0 ; uint8_t * b_blocks = 0 ; uint8_t * b_blocks = 0 ; uint8_t * b_blocks = 0 ; uint8_t * b_blocks = 0 ; uint8_off = 0 ; uint32_t <S2SV_ModEnd> = 0 ; uint8_t,0
182,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
183,<S2SV_ModStart> == NULL ),0
184,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( fname <S2SV_ModStart> ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank> file\\n"" ) ; goto out ; } if ( fprintf ( fname ) ) { fprintf ( stderr, ""Error: <S2SV_blank> file\\n"" ) ; } if ( fprintf ( stderr, ""Error: <S2SV_blank> file\\n"" ) ; goto out ; } if ( fprintf ( fname ) { fprintf ( stderr, ""Error: <S2SV_blank> file\\n"" ) ; } if ( fprintf ( fname ) ) { fprintf ( stderr, ""Error: <S2SV_blank> file\\n"" ) ; return - 1 ; } if ( fprintf ( fprintf ( fprintf ( fprintf ( stderr, ""Error: <S2SV_blank> %s\\n"" ) ) ; } if ( fprintf ( fprintf ( fprintf ( fname ) ) ) { fprintf ( stderr, ""Error: <S2SV_blank> file\\n"" ) ; } if ( fprintf ( fprintf ( fprintf ( stderr\\n"" ) ) ) ; } if ( fprintf ( fprintf ( fprintf ( fprintf ( stderr, """,0
185,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
186,"<S2SV_ModStart> { if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
187,<S2SV_ModStart> ) ) ; if ( len < 2 ) return - 1 ;,0
188,"<S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & interface, KSZ8851_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_ISR_ISR_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_ISR_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_ISR_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_ISR_TXR_ISR_ISR ) ; if <S2SV_ModStart> ( status & KSZ8851_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_TXR",0
189,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct vpx_wb_wb_write_bit ( struct vpx_bit_buffer <S2SV_ModEnd> * wb ),0
190,"<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
191,<S2SV_ModStart> ; if ( <S2SV_ModEnd> key == 0,0
192,"<S2SV_ModStart> 1_array ) ; t1_array_array ( t1_array, t1_array, t1_array ) ;",0
193,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart>, BLOCK_SIZE bsize, BLOCK_SIZE bsize, <S2SV_ModStart> ) ; } memset <S2SV_ModEnd> ( bsize, <S2SV_ModStart> ) ; memset <S2SV_ModEnd> ( bsize, <S2SV_ModStart> 0 ) ; memset <S2SV_ModEnd> ( cm,",0
194,,0
195,<S2SV_ModStart> key_read ) ; ret = key_read_read ( key ) ;,0
196,<S2SV_ModStart> ps_dec -> u4_first_slice_in_pic = 1 ; ps_dec -> u4_total_pic = 1 ;,0
197,<S2SV_ModStart> break ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
198,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
199,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
200,<S2SV_ModStart> int len = 0 <S2SV_ModEnd> ; if (,0
201,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> vp9_setup_context ( VP9_COMMON * const VP9EncoderConfig <S2SV_ModEnd> * const VP9_CODEC_COMMON * <S2SV_ModStart> * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_CODEC_COMMON * svc = & cpi -> spatial_context [ i ] ; <S2SV_ModStart> i ] ; size_t <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; if ( i < 0 ) { VPX_CODEC_ENCODEC_ERROR ( i ) { VPX_CODEC_INVALIDDATA [ i ] = 0 ; ++ i ] [ i ] ; ++ i ] ; ++ i ] [ i ] [ i ] ; ++ i ] [ i ] [ i ] [ i ] ; ++ i ] = 0 ; ++ i ] [ i ] ; ++ i ],0
202,,0
203,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
204,<S2SV_ModStart> debug_info ) { <S2SV_ModEnd> if (!,0
205,,0
206,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
207,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",1
208,<S2SV_ModStart> char * name <S2SV_ModEnd> ; if (,0
209,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> int mi_row, <S2SV_ModStart> int mi_row, mi_col, mi_col, mi_col, mi_row, mi_col, mi_col, mi_col, mi_col, mi_col, mi_row, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_row, mi_col, mi_col, mi_col, mi_col, mi_col, mi_row, mi_col, mi_col, mi_col, mi_col, mi_col, mi_row, mi_col, mi_col ) ; if ( cm -> mi_row > mi_col ) { VP9_COMMON * mi_cols = 0 ; memset ( cm, mi_col, mi_row, mi_col, mi_col, mi_col, mi_col, mi_col, mi_row, mi_col, mi_col, mi_row, mi_col, mi_col, mi_col, mi_col,",0
210,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( skb,0
211,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { <S2SV_ModEnd> if (!,0
212,<S2SV_ModStart> mnt ) ; nd -> last_type = LAST_BIND ;,1
213,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_options_options_options_len ( struct <S2SV_ModStart> ) { struct ip_options_options_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( & ip_options_options_options_rcu <S2SV_ModEnd>, & ip_options_options_options_options_options_rcu <S2SV_ModStart> ( opt, & opt -> <S2SV_ModEnd> ) ; }",0
214,<S2SV_ModStart> ; if (,0
215,<S2SV_ModStart> ) { int err ; <S2SV_ModEnd> if ( d <S2SV_ModStart> ) ) { err = - ENOMEM ; goto err <S2SV_ModEnd> ; } <S2SV_null>,0
216,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } if (,0
217,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
218,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
219,"<S2SV_ModStart>!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
220,<S2SV_ModStart> ) ) ; ND_TCHECK ( bp [ 0 ] ) ;,0
221,<S2SV_ModStart> ; if (,0
222,<S2SV_ModStart> * jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t,0
223,<S2SV_ModStart> ps_cfg ) ; if ( ps_dec -> u1_params_params_params_params_s > ps_codec -> u2_params_params_params_params_params_s ) { return - 1 ; },0
224,<S2SV_ModStart> ) { ret = <S2SV_ModEnd> ; if (,0
225,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
226,<S2SV_ModStart> sizeof ( image ) <S2SV_ModEnd> ; if (,0
227,"<S2SV_ModStart> ( pq, sizeof ( pq )",0
228,<S2SV_ModStart> ( r ) <S2SV_ModEnd> ; if (,0
229,<S2SV_ModStart> 0 ) { if ( c -> req [ i ] == '\\0' ) { <S2SV_ModEnd> if ( c <S2SV_ModStart> == 0 ) { <S2SV_ModEnd> if ( c,0
230,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> int i ; tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> ++ j ; tran_low_t <S2SV_ModEnd> out [ 8",0
231,<S2SV_ModStart> ; g_valid_data_data_size = 0 <S2SV_ModEnd> ; if (,0
232,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int fp ; if (! strcmp ( fp ) ) { fprintf ( stderr, ""/tmp"" ) ; return NULL ; } <S2SV_ModStart> ) ; } if (! strcmp ( fp ) ) { fp -> fp ) ; return NULL ; } <S2SV_ModStart> ) ) { fprintf ( fp, fp ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { fprintf ( fp ) ; }",0
233,<S2SV_ModStart> ) ) ; if (! elen ) return - ENOMEM ;,0
234,<S2SV_ModStart> ) ) { ND_TCHECK_16BITS ( tptr ) ;,0
235,,0
236,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
237,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
238,<S2SV_ModStart> ) ; } <S2SV_ModEnd> S2SV_null> <S2SV_null>,0
239,<S2SV_ModStart> -> fc ; <S2SV_ModEnd> if ( fc,0
240,"<S2SV_ModStart> -> x = MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> y = MagickMax <S2SV_ModEnd> ( 1.0f,",0
241,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
242,<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm ->,0
243,"<S2SV_ModStart> size_t s ; memset ( & tcount, 0, sizeof ( tcount ) ) ;",0
244,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
245,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
246,<S2SV_ModStart> op ) { <S2SV_ModEnd> return 0 ;,0
247,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
248,<S2SV_ModStart> ) ) { if ( str == 0 ) return ;,0
249,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
250,<S2SV_ModStart> ++ ) { if ( count == 0 ) break ;,0
251,<S2SV_ModStart> ) ; } mutex_lock ( & timer ) ;,0
252,<S2SV_ModStart> -> u4_temp ; ps_dec -> u4_temp = 0 ; ps_dec -> u4_temp = 0 ; ps_dec -> u4_temp = 0 ;,0
253,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
254,<S2SV_ModStart> if (! ret &&,0
255,"<S2SV_ModStart> ) ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ;",0
256,<S2SV_ModStart> sb ) ; <S2SV_ModEnd> return 0 ;,0
257,<S2SV_ModStart> ) ) ; msg -> msg_namelen = 0 ;,0
258,<S2SV_ModStart> ; char * t <S2SV_ModEnd> ; if (,0
259,"<S2SV_ModStart> ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
260,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
261,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (,0
262,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
263,<S2SV_ModStart> ret = 0 <S2SV_ModEnd> ; if (,0
264,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference (",0
265,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
266,<S2SV_ModStart> else if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1 <S2SV_ModStart> { if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1,1
267,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
268,<S2SV_ModStart> size = 0 <S2SV_ModEnd> ; if (,0
269,<S2SV_ModStart> ; return - EINVAL <S2SV_ModEnd> ; if (,0
270,"<S2SV_ModStart> PERF_COUNT_SW_EMULATION_FAULTS, 1 <S2SV_ModEnd>, regs,",0
271,<S2SV_ModStart> src ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ;,0
272,"<S2SV_ModStart> list. name, true",1
273,<S2SV_ModStart> = 1 ; <S2SV_ModEnd> } <S2SV_null>,0
274,<S2SV_ModStart> ; if ( b == 0 ||,0
275,,0
276,<S2SV_ModStart> cmd ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
277,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
278,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
279,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ;",0
280,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> == 0 ) return rc <S2SV_ModEnd> ; } <S2SV_null>,0
281,,1
282,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return ret ;,0
283,<S2SV_ModStart> psf ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; psf -> <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; psf -> <S2SV_ModStart> psf -> header. ptr [ psf -> header. indx ] = psf -> header. indx <S2SV_ModEnd> ; psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> += psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; psf -> <S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd> + psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ) ) { <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> += psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> + psf -> header. indx <S2SV_ModEnd> + psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; psf -> <S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd> ) ; } <S2SV_null>,0
284,<S2SV_ModStart> 0 ) { if ( ps_dec -> u1_num > UINT32_MAX_MAX ) { return - 1 ; },0
285,,0
286,<S2SV_ModStart> void ) { mutex_lock_lock ( & <S2SV_ModEnd> ctx -> ctx <S2SV_ModStart> ctx ) ; <S2SV_ModEnd> mutex_lock ( &,0
287,<S2SV_ModStart> int flags ; <S2SV_ModEnd> flags |= 0,0
288,<S2SV_ModStart>!= 0 ) <S2SV_ModEnd> ; if (,0
289,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
290,<S2SV_ModStart> ) ; } <S2SV_ModEnd> S2SV_null> <S2SV_null>,0
291,"<S2SV_ModStart> size_t ext_size ; memset ( & ext_size, 0, sizeof ( struct ext_size ) ) ; <S2SV_ModStart> ) ) { ext_size = sizeof ( struct ext4_size - sizeof ( struct ext4_extent ) + sizeof ( struct ext4_extent ) + sizeof ( struct ext_size ) - sizeof ( struct ext_extentries ) ) ; <S2SV_ModStart> ) ) { ext_size = sizeof ( struct ext_extentries ) - ext_size - sizeof ( struct ext4_size ) + sizeof ( struct ext4_extentries ) + sizeof ( struct ext_extentries ) - sizeof ( struct ext_extentries ) - ext_size ) + sizeof ( struct ext_extentries ) - ext_size ) ; memset ( struct ext_size, 0, sizeof ( struct ext_size ) + sizeof ( struct ext_extentries ) - ext_size ) + sizeof ( struct ext_extentries ) + sizeof ( struct ext_extentries ) - ext_size ) ; }",0
292,<S2SV_ModStart> ) ) { <S2SV_ModEnd> if (!,0
293,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
294,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
295,"<S2SV_ModStart> cpi, url_len <S2SV_ModEnd> ( url,",0
296,<S2SV_ModStart> len ) { if ( len < offset ) return - EINVAL ; <S2SV_ModStart> break ; } <S2SV_ModEnd> } <S2SV_null>,0
297,<S2SV_ModStart> ( server. ds_enabled <S2SV_ModEnd> ) server.,0
298,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
299,,0
300,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
301,<S2SV_ModStart> 0 ) { const vpx_write_t <S2SV_ModEnd> ( sf -> <S2SV_ModStart> 0 ) ; memset <S2SV_ModEnd> ( sf ->,0
302,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
303,<S2SV_ModStart> count ) ; if ( count > OE_SSIZE_MAX ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
304,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> sk_len ( <S2SV_ModStart> opt -> opt_len <S2SV_ModEnd> skb ) { <S2SV_ModStart> ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { atomic_free_user ( sk ) ; },0
305,"<S2SV_ModStart> = 0 ; memset ( & sk, 0, sizeof ( * ) ) ;",0
306,<S2SV_ModStart> NULL ) ; sctp_disable_exit ( & sctp_ops ) ; sctp_exit ( & sctp_addr ) ; sctp_exit ( & sctp_state ) ; if ( sctp_exit ( & sctp_state ) ; sctp_exit ( & sctp_disable_state ) ; sctp_exit ( & sctp_state ) ;,0
307,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
308,<S2SV_ModStart> task ) { <S2SV_ModEnd> if ( timer,0
309,<S2SV_ModStart> ( name ) <S2SV_ModEnd> ; if (,0
310,"<S2SV_ModStart> ( interface, KSZ8851_MAH <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( interface, KSZ8851_ERR <S2SV_ModEnd> ) ; }",0
311,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
312,"<S2SV_ModStart> NEED_OP ( t, <S2SV_ModStart> HAVE_OP ( t, <S2SV_ModStart> HAVE_OP ( t, <S2SV_ModStart> HAVE_OP ( t, 0 <S2SV_ModStart> HAVE_OP ( t, 0 <S2SV_ModStart> HAVE_OP ( t, 0 <S2SV_ModStart> HAVE_OP ( t, 0 <S2SV_ModStart> HAVE_OP ( t, 0 <S2SV_ModStart> HAVE_OP ( t, <S2SV_ModStart> HAVE_OP ( t, <S2SV_ModEnd> 3 ) ) <S2SV_ModStart> HAVE_OP ( t, <S2SV_ModStart> HAVE_OP ( t, 0 <S2SV_ModStart> HAVE_OP ( t, 0 <S2SV_ModStart> HAVE_OP ( t, 0 <S2SV_ModStart> HAVE_OP ( t, 0 <S2SV_ModStart> HAVE_OP ( t, <S2SV_ModStart> HAVE_OP ( t, 0 <S2SV_ModStart> HAVE_OP ( t, <S2SV_ModEnd> HAVE_IP ( t, <S2SV_ModStart> HAVE_OP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> HAVE_OP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 ) ) ) <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> HAVE_OP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 ) ) ) )",0
313,<S2SV_ModStart> size_t ret ; if (! ret_error ( ) ) { ret = - ENOMEM ; goto error ; } <S2SV_ModStart> ) ) { ret = - 1 ; goto error ; },0
314,"<S2SV_ModStart> if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd, 0 )",0
315,<S2SV_ModStart> rc ; const VP9EncoderConfig <S2SV_ModEnd> * oxcf =,0
316,<S2SV_ModStart> ; if ( safe_user <S2SV_ModEnd> ( ) < 0,0
317,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
318,<S2SV_ModStart> break ; # if CONFIG_VP9_HIGHBITDEPTH if ( ( flags & pd ) ) { <S2SV_ModStart> ) ) ; },0
319,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <SV_null>,0
320,<S2SV_ModStart> ; int i <S2SV_ModEnd> ; if (,0
321,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> ) ; } exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
322,<S2SV_ModStart> -> peer. auth_capable = new -> peer. auth_capable ; asoc -> peer.,1
323,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> null> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> int mbmi ; PREDICTION_MODE_MODE_INFO * mbmi_mv = INT_INFO * mbmi_cost ; MACROBLOCK_INFO * mbmi_cost = INT_INFO * mbmi ; # if CONFIG_INFO * mbmi = INT_INFO * mbmi_INFO * mbmi ; MACROBLOCK_INFO * mbmi = INT_INFO * mbmi ; <S2SV_ModStart> = 0 ; # if CONFIG_REF_INFO * mbmi = INT_INFO * mbmi_INFO * mbmi ; # if CONFIG_INFO * mbmi = INT_INFO * mbmi_INFO * mbmi ; # if CONFIG_INFO * mbmi = INT_INFO * mbmi. mbmi_INFO * mbmi_INFO * mbmi ; # if CONFIG_,0
324,<S2SV_ModStart> ; h = h <S2SV_ModEnd> ; if (,0
325,<S2SV_ModStart> IVD_STREAM_WIDTH_SUPPORTED_WIDTH_WIDTH_WIDTH_SUPPORTED ; },0
326,"<S2SV_ModStart> * cpi, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ; vpx_codec_err_t * const VPX_CODEC_CODEC_PARAM ; const VPX_CODEC_INVALID_PARAM ; const VPX_CODEC_PARAM ; const VPX_CODEC_INVALID_PARAM ; const VPX_INVALID_PARAMET_PARAM ; const VPX_PARAM ; const int ctx = ( ctx -> data ) ctx -> flags ; if ( ctx -> data == NULL ) { VPX_CODEC_ERROR_INVALID_PARAM ; return VPX_PARAM ; } <S2SV_ModEnd> if ( ctx",0
327,,0
328,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> int error_null> <S2SV_null> <S2SV_null>,0
329,<S2SV_ModStart> struct iinfo * iinfo <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { if ( iinfo -> i_len > sizeof ( struct iinfo ) ) goto out ; if ( iinfo -> i_len > bh -> i_len ) goto out ; <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto out_len = <S2SV_ModEnd> ; if (,0
330,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( lfm,",0
331,<S2SV_ModStart> mq_ops ) ; <S2SV_ModEnd> return q ;,0
332,<S2SV_ModStart> if ( addr + <S2SV_ModEnd> sizeof ( val,0
333,<S2SV_ModStart> ) ) { if ( str == 0 ) return ;,0
334,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
335,<S2SV_ModStart> ) ) { return - EINVAL ; },0
336,"<S2SV_ModStart> ""`%s\'"", option",0
337,"<S2SV_ModStart> = 0 ; memset ( & sk, 0, sizeof ( * ) ) ;",0
338,,0
339,<S2SV_ModStart> ] = 0 <S2SV_ModEnd> ; if (,0
340,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
341,<S2SV_ModStart> if ( i < 0 ) return ;,0
342,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; } if,0
343,<S2SV_ModStart> ; if ( g -> msg_len > 0 &&,0
344,<S2SV_ModStart> int jas_uchar <S2SV_ModEnd> ; if (,0
345,"<S2SV_ModStart> 1 ) { memset <S2SV_ModEnd> ( pbi,",0
346,"<S2SV_ModStart> ""MemoryAllocationFailed"" ) ; ( void ) NULL ;",0
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> u8_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> p_null> <S2S2SV_null>,0
348,"<S2SV_ModStart> char * cp, int <S2SV_ModEnd> ) { int <S2SV_ModStart> 0 = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) == 0 <S2SV_ModEnd> ) { int <S2SV_ModStart> ] = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) == 0 <S2SV_ModEnd> ) { int <S2SV_ModStart> break ; } if ( strcmp ( cp, ""%s"", strcmp ( int ) <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ) == 0 <S2SV_ModEnd> ) { int <S2SV_ModStart> break ; return 0 <S2SV_ModEnd> ; } < 0",0
349,<S2SV_ModStart> -> buffer ; if (! ctx -> gf128 ) return - ENOKEY ;,1
350,"<S2SV_ModStart> write_bit <S2SV_ModEnd> ( w,",0
351,"<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( 0,",0
352,<S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( & t_left,0
353,<S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> } ps_dec ->,0
354,<S2SV_ModStart> buffer ) { sb_free_buffer ( screen ) ;,0
355,<S2SV_ModStart> ) ; } <S2SV_ModEnd> err = 0,0
356,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
357,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } else {,0
358,"<S2SV_ModStart>, key_data, key_cmp <S2SV_ModEnd> ) ; if",0
359,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
360,<S2SV_ModStart> length ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> length ) ),0
361,<S2SV_ModStart> ioc ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
362,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
363,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if (,0
364,<S2SV_ModStart> struct perf_event * event <S2SV_ModEnd> ; if ( <S2SV_ModStart> return ret ; <S2SV_ModEnd> return ret ;,0
365,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> intra_mode_mode_mode ( VP9_COMMON <S2SV_ModStart> * cm, MACROBLOCKD * xd, MACROBLOCKD * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> intra_mode ; FRAME_COUNTS * counts = vpx_reader <S2SV_ModEnd> * r ; <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> intra_mode_mode_mode ; FRAME_COUNTS * counts",0
366,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; } if,0
367,<S2SV_ModStart> S_null> <S2SV_null> <S2SV_null>,0
368,<S2SV_ModStart> val ) ; memset <S2SV_ModEnd> ( & s,0
369,,0
370,"<S2SV_ModStart> += dif ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
371,<S2SV_ModStart> ) ; return,0
372,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> int i ; vpx_write_bit_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> b ) ; vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> b ) ; vpx_write_bit <S2SV_ModEnd> ( w,",0
373,"<S2SV_ModStart> struct vpx_wb_write_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 4 ) { vpx_wb_write_buffer <S2SV_ModEnd> ( wb, <S2SV_ModStart> size ) ; vpx_wb_write_buffer <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_write_buffer <S2SV_ModEnd> ( wb,",0
374,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
375,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int i_len ; ND_TCHECK_16BITS ( idxattr_len <S2SV_ModEnd> ) ; ND_T <S2SV_ModStart> len ; } ND_TCHECK_16BITS ( id_len ) ;,0
376,"<S2SV_ModStart> ) ) ; if (! jas_eprintf ( 1, 0 ) ) return 0 ;",0
377,<S2SV_ModStart> ) { ret = - EINVAL ; goto fail ; },0
378,"<S2SV_ModStart> 1 ) { if ( tran_low_t ) { xd_low_t <S2SV_ModEnd> ( w2, <S2SV_ModStart> 2 ] = 0x1 ; }",0
379,<S2SV_ModStart> mnt ) { struct mnt * mnt = __mounts ; if ( mnt -> mnt. mnt ) return 0 ;,0
380,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
381,<S2SV_ModStart> ) ) { if ( req_is_active ( req ) ) { <S2SV_ModStart> ) ) ; },0
382,,0
383,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
384,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char ( int <S2SV_ModStart> char <S2SV_ModEnd> ) { int <S2SV_ModStart> = 0 ; if ( strlen ( strlen ( char * ) len - 1 ) return 0 ; } if ( len < 1 ) { return - 1 ; },0
385,"<S2SV_ModStart> ( buf ) ; if ( size < 2 ) { ASSERT ( ""Failed"" ) ; ASSERT ( buf + 1 ) == 0 ) { ASSERT ( buf + 1 ) ; ASSERT ( buf == 0 ) ; ASSERT ( buf ) ; }",0
386,"<S2SV_ModStart>, 1, <S2SV_ModEnd> ) ; }",0
387,"<S2SV_ModStart> len ) { char * strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> len ( stringlen <S2SV_ModEnd> ) ; if",0
388,,1
389,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> i ) { <S2SV_ModStart> ( void ) fputc ( void ) fclose ( void ) fclose ( void ) fclose ( void ) fclose ( void ) fclose ( void ) ; status = MagickFalse ; status = MagickFalse ; status = MagickFalse ; status = MagickFalse ; status = MagickFalse ; status = MagickFalse ; status = MagickFalse ; status = MagickFalse ; status = MagickFalse ; status = MagickFalse ; status = MagickFalse ; status = MagickFalse ; status = MagickFalse ; status = MagickFalse ; if ( status == MagickFalse ) fclose ( fclose ( fclose ( fclose ( fclose ) ) ) ; status = MagickFalse ; } status = MagickFalse ;,0
390,,0
391,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> pwpw_null>,0
392,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
393,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
394,<S2SV_ModStart> jid ) { char * my_jid = jid_jid_jid_jid_jid <S2SV_ModEnd> ; if (,0
395,<S2SV_ModStart> S2SV_null> <S2SV_null> <S2SV_null> static,0
396,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
397,<S2SV_ModStart> ; goto err <S2SV_ModEnd> ; if (,0
398,<S2SV_ModStart> ps_dec -> u4_height ; ps_dec -> u4_width = 1 ; ps_dec -> u4_height = 1 ;,0
399,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
400,"<S2SV_ModStart>, fmt ) <S2SV_ModEnd> ; if (",0
401,<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; char,0
402,<S2SV_ModStart> } else { <S2SV_ModEnd> if ( sel,0
403,<S2SV_ModStart> ; i = 0 <S2SV_ModEnd> ; i <,0
404,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
405,"<S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> w ) { vpx_write_bit <S2SV_ModEnd> ( w,",0
406,<S2SV_ModStart> if ( ent == NULL ||,0
407,<S2SV_ModStart> ; if ( ps_sps -> u1_max_max_max ) { if ( ps_dec -> i2_pic_pic_sps == 0 ) { return ERROR_INVALID_PARAMETER ; },0
408,<S2SV_ModStart> psf_size ) { if (! psf_check ( psf ) ) { <S2SV_ModStart> ) ) ; break ; },0
409,<S2SV_ModStart> ; if ( d -> msg_len > sizeof ( d -> msg ) ) return - EINVAL ; if ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( i,1
410,"<S2SV_ModStart> ( ResourceLimitError, ""ImproperImageHeader"" <S2SV_ModEnd> ) ; }",0
411,<S2SV_ModStart> ) ; } <S2SV_ModEnd> S2SV_null> <S2SV_null>,0
412,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> VP9_COMP_8x8x8 ( vpx_mv12_8x8x8_m9_8x8_8 ( vpx_8_8_8x8_mv12_8x8 ( vpx_8_8x8_8_8_8x8x8 ( vpx_mv12_8x8x8_m9_mv12_8 ( vpx_m9_m9_8x8x8_8 ( vpx_8x8_8_8_m9_8_8x8x8 ( vpx_8x8x8_m9_m9_m9_8x8_8 ( vpx_m9_8x8x8_m9_8x8x8_8_8_8 ( vpx_8_8_8_8, & vpx_8x8_8_m9_m9_8x8_8_8_8_8x8x8_",0
413,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
414,<S2SV_ModStart> ; ret = krb5_retval <S2SV_ModEnd> ; if (,0
415,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
416,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
417,<S2SV_ModStart> size ) { ASSERT_NO_SIZE_OVERFLOW ( size ) ;,1
418,<S2SV_ModStart> counts = 0,0
419,<S2SV_ModStart> ; if ( <S2SV_ModEnd> status == 0,0
420,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> if ( req,0
421,<S2SV_ModStart> ; if ( <S2SV_ModEnd> == 0 ),0
422,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static,0
423,"<S2SV_ModStart> } ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, 0 )",0
424,<S2SV_ModStart> 0 ) { if ( ps_dec -> u2_total_coded == 0 ) { return ERROR_INVALIDDATA_T ; },0
425,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
426,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> spin_lock_irq ( & <S2SV_ModStart> ucounts -> count <S2SV_ModEnd> ) ; },0
427,"<S2SV_ModStart> * fmode, fmode_t fmode <S2SV_ModEnd> ) { int",0
428,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
429,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static MACROBLOCK * const <S2SV_ModStart> const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * sse ; MACROBLOCKD * const uint8_t * const uint8_t * sse ; const int64_t * const uint8_t * const uint8_t * const uint8_t * out_sse ; uint8_t * out_sse ; uint8_t * out_sse ; int64_t * const uint8_t * out_sse ; const uint8_t * out_sse ; uint8_t * out_t * out_sse ; uint32_t * out_sse ; uint64_t * out_t * out_sse ; uint64_t * out_sse ; uint8_t * out_t * out_sse ; uint8_t * out_t * out_,0
430,<S2SV_ModStart> ) goto next <S2SV_ModEnd> ; if (,0
431,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
432,"<S2SV_ModStart> int segment_id, vpx_reader <S2SV_ModEnd> * r )",0
433,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst_ptr1,",0
434,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
435,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return buf ;,0
436,"<S2SV_ModStart> ( interface, KSZ8851_TX_HIGHBITS <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( interface, KSZ8851_TX_BUFFER, KSZ8851_TX_BUFFER <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, KSZ8851_TIF <S2SV_ModEnd> ) ; }",0
437,"<S2SV_ModStart> NULL ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
438,<S2SV_ModStart>. udpport = 0 <S2SV_ModEnd> ; settings.,1
439,<S2SV_ModStart> disable ) ; <S2SV_ModEnd> void ) ;,0
440,<S2SV_ModStart> 0x1 ) { if ( xd == 0x01 ) return - ENOMEM ; <S2SV_ModStart> = x1 ; <S2SV_ModEnd> if ( xd,0
441,<S2SV_ModStart> clips_ptr ) { ret = - EINVAL ; goto out_clips ; },0
442,<S2SV_ModStart> ) goto next <S2SV_ModEnd> ; if (,0
443,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
444,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
445,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
446,<S2SV_ModStart> vpx_codec_alg_priv_t * priv <S2SV_ModEnd> ; priv = <S2SV_ModStart> cfg ) { priv <S2SV_ModEnd> vpx_codec_alg_priv_t cfg = ( priv <S2SV_ModStart> ; priv -> priv <S2SV_ModEnd> ; priv -> <S2SV_ModStart> ; priv -> priv <S2SV_ModEnd> = NULL ; priv,0
447,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
448,<S2SV_ModStart> * data ; memset <S2SV_ModEnd> ( ctx ->,0
449,<S2SV_ModStart> = vma ) <S2SV_ModEnd> ; if (,0
450,,0
451,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( interface, ENC28J60_MICMD <S2SV_ModEnd> ) ; }",0
452,<S2SV_ModStart> char * buf <S2SV_ModEnd> ; char *,0
453,<S2SV_ModStart> ) ; },0
454,,0
455,"<S2SV_ModStart> ; osStrchr <S2SV_ModEnd> ( token,",0
456,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
457,<S2SV_ModStart> p_enc ) ; <S2SV_ModEnd> if (!,0
458,<S2SV_ModStart> ) ; },0
459,"<S2SV_ModStart> int i ; memset ( & buf, 0, sizeof ( buf ) ) ;",0
460,,0
461,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
462,"<S2SV_ModStart> ; memset <S2SV_ModEnd> ( src,",0
463,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
464,<S2SV_ModStart> ; if ( data_size > 0 &&,0
465,"<S2SV_ModStart> ), false, false",0
466,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static uint8_t <S2SV_ModEnd> int i ; int <S2SV_ModStart> int i ; int motion_y_y_y_y ; int motion_y_y = 0 ; int motion_y = 0 ; int motion_y = 0 ; int motion_y_y ; int motion_y_y = 0 ; int motion_y_y = 0 ; int motion_y_y_y_y_y_y_y_y ; int motion_y_y_y = 0 ; int motion_y_y ; int motion_y = 0 ; int motion_y ; int motion_y_y = 0 ; int motion_y ; int motion_y = 0 ; int motion_y ; int motion_y_y_y_y_y_y_y = 0 ; int motion_y_y = 0 ; int motion_y_y ; int motion_y = 0 ; int motion_y_y_y = 0 ; int motion_y_y_y = 0 ; int motion_y_y_y_y = 0 ; int motion_y,0
467,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
468,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs ) ;",0
469,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
470,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
471,<S2SV_ModStart> ; if ( <S2SV_ModEnd> inode -> i_sb <S2SV_ModStart> ) ) { <S2SV_ModEnd> if (!,0
472,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
473,"<S2SV_ModStart> } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if (",0
474,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
475,<S2SV_ModStart> AcquireQuantumMemory ( size_t ),0
476,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
477,<S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> } ps_dec ->,0
478,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> 0,0
479,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
480,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
481,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> intra_blocks_w ; const <S2SV_ModEnd> const int <S2SV_ModStart> int mbmi_blocks = vpx_blocks_blocks <S2SV_ModEnd> ( xd -> <S2SV_ModStart> int xd <S2SV_ModEnd> ; const int <S2SV_ModStart> -> mbmi ; memcpy <S2SV_ModEnd> ( xd ->,0
482,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst,",0
483,<S2SV_ModStart> ; if ( <S2SV_ModEnd> row < 0,0
484,,0
485,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr,0
486,<S2SV_ModStart> if ( num >= 0,0
487,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
488,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static,0
489,<S2SV_ModStart> ; return 0 ; } if (,0
490,<S2SV_ModStart> ; char * name <S2SV_ModEnd> ; if (,0
491,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; }",0
492,<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ;,1
493,,0
494,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
495,<S2SV_ModStart> ) ) ; mutt_socket_empty ( adata -> conn ) ; <S2SV_ModStart> ) ) ; mutt_socket_empty ( adata -> conn <S2SV_ModEnd> ) ; if,0
496,,0
497,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (,0
498,"<S2SV_ModStart>, & rlen, 0",1
499,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
500,<S2SV_ModStart> < 0 ) { <S2SV_ModEnd> return 1 ;,0
501,,0
502,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
503,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
504,<S2SV_ModStart> S_null> <S2SV_null> <S2SV_null>,0
505,"<S2SV_ModStart> char * sig = NULL <S2SV_ModStart> char * sig = NULL <S2SV_ModStart> r = NULL ; if (! authctxt -> authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> invalid <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } <S2SV_ModStart> b ) ; if (! authctxt -> valid || authctxt -> authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> invalid <S2SV_blank> user"", __func__, __func__ ) ; goto error <S2SV_ModEnd> ; } <S2SV_null>",0
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
507,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
508,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
509,<S2SV_ModStart> int iov ; size_t len ; <S2SV_ModStart> int i ; if ( len < 4 ) goto fail ; <S2SV_ModStart> break ; } if ( len < 4 ) goto fail ;,0
510,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr,0
511,<S2SV_ModStart> ( ret ||! cm_id -> device ||,1
512,<S2SV_ModStart> = 0 ; if ( count > OE_SSIZE_MAX ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
513,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
514,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
515,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return - 1,0
516,<S2SV_ModStart> ( page ) <S2SV_ModEnd> ; if (,0
517,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> } if (,0
518,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
519,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 0 ;,0
520,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> sum = ( <S2SV_ModStart> pktcd_table [ i ] <S2SV_ModEnd> ] ; },0
521,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
522,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
523,"<S2SV_ModStart> * dst ; memcpy <S2SV_ModEnd> ( dst,",0
524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> int mi_row, <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( xd, <S2SV_ModStart> int mi_row, mi_col, mi_col, mi_col, mi_col, mi_row, mi_col ) ; memset <S2SV_ModEnd> ( xd, <S2SV_ModStart> mi_col, mi_col, mi_row, mi_col ) ; memset <S2SV_ModEnd> ( mi_col, <S2SV_ModStart> mi_col ) ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( xd -> mi_row > 0 ) { memset ( xd -> mi_row, mi_row, mi_row, mi_col ) ; memset ( xd, mi_col, mi_col, mi_row, mi_col, mi_col, mi_col, mi_col, mi_row, mi_col, mi_col ) ; memset ( xd, mi_row, mi_col, mi_row, mi_col, mi_col, mi_col, mi_col,",0
525,"<S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
526,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
527,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
528,<S2SV_ModStart> skb_err ; } skb_free_skb ( skb ) ;,0
529,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
530,<S2SV_ModStart> NULL ) ; <S2SV_ModEnd> } if (,0
531,"<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
532,<S2SV_ModStart> ctx ) ; <S2SV_ModEnd> return NULL ;,0
533,"<S2SV_ModStart> 1 ) { vpx_lpf_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_16 <S2SV_ModEnd> ( s,",0
534,<S2SV_ModStart> int i ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
535,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
536,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
537,<S2SV_ModStart> return ret ; <S2SV_ModEnd> return ret ;,0
538,<S2SV_ModStart> frame ) { <S2SV_ModEnd> return 0 ;,0
539,<S2SV_ModStart> char * buf <S2SV_ModEnd> ; if (,0
540,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
541,<S2SV_ModStart> ( pLength - 1 <S2SV_ModEnd> ) ; if,0
542,<S2SV_ModStart> len ) { struct ipv6_txoptions * opt_to_free = NULL ; <S2SV_ModStart> if (! opt_to_free ) { opt_free = opt_to_free ; } <S2SV_ModEnd> if ( flowlabel,0
543,<S2SV_ModStart> ; if ( <S2SV_ModEnd> && inet ->,0
544,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
545,<S2SV_ModStart> ; if ( info -> len < 0 ) { return ERROR_INVALIDDATA ; } if (,0
546,"<S2SV_ModStart> { if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
547,<S2SV_ModStart> ) break ; <S2SV_ModEnd> tp -> tp,0
548,<S2SV_ModStart> key_data ; if ( data_data_data_data_data_data_data_data_data_data_data_data_data ( key_data ) > 0 ) { ret = - EINVAL ; goto out ; },0
549,<S2SV_ModStart> { int id <S2SV_ModEnd> ; if (,0
550,,0
551,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
552,,0
553,<S2SV_ModStart> ) ; } <S2SV_ModEnd> return 0 ;,0
554,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ),1
555,,0
556,<S2SV_ModStart> break ; } if (!,0
557,,0
558,<S2SV_ModStart> ) ) ; struct ipv6_txoptions * rcu_dereference ( <S2SV_ModStart> np -> opt ) ; rcu_read_lock ( ) ; <S2SV_ModStart> np -> opt = rcu_dereference ( <S2SV_ModEnd> np -> opt <S2SV_ModStart> np -> opt ) ; <S2SV_ModEnd> np -> opt,0
559,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
560,"<S2SV_ModStart> ""Memory"" ) ; ( void ) NULL ;",0
561,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
562,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> int bn_len ; <S2SV_ModStart> int bn_len ; bn_len = 0 ; mutex_unlock ( & m, m, m, m, m, m, m, m, m ) ; switch ( m ) { case RSA_SIGISR_FAILURE : { case RSA_FAILURE : return - 1 ; } <S2SV_ModEnd> if ( m <S2SV_ModStart> ; if ( m ) { case RSA_SUB : if ( m ) return - 1 ; <S2SV_ModEnd> ; } <S2SV_null>",0
563,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
564,<S2SV_ModStart> { rq = <S2SV_ModEnd> hctx -> tags <S2SV_ModStart> hctx -> tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; if (,1
565,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
566,"<S2SV_ModStart> * cm, vpx_writer <S2SV_ModEnd> * w,",0
567,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
568,<S2SV_ModStart> * cm ; memset <S2SV_ModEnd> ( cm ->,0
569,<S2SV_ModStart> ) return ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
570,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
571,"<S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
572,<S2SV_ModStart> ; ps_dec ->,0
573,"<S2SV_ModStart> int mptctl_do_ioctl_ioc ( MPT_ADAPTER * ioc, <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; if ( <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } <S2SV_null>",0
574,"<S2SV_ModStart> int luaL_checkstack ( L, 1,",0
575,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
576,<S2SV_ModStart> * rq ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
577,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
578,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
579,<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; if,0
580,<S2SV_ModStart> dentry * dir <S2SV_ModEnd> ; int dir_inode <S2SV_ModStart> dir_info ; <S2SV_ModEnd> spin_lock ( &,0
581,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
582,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
583,<S2SV_ModStart> op ) { <S2SV_ModEnd> return 0 ;,0
584,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [",0
585,<S2SV_ModStart> len = 0 <S2SV_ModEnd> ; if (,0
586,"<S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600WriteReg ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600WriteReg ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600WriteReg ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600WriteReg ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_",0
587,<S2SV_ModStart> ( bytes_info!= MagickFalse,0
588,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
589,<S2SV_ModStart> ) { } <S2SV_ModEnd> i ++ ;,0
590,<S2SV_ModStart> char * buf [ 2 <S2SV_ModEnd> ] ) { <S2SV_ModStart> return 0 ; <S2SV_ModEnd> } if ( <S2SV_ModStart> if (! strlen ( p ) ) { <S2SV_ModStart> ) ) { if ( strlen ( p ) == 0 ) { return 0 ; } <S2SV_ModEnd> return 0 ; <S2SV_ModStart> } if ( <S2SV_ModEnd> ( strlen ( <S2SV_ModStart> ) ) { <S2SV_ModEnd> return 0 ; <S2SV_ModStart> ++ ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ) ) { <S2SV_ModEnd> return 1 ; <S2SV_ModStart> + 1 ; } <S2SV_ModEnd> return 0 ;,0
591,"<S2SV_ModStart> int tagval, uint32 <S2SV_ModEnd> * length )",1
592,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> mutex_lock ( & <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( sock,0
593,<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd> ) ; },0
594,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct <S2SV_ModEnd> struct task_context ( <S2SV_ModStart> -> io_context ; task_lock ( task <S2SV_ModEnd> ) ; task <S2SV_ModStart> ; task_context ( task <S2SV_ModEnd> ) ; task,0
595,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs ) ;",0
596,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
597,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
598,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
599,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
600,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
601,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
602,,0
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> cp = 0 <S2SV_ModStart> = 0 ; if ( <S2SV_ModEnd> == 0 ) <S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( cp ++ <S2SV_ModStart> = 0 ; if ( <S2SV_ModEnd> if ( cp <S2SV_ModStart> ) { if ( cp <S2SV_ModStart> == 0 ) { if ( cp ++ ; } if ( cp ++ ) { if ( cp ++ ) cp ++ ; if ( cp ++ ) { if ( cp ++ ) return - 1 ; } if ( cp ++ ) { if ( cp ++ ; } if ( cp ++ ) { if ( cp ++ ) { if ( cp ++ ) { if ( cp ++ ; } } if ( cp ++ ) { if ( cp ++ ) { if ( cp ++ ; } else { if ( cp ++ ) return 1 ; } } } } <S2SV_ModEnd> if ( cp ++ <S2SV_ModStart> == '\\0' ) { if (! <S2SV_ModStart> == '\\0' ) { if ( cp ++ ) { if ( cp ++ ) { if ( cp ++ ; } } } } else { if ( cp ++ ) { if ( cp ++ ) { if ( cp ++ ) return 1 ; } } } } else { if ( cp ++ ; },0
604,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
605,<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; if,0
606,<S2SV_ModStart> break ; } memset <S2SV_ModEnd> ( b ->,0
607,,0
608,<S2SV_ModStart> int idx ; unsigned int count ; <S2SV_ModStart> -> count ; count = kcontrol -> count ; <S2SV_ModStart> ; idx < <S2SV_ModEnd> count ; idx,1
609,<S2SV_ModStart> uint8_t * m,0
610,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
611,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
612,<S2SV_ModStart> ( TEMP_FAILURE ) <S2SV_ModEnd> ; if (,0
613,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
614,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
615,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> int mi_row ; const <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( cm, <S2SV_ModStart> } memset <S2SV_ModEnd> ( cm,",0
616,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
617,<S2SV_ModStart> i ) ; ei -> i_blocks = 0 ;,0
618,<S2SV_ModStart> ) goto unlock <S2SV_ModEnd> ; if (,0
619,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
620,"<S2SV_ModStart> void write_buffer ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
621,<S2SV_ModStart> ; if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; },0
622,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context ->,0
623,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
624,<S2SV_ModStart> ; memset <S2SV_ModEnd> ( xd ->,0
625,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> ENC624J600_OK <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC624J600_OK ) ; size_t len = 0 <S2SV_ModStart> ( interface, ENC624J600_OK ) ; if ( status & ENC624J600WriteReg ( ENC624J600_OK )!= 0 ) { ENC624J600WriteReg ( ENC624J600WriteReg ( & ENC624J600_OK ) ; goto error ; } status = 0 ; <S2SV_ModStart> ( interface, ENC624J600WriteReg ( interface, ENC624J600_OK <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, ENC624J600_OK ) ; <S2SV_ModStart> ( interface, ENC624J600WriteReg ( interface, ENC624J600_EIR, ENC624J600WriteReg ( status <S2SV_ModEnd> ) ; <S2SV_ModStart> ( interface, ENC624J600_ERX624J600_BUFFER <S2SV_ModEnd> ) ; }",0
626,<S2SV_ModStart> ] == 0x01 && i <,0
627,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
628,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
629,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
630,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
631,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
632,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
633,<S2SV_ModStart> handle ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
634,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> u16_t u32 u32 u32 u32 <S2SV_ModEnd> u32 u32 <S2SV_ModStart> int u32 len ; if ( u32 u32 <S2SV_ModEnd> ( u32 <S2SV_ModStart> ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> uint8_t ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> + 1 ) return 0 <S2SV_ModEnd> ; } } <S2SV_null>,0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
636,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( interface, KSZ8851_R_TX_PTR ( interface, KSZ8851_R_RX <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_R_RX <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_R_PTR ( interface, KSZ8851_RX <S2SV_ModEnd> ) ; }",0
637,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
638,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } if (,0
639,<S2SV_ModStart> 0 ; } <S2SV_ModEnd> return - 1 ;,0
640,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits,0
641,<S2SV_ModStart> ; printf ( stderr <S2SV_ModEnd> ) ; },0
642,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
643,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
644,<S2SV_ModStart> 2 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,1
645,<S2SV_ModStart> bck ) ; },0
646,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
647,<S2SV_ModStart> dentry ) ; <S2SV_ModEnd> if (!,0
648,"<S2SV_ModStart> int plane ; vpx_writer <S2SV_ModEnd> ( w,",0
649,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE ( VP9_COMMON * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * const xd, MACROBLOCKD * const xd, xd -> mi_row, xd, xd -> mi_row, xd, xd -> mi_row, xd -> mi_row, xd, xd -> mi_row, xd, xd -> mi_row, mi_row, xd -> plane [ 0 ] = 0 ;",0
650,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
651,"<S2SV_ModStart> -> columns, MagickMax ( number_planes_filled <S2SV_ModEnd> ) ; }",0
652,<S2SV_ModStart> size ) ; <S2SV_ModEnd> return 0 ;,0
653,"<S2SV_ModStart> if ( fa ) { xfs_to_dinode ( dip, XFS_FORK ) ; return 0 ; } if ( xfs_fork ( dip, mp ) ) { return fa ; } <S2SV_ModEnd> if ( dip <S2SV_ModStart> if ( fa ) { if ( dip!= XFS_FORK ) return AVERROR_INVALIDDATA ; }",0
654,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( ctx ->,0
655,<S2SV_ModStart> ) ; } quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
656,<S2SV_ModStart> event ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
657,<S2SV_ModStart> ) ) ; ND_TCHECK ( tptr [ tptr + 1 ] ) ;,0
658,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
659,,0
660,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return 0 ;,0
661,<S2SV_ModStart> ; if ( <S2SV_ModEnd> buffer >= 0 &&,0
662,"<S2SV_ModStart> = 0 ; memset ( & info -> id, 0, 0 ) ;",0
663,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; }",0
664,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; dev ->,0
665,"<S2SV_ModStart> ) ; } memset <S2SV_ModEnd> ( dst,",0
666,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC624J600_ECON1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> ) ; }",0
667,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; int <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; psf ->,0
668,<S2SV_ModStart> ctx ) { <S2SV_ModEnd> ctx -> priv,0
669,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> cpi -> <S2SV_ModStart> ; const VP9EncoderConfig <S2SV_ModEnd> ; const VP9EncoderConfig <S2SV_ModStart> ; const VP9EncoderConfig <S2SV_ModEnd> * const cm = <S2SV_ModStart> ; const VP9EncoderConfig <S2SV_ModEnd> ; sf -> <S2SV_ModStart> ; sf = cm -> <S2SV_ModEnd> ; sf -> <S2SV_ModStart> ; sf -> <S2SV_ModEnd> ; sf -> <S2SV_ModStart> ; sf = vp9_zero <S2SV_ModEnd> ; sf -> <S2SV_ModStart> ; sf -> <S2SV_ModEnd> ; sf -> <S2SV_ModStart> ; sf = 0 <S2SV_ModEnd> ; sf -> <S2SV_ModStart> ; sf -> <S2SV_ModEnd> ; sf ->,0
670,"<S2SV_ModStart> } ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
671,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
672,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
673,"<S2SV_ModStart> char * name, const char * args <S2SV_ModEnd> ; char * <S2SV_ModStart> ; if (! str ) { Py_DECREF ( n ) ; return NULL ; } if ( n < 0 ) { Py_DECREF ( n ) ; break ; } if (! strcmp ( n ) ) { Py_DECREF ( n ) ) ; return NULL ; }",0
674,<S2SV_ModStart> vpx_codec_err_t res ; const VPX_CODEC_COMMON * svc_ctx = NULL ; <S2SV_ModStart> } else { if ( svc_ctx -> svc_type == VPX_CODEC_CODEC_INTERNAL_ERROR ) { svc_ctx -> svc_ctx = 1 ; } <S2SV_ModStart> } else { if ( svc_ctx -> temporal_mode == VPX_CODEC_ERROR ) { if ( svc_ctx -> temporal_mode == VPX_CODEC_ERROR ) { case VPX_CODEC_CODEC_ERROR : 0 ; break ; } } } } else { case VPX_CODEC_INTERNAL_ERROR : return 1 ; },0
675,<S2SV_ModStart> event ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
676,"<S2SV_ModStart> ) ; } memset ( mb, 0, sizeof ( mb ) ) ;",0
677,<S2SV_ModStart> * data ; <S2SV_ModEnd> return NULL ;,0
678,,1
679,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if (,0
680,<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> size < 0 ),0
681,<S2SV_ModStart> ; uint32_t eth_len = 0 <S2SV_ModStart> pkt_len ; } if (! av_len ) goto error ; if (,0
682,<S2SV_ModStart> ; if (,0
683,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
684,<S2SV_ModStart> ) ; goto out_free <S2SV_ModEnd> ; } },0
685,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> rc -> avg_frame_frame_frame_frame_frame_frame_frame <S2SV_ModStart> = 0 ; if ( cpi -> avg_frame_frame_frame_frame_frame_frame_frame == KEY_FRAME ) { if ( cpi -> avg_frame_frame == KEY_FRAME ) return rc <S2SV_ModEnd> ; } <S2SV_null>,0
686,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct vpx_read_bit_mode <S2SV_ModEnd> * r, <S2SV_ModStart> ) return vpx_read_bit <S2SV_ModEnd> ( r, <S2SV_ModStart> ) ; vpx_read_bit <S2SV_ModEnd> ( r,",0
687,"<S2SV_ModStart> : # line 113 <S2SV_ModEnd> ""re_re_re_re_re_re_re_re_re_re_re_re_re_re ( ( ( ) ) ) { yr_re_re_re_re_re_re ( ( ( ( ""re_re_re_re_re_re_re_re_re_re_re_re_re_re_re_re_re_re ( ) ) ) ; ( ( ( * ) ) ) { ( ( ( ( * ). re_re_re_re_re_re_re_re_re_re_re_re_re_re_re_re_re_re_re_re_re_re_re_re_re_re_re_re_re ( ) ) ) ( ( ( ( ) ) ) ) - ( ( ( ( ( ( * ) ) ) ) - ( ( ( ( ( * ) ) ) ) - ( ( ( ( ( * ) ) ) ) ). re_re_re_re_re_re_re_re_re_re_re_re_re_re_re_re_re_re",0
688,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> MACROBLOCK * const MACROBLOCK * const MACROBLOCK * const MACROBLOCK * const xd = & cpi -> mb ; MACROBLOCKD * const MACROBLOCKD * const xd = & td -> mb ; MACROBLOCKD * const xd = & td -> mb ; MACROBLOCKD * const xd = & cpi -> mb ; MACROBLOCK_SIZE tx_size ; MACROBLOCK_SIZE tx_size = & cpi -> mb ; # if CONFIG_VP9_OFFSET ( cpi -> mbmi. mbmi. mbmi. mbmi. mbmi ) ; # if CONFIG_VP9_VP9_OFFSET ( cpi -> mbmi. mbmi. mbmi. mbmi. mbmi. segment_id, cpi -> segment_id, & cpi -> segment_id ) ; # if CONFIG_VP9_COUNTS * const uint8_t * const uint8_t",0
689,,0
690,<S2SV_ModStart> ; if ( <S2SV_ModEnd> addr == 0,0
691,<S2SV_ModStart> 0 ; } <S2SV_ModEnd> return ret ;,0
692,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
693,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
694,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( msg,0
695,"<S2SV_ModStart> } ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, 0 )",0
696,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
697,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
698,<S2SV_ModStart> mq_ops ) { <S2SV_ModEnd> if ( q,0
699,<S2SV_ModStart> uint16 * s <S2SV_ModEnd> ; struct stream,0
700,<S2SV_ModStart> val ) { zval_cache_val <S2SV_ModEnd> ( & tmp <S2SV_ModStart> val ) ; },0
701,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
702,<S2SV_ModStart> char * buf <S2SV_ModEnd> ; if (,0
703,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static_null> <S2SV_null> <S2SV_null> static_null> <S2SV_null> static_null>,0
704,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
705,<S2SV_ModStart> int mi_cols ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm ->,0
706,<S2SV_ModStart> ; if ( lookup_type == NULL ) { PyErr_type = 1 ; goto failed ; } if ( new_type == NULL ) { return NULL ; } if (,0
707,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
708,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ; if ( <S2SV_ModEnd> int i = 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd> == 0 ) <S2SV_ModStart> ; break ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> == 0 ) <S2SV_ModStart> ; break ; <S2SV_ModEnd> if ( context -> <S2SV_ModStart> 0 ) { if ( i < 2 ) return 0 ; <S2SV_ModStart> ; } } if ( i < 4 ) { if ( i -> cur_p -> cur_p -> curY >= 8 ) return 1 ; <S2SV_ModStart> ; i += 4 ; <S2SV_ModEnd> if ( i < 4 <S2SV_ModStart> ; i ++ i -> cur_p -> cur_p -> curY = i < 4 ; <S2SV_ModStart> ; i ++ i -> curY ) { if ( i ++ i -> curY ) { <S2SV_ModStart> ; break ; } <S2SV_ModEnd> } break ; <S2SV_ModStart> ; } } } <S2SV_ModEnd> } break ; <S2SV_ModStart> } break ; <S2SV_ModEnd> } # endif,0
709,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
710,"<S2SV_ModStart> ( cp, <S2SV_ModEnd> ) == 0",0
711,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> } if ( ( strlen ( int ) <S2SV_ModStart> char * name = strlen ( int ) <S2SV_ModStart> ; if ( strlen ( strlen ( name, ""\\0"" ) ) == '\\0' ) { char * name = '\\0' ; if ( strlen ( name, ""\\0"" ) == '\\0' ) ; return 0 ; } if ( strlen ( strlen ( ""\\0' ) == '\\0' ) { int ) ; <S2SV_ModStart> 0' ; } if ( strlen ( strlen ( name, ""\\0' ) == '\\0' ) { fprintf ( ""Error: <S2SV_blank> %s\\0"", ""\\0', ""\\0' ) ; return 0 ; } <S2SV_ModStart> 0' ; } if ( strlen ( strlen ( int ) == '\\0' ) { int ) { int type = '\\0' ; for ( i = 0 ; } if ( strlen ( strlen ( strlen ( int ) == '\\0' ) == '\\0' ) { int ) ; return 0 ; }",0
712,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ipv_zero ( net -> ipv4. ipv4.,0
713,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj,",0
714,"<S2SV_ModStart> void vpx_writer <S2SV_ModEnd> * w,",0
715,<S2SV_ModStart> 0 ) { kfree ( ctx ) ;,0
716,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> out ) ; <S2SV_ModEnd> return err ;,0
717,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
718,<S2SV_ModStart> ; g_valid_data_data_size = 0 <S2SV_ModEnd> ; if (,0
719,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> VP9_COMMON ( VP9_COMMON <S2SV_ModEnd> * cm, <S2SV_ModStart> int tile_row, tile_col, tile_row, tile_col, tile_col, tile_col, tile_col, tile_col ) ; memset ( cm, tile_col, tile_col, tile_col, tile_col ) ; memset ( & tile_col, tile_col, tile_col, tile_col, tile_col, tile_col, tile_col ) ; memset ( cm, tile_col, tile_col, tile_col, tile_col, cm -> tile_col, tile_col, tile_col, tile_col, tile_col ) ) ; memset ( cm -> tile_col, tile_col, tile_col, tile_col, tile_col, tile_col, tile_col, tile_col, tile_data -> tile_col ) ) ; memset ( cm -> tile_col, tile_col, tile_col, tile_col, tile_col, cm -> tile_cols,",0
720,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> vp9_decode ( VP9_COMMON <S2SV_ModStart> intra_decode ) { VP9_COMMON * const VP9_COMMON * const cm = & cm -> common ; MACROBLOCKD * const cm = & cm -> frame_data [ 0 ] ; vpx_decode = & cm -> frame_data [ 0 ] ; vpx_decode = 0 ; vpx_get_decode ( cm -> frame_decode ) ; vp9_decode_decode = 0 ; if (! cm -> frame_decode ) { vp9_decode_decode_decode = 0 ; vpx_get_decode ( & cm -> frame_decode ) ; vpx_decode = 0 ; } # if CONFIG_VP9_HIGHBITDEPTHREADS2SV_null> <S2SV_null>,0
721,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
722,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct <S2SV_ModStart> req_null> static struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> ; if ( opt ) return <S2SV_ModEnd> ; if (,0
723,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
724,<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( ctx -> flags & VPX_CODEC_COMMON * ) { vpx_codec_alg_priv_t * ctx = NULL ; if ( ctx -> flags & ctx -> flags & ctx -> flags & VPX_CODEC_CODEC_KEY_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME ) ) { if (! ( ctx ) ) { ctx = 0 ; } else { ctx = 0 ; } else { ctx = ( ctx -> flags & VPX_CODEC_COMMON * ) ; } else { if (! ctx -> flags & ctx -> flags & ctx -> flags & ctx -> flags & VPX_CODEC_CODEC_OK ) { ctx = 0 ; } else { ctx -> flags = 0 ; } else { ctx -> flags = 0 ; } else { if ( ctx -> flags & ctx -> flags & VPX_CODEC_ENC_REFERENCE_CODEC_CODEC_,0
725,"<S2SV_ModStart>, & len, 0",1
726,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
727,<S2SV_ModStart> int rc ; const VP9EncoderConfig <S2SV_ModEnd> * oxcf =,0
728,<S2SV_ModStart> char buf [ jas_uchar <S2SV_ModEnd> ] ; jas_uchar,0
729,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> VP9_COMP_COMMON * const MACROBLOCK * const x = & cpi -> common ; MACROBLOCKD * const x = & cpi -> common ; MACROBLOCKD * const x = & cpi -> common ; MACROBLOCKD * const x = & cpi -> common ; MACROBLOCK_SIZE bsize = & cpi -> common ; MACROBLOCKD * const x = & cpi -> mi_row ; MACROBLOCK_SIZE bsize = & cpi -> common ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8x8, mi_row, x -> mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, x -> mi_row, mi_col, mi_col, mi_col, mi_col,",0
730,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; } <S2SV_null>,0
731,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> int bit_depth_depth_per_depth <S2SV_ModStart> int bit_depth ; int bit_depth_depth_depth = 0 <S2SV_ModStart> ) { if ( bit_depth > 0 ) { return AVERROR_INVALID_INVALIDDATA ; } <S2SV_ModStart> { if (! bit_depth_depth_depth_depth ) { if ( bit_depth > 0 ) return 0 ; <S2SV_ModStart> { if ( bit_depth_depth = 0 ; if ( bit_depth < 0 ) return 0 ; <S2SV_ModStart> } else { int i = 0 ; <S2SV_ModStart> } else { if ( bit_depth > 0 ) { if ( bit_depth > 0 ) { if ( bit_depth > 0 ) { return 1 ; } <S2SV_ModStart> } else { if ( bit_depth > 0 ; <S2SV_ModStart> } else { if ( bit_depth > 0 ) return 1 ; } else { if ( bit_depth > 0 ; } else { if ( bit_depth > 0 ) { return AVERROR_INVALIDDATA ; },0
732,,0
733,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
734,<S2SV_ModStart> -> packet_len = 0 ;,0
735,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
736,<S2SV_ModStart> * r ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
737,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
738,<S2SV_ModStart> ; if ( <S2SV_ModEnd> && inet ->,0
739,<S2SV_ModStart> len < 0,0
740,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
741,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> S_null> <S2SV_null> <S2SV_null>,0
742,<S2SV_ModStart> 1 ) { sprintf ( outputbuffer <S2SV_ModEnd> ) ; },0
743,<S2SV_ModStart> ) ) ; if <S2SV_ModEnd> ( rdp ->,0
744,<S2SV_ModStart> { memset <S2SV_ModEnd> ( cm ->,0
745,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
746,<S2SV_ModStart> * data ; struct stream packet = * s ;,0
747,<S2SV_ModStart> pbi ) { <S2SV_ModEnd> if (!,0
748,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
749,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
750,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
751,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
752,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
753,<S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> coef_probs [ TX_SIZE,0
754,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
755,<S2SV_ModStart> } if ( d -> data [ 0 ] == 0 || d -> data [ 2 ] == 0x80 ; state -> data [ 2 ] = 0x80 ; state -> data [ 0 ] = 0x80 ; state -> data [ 2 ] = 0x80 ; state -> data [ 0 ] = 0x80 ; state -> data [ 2 ] = 0x80 ; state -> data [ 2 ] = 0x80 ; state -> data [ 0 ] = 0x80 ; state -> data [ 0 ] = 0x80 ; state -> data [ 0 ] = 0x80 ; state -> data [ 0 ] = 0x80 ; state -> data [ 2 ] = 0x80 ; state -> data [ 0 ] = 0x80 ; state -> data [ 0 ] = 0x80 ; state -> data [ 3 ] = 0x80 ; state -> data [ 3 ] = 0x80 ; state -> data [ 3 ] = 0x80 ; state -> data [ 3 ] = 0x80 ; state -> data [ 0 ] = 0x80 ; state -> data [ 0 ] = 0x80 ; state -> data [ 3 ] = 0x80 ; state -> data [ 0 ] = 0x80,0
756,<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> ; if (,0
757,"<S2SV_ModStart> const VP9_COMMON * const <S2SV_ModEnd> const uint8_t * <S2SV_ModStart> * row, vpx_mbd_row, <S2SV_ModEnd> const uint8_t * <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( yv_stride, <S2SV_ModStart> 0 ) ; memset <S2SV_ModEnd> ( y_stride, <S2SV_ModStart> 0 ) ; memset <S2SV_ModEnd> ( y_stride,",0
758,"<S2SV_ModStart> ; bufp = buf_size <S2SV_ModEnd> ( buf,",0
759,<S2SV_ModStart> * cJSON_CreateNumber <S2SV_ModEnd> ( const int,0
760,<S2SV_ModStart> break ; } task -> tk_rebind_retry = 0 ;,0
761,"<S2SV_ModStart>, n ) ; if ( w == NULL ) return 0",1
762,"<S2SV_ModStart> int i ; memset ( & buf, 0, sizeof ( buf ) ) ;",0
763,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int i ; VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const tile_data = & tile_data -> tile_data [ tile_data -> tile_data [ tile_data ] ; memset ( & tile_data -> tile_data, cm -> tile_data, tile_data, tile_data, & tile_data -> tile_data -> tile_data, & tile_data -> tile_data -> tile_data ) ; memset ( & tile_info, 0, 0, sizeof ( pbi -> tile_data ) ) ) ; memset ( pbi -> tile_data, 0 ) ; memset ( pbi, 0, 0, 0, 0, 0, 0, 0 ) ; # if CONFIG_VP9_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH ) { VP9_HIGHBITDEPTH",0
764,<S2SV_ModStart> if ( len < 8 ) return AVERROR_INVALIDDATA ;,0
765,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int segfeature_active ( VP9_COMMON * segfeature_active ( seg, segfeature_active <S2SV_ModEnd> ) { int <S2SV_ModStart> ) { int seg_active = 0 ; memcpy <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ; if ( segfeature_active_active_active <S2SV_ModEnd> ( seg, <S2SV_ModStart> 0 ) ; memcpy <S2SV_ModEnd> ( segfeature_active, <S2SV_ModStart> ) ; } memset <S2SV_ModEnd> ( segfeature_active <S2SV_ModEnd> ( seg,",0
766,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
767,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
768,<S2SV_ModStart> ; ps_dec -> <S2SV_ModEnd> ; ps_dec ->,0
769,<S2SV_ModStart> -> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock,0
770,"<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
771,<S2SV_ModStart> { int a = 0 <S2SV_ModEnd> ; if (,0
772,,0
773,<S2SV_ModStart> ) ; } kfree ( buf ) ;,0
774,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
775,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NULL ; struct sockaddr_socket_socket_socket ( struct sockaddr * ) <S2SV_ModStart> = NULL ; if ( sockaddr == NULL ) { if ( sockaddr == NULL ) { <S2SV_ModEnd> return - 1 <S2SV_ModStart> ; } else { <S2SV_ModEnd> return - 1 <S2SV_ModStart> ; } <S2SV_null> <S2SV_null>,0
776,<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi ->,0
777,"<S2SV_ModStart> PERF_COUNT_SW_EMULATION_FAULTS, 1 <S2SV_ModEnd>, regs,",0
778,<S2SV_ModStart> ) ) ; ND_TCHECK ( bp -> bp [ 0 ] ) ;,0
779,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
780,"<S2SV_ModStart> int mptctl_eventreport ( MPT_ADAPTER * ioc, <S2SV_ModStart> int mpt_ioctl_targetinfo <S2SV_ModEnd> ; if ( <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } <S2SV_null>",0
781,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> image -> columns ; if ( CorruptImageHeader ( CorruptImageError, ""InsufficientImageHeader"" ) ) { CorruptImageHeader ( CorruptImageError, ""InsufficientImageHeader"" ) ; return ( Image * ) ; } <S2SV_ModStart>, image -> columns, ""InsufficientImageHeader"" ) <S2SV_ModEnd> ; } <S2SV_null>",0
782,<S2SV_ModStart> ( JAS_CAST ( jas_uchar <S2SV_ModEnd> ) ) {,0
783,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> } if (,0
784,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int vpx_read_bit <S2SV_ModEnd> ( r, <S2SV_ModStart> int vpx_read_read_bit ( vpx_read_bit <S2SV_ModEnd> ( r, <S2SV_ModStart> 1 ) ; vpx_read_bit <S2SV_ModEnd> ( r,",0
785,"<S2SV_ModStart> * probs, vpx_prob <S2SV_ModEnd> * probs,",0
786,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r )",0
787,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
788,"<S2SV_ModStart> ndo, opt_len <S2SV_ModEnd> ) ; }",0
789,<S2SV_ModStart> * tree ; <S2SV_ModEnd> return NULL ;,0
790,<S2SV_ModStart> key ) ; <S2SV_ModEnd> return ret ;,0
791,<S2SV_ModStart> skb -> len && skb -> len,0
792,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
793,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
794,"<S2SV_ModStart> -> cac_id, false",0
795,<S2SV_ModStart> ; # endif tok ->,0
796,,0
797,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
798,<S2SV_ModStart> ( buf [ 0 ] <S2SV_ModEnd> ] = 0,0
799,,0
800,"<S2SV_ModStart> = 0 ; size_t addrlen_out = 0 ; <S2SV_ModStart>, & addrlen_out, & addrlen_out <S2SV_ModEnd> ) ; }",0
801,,1
802,"<S2SV_ModStart> ) ) ; if (! <S2SV_ModStart>, s ) ) return FALSE",0
803,<S2SV_ModStart> ) ) { struct ipv6_txoptions * opt ; <S2SV_ModStart> -> opt = rcu_dereference ( <S2SV_ModEnd> np -> opt <S2SV_ModStart> np -> opt ) ; rcu_read_unlock ( ) ; <S2SV_ModEnd> if ( fl6,0
804,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> null> <S2SV_null> <S2SV_null> <SV_null> <S2SV_null> <S2SV_null> <S2SV_ModStart> null> <S2SV_null> <SV_null> <S2SV_null> <S2SV_null>,0
805,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> dm9000WriteReg ( DM9000ReadReg ( DM9000_P <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( dm9000ReadReg ( DM9000_M <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ) ; dm9000WriteReg ( DM9000_M <S2SV_ModEnd> ) ; dm9000ReadReg ( DM9000ReadReg ( DM9000_M <S2SV_ModEnd> ) ; if <S2SV_ModStart> } dm9000WriteReg ( DM9000_M <S2SV_ModEnd> ) ; dm9000ReadReg <S2SV_ModStart> } dm9000WriteReg ( DM9000_M <S2SV_ModEnd> ) ; },0
806,<S2SV_ModStart> if ( buffer >,0
807,<S2SV_ModStart> new_parent ) { <S2SV_ModEnd> if ( child,0
808,<S2SV_ModStart> rc = - 1 <S2SV_ModEnd> ; if (,0
809,<S2SV_ModStart> size_t err = 0,0
810,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> * const <S2SV_ModStart> int num_mv = vpx_err_mv_err_mv_mv_err_mv <S2SV_ModEnd> ( & cpi <S2SV_ModStart> intra_mv, vpx_err_mv_err_err_mv_mv_err_mv_mv_err_mv, <S2SV_ModStart> size ) ; if ( x -> mv_mv_err_mv_err_mv_mv_err_mv, & cpi -> common. mv_mv_mv_err_mv_mv_err_mv_err_mv, & x -> mv_mv_mv_mv_err_mv_err_mv_err_mv, int64_t * num_mv, int64_mv_mv_mv_mv_err_err_mv_mv, int64_mv_mv_mv_err ; int64_mv",0
811,<S2SV_ModStart> ; h = h <S2SV_ModEnd> ; if (,0
812,<S2SV_ModStart> ) ) { <S2SV_ModEnd> if (!,0
813,<S2SV_ModStart> ( msg_name ) <S2SV_ModEnd> ; if (,0
814,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
815,<S2SV_ModStart> ( ssh ) <S2SV_ModEnd> return 0 ;,0
816,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
817,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
818,<S2SV_ModStart> ( u ) <S2SV_ModEnd> ; if (,0
