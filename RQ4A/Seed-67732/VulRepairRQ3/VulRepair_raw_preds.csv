,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; ath9k_kfree_skb ( skb ) ;,0
1,<S2SV_ModStart> ; if ( unlikely ( unfrag_ip6hlen < frag_hdr_sz + sizeof ( struct frag_hdr ) ) ) { kfree_skb ( skb ) ; return ERR_PTR ( unfrag_ip6hlen ) ; } <S2SV_ModStart> ; if ( unlikely ( unfrag_ip6hlen < frag_hdr_sz + sizeof ( struct frag_hdr ) ) ) { kfree_skb ( skb ) ; return ERR_PTR ( unfrag_ip6hlen ) ; } if ( unlikely ( unfrag_len > frag_hdr_sz + sizeof ( struct frag_hdr ) ) ) { kfree_skb ( skb ) ; return ERR_PTR ( unfrag_ip6hlen ) ; } <S2SV_ModStart> ; if ( unlikely ( unfrag_ip6hlen < frag_hdr_sz + sizeof ( struct frag_hdr ) ) ) { kfree_skb ( skb ) ; return ERR_PTR ( unfrag_ip6hlen ) ; },0
2,<S2SV_ModStart> writer = ( TrackWriter <S2SV_ModEnd> * ) gf_list_get,0
3,<S2SV_ModStart> item ) { return <S2SV_ModEnd> cJSON_GetArrayItem ( array <S2SV_ModStart> -> child ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
4,"<S2SV_ModStart> u32 event_id, <S2SV_ModEnd> u64 nr, <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",0
5,"<S2SV_ModStart> { char * buf <S2SV_ModEnd> ; # if <S2SV_ModStart> { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } buf = grub_malloc ( EXT2_BLOCK_SIZE ( data ) ) ; if (! buf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } <S2SV_ModStart> { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) ( leaf + 1 ) ; for ( i = 0 ; i < grub_le_to_cpu16 ( leaf -> entries ) ; i ++ ) { if ( fileblock < grub_le_to_cpu32 ( ext [ i ]. block ) ) { fileblock -= grub_le_to_cpu32 ( ext [ i ]. block ) ; if ( fileblock >= grub_le_to_cpu32 ( ext [ i ]. len ) ) return 0 ; } else { grub_disk_addr_t start ; start = grub_le_to",0
6,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fdct16 ( const <S2SV_ModStart> 16 ], tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> 16 ] ) { tran_high_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> 8 ] ; tran_high_t temp1, temp2 ; input [ 0 ] = in [ 0 ] + in [ 15 ] ; input [ 1 ] = in [ 1 ] + in [ 14 ] ; input [ 2 ] = in [ 2 ] + in [ 13 ] ; input [ 3 ] = in [ 3 ] + in [ 12 ] ; input [ 4 ] = in [ 4 ] + in [ 11 ] ; input [ 5 ] = in [ 5 ] + in [ 12 ] ; input [ 6 ] = in [ 6 ] - in [ 10 ] ; step1 [ 7 ] = in [ 0 ] - in [ 15 ] ; { tran_high_t s0, s1, s2, s3, s4, s5, s6",0
7,"<S2SV_ModStart> = 0 ; unsigned char sense_buffer [ SCSI_SENSE_BUFFERSIZE ] ; unsigned char sense_buffer [ SCSI_SENSE_BUFFERSIZE ] ; <S2SV_ModStart> cgc -> sense, & sense_buffer, cgc -> timeout, IOCTL_RETRIES, 0, 0, NULL ) ; if ( cgc -> sense ) memcpy ( cgc -> sense, sense_buffer, sizeof ( * cgc -> sense ) ) ; result = scsi_execute ( SDev, cgc -> cmd, cgc -> data_direction, cgc -> buffer, cgc -> buflen, cgc -> sense, & sshdr, cgc -> timeout, IOCTL_RETRIES, 0, 0, NULL ) ; if ( result < 0 ) { err = - EIO ; goto out ; } result = scsi_execute ( SDev, cgc -> cmd, cgc -> data_direction, cgc -> buffer, cgc -> buflen, cgc -> sense, & sshdr, cgc -> timeout, IOCTL_RETRIES, 0, 0, NULL ) ; if ( result < 0 ) { err = - EIO ; goto",0
8,"<S2SV_ModStart> ( ) == 0x48454150 ) { imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; } else { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; # endif parse_ciff ( save + hlen, len - hlen, 0 ) ; } else if ( get4 ( ) == 0x48454150 ) { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; # endif",0
9,"<S2SV_ModStart> void search_filter_level ( <S2SV_ModEnd> const YV12_BUFFER_CONFIG * <S2SV_ModStart> * sd, VP9_COMMON * common, <S2SV_ModStart> partial_frame ) { VP9_COMMON * const cm = & cpi -> common ; struct loopfilter <S2SV_ModEnd> * const lf <S2SV_ModStart> cpi ) ; <S2SV_ModEnd> const int min_filter_level <S2SV_ModStart> = get_max_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int filter_step = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; int <S2SV_ModEnd> filt_mid = clamp <S2SV_ModStart> / 4 ; VP9_COMMON * const cm = & cpi -> common ; struct loopfilter * const lf = & cpi -> lf ; int <S2SV_ModEnd> filt_direction = 0 <S2SV_ModStart> ( cpi ) ; memset ( ss_err, 0xFF, sizeof ( ss_err ) ) ; vpx_yv12_copy_y ( cm -> frame_to_show, & cpi -> last_frame_uf ) ; best_err = try_filter_frame ( sd, cpi, filt_mid,",0
10,"<S2SV_ModStart> left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",0
11,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( w, mvcomp -> sign ) ; vpx_write_token ( w, vp9_mv_class_tree, mvcomp -> classes, & mv_class_encodings [ mv_class ] ) ; if ( mv_class == MV_CLASS_0 ) { vpx_write_token ( w, vp9_mv_class0_tree, mvcomp -> class0, & mv_class0_encodings [ d ] ) ; } else { int i ; for ( i = 0 ; i < n ; ++ i ) vpx_write ( w, ( d >> i ) & 1, mvcomp -> bits [ i ] ) ; } vpx_write_token ( w, vp9_mv_fp_tree, mvcomp -> class0_fp [ d ] : mvcomp -> fp, & mv_fp_encodings [ fr ] ) ; if ( usehp ) vpx_write <S2SV_ModEnd> ( w,",0
12,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } else { <S2SV_ModEnd> request -> rxBlockSzx <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; } <S2SV_ModStart> ( ) ) { <S2SV_ModStart> ( ) ; },1
13,"<S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart>, ""Direction-#%u"", * ( ( const u_char * ) ptr ++ ) ) ) ; if ( length < 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> if ( length < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> if ( length < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; }",0
14,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> authkey ; kfree ( * _dest_keyring ) ; * _dest_keyring = NULL ; <S2SV_ModStart> ) ; } if ( dest_keyring ) { key_get ( dest_keyring ) ; } else { switch ( cred -> jit_keyring ) { case KEY_REQKEY_DEFL_DEFAULT : case KEY_REQKEY_DEFL_THREAD_KEYRING : dest_keyring = key_get ( cred -> thread_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_PROCESS_KEYRING : dest_keyring = key_get ( cred -> process_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_USER_SESSION_KEYRING : dest_keyring = key_get ( cred -> user -> session_keyring ) ; break ; case KEY_REQKEY_DEFL_GROUP_KEYRING : dest_keyring = key_get ( cred -> group_keyring ) ; break ; },0
15,<S2SV_ModStart> = create_spnego_ctx ( 0,0
16,"<S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_l2tpip <S2SV_ModEnd> ) ) return <S2SV_ModStart> - EINVAL ; if (! sock_flag ( sk, SOCK_ZAPPED ) ) return - EINVAL ; if ( addr -> l2tp_family!= AF_INET ) return - EINVAL ; if ( addr -> l2tp_addr. s_addr && addr -> l2tp_addr. s_addr && addr -> l2tp_addr. s_addr && addr -> l2tp_family!= AF_INET ) return - EINVAL ; ret = - EADDRINUSE ; read_unlock_bh ( & l2tp_ip_lock ) ; if ( __l2tp_ip_bind_lookup ( net, addr -> l2tp_addr. s_addr, sk -> sk_bound_dev_if, addr -> l2tp_conn_id ) ) goto out_in_use ; ret = - EADDRINUSE ; if ( addr -> l2tp_addr. s_addr && chk_addr_ret!= RTN_LOCAL && chk_addr_ret!= RTN_MULTICAST || chk_",0
17,<S2SV_ModStart> ; tm = g_time_to_tm <S2SV_ModEnd> ( & t,0
18,"<S2SV_ModStart> length ) ; if ( strlen ( password ) > MAXPASS ) { error ( ""Password <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", length, MAXPASS ) ; exit ( EXIT_FAILURE ) ; } <S2SV_ModStart> strlen ( password ) ) ; if ( strlen ( secret ) > MAXPASS ) { error ( ""Password <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", MAXPASS ) ; exit ( EXIT_FAILURE ) ; }",0
19,"<S2SV_ModStart> || e == p ) goto not_found ; r = parse_uid ( e + 1, & uid ) ; if ( r < 0 ) goto not_found ; machine = strndupa ( p, e - p ) ; if (! machine_name_is_valid ( machine ) ) { r = sd_bus_call_method ( bus, ""org.freedesktop.machine1"", ""/org/freedesktop/machine1"", ""org.freedesktop/machine1.Manager"", ""MapFromMachineUser"", & error, & reply, ""su"", ( uint32_t ) uid ) ; if ( r < 0 ) goto not_found ; goto fail ; } r = sd_bus_message_read ( reply, ""u"", & mapped ) ; if ( r < 0 ) goto not_found ;",0
20,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gidgid <S2SV_ModEnd> ( inode,",0
21,"<S2SV_ModStart> = 0 ; if (! FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { FD_SET ( reader -> bytes_available_fd, & read_fds ) ; return FALSE ; } if (! FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { FD_ZERO ( & read_fds ) ; FD_SET ( reader -> bytes_available_fd, & read_fds ) ; } else { if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { FD_SET ( reader -> bytes_available_fd, & read_fds ) ; return FALSE ; } if (! FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { FD_ZERO ( & read_fds ) ; FD_ZERO ( & read_fds ) ; } else { if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { FD_ZERO ( & read_fds ) ; FD_ZERO (",0
22,"<S2SV_ModStart> int detect_transition_to_still ( TWO_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> last_decay_rate ) { TWO_PASS <S2SV_ModEnd> * position = <S2SV_ModStart> ( frame_interval > MIN_GF_INTERVAL <S2SV_ModEnd> && loop_decay_rate >= <S2SV_ModStart> < 0.9 ) { TWO_PASS <S2SV_ModEnd> * position = <S2SV_ModStart> twopass -> stats_in ; FIRSTPASS_STATS tmp_next_frame ; for ( j = 0 ; j < still_interval ; ++ j ) { if ( EOF == input_stats ( twopass, & tmp_next_frame ) ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion <S2SV_ModEnd> < 0.999 ) <S2SV_ModStart> break ; } <S2SV_ModEnd> reset_fpf_position ( twopass <S2SV_ModStart> } return trans_to_still <S2SV_ModEnd> ; } <S2SV_null>",0
23,<S2SV_ModStart> return ret ; spin_lock ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart> inode ) ) { spin_unlock ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart> return ret ; } spin_unlock ( & EXT4_I ( inode ) -> i_mmap_sem ) ;,0
24,"<S2SV_ModStart> alg ) { pr_err <S2SV_ModEnd> ( ""%s"", <S2SV_ModStart> ( ""%s-all"", name ) ; return ERR_PTR ( - ENODEV ) ; } <S2SV_ModEnd> alg = crypto_alg_lookup <S2SV_ModStart> mask & CRYPTO_ALG_NEED_FALLBACK ) ) { pr_err <S2SV_ModEnd> ( ""%s-all"", <S2SV_ModStart> ( ""%s-all"", name ) ; return ERR_PTR ( - ENODEV ) ; } if ( crypto_is_larval ( alg ) ) return crypto_is_larval ( alg )? crypto_larval_wait ( alg ) : ERR_PTR ( - ENODEV ) ;",0
25,"<S2SV_ModStart> = GIT_PKT_NG ; if ( strlen ( line ) > len ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } <S2SV_ModStart> += 3 ; if ( strlen ( line ) > len ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line <S2SV_blank> length"" ) ; return - 1 ; } <S2SV_ModStart> = ptr + 1 ; if ( strlen ( line ) > len ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line <S2SV_blank> length"" ) ; return - 1 ; } <S2SV_ModStart> = '\\0' ; if ( strlen ( line ) > len ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line <S2SV_blank> length"" ) ; return - 1 ; } <S2SV_ModStart> = ptr + 1 ; if ( strlen ( line ) > len ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line <S2SV_blank> length"" ) ; return - 1 ; } <S2SV_ModStart> = ptr + 1 ; if ( strlen ( line ) > len ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line <S2SV_blank> length"" ) ;",0
26,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_request ( rdpNego <S2SV_ModStart> * nego, wStream <S2SV_ModEnd> * s ) <S2SV_ModStart> = NEGO_STATE_FINAL ; return TRUE ;",0
27,<S2SV_ModStart> 0 ) { if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; <S2SV_ModStart> 0 ) { if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; <S2SV_ModStart> 0 ) { if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; <S2SV_ModStart> 0 ) { if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; } <S2SV_ModStart> 0 ) { if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; } <S2SV_ModStart> 0 ) { if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; } <S2SV_ModStart> 0 ) { if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; } <S2SV_ModStart> 0 ) { if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; },0
28,"<S2SV_ModStart> 1 ; } ret = mount_entry_on_generic_nolock <S2SV_ModEnd> ( mntent,",0
29,"<S2SV_ModStart> - ENODEV ; io -> inputb = intf_mem_inb ; io -> outputb = intf_mem_outb ; io -> inputb = intf_mem_inw ; io -> outputb = intf_mem_outw ; io -> outputb = intf_mem_outl ; break ; case 1 : io -> inputb = intf_mem_inb ; io -> outputb = intf_mem_outb ; break ; case 2 : io -> inputb = intf_mem_inw ; io -> outputb = intf_mem_outw ; io -> outputb = intf_mem_outl ; break ; default : dev_warn ( io -> dev, ""Invalid <S2SV_blank> register <S2SV_blank> size: <S2SV_blank> %d\\n"", io -> regsize ) ; return - EINVAL ; } for ( idx = 0 ; idx < io -> io_size ; idx ++ ) { if ( request_mem_region ( addr + idx * io -> regspacing, io -> regsize, DEVICE_NAME ) == NULL ) { mem_region_cleanup ( io, idx ) ; return - EIO ; } } mapsize = ( ( io -> io_size * io",0
30,<S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> (,0
31,<S2SV_ModStart> ) ) ; if ( ret ) { btif_storage_del_bonded_device ( remote_bd_addr ) ; return BT_STATUS_FAIL ; } <S2SV_ModStart> ) ) ; if ( ret ) { btif_storage_del_bonded_device ( remote_bd_addr ) ; return BT_STATUS_FAIL ; },0
32,<S2SV_ModStart> vpx_codec_err_t res ; <S2SV_ModEnd> if (! <S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; if ( iface -> enc. cfg_maps == NULL ) return VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if ( iface -> caps & VPX_CODEC_CAP_ENCODER ) res = VPX_CODEC_INCAPABLE ; else if ( iface -> caps & VPX_CODEC_CAP_VIDEO ) res = VPX_CODEC_INCAPABLE ; else if ( iface -> caps & VPX_CODEC_CAP_VIDEO ) res = VPX_CODEC_INCAPABLE ; else { res = VPX_CODEC_INVALID_PARAM ; for ( map = iface -> enc. cfg_maps ; map -> usage >= 0 ;,0
33,"<S2SV_ModStart> type_flags ) { struct packet_rollover * rollover ; struct <S2SV_ModStart> EINVAL ; } mutex_lock ( & fanout_mutex ) ; rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if (! rollover ) { err = - ENOMEM ; rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if (! rollover ) { err = - ENOMEM ; rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if (! rollover ) { err = - ENOMEM ; rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if (! rollover ) { err = - ENOMEM ; rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if (! rollover ) { err = - ENOMEM ; rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if (! rollover ) { err = - ENOMEM ; rollover = kzalloc ( sizeof ( * rol",0
34,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
35,"<S2SV_ModStart> <S2SV_null> <S2SV_null> void show_progress ( int frame_in, int frame_out, uint64_t dx_time ) { if ( frame_in < 0 || frame_out < 0 || frame_out > UINT64_MAX ) { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out ) ; } else if ( frame_in < 0 || frame_out > UINT64_MAX ) { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out ) ; } else { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out ) ; }",0
36,"<S2SV_ModStart> Nullav ; } # if MYSQL_ASYNC if ( imp_sth -> use_server_side_prepare ) { if (! DBIc_ACTIVE ( imp_sth ) ) { do_error ( sth, JW_ERR_SEQUENCE, ""fetch() <S2SV_blank> but <S2SV_blank> fetch <S2SV_blank> already <S2SV_blank> done"", NULL ) ; return Nullav ; } } # endif # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION if ( imp_sth -> use_server_side_prepare ) { if (! DBIc_ACTIVE ( imp_sth ) ) { do_error ( sth, JW_ERR_SEQUENCE, ""fetch() <S2SV_blank> but <S2SV_blank> fetch <S2SV_blank> already <S2SV_blank> done"", NULL ) ; return Nullav ; } } if (! DBIc_ACTIVE ( imp_sth ) ) { do_error ( sth, JW_ERR_SEQUENCE, ""fetch() <S2SV_blank> but <S2SV_blank> fetch <S2SV_blank> already <S2SV_blank> done"", NULL ) ; return Nullav ; } if ( imp_sth -> done_desc ) { if (! dbd_describe ( imp_sth, NULL ) ) { do_error ( sth, JW_ERR_SEQUENCE, ""Error <S2SV_blank> while <S2SV_blank> describe <S2SV_blank> result",0
37,"<S2SV_ModStart> } enc28j60SetBit ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ETXSTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXSTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J",0
38,"<S2SV_ModStart> value ) ; value = ast2obj_int ( o -> lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o ->",0
39,"<S2SV_ModStart> ; if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""error"" ) ; http_response_send ( res ) ; return ; } } else if (! strcmp ( func, ""page/get"" ) ) { char * page = http_request_param_get ( req, ""page"" ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""error"" ) ; http_response_send ( res ) ; return ; } } else if (! strcmp ( func, ""page/delete"" ) ) { char * page = http_request_param_get ( req, ""page"" ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""error"" ) ; http_response_send ( res ) ; return ; } } else if (! strcmp ( func,",0
40,"<S2SV_ModStart> low_var_thresh, int * <S2SV_ModStart> flag ) { const int mb_rows = source -> mb_rows ; const int mb_cols = source -> mb_cols ; unsigned char * limits = cm -> pp_limits_buffer ; ( void ) post ; ( void ) low_var_thresh ; ( void ) low_var_thresh ; ( void ) low_var_thresh ; ( void ) post ; ( void ) low_var_thresh ; ( void ) flag ; for ( mbr = 0 ; mbr < mb_rows ; ++ mbr ) { vpx_post_proc_down_and_across_mb_row ( source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_stride, source -> y_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> u_buffer + 8 * mbr * source -> uv_stride, source -> uv_stride, source -> uv_width, limits, 8 ) ; vpx_post_proc_down_and_across_mb_row ( source -> v_buffer + 8 * mbr * source",0
41,"<S2SV_ModStart> { ret = __copy_to_user <S2SV_ModEnd> ( param, <S2SV_ModStart> ) ) ; if ( ret ) return - EFAULT ; param += sizeof ( struct floppy_raw_cmd ) ; if ( ( ptr -> flags & FD_RAW_READ ) && ptr -> buffer_length ) { if ( ptr -> length >= 0 && ptr -> length <= ptr -> buffer_length ) { ret = fd_copyout ( ptr -> data, ptr -> kernel_data, ptr -> length ) ; if ( ret ) return ret ; } else { ret = fd_copyout ( ptr -> data, ptr -> kernel_data, ptr -> length ) ; if ( ret ) return ret ; } } else if ( ( ptr -> flags & FD_RAW_WRITE ) && ptr -> buffer_length ) { if ( ptr -> length >= 0 && ptr -> length <= ptr -> buffer_length ) { ret = fd_copyout ( ptr -> data, ptr -> kernel_data, ptr -> length ) ; if ( ret ) return ret ; } else { ret = fd_copyout ( ptr -> kernel_data, ptr -> length ) ; if ( ret ) return ret ; } }",0
42,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; <S2SV_ModEnd> ce = mb_cache_entry_alloc <S2SV_ModStart> error ; ce = mb2_cache_entry_create ( ext4_mb_cache, GFP_NOFS, bh -> b_blocknr, hash ) ; if (! ce ) { ea_bdebug ( bh, ""out <S2SV_blank> of <S2SV_blank> memory"" ) ; return ; } <S2SV_ModEnd> error = mb_cache_entry_insert <S2SV_ModStart> error ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> } } <S2SV_null>",0
43,"<S2SV_ModStart> rlen ) ; if (! r_socket_http_answer ( s, code, rlen ) ) { r_socket_free ( s ) ; return NULL ; }",0
44,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> ip_options_get_from_user ( struct <S2SV_ModStart> * opt = kzalloc ( sizeof ( * opt ), GFP_KERNEL ) ; if (! opt ) return - ENOMEM ; if ( copy_from_user ( & opt -> __data, data, optlen ) ) { kfree ( opt ) ; return - EFAULT ; }",0
45,"<S2SV_ModStart> ; trunc : if ( length < sizeof ( struct rpl_dio_genoption ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|truncated]"" ) ) ; goto trunc ; } <S2SV_ModStart> : if ( length < sizeof ( struct rpl_dio_genoption ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|truncated]"" ) ) ; goto trunc ; } <S2SV_ModStart> : if ( length < sizeof ( struct rpl_dio_genoption ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|truncated]"" ) ) ; goto trunc ; } <S2SV_ModStart> : if ( length < sizeof ( struct rpl_dio_genoption ) ) { if ( length < sizeof ( struct rpl_dio_genoption ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|truncated]"" ) ) ; goto trunc ; } <S2SV_ModStart> : if ( length < sizeof ( struct rpl_dio_genoption ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|truncated]"" ) ) ; goto trunc ; }",0
46,"<S2SV_ModStart> } else { if ( ( * varp ) [ 0 ] == NUL ) { errmsg = ( char_u * ) N_ ( ""E529: <S2SV_blank> Cannot <S2SV_blank> set <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> empty <S2SV_blank> string"" ) ; } else if ( ( * varp ) [ 0 ] == NUL ) { errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> empty <S2SV_blank> string"" ) ; } else if ( ( * varp ) [ 0 ] == NUL ) { errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> empty <S2SV_blank> string"" ) ; } else if ( ( * varp ) [ 0 ] == NUL ) { errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> empty <S2SV_blank> string"" ) ; } else if ( ( * varp ) [ 0 ] == NUL ) { errmsg = ( char_u * ) N_ ( ""E531: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ;",0
47,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode",0
48,"<S2SV_ModStart> size_t size ; if ( width == 0 || height == 0 ) { goto error ; } if (! jas_safe_intfast32_add ( tlx, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ) { goto error ; } if (! jas_safe_intfast32_add ( hstep, vstep, 0 ) ) { goto error ; } if (! ( cmpt = jas_malloc ( sizeof ( jas_image_cmpt_t ) ) ) ) { goto error ; } if (! ( cmpt = jas_malloc ( sizeof ( jas_image_cmpt_t ) ) ) ) ) { goto error ; } if (! ( cmpt = jas_malloc ( sizeof ( jas_image_cmpt_t ) ) ) ) { goto error ; } if (! ( cmpt = jas_malloc ( sizeof ( jas_image_cmpt_t ) ) ) ) { goto error ; } if (! ( cmpt = jas_malloc ( sizeof ( jas_image_cmpt_t )",0
49,<S2SV_ModStart> ++ ; } if ( i < ( int ) header_buf_used ) { <S2SV_ModStart> ] == '\\r' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\r' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\r' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\r' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { endofheaders =,0
50,<S2SV_ModStart> && flags & FLAG_MATCHED && ( ( op & ASN1_OP_MATCH__COND && flags & FLAG_LAST_MATCHED ) || ( ( op & ASN1_OP_MATCH__COND && flags & FLAG_INDEFINITE_LENGTH ) && ( dp == datalen ) ) ) { flags &= ~ FLAG_LAST_MATCHED ; pc += asn1_op_lengths [ op ] ; goto next_op ; } if ( ( op & ASN1_OP_MATCH__COND && flags & FLAG_MATCHED ) || ( ( op & ASN1_OP_MATCH__COND && flags & FLAG_LAST_MATCHED ) || ( dp == datalen ) ) ) { flags &= ~ FLAG_LAST_MATCHED ; pc += asn1_op_lengths [ op ] ; goto next_op ; } else if ( ( op & ASN1_OP_MATCH__COND && flags & FLAG_LAST_MATCHED ) || ( dp == datalen ) ) { flags &= ~ FLAG_LAST_MATCHED ; pc += asn1_op_lengths [ op ] ; goto next_op ; },0
51,"<S2SV_ModStart> req, size_t <S2SV_ModEnd> acl_len ) { <S2SV_ModStart> acl_len ) { __be32 * savep ; <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> op_hdr ( xdr, OP_GETATTR ) )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & savep ) )!= 0 ) return - EIO ; if ( unlikely ( req -> rq_rcv_buf. len < hdrlen ) { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen, recvd ) ; return - EINVAL ; } xdr_read_pages ( xdr, attrlen ) ; * acl_len = hdrlen ; } else { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" <S2SV_ModEnd> "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n""",0
52,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
53,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth, <S2SV_ModStart>, "":"", & tok ) ; if ( owner && * owner ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { uid = HTTP -> uid ; } else { uid = userToID ( owner ) ; } } if ( group && * group ) { if ( snumber ( group ) ) { gid = ( int ) stoi ( group ) ; } else if ( smatch ( group, ""APPWEB"" ) ) { gid = HTTP -> gid ; } else { gid = groupToID ( group ) ; } } if ( perms && smatch ( perms, ""APPWEB"" ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; }",0
54,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> int number_aau ; <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; if ( addr == NULL ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) return NULL ; } <S2SV_ModEnd> number_aau = ( <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> addr = VPX_MALLOC_L",0
55,"<S2SV_ModStart> int res ; <S2SV_ModEnd> int indexes = <S2SV_ModStart> int indexes = read_fs_blocks <S2SV_ModEnd> ( fd, <S2SV_ModStart>. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } <S2SV_ModEnd> * table_start = <S2SV_ModStart> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
56,"<S2SV_ModStart> HASH_DISABLED ; } else { return apr_psprintf ( cmd -> pool, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"", p1 ) ; }",0
57,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> & final ) ; rcu_read_unlock ( ) ;",0
58,"<S2SV_ModStart> = 0.0 ; uint32 <S2SV_ModEnd> nstrips = 0 <S2SV_ModStart> = 0.0 ; if ( read_buff == NULL ) { TIFFError ( ""loadImage"", ""No <S2SV_blank> read <S2SV_blank> buffer <S2SV_blank> available"" ) ; return - 1 ; } <S2SV_ModStart> nstrips ) ) { if ( read_buff == NULL ) { TIFFError ( ""loadImage"", ""No <S2SV_blank> read <S2SV_blank> buffer <S2SV_blank> available"" ) ; return - 1 ; } <S2SV_ModStart> ntiles ) ) { if ( read_buff == NULL ) { TIFFError ( ""loadImage"", ""No <S2SV_blank> read <S2SV_blank> buffer <S2SV_blank> available"" ) ; return - 1 ; } <S2SV_ModStart> ""loadImage"", ""No <S2SV_blank> read <S2SV_blank> buffer <S2SV_blank> available"" ) ; return - 1 ; } <S2SV_ModStart> nstrips ) ) { if ( read_buff == NULL ) { TIFFError ( ""loadImage"", ""No <S2SV_blank> read <S2SV_blank> buffer <S2SV_blank> available"" ) ; return - 1 ; } <S2SV_ModStart> ntiles ) ) { if ( read_buff == NULL ) { TIFFError ( ""loadImage"", ""No <S2SV_blank> read <S2SV_blank> buffer <S2SV_blank> available"" ) ; return - 1 ; } <S2SV_ModStart> ""loadImage"", ""No <S2SV_blank> read <S2SV_blank> buffer <S2SV_blank> available"" ) ; return - 1 ;",0
59,"<S2SV_ModStart> = 0 ; # if CONFIG_VP10_ENCODER else if ( strcmp ( global -> codec -> name, ""vp10"" ) == 0 ) { ctrl_args = vp10_args ; ctrl_args_map = vp10_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp11"" ) == 0 ) { ctrl_args = vp11_args ; ctrl_args_map = vp11_arg_ctrl_map ; # endif # if CONFIG_VP12_ENCODER else if ( strcmp ( global -> codec -> name, ""vp12"" ) == 0 ) { ctrl_args = vp12_args ; ctrl_args_map = vp12_arg_ctrl_map ; # endif } else if ( arg_match ( & arg, & outputfile, argi ) ) { config -> out_fn = arg. val ; } else if ( arg_match ( & arg, & fpf_name, argi ) ) { config -> stats_fn = arg. val ; } else if ( arg_match ( & arg, & use_ivf, argi ) ) { config -> write_webm =",0
60,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
61,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> out ; } ext_size = sizeof ( EXT4_I ( inode ) -> i_data ) ; <S2SV_ModStart> ( bh -> b_data + ext_size, inode -> i_sb -> s_blocksize - ext_size ) ; memset ( bh -> b_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size ) ; <S2SV_ModStart> out ; } neh = ext_block_hdr ( bh ) ; if ( ext_depth ( inode ) ) neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block_idx ( inode, 0 ) ) ; neh -> eh_magic = EXT4_EXT_MAGIC ; ext4_inode_block_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
62,"<S2SV_ModStart> } if ( <S2SV_ModEnd> verify_checks ( c <S2SV_ModStart> preverify_ok, callback_ctx ) ) { SSL_SESSION * sess = NULL ; if ( sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } else { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; if (! ok ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } else { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ) ; SSL_SESSION_free ( sess ) ; if (!",0
63,"<S2SV_ModStart> ( memcmp ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE ) ) goto exit ; } if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) goto exit ; if (",0
64,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
65,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
66,"<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const uint64_t bits_used <S2SV_ModStart> 0 ) ; # ifdef DISABLE_RC_LONG_TERM_MEM const uint64_t bits_used = cpi -> rc. this_frame_target ; # else const uint64_t bits_used = cpi -> rc. projected_frame_size ; # endif <S2SV_ModStart> KEY_FRAME ) { cpi -> twopass. kf_group_bits += cpi -> rc. this_frame_target - bits_used ; } else { cpi -> twopass. kf_group_bits += cpi -> rc. this_frame_target - bits_used ; } cpi -> twopass. gf_group_bits += cpi -> rc. projected_frame_size ; } else { cpi -> twopass. gf_group_bits += cpi -> rc. this_frame_target - bits_used ; } cpi -> twopass. gf_group_bits -= bits_used ; cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; }",0
67,"<S2SV_ModStart> ( image ) ) ; if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ( image ) ; if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ( image ) ; if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) ; do { if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ( image ) ; if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ( image ) ; if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) ; do { if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ( image ) ; if ( EOFBlob ( image )!= Magick",0
68,"<S2SV_ModStart> err_free_buf ; } dev_dbg ( & usbinterface -> dev, ""Using <S2SV_blank> USB <S2SV_blank> interface <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints:",0
69,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
70,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> = ""/etc"" ) == NULL ) { ulckpwdf ( ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( ( fd = mkstemp ( & tmpname, dir ) ) == NULL ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; }",0
71,<S2SV_ModStart> value ) ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
72,"<S2SV_ModStart>!= 0 ) { if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart>!= 0 ) { if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart>!= 0 ) { if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; }",0
73,"<S2SV_ModStart> void vp9_setup_dst_planes ( <S2SV_ModEnd> MACROBLOCKD * xd <S2SV_ModStart> int mi_col ) { const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; int i ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
74,"<S2SV_ModStart> <S2SV_null> static inline int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> dst ) { return assign_eip_far ( ctxt, dst, ctxt -> mode == X86EMUL_MODE_PROT64 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",1
75,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
76,"<S2SV_ModStart> == READ ) { int ret = __blockdev_direct_IO ( iocb, inode, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; if ( ret < 0 ) return ret ; <S2SV_ModStart> == READ ) ret = __blockdev_direct_IO ( iocb, inode, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; } else ret = __blockdev_direct_IO ( iocb, inode, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ;",0
77,"<S2SV_ModStart> = false ; len = strlen ( def ) ; if ( len > sizeof ( strparm ) ) strparm = ( char * ) malloc ( len ) ; if ( len > sizeof ( strparm ) ) strparm = ( char * ) malloc ( len ) ; if ( strparm [ 0 ] == \'""\' ) { isstring = true ; len = strlen ( strparm ) ; newstring = ( char * ) malloc ( len ) ; strparm [ len - 1 ] = 0 ; } else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else sscanf ( strparm + 2, ""%i"", & parm ) ; for ( i = 0 ; i < numdefaults ; i ++ ) if (! strcmp ( def, defaults [ i ]. name ) ) { if (! strcmp ( def, defaults [ i ]. name ) ) { if (! isstring ) * defaults [ i ]. location = parm ; else * defaults [ i ]. location = scantokey [ parm ]",0
78,"<S2SV_ModStart> n ) { <S2SV_ModEnd> int all_whitespace = <S2SV_ModStart> ; int kind <S2SV_ModEnd> ; void * <S2SV_ModStart> ; PyCompilerFlags cf <S2SV_ModEnd> ; char * <S2SV_ModStart> ; PyObject * o <S2SV_ModEnd> ; Py_ssize_t len <S2SV_ModStart> ; o = PyUnicode_DecodeUTF8 ( expr_start, expr_end - expr_start, NULL ) ; if ( o == NULL ) return NULL ; len = PyUnicode_GET_LENGTH ( o ) ; kind = PyUnicode_KIND ( o ) ; data = PyUnicode_DATA ( o ) ; for ( i = 0 ; i < len ; i ++ ) { if (! PyUnicode_ISSPACE ( PyUnicode_READ ( kind, data, i ) ) ) { all_whitespace = 0 ; break ; } } } if ( all_whitespace ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } str [ 0 ] = '(' ; memcpy ( str + 1, expr_start, len ) ; str [ len + 1 ] = ')' ; memcpy ( str + 2, expr_start, len ) ; str [ len + 2 ] = 0 ; cf. cf_",0
79,"<S2SV_ModStart> string ) { if ( cJSON_strcasecmp ( c -> string, string ) ) { c = cJSON_firstChild ( object -> child ) ; } else if ( cJSON_strcasecmp ( c -> string, ""null"" ) ) { c = cJSON_firstChild ( object -> child ) ; } else if ( cJSON_strcasecmp ( c -> string, ""undefined"" ) ) { c = cJSON_firstChild ( object -> child ) ; } if ( c && cJSON_strcasecmp ( c -> string, ""null"" ) ) { c = cJSON_firstChild ( object -> child ) ; } else if ( cJSON_strcasecmp ( c -> string, ""null"" ) ) { c = cJSON_firstChild ( object -> child ) ; } else if ( cJSON_strcasecmp ( c -> string, ""undefined"" ) ) { c = cJSON_firstChild ( object -> child ) ; } if ( c && cJSON_strcasecmp ( c -> string, ""null"" ) ) { c = cJSON_firstChild ( object -> child ) ; } else if ( cJSON_strcasecmp ( c -> string, ""null"" ) ) { c",0
80,"<S2SV_ModStart>, NO_HASHEXPAND, <S2SV_ModEnd> SLAB_REASSIGN, SLAB_AUTOMOVE <S2SV_ModStart>, NO_HASHEXPAND, <S2SV_ModEnd> SLAB_REASSIGN, SLAB_AUTOMOVE_RATIO <S2SV_ModStart>, NO_HASHEXPAND, <S2SV_ModEnd> SLAB_REASSIGN, SLAB_AUTOMOVE_WINDOW <S2SV_ModStart>, NO_HASHEXPAND, <S2SV_ModEnd> SLAB_REASSIGN, SLAB_AUTOMOVE_WINDOW <S2SV_ModStart>, NO_HASHEXPAND, <S2SV_ModEnd> SLAB_REASSIGN, SLAB_AUTOMOVE, SLAB_AUTOMOVE_RATIO <S2SV_ModStart>, NO_HASHEXPAND, <S2SV_ModEnd> SLAB_AUTOMOVE_RATIO, SLAB_AUTOMOVE_WINDOW <S2SV_ModStart>, NO_HASHEXPAND, SLAB_REASSIGN, SLAB_AUTOMOVE_RATIO, SLAB_AUTOMOVE_WINDOW, TAIL_REPAIR_TIME <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL, TEMPORARY_TTL, TEMPORARY_TTL, TEMPORARY_",0
81,<S2SV_ModStart> size ) ; if (! px -> ft ) return FALSE ;,0
82,"<S2SV_ModStart> u_char * dat, u_int len <S2SV_ModStart>, val_l ; if ( len < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ND_PRINT ( ( ndo, ""CRCErr=%u <S2SV_blank> "", ( val_h << 16 ) + val_l ) ) ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ND_PRINT ( ( ndo, ""BufOver=%u <S2SV_blank> "", ( val_h << 16 ) + val_l ) ) ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ND_PRINT ( ( ndo, ""Timeout=%u <S2SV_blank> "", ( val_h << 16 ) + val_l ) ) ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_",0
83,<S2SV_ModStart> endif # if HAVE_LZMA_H <S2SV_ModEnd> && HAVE_LIBLZMA if,1
84,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
85,"<S2SV_ModStart> int i ; const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAXMB_PLANE ; ++ i ) { struct macroblockd_plane * pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y ) ; } }",0
86,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
87,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
88,<S2SV_ModStart> user ) { mutex_lock ( & user -> mutex ) ; <S2SV_ModStart> user ) ; mutex_unlock ( & user -> mutex ) ;,0
89,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen <S2SV_ModStart> + 1 ; size_t <S2SV_ModEnd> limit = 0,0
90,"<S2SV_ModStart> * for_ch ; int <S2SV_ModEnd> is_async = 0 <S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == TYPE_COMMENT ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } if ( c -> c_feature_version < 6 ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } for_ch = CHILD ( n, 1 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if ( NCH ( for_ch ) == 1 ) comp = comprehension ( first, expression, NULL, is_async, c -> c_arena ) ; else comp = comprehension ( first, expression, NULL, is_async, c -> c_arena ) ; if (",0
91,"<S2SV_ModStart> NULL ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; dst_state -> frame [ i ] = dst ; } } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; dst_state -> frame [ i ] = dst ; } } err = copy_func_state ( dst, src -> frame",0
92,"<S2SV_ModStart> void write_mb_modes_kf ( const VP9_COMMON * cm, const MACROBLOCKD * xd, const MODE_INFO * * mi <S2SV_ModEnd>, vpx_writer * <S2SV_ModStart> w ) { const MODE_INFO * const mi = mi_8x8 [ 0 ] ; const MODE_INFO * above_mi = xd -> above_available? mi_8x8 [ - xd -> mi_stride ] : NULL ; const MODE_INFO * left_mi = xd -> left_available? mi_8x8 [ - xd -> mi_stride ] : NULL ; const MODE_INFO * const left_mi = xd -> left_available? mi_8x8 [ - 1 ] : NULL ; const MB_MODE_INFO * const mbmi = mi -> mbmi ; const BLOCK_SIZE bsize = mbmi -> sb_type ; if ( seg -> update_map ) write_segment_id ( w, seg, mbmi -> segment_id ) ; write_skip ( cpi, mbmi -> segment_id, mi, w ) ; if ( cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi,",0
93,"<S2SV_ModStart> maxn ) { switch ( actions [ n ]. SWF_ACTIONRECORD. ActionCode ) { case SWFACTION_END : return 0 ; case SWFACTION_CONSTANTPOOL : decompileCONSTANTPOOL ( & actions [ n ] ) ; return 0 ; case SWFACTION_GOTOFRAME : return decompileGOTOFRAME ( n, actions, maxn, 1 ) ; case SWFACTION_GOTOFRAME : return decompileGOTOFRAME ( n, actions, maxn, 0 ) ; case SWFACTION_GOTOFRAME2 : return decompileGOTOFRAME2 ( n, actions, maxn, 0 ) ; case SWFACTION_GETURL2 : decompileGETURL2 ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETPROPERTY : decompileGETPROPERTY ( n, actions, maxn ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n, actions, maxn ) ; return 0 ; case SWFACTION_TRACE : decompileTRACE ( n, actions, maxn ) ; return 0 ; case SWFACTION_GETTIME : de",0
94,"<S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( & prep -> pp_n ) ; <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> n = EXTRACT_32BITS <S2SV_ModStart> - 1 ) ; ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( const struct pgstate * ) ( prep + 1 ) ; while ( -- n >= 0 && ND_TTEST ( * ps ) ) { ND_PRINT ( ( ndo, "">"" ) ) ; io = ( const struct id_off * ) ( ps + 1 ) ; if ( io < ie && ND_TTEST ( * io ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %c%s:%u"", c, ipaddr_string ( ndo, & io -> id ), EXTRACT_32BITS ( & io -> off ) ) ) ; c = ',' ; } ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( const struct pgstate * ) io ; while ( -- n >= 0 && ND_TTEST ( * io ) ) { ND_PRINT ( ( ndo, "">"" ) ) ; io = ( const struct id_off * ) ( ps + 1 )",0
95,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
96,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static sqlite3_int64 <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> * * azModuleArg ; sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> * * azModuleArg = sqlite3DbRealloc ( db, pTable -> azModuleArg, nBytes ) ; if ( azModuleArg == 0 ) { sqlite3DbFree ( db, zArg ) ; return - 1 ; } } else { sqlite3_int64 nBytes = sizeof ( char * ) * ( 2 + pTable -> nModuleArg ) ; char * * azModuleArg = sqlite3DbRealloc ( db, pTable -> azModuleArg, nBytes ) ; if ( azModuleArg == 0 ) { sqlite3DbFree ( db, zArg ) ; return - 1 ; } azModuleArg = sqlite3DbRealloc ( db, pTable -> azModuleArg, nBytes ) ; if ( azModuleArg == 0 ) { sqlite3DbFree ( db, zArg ) ; return - 1 ; }",0
97,<S2SV_ModStart> 1 ) { if ( idx + HBE_OPER_WIN_LEN > sizeof ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] ) ) return - 1 ; <S2SV_ModStart> 1 ) { if ( idx + HBE_OPER_WIN_LEN > sizeof ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] ) ) return - 1 ; <S2SV_ModStart> 1 ) { if ( idx + HBE_OPER_WIN_LEN > sizeof ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] ) ) return - 1 ; <S2SV_ModStart> 1 ) { if ( idx + HBE_OPER_WIN_LEN > sizeof ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] ) ) return - 1 ; <S2SV_ModStart> 1 ) { if ( idx + HBE_OPER_WIN_LEN > sizeof ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN,0
98,"<S2SV_ModStart> < q ) { if ( p - str < enclen ( reg -> enc, p ) ) { * low = ( UChar * ) NULL ; * low_prev = ( UChar * ) NULL ; * low = ( UChar * ) NULL ; * low = ( UChar * ) NULL ; * high = ( UChar * ) NULL ; } else { * low = ( UChar * ) NULL ; * low_prev = ( UChar * ) NULL ; } } else { UChar * q = p + enclen ( reg -> enc, p ) ; while ( p < q ) { if ( p - str < enclen ( reg -> enc, p ) ) { * low = ( UChar * ) NULL ; * low = ( UChar * ) NULL ; * low = ( UChar * ) NULL ; * low = ( UChar * ) NULL ; } else { if ( ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if ( ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if ( ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if ( ONIGENC_IS_SINGLEBYTE ( reg ->",0
99,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> bfq_idle_slice_timer_body ( struct <S2SV_ModStart> bfqq ) { struct bfq_data * bfqd = bfqq -> bfqd ; <S2SV_ModStart> unsigned long flags ; spin_lock_irqsave ( & bfqd -> lock, flags ) ; <S2SV_ModStart> return ; } if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_queued [ 0 ] == 0 && bfq_bfqq_queued [ 1 ] == 0 ) reason = BFQQE_TOO_IDLE ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_queued [ 0 ] == 0 && bfq_bfqq_queued [ 1 ] == 0 ) reason = BFQQE_TOO_IDLE ; else if",0
100,,1
101,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
102,"<S2SV_ModStart> + x > diffBlock + diffBlockLength || extraPtr + <S2SV_ModEnd> y > extraBlock <S2SV_ModStart> NULL ; } if ( newpos + x > newDataLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( diffPtr + x <S2SV_ModStart> extraPtr + y <S2SV_ModEnd> > extraBlock + <S2SV_ModStart> extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( newpos + x > origDataLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( newpos + x > origDataLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( newpos + x > origDataLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (",0
103,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart>, fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ), rcu_dereference ( <S2SV_ModStart> np -> tclass ), rcu_dereference ( <S2SV_ModStart> np -> opt ), rcu_dereference ( <S2SV_ModStart> np -> opt ), rcu_dereference ( <S2SV_ModStart> np -> tclass ), rcu_dereference ( <S2SV_ModStart> np -> opt ), rcu_dereference ( rcu_dereference ( <S2SV_ModStart> np -> opt ), rcu_dereference ( <S2SV_ModStart> np -> tclass ), rcu_dereference ( <S2SV_ModStart> np -> tclass ), rcu_dereference ( <S2SV_ModStart> np -> opt ), rcu_dereference ( <S2SV_ModStart> np -> opt ), rcu_dereference ( <S2SV_ModStart> np -> tclass ), rcu_dereference ( <S2SV_ModStart> np -> opt ), rcu_dereference ( rcu_dereference ( rcu )",0
104,"<S2SV_ModStart> = MagickFalseType ; status = SetImageExtent ( image, image_info -> columns, image_info -> rows ) ; if ( status == MagickFalseType ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"", exception ) ; if ( status == MagickFalseType ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"", exception ) ; if ( status == MagickFalseType ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"", exception ) ; if ( status == MagickFalseType ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"", exception ) ; if ( status == MagickFalseType ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"", exception ) ; if ( status == MagickFalseType ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"", exception ) ; if ( status == MagickFalseType ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"", exception ) ; if ( status == MagickFalseType ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"", exception ) ;",0
105,<S2SV_ModStart> ; int64_t index_pts ; if ( avio_feof ( s -> pb ) ) { return AVERROR_INVALIDDATA ; },0
106,<S2SV_ModStart> data ) { # if CONFIG_VP9_HIGHBITDEPTH switch ( data -> codec_flags & VPX_CODEC_FLAG_HIGHBITDEPTH ) { case VPX_CODEC_FLAG_HIGHBITDEPTH : return encoder_common_init_high ( ctx ) ; break ; case VPX_CODEC_FLAG_HIGHBITDEPTH : return encoder_common_init_high ( ctx ) ; break ; default : return encoder_common_init ( ctx ) ; } # if CONFIG_VP9_HIGHBITDEPTH switch ( data -> codec_flags & VPX_CODEC_FLAG_HIGHBITDEPTH ) { case VPX_CODEC_FLAG_HIGHBITDEPTH : return encoder_common_init_high ( ctx ) ; break ; case VPX_CODEC_FLAG_HIGHBITDEPTH : return encoder_common_init_high ( ctx ) ; break ; default : return encoder_common_init ( ctx ) ; } # if CONFIG_VP9_HIGHBITDEPTH switch ( data -> codec_flags & VPX_CODEC_FLAG_HIGHBITDEPTH ) { case VPX_CODEC_FLAG_HIGHBITDEPTH : return encoder,0
107,"<S2SV_ModStart> int _Unpickler_ResizeMemoList ( <S2SV_ModEnd> UnpicklerObject * self <S2SV_ModStart> new_size ) { <S2SV_ModEnd> assert ( new_size <S2SV_ModStart> { Py_ssize_t i ; if ( new_size > self -> memo_size ) { PyErr_NoMemory ( ) ; return - 1 ; } assert ( new_size > self -> memo_size ) ; PyMem_RESIZE ( self -> memo, PyObject *, new_size ) ; if ( memo_new == NULL ) { PyErr_NoMemory ( ) ; return - 1 ; } self -> memo = NULL ; for ( i = self -> memo_size ; i < new_size ; i ++ ) { PyErr_NoMemory ( ) ; return - 1 ; } PyMem_RESIZE ( memo_new, PyObject *, new_size ) ; if ( memo_new == NULL ) { PyErr_NoMemory ( ) ; return - 1 ; } self -> memo = memo_new ; for ( i = self -> memo_size ; i < new_size ; i ++ ) { PyErr_NoMemory ( ) ; return - 1 ; } PyMem_RESIZE ( memo_new, PyObject *",0
108,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> delta_q!= 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
109,"<S2SV_ModStart> mbmi. mv. as_int ; mv_bias ( ref_frame_sign_bias [ above -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; near_ref [ vcnt ] = above -> mbmi. ref_frame ; vcnt ++ ; if ( left -> mbmi. ref_frame!= INTRA_FRAME ) { near_mvs [ vcnt ]. as_int = left -> mbmi. mv. as_int ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; near_ref [ vcnt ] = left -> mbmi. ref_frame ; } vcnt ++ ; if ( aboveleft -> mbmi. ref_frame!= INTRA_FRAME ) { near_mvs [ vcnt ]. as_int = near_mvs [ vcnt ]. as_int ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe,",0
110,<S2SV_ModStart> msg -> msg_name ) { struct sockaddr_ll * sll = msg -> msg_name ; msg -> msg_namelen = sizeof ( * sll ) ; msg -> msg_flags |= MSG_TRUNC ; msg -> msg_namelen = sizeof ( * sll ) ; },0
111,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
112,<S2SV_ModStart> asconf ) { sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) asconf -> chunk_hdr ; sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) addip,0
113,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
114,"<S2SV_ModStart> msicap ; pci_populate_msicap ( dev <S2SV_ModEnd>, msgnum,",0
115,"<S2SV_ModStart>!= psubscribeCommand && cmd -> proc!= punsubscribeCommand ) { addReplyError ( c, ""only <S2SV_blank> (P)SUBSCRIBE <S2SV_blank> / <S2SV_blank> (P)UNSUBSCRIBE <S2SV_blank> / <S2SV_blank> QUIT <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> this <S2SV_blank> context"" ) ; return REDIS_OK ; } if ( ( cmd -> flags & REDIS_CMD_DENYOOM ) && zmalloc_used_memory ( ) > server. maxmemory ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( ( cmd -> flags & REDIS_CMD_DENYOOM ) && zmalloc_used_memory ( ) > server. maxmemory ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( ( cmd -> flags & REDIS_CMD_DENYOOM ) && zmalloc_used_memory ( ) > server. maxmemory ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank>",0
116,"<S2SV_ModStart> vpx_codec_err_t res ; memset ( & ctx -> cfg, 0, sizeof ( ctx -> cfg ) ) ; <S2SV_ModStart> ( ( cfg -> <S2SV_ModEnd> g_w!= ctx <S2SV_ModStart>. g_w ) && ( ( cfg -> <S2SV_ModEnd> g_h!= ctx <S2SV_ModStart>. g_h ) && ( cfg -> g_pass!= VPX_RC_ONE_PASS ) ) <S2SV_ModStart> ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_w > ctx -> cfg. g_w ) || ( cfg -> g_h > ctx -> cfg. g_h ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_w > ctx -> cfg. g_w ) || ( cfg -> g_h > ctx -> cfg. g_h ) ) ERROR ( ""Cannot <S2SV_blank> increase <S2SV_blank> lag_in_frames"" ) ; res = validate_config ( ctx, cfg, & ctx -> vp8_cfg, 0 ) ; if (! res ) { ctx -> cfg = * cfg ; } else { ctx -> cfg = * cfg ; }",0
117,<S2SV_ModStart> cpi ) { # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. rc_mode == VPX_CBR ) cpi -> oxcf. rc_mode = VPX_CBR_HIGHBITDEPTH ; else cpi -> oxcf. rc_mode = VPX_CBR_HIGHBITDEPTH ; # endif <S2SV_ModStart> = 0 ; } # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. rc_mode == VPX_CBR ) { # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. rc_mode == VPX_CBR ) cpi -> oxcf. rc_mode = VPX_CBR_HIGHBITDEPTH ; # else cpi -> oxcf. rc_mode = VPX_CBR_HIGHBITDEPTH if ( cpi -> oxcf. rc_mode == VPX_CBR_HIGHBITDEPTH ) { # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. rc_mode == VPX_CBR ) cpi -> oxcf,0
118,"<S2SV_ModStart> int rc ; struct desc_struct old_desc, new_desc ; const struct x86_emulate_ops * ops = ctxt -> ops ; unsigned int cpl = ctxt -> ops -> cpl ( ctxt ) ; if (! ctxt -> mode == X86EMUL_MODE_PROT64 ) return X86EMUL_CONTINUE ; old_eip = ctxt -> _eip ; ops -> get_segment ( ctxt, & old_cs, & old_desc, NULL <S2SV_ModEnd>, VCPU_SREG_CS ) <S2SV_ModStart> sel, VCPU_SREG_CS, & new_desc <S2SV_ModStart> return X86EMUL_CONTINUE ; rc = assign_eip_far ( ctxt, new_desc. l ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; rc = assign_eip_far ( ctxt, new_desc. l ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; rc = assign_eip_far ( ctxt, new_desc. l ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; ops -> set_segment ( ctxt, old_cs, new_desc.",0
119,"<S2SV_ModStart> - EINVAL ; if ( info -> si_code < 0 ) return - EPERM ; if ( info -> si_signo < 0 ) { info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) ; } else { info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
120,"<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; ISOM_DECREASE_SIZE ( ptr, 1 ) <S2SV_ModStart> tmp_strsize ) ; ISOM_DECREASE_SIZE ( ptr, 1 ) <S2SV_ModStart> tmp_strsize ) ; ISOM_DECREASE_SIZE ( ptr, 1 ) <S2SV_ModStart> tmp_strsize ) ; ISOM_DECREASE_SIZE ( ptr, 1 ) <S2SV_ModStart> tmp_strsize ) ; ISOM_DECREASE_SIZE ( ptr, 1 ) tmp_str [ i ] = gf_bs_read_u8 ( bs ) ; tmp_strsize -- ; if (! tmp_str [ i ] ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_",0
121,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
122,"<S2SV_ModStart> void nfs4_state_set_mode_locked ( fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> == mode ) { state -> state = mode ; return ; } if ( ( fmode & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { if ( ( fmode & FMODE_WRITE )!= ( state -> state & FMODE_WRITE ) ) { if ( ( state -> state & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { list_move ( & state -> open_states, & state -> owner -> so_states ) ; } else { list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } } else { if ( ( fmode & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { if ( ( state -> state & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { list_move ( & state -> open_states, & state -> owner -> so_states ) ; } else { list_move_tail ( & state -> open_states, & state -> owner -> so",0
123,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( <S2SV_ModEnd> fputc ( file <S2SV_ModStart> fputc ( c <S2SV_ModStart>, file )!= c ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
124,"<S2SV_ModStart> 0 ; } if ( elem. in_sg [ 0 ]. iov_len!= len ) { virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } if ( elem. out_sg [ 0 ]. iov_len!= len ) { virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } if ( elem. out_sg [ 0 ]. iov_len!= len ) { virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } if ( elem. out_sg [ 0 ]. iov_len!= len ) { virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } if ( elem. out_sg [ 0 ]. iov_len!= len ) { return 0 ; } if ( elem. out_sg [ 0 ]. iov_len!= len ) { virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; }",0
125,"<S2SV_ModStart>, i, ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; } fprintf ( out, ""qntsty <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numguard <S2SV_blank> = <S2SV_blank> %d;\\n"", ( unsigned ) qcd -> compparms. qntsty, qcd -> compparms. numguard ) ; for ( i = 0 ; i < qcd -> compparms. numstepsizes ; ++ i ) { fprintf ( out, ""expn[%d] <S2SV_blank> = <S2SV_blank> 0x%04x; <S2SV_blank> mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""qntsty <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numguard <S2SV_blank> = <S2SV_blank> %d;",0
126,"<S2SV_ModStart> = AV_PIX_FMT_PAL8 ; avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } if ( c -> format == BIT_PLANAR ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; }",0
127,"<S2SV_ModStart> 1 ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; }",0
128,"<S2SV_ModStart> image_noffset ) { const char * name = fit_get_name ( fit, noffset, NULL ) ; if (! strncmp ( name, FIT_SIG_NODENAME, strlen ( FIT_SIG_NODENAME ) ) ) { ret = fit_image_check_sig ( fit, noffset, data, size, sig_blob, sig_offset, & err_msg ) ; if ( ret ) { puts ( ""- <S2SV_blank> "" ) ; } else { puts ( ""- <S2SV_blank> "" ) ; } } } if ( noffset == - FDT_ERR_BADREF ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; } if ( noffset == - FDT_ERR_BADREF ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; } if ( noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; }",0
129,"<S2SV_ModStart> state -> rx_kfifo_lock ) ; state -> rx_kfifo_max = CX23888_IR_RX_KFIFO_SIZE ; state -> tx_kfifo_max = CX23888_IR_TX_KFIFO_SIZE ; <S2SV_ModStart> - ENOMEM ; state -> rx_kfifo_max = CX23888_IR_RX_KFIFO_SIZE ; state -> tx_kfifo_max = CX23888_IR_TX_KFIFO_SIZE ; state -> dev = dev ; sd = & state -> sd ; v4l2_subdev_init ( sd, & cx23888_ir_controller_ops ) ; v4l2_set_subdevdata ( sd, state ) ; mutex_init ( & state -> rx_params_lock ) ; default_params = default_rx_params ; v4l2_subdev_call ( sd, ir, rx_s_parameters, & default_params ) ; mutex_init ( & state -> tx_params_lock ) ; ret = cx23888_ir_write4 ( dev",0
130,"<S2SV_ModStart> * iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) &&! ( iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_ERROR_CONCEALMENT ) &&! ( iface -> caps & VPX_CODEC_CAP_ERROR_CONCEALMENT ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE",0
131,"<S2SV_ModStart> |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ;",0
132,<S2SV_ModStart> icmp_param ) ; if ( code == ICMP_DEST_UNREACH ) code = ICMP_DEST_UNREACH ; <S2SV_ModStart> icmp_param ) ; if ( code == ICMP_DEST_UNREACH ) code = ICMP_DEST_UNREACH ; if ( code == ICMP_DEST_UNREACH ) code = ICMP_DEST_UNREACH ; if ( code == ICMP_DEST_UNREACH ) code = ICMP_DEST_UNREACH ; if ( code == ICMP_DEST_UNREACH ) code = ICMP_DEST_UNREACH ; if ( code == ICMP_DEST_UNREACH ) code = ICMP_DEST_UNREACH ; if ( code == ICMP_DEST_UNREACH ) code = ICMP_DEST_UNREACH ; if ( code == ICMP_DEST_UNREACH ) code = ICMP_DEST_UNREACH ; if ( code == ICMP_DEST_UNREACH ) code = ICMP_DEST_UNREACH ; if ( code == ICMP,0
133,<S2SV_ModStart> = nlogs ; if ( unlikely ( headcount >= UIO_MAXIOV ) ) { r = - ENOBUFS ; goto err ; },0
134,<S2SV_ModStart> { rq = tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; fn (,1
135,<S2SV_ModStart> else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX,0
136,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
137,<S2SV_ModStart> skb_is_nonlinear ( skb ) ) return 0 ; if ( skb -> len < sizeof ( struct nlattr,1
138,<S2SV_ModStart> ; encode_share_access ( <S2SV_ModEnd> arg -> open_flags <S2SV_ModStart> -> open_flags ) ; if ( arg -> fmode & NFS_FMODE_READ ) { if ( arg -> fmode & NFS_FMODE_WRITE ) { if ( arg -> fmode & NFS_FMODE_WRITE ) { if ( arg -> fmode & NFS_FMODE_READ ) { if ( arg -> fmode & NFS_FMODE_WRITE ) { if ( arg -> fmode & NFS_FMODE_READ ) { if ( arg -> fmode & NFS_FMODE_WRITE ) { if ( arg -> fmode & NFS_FMODE_WRITE ) { if ( arg -> fmode & NFS_FMODE_WRITE ) { if ( arg -> fmode & NFS_FMODE_WRITE ) { if ( arg -> fmode & NFS_FMODE_WRITE ) { if ( arg -> fmode & NFS_FMODE_WRITE ) { if ( arg -> fmode & NFS_FMODE_WRITE ) { if ( arg -> fmode & NFS_FMODE_WRITE ) { if ( arg -> fmode & NFS_FMODE_WRITE ) { if ( arg -> fmode & NFS,0
139,<S2SV_ModStart> 0 ) { tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; <S2SV_ModStart> 0 ) { tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0,0
140,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ""modify_bar_registration: <S2SV_blank> bypass <S2SV_blank> for <S2SV_blank> pci-gvt\\n"" ) ; return - ENODEV <S2SV_ModEnd> ; } switch <S2SV_ModStart> break ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
141,"<S2SV_ModStart> ( fp, "" <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %s\\n"" <S2SV_ModEnd>, & n",0
142,<S2SV_ModStart> : case 0x1a : case 0x1b : case 0x1c : case 0x1f : case 0x2a : case 0x2b : case 0x2c : case 0x2f : case 0x4a : case 0x4b : case 0x4e : case 0x5a : case 0x5b : case 0x5c : case 0x5f : case 0x6a : case 0x6b : case 0x6f : case 0x7a : case 0x7b : case 0x7c : case 0x7f : <S2SV_ModStart> : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x,0
143,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
144,"<S2SV_ModStart> goto trunc ; if ( lshp -> ls_length < 2 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> 0x%08x, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %u, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_router ), EXTRACT_32BITS ( & lshp -> ls_age ), lshp -> ls_length ) ; } else { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> 0x%08x, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %u, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_seq ), EXTRACT_32BITS ( & lshp -> ls_age ), EXTRACT_16BITS ( & lshp -> ls_length ) ) ) ; }",0
145,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { if ( ret ) break ; ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",0
146,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
147,"<S2SV_ModStart> fd = open ( dev_path <S2SV_ModEnd>, O_RDWR | <S2SV_ModStart> O_CLOEXEC ) ; if ( p_dev -> fd < 0 ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%d"", __FUNCTION__, p_dev -> fd ) ; p_dev -> fd = - 1 ; p_dev -> dev_status = BTHH_CONN_STATE_UNKNOWN ; } else if ( p_dev -> dev_status == BTHH_CONN_STATE_UNKNOWN ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%d"", __FUNCTION__, p_dev -> fd ) ; p_dev -> dev_status = BTHH_CONN_STATE_UNKNOWN ; p_dev -> dev_status = BTHH_CONN_STATE_UNKNOWN ; } else if ( p_dev -> dev_status == BTHH_CONN_STATE_UNKNOWN ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%d"",",0
148,"<S2SV_ModStart> desc_struct cs, ss ; u32 rdx, rdx <S2SV_ModStart> = X86EMUL_MODE_PROT32 ; rdx = reg_read ( ctxt, VCPU_REGS_RDX ) ; rdx = * reg_read ( ctxt, VCPU_REGS_RDX ) ; <S2SV_ModStart> = 1 ; rdx = reg_read ( ctxt, VCPU_REGS_RDX ) ; <S2SV_ModStart> = 1 ; rdx = reg_read ( ctxt, VCPU_REGS_RDX ) ; * reg_write ( ctxt, VCPU_REGS_RSP ) = rdx <S2SV_ModEnd> ; break ; <S2SV_ModStart> = 1 ; rdx = reg_read ( ctxt, VCPU_REGS_RDX ) ; * reg_write ( ctxt, VCPU_REGS_RDX ) = rdx <S2SV_ModEnd> ; * reg_write <S2SV_ModStart> VCPU_REGS_RSP ) = rdx <S2SV_ModEnd> ; break ; <S2SV_ModStart> = 1 ; rdx = reg_read ( ctxt, VCPU_REGS_RDX ) ; * reg_write ( ctxt, VCPU_REGS_RDX ) ; * reg_write ( ctxt, VCPU_REGS_",0
149,"<S2SV_ModStart> costs, vpx_tree <S2SV_ModEnd> * tree, <S2SV_ModStart> c ) { vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> i / 2 ] ; vpx_tree_index <S2SV_ModEnd> ii = tree",0
150,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
151,"<S2SV_ModStart> 0xffff ; err = call_synth_devs [ dev ] -> load_patch ( dev, fmt, buf, p + 4, c, 0 ) ; if ( err < 0 ) return err ; err = call_synth_devs [ dev ] -> load_patch ( dev, fmt, buf, p + 4, c, 0 ) ; if ( err < 0 ) return err ; err = call_synth_devs [ dev ] -> load_patch ( dev, fmt, buf, p + 4, c, 0 ) ; if ( err < 0 ) return err ; err = call_synth_devs [ dev ] -> load_patch ( dev, fmt, buf, p + 4, c, 0 ) ; if ( err < 0 ) return err ; err = call_synth_devs [ dev ] -> load_patch ( dev, fmt, buf, p + 4, c, 0 ) ; if ( err < 0 ) return err ; err = call_synth_devs [ dev ] -> load_patch ( dev, fmt, buf, p + 4, c, 0 ) ; if ( err < 0 ) return err ;",0
152,"<S2SV_ModStart> fadst16 ( const tran_low_t * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> 15 ] ; tran_high_t x1 = input [ 0 ] ; tran_high_t <S2SV_ModEnd> x2 = input <S2SV_ModStart> 13 ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 11 ] ; tran_high_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 7 ] ; tran_high_t <S2SV_ModEnd> x6 = input <S2SV_ModStart> 7 ] ; tran_high_t <S2SV_ModEnd> x8 = input <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 9 ] ; tran_high_t <S2SV_ModEnd> x10 = input <S2SV_ModStart> 5 ] ; tran_high_t <S2SV_ModEnd> x11 = input <S2SV_ModStart> 12 ] ; tran_high_t <S2SV_ModEnd> x13 = input <S2SV_ModStart> 1 ] ; tran_high_t <S2SV_ModEnd> x15 = input <S2SV_ModStart> 14 ] ; tran_high_t <S2SV_ModEnd>",0
153,<S2SV_ModStart> mask ) ; # if HAVE_EDSP flags |= HAS_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON flags |= HAS_NEON ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON flags |= HAS_NEON ; # endif # if HAVE_EDSP flags |= HAVE_EDSP ; # endif # if HAVE_MEDIA flags |= HAVE_NEON ; # endif # if HAVE_NEON flags |= HAVE_NEON ; # endif # if HAVE_MEDIA flags |= HAVE_MEDIA ; # endif # if HAVE_NEON flags |= HAVE_NEON ; # endif # if HAVE_EDSP flags |= HAVE_EDSP ; # endif # if HAVE_MEDIA flags |= HAVE_MEDIA ; # endif # if HAVE_MEDIA flags |= HAVE_MEDIA ; # endif # if HAVE_NEON flags |= HAVE_NEON ; # endif,0
154,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
155,"<S2SV_ModStart> tot_len ) ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
156,<S2SV_ModStart> ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_READONLY ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_WRITE_HOLD ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_WRITE_HOLD ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_READONLY ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_READONLY ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_READONLY ) ) mnt -> mnt_flags,0
157,"<S2SV_ModStart> void count_segs_sb ( const VP9_COMMON * cm, <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd>, int * <S2SV_ModStart> bsize ) { <S2SV_ModEnd> int bw, <S2SV_ModStart> bw = num_8x8_blocks_wide_lookup [ mi <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> [ 0 ] -> mbmi. sb_type ] ; if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, mi_row, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, hbs, mi_row + hbs, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_",0
158,"<S2SV_ModStart> ; if (! ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) && clientsArePaused ( ) ) { serverPanic ( ""Client <S2SV_blank> is <S2SV_blank> paused"" ) ; } if (",0
159,"<S2SV_ModStart> = 0 ; mpd -> b_state &= ~ ( 1 << BH_Unwritten ) ; <S2SV_ModStart> get_blocks_flags = EXT4_GET_BLOCKS_CREATE | EXT4_GET_BLOCKS_DELALLOC_RESERVE ; if ( mpd -> b_state & ( 1 << BH_Mapped ) ) { ext4_msg ( mpd -> inode -> i_sb, KERN_CRIT, ""delayed <S2SV_blank> block <S2SV_blank> allocation <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> inode <S2SV_blank> "" ""logical <S2SV_blank> offset <S2SV_blank> %llu <S2SV_blank> with <S2SV_blank> max <S2SV_blank> blocks <S2SV_blank> %zd <S2SV_blank> with <S2SV_blank> "" ""error <S2SV_blank> %d\\n"", mpd -> inode -> i_ino, mpd -> b_size >> mpd -> inode -> i_blkbits, mpd -> b_state & ( 1 << BH_Unwritten ) ) ; mpd -> retval = err ; return err ; } if ( mpd -> b_state & ( 1 << BH_Unwritten ) ) { ext4_msg ( mpd -> inode -> i_sb, KERN_CRIT, ""delayed <S2SV_blank> block <S2SV_blank> allocation <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> inode <S2SV_blank>",0
160,"<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> canonnamelen = 0 <S2SV_ModStart> ( p = oe_calloc ( 1, sizeof ( struct oe_addrinfo ) ) ) ) ) { ret = OE_EAI_MEMORY ; goto done ; } if (! p ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( oe_syscall_getaddrinfo_read_ocall ( & retval, handle, & p -> ai_flags, & p -> ai_family, & p -> ai_socktype, & p -> ai_protocol, & p -> ai_addrlen, NULL, & canonnamelen, NULL )!= OE_OK ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval!= - 1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval!= - 1 || oe",0
161,"<S2SV_ModStart> = '\\0' ; if ( osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",0
162,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
163,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( pegasus_t <S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
164,"<S2SV_ModStart> asdl_seq * body, asdl_matind_t * pos, asdl_matind_t * type_ind, asdl_matind_t * type_ind, asdl_matind_t * type_ind, asdl_matind_t * type_ind <S2SV_ModEnd> ) { mod_ty <S2SV_ModStart> = body ; p -> v. Module. pos = pos ; p -> v. Module. type_ind = type_ind ; p -> v. Module. type_ind = type_ind ; p -> v. Module. type_ind = pos ; p -> v. Module. type_ind = type_ind ; p -> v. Module. type_ind = type_ind ; p -> v. Module. type_ind = type_ind ; p -> v. Module. type_ind = type_ind ; p -> v. Module. type_ind = type_ind ; p -> v. Module. type_ind = type_ind ; p -> v. Module. type_ind = type_ind ; p -> v. Module. type_ind = type_ind ; p -> v. Module. type_ind = type_ind ;",0
165,"<S2SV_ModStart> * src, <S2SV_ModEnd> unsigned int flags <S2SV_ModStart> flags ) { # if USE_PARTIAL_COPY int row, col, active_end ; # else int mb_rows = ( src -> y_height + 15 ) >> 4 ; int mb_cols = ( src -> y_width + 15 ) >> 4 ; int mb_rows = ( src -> y_height + 15 ) >> 4 ; int mb_cols = ( src -> y_width + 15 ) >> 4 ; # endif <S2SV_ModStart> # if USE_PARTIAL_COPY if ( ctx -> sz + 1 + MAX_PRE_FRAMES > ctx -> max_sz ) return 1 ; # else for ( row = 0 ; row < mb_rows ; ++ row ) { col = 0 ; while ( 1 ) { for ( ; col < mb_cols ; ++ col ) { if (! active_map [ col ] ) break ; } vpx_copy_and_extend_frame_with_rect ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) << 4 ) ; } active_map += mb_cols ; } else { vpx_copy_and_extend_frame ( src",0
166,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
167,"<S2SV_ModStart> ; if ( method == LPF_PICK_FROM_Q ) { const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( cm -> frame_type == KEY_FRAME ) { lf -> filter_level = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; } else { lf -> filter_level = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; } } else if ( method == LPF_PICK_FROM_SUBIMAGE ) { search_filter_level <S2SV_ModEnd> ( sd,",0
168,<S2SV_ModStart> ) ) ; } break ; case BTA_DM_DISABLE_EVT : { BD_NAME bdname ; bt_status_t status ; status = btif_storage_get_adapter_property ( & bdname ) ; if ( status == BT_STATUS_SUCCESS ) { BTIF_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_DISABLED ) ; } else { BTIF_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; },0
169,"<S2SV_ModStart> : { int <S2SV_ModEnd> a = getnum <S2SV_ModStart>, MAXALIGN ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; h -> align = a ; return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
170,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
171,"<S2SV_ModStart> vpx_codec_err_t res ; # if CONFIG_VP9_HIGHBITDEPTH if (! ( ctx -> flags & VPX_CODEC_HIGHBITDEPTH ) ||! ( ctx -> flags & VPX_CODEC_USE_HIGHBITDEPTH ) ) res = VPX_CODEC_ERROR ; else if ( ctx -> flags & VPX_CODEC_USE_HIGHBITDEPTH ) res = VPX_CODEC_ERROR ; else if ( ctx -> flags & VPX_CODEC_USE_HIGHBITDEPTH ) res = ctx -> iface -> dec. decode ( ctx -> priv -> alg_priv, data, data_sz, user_priv, deadline ) ; else if ( ctx -> flags & VPX_CODEC_USE_HIGHBITDEPTH ) res = VPX_CODEC_ERROR ; else if ( ctx -> flags & VPX_CODEC_USE_HIGHBITDEPTH ) res = VPX_CODEC_ERROR ; else if ( ctx -> flags & VPX_CODEC_USE_HIGHBITDEPTH ) res = ctx -> iface -> dec. decode ( ctx -> priv -> alg_priv,",0
172,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int isofs_read_inode (,0
173,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> ) ; } sendClean ( outputbuffer ) ;",0
174,<S2SV_ModStart> self ) { if ( Py_TYPE ( self ) -> tp_free ) { Py_CLEAR ( self -> type_cache ) ; Py_TYPE ( self ) -> tp_free ( self ) ; } else if ( Py_TYPE ( self ) -> tp_free ) { Py_CLEAR ( self -> type_cache ) ; Py_CLEAR ( self -> type_cache ) ; Py_TYPE ( self ) -> tp_free ( self ) ; } else if ( Py_TYPE ( self ) -> tp_free ) { Py_CLEAR ( self -> type_cache ) ; Py_TYPE ( self ) -> tp_free ( self ) ; } else if ( Py_TYPE ( self ) -> tp_free ) { Py_CLEAR ( self -> type_cache ) ; Py_TYPE ( self ) -> tp_free ( self ) ; } else if ( Py_TYPE ( self ) -> tp_free ) { Py_CLEAR ( self -> type_cache ) ; Py_CLEAR ( self -> type_cache ) ; Py_CLEAR ( self -> type_cache ) ; Py_TYPE ( self ) -> tp_free ( self ) ; },0
175,"<S2SV_ModStart> ; for ( ; i < count ; ++ i ) { n = cJSON_CreateString ( strings [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } } for ( i = 0 ; a && i < count ; ++ i ) { n = cJSON_CreateString ( strings [ i ] ) ; if (! i ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; }",0
176,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_type_ignores, & tmp ) < 0 ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_",0
177,<S2SV_ModStart> EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) &&! ( mnt_flags & MNT_NOEXEC ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) &&! ( mnt_flags & MNT_NOEXEC ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) &&! ( mnt_flags & MNT_NOEXEC ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) &&! ( mnt_flags & MNT_NOEXEC ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) &&! ( mnt_flags & MNT_NOEXEC ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) &&,0
178,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
179,"<S2SV_ModStart> qmode ) { int do_rf64 = 0, write_junk = 1 ; ChunkHeader ds64hdr, datahdr, fmthdr <S2SV_ModStart> ; DS64Chunk ds64_chunk ; RiffChunkHeader riffhdr ; DS64Chunk ds64_chunk <S2SV_ModEnd> ; JunkChunk junkchunk <S2SV_ModStart> ; ds64_chunk = ( DS64Chunk ) malloc ( ds64hdr. Len + ds64_chunk. Len ) ; if (! ds64_chunk ) { error_line ( ""can\'t <S2SV_blank> create <S2SV_blank> valid <S2SV_blank> RIFF <S2SV_blank> wav <S2SV_blank> header <S2SV_blank> for <S2SV_blank> non-normalized <S2SV_blank> floating <S2SV_blank> data!"" ) ; return FALSE ; } if ( ds64_chunk. Len!= ds64hdr. Len ) { error_line ( ""can\'t <S2SV_blank> create <S2SV_blank> valid <S2SV_blank> RIFF <S2SV_blank> wav <S2SV_blank> header <S2SV_blank> for <S2SV_blank> non-normalized <S2SV_blank> floating <S2SV_blank> data!"" ) ; return FALSE ; } if ( ds64_chunk. Len!= ds64_chunk. Len ) { error_line ( ""can\'t <S2SV_blank> create <S2SV_blank> valid <S2SV_blank> RIFF <S2SV_blank> wav <S2SV_blank> header <S2SV_blank> for <S2SV_blank> non-normalized <S2SV_blank> floating <S2SV_blank> data!"" ) ; return FALSE ; } if ( ds64_chunk.",0
180,"<S2SV_ModStart> msg ) ; msg_sys -> msg_name = NULL ; <S2SV_ModStart> VERIFY_WRITE ) ; msg_sys -> msg_iovlen = 0 ; <S2SV_ModStart> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; err = ( nosec? sock_recvmsg_nosec : sock_recvmsg ) ( sock, msg_sys ) ; if ( err < 0 ) goto out_freeiov ; total_len = err ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; err = ( nosec? sock_recvmsg_nosec : sock_recvmsg ) ( sock, msg_sys ) ; if ( err < 0 ) goto out_freeiov ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg",0
181,"<S2SV_ModStart> inode ) ; struct metapath * mp2 = & mp -> mp_stack [ height - 1 ] ; struct <S2SV_ModStart> unsigned end_of_metadata ; if ( height == 1 ) { struct buffer_head * bh ; ptr = metapointer ( end_of_metadata, mp ) ; bh = mp -> mp_bh [ end_of_metadata ] ; dblks = gfs2_extent_length ( bh -> b_data, bh -> b_size, ptr, maxlen, & eob ) ; BUG_ON ( dblks < 1 ) ; state = ALLOC_DATA ; } else { struct buffer_head * bh ; ptr = metapointer ( end_of_metadata, mp ) ; bh = mp -> mp_bh [ end_of_metadata ] ; dblks = min ( maxlen, ptrs_per_blk - mp -> mp_list [ end_of_metadata ] ) ; if (! bh ) { struct buffer_head * bh ; bh = mp -> mp_bh [ end_of_metadata ] ; } else { struct buffer_head * bh ; bh = mp -> mp_bh [ end_of_",0
182,"<S2SV_ModStart> -> codec -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } else { fprintf ( stderr, ""Codec: <S2SV_blank> %s\\n"", vpx_codec_iface_name ( global -> codec -> interface ( ) ) ) ; fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( input -> use_i420 ) { fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } else { fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( stream -> next ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d",0
183,"<S2SV_ModStart> { xmlNsPtr copyNs = xmlNewDocProp ( target -> doc, attr -> name, copyNs ) ; if ( copyNs == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> create <S2SV_blank> attribute <S2SV_blank> \'{%s}%s\'.\\n"", origNs -> href, copyNs -> href ) ; } else { xmlNsPtr copyNs = xmlNewDocProp ( target -> doc, attr -> ns -> href, copyNs -> href ) ; if ( copyNs == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> create <S2SV_blank> attribute <S2SV_blank> \'{%s}%s\'.\\n"", origNs -> href, copyNs -> href ) ; } else { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> create <S2SV_blank> attribute <S2SV_blank> \'{%s}%s\'.\\n"", copyNs -> href, copyNs -> href ) ; }",0
184,"<S2SV_ModStart> 0 ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_",0
185,<S2SV_ModStart> msix_tab_size % 4096 <S2SV_ModEnd> == 0 ),0
186,"<S2SV_ModStart>! js_regexec ( J, <S2SV_ModEnd> re -> prog <S2SV_ModStart>! js_regexec ( J, <S2SV_ModEnd> re -> prog",0
187,"<S2SV_ModStart> case OFreshOID : sp -> op = OShift ; break ; case OShift : * dest += sp -> arg ; break ; case OReadItems : sp -> dest ++ ; if ( -- ( sp -> arg ) == 0 ) sp -- ; break ; case OShift : * dest += sp -> arg ; break ; case OShift : * dest += sp -> arg ; break ; case OShift : * dest += sp -> arg ; if ( -- ( sp -> arg ) == 0 ) sp -- ; break ; case OReadItems : sp -> dest ++ ; if ( -- ( sp -> arg ) == 0 ) { v = Val_hp ( intern_dest ) ; if ( intern_obj_table!= NULL ) intern_obj_table [ obj_counter ++ ] = v ; * intern_dest = Make_header ( size, tag, intern_color ) ; * intern_dest += 1 + size ; if ( tag == Object_tag ) { Assert ( size >= 2 ) ; ReadItems ( & Field ( v, 2 ), size - 2 ) ; PushItem ( ) ; sp -> op = OFreshOID ; sp -> dest = ( value * ) v ; sp -> arg = 1 ; } else",0
188,"<S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, KSZ8851_ISR ) ; if ( ( isr & KSZ8851_ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_LCIS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_LCIS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_TXIS <S2SV_ModEnd> ) ; n <S2SV_ModStart> = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } if ( ( isr & ISR_RXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_RXIS <S2SV_ModEnd> )",0
189,"<S2SV_ModStart> void encode_quantization ( const VP9_COMMON * cm, const struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm -> base_qindex, QINDEX_BITS ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
190,"<S2SV_ModStart> if ( write ( uipc_main. ch [ ch_id ]. fd, p_buf, msglen ) < 0 ) { BTIF_TRACE_ERROR ( ""failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> (%s)"", strerror ( errno ) ) ; }",0
191,"<S2SV_ModStart> { if ( ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == NULL ) { if ( ( localrsa = d2i_RSA_new ( ) ) == NULL ) { if ( ( localkey = d2i_EC_PKEY_new ( ) ) == NULL ) { goto sslerr ; } } else if ( ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == NULL ) { if ( ( localrsa = d2i_RSA_new ( ) ) == NULL ) { goto sslerr ; } } else if ( ( localrsa = d2i_RSA_new ( ) ) == NULL ) { if ( ( localkey = d2i_EC_PKEY_new ( ) ) == NULL ) { goto sslerr ; } } else if ( ( peerec = d2i_EC_PUBKEY_new ( ) ) == NULL ) { if ( ( localkey = d2i_EC_new ( ) ) == NULL ) { goto sslerr ; } } else if ( ( localkey = d2i_EC_new ( ) ) == NULL ) { if",0
192,"<S2SV_ModStart> t1_getline ( ) ; strcpy ( t1_line_array, t1_buf_array ) ; t1_line_ptr = eol ( t1_line_array ) ; } else { strcpy ( t1_buf_array, t1_line_array ) ; strcpy ( t1_line_array, t1_buf_array ) ; t1_line_ptr = eol ( t1_buf_array ) ; }",0
193,"<S2SV_ModStart> int mi_col, <S2SV_ModEnd> BLOCK_SIZE subsize ) <S2SV_ModStart> subsize ) { <S2SV_ModEnd> int bsl = <S2SV_ModStart> / 4, partition <S2SV_ModEnd> ; if ( <S2SV_ModStart> case PARTITION_NONE : set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col ) ; break ; case PARTITION_VERT : * get_sb_index ( x, subsize ) = 0 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col ) ; break ; case PARTITION_HORZ : * get_sb_index ( x, subsize ) = 1 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get",0
194,"<S2SV_ModStart> name ) ; else data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ;",0
195,"<S2SV_ModStart> key_ref, KEY_NEED_READ ) ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = - EOPNOTSUPP ; goto error2 ; } if ( key -> type -> read ) ret = - EOPNOTSUPP ; if ( key -> type -> read ) ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( key -> type -> read ) ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( key -> type -> read ) ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( ret == 0 ) ret = - EOPNOTSUPP ;",0
196,<S2SV_ModStart> u4_first_slice_in_pic ) { ps_dec -> u4_first_slice_in_pic = 1 ; ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> <S2SV_ModStart> ps_dec -> u4_first_slice_in_pic = 1 ; ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = 1 ; ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = 1 ; ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic =,0
197,"<S2SV_ModStart> dst_reg -> var_off ) ; if ( src_known ) { if ( dst_reg -> smin_value == S64_MIN ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } if ( dst_reg -> umin_value + umin_val < umax_val ) { dst_reg -> umin_value = 0 ; dst_reg -> umax_value = U64_MAX ; } else { dst_reg -> umin_value = 0 ; dst_reg -> umax_value = U64_MAX ; } <S2SV_ModStart> case BPF_SUB : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else",0
198,"<S2SV_ModStart> { cFYI ( 1, ""parent <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode, direntry -> d_name. name, direntry ) ; cFYI ( 1, ""parent <S2SV_blank> file <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x%p"", direntry -> d_name. name, direntry ) ; cFYI ( 1, ""parent <S2SV_blank> directory <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode, direntry -> d_name. name, direntry ) ; cFYI ( 1, ""parent <S2SV_blank> directory <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x%p"", direntry -> d_name. name, direntry ) ; cFYI ( 1, ""parent <S2SV_blank> directory <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x%p"", parent",0
199,"<S2SV_ModStart> ; if ( rcu_dereference_protected ( tp -> rcu, sock_owned_by_user ( sk ), sock_owned_by_user ( sk ) ) ) { if ( rcu_dereference_protected ( tp -> rcu, sock_owned_by_user ( sk ) ) == NULL ) { NET_INC_STATS_BH ( sock_net ( sk ), LINUX_MIB_SYNCOOKIESFAILED ) ; goto out ; } if ( rcu_dereference_protected ( tp -> rcu, sock_owned_by_user ( sk ) ) == 0 ) { if ( rcu_dereference_protected ( tp -> rcu, sock_owned_by_user ( sk ) ) == NULL ) { NET_INC_STATS_BH ( sock_net ( sk ), LINUX_MIB_SYNCOOKIESFAILED ) ; goto out ; } }",0
200,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> mutt_b64_decode ( char <S2SV_ModStart> char * in ) { int len = 0 ; * out ++ = ( base64val ( digit1 ) << 2 ) | ( base64val ( digit2 ) >> 4 ) ; len ++ ; if ( digit3!= '=' ) { * out ++ = ( ( base64val ( digit2 ) & 0xf0 ) | ( base64val ( digit3 ) >> 2 ) ; len ++ ; if ( digit4!= '=' ) { * out ++ = ( ( base64val ( digit3 ) & 0xc0 ) | ( base64val ( digit4 ) >> 2 ) ; len ++ ; } } } while ( * in && digit4!= '=' ) { * out ++ = ( ( base64val ( digit1 ) << 2 ) & 0xf0 ) | ( base64val ( digit2 ) >> 4 ) ; len ++ ; if ( digit3!= '=' ) { * out ++ = ( ( base64val ( digit3 ) & 0xc0 ) | ( base64val ( digit4 ) >> 2 ) ; len ++ ; } },0
201,"<S2SV_ModStart> svc_ctx ) { SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> * const si = get_svc_internal ( svc_ctx ) ; if ( svc_ctx == NULL || si == NULL ) return NULL ; svc_log_reset ( svc_ctx ) ; if ( svc_ctx -> encoding_mode == ALT_INTER_LAYER_PREDICTION_IP ) { svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes=[%u]\\n"", i, ( double ) si -> psnr_sum [ i ] [ 0 ] / number_of_frames, ( double ) si -> psnr_sum [ i ] [ 1 ] / number_of_frames, ( double ) si -> psnr_sum [ i ] [ 2 ] / number_of_frames, ( double ) si -> psnr_sum [ i ] [ 3 ] / number_of_frames, ( double ) si -> bytes_sum [ i ] ) ;",0
202,"<S2SV_ModStart> ; if ( screen -> buffer ) vterm_allocator_free ( screen -> vt, screen -> buffer ) ; screen -> buffer = NULL ; if ( <S2SV_ModStart> ; if ( screen -> buffer ) vterm_allocator_free ( screen -> vt, screen -> buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if ( screen -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if ( screen -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if ( screen -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt,",0
203,<S2SV_ModStart> { const char * literal_start = NULL ; const char * literal_end = NULL ; int in_named_escape = 0 ; int result = 0 ; <S2SV_ModStart> * str < end <S2SV_ModEnd> ; ( * <S2SV_ModStart> ++ ) { <S2SV_ModEnd> char ch = <S2SV_ModStart> ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 1 ; } else if ( in_named_escape && ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_start = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '{' ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } else if ( ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end =,0
204,"<S2SV_ModStart> = create_dump_dir_from_problem_data ( <S2SV_ModEnd> pd, g_settings_dump_location",0
205,<S2SV_ModStart> } else { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> width ) ) { if ( ( y1 + w1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr,0
206,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
207,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost",0
208,"<S2SV_ModStart> name ) { int ret ; ret = try_then_request_module ( __crypto_lookup_template ( name ), ""%s"", name ) ; if ( ret < 0 ) return ERR_PTR ( ret ) ; ret = try_then_request_module ( __crypto_lookup_template ( name ), ""%s"", name ) ; if ( ret < 0 ) return ERR_PTR ( ret ) ; ret = try_then_request_module ( __crypto_lookup_template ( name ), ""No <S2SV_blank> template <S2SV_blank> named <S2SV_blank> %s"", name ) ; if ( ret < 0 ) return ERR_PTR ( ret ) ; if ( ret < 0 ) return ERR_PTR ( ret ) ; ret = try_then_request_module ( __crypto_lookup_template ( name ), ""%s"", name ) ; if ( ret < 0 ) return ERR_PTR ( ret ) ; ret = try_then_request_module ( __crypto_lookup_template ( name ), ""No <S2SV_blank> template <S2SV_blank> named <S2SV_blank> %s"", name ) ; if ( ret < 0 ) return ERR_PTR ( ret ) ; ret = ERR_PTR ( ret",0
209,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> mi_col ; const <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> * idx_str = cpi <S2SV_ModEnd> -> mi_grid_visible + <S2SV_ModStart> idx_str ; MODE_INFO * * prev_mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> -> prev_mi_grid_visible + idx_str <S2SV_ModEnd> ; BLOCK_SIZE bsize <S2SV_ModStart> cpi, tile, mi <S2SV_ModEnd>, BLOCK_64X64, <S2SV_ModStart> BLOCK_64X64 ) ; vp9_zero ( xd -> <S2SV_ModEnd> pred_mv ) ; <S2SV_ModStart> case SOURCE_VAR_BASED_PARTITION : switch ( cpi -> sf. partition_search_type ) { case VAR_BASED_PARTITION : choose_partitioning ( cpi, tile, mi_row, mi_col ) ; nonrd_use_partition ( cpi, tile, mi_row, mi_col, BLOCK_64X",0
210,"<S2SV_ModStart> ; dh = skb_header_pointer <S2SV_ModEnd> ( skb,",0
211,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> = ""/etc"" ) == NULL ) { ulckpwdf ( ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( ( fd = mkstemp ( & tmpname, dir ) ) == NULL ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; }",0
212,"<S2SV_ModStart> mnt ) ; if (! IS_ERR ( dentry -> d_inode -> i_op -> follow_link ) ) { dentry -> d_inode -> i_op -> follow_link ( dentry, nd ) ; error = PTR_ERR ( cookie ) ; if (! IS_ERR ( cookie ) ) { char * s = nd_get_link ( nd ) ; error = 0 ; if ( s ) error = __vfs_follow_link ( nd, s ) ; else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; } else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; } else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; } else if ( nd -> last_type",0
213,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_options_get_finish ( struct <S2SV_ModStart> * optp, struct ip_options_rcu <S2SV_ModEnd> * opt, <S2SV_ModStart> int opt, size_t <S2SV_ModEnd> optlen ) { <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ ] = IPOPT_END ; if ( opt -> optlen < opt -> optlen ) { kfree ( opt ) ; return - EINVAL ; } if ( opt -> optlen < opt -> optlen ) { kfree ( opt ) ; return - EINVAL ; } if ( opt -> optlen < opt -> optlen ) { kfree ( opt ) ; * optp = NULL ; return 0 ; } if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( opt ) ; return - EINVAL ; }",0
214,"<S2SV_ModStart> ; if ( connection == NULL ) goto error ; else { bool found_upgrade = false ; int count ; sds * tokens = sdssplitlen ( connection, strlen ( connection ), "","", 1, & count ) ; if ( tokens == NULL ) goto error ; if ( count < 1 ) goto error ; for ( int i = 0 ; i < count ; i ++ ) { sds token = tokens [ i ] ; sdstrim ( token, ""Upgrade"" ) ; if ( strcasecmp ( token, ""Upgrade"" ) == 0 ) { found_upgrade = true ; break ; } } sdsfreesplitres ( tokens, count ) ; if (! found_upgrade ) goto error ; } else { bool found_upgrade = false ; int count ; sds * tokens = sdssplitlen ( connection, strlen ( connection ), "","", 1, & count ) ; if ( tokens == NULL ) goto error ; for ( int i = 0 ; i < count ; i ++ ) { sds token = tokens [ i ] ; sdsfreesplitres ( tokens, count ) ; if (! found_upgrade ) goto error ; for ( int i = 0 ; i < count ; i ++ )",0
215,"<S2SV_ModStart> uint16 nif = 0 ; if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ; } if ( pcap_findalldevs ( & alldevs, errmsgbuf ) == - 1 ) { return - 1 ; } if ( alldevs == NULL ) { if ( rpcap_senderror ( pars -> sockctrl, ver, PCAP_ERR_NOREMOTEIF, ""No <S2SV_blank> interfaces <S2SV_blank> found! <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed"" "" <S2SV_blank> and <S2SV_blank> you <S2SV_blank> have <S2SV_blank> right <S2SV_blank> to <S2SV_blank> access <S2SV_blank> to <S2SV_blank> the <S2SV_blank> remote <S2SV_blank> device."", errbuf ) == - 1 ) { rpcapd_log ( LOGPRIO_ERROR, ""Send <S2SV_blank> to <S2SV_blank> client <S2SV_blank> failed: <S2SV_blank> %s"", errbuf ) ; return - 1 ; } return 0 ; } for ( d = alldevs ; d!= NULL ; d = d -> next ) { nif ++ ; if ( d -> description ) { if ( strlen ( d -> description ) ) { if ( strlen ( d -> name ) )",0
216,"<S2SV_ModStart> ; struct dump_dir <S2SV_ModEnd> * dd = <S2SV_ModStart>, DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } dd_create_basic_files ( dd, client_uid, NULL ) ; dd_save_text ( dd, FILENAME_ABRT_VERSION, VERSION ) ; dd_save_text ( dd, FILENAME_CMDLINE, cmdline ) ; free ( cmdline ) ;",0
217,"<S2SV_ModStart> { for ( bit = 0 ; bit < ( ssize_t ) ( <S2SV_ModStart> % 2 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 2 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 2 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 4 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 4 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; SetPixelRGBO ( q",0
218,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
219,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
220,<S2SV_ModStart> = len ; if ( len < 4 ) goto trunc ; <S2SV_ModStart> = len ; if ( len < 4 ) goto trunc ; <S2SV_ModStart> = len ; bp += 4 ; len -= 4 ; if ( len < 4 ) goto trunc ; <S2SV_ModStart> = len ; bp += 4 ; len -= 4 ; if ( len < 4 ) goto trunc ; <S2SV_ModStart> = len ; bp += 4 ; len -= 4 ; if ( len < 4 ) goto trunc ; <S2SV_ModStart> = len ; bp += 4 ; len -= 4 ; if ( len < 4 ) goto trunc ;,0
221,<S2SV_ModStart>! dumpable &&! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ),0
222,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
223,<S2SV_ModStart> case SEI_USER_DATA_REGISTERED_ITU_T : ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; ps_parse -> s_sei_params. i4_sei_user_data_registered_ITU_t_t35 = 1 ; ps_parse -> s_sei_params. i4_sei_user_data_registered_ITU_t_35 = 1 ; ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; ps_parse -> s_sei_params. i4_sei_user_data_registered_ITU_t_t35 = 1 ; ps_parse -> s_sei_params. i4_sei_user_data_registered_ITU_t_35 = 1 ; ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; ps_parse -> s_sei_params. i,0
224,"<S2SV_ModStart> = kzalloc ( sizeof ( * dd -> per_sdma ), GFP_KERNEL ) ; if (! tmp_sdma_rht ) { kfree ( tmp_sdma_rht ) ; return - ENOMEM ; }",0
225,"<S2SV_ModStart>, int rep_quick, myisam_table * table <S2SV_ModEnd> ) { int <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", table <S2SV_ModEnd> -> name ) <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", table <S2SV_ModEnd> -> name ) <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", table <S2SV_ModEnd> -> name ) <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", table <S2SV_ModEnd> -> name ) <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", table <S2SV_ModEnd> -> name ) <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", table <S2SV_ModEnd> -> name ) <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'",0
226,"<S2SV_ModStart> q, 10 ) ; if ( q == ( char * ) NULL || <S2SV_ModStart> || size > MAX_SIZES ) return ( DestroyImageList ( images ) ) ; p = q ; sizes [ i ++ ] = size ; while ( ( isspace ( ( int ) ( ( unsigned char ) * p ) )!= 0 ) || ( * p == ',' ) ) ) p ++ ; if ( i == 0 ) i = 10 ; for ( i = 0 ; i < 10 ; i ++ ) { resized = ResizeImage ( images, sizes [ i ], sizes [ i ], image -> filter, exception ) ; if ( resized == ( Image * ) NULL ) return ( DestroyImageList ( images ) ) ; if ( images == ( Image * ) NULL ) ) return ( DestroyImageList ( images ) ) ; if ( images == ( Image * ) NULL ) return ( DestroyImageList ( images ) ) ; for ( i = 0 ; i < 10 ; i ++ ) { resized = ResizeImage ( images, sizes [ i ], sizes [ i ], image -> filter, exception ) ; if ( images == ( Image * ) NULL ) return ( DestroyImageList ( images ) ) ; if ( images == ( Image *",0
227,"<S2SV_ModStart> ) ; } if ( pcount > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, ( int ) ( MaxAllocSize / sizeof ( Pairs ) ) ) ) ) ;",0
228,"<S2SV_ModStart> val ) ; if (! strchr ( var, ""command"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> command"", r -> name ) ; if (! strchr ( var, ""rspfile"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if (! strchr ( var, ""rspfile_content"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if (! strchr ( var, ""rspfile_content"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ;",0
229,"<S2SV_ModStart> query ) { if ( strlen ( qend ) > sizeof ( c -> buf ) - 1 ) { agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", agoo_con_kind_str ( c -> bind -> kind ), ( unsigned long long ) c -> id, c -> buf ) ; } else if ( strlen ( qend ) > sizeof ( c -> buf ) - 1 ) { agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", agoo_con_kind_str ( c -> bind -> kind ), ( unsigned long long ) c -> id, c -> buf ) ; } else if ( strlen ( qend ) > sizeof ( c -> buf ) - 1 ) { agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", ( unsigned long long ) c -> id, c -> buf ) ; } else { if ( strlen ( qend ) > sizeof ( c -> buf ) - 1 ) { return bad_request ( c, 431, __LINE__ ) ; }",0
230,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; <S2SV_ModEnd> int i, <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16 <S2SV_ModStart> ++ j ) out <S2SV_ModEnd> [ j *",1
231,"<S2SV_ModStart> g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY",0
232,"<S2SV_ModStart> ; char * temp_filename <S2SV_ModEnd> ; if ( <S2SV_ModStart>! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } temp_filename = osi_calloc ( strlen ( filename ) + 5 ) ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } for ( const list_node_t * node = list_begin ( config -> sections ) ; node!= list_end ( config -> sections ) ) { const section_t * section = ( const section_t * ) list_node ( node ) ; fprintf ( fp, ""[%s]\\n""",0
233,"<S2SV_ModStart> elen ) ; elen += sizeof ( struct pathComponent ) + pc -> lengthComponentIdent ; <S2SV_ModStart> case 1 : elen += pc -> lengthComponentIdent ; break ; case 2 : if ( tolen == 0 ) return - ENAMETOOLONG ; * p ++ = '/' ; tolen -- ; break ; case 3 : if ( tolen < 3 ) return - ENAMETOOLONG ; memcpy ( p, ""../"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 4 : if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""./"", 4 ) ; p += 4 ; tolen -= 4 ; break ; case 5 : if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""./"", 4 ) ; p += 4 ; tolen -= 4 ; break ; case 6 : comp_len = udf_get_filename ( sb, pc -> componentIdent, pc -> lengthComponentIdent, p, comp_len ) ; p += comp_len ; tolen -= comp_len ; if ( tolen == 0 ) return - ENAMETOOLONG ; * p ++ = '/' ; tolen",0
234,"<S2SV_ModStart> tlv_len ) ; if ( tlv_len < 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> MgmtD <S2SV_blank> Len <S2SV_blank> %u]"", mgmtd_len ) ) ; goto trunc ; } <S2SV_ModStart> tlv_len ) ; if ( tlv_len < 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> MgmtD <S2SV_blank> Len <S2SV_blank> %u]"", tlv_len ) ) ; goto trunc ; } <S2SV_ModStart> tlv_len ) ; if ( tlv_len < 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> MgmtD <S2SV_blank> Len <S2SV_blank> %u]"", tlv_len ) ) ; goto trunc ; } <S2SV_ModStart> case VTP_SUMMARY_VLAN : if ( tlv_len < 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> MgmtD <S2SV_blank> Len <S2SV_blank> %u]"", tlv_len ) ) ; goto trunc ; } if ( tlv_len < 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> MgmtD <S2SV_blank> Len <S2SV_blank> %u]"", tlv_len ) ) ; goto",0
235,"<S2SV_ModStart>, target, NULL ) ; else { xmlErrMemory ( ctxt, NULL ) ; ctxt -> instate = state ; return ; } if ( ( ctxt -> input == NULL ) || ( NXT ( 1 ) == '>' ) ) { xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" ) ; } SKIP_BLANKS ; cur = CUR_CHAR ( l ) ; if (! IS_CHAR ( cur ) ) { xmlErrMsgStr ( ctxt, XML_ERR_SPACE_REQUIRED, ""ParsePI: <S2SV_blank> PI <S2SV_blank> %s <S2SV_blank> space <S2SV_blank> expected\\n"", target ) ; } SKIP_BLANKS ; cur = CUR_CHAR ( l ) ; if (! IS_CHAR ( cur ) ) { xmlFatalErrMsg ( ctxt, XML_ERR_SPACE_REQUIRED, ""ParsePI: <S2SV_blank> PI <S2SV_blank> %s <S2SV_blank> space <S2SV_blank> expected\\n"", target ) ; } SKIP_BLANKS ; cur = CUR_CHAR ( l ) ; if (! IS_CHAR ( cur ) ) { xmlFatalErrMsg ( ctxt, XML_ERR",0
236,"<S2SV_ModStart> int tagval ; struct stream packet ; <S2SV_ModStart> length ) ; packet = * s ; <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> tag <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> tag <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> tag <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
237,"<S2SV_ModStart> ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" <S2SV_ModEnd> ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModStart> ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd> ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" ""%s"",",0
238,"<S2SV_ModStart> } pid_t child <S2SV_ModEnd> = fork ( <S2SV_ModStart> 0 ) ; copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ) ; if ( copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ( src, dest, getuid ( ), getgid ( ), S_IRUSR | S_IWUSR ) < 0 ) errExit ( ""chown"" ) ; unlink ( src ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
239,<S2SV_ModStart> ; if ( rc == BFA_STATUS_OK && fcstats -> fc. secs_reset > 0 ) { <S2SV_ModStart> wait_for_completion ( & fcomp. comp ) ; kfree ( fcstats ) ; return NULL ; } hstats -> seconds_since_last_reset = fcstats -> fc. secs_reset ; hstats -> tx_frames = fcstats -> fc. tx_frames ; hstats -> tx_words = fcstats -> fc. tx_words ; hstats -> rx_frames = fcstats -> fc. rx_frames ; hstats -> rx_words = fcstats -> fc. rx_words ; hstats -> lip_count = fcstats -> fc. lip_count ; hstats -> nos_count = fcstats -> fc. nos_count ; hstats -> error_count = fcstats -> fc. error_count ; hstats -> dumped_count = fcstats -> fc. dropped_count ; hstats -> link_failure_count = fcstats -> fc. link_failures ; hstats -> loss_of_sync_count = fcstats -> fc. loss_of_syncs ; hstats -> link_error_count = fcstats -> fc,0
240,"<S2SV_ModStart> value ) { value -> w = MinF ( 1.0f, MaxF ( 0.0f, value -> w ) ) ; value -> y = MinF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; value -> z = MinF ( 1.0f, MaxF ( 0.0f, value -> z ) ) ; <S2SV_ModStart> -> x = MinF ( 1.0f, MaxF ( 0.0f, value -> x ) ) ; value -> w = MinF ( 1.0f, MaxF ( 0.0f, value -> w ) ) ; value -> w = MinF ( 1.0f, MaxF ( 0.0f, value -> w ) ) ; value -> y = MinF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; value -> z = MinF ( 1.0f, MaxF ( 0.0f, value -> z ) ) ; <S2SV_ModEnd> } <S2SV_null>",0
241,<S2SV_ModStart> -> sasl_mechanism ; rec -> sasl_username = g_strdup ( src -> sasl_username ) ; rec -> sasl_password = g_strdup ( src -> sasl_password ) ; <S2SV_ModStart> -> sasl_username = g_strdup ( src -> sasl_username ) ; rec -> sasl_password = g_strdup ( src -> sasl_password ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> usermode = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_,0
242,<S2SV_ModStart> ; } memset <S2SV_ModEnd> ( cpi ->,0
243,"<S2SV_ModStart>, o, datao ; if ( CHECKOVERFLOW ( buf_size, 6 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } datao = 6 + n -> offset ; if ( CHECKOVERFLOW ( datao, buf_size, 2 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } c = exif_get_short ( buf + o, n -> order ) ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. entries = exif_mem_alloc ( ne -> mem, sizeof ( MnoteCanonEntry ) * c ) ; if (! n -> entries ) { exif_log ( ne -> log, EXIF_",0
244,"<S2SV_ModStart> HA_ERR_CRASHED : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> MyISAM-table"", filename ) ; break ; case HA_ERR_NOT_A_TABLE : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> MyISAM-table"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed <S2SV_blank> after <S2SV_blank> last <S2SV_blank> repair"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed <S2SV_blank> after <S2SV_blank> last <S2SV_blank> repair"", filename ) ; break ; case HA_ERR_CRASHED_ON_USAGE : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed <S2SV_blank> after <S2SV_blank> last <S2SV_blank> repair"", filename ) ; break ; case HA",0
245,"<S2SV_ModStart> len ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> int alloc = ( length? length : ( size_t ) strlen ( string ) ) + 1 ; char * ns = malloc ( alloc ) ; unsigned char in ; int strindex = 0 ; unsigned long hex ; CURLcode res ; if (! ns ) return NULL ; while ( alloc > 0 ) { in = * string ; if ( ( '%' == in ) && ISXDIGIT ( string [ 1 ] ) && ISXDIGIT ( string [ 2 ] ) ) { hex = strtoul ( string, & ptr, 16 ) ; in = curlx_ultouc ( hex ) ; res = Curl_convert_from_network ( handle, & in, 1 ) ; if ( res ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; } ns [ strindex ++ ] = in ; } ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ; return ns ; } ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ;",0
246,"<S2SV_ModStart> ; RAnalOp next_op ; if ( len < 2 ) { avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; } else if ( len < 2 ) { avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; } else if ( len < 2 ) { avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; avr_op_fini ( & next_op. esil ) ; } else if ( len < 2 ) { avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu",0
247,"<S2SV_ModStart> = usm_secmod_process_in_msg ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_POST_PREMIB_WRITE_CONFIG, init_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, free_engineID, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, free_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, free_engineID, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN,",0
248,<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) {,0
249,"<S2SV_ModStart> ] ; # ifndef NETSNMP_NO_WRITE_SUPPORT switch ( action ) { case MODE_SET_RESERVE1 : if ( var_val_type!= ASN_INTEGER ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> type <S2SV_blank>!= <S2SV_blank> int\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= 1 ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; } if (! exten ||! exten -> efix_entry ) { snmp_log ( LOG_ERR, ""No <S2SV_blank> command <S2SV_blank> to <S2SV_blank> run\\n"" ) ; return SNMP_ERR_GENERR ; }",0
250,<S2SV_ModStart> ; break ; case 3 : { CheckNumberPixels ( 4 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 5 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 4 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 2 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 3 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >>,0
251,"<S2SV_ModStart> timer ) ; list_for_each_entry ( slave, & timeri -> slave_list_head, open_list ) { spin_lock_irq ( & slave_active_lock ) ; _snd_timer_stop ( slave, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail ( & slave -> open_list, & snd_timer_slave_list ) ; <S2SV_ModStart> NULL ; } list_for_each_entry_safe ( slave, tmp, & timeri -> slave_list_head, open_list ) { spin_lock_irq ( & slave_active_lock ) ; _snd_timer_stop ( slave, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail ( & slave -> open_list, & snd_timer_slave_list ) ; <S2SV_ModStart> slave_active_lock ) ; } mutex_unlock ( & register_mutex ) ;",0
252,<S2SV_ModStart> -> u1_dpb_commands_read ) ps_dec -> u4_bitoffset = ih264d_read_mmco_commands ( ps_dec ) ; else ps_dec -> ps_bitstrm -> u4_ofst += ps_dec -> u4_bitoffset ; if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) ps_dec -> u4_bitoffset = ih264d_read_mmco_commands ( ps_dec ) ; else ps_dec -> ps_bitstrm -> u4_ofst += ps_dec -> u4_bitoffset ;,0
253,<S2SV_ModStart> { int_fast32_t widthOverflow = gifFilePtr -> Image. Width - info -> originalWidth ; int_fast32_t heightOverflow = gifFilePtr -> Image. Height - info -> originalHeight ; uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( widthOverflow > 0 || heightOverflow > 0 ) { gifFilePtr -> SWidth += widthOverflow ; gifFilePtr -> SHeight += heightOverflow ; } if ( decode ) { int_fast32_t widthOverflow = gifFilePtr -> Image. Width - gifFilePtr -> originalWidth ; int_fast32_t heightOverflow = gifFilePtr -> Image. Height - info -> originalHeight ; uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( widthOverflow > 0 || heightOverflow > 0 ) { gifFilePtr -> SWidth += widthOverflow ; gifFilePtr -> SHeight += heightOverflow ; } <S2SV_ModStart> uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > <S2SV_ModEnd> info -> raster,0
254,<S2SV_ModStart> || cherokee_buffer_is_empty ( <S2SV_ModEnd> conn -> validator,0
255,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ReadBlobByte ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ReadBlobByte ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlobByte ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ReadBlobByte ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) Throw",0
256,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> has <S2SV_blank> wrong <S2SV_blank> bus <S2SV_blank> %d <S2SV_blank> info!\\n"", __func__, dev -> name, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",1
257,"<S2SV_ModStart> ( ""size <S2SV_blank> %zu <S2SV_blank> flags <S2SV_blank> 0x%x <S2SV_blank> timeo <S2SV_blank> %ld\\n"" <S2SV_ModEnd>, size, <S2SV_ModStart> timeo ) ; msg -> msg_namelen = sizeof ( * sin ) ;",0
258,"<S2SV_ModStart> 0 ) { if ( len < 9 ) { fprintf ( stderr, ""Invalid <S2SV_blank> font <S2SV_blank> name <S2SV_blank> length\\n"" ) ; exit ( EXIT_FAILURE ) ; } <S2SV_ModStart> ++ s ; if ( len < 1 ) { fprintf ( stderr, ""Invalid <S2SV_blank> font <S2SV_blank> name <S2SV_blank> length\\n"" ) ; exit ( EXIT_FAILURE ) ; } <S2SV_ModStart> = ++ s ; if ( len < 1 ) { fprintf ( stderr, ""Invalid <S2SV_blank> font <S2SV_blank> name <S2SV_blank> length\\n"" ) ; exit ( EXIT_FAILURE ) ; } if ( len < 1 ) { fprintf ( stderr, ""Invalid <S2SV_blank> font <S2SV_blank> name <S2SV_blank> length\\n"" ) ; exit ( EXIT_FAILURE ) ; } if ( len < 1 ) { fprintf ( stderr, ""Invalid <S2SV_blank> font <S2SV_blank> name <S2SV_blank> length\\n"" ) ; exit ( EXIT_FAILURE ) ; } <S2SV_ModStart> = ++ s ; if ( len < 1 ) { fprintf ( stderr, ""Invalid <S2SV_blank> font <S2SV_blank> name <S2SV_blank> length\\n"" ) ; exit ( EXIT_FAILURE ) ; } if ( len < 1 ) { fprintf ( stderr, ""Invalid <S2SV_blank> font <S2SV_blank> name <S2SV_blank> length\\n"" ) ; exit ( EXIT_FAILURE ) ; }",0
259,"<S2SV_ModStart> = uipc_main. active_set ; if ( uipc_main. read_set < 0 ) { BTIF_TRACE_EVENT ( ""read <S2SV_blank> set <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist"" ) ; continue ; } if ( uipc_main. read_set >= UINT32_MAX ) { BTIF_TRACE_EVENT ( ""read <S2SV_blank> set <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist"" ) ; continue ; } else if ( uipc_main. read_set >= UINT32_MAX ) { BTIF_TRACE_EVENT ( ""read <S2SV_blank> set <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist"" ) ; continue ; } else if ( uipc_main. read_set >= UINT32_MAX ) { BTIF_TRACE_EVENT ( ""read <S2SV_blank> set <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist"" ) ; continue ; } else if ( uipc_main. read_set >= UINT32_MAX ) { BTIF_TRACE_EVENT ( ""read <S2SV_blank> set <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist"" ) ; continue ; }",0
260,"<S2SV_ModStart> msixcap ; assert ( msgnum >= 1 && msgnum <= MAX_MSIX_TABLE_ENTRIES ) ; if ( barnum < 0 || barnum >= PCIR_MAX_BAR_0 ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> bar <S2SV_blank> number <S2SV_blank> for <S2SV_blank> device <S2SV_blank> %d\\n"", __func__, barnum ) ; return - EINVAL ; } <S2SV_ModEnd> pci_msix_table_init ( dev <S2SV_ModStart> msgnum ) ; if ( barnum >= 0 && barnum <= PCIR_MAX_BAR_0 ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> bar <S2SV_blank> number <S2SV_blank> for <S2SV_blank> device <S2SV_blank> %d\\n"", __func__, barnum ) ; return - EINVAL ; }",0
261,"<S2SV_ModStart> ; if ( ( r = check_ssh_auth_ctxt ( authctxt ) )!= 0 ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if ( ( r = check_ssh_auth_ctxt ( authctxt ) )!= 0 ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if ( ( r = check_ssh_auth_ctxt ( authctxt ) )!= 0 ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if ( ( r = check_ssh_auth_ctxt ( authctxt ) )!= 0 ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; }",0
262,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
263,"<S2SV_ModStart> == NULL ) { retval = KRB5KDC_ERR_PREAUTH_FAILED ; goto cleanup ; } status = X509_NAME_cmp ( X509_get_issuer_name ( kdc_cert ), is -> issuer ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) * valid_kdcPkId = 1 ; } retval = 0 ; <S2SV_ModEnd> cleanup : X509_NAME_free",0
264,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> np -> tclass ) ; rcu_read_unlock ( ) ;",0
265,<S2SV_ModStart> <S2SV_null> <S2SV_null> static TX_MODE <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart> ) { const VP9EncoderConfig <S2SV_ModEnd> * cpi = <S2SV_ModStart> lossless ) { return ONLY_4X4 <S2SV_ModEnd> ; } else <S2SV_ModStart> else if ( <S2SV_ModEnd> cpi -> sf <S2SV_ModStart> == USE_LARGESTALL ) { return ALLOW_32X32 ; } else if ( cpi -> sf. tx_size_search_method == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ]? ALLOW_32X32 : TX_MODE_SELECT ; } else if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL ) { return ALLOW_32X32 ; } else if ( cpi -> sf. tx_size_search_method == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_,0
266,<S2SV_ModStart>! magfact ) <S2SV_ModEnd> magfact = - <S2SV_ModStart>! magfact ) <S2SV_ModEnd> printval = magfact <S2SV_ModStart>! magfact ) <S2SV_ModEnd> printval = magfact <S2SV_ModStart>! magfact ) <S2SV_ModEnd> printval = magfact <S2SV_ModStart>! magfact ) <S2SV_ModEnd> printval = magfact <S2SV_ModStart>! magfact ) <S2SV_ModEnd> printval = magfact <S2SV_ModStart>! magfact ) <S2SV_ModEnd> printval = magfact <S2SV_ModStart>! magfact ) <S2SV_ModEnd> printval = magfact <S2SV_ModStart>! magfact ) <S2SV_ModEnd> printval = magfact <S2SV_ModStart>! magfact ) <S2SV_ModEnd> printval = magfact <S2SV_ModStart>! magfact ) <S2SV_ModEnd> printval = magfact <S2SV_ModStart>! magfact ) <S2SV_ModEnd> printval = magfact <S2SV_ModStart>! magfact ) <S2SV_ModEnd> printval = magfact <S2SV_ModStart>! magfact ) <S2SV_ModEnd> printval = magfact <S2SV_ModStart>! magfact ) <S2SV_ModEnd> printval = magfact <S2SV_ModStart>! magfact ) <S2SV_ModEnd> printval = magfact <S2SV_ModStart>! magfact ) <S2SV_ModEnd> printval = magfact <S2SV_ModStart>! magfact ) <S2SV_ModEnd> printval = magfact <S2SV_ModStart>! magfact ) <S2SV_ModEnd> printval = magfact <S2SV_ModStart>! magfact ) <S2SV_ModEnd> printval = magfact <S2SV_ModStart>! magfact ) <S2SV_ModEnd> printval = magfact <S2SV_ModStart>! magfact ) <S2SV_ModEnd> printval = magfact <S2SV_ModStart>! magfact ) <S2SV_ModEnd> printval = magfact,0
267,<S2SV_ModStart> if ( buf1 -> num_tiles < buf2 -> num_tiles ) { return 1 ; } else if ( buf1 -> num_tiles == buf2 -> num_tiles ) { return - 1 ; } else if ( buf1 -> num_tiles == buf2 -> num_tiles ) { return 1 ; } else if ( buf1 -> num_tiles == buf2 -> num_tiles ) { return 0 ; } else if ( buf1 -> num_tiles == buf2 -> num_tiles ) { return 1 ; } else if ( buf1 -> num_tiles == buf2 -> num_tiles ) { return - 1 ; } else if ( buf1 -> num_tiles == buf2 -> num_tiles ) { return 1 ; } else if ( buf1 -> num_tiles == buf2 -> num_tiles ) { return - 1 ; } else if ( buf1 -> num_tiles == buf2 -> num_tiles ) { return 0 ; } else if ( buf1 -> num_tiles == buf2 -> num_tiles ) { return - 1 ; } else if ( buf1 -> num_tiles == buf2 -> num_tiles ) { return 1 ; } else if ( buf1 -> num_,0
268,"<S2SV_ModStart> ( * info ) + size ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) { info = vmalloc ( sz ) ; if (! info ) return NULL ; } if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) { info = vmalloc ( sz ) ; if (! info ) return NULL ; } else { info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) return NULL ; }",0
269,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
270,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
271,"<S2SV_ModStart> -> _eip ; rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val, false",0
272,"<S2SV_ModStart> list. name, false",0
273,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
274,"<S2SV_ModStart> b ) ; sd_event_add_io ( & b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { r = log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } r = sd_event_add_io ( & b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } r = log_debug_errno ( SYNTHETIC_ERRNO ( EADDRNOTAVAIL ), ""Device <S2SV_blank> %s <S2SV_blank> does <S2SV_blank> not <S2SV_blank> expose <S2SV_blank> keys <S2SV_blank> or <S2SV_blank> switches <S2SV_blank> relevant <S2SV_blank> to <S2SV_blank> us, <S2SV_blank> ignoring."", p ) ; if ( r < 0 ) { r = log_error_errno ( errno, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; }",0
275,<S2SV_ModStart> ( errors ) return TEST_ERR_MAJOR_BAD ; else return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
276,<S2SV_ModStart> lun ) sas_eh_finish_cmd <S2SV_ModEnd> ( cmd ),0
277,"<S2SV_ModStart> ; REQ ( n, funcdef ) ; name = NEW_IDENTIFIER ( CHILD ( n, name_i ) ) ; if (! name ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; args = ast_for_arguments ( c, CHILD ( n, name_i + 2 ) ) ; if (! args ) return NULL ; body = ast_for_suite ( c, CHILD ( n, name_i + 3 ) ) ; if (! body ) return NULL ; get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; if ( is_async ) return AsyncFunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n0 ), n0 -> n_col_offset, end_lineno, end_col_offset, c -> c_arena ) ; else return FunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n0 ), n0 -> n_col_offset, end_lineno, end_col_offset, c",0
278,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
279,"<S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
280,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> ) ) ) rc = <S2SV_ModStart> ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>,1
281,,1
282,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
283,"<S2SV_ModStart> case SEEK_SET : <S2SV_ModEnd> if ( position <S2SV_ModStart> > psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; <S2SV_ModStart> > psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> < 0 ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf -> headindex + position <= psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf ->",0
284,<S2SV_ModStart> ; return ( IHEVCD_ERROR_T ) IHEVCD_INVALID_PARAMETER <S2SV_ModEnd> ; } <S2SV_null>,0
285,<S2SV_ModStart> == 0 ) { if ( prev_line_has_list_loosening_effect ) { line -> type = MD_LINE_LIST_LOOSE ; ctx -> last_line_has_list_loosening_effect = 1 ; } else if ( prev_line_has_list_loosening_effect == 1 ) { line -> type = MD_LINE_LIST_LOOSE ; ctx -> last_line_has_list_loosening_effect = 1 ; } else if ( prev_line_has_list_loosening_effect ) { line -> type = MD_LINE_LIST_LOOSE ; ctx -> last_line_has_list_loosening_effect = 0 ; } else if ( prev_line_has_list_loosening_effect == 1 ) { line -> type = MD_LINE_LIST_LOOSE ; ctx -> last_line_has_list_loosening_effect = 0 ; } } else if ( prev_line_has_list_loosening_effect ) { line -> type = MD_LINE_LIST_LOOSE ; ctx -> last_line_has_list,0
286,<S2SV_ModStart> event ) { <S2SV_ModEnd> struct task_struct * <S2SV_ModStart> state = PERF_EVENT_STATE_OFF <S2SV_ModEnd> ; } raw_spin_lock_irq,0
287,<S2SV_ModStart> -> post_proc_flag = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_display_mv_flag? VP9D_DEBUG_DRAW_MV : 0 ) | # else ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) <S2SV_ModEnd> ; flags ->,0
288,"<S2SV_ModStart> = 0 ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_common ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6 ) ) ; goto trunc ; } <S2SV_ModStart> struct olsr_msg4 ) ) ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg6 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6 ) ) ) ; goto trunc ; } <S2SV_ModStart> struct olsr_msg4 ) ) ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6 )",0
289,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,1
290,"<S2SV_ModStart> { fprintf ( stderr <S2SV_ModEnd>, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) <S2SV_ModStart> 0 ) ; fchown ( dest, getuid ( ), getgid ( ) ) ; if ( chown ( dest, getuid ( ), getgid ( ) ) == - 1 ) errExit ( ""fchown"" ) ; if ( chmod ( dest, 0600 ) == - 1 ) errExit ( ""fchmod"" ) ; return 1 ; } child = copy_file ( src, dest ) ; if ( child == 0 ) { drop_privs ( 0 ) ; copy_file ( src, dest, getuid ( ), getgid ( ) ) ; if ( chown ( dest, getuid ( ), getgid ( ) ) == - 1 ) errExit ( ""fchown"" ) ; if ( chmod ( dest, 0600 ) == - 1 ) errExit ( ""fchmod"" ) ;",0
291,"<S2SV_ModStart> ; if ( unlikely (! path [ depth ]. p_ext ) ) { EXT4_ERROR_INODE ( inode, ""p_ext <S2SV_blank> > <S2SV_blank> EXT_MAX_EXTENT!"" ) ; return - EFSCORRUPTED ; } if ( <S2SV_ModStart> ) ) { EXT4_ERROR_INODE ( inode, ""p_ext <S2SV_blank> > <S2SV_blank> EXT_MAX_EXTENT!"" ) ; return - EFSCORRUPTED ; } if ( path [ depth ]. p_ext!= EXT_MAX_EXTENT ( path [ depth ]. p_hdr ) ) { EXT4_ERROR_INODE ( inode, ""p_ext <S2SV_blank> > <S2SV_blank> EXT_MAX_EXTENT!"" ) ; return - EFSCORRUPTED ; } if ( <S2SV_ModStart> ) ) { EXT4_ERROR_INODE ( inode, ""p_ext <S2SV_blank> > <S2SV_blank> EXT_MAX_EXTENT!"" ) ; return - EFSCORRUPTED ; } if ( path [ depth ]. p_ext!= EXT_MAX_EXTENT ( path [ depth ]. p_hdr ) ) { EXT4_ERROR_INODE ( inode, ""p_ext <S2SV_blank> > <S2SV_blank> EXT_MAX_EXT",0
292,<S2SV_ModStart> } else { if ( ptr_hbe_txposer -> start_band == 0 && ptr_hbe_txposer -> end_band == 0 && ptr_hbe_txposer -> upsamp_4_flag ) { if ( ptr_hbe_txposer -> k_start == 0 ) ptr_hbe_txposer -> k_start = 0 ; } <S2SV_ModStart> } else { if ( ptr_hbe_txposer -> start_band == 0 && ptr_hbe_txposer -> end_band == 0 && ptr_hbe_txposer -> k_start == 0 ) { if ( ptr_hbe_txposer -> start_band == 0 && ptr_hbe_txposer -> upsamp_4_flag ) { if ( ptr_hbe_txposer -> k_start == 0 ) ptr_hbe_txposer -> k_start = 0 ; } else { if ( ptr_hbe_txposer -> start_band == 0 && ptr_hbe_txposer -> end_band == 0 && ptr_hbe_txposer -> k_start == 0 ) { if ( ptr_hbe_txposer -> k_,0
293,"<S2SV_ModStart> lua_module ) ; <S2SV_ModEnd> const lua_authz_provider_spec * <S2SV_ModStart> prov_spec = parsed_require_line ; apr_pool_t * pool = NULL ; spec = create_vm_spec ( & pool, r, cfg, server_cfg, ""authz <S2SV_blank> provider"" ) ; if ( L == NULL ) { ap_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02314 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", prov_spec -> function_name, prov_spec -> file_name ) ; ap_lua_release_state ( L, spec, r ) ; return AUTHZ_GENERAL_ERROR ; } L = create_lua_state ( pool, spec, r ) ; if ( L == NULL ) { ap_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02319 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a",0
294,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
295,"<S2SV_ModStart>! proto_end ) { printk ( KERN_ERR ""Malformed <S2SV_blank> credential <S2SV_blank> URL: <S2SV_blank> %s\\n"", url ) ; exit ( 1 ) ; } if ( len ( proto_end ) < 3 ) { printk ( KERN_ERR ""Malformed <S2SV_blank> credential <S2SV_blank> URL: <S2SV_blank> %s\\n"", url ) ; exit ( 1 ) ; } if ( len ( proto_end ) < 3 ) { printk ( KERN_ERR ""Malformed <S2SV_blank> credential <S2SV_blank> URL: <S2SV_blank> %s\\n"", url ) ; return 0 ; }",0
296,"<S2SV_ModStart> ; end = path + path_len - 1 <S2SV_ModEnd> ; do { <S2SV_ModStart> nextoffset ; switch ( tag ) { case FDT_END_NODE : depth = - 1 ; if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BADSTRUCTURE ; name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> ; name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_BADSTRUCTURE ; if (! name ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return",0
297,"<S2SV_ModStart> ) ) { if (! ( loops % 100 ) ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; } else { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; } } if ( ( loops % 100 ) ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; } else { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. slaves ), listLength",0
298,"<S2SV_ModStart> channel ) ; if (! client -> priv -> watch_id ) { g_io_channel_remove_watch ( channel, G_IO_IN | G_IO_ERR, ( GIOFunc ) client_iochannel_watch, client ) ; g_io_channel_unref ( channel ) ; goto error ; } client -> priv -> protocol_timeout = g_timeout_add_seconds ( 5, ( GSourceFunc ) _client_protocol_timeout, client ) ; error : g_io_channel_remove_watch ( channel, G_IO_IN | G_IO_ERR, ( GIOFunc ) client_iochannel_watch, client ) ; g_io_channel_unref ( channel ) ; g_io_channel_add_watch ( channel, G_IO_IN | G_IO_ERR, ( GIOFunc ) client_iochannel_watch, client ) ; g_io_channel_unref ( channel ) ; g_io_channel_unref ( channel ) ; g_io_channel_unref ( channel ) ; g_io_channel_unref ( channel ) ; g_io_channel_unref ( channel",0
299,"<S2SV_ModStart> - 1 ; if ( i + book -> dim > n ) { book -> used_entries -- ; for ( j = 0 ; j < book -> dim ; j ++ ) a [ i ++ ] = 0 ; } } else { for ( i = 0 ; i < n ; ) { if ( decode_map ( book, b, v, point ) ) return - 1 ; for ( j = 0 ; j < book -> dim ; j ++ ) a [ i ++ ] = v [ j ] ; } } for ( i = 0 ; i < n ; ) { if ( decode_map ( book, b, v, point ) ) return - 1 ; for ( i = 0 ; i < n ; ) { if ( decode_map ( book, b, v, point ) ) return - 1 ; for ( j = 0 ; j < book -> dim ; j ++ ) for ( j = 0 ; j < book -> dim ; j ++ ) a [ i ++ ] += v [ j ] ; } for ( i = 0 ; i < n ; ) { if ( decode_map ( book, b, v, point ) ) return - 1 ; for ( j = 0 ; j < book -> dim",0
300,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; return ;",0
301,"<S2SV_ModStart> { if (! check_scale_factors_aligned ( other_w, other_h, this_w, this_h, sf -> x_scale_fp, sf -> y_scale_fp ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } if (! check_scale_factors_aligned ( other_w, other_h, this_w, this_h ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } sf -> x_scale_fp = get_fixed_point_scale_factor ( other_w, this_w ) ; sf -> y_scale_fp = get_fixed_point_scale_factor ( other_h, this_h ) ; sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; if ( vp9_is_scaled ( sf ) ) { sf -> scale_value_x = unscaled_value ;",0
302,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
303,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
304,"<S2SV_ModStart> ; opt = rcu_dereference_protected <S2SV_ModEnd> ( np -> <S2SV_ModStart> np -> opt, sock_owned_by_user ( sk ) ) ; if ( opt ) { atomic_sub ( opt -> tot_len, & sk -> sk_omem_alloc ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; } <S2SV_ModEnd> if ( opt <S2SV_ModStart> ( opt ) { atomic_sub ( opt -> tot_len, & sk -> sk_omem_alloc ) ; }",0
305,"<S2SV_ModStart> = rcu_dereference_protected ( np -> rxopt. bits. rcu, sock_owned_by_user ( sk ) ) ; if ( msg. msg_name ) { atomic_set ( & sk -> sk_omem_alloc, 1 ) ; atomic_set ( & sk -> sk_omem_alloc, 0 ) ; } else { atomic_set ( & sk -> sk_omem_alloc, 1 ) ; } <S2SV_ModStart> = rcu_dereference_protected ( sk, sock_owned_by_user ( sk ) ) ; atomic_set ( & sk -> sk_omem_alloc, 1 ) ; if ( atomic_inc_return ( & sk -> sk_omem_alloc ) > sk -> sk_omem_alloc ) { atomic_set ( & sk -> sk_omem_alloc, 0 ) ; } else { atomic_set ( & sk -> sk_omem_alloc, 1 ) ; } atomic_set ( & sk -> sk_omem_alloc, 1 ) ; atomic_set ( & sk -> sk_omem_alloc, 1 ) ; }",0
306,<S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_net_ops <S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_protosw_ctrl_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw_rw,0
307,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> ; ovpsnr = sse_to_psnr ( stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr ) ; for ( i = 0 ; i < 4 ; i ++ ) { fprintf ( stderr, "" <S2SV_blank> %.3f"", ( double ) stream -> psnr_totals [ i ] / stream -> psnr_count ) ; } for ( i = 0 ; i < 4 ; i ++ ) { fprintf ( stderr, "" <S2SV_blank> %.3f"", ( double ) stream -> psnr_totals [ i ] / stream -> psnr_count ) ; } for ( i = 0 ; i < 4 ; i ++ ) { fprintf ( stderr, "" <S2SV_blank> %.3f"", ( double ) stream -> psnr_totals [ i ] / stream -> psnr_count ) ; } for ( i = 0 ; i < 4 ; i ++ ) { fprintf ( stderr, "" <S2SV_blank> %",0
308,<S2SV_ModStart> task ) { <S2SV_ModEnd> del_timer ( & <S2SV_ModStart> -> timer ) <S2SV_ModEnd> ; complete (,1
309,"<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen ( <S2SV_ModStart> 16 ) ) ; if (! dst_name ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> file <S2SV_blank> \'%s\'\\n"", dst_name ) ; return ; }",0
310,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> TRACE_DEBUG ( ""CIDER=0x%04"" <S2SV_ModStart> ( interface, KSZ8851_CIDER ) ) ; TRACE_DEBUG ( ""PHY1ILR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1ILR ) ) ; TRACE_DEBUG ( ""PHY1IHR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1IHR ) ) ; if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } ksz8851DumpReg ( interface ) ; context -> frameId = 0 ; context -> txBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; context -> rxBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; if ( context -> txBuffer == NULL || context -> rxBuffer == NULL ) { memPoolFree ( context -> txBuffer ) ; memPoolFree",0
311,"<S2SV_ModStart>. skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
312,"<S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> HAVE_IP ( t, <S2SV_ModEnd> 15 ) && <S2SV_ModStart> HAVE_OP ( t, <S2SV_ModEnd> 15 ) ) <S2SV_ModStart> NEED_OP ( t, <S2SV_ModEnd> 15 ) ; <S2SV_ModStart> NEED_IP ( t, <S2SV_ModEnd> 15 ) ; <S2SV_ModStart> NEED_OP ( t, <S2SV_ModEnd> 15 ) ; <S2SV_ModStart> NEED_OP ( t, <S2SV_ModEnd> 15 ) ; <S2SV_ModStart> NEED_OP ( t, <S2SV_ModEnd> 15 ) ; <S2SV_ModStart> NEED_IP ( t, <S2SV_ModEnd> 15 ) ; <S2SV_ModStart> NEED_OP ( t, <S2SV_ModEnd> 15 ) ; <S2SV_ModStart> HAVE_IP ( t, <S2SV_ModEnd> 15 ) && <S2SV_ModStart> HAVE_OP ( t, <S2SV_ModEnd> 15 ) ) <S2SV_ModStart> NEED_OP ( t, <S2SV_ModEnd> 15 ) ; <S2SV_ModStart> NEED_OP ( t, <S2SV_ModEnd> 15 ) ; <S2SV_ModStart> NEED_IP ( t, <S2SV_ModEnd> 15 ) ; <S2SV_ModStart> NEED_OP ( t, <S2SV_ModEnd> 15 ) ; <S2SV_ModStart> NEED_OP ( t, <S2SV_ModEnd> 15 ) ; <S2SV_ModStart> NEED_IP ( t, <S2SV_ModEnd> 15 ) ; <S2SV_ModStart> NEED_OP ( t, <S2SV_ModEnd> 15 ) ; <S2SV_ModStart> HAVE_IP ( t, <S2SV_ModEnd> 15 ) && <S2SV_ModStart> HAVE_OP ( t, <S2SV_ModEnd> 15 ) ) <S2SV_ModStart> NEED_OP",0
313,"<S2SV_ModStart> ; if (! fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } <S2SV_ModStart> ) ) { if (! fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } <S2SV_ModEnd> bootstage_mark ( bootstage_id <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT ) ; if (! fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC",0
314,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ),0
315,<S2SV_ModStart> )? ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval <S2SV_ModEnd> * af_ratio ) <S2SV_ModStart> af_ratio ) : ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline,0
316,"<S2SV_ModStart> ++ ) { if ( strcmp ( argv [ i ], ""allow-untrusted"" ) == 0 ) { errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; continue ; } if ( strcmp ( argv [ i ], ""allow-untrusted"" ) == 0 ) { errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; continue ; } if ( strcmp ( argv [ i ], ""allow-untrusted"" ) == 0 ) { errx ( 1, ""%s: <S2SV_blank> allow-untrusted <S2SV_blank> option <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; continue ; } if ( strcmp ( argv [ i ], ""allow-untrusted"" ) == 0 ) { errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; continue ; } if ( strcmp ( argv [ i ], ""allow-untrusted"" ) == 0 ) { errx ( 1, ""%s: <S2SV_blank> allow-untrusted <S2SV_blank> option <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ;",0
317,"<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch <S2SV_ModStart> value ) ; value = ast2obj_list ( o -> v. Module. type_ignores, ast2obj_type_ignore ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_type_ignores, value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_list ( o -> v. Expression. type_ignores, ast2obj_type_ignore ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_type_ignores, value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_list ( o -> v. Expression. type_ignores, ast2obj_type_ignore ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_type_ignores, value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_list ( o -> v.",0
318,"<S2SV_ModStart> ib ] ; if ( d -> dequant == NULL ) { vp8_strict_quantize_b ( b, d ) ; } else if ( d -> qcoeff == NULL ) { vp8_strict_quantize_b ( b, d ) ; } else if ( d -> dqcoeff == NULL ) { vp8_strict_quantize_b ( b, d ) ; } else { dequant_ptr = d -> dequant ; coeff_ptr = b -> coeff ; dqcoeff_ptr = d -> dqcoeff ; }",0
319,"<S2SV_ModStart> FN_REFLEN ] ; if ( strlen ( opt_basedir ) > sizeof ( buff ) - 1 ) { error = - 1 ; goto exit ; } strncat ( buff, opt_basedir, sizeof ( buff ) - 1 ) ; strncat ( buff, ""/"", sizeof ( buff ) - strlen ( buff ) - 1 ) ; } else if ( strlen ( opt_basedir ) > sizeof ( buff ) - 1 ) { error = - 1 ; goto exit ; } strncat ( buff, FN_DIRSEP, sizeof ( buff ) - strlen ( buff ) - 1 ) ; buff [ sizeof ( buff ) - 1 ] = 0 ; opt_basedir = my_strdup ( buff, MYF ( MY_FAE ) ) ; } if ( opt_basedir ) { my_free ( opt_basedir ) ; opt_basedir = my_strdup ( opt_basedir ) ; opt_datadir = my_strdup ( opt_basedir ) ; opt_datadir = my_strdup ( opt_datadir ) ; opt_datadir = my_strdup ( opt_datadir ) ; opt_datadir = my_strdup ( opt_dat",0
320,"<S2SV_ModStart> ) ( data_end - pbi -> fragments. ptrs [ 0 ] ) ; if ( n > ( int ) ( data_end - data ) ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } else { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } <S2SV_ModStart> { int n = ( int ) ( data_end - data ) ; if ( n > ( int ) ( data_end - data ) ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } else { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; }",0
321,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
322,<S2SV_ModStart> -> peer. auth_capable = new -> peer. auth_capable ; asoc -> peer.,1
323,"<S2SV_ModStart> returnrate, int * returndistortion, int * returnintra ) { BLOCK * b = & x -> block [ 0 ] ; BLOCKD * d = & x -> e_mbd. block [ 0 ] ; MACROBLOCKD * xd = & x -> e_mbd. block [ 0 ] ; <S2SV_ModStart> = INT_MAX ; # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_rd_sse = INT_MAX ; # else unsigned int zero_mv_sse = INT_MAX, <S2SV_ModEnd> best_sse = INT_MAX <S2SV_ModStart> best_rd_sse = INT_MAX ; # endif mode_mv = mode_mv_sb [ sign_bias ] ; best_ref_mv. as_int = 0 ; best_mode. rd = INT_MAX ; best_mode. yrd = INT_MAX ; best_mode. intra_rd = INT_MAX ; best_mode. intra_mode = INT_MAX ; best_ref_mv. as_int = 0 ; best_ref_mv. as_int = 0 ; best_ref_mv. as_int",0
324,<S2SV_ModStart> goto error ; if ( h -> hdr -> magic [ 0 ] == 'r' || h -> hdr -> magic [ 1 ] == 'e' ) { h -> hdr -> magic [ 0 ] = 'r' ; h -> hdr -> magic [ 1 ] = 'e' ; h -> hdr -> magic [ 0 ] = 'r' ; h -> hdr -> magic [ 1 ] = 'e' ; h -> hdr -> magic [ 2 ] = 'e' ; } else { h -> hdr -> magic [ 0 ] = 'r' ; h -> hdr -> magic [ 1 ] = 'e' ; } if ( h -> hdr -> magic [ 0 ] == 'r' ) { h -> hdr -> magic [ 0 ] = 'r' ; h -> hdr -> magic [ 1 ] = 'e' ; h -> hdr -> magic [ 0 ] = 'r' ; h -> hdr -> magic [ 1 ] = 'e' ; h -> hdr -> magic [ 2 ] = 'e' ; } else { h -> hdr -> magic [ 0 ] = 'r' ; h -> hdr -> magic [ 1 ] = 'e' ; },0
325,"<S2SV_ModStart> ; UWORD8 u1_profile_idc, u1_level_idc, u1_seq_parameter_set_id ; UWORD16 i2_max_frm_num ; WORD32 i4_pic_wd, i4_pic_ht ; WORD32 pic_height_in_map_units_minus1 ; WORD32 u2_pic_wd, u2_pic_ht, u2_crop_offset_y, u2_crop_offset_uv, u4_num_reorder_frames <S2SV_ModStart> ps_bitstrm, u4_pic_wd, u2_pic_ht, u2_crop_offset_y, u2_crop_offset_uv, u4_num_reorder_frames, u4_temp, u4_profile_idc, u1_level_idc, u1_seq_parameter_set_id, u2_max_frm_num, u4_num_reorder_frames, u4_pic_wd, u4_pic_ht, u2_pic_wd, u2_pic_ht, u2_crop_offset",0
326,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> ) { VP9_COMP <S2SV_ModStart> * ) ; <S2SV_ModEnd> if ( params <S2SV_ModStart> == NULL ) return VPX_CODEC_INVALID_PARAM ; cpi -> svc. spatial_layer_id = params -> spatial_layer ; cpi -> svc. temporal_layer_id = params -> temporal_layer ; cpi -> svc. lst_fb_idx = params -> lst_fb_idx ; cpi -> gld_fb_idx = params -> gld_fb_idx ; cpi -> alt_fb_idx = params -> alt_fb_idx ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer",0
327,"<S2SV_ModStart> out ) { uint32 width, length ; uint16 bitspersample, samplesperpixel ; uint16 <S2SV_ModEnd> input_compression, input_photometric <S2SV_ModStart>, input_photometric ; if ( length!= ( uint32 ) - 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Too <S2SV_blank> large <S2SV_blank> image <S2SV_blank> length.\\n"", TIFFFileName ( in ) ) ; return FALSE ; } if ( length!= ( uint32 ) - 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Too <S2SV_blank> large <S2SV_blank> image <S2SV_blank> length.\\n"", TIFFFileName ( in ) ) ; return FALSE ; } if ( length!= ( uint32 ) - 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Too <S2SV_blank> large <S2SV_blank> image <S2SV_blank> length.\\n"", TIFFFileName ( in ) ) ; return FALSE ; } if ( length!= ( uint32 ) - 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Too <S2SV_blank> large <S2SV_blank> image <S2SV_blank> length.\\n"", TIFFFileName ( in ) ) ; return FALSE ; }",0
328,"<S2SV_ModStart> { int r <S2SV_ModEnd> ; char * <S2SV_ModStart> = '\\0' ; if ( a -> flags & ARCHIVE_EXTRACT_NOFOLLOW ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED ) ; } else if ( S_ISLNK ( st. st_mode ) ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else if ( S_ISLNK ( st. st_mode ) ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } } else if ( a -> flags & ARCHIVE_EXTRA",0
329,"<S2SV_ModStart> sbi ) ; <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> ibh ) { if (! bh ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!bh\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( udf_read_ptagged ( inode -> i_sb, & iinfo -> i_location, 0, & ident ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( udf_read_ptagged ( inode -> i_sb, & iinfo -> i_location, 1, & ident ) ) { if ( udf_read_ptagged ( inode -> i_sb, & iinfo -> i_location, 0, & ident ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino ) ; make_bad_inode ( inode )",0
330,"<S2SV_ModStart> -> tx_size ; const int filter_level = get_filter_level ( lfi_n, mbmi, shift_y, shift_uv ) ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> left_uv [ tx_size_uv ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_y = & lfm -> int_4x4_y [ tx_size_y ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; int index = shift_uv ; for ( i = 0 ; i < h ; i ++ ) { memset ( & lfm -> lfl_y [ index ], filter_level, w ) ; index += 8 ; } } * above_y |= above_prediction_mask [ block",0
331,"<S2SV_ModStart> mq_flush_lock, flags ) ; fq -> flush_rq = flush_rq ;",0
332,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
333,<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) { if ( prog -> flags & eflags ) {,0
334,"<S2SV_ModStart> ) ) { if (! smatch ( option, "" <S2SV_blank> =\\t,"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! ovalue ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> \'%s\'"", option ) ; return MPR_ERR_BAD_SYNTAX ; } } else if ( smatch ( option, ""secure"" ) ) { httpSetRouteSessionSecure ( state -> route, scaselessmatch ( ovalue, ""secure"" ) ) ; } else if ( smatch ( option, ""secure"" ) ) { httpSetRouteSessionSecure ( state -> route, scaselessmatch ( ovalue, ""secure"" ) ) ; } else if ( smatch ( option, ""secure"" ) ) { httpSetRouteSessionSecure ( state -> route, scaselessmatch ( ovalue, ""secure"" ) ) ;",0
335,"<S2SV_ModStart> || * replySize > sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( <S2SV_ModStart> == NULL || * replySize > sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( <S2SV_ModStart> == NULL || * replySize > sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( <S2SV_ModStart> == NULL || * replySize > sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( * replySize > sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; }",0
336,"<S2SV_ModStart>!= MagickFalse ) { if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info -> filename ) ; } <S2SV_ModStart>!= MagickFalse ) { if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info -> filename ) ; } <S2SV_ModStart>!= MagickFalse ) { if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info -> filename ) ; } <S2SV_ModStart>!= MagickFalse ) { if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, image_info -> filename ) ; ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info -> filename ) ; } <S2SV_ModStart>!= MagickFalse ) { if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info -> filename ) ; }",0
337,"<S2SV_ModStart> = rcu_dereference_protected ( np -> rxopt. bits. rxinfo, sock_owned_by_user ( sk ) ) ; if ( msg. msg_name ) { atomic_set ( & sk -> sk_omem_alloc, 1 ) ; atomic_set ( & sk -> sk_omem_alloc, 0 ) ; } else { atomic_set ( & sk -> sk_omem_alloc, 1 ) ; } <S2SV_ModStart> = rcu_dereference_protected ( sk, sock_owned_by_user ( sk ) ) ; if ( atomic_inc_return ( & sk -> sk_omem_alloc ) ) { atomic_set ( & sk -> sk_omem_alloc, 1 ) ; atomic_set ( & sk -> sk_omem_alloc, 0 ) ; } else { atomic_set ( & sk -> sk_omem_alloc, 1 ) ; }",0
338,"<S2SV_ModStart> key_data [ i ]. key_data_length [ 0 ] = 0 ; ret [ j ] = k5alloc ( sizeof ( struct berval ), & err ) ; if ( ret [ j ] == NULL ) { err = ENOMEM ; goto cleanup ; } <S2SV_ModStart> key_data [ i ]. key_data_length [ 0 ] = 0 ; ret [ j ] -> key_data_contents [ 0 ] = k5_malloc ( sizeof ( struct berval ), & err ) ; if ( ret [ j ] == NULL ) { err = ENOMEM ; goto cleanup ; } <S2SV_ModStart> key_data [ i ]. key_data_length [ 0 ] = 0 ; ret [ j ] -> key_data_length [ 0 ] = 0 ; ret [ j ] -> key_data_length [ 0 ] = 0 ; ret [ j ] -> key_data_contents [ 0 ] = k5_malloc ( sizeof ( struct berval ), & err ) ; if ( ret [ j ] == NULL ) { err = ENOMEM ; goto cleanup ; }",0
339,"<S2SV_ModStart> 0x02 ) ; if ( crgram_len > sizeof ( sbuf ) - 1 ) r = sc_transmit_apdu ( card, & apdu ) ; else r = sc_transmit_apdu ( card, & apdu ) ; if ( r!= 0 ) r = sc_transmit_apdu ( card, & apdu ) ; if ( r!= 0 ) r = sc_transmit_apdu ( card, & apdu ) ; if ( r!= 0 ) r = sc_transmit_apdu ( card, & apdu ) ; if ( r!= 0 ) r = sc_transmit_apdu ( card, & apdu ) ; if ( r!= 0 ) r = sc_transmit_apdu ( card, & apdu ) ; if ( r!= 0 ) r = sc_transmit_apdu ( card, & apdu ) ; if ( r!= 0 ) r = sc_transmit_apdu ( card, & apdu ) ; if ( r!= 0 ) r = sc_transmit_apdu ( card, & apdu ) ; if ( r!= 0 ) r = sc_transmit_apdu ( card, & apdu ) ; if (",0
340,"<S2SV_ModStart> uint8 result ; uint32 <S2SV_ModEnd> length ; STREAM <S2SV_ModStart> STREAM s ; struct stream packet <S2SV_ModStart> return False ; packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> connect <S2SV_blank> response <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> connect <S2SV_blank> response <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
341,"<S2SV_ModStart> { dev_err ( & pf -> pdev -> dev, ""Invalid <S2SV_blank> MACVLAN <S2SV_blank> list: <S2SV_blank> %s\\n"", __func__ ) ; return ret ; } <S2SV_ModEnd> ch = i40e_find_channel <S2SV_ModStart> ch ) ; if (! ch ) { dev_err ( & pf -> pdev -> dev, ""Invalid <S2SV_blank> MACVLAN <S2SV_blank> list: <S2SV_blank> %s\\n"", __func__ ) ; return ret ; } <S2SV_ModEnd> ch = i40e_find_channel <S2SV_ModStart> ch ) ; if (! ch ) { dev_err ( & pf -> pdev -> dev, ""Invalid <S2SV_blank> MACVLAN <S2SV_blank> list: <S2SV_blank> %s\\n"", __func__ ) ; return ret ; } if (! ch ) { dev_err ( & pf -> pdev -> dev, ""Invalid <S2SV_blank> MACVLAN <S2SV_blank> list: <S2SV_blank> %s\\n"", __func__ ) ; return ret ; } <S2SV_ModEnd> ch = i40e_find_channel <S2SV_ModStart> ch ) ; if (! ch ) { dev_err ( & pf -> pdev -> dev, ""Invalid <S2SV_blank> MACVLAN <S2SV_blank> list: <S2SV_blank> %s\\n"", __func__ ) ; return ret ; }",0
342,<S2SV_ModStart> new_map ) ; if ( new_map. first == map -> lower_first || new_map. count == map -> count ) { ret = - ENOMEM ; goto out ; },0
343,"<S2SV_ModStart> } } } eprintf ( ""vCont;c;s"" ) ; if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; switch ( action [ 0 ] ) { case's' : if ( cmd_cb ( core_ptr, ""ds"", NULL, 0 ) < 0 ) { send_msg ( g, ""E01"" ) ; return - 1 ; } return send_msg ( g, ""OK"" ) ; } if ( action [ 0 ] =='s' ) { if ( cmd_cb ( core_ptr, ""ds"", NULL, 0 ) < 0 ) { send_msg ( g, ""E01"" ) ; return - 1 ; } return send_msg ( g, ""E01"" ) ; } if ( action [ 0 ] == 'c' ) { if ( cmd_cb ( core_ptr, ""dc"", NULL, 0 ) < 0 ) { send_msg ( g, ""E01"" )",0
344,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
345,<S2SV_ModStart> 1 ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 1 ) ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 1 ) ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 1 ) ; memcpy <S2SV_ModEnd> ( lf_mic ->,0
346,<S2SV_ModStart> NULL ) ; } quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
347,"<S2SV_ModStart> len ) { <S2SV_ModEnd> char * buf <S2SV_ModStart> char * p <S2SV_ModEnd> ; const char <S2SV_ModStart> char * end ; if ( len > SIZE_MAX / 6 ) return NULL ; u = PyBytes_FromStringAndSize ( ( char * ) NULL, len * 6 ) ; if ( u == NULL ) return NULL ; p = buf = PyBytes_AsString ( u ) ; if ( p == buf ) { Py_DECREF ( u ) ; return NULL ; } <S2SV_ModStart> & 0x80 ) { strcpy ( p, ""u005c"" ) ; p += 5 ; } } if ( * s & 0x80 ) { PyObject * w ; int kind, data, i ; len = PyUnicode_GET_LENGTH ( w ) ; for ( i = 0 ; i < len ; i ++ ) { Py_UCS4 chr = decode_utf8 ( c, & s, end ) ; if ( i < len ) { Py_UCS4 chr = PyUnicode_READ ( kind, data, i ) ; p += 10 ; } assert ( p - buf <= Py_SIZE ( u ) ) ; Py_DECREF ( w ) ; } else { * p ++ = * s ++ ;",0
348,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart> ; int setimes <S2SV_ModEnd> ; int targisdir <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ; if ( <S2SV_ModStart>, omode )!= 0 <S2SV_ModEnd> ) fatal ( <S2SV_ModStart>, omode )!= 0 <S2SV_ModEnd> ) fatal ( <S2SV_ModStart>, omode )!= 0 <S2SV_ModEnd> ) fatal ( <S2SV_ModStart>, omode )!= 0 <S2SV_ModEnd> ) fatal ( <S2SV_ModStart>, omode )!= 0 <S2SV_ModEnd> ) fatal ( <S2SV_ModStart>, omode )!= 0 <S2SV_ModEnd> ) fatal (",0
349,<S2SV_ModStart> -> buffer ; if (! ctx -> gf128 ) return - ENOKEY ;,1
350,"<S2SV_ModStart> write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 1 ) ; vpx_write_literal <S2SV_ModEnd> ( w,",0
351,"<S2SV_ModStart> ; if ( vpx_calloc ( ( sizeof ( ENTROPY_CONTEXT_PLANES ) * oci -> mb_cols, 1 ), & oci -> mode_info_stride ) < 0 ) goto allocation_fail ; if ( vpx_calloc ( ( sizeof ( ENTROPY_CONTEXT_PLANES ) * oci -> mb_rows, & oci -> mode_info_stride ), & oci -> above_context_stride ) < 0 ) goto allocation_fail ; if ( vpx_calloc ( ( sizeof ( ENTROPY_CONTEXT_PLANES ) * oci -> mb_cols, 1 ), & oci -> above_context_stride ) < 0 ) goto allocation_fail ; if ( vpx_calloc ( ( sizeof ( ENTROPY_CONTEXT_PLANES ) * oci -> mb_rows, & oci -> mode_info_stride ), & oci -> above_context_stride ) < 0 ) goto allocation_fail ; if ( vpx_calloc ( ( sizeof ( ENTROPY_CONTEXT_PLANES ) * oci -> mb_rows, 1 ), & oci -> mode_info_stride ) < 0 ) goto allocation_",0
352,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
353,<S2SV_ModStart> ) ; } ps_dec -> u2_total_mbs_coded += u1_num_mbs ; <S2SV_ModStart> ) ; } ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> <S2SV_ModStart> ) ; } ps_dec -> u2_total_mbs_coded += u1_num_mbs ; if ( ps_dec -> u2_total_mbs_coded > ps_dec -> u2_total_mbs_coded ) { ps_dec -> u2_total_mbs_coded = u2_total_mbs ; } <S2SV_ModStart> ) ; } ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; if ( ps_dec -> u2_total_mbs_coded > ps_cur_poc -> u2_total_mbs_coded ) { ps_dec -> u2_total_mbs_coded = u2_total_mbs ; },0
354,"<S2SV_ModStart> ; if ( screen -> buffers [ 0 ] ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 0 ] ) ; if ( screen -> buffers [ 1 ] ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 1 ] ) ;",0
355,<S2SV_ModStart> { err = _nanosleep <S2SV_ModEnd> ( & delay,0
356,"<S2SV_ModStart>, one ; size_t <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> ) break ; if ( number_planes_filled > ( size_t ) GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; number_planes = ( size_t ) GetBlobSize ( image ) ; number_planes_filled = ( size_t ) GetBlobSize ( image ) ; number_colormaps = ( size_t ) GetBlob ( image ) ; number_planes_filled = ( size_t ) GetBlobSize ( image ) ; if ( number_planes_filled > ( size_t ) GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; number_planes = ( size_t ) GetBlobSize ( image ) ; number_planes_filled = ( size_t ) GetBlobSize ( image ) ; number_planes_filled = ( size_t ) GetBlob ( image ) ; number_planes_filled = ( size_t ) GetBlobSize ( image ) ; if ( number_planes_filled > ( size",0
357,"<S2SV_ModStart> { httpSetHostName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } else { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; }",0
358,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
359,<S2SV_ModStart>! job_id || <S2SV_ModEnd>! prev_hash || <S2SV_ModStart>! prev_hash || <S2SV_ModEnd>! coinbase1 || <S2SV_ModStart>! coinbase2 ||! bbversion ||! nbit ||! ntime ) { if ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ; goto out ; },0
360,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
361,<S2SV_ModStart> ioc ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
362,"<S2SV_ModStart> unused ) { <S2SV_ModEnd> _Py_IDENTIFIER ( __dict__ <S2SV_ModStart> * res ; <S2SV_ModEnd> _Py_IDENTIFIER ( __dict__ <S2SV_ModStart> * dict = _PyObject_GetAttrId <S2SV_ModEnd> ( self, <S2SV_ModStart> ( self, & PyId___dict__ ) ; if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; return NULL ; } if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; return NULL ; } if ( dict ) { res = Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; } else { res = Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; } <S2SV_ModEnd> return res ;",0
363,"<S2SV_ModStart> USB_DT_OTG, ( struct usb_descriptor * * ) & desc ) ; if ( err ) { dev_err ( & udev -> dev, ""Dual-Role <S2SV_blank> OTG <S2SV_blank> device <S2SV_blank> on <S2SV_blank> %sHNP <S2SV_blank> port\\n"", ( port1 == bus -> otg_port )? """" : ""non-"" ) ; return err ; } if (! ( desc -> bmAttributes & USB_OTG_HNP ) ) return 0 ; dev_info ( & udev -> dev, ""Dual-Role <S2SV_blank> OTG <S2SV_blank> device <S2SV_blank> on <S2SV_blank> %sHNP <S2SV_blank> port\\n"", ( port1 == bus -> otg_port )? """" : ""non-"" ) ; if ( bus -> b_hnp_enable ) { err = usb_control_msg ( udev, 0, USB_REQ_SET_FEATURE, 0, USB_DEVICE_B_HNP_ENABLE, 0, NULL, 0, USB_CTRL_SET_TIMEOUT ) ; if ( err < 0 ) dev_err ( & udev -> dev, ""can\'t <S2SV_blank> set <S2SV_blank> HNP <S2SV_blank> mode: <S2SV_blank> %d\\n""",0
364,"<S2SV_ModStart> -> private_data ; <S2SV_ModEnd> u32 flags = <S2SV_ModStart> ; case PERF_EVENT_IOC_PERIOD : return perf_event_period ( event, ( u64 __user * ) arg ) ; case PERF_EVENT_DISABLE : return perf_event_disable ( event ) ; break ; case PERF_EVENT_RESET : return perf_event_reset ( event ) ; break ; case PERF_EVENT_REFRESH : return perf_event_refresh ( event, arg ) ; case PERF_EVENT_PERIOD : return perf_event_period ( event, ( u64 __user * ) arg ) ; case PERF_EVENT_SET_FILTER : return perf_event_set_filter ( event, ( void __user * ) arg ) ; } if ( flags & PERF_EVENT_IOC_GET_ID ) { u64 id ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; id = primary_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT",0
365,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode [ y_mode",0
366,"<S2SV_ModStart> -> src_len ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 5, 0 ) ) return - EINVAL ; if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 5, 0 ) ) return - EINVAL ; if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 5, 0 ) ) return - EINVAL ; if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 5, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 6, 0 ) ) return - EINVAL ; if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_",0
367,"<S2SV_ModStart> iv ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
368,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
369,<S2SV_ModStart> NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } iframe -> state = NGHTTP2_IB_READ_SETTINGS ; break ; case NGHTTP2_IB_READ_SETTINGS : iframe -> state = NGHTTP2_IB_READ_SETTINGS ; break ; case NGHTTP2_IB_READ_CLIENT_IDLE : iframe -> state = NGHTTP2_IB_READ_CLIENT_IDLE ; break ; case NGHTTP2_IB_READ_CLIENT_IDLE : iframe -> state = NGHTTP2_IB_READ_CLIENT_IDLE ; break ; case NGHTTP2_IB_READ_SETTINGS : iframe -> state = NGHTTP2_IB_READ_CLIENT_IDLE ; break ; case NGHTTP2_IB_READ_CLIENT_IDLE : iframe -> state = NGHTTP2_IB_READ_CLIENT_IDLE ; break ; case NGHTTP2_IB_READ_CLIENT_IDLE : iframe -> state = NGHTTP2_IB_READ_CLIENT_IDLE ; break ; case NGHTTP2_IB_READ_CLIENT_IDLE : iframe -> state = N,0
370,"<S2SV_ModStart> += dif ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
371,"<S2SV_ModStart> x86_pmu. max_pebs_events = min_t ( unsigned, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ; if ( version > 1 ) x86_pmu. max_pebs_events = min_t ( unsigned, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ; if ( version > 1 ) { rdmsrl ( MSR_IA32_PERF_CAPABILITIES, x86_pmu. intel_cap. capabilities ) ; x86_pmu. max_pebs_events = min_t ( unsigned, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ; } else if ( version > 1 ) x86_pmu. max_pebs_events = min_t ( unsigned, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ; if ( version > 1 ) { rdmsrl ( MSR_IA32_PERF_CAPABILITIES, x86_pmu. intel_cap. capabilities ) ; x86_pmu. max_pebs_events =",0
372,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, const TOKENEXTRA * * tp, const TOKENEXTRA * stop ) { const TOKENEXTRA * p = * tp ; while ( p < stop && p -> token!= EOSB_TOKEN ) { const int t = p -> token ; const struct vp9_token * const a = & vp9_coef_encodings [ t ] ; const struct vp9_extra_bit * const b = & vp9_extra_bits [ t ] ; int i = 0 ; int v = a -> value ; int n = a -> len ; if ( p -> skip_eob_node ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int bits = v >> ( n - len ) ; int i = 2 * p -> skip_eob_node ; } else { int len = 2 * p -> skip_eob_node ; } if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { int len = UNCONSTRAINED_NODES - p -> skip_",0
373,"<S2SV_ModStart>, uncompressed_hdr_size ; <S2SV_ModEnd> write_uncompressed_header ( cpi <S2SV_ModStart> cpi, & wb ) ; write_uncompressed_header ( cpi, & wb ) ; write_uncompressed_header ( cpi, & wb ) ; <S2SV_ModStart> saved_wb = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> 16 ) ; vpx_clear_system_state ( ) ; first_part_size = write_compressed_header ( cpi, data ) ; data += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; vpx_compute_update_table <S2SV_ModEnd> ( ) ;",0
374,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
375,"<S2SV_ModStart> struct ikev2_id id ; u_int id_len, idtype_len <S2SV_ModEnd> ; ND_TCHECK ( <S2SV_ModStart> * ext ) ; UNALIGNED_MEMCPY ( & id, ext, sizeof ( id ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; } idtype_len = ntohs ( id. h. len ) ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; } if ( idtype_len < sizeof ( struct ikev2_id ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" )",0
376,<S2SV_ModStart> ) ) { goto error ; } if ( atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> width || atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> height || atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> width || atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> height || atoi ( jas_tvparser_getval ( tvp ) ) { goto error ; } if ( atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> width || atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> height || atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> width || atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> width || atoi ( jas_tvparser_getval ( tvp ) ) ) { goto error ; },0
377,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
378,"<S2SV_ModStart>, fft_jmp ; WORD32 xt0_0, yt0_0, yt1_0, xt2_0, yt2_0 ; WORD32 xh0_0, xh1_0, xh20_0, xh21_0, xl0_0, xl1_0, xl20_0, xl21_0 ; WORD32 x_0, x_1, x_l1_0, x_l2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l2_0, x_h2_0, x_h2_1 ; WORD32 x_l1_0, x_l1_1 ; WORD32 x_l2_0, x_h2_1 ; WORD32 x_l3, x_l4, x_l5, x_l6, x_7, mul_8, mul_9, mul_10, mul_11, mul_12 ; WORD64 mul_8, mul_9, mul_10, mul_11, mul_12 ; WORD64 mul",0
379,<S2SV_ModStart> mntent ) { if ( IS_ERR ( mntent -> mnt_dir ) ) return PTR_ERR ( mntent -> mnt_dir ) ; if ( IS_ERR ( mntent -> mnt_dir ) ) return PTR_ERR ( mntent -> mnt_dir ) ;,0
380,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
381,"<S2SV_ModStart> ) ) ; rb_hash_aset ( env, server_name_val, rb_const_get ( agoo_server. server_name ) ) ; rb_hash_aset ( env, server_port_val, rb_const_get ( agoo_server. server_port ) ) ; rb_hash_aset ( env, hostname_val, rb_const_get ( agoo_server. hostname ) ) ; rb_hash_aset ( env, hostname_val, rb_const_get ( agoo_server. hostname ) ) ; rb_hash_aset ( env, hostname_val, rb_const_get ( agoo_server. hostname ) ) ; rb_hash_aset ( env, hostname_val, rb_const_get ( agoo_server. hostname ) ) ; rb_hash_aset ( env, hostname_val, rb_const_get ( agoo_server. hostname ) ) ; rb_hash_aset ( env, hostname_val, rb_const_get ( agoo_server. hostname ) ) ;",0
382,"<S2SV_ModStart> endif # endif MYSQL_BIND * bind, * bind_end ; imp_sth_phb_t * fbind ; # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION imp_sth -> use_server_side_prepare = imp_dbh -> use_server_side_prepare ; if ( attribs ) { svp = DBD_ATTRIB_GET_SVP ( attribs, ""mysql_server_prepare"", 20 ) ; if ( svp && SvTRUE ( * svp ) ) { imp_sth -> use_server_side_prepare = TRUE ; imp_sth -> is_async = FALSE ; do_error ( sth, 2000, ""Async <S2SV_blank> support <S2SV_blank> was <S2SV_blank> not <S2SV_blank> built <S2SV_blank> into <S2SV_blank> this <S2SV_blank> version <S2SV_blank> of <S2SV_blank> DBD::mysql"", ""HY000"" ) ; return 0 ; } } else { # if MYSQL_ASYNC imp_sth -> is_async = TRUE ; imp_sth -> use_server_side_prepare = FALSE ; # else do_error ( sth, 2000, ""Async <S2SV_blank> support <S2SV_blank> was <S2SV_blank> not <S2SV_blank> built <S2SV_blank> into <S2SV_blank> this <S2SV_blank> version <S2SV_blank> of <S2SV_blank> DBD::mysql"", ""HY000""",0
383,"<S2SV_ModStart> int need = 0 <S2SV_ModEnd> ; CELL first <S2SV_ModStart> screen, { if ( screen -> selected_cells [ which ]. data_buffer == NULL ) { SysError ( ERROR_BMALLOC2 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( char * ) malloc ( ( size_t ) need + 1 ) ; SysError ( ERROR_BMALLOC2 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( char * ) malloc ( ( size_t ) need + 1 ) ) ; } if ( need < 0 ) { if ( ( line = ( Char * ) malloc ( ( size_t ) need + 1 ) ) == 0 ) SysError ( ERROR_BMALLOC2 ) ; free ( line ) ; scp -> data_buffer = ( char * ) malloc ( ( size_t ) need + 1 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( char * ) malloc ( ( size_t ) need + 1 ) ; }",0
384,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ftoa_bounded_extra ( JsVarFloat <S2SV_ModStart> val ) ) { return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ( val < 0 ) { if ( -- len <= 0 ) { * str = 0 ; return ; } * ( str ++ ) = '-' ; val = - val ; } else { if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ) ) ; val = - val ; } if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ) ) { if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ) ) val = ( JsVarFloat ) ( 1 + ( JsVarInt ) val ) ; } if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ) ) { if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ),0
385,"<S2SV_ModStart> ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; char * result ; memcpy ( buf, ""DEADBEEF"", 8 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( result!= NULL ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( length == 5 ) ; if ( size < 6 ) ASSERT ( result!= buf ) ; ASSERT ( memcmp ( buf + size, & ""DEADBEEF"" [ size ], 8 - size ) == 0 ) ; if ( result!= buf ) free ( result ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; char * result ; memcpy ( buf, ""DEADBEEF"", 8 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( result!= NULL ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( length == 5 ) ; if ( length == 5",0
386,<S2SV_ModStart> ; if ( unlikely ( fast_pool -> count >= 64 ) ) { fast_pool -> count = 0 ; fast_pool -> last = now ; return ; } if (,0
387,"<S2SV_ModStart> { strncat ( str <S2SV_ModEnd>, ""ID:"", <S2SV_ModStart> ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; } else if ( lex -> tk == LEX_STR ) { strncat ( str, ""String:\'"", len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; } else if ( lex -> tk == LEX_STR ) { strncat ( str, ""String:\'"", len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; strncat ( str, ""\'"", len ) ; } else if ( lex -> tk == LEX_ID ) { strncat ( str, ""ID:"", len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; } else if ( lex -> tk == LEX_STR ) { strncat ( str, ""String:\'"", len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; } else { jslTokenAsString ( lex -> tk, str, len ) ; }",0
388,,1
389,"<S2SV_ModStart> * output ; size_t <S2SV_ModEnd> i ; if <S2SV_ModStart> ) ; } input = fopen_utf8 ( argv [ i ], ""rb"" ) ; if ( input == ( FILE * ) NULL ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ i ] ) ; continue ; } for ( i = 2 ; i < ( ssize_t ) ( argc - 1 ) ; i ++ ) { input = fopen_utf8 ( argv [ i ], ""rb"" ) ; if ( input == ( FILE * ) NULL ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ i ] ) ; continue ; } for ( c = fgetc ( input ) ; c!= EOF ; c = fgetc ( input ) ) fputc ( ( char ) c, output ) ; ( void ) fclose ( input ) ; ( void ) remove_utf8 ( argv [ i ] ) ; } ( void ) fclose ( output ) ;",0
390,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
391,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int setpwnam ( <S2SV_ModStart> pwd ) { <S2SV_ModEnd> pw_init ( ) <S2SV_ModStart> ( fp = safe_mkstemp <S2SV_ModEnd> ( & tmpname <S2SV_ModStart> atomic_dir ) ) == NULL ) return - 1 ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchmod ( fileno ( fp ), 0644 ) < 0 ) goto fail ; rc = setpwent ( pwd, fp ) ; if ( rc!= 0 ) goto fail ; namelen = strlen ( pwd -> pw_name ) ; if (! found && linebuf [ namelen ] == ':' &&! strncmp ( linebuf, pwd -> pw_name, namelen ) ) { if ( putpwent ( pwd, fp ) < 0 ) goto fail ; namelen = strlen ( linebuf ) ; contlen = strlen ( linebuf ) ; } if (! found && linebuf [ namelen ] == ':' &&! strncmp ( linebuf, pwd -> pw_name, namelen ) ) {",0
392,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
393,"<S2SV_ModStart> s2 ) { int ret ; ret = memcmp ( s1, s2, strlen ( s2 ) + 1U ) ; if ( ret!= 0 ) return ret ;",0
394,"<S2SV_ModStart> TRUE ; } gchar * from = xmpp_stanza_get_from ( message ) ; if (! from ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> stanza <S2SV_blank> name <S2SV_blank> for <S2SV_blank> Carbon"" ) ; return TRUE ; } if ( g_strcmp0 ( name, ""received"" )!= 0 ) { log_warning ( ""Carbon <S2SV_blank> received <S2SV_blank> with <S2SV_blank> unrecognised <S2SV_blank> name: <S2SV_blank> %s"", name ) ; return TRUE ; } if ( g_strcmp0 ( name, ""sent"" )!= 0 ) { log_warning ( ""Carbon <S2SV_blank> received <S2SV_blank> with <S2SV_blank> unrecognised <S2SV_blank> stanza <S2SV_blank> name: <S2SV_blank> %s"", name ) ; return TRUE ; } if ( g_strcmp0 ( name, ""received"" )!= 0 ) { log_warning ( ""Carbon <S2SV_blank> received <S2SV_blank> with <S2SV_blank> unrecognised <S2SV_blank> name: <S2SV_blank> %s"", name ) ; return TRUE ; } if ( g_strcmp0 ( name, ""sent"" )!= 0 ) { log_warning ( ""Carbon <S2SV_blank> received <S2SV_blank> with <S2SV_blank> unrecognised <S2SV_blank> stanza <S2SV_blank> name: <S2SV_blank> %s"", name ) ; return",0
395,"<S2SV_ModStart> { parse_global_option ( CMD_PRINT_HELP <S2SV_ModEnd>, NULL, <S2SV_ModStart> { parse_global_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL, <S2SV_ModStart> { parse_global_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL,",0
396,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
397,"<S2SV_ModStart> ; if ( st -> st_v1_new_iv. len < e -> enc_blocksize ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; st -> st_v1_new_iv. len = e -> enc_blocksize ; } else if ( st -> st_v1_new_iv. len < e -> enc_blocksize ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; st -> st_v1_new_iv. len = e -> enc_blocksize ; st -> st_v1_new_iv. len = e -> enc_blocksize ; } else if ( st -> st_v1_new_iv. len < e -> enc_blocksize ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; st -> st_v1_new",0
398,<S2SV_ModStart> if ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; } else { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num,0
399,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> char * print_string <S2SV_ModStart> { return print_string_ptr <S2SV_ModEnd> ( item -> <S2SV_ModStart> item -> valuestring ) ; } <S2SV_null> <S2SV_null>,0
400,"<S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img, <S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img,",1
401,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> buf ) ; if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; return 1 ; } <S2SV_ModStart> ++ ; ret = sscanf ( argv [ i ] + 1, ""prestring=%s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> prestring\\n"" ) ; return 1 ; } if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; return 1 ; } if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; return 1 ; } if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large",0
402,"<S2SV_ModStart> cols0 ) ; } else if ( arg1 == 3 ) { win_set_geom ( 0, 0, 0, 0 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 2 ) { win_maximise ( - 2 ) ; win_set_geom ( 0, - 1, 0, 0 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 3 ) { win_set_geom ( 0, 0, - 1, 0 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 1 ) { win_maximise ( 0 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; win_set_chars ( rows0,",0
403,<S2SV_ModStart> ; for ( i = 0 ; i < cols + 17 ; i ++ ) s [ i ] = s [ i ] ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( c = 0 ; c < cols + 8 ; c ++ ) { int x = s [ c + 7 ] - s [ c - 8 ] ; int y = s [ c + 7 ] + s [ c - 8 ] ; int y = s [ c + 7 ] + s [ c - 8 ] ; sum += x * y ; sumsq += x * y ; sum += s [ c ] * s [ c ] ; } for ( c = 0 ; c < cols + 8 ; c ++ ) { int x = s [ c + 7 ] - s [ c - 8 ] ; int y = s [ c + 7 ] - s [ c - 8 ] ; int y = s [ c + 7 ] + s [ c - 8 ] ; int x = s [ c + 7 ] + s [ c - 8 ] ; int y = s [ c + 7 ] + s [ c ],0
404,"<S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif i -> posX = i -> parent -> width ; } if ( ( i -> posY + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> Y <S2SV_blank> position\\n"" ) ; # endif i -> posY = i -> parent -> height - i -> height ; # endif } if ( <S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent",0
405,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> word ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 16 ) ) vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 32 ) ) vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 64 ) ) vpx_write_literal <S2SV_ModEnd> ( w,",0
406,"<S2SV_ModStart> ( ent!= NULL && ( st = populate_policy ( context, ld, ent, pol_name, * policy ) )!= 0 ) <S2SV_ModEnd> goto cleanup ; <S2SV_ModStart> cleanup ; } st = populate_policy ( context, ld, ent, pol_name, * policy ) ; if ( st!= 0 ) { if ( * policy!= NULL ) { krb5_ldap_free_password_policy ( context, * policy ) ; * policy = NULL ; goto cleanup ; } <S2SV_ModEnd> ldap_msgfree ( result",0
407,<S2SV_ModStart> value ) ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
408,"<S2SV_ModStart> ) ) { va_start ( argptr, c ) ; <S2SV_ModStart> case'<S2SV_blank>': psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'e' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'E' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'T' : trunc_8to4 = SF_TRUE ; break ; case 'M' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_long ( psf, data ) ; } else { header_put_le_long ( psf, data ) ; } ; count += 1 ; break ; case 'n' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_long ( psf, data ) ; } else { header_put_le_long ( psf, data ) ; } ; count += 2 ; break ; case '6' : data = va_arg ( argptr, unsigned int ) ;",0
409,<S2SV_ModStart> ; if ( d -> msg_len > sizeof ( d -> msg ) ) return - EINVAL ; if ( <S2SV_ModStart> ) ; } d -> dsec_cmd. args [ CX24116_DISEQC_MSGOFS ] = 0 ; d -> dsec_cmd. len = CX24116_ARGLEN - CX24116_DISEQC_MSGLEN ; for ( i = 0 ; i < d -> msg_len ; i ++ ) state -> dsec_cmd. args [ CX24116_DISEQC_MSGLEN + i ] = 0 ; for ( i = 0 ; i < d -> msg_len ; i ++ ) state -> dsec_cmd. args [ CX24116_DISEQC_MSGOFS + i ] = d -> msg [ i ] ; if ( toneburst == CX24116_DISEQC_TONEOFF ) state -> dsec_cmd. args [ CX24116_DISEQC_BURST ] = 0 ; else if ( toneburst == CX24116_DISEQC_TONECACHE ) state -> dsec_cmd. args [ CX24116_DI,0
410,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
411,"<S2SV_ModStart> 0 ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0600 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; return",1
412,"<S2SV_ModStart> ( BLOCK_SIZE bsize, vpx_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
413,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
414,"<S2SV_ModStart> ) ; } else if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, request, reply, cb, reqp, reqp9 ) ; } else if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, request, reply, cb, reqp9 ) ; } else if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, request, reply, cb, reqp9 ) ; } else if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, request, reply, cb, reqp, reqp9 ) ; } else if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, request, reply, cb, reqp, reqp9 ) ; } else if ( padata -> pa_type == KRB5_PADATA",0
415,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
416,"<S2SV_ModStart> flags ) ; if ( vb ) { if ( input -> buf_cur_space_left < frame_len ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", frame_len ) ; return ; } if ( input -> buf_cur_space_left < frame_len ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", frame_len ) ; return ; } } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank>",0
417,<S2SV_ModStart> size ) { if ( size > ZMALLOC_MAX_SIZE ) { zmalloc_oom_handler ( size ) ; return NULL ; },0
418,<S2SV_ModStart> ; ssize_t count ; if ( bytes == 0 || items == 0 ) return 0,1
419,<S2SV_ModStart> -> serviceId == EXTRACT_16BITS <S2SV_ModEnd> ( & rxh,1
420,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > IEEE80211_MAX_SSID_LEN ) { mwifiex_dbg ( adapter, INFO, ""info: <S2SV_blank> ADHOC_S_CMD: <S2SV_blank> SSID <S2SV_blank> = <S2SV_blank> %s\\n"", adhoc_start -> ssid ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( bss_desc -> ssid. ssid, req_ssid -> ssid ) ; } else { memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN )",0
421,"<S2SV_ModStart> ; if (! context -> put_listent ) { error = context -> put_listent ( context, sfe -> flags, sfe -> nameval, ( int ) sfe -> namelen, ( int ) sfe -> valuelen, & sfe -> nameval [ 0 ] ) ; if ( error ) return error ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; } if (! context -> put_listent ) { error = context -> put_listent ( context, sfe -> flags, sfe -> nameval, ( int ) sfe -> namelen, ( int ) sfe -> valuelen, & sfe -> nameval [ sfe -> namelen ] ) ; if ( context -> seen_enough ) break ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; } if (! context -> put_listent ) { error = context -> put_listent ( context, sfe -> flags, sfe -> nameval, ( int ) sfe -> namelen, ( int ) sfe -> valuelen, & sfe -> nameval [ sfe -> namel",0
422,"<S2SV_ModStart> = data ; struct l2cap_conf_rfc <S2SV_ModEnd> rfc = { <S2SV_ModStart> = L2CAP_MODE_BASIC ; l2cap_add_conf_opt ( & ptr, L2CAP_CONF_MODE, 2, pi -> mode ) ; switch ( pi -> mode ) { case L2CAP_MODE_ERTM : rfc. mode = L2CAP_MODE_ERTM ; rfc. txwin_size = L2CAP_DEFAULT_TX_WINDOW ; rfc. retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; l2cap_add_conf_opt ( & ptr, L2CAP_CONF_RFC, sizeof ( rfc ), ( unsigned long ) & rfc ) ; break ; } req -> dcid = cpu_to_le16 ( pi -> dcid ) ; req -> flags = cpu_to_le16 ( req -> flags ) ;",0
423,"<S2SV_ModStart> r ) { if ( r < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } <S2SV_ModStart>, MSG_WAITALL ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
424,<S2SV_ModStart> u1_nal_ref_idc ) ; if ( ( ps_dec -> u1_nal_ref_idc == 0 ) || ( ( ps_dec -> u1_nal_ref_idc > IDR_SLICE_NAL ) && ( ( ps_dec -> u1_pic_decode_done!= 1 ) && ( ps_dec -> u1_nal_unit_type > IDR_SLICE_NAL ) ) ) { return ERROR_INCOMPLETE_FRAME ; } if ( ( ps_dec -> u1_nal_ref_idc == 0 ) || ( ( ps_dec -> u1_nal_ref_idc > IDR_SLICE_NAL ) && ( ps_dec -> u1_pic_decode_done!= 1 ) && ( ps_dec -> u1_nal_ref_idc > IDR_SLICE_NAL ) ) ) { return ERROR_INCOMPLETE_FRAME ; },0
425,<S2SV_ModStart> tok ) ; if ( pair == NULL ) return ;,0
426,"<S2SV_ModStart> = uid ; <S2SV_ModEnd> new -> count <S2SV_ModStart> new -> count = 0 <S2SV_ModEnd> ; spin_lock_irq ( <S2SV_ModStart> } if ( <S2SV_ModEnd> ucounts -> count <S2SV_ModStart> ucounts -> count + 1 > INT_MAX ) ucounts = NULL ; spin_unlock_irq ( & ucounts_lock ) ; return ucounts ; } if (! atomic_add_unless ( & ucounts -> count, 1, INT_MAX ) ) ucounts = NULL ; spin_unlock_irq ( & ucounts_lock ) ; return ucounts ;",0
427,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd>, int open_flags <S2SV_ModStart> = 0 ; fmode_t fmode = fmode & ( FMODE_READ | FMODE_WRITE ) ; if ( fmode & ( FMODE_READ | FMODE_WRITE ) ) fmode |= ( FMODE_READ | FMODE_WRITE <S2SV_ModEnd> ) ; rcu_read_lock <S2SV_ModStart> ) ; __update_open_stateid <S2SV_ModEnd> ( state, <S2SV_ModStart> NULL ) { __update_open_stateid <S2SV_ModEnd> ( state,",0
428,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
429,"<S2SV_ModStart> int64_t * out_dist_sum, int64_t * out_rate_sum, int64_t * out_dist_sum ) { int i ; ( void ) cpi -> fn_ptr [ bs ]. vf ( p -> src. buf, p -> src. stride, pd -> dst. buf, pd -> dst. stride, & sse ) ; x -> pred_sse [ ref ] = sse ; if ( cpi -> speed > 4 ) { int64_t rate ; int64_t dist ; int64_t square_error ; vp9_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], pd -> dequant [ 1 ] >> 3, & rate, & dist ) ; } else { int rate ; int64_t dist ; vp9_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], pd -> dequant [ 1 ] >> 3, & rate, & dist ) ; * out_rate_sum = ( int ) rate_sum ; * out_dist_sum =",0
430,"<S2SV_ModStart> } if ( pmd_trans_huge_end ( * pmd ) ) { if ( pmd_none_or_trans_huge_end ( * pmd ) ) { if ( pmd_trans_huge_end ( * pmd ) ) { if ( mincore_huge_end_pmd ( vma, pmd, addr, next, vec ) ) { vec += ( next - addr ) >> PAGE_SHIFT ; continue ; } } } else { if ( pmd_none_or_trans_huge_end ( * pmd ) ) { if ( mincore_huge_end ( vma, pmd, addr, next, vec ) ) { if ( pmd_trans_huge_end ( * pmd ) ) { if ( mincore_huge_end_pmd ( vma, pmd, addr, next, vec ) ) { vec += ( next - addr ) >> PAGE_SHIFT ; continue ; } } } else { if ( pmd_none_or_clear_bad ( pmd ) ) mincore_unmapped_range ( vma, pmd, addr, next, vec ) ;",0
431,<S2SV_ModStart> { if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( <S2SV_ModStart> { if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM,0
432,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> read_segment_id ( vpx_reader <S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { # if CONFIG_VP9_HIGHBITDEPTH if ( seg -> flags & VP9_FLAG_HIGHBITDEPTH ) return vpx_read_tree_high ( r, seg -> tree_probs ) ; # else return vpx_read_tree ( r, vpx_segment_tree, seg -> tree_probs ) ; # endif return vpx_read_tree_high ( r, vpx_segment_tree, seg -> tree_probs ) ; } # if CONFIG_VP9_HIGHBITDEPTH if ( seg -> flags & VP9_FLAG_HIGHBITDEPTH ) return vpx_read_tree_high ( r, vpx_segment_tree, seg -> tree_probs ) ; # else return vpx_read_tree ( r, vpx_segment_tree, seg -> tree_probs ) ; # endif return vpx_read_tree_high ( r, vpx_segment_tree, seg -> tree_probs ) ;",0
433,"<S2SV_ModStart> ++ i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ i ) { memcpy ( dst_ptr1, src_ptr1, linesize ) ; dst_ptr1 += src_stride ; } for ( i = 0 ; i < extend_top ; ++ i ) { memcpy ( dst_ptr2, src_ptr2, linesize ) ; dst_ptr2 += src_stride ; } for ( i = 0 ; i < extend_bottom ; ++ i ) { memcpy ( dst_ptr1, src_ptr1, linesize ) ; dst_ptr1 += src_stride ; } for ( i = 0 ; i < extend_right ; ++ i ) { memcpy ( dst_ptr2, src_ptr2, linesize ) ; dst_ptr2 += src_stride ; } for ( i = 0 ; i < extend_left ; ++ i ) { memcpy ( dst_ptr1, src_ptr1, linesize ) ; dst_ptr1 += src_stride ; } for ( i = 0 ; i < extend_top ; ++ i ) {",0
434,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
435,"<S2SV_ModStart> buf2 = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf2 == NULL ) { ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ; return ( buf ) ; } ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ; return ( buf ) ; } if ( depth && buf < maxbuf ) { size_t len = PTR_DIFF ( maxbuf, buf ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ; smb_print_data ( ndo, buf, len ) ; return ( buf ) ; } if ( depth && buf < maxbuf ) { size_t len = PTR_DIFF ( maxbuf, buf ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ; return ( buf",0
436,"<S2SV_ModStart> ; } n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n < ( length + 8 ) ) { return ERROR_FAILURE ; } <S2SV_ModStart> htole16 ( TX_CTRL_TXIC | ( context -> frameId ++ & TX_CTRL_TXFID ) ) ; header. byteCount = htole16 ( length ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, RXQCR_SDA ) ; ksz8851SetBit ( interface, KSZ8851_TXQCR, TXQCR_METFE ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { osSetEvent ( & interface -> nicTxEvent ) ; } return ERROR_FAILURE ; } netBufferRead ( context -> txBuffer, buffer, offset, length ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_",0
437,"<S2SV_ModStart> NULL ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
438,"<S2SV_ModStart> = 11211 ; if ( settings. port < 0 ) { fprintf ( stderr, ""%s: <S2SV_blank> Invalid <S2SV_blank> port <S2SV_blank> %d\\n"", __FILE__, __LINE__ ) ; exit ( EXIT_FAILURE ) ; } else if ( settings. udpport < 0 ) { fprintf ( stderr, ""%s: <S2SV_blank> Invalid <S2SV_blank> UDP <S2SV_blank> port <S2SV_blank> %d\\n"", __FILE__, __LINE__ ) ; exit ( EXIT_FAILURE ) ; } else if ( settings. port < 0 ) { fprintf ( stderr, ""%s: <S2SV_blank> Invalid <S2SV_blank> port <S2SV_blank> %d\\n"", __FILE__, __LINE__ ) ; exit ( EXIT_FAILURE ) ; } else { fprintf ( stderr, ""%s: <S2SV_blank> Invalid <S2SV_blank> port <S2SV_blank> %d\\n"", __LINE__ ) ; exit ( EXIT_FAILURE ) ; } else { fprintf ( stderr, ""%s: <S2SV_blank> Invalid <S2SV_blank> UDP <S2SV_blank> port <S2SV_blank> %d\\n"", __FILE__, __LINE__ ) ; exit ( EXIT_FAILURE ) ; } } else { fprintf ( stderr, ""%s: <S2SV_blank> Invalid <S2SV_blank> port <S2SV_blank> %d\\n"", __LINE__ ) ; exit ( EXIT_FAILURE ) ; }",0
439,<S2SV_ModStart> ; # endif <S2SV_ModEnd> if ( domains_to_finalize,0
440,"<S2SV_ModStart> x_7 ; WORD32 <S2SV_ModEnd> x_8, x_9 <S2SV_ModStart> ++ ; x_8 = * x0 ++ ; x_9 = * x0 ++ ; x_a = * x0 ++ ; x_b = * x0 ++ ; x_c = * x0 ++ ; x_d = * x0 ++ ; x_e = * x0 ++ ; x_f = * x0 ++ ;",0
441,<S2SV_ModStart> clips_ptr ) { if ( num_clips < 0 || num_clips > DRM_MODE_FB_DIRTY_MAX_CLIPS ) { ret = - EINVAL ; goto out_err1 ; },1
442,<S2SV_ModStart> ( unlikely ( pmd_trans_huge_nolock <S2SV_ModEnd> ( * pmd,0
443,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
444,"<S2SV_ModStart> int width, height <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; exit ( 1 ) ; } if ( argc < 4 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; exit ( 1 ) ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; exit ( 1 ) ; } if (! parse_dim ( argv [ 3 ], & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; exit ( 1 ) ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; exit ( 1 ) ; } fpout = fopen ( fout, ""wb"" ) ; if ( fpout == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> write\\n"", fout )",0
445,"<S2SV_ModStart> num_fields ) { Py_IDENTIFIER ( _attributes ) ; PyObject * s, * l ; int result ; if ( num_fields < 0 ) { Py_DECREF ( l ) ; return 0 ; } _Py_IDENTIFIER ( _attributes ) ; l = PyTuple_New ( num_fields ) ; if (! l ) return 0 ; for ( i = 0 ; i < num_fields ; i ++ ) { s = PyUnicode_FromString ( attrs [ i ] ) ; if (! s ) { Py_DECREF ( l ) ; return 0 ; } PyTuple_SET_ITEM ( l, i, s ) ; } result = _PyObject_SetAttrId ( ( PyObject * ) type, & PyId__attributes, l ) >= 0 ; Py_DECREF ( l ) ;",0
446,<S2SV_ModStart> = VPX_CODEC_OK ; <S2SV_ModEnd> struct vpx_codec_alg_priv * <S2SV_ModStart> struct vpx_codec_alg_priv * <S2SV_ModEnd> priv = calloc <S2SV_ModStart> ) ) ; if (! priv ) { return VPX_CODEC_MEM_ERROR ; } ctx -> priv = & priv -> base ; ctx -> priv -> sz = sizeof ( * ctx -> priv ) ; ctx -> priv -> iface = ctx -> iface ; ctx -> priv -> init_flags = ctx -> init_flags ; } cfg = & ctx -> config ; for ( i = 0 ; extracfg_map [ i ]. usage ; i ++ ) ; priv -> cfg = extracfg_map [ i ]. cfg ; priv -> vp8_cfg. pkt_list = malloc ( priv -> cx_data_sz ) ; if (! cfg ) { return VPX_CODEC_MEM_ERROR ; } priv -> cx_data_sz = 32768 ; priv -> cx_data_sz = 32768 ; priv -> cx_data = malloc ( priv -> cx_data_sz ) ; if (! priv -> cx_data ) { return VPX_CODEC_MEM_,0
447,"<S2SV_ModStart> } if ( ( ret = s -> decode ( gb, rc, cumfr, cnt_c, totfr ) ) < 0 ) return ret ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> total_freq = totfr ;",0
448,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> 0 ; } memset <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ ctx -> fragments. count ] = data ; ctx -> fragments. sizes [ ctx -> fragments. count ] = data_sz ; ctx -> fragments. count ++ ; if ( ctx -> fragments. count > ( 1 << EIGHT_PARTITION ) + 1 ) { ctx -> fragments. count = 0 ; * res = VPX_CODEC_INVALID_PARAM ; return - 1 ; } return 0 ; } if ( ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ ctx -> fragments. count ] = data ; ctx -> fragments. sizes [ ctx -> fragments. count ++ ] = data_sz ; ctx -> fragments. count ++ ; if ( ctx -> fragments. count > ( 1 << EIGHT_PARTITION ) + 1 ) { ctx -> fragments. count = 0 ; * res = VPX_CODEC_INVALID_PARAM ; return - 1 ; },0
449,<S2SV_ModStart> = v ; if (! IS_ERR ( vma ) ),1
450,"<S2SV_ModStart> ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %",0
451,"<S2SV_ModStart> data ) { uint16_t status ; <S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & ENC28J60_MISTAT_BUSY <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & ENC28J60_MISTAT_BUSY <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & ENC28J60_MISTAT_BUSY",0
452,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> bad_format_imginfo ( char <S2SV_ModStart> fmt ) { char * ptr ; int n = 0 ; ptr = fmt ; while ( * ptr!= '\\0' ) if ( * ptr ++ == '%' ) { if ( * ptr =='s' || * ptr == 'S' ) { n = 1 ; ptr ++ ; } else { if ( * ptr =='<S2SV_blank>') ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++,0
453,"<S2SV_ModStart> ""DefragIPv4NoDataTest"", DefragIPv4NoDataTest ) ; UtRegisterTest ( ""DefragReverseSimpleTest"", DefragReverseSimpleTest ) ; UtRegisterTest ( ""DefragSturgesNovakBsdTest"", DefragSturgesNovakBsdTest ) ; UtRegisterTest ( ""DefragSturgesNovakLinuxTest"", DefragSturgesNovakLinuxTest ) ; UtRegisterTest ( ""DefragSturgesNovakWindowsTest"", DefragSturgesNovakWindowsTest ) ; UtRegisterTest ( ""DefragSturgesNovakFirstTest"", DefragSturgesNovakFirstTest ) ; UtRegisterTest ( ""DefragSturgesNovakLastTest"", DefragSturgesNovakLastTest ) ;",0
454,"<S2SV_ModStart> ; if ( object_length > sizeof ( new_object. data ) - add_v1_record ) { sc_cardctl_coolkey_object_t new_object ; new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { return SC_ERROR_OUT_OF_MEMORY ; } if ( object_length > sizeof ( new_object. data ) - add_v1_record ) { sc_cardctl_coolkey_object_t new_object ; new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { return SC_ERROR_OUT_OF_MEMORY ; } if ( add_v1_record ) { new_object. data [ 0 ] = COOLKEY_V1_OBJECT ; new_object. length ++ ; } memcpy ( & new_object. data [ add_v1_record ], object_data, object_length ) ; }",0
455,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
456,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
457,"<S2SV_ModStart> NULL ; } if ( p_sys -> p_format -> interlaced ) { p_sys -> p_format -> interlaced =! p_sys -> p_format -> interlaced ; p_sys -> p_format -> top_field_first =! p_sys -> p_format -> top_field_first ; if ( p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""interlaced_coding"",! p_sys -> p_format -> interlaced ) ; } else { if ( p_sys -> p_format -> top_field_first ) p_sys -> p_format -> top_field_first =! p_sys -> p_format -> top_field_first ; if ( p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""top_field_first_coding"",! p_sys -> p_format -> interlaced ) { if ( p_sys -> b_auto_field_coding",0
458,"<S2SV_ModStart> { bstr fname ; if (! fname. len ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", fname ) ; break ; } fname = bstr_strip ( fname ) ; if ( fname. len ) { if (! mp_path_exists ( fname ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", fname ) ; } else { mp_verbose ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", fname ) ; } }",0
459,"<S2SV_ModStart> 4 ) ; if ( idx + 4 > len ) return NULL ; <S2SV_ModStart> len ) ; if ( idx + 4 > len ) return NULL ; <S2SV_ModStart> ( j = 0 <S2SV_ModEnd> ; j < <S2SV_ModStart> j < ( a -> names [ i ]. len >> 1 ) ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; } else { size_t i ; a -> names = CHECKED_XCALLOC ( VarLenData, a -> num_names ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> name = GETINT32 ( buf + idx ) ; idx += 4 ; a -> guid = CHECKED_XMALLOC ( GUID, 1 ) ; copy_guid_from_buf ( a -> guid, buf + idx, len ) ; idx += sizeof ( GUID ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ;",0
460,"<S2SV_ModStart> ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %",0
461,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
462,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
463,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ( data ) { VPxWorker * const worker = ctx -> worker ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data0 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data0 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data -> frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data -> frame_worker_data ; FrameWorkerData * const frame_worker_data = frame_worker_data -> frame_worker_data ; FrameWorkerData * const frame_worker_data = frame_worker_data -> frame_worker_data ; FrameWorkerData * const frame_worker_data = frame_worker_data -> frame_worker_data ; FrameWorkerData * const frame_worker_data = frame_",0
464,"<S2SV_ModStart> ++ ) { if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ++ ) { if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ++ ) { if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ++ ) { if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA",0
465,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == testlist ) expr1 = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; else expr1 = ast_for_expr ( c, ch ) ; if (! expr1 ) return NULL ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; ch = CHILD ( n, 2 ) ; if ( TYPE ( CHILD ( n, 1 ) ) == augassign ) expr2 = ast_for_augassign ( c, CHILD ( n, 1 ) ) ; if (! expr2 ) return NULL ; newoperator = ast_for_augassign ( c, CHILD ( n, 1 ) ) ; if (! newoperator ) return NULL ;",0
466,"<S2SV_ModStart> int vp8_denoiser_filter_c ( <S2SV_ModEnd> int r, <S2SV_ModStart> int sig_stride, <S2SV_ModEnd> int y_offset, <S2SV_ModStart> char * mc_running_avg_y = mc_running_avg -> y_buffer + y_offset, int mc_avg_y_stride = mc_running_avg -> y_stride ; int running_avg_y_stride = running_avg -> y_stride ; unsigned char * running_avg_y = running_avg -> y_buffer + y_offset ; int avg_y_stride = running_avg -> y_stride ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( i = 0 ; i < 3 ; i ++ ) adj_val [ i ] += 1 ; } for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 16 ; ++ c ) { if ( ( sig [ c ] + adjustment ) > 255 ) running_avg_y [ c ] = 255 ; else running_avg_y [ c ] = sig [",0
467,"<S2SV_ModStart> == 0u ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; } else if ( ( sockPtr -> flags & NS_CONN_ESTABLISHED )!= 0u ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; } else { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; } else if ( ( sockPtr -> flags & NS_CONN_ESTABLISHED )!= 0u ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; } else if ( ( sockPtr -> flags & NS_CONN_ESTABLISHED )!= 0u ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; } else if ( ( sockPtr -> flags & NS_CONN_ESTABLISHED )!= 0u ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; } else { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" )",0
468,"<S2SV_ModStart> = 0 ; unsigned long cp0 ; unsigned long cp1 ; unsigned long cp2 ; ret = __copy_from_user ( & cp0, & cp1, sizeof ( cp0 ) ) ; ret |= __copy_from_user ( & cp2, & cp1, sizeof ( cp2 ) ) ; ret |= __copy_from_user ( & cp3, & cp4, sizeof ( cp3 ) ) ; ret |= __copy_from_user ( & cp1, & cp2, sizeof ( cp1 ) ) ; ret |= __copy_from_user ( & cp2, & cp3, sizeof ( cp1 ) ) ; ret |= __copy_from_user ( & cp1, & cp2, sizeof ( cp1 ) ) ; ret |= __copy_from_user ( & cp2, & cp3, sizeof ( cp2 ) ) ; ret |= __copy_from_user ( & cp3, & cp1, sizeof ( cp3 ) ) ;",0
469,<S2SV_ModStart> size ) ; if ( message -> length == 0 ) { message -> length = 0 ; message -> srcIpAddr = queueItem -> srcIpAddr ; message -> srcPort = queueItem -> srcPort ; } else { message -> srcIpAddr = queueItem -> srcIpAddr ; } message -> srcPort = queueItem -> srcPort ; message -> destIpAddr = queueItem -> destIpAddr ; message -> ttl = queueItem -> ancillary. ttl ; # if ( ETH_SUPPORT == ENABLED ) message -> srcMacAddr = queueItem -> ancillary. srcMacAddr ; message -> destMacAddr = queueItem -> ancillary. destMacAddr ; # endif # if ( ETH_PORT_TAGGING_SUPPORT == ENABLED ) message -> switchPort = queueItem -> ancillary. port ; # endif # if ( ETH_TIMESTAMP_SUPPORT == ENABLED ) message -> timestamp = queueItem -> ancillary. timestamp ; # endif if ( ( flags & SOCKET_FLAG_PEEK ) == 0 ) { socket -> receiveQueue = NULL ; return ERROR_TIMEOUT ; },0
470,"<S2SV_ModStart> { struct se_device <S2SV_ModEnd> * remote_dev ; <S2SV_ModStart> == XCOL_SOURCE_RECV_OP ) { pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ; target_undepend_item ( & remote_dev -> dev_group. cg_item ) ; } else { pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ; target_undepend_item ( & remote_dev -> dev_group. cg_item ) ; } <S2SV_ModEnd> } <S2SV_null>",0
471,"<S2SV_ModStart> int error ; struct mb2_cache * ext2_mb_cache = EXT2_SB ( sb ) -> s_mb_cache <S2SV_ModStart> get_bh ( new_bh ) ; mb2_cache_insert_block ( ext2_mb_cache, new_bh, EXT2_I ( inode ) -> i_block_group, new_bh -> b_blocknr ) ; <S2SV_ModStart> new_bh ) ; mb2_cache_insert_block ( ext2_mb_cache, new_bh, EXT2_I ( inode ) -> i_block_group, new_bh -> b_blocknr ) ; <S2SV_ModStart> new_bh ) ; mb2_cache_insert_block ( ext2_mb_cache, new_bh, EXT2_I ( inode ) -> i_block_group, new_bh -> b_blocknr ) ; mb2_cache_insert_block ( ext2_mb_cache, new_bh, EXT2_I ( inode ) -> i_block_group, new_bh -> b_blocknr ) ; mb2_cache_insert_block ( ext2_mb_",0
472,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> { if ( ctx -> frame_parallel_decode ) { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data0 ; FrameWorkerData * const frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = frame_worker_data -> frame_worker_data ; FrameWorkerData * const frame_worker_data = frame_worker_data -> frame_worker_data ; FrameWorkerData * const frame_worker_data = frame_worker_data -> frame_worker_data ; FrameWorkerData * const frame_worker_data = frame_worker_data -> frame_worker_data ; FrameWorkerData * const frame_worker_data = frame_worker_data -> frame_worker_data ; FrameWorkerData * const frame_worker_data = frame_worker_data -> frame_worker_data ; FrameWorkerData",0
473,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } count = ReadBlob ( image, 14, ( unsigned char * ) magick ) ; if ( count!= 14 ) { InheritException ( exception, & image -> exception ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
474,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
475,"<S2SV_ModStart> AcquireQuantumMemory ( imsx * imsy, 1 ) ; dmbuf = ( unsigned char * ) AcquireQuantumMemory ( dmsx * dmsy, 1 ) ; if ( dmbuf == NULL ) { return ( MagickFalse ) ; } for ( n = 0 ; n < 16 ; n ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( i = 0 ; i < 24 ; i ++ ) { sixel_palet [ n ++ ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( i = 0 ; i < 6 ; i ++ ) { for ( r = 0 ; r < 6 ; r ++ ) { for ( g = 0 ; g < 6 ; g ++ ) { for ( b = 0 ; b < 6 ; b ++ ) { for ( r = 0 ; r < 6 ; r ++ ) { for ( r = 0 ; r < 6 ; r ++ ) { for ( r = 0 ; r < 6 ; r ++ ) { for ( r = 0 ; r < 6 ; r ++ ) { for ( r = 0 ; r < 6 ;",0
476,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { if ( ctx -> frame_parallel_decode ) { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data0 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data0 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data0 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * )",0
477,<S2SV_ModStart> ) ; } ps_dec -> u2_total_mbs_coded += u1_num_mbs ; <S2SV_ModStart> ) ; } ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> <S2SV_ModStart> ) ; } ps_dec -> u2_total_mbs_coded += u1_num_mbs ; if ( ps_dec -> u2_total_mbs_coded > ps_dec -> u2_total_mbs_coded ) { ps_dec -> u2_total_mbs_coded = u2_total_mbs ; } <S2SV_ModStart> ) ; } ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; if ( ps_dec -> u2_total_mbs_coded > ps_cur_poc -> u2_total_mbs_coded ) { ps_dec -> u2_total_mbs_coded = u2_total_mbs ; },0
478,"<S2SV_ModStart> ; UWORD32 u4_y_offset ; IMPEG2D_TRACE_MB_START ( ps_dec -> u2_mb_x, ps_dec -> u2_mb_y ) ; <S2SV_ModStart> == B_PIC ) { memset ( ps_dec -> ai2_pred_mv, 0, sizeof ( ps_dec -> ai2_pred_mv ) ) ; ps_dec -> ai2_prev_intra_mb = 1 ; break ; } <S2SV_ModStart> == B_PIC ) { memset ( ps_dec -> ai2_pred_mv, 0, sizeof ( ps_dec -> ai2_pred_mv ) ) ; ps_dec -> ai2_prev_intra_mb = 1 ; } else { memset ( ps_dec -> ai2_pred_mv, 0, sizeof ( ps_dec -> ai2_pred_mv ) ) ; ps_dec -> ai2_prev_intra_mb = 0 ; break ; } <S2SV_ModStart> == B_PIC ) { memset ( ps_dec -> ai2_pred_mv, 0, sizeof ( ps_dec -> ai2_pred_mv ) ) ; ps_dec -> ai2",0
479,"<S2SV_ModStart> VP9_LAST_FLAG ) { <S2SV_ModEnd> VP8_BUFFER_CONFIG * const <S2SV_ModStart> const cfg = cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if ( cfg == NULL ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Missing <S2SV_blank> buffer <S2SV_blank> configuration"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; } else if ( cfg == NULL ) { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Missing <S2SV_blank> buffer <S2SV_blank> configuration"" ) ; } else if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; } else if ( ref_frame_flag == VP9_LAST_FLAG ) { const YV12_BUFFER_CONFIG * const cfg = cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if (! equal_dimensions",0
480,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
481,"<S2SV_ModStart> const TX_SIZE tx_size = get_uv_tx_size ( mbmi ) ; const BLOCK_SIZE plane_bsize = get_plane_bsize ( bsize, pd ) ; const int num_4x4_w = num_4x4_w ; const int num_4x4_h = num_4x4_h ; int max_blocks_wide = num_4x4_w ; int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) { int r, c ; int max_blocks_wide = num_4x4_w ; int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_y",0
482,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst, <S2SV_ModStart> # if! ( CONFIG_FAST_UNALIGNED ) dst [ 0 ] = src [ 0 ] ; dst [ 1 ] = src [ 1 ] ; dst [ 2 ] = src [ 2 ] ; dst [ 3 ] = src [ 3 ] ; dst [ 4 ] = src [ 4 ] ; dst [ 5 ] = src [ 5 ] ; dst [ 6 ] = src [ 6 ] ; dst [ 7 ] = src [ 7 ] ; # else ( ( uint32_t * ) dst ) [ 0 ] = ( ( uint32_t * ) src ) [ 0 ] ; ( ( uint32_t * ) dst ) [ 1 ] = ( ( uint32_t * ) src ) [ 1 ] ; ( ( uint32_t * ) dst ) [ 2 ] = ( ( uint32_t * ) src ) [ 2 ] ; ( ( uint32_t * ) dst ) [ 3 ] = ( ( uint32_t * ) src ) [ 3 ] ; ( ( uint32_t * ) dst ) [ 2 ] = ( ( uint32_t * ) src ) [ 2 ] ; ( ( uint32_t *",0
483,"<S2SV_ModStart> nrow ) { if ( row + rowsperstrip > h ) { TIFFErrorExt ( tif -> tif_clientdata, ""gtStripSeparate"", ""%s"", ""rowsperstrip <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", h, rowsperstrip ) ; return ( 0 ) ; } <S2SV_ModStart> = rowsperstrip - ( row + img -> row_offset ) % rowsperstrip ; if ( buf == NULL ) { TIFFErrorExt ( tif -> tif_clientdata, ""%s"", ""rowsperstrip <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", ""rowsperstrip <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", h, row ) ) ; return ( 0 ) ; }",0
484,"<S2SV_ModStart> } } } if ( TYPE ( CHILD ( n, 1 ) ) == TYPE_COMMENT ) { Py_FatalError ( ""Non-statement <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 1 ) ) ) ; Py_FatalError ( buf ) ; } else if ( NCH ( n ) < 2 ) { Py_FatalError ( ""Non-statement <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 1 ) ) ; return 0 ; } else { if ( NCH ( n ) < 2 ) { Py_FatalError ( ""Non-statement <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 1 ) ) ; Py_FatalError ( buf ) ; } else if ( TYPE ( CHILD ( n, 2 ) ) == TYPE_COMMENT ) { i += 2 ; l = 0 ; if ( TYPE ( CHILD ( n, 2 ) ) == TYPE_COMMENT ) i += 2 ; for ( ; i < ( NCH ( n ) - 1 ) ) { Py_FatalError ( ""Non-statement <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n,",0
485,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
486,<S2SV_ModStart> ; if ( number < 32 ) return - 1 ; if ( num < 0 || num > UINT32_MAX / ( 1 << number ) ) return - 1 ; if ( num > UINT32_MAX / ( 1 << ( number - 1 ) ) ) return - 1 ; if ( num > UINT32_MAX / ( 1 << number ) ) return - 1 ; if ( num > UINT32_MAX / ( 1 << number ) ) return - 1 ; if ( num > UINT32_MAX / ( 1 << number ) ) return - 1 ; if ( num < ( UINT32_MAX / ( 1 << number ) ) ) return - 1 ; if ( num > UINT32_MAX / ( 1 << number ) ) return num - ( 1 << number ) ; if ( num > UINT32_MAX / ( 1 << number ) ) return num - ( 1 << number ) ; if ( num > UINT32_MAX / ( 1 << number ) ) return num - ( 1 << number ) ; else return num ;,0
487,"<S2SV_ModStart> [ plane ] ; const int x = vpx_img_plane_width ( img, plane ) ; const int y = vpx_img_plane_height ( img, plane ) ; const int y2 = vpx_img_plane_height ( img, plane ) ; const int w = vpx_img_plane_width ( img, plane ) ; const int h = vpx_img_plane_height ( img, plane ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) && ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) && ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) && ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) && ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) && ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) && ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) && ( img -> fmt & V",0
488,"<S2SV_ModStart> ; uint16_t attr_len <S2SV_ModEnd> ; uint16_t orig_attr_len <S2SV_ModStart> ; if ( avp -> length < sizeof ( struct l2tp_avp_t ) + 2 ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } attr_len = avp -> length - sizeof ( struct l2tp_avp_t ) ; MD5_Init ( & md5_ctx ) ; MD5_Update ( & md5_ctx, & avp -> type, sizeof ( av",0
489,"<S2SV_ModStart> ; if ( ctx -> cipher_data == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_NO_ALGORITHM_ERROR ) ; return 0 ; } if ( ctx -> cipher_data == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_NO_ALGORITHM_ERROR ) ; return 0 ; } ctx -> cipher_data = OPENSSL_memdup ( ctx -> cipher_data, sizeof ( * ctx ) + Poly1305_ctx_size ( ) ) ; if ( ctx -> cipher_data == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_COPY_ERROR ) ; return 0 ; } ctx -> cipher_data = OPENSSL_malloc ( sizeof ( * ctx ) + Poly1305_ctx_size ( ) ) ; if ( ctx -> cipher_data == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_NO_ALGORITHM_ERROR",0
490,"<S2SV_ModStart> alg ) { pr_err <S2SV_ModEnd> ( ""%s"", <S2SV_ModStart> ( ""%s-all"", name ) ; return ERR_PTR ( - ENODEV ) ; } <S2SV_ModEnd> alg = crypto_alg_lookup <S2SV_ModStart> mask & CRYPTO_ALG_NEED_FALLBACK ) ) { pr_err <S2SV_ModEnd> ( ""%s-all"", <S2SV_ModStart> ( ""%s-all"", name ) ; return ERR_PTR ( - ENODEV ) ; } if ( crypto_is_larval ( alg ) ) return crypto_is_larval ( alg )? crypto_larval_wait ( alg ) : ERR_PTR ( - ENODEV ) ;",0
491,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
492,<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ;,1
493,"<S2SV_ModStart> sock, sk ) ; memset ( sa, 0, sizeof ( * sa )",1
494,"<S2SV_ModStart> cpkt. data, cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PASSSALT ) { send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PLAINDATA ) { fwrite ( ( const void * ) cpkt. data, 1, cpkt. length, stdout ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 0 ; if ( is_a_tty ) { setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; } } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 1 ; if ( is_a_tty ) { setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; } } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 0 ; } else if ( cpkt. cptype",0
495,"<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_empty ( adata -> conn ) ; <S2SV_ModStart> goto err_close_conn ; } else { mutt_socket_empty ( adata -> conn ) ; <S2SV_ModStart> ""Encrypted <S2SV_blank> connection <S2SV_blank> unavailable"" ) ) ; mutt_socket_empty ( adata -> conn ) ; <S2SV_ModStart> goto err_close_conn ; }",0
496,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
497,"<S2SV_ModStart> line ) ; if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> if ( strncmp <S2SV_ModStart> line ) ; if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } memset ( line, 0, sizeof ( line ) ) ; if ( recv ( gpsd_sock, line, sizeof ( line ) - 1, 0 )!= 22 ) { close ( gpsd_sock ) ; return ; } memset ( line, 0, sizeof ( line ) ) ; if ( recv ( gpsd_sock, line, sizeof ( line ) - 1, 0 )!= 22 ) { close ( gpsd_sock ) ; return ; } memset ( line, 0, sizeof ( line ) ) ; strcpy ( line, ""?WATCH={\\""json\\"":true};\\n"" ) ; if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32",0
498,"<S2SV_ModStart>, & rlen, 0",1
499,"<S2SV_ModStart> ; read_userfile ( ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, sizeof ( md5data ) + 17 ) ; init_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> seskey, pkthdr -> outcounter ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_CPTYPE_END_AUTH, NULL, 0 ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> seskey, curconn -> outcounter ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PTYPE_END_AUTH, NULL, 0 ) ; if ( curconn -> state == STATE_ACTIVE ) { syslog ( LOG_ERROR, _ ( ""(%d) <S2SV_blank> Invalid <S2SV_blank> login <S2SV_blank> by <S2SV_blank> %s."" ), curconn -> seskey ) ; abort_connection ( curconn, pkth",0
500,"<S2SV_ModStart> == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } if ( PyUnicode_CompareWithASCIIString ( name, ""__debug__"" ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } } else { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } }",0
501,<S2SV_ModStart> str [ i ] ) { if ( i >= sizeof ( buf ) ) { return - 1 ; } <S2SV_ModStart> ++ ) { if ( i >= sizeof ( buf ) ) { return - 1 ; },0
502,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
503,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
504,"<S2SV_ModStart> iv ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
505,"<S2SV_ModStart> -> pw ; <S2SV_ModEnd> char * pkalg <S2SV_ModStart> char * userstyle = NULL <S2SV_ModStart> char * pkblob = NULL ; u_char * sig = NULL <S2SV_ModStart> ; if ( <S2SV_ModEnd>! authctxt -> <S2SV_ModStart> valid ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if ( ( r = sshpkt_get_u8 ( ssh, & pkalg ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & pkblob, & blen ) )!= 0 || ( r = sshpkt_get_string ( ssh, & sig, & slen ) )!= 0 ) fatal ( ""%s: <S2SV_blank> parse <S2SV_blank> request <S2SV_blank> failed: <S2SV_blank> %s"", __func__, ssh_err ( r ) ) ; goto done ; } if ( ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & pkblob, & blen ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & sig, & slen ) )!= 0 )",0
506,"<S2SV_ModStart> ; uint32_t bcount ; if (! DoReadFile ( infile, & filehdr, sizeof ( Wave64FileHeader ), & bcount ) || bcount!= sizeof ( Wave64FileHeader ) - 4 || memcmp ( filehdr. ckID, riff_guid, sizeof ( riff_guid ) ) || memcmp ( filehdr. formType, wave_guid, sizeof ( wave_guid ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } else if (! ( config -> qmode & QMODE_NO_STORE_WRAPPER ) &&! WavpackAddWrapper ( wpc, & filehdr, sizeof ( filehdr ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } else if (! ( config -> qmode & QMODE_IGNORE_LENGTH ) && filehdr. ckSize && filehdr. ckSize!= infilesize ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not",0
507,"<S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; }",0
508,<S2SV_ModStart> bd_addr ) { if ( bd_addr == NULL ) return BT_STATUS_INVALID_PARAMETER ;,0
509,<S2SV_ModStart> int i ; size_t <S2SV_ModEnd> avail ; int <S2SV_ModStart> 4 ) ; size_t <S2SV_ModStart> buf -> cursor + sizeof ( txid ) <S2SV_ModEnd> ; nxip = <S2SV_ModStart> ; avail = <S2SV_ModEnd> buf -> len <S2SV_ModStart> buf -> cursor + sizeof ( txid ) ; expect = 8 + 8 + nxip * 8 ; if ( expect > buf -> len ) goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmin > MAX_TXID || xmax > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax ) goto bad_format ; snap -> xip [ i ] = cur ; last = cur ; },0
510,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. ptr,0
511,"<S2SV_ModStart> ( ret ||! cm_id -> device ) { ret = - EADDRNOTAVAIL ; rdsdebug ( ""addr <S2SV_blank> %pI4 <S2SV_blank> ret <S2SV_blank> %d <S2SV_blank> node <S2SV_blank> type <S2SV_blank> %d\\n"", & addr, ret, cm_id -> device? cm_id -> device -> node_type : - 1 ) ; rdma_destroy_id ( cm_id ) ; return ret ; } ret = rdma_bind_addr ( cm_id, ( struct sockaddr * ) & sin ) ; if ( ret ) { ret = - EADDRNOTAVAIL ; rdsdebug ( ""addr <S2SV_blank> %pI4 <S2SV_blank> ret <S2SV_blank> %d <S2SV_blank> node <S2SV_blank> type <S2SV_blank> %d\\n"", & addr, ret, cm_id -> device? cm_id -> device -> node_type : - 1 ) ; rdma_destroy_id ( cm_id ) ; return ret ; }",0
512,<S2SV_ModStart> - 1 ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } <S2SV_ModStart> = 0 ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
513,"<S2SV_ModStart> { errstr = parse_global_option ( CMD_INITIALIZE, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_ERR, ""Global <S2SV_blank> options: <S2SV_blank> %s"", errstr ) ; return 1 ; } } if ( * section_ptr == & new_service_options ) { s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_ERR, ""Service <S2SV_blank> [%s]: <S2SV_blank> %s"", ( * section_ptr ) -> servname, errstr ) ; return 1 ; } } if ( * section_ptr == & new_service_options || eof ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr )",0
514,"<S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif i -> posX = i -> parent -> width ; } if ( ( i -> posY + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> Y <S2SV_blank> position\\n"" ) ; # endif i -> posY = i -> parent -> height - i -> height ; # endif } if ( <S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent",0
515,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_GLOBAL_SHNUM_MAX : * ( size_t * ) val = ms -> global_shnum_max ; return 0 ; case MAGIC_PARAM_GLOBAL_PHNUM_MAX : * ( size_t * ) val = ms -> global_phnum_max ; return 0 ; case MAGIC_PARAM_GLOBAL_SHNUM_MAX : * ( size_t * ) val = ms -> global_shnum_max ; return 0 ; case MAGIC_PARAM_GLOBAL_SHNUM_MAX : * ( size_t * ) val = ms -> global_shnum_max ; return 0 ; case MAGIC_PARAM_GLOBAL_SHNUM_MAX : * ( size_t * ) val = ms -> global_shnum_max ; return 0 ; case MAGIC_PARAM_GLOBAL_SHNUM_MAX : * ( size_t * ) val = ms -> global_shnum_max ; return 0 ;,0
516,"<S2SV_ModStart> * journal = NULL ; if (! PageLocked ( page ) ) { WARN_ON (! PageLocked ( page ) ) ; return ; } journal = EXT4_JOURNAL ( page -> mapping -> host ) ; if ( journal ) jbd2_journal_invalidatepage ( journal, page, offset ) ; else block_invalidatepage ( page, offset ) ;",0
517,"<S2SV_ModStart> ++ ) { if ( i >= trackCount ) { GF_LOG ( GF_LOG_ERROR, ( GF_LOG_ERROR, ( GF_LOG_ERROR, ( GF_LOG_ERROR, ( GF_LOG_ERROR, ( GF_LOG_ERROR, ( GF_LOG_ERROR, ( GF_LOG_ERROR, ( GF_LOG_ERROR, ( GF_LOG_ERROR, ( GF_LOG_FILE_NAME ) ) ) ) ) ) ) ) ) { GF_LOG ( GF_LOG_ERROR, ( GF_LOG_ERROR, ( GF_LOG_ERROR, ( GF_LOG_ERROR, ( GF_LOG_ERROR, ( GF_LOG_ERROR, ( GF_LOG_ERROR, ( GF_LOG_ERROR, ( GF_LOG_ERROR, ( GF_LOG_ERROR ) ( GF_LOG_ERROR, ( GF_LOG_ERROR, ( GF_LOG_ERROR, ( GF_LOG_ERROR, ( GF_LOG_ERROR, ( GF_LOG_ERROR, ( GF_LOG_ERROR",0
518,"<S2SV_ModStart> 17 ] ; size_t <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> ] ; # if defined ( __linux__ ) && defined ( _POSIX_MEMLOCK_RANGE ) memcpy ( md5data, password, 82 ) ; md5data [ 83 ] = '\\0' ; memcpy ( md5data + 1, password, 82 ) ; md5data [ 83 ] = '\\0' ; memcpy ( md5data + 1 + strlen ( password ), pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; md5data [ 0 ] = 0 ; plen = add_control_packet ( & data, MT_CPTYPE_PASSWORD, md5data, 17 ) ; if ( is_a_tty && get_terminal_size ( width, height )!= - 1 ) { width = htole16 ( width ) ; height = htole16 ( height ) ; }",0
519,<S2SV_ModStart> ( _mibindexes ) { int i ; for ( i = 0 ; i < _mibindex_max ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; free ( _mibindexes ) ; _mibindexes = NULL ; } if ( confmibs ) { SNMP_FREE ( confmibs ) ; SNMP_FREE ( confmibdir ) ; },0
520,<S2SV_ModStart> ( n ) \\\n{ <S2SV_ModEnd> sum = ( <S2SV_ModStart> ( n ) \\\n} <S2SV_ModEnd> typedef struct PCDTable <S2SV_ModStart> buffer ) ; for ( j = 0 ; j < length ; j ++ ) pcd_table [ j ] = ( PCDTable * ) RelinquishMagickMemory ( pcd_table [ j ] ) ; for ( j = 0 ; j < i ; j ++ ) pcd_table [ j ] [ j ] = ( PCDTable * ) RelinquishMagickMemory ( pcd_table [ j ] ) ; for ( j = 0 ; j < ( image -> columns > 1536? 3 : 1 ) ; j ++ ) pcd_table [ j ] [ j ] = ( PCDTable * ) RelinquishMagickMemory ( pcd_table [ j ] ) ; for ( j = 0 ; j < i ; j ++ ) pcd_table [ j ] [ j ] = ( PCDTable * ) RelinquishMagickMemory ( pcd_table [ j ] ) ; for ( j = 0 ; j < ( image -> columns > 1536? 3 : 1 ) ; j ++ ) pcd_,0
521,"<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i + 1 ) ) == COMMA ) i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case DOUBLESTAR : if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i + 1 ) ) == COMMA ) i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto",0
522,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
523,<S2SV_ModStart> -> y_buffer ; # if CONFIG_VP9_HIGHBITDEPTH if ( ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) ) { # if CONFIG_VP9_HIGHBITDEPTH if ( ( dst_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) ) { # if CONFIG_VP9_HIGHBITDEPTH if ( ( dst_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( dst_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) ) { # if CONFIG_VP9_HIGHBITDEPTH if ( ( dst_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( dst_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) ) { # if CONFIG_VP9_HIGHBITDEPTH if ( ( dst_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( dst_ybc -> flags & YV12_FLAG,0
524,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMP <S2SV_ModStart> ; int mi_col <S2SV_ModEnd> ; SPEED_FEATURES * <S2SV_ModStart> ; int dummy_rate ; int64_t dummy_dist ; MACROBLOCK * x ; if ( sf -> adaptive_pred_interp_filter ) { for ( i = BLOCK_4X4 ; i < BLOCK_8X8 ; ++ i ) { for ( x -> sb_index = 0 ; x -> sb_index < 4 ; ++ x -> sb_index ) for ( x -> b_index = 0 ; x -> b_index < 16 ; ++ x -> b_index ) for ( x -> sb_index = 0 ; x -> mb_index < 4 ; ++ x -> mb_index ) for ( x -> sb_index = 0 ; x -> sb_index < 4 ; ++ x -> sb_index ) for ( x -> b_index = 0 ; x -> b_index < 16 ; ++ x -> b_index ) for ( x -> b_index = 0 ; x -> b_index < 16 ; ++ x -> b_index ) for,0
525,"<S2SV_ModStart> obj_tlen ; int <S2SV_ModEnd> hexdump ; u_int <S2SV_ModStart> ; if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( obj_tlen < 4",0
526,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> inc_mvs ( const <S2SV_ModStart> mbmi, const MV <S2SV_ModEnd> * ref, <S2SV_ModStart> * ref = & mbmi -> ref_mvs [ mbmi -> ref_frame [ i ] ] [ 0 ]. as_mv ; nmv_context_counts * counts = mbmi -> counts ; for ( i = 0 ; i < 2 + has_second_ref ( mbmi ) ; ++ i ) { MV diff = { mvs [ i ]. row, mvs [ i ]. col } ; vp9_inc_mv ( & diff, counts ) ; } } return 0 ;",0
527,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
528,"<S2SV_ModStart> ; if ( pskb_expand_head ( skb_out, size - skb -> len, GFP_ATOMIC ) < 0 ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; }",0
529,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
530,"<S2SV_ModStart> return ; <S2SV_ModEnd> DEBUGMSGTL ( ( <S2SV_ModStart> ( ""init_mib"", ""Seen <S2SV_blank> MIBDIRS: <S2SV_blank> Looking <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> mib <S2SV_blank> directories <S2SV_blank>...\\n"", env_var ) ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibdir ( entry ) ; entry = strtok_r ( NULL, ENV_SEPARATOR, & st ) ; } <S2SV_ModEnd> } netsnmp_init_mib_internals (",0
531,"<S2SV_ModStart> open ( uinput_dev_path <S2SV_ModEnd> [ x ] <S2SV_ModStart>, O_RDWR ) ; if ( fd < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> ERROR: <S2SV_blank> uinput <S2SV_blank> device <S2SV_blank> open <S2SV_blank> failed"", __FUNCTION__ ) ; return - 1 ; } <S2SV_ModStart>, EV_KEY ) ; ioctl ( fd, UI_SET_EVBIT, EV_KEY ) ; ioctl ( fd, UI_SET_EVBIT, EV_REL ) ; ioctl ( fd, UI_SET_EVBIT, EV_SYN ) ; for ( x = 0 ; key_map [ x ]. name!= NULL ; x ++ ) ioctl ( fd, UI_SET_KEYBIT, key_map [ x ]. mapped_id ) ; if ( ioctl ( fd, UI_DEV_CREATE, & dev ) < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> create <S2SV_blank> uinput <S2SV_blank> device"", __FUNCTION__ ) ; close ( fd ) ; return - 1 ; } fd = open ( uinput_dev_path [ x ], O_RDWR ) ; if ( fd < 0 ) { BTIF_",0
532,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
533,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
534,<S2SV_ModStart> krb5_error_code iakerb_alloc_context ( krb5_ctx_id_t <S2SV_ModEnd> * pctx ) <S2SV_ModStart> ; code = krb5_gss_init_context <S2SV_ModEnd> ( & ctx,0
535,"<S2SV_ModStart> ; status = SetImageExtent ( screen, screen -> columns, screen -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; bitmapDC = CreateCompatibleDC ( hDC ) ; if ( bitmapDC == ( HDC ) NULL ) { InheritException ( exception, & image -> exception ) ; ThrowReaderException ( CoderError, ""UnableToCreateDC"" ) ; } else { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
536,<S2SV_ModStart> ; while ( ( <S2SV_ModStart> )!= START_CODE_PREFIX ) && ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ),1
537,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { kfree ( string ) ; return - EINVAL ; }",0
538,"<S2SV_ModStart> imethod ) ; if ( inflated ) { g_deprecated ( ""Use <S2SV_blank> mono_reflection_bind_generic_method_parameters <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst\\n"" ) ; g_deprecated ( ""Use <S2SV_blank> mono_reflection_bind_generic_method_parameters <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst\\n"" ) ; g_deprecated ( ""Use <S2SV_blank> mono_reflection_bind_generic_method_parameters <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst <S2SV_blank> inst",0
539,"<S2SV_ModStart> ""nnnnn\\0"" ) ] ; long tmp ; tmp = simple_strtol ( buf, & end, 0 ) ; if ( ( * end!= '\\0' ) &&! isspace ( * end ) ) return - EINVAL ; if ( copy_from_user ( buf, buffer, count ) ) return - EFAULT ; tmp = simple_strtol ( buf, & end, 0 ) ; if ( ( * end!= '\\0' ) &&! isspace ( * end ) ) return - EINVAL ; if ( ( * end!= '\\0' ) &&! isspace ( * end ) ) return - EINVAL ;",0
540,"<S2SV_ModStart> is_path ) { <S2SV_ModEnd> size_t len ; <S2SV_ModStart> ( ( ( strncmp <S2SV_ModEnd> ( & name <S2SV_ModStart> [ 1 ], ""ORIGIN"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 1 ], ""PLATFORM"", 8 ) == 0 && ( len = 9 )!= 0 ) ) && ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 9 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 ) || ( strncmp ( & name [ 2 ], ""O' )? ( __libc_enable_secure? NULL : l -> l_origin ) : _dl_platform ) ; repl = ( ( len == 7 || name [ 2 ] == 'O' )? ( __libc_enable_secure? NULL : l -> l_origin ) : l -> l_platform ) ;",0
541,"<S2SV_ModStart> ) ; } if ( sizeof ( decContainer_t ) > sizeof ( decContainer_t ) ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> Memory <S2SV_blank> allocation <S2SV_blank> failed"" ) ; return ( H264SWDEC_MEMFAIL ) ; }",0
542,"<S2SV_ModStart> len ) { struct ipv6_txoptions * opt_space <S2SV_ModEnd> ; DECLARE_SOCKADDR ( <S2SV_ModStart> ( final_p ) ; opt_space = rcu_dereference_protected ( rp -> opt_space, sock_owned_by_user ( sk ) )",0
543,"<S2SV_ModStart> drop ; } IPCB ( skb ) -> opt. optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> srr ) ) { struct in_device * in_dev = __in_dev_get_rcu ( dev ) ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt ->",0
544,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
545,"<S2SV_ModStart> goto errout ; if ( info -> end - info -> begin < sizeof ( * info ) || info -> end - info -> grouping < sizeof ( * info ) ) goto errout ; <S2SV_ModStart> goto errout ; if ( info -> groupbook >= ci -> books ) { int cascade = ( oggpack_read ( opb, 3 ) ; if ( oggpack_read ( opb, 1 ) ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ) ; info -> stagemasks [ j ] = cascade ; } for ( j = 0 ; j < info -> partitions ; j ++ ) { if ( ( info -> stagemasks [ j ] >> k ) & 1 ) { int book = ( unsigned char ) oggpack_read ( opb, 3 ) ; if ( oggpack_read ( opb, 1 ) ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ) ; info -> stagemasks [ j ] = cascade ; } for ( j = 0 ; j < info -> partitions ; j ++ ) { if ( ( info -> stagemasks [ j ] >> k )",0
546,"<S2SV_ModStart>! js_regexec ( J, <S2SV_ModEnd> re -> prog <S2SV_ModStart>! js_regexec ( J, <S2SV_ModEnd> re -> prog",0
547,"<S2SV_ModStart> ) break ; <S2SV_ModEnd> tp -> copied_seq <S2SV_ModStart> = seq ; if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; } <S2SV_ModEnd> tp -> copied_seq <S2SV_ModStart> = seq ; if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; } <S2SV_ModEnd> tp -> copied_seq <S2SV_ModStart> = seq ; if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; } sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; }",0
548,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( n_key_data <S2SV_ModStart> key_data ), & err ) ; if ( key_data_in == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data - 1 ; i ++ ) { if ( key_data [ i ]. key_data_kvno!= key_data [ i + 1 ]. key_data_kvno ) { err = ENOMEM ; goto cleanup ; } <S2SV_ModStart> key_data_in == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data - 1 ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data_length [ 1 ] = 0 ; } }",0
549,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
550,"<S2SV_ModStart> ] ) ; sqlite3_int64 <S2SV_ModEnd> zInput = sqlite3_malloc <S2SV_ModStart> nByte + 1 ) ; if ( pCsr -> zInput == 0 ) { rc = SQLITE_NOMEM ; } else { memcpy ( pCsr -> zInput, zByte, nByte ) ; rc = SQLITE_NOMEM ; } else { memcpy ( pCsr -> zInput, zByte, nByte ) ; rc = pTab -> pMod -> xOpen ( pTab -> pTok, pCsr -> zInput, nByte, & pCsr -> pCsr ) ; if ( rc == SQLITE_NOMEM ) { rc = SQLITE_NOMEM ; } else { memcpy ( pCsr -> zInput, zByte, nByte ) ; rc = pTab -> pMod -> xOpen ( pTab -> pTok, pCsr -> zInput, nByte, & pCsr -> pCsr ) ; if ( rc == SQLITE_OK ) { pCsr -> pCsr -> pTokenizer = pTab -> pTok ; } } }",0
551,<S2SV_ModStart> filp ) { if (! capable ( CAP_SYS_RAWIO ) ) return - EACCES ;,0
552,"<S2SV_ModStart> expr_ty iter, bool type_ignore, <S2SV_ModStart> orelse = orelse ; if ( type_ignore ) { PyErr_SetString ( PyExc_ValueError, ""field <S2SV_blank> type <S2SV_blank> is <S2SV_blank> required <S2SV_blank> for <S2SV_blank> AsyncFor"" ) ; return NULL ; } if (! type_ignore ) { PyErr_SetString ( PyExc_ValueError, ""field <S2SV_blank> type <S2SV_blank> is <S2SV_blank> required <S2SV_blank> for <S2SV_blank> AsyncFor"" ) ; return NULL ; } if (! iter ) { PyErr_SetString ( PyExc_ValueError, ""field <S2SV_blank> iter <S2SV_blank> is <S2SV_blank> required <S2SV_blank> for <S2SV_blank> AsyncFor"" ) ; return NULL ; } if (! type_ignore ) { PyErr_SetString ( PyExc_ValueError, ""field <S2SV_blank> type <S2SV_blank> is <S2SV_blank> required <S2SV_blank> for <S2SV_blank> AsyncFor"" ) ; return NULL ; } if (! type_ignore ) { PyErr_SetString ( PyExc_ValueError, ""field <S2SV_blank> type <S2SV_blank> is <S2SV_blank> required <S2SV_blank> for <S2SV_blank> AsyncFor"" ) ; return NULL ; } if (! type_ignore ) { PyErr_SetString ( PyExc_ValueError, ""field <S2SV_blank> type <S2SV_blank> is <S2SV_blank> required <S2SV_blank> for <S2SV_blank> AsyncFor"" ) ; return NULL ; }",0
553,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> mi_sort_index ( MI_CHECK <S2SV_ModStart> param, char <S2SV_ModEnd> * name ) <S2SV_ModStart> ""Can\'t <S2SV_blank> create <S2SV_blank> new <S2SV_blank> tempfile: <S2SV_blank> \'%s\'"", param -> temp_filename ) ; if ( ( new_file = mysql_file_create ( mi_key_file_datatmp, fn_format ( param -> temp_filename, """", INDEX_TMP_EXT, 2 + 4 + 32 ) ) ) <= 0 ) { mi_check_print_error ( param, ""Can\'t <S2SV_blank> create <S2SV_blank> new <S2SV_blank> tempfile: <S2SV_blank> \'%s\'"", param -> temp_filename ) ; DBUG_RETURN ( - 1 ) ; } if ( ( new_file = mysql_file_create ( mi_key_file_datatmp, fn_format ( param -> temp_filename, """", INDEX_TMP_EXT, 2 + 4 + 32 ) ) ) <= 0 ) { mi_check_print_error ( param, ""Can\'t <S2SV_blank> create <S2SV_blank> new <S2SV_blank> tempfile: <S2SV_blank> \'%s\'"", param -> temp_",0
554,<S2SV_ModStart> } opt = xchg <S2SV_ModEnd> ( & inet6_sk,0
555,"<S2SV_ModStart> ; case NGHTTP2_ERR_UNSUPPORTED_PROTOCOL : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> protocol"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION",0
556,"<S2SV_ModStart> UINT error ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""rdpei_recv_pdu: <S2SV_blank> too <S2SV_blank> short <S2SV_blank> eventId: <S2SV_blank> %"" PRIu16 "" <S2SV_blank> (%u) <S2SV_blank> length: <S2SV_blank> %"" PRIu32 """", eventId ) ; return error ; } <S2SV_ModStart> pduLength ) ; if ( Stream_GetRemainingLength ( s ) < pduLength ) { WLog_ERR ( TAG, ""rdpei_recv_pdu: <S2SV_blank> too <S2SV_blank> short <S2SV_blank> pduLength: <S2SV_blank> %"" PRIu32 """", pduLength ) ; return pduLength ; }",0
557,"<S2SV_ModStart> ; } } if ( pData -> socket ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s"", pData -> description ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; } else { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s"", pData -> description ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; } if ( pData -> socket ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s"", pData -> description ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; } else { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s"", pData -> description ) ; ABORT_FINALIZE ( RS",0
558,<S2SV_ModStart> ) ; struct ipv6_txoptions * opt <S2SV_ModStart> struct flowi6 fl6 ; if ( ipv6_addr_type ( & fl6. saddr ) & IPV6_ADDR_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
559,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
560,"<S2SV_ModStart>!= 0 ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart>!= 0 ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart>!= 0 ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } <S2SV_ModStart>!= 0 ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; <S2SV_ModStart>!= 0 ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart>!= 0 ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } <S2SV_ModStart>!= 0 ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; <S2SV_ModStart>!= 0 ) { quantum_info = DestroyQuant",0
561,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_failure ( rdpNego <S2SV_ModStart> ; WLog_DBG ( TAG <S2SV_ModEnd>, ""RDP_NEG_FAILURE"" ) <S2SV_ModStart> = NEGO_STATE_FAIL ; return TRUE ;",0
562,"<S2SV_ModStart>, result = RLC_OK <S2SV_ModEnd> ; bn_t t <S2SV_ModStart> ; RLC_TRY { bn_null ( t ) ; switch ( operation ) { case RSA_ENC : bn_zero ( m ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = k_len - 3 - m_len ; for ( int i = 0 ; i < * p_len ; i ++ ) { rand_bytes ( & pad, 1 ) ; } bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, 0 ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, 0 ) ; bn_lsh ( m, m, m_len * 8 ) ; result = RLC_OK <S2SV_ModEnd> ; break ; <S2SV_ModStart> case RSA_DEC : bn_zero ( m ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = m_len ; m_len -- ; bn_rsh ( t,",0
563,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
564,<S2SV_ModStart> { rq = <S2SV_ModEnd> hctx -> tags <S2SV_ModStart> hctx -> tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; if (,1
565,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
566,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> ++ j ) { if ( cm -> counts. switchable_interp [ j ] [ i ] < 0 ) return - 1 ; <S2SV_ModStart> ] += cm -> counts. <S2SV_ModEnd> switchable_interp [ j,0
567,"<S2SV_ModStart> { token ++ ; } if ( token [ 0 ] == '[' ) { token ++ ; } if (! strncmp ( token, ""lsl"", 3 ) ) { op -> operands_count ++ ; op -> operands [ operand ]. shift = ARM_LSL ; } else if (! strncmp ( token, ""asr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_ASR ; } if (! strncmp ( token, ""lsl"", 3 ) ) { op -> operands [ operand ]. shift = ARM_LSL ; } else if (! strncmp ( token, ""asr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_ASR ; } if (! strncmp ( token, ""asr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_ASR ; } if (! strncmp ( token, ""lsl"", 3 ) ) { op -> operands [ operand ]. shift = ARM_LSL ; } else if (! strncmp ( token, ""asr"", 3 ) ) { op ->",0
568,"<S2SV_ModStart> cpi ) { VP9_COMMON * const cm = & cpi -> td. cm ; <S2SV_ModStart> = 0 ; vpx_setup_src_planes <S2SV_ModEnd> ( x, <S2SV_ModStart> = 0 ; vpx_setup_pre_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vpx_setup_dst_planes ( xd, 0, get_frame_new_buffer ( cm ), 0, 0 ) ; vpx_setup_block_planes ( & x -> e_mbd, cm -> subsampling_x, cm -> subsampling_y ) ; xd -> mi [ 0 ] -> mbmi. mode = DC_PRED ; xd -> mi [ 0 ] -> mbmi. uv_mode = DC_PRED ; memset ( xd -> above_context [ 0 ], 0, sizeof ( * xd -> above_context [ 0 ] ) * 2 * aligned_mi_cols * MAX_MB_PLANE ) ; memset ( xd -> above_seg_context, 0, sizeof ( * xd -> above_seg_context ) * aligned_mi_cols",0
569,"<S2SV_ModStart> = htc_request_check_host_hdr ( sp ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" ) ; return ( retval ) ; } retval = http_splitline ( sp -> wrk, sp -> fd, hp, HTTP_HDR_REQ, HTTP_HDR_URL, HTTP_HDR_PROTO ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } retval = http_splitline ( sp -> wrk, sp -> fd, hp, HTTP_HDR_URL, HTTP_HDR_PROTO ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } http_ProtoVer ( hp ) ; retval = htc_request_check_host_hdr ( sp ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_Error, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" ) ; return ( retval ) ; }",0
570,"<S2SV_ModStart> ( image ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException",0
571,<S2SV_ModStart> len ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( tETH_HDR ) ),0
572,<S2SV_ModStart> ; ps_dec -> u2_cur_slice_num = i4_poc ; ps_dec -> <S2SV_ModStart> ; ps_dec -> <S2SV_ModEnd> u2_cur_slice_num = u2_frame_num <S2SV_ModStart> ; ps_dec -> <S2SV_ModEnd> u2_cur_slice_num = u2_frame_num <S2SV_ModStart> ; ps_dec -> <S2SV_ModEnd> u2_cur_slice_num = u2_frame_num <S2SV_ModStart> ; ps_dec -> <S2SV_ModEnd> u2_cur_slice_num = i4_poc <S2SV_ModStart> ; ps_dec -> <S2SV_ModEnd> u2_cur_slice_num = i4_poc <S2SV_ModStart> ps_cur_slice -> u2_cur_slice_num ; ps_dec -> <S2SV_ModEnd> u2_cur_slice_num = u2_frame_num <S2SV_ModStart> ; ps_dec -> <S2SV_ModEnd> u2_cur_slice_num = u2_frame_num <S2SV_ModStart> ; ps_dec -> <S2SV_ModEnd> u2_cur_slice_num = i4_poc <S2SV_ModStart> ; ps_dec -> <S2SV_ModEnd> u2_cur_slice_num = i4_poc,0
573,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> int data_size ) { <S2SV_ModEnd> struct mpt_ioctl_iocinfo * <S2SV_ModStart> * karg ; <S2SV_ModEnd> int iocnum ; <S2SV_ModStart> return PTR_ERR ( karg ) ; } if ( data_size > sizeof ( struct mpt_ioctl_iocinfo ) ) return - EINVAL ; karg = memdup_user ( uarg, data_size ) ; if ( karg ) { printk ( MYIOC_s_ERR_FMT ""%s@%d::mpt_ioctl_getiocinfo() <S2SV_blank> - <S2SV_blank> "" ""Structure <S2SV_blank> size <S2SV_blank> mismatch\\n"", __FILE__, __LINE__, karg -> hdr. maxDataSize ) ; kfree ( karg ) ; return - EINVAL ; } if ( ( ( iocnum = mpt_verify_adapter ( ioc -> iocnum, & ioc ) ) < 0 ) || ( ioc == NULL ) ) { printk ( MYIOC_s_ERR_FMT ""%s@%d::mpt_ioctl_getiocinfo() <S2SV_blank> - <S2SV_blank> """,0
574,"<S2SV_ModStart> left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",0
575,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
576,<S2SV_ModStart> * rq ) <S2SV_ModEnd> { int cpu <S2SV_ModStart> ; u64 irq_time ; if ( rq -> skip_clock_update ) return <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
577,"<S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv",0
578,<S2SV_ModStart> ; if ( TEST_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
579,"<S2SV_ModStart> == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank>",0
580,<S2SV_ModStart> flags ) { <S2SV_ModEnd> struct fscrypt_info * <S2SV_ModStart> 0 ; } <S2SV_ModEnd> spin_lock ( & <S2SV_ModStart> d_lock ) ; <S2SV_ModEnd> dir_has_key = ( <S2SV_ModStart> dir_has_key = ( d_inode ( dir ) -> i_crypt_info <S2SV_ModEnd>!= NULL ),0
581,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> unbind_ports ( void <S2SV_ModStart> ; CRYPTO_THREAD_write_lock ( stunnel_locks [ LOCK_SECTIONS ] ) ; for ( opt = service_options. next ; opt ; opt = opt -> next ) { unsigned i ; SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; s_log ( LOG_DEBUG, ""Unbinding <S2SV_blank> service <S2SV_blank> [%s]"", opt -> servname ) ; for ( i = 0 ; i < opt -> local_addr. num ; ++ i ) unbind_port ( opt, i ) ; if ( opt -> exec_name && opt -> connect_addr. names ) { opt -> option. retry = 0 ; } } if ( opt -> ctx ) SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; s_log ( LOG_DEBUG, ""Service <S2SV_blank> [%s] <S2SV_blank> closed"", opt -> servname ) ; service_free ( & service_options )",0
582,<S2SV_ModStart> parent ) ; if (! i -> width ||! i -> height ) return - 1 ; <S2SV_ModStart> ; context. curX = i -> posX ; context. curY = i -> posY ; # ifdef NGIFLIB_ENABLE_CALLBACKS context. line_p. p32 = i -> parent -> frbuff. p32 + ( u32 ) i -> posY * i -> parent -> width ; context. line_p. p32 = i -> parent -> frbuff. p32 + ( u32 ) i -> posX ; # else context. line_p. p32 = i -> parent -> frbuff. p32 + ( u32 ) i -> posY * i -> parent -> width ; context. line_p. p32 = i -> parent -> frbuff. p32 + ( u32 ) i -> posY * i -> parent -> width ; context. line_p. p32 = i -> parent -> frbuff. p32 + ( u32 ) i -> posX ; # else context. line_p. p32 = i -> parent -> frbuff. p32 + ( u32 ) i -> posY * i -> parent -> width ; context. line_,0
583,"<S2SV_ModStart> ; RAnalOp next_op ; if ( len < 2 ) { avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; } else if ( len < 2 ) { avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; } else if ( len < 2 ) { avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; avr_op_fini ( & next_op. esil ) ; } else if ( len < 2 ) { avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu",0
584,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> ) break ; case 2 : break ; case 3 : break ; case 4 : break ; default : ThrowDCMException ( CorruptImageError, ""ImproperImageHeader"" ) ; break ; case 5 : ThrowDCMException ( CorruptImageError, ""ImproperImageHeader"" ) ; break ; case 6 : ThrowDCMException ( CorruptImageError, ""ImproperImageHeader"" ) ; break ; case 8 : ThrowDCMException ( CorruptImageError, ""ImproperImageHeader"" ) ; break ; default : ThrowDCMException ( CorruptImageError, ""ImproperImageHeader"" ) ; break ; default : ThrowDCMException ( CorruptImageError, ""ImproperImageHeader"" ) ; break ; case 6 : Throw",0
585,"<S2SV_ModStart> void ) { if ( strchr ( mnemonic, '\\0' ) ) { mnemonic [ strlen ( mnemonic ) - 1 ] = '\\0' ; } if ( strchr ( mnemonic, '\\0' ) ) { mnemonic [ strlen ( mnemonic ) - 1 ] = '\\0' ; } if ( strchr ( mnemonic, '\\0' ) ) { mnemonic [ strlen ( mnemonic ) - 1 ] = '\\0' ; } if ( strlen ( mnemonic ) > 0 ) { mnemonic [ strlen ( mnemonic ) - 1 ] = '\\0' ; } if ( strlen ( mnemonic ) > 0 ) { mnemonic [ strlen ( mnemonic ) - 1 ] == '\\0' ) { mnemonic [ strlen ( mnemonic ) - 1 ] = '\\0' ; } if ( strchr ( mnemonic, '\\0' ) ) { mnemonic [ strlen ( mnemonic ) - 1 ] = '\\0' ; } if ( strlen ( mnemonic ) > 0 ) { mnemonic [ strlen ( mnemonic ) - 1 ] == '\\0' ) { mnemonic [ strlen ( mnemonic ) - 1 ] = '\\0' ; }",0
586,"<S2SV_ModStart> ( interface, ENC624J600_EHT0 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT0 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ;",0
587,"<S2SV_ModStart> == MagickFalse ) { image = DestroyImageList ( image ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; goto error ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { image = DestroyImageList ( image ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; goto error ; } count = ReadBlob ( image, sizeof ( pdb_image. columns ), ( unsigned char * ) pdb_image. columns ) ; if ( count!= sizeof ( pdb_image. columns ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; goto error ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { image = DestroyImageList ( image ) ; goto error ; } count = ReadBlob ( image, sizeof ( pdb_image. columns ), ( unsigned char * ) pdb_image. columns ) ; if ( count!= sizeof ( pdb_image. columns ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; error :",0
588,"<S2SV_ModStart> ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" ) ; if ( l == 0 ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" ) ; goto error ; } if ( l == 0 ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" ) ; goto error ; } if ( l == 0 ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" ) ; goto error ; } if ( l == 0 ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" ) ; goto error ; } if ( l == 0 ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" ) ; goto error ; } if ( l == 0 ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" ) ; goto error ; } if ( l == 0 ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" ) ; goto error ; }",0
589,"<S2SV_ModStart> { WORD32 i ; WORD32 st_rps_idx ; WORD32 ai4_num_total_curr, u4_num_neg_curr, u4_num_pos_curr, u4_num_total_curr, ai4_num_st_curr_before, u4_num_st_curr_after, u4_num_lt_curr, u4_num_total_curr, ai4_num_st_curr_before, ai4_num_st_curr_after, u4_num_st_curr_after, u4_num_lt_curr, u4_num_total_curr, u4_num_total_curr, ai4_num_st_curr_before, u4_num_st_curr_after, u4_num_st_curr_after, u4_num_lt_curr, u4_num_total_curr, ai4_num_st_curr_after, u4_num_st_curr_before, u4_num_st_curr_after, u4_num_lt_curr, u4_num_total_curr",0
590,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> char * print_object <S2SV_ModStart> ( child ) { ++ numentries ; child = child -> next ; } if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) ) return 0 ; if (! ( names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) ) return 0 ; memset ( names, 0, sizeof ( char * ) * numentries ; memset ( names, 0, sizeof ( char * ) * numentries ) ; memset ( names, 0, sizeof ( char * ) ) ; memset ( names, 0, sizeof ( char * )",0
591,"<S2SV_ModStart> int tagval, uint32 <S2SV_ModEnd> * length )",1
592,"<S2SV_ModStart> ( sk ) ; if ( writable ) { <S2SV_ModStart> = 0 ; } <S2SV_ModStart> if ( unix_recvq_full ( sk ) ) writable = 0 ; } else { if ( unix_peer ( sk )!= sk ) { sock_poll_wait ( file, & unix_sk ( other ) -> peer_wait, wait ) ; writable = 0 ; } } if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; return mask ; } if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; return mask <S2SV_ModEnd> ; } <S2SV_null>",0
593,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sendClean ( outputbuffer ) ;",1
594,<S2SV_ModStart> void exit_io_context ( struct task_struct * task <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; task_lock ( task <S2SV_ModEnd> ) ; ioc <S2SV_ModStart> ; ioc = task <S2SV_ModEnd> -> io_context ; <S2SV_ModStart> -> io_context ; task <S2SV_ModEnd> -> io_context = <S2SV_ModStart> ; task_unlock ( task <S2SV_ModEnd> ) ; if,1
595,"<S2SV_ModStart> = 0 ; unsigned long cp0 ; unsigned long cp1 ; unsigned long cp2 ; ret = __copy_from_user ( & cp0, & cp1, sizeof ( cp0 ) ) ; ret |= __copy_from_user ( & cp2, & cp1, sizeof ( cp2 ) ) ; ret |= __copy_from_user ( & cp3, & cp4, sizeof ( cp3 ) ) ; ret |= __copy_from_user ( & cp1, & cp2, sizeof ( cp1 ) ) ; ret |= __copy_from_user ( & cp2, & cp3, sizeof ( cp1 ) ) ; ret |= __copy_from_user ( & cp1, & cp2, sizeof ( cp1 ) ) ; ret |= __copy_from_user ( & cp2, & cp3, sizeof ( cp2 ) ) ; ret |= __copy_from_user ( & cp3, & cp1, sizeof ( cp3 ) ) ;",0
596,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> * minor_status = <S2SV_ModStart> ; return GSS_S_DEFECTIVE_TOKEN ; } if ( header -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_,0
597,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { vpx_ref_frame_t * frame ; if ( ctx -> frame_workers == NULL ) { return VPX_CODEC_INCAPABLE ; } frame = ( vp9_ref_frame_t * ) ctx -> frame_workers ; } else { frame = ( vp9_ref_frame_t * ) ctx -> frame_workers ; } if ( frame!= NULL ) { YV12_BUFFER_CONFIG * fb ; vp9_get_reference_enc ( ctx -> cpi, frame -> idx, & fb ) ; yuvconfig2image ( & frame -> img, fb, NULL ) ; return VPX_CODEC_OK ; } else if ( frame!= NULL ) { YV12_BUFFER_CONFIG * fb ; vp9_get_reference_enc ( ctx -> cpi, frame -> idx, & fb ) ; yuvconfig2image ( & frame -> img, fb, NULL ) ; return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
598,"<S2SV_ModStart> & plug ) ; if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) { pr_debug ( ""EINVAL: <S2SV_blank> io_submit: <S2SV_blank> access <S2SV_blank> denied\\n"" ) ; return - EINVAL ; }",0
599,"<S2SV_ModStart> * info, my_bool <S2SV_ModEnd> rep_quick ) { <S2SV_ModStart>! rep_quick && init_io_cache ( & info -> read_cache, info -> dfile, ( uint ) param -> read_buffer_length, READ_CACHE, share -> pack. header_length, MYF ( MY_WME ) ) || (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, READ_CACHE, share -> pack. header_length, 1, MYF ( MY_WME ) ) ) || (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, WRITE_CACHE, share -> pack. header_length, 1, MYF ( MY_WME ) ) ) || (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, WRITE_CACHE, share -> pack. header_length, 1, MYF ( MY_WME ) ) )",0
600,"<S2SV_ModStart> } ; # if uECC_VLI_NATIVE_LITTLE_ENDIAN <S2SV_ModEnd> uECC_word_t * p <S2SV_ModStart> curve ) ; if (! g_rng_function ) { uECC_vli_clear ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! uECC_generate_random_int ( tmp, num_n_words ) ) { return 0 ; } uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_v",0
601,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|dao-truncated]"" ) ) ; return ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
602,"<S2SV_ModStart> ; } else { uint32_t new_free_total = pool -> free_total * 2 ; void * new_arr = pool -> free_arr ; if ( new_arr ) { pool -> free_total = new_free_total * sizeof ( nw_buf * ) ; new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ) ) ; pool -> free_arr = new_arr ; } } else { free ( buf ) ; }",0
603,"<S2SV_ModStart> tp ) { const <S2SV_ModEnd> char hex [ <S2SV_ModStart> = ""00112233445566778899aAbBcCdDeEfF"" ; <S2SV_ModEnd> const char * <S2SV_ModStart> = ""00112233445566778899aAbBcCdDeEfF"" ; <S2SV_ModEnd> const char * <S2SV_ModStart> = ""00112233445566778899aAbBcCdDeEfF"" ; <S2SV_ModEnd> const char * <S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( * <S2SV_ModStart> == 'x' || * cp == 'X' ) for ( ++ cp ; * cp && ( index ( hex, * cp ) ) && ( dcount ++ < <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> else if ( * cp == 'o' || * cp == 'O' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp - '0' ) ; else for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 10 ) + ( * cp - '0'",0
604,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
605,"<S2SV_ModStart> * lined ; l_uint32 pixc, * pixm, * pixg, * pixd ; PROCNAME ( ""pixFewColorsOctcubeQuantMixed"" ) ; if (! pixs || pixGetDepth ( pixs )!= 8 ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; if ( <S2SV_ModStart> ( pixc = pixFewColorsOctcubeQuant1 ( pixs, level ) ) == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; pixm = pixGetColormap ( pixc ) ; pixg = pixGetColormap ( pixg ) ; pixgd = pixGetColormap ( pixg ) ; ncolors = pixcmapGetCount ( cmap ) ; cmapd = pixcmapCreate ( ncolors ) ; for ( i = 0 ; i < ncolors ; i ++ ) for ( j = 0 ; j < w ; j ++ ) for ( j = 0 ; j < h ; j ++ ) for ( j = 0 ; j < w ; j ++ ) for ( j",0
606,<S2SV_ModStart> = 256 ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { v_fn_ptr. vf = vp8_mse16x16 ; } else { v_fn_ptr. vf = vp8_mse16x16 ; } # elif CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( cpi -> cur_buf -> flags & YV12_FLAG,0
607,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
608,"<S2SV_ModStart> int idx ; unsigned int count ; <S2SV_ModStart> ; err = - EINVAL ; if ( kcontrol -> count > UINT_MAX / kcontrol -> count ) goto error ; count = kcontrol -> count ; <S2SV_ModStart> -> count ; for ( idx = 0 ; idx < count ; idx ++, id. index ++, id. numid ++ ) snd_ctl_notify ( card, SNDRV_CTL_EVENT_MASK_ADD, & id ) ; for ( idx = 0 ; idx < kcontrol -> count ; idx ++, id. index ++, id. numid ++ ) snd_ctl_notify ( card, SNDRV_CTL_EVENT_MASK_ADD, & id ) ;",0
609,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> size = overhead <S2SV_ModStart> = overhead ; if ( ( size = bson_size ( bsons [ 0 ] ) ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; },0
610,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_response ( rdpNego <S2SV_ModStart> = NEGO_STATE_FAIL ; return FALSE ;,0
611,"<S2SV_ModStart> int i, bits_per_mb_at_this_q <S2SV_ModEnd> ; const double <S2SV_ModStart> ; do { bits_per_mb_at_this_q <S2SV_ModEnd> = ( int <S2SV_ModStart> int bits_per_mb_at_this_q = ( int ) vp9_rc_bits_per_mb ( cm -> frame_type, i, correction_factor ) ; if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; break ; } else if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { if ( ( target_bits_per_mb - bits_per_mb_at_this_q ) <= last_error ) last_error = bits_per_mb_at_this_q - target_bits_per_mb ; break ; } else { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; } }",0
612,<S2SV_ModStart> value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
613,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
614,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart
615,"<S2SV_ModStart>, PREDICTION_MODE mode, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> TX_SIZE tx_size, int up_available, int left_available, int right_available, int plane ) { int i ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, left_col, 64 ) ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, above_data, 128 + 16 ) ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, above_row, 128 + 16 ) ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, above_row, 128 + 16 ) ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, frame_width, frame_height ) ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, above_row, 128 + 16 ) ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, above_row, 128 + 16 ) ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, above_row, 128 + 16 ) ; uint8_t * const",0
616,"<S2SV_ModStart> ++ ; } else { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> pattern\\n"" ) ; goto error ; } } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> pattern\\n"" )",0
617,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ;,1
618,"<S2SV_ModStart> BUG ( ) ; if (! thresholds -> primary ) { mutex_unlock ( & memcg -> thresholds_lock ) ; return ; } <S2SV_ModStart> ) ; mutex_unlock ( & memcg -> thresholds_lock ) ; return ; } <S2SV_ModEnd> usage = mem_cgroup_usage <S2SV_ModStart> ( memcg, type == _MEM ) ; __mem_cgroup_threshold ( memcg, type == _MEMSWAP ) ; size = 0 ; for ( i = 0 ; i < thresholds -> primary -> size ; i ++ ) { if ( thresholds -> entries [ i ]. eventfd!= eventfd ) size ++ ; } new = thresholds -> spare ; if (! size ) { kfree ( new ) ; new = NULL ; goto swap_buffers ; }",0
619,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct ion_handle * <S2SV_ModStart> ; handle = ion_handle_get_by_id_nolock ( client, id <S2SV_ModEnd> ) ; mutex_unlock <S2SV_ModStart> ; return handle <S2SV_ModEnd> ; } <S2SV_null>",1
620,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 2 ) ; write_profile <S2SV_ModEnd> ( cm -> <S2SV_ModStart> cm -> profile, wb ) ; vpx_wb_write_bit ( wb, 0 ) ; vpx_wb_write_bit ( wb, cm -> frame_type ) ; vpx_wb_write_bit ( wb, cm -> show_frame ) ; vpx_wb_write_bit ( wb, cm -> error_resilient_mode ) ; if ( cm -> frame_type == KEY_FRAME ) { const COLOR_SPACE cs = UNKNOWN ; write_sync_code ( wb ) ; if ( cm -> profile > PROFILE_1 ) { assert ( cm -> bit_depth > BITS_8 ) ; vp9_wb_write_bit ( wb, cm -> bit_depth - BITS_10 ) ; } vp9_wb_write_literal ( wb, cs, 3 ) ; if ( cs!= SRGB ) { assert ( cm -> profile >= PROFILE_1 ) ; vpx_wb_write_bit ( wb, 0 ) ;",0
621,"<S2SV_ModStart> 'g' }, { ""no-legend"", no_argument, 0, 'H' }, { ""no-minor"", no_argument, 0, 'I' }, { ""only-graph"", no_argument, 0, 'J' }, { ""units-length"", no_argument, 0, 'L' }, { ""lower-limit"", no_argument, 0, 'L' }, { ""upper-limit"", no_argument, 0, 'L' }, { ""no-legend"", no_argument, 0, 'G' }, { ""no-minor"", no_argument, 0, 'J' }, { ""only-graph"", no_argument, 0, 'J' }, { ""units-length"", no_argument, 0, 'L' }, { ""lower-limit"", no_argument, 0, 'L' }, { ""upper-limit"", no_argument, 0, 'L' }, { ""units-length"", no_argument, 0, 'L' }, { ""units-length"", no_argument, 0, '",0
622,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
623,"<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i + 1 ) ) == COMMA ) i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case DOUBLESTAR : if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i + 1 ) ) == COMMA ) i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto",0
624,"<S2SV_ModStart> KEY_FRAME ) { memcpy <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ; memset ( xd -> ref_lf_deltas, 0, sizeof ( xd -> ref_lf_deltas ) ) ; memset ( xd -> mode_lf_deltas, 0, sizeof ( xd -> mode_lf_deltas ) ) ; pc -> refresh_golden_frame = 1 ; pc -> copy_buffer_to_gf = 0 ; pc -> copy_buffer_to_arf = 0 ; pc -> ref_frame_sign_bias [ GOLDEN_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ ALTREF_FRAME ] = 0 ; pc -> copy_buffer_to_gf = 0 ; pc -> copy_buffer_to_arf = 0 ; pc -> ref_frame_sign_bias [ GOLDEN_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ ALTREF_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ GOLDEN_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ GOLDREF_FRAME ] = 0",0
625,"<S2SV_ModStart> error ; uint16_t nextPacket <S2SV_ModEnd> ; uint32_t status <S2SV_ModStart> ( interface, ENC624J600_ESTAT <S2SV_ModEnd> ) & ESTAT_PKTCNT <S2SV_ModStart> ( interface, ENC624J600_ESTAT <S2SV_ModEnd> ) & ESTAT_PKTCNT <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & n, sizeof ( uint16_t ) ) ; n = letoh16 ( n ) ; status = letoh32 ( status ) ; if ( ( status & ENC624J600_RSV_RECEIVED_OK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL, ENC624J600_RX_BUFFER_START <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL, ENC624J600_RX_BUFFER_STOP <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J",0
626,"<S2SV_ModStart> == 0x01 ) { if ( i >= gemsafe_cert_max ) { r = gemsafe_set_cert_len ( card, gemsafe_cert_max, i ) ; if ( r < 0 ) return SC_ERROR_INTERNAL ; } <S2SV_ModStart> == 0x01 ) { if ( i >= gemsafe_cert_max ) { r = gemsafe_set_cert_len ( card, gemsafe_cert_max, i ) ; if ( r < 0 ) return SC_ERROR_INTERNAL ; } if ( i >= gemsafe_cert_max ) { r = gemsafe_set_cert_len ( card, gemsafe_cert_max, i ) ; if ( r < 0 ) return SC_ERROR_INTERNAL ; } <S2SV_ModStart> == 0x01 ) { if ( i >= gemsafe_cert_max ) { r = gemsafe_set_cert_len ( card, gemsafe_cert_max, i ) ; if ( r < 0 ) return SC_ERROR_INTERNAL ; } if ( i >= gemsafe_cert_max ) { r = gemsafe_set_cert_len ( card, gemsafe_cert_max, i ) ; if (",0
627,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
628,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv, VALUE klass ) { VALUE content ; VALUE parse_options ; xmlSchemaParserCtxtPtr ctx <S2SV_ModEnd> ; xmlSchemaPtr schema <S2SV_ModStart> ; xmlSchemaParserCtxtPtr ctx <S2SV_ModEnd> ; xmlSchemaPtr schema <S2SV_ModStart> ; xmlSchemaParserCtxtPtr ctx <S2SV_ModEnd> ; VALUE rb_schema <S2SV_ModStart> errors ) ; parse_options = rb_const_get ( rb_const_get ( rb_const_get ( mNokogiriXml, rb_const_get ( mNokogiriXml, rb_const_get ( mNokogiriXml, rb_const_get ( mNokogiriXml, rb_const_get ( mNokogiriXml, rb_const_get ( mNokogiriXml, rb_const_get ( mNokogiriXml, rb_const_get ( mNokogiriXml, rb_const_get ( mNokogiriXml, rb_const_get ( mNokogiriXml, rb_const_get ( mNokogiriXml, rb_const_get ( mNokogiriXml, rb_const_get ( mNokogiriXml",0
629,"<S2SV_ModStart> ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> number"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( line_text ) < CONFLINELEN ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> name"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( line_text ) < CONFLINELEN ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> name"" ) ; print_syntax ( ) ; return 1 ; }",0
630,<S2SV_ModStart> / 2 ] ; out [ 3 ] = <S2SV_ModStart> / 2 ] ; out [ 5 ] = <S2SV_ModStart> / 2 ] ; out [ 3 ] = <S2SV_ModStart> / 2 ] ; out [ 6 ] = <S2SV_ModStart> / 2 ] ; out [ 7 ] = <S2SV_ModStart> / 2 ] ; out [ 8 ] = <S2SV_ModStart> / 2 ] ; out [ 9 ] = <S2SV_ModStart> / 2 ] ; out [ 10 ] = <S2SV_ModStart> / 2 ] ; out [ 11 ] = <S2SV_ModStart> / 2 ] ; out [ 12 ] = ptr [ ( x + state -> xsize ) / 2 ] ; out [ 13 ] = ptr [ ( x + state -> xsize ) / 2 ] ; out [ 14 ] = <S2SV_ModStart> / 2 ] ; out [ 15 ] = <S2SV_ModStart> / 2 ] ; out [ 15 ] = <S2SV_ModStart> / 2 ] ; out [ 13 ] = <S2SV_ModStart> / 2 ] ; out [ 14 ] = <S2SV_ModStart> / 2 ] ; out [ 12 ] = <S2SV_ModStart> / 2 ] ; out [ 13 ] = <S2SV_ModStart> / 2 ] ; out [ 13 ] = ptr [ ( x + state -> xsize ) / 2 ] ; out [ 14 ] = ptr [ ( x + state -> xsize ) / 2 ] ; out [ 14 ] = <S2SV_ModStart> / 2 ] ; out [ 15,0
631,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
632,"<S2SV_ModStart> err = - EBUSY <S2SV_ModEnd> ; if ( <S2SV_ModStart> goto out ; } if ( type == PACKET_FANOUT_HASH ) { err = - ENOMEM ; rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if (! rollover ) goto out ; atomic_long_set ( & rollover -> num, 0 ) ; atomic_long_set ( & rollover -> num_huge, 0 ) ; } else if ( type == PACKET_FANOUT_CPU ) { err = - ENOMEM ; rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if (! rollover ) goto out ; atomic_long_set ( & rollover -> num_failed, 0 ) ; po -> rollover = rollover ; }",0
633,<S2SV_ModStart> POLL_IN ) ; <S2SV_ModEnd> perf_event_wakeup ( handle <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
634,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int utf8s_to_utf16s ( const u8 * s, int len, wchar_t <S2SV_ModEnd> * pwcs ) <S2SV_ModStart> - EINVAL ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( u & SURROGATE_BITS",0
635,"<S2SV_ModStart> EPROTONOSUPPORT ) { <S2SV_ModEnd> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure""",0
636,"<S2SV_ModStart> ; status = ksz8851ReadReg ( interface, KSZ8851_RXFHSR ) ; if ( ( status & ( RXFHSR_RXFV | RXFHSR_RXFV ) )!= 0 ) { if ( ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE ) ) == 0 ) { if ( ( status & ( RXFHSR_RXMR | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXRF | KSZ8851_RXFHSR_RXCE ) ) == 0 ) { if ( ( status & ( RXFHSR_RXFV | RXFHSR_RXFV ) ) == 0 ) { ksz8851WriteReg ( interface, KSZ8851_RXFDPR, RXFDPR_RXFPAI ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, RXQCR",0
637,"<S2SV_ModStart> const node * n, const asdl_seq * decorator_seq, bool <S2SV_ModEnd> is_async ) { <S2SV_ModStart> is_async ) { identifier name ; arguments_ty args ; expr_ty returns = NULL ; string type_comment = NULL ; if ( TYPE ( CHILD ( n, name_i + 1 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 2 ) ) ; if (! type_comment ) return NULL ; name = NEW_IDENTIFIER ( CHILD ( n, name_i + 1 ) ) ; if (! name ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 2 ), 0 ) ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 3 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 3 ) ) ; body = ast_for_suite ( c, CHILD ( n, name_i + 3 ) ) ; if (! body ) return NULL ; if (! type_comment && NCH ( CHILD ( n, name_i +",0
638,"<S2SV_ModStart> ; pgd = pgd_offset_min ( mm, 0xA0000 ) ; if ( pgd_none_or_clear_bad ( pgd ) ) goto out ; pud = pud_offset ( pgd, 0xA0000 ) ; if ( pud_none_or_clear_bad ( pud ) ) goto out ; pmd = pmd_offset ( pmd, 0xA0000 ) ; if ( pmd_none_or_clear_bad ( pmd ) ) goto out ; pte = pte_offset_map_lock ( mm, pmd, 0xA0000, & ptl ) ; for ( i = 0 ; i < 32 ; i ++ ) set_pte ( pte, pte_wrprotect ( * pte ) ) ; pte ++ ;",0
639,"<S2SV_ModStart> ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( handle, * packet_data_pptr, packet_len, dst_coap_msg_ptr -> token_ptr ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( handle, * packet_data_pptr, packet_len, dst_coap_msg_ptr -> token_ptr ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( handle, * packet_data_pptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> -",0
640,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits <S2SV_ModStart> ) ; } \\\n} <S2SV_ModEnd> IndexPacket index ; <S2SV_ModStart> ) ; } \\\n} <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
641,"<S2SV_ModStart> ""Unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> stack <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; return - 1 ; } if (! is_valid_test_name ( test_name ) ) { printf ( ""Error: <S2SV_blank> invalid <S2SV_blank> test <S2SV_blank> name.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; } for ( const char * name = config_section_name ( config ) ; name!= config_section_end ( config ) ; node = config_section_next ( config ) ) { const char * name = config_section_name ( config ) ; if (! is_valid_test_name ( name ) ) { printf ( ""Error: <S2SV_blank> invalid <S2SV_blank> test <S2SV_blank> name.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; } for ( const char * name = config_section_name ( config ) ; name!= config_section_end ( config ) ; name = config_section_name ( config ) ) { const char * name = config_section_name ( config ) ; if (! is_valid_test_name ( name ) ) { printf ( ""Error: <S2SV_blank> invalid <S2SV_blank> test <S2SV_blank> name.\\",0
642,"<S2SV_ModStart> 0 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD if ( ( RAW ( row, col ) = pred [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; # else for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD if ( ( RAW ( row, col ) = pred [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; # else for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ )",0
643,<S2SV_ModStart> ; if (! nl ) { WARN_ON (! ( param -> flags & DM_BUFFER_FULL_FLAG ) ) ; <S2SV_ModStart> len < needed ) { WARN_ON (! ( param -> flags & DM_BUFFER_FULL_FLAG ) ) ; goto out ; } <S2SV_ModEnd> nl -> dev,0
644,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;",0
645,<S2SV_ModStart> bfqq ) bfq_idle_slice_timer_body <S2SV_ModEnd> ( bfqq ),0
646,<S2SV_ModStart> += 1 ; if ( orderInfo -> orderType >= ARRAY_SIZE ( PRIMARY_DRAWING_ORDER_FIELD_BYTES ) ) return - 1 ; <S2SV_ModStart> orderInfo -> orderType ] ; if ( orderInfo -> orderType >= ARRAY_SIZE ( PRIMARY_DRAWING_ORDER_FIELD_BYTES ) ) return - 1,0
647,<S2SV_ModStart>! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) <S2SV_ModStart>! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) ) { if (! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( old_type ) ) { if (! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) ) { if (! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) ) { if (! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) ) { if (! OVL_TYPE_UPPER ( old_type ) ),0
648,"<S2SV_ModStart> int plane ; switch ( bsize ) { case BLOCK_SIZE_8X8 : vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case BLOCK_SIZE_10X8 : vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case BLOCK_SIZE_12X8 : vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case BLOCK_SIZE_8X8 : vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case BLOCK_SIZE_10X8 : vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case BLOCK_SIZE_12X8 : vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case BLOCK_SIZE_8X8 : vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case BLOCK_SIZE_10",0
649,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nonrd_pick_sb_modes ( VP9_COMP <S2SV_ModStart> cpi, const TileInfo * tile_info, MACROBLOCK * const x, <S2SV_ModStart> x -> e_mbd ; # if CONFIG_VP9_HIGHBITDEPTH switch ( bsize ) { case BLOCK_SIZE_8X8 : xd -> mi [ 0 ] -> mbmi. sb_type = BLOCK_SIZE_8X8 ; break ; case BLOCK_SIZE_8X8 : xd -> mi [ 0 ] -> mbmi. sb_type = BLOCK_SIZE_8X8 ; break ; case BLOCK_SIZE_8X8 : xd -> mi [ 0 ] -> mbmi. sb_type = BLOCK_SIZE_8X8 ; # if CONFIG_VP9_HIGHBITDEPTH switch ( bsize ) { case BLOCK_SIZE_8X8 : xd -> mi [ 0 ] -> mbmi. sb_type = BLOCK_SIZE_8X8 ; break ; case BLOCK_SIZE_8X8 : xd -> mi [ 0 ] -> mbmi. sb_type = BLOCK_SIZE_8X8 ; break ;",0
650,"<S2SV_ModStart> = NULL ; if ( reader. all == NULL ) { reader. all = getenv ( ""MYSOFA_HRTF_ALL"" ) ; reader. all = getenv ( ""MYSOFA_HRTF_ALL"" ) ; } else if ( reader. all == NULL ) { reader. all = getenv ( ""MYSOFA_HRTF_ALL"" ) ; }",0
651,"<S2SV_ModStart> -> rows ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> -> rows ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> -> rows ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> -> columns ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> -> rows ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> -> rows ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" )",0
652,<S2SV_ModStart> = malloc ( <S2SV_ModEnd> sizeof ( MappedRange,0
653,<S2SV_ModStart> return fa ; if ( be16_to_cpu ( dip -> di_namelen ) > mp -> m_sb. sb_inodesize ) return fa ; if ( be32_to_cpu ( dip -> di_nlink ) > mp -> m_sb. sb_inodesize || be16_to_cpu ( dip -> di_nlink ) > mp -> m_sb. sb_inodesize ) return fa ; if ( be16_to_cpu ( dip -> di_nlink ) > mp -> m_sb. sb_inodesize ) return fa ; if ( mode && be32_to_cpu ( dip -> di_nextents ) + be16_to_cpu ( dip -> di_anextents ) > be64_to_cpu ( dip -> di_nblocks ) ) return fa ; if ( mode && be32_to_cpu ( dip -> di_nextents ) > be64_to_cpu ( dip -> di_anextents ) ) return fa ; if ( be16_to_cpu ( dip -> di_anextents ) > be64_to_cpu ( dip -> di_nblocks ) ) return fa,0
654,"<S2SV_ModStart> ; if ( ( flags & VP8_EFLAG_NO_UPD_GF ) && ( flags & VP8_EFLAG_FORCE_GF ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( ( flags & VP8_EFLAG_NO_UPD_ARF ) && ( flags & VP8_EFLAG_FORCE_ARF ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_",0
655,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;",0
656,"<S2SV_ModStart> event ) ; rcu_read_lock ( ) ; <S2SV_ModStart> - EINVAL ; } if ( hlist_unhashed ( head ) ) { WARN_ON_ONCE ( swhash -> online ) ; return - EINVAL ; } hlist_add_head_rcu ( & event -> hlist_entry, head ) ; perf_event_update_userpage ( event ) ; head = find_swevent_head ( swhash, event ) ; if (! head ) { WARN_ON_ONCE ( swhash -> online ) ; return - EINVAL ; } head = find_swevent_head ( swhash, event ) ; if (! head ) { WARN_ON_ONCE ( swhash -> online ) ; return - EINVAL ; } head = find_swevent_head ( swhash, event ) ; head = find_swevent_head ( swhash, event ) ; if (! head ) { WARN_ON_ONCE ( swhash -> online ) ; return - EINVAL ; } head = find_swevent_head ( swhash, event ) ; if (! head ) { WARN_ON_",0
657,"<S2SV_ModStart> * ndo, const u_char * p, u_int len ) { if ( len < 1 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_IPV4_ADDRESS : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_IPV6_ADDRESS : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_IPV6_ADDRESS : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_IPV4_ADDRESS : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_IPV6_ADDRESS : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_IPV6_ADDRESS : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len",0
658,"<S2SV_ModStart> ""<table <S2SV_blank> id=\'status-table\'><tr>"" ""<th <S2SV_blank> width=\'40%%\'>Parameter</th>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""</th>"" ""</tr>""",0
659,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
660,"<S2SV_ModStart> ""uniswap <S2SV_blank> liquidity"" ; } else if ( isAddLiquidityEthCall ( msg ) ) { arStr = ""add <S2SV_blank> liquidity"" ; } else if ( isRemoveLiquidityEthCall ( msg ) ) { arStr = ""remove <S2SV_blank> liquidity"" ; } else if ( isAddLiquidityEthCall ( msg ) ) { arStr = ""add <S2SV_blank> liquidity"" ; } else if ( isAddLiquidityEthCall ( msg ) ) { arStr = ""add <S2SV_blank> liquidity"" ; } else if ( isAddLiquidityEthCall ( msg ) ) { arStr = ""add <S2SV_blank> liquidity"" ; } else if ( isRemoveLiquidityEthCall ( msg ) ) { arStr = ""remove <S2SV_blank> liquidity"" ; } else if ( isAddLiquidityEthCall ( msg ) ) { arStr = ""add <S2SV_blank> liquidity"" ; } else if ( isAddLiquidityEthCall ( msg ) ) { arStr = ""add <S2SV_blank> liquidity"" ; } else if ( isAddLiquidityEthCall ( msg ) ) { ar",0
661,"<S2SV_ModStart> < USB_MAXINTERFACES ) { dev_err ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"" <S2SV_ModEnd>, cfgno, <S2SV_ModStart> < USB_MAXINTERFACES ) { dev_err ( ddev, ""config <S2SV_blank> %d <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> excess <S2SV_blank> "" ""byte%s, <S2SV_blank> ignoring\\n"" <S2SV_ModEnd>, cfgno, <S2SV_ModStart> < USB_MAXINTERFACES ) { dev_err ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"" <S2SV_ModEnd>, cfgno, <S2SV_ModStart> < USB_MAXINTERFACES ) { dev_err ( ddev, ""config <S2SV_blank> %d <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> excess <S2SV_blank> "" ""byte%s, <S2SV_blank> ignoring\\n"" <S2SV_ModEnd>, cfgno, <S2SV_ModStart> < USB_MAXINTERFACES ) { dev_err ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> using <S2SV_blank> maximum <S2SV_blank>",0
662,"<S2SV_ModStart> ; if ( info -> count < 1 ) return - EINVAL ; access = info -> access == 0? SNDRV_CTL_ELEM_ACCESS_READWRITE : ( info -> access & ( SNDRV_CTL_ELEM_ACCESS_READWRITE | SNDRV_CTL_ELEM_ACCESS_INACTIVE | SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ) ) ; info -> id. numid = 0 ; memset ( & kctl, 0, sizeof ( kctl ) ) ;",0
663,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
664,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; random_ether_addr (,1
665,"<S2SV_ModStart> 16 ) ; if ( xd -> mode_info_context -> mbmi. mode == DC_PRED ) { xd -> mode_info_context -> mbmi. mode = TM_PRED ; } else { distortion = vp8_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; rate = x -> mbmode_cost [ xd -> frame_type ] [ mode ] ; } } for ( mode = DC_PRED ; mode <= TM_PRED ; mode ++ ) { vp8_build_intra_predictors_mby_s ( xd, xd -> dst. y_buffer - 1, xd -> dst. y_stride, xd -> predictor, 16 ) ; distortion = vp8_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; rate = x -> mbmode_cost [ xd -> frame_type ] [ mode ] ; if ( error16x16 > this_rd ) { error16x16 = this_rd ; best_mode = mode ; best_s",0
666,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> MAC_UNSPECIFIED_ADDR ) ) { temp = enc624j600ReadReg ( interface, ENC624J600_MAADR1 ) ; interface -> macAddr. w [ 0 ] = letoh16 ( temp ) ; interface -> macAddr. w [ 1 ] = letoh16 ( temp ) ; interface -> macAddr. w [ 2 ] = letoh16 ( temp ) ; macAddrToEui64 ( & interface -> macAddr, & interface -> eui64 ) ; } else { temp = htole16 ( interface -> macAddr. w [ 0 ] ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR1, temp ) ; temp = htole16 ( interface -> macAddr. w [ 1 ] ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR2, temp ) ; temp = htole16 ( interface -> macAddr. w",0
667,"<S2SV_ModStart> * start ; va_start ( argptr, format ) ; <S2SV_ModStart> = strlen ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header ) ; if ( maxlen > sizeof ( psf -> header ) ) { va_start ( argptr, format ) ; vsnprintf ( start, maxlen, format, argptr ) ; start [ maxlen - 1 ] = 0 ; } else { start [ maxlen - 1 ] = 0 ; } <S2SV_ModStart> = 0 ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> = strlen ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> = strlen ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
668,"<S2SV_ModStart> else { if ( ctx -> iface -> destroy ) ctx -> iface -> destroy ( ctx -> priv -> iface ) ; else ctx -> priv -> iface = NULL ; ctx -> name = NULL ; ctx -> priv = NULL ; res = VPX_CODEC_OK ; } return SAVE_STATUS ( ctx, res ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
669,"<S2SV_ModStart> speed ) { <S2SV_ModEnd> sf -> adaptive_rd_thresh <S2SV_ModStart> 1 ) { <S2SV_ModEnd> sf -> use_square_partition_only <S2SV_ModStart> cm ) ; <S2SV_ModEnd> sf -> less_rectangular_check <S2SV_ModStart> = 1 ; <S2SV_ModEnd> sf -> tx_size_search_method <S2SV_ModStart> = vp9_frame_is_boosted ( cpi )? USE_FULL_RD : USE_LARGESTALL ; if ( MIN ( cm -> width, cm -> height ) >= 720 ) sf -> disable_split_mask = DISABLE_ALL_SPLIT ; else sf -> disable_split_mask = DISABLE_COMPOUND_SPLIT ; sf -> recode_loop = ALLOW_RECODE_KFARFGF ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_H_V ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC",0
670,"<S2SV_ModStart> int ret ; if ( ts [ h ]. thread_id < 0 ) { APPL_TRACE_ERROR ( ""socket <S2SV_blank> poll <S2SV_blank> thread <S2SV_blank> exiting, <S2SV_blank> h:%d"", h ) ; break ; } ret = select ( pfds, ts [ h ]. poll_count, - 1 ) ; if ( ret == - 1 ) { APPL_TRACE_ERROR ( ""poll <S2SV_blank> ret <S2SV_blank> -1, <S2SV_blank> exit <S2SV_blank> the <S2SV_blank> thread, <S2SV_blank> errno:%d, <S2SV_blank> err:%s"", errno, strerror ( errno ) ) ; break ; } if ( ret == 0 ) { int need_process_data_fd = TRUE ; if ( ts [ h ]. cmd_fdr ) { asrt ( pfds [ 0 ]. fd == ts [ h ]. cmd_fdr ) ; if (! process_cmd_sock ( h ) ) { APPL_TRACE_DEBUG ( ""h:%d, <S2SV_blank> process_cmd_sock <S2SV_blank> return <S2SV_blank> false, <S2SV_blank> exit..."", h ) ; break ; } if ( ret == 1 ) need_process_data_fd = FALSE ; else ret -- ; } if ( need_process_data_fd ) process_data_",0
671,<S2SV_ModStart> inuse + ( ( lua_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
672,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
673,"<S2SV_ModStart>, * s = STR ( CHILD ( n, 0 ) ) ; int quote = Py_CHARMASK ( * s ) ; if ( quote < 0 ) { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> invalid <S2SV_blank> quote <S2SV_blank> character"" ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> invalid <S2SV_blank> quote <S2SV_blank> character"" ) ; } Py_DECREF ( type ) ; Py_DECREF ( value ) ; } # ifdef Py_USING_UNICODE if ( PyErr_ExceptionMatches ( PyExc_UnicodeError ) ) { PyError_Fetch ( & type, & value, & tback ) ; errstr = PyObject_Str ( value ) ; if ( errstr ) { char * s = """" ; char buf [ 128 ] ; s = _PyUnicode_AsString ( errstr ) ; PyOS_snprintf ( buf, sizeof ( buf ), ""(unicode <S2SV_blank> error) <S2SV_blank> %s"", s ) ; ast_error ( n, buf ) ; ast_error ( n, buf ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF ( type ) ; Py_",0
674,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> break ; } input_ptr = strdup ( option_value ) ; if ( input_ptr == NULL ) { svc_log ( svc_ctx, SVC_LOG_ERROR, ""option <S2SV_blank> missing <S2SV_blank> value: <S2SV_blank> %s\\n"", option_name ) ; res = VPX_CODEC_INVALID_PARAM ; break ; } if ( strcmp ( ""encoding-mode"", option_name ) == 0 ) { res = set_option_encoding_mode ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""layers"", option_name ) == 0 ) { svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_factors ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers"", option_name ) == 0 ) { res = parse_quant",0
675,<S2SV_ModStart> event ) ; WARN_ON_ONCE (! head ) ; <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
676,"<S2SV_ModStart> } fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. uv_mode ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; } for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. mode ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; mb_index ++ ; } fprintf ( mvs, ""Mbs <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col <",0
677,<S2SV_ModStart> self ) { size_t <S2SV_ModEnd> i ; PyObject,1
678,,1
679,"<S2SV_ModStart> ) ) { if ( imp_dbh -> pmysql ) { do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; return FALSE ; } <S2SV_ModStart> imp_dbh ) ) { if ( imp_dbh -> pmysql ) { do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; return FALSE ; } else { do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; return FALSE ; }",0
680,<S2SV_ModStart> ; if (! TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> slot_lock ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> slot_lock ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> slot_lock ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> slot_lock ) ; TEMP_FAILURE_RETRY (,0
681,<S2SV_ModStart> struct ieee_802_11_phdr phdr ; if ( len_remain < sizeof ( struct ieee_802_11_phdr ) ) { if ( ampdu_len > sizeof ( struct ieee_802_11_phdr ) ) { if ( ampdu_len > sizeof ( struct ieee_802_11_phdr ) ) { if ( ampdu_len > sizeof ( struct ieee_802_11_phdr ) ) { if ( ampdu_len > sizeof ( struct ieee_802_11_phdr ) - sizeof ( struct ieee_802_11_phdr ) ) { if ( ampdu_len > sizeof ( struct ieee_802_11_phdr ) ) { if ( ampdu_len > sizeof ( struct ieee_802_11_phdr ) ) { if ( ampdu_len > sizeof ( struct ieee_802_11_phdr ) ) { if ( ampdu_len > sizeof ( struct ieee_802_11_phdr ) - sizeof ( struct ieee_802_11_phdr ) ) { if (,0
682,<S2SV_ModStart> ; sh = s_malloc0 <S2SV_ModEnd> ( hdrlen +,0
683,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> BYTE a_val ; if (! context ) { return FALSE ; } UINT32 tempWidth ; tempWidth = ROUND_UP_TO ( context -> width, 8 ) ; rw = ( context -> ChromaSubsamplingLevel? tempWidth : context -> width ) ; ccl = context -> ColorLossLevel ; yplane = context -> priv -> PlaneBuffers [ 0 ] + y * rw ; coplane = context -> priv -> PlaneBuffers [ 1 ] + y * rw ; cgplane = context -> priv -> PlaneBuffers [ 2 ] + y * rw ; aplane = context -> priv -> PlaneBuffers [ 3 ] + y * rw ; for ( y = 0 ; y < context -> height ; y ++ ) { src = data + ( context -> height - 1 - y ) * scanline ; yplane = context -> priv -> PlaneBuffers [ 0 ] + y * rw ; coplane = context -> priv -> PlaneBuffers [ 1 ] + y * rw ; cgplane = context -> priv -> Plane",0
684,"<S2SV_ModStart> - EINVAL ) ; * ( ++ top ) = invert ; continue ; case ')' : if (! nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } * ( ++ top ) = invert ; continue ; case '!' : if ( is_not ( next ) ) break ; invert =! invert ; continue ; case '!' : if (! nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; }",0
685,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const RATE_CONTROL * <S2SV_ModStart> = ( ( cpi <S2SV_ModEnd> -> oxcf. <S2SV_ModStart> > INT_MAX )? cpi -> oxcf. starting_buffer_level / 2 : <S2SV_ModEnd> ( int ) <S2SV_ModStart> > INT_MAX )? cpi -> oxcf. starting_buffer_level / 2 ) : <S2SV_ModEnd> ( int ) <S2SV_ModStart> > INT_MAX )? cpi -> oxcf. starting_buffer_level / 2 ; if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { int kf_boost = ( int ) ( rc -> frames_since_key / cpi -> output_framerate ) ; if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { kf_boost = ( int ) ( kf_boost * rc -> frames_since_key / cpi -> output_framerate ) ; } else { kf_boost = ( int ) ( rc -> frames_since_key / cpi -> output_framerate ) ; } target = ( ( 16 + kf_boost ) * rc -> av_per_frame_bandwidth ) >> 4 ;,0
686,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_reader_result <S2SV_ModEnd> read_tx_mode ( vpx_reader <S2SV_ModStart> r ) { vpx_reader_result <S2SV_ModEnd> tx_mode = vpx_read_literal <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r ),0
687,"<S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_",0
688,"<S2SV_ModStart> = args -> cpi <S2SV_ModEnd> ; MACROBLOCKD * <S2SV_ModStart> ; struct macroblock_plane <S2SV_ModEnd> * p = <S2SV_ModStart> -> mb. plane [ plane ] ; MB_MODE_INFO * const mbmi = & xd -> mi [ 0 ] -> mbmi ; const int16_t * qcoeff = BLOCK_OFFSET ( p -> qcoeff, block ) ; const int segment_id = mbmi -> segment_id ; const int ref = is_inter_block ( mbmi ) ; unsigned int ( * const counts ) [ COEFF_CONTEXTS ] [ ENTROPY_TOKENS ] = cpi -> coef_counts [ tx_size ] [ type ] [ ref ] ; vpx_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. fc. coef_probs [ tx_size ] [ type ] [ ref ] ; vpx_prob ( * const eob_branch ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. counts. eob_branch [ tx_size ] [ type ] [ ref ] ; unsigned int ( * const counts )",0
689,"<S2SV_ModStart> ; SrcList * pSrc ; if ( pSelect -> pSrc == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; } for ( i = 0 ; i < pSrc -> nSrc ; i ++ ) { struct SrcList_item * pItem = & pSrc -> a [ i ] ; if ( pItem -> pTab == 0 ) { renameTokenFind ( pWalker -> pParse, p, pItem -> zName ) ; } } else { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; } for ( i = 0 ; i < pSrc -> nSrc ; i ++ ) { struct SrcList_item * pItem = & pSrc -> a [ i ] ; if ( pItem -> pTab == 0 ) { renameTokenFind ( pWalker -> pParse, p, pItem -> zName ) ; } }",0
690,<S2SV_ModStart> { if ( shmflg & SHM_RND ) addr &= ~ ( shmlba - 1 ) ; else # ifndef __ARCH_FORCE_SHMLBA if ( addr & ~ PAGE_MASK ) # endif else # ifndef __ARCH_FORCE_SHMLBA if ( addr & ~ PAGE_MASK ) # endif if ( ( shmflg & SHM_REMAP ) && ( addr & ( shmlba - 1 ) ) ) { if ( ( shmflg & SHM_RDONLY ) { prot = PROT_READ ; acc_mode = S_IRUGO | S_IWUGO ; f_mode = FMODE_READ ; } else { prot = PROT_WRITE ; acc_mode = S_IRUGO | S_IWUGO ; } if ( shmflg & SHM_EXEC ) { prot = PROT_READ ; acc_mode = S_IRUGO | S_IWUGO ; } else { prot = PROT_READ ; acc_mode = S_IRUGO | S_IWUGO ; } if ( ( shmflg & SHM_,0
691,"<S2SV_ModStart> users ) ; switch ( minorversion ) { case 0 : serv = svc_create ( & nfs4_callback_program, NFS4_CALLBACK_BUFSIZE, sv_ops ) ; break ; case 1 : serv = svc_create ( & nfs4_callback_program, NFS4_CALLBACK_BUFSIZE, sv_ops ) ; break ; case 2 : serv = svc_create ( & nfs4_callback_program, NFS4_CALLBACK_BUFSIZE, sv_ops ) ; if (! serv ) { printk ( KERN_ERR ""nfs_callback_create_svc: <S2SV_blank> create <S2SV_blank> service <S2SV_blank> failed\\n"" ) ; return ERR_PTR ( - ENOMEM ) ; } cb_info -> serv = serv ; dprintk ( ""nfs_callback_create_svc: <S2SV_blank> service <S2SV_blank> created\\n"" ) ; return serv ; }",0
692,"<S2SV_ModStart> point, const CurveZZ_p <S2SV_ModEnd> curve ) {",0
693,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
694,<S2SV_ModStart> = fd ; msg. msg_namelen = 0 ;,0
695,"<S2SV_ModStart> s ) { if ( s < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } <S2SV_ModStart>, 0 ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
696,"<S2SV_ModStart> xIter = crm_first_attr <S2SV_ModEnd> ( xml ) <S2SV_ModStart> xIter = xIter -> next ) { const char * prop_name = ( const char * ) xIter -> name ; if ( strcmp ( prop_name, XML_ATTR_ID ) == 0 ) { continue ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else { char *",0
697,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> NULL ; return ( SvcInternal_t <S2SV_ModEnd> * ) svc_ctx <S2SV_ModStart> -> internal ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
698,"<S2SV_ModStart> mq_flush_lock, flags ) ; fq -> flush_rq = flush_rq ;",0
699,"<S2SV_ModStart> s ) { struct stream packet = * s ; <S2SV_ModStart> MCS_TAG_DOMAIN_PARAMS, & packet ) ; if (! s_check_rem ( s, packet -> length ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> consume <S2SV_blank> domain <S2SV_blank> params <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
700,"<S2SV_ModStart> ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_hash_update ( params, hkey. str, hkey. len, ( void * ) & tmp, sizeof ( zval * ), ( void * ) & arg, sizeof ( zval * ), ( void * ) & args ) ; } else if ( hkey. type == HASH_KEY_IS_STRING ) { zend_hash_update ( params, hkey. str, hkey. len, ( void * ) & tmp, sizeof ( zval * ), ( void * ) & args ) ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_hash_update ( params, hkey. num, ( void * ) & ptr, sizeof ( zval * ), ( void * ) & args ) ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_hash_update ( params, hkey. num, hkey. len, ( void * ) & tmp, sizeof ( zval * ), ( void * ) & args ) ; } else if ( hkey. type == HASH_",0
701,"<S2SV_ModStart> only_420 ) { <S2SV_ModEnd> int ret ; <S2SV_ModStart> = VPX_IMG_FMT_I420 ; if (! _y4m -> vpx_fmt ) { fprintf ( stderr, ""Error <S2SV_blank> parsing <S2SV_blank> video <S2SV_blank> interlacing <S2SV_blank> format; <S2SV_blank> "" ""assuming <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; return - 1 ; } else if ( _y4m -> vpx_fmt!= VPX_IMG_FMT_I420 ) { fprintf ( stderr, ""Error <S2SV_blank> parsing <S2SV_blank> video <S2SV_blank> interlacing <S2SV_blank> format; <S2SV_blank> "" ""assuming <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; return - 1 ; } _y4m -> vpx_fmt = VPX_IMG_FMT_I420 ; if (! _y4m -> vpx_bps ) { fprintf ( stderr, ""Error <S2SV_blank> parsing <S2SV_blank> video <S2SV_blank> interlacing <S2SV_blank> format; <S2SV_blank> "" ""assuming <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; return - 1 ; }",0
702,"<S2SV_ModStart> obj * otmp ; if ( strlen ( buf ) >= sizeof ( struct obj ) ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } if ( strlen ( buf ) >= sizeof ( struct obj ) ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } otmp = readobjnam ( buf, ( struct obj * ) 0 ) ; if ( otmp ) { if ( strlen ( buf ) >= sizeof ( struct obj ) ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } if ( strlen ( buf ) >= sizeof ( struct obj ) ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; }",0
703,"<S2SV_ModStart> { long long directory_table_end <S2SV_ModEnd>, table_start ; <S2SV_ModStart> 0 ) return FALSE ; if ( parse_exports_table ( & table_start ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_fragment_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_",0
704,"<S2SV_ModStart> createenv ( const struct envtree * envtree, const struct <S2SV_ModStart> rule ) { struct envnode * node ; <S2SV_ModStart> count = 0 ; node = createnode ( NULL, NULL ) ; if ( RB_INSERT ( envtree, & env -> root, node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } else if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { const char * e, * eq ; size_t len ; if ( len > sizeof ( keybuf ) - 1 ) continue ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf, eq + 1 ) ; if ( RB_INSERT ( envtree, & env -> root, node ) ) { freenode ( node ) ; } }",0
705,"<S2SV_ModStart> -> seg ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> segment ] ) ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ; vp9_clear_segmentation ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; vp9_set_segdata ( seg, segment, SEG_LVL_ALT_Q, qindex_delta ) ; } } vpx_clearall_segfeatures ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> frame_type, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vp9_disable_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ; vp9_set_segdata ( seg, segment, SEG_LVL_ALT_Q, qindex_delta )",0
706,"<S2SV_ModStart> return 0 ; if (! add_attributes ( mod_type, & AST_type, NULL, 0 ) ) return 0 ; Module_type = make_type ( ""Module"", mod_type, Module_fields, 1 ) ; if (! Module_type ) return 0 ; Interactive_type = make_type ( ""Interactive"", mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; stmt_type = make_type ( ""stmt"", & AST_type, NULL, 0 ) ; if (! stmt_type ) return 0 ; if (! add_attributes ( stmt_type, & AST_type, NULL, 0 ) ) return 0 ; if (! add_attributes ( stmt_type, stmt_attributes, 4 ) ) return 0 ; if (! add_attributes ( stmt_type,",0
707,"<S2SV_ModStart> ) ; } open ( log_path, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IWGRP | S_IROTH, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH ) ; if ( logfile_fd == INVALID_FD ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, log_path, strerror ( errno ) ) ; is_logging = false ; return ; } write ( logfile_fd, ""btsnoop\\0\\0\\0\\0\\1\\0\\0\\x3\\xea"", 16 ) ;",0
708,<S2SV_ModStart> += 8 ; context -> curY %= <S2SV_ModEnd> p -> height <S2SV_ModStart> += 4 ; context -> curY %= <S2SV_ModEnd> p -> height <S2SV_ModStart> += 2 ; context -> curY %= <S2SV_ModEnd> p -> height <S2SV_ModStart> += 2 ; context -> curY %= <S2SV_ModEnd> p -> height <S2SV_ModStart> += 2 ; context -> curY %= <S2SV_ModEnd> p -> height <S2SV_ModStart> += 2 ; context -> curY %= <S2SV_ModEnd> p -> height <S2SV_ModStart> += 4 ; context -> curY %= <S2SV_ModEnd> p -> height <S2SV_ModStart> += 2 ; context -> curY %= <S2SV_ModEnd> p -> height <S2SV_ModStart> += 2 ; context -> curY %= <S2SV_ModEnd> p -> height <S2SV_ModStart> += 2 ; context -> curY %= <S2SV_ModEnd> p -> height <S2SV_ModStart> += 2 ; context -> curY %= <S2SV_ModEnd> p -> height <S2SV_ModStart> += 2 ; context -> curY %= <S2SV_ModEnd> p -> height <S2SV_ModStart> += 2 ; context -> curY %= <S2SV_ModEnd> p -> height <S2SV_ModStart> += 2 ; context -> curY %= <S2SV_ModEnd> p -> height <S2SV_ModStart> += 2 ; context -> curY %= <S2SV_ModEnd> p -> height <S2SV_ModStart> += 2 ; context -> curY %= <S2SV_ModEnd> p -> height <S2SV_ModStart> += 2 ; context -> curY %= <S2SV_ModEnd> p -> height <S2SV_ModStart> += 2 ; context -> curY %= <S2SV_ModEnd> p -> height <S2SV_ModStart> +,0
709,<S2SV_ModStart> ) ; } ++ x -> ymode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ;,0
710,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> atomicio ( read <S2SV_ModStart> ( read, remin <S2SV_ModEnd>, & cp <S2SV_ModStart> ( read, remin <S2SV_ModEnd>, & cp <S2SV_ModStart> ( read, remin <S2SV_ModEnd>, & cp <S2SV_ModStart> ( read, remin <S2SV_ModEnd>, & cp <S2SV_ModStart> ( read, remin <S2SV_ModEnd>, & cp <S2SV_ModStart> ( read, remin <S2SV_ModEnd>, & cp <S2SV_ModStart> ( read, remin <S2SV_ModEnd>, & cp <S2SV_ModStart> ( read, remin <S2SV_ModEnd>, & cp <S2SV_ModStart> ( read, remin <S2SV_ModEnd>, & cp <S2SV_ModStart> ( read, remin <S2SV_ModEnd>, & cp <S2SV_ModStart> ( read, remin <S2SV_ModEnd>, & cp <S2SV_ModStart> ( read, remin <S2SV_ModEnd>, & cp <S2SV_ModStart> ( read, remin <S2SV_ModEnd>, & cp <S2SV_ModStart> ( read, remin <S2SV_ModEnd>, & cp <S2SV_ModStart> ( read, remin <S2SV_ModEnd>, & cp <S2SV_ModStart> ( read, remin <S2SV_ModEnd>, & cp <S2SV_ModStart> ( read, remin <S2SV_ModEnd>, & cp <S2SV_ModStart> ( read, remin <S2SV_ModEnd>, & cp <S2SV_ModStart> ( read, remin <S2SV_ModEnd>, & cp <S2SV_ModStart> ( read, remin <S2SV_ModEnd>, & cp <S2SV_ModStart> ( read, remin <S2SV_ModEnd>, & cp <S2SV_ModStart> ( read, remin <S2SV_ModEnd>, & cp <S2SV_ModStart> ( read, remin <S2SV_ModEnd>, & cp <S2SV_ModStart> ( read, remin <S2SV_ModEnd>, & cp <S2SV_ModStart> ( read, rem",0
711,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart> * s, * t, * StartClean <S2SV_ModEnd> ; double * <S2SV_ModStart> double * argbuf <S2SV_ModEnd> ; SetDefaults ( <S2SV_ModStart> = 0 ; outpos = outputbuffer ; outpos += sprintf ( outpos, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", s, t, TERMCHAR ) ; if ( * s == '0' && s [ 1 ] == ']' ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf ( outfile, ""%s"", axohelp ) ; return ( 0 ) ; } } else { fprintf ( stderr, ""%s: <S2SV_blank> Illegal <S2SV_blank> request <S2SV_blank> in <S2SV_blank> identification <S2SV_blank> string <S2SV_blank> [0]: <S2SV_blank> %s\\n"", axohelp, nameobject ) ; return ( - 1 ) ; } } StartClean = outpos ; nameobject = t ; while ( * t!='<S2SV_blank>'&& * t!= '\\n'",0
712,"<S2SV_ModStart> segs ) { <S2SV_ModEnd> u32 hash, <S2SV_ModStart> ; net_get_random_once ( <S2SV_ModEnd> & ip_idents_hashrnd, <S2SV_ModStart> sizeof ( ip_idents_hashrnd ) ) ; hash = jhash_3words <S2SV_ModEnd> ( ( __force <S2SV_ModStart> iph -> protocol ^ net_hash_mix ( net ), ip_idents_hashrnd ) ; id = ip_idents_reserve ( hash, segs ) ; iph -> id = htons ( id ) <S2SV_ModEnd> ; } <S2SV_null>",0
713,"<S2SV_ModStart> expr_ty step ; const <S2SV_ModStart> ( obj, & PyId_lower ) ) { int res ; tmp = _PyObject_GetAttrId ( obj, & PyId_lower ) ; if ( tmp == NULL ) goto failed ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( exists_not_none ( obj, & PyId_upper ) ) { int res ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( exists_not_none ( obj, & PyId_step ) ) { int res ; tmp = _PyObject_GetAttrId ( obj, & PyId_step ) ; if ( tmp == NULL ) goto failed ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; step = NULL ; } * out = Slice ( lower, upper, step,",0
714,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
715,"<S2SV_ModStart> = gecos ; # endif <S2SV_ModStart> 0 ) { # ifdef HAVE_LIBUSER if ( setpwuid ( ctl -> pw, ctl -> username, ctl -> pw -> pw_uid, ctl -> pw -> pw_gid ) < 0 ) { warn ( ""setpwuid <S2SV_blank> failed"" ) ; # endif printf ( _ ( ""Finger <S2SV_blank> information <S2SV_blank> *NOT* <S2SV_blank> changed. <S2SV_blank> <S2SV_blank> Try <S2SV_blank> again <S2SV_blank> later.\\n"" ) ) ; return - 1 ; } # else if ( setpwuid ( ctl -> pw, ctl -> pw -> pw_uid, ctl -> pw -> pw_gid ) < 0 ) { warn ( ""setpwnam <S2SV_blank> failed"" ) ; # endif printf ( _ ( ""Finger <S2SV_blank> information <S2SV_blank> *NOT* <S2SV_blank> changed. <S2SV_blank> <S2SV_blank> Try <S2SV_blank> again <S2SV_blank> later.\\n"" ) ) ; return - 1 ; }",0
716,"<S2SV_ModStart> int err ; list_for_each_entry ( iter, & alink -> dscp_map, list ) { if ( iter -> handle == knode -> handle ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } } val = be32_to_cpu ( knode -> sel -> keys [ 0 ]. val ) >> tos_off & 0xff ; mask = iter -> mask & mask ; val = iter -> val & mask ; if ( ( iter -> val & cmask ) == ( val & cmask ) && iter -> band!= knode -> res -> classid ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; }",0
717,"<S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; } if ( stream -> config. stats_fn ) { if (! stats_open_file ( & stream -> stats, stream -> config. stats_fn, pass ) ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; } else { if (! stats_open_mem ( & stream -> stats, pass ) ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; } else { if ( stream -> config. cfg. g_pass = pass? VPX_RC_LAST_PASS : VPX_RC_FIRST_PASS ; } stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> cx_time = 0 ; stream -> nbytes = 0 ; stream -> frames_out = 0 ; }",0
718,"<S2SV_ModStart> g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY",0
719,"<S2SV_ModStart> data_end ) { <S2SV_ModEnd> VP9_COMMON * const <S2SV_ModStart> pbi -> common ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_cols = 1 << cm -> log2_tile_cols ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_cols = 1 << cm -> log2_tile_cols ; TileBuffer tile_buffers [ 4 ] [ tile_rows ] ; int last_tile = tile_row == tile_rows - 1 && tile_col == tile_cols - 1 ; const size_t size = get_tile ( data_end, last_tile, & cm -> error, & data ) ; for ( tile_row = 0 ; tile_row < tile_rows ; ++ tile_row ) { for ( tile_col = 0 ; tile_col < tile_cols ; ++ tile_col ) { const int last_tile = tile_row == tile_rows - 1 && tile_col == tile_",0
720,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> vp9_decoder_create ( const <S2SV_ModStart> ) { const VP9_COMMON * const cm = pbi? & pbi -> common : NULL ; if (! pbi ) return NULL ; memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> error. setjmp = 1 ; vpx_initialize_dec ( ) ; vpx_rtcd ( ) ; vpx_zero ( * pbi ) ; if ( setjmp ( cm -> error. jmp ) ) { cm -> error. setjmp = 1 ; vp9_decoder_remove ( pbi ) ; return NULL ; } cm -> error. setjmp = 1 ; vp9_initialize_dec ( ) ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; cm -> oxcf = * oxcf ; pbi -> ready_for_new_data = 1 ; vp9_init",0
721,"<S2SV_ModStart> { GF_LOG ( GF_LOG_ERROR <S2SV_ModEnd>, GF_LOG_CONTAINER, <S2SV_ModStart> GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
722,"<S2SV_ModStart> req ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> -> opt ; rcu_read_lock ( ) ; opt = rcu_dereference_protected ( req_inet -> inet_opt, sock_owned_by_user ( req ) ) ; if (! rcu_dereference_protected ( req_inet -> inet_opt, sock_owned_by_user ( req ) ) ) { rcu_read_unlock ( ) ; return ; } rcu_read_unlock ( ) ; <S2SV_ModEnd> cipso_v4_delopt ( &",0
723,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> tree2tok ( struct <S2SV_ModStart> tokens, const vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> do { const vpx_tree_index <S2SV_ModEnd> j = tree",0
724,"<S2SV_ModStart> ; if ( ( flags & VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) && ( flags & VP8_EFLAG_FORCE_GF ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( ( flags & VP8_EFLAG_NO_REF_LAST ) && ( flags & VP8_EFLAG_NO_REF_GF ) && ( flags & VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP9_ALT_FLAG ; vp9_use_as_reference ( ctx -> cpi, ref",0
725,"<S2SV_ModStart> { ret = get_tag_data <S2SV_ModEnd> ( asn1, <S2SV_ModStart>, & len ) ; if ( ret ) goto error ; if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } seq = ( char * ) seq + count * elemtype -> size ; elem = ( char * ) seq + count * elemtype -> size ; memset ( elem, 0, elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; } newseq = realloc ( seq, ( count + 1 ) * elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; } seq = newseq ; elem = ( char * ) seq + count * elemtype -> size ; memset ( elem, 0, elemtype -> size ) ; ret = decode_atype ( & t, contents, clen, elemtype, elem ) ; if ( ret ) goto error ; count ++ ; }",0
726,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> fadst16_8col ( __m128i,0
727,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> frame_max_bits ( const <S2SV_ModStart> rc, const VP9EncoderConfig <S2SV_ModEnd> * oxcf )",0
728,"<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN <S2SV_ModStart> MIF_MAGICLEN ] ; char buf [ 4096 ] ; if ( jas_stream_read ( in, buf, sizeof ( buf ) )!= MIF_MAGICLEN ) { goto error ; } if ( jas_stream_read ( in, buf, sizeof ( buf ) )!= MIF_MAGICLEN ) { goto error ; } if ( jas_stream_read ( in, buf, sizeof ( buf ) )!= MIF_MAGICLEN ) { jas_eprintf ( ""error: <S2SV_blank> header <S2SV_blank> line <S2SV_blank> has <S2SV_blank> bad <S2SV_blank> signature\\n"" ) ; goto error ; } if (! ( hdr = mif_hdr_create ( 0 ) ) ) { jas_eprintf ( ""error: <S2SV_blank> header <S2SV_blank> line <S2SV_blank> has <S2SV_blank> bad <S2SV_blank> signature\\n"" ) ; goto error ; } if (! ( hdr = mif_hdr_create ( 0 ) ) ) { jas_eprintf ( ""error: <S2SV_blank> header <S2SV_blank> line <S2SV_blank> has <S2SV_blank> bad <S2SV_blank> signature\\n"" ) ; goto error ; }",0
729,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_superblock ( VP9_COMP <S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart>, int mi_row, int mi_col, BLOCK_SIZE bsize, PC_TREE * pc_tree ) { VP9_COMMON * const cm = & cpi -> common ; <S2SV_ModStart> x = & td <S2SV_ModEnd> -> mb ; <S2SV_ModStart> -> select_txfm_size && cpi -> oxcf. aq_mode!= CYCLIC_REFRESH_AQ && cpi -> oxcf. aq_mode!= COMPLEXITY_AQ && cpi -> oxcf. aq_mode!= CYCLIC_REFRESH_AQ && cpi -> sf. allow_skip_recode ; x -> skip_optimize = ctx -> is_coded ; x -> use_lp32x32fdct = cpi -> sf. use_lp32x32fdct ; x -> use_lp32x32fdct = cpi -> sf. use_lp32x32fdct ; x -> skip_encode = (! output_enabled && x -> q_index <",0
730,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_null>,0
731,"<S2SV_ModStart> range_max ) { int position, zeroes, i, j ; char bits [ 65 ] ; if ( ctx -> trace_enable ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } position = get_bits_count ( gbc ) ; zeroes = i = 0 ; while ( 1 ) { if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } bits [ i ++ ] = '1' ;",0
732,"<S2SV_ModStart> ) ) { if ( exit_reason == EXIT_REASON_EXTERNAL_INTERRUPT ) { pr_warn_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> VM <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmx -> name ) ; return 1 ; } else { pr_warn_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> VM <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmx -> name ) ; return 0 ; } if ( exit_reason == EXIT_REASON_EXTERNAL_INTERRUPT ) { pr_warn_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> VM <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmx -> name ) ; return 1 ; } else { pr_warn_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> VM <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmx -> name ) ; return 0 ; } } else if ( exit_reason == EXIT_REASON_NMI_WINDOW ) { pr_warn_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> VM <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmx -> name ) ; return 1 ; }",0
733,"<S2SV_ModStart> { } else <S2SV_ModEnd> if ( isalnum <S2SV_ModStart> { } else <S2SV_ModEnd> if ( isalnum <S2SV_ModStart> { } else <S2SV_ModEnd> if ( isalnum <S2SV_ModStart> } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { } else { error = ERROR_INVALID_SYNTAX ; } } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { } else { error = ERROR_INVALID_SYNTAX ; } } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { } else { error = ERROR_INVALID_SYNTAX ; } } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { } else { error = ERROR_INVALID_SYNTAX ; } } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^",0
734,"<S2SV_ModStart> -> http_contentlen. ptr = NULL, packet -> http_contentlen. len = 0, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_origin. ptr = NULL, packet -> http_origin. len = 0, packet -> server_line. ptr = NULL, packet -> server_line. len = 0, packet -> http_method. ptr = NULL, packet -> http_method. len = 0, packet -> server_response. ptr = NULL, packet -> server_response. len = 0,",0
735,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
736,"<S2SV_ModStart> ; assert ( floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( floor ( pow ( ( float ) r, dim ) ) <= entries ) ;",0
737,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart>, exception ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; c0 = ReadBlobLSBShort ( image ) ; c1 = ReadBlobLSBLong ( image ) ; bits = ReadBlobLSBLong ( image ) ; for ( j = 0 ; j < 4 ; j ++ ) { if ( ( j + i ) < ( ssize_t ) dds_info -> width ) && ( j + i ) < ( ssize_t ) dds_info -> height ) ) { if ( ( j + i ) < ( ssize_t ) dds_info -> width ) { if ( ( j + i ) < ( ssize_t ) dds_info -> width ) { SetPixelRed ( q, ScaleCharToQuantum ( colors. r [ code ] ) ) ; SetPixelGreen ( q, ScaleCharToQuantum ( colors. g [ code ] ) ) ; SetPixelBlue ( q, ScaleCharToQuantum ( colors. b [ code ] ) ) ; SetPixelOpacity ( q, ScaleCharToQuantum (",0
738,"<S2SV_ModStart> drop ; } IPCB ( skb ) -> opt. optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> srr ) ) { struct in_device * in_dev = __in_dev_get_rcu ( dev ) ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt ->",0
739,"<S2SV_ModStart> length ) { int ret ; if ( length < 0 ) { ERROR ( ""ack <S2SV_blank> failed <S2SV_blank> (%s)"", strerror ( errno ) ) ; skt_disconnect ( common -> ctrl_fd ) ; common -> ctrl_fd = AUDIO_SKT_DISCONNECTED ; return - 1 ; } ret <S2SV_ModStart> EINTR ) { if ( length < 0 ) { ERROR ( ""ack <S2SV_blank> failed <S2SV_blank> (%s)"", strerror ( errno ) ) ; skt_disconnect ( common -> ctrl_fd ) ; return - 1 ; } ret = recv ( common -> ctrl_fd, buffer, length ) ; if ( ret < 0 ) { ERROR ( ""ack <S2SV_blank> failed <S2SV_blank> (%s)"", strerror ( errno ) ) ; skt_disconnect ( common -> ctrl_fd ) ; common -> ctrl_fd = AUDIO_SKT_DISCONNECTED ; return - 1 ; } } else { ret = recv ( common -> ctrl_fd, buffer, length, MSG_NOSIGNAL ) ; if ( ret < 0 ) { ERROR ( ""ack <S2SV_blank> failed <S2SV_blank> (%s)"", strerror ( errno ) ) ; skt_disconnect ( common -> ctrl_fd ) ; common -> ctrl_fd =",0
740,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
741,<S2SV_ModStart> cfg ) { # if defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG_FS ) && defined ( CONFIG_DEBUG,0
742,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; } else { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n""",0
743,"<S2SV_ModStart>, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" ) ; if ( Stream_GetRemainingLength ( s ) < 4 ) return FALSE ;",0
744,<S2SV_ModStart> ; # if CONFIG_TEMPORAL_DENOISING if ( ( cpi -> oxcf. flags & YV12_FLAG_TEMPORAL_DENOISING ) || ( cpi -> oxcf. flags & YV12_FLAG_TEMPORAL_DENOISING ) || ( cpi -> oxcf. flags & YV12_FLAG_TEMPORAL_DENOISING ) || ( cpi -> oxcf. flags & YV12_FLAG_TEMPORAL_DENOISING ) || ( cpi -> oxcf. flags & YV12_FLAG_TEMPORAL_DENOISING ) || ( cpi -> oxcf. flags & YV12_FLAG_TEMPORAL_DENOISING ) || ( cpi -> oxcf. flags & YV12_FLAG_TEMPORAL_DENOISING ) || ( cpi -> oxcf. flags & YV12_FLAG_TEMPORAL_DENOISING ) || ( cpi -> oxcf. flags & YV12_FLAG_TEMPORAL_DENOISING ),0
745,"<S2SV_ModStart> ; if (! used && type == ARPHRD_ETHER ) { dev = alloc_netdev ( 0, ""pvceth%d"", ether_setup ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; } } else if ( type == ARPHRD_ETHER ) dev = alloc_netdev ( 0, ""pvceth%d"", ether_setup ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; }",0
746,"<S2SV_ModStart> * data ; struct stream packet = * s ; <S2SV_ModStart> ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } if (",1
747,<S2SV_ModStart> # if CONFIG_MULTITHREAD <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
748,<S2SV_ModStart> { if ( ( <S2SV_ModStart> 0x00 ) { xWantedSize += xHeapStructSize ; if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize = 0 ; } } else { xWantedSize = 0 ; } if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } } else { xWantedSize = 0 ; } if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) ; } else,0
749,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
750,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
751,"<S2SV_ModStart> STREAM s ) { struct stream packet = * s ; <S2SV_ModStart> int i ; if (! s_check_rem ( s, 10 ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> bitmap <S2SV_blank> updates <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s, 10 ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> bitmap <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s, 10 ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> bitmap <S2SV_blank> updates <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s, 10 ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> bitmap <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
752,"<S2SV_ModStart> } else { if ( smatch ( option, ""ignore"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Ignore <S2SV_blank> ErrorLog <S2SV_blank> directive"" ) ; return MPR_ERR_BAD_SYNTAX ; } else if ( smatch ( option, ""ignore"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Ignore <S2SV_blank> ErrorLog <S2SV_blank> directive"" ) ; return MPR_ERR_BAD_SYNTAX ; } else if ( smatch ( option, ""verbose"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Verbose <S2SV_blank> ErrorLog <S2SV_blank> directive"" ) ; return MPR_ERR_BAD_SYNTAX ; } else if ( smatch ( option, ""verbose"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Verbose <S2SV_blank> ErrorLog <S2SV_blank> directive"" ) ; return MPR_ERR_BAD_SYNTAX ; } else if ( smatch ( option, ""verbose"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Verbose <S2SV_blank> ErrorLog <S2SV_blank> directive"" ) ; return MPR_ERR_BAD_",0
753,"<S2SV_ModStart> tx_size, vpx_coeff_stats <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model <S2SV_ModEnd> * coef_probs = <S2SV_ModStart> tx_size ] ; vpx_coeff_count * coef_counts = cpi -> coef_counts [ tx_size ] ; unsigned int ( * eob_branch_ct ) [ REF_TYPES ] [ COEF_BANDS ] [ COEFF_CONTEXTS ] ; vpx_tree_probs_from_distribution ( vp9_coef_tree, coef_counts [ i ] [ j ] [ k ] [ l ] ) ; for ( i = 0 ; i < PLANE_TYPES ; ++ i ) { for ( j = 0 ; j < REF_TYPES ; ++ j ) { for ( k = 0 ; k < COEF_BANDS ; ++ k ) { for ( l = 0 ; l < BAND_COEFF_CONTEXTS ( k ) ; ++ l ) { for ( m = 0 ; m < UNCONSTRAINED_NODES ; ++ m ) coef_probs [ i ] [ j ] [ k ] [ l ] = get_binary_",0
754,"<S2SV_ModStart> } ; assert ( name [ strlen ( name ) - 1 ] == '\\0' ) ; r = set_termios ( fd, & tc, name, sizeof ( tc ) ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> UTF-8 <S2SV_blank> term <S2SV_blank> processing <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if ( r >= 0 ) { SET_FLAG ( tc. c_iflag, IUTF8, utf8 ) ; r = tcsetattr ( fd, TCSANOW, & tc ) ; } if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; r = set_termios ( fd, & tc, name, sizeof ( tc ) ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name",0
755,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> su3000_frontend_attach ( struct <S2SV_ModStart> dvb_usb_adapter * adap ) { struct dvb_usb_adapter * d = adap -> priv ; int ret = 0 ; if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; data [ 0 ] = 0xe ; <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
756,"<S2SV_ModStart> cfg, vpx_codec_flags_t flags <S2SV_ModEnd> ) { vpx_codec_iface_t <S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE",0
757,"<S2SV_ModStart>, int uv_block_size, vpx_bit_depth_t bit_depth <S2SV_ModStart> const kernel = vpx_bit_depth <S2SV_ModEnd> ; enum mv_precision <S2SV_ModStart> int uv_stride ; vpx_build_inter_predictor <S2SV_ModEnd> ( y_mb_ptr, <S2SV_ModStart>, & pred [ 0 ], stride, & pred [ 1 ], 16, & mv, scale, 16, 16, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vpx_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], uv_block_size, & pred [ 512 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vpx_build_inter_predictor ( v_mb_ptr, uv_stride, & pred [ 256 ], uv_block_size, & pred [ 512 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, MV_",0
758,"<S2SV_ModStart> TRUE ; mungspaces ( strlen ( origbuf ) ) ; if ( strchr ( buf,'<S2SV_blank>') ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } bufp = find_optparam ( buf ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( match_varname ( buf, ""OPTIONS"", 4 ) ) { if (! parseoptions ( bufp, TRUE, TRUE ) ) retval = FALSE ; } else if ( match_varname ( buf, ""AUTOPICKUP_EXCEPTION"", 5 ) ) { if (! parseautocomplete ( bufp ) ) retval = FALSE ; } else if ( match_varname ( buf, ""AUTOCOMPLETE"", 7 ) ) { if (! msgtype_parse_add ( bufp ) ) retval = FALSE ; } else if ( match_varname ( buf, ""MSGTYPE"", 7 ) ) { if (! msgtype_parse_add ( bufp ) ) retval = FALSE ; }",0
759,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static cJSON * <S2SV_ModEnd> cJSON_CreateFloatArray ( double <S2SV_ModStart> ; for ( int i = 0 ; i < count ; ++ i ) { n = cJSON_CreateFloat ( numbers [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } return a ; } for ( i = 0 ; i < count ; ++ i ) { n = cJSON_CreateFloat ( numbers [ i ] ) ; if (! i ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; }",0
760,"<S2SV_ModStart> tk_status ) ; rpc_die ( task ) ; <S2SV_ModStart> goto retry_rebind ; } if ( status == NLM_LCK_DENIED_REBIND ) { rpc_delay ( task, NLMCLNT_GRACE_WAIT ) ; goto retry_unlock ; } if ( status == NLM_LCK_GRANTED ) printk ( KERN_WARNING ""lockd: <S2SV_blank> unexpected <S2SV_blank> unlock <S2SV_blank> status: <S2SV_blank> %d\\n"", status ) ;",0
761,"<S2SV_ModStart>, n ) ; if ( w == NULL ) return 0",1
762,"<S2SV_ModStart> 4 ) ; if ( idx + 4 > len ) return NULL ; <S2SV_ModStart> len ) ; if ( idx + 4 > len ) return NULL ; <S2SV_ModStart> ( j = 0 <S2SV_ModEnd> ; j < <S2SV_ModStart> j < ( a -> names [ i ]. len >> 1 ) ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; } else { size_t i ; a -> names = CHECKED_XCALLOC ( VarLenData, a -> num_names ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> name = GETINT32 ( buf + idx ) ; idx += 4 ; a -> guid = CHECKED_XMALLOC ( GUID, 1 ) ; copy_guid_from_buf ( a -> guid, buf + idx, len ) ; idx += sizeof ( GUID ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ;",0
763,"<S2SV_ModStart> data_end ) { <S2SV_ModEnd> VP9_COMMON * const <S2SV_ModStart> -> common ; <S2SV_ModEnd> const int tile_cols <S2SV_ModStart> int tile_rows ; const int num_workers = MIN ( <S2SV_ModEnd> pbi -> oxcf <S2SV_ModStart>. max_threads & <S2SV_ModEnd> 1, tile_cols <S2SV_ModStart> tile_cols ) ; const int tile_buffers [ 1 << 6 ] ; int final_worker = - 1 ; if ( pbi -> tile_workers == 0 ) { const int i ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data2, vpx_malloc ( sizeof ( TileInfo ) ) ) ; <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
764,"<S2SV_ModStart> 0x101 ; offset = base + get4 ( ) + 8 ; while ( ( save = ftell ( ifp ) ) < offset ) { tag = tag << 8 | fgetc ( ifp ) ; len = get4 ( ) ; <S2SV_ModEnd> while ( ( <S2SV_ModStart> ( ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> break ; case 0x524946 : if (! strncasecmp ( model, ""DSLR-A100"", 9 ) ) { fseek ( ifp, 8, SEEK_CUR ) ; high = get2 ( ) ; wide = get2 ( ) ; } else { imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 0 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 1 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 2 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 3 ] = get2 ( ) ;",0
765,"<S2SV_ModStart> struct segmentation * seg = <S2SV_ModEnd> cm -> seg <S2SV_ModStart> cm -> seg ; const double base_q = vp9_convert_qindex_to_q ( cm -> base_qindex ) ; const double base_rdmult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + cm -> y_dc_delta_q ) ; const int qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, base_q * Q_RATIO ( i ) ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; RDMULT_RATIO ( i ) = ( double ) segment_rdmult / base_rdmult ; } else { vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; RDMULT_RATIO ( i )",0
766,<S2SV_ModStart> -> error_code ) { vpx_codec_err_t <S2SV_ModEnd> err_detail = error <S2SV_ModStart> : NULL ; if ( error -> has_detail ) ctx -> base. err_detail = error -> detail ; else ctx -> base. err_detail = NULL ; return error -> error_code ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
767,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
768,"<S2SV_ModStart> * ps_cur_slice ; pocstruct_t * ps_prev_poc, * ps_cur_poc ; memset ( ps_dec -> ps_prev_poc, 0, sizeof ( pocstruct_t ) )",0
769,<S2SV_ModStart> ; if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) {,0
770,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( btpan_cb. congest_packet ) ),0
771,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> int getnum ( <S2SV_ModStart> return df ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
772,"<S2SV_ModStart> ; markold ( g, g -> allgc, g -> reallyold ) ; markold ( g, g -> finobj, g -> finobjrold ) ; atomic ( L ) ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> finobj, g -> finobjsur ) ; sweepgen ( L, g, psurvival, g -> finobjrold ) ; g -> finobjrold = g -> finobjold <S2SV_ModEnd> ; g ->",0
773,<S2SV_ModStart> else return - ENODEV <S2SV_ModEnd> ; deb_info (,0
774,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } s_read ( c, c -> local_rfd. fd, buffer, sizeof buffer ) ; if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } s_write ( c, c -> local_wfd. fd, ssl_ok, sizeof ssl_ok ) ;",0
775,"<S2SV_ModStart> int cib_tls_signon ( cib_t <S2SV_ModEnd> * cib, <S2SV_ModStart> struct sockaddr_in addr <S2SV_ModEnd> ; int rc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> char * server <S2SV_ModStart> = private -> server <S2SV_ModEnd> ; int ret_ga <S2SV_ModStart> = NULL ; <S2SV_ModEnd> connection -> socket <S2SV_ModStart> ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } <S2SV_ModStart> = NULL ; <S2SV_ModEnd> connection -> session <S2SV_ModStart> NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } bzero ( & hints, sizeof ( struct addrinfo ) ) ; hints. ai_flags = AI_CANONNAME ; server = private -> server ; ret_ga = getaddrinfo ( server, NULL, & hints, & res ) ; if ( ret_ga ) { crm_err ( ""getaddrinfo: <S2SV_blank> %s"", gai_strerror ( ret",0
776,"<S2SV_ModStart> cpi, 0, sizeof ( VP8_COMMON ) ) ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; cpi -> gf_bitrate_adjustment = 0 ; cpi -> frames_till_gf_update_due = 0 ; cpi -> gf_overspend_bits = 0 ; cpi -> non_gf_bitrate_adjustment = 0 ; cpi -> prob_last_coded = 128 ; cpi -> prob_gf_coded = 63 ; cpi -> prob_intra_coded = 63 ; cpi -> recent_ref_frame_usage [ LAST_FRAME ] = 1 ; cpi -> recent_ref_frame_usage [ GOLDEN_FRAME ] = 1 ; cpi -> common. ref_frame_sign_bias [ ALTREF_FRAME ] = 1 ; cpi -> common. ref_frame_sign_bias [ ALTREF_FRAME ] = 1 ; cpi -> common. ref_frame_sign_bias [ ALTREF_FRAME ] = 1 ; cpi -> common. ref_frame_sign_bias [ LAST_FRAME ] = 1 ; cpi -> common. ref_frame_sign_bias",0
777,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MIN, 1 <S2SV_ModEnd>, regs,",1
778,"<S2SV_ModStart> ] ) ; if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [length <S2SV_blank> mismatch]"" ) ) ; return ; } <S2SV_ModStart> ] ) ; if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [length <S2SV_blank> mismatch]"" ) ) ; return ; } <S2SV_ModStart> ] ) ; if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [length <S2SV_blank> mismatch]"" ) ) ; return ; } <S2SV_ModStart> ] ) ; if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [length <S2SV_blank> mismatch]"" ) ) ; return ; } <S2SV_ModStart> ] ) ; if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [length <S2SV_blank> mismatch]"" ) ) ; return ; } <S2SV_ModStart> ] ) ; if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [length <S2SV_blank> mismatch]"" ) ) ; return ; }",0
779,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
780,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> - EFAULT ; } if ( copy_from_user ( & karg, uarg, sizeof ( struct mpt_ioctl_command ) ) ) { printk ( KERN_ERR MYNAM ""%s@%d::mptctl_mpt_command() <S2SV_blank> @%d <S2SV_blank> - <S2SV_blank> "" ""Unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> in <S2SV_blank> mpt_ioctl_command <S2SV_blank> struct <S2SV_blank> @ <S2SV_blank> %p\\n"", __FILE__, __LINE__, uarg ) ; return - EFAULT ; } rc = mptctl_do_mpt_command ( karg, & uarg -> MF <S2SV_ModEnd> ) ; return",0
781,"<S2SV_ModStart> ] ; Image * image = ( Image * ) NULL ; MagickBooleanType <S2SV_ModEnd> status ; register <S2SV_ModStart> length, padding, value, version, width ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } image -> columns = GetImageColumns ( image ) ; image -> rows = GetImageRows ( image ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } width = 0 ; height = 0 ; while ( ReadBlobString ( image, buffer )!= ( char * ) NULL ) if ( ( strlen ( name ) >= 6 ) && ( LocaleCompare ( name + strlen ( name ) - 6, ""_width"" ) == 0 ) ) break ; while ( ReadBlobString ( image, buffer )!= ( char * ) NULL ) if ( ( strlen ( name ) >= 7 ) && ( LocaleCompare ( name + strlen ( name ) - 7, ""_height"" ) == 0 ) ) break ; while ( ReadBlobString ( image, buffer )!=",0
782,"<S2SV_ModStart> ( enc -> mrk ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" ) ; return - 1 ; } if ( enc -> mrk ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" ) ; return - 1 ; } if ( enc -> mrk ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" ) ; return - 1 ; } if ( enc -> mrk ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" ) ; return - 1 ; } if ( enc -> mrk ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" ) ; return - 1 ; } if ( enc -> mrk ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" ) ; return - 1 ; } if ( enc -> mrk ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" ) ; return - 1 ; } if ( enc -> mrk ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker",0
783,"<S2SV_ModStart> = '\\0' ; if (! str_modes ) str_modes = weechat_strndup ( "" <S2SV_blank> "", NULL, WEECHAT_STRING_SPLIT_STRIP_LEFT | WEECHAT_STRING_SPLIT_STRIP_RIGHT | WEECHAT_STRING_SPLIT_COLLAPSE_SEPS, 0, & argc ) ; if (! str_modes ) str_modes = weechat_strndup ( "" <S2SV_blank> "", NULL, WEECHAT_STRING_SPLIT_STRIP_LEFT | WEECHAT_STRING_SPLIT_STRIP_RIGHT | WEECHAT_STRING_SPLIT_COLLAPSE_SEPS, 0, & argc ) ; if (! str_modes ) str_modes = weechat_strndup ( "" <S2SV_blank> "", NULL, WEECHAT_STRING_SPLIT_STRIP_LEFT | WEECHAT_STRING_STRIP_RIGHT | WEECHAT_STRING_SPLIT_COLLAPSE_SEPS, 0, & argc ) ; if (! str_modes ) str_modes = strdup ( "" <S2SV_blank> "" ) ;",0
784,"<S2SV_ModStart> decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> int v = vpx_read_bit <S2SV_ModEnd> ( r )",0
785,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
786,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> parallel_decoding_mode ) ++",0
787,"<S2SV_ModStart>! stream ) <S2SV_ModEnd> fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" <S2SV_ModStart> fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; if (! stream -> codec ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; <S2SV_ModStart> ; res = vpx_codec_enc_config_default ( global -> codec -> interface ( ), & stream -> config. cfg, global -> usage ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. stereo_fmt = STEREO_FORMAT_STEREO ; stream -> config. write_webm = 1 ; stream -> ebml. last_pts_ms = - 1 ; stream -> ebml. debug = global -> debug ; if ( global -> deadline == VPX_DL_REALTIME ) stream -> config. cfg. g_lag_in_frames = 0 ; else stream -> config. cfg. g_lag_in_frames = 0 ;",0
788,"<S2SV_ModStart> ( ndo, ""%s"", tok2str ( icmp6_opt_values, ""dnssl"" ) ) ) ; break ; case ND_OPT_ADVERTISE_INTERVAL : l = ( op -> nd_opt_len << 3 ) - 2 ; print_lladdr ( ndo, cp, l ) ; break ; case ND_OPT_IPV6_ADDRESS : l = ( op -> nd_opt_len << 3 ) - 2 ; print_lladdr ( ndo, cp, l ) ; break ; case ND_OPT_IPV4_ADDRESS : l = ( op -> nd_opt_len << 3 ) - 2 ; print_lladdr ( ndo, cp, l ) ; break ; case ND_OPT_IPV6_ADDRESS : l = ( op -> nd_opt_len << 3 ) - 2 ; print_lladdr ( ndo, cp, l ) ; break ; case ND_OPT_IPV6_ADDRESS : l = ( op -> nd_opt_len << 3 ) - 2 ; break ; case ND_OPT_IPV4_ADDRESS : l = ( op -> nd_opt_len << 3 )",0
789,<S2SV_ModStart> = 0 ; ( ( RE_AST * ) yr_malloc ( sizeof ( RE_AST ) ) ) ; if ( * re_ast ) -> root_node == NULL ) { ( * re_ast ) -> flags = 0 ; ( ( RE_AST * ) yr_malloc ( sizeof ( RE_AST ) ) ) return ERROR_INSUFFICIENT_MEMORY ; ( * re_ast ) -> root_node = yr_malloc ( sizeof ( RE_AST ) ) ; ( * re_ast ) -> root_node = yr_malloc ( sizeof ( RE_AST ) ) ; if ( * re_ast ) -> root_node == NULL ) { ( * re_ast ) -> flags = 0 ; ( ( RE_AST * ) yr_malloc ( sizeof ( RE_AST ) ) ) return ERROR_INSUFFICIENT_MEMORY ; ( * re_ast ) -> root_node = yr_malloc ( sizeof ( RE_AST ) ) ; return ERROR_INSUFFICIENT_MEMORY ; },0
790,"<S2SV_ModStart> DICT_PATH_SHARED ) ) ; str_append ( path, key -> key -> key ) ; <S2SV_ModStart> <= 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = dict_expand ( iter -> conn -> dict, iter -> pool, path, iter -> var_expand_table, & error ) ; if ( ret <= 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> lookup <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", str_c ( path ),",0
791,"<S2SV_ModStart> ; if ( skb -> len < sizeof ( struct nlattr ) || <S2SV_ModStart> -> nla_len > <S2SV_ModEnd> skb -> len <S2SV_ModStart> skb -> len ) return 0 ; nla = nla_find_nested ( skb -> nla, X ) ; if ( nla ) return ( void * ) nla - ( void * ) skb -> data ; if ( nla ) return ( void * ) nla - ( void * ) skb -> data ; if ( nla -> nla_len > A - skb -> len ) return 0 ; nla = nla_find_nested ( nla, X ) ; if ( nla ) return ( void * ) nla - ( void * ) skb -> data ;",0
792,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
793,"<S2SV_ModStart> ""<message <S2SV_blank> type=\'chat\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost\'>"" ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\'>"" ""<body>test <S2SV_blank> carbon <S2SV_blank> from <S2SV_blank> recipient</body>"" ""</message>"" ""</forwarded>"" ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost/mobile\'>"" ""<body>test <S2SV_blank> carbon <S2SV_blank> from <S2SV_blank> recipient</body>""",0
794,"<S2SV_ModStart> -> cac_id, serial -> len <S2SV_ModEnd> ) ; SC_FUNC_RETURN",1
795,<S2SV_ModStart> = 0 ; tok -> type_comments = 0 ; <S2SV_ModStart> = 0 ; tok -> type_comments [ 0 ]. type_comments <S2SV_ModStart> = 0 ; tok -> type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 1 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments [ 0 ]. type_comments,0
796,"<S2SV_ModStart> maxBitrate ; } if ( av1 -> av1_config ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1 -> av1_config -> config ) ; if ( av1_cfg ) { gf_odf_av1_cfg_write ( av1_cfg, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> data, & av1 -> emul_esd -> decoderConfig -> dataLength ) ; gf_odf_av1_cfg_del ( av1_cfg ) ; } }",0
797,"<S2SV_ModStart> { GF_LOG ( GF_LOG_ERROR <S2SV_ModEnd>, GF_LOG_CONTAINER, <S2SV_ModStart> GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
798,"<S2SV_ModStart> ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; if ( r < 0 ) return r ;",0
799,"<S2SV_ModStart> dpbSize ) ; if ( dpb -> maxLongTermFrameIdx > NO_LONG_TERM_FRAME_INDICES ) dpb -> maxLongTermFrameIdx = NO_LONG_TERM_FRAME_INDICES ; dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; if ( noReordering ) dpb -> dpbSize = dpb -> maxRefFrames ; else dpb -> dpbSize = dpbSize ;",0
800,<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> (! sock ||! addr ||! addrlen ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> ; if ( addrlen_out > sizeof ( struct oe_sockaddr_storage ) ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_in > addrlen_out ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_out > sizeof ( struct oe_sockaddr_storage ) ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_out > sizeof ( struct oe_sockaddr_storage ) ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_out > sizeof ( struct oe_sockaddr_storage ) ) { OE_RAISE_ERRNO,0
801,,1
802,"<S2SV_ModStart> FALSE ; } if (! tpdu_read_negotiation_request ( nego, s ) ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> negotiation <S2SV_blank> request <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; } if (! <S2SV_ModStart> FALSE ; } if (! tpdu_read_negotiation_request ( nego, s ) ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> negotiation <S2SV_blank> request <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; } if (! tpdu_read_negotiation_request ( nego, s ) ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> negotiation <S2SV_blank> request <S2SV_blank> type <S2SV_blank> %"" PRIu8 """", type ) ; return FALSE ; } if (! tpdu_read_negotiation_request ( nego, s ) ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> negotiation <S2SV_blank> request <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; } if (! tpdu_read_negotiation_request ( nego, s ) ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> negotiation <S2SV_blank> request <S2SV_blank> type <S2SV_blank> %"" PRIu8 """", type ) ; return FALSE",0
803,"<S2SV_ModStart> ipv6_pinfo * np = rcu_dereference_protected ( sk -> sk_prot, sock_owned_by_user ( sk ) ) <S2SV_ModEnd> ; struct ipv6_txoptions <S2SV_ModStart> & fl6, <S2SV_ModEnd> np -> sndflow <S2SV_ModStart> & fl6, <S2SV_ModEnd> np -> sndflow <S2SV_ModStart> & fl6, <S2SV_ModEnd> np -> sndflow <S2SV_ModStart> & fl6, <S2SV_ModEnd> np -> sndflow <S2SV_ModStart> & fl6, <S2SV_ModEnd> np -> sndflow <S2SV_ModStart> & fl6, <S2SV_ModEnd> np -> sndflow <S2SV_ModStart> & fl6, <S2SV_ModEnd> np -> sndflow <S2SV_ModStart> & fl6, <S2SV_ModEnd> np -> sndflow <S2SV_ModStart> & fl6, <S2SV_ModEnd> np -> sndflow <S2SV_ModStart> & fl6, <S2SV_ModEnd> np -> sndflow <S2SV_ModStart> & fl6, <S2SV_ModEnd> np -> sndflow <S2SV_ModStart> & fl6, <S2SV_ModEnd> np -> sndflow <S2SV_ModStart> & fl6, <S2SV_ModEnd> np -> sndflow <S2SV_ModStart> & fl6, <S2SV_ModEnd> np -> sndflow <S2SV_ModStart> & fl6, <S2SV_ModEnd> np -> sndflow <S2SV_ModStart> & fl6, <S2SV_ModEnd> np -> sndflow <S2SV_ModStart> & fl6, <S2SV_ModEnd> np -> sndflow <S2SV_ModStart> & fl6, <S2SV_ModEnd> np -> sndflow <S2SV_ModStart> & fl6, <S2SV_ModEnd> np -> sndflow <S2SV_ModStart>",0
804,"<S2SV_ModStart>, at ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; } pe_opt. opt32. opt64. opt32. opt64. opt64. opt64. opt32. opt64. opt32. opt64. opt32. opt64. opt32. opt32. opt32. opt64. opt32. opt64. opt32. opt32. opt32. opt32. opt32. opt64. opt64. opt32. opt32. opt64. opt32. opt32. opt64. opt32. opt32. opt32. opt32. opt64. opt32. opt64. opt32. opt64. opt32. opt32. opt32. opt32. opt32. opt32. opt64. opt. <S2SV_ModStart>. opt32. opt32. opt64. opt64. opt64. opt",0
805,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> address ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> { dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; usleep <S2SV_ModStart> 5 ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; dm9000WriteReg <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; dm9000WriteReg <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR,",0
806,"<S2SV_ModStart> # ifdef CCITT_SUPPORT if ( t2p -> pdf_compression == T2P_COMPRESS_GF ) { buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize ) ; if ( buffer == NULL ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( t2p -> pdf_compression == T2P_COMPRESS_GF ) { buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize ) ; if ( buffer == NULL ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"", ( unsigned long ) t2p -> tiff_datasize ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return",0
807,"<S2SV_ModStart> new_parent ) { <S2SV_ModEnd> __ptrace_link ( child <S2SV_ModStart>, new_parent, current_cred ( ) <S2SV_ModEnd> ) ; }",1
808,"<S2SV_ModStart> cib, & private -> command, NULL <S2SV_ModEnd> ) ; } <S2SV_ModStart> cib, & private -> callback, NULL <S2SV_ModEnd> ) ; } <S2SV_ModStart> pcmk_ok ) { if ( private -> command. session == NULL ) { fprintf ( stderr, ""%s: <S2SV_blank> Connection <S2SV_blank> to <S2SV_blank> %s:%d <S2SV_blank> failed: <S2SV_blank> %s\\n"", name, private -> server, private -> port, pcmk_errstr ( pcmk_errstr ( pcmk_errstr ( pcmk_errstr ( pcmk_errstr ( pcmk_errstr ( pcmk_errstr ( pcmk_errstr ( pcmk_errstr ( pcmk_errstr ( pcmk_errstr ( pcmk_errstr ( pcmk_errstr ( pcmk_errstr ( pcmk_errstr ( pcmk_errstr ( pcmk_errstr ( pcmk_errstr ( pcmk_errstr ( pcmk_errstr ( pcmk_errstr ( pcmk_errstr ( pcmk_errstr ( pcmk_errstr ( pcmk_errstr ( pcmk_errstr ( pcmk_errstr ( pcmk_errstr ( pcmk_",0
809,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
810,"<S2SV_ModStart> >> 3 } ; int num00, tmp_err, n <S2SV_ModEnd>, sr = <S2SV_ModStart> bsize ] ; const int new_mv_mode_penalty = 256 ; const int quart_frm = MIN ( cpi -> common. width, cpi -> common. height ) ; while ( ( quart_frm << sr ) < MAX_FULL_PEL_VAL ) ++ sr ; step_param += sr ; further_steps -= sr ; v_fn_ptr. vf = get_block_variance_fn ( bsize ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if (",0
811,"<S2SV_ModStart> ntreg_header ) ; if ( h -> size == 0 ) { SET_ERRNO ( EPERM, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; }",0
812,"<S2SV_ModStart> ) ; } # ifdef DEBUG_CONF ap_log_perror ( APLOG_MARK, APLOG_STARTUP | APLOG_NOERRNO, 0, mp, ""Merge <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp <S2SV_blank> RESULT <S2SV_blank> %pp"", parent, _child, merged ) ; # endif",0
813,"<S2SV_ModStart> -> cmsg_name, msg_sys <S2SV_ModEnd> -> msg_name, <S2SV_ModStart> -> cmsg_name, msg_sys <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> cmsg_name, msg_sys <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> cmsg_namelen, msg_sys <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> cmsg_name, msg_sys <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> cmsg_name, msg_sys <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> cmsg_name, msg_sys <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> cmsg_namelen, msg_sys <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> cmsg_namelen, msg_sys <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> cmsg_namelen, msg_sys <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> cmsg_namelen, msg_sys <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> cmsg_namelen, msg_sys <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> cmsg_namelen, msg_sys <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> cmsg_namelen",0
814,"<S2SV_ModStart>, one ; size_t <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> ) break ; if ( number_planes_filled > ( size_t ) GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; number_planes = ( size_t ) GetBlobSize ( image ) ; number_planes_filled = ( size_t ) GetBlobSize ( image ) ; number_colormaps = ( size_t ) GetBlob ( image ) ; number_planes_filled = ( size_t ) GetBlobSize ( image ) ; if ( number_planes_filled > ( size_t ) GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; number_planes = ( size_t ) GetBlobSize ( image ) ; number_planes_filled = ( size_t ) GetBlobSize ( image ) ; number_planes_filled = ( size_t ) GetBlob ( image ) ; number_planes_filled = ( size_t ) GetBlobSize ( image ) ; if ( number_planes_filled > ( size",0
815,"<S2SV_ModStart>!= 0 || ( r = sshbuf_put_u32 ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, enc -> name ) )!= 0 || ( r = sshbuf_put ( b, & enc -> cipher, sizeof enc -> cipher ) ) )!= 0 || ( r = sshbuf_put_string ( b, enc -> key, enc -> key_len ) )!= 0 || ( r = sshbuf_put_string ( b, enc -> cipher, enc -> block_size ) )!= 0 || ( r = sshbuf_put_string ( b, enc -> key, enc -> key_len ) )!= 0 ) goto out ; if ( cipher_authlen ( enc -> cipher ) == 0 ) { if ( ( r = sshbuf_put_cstring ( b, mac -> name ) )!= 0 || ( r = sshbuf_put_u32 ( b, mac -> enabled ) )!= 0 || ( r = sshbuf_put_string ( b, mac -> key, mac -> key_len",0
816,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
817,"<S2SV_ModStart> user_data ) { int rc ; <S2SV_ModStart> client = user_data ; if ( client == NULL ) { return ; } crm_trace ( ""Cleaning <S2SV_blank> up <S2SV_blank> after <S2SV_blank> client <S2SV_blank> disconnect: <S2SV_blank> %s/%s"", crm_str ( client -> name ), client -> id ) ; crm_trace ( ""Cleaning <S2SV_blank> up <S2SV_blank> after <S2SV_blank> client <S2SV_blank> disconnect: <S2SV_blank> %s/%s"", crm_str ( client -> name ), client -> callback_id ) ; free ( client -> user ) ; free ( client ) ; return ; } crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client"" ) ; if ( cib_shutdown_flag ) { cib_shutdown ( 0 ) ; } return ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
818,"<S2SV_ModStart> UpVal * uv <S2SV_ModEnd> ; * p <S2SV_ModStart> = thread -> twups ; thread -> twups = NULL ; for ( uv = thread -> openupval ; uv!= NULL ; uv = uv -> u. open. next ) { work ++ ; markvalue ( g, uv -> v ) ; } } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
