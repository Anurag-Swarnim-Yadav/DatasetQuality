,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
1,<S2SV_ModStart> ; if ( unfrag_ip6hlen < frag_hdr_sz ) { kfree_skb ( skb ) ; return ERR_PTR ( unfrag_ip6hlen ) ; } <S2SV_ModStart> ; if ( unfrag_ip6hlen < frag_hdr_sz ) { kfree_skb ( skb ) ; return ERR_PTR ( unfrag_ip6hlen ) ; },0
2,"<S2SV_ModStart> ) ) { GF_Box * stco = gf_list_get ( writers, 0 ) ; GF_Box * stsc = gf_list_get ( writers, 1 ) ; if (! stco ) { gf_error ( GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR ) ; GF_LOG_ERROR ( GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG",0
3,<S2SV_ModStart> item ) { return <S2SV_ModEnd> cJSON_GetArrayItem ( array <S2SV_ModStart> -> child ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
4,"<S2SV_ModStart> u64 nr, <S2SV_ModEnd> struct pt_regs * <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",1
5,"<S2SV_ModStart> { # ifndef _MSC_VER char * buf ; int i ; buf = grub_malloc ( EXT2_BLOCK_SIZE ( data ) ) ; if (! buf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } <S2SV_ModStart> ) ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) ( leaf + 1 ) ; for ( i = 0 ; i < grub_le_to_cpu16 ( leaf -> entries ) ; i ++ ) { if ( fileblock < grub_le_to_cpu32 ( ext [ i ]. block ) ) break ; } fileblock -= grub_le_to_cpu32 ( ext [ i ]. block ) ; if ( fileblock >= grub_le_to_cpu16 ( ext [ i ]. len ) ) return 0 ; else { grub_disk_addr_t start ; start = grub_le_to_cpu32 ( ext [ i ]. start ) ; start = ( start",0
6,"<S2SV_ModStart> fdct16 ( const tran_low_t <S2SV_ModEnd> in [ 16 <S2SV_ModStart> 16 ], tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> 16 ] ) { tran_low_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_low_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_low_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_low_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> ; int temp1, temp2 ; input [ 0 ] = in [ 0 ] + in [ 15 ] ; input [ 1 ] = in [ 1 ] + in [ 14 ] ; input [ 2 ] = in [ 2 ] + in [ 13 ] ; input [ 3 ] = in [ 3 ] + in [ 10 ] ; input [ 4 ] = in [ 4 ] + in [ 11 ] ; input [ 5 ] = in [ 5 ] + in [ 12 ] ; input [ 6 ] = in [ 6 ] + in [ 9 ] ; input [ 7 ] = in [ 7 ] + in [ 8 ] ; step1 [ 0 ] = in [ 0 ] - in [ 15 ] ; step1 [ 1 ] = in [ 0 ] - in [ 14 ] ; step1 [ 2 ] = in [ 1",0
7,"<S2SV_ModStart> ( ) == 0x48454150 ) { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; # endif parse_ciff ( save + hlen, len - hlen, 0 ) ;",0
8,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int search_filter_level ( const YV12_BUFFER_CONFIG * sd, <S2SV_ModEnd> VP9_COMP * cpi <S2SV_ModStart> partial_frame ) { VP9_COMMON * const cm = & cpi -> common ; <S2SV_ModStart> int best_err ; VP9_LOOPFILTER * const lf = & cpi -> loopfilter <S2SV_ModEnd> ; int filt_mid <S2SV_ModStart> / 4 ; memset ( ss_err, 0xFF, sizeof ( ss_err ) ) ; vpx_yv12_copy_y ( cm -> frame_to_show, & cpi -> last_frame_uf ) ; best_err = try_filter_frame ( sd, cpi, filt_mid, partial_frame ) ; filt_best = filt_mid ; while ( filter_step > 0 ) { const int filt_high = MIN ( filt_mid + filter_step, max_filter_level ) ; int filt_low = MAX ( filt_low - filter_step, min_filter_level ) ; int bias = ( best_err >> ( 15 - ( filt_mid / 8 ) ) ) * filter_step",0
9,"<S2SV_ModStart> c. left ; if ( offset < 0 ) return luaL_error ( L, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> offset <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> and <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d."", offset, len ) ;",0
10,"<S2SV_ModStart> encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> i ) vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> i ) vpx_write <S2SV_ModEnd> ( w,",0
11,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } else { <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; },0
12,<S2SV_ModStart> ) dat ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; ND_T,0
13,<S2SV_ModStart> <S2SV_null> static struct key * construct_get_dest_keyring ( <S2SV_ModEnd> struct request_key_auth * <S2SV_ModStart> authkey ; } if ( dest_keyring ) { key_get ( dest_keyring ) ; } else if ( cred -> jit_keyring < KEY_REQKEY_DEFL_DEFAULT ) { key_get ( cred -> default_keyring ) ; break ; } case KEY_REQKEY_DEFL_THREAD_KEYRING : dest_keyring = key_get ( cred -> thread_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_PROCESS_KEYRING : dest_keyring = key_get ( cred -> process_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_USER_SESSION_KEYRING : dest_keyring = key_get ( cred -> user -> session_keyring ) ; break ; case KEY_REQKEY_DEFL_GROUP_KEYRING : dest_keyring = key_get ( cred -> group_keyring ) ; break ; case KEY_REQKEY_DEFL_GROUP,0
14,<S2SV_ModStart> = create_spnego_ctx ( ) ; if ( sc == NULL ) return GSS_S_FAILURE ;,0
15,<S2SV_ModStart> ; tm = g_time_to_tm <S2SV_ModEnd> ( & t,0
16,"<S2SV_ModStart> length ) ; memcpy <S2SV_ModEnd> ( hashed,",0
17,"<S2SV_ModStart> if (! e ) goto not_found ; r = parse_uid ( e + 1, & uid ) ; if ( r < 0 ) goto not_found ; machine = strndupa ( p, e - p ) ; if (! machine_name_is_valid ( machine ) ) goto not_found ; r = sd_bus_open_system ( bus, ""org.freedesktop.machine1"", ""/org/freedesktop/machine1"", ""Manager"", ""MapFromMachineUser"", & error, & reply, ""su"", ( uint32_t ) uid ) ; if ( r < 0 ) goto fail ; r = sd_bus_call_method ( bus, ""org.freedesktop.machine1"", ""/org/freedesktop/machine1"", ""Manager"", ""MapFromMachineUser"", & error, & reply, ""su"", ( uint32_t ) uid ) ; if ( sd_bus_error_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) goto not_found ;",0
18,"<S2SV_ModStart> inode, CAP_CHOWN ) ) return - EPERM ; if ( ( ia_valid & ATTR_MODE ) && (! inode_owner_or_capable ( inode ) ) return - EPERM ; if ( ia_valid & ( ATTR_MTIME_SET | ATTR_ATIME_SET | ATTR_TIMES_SET ) ) return - EPERM ; if ( ia_valid & ATTR_MODE ) { if (! inode_owner_or_capable ( inode ) ) return - EPERM ; if (! in_group_p ( ( ia_valid & ATTR_MODE ) && (! inode_owner_or_capable ( inode ) ) return - EPERM ; if ( ia_valid & ( ATTR_MTIME_SET | ATTR_ATIME_SET | ATTR_TIMES_SET ) ) return - EPERM ; if ( ia_valid & ATTR_MODE ) { if (! inode_owner_or_capable ( inode ) ) return - EPERM ; if (! in_group_p ( ( ia_valid & ATTR_MODE ) && (! inode_owner_or_capable ( inode ) )",0
19,"<S2SV_ModStart> 0 ; select ( reader -> bytes_available_fd + 1, & read_fds, NULL, NULL, & timeout ) ; if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { FD_ZERO ( & read_fds ) ; FD_SET ( reader -> bytes_available_fd, & read_fds ) ; FD_ZERO ( & read_fds ) ; FD_ZERO ( & read_fds ) ; FD_SET ( reader -> bytes_available_fd, & read_fds ) ; if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { FD_ZERO ( & read_fds ) ; FD_ZERO ( & read_fds ) ; FD_SET ( reader -> bytes_available_fd, & read_fds ) ; FD_ZERO ( & read_fds ) ; FD_SET ( reader -> bytes_available_fd, & read_fds ) ; }",0
20,"<S2SV_ModStart> int detect_transition_to_still ( TWO_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> int trans_to_still = 0 ; const FIRSTPASS_STATS * position = twopass -> stats_in ; if ( frame_interval > MIN_GF_INTERVAL && loop_decay_rate >= 0.999 && last_decay_rate < 0.9 ) { int j ; const FIRSTPASS_STATS tmp_next_frame ; for ( j = 0 ; j < still_interval ; ++ j ) { if ( EOF == input_stats ( twopass, & tmp_next_frame ) ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; if ( <S2SV_ModEnd> tmp_next_frame. pcnt_inter <S2SV_ModStart> pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 <S2SV_ModEnd> ) break ; <S2SV_ModStart> } reset_fpf_position ( twopass, <S2SV_ModEnd> position ) ; <S2SV_ModStart> } return trans_to_still ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
21,"<S2SV_ModStart> return ret ; ret = ext4_convert_unwritten_extents ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; return ret ; }",0
22,"<S2SV_ModStart> alg ) { if ( type & ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) <S2SV_ModStart> ( ""%s-all"", name ) ; return ERR_PTR ( - EPERM ) ; } <S2SV_ModStart> ) ) { if ( type & ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) ) return ERR_PTR ( - EPERM ) ; if ( type & ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) ) return ERR_PTR ( - EPERM ) ; if (! ( type & ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) ) return ERR_PTR ( - EPERM ) ; if ( type & ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) )",0
23,"<S2SV_ModStart> = GIT_PKT_NG ; if (! ( ptr = strchr ( line,'<S2SV_blank>') ) ) goto out_err ; <S2SV_ModStart> += 3 ; if (! ( ptr = strchr ( line, '\\n' ) ) ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> ref = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> ref ) ; memcpy ( pkt -> ref, line, len ) ; pkt -> ref [ len ] = '\\0' ; if (! ( ptr = strchr ( line, '\\n' ) ) ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> msg = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> msg ) ; memcpy ( pkt -> msg, line, len ) ; pkt -> msg [ len ] = '\\0' ; if (! ( ptr = strchr ( line,",0
24,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_request ( rdpNego <S2SV_ModStart> s ) { BOOL final_state ; <S2SV_ModStart> NEGO_STATE_FINAL ; final_state = NEGO_STATE_REQUESTING <S2SV_ModEnd> ; } <S2SV_null>,0
25,"<S2SV_ModStart> num ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num ) ; av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num ) ; av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num ) ; av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", den ) ; av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num ) ; av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", den ) ; av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num",0
26,"<S2SV_ModStart> 1 ; } ret = mount_entry_on_generic ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> short"" ) ; return - 1 ; }",0
27,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
28,<S2SV_ModStart> : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ),0
29,<S2SV_ModStart> ) ) ; if ( ret ) return BT_STATUS_FAIL ;,0
30,<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; if ( iface -> enc. cfg_maps == NULL ) return VPX_CODEC_INVALID_PARAM ; for ( map = iface -> enc. cfg_maps ; map -> usage >= 0 ; map ++ ) { if (! ( map -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( map -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( map -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( map -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else { res = VPX_CODEC_INVALID_,0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,"<S2SV_ModStart> <S2SV_null> <S2SV_null> void show_progress ( int frame_in, int frame_out, uint64_t dx_time ) { if ( frame_in < 0 || frame_out < 0 || frame_out > UINT64_MAX ) { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out, dx_time ) ; } else if ( frame_in < 0 || frame_out < 0 ) { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out, dx_time ) ; } else { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out, dx_time ) ; }",0
33,"<S2SV_ModStart> NULLav ; } # if MYSQL_ASYNC if ( imp_dbh -> async_query_in_flight ) { if ( imp_dbh -> async_query_in_flight ) { if ( imp_dbh -> async_query_in_flight ) { if ( imp_dbh -> async_query_in_flight ) { do_error ( sth, JW_ERR_SEQUENCE, ""fetch() <S2SV_blank> but <S2SV_blank> fetch <S2SV_blank> already <S2SV_blank> done"", NULL ) ; return Nullav ; } } } # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION if ( imp_sth -> use_server_side_prepare ) { if (! DBIc_ACTIVE ( imp_sth ) ) { do_error ( sth, JW_ERR_SEQUENCE, ""fetch() <S2SV_blank> but <S2SV_blank> fetch <S2SV_blank> already <S2SV_blank> done"", NULL ) ; return Nullav ; } } # endif } # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION if ( imp_sth -> use_server_side_prepare ) { if (! DBIc_ACTIVE ( imp_sth ) ) { do_error ( sth, JW_ERR_SEQUENCE, ""fetch() <S2SV_blank>",0
34,"<S2SV_ModStart> } enc28j60SetBit ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST ) ; enc28j60ClearBit ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST ) ; enc28j60SetBit ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTL, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteBuffer ( interface, buffer, offset ) ; enc28j60WriteReg ( interface, ENC28J60_EWRPTL, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_EWR",0
35,"<S2SV_ModStart> value ) ; value = ast2obj_int ( o -> lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; <S2SV_ModStart> value ) ; value = ast2obj_int ( o -> col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; <S2SV_ModStart> value ) ; value = ast2obj_int ( o -> end_lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; <S2SV_ModStart> value ) ; value = ast2obj_int ( o -> end_col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value",0
36,"<S2SV_ModStart> ; if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } <S2SV_ModStart> ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } } else if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } } else if (! strcmp ( func, ""page/exists"" ) ) { char * page = http_request_param_get ( req, ""page"" ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page && ( access ( page, R_OK ) == 0 ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } else",0
37,"<S2SV_ModStart> flag ) { int mb_rows = source -> y_width >> 4 ; int mb_cols = source -> y_height >> 4 ; unsigned char * limits = cm -> pp_limits_buffer ; int mbr, mbc ; ( void ) post ; ( void ) low_var_thresh ; ( void ) flag ; for ( mbr = 0 ; mbr < mb_rows ; mbr ++ ) { vpx_post_proc_down_and_across_mb_row ( source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_stride, source -> y_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> u_buffer + 16 * mbr * source -> uv_stride, source -> uv_stride, source -> uv_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> v_buffer + 8 * mbr * source -> uv_stride, source -> uv_stride, source -> uv_width, limits, 8 ) ; vpx_post_proc_down_and",0
38,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> int error ; struct mb2_cache_entry * ce <S2SV_ModEnd> ; int error <S2SV_ModStart> int error ; ce = mb2_cache_entry_alloc ( ext4_mb_cache, GFP_NOFS ) ; if (! ce ) { ea_bdebug ( bh, ""out <S2SV_blank> of <S2SV_blank> memory"" ) ; return ; } error = mb2_cache_entry_insert ( ce, bh -> b_bdev, bh -> b_blocknr, hash ) ; if ( error ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> } } <S2SV_null>",0
39,"<S2SV_ModStart> ) ; return r_socket_http_answer <S2SV_ModEnd> ( s,",0
40,"<S2SV_ModStart> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> ip_options_get_from_user ( struct <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( optlen && copy_from_user ( opt -> __data, data, optlen ) ) { kfree ( opt ) ; return - EFAULT ; } <S2SV_ModEnd> return ip_options_get_finish (",0
41,"<S2SV_ModStart> trunc : ND_TCHECK_16BITS ( & dio -> rpl_dagrank ) ; <S2SV_ModStart> : ND_TCHECK_16BITS ( & dio -> rpl_mopprf ) ; if ( RPL_DIO_GROUNDED ( dio -> rpl_mopprf )? ""grounded,"" : """", tok2str ( rpl_mop_values, ""mop%u"", RPL_DIO_MOP ( dio -> rpl_mopprf ) ), RPL_DIO_PRF ( dio -> rpl_mopprf ) ) ; <S2SV_ModStart> : ND_TCHECK_16BITS ( & dio -> rpl_mopprf ) ; if ( RPL_DIO_GROUNDED ( dio -> rpl_mopprf )? ""grounded,"" : """", tok2str ( rpl_mop_values, ""mop%u"", RPL_DIO_MOP ( dio -> rpl_mopprf ) ) ;",0
42,"<S2SV_ModStart> ; # ifdef FEAT_GUI if ( gui. in_use ) errmsg = ( char_u * ) N_ ( ""E529: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> term <S2SV_blank> in <S2SV_blank> GUI"" ) ; else if ( term_is_gui ( T_NAME ) ) errmsg = ( char_u * ) N_ ( ""E531: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else if ( set_termname ( T_NAME ) == FAIL ) errmsg = ( char_u * ) N_ ( ""E522: <S2SV_blank> Not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> termcap"" ) ; else if ( set_termname ( T_NAME ) == FAIL ) errmsg = ( char_u * ) N_ ( ""E522: <S2SV_blank> Not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> termcap"" ) ; else if ( set_termname ( T_NAME ) == FAIL ) errmsg = ( char_u * ) N_ ( ""E522: <S2SV_blank> Not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> termcap"" ) ; else if ( set_termname ( T_NAME ) == FAIL ) errmsg = ( char_u * ) N_ ( ""E",0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode",0
44,"<S2SV_ModStart> size_t size ; if ( width < 0 || height < 0 || hstep <= 0 || vstep <= 0 ) { goto error ; } if (! jas_safe_intfast32_add ( tlx, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ) { goto error ; } if (! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ) { goto error ; } if (",0
45,<S2SV_ModStart> == datalen && ( pc + asn1_op_lengths [ op ] - 1 ) <S2SV_ModStart> == datalen && ( pc + asn1_op_lengths [ op ] - 1 ) <S2SV_ModStart> == datalen && ( pc + asn1_op_lengths [ op ] - 1 ) <S2SV_ModStart> == datalen && ( pc + asn1_op_lengths [ op ] - 1 ) <S2SV_ModStart> == datalen && ( pc + asn1_op_lengths [ op ] - 1 ) <S2SV_ModStart> == datalen && ( pc + asn1_op_lengths [ op ] - 1 ) <S2SV_ModStart> == datalen && ( pc + asn1_op_lengths [ op ] - 1 ) <S2SV_ModEnd> == datalen ) <S2SV_ModStart> == datalen && ( pc + asn1_op_lengths [ op ] - 1 ) <S2SV_ModStart> == datalen && ( pc + asn1_op_lengths [ op ] - 1 ) <S2SV_ModStart> == datalen && ( pc + asn1_op_lengths [ op ] - 1 ),0
46,"<S2SV_ModStart> acl_len ) { <S2SV_ModEnd> struct kvec * <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart>, bitmap ) )!= 0 ) goto out ; if ( ( status = decode_op_hdr ( xdr, OP_GETATTR ) )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & savep ) )!= 0 ) goto out ; if ( unlikely ( status = - EIO ; if ( unlikely ( bitmap [ 0 ] & FATTR4_WORD0_ACL ) ) { size_t hdrlen ; u32 recvd ; if ( attrlen > req -> rq_rcv_buf. len - hdrlen ) { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen, recvd ) ; return - EINVAL ; } xdr_read_pages ( xdr, hdrlen ) ; * acl_len = hdrlen ; }",0
47,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
48,"<S2SV_ModStart> ':', & tok ) ; if ( owner && * owner ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { uid = HTTP -> uid ; } else { uid = 0 ; } } if ( group && * group ) { if ( snumber ( group ) ) { gid = ( int ) stoi ( group ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { gid = HTTP -> gid ; } else { gid = groupToID ( group ) ; } } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; }",0
49,"<S2SV_ModStart> ; # if CONFIG_MEM_MANAGER int number_aau ; if ( vpx_mm_create_heap_memory ( ) < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> create <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) } number_aau = ( ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ; addr = VPX_MALLOC_L ( size + align - 1 + ADDRESS_STORAGE_SIZE ) ; # endif <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr",0
50,<S2SV_ModStart> int res ; unsigned <S2SV_ModStart> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
51,"<S2SV_ModStart> HASH_DISABLED ; } else return apr_psprintf ( cmd -> pool, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"", p1",0
52,"<S2SV_ModStart> = 0 ; # if CONFIG_VP10_ENCODER else if ( strcmp ( global -> codec -> name, ""vp10"" ) == 0 ) { ctrl_args = vp10_args ; ctrl_args_map = vp10_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp11"" ) == 0 ) { ctrl_args = vp11_args ; ctrl_args_map = vp11_arg_ctrl_map ; # endif # if CONFIG_VP12_ENCODER else if ( strcmp ( global -> codec -> name, ""vp12"" ) == 0 ) { ctrl_args = vp12_args ; ctrl_args_map = vp12_arg_ctrl_map ; # endif } else if ( arg_match ( & arg, & outputfile, argi ) ) { config -> out_fn = arg. val ; } else if ( arg_match ( & arg, & fpf_name, argi ) ) { config -> stats_fn = arg. val ; } else if ( arg_match ( & arg, & use_ivf, argi ) ) { config -> write_webm =",0
53,"<S2SV_ModStart> } if ( <S2SV_ModEnd> verify_checks ( c <S2SV_ModStart> preverify_ok, callback_ctx ) ) { SSL_SESSION * sess = SSL_get1_session ( c -> ssl ) ; if (! sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } if (! sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } else { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0",0
54,"<S2SV_ModStart> ( memcmp ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE ) ) goto exit ; } if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) goto exit ; if ( at91_aes_cmac ( data_length, data, data, 0, key_size, cipher_key, iv ) ) goto exit ; if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv )",0
55,"<S2SV_ModStart> { # ifdef DISABLE_RC_LONG_TERM_MEM const uint64_t bits_used = cpi -> rc. projected_frame_size ; # else const uint64_t bits_used = cpi -> rc. this_frame_target ; # endif cpi -> twopass. bits_left -= bits_used ; cpi -> twopass. bits_left = MAX ( cpi -> twopass. bits_left, 0 ) ; if ( cpi -> common. frame_type == KEY_FRAME ) { cpi -> twopass. kf_group_bits += cpi -> rc. this_frame_target - bits_used ; } else { cpi -> twopass. kf_group_bits += cpi -> rc. this_frame_target - bits_used ; } cpi -> twopass. gf_group_bits += bits_used ; cpi -> twopass. gf_group_bits -= bits_used ; cpi -> twopass. gf_group_bits -= bits_used ; cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_",0
56,"<S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> do { if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; status = SetImage",0
57,"<S2SV_ModStart> } endpoint = usb_altnum_to_desc ( usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> num_alt",0
58,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
59,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> dir = ""/tmp"" <S2SV_ModEnd> ) == NULL <S2SV_ModStart> NULL ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> dir ) ) == NULL ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; return ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR (",0
60,<S2SV_ModStart> ; if ( 0 == ps_sps -> i1_sps_valid ) { ps_codec -> i4_sps_done = 1 ; return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> ; if ( 0 == ps_sps -> i1_sps_valid ) { ps_codec -> i4_sps_done = 1 ; return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> ; if ( 0 == ps_sps -> i1_sps_valid ) { ps_codec -> i4_sps_done = 1 ; ps_codec -> i4_sps_done = 0 ; return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> ; if ( 0 == ps_sps -> i1_sps_valid ) { ps_codec -> i4_sps_done = 1 ; return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> ; if ( 0 == ps_sps -> i1_sps_valid ) { ps_codec -> i4_sps_done = 1 ; ps_codec -> i4_sps_done = 1 ; return IHEVCD_INVALID_HEADER ; },0
61,"<S2SV_ModStart> ; if ( n < 0 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; }",0
62,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> vp9_setup_dst_planes ( MACROBLOCKD <S2SV_ModStart> mi_col ) { <S2SV_ModEnd> const uint8_t * <S2SV_ModStart> -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; int i ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y ) ; }",0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,"<S2SV_ModStart> == READ ) { ssize_t ret ; <S2SV_ModStart> = ocfs2_dio_get_block ; ret = __blockdev_direct_IO ( iocb, inode, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; } else { ret = __blockdev_direct_IO ( iocb, inode, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; }",0
65,"<S2SV_ModStart>, def, strparm ) == 2 ) { if ( strparm [ 0 ] == \'""\' ) { isstring = true ; len = strlen ( strparm ) ; newstring = ( char * ) malloc ( len ) ; strparm [ len - 1 ] = 0 ; } else if ( strparm [ 0 ] == \'""\' ) { isstring = true ; len = strlen ( strparm ) ; newstring = ( char * ) malloc ( len ) ; strparm [ len - 1 ] = 0 ; } else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else sscanf ( strparm + 2, ""%i"", & parm ) ; for ( i = 0 ; i < numdefaults ; i ++ ) if (! strcmp ( def, defaults [ i ]. name ) ) { if (! isstring ) * defaults [ i ]. location = parm ; else * defaults [ i ]. location = scantokey [ parm ] ; }",0
66,"<S2SV_ModStart> n ) { <S2SV_ModEnd> int all_whitespace = <S2SV_ModStart> ; char * str <S2SV_ModEnd> ; PyObject * <S2SV_ModStart> * o, * fstring_name <S2SV_ModEnd> ; Py_ssize_t len <S2SV_ModStart> ; o = PyUnicode_DecodeUTF8 ( expr_start, expr_end - expr_start, NULL ) ; if ( o == NULL ) return NULL ; len = PyUnicode_GET_LENGTH ( o ) ; kind = PyUnicode_KIND ( o ) ; data = PyUnicode_DATA ( o ) ; for ( i = 0 ; i < len ; i ++ ) { if (! PyUnicode_ISSPACE ( PyUnicode_READ ( kind, data, i ) ) ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } } str [ 0 ] = '(' ; memcpy ( str + 1, expr_start, len ) ; str [ len + 1 ] = ')' ; str [ len + 2 ] = 0 ; cf. cf_flags = PyCF_ONLY_AST ; fstring_name = PyUnicode_FromString ( ""<fstring>"" ) ; Py_DECREF ( fstring_name ) ;",0
67,<S2SV_ModStart> string ) { return ( cJSON * ) <S2SV_ModStart> -> child ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
68,<S2SV_ModStart> size ) ; if (! px -> ft ) return FALSE ;,0
69,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> l2tp_call_errors_print ( netdissect_options <S2SV_ModStart>, val_l ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ND_",0
70,"<S2SV_ModStart> void ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> "".git/foobar"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ""refs/heads/git_tilde1"", "".git/foobar"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ""refs/heads/git_tilde1"", "".git/foobar"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> "".git/foobar"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ""refs/heads/git_tilde1"", "".git/foobar"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> "".git/foobar"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ""refs/heads/git_tilde1"", "".git/foobar"" ) ; TEMP_FAILURE_RETRY (",0
71,"<S2SV_ModStart> int i ; const int strides [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const uint8_t * const buffers [ 4 ] = { src -> y_stride, src -> uv_buffer, src -> uv_buffer, src -> alpha_stride } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y, pd -> subsampling_x, pd -> subsampling_y ) ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ]",0
72,"<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ; for ( iov = msg -> msg_iov ; iovlen > 0 ; iov ++ ) { if (! msg -> msg_name ) msg -> msg_name = kzalloc ( sizeof ( * msg -> msg_name ), GFP_KERNEL ) ; msg -> msg_name = kzalloc ( sizeof ( * msg -> msg_name ), GFP_KERNEL ) ; if (! msg -> msg_name ) msg -> msg_name = kzalloc ( sizeof ( * msg -> msg_name ), GFP_KERNEL ) ; if (! msg -> msg_name ) msg -> msg_name = kzalloc ( sizeof ( * msg -> msg_name ), GFP_KERNEL ) ; msg -> msg_name = kzalloc ( sizeof ( * msg -> msg_name ), GFP_KERNEL ) ; if (! msg -> msg_name ) msg -> msg_name = kzalloc ( sizeof ( * msg -> msg_name ), GFP_KERNEL ) ; if (! msg -> msg_name ) msg -> msg_",0
73,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
74,<S2SV_ModStart> user ) { mutex_lock ( & ipmi_user_mutex ) ; <S2SV_ModStart> user ) ; mutex_unlock ( & ipmi_user_mutex ) ;,0
75,"<S2SV_ModStart> ; int sl = 0 ; int limit = 0 ; mongo_message * mm ; if ( cursor -> seen >= cursor -> limit ) { cursor -> err = MONGO_CURSOR_EXHAUSTED ; return MONGO_ERROR ; } mm = mongo_message_create ( 16 + 4 + 4 + 4 + 8, 0, 0, MONGO_OP_GET_MORE ) ; data = & mm -> data ; data = mongo_data_append ( data, cursor -> seen ) ; data = mongo_data_append ( data, cursor -> ns, sl ) ; data = mongo_data_append32 ( data, & limit ) ; mongo_data_append64 ( data, & cursor -> reply -> fields. cursorID ) ; bson_free ( cursor -> reply ) ;",0
76,"<S2SV_ModStart> * for_ch ; if ( TYPE ( CHILD ( n, 0 ) )!= TYPE_COMMENT ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } if ( is_async && c -> c_feature_version < 6 ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } for_ch = CHILD ( n, 1 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if ( NCH ( for_ch ) == 1 ) comp = comprehension ( first, expression, NULL, is_async, c -> c_arena ) ; else comp = comprehension ( Tuple ( t, Store, first -> lineno, first -> col_offset, c -> c_arena ) ; if",0
77,"<S2SV_ModStart> NULL ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe + 1 ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; dst_state -> frame [ i ] = dst ; } err = copy_func_state ( dst, src -> frame [ i ] ) ; if ( err ) return err ; dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe + 1 ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; dst_state -> frame [ i ] = dst ; } err = copy_func_state ( dst, src -> frame [ i ] ) ; if ( err ) return err ; dst_state -> frame [ i ] = dst ; }",0
78,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> write_mb_modes_kf ( const <S2SV_ModStart> * mi_8x8, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> ; const MODE_INFO * const above_mi = mi_8x8 [ - xd -> mi_stride ] ; const MODE_INFO * const left_mi = mi_8x8 [ - 1 ] ; const MB_MODE_INFO * const mbmi = & mi -> mbmi ; const BLOCK_SIZE bsize = mbmi -> sb_type ; if ( seg -> update_map ) write_segment_id ( w, seg, mbmi -> segment_id ) ; write_skip ( cpi, mbmi -> segment_id, mi, w ) ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size, bsize, w ) ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size,",0
79,"<S2SV_ModStart> maxn ) { switch ( actions [ n ]. SWF_ACTIONRECORD. ActionCode ) { case SWFACTION_END : return 0 ; case SWFACTION_CONSTANTPOOL : decompileCONSTANTPOOL ( & actions [ n ] ) ; return 0 ; case SWFACTION_GOTOFRAME : decompileGOTOFRAME ( n, actions, maxn, 1 ) ; case SWFACTION_GOTOFRAME2 : decompileGOTOFRAME2 ( n, actions, maxn, 0 ) ; case SWFACTION_GETURL2 : decompileGETURL2 ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETURL2 : decompileGETURL2 ( & actions [ n ] ) ; return 0 ; case SWFACTION_PUSHDUP : decompilePUSHDUP ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n, actions, maxn ) ; return 0 ; case SWFACTION_TRACE : decompileTRACE ( n, actions, maxn ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n, actions",0
80,"<S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( & prep -> pp_n ) ; <S2SV_ModStart> - 1 ) ; <S2SV_ModEnd> n = EXTRACT_32BITS <S2SV_ModStart> n >= 0 && ND_TTEST ( * ps ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %u/%s:%u"", ps -> slot, ps -> nid ) ) ; ps = ( const struct pgstate * ) ie ; while ( -- n >= 0 && ND_TTEST ( * ps ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %c%s:%u"", c, ipaddr_string ( ndo, & ps -> page. p_sid ), EXTRACT_32BITS ( & ps -> page. p_uid ) ) ) ; ps = ( const struct pgstate * ) ie ; for ( ie = io + ps -> nid ; io < ie ; ++ io ) { ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & io -> off ) ) ; c = ',' ; } ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( const struct pgstate *",0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,"<S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> * * azModuleArg = sqlite3DbRealloc ( db, pTable -> azModuleArg, nBytes ) ; if ( azModuleArg == 0 ) { sqlite3DbFree ( db, zArg ) ; return - 1 ; } <S2SV_ModStart> * * azModuleArg = sqlite3DbRealloc ( db, pTable -> azModuleArg, nBytes ) ; if ( azModuleArg == 0 ) { sqlite3DbFree ( db, zArg ) ; return - 1 ; }",0
83,<S2SV_ModStart> 1 ] ; if ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ]!= 0 ) { ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ] = 0 ; } <S2SV_ModStart> 1 ] ; if ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ]!= 0 ) { ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ] = 0 ; } <S2SV_ModStart> 1 ] ; if ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ]!= 0 ) { ptr,0
84,"<S2SV_ModStart> < q ) { if ( ONIGENC_IS_UNQUOTED ( reg -> enc ) ) { <S2SV_ModStart> enc, p ) ; } } else { if ( ONIGENC_IS_UNQUOTED ( reg -> enc ) ) { if (! ONIGENC_IS_UNQUOTED ( reg -> enc ) ) { if (! ONIGENC_IS_UNQUOTED ( reg -> enc ) ) { if (! ONIGENC_IS_UNQUOTED ( reg -> enc ) ) { ONIG_DEBUG_SEARCH ( stderr, ""forward_search_range: <S2SV_blank> str: <S2SV_blank> %s, <S2SV_blank> end: <S2SV_blank> %s\\n"", ( int ) str, ( int ) end ) ; } else { if (! ONIGENC_IS_UNQUOTED ( reg -> enc ) ) { if (! ONIGENC_IS_UNQUOTED ( reg -> enc ) ) { if (! ONIGENC_IS_UNQUOTED ( reg -> enc ) ) { ONIG_DEBUG_SEARCH ( stderr, ""forward_search_range: <S2SV_blank> str: <S2SV_blank> %s, <S2SV_blank> end: <S2SV_blank> %s\\n"", ( int ) str, ( int ) end",0
85,<S2SV_ModStart> * bfqq ) { struct bfq_data * bfqd = bfqq -> bfqd <S2SV_ModEnd> ; enum bfqq_expiration <S2SV_ModStart> flags ) ; if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfqq -> queued [ 0 ] == 0 && bfqq -> queued [ 1 ] == 0 ) reason = BFQQE_TOO_IDLE ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_TOO_IDLE ; else goto schedule_dispatch ; if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_TOO_,0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,"<S2SV_ModStart> + diffBlockLength || extraPtr + <S2SV_ModEnd> y > extraBlock <S2SV_ModStart> NULL ; } if ( diffPtr + x > diffBlock + diffBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } <S2SV_ModStart> + x ) ; if ( extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } <S2SV_ModStart> + x ) ; if ( extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; }",0
89,"<S2SV_ModStart> pktopts ) ; rcu_read_lock ( ) ; <S2SV_ModStart> np -> opt, & rcu_dereference ( <S2SV_ModStart> np -> tclass ), & rcu_dereference ( <S2SV_ModStart> np -> opt ), & rcu_dereference ( <S2SV_ModStart> np -> opt ), & rcu_dereference ( <S2SV_ModStart> np -> tclass ), & rcu_dereference ( <S2SV_ModStart> np -> opt ), & rcu_dereference ( rcu_dereference ( rcu_dereference ( rcu_dereference ( rcu_dereference ( <S2SV_ModStart> np -> opt ) ), & rcu_dereference ( rcu_dereference ( <S2SV_ModStart> np -> opt ), & rcu_dereference ( rcu_dereference ( rcu_dereference ( <S2SV_ModStart> np -> tclass ), & rcu_dereference ( rcu_dereference ( rcu_dereference ( rcu_dereference ( rcu_dereference ( rcu_dereference ( <S2SV_ModStart> np -> opt ) ) ), & rcu_dereference ( rcu_dereference ( rcu_",0
90,<S2SV_ModStart> VFF_TYP_BIT 0 # define VFF_TYP_1_BIT 1 # define VFF_TYP_2_BIT 2 # define VFF_TYP_4_BIT 4 # define VFF_TYP_DOUBLE 5 # define VFF_TYP_DOUBLE 7 # define VFF_TYP_BIT 0 # define VFF_TYP_BIT 0 # define VFF_TYP_1_BIT 0 # define VFF_TYP_1_BYTE 1 # define VFF_TYP_2_BYTE 2 # define VFF_TYP_4_BYTE 3 # define VFF_TYP_FLOAT 5 # define VFF_TYP_DOUBLE 7 # define VFF_MS_NONE 0 # define VFF_MS_SHARED 3 # define VFF_TYP_BIT 0 # define VFF_TYP_BIT 0 # define VFF_TYP_1_BIT 0 # define VFF_TYP_1_BYTE 1 # define VFF_TYP_2_BYTE 2 # define VFF_TYP_4_BYTE 4 # define VFF_TYP_DOUBLE 5 # define VFF,0
91,<S2SV_ModStart> data ) { const vpx_codec_priv_enc_mr_cfg_t * priv_enc_mr_cfg = ( vpx_codec_priv_enc_mr_cfg_t * ) data ; if ( priv_enc_mr_cfg ) * priv_enc_mr_cfg = ( vpx_codec_priv_enc_mr_cfg_t * ) priv_enc_mr_cfg ; * priv_enc_mr_cfg = ( vpx_codec_priv_enc_mr_cfg_t * ) priv_enc_mr_cfg ; * priv_enc_mr_cfg = ( vpx_codec_priv_enc_mr_cfg_t * ) priv_enc_mr_cfg ; * priv_enc_mr = ( vpx_codec_priv_enc_mr_cfg_t * ) priv_enc_mr_cfg ; * priv_enc_mr_cfg = ( vpx_codec_priv_enc_mr_cfg_t * ) priv_enc_mr_cfg ; * priv_enc_mr = ( vpx_codec_priv_enc_mr_cfg_t * ) priv_enc_mr,0
92,"<S2SV_ModStart> int Unpickler_ResizeMemoList ( UnpicklerObject <S2SV_ModEnd> * self, <S2SV_ModStart> new_size ) { Py_ssize_t i ; assert ( new_size > self -> memo_size ) ; PyMem_RESIZE ( self -> memo, PyObject *, new_size ) ; if ( self -> memo == NULL ) { PyErr_NoMemory ( ) ; return - 1 ; } PyObject * * memo_new = self -> memo ; PyMem_RESIZE ( memo_new, PyObject *, new_size ) ; if ( memo_new == NULL ) { PyErr_NoMemory ( ) ; return - 1 ; } PyMem_RESIZE ( memo_new, PyObject *, new_size ) ; if ( memo_new == NULL ) { PyErr_NoMemory ( ) ; return - 1 ; } self -> memo = memo_new ; for ( i = self -> memo_size ; i < new_size ; i ++ ) { PyMem_RESIZE ( memo_new, PyObject *, new_size ) ; if ( memo_new == NULL ) { PyErr_NoMemory ( ) ; return - 1 ; } self -> memo = memo",0
93,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
94,"<S2SV_ModStart> mbmi. mv. as_int ; mv_bias ( ref_frame_sign_bias [ above -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; vcnt ++ ; if ( left -> mbmi. ref_frame!= INTRA_FRAME ) { mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; near_ref [ vcnt ] = left -> mbmi. ref_frame ; }",0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,"<S2SV_ModStart> msicap ; pci_populate_msicap ( dev <S2SV_ModEnd>, msgnum,",0
98,"<S2SV_ModStart> REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'",0
99,"<S2SV_ModStart> vpx_codec_err_t res ; memset ( & ctx -> vp8_cfg, 0, sizeof ( ctx -> vp8_cfg ) ) ; <S2SV_ModStart> ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_w > ctx -> cfg. g_w ) || ( cfg -> g_h > ctx -> cfg. g_h ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_w > ctx -> cfg. g_w ) || ( cfg -> g_h > ctx -> cfg. g_h ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_w > ctx -> cfg. g_w ) || ( cfg -> g_h > ctx -> cfg. g_h ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_w > ctx -> cfg. g_w ) || ( cfg -> g_h > ctx -> cfg. g_h ) ) ERROR ( ""Cannot",0
100,<S2SV_ModStart> cpi ) { # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & VPX_FLAG_HIGHBITDEPTH ) cpi -> cur_buf -> flags &= ~ VPX_FLAG_HIGHBITDEPTH ; # endif <S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & VPX_FLAG_HIGHBITDEPTH ) cpi -> cur_buf -> flags &= ~ VPX_FLAG_HIGHBITDEPTH ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & VPX_FLAG_HIGHBITDEPTH ) cpi -> cur_buf -> flags &= ~ VPX_FLAG_HIGHBITDEPTH ; # endif <S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & VPX_FLAG_HIGHBITDEPTH ) cpi -> cur_buf -> flags &= ~ VPX_FLAG_HIGHBITDEPTH,0
101,"<S2SV_ModStart> ; if (! capable ( CAP_SYS_ADMIN ) ) return - EPERM ; if ( <S2SV_ModStart> - EPERM ; info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
102,<S2SV_ModStart> - 8 ; if ( tmp_strsize > sizeof ( char ) ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> - 8 ; if ( tmp_strsize > sizeof ( char ) ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> - 8 ; if ( tmp_strsize > sizeof ( char ) ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> - 8 ; if ( tmp_strsize > sizeof ( char ) ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> - 8 ; if ( tmp_strsize > sizeof ( char ) ) return GF_ISOM_INVALID_FILE ; if ( tmp_strsize > sizeof ( char ) ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> - 8 ; if ( tmp_strsize > sizeof ( char ) ) return GF_ISOM_INVALID_FILE ; if ( tmp_strsize > sizeof ( char ) ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> - 8 ; if ( tmp_strsize > sizeof ( char ) ) return GF_ISOM_INVALID_FILE ; if ( tmp_strsize > sizeof ( char ) ) return GF_ISOM_,0
103,<S2SV_ModStart> ) ; else if (! ctx -> priv -> alg_priv ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ctx -> iface -> enc. get_glob_hdrs ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ctx -> priv -> alg_priv -> get_glob_hdrs ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ctx -> priv -> alg_priv -> get_glob_hdrs ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ctx -> iface -> enc. get_glob_hdrs ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ctx -> priv -> alg_priv -> get_glob_hdrs ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ctx -> priv -> alg_priv -> get_glob_hdrs ) ctx -> err = VPX_CODEC_INCAPABLE ;,0
104,"<S2SV_ModStart> nfs4_state_set_mode_locked ( struct nfs4_state * state, fmode_t <S2SV_ModEnd> mode ) { <S2SV_ModStart> == mode ) { state -> state = mode ; return ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> FMODE_WRITE )!= ( state -> state & FMODE_WRITE ) ) { if ( ( state -> state & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { if ( state -> state & FMODE_READ ) list_move ( & state -> open_states, & state -> owner -> so_states ) ; } else { list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } } if ( ( state -> state & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { if ( ( state -> state & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { if ( state -> state & FMODE_READ ) list_move ( & state -> open_states, & state -> owner -> so_states ) ; } else { list_move_tail ( & state -> open_states, & state -> owner",0
105,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, pwp_image -> columns, pwp_image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> ) break ; status = SetImageExtent ( image, pwp_image -> columns, pwp_image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> ) break ; status = SetImageExtent ( image, pwp_image -> columns, pwp_image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
106,<S2SV_ModStart> 0 ; } memcpy <S2SV_ModEnd> ( elem.,0
107,"<S2SV_ModStart> i, ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] )",0
108,"<S2SV_ModStart> AV_PIX_FMT_PAL8 ; if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } else { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } <S2SV_ModStart> AV_PIX_FMT_PAL8 ; if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } else { if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_",0
109,"<S2SV_ModStart> 1 ) ; } if ( length == 0 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } <S2SV_ModStart> 1 ) ; if ( length == 0 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } <S2SV_ModStart> 1 ) ; if ( length == 0 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } <S2SV_ModStart> 1 ) ; if ( length == 0 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } <S2SV_ModStart> 1 ) ; if ( length == 0 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; }",0
110,"<S2SV_ModStart> { const char * name ; name = fit_get_name ( fit, noffset, NULL ) ; if (! strncmp ( name, FIT_SIG_NODENAME, strlen ( FIT_SIG_NODENAME ) ) ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) { puts ( ""- <S2SV_blank> "" ) ; verified = 1 ; break ; } } if ( noffset == - FDT_ERR_TRUNCATED || noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; }",0
111,"<S2SV_ModStart> ; if ( kfifo_alloc ( & state -> rx_kfifo, CX23888_IR_RX_KFIFO_SIZE, GFP_KERNEL ) ) return - ENOMEM ; state -> dev = dev ; sd = & state -> sd ; v4l2_subdev_init ( sd, & cx23888_ir_controller_ops ) ; v4l2_set_subdevdata ( sd, state ) ; ret = cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; if ( ret == 0 ) { cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; mutex_init ( & state -> rx_params_lock ) ; default_params = default_rx_params ; v4l2_subdev_call ( sd, ir, rx_s_parameters, & default_params ) ; mutex_init ( & state -> tx_params_lock ) ; ret = cx23888_ir_write4 ( dev, CX23888_IR",0
112,"<S2SV_ModStart> * iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> VPX_CODEC_ABI_MISMATCH ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) &&! ( iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & V",0
113,"<S2SV_ModStart> |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ;",0
114,<S2SV_ModStart> icmp_param ) ; IPCB ( skb_in ) -> icmp_type = type ; IPCB ( skb_in ) -> icmp_code = code ; IPCB ( skb_in ) -> icmp_type_code = code ; IPCB ( skb_in ) -> icmp_type_code = code ; IPCB ( skb_in ) -> icmp_type_code = code ; IPCB ( skb_in ) -> icmp_type_code = code ; IPCB ( skb_in ) -> icmp_type_code = code ; IPCB ( skb_in ) -> icmp_code = code ; IPCB ( skb_in ) -> icmp_type_code = code ; IPCB ( skb_in ) -> icmp_type_code = code ; IPCB ( skb_in ) -> icmp_type_code = code ; IPCB ( skb_in ) -> icmp_type_code = code ; IPCB ( skb_in ) -> icmp_type_code = code ; IPCB ( skb_in ) -> icmp_code = code ; IPCB (,0
115,<S2SV_ModStart> VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) && ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_,0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,"<S2SV_ModStart> -> counter ) ; xdr_write_ulong ( xdr, <S2SV_ModStart> -> open_flags ) ; xdr_write_ulong ( xdr, 0 <S2SV_ModEnd> ) ; RESERVE_SPACE",0
118,"<S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ""modify_bar_registration: <S2SV_blank> bypass <S2SV_blank> for <S2SV_blank> pci-gvt\\n"" ) ; return - ENODEV <S2SV_ModEnd> ; } switch <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
119,<S2SV_ModStart> & snes_op [ <S2SV_ModEnd> data [ 0 <S2SV_ModStart> & snes_op [ <S2SV_ModEnd> data [ 0 <S2SV_ModStart> & snes_op [ <S2SV_ModEnd> data [ 0 <S2SV_ModStart> & snes_op [ <S2SV_ModEnd> data [ 0 <S2SV_ModStart> & snes_op [ <S2SV_ModEnd> data [ 0 <S2SV_ModStart> & snes_op [ <S2SV_ModEnd> data [ 0 <S2SV_ModStart> & snes_op [ <S2SV_ModEnd> data [ 0 <S2SV_ModStart> & snes_op [ <S2SV_ModEnd> data [ 0 <S2SV_ModStart> & snes_op [ <S2SV_ModEnd> data [ 0 <S2SV_ModStart> ] & snes_op [ <S2SV_ModEnd> data [ 0 <S2SV_ModStart> & snes_op [ <S2SV_ModEnd> data [ 0 <S2SV_ModStart> & snes_op [ <S2SV_ModEnd> data [ 0 <S2SV_ModStart> & snes_op [ <S2SV_ModEnd> data [ 0 <S2SV_ModStart> & snes_op [ <S2SV_ModEnd> data [ 0 <S2SV_ModStart> & snes_op [ <S2SV_ModEnd> data [ 0 <S2SV_ModStart> & snes_op [ <S2SV_ModEnd> data [ 0 <S2SV_ModStart> & snes_op [ <S2SV_ModEnd> data [ 0 <S2SV_ModStart> & snes_op [ <S2SV_ModEnd> data [ 0,0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,"<S2SV_ModStart> goto trunc ; if ( lshp -> ls_length < 2 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> 0x%08x, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_router ), EXTRACT_32BITS ( & lshp -> ls_seq ), lshp -> ls_length ) ; } else { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> 0x%08x, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_router ), EXTRACT_32BITS ( & lshp -> ls_seq ), EXTRACT_16BITS ( & lshp -> ls_age ), lshp -> ls_length )",0
122,<S2SV_ModStart> } else { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; pipe_buf_mark_unmergeable ( obuf ) ; <S2SV_ModStart> } else { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; opipe -> nrbufs ++ ; ibuf -> offset += obuf -> len ; opipe -> curbuf = ( opipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; opipe -> curbuf = ( opipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; opipe -> curbuf = ( opipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; opipe -> curbuf = ( opipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; opipe -> curbuf = ( opipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; opipe -> curbuf = ( opipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; opipe -> curbuf = ( opipe -> curbuf + 1 ) &,0
123,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
124,"<S2SV_ModStart> fd = open ( dev_path <S2SV_ModEnd>, O_RDWR | <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY (",0
125,"<S2SV_ModStart> costs, vpx_tree <S2SV_ModEnd> * tree, <S2SV_ModStart> c ) { vpx_tree <S2SV_ModEnd> prob = probs <S2SV_ModStart> b ) ; vpx_tree_index <S2SV_ModEnd> ii = tree",0
126,"<S2SV_ModStart> write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",0
127,"<S2SV_ModStart> & 0xffff ; if ( synth_devs [ dev ] -> load_patch ) err = synth_devs [ dev ] -> load_patch ( dev, fmt, buf, p + 4, c, 0",0
128,"<S2SV_ModStart> fadst16 ( const tran_low_t * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> 15 ] ; tran_high_t x1 = input [ 0 ] ; tran_high_t x2 = input [ 13 ] ; tran_high_t x3 = input [ 4 ] ; tran_high_t x4 = input [ 11 ] ; tran_high_t x5 = input [ 5 ] ; tran_high_t <S2SV_ModEnd> x6 = input <S2SV_ModStart> 7 ] ; tran_high_t <S2SV_ModEnd> x8 = input <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 7 ] ; tran_high_t <S2SV_ModEnd> x10 = input <S2SV_ModStart> 10 ] ; tran_high_t <S2SV_ModEnd> x11 = input <S2SV_ModStart> 12 ] ; tran_high_t <S2SV_ModEnd> x13 = input <S2SV_ModStart> 1 ] ; tran_high_t <S2SV_ModEnd> x15 = input",0
129,<S2SV_ModStart> mask ) ; # if HAVE_EDSP flags |= HAS_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON flags |= HAS_NEON ; # endif # if HAVE_NEON flags |= HAS_NEON ; # endif,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
131,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> count_segs_sb ( VP9_COMP <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd>, int * <S2SV_ModStart> bsize ) { <S2SV_ModEnd> const int bs <S2SV_ModStart> ] ; bh = num_8x8_blocks_high_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; if ( bw < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, mi_row, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, hbs, mi_row + hbs, mi_col ) ; count_segs ( cpi, tile, mi_8x8 + hbs * mis, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts,",0
132,<S2SV_ModStart> break ; if ( c -> flags & CLIENT_CLOSE_AFTER_REPLY,0
133,"<S2SV_ModStart> = 0 ; new. b_size = mpd -> b_size ; <S2SV_ModStart> get_blocks_flags = EXT4_GET_BLOCKS_CREATE ; if ( mpd -> b_state & ( 1 << BH_Delay ) ) get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE ; err = ext4_journal_get_blocks ( handle, mpd -> inode, next, max_blocks, & new, get_blocks_flags ) ; if ( err ) { ext4_msg ( mpd -> inode -> i_sb, KERN_CRIT, ""delayed <S2SV_blank> block <S2SV_blank> allocation <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> at <S2SV_blank> "" ""logical <S2SV_blank> offset <S2SV_blank> %llu <S2SV_blank> with <S2SV_blank> max <S2SV_blank> blocks <S2SV_blank> %zd <S2SV_blank> with <S2SV_blank> error <S2SV_blank> %d\\n"", mpd -> inode -> i_ino, ( unsigned long long ) next, mpd -> b_size >> mpd -> inode -> i_blkbits, err ) ; if ( mpd -> b_state & ( 1 << BH_Delay ) ) get_blocks_flags |= EXT4_GET_BLOCKS_DEL",0
134,"<S2SV_ModStart> = 0 ; size_t canonnamelen = 0 ; <S2SV_ModStart>, handle, & canonnamelen, & p -> ai_family, & p -> ai_socktype, & p -> ai_protocol, & p -> ai_addrlen, NULL, & canonnamelen, NULL )!= OE_OK ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval!= - 1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval!= - 1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval!= - 1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval!= - 1",0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart>, ':' ) ; if ( separator == NULL ) { separator = osStrchr ( token, '=' ) ; if ( separator == NULL ) { separator = osStrchr ( token, '=' ) ; if ( separator == NULL ) { separator = osStrchr ( token, '=' ) ; if ( separator == NULL ) { separator = osStrchr ( token, '=' ) ; if ( separator == NULL ) { separator = osStrchr ( token, '=' ) ; if ( separator == NULL ) { separator = osStrchr ( token, '=' ) ; if ( separator == NULL ) { separator = osStrchr ( token, '=' ) ; if ( separator == NULL ) { separator = osStrchr ( token, '=' ) ; if ( separator == NULL ) { separator = osStrchr ( token, '=' ) ; if ( separator == NULL ) { separator = osStrchr ( token, '=' ) ; if ( separator == NULL ) { separator = osStrchr ( token, '=' ) ; if ( separator == NULL ) { separator = osStrchr ( token, '=' ) ; if ( separator == NULL ) { separator = osStrchr ( token, '=' ) ; if ( separator ==",0
136,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
137,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( pegasus_t <S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> 100 ) ; kfree ( buf ) ;",0
138,"<S2SV_ModStart> asdl_seq * body, PyArena * arena ) { mod_ty * p ; p = ( mod_ty * ) PyArena_Malloc ( arena, sizeof ( * p ) ) ; if (! p ) return NULL ;",0
139,"<S2SV_ModStart>, int64_t ts_start, int64_t ts_end, unsigned int flags ) { struct lookahead_entry * buf ; # if USE_PARTIAL_COPY int row, col, active_end ; int mb_cols = ( src -> y_height + 15 ) >> 4 ; int mb_rows = ( src -> y_width + 15 ) >> 4 ; int mb_cols = ( src -> y_width + 15 ) >> 4 ; int mb_rows = ( src -> y_height + 15 ) >> 4 ; int mb_cols = ( src -> y_width + 15 ) >> 4 ; int active_map = 0 ; # if USE_PARTIAL_COPY if ( ctx -> max_sz == 1 && active_map &&! flags ) { for ( row = 0 ; row < mb_rows ; ++ row ) { col = 0 ; while ( 1 ) { for ( ; col < mb_cols ; ++ col ) { if (! active_map [ col ] ) break ; } vp9_copy_and_extend_frame_with_rect ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col",0
140,"<S2SV_ModStart> if ( method == LPF_PICK_FROM_Q ) { const int min_filter_level = 0 ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; lf -> filter_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ; lf -> sharpness_level = clamp ( lf -> sharpness_level, min_filter_level, max_filter_level ) ; } else { const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; lf -> filter_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ; }",0
141,<S2SV_ModStart> } break ; case BTA_DM_DISABLE_EVT : { BD_NAME bdname ; bt_status_t status ; status = btif_storage_get_adapter_property ( & bdname ) ; if ( status == BT_STATUS_SUCCESS ) { BTA_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } else { BTA_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } # if defined ( BLE_INCLUDED ) && ( BLE_INCLUDED == TRUE ) BTA_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_ENABLED ) ; if ( status == BT_STATUS_SUCCESS ) { BTA_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } else { BTA_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } # if defined ( BLE_INCLUDED ) && ( BLE_INCLUDED == TRUE ) BTA_DmBleConfigLocalPrivacy (,0
142,"<S2SV_ModStart> : { int <S2SV_ModEnd> a = getnum <S2SV_ModStart> MAXALIGN ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; h -> align = a ; return ; } case '!' : { int a = getnum ( fmt, MAXALIGN ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; h -> align = a ; return ; } case '!' : { int a = getnum ( fmt, MAXALIGN ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; h -> align = a ; return ; } case '!' : { int a = getnum ( fmt, MAXALIGN ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; h -> align = a ; return ; }",0
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,"<S2SV_ModStart> vpx_codec_err_t res ; # if CONFIG_VP9_HIGHBITDEPTH if ( ( unsigned int ) data_sz > VPX_CODEC_MAX_DATA_SIZE ) return VPX_CODEC_MAX_DATA_SIZE ; # endif <S2SV_ModStart> dec. decode ( NULL, data, data_sz, user_priv, deadline ) ; if ( ( unsigned int ) data_sz > VPX_CODEC_MAX_DATA_SIZE ) return VPX_CODEC_ERROR ; # if CONFIG_VP9_HIGHBITDEPTH if ( ( unsigned int ) data_sz > VPX_CODEC_MAX_DATA_SIZE ) return VPX_CODEC_MAX_DATA_SIZE ; # endif <S2SV_ModStart> dec. decode ( NULL, data, data_sz, user_priv, deadline ) ; if ( ( unsigned int ) data_sz > VPX_CODEC_MAX_DATA_SIZE ) return VPX_CODEC_MAX_DATA_SIZE ; # if CONFIG_VP9_HIGHBITDEPTH if ( ( unsigned int ) data_sz > VPX_CODEC_MAX_DATA_SIZE ) return V",0
145,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> isofs_read_inode ( struct <S2SV_ModStart> inode ) ; if ( de -> name_len > inode -> i_sb -> s_blocksize - inode -> i_sb -> s_blocksize - 1 ) { if ( de -> name_len > inode -> i_sb -> s_blocksize - 1 ) inode -> i_sb -> s_blocksize = inode -> i_sb -> s_blocksize - 1 ; } if ( de -> name_len > inode -> i_sb -> s_blocksize - 1 ) inode -> i_sb -> s_blocksize = inode -> i_sb -> s_blocksize - 1 ; if ( de -> name_len > inode -> i_sb -> s_blocksize - 1 ) { if ( de -> name_len > inode -> i_sb -> s_blocksize - 1 ) inode -> i_sb -> s_blocksize = inode -> i_sb -> s_blocksize - 1 ; if ( de -> name_len > inode -> i_sb -> s_blocksize - 1 ) inode -> i_sb -> s_block,0
146,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> = sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> = sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> = sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> = sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> = sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> = sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"",",0
147,<S2SV_ModStart> self ) { if ( self -> dict ) { Py_CLEAR ( self -> dict ) ; Py_TYPE ( self ) -> tp_free ( self ) ; },0
148,"<S2SV_ModStart> ; for ( i = 0 ; a && i < count ; ++ i ) { n = cJSON_CreateString ( strings [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } for ( ; i < count ; ++ i ) { n = cJSON_CreateString ( strings [ i ] ) ; if (! n ) a -> child = cJSON_CreateString ( strings [ i ] ) ; if (! i ) a -> child = cJSON_CreateString ( strings [ i ] ) ; if (! i ) a -> child = cJSON_CreateString ( strings [ i ] ) ; if (! i ) a -> child = cJSON_CreateString ( strings [ i ] ) ; if (! i ) a -> child = cJSON_CreateString ( strings [ i ] ) ; if (! n ) a -> child = cJSON_CreateString ( strings [ i ] ) ; if (! i ) a -> child = cJSON_CreateString ( strings [ i ] ) ; if (! i ) a -> child = cJSON_CreateString ( strings [ i ] ) ; if (!",0
149,"<S2SV_ModStart> ; if ( _PyObject_HasAttrId <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; Py_ssize_t i ; tmp = _PyObject_GetAttrId ( obj, & PyId_body ) ; if ( tmp == NULL ) goto failed ; if (! PyList_Check ( tmp ) ) { PyErr_Format ( PyExc_TypeError, ""Module <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> must <S2SV_blank> be <S2SV_blank> a <S2SV_blank> list, <S2SV_blank> not <S2SV_blank> a <S2SV_blank> %.200s"", tmp -> ob_type -> tp_name ) ; goto failed ; } len = PyList_GET_SIZE ( tmp ) ; body = _Ta3_asdl_seq_new ( len, arena ) ; if ( body == NULL ) goto failed ; for ( i = 0 ; i < len ; i ++ ) { stmt_ty value ; res = obj2ast_stmt ( PyList_GET_ITEM ( tmp, i ), & value, arena ) ; if ( res!= 0 ) goto failed ; if ( len!= PyList_GET_SIZE ( tmp ) ) { PyErr_SetString ( PyExc_RuntimeError, ""Module <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> changed <S2SV_blank> size <S2SV_blank>",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,"<S2SV_ModStart> msg ) ; err = security_verify_iovec ( msg_sys, iov, & addr, VERIFY_WRITE ) ; if ( err < 0 ) goto out_freeiov ; <S2SV_ModStart> ) ; } else { err = security_verify_iovec ( msg_sys, iov, & addr, VERIFY_READ ) ; if ( err < 0 ) goto out_freeiov ; total_len = err ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( err < 0 ) goto out_freeiov ; err = security_verify_iovec ( msg_sys, iov, & addr, VERIFY_READ ) ; if ( err < 0 ) goto out_freeiov ;",0
152,"<S2SV_ModStart> inode ) ; struct metapath * mp2 = & mp -> mp_mat2 ; struct buffer_head * dibh = mp -> mp_dibh [ height - 1 ] ; u64 bn, dblock = 0 ; unsigned n, blks, alloced = 0, iblks = 0, branch_start = 0 ; unsigned ptrs_per_blk ; const unsigned end_of_metadata = height - 1 ; int eob = 0 ; gfs2_trans_add_bh ( ip -> i_gl, dibh, 1 ) ; if ( height == 1 ) { struct buffer_head * bh ; ptr = metapointer ( end_of_metadata, mp ) ; bh = mp -> mp_bh [ end_of_metadata ] ; dblks = min ( maxlen, ptrs_per_blk - mp -> mp_list [ end_of_metadata ] ) ; state = ALLOC_DATA ; } else if ( height == 1 ) { struct buffer_head * bh ; bh = mp -> mp_bh [ end_of_metadata ] ; bh = mp -> mp_bh [ end_of_",0
153,"<S2SV_ModStart> -> codec -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> next || stream -> index ) ; if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> index ) ; if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> index ) ; if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> index ) ; if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"",",0
154,"<S2SV_ModStart> ; if ( value == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> value <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } if ( valueAVT == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> value <S2SV_blank> of <S2SV_blank> a <S2SV_blank> literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } if ( valueAVT == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> value <S2SV_blank> of <S2SV_blank> a <S2SV_blank> literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } if ( valueAVT == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> value <S2SV_blank> of <S2SV_blank> a <S2SV_blank> literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ;",0
155,"<S2SV_ModStart> 0 ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; <S2SV_ModStart> 0 ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch""",0
156,<S2SV_ModStart> % 4096 == 0 ) ; if ( ( barnum & PCIM_MSIX_BIR_MASK )!= ( barnum & PCIM_MSIX_BIR_MASK ) ) || ( msix_tab_size & PCIM_MSIX_BIR_MASK )!= ( barnum & PCIM_MSIX_BIR_MASK ) || ( barnum & PCIM_MSIX_BIR_MASK )!= ( barnum & PCIM_MSIX_BIR_MASK ) || ( barnum & PCIM_MSIX_BIR_MASK )!= ( barnum & PCIM_MSIX_BIR_MASK ) || ( msix_tab_size & PCIM_MSIX_BIR_MASK )!= ( barnum & PCIM_MSIX_BIR_MASK ) || ( barnum & PCIM_MSIX_BIR_MASK )!= ( barnum & PCIM_MSIX_BIR_MASK ) || ( barnum & PCIM_MSIX_BIR_MASK )!= ( barnum & PCIM_MSIX_BIR_MASK ),0
157,"<S2SV_ModStart>! js_regexec ( J <S2SV_ModEnd> -> prog,",0
158,"<S2SV_ModStart> case OFreshOID : if <S2SV_ModEnd> ( Int_val ( <S2SV_ModStart> ) ) >= 0 ) caml_set_oo_id ( ( value ) dest ) ; break ; case OShift : * dest += sp -> arg ; break ; case OReadItems : if ( size == 0 ) { v = Atom ( tag ) ; } else { v = Make_header ( size, tag, intern_color ) ; intern_dest += 1 + size ; if ( tag == Object_tag ) { Assert ( size >= 2 ) ; ReadItems ( & Field ( v, 2 ), size - 2 ) ; PushItem ( ) ; sp -> op = OFreshOID ; sp -> dest = ( value * ) v ; if ( tag == Object_tag ) { Assert ( size >= 2 ) ; ReadItems ( & Field ( v, 0 ), size - 2 ) ; } else { v = Make_header ( size, tag, intern_color ) ; intern_dest += 1 + size ; if ( tag == Object_tag ) { Assert ( size >= 2 ) ; ReadItems ( & Field ( v, 2 ), size - 2 ) ; PushItem ( ) ; sp -> op = OFreshOID ; sp ->",0
159,"<S2SV_ModStart> ; ier = ksz8851ReadReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ; ksz8851WriteReg ( interface, KSZ8851_IER, 0 ) ; isr = ksz8851ReadReg ( interface, KSZ8851_ISR ) ; if ( ( isr & ISR_LCIS )!= 0 ) { ier |= IER_LCIE ; interface -> nicEvent = TRUE ; flag |= osSetEventFromIsr ( & netEvent ) ; } if ( ( isr & ISR_TXIS )!= 0 ) { ier |= IER_TXIE ; interface -> nicTxEvent = TRUE ; flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } if ( ( isr & ISR_RXIS )!= 0 ) { ier &= ~ IER_RXIE ; interface -> nicEvent = TRUE ; flag |= osSetEventFromIsr ( & netEvent ) ; } if ( ( isr & ISR_RXIS )!= 0 ) { ier |= IER_RXIE ; interface -> nicTxEvent = TRUE ; flag |= osSetEventFromIsr ( & interface",0
160,"<S2SV_ModStart> void encode_quantization ( VP9_COMMON * cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm -> base_qindex, QINDEX_BITS ) ; write_delta_q ( wb, cm -> y_dc_delta_q ) ; write_delta_q ( wb, cm -> uv_ac_delta_q ) ; write_delta_q ( wb, cm -> x_ac_delta_q ) ; write_delta_q ( wb, cm -> y_ac_delta_q ) ; write_delta_q ( wb, cm -> x_dc_delta_q ) ; write_delta_q ( wb, cm -> y_ac_delta_q ) ; write_delta_q ( wb, cm -> x_ac_delta_q ) ; write_delta_q ( wb, cm -> y_ac_delta_q ) ; write_delta_q ( wb, cm -> x_ac_delta_q ) ; write_delta_q ( wb, cm ->",0
161,"<S2SV_ModStart> ( write ( uipc_main. ch [ ch_id ]. fd, p_buf, msglen",0
162,"<S2SV_ModStart> ; if ( ( localrsa = d2i_RSAPublicKey_bio ( rawcert, NULL ) ) == NULL || ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == NULL ) { log_debug ( ""%s: <S2SV_blank> Invalid <S2SV_blank> public <S2SV_blank> key: <S2SV_blank> %s"", __func__, print_map ( id -> id_type, ikev2_id_map ) ) ; goto sslerr ; } if ( ( localrsa = d2i_RSAPublicKey_bio ( rawcert, NULL ) ) ) == NULL || ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == NULL ) { log_debug ( ""%s: <S2SV_blank> Invalid <S2SV_blank> public <S2SV_blank> key: <S2SV_blank> %s"", __func__, print_map ( id -> id_type, ikev2_id_map ) ) ; goto sslerr ; }",0
163,"<S2SV_ModStart> t1_line_array ) ; if ( strcmp ( t1_buf_array, t1_line_array )!= 0 ) strcpy ( t1_buf_array, t1_line_array ) ; if ( strcmp ( t1_buf_array, t1_line_array )!= 0 ) strcpy ( t1_line_array, t1_buf_array ) ; if ( strcmp ( t1_buf_array, t1_line_array )!= 0 ) strcpy ( t1_line_array, t1_buf_array ) ; if ( strcmp ( t1_buf_array, t1_line_array )!= 0 ) strcpy ( t1_buf_array, t1_line_array ) ; if ( strcmp ( t1_buf_array, t1_line_array )!= 0 ) strcpy ( t1_buf_array, t1_line_array ) ; t1_line_ptr = eol ( t1_buf_array ) ;",0
164,"<S2SV_ModStart>, BLOCK_SIZE subsize, MACROBLOCKD * x_mbd <S2SV_ModStart> int bsl = b_width_log2_lookup [ bsize ] <S2SV_ModEnd>, hbs = <S2SV_ModStart> / 4 ; <S2SV_ModEnd> switch ( partition <S2SV_ModStart> case PARTITION_NONE : * get_sb_index ( x, subsize ) = 0 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col ) ; break ; case PARTITION_VERT : * get_sb_index ( x, subsize ) = 1 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; break ; case PARTITION_HORZ : * get_sb_index ( x, subsize ) =",0
165,"<S2SV_ModStart> ret = key_permission ( key_ref, KEY_NEED_READ ) ; if ( ret == 0 ) goto can_read_key ; if ( key -> type -> read ) ret = - EOPNOTSUPP ; if ( key -> type -> read ( key, buffer, buflen ) ; if ( ret == - EOPNOTSUPP ) ret = - EOPNOTSUPP ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( key -> type -> read ) ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( key -> type -> read ) ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == - EOPNOTSUPP ) ret = - EOPNOTSUPP ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( key -> type -> read ) ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if (",0
166,"<S2SV_ModStart> u4_first_slice_in_pic ) { memset ( ps_dec -> u4_first_slice_in_pic, 0, sizeof ( ps_dec -> u4_first_slice_in_pic ) ) ; memset ( ps_dec -> u4_first_slice_in_pic, 0, sizeof ( ps_dec -> u4_first_slice_in_pic ) ) ; <S2SV_ModStart> u4_first_slice_in_pic ) { memset ( ps_dec -> u4_first_slice_in_pic, 0, sizeof ( ps_dec -> u4_first_slice_in_pic ) ) ; memset ( ps_dec -> u4_first_slice_in_pic, 0, sizeof ( ps_dec -> u4_first_slice_in_pic ) ) ; memset ( ps_dec -> u4_first_slice_in_pic, 0, sizeof ( ps_dec -> u4_first_slice_in_pic ) ) ; memset ( ps_dec -> u4_first_slice_in_pic, 0, sizeof ( ps_dec -> u4_first_slice_",0
167,"<S2SV_ModStart> dst_reg -> var_off ) ; if (! src_known ||! dst_known ) return 0 <S2SV_ModStart> case BPF_ADD : if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } <S2SV_ModStart> case BPF_SUB : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } if ( dst_reg -> umin_value + umin_val < umin_val || dst_reg -> umax_value + umax_val < umax_val ) { dst_reg -> umin_value = 0 ; dst_reg -> umax_value = U64_",0
168,"<S2SV_ModStart> == NULL ) { cFYI ( 1, ""parent <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode, direntry -> d_name. name, direntry ) ; cFYI ( 1, ""non-NULL <S2SV_blank> file <S2SV_blank> = <S2SV_blank> 0x%p"", direntry -> d_inode ) ; cFYI ( 1, ""non-NULL <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode, direntry -> d_name. name, direntry ) ; cFYI ( 1, ""non-NULL <S2SV_blank> file <S2SV_blank> = <S2SV_blank> 0x%p"", direntry -> d_inode ) ; cFYI ( 1, ""non-NULL <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode, direntry -> d_name. name, direntry ) ; }",0
169,"<S2SV_ModStart> = rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ), sock_owned_by_user ( sk ) ) ;",0
170,"<S2SV_ModStart> { int number_of_frames, <S2SV_ModEnd> number_of_keyframes, encode_frame_count <S2SV_ModStart> ; svc_log_reset ( svc_ctx ) ; <S2SV_ModEnd> encode_frame_count = si <S2SV_ModStart> ; if ( <S2SV_ModEnd> encode_frame_count <= 0 <S2SV_ModStart> ""\\n"" ) ; <S2SV_ModEnd> number_of_keyframes = encode_frame_count <S2SV_ModStart> ; if ( <S2SV_ModEnd> encode_frame_count <= 0 <S2SV_ModStart> ""\\n"" ) ; <S2SV_ModEnd> for ( i <S2SV_ModStart> ++ i ) { number_of_frames = encode_frame_count ; if ( svc_ctx -> encoding_mode == ALT_INTER_LAYER_PREDICTION_IP && ( i == 1 || i == 3 ) ) { number_of_frames -= number_of_keyframes ; } svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes=[%u]\\n"", i, ( double ) si -> psnr_sum [ i ] [ 0 ] / number_of_frames, ( double ) si -> psnr_sum [ i",0
171,"<S2SV_ModStart> -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if ( new_cols > old_cols ) { VTermRect rect ; rect. start_row = 0 ; rect. start_col = 0 ; scrollrect ( rect, first_blank_row - new_rows, 0, user ) ; vterm_screen_flush_damage ( screen ) ; delta -> row -= first_blank_row - new_rows ; scrollrect ( rect, first_blank_row - new_rows, 0, user ) ; vterm_screen_flush_damage ( screen ) ; delta -> row -= first_blank_row - new_rows ; } if ( screen -> buffer ) vterm_allocator_free ( screen -> vt, screen -> buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt,",0
172,<S2SV_ModStart> { const char * literal_start = * str ; const char * literal_end = * str ; int in_named_escape = 0 ; int result = 0 ; assert ( * literal == NULL ) ; for ( ; * str < end ; ( * str ) ++ ) { char ch = * * str ; if (! in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( ch == '{' || ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '{' || ch == '}' ) { if (,0
173,"<S2SV_ModStart> = create_dump_dir_from_problem_data ( <S2SV_ModEnd> pd, g_settings_dump_location",0
174,<S2SV_ModStart> ; if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height,0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
176,"<S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_cost",0
177,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> mi_col ; MODE_INFO <S2SV_ModEnd> * * mi_8x8 <S2SV_ModStart> MODE_INFO * * prev_mi_8x8 <S2SV_ModEnd> = cm -> <S2SV_ModStart> idx_str = cm -> prev_mi_grid_visible + idx_str <S2SV_ModEnd> ; MODE_INFO * <S2SV_ModStart> MODE_INFO * * prev_mi_8x8 <S2SV_ModEnd> = cm -> <S2SV_ModStart> prev_mi_8x8 = cm -> prev_mi_grid_visible + idx_str <S2SV_ModStart> MODE_INFO * * prev_mi_8x8 <S2SV_ModEnd> = cm -> <S2SV_ModStart> -> prev_mi_grid_visible + idx_str <S2SV_ModEnd> ; BLOCK_SIZE bsize <S2SV_ModStart> ) { switch ( cpi -> sf. partition_search_type ) { case VAR_BASED_PARTITION : choose_partitioning ( cpi, tile, mi_row, mi_col ) ; nonrd_use_partition ( cpi, tile, mi_row, mi_col, BLOCK_64X64, 1, & dummy_rate, & dummy_dist ) ; break ; case SOURCE_",0
178,"<S2SV_ModStart> ; dh = skb_header_pointer <S2SV_ModEnd> ( skb,",0
179,"<S2SV_ModStart> int ip_options_get_finish ( struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> optp, struct ip_options_rcu <S2SV_ModEnd> * opt, <S2SV_ModStart> int optlen ) { struct ip_options_rcu * rc = & net -> ipv4. ip_options ; <S2SV_ModStart> & 3 ) rc -> __data [ rc -> __data [ rc -> __data [ rc -> __data [ rc -> __data [ rc -> __data [ rc ] ] ] <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> & 3 ) rc -> __data [ rc -> __data [ rc -> __data [ rc -> __data [ rc -> __data [ rc -> __data [ rc -> __data [ rc -> __data [ rc -> __data [ rc -> __data [ rc -> __data [ rc -> __data [ rc -> __data [ rc -> __data. ip_data. ip_data. ip_data. ip_data. ip_data. ip_data. ip_data. ip_data. ip_data. ip_data. ip_data. ip_data. ip_data. ip_data. ip_data. ip_data. ip_data. ip_data",0
180,"<S2SV_ModStart> ""Connection"" ) ; if ( strlen ( connection ) == 0 ) goto error ; else { bool found_upgrade = false ; int count ; sds * tokens = sdssplitlen ( connection, strlen ( connection ), "","", 1, & count ) ; if ( tokens == NULL ) goto error ; for ( int i = 0 ; i < count ; i ++ ) { sds token = tokens [ i ] ; sdstrim ( token, ""Upgrade"" ) ; if ( strcasecmp ( token, ""Upgrade"" ) == 0 ) { found_upgrade = true ; break ; } } else { bool found_upgrade = false ; int count ; sds * tokens = sdssplitlen ( connection, strlen ( connection ), "","", 1, & count ) ; if ( tokens == NULL ) goto error ; for ( int i = 0 ; i < count ; i ++ ) { sds token = tokens [ i ] ; sdstrim ( token, ""Upgrade"" ) ; if ( strcasecmp ( token, ""Upgrade"" ) == 0 ) { found_upgrade = true ; break ; } } sdsfreesplitres ( tokens, count ) ; if (! found_upgrade ) goto error ;",0
181,"<S2SV_ModStart> uint16 nif = 0 ; memset ( errmsgbuf, 0, sizeof ( errmsgbuf ) ) ; if ( pcap_findalldevs ( & alldevs, errmsgbuf ) == - 1 ) { return - 1 ; } if ( pcap_findalldevs ( & findalldevs_if, errmsgbuf ) == - 1 ) { if ( rpcap_senderror ( pars -> sockctrl, ver, PCAP_ERR_NOREMOTEIF, ""No <S2SV_blank> interfaces <S2SV_blank> found! <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed"" "" <S2SV_blank> and <S2SV_blank> you <S2SV_blank> have <S2SV_blank> the <S2SV_blank> right <S2SV_blank> to <S2SV_blank> access <S2SV_blank> to <S2SV_blank> the <S2SV_blank> remote <S2SV_blank> device."", errbuf ) ; return - 1 ; } if ( pcap_findalldevs ( & findalldevs_if, errmsgbuf ) == - 1 ) { if ( rpcap_senderror ( pars -> sockctrl, ver, PCAP_ERR_NOREMOTEIF, ""No <S2SV_blank> interfaces <S2SV_blank> found! <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed"" "" <S2SV_blank> and <S2SV_blank> you <S2SV_blank> have <S2SV_blank> the <S2SV_blank> right <S2SV_blank> to <S2SV_blank> access <S2SV_blank> to <S2SV_blank> the",0
182,"<S2SV_ModStart> ; struct dump_dir <S2SV_ModEnd> * dd = <S2SV_ModStart>, DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; }",0
183,"<S2SV_ModStart> for ( x = 0 ; x < ( ( ssize_t ) image -> columns - 7 ) ; x += 8 ) { for ( bit = 0 ; bit < 8 ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 8 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 8 ) ; bit ++ ) { index = ( ( * p ) & ( 0",0
184,"<S2SV_ModStart> BN_ULONG t1, t2 ; BN_ULONG c1, c2, c3 ; c1 = 0 ; c2 = 0 ; c3 = 0 ; sqr_add_c ( a, 0, c1, c2 ) ; r [ 1 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 1, c2, c3 ) ; r [ 2 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 0, c1, c2 ) ; r [ 3 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 2, c2, c3 ) ; r [ 4 ] = c2 ; c2 = 0 ; sqr_add_c ( a, 3, 0, c1, c2 ) ; sqr_add_c2 ( a, 5, 1, c2 ) ; r [ 6 ] = c3 ; c3 = 0 ; sqr_add_c ( a, 0, c1, c2 ) ; r [ 7 ] = c1 ; c1 = 0 ; sqr_add_c ( a",0
185,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ;",0
186,<S2SV_ModStart> = len ; ND_TCHECK_16BIT ( bp [ 0 ] ) ; <S2SV_ModStart> = len ; ND_TCHECK_16BIT ( bp [ 0 ] ) ; <S2SV_ModStart> = len ; ND_TCHECK_16BIT ( bp [ 0 ] ) ; <S2SV_ModStart> = len ; ND_TCHECK_16BIT ( bp [ 0 ] ) ; <S2SV_ModStart> = len ; ND_TCHECK_16BIT ( bp [ 0 ] ) ; <S2SV_ModStart> = len ; ND_TCHECK_16BIT ( bp [ 0 ] ) ; <S2SV_ModStart> = len ; ND_TCHECK_16BIT ( bp [ 0 ] ) ; ND_TCHECK_16BIT ( bp [ 0 ] ) ; <S2SV_ModStart> = len ; ND_TCHECK_16BIT ( bp [ 0 ] ) ; <S2SV_ModStart> = len ; ND_TCHECK_16BIT ( bp [ 0 ] ) ; <S2SV_ModStart> = len ; ND_TCHECK_16BIT ( bp [ 0 ] ) ; <S2SV_ModStart> = len ; ND_TCHECK_16BIT ( bp [ 0 ] ) ; <S2SV_ModStart> = len ; ND_TCHECK_16BIT ( bp [ 0 ] ) ; ND_TCHECK_16BIT ( bp [,0
187,"<S2SV_ModStart>! dumpable && ptrace_has_cap ( task_cred ( task ) -> user_ns, mode )",0
188,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
189,<S2SV_ModStart> ; case SEI_USER_DATA_REGISTERED_ITU_T_T35 : ps_parse -> s_sei_params. i4_sei_user_data_registered_ITU_t_t35 = 1 ; ps_parse -> s_sei_params. i4_sei_user_data_registered_ITU_t_t35 = 1 ; ps_parse -> s_sei_params. i4_sei_user_data_registered_ITU_T_T35 = 1 ; ps_parse -> s_sei_params. i4_sei_user_data_registered_ITU_t_t35 = 1 ; ps_parse -> s_sei_params. i4_sei_user_data_registered_ITU_t_t35 = 1 ; ps_parse -> s_sei_params. i4_sei_user_data_registered_ITU_t_t35 = 1 ; ps_parse -> s_sei_params. i4_sei_user_data_registered_ITU_t_t35 = 1 ; ps_parse -> s_sei_params,0
190,"<S2SV_ModStart> ; tmp_sdma_rht = kcalloc ( num_engines, sizeof ( * tmp_sdma_rht ), GFP_KERNEL ) ; if (! tmp_sdma_rht ) { memset ( tmp_sdma_rht, 0, sizeof ( * tmp_sdma_rht ) ) ; memset ( tmp_sdma_rht, 0, sizeof ( * tmp_sdma_rht ) ) ; memset ( tmp_sdma_rht, 0, sizeof ( * tmp_sdma_rht ) ) ; memset ( tmp_sdma_rht, 0, sizeof ( * tmp_sdma_rht ) ) ; memset ( tmp_sdma_rht, 0, sizeof ( * tmp_sdma_rht ) ) ; memset ( tmp_sdma_rht, 0, sizeof ( * tmp_sdma_rht ) ) ; memset ( tmp_sdma_rht, 0, sizeof ( * tmp_sdma_rht ) ) ; memset ( tmp_sdma_rht, 0, sizeof ( * tmp_sdma_",0
191,"<S2SV_ModStart> * info, <S2SV_ModEnd> int rep_quick ) <S2SV_ModStart> ""mi_repair_parallel"" ) ; if ( param -> testflag & T_UNPACK ) { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %s\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %s\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyIS",0
192,"<S2SV_ModStart> ) ; } if ( pcount > MAX_HSTORE_PAIRS ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, ( int ) ( MAX_HSTORE_PAIRS ) ) )",0
193,"<S2SV_ModStart> val ) ; if (! strcmp ( var, ""command"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> command"", r -> name ) ; if (! strcmp ( var, ""rspfile"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if (! strcmp ( var, ""rspfile_content"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if ( hasrspfile!= hasrspcontent ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if ( hasrspfile!= hasrspcontent ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ;",0
194,"<S2SV_ModStart> ) ) { agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> kind, ( unsigned long long ) c -> id, c -> buf ) ; * hend = '\\r' ; agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> id, c -> buf ) ; * hend = '\\0' ; agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> kind, ( unsigned long long ) c -> id, c -> buf ) ; * hend = '\\r' ; agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> id, c -> buf ) ; * hend = '\\0' ; agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> kind, ( unsigned long long ) c -> id, c -> buf ) ; *",0
195,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> vp9_fht16x16_c ( const <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { vpx_fdct16x16_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> ] ; int i, j ; int16_t temp_in [ 16 ], temp_out [ 16 ] ; const transform_2d ht = FHT_16 [ tx_type ] ; for ( i = 0 ; i < 16 ; ++ i ) temp_in [ j ] = input [ j * stride + i ] * 4 ; ht. cols ( temp_in, temp_out ) ; for ( j = 0 ; j < 16 ; ++ j ) outptr [ j * 16 + i ] = ( temp_out [ j ] + 1 + ( temp_out [ j ] < 0 ) ) >> 2 ; } for ( i = 0 ; i < 16 ; ++ i ) { for ( j = 0 ; j < 16 ; ++ j ) temp_in [ j ] = input [ j * stride + i ] * 4 ; ht. rows (",0
196,"<S2SV_ModStart> g_key_file_get_string ( keyfile, expected_dbus_name, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ; if (! g_key_file_get_string ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; <S2SV_ModStart> g_key_file_get_string ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ; if (! g_key_file_get_string ( keyfile, expected_dbus_name, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_get_string ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ;",0
197,"<S2SV_ModStart> char * temp_filename = osi_calloc ( <S2SV_ModEnd> strlen ( filename <S2SV_ModStart> 5 ) ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } <S2SV_ModStart> (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } for ( const list_node_t * node = list_begin ( config -> sections ) ; node!= list_end ( config -> sections ) ) fputc ( '\\n', fp ) ; } if ( list_next ( node )!= list_end ( config -> sections ) ) fputc ( '\\n', fp )",0
198,<S2SV_ModStart> += VTP_UPDATE_TIMESTAMP_LEN ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> += VTP_UPDATE_TIMESTAMP_LEN ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> += VTP_UPDATE_TIMESTAMP_LEN ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> += VTP_UPDATE_TIMESTAMP_LEN ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> += VTP_UPDATE_TIMESTAMP_LEN ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> += VTP_UPDATE_TIMESTAMP_LEN ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> += VTP_UPDATE_TIMESTAMP_LEN ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> += VTP_UPDATE_TIMESTAMP_LEN ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> += VTP_UPDATE_TIMESTAMP_LEN ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> += VTP_UPDATE_TIMESTAMP_LEN ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> += V,0
199,"<S2SV_ModStart> userData, target, ctxt -> parserState <S2SV_ModStart>, target, ctxt -> parserState <S2SV_ModStart>, target, ctxt -> parserState <S2SV_ModStart>, target, ctxt -> parserState <S2SV_ModStart>, target, ctxt -> parserState <S2SV_ModStart>, target, ctxt -> parserState <S2SV_ModStart>, target, ctxt -> parserState <S2SV_ModStart>, target, ctxt -> parserState <S2SV_ModStart>, target, ctxt -> parserState <S2SV_ModStart>, target, ctxt -> parserState <S2SV_ModStart>, target, ctxt -> parserState <S2SV_ModStart>, target, ctxt -> parserState <S2SV_ModStart> NULL ) ; if ( ctxt -> parserState == XML_PARSER_PI ) { xmlFree ( buf ) ; ctxt -> instate = state ; return ; } buf = ( xmlChar * ) xmlMallocAtomic ( size * sizeof ( xmlChar ) ) ; if ( buf == NULL ) { xmlErrMemory ( ctxt, NULL ) ; ctxt -> instate = state ; return ; } buf = ( xmlChar * ) xmlMallocAtomic ( size * sizeof ( xmlChar ) ) ; if ( buf == NULL ) { xmlErrMemory ( ctxt, NULL ) ; ctxt -> instate = state ; return ; }",0
200,"<S2SV_ModStart> ; int rv = Socket_print ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" <S2SV_ModEnd> ""Content-Length: <S2SV_blank> %d\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModStart> request, _auth? _auth : """", StringBuffer_toString ( data ) ) ; if ( rv < 0 ) THROW ( IOException, ""Monit: <S2SV_blank> cannot <S2SV_blank> send <S2SV_blank> command <S2SV_blank> to <S2SV_blank> the <S2SV_blank> monit <S2SV_blank> daemon <S2SV_blank> -- <S2SV_blank> %s"", STRERROR ) ;",0
201,<S2SV_ModStart> } pid_t child = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) ;,0
202,"<S2SV_ModStart> flags ) ; kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; rc = bfa_port_get_stats ( BFA_FCPORT ( & bfad -> bfa ), fcstats, bfad_hcb_comp, & fcomp ) ; if ( rc!= BFA_STATUS_OK ) return NULL ; hstats -> seconds_since_last_reset = fcstats -> fc. secs_reset ; hstats -> tx_frames = fcstats -> fc. tx_frames ; hstats -> tx_words = fcstats -> fc. tx_words ; hstats -> lip_count = fcstats -> fc. lip_count ; hstats -> nos_count = fcstats -> fc. nos_count ; hstats -> error_frames = fcstats -> fc. error_frames ; hstats -> dumped_frames = fcstats -> fc. dumped_frames ; hstats -> dropped_frames = fcstats -> fc. dropped_frames ; hstats -> link_failure_count = fcstats -> fc. link_failures ; hstats -> loss_of_sync_count = fcstats -> fc. loss_of_syncs ; hstats -> link_failure_count",0
203,"<S2SV_ModStart> value ) { if ( value -> x > 1.0f ) value -> x = MinF ( 1.0f, MaxF ( 0.0f, value -> x ) ) ; if ( value -> y > 1.0f ) value -> y = MinF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; if ( value -> z > 1.0f ) value -> z = MinF ( 1.0f, MaxF ( 0.0f, value -> z ) ) value -> x = MinF ( 1.0f, MaxF ( 0.0f, value -> x ) ) ; if ( value -> y > 1.0f && value -> y > 1.0f ) value -> y = MinF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; if ( value -> z > 1.0f ) value -> z = MinF ( 1.0f, MaxF ( 0.0f, value -> z ) ) ; else value -> x = MinF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; if ( value ->",0
204,"<S2SV_ModStart> -> sasl_mechanism ; memcpy ( rec -> sasl_username, src -> sasl_username, sizeof ( rec -> sasl_username ) ) ;",0
205,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
206,"<S2SV_ModStart>, o, datao ; if ( CHECKOVERFLOW ( 6 + n -> offset, 2 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + 6 + n -> offset, n -> order ) ; datao += 2 ; if ( CHECKOVERFLOW ( c, buf_size, 12 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. entries = exif_mem_alloc ( ne -> mem, sizeof ( MnoteCanonEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( ne -> log, ""ExifMnoteCanon"", sizeof ( MnoteCanonEntry ) * c ) ; break ; }",0
207,"<S2SV_ModStart> HA_ERR_CRASHED_ON_USAGE : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed <S2SV_blank> after <S2SV_blank> last <S2SV_blank> repair"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed <S2SV_blank> after <S2SV_blank> last <S2SV_blank> repair"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed <S2SV_blank> after <S2SV_blank> last <S2SV_blank> repair"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed <S2SV_blank> after <S2SV_blank> last <S2SV_blank> repair"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked",0
208,"<S2SV_ModStart> len ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> int alloc = ( length? length : ( int ) strlen ( string ) ) + 1 ; char * ns = malloc ( alloc ) ; unsigned char in ; int strindex = 0 ; unsigned long hex ; CURLcode res ; if (! ns ) return NULL ; while ( -- alloc > 0 ) { in = * string ; if ( '%' == in ) hex = strtoul ( hexstr, & ptr, 16 ) ; in = curlx_ultouc ( hex ) ; res = Curl_convert_from_network ( handle, & in, 1 ) ; if ( res ) { free ( ns ) ; return NULL ; } ns [ strindex ++ ] = in ; string ++ ; alloc -= 2 ; } ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ;",0
209,"<S2SV_ModStart> RAnalOp next_op ; memset ( & next_op, 0, sizeof ( next_op ) )",0
210,"<S2SV_ModStart> pdu_free_state_ref = usm_free_usmStateReference ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_POST_PREMIB_READ_CONFIG, init_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, free_engineID, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, free_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, free_engineID, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_",0
211,"<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; else return ( prog -> flags & eflags )? match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) : ( prog -> flags & eflags )? match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) : ( prog -> flags & eflags )?! ( prog -> flags & eflags )? match ( prog -> start, sp, sp, prog -> flags | eflags | eflags, sub ) : ( prog -> flags & eflags )? match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) : ( prog -> flags & eflags )? match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) : ( prog -> flags & eflags )?! ( prog -> flags & eflags )?! ( prog -> flags & eflags ) : match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ;",0
212,"<S2SV_ModStart> ; # ifndef NETSNMP_NO_WRITE_SUPPORT switch ( action ) { case MODE_SET_RESERVE1 : if ( var_val_type!= ASN_INTEGER ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> type <S2SV_blank>!= <S2SV_blank> int\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= 1 ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; } if (! exten ||! exten -> efix_entry ) { snmp_log ( LOG_ERR, ""No <S2SV_blank> command <S2SV_blank> to <S2SV_blank> run\\n"" ) ; return SNMP_ERR_GENERR ; }",0
213,<S2SV_ModStart> case 3 : { CheckNumberPixels ( 4 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 6 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 4 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 3 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 5 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 3 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >>,0
214,"<S2SV_ModStart> timer ) ; list_for_each_entry_safe ( slave, tmp, & timeri -> slave_list_head, open_list ) { snd_timer_stop ( slave, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail ( & slave -> open_list, & snd_timer_slave_list ) ; <S2SV_ModEnd> slave -> timer <S2SV_ModStart> NULL ; } list_for_each_entry_safe ( slave, tmp, & timeri -> slave_list_head, open_list ) { spin_lock_irq ( & slave_active_lock ) ; _snd_timer_stop ( slave, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail ( & slave -> open_list, & snd_timer_slave_list ) ; <S2SV_ModEnd> slave -> timer <S2SV_ModStart> NULL ; } list_for_each_entry_safe ( slave, tmp, & timeri -> slave_list_head, open_list ) { spin_lock_irq ( & slave_active_lock ) ; list_move_tail ( & slave -> open_list, & snd_timer_slave_list",0
215,<S2SV_ModStart> -> u4_bitoffset = ih264d_read_mmco_commands <S2SV_ModEnd> ( ps_dec ),0
216,<S2SV_ModStart> { int_fast32_t widthOverflow = <S2SV_ModStart> originalWidth ; int_fast32_t heightOverflow = gifFilePtr -> Image. Height - info -> originalHeight ; const uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { GifErrorExt ( GifErrorExt ( GifErrorExt ( GifErrorExt ( GifErrorExt ( GifErrorExt ( GifErrorExt ( GifErrorExt ( GifErrorExt ( GifErrorExt ( GifErrorExt ( GifErrorExt ( GifErrorExt ( GifErrorExt ( GifErrorExt ( GifErrorExt ( GifErrorExt ( GifErrorExt ( GifErrorExt ( GifErrorExt ( GifErrorExt ( GifErrorExt ( GifErrorExt ( GifErrorExt ( GifErrorExt ( GifErrorExt ( GifErrorExt ( GifErrorExt ( GifErrorExt ( GifErrorExt ( GifErrorExt ( GifErrorExt ( GifErrorExt ( GifError,0
217,"<S2SV_ModStart> || cherokee_buffer_is_empty ( <S2SV_ModEnd> conn -> validator <S2SV_ModStart> user ) ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; ret = validate_dn ( props, dn, conn -> validator -> passwd. buf ) ; if ( ret!= ret_ok ) return ret ; re = ldap_count_entries ( ldap -> conn, message ) ; if ( re!= 1 ) { ldap_msgfree ( message ) ; return ret_not_found ; } first = ldap_first_entry ( ldap -> conn, message ) ; if ( first == NULL ) { ldap_msgfree ( message ) ; return ret_not_found ; } dn = ldap_get_dn ( ldap -> conn, first ) ; if ( dn == NULL ) return ret_not_found ; ret = validate_dn ( props, dn, conn -> validator -> passwd. buf ) ; if ( ret!= ret_ok ) return ret_error ;",0
218,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> has <S2SV_blank> no <S2SV_blank> bus <S2SV_blank> info\\n"", __func__, dev -> name ) ; return ; }",0
219,"<S2SV_ModStart> ( ""size <S2SV_blank> %zu <S2SV_blank> flags <S2SV_blank> 0x%x <S2SV_blank> timeo <S2SV_blank> %ld\\n"" <S2SV_ModEnd>, size,",0
220,<S2SV_ModStart> 0 ) { if ( len < 9 ) { <S2SV_ModStart> ++ s ; if ( len < 9 ) break ; <S2SV_ModStart> ++ s ; if ( len < 9 ) break ; <S2SV_ModStart> ++ s ; if ( len < 9 ) break ; <S2SV_ModStart> ++ s ; if ( len < 9 ) break ; <S2SV_ModStart> ++ s ; if ( len < 9 ) break ; <S2SV_ModStart> ++ s ; if ( len < 9 ) break ; <S2SV_ModStart> ++ s ; if ( len < 9 ) break ; <S2SV_ModStart> ++ s ; if ( len < 9 ) break ; <S2SV_ModStart> ++ s ; if ( len < 9 ) break ; <S2SV_ModStart> ++ s ; if ( len < 9 ) break ; <S2SV_ModStart> ++ s ; if ( len < 9 ) break ; <S2SV_ModStart> ++ s ; if ( len < 9 ) break ; <S2SV_ModStart> ++ s ; if ( len < 9 ) break ; <S2SV_ModStart> ++ s ; if ( len < 9 ) break ; <S2SV_ModStart> ++ s ; if ( len < 9 ) break ; <S2SV_ModStart> ++ s ; if ( len < 9 ) break ; <S2SV_ModStart> ++ s ; if ( len < 9 ) break ; <S2SV_ModStart> ++ s ; if ( len < 9 ) break ; <S2SV_ModStart> ++ s ; if ( len < 9 ) break ; if ( len < 9 ) break ; if ( len < 9 ) break,0
221,"<S2SV_ModStart>. active_set ; if ( uipc_main. read_set < 0 ) { BTIF_TRACE_EVENT ( ""select <S2SV_blank> timeout"" ) ; continue ; }",0
222,"<S2SV_ModStart> msixcap ; assert ( msgnum >= 1 && msgnum <= MAX_MSIX_TABLE_ENTRIES ) ; assert ( barnum >= 0 && barnum <= PCIR_MAX_BAR_0 ) ; tab_size = roundup2 ( tab_size, 4096 ) ; pci_populate_msixcap ( & msixcap, barnum, tab_size ) ; pci_emul_alloc_bar ( dev, barnum, PBA_MEM32, tab_size + dev -> msix. pba_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; pci_emul_alloc_bar ( dev, barnum, PBA_MEM32, tab_size + dev -> msix. pba_size ) ; pci_emul_alloc_bar ( dev, barnum,",0
223,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
224,"<S2SV_ModStart> NULL ) goto cleanup ; status = X509_NAME_cmp ( X509_get_issuer_name ( kdc_cert ), is -> issuer ) ; if (! status ) status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) * valid_kdcPkId = 1 ;",0
225,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static TX_MODE select_tx_mode ( const VP9_COMMON * cm, const <S2SV_ModStart> ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ]? ALLOW_32X32 : TX_MODE_SELECT ; } else if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL ) { return ALLOW_32X32 ; } else if ( cpi -> sf. tx_size_search_method == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ]? ALLOW_32X32 : TX_MODE",0
226,"<S2SV_ModStart> case CF_MINIMUM : printval = min ( printval, im -> gdes [ vidx ]. data [ ii ] ) ; break ; case CF_MAXIMUM : printval = max ( printval, im -> gdes [ vidx ]. data [ ii ] ) ; break ; case CF_FAILURES : printval = max ( printval, im -> gdes [ vidx ]. data [ ii ] ) ; break ; case CF_MAXIMUM : printval = min ( printval, im -> gdes [ vidx ]. data [ ii ] ) ; break ; case CF_MAXIMUM : printval = max ( printval, im -> gdes [ vidx ]. data [ ii ] ) ; break ; case CF_MAXIMUM : printval = max ( printval, im -> gdes [ vidx ]. data [ ii ] ) ; break ; case CF_MINIMUM : printval = min ( printval, im -> gdes [ vidx ]. data [ ii ] ) ; break ; case CF_MINIMUM : printval = min ( printval, im -> gdes [ vidx ]. data [ ii ] ) ; break ; case CF_MINIMUM",0
227,<S2SV_ModStart> ; if ( buf1 -> size > buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 0 ; },0
228,"<S2SV_ModStart> info ) + size ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NORETRY ) ; if (! info ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) return NULL ;",0
229,<S2SV_ModStart> ; if ( protocol < 0 || protocol > AX25_P_MAX ) return - EINVAL ; switch ( sock -> type ) { case SOCK_DGRAM : if ( protocol == 0 || protocol == PF_AX25 ) return - ESOCKTNOSUPPORT ; break ; case SOCK_SEQPACKET : # ifdef CONFIG_INET case AX25_P_ARP : case AX25_P_IP : # endif # ifdef CONFIG_NETROM_MODULE case AX25_P_NETROM : if ( ax25_protocol_is_registered ( AX25_P_NETROM ) ) return - ESOCKTNOSUPPORT ; break ; # endif # ifdef CONFIG_ROSE_MODULE case AX25_P_ROSE : if ( ax25_protocol_is_registered ( AX25_P_ROSE ) ) return - ESOCKTNOSUPPORT ; break ; # endif # ifdef CONFIG_NETROM_MODULE case AX25_P_NETROM : if ( ax25_protocol_is_registered ( AX25_P_NETROM ) ) return - ESOCKTNOSUPPORT ; break ; # endif,0
230,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
231,<S2SV_ModStart> b ) ; if ( IS_ERR ( b -> manager -> event ) ) r = PTR_ERR ( b -> manager -> event ) ; if ( r < 0 ) r = PTR_ERR ( b -> manager -> event -> io_event_source ) ; if ( r < 0 ) r = PTR_ERR ( b -> manager -> event -> io_event_source ) ; if ( r < 0 ) r = PTR_ERR ( b -> manager -> event -> io_event_source ) ; if ( r < 0 ) r = PTR_ERR ( b -> manager -> event -> io_event_source ) ; if ( r < 0 ) r = PTR_ERR ( b -> manager -> event -> io_event_source ) ; if ( r < 0 ) r = PTR_ERR ( b -> manager -> event -> io_event_source ) ; if ( r < 0 ) r = PTR_ERR ( b -> manager -> event -> io_event_source ) ; if ( r < 0 ) r = PTR_ERR ( b -> manager -> event -> io_event_source ) ;,0
232,<S2SV_ModStart> ( errors ) return TEST_ERR_MAJOR_BAD ; else return 0 ;,0
233,<S2SV_ModStart> -> lun ) { list_del_init ( & cmd -> eh_entry ) ; scsi_dma_unmap ( cmd ) ;,0
234,"<S2SV_ModStart> ; REQ ( n, funcdef ) ; name = NEW_IDENTIFIER ( CHILD ( n, name_i ) ) ; if (! name ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i ), 0 ) ) return NULL ; args = ast_for_arguments ( c, CHILD ( n, name_i + 1 ) ) ; if (! args ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == RARROW ) { returns = ast_for_expr ( c, CHILD ( n, name_i + 3 ) ) ; if (! returns ) return NULL ; name_i += 2 ; } <S2SV_ModStart> ( is_async ) return AsyncFunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n0 ), n0 -> n_col_offset, end_lineno, end_col_offset, c -> c_arena ) ; else return FunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n0 ), n0 -> n_col_offset,",0
235,"<S2SV_ModStart> iv ) ; err = salsa20_encrypt_bytes ( ctx, walk. dst. virt. addr, walk. src. virt. addr, nbytes ) ; if ( err ) return err ;",0
236,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageDataInFile"" <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageDataInFile"" <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageDataInFile"" ) ;",0
237,,1
238,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
239,"<S2SV_ModStart> : if ( psf_is_null ( psf ) ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; break ; } ; <S2SV_ModStart> : if ( psf_is_null ( psf ) ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; break ; } ; <S2SV_ModStart> : if ( psf_is_null ( psf ) ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; break ; } ; if ( psf_is_null ( psf ) ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; break ; } ; if ( psf_is_null ( psf ) ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; break ; } ; if ( psf_is_null ( psf ) ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek",0
240,<S2SV_ModStart> ) IHEVCD_SUCCESS ) ; if ( ps_cabac -> u4_ofst >= ps_cabac -> u4_nxt_word ) { ps_cabac -> u4_ofst = 0 ; return ( IHEVCD_ERROR_T ) IHEVCD_INVALID_PARAMETER ; },0
241,<S2SV_ModStart> off ) ; if ( line -> indent > 0 && line -> indent >= c -> contents_indent ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 1 ; } else if ( line -> indent > 0 && line -> indent >= c -> contents_indent ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 1 ; } else if ( line -> indent > 0 && line -> indent >= c -> contents_indent ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 1 ; } else if ( line -> indent > 0 && line -> indent >= c -> contents_indent ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 0 ; } else if ( line -> indent > 0 && line -> indent >= c -> contents_indent ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 0 ; } else,0
242,<S2SV_ModStart> perf_event_context * ctx ; ctx = perf_event_ctx_lock <S2SV_ModEnd> ( event ) <S2SV_ModStart> state = PERF_EVENT_STATE_OFF <S2SV_ModEnd> ; } raw_spin_unlock_irq,0
243,<S2SV_ModStart>. post_proc_flag ; flags -> color_ref_frame_flag = ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ; flags -> color_mb_modes_flag = ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ; flags -> color_b_modes_flag = ctx -> dbg_color_b_modes_flag ; flags -> display_ref_frame_flag = ctx -> dbg_color_ref_frame_flag ; flags -> display_mb_modes_flag = ctx -> dbg_color_mb_modes_flag ; flags -> display_b_modes_flag = ctx -> dbg_color_b_modes_flag ; flags -> display_mv_flag = ctx -> dbg_display_mv_flag ;,0
244,"<S2SV_ModStart> = 0 ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6 ) ) ; goto trunc ; } <S2SV_ModStart> = 0 ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg6 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6 ) ) ; goto trunc ; } <S2SV_ModStart> = 0 ; ND_TCHECK2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv",0
245,"<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> timer ) ; # if HAVE_NEON if ( cm -> cpu_caps & HAS_NEON ) # endif { vp8_push_neon ( store_reg ) ; } # endif vpx_usec_timer_start ( & timer ) ; if ( sd -> y_width!= cpi -> oxcf. Width || sd -> y_height!= cpi -> oxcf. Height ) { assert ( cpi -> oxcf. lag_in_frames < 2 ) ; dealloc_raw_frame_buffers ( cpi ) ; dealloc_raw_frame_buffers ( cpi ) ; dealloc_raw_frame_buffers ( cpi ) ; } if ( vp8_lookahead_push ( cpi -> lookahead, sd, time_stamp, end_time, frame_flags, cpi -> active_map_enabled? cpi -> active_map : NULL ) ) res = - 1 ; vpx_usec_timer_mark ( & timer ) ; cpi -> time_receive_data += vpx_usec_timer_elapsed ( & timer ) ;",0
246,"<S2SV_ModStart> { fprintf ( stderr <S2SV_ModEnd>, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) <S2SV_ModStart> rv = copy_file ( src, dest, getuid ( ), getgid ( ) ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } waitpid ( child, NULL, 0 ) ; if ( chown ( dest, getuid ( ), getgid ( ) ) == - 1 ) errExit ( ""fchown"" ) ; if ( chmod ( dest, 0600 ) == - 1 ) errExit ( ""fchmod"" ) ;",0
247,"<S2SV_ModStart> ; } else { memset ( ptr_hbe_txposer -> synth_buf, 0, 1280 * sizeof ( FLOAT32 ) ) ; <S2SV_ModStart> case 8 : memset ( ptr_hbe_txposer -> synth_buf, 0, 1280 * sizeof ( FLOAT32 ) ) ; <S2SV_ModStart> case 16 : memset ( ptr_hbe_txposer -> synth_buf, 0, 1280 * sizeof ( FLOAT32 ) ) ; <S2SV_ModStart> case 24 : memset ( ptr_hbe_txposer -> synth_buf, 0, 1280 * sizeof ( FLOAT32 ) ) ; <S2SV_ModStart> case 16 : memset ( ptr_hbe_txposer -> synth_buf, 0, 1280 * sizeof ( FLOAT32 ) ) ; break ; case 24 : memset ( ptr_hbe_txposer -> synth_buf, 0, 1280 * sizeof ( FLOAT32 ) ) ; break ; default : memset ( ptr_hbe_txposer -> synth_buf, 0, 1280 * sizeof ( FLOAT32 ) ) ; memset ( ptr_hbe_txposer -> synth_buf, 0, 1280 * sizeof ( FLOAT32 ) ) ;",0
248,"<S2SV_ModStart> lua_authz_provider_spec * prov_spec = parsed_require_line ; int result ; int nargs = 0 ; spec = create_vm_spec ( & pool, r, cfg, server_cfg, NULL, 0, prov_spec -> function_name, ""authz <S2SV_blank> provider"" ) ; L = ap_lua_get_lua_state ( pool, spec, r ) ; if ( L == NULL ) { ap_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02314 ) ""Unable <S2SV_blank> to <S2SV_blank> compile <S2SV_blank> VM <S2SV_blank> for <S2SV_blank> authz <S2SV_blank> provider <S2SV_blank> %s"", prov_spec -> name ) ; return AUTHZ_GENERAL_ERROR ; } lua_getglobal ( L, - 1 ) ; if (! lua_isfunction ( L, - 1 ) ) { ap_log_rerror ( APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO ( 02319 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", prov_spec -> function",0
249,"<S2SV_ModStart> ) break ; quantum_info = DestroyQuantumInfo ( quantum_info ) ; quantum_type = DestroyQuantumType ( quantum_type ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, quantum_info, quantum_type ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
250,<S2SV_ModStart> ; if (! proto_end ) return 0 ; if (,0
251,"<S2SV_ModStart> fdt ) ; const char * const name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> case FDT_PROP : include = want >= 2 ; stop_at = offset ; prop = fdt_get_property_by_offset ( fdt, offset, NULL ) ; str = fdt_string ( fdt, fdt32_to_cpu ( prop -> nameoff ) ) ; if (! str ) return - FDT_ERR_BADSTRUCTURE ; if (! str ) return - FDT_ERR_BADSTRUCTURE ; if ( str_in_list ( str, exc_prop, exc_prop_count ) ) include = 0 ; break ; case FDT_BEGIN_NODE : depth ++ ; if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BADSTRUCTURE ; if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BADSTRUCTURE ; name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_BADSTRUCTURE",0
252,"<S2SV_ModStart> ) ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( ) ) ;",0
253,"<S2SV_ModStart> -> protocol_timeout = g_timeout_add_seconds ( 5, ( GSourceFunc ) _client_protocol_timeout, client ) ;",0
254,<S2SV_ModStart> book -> dim && i < n,1
255,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
256,"<S2SV_ModStart> { if (! check_scale_factors ( other_w, other_h, this_w, this_h, sf -> x_scale_fp, sf -> y_scale_fp ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } if (! check_scale_factors ( other_w, other_h, this_w, this_h ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; if ( vp9_is_scaled ( sf ) ) { sf -> scale_value_x = unscaled_value ; sf -> scale_value_y = unscaled_value ; } else { sf -> x_step_q4 = 16 ; sf -> y",0
257,<S2SV_ModStart> ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> OE_EINVAL ) ; if ( ret < 0 ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
258,"<S2SV_ModStart> ) ) { struct in6_pktinfo dst_info ; dst_info = rcu_dereference_protected ( np -> dst_info, sock_owned_by_user ( sk ) ) ; if ( dst_info -> flags & INET6_SKB_CB ( sk ) -> flags & INET6_SKB_CB ( sk ) -> flags & INET6_SKB_CB ( sk ) -> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
259,<S2SV_ModStart> ( ) ; unregister_net_subsys <S2SV_ModEnd> ( & sctp_net_ops <S2SV_ModStart> ( ) ; unregister_net_subsys <S2SV_ModEnd> ( & sctp_net_ops <S2SV_ModStart> ( ) ; unregister_net_subsys <S2SV_ModEnd> ( & sctp_net_ops,0
260,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> ) ; ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr ) ; for ( i = 0 ; i < 4 ; i ++ ) { fprintf ( stderr, "" <S2SV_blank> %.3f"", stream -> psnr_totals [ i ] / stream -> psnr_count ) ; }",0
261,"<S2SV_ModStart> name ) { if (! ( dst = fopen ( dst_name, ""w"" ) ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ; } <S2SV_ModStart> 16 ) ; if (! ( dst = fopen ( dst_name, ""w"" ) ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ; } fprintf ( out, ""%s: <S2SV_blank> --%c-- <S2SV_blank> Version <S2SV_blank> %d <S2SV_blank> -- <S2SV_blank> Object <S2SV_blank> %d <S2SV_blank> (%s)"", pdf -> name, pdf -> xrefs [ i ]. version, pdf -> xrefs [ i ]. obj_id, get_type ( fp, pdf -> xrefs [ i ]. entries [ j ]. obj_id ) ; fprintf ( out, ""%s: <S2SV_blank> --%c-- <S2SV_blank> Object <S2SV_blank> %d <S2SV_blank> (%s)"", pdf -> name, pdf_get_object_status ( pdf, i, j ), pdf -> xrefs [ i ]. entries [ j ]. obj_id, get_type ( fp, pdf",0
262,"<S2SV_ModStart> ; TRACE_DEBUG ( ""CIDER=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_CIDER ) ) ; TRACE_DEBUG ( ""PHY1ILR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1ILR ) ) ; TRACE_DEBUG ( ""PHY1IHR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1IHR ) ) ; if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } ksz8851DumpReg ( interface ) ; context -> frameId = 0 ; context -> txBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; context -> rxBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; if ( context -> txBuffer == NULL || context -> rxBuffer == NULL ) { memPool",0
263,"<S2SV_ModStart>. skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
264,"<S2SV_ModStart> ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } <S2SV_ModStart> ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } if ( fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; }",0
265,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ; TEMP_FAILURE_RETRY (,0
266,<S2SV_ModStart> )? ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval * af_ratio ) / ( rc -> avg_frame_bandwidth + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval,0
267,"<S2SV_ModStart> ++ ) { if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; else errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; }",0
268,"<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch <S2SV_ModStart> value ) ; value = ast2obj_list ( o -> v. Module. type_ignores, ast2obj_type_ignore ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_type_ignores, value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; <S2SV_ModStart> value ) ; value = ast2obj_list ( o -> v. Expression. type_ignores, ast2obj_type_ignore ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_type_ignores, value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; <S2SV_ModStart> value ) ; value = ast2obj_list ( o -> v. Expression. type_ignores, ast2obj_type_ignore ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_type_ignores, value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; <S2SV_ModStart> value ) ;",0
269,"<S2SV_ModStart> ] ; # if CONFIG_VP8_HIGHBITDEPTH if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) { vp8_strict_quantize_b ( b, d ) ; } else if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) { vp8_strict_quantize_b ( b, d ) ; } else { # if CONFIG_VP8_HIGHBITDEPTH if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) { vp8_strict_quantize_b ( b, d ) ; } else if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) { vp8_strict_quantize_b ( b, d ) ; } else { # if CONFIG_VP12_HIGHBITDEPTH if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGH",0
270,"<S2SV_ModStart> FN_REFLEN ] ; if ( opt_basedir [ i - 1 ] == FN_LIBCHAR ) { strncpy ( buff, opt_basedir, sizeof ( buff ) - 1 ) ; opt_basedir [ i - 1 ] = FN_LIBCHAR2 ; } else if ( opt_basedir [ i - 1 ] == FN_LIBCHAR2 ) { strncpy ( buff, opt_basedir, sizeof ( buff ) - 1 ) ; opt_basedir [ i - 1 ] = FN_LIBCHAR2 ; if ( opt_basedir [ i - 1 ] == FN_LIBCHAR2 ) { strncpy ( buff, opt_basedir, sizeof ( buff ) - 1 ) ; opt_basedir [ i - 1 ] = FN_LIBCHAR2 ; } else if ( opt_basedir [ i - 1 ] == FN_LIBCHAR2 ) { char buff [ FN_DIRSEP ] ; buff [ sizeof ( buff ) - 1 ] = 0 ; my_free ( opt_basedir ) ; opt_basedir = my_strdup ( buff, MYF ( MY_FAE ) ) ; opt_basedir = my_strdup ( buff, MYF ( MY_FAE ) ) ; }",0
271,"<S2SV_ModStart> ) ( data_end - pbi -> fragments. ptrs [ 0 ] ) ; if (! pbi -> ec_active ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } else { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } if ( pbi -> decrypt_cb ) { int n = ( int ) ( data_end - data ) ; if (! pbi -> ec_active ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } else { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } if ( pbi -> decrypt_cb ) { int n = ( int ) ( data_end - data ) ; if (! pbi -> ec_active ) { vpx_internal_error ( & pc -> error, VPX_CODEC",0
272,"<S2SV_ModStart> getprivs_ret ret ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
273,"<S2SV_ModStart>, int * returndistortion <S2SV_ModEnd>, int * <S2SV_ModStart> returnintra ) { # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX, <S2SV_ModEnd> best_rd_sse = INT_MAX <S2SV_ModStart> zero_mv_sse = INT_MAX, <S2SV_ModEnd> best_rd_sse = INT_MAX <S2SV_ModStart> best_rd_sse = INT_MAX ; # else unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, <S2SV_ModEnd> best_rd_sse = INT_MAX <S2SV_ModStart> best_rd_sse = INT_MAX ; # endif mode_mv = mode_mv_sb [ sign_bias ] ; best_ref_mv. as_int = 0 ; best_ref_mv. as_int = 0 ; mode_mv = best_ref_mv_sb [ sign_bias ] ; best_ref_mv. as_int = 0 ; mode_mv = mode_mv_sb [ sign_bias ] ; best_ref_mv. as_int = 0 ; best_",0
274,<S2SV_ModStart> goto error ; if ( statbuf. st_size > UINT64_MAX / sizeof ( h -> hdr -> csum ) ) h -> size = UINT64_MAX / sizeof ( h -> hdr -> csum ) ; if ( h -> size > UINT64_MAX / sizeof ( h -> hdr -> csum ) ) h -> size = UINT64_MAX / sizeof ( h -> hdr -> csum ) ; if ( h -> size > UINT64_MAX / sizeof ( h -> hdr -> csum ) ) h -> size = UINT64_MAX / sizeof ( h -> hdr -> csum ) ; if ( h -> size > UINT64_MAX / sizeof ( h -> hdr -> csum ) ) h -> size = UINT64_MAX <S2SV_ModStart> ; if ( h -> size > UINT64_MAX / sizeof ( h -> hdr -> csum ) ) h -> size = UINT64_MAX / sizeof ( h -> hdr -> csum ) ; if ( h -> size > UINT64_MAX / sizeof ( h -> hdr -> csum ) ) h -> size = UINT64_MAX / sizeof ( h -> hdr -> csum ) ; if ( h -> size > UINT64_MAX / sizeof ( h ->,0
275,"<S2SV_ModStart> ; UWORD8 u1_profile_idc, u1_level_idc, u1_seq_parameter_set_id ; WORD32 pic_height_in_map_units_minus1 ; WORD32 u2_pic_wd, u2_pic_ht, u2_frm_wd_y, u2_frm_ht_y, u2_crop_offset_y, u2_crop_offset_uv, u4_num_reorder_frames, u1_frame_cropping_flag, u1_frame_cropping_flag, u1_frame_cropping_flag, u1_frame_cropping_flag, u1_frame_cropping_flag, u1_frame_cropping_flag, u1_frame_cropping_flag, u1_frame_cropping_flag, u1_frame_cropping_flag, u1_frame_cropping_flag, u1_frame_cropping_flag, u1_frame_cropping_flag, u1_frame_cropping_flag, u1_frame_cropping_flag, u1_",0
276,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * params = va_arg ( args, vpx_svc_parameters_t * ) ; vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height ) ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; cpi -> svc. spatial_layer_id = params -> spatial_layer ; cpi -> svc. temporal_layer_id = params -> temporal_layer ; cpi -> svc. lst_fb_idx = params -> lst_fb_idx ; cpi -> gld_fb_idx = params -> gld_fb_idx ; cpi -> alt_fb_idx = params -> alt_fb_idx ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_",0
277,"<S2SV_ModStart> out ) { <S2SV_ModEnd> copyFunc cf ; <S2SV_ModStart> uint16 input_compression, input_photometric ; if ( compression!= ( uint16 ) - 1 ) TIFFSetField ( out, TIFFTAG_COMPRESSION, compression ) ; else if ( input_compression == ( uint16 ) - 1 ) TIFFSetField ( out, TIFFTAG_COMPRESSION, compression ) ; else if ( input_photometric == ( uint16 ) - 1 ) TIFFSetField ( out, TIFFTAG_PHOTOMETRIC, input_photometric ) ; else if ( input_photometric == ( uint16 ) - 1 ) TIFFSetField ( out, TIFFTAG_PHOTOMETRIC, input_photometric ) ; else if ( input_photometric == ( uint16 ) - 1 ) TIFFSetField ( out, TIFFTAG_PHOTOMETRIC, input_photometric ) ; else if ( input_photometric == ( uint16 ) - 1 ) TIFFSetField ( out, TIFFTAG_PHOTOMETRIC, input_photometric ) ; else if ( input_compression == ( uint16 ) - 1 ) TIFFSetField ( out, TIFFTAG_COMPRESSION, input_compression",0
278,"<S2SV_ModStart> { int r <S2SV_ModEnd> ; char * <S2SV_ModStart> = '\\0' ; if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_",0
279,"<S2SV_ModStart> unsigned int link_count ; struct indirectEntry * ie ; ie = ( struct indirectEntry * ) ibh -> b_data ; loc = lelb_to_cpu ( ie -> indirectICB. extLocation ) ; if (! loc ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!loc\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if (! nbh ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!nbh\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if (! nbh ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!nbh\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if (! nbh ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!nbh\\n"", inode -> i_ino ) ; make_bad_inode ( inode )",0
280,"<S2SV_ModStart> -> tx_size ; const int filter_level = get_filter_level ( lfi_n, mbmi ) ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> left_uv [ tx_size_uv ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv [ tx_size_uv ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv ; if (! filter_level ) { return ; } else { uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t *",0
281,"<S2SV_ModStart> mq_flush_lock, flags ) <S2SV_ModEnd> ; flush_rq ->",0
282,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) return ( uint32_t ) - 1 ; <S2SV_ModStart> -> config ) ; if ( addr + sizeof ( val ) > vdev -> config_len ) return ( uint32_t ) - 1 ;,0
283,"<S2SV_ModStart> ) ) { if (! smatch ( option, "" <S2SV_blank> =\\t,"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Invalid <S2SV_blank> SessionCookie <S2SV_blank> option"" ) ; return MPR_ERR_BAD_SYNTAX ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Invalid <S2SV_blank> SessionCookie <S2SV_blank> option"" ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! ovalue || * ovalue == '\\0' ) continue ; if ( smatch ( option, ""secure"" ) ) { httpSetRouteSessionSecure ( state -> route, scaselessmatch ( ovalue, ""secure"" ) ) ; } else if ( smatch ( option, ""secure"" ) ) { httpSetRouteSessionSecure ( state -> route, scaselessmatch ( ovalue, ""secure"" ) ) ; } else if ( smatch ( option, ""secure"" ) ) { httpSetRouteSessionSecure ( state -> route, scaselessmatch ( ovalue, ""secure"" ) ; } else if (",0
284,"<S2SV_ModStart> == NULL || <S2SV_ModEnd> replySize < ( <S2SV_ModStart> ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( <S2SV_ModStart> == NULL || <S2SV_ModEnd> replySize < ( <S2SV_ModStart> sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } <S2SV_ModStart> == NULL || <S2SV_ModEnd> replySize < ( <S2SV_ModStart> sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( <S2SV_ModStart> == NULL || <S2SV_ModEnd> replySize < ( <S2SV_ModStart> sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } <S2SV_ModStart> == NULL || <S2SV_ModEnd> replySize < ( <S2SV_ModStart> sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ;",0
285,<S2SV_ModStart> ; if ( code -> key_data_type [ 0 ]!= KRB5_KDB_SALTTYPE_NORMAL || code -> key_data_length [ 0 ]!= sizeof ( struct berval ) ) { err = EINVAL ; goto cleanup ; } if ( code -> key_data_type [ 0 ]!= KRB5_KDB_SALTTYPE_NORMAL || code -> key_data_length [ 0 ]!= sizeof ( struct berval ) ) { err = EINVAL ; goto cleanup ; } if ( code -> key_data_type [ 0 ]!= KRB5_KDB_SALTTYPE_NORMAL || code -> key_data_length [ 0 ]!= sizeof ( struct berval ) ) { err = EINVAL ; goto cleanup ; } if ( code -> key_data_type [ 0 ]!= KRB5_KDB_SALTTYPE_NORMAL || code -> key_data_length [ 0 ]!= sizeof ( struct berval ) ) { err = EINVAL ; goto cleanup ; },0
286,<S2SV_ModStart> 0x02 ) ; memcpy <S2SV_ModEnd> ( sbuf +,0
287,"<S2SV_ModStart> ret ) { dev_err ( & vdev -> dev, ""Invalid <S2SV_blank> MACVLAN <S2SV_blank> count: <S2SV_blank> %d"", vsi -> num_queue_pairs ) ; return ret ; } <S2SV_ModEnd> ch = i40e_find_channel <S2SV_ModStart> ch ) ; if (! ch ) { dev_err ( & vdev -> dev, ""Invalid <S2SV_blank> MACVLAN <S2SV_blank> count: <S2SV_blank> %d"", vsi -> num_queue_pairs ) ; return - EINVAL ; } else { dev_err ( & vdev -> dev, ""Invalid <S2SV_blank> MACVLAN <S2SV_blank> count: <S2SV_blank> %d"", num_qps ) ; return - EINVAL ; }",0
288,"<S2SV_ModStart> } } } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { eprintf ( ""action: <S2SV_blank> c;s"" ) ; switch ( action [ 0 ] ) { case's' : if ( cmd_cb ( core_ptr, ""ds"", NULL, 0 ) < 0 ) { send_msg ( g, ""E01"" ) ; return - 1 ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) { eprintf ( ""action: <S2SV_blank> c;s"" ) ; switch ( action [ 0 ] ) { case 'c' : if ( cmd_cb ( core_ptr, ""dc"", NULL, 0 ) < 0 ) { send_msg ( g, ""E01"" ) ; return - 1 ;",0
289,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
290,"<S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_row, mb_col, xd -> mode_info_context <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_row, mb_col, xd -> mode_info_context <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_row, mb_col, xd -> mode_info_context <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_row, mb_col, xd -> mode_info_context, mb_row, mb_col, xd -> mode_info_context <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_row, mb_col, xd -> mode_info_context, 0 <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_row, mb_col, xd -> mode_info_context, 0 <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_row, mb_col, xd -> mode_info_context, 0 <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_row, mb_col",0
291,<S2SV_ModStart> NULL ) ; } quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
292,"<S2SV_ModStart> len ) { <S2SV_ModEnd> if ( len <S2SV_ModStart> ) { PyObject * w ; int kind ; void * data ; Py_ssize_t len, i ; w = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) { Py_DECREF ( u ) ; return NULL ; } kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = PyUnicode_GET_LENGTH ( w ) ; for ( i = 0 ; i < len ; i ++ ) { Py_UCS4 chr = PyUnicode_READ ( kind, data, i ) ; sprintf ( p, ""\\\\U%08x"", chr ) ; p += 10 ; } assert ( p - buf <= Py_SIZE ( u ) ) ; Py_DECREF ( w ) ; } for ( i = 0 ; i < len ; i ++ ) { Py_UCS4 chr = PyUnicode_READ ( kind, data, i ) ; p += 10 ; } assert ( p - buf <= Py_SIZE ( u ) ) ; assert ( p - buf <= Py_SIZE ( u ) ) ; assert ( p - buf <= Py_SIZE (",0
293,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> int setimes, <S2SV_ModStart> int setimes, targisdir, wrerrno = 0 ; char ch, * np, * why, * vect [ 1 ] ; if ( TYPE_OVERFLOW ( off_t, 0 ) ) SCREWUP ( ""Unexpected <S2SV_blank> off_t/time_t <S2SV_blank> size"" ) ; if ( TYPE_OVERFLOW ( off_t, 0 ) ) SCREWUP ( ""Unexpected <S2SV_blank> off_t/time_t <S2SV_blank> size"" ) ; if ( TYPE_OVERFLOW ( off_t, 0 ) ) SCREWUP ( ""Unexpected <S2SV_blank> off_t/time_t <S2SV_blank> size"" ) ; if ( TYPE_OVERFLOW ( off_t, 0 ) ) SCREWUP ( ""Unexpected <S2SV_blank> off_t/time_t <S2SV_blank> size"" ) ; if ( TYPE_OVERFLOW ( off_t, 0 ) ) SCREWUP ( ""Unexpected <S2SV_blank> off_t/time_t <S2SV_blank> size"" ) ; if ( TYPE_OVERFLOW ( off_t, 0 ) ) SCREWUP ( ""Unexpected <S2SV_blank> off_t/time_t <S2SV_blank> size"" ) ; if ( TYPE_OVERFLOW ( off_t,",0
294,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
295,"<S2SV_ModStart> 0 ) { memset ( oci -> mip, 0, sizeof ( MODE_INFO ) ) ; memset ( oci -> above_context, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; memset ( oci -> above_context, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; <S2SV_ModStart> 0 ) { memset ( oci -> above_context, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; memset ( oci -> above_context, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; memset ( oci -> above_context, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; memset ( oci -> above_context, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; memset ( oci -> above_context, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; memset ( oci -> above_context, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; memset ( oci -> above_context, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; memset (",0
296,<S2SV_ModStart> return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,0
297,<S2SV_ModStart> -> u2_total_mbs_coded ; if ( ps_dec -> u2_total_mbs_coded > ps_dec -> u2_total_mbs_coded ) { ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> u2_total_mbs_coded = 0 ; if ( ps_dec -> u2_total_mbs_coded > ps_dec -> u2_total_mbs_coded ) { ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> u2_total_mbs_coded = ps_dec -> u2,0
298,"<S2SV_ModStart> ; if ( screen -> buffers [ 0 ] && screen -> buffers [ 0 ] -> flags & VTERM_SCREEN_HIGHBITDEPTH ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 0 ] -> flags ) ; if ( screen -> buffers [ 1 ] && screen -> buffers [ 1 ] -> flags & VTERM_SCREEN_HIGHBITDEPTH ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 1 ] -> flags ) ; if ( screen -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ;",0
299,<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart> delay ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> delay ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> delay ) ; TEMP_FAILURE_RETRY (,0
300,"<S2SV_ModStart>, one ; size_t <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException",0
301,"<S2SV_ModStart> { httpSetHostName ( state -> host, stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) ; httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } else { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; }",0
302,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
303,<S2SV_ModStart>! job_id || <S2SV_ModEnd>! prev_hash || <S2SV_ModStart>! prev_hash || <S2SV_ModEnd>! coinbase1 || <S2SV_ModStart>! coinbase2 ||! bbversion ||! nbit ||! ntime ) { if ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ; goto out ; } cg_wlock ( & pool -> data_lock ) ;,0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
305,"<S2SV_ModStart> unused ) { <S2SV_ModEnd> _Py_IDENTIFIER ( __dict__ <S2SV_ModStart> __dict__ ) ; if ( _PyObject_GetAttrId ( self, & PyId___dict__ ) == NULL ) { return NULL ; } <S2SV_ModStart> * dict = _PyObject_GetAttrId ( self, & PyId___dict__ ) ; if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( dict ) { res = Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } res = _PyObject_GetAttrId ( self, & PyId___dict__ ) ; if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( dict ) { res = Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; }",0
306,"<S2SV_ModStart> USB_DT_OTG, ( struct usb_otg_descriptor <S2SV_ModEnd> * ) & <S2SV_ModStart> & desc ) ; if (! desc ) return 0 ; dev_info ( & udev -> dev, ""Dual-Role <S2SV_blank> OTG <S2SV_blank> device <S2SV_blank> on <S2SV_blank> %sHNP <S2SV_blank> port\\n"", ( port1 == bus -> otg_port )? """" : ""non-"" ) ; if ( port1 == bus -> otg_port ) { dev_info ( & udev -> dev, ""HNP <S2SV_blank> port <S2SV_blank> on <S2SV_blank> %sHNP <S2SV_blank> port\\n"", ( port1 == bus -> otg_port )? """" : ""non-"" ) ; if ( port1 == bus -> otg_port ) { bus -> b_hnp_enable = 1 ; err = usb_control_msg ( udev, 0, USB_REQ_SET_FEATURE, 0, USB_DEVICE_B_HNP_ENABLE, 0, NULL, 0, USB_CTRL_SET_TIMEOUT ) ; if ( err < 0 ) dev_err ( & udev -> dev, ""can\'t <S2SV_blank> set <S2SV_blank> HNP <S2SV_blank> mode: <S2SV_blank> %d\\",0
307,"<S2SV_ModStart> -> private_data ; <S2SV_ModEnd> u32 flags = <S2SV_ModStart> ) ; case PERF_EVENT_IOC_PERIOD : return perf_event_period ( event, ( u64 __user * ) arg ) ; case PERF_EVENT_ID : { u64 id = primary_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; return 0 ; } case PERF_EVENT_SET_OUTPUT : { int ret ; if ( arg!= - 1 ) { struct perf_event * output_event ; output_event = output. file -> private_data ; ret = perf_event_set_output ( event, output_event ) ; fdput ( output ) ; } else { ret = perf_event_set_output ( event, NULL ) ; } return ret ; } <S2SV_ModEnd> case PERF_EVENT_IOC_SET_FILTER :",0
308,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> y_mode ) { PREDICTION_MODE uv_mode = read_intra_mode ( cm, r, cm -> fc -> uv_mode_prob [ y_mode ] ) ; if (! cm -> frame_parallel_decoding_mode ) ++ cm -> counts. uv_mode [ y_mode ] [ uv_mode ] ;",0
309,"<S2SV_ModStart> src_len ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q ->",0
310,"<S2SV_ModStart> sizeof iv ) ; rb_ary_inc ( self, rb_num ( self, rb_num ( self, rb_num ( self, rb_num ( self, rb_num ( self, rb_num ( self, rb_num ( self, rb_num ( self, rb_num ( ), rb_num ( self, rb_num ( ), rb_num ( self, rb_num ( ), rb_num ( self, rb_num ( rb_num ( self, rb_num ( self, rb_num ( self, rb_num ( self, rb_num ( self, rb_num ( self, rb_num ( self, rb_num ( self, rb_num ( self, rb_num ( self, rb_num ( ), rb_num ( self, rb_num ( ), rb_num ( self, rb_num ( ), rb_num ( self, rb_num ( ), rb_num ( self, rb_num ( rb_num ( self, rb_num ( self, rb_num ( self, rb_num ( self, rb_num ( self, rb_num ( self, rb_num (",0
311,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
312,<S2SV_ModStart> case NGHTTP2_IB_READ_CLIENT_MAGIC : if ( iframe -> payloadleft < NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } <S2SV_ModStart> case NGHTTP2_IB_READ_CLIENT_MAGIC : if ( iframe -> payloadleft < NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } iframe -> payloadleft -= readlen ; if ( nghttp2_is_fatal ( rv ) ) { return rv ; } if ( nghttp2_is_fatal ( rv ) ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } iframe -> state = NGHTTP2_IB_READ_CLIENT_MAGIC ; if ( iframe -> payloadleft < NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } iframe -> state = NGHTTP2_IB_READ_CLIENT_MAGIC ; if ( nghttp2_is_fatal ( rv ) ) { return NGHTTP2_ERR_,0
313,"<S2SV_ModStart> x86_pmu. max_pebs_events = max_t ( unsigned, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ; if ( x86_pmu. max_pebs_events > x86_pmu. num_counters ) x86_pmu. max_pebs_events = max_t ( unsigned, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ; if ( version > 1 ) x86_pmu. max_pebs_events = max ( ( unsigned, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ; if ( x86_pmu. max_pebs_events > x86_pmu. num_counters ) x86_pmu. max_pebs_events = max_t ( unsigned, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ; if ( version > 1 ) x86_pmu. max_pebs_events = max ( ( unsigned, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ;",0
314,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer * w, const TOKENEXTRA * * tp, const TOKENEXTRA * stop ) { const struct vpx_token * const a = & vp9_coef_encodings [ t ] ; const struct vpx_extra_bit * const b = & vp9_extra_bits [ t ] ; const int i = 0 ; int v = a -> value ; int n = a -> len ; if ( p -> skip_eob_node ) { n -= p -> skip_eob_node ; i = 2 * p -> skip_eob_node ; } if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { const int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int bits = v >> ( n - len ) ; v = v >> ( n - len ) ; vwrite_tree ( w, vp9_coef_tree, p -> context_tree, bits, len, 0 ) ; vwrite_tree ( w, vp9_coef_con_tree, vp9_pareto8_full [ p -> context_tree [ PIVOT_",0
315,"<S2SV_ModStart>, uncompressed_hdr_size ; vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> 0 } ; vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; vpx_rb_bytes_written <S2SV_ModEnd> ( & wb <S2SV_ModStart> += uncompressed_hdr_size ; vpx_compute_update_table ( ) ; first_part_size = write_compressed_header ( cpi, data ) ; data += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; vpx_clear_system_state ( ) ; first_part_size = write_compressed_header ( cpi, data ) ; data += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; vpx_clear_system_state ( ) ;",0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
317,"<S2SV_ModStart> struct ikev2_id id <S2SV_ModEnd> ; int id_len <S2SV_ModStart> * typedata ; ND_TCHECK ( * ext ) ; UNALIGNED_MEMCPY ( & id, ext, sizeof ( id ) ) ; ikev2_pay_print ( ndo, NPSTR ( tpay ), id. h. critical ) ; id_len = ntohs ( id. h. len ) ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; }",0
318,<S2SV_ModStart> ; if (! jas_tvparser_valid ( tvp ) ) { goto error ; } <S2SV_ModStart> ; if (! jas_tvparser_valid ( tvp ) ) { goto error ; } <S2SV_ModStart> ; if (! jas_tvparser_valid ( tvp ) ) { goto error ; } if (! jas_tvparser_valid ( tvp ) ) { goto error ; } if (! jas_tvparser_valid ( tvp ) ) { goto error ; } if (! jas_tvparser_valid ( tvp ) ) { goto error ; } if (! jas_tvparser_valid ( tvp ) ) { goto error ; } if (! jas_tvparser_valid ( tvp ) ) { goto error ; } if (! jas_tvparser_valid ( tvp ) ) { goto error ; } if (! jas_tvparser_valid ( tvp ) ) { goto error ; } if (! jas_tvparser_valid ( tvp ) ) { goto error ; } if (! jas_tvparser_valid ( tvp ) ) { goto error ; } if (! jas_tvparser,0
319,<S2SV_ModStart> urb ) ; kfree_skb ( skb ) ;,0
320,"<S2SV_ModStart>, yt0_0, yt1_0, yt2_0, xl0_0, xl1_0, xl20_0, xl21_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_h2_1 ; WORD32 xh0_0, xh1_0, xh20_0, xh21_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1,",0
321,<S2SV_ModStart> mntent ) { if ( IS_ERR ( mntent -> mnt_dir ) ) return PTR_ERR ( mntent -> mnt_dir ) ;,0
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
323,"<S2SV_ModStart> ) ) ; rb_hash_aset ( env, server_name_key_val, req_server_name ( req ) ) ; rb_hash_aset ( env, server_port_key_val, req_server_port ( req ) ) ; rb_hash_aset ( env, <S2SV_ModStart> ) ) ; rb_hash_aset ( env, client_id_key_val, req_client_id ( req ) ) ; rb_hash_aset ( env, client_id_key_val, req_client_id ( req ) ) ; rb_hash_aset ( env, client_id_val, req_client_id ( req ) ) ; rb_hash_aset ( env, client_id_key_val, req_client_id ( req ) ) ; rb_hash_aset ( env, client_id_key_val, req_client_id ( req ) ) ; rb_hash_aset ( env, client_id_key_val, req_client_id ( req ) ) ; rb_hash_aset ( env, client_id_key_val, req_client_id ( req ) ) ; rb_hash_aset (",0
324,"<S2SV_ModStart> endif # endif MYSQL_BIND * bind, * bind_end ; imp_sth_phb_t * fbind ; <S2SV_ModStart>, prepare_retval ; # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION imp_sth -> use_server_side_prepare = ( imp_dbh -> use_server_side_prepare )? imp_dbh -> use_server_side_prepare : ( imp_dbh -> use_server_side_prepare ) ; if ( attribs ) { svp = DBD_ATTRIB_GET_SVP ( attribs, ""mysql_server_prepare"", 20 ) ; imp_sth -> use_server_side_prepare = ( svp )? imp_dbh -> use_server_side_prepare : ( imp_dbh -> use_server_side_prepare )? imp_dbh -> use_server_side_prepare : ( imp_dbh -> use_server_side_prepare ) ; if ( svp && SvTRUE ( * svp ) ) { imp_sth -> is_async = FALSE ; do_error ( sth, 2000, ""Async <S2SV_blank> support <S2SV_blank> was <S2SV_blank> not <S2SV_blank> built <S2SV_blank> into <S2SV_blank> this",0
325,"<S2SV_ModStart> int need = 0 <S2SV_ModEnd> ; char * <S2SV_ModStart>, { need = <S2SV_ModEnd> Length ( screen <S2SV_ModStart>, { need = <S2SV_ModEnd> Length ( screen <S2SV_ModStart>, { need = <S2SV_ModEnd> Length ( screen <S2SV_ModStart>, { need = <S2SV_ModEnd> Length ( screen <S2SV_ModStart>, { need = <S2SV_ModEnd> Length ( screen <S2SV_ModStart>, { need = <S2SV_ModEnd> Length ( screen <S2SV_ModStart>, { need = <S2SV_ModEnd> Length ( screen <S2SV_ModStart>, { need = <S2SV_ModEnd> Length ( screen <S2SV_ModStart>, { need = <S2SV_ModEnd> Length ( screen <S2SV_ModStart>, { need = <S2SV_ModEnd> Length ( screen <S2SV_ModStart> } ) ;",0
326,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ftoa_bounded_extra ( JsVarFloat <S2SV_ModStart> val ) ) { const JsVarFloat stopAtError = 0.0000001 ; <S2SV_ModStart>! isfinite ( val ) ) { if ( val < 0 ) strncpy ( str, ""-Infinity"", len ) ; else strncpy ( str, ""Infinity"", len ) ; } else { if ( val < 0 ) strncpy ( str, ""Infinity"", len ) ; } else { if ( val < 0 ) strncpy ( str, ""-Infinity"", len ) ; else strncpy ( str, ""Infinity"", len ) ; } else { if ( val < 0 ) { if ( -- len <= 0 ) { * str = 0 ; return ; } * ( str ++ ) = '-' ; val = - val ; } if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ) ; d = 1 ; while ( d * radix <= val ) d *= radix ; while ( d >= 1 ) { int v = ( int ) ( val / d ) ;",0
327,"<S2SV_ModStart> ; if ( unlikely ( fast_pool -> count >= 64 ) && crng_fast_load ( ( char * ) fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { fast_pool -> count = 0 ; fast_pool -> last = now ; return ; } <S2SV_ModEnd> if ( (",0
328,"<S2SV_ModStart> { strncat ( str <S2SV_ModEnd>, jslGetTokenValueAsString ( <S2SV_ModStart> ), len ) ; strncat ( str <S2SV_ModEnd>, jslGetTokenValueAsString ( <S2SV_ModStart> ), len ) ; strncat ( str, ""\'"", len ) ; } else if ( lex -> tk == LEX_STR ) { strncat ( str, ""String:\'"", len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; strncat ( str, ""\'"", len ) ; } else if ( lex -> tk == LEX_ID ) { strncat ( str, ""ID:"", len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; } else if ( lex -> tk == LEX_ID ) { strncat ( str, ""String:\'"", len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; strncat ( str, ""\'"", len ) ; } else if ( lex -> tk == LEX_STR ) { strncat ( str, jslGetTokenValueAsString ( ), len ) ; strncat ( str",0
329,,1
330,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
331,"<S2SV_ModStart> unsigned int convert_distribution ( vpx_tree tree, unsigned int branch_ct [ ] [ 2 ], const unsigned int num_events [ ] ) { if ( tree [ i ] <= 0 ) left = num_events [ - tree [ i ] ] ; else left = num_events [ - tree [ i ] ] ; if ( tree [ i + 1 ] <= 0 ) right = convert_distribution ( tree [ i + 1 ], tree, branch_ct, num_events ) ; if ( tree [ i ] <= 0 ) left = num_events [ - tree [ i ] ] ; else right = convert_distribution ( tree [ i ], tree, branch_ct, num_events ) ; if ( tree [ i + 1 ] <= 0 ) right = num_events [ - tree [ i + 1 ] ] ; if ( tree [ i + 1 ] <= 0 ) right = num_events [ - tree [ i + 1 ] ] ; else right = convert_distribution ( tree [ i + 1 ], tree, branch_ct, num_events ) ;",0
332,"<S2SV_ModStart> s2 ) { int ret ; ret = memcmp ( s1, s2, strlen ( s1 ) + 1U ) ; if ( ret!= 0 ) return ret ;",0
333,"<S2SV_ModStart> ) ) { parse_global_option ( CMD_PRINT_HELP, NULL, NULL ) ; parse_service_option ( CMD_PRINT_HELP, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-version"" ) ) { parse_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-options"" ) ) { print_ssl_options ( ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-options"" ) ) { print_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-options"" ) ) { print_ssl_options ( ) ;",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,"<S2SV_ModStart> ; if ( st -> st_v1_new_iv. len < e -> enc_blocksize ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; st -> st_v1_new_iv. len = e -> enc_blocksize ; st -> st_v1_new_iv. len = e -> enc_blocksize ; } else if ( st -> st_v1_new_iv. len < e -> enc_blocksize ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; st -> st_v1_new_iv. len = e -> enc_blocksize ; st -> st_v1_new_iv. len = e -> enc_blocksize ; } if ( st -> st_v1_new_iv. len < e -> enc_blocksize ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank>",0
336,<S2SV_ModStart> ; if ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; } else if ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; },0
337,<S2SV_ModStart> char * print_string ( const <S2SV_ModStart> ) { return print_string_ptr <S2SV_ModEnd> ( item -> <S2SV_ModStart> valuestring ) ; } <S2SV_null> <S2SV_null>,0
338,"<S2SV_ModStart> 1 ) res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ; else if ( ( res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ) ) break ; ctx += num_enc - 1 ; if ( img ) img += num_enc - 1 ; for ( i = num_enc - 1 ; i >= 0 ; i -- ) { if ( ( res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ) break ; ctx -- ; if ( img ) img -- ; <S2SV_ModStart> i -- ) { if ( ( res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ) break ; ctx -- ; if ( img ) img -- ; } else { if ( ( res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ) break ; ctx -- ; if (",0
339,"<S2SV_ModStart> cols0 ) ; } else if ( arg1 == 3 ) { win_set_geom ( 0, 0, - 1, 0 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 1 ) { win_maximise ( 1 ) ; win_set_geom ( 0, - 1, 0 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 3 ) { win_maximise ( 0 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 1 ) { win_maximise ( 0 ) ; win_set_chars ( rows0,",0
340,<S2SV_ModStart> ++ ) s [ i ] = 0 ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( c = 0 ; c < cols + 8 ; c ++ ) { int x = s [ c + 7 ] - s [ c - 8 ] ; int y = s [ c + 7 ] + s [ c - 8 ] ; int x = s [ c + 7 ] - s [ c - 8 ] ; int y = s [ c + 7 ] + s [ c - 8 ] ; int x = s [ c + 7 ] ; int y = s [ c + 7 ] + s [ c,0
341,"<S2SV_ModStart> ; if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } if ( ( i -> posY + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> Y <S2SV_blank> position\\n"" ) ; # endif i -> posY = i -> parent -> height - i -> height ; } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif i -> posX = i -> width ;",0
342,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 16 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 32 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 64 ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",0
343,<S2SV_ModStart> ; if ( 0 == ps_sps -> i1_sps_valid ) { ps_codec -> i4_sps_done = 1 ; return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> ; if ( 0 == ps_sps -> i1_sps_valid ) { ps_codec -> i4_sps_done = 1 ; return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> ; if ( 0 == ps_sps -> i1_sps_valid ) { ps_codec -> i4_sps_done = 1 ; ps_codec -> i4_sps_done = 1 ; return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> ; if ( 0 == ps_sps -> i1_sps_valid ) { ps_codec -> i4_sps_done = 1 ; return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> ; if ( 0 == ps_sps -> i1_sps_valid ) { ps_codec -> i4_sps_done = 1 ; ps_codec -> i4_sps_done = 1 ; return IHEVCD_INVALID_HEADER ; },0
344,"<S2SV_ModStart> ) { switch ( * strptr ++ ) { case'<S2SV_blank>': break ; case 'e' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'E' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'T' : trunc_8to4 = SF_TRUE ; break ; case 'T' : trunc_8to4 = SF_FALSE ; break ; case'm' : data = va_arg ( argptr, unsigned int ) ; header_put_marker ( psf, data ) ; count += 1 ; break ; case '2' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_long ( psf, data ) ; } else { header_put_le_long ( psf, data ) ; } ; count += 2 ; break ; case '3' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_long ( psf, data ) ; } else { header_put_",0
345,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, exception ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> ) break ; status = SetImageExtent ( image, exception ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> ) break ; status = SetImageExtent ( image, exception ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( Cor",0
346,"<S2SV_ModStart> } pid_t child ; if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; return 0 ; } child = copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; }",0
347,"<S2SV_ModStart> get_block_variance_fn ( BLOCK_SIZE bsize, vpx_bit_depth_t bit_depth <S2SV_ModStart> : return vp9_mse8x8 ; case BLOCK_16X8 : return vp9_mse16x8 ; case BLOCK_8X16 : return vp9_mse8x16 ; case BLOCK_16X16 : return vp9_mse16x16 ; case BLOCK_16X16 : return vp9_mse16x16 ; case BLOCK_8X16 : return vp9_mse8x16 ; case BLOCK_16X16 : return vp9_mse16x16 ; case BLOCK_16X16 : return vp9_mse16x16 ; default : return vp9_mse8x16 ; } }",0
348,"<S2SV_ModStart> ; } } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX ) { return return_pkinit_kx ( context, padata, request, reply, encrypting_key, send_pa ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX ) { return return_pkinit_kx ( context, padata, request, reply, encrypting_key, send_pa ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX ) { return return_pkinit_kx ( context, padata, request, reply, encrypting_key, send_pa ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX ) { return return_pkinit_kx ( context, padata, request, reply, encrypting_key, send_pa ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX ) { return return_pkinit_kx ( context, padata, request, reply, encrypt",0
349,"<S2SV_ModStart> flags ) ; <S2SV_ModEnd> v4l2_buf = to_vb2_v4l2_buffer <S2SV_ModStart> v4l2_buf ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", input -> buf_cur_space_left, frame_len ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> s",0
350,<S2SV_ModStart> size ) { if ( size < PREFIX_SIZE ) { zmalloc_oom_handler ( size ) ; return NULL ; },0
351,<S2SV_ModStart> -> serviceId == EXTRACT_16BITS <S2SV_ModEnd> ( & rxh,1
352,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > IEEE80211_MAX_SSID_LEN ) { memset ( adhoc_start -> ssid, 0, sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) - sizeof ( struct host_cmd_ds_802_11_ad_hoc_",0
353,"<S2SV_ModStart> ; if ( sfe -> namelen > XFS_ATTR_SF_MAXNAMELEN ) { error = context -> put_listent ( context, sfe -> flags, sfe -> nameval, sfe -> namelen, sfe -> valuelen, & sfe -> nameval [ sfe -> namelen ] ) ; if ( error ) return error ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; } if ( count > XFS_ATTR_SF_MAXNAMELEN ) { error = context -> put_listent ( context, sfe -> flags, sfe -> nameval, sfe -> namelen, sfe -> valuelen, & sfe -> nameval [ sfe -> namelen ] ) ; if ( context -> put_listent ( context, sfe -> flags, sfe -> nameval, sfe -> namelen, sfe -> valuelen, & sfe -> nameval [ sfe -> valuelen ] ) ; if ( context -> put_listent ( context, sfe -> flags, sfe -> nameval, sfe -> namelen, sfe -> valuel",0
354,"<S2SV_ModStart> = data ; struct l2cap_conf_rfc rfc ; BT_DBG ( ""sk <S2SV_blank> %p"", sk ) ; switch ( pi -> mode ) { case L2CAP_MODE_BASIC : if ( pi -> imtu!= L2CAP_DEFAULT_MTU ) l2cap_add_conf_opt ( & ptr, L2CAP_CONF_MTU, 2, pi -> imtu ) ; break ; case L2CAP_MODE_ERTM : rfc. mode = L2CAP_MODE_ERTM ; rfc. txwin_size = L2CAP_DEFAULT_RX_WINDOW ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; l2cap_add_conf_opt ( & ptr, L2CAP_CONF_",0
355,"<S2SV_ModStart> r ) { if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } <S2SV_ModStart> MSG_WAITALL ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } ret = recv ( sock_fd, buf, r, MSG_WAITALL ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
356,"<S2SV_ModStart> u4_length ) { if ( ps_dec -> u4_slice_start_code_found!= 1 ) { H264_DEC_DEBUG_PRINT ( ""\\nNot <S2SV_blank> in <S2SV_blank> Nal <S2SV_blank> Unit, <S2SV_blank> Let\'s <S2SV_blank> try\\n"" ) ; } else { H264_DEC_DEBUG_PRINT ( ""\\nNot <S2SV_blank> in <S2SV_blank> Nal <S2SV_blank> Unit, <S2SV_blank> Let\'s <S2SV_blank> try\\n"" ) ; }",0
357,"<S2SV_ModStart>!= 0 ) { mprAddItem ( app -> formData, sclone ( pair ) ) ; pair = stok ( 0, ""&"", & tok ) ; }",0
358,"<S2SV_ModStart> * open_stateid, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; if ( fmode & ( FMODE_READ | FMODE_WRITE ) )!= fmode ) goto no_delegation_unlock ; <S2SV_ModStart> deleg_cur ) ; if ( fmode & ( FMODE_READ | FMODE_WRITE ) )!= fmode <S2SV_ModEnd> ) goto no_delegation_unlock <S2SV_ModStart> deleg_cur ) ; if ( fmode & ( FMODE_READ | FMODE_WRITE ) )!= fmode <S2SV_ModEnd> ) goto no_delegation_unlock <S2SV_ModStart> deleg_cur ) ; if ( fmode & ( FMODE_READ | FMODE_WRITE ) ) goto no_delegation_unlock ; if ( fmode & ( FMODE_READ | FMODE_WRITE ) )!= fmode <S2SV_ModEnd> ) goto no_delegation_unlock <S2SV_ModStart> deleg_cur ) ; if ( fmode & ( FMODE_READ | FMODE_WRITE ) )!= fmode <S2SV_ModEnd> ) goto no_delegation_unlock <S2SV_ModStart> deleg_cur ) ; if ( fmode & ( FMODE_READ | FMODE_WRITE ) ) goto no_deleg",0
359,"<S2SV_ModStart> ""btif_hl_select_close_connected"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
360,"<S2SV_ModStart> int64_t * out_dist_sum, vpx_bit_depth_t bit_depth <S2SV_ModStart> int sse ; vpx_bit_depth_t bit_depth <S2SV_ModStart>. vf ( p -> src. buf, p -> src. stride, pd -> dst. buf, pd -> dst. stride, & bit_depth <S2SV_ModStart>. vf ( p -> src. buf, p -> src. stride, pd -> dst. buf, pd -> dst. stride, & sse ) ; if ( cpi -> speed > 4 ) { int64_t rate ; int64_t dist ; vpx_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], & rate, & dist ) ; * out_rate_sum = ( int ) rate_sum ; * out_dist_sum = ( int ) dist_sum ; } else { int rate ; int64_t dist ; vpx_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], pd -> dequant [ 1 ] >> 3, & rate, & dist ) ; * out",0
361,<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
362,<S2SV_ModStart> { if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( <S2SV_ModStart>'<S2SV_blank>') || ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BU,0
363,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { vpx_read_tree <S2SV_ModEnd> ( r, <S2SV_ModStart> return vpx_read_tree ( r <S2SV_ModEnd>, vp9_segment_tree,",0
364,"<S2SV_ModStart> ++ i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ i ) { memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",0
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,"<S2SV_ModStart> ; buf2 = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf2 == NULL ) return ( NULL ) ;",0
367,"<S2SV_ModStart> ; } n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n < ( length + 8 ) ) { return ERROR_FAILURE ; } netBufferRead ( context -> txBuffer, buffer, offset, length ) ; header. controlWord = htole16 ( TX_CTRL_TXIC | ( context -> frameId ++ & TX_CTRL_TXFID ) ) ; header. byteCount = htole16 ( length ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, RXQCR_SDA ) ; ksz8851SetBit ( interface, KSZ8851_TXQCR, TXQCR_METFE ) ; netBufferRead ( context -> txBuffer, buffer, offset, length ) ; header. controlWord = htole16 ( TX_CTRL_TXIC | ( context -> frameId ++ & TX_CTRL_TXFID ) ) ; header. byteCount = htole16 ( length ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, RXQCR_SDA",0
368,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> if ( domains_to_finalize,0
369,"<S2SV_ModStart>, x_7 ; WORD32 x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 x_9 = * x0 ++ ; x_8 = * x0 ++ ; x_9 = * x0 ++ ; x_a = * x0 ++ ; x_b = * x0 ++ ; x_c = * x0 ++ ; x_d = * x0 ++ ; x_e = * x0 ++ ; x_e = * x0 ++ ; x_9 = * x0 ++ ; x_8 = * x0 ++ ; x_9 = * x0 ++ ; x_8 = * x0 ++ ; x_9 = * x0 ++ ; x_8 = * x0 ++ ; x_9 = * x0 ++ ; x_8 = * x0 ++",0
370,<S2SV_ModStart> ( unlikely ( pmd_none_or_clear_bad <S2SV_ModEnd> ( pmd ),0
371,"<S2SV_ModStart> int width, height, target_width, target_height ; if ( argc < 4 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } if ( argc < 5 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; }",0
372,"<S2SV_ModStart>, result ; if ( num_fields < 0 ) { return 0 ; } _Py_IDENTIFIER ( _attributes ) ; PyObject * l = PyTuple_New ( num_fields ) ; if (! l ) return 0 ; for ( i = 0 ; i < num_fields ; i ++ ) { s = PyUnicode_FromString ( attrs [ i ] ) ; if (! s ) { Py_DECREF ( l ) ; return 0 ; } PyTuple_SET_ITEM ( l, i, s ) ; } result = _PyObject_SetAttrId ( ( PyObject * ) type, & PyId__attributes, l ) >= 0 ;",0
373,"<S2SV_ModStart> = VPX_CODEC_OK ; <S2SV_ModEnd> struct vpx_codec_alg_priv * <S2SV_ModStart> struct vpx_codec_alg_priv * priv = calloc ( 1, sizeof ( struct vpx_codec_alg_priv ) ) ; if (! priv ) { return VPX_CODEC_MEM_ERROR ; } <S2SV_ModStart> enc ) { memset ( & priv -> base, 0, sizeof ( struct vpx_codec_alg_priv ) ) ; } <S2SV_ModStart> config. enc ) { memset ( & priv -> cfg, 0, sizeof ( struct vpx_codec_enc_cfg_t ) ) ; ctx -> config. enc = & priv -> cfg <S2SV_ModEnd> ; } cfg <S2SV_ModStart> i ++ ) ; priv -> vp8_cfg = extracfg_map [ i ]. cfg ; priv -> vp8_cfg. pkt_list = malloc ( priv -> vp8_cfg. pkt_list. head ) ; priv -> cx_data_sz = priv -> cfg. g_w * priv -> cfg. g_h * 3 / 2 * 2 ; if ( priv -> cx_data_sz < 32768 ) priv -> cx_data_sz = 32768 ; priv",0
374,"<S2SV_ModStart> ; if ( ( ret = s -> decode ( gb, rc, value, cumfr, cnt_c, totfr ) ) < 0 ) return ret ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; if ( totfr > BOT ) { totfr = 0 ; for ( i = 0 ; i < 16 ; i ++ ) { unsigned nc = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = nc ; pixel -> freq [ i ] = nc ; pixel -> lookup [ i ] = nc ; pixel -> freq [ i ] = nc ; pixel -> freq [ i ] = nc ; pixel -> lookup [ i ] = nc ; } for ( i = 0 ; i < 16 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; pixel -> freq [ i16_17 + j ] = sum ; pixel -> lookup [ i16_17 + j ] = sum ; } for ( i = 0 ; i < 16 ;",0
375,"<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ( ctx -> fragments. ptrs, 0, sizeof ( ctx -> fragments. ptrs ) ) ; memset ( ( void * ) ctx -> fragments. sizes, 0, sizeof ( ctx -> fragments. sizes ) ) ; } if ( ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ ctx -> fragments. count ] = data ; ctx -> fragments. sizes [ ctx -> fragments. count ] = data_sz ; ctx -> fragments. count ++ ; if ( ctx -> fragments. count > ( 1 << EIGHT_PARTITION ) + 1 ) { ctx -> fragments. count = 0 ; * res = VPX_CODEC_INVALID_PARAM ; return - 1 ; } return 0 ; } if ( ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count ++ ; if ( ctx -> fragments. count > ( 1 << EIGHT_PARTITION ) +",0
376,"<S2SV_ModStart>! efe ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!efe\\n"", inode -> i_ino ) ; goto out ; } if (! fe -> icbTag. strategyType ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!fe\\n"", inode -> i_ino ) ; goto out ; } if (! efe -> icbTag. strategyType ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!efe\\n"", inode -> i_ino ) ; goto out ; } if (! fe -> icbTag. strategyType ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!fe\\n"", inode -> i_ino ) ; goto out ; } if (! efe -> icbTag. strategyType ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!efe\\n"", inode -> i_ino ) ; goto out ; }",0
377,"<S2SV_ModStart> data ) { enc28j60WriteReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & MISTAT_BUSY <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> )!= 0",0
378,<S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> bad_format_imginfo ( char <S2SV_ModStart> ) { char * ptr ; int n = 0 ; ptr = fmt ; while ( * ptr!= '\\0' ) if ( * ptr ++ == '%' ) return 1 ; if ( * ptr =='s' || * ptr == 'S' ) { n = 1 ; ptr ++ ; } else if ( * ptr =='<S2SV_blank>') ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; if ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; if ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if,0
379,"<S2SV_ModStart> ""IPV6DefragInOrderSimpleTest"", IPV6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""IPV6DefragReverseSimpleTest"", IPV6DefragReverseSimpleTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakBsdTest"", IPV6DefragSturgesNovakBsdTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakLinuxTest"", IPV6DefragSturgesNovakLinuxTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakWindowsTest"", IPV6DefragSturgesNovakWindowsTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakFirstTest"", IPV6DefragSturgesNovakFirstTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakLastTest"", IPV6DefragSturgesNovakLastTest ) ;",0
380,<S2SV_ModStart> ; if ( object_length + add_v1_record > sizeof ( new_object. data ) ) { sc_cardctl_coolkey_object_t new_object ; new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { sc_cardctl_coolkey_object_t new_object = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { sc_cardctl_coolkey_object_t new_object = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { sc_cardctl_coolkey_object_t new_object = malloc ( object_length + add_v1_record ) ; if ( new_object. length + add_v1_record > sizeof ( new_object. data ) ) { sc_cardctl_coolkey_object_t new_object = malloc ( object_length + add_v1_record ) ; if ( new_object. length + add_,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,"<S2SV_ModStart> b_go ) { if ( p_enc -> fmt_in. i_codec!= p_enc -> fmt_in. i_codec ) { p_enc -> fmt_in. i_codec = p_enc -> fmt_in. i_codec ; p_enc -> fmt_in. i_codec = vlc_fourcc_to_char ( p_enc -> fmt_in. i_codec, p_enc -> fmt_in. i_codec ) ; } else { if ( p_enc -> fmt_in. i_codec!= p_enc -> fmt_in. i_codec ) { p_enc -> fmt_in. i_codec = vlc_fourcc_to_char ( p_enc -> fmt_in. i_codec, p_enc -> fmt_in. i_codec ) ; p_enc -> fmt_in. i_codec = vlc_fourcc_to_char ( p_enc -> fmt_in. i_codec, p_enc -> fmt_in. i_codec ) ; p_enc -> fmt_in. i_codec = vlc_fourcc_to_char (",0
384,"<S2SV_ModStart>, '\\0' ) ; if (! mp_path_exists ( mf -> names [ mf -> nr_of_files - 1 ] ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ mf -> nr_of_files - 1 ] ) ; } else { mp_verbose ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ mf -> nr_of_files - 1 ] ) ; if (! mp_path_exists ( mf -> names [ mf -> nr_of_files - 1 ] ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ mf -> nr_of_files - 1 ] ) ; } else { mp_verbose ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ mf -> nr_of_files - 1 ] ) ; if (! mp_path_exists ( mf -> names [ mf -> nr_of_files - 1 ] ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank>",0
385,<S2SV_ModStart> 4 ) ; if ( idx + 4 > len ) return NULL ; <S2SV_ModStart> ) ; for ( j = 0 ; j < ( a -> names [ i ]. len >> 1 ) ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ;,0
386,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * data ; YV12_BUFFER_CONFIG * fb ; vpx_get_reference_dec ( ctx -> pbi, data -> idx, & fb ) ; yuvconfig2image ( & data -> img, fb, NULL ) ; return VPX_CODEC_OK ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
388,"<S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> SOS <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( i + 1 < frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA",0
389,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == testlist ) expr1 = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; else expr1 = ast_for_expr ( c, CHILD ( n, 1 ) ) ; if (! expr1 ) return NULL ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; switch ( TYPE ( CHILD ( n, 2 ) ) { case testlist ) expr2 = ast_for_testlist ( c, CHILD ( n, 2 ) ) ; else expr2 = ast_for_expr ( c, ch ) ; if (! expr2 ) return NULL ; newoperator = ast_for_augassign ( c, CHILD ( n, 1 ) ) ; if (! newoperator ) return NULL ; newoperator = ast_for_augassign ( c, expr1, newoperator, expr2, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c -> c_arena ) ; }",0
390,"<S2SV_ModStart> int vp8_denoiser_filter_c ( <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * mc_running_avg_y, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * running_avg_y, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> char * mc_avg_y, <S2SV_ModEnd> int avg_y_stride = <S2SV_ModStart> int r, c, i ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( i = 0 ; i < 3 ; i ++ ) adj_val [ i ] += 1 ; } for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 16 ; ++ c ) { if ( mc_running_avg_y [ c ] > mc_running_avg_y [ c ] ) running_avg_y [ c ] = mc_running_avg_y [ c ] ; sum_diff += diff ; } else { if ( absdiff >= 4 && absdiff <= 7 ) adjustment = adj_val [ 0 ] ; else adjustment = adj_val [ 1 ] ; if ( diff > 0 )",0
391,"<S2SV_ModStart> { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; if ( ( sockPtr -> flags & NS_CONN_ENTITYTOOLARGE )!= 0u ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; if ( ( sockPtr -> flags & NS_CONN_ENTITYTOOLARGE )!= 0u ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; if ( ( sockPtr -> flags & NS_CONN_ENTITYTOOLARGE )!= 0u ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; } } else { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; if ( ( sockPtr -> flags & NS_CONN_ENTITYTOOLARGE )!= 0u ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; if ( ( sockPtr -> flags & NS_CONN_ENTITYTOOLARGE )!= 0u ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-",0
392,"<S2SV_ModStart> = 0 ; unsigned long cp0 ; unsigned long cp1 ; unsigned long cp2 ; cp0 = xtregs -> cp0 ; cp1 = ( unsigned long ) cp0 ; cp2 = ( unsigned long ) cp1 ; ret |= __copy_from_user ( & cp0, & cp1, sizeof ( cp1 ) ) ; ret |= __copy_from_user ( & cp2, & cp2, sizeof ( cp2 ) ) ; ret |= __copy_from_user ( & cp1, & cp1, sizeof ( cp1 ) ) ; ret |= __copy_from_user ( & cp2, & cp1, sizeof ( cp2 ) ) ; ret |= __copy_from_user ( & cp1, & cp1, sizeof ( cp1 ) ) ; ret |= __copy_from_user ( & cp2, & cp2, sizeof ( cp2 ) ) ;",0
393,<S2SV_ModStart> size ) ; # if ( ETH_SUPPORT == ENABLED ) message -> srcIpAddr = queueItem -> ancillary. srcIpAddr ; # endif # if ( ETH_PORT_TAGGING_SUPPORT == ENABLED ) message -> switchPort = queueItem -> ancillary. port ; # endif # if ( ETH_TIMESTAMP_SUPPORT == ENABLED ) message -> timestamp = queueItem -> ancillary. timestamp ; # endif,0
394,"<S2SV_ModStart> xop ) { struct se_subsystem_dev * sdev <S2SV_ModEnd> ; if ( <S2SV_ModStart> == XCOL_SOURCE_RECV_OP ) sdev = xop -> src_dev ; else sdev = xop -> dst_dev ; else sdev = xop -> src_dev ; pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & sdev -> dev_group. cg_item ) ; target_undepend_item ( & sdev -> dev_group. cg_item ) ;",0
395,<S2SV_ModStart> int error ; struct ext2_xattr_entry * ei ; <S2SV_ModStart> new_bh ) ; ei = EXT2_I ( inode ) -> i_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> map ) { vpx_active_map_t * const map = va_arg ( args, vpx_active_map_t * ) ; if (! vp9_set_active_map ( ctx -> cpi, map -> active_map, map -> rows, map -> cols ) ) return VPX_CODEC_INVALID_PARAM ; else return VPX_CODEC_INVALID_PARAM ; } else { return VPX_CODEC_INVALID_PARAM ; }",0
397,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
398,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
399,"<S2SV_ModStart> unsigned char * ) AcquireQuantumMemory ( imsx * imsy, 1 ) ; if ( imbuf == NULL ) { return ( MagickFalse ) ; } for ( n = 0 ; n < 16 ; n ++ ) { sixel_palet [ n ] = SIXEL_RGB ( r * 51, g * 51, b * 51 ) ; } for ( i = 0 ; i < 24 ; i ++ ) { sixel_palet [ n ] = SIXEL_RGB ( i * 11, i * 11, i * 11 ) ; } for ( i = 0 ; i < 24 ; i ++ ) { sixel_palet [ n ] = SIXEL_RGB ( r * 51, g * 51, b * 51 ) ; } for ( i = 0 ; i < 24 ; i ++ ) { sixel_palet [ n ] = SIXEL_RGB ( r * 51, g * 51, b * 51 ) ; } for ( i = 0 ; i < 24 ; i ++ ) { sixel_palet [ n ] = SIXEL_RGB ( r * 51, g * 51, b * 51 ) ; } for ( i =",0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { vpx_ref_frame_t * data = va_arg ( args, vpx_ref_frame_t * ) <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; memset ( frame, 0, sizeof ( vpx_ref_frame_t ) ) ; <S2SV_ModStart> VP9_REFFRAME ) frame -> frame_type, sizeof ( VP9_REFFRAME ) ) ; return vp9_copy_reference_dec ( ctx -> pbi <S2SV_ModEnd>, ( VP9_REFFRAME <S2SV_ModStart> VP9_REFFRAME ) frame -> frame_type <S2SV_ModEnd>, & sd <S2SV_ModStart> VP9_REFFRAME ) frame -> frame_type <S2SV_ModEnd>, & sd <S2SV_ModStart> return vp9_copy_reference_dec ( ctx <S2SV_ModEnd> -> pbi,",0
401,<S2SV_ModStart> -> u2_total_mbs_coded ; if ( ps_dec -> u2_total_mbs_coded > ps_dec -> u2_total_mbs_coded ) { ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> u2_total_mbs_coded = 0 ; if ( ps_dec -> u2_total_mbs_coded > ps_dec -> u2_total_mbs_coded ) { ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> u2_total_mbs_coded = ps_dec -> u2,0
402,"<S2SV_ModStart>, u4_y_offset ; IMPEG2D_TRACE_MB_START ( ps_dec -> u2_mb_x, ps_dec -> u2_mb_y ) ; <S2SV_ModStart> B_PIC ) { memset ( pu1_out_p, 0, sizeof ( uWORD8 ) ) ; memset ( pu1_pred, 0, sizeof ( uWORD8 ) ) ; memset ( pu1_pred, 0, sizeof ( uWORD8 ) ) ; memset ( pu1_out_p, 0, sizeof ( uWORD8 ) ) ; memset ( pu1_pred, 0, sizeof ( uWORD8 ) ) ; <S2SV_ModStart> == B_PIC ) { memset ( pu1_out_p, 0, sizeof ( uWORD8 ) ) ; memset ( pu1_pred, 0, sizeof ( uWORD8 ) ) ; memset ( pu1_pred, 0, sizeof ( uWORD8 ) ) ; memset ( pu1_pred, 0, sizeof ( uWORD8 ) ) ; memset ( pu1_pred, 0, sizeof ( uWORD8 ) ) ; memset ( pu1_out_p, 0,",0
403,"<S2SV_ModStart> VP9_LAST_FLAG ) { const YV12_BUFFER_CONFIG * const cfg = cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; } else if ( ref_frame_flag == VP9_LAST_FLAG ) { const YV12_BUFFER_CONFIG * const cfg = cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; }",0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
405,"<S2SV_ModStart> TX_SIZE tx_size = get_uv_tx_size ( mbmi ) ; const BLOCK_SIZE plane_bsize = get_plane_block_size ( bsize, pd ) ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ plane_bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ plane_bsize ] ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) { int r, c ; int max_blocks_wide = num_4x4_w ; int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling",0
406,<S2SV_ModStart> ) { # if CONFIG_FAST_UNALIGNED dst [ 0 ] = src [ 0 ] ; dst [ 1 ] = src [ 1 ] ; dst [ 2 ] = src [ 2 ] ; dst [ 3 ] = src [ 3 ] ; dst [ 4 ] = src [ 4 ] ; dst [ 5 ] = src [ 5 ] ; dst [ 6 ] = src [ 6 ] ; dst [ 7 ] = src [ 7 ] ; # else ( ( uint32_t * ) dst ) [ 0 ] = ( ( uint32_t * ) src ) [ 0 ] ; ( ( uint32_t * ) dst ) [ 1 ] = ( ( uint32_t * ) src ) [ 1 ] ; # endif,0
407,"<S2SV_ModStart> nrow ) { if ( ( row + img -> row_offset ) % rowsperstrip!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""gtStripSeparate"", ""%s"", ""(row+img->row_offset)%rowsperstrip!=0"" ) ; return ( 0 ) ; } <S2SV_ModEnd> nrow = ( <S2SV_ModStart> % rowsperstrip!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""%s"", ""(row+img->row_offset)% rowsperstrip!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""gtStripSeparate"", ""%s"", ""(row+img->row_offset)%rowsperstrip!=0"" ) ; return ( 0 ) ; }",0
408,"<S2SV_ModStart> } } } if ( TYPE ( n )!= TYPE_COMMENT ) { Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %s"", TYPE ( CHILD ( n, 0 ) ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %s"", TYPE ( CHILD ( n, 1 ) ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %s"", TYPE ( CHILD ( n, 1 ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %s"", TYPE ( CHILD ( n, 1 ) ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %s"", TYPE ( CHILD ( n, 1 ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment found: <S2SV_blank> %s"", TYPE ( CHILD ( n, 1 ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %s"", TYPE ( CHILD ( n, 2 ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %s"", TYPE ( CHILD ( n, 2 ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found:",0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> headindex,0
410,<S2SV_ModStart> number ) ; if ( num & ( 1 << ( number - 1 ) ) ) return num - ( 1 << number ) ; else return num ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
411,"<S2SV_ModStart> ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int cols = vpx_img_plane_cols ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int rows = vpx_img_plane_cols ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; for ( y = 0 ; y < rows ; ++ y ) { if ( fread ( buf, stride, rows, file )!= rows <S2SV_ModEnd> ) return 0",0
412,"<S2SV_ModStart> ; uint16_t attr_len <S2SV_ModEnd> ; uint16_t orig_attr_len <S2SV_ModStart> ; if ( avp -> length < sizeof ( struct l2tp_avp_t ) + 2 ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } attr_len = avp -> length - sizeof ( struct l2tp_avp_t ) ; if ( attr_len > MD5_DIGEST_LENGTH ) { memcpy ( avp -> val, p1, attr_len ) ;",0
413,"<S2SV_ModStart> return 0 ; if ( ctx -> cipher_data == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_MEM_ALLOC_ERROR ) ; return 0 ; }",0
414,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
415,"<S2SV_ModStart> ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> sk <S2SV_blank> %p"" <S2SV_ModEnd>, sock,",0
416,"<S2SV_ModStart> ) { memcpy ( pass_salt, cpkt. data, cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PASSSALT ) { memcpy ( pass_salt, cpkt. data, cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PLAINDATA ) { fwrite ( ( const void * ) cpkt. data, 1, cpkt. length, stdout ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 0 ; if ( is_a_tty ) { setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; }",0
417,"<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_close ( adata -> conn ) ; <S2SV_ModStart> err_close_conn ; } mutt_socket_empty ( adata -> conn ) ; if ( mutt_exec ( adata, ""STARTTLS"", IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc!= IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ) ; mutt_socket_empty ( adata -> conn ) ; if ( mutt_exec ( adata, ""STARTTLS"", IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc!= IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ; mutt",0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,"<S2SV_ModStart> 0 ) { if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } else if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } else if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } else if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } else if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } else if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd",0
420,"<S2SV_ModStart>, & rlen, 0",1
421,"<S2SV_ModStart> ; read_userfile ( ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, sizeof ( user -> password ) + 17 ) ; init_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> seskey, pkthdr -> outcounter, pkthdr -> outcounter ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> seskey, curconn -> outcounter ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> outcounter, pkthdr -> outcounter ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> seskey, curconn -> outcounter ) ; send_udp",0
422,"<S2SV_ModStart> ( name, ""__debug__"" ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" )",0
423,<S2SV_ModStart> buf ) - 1 && str [ i ],0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,"<S2SV_ModStart> ; return FALSE ; } if ( credssp_verify ( transport -> credssp ) < 0 ) { connectErrorCode = AUTHENTICATIONERROR ; fprintf ( stderr, ""Authentication <S2SV_blank> failure, <S2SV_blank> check <S2SV_blank> credentials.\\n"" ""If <S2SV_blank> credentials <S2SV_blank> are <S2SV_blank> invalid, <S2SV_blank> the <S2SV_blank> NTLMSSP <S2SV_blank> implementation <S2SV_blank> may <S2SV_blank> be <S2SV_blank> to <S2SV_blank> blame.\\n"" ) ; credssp_free ( transport -> credssp ) ; connectErrorCode = AUTHENTICATIONERROR ; fprintf ( stderr, ""Authentication <S2SV_blank> failure, <S2SV_blank> check <S2SV_blank> credentials.\\n"" ) ; credssp_free ( transport -> credssp ) ; connectErrorCode = AUTHENTICATIONERROR ; fprintf ( stderr, ""Authentication <S2SV_blank> failure, <S2SV_blank> check <S2SV_blank> credentials.\\n"" ""If <S2SV_blank> credentials <S2SV_blank> are <S2SV_blank> valid, <S2SV_blank> the <S2SV_blank> NTLMSSP <S2SV_blank> implementation <S2SV_blank> may <S2SV_blank> be <S2SV_blank> to <S2SV_blank> blame.\\n"" ) ; credssp_free ( transport -> credssp ) ; return FALSE ; }",0
426,"<S2SV_ModStart> size_t s ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } s = exif_get_long ( buf + o, EXIF_BYTE_ORDER_INTEL ) ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; }",0
427,<S2SV_ModStart> bd_addr ) { btif_dm_lock ( ) ;,0
428,<S2SV_ModStart> int i ; size_t <S2SV_ModEnd> avail ; int <S2SV_ModStart> 4 ) ; size_t <S2SV_ModStart> buf -> cursor ; size_t <S2SV_ModEnd> expect ; txid <S2SV_ModStart> ; if ( size_t > <S2SV_ModEnd> buf -> len <S2SV_ModStart> buf -> cursor + size <S2SV_ModEnd> ) goto bad_format <S2SV_ModStart> ; if ( size_t > <S2SV_ModEnd> buf -> len <S2SV_ModStart> buf -> cursor + size <S2SV_ModEnd> ) goto bad_format <S2SV_ModStart> ; if ( size_t > <S2SV_ModEnd> buf -> len <S2SV_ModStart> buf -> cursor + size <S2SV_ModEnd> ) goto bad_format <S2SV_ModStart> ; if ( size_t > <S2SV_ModEnd> buf -> len <S2SV_ModStart> buf -> cursor ) goto bad_format ; size_t <S2SV_ModEnd> cur = pq_getmsgint64 <S2SV_ModStart> buf ) ; if ( size_t > <S2SV_ModEnd> buf -> len <S2SV_ModStart> buf -> cursor + size <S2SV_ModEnd> ) goto bad_format,0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header,0
430,"<S2SV_ModStart> = - 1 ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> OE_RAISE_ERRNO ( OE_EINVAL ) ; <S2SV_ModStart> = 0 ; if ( oe_syscall_write ( & ret, epoll -> host_fd, buf, count )!= OE_OK ) OE_RAISE_ERRNO ( OE_EINVAL ) ;",0
431,"<S2SV_ModStart> { errstr = parse_global_option ( CMD_INITIALIZE, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_DIR_MAX : * ( size_t * ) val = ms -> elf_dir_max ; return 0 ; case MAGIC_PARAM_NAME_MAX : * ( size_t * ) val = ms -> name_max ; return 0 ; case MAGIC_PARAM_ELF_PHNUM_MAX : * ( size_t * ) val = ms -> elf_phnum_max ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ; case MAGIC_PARAM_ELF_PHNUM_MAX : * ( size_t * ) val = ms -> elf_phnum_max ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ;,0
433,<S2SV_ModStart> * journal = EXT4_JOURNAL ( page -> mapping -> host ) ; if (! try_get_page ( page ) ) { unlock_page ( page ) ; return ; },0
434,<S2SV_ModStart> ++ ) { writer = GF_SAFEALLOC ( <S2SV_ModStart> TrackWriter ) ; if (! writer ) goto exit ; writer -> sampleNumber = 1 ; writer -> mdia = trak -> Media ; writer -> stbl = trak -> Information -> sampleTable ; writer -> timeScale = trak -> Media -> mediaHeader -> timeScale ; writer -> all_dref_mode = Media_SelfContainedType ( writer -> mdia ) ; if ( trak -> sample_encryption ) writer -> prevent_dispatch = GF_TRUE ; writer -> isDone = 0 ; writer -> chunkDur = 0 ; writer -> chunkDur = 0 ; writer -> chunkDur = 0 ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer -> stsc ) return GF_OUT_OF_MEM ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer -> stsc ) return GF_OUT_OF_,0
435,"<S2SV_ModStart> 17 ] ; size_t <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> ; # endif strncpy ( md5data, password, 82 ) ; md5data [ 83 ] = '\\0' ; memcpy ( md5data + 1 + strlen ( password ), pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; init_packet ( & data, MT_PTYPE_DATA, srcmac, dstmac, sessionkey, outcounter ) ; plen = add_control_packet ( & data, MT_CPTYPE_PASSWORD, md5data, 17 ) ; plen += add_control_packet ( & data, MT_CPTYPE_USERNAME, username, strlen ( username ) ) ; plen += add_control_packet ( & data, MT_CPTYPE_TERM_TYPE, terminal, strlen ( terminal ) ) ; if ( is_a_tty && get_terminal_size",0
436,<S2SV_ModStart> ; if ( _mibindexes ) { int i ; for ( i = 0 ; i < _mibindex_max ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; free ( _mibindexes ) ; _mibindexes = NULL ; },0
437,"<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i + 1 ) ) == COMMA ) i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case DOUBLESTAR : if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i + 1 ) ) == COMMA ) i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto",0
438,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
439,"<S2SV_ModStart> -> y_buffer ; # if CONFIG_VP9_HIGHBITDEPTH if ( ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) <S2SV_ModStart> row ) { memcpy ( dst, src, src_ybc -> y_width ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( dst_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( dst_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { # if CONFIG_VP9_HIGHBITDEPTH if ( ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && (",0
440,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMP <S2SV_ModStart> mi_col ; int dummy_rate ; int64_t dummy_dist ; MACROBLOCK * x = & cpi -> mb ; if ( sf -> adaptive_pred_interp_filter ) { for ( i = BLOCK_4X4 ; i < BLOCK_8X8 ; ++ i ) { const int num_4x4_w = MAX ( 4, num_4x4_blocks_wide_lookup [ i ] ) ; const int num_4x4_h = MAX ( 4, num_4x4_blocks_high_lookup [ i ] ) ; const int num_4x4_blk = MAX ( 16, num_4x4_blk ) ; for ( x -> sb_index = 0 ; x -> sb_index < 4 ; ++ x -> sb_index ) for ( x -> b_index < 16 / num_4x4_blk ; ++ x -> b_index ) get_block_context ( x, i ) -> pred_interp_filter = SWITCHABLE ;",0
441,"<S2SV_ModStart>, obj_tlen ; u_int hexdump ; u_int offset ; u_int link_type ; union { float f ; uint32_t i ; } bw ; if ( EXTRACT_16BITS ( lmp_com_header -> length ) > len ) { ND_PRINT ( ( ndo, ""\\n\\tLMPv%u, <S2SV_blank> msg-type: <S2SV_blank> %s, <S2SV_blank> Flags: <S2SV_blank> [%s]"", LMP_EXTRACT_VERSION ( lmp_msg_type_values, ""unknown, <S2SV_blank> type: <S2SV_blank> %u"", lmp_com_header -> msg_type ), bittok2str ( lmp_header_flag_values, ""none"", lmp_obj_ctype ) ) ; return ; } if ( EXTRACT_16BITS ( lmp_com_header -> length ) > len ) { ND_PRINT ( ( ndo, ""\\n\\tLMPv%u, <S2SV_blank> msg-type: <S2SV_blank> %s, <S2SV_blank> Flags: <S2SV_blank> [%s]"", LMP_EXTRACT_VERSION ( lmp_com_header -> length ), bittok2str ( lmp_header_flag_values,",0
442,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> inc_mvs ( const <S2SV_ModStart> ++ i ) { MV diff = { mvs [ i ]. as_mv. row - mbmi -> ref_mvs [ mbmi -> ref_frame [ i ] ] [ 0 ]. as_mv. row, mvs [ i ]. as_mv. col - mbmi -> ref_mvs [ mbmi -> ref_frame [ i ] ] [ 0 ]. as_mv. col - mbmi -> ref_mvs [ mbmi -> ref_frame [ i ] ]. as_mv } ; for ( i = 0 ; i < 2 + has_second_ref ( mbmi ) ; ++ i ) { const MV * ref = & mbmi -> ref_mvs [ mbmi -> ref_frame [ i ] ] [ 0 ]. as_mv ; const MV diff = { mvs [ i ]. as_mv. row - mbmi -> ref_mvs [ mbmi -> ref_frame [ i ] ] [ 0 ]. as_mv } ; vp9_inc_mv ( & diff, counts ) ; for ( i =",0
443,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
444,"<S2SV_ModStart> ; if ( pskb_expand_head ( skb_out, size - skb -> len, GFP_ATOMIC ) < 0 ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } skb_pull_rcsum ( skb_out, hdr_size ) ; memmove ( skb_out -> data - ETH_HLEN, skb_mac_header ( skb_out ), ETH_HLEN ) ; skb_set_mac_header ( skb_out, - ETH_HLEN ) ; skb_set_transport_header ( skb_out, - ETH_HLEN ) ; skb_pull_rcsum ( skb_out, hdr_size ) ; memmove ( skb_out -> data - ETH_HLEN, skb_mac_header ( skb_out ), ETH_HLEN ) ; skb_set_mac_header ( skb_out, - ETH_HLEN ) ; skb_set_mac_header ( skb_out, - ETH_HLEN ) ; skb",0
445,"<S2SV_ModStart> return ; DEBUGMSGTL ( ( ""init_mib"", ""Seen <S2SV_blank> MIBDIRS: <S2SV_blank> Looking <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> mib <S2SV_blank> dirs <S2SV_blank>...\\n"", env_var ) ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibdir ( entry ) ; entry = strtok_r ( NULL, ENV_SEPARATOR, & st ) ; } add_mibfile ( entry, NULL, NULL ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ; entry = strtok_r ( NULL, ENV_SEPARATOR, & st ) ; } <S2SV_ModEnd> netsnmp_init_mib_internals ( )",0
446,"<S2SV_ModStart> ) { fd = open_safe ( uinput_dev_path [ x ], O_RDWR ) ; if ( fd < 0 ) continue ; break ; } <S2SV_ModStart> ; if ( write ( fd, & dev, sizeof ( dev ) ) < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> device <S2SV_blank> information"", __FUNCTION__ ) ; close ( fd ) ; return - 1 ; } <S2SV_ModStart> EV_KEY ) ; ioctl ( fd, UI_SET_EVBIT, EV_REL ) ; ioctl ( fd, UI_SET_EVBIT, EV_SYN ) ; for ( x = 0 ; key_map [ x ]. name!= NULL ; x ++ ) ioctl ( fd, UI_SET_KEYBIT, key_map [ x ]. mapped_id ) ; if ( ioctl ( fd, UI_DEV_CREATE, NULL ) < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> create <S2SV_blank> uinput <S2SV_blank> device"", __FUNCTION__ ) ; close ( fd ) ; return - 1 ; }",0
447,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
448,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
449,"<S2SV_ModStart> krb5_error_code iakerb_alloc_context ( krb5_ctx_id_t * pctx ) { iakerb_ctx_id_t ctx ; krb5_error_code code ; * pctx = NULL ; return code ; } ctx = k5alloc ( sizeof ( * ctx ), & code ) ; if ( ctx == NULL ) goto cleanup ; ctx -> defcred = GSS_C_NO_CREDENTIAL ; ctx -> state = IAKERB_AS_REQ ; ctx -> count = 0 ; code = krb5_gss_init_context ( & ctx -> k5c ) ; if ( code!= 0 ) goto cleanup ; <S2SV_ModEnd> * pctx =",0
450,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; bitmapDC = CreateCompatibleDC ( hDC ) ; if ( bitmapDC == ( HDC ) NULL ) ThrowReaderException ( CoderError, ""UnableToCreateDC"" ) ;",0
451,<S2SV_ModStart> ; while ( ps_stream -> u4_offset < ps_stream -> u4_max_offset,0
452,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) flood_duration_test = true ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_count"" ) && strcmp ( dentry -> d_name. name, ""ipc_flood_count"" ) ) flood_duration_test = false ; if ( flood_duration_test ) ret = kstrtoul ( string, 0, & ipc_count ) ; if ( ret < 0 ) goto out ;",0
453,"<S2SV_ModStart> imethod ) ; if ( inflated!= NULL ) { <S2SV_ModStart> imethod ) ; mono_class_inflate_generic_method ( inflated, & tmp_context ) ; mono_class_inflate_generic_method ( inflated, & tmp_context ) ; mono_class_inflate_generic_method ( inflated, & tmp_context ) ; mono_class_inflate_generic_method ( inflated, & tmp_context ) ; mono_class_inflate_generic_method ( inflated, & tmp_context ) ; mono_class_inflate_generic_method ( inflated, & tmp_context ) ; } else { mono_class_inflate_generic_method ( inflated, & tmp_context ) ; mono_class_inflate_generic_method ( inflated, & tmp_context ) ; mono_class_inflate_generic_method ( inflated, & tmp_context ) ; mono_class_inflate_generic_method ( inflated, & tmp_context ) ; mono_class_inflate_generic_method (",0
454,"<S2SV_ModStart> ""nnnnn\\0"" ) ] ; unsigned long tmp ; if ( count > sizeof ( buf ) ) return - EINVAL ; tmp = simple_strtol ( buf, & end, 0 ) ; if ( ( * end!= '\\0' ) &&! isspace ( * end ) ) return - EINVAL ; uml_exitcode = tmp ;",0
455,"<S2SV_ModStart>, * wp <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( ( ( strncmp ( & name [ 1 ], ""ORIGIN"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 1 ], ""PLATFORM"", 8 ) == 0 && ( len = 9 )!= 0 ) ) && ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 ) || ( strncmp ( & name [ 2 ], ""O' ) && ( __libc_enable_secure? NULL : l -> l_origin ) <S2SV_ModEnd> : _dl_platform )",0
456,"<S2SV_ModStart> } pDecCont = ( decContainer_t * ) H264SwDecMalloc ( <S2SV_ModEnd> sizeof ( decContainer_t <S2SV_ModStart> ) ) ; if ( pDecCont == NULL ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> Memory <S2SV_blank> allocation <S2SV_blank> failed"" ) ; return ( H264SWDEC_MEMFAIL ) ; }",0
457,"<S2SV_ModStart> drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( opt -> optlen ) opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> srr ) ) { struct in_device * in_dev = __in_dev_get_rcu ( dev ) ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop ; if ( opt -> optlen ) opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> srr ) ) { struct in_device * in_dev = __in_dev_get_rcu ( dev ) ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop ; if (",0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,"<S2SV_ModStart> goto errout ; memset ( info -> stagemasks, 0, sizeof ( * info -> stagemasks ) ) ; <S2SV_ModStart> goto errout ; memset ( info -> stagebooks, 0, sizeof ( * info -> stagebooks ) ) ; <S2SV_ModStart> errout ; } memset ( info -> grouping, 0, sizeof ( * info -> grouping ) ) ; <S2SV_ModStart> errout ; memset ( info -> grouping, 0, sizeof ( * info -> grouping ) ) ; memset ( info -> grouping, 0, sizeof ( * info -> grouping ) ) ; memset ( info -> grouping, 0, sizeof ( * info -> grouping ) ) ; memset ( info -> grouping, 0, sizeof ( * info -> grouping ) ) ; memset ( info -> grouping, 0, sizeof ( * info -> grouping ) ) ; memset ( info -> grouping, 0, sizeof ( * info -> grouping ) ) ; memset ( info -> grouping, 0, sizeof ( * info -> grouping ) ) ; memset ( info -> grouping, 0, sizeof ( * info -> grouping ) ) ; memset ( info -> grouping, 0, sizeof ( * info -> grouping ) ) ; memset ( info -> grouping,",0
460,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( n_key_data <S2SV_ModStart> ( key_data_in == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]. key_data_ver = 2 ; key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_contents [ 1 ] = NULL ; } } for ( i = 0 ; i < n_key_data - 1 ; i ++ ) { if ( key_data [ i ]. key_data_kvno!= key_data [ i + 1 ]. key_data_kvno ) num_versions ++ ; ret [ j ] = k5alloc ( sizeof ( struct berval ), & err ) ; if ( ret [ j",0
461,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
462,<S2SV_ModStart> ] ) ; if ( pCsr -> zInput == 0 ) { rc = SQLITE_NOMEM ; } else {,0
463,<S2SV_ModStart> filp ) { if ( filp ) fput ( filp ) ;,0
464,"<S2SV_ModStart> expr_ty iter, asdl_seq * orelse, int lineno, int col_offset, int end_lineno, int end_col_offset, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. end_lineno = end_lineno ; p -> v. AsyncFor. end_col_offset = end_col_offset ;",0
465,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart>, name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'",0
466,"<S2SV_ModStart> case NGHTTP2_ERR_NOT_SUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION",0
467,"<S2SV_ModStart> UINT error ; # ifdef WITH_DEBUG_RDPEI WLog_DBG ( TAG, ""rdpei_recv_pdu: <S2SV_blank> eventId: <S2SV_blank> %"" PRIu16 "" <S2SV_blank> (%s) <S2SV_blank> length: <S2SV_blank> %"" PRIu32 """", eventId, rdpei_eventid_string ( eventId ), pduLength ) ; # endif switch ( eventId ) { case EVENTID_SC_READY : if ( ( error = rdpei_recv_sc_ready_pdu ( callback, s ) ) ) { WLog_ERR ( TAG, ""rdpei_recv_sc_ready_pdu <S2SV_blank> failed <S2SV_blank> with <S2SV_blank> error <S2SV_blank> %"" PRIu32 ""!"", error ) ; return error ; } if ( ( error = rdpei_send_cs_ready_pdu ( callback ) ) ) { WLog_ERR ( TAG, ""rdpei_send_cs_ready_pdu <S2SV_blank> failed <S2SV_blank> with <S2SV_blank> error <S2SV_blank> %"" PRIu32 ""!"", error ) ; return error ; } if ( ( error = rdpei_recv_suspend_touch_pdu ( callback, s ) ) ) { WLog_ERR ( TAG, ""rdpe",0
468,"<S2SV_ModStart> - 1 ) zsocket_set_multicasthops ( pData -> socket, pData -> multicastHops <S2SV_ModStart> - 1 ) zsocket_set_multicasthops ( pData -> socket, pData -> multicastHops <S2SV_ModStart> - 1 ) zsocket_set_multicasthops ( pData -> socket, pData -> multicastHops <S2SV_ModStart> - 1 ) zsocket_set_multicasthops ( pData -> socket, pData -> multicastHops ) ; if ( pData -> multicastHops > 0 ) zsocket_set_multicasthops ( pData -> socket, pData -> multicastHops <S2SV_ModStart> - 1 ) zsocket_set_multicasthops ( pData -> socket, pData -> multicastHops <S2SV_ModStart> - 1 ) zsocket_set_multicasthops ( pData -> socket, pData -> multicastHops <S2SV_ModStart> - 1 ) zsocket_set_multicasthops ( pData -> socket, pData -> multicastHops <S2SV_ModStart> - 1 ) zsocket_set_multicasthops ( pData -> socket, pData -> multicastHops <S2SV_ModStart> - 1 ) zsocket_set_multicasthops ( pData -> socket, p",0
469,"<S2SV_ModStart> ) ; struct flowi6 fl6 ; memset ( & fl6, 0, sizeof ( fl6 ) ) ; fl6. flowlabel = np -> flow_label ; IP6_ECN_flow_xmit ( sk, fl6. flowlabel ) ; if ( ipv6_addr_type ( & fl6. saddr ) & IPV6_ADDR_LINKLOCAL ) fl6. flowi6_oif = sk -> sk_bound_dev_if ; if ( ipv6_addr_type ( & fl6. saddr ) & IPV6_ADDR_LINKLOCAL ) fl6. flowi6_oif = np -> flow_label ; if ( ipv6_addr_type ( & fl6. saddr ) & IPV6_ADDR_LINKLOCAL ) fl6. flowi6_oif = sk -> sk_bound_dev_if ; <S2SV_ModStart> ) ; SCTP_INC_STATS ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; if (! ( transport -> param_flags & SPP_PMTUD_ENABLE ) ) skb -> local_df = 1 ;",0
470,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;",0
471,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_failure ( rdpNego <S2SV_ModStart> ; WLog_DBG ( TAG <S2SV_ModEnd>, ""RDP_NEG_FAILURE"" ) <S2SV_ModStart> = NEGO_STATE_FAIL ; return TRUE ;",0
472,"<S2SV_ModStart> int len, result = RLC_OK ; bn_t t ; bn_null ( t ) ; RLC_TRY { bn_new ( t ) ; RLC_TRY { bn_zero ( m ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = k_len - 3 - m_len ; for ( int i = 0 ; i < * p_len ; i ++ ) { bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, 0 ) ; } bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; if ( pad!= RSA_PUB ) { result = RLC_ERR ; } do { m_len -- ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; } while ( pad!= 0 && m_len > 0 ) ; * p_len -= ( m_len - 1 ) ; bn_mod_2b ( m",0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,"<S2SV_ModStart> ; if ( ( psf = psf_calloc ( 1, <S2SV_ModEnd> sizeof ( SF_PRIVATE <S2SV_ModStart> ) ) == NULL ) { sf_errno = SFE_MALLOC_FAILED ; return NULL ; } ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; if ( copy_filename ( psf, path )!= 0 ) { sf_errno = psf -> error ; return NULL ; } ; psf -> file. mode = mode ; psf -> error = psf_set_stdio ( psf ) ; psf -> error = psf_fopen ( psf, sfinfo ) ; if ( psf -> error!= 0 ) { sf_errno = psf -> error ; return NULL ; } ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; if ( copy_filename ( psf, path )!= 0 ) { sf_errno = psf -> error ; return NULL ; } ; psf -> file. mode = mode ; psf -> error = psf_set_stdio ( psf ) ; psf -> error = psf_fopen ( psf, sfinfo ) ; return NULL ; }",0
475,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> cm ) { # if CONFIG_VP9_HIGHBITDEPTH if ( cm -> counts. highbitdepth > 0 ) count [ i ] += cm -> counts. highbitdepth_switchable_interp [ j ] [ i ] ; else count [ i ] += cm -> counts. highbitdepth_switchable_interp [ j ] [ i ] ; for ( j = 0 ; j < SWITCHABLE_FILTER_CONTEXTS ; ++ j ) count [ i ] += cm -> counts. highbitdepth_switchable_interp [ j ] [ i ] ; if ( count [ i ] > 0 ) { for ( i = 0 ; i < SWITCHABLE_FILTERS ; ++ i ) count [ i ] += cm -> counts. highbitdepth_switchable_interp [ j ] [ i ] ; } if ( c == 1 ) { for ( i = 0 ; i < SWITCHABLE_FILTERS ; ++ i ) count [ i ] = 0 ; for ( j = 0 ; j < SWITCHABLE_FILTER_CONTEXTS ; ++ j ),0
476,"<S2SV_ModStart> cpi ) { VP9_COMMON * const cm = & cpi -> common ; <S2SV_ModStart> = 0 ; vpx_setup_src_planes ( x, cpi -> Source, 0, 0 ) ; vpx_setup_pre_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vpx_setup_dst_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vp9_setup_block_planes ( & x -> e_mbd, cm -> subsampling_x, cm -> subsampling_y ) ; vpx_memset ( xd -> above_context [ 0 ], 0, sizeof ( * xd -> above_context [ 0 ] ) * 2 * aligned_mi_cols * MAX_MB_PLANE ) ; vpx_memset ( xd -> above_seg_context, 0, sizeof ( * xd -> above_seg_context ) * aligned_mi_cols ) ; vpx_memset ( xd -> above_seg_context, 0, sizeof (",0
477,"<S2SV_ModStart> retval = htc_request_check_url_hdr <S2SV_ModEnd> ( hp ) <S2SV_ModStart> retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } retval = http_splitline ( sp -> wrk, sp -> fd, hp, htc, HTTP_HDR_REQ, HTTP_HDR_URL, HTTP_HDR_PROTO ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } retval = http_splitline ( sp -> wrk, sp -> fd, hp, htc, HTTP_HDR_URL, HTTP_HDR_PROTO ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } http_ProtoVer ( hp ) ; retval = htc_request_check_host_hdr ( hp ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_Error, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" ) ; return ( retval ) ; }",0
478,"<S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> do { if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; status = SetImage",0
479,<S2SV_ModStart> len ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY (,0
480,<S2SV_ModStart> ; if ( ps_cur_poc -> i4_pic_order_cnt_lsb > 0 && ps_cur_poc -> i4_pic_order_cnt_msb > 0 && ps_cur_poc -> i4_delta_pic_order_cnt_bottom > 0 && ps_cur_poc -> i4_delta_pic_order_cnt [ 0 ] > 0 && ps_cur_poc -> i4_delta_pic_order_cnt [ 1 ] > 0 && ps_cur_poc -> i4_pic_order_cnt_msb > 0 && ps_cur_poc -> i4_pic_order_cnt_lsb > 0 && ps_cur_poc -> i4_delta_pic_order_cnt_bottom > 0 && ps_cur_poc -> i4_delta_pic_order_cnt [ 0 ] > 0 && ps_cur_poc -> i4_delta_pic_order_cnt [ 1 ] > 0 && ps_cur_poc -> i4_pic_order_cnt_msb > 0 && ps_cur_poc -> i4,0
481,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> int data_size ) { <S2SV_ModEnd> struct mpt_ioctl_iocinfo * <S2SV_ModStart> mpt_ioctl_iocinfo * karg <S2SV_ModEnd> ; struct pci_dev <S2SV_ModStart> ; return PTR_ERR ( karg ) ; } karg = memdup_user ( uarg, data_size ) ; if ( IS_ERR ( karg ) ) { printk ( MYIOC_s_ERR_FMT ""%s@%d::mpt_ioctl_getiocinfo() <S2SV_blank> - <S2SV_blank> memdup_user <S2SV_blank> returned <S2SV_blank> error <S2SV_blank> [%ld]\\n"", __FILE__, __LINE__, PTR_ERR ( karg ) ) ; kfree ( karg ) ; return - ENOMEM ; } karg = memdup_user ( uarg, data_size ) ; if ( IS_ERR ( karg ) ) { printk ( MYIOC_s_ERR_FMT ""%s@%d::mpt_ioinfo() <S2SV_blank> - <S2SV_blank> memdup_user <S2SV_blank> returned <S2SV_blank> error <S2SV_blank> [%ld]\\n"", __",0
482,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
483,"<S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv",0
484,"<S2SV_ModStart> -> offset ; if ( datao + 12 > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; datao += exif_get_long ( buf + datao + 8, EXIF_BYTE_ORDER_INTEL ) ; if ( datao + 2 > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + o, EXIF_BYTE_ORDER_INTEL ) ; datao += 2 ; exif_mnote_data_fuji_clear ( n ) ; n -> entries = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnote",0
485,"<S2SV_ModStart> == 0 ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> == 0 ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> == 0 ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModStart> == 0 ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName ) ; return 1 ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> == 0 ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> == 0 ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> == 0 ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made",0
486,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> unbind_ports ( void <S2SV_ModStart> ; CRYPTO_THREAD_write_lock ( stunnel_locks [ LOCK_SECTIONS ] ) ; service_options. next = NULL ; service_free ( & service_options ) ; while ( opt ) { unsigned i ; s_log ( LOG_DEBUG, ""Unbinding <S2SV_blank> service <S2SV_blank> [%s]"", opt -> servname ) ; for ( i = 0 ; i < opt -> local_addr. num ; ++ i ) unbind_port ( opt, i ) ; if ( opt -> exec_name && opt -> connect_addr. names ) { SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; } if ( opt -> ctx ) SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; for ( i = 0 ; i < opt -> local_addr. num ; ++ i ) unbind_port ( opt, i ) ; if ( opt -> exec_name && opt -> connect_addr. names ) {",0
487,<S2SV_ModStart> void ) { if ( recovery_enabled ) { recovery_enabled = false ; },0
488,"<S2SV_ModStart> } } enc624j600WriteReg ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ] ) ; enc624j600WriteReg ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ] ) ; enc624j600WriteReg ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ] ) ; enc624j600WriteReg ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ] ) ; enc624j600WriteReg ( interface, ENC624J600_EHT5 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ] ) ; enc624j600WriteReg ( interface, ENC624J600_EHT6 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ] ) ; enc624j600WriteReg ( interface, ENC624J600_EHT7 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ] ) ; enc624j600WriteReg ( interface, ENC624J600_EHT7 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ] ) ; enc624j600WriteReg ( interface, ENC624J600_EHT",0
489,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
490,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> WORD32 ihevcd_ref_list ( codec_t * ps_codec, pps_t * ps_pps, sps_t * ps_sps, slice_header_t * ps_slice_hdr ) { WORD32 i ; WORD32 st_rps_idx ; WORD32 num_neg_pics, num_pos_pics ; WORD32 ai1_curr_delta_poc_msb_present_flag [ MAX_DPB_SIZE ], ai1_curr_delta_poc_msb_present_flag [ MAX_DPB_SIZE ], ai1_curr_delta_poc_msb_present_flag [ MAX_DPB_SIZE ], ai1_foll_delta_poc_msb_present_flag [ MAX_DPB_SIZE ], ai1_st_curr_delta_poc_msb_present_flag [ MAX_DPB_SIZE ], ai1_curr_delta_poc_msb_present_flag [ MAX_DPB",0
491,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> print_object ( cJSON <S2SV_ModStart> 0 ; while ( child ) { ++ numentries ; child = child -> next ; } if (! entries ) return 0 ; memset ( entries, 0, sizeof ( char * ) * numentries ) ; memset ( names, 0, sizeof ( char * ) * numentries ) ; memset ( names, 0, sizeof ( char * ) * numentries ) ; memset ( entries, 0, sizeof ( char * ) * numentries ) ; memset ( names, 0, sizeof ( char * ) * numentries ) ; memset ( entries, 0, sizeof ( char * ) * numentries ) ; child = item -> child ; while ( child ) { names [ i ] = str = print_string_ptr ( child -> string ) ; entries [ i ++ ] = ret = print_value ( child, depth, fmt ) ; if ( str && ret ) len += strlen ( ret ) + 2 + ( fmt? 2 + depth : 0 ) ; else fail = 1 ; child = child -> next ; } if (! fail ) { out = ( char * ) cJSON_m",0
492,"<S2SV_ModStart> ( sk ) ; poll_wait ( file, & sk -> sk_receive_queue, wait ) ; if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; sock_put ( other ) ; } if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; return mask ;",0
493,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> += sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> += sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> += sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> += sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> += sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> += sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> += sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3",0
494,<S2SV_ModStart> ) KRB5_BAD_MSIZE ; if ( header -> buffer. length < token_wrapper_len + 14 ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ;,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * frame = va_arg <S2SV_ModEnd> ( args, <S2SV_ModStart> NULL ) { YV12_BUFFER_CONFIG * fb ; vpx_get_reference_enc ( ctx -> cpi, frame -> idx, & fb ) ; yuvconfig2image ( & frame -> img, fb, NULL ) ; return VPX_CODEC_OK ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
496,<S2SV_ModStart> plug ) ; if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) { ret = - EPERM ; break ; },0
497,"<S2SV_ModStart> rep_quick ) { DBUG_ENTER ( ""mi_repair_by_sort"" ) ; if ( param -> testflag & T_UNPACK ) { printf ( ""- <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %s\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %s\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %s\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""- <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %s\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %s\\n"", llstr ( start_records, llbuff ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %s\\n"", llstr ( start_records, llbuff ) ) ;",0
498,"<S2SV_ModStart> } ; # if uECC_VLI_NATIVE_LITTLE_ENDIAN uECC_word_t * p ; uECC_word_t carry ; wordcount_t num_words = curve -> num_words ; bitcount_t num_n_words = curve -> num_n_bits ; bitcount_t num_n_bits = curve -> num_n_bits ; if ( uECC_vli_cmp ( curve -> n, k, num_n_words )!= 1 ) { return 0 ; } carry = regularize_k ( k, tmp, s, curve ) ; EccPoint_mult ( p, curve -> G, k2 [! carry ], 0, num_n_bits + 1, curve ) ; if (! uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if (! g_rng_function ) { uECC_generate_random_int ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! uECC_generate_random_int ( tmp, num_n_words ) )",0
499,"<S2SV_ModStart> trunc : ND_TCHECK2 ( * bp, ND_RPL_DAOACK_TRUNC_LEN ) ; if ( length < ND_RPL_DAOACK_TRUNC_LEN ) goto trunc ; <S2SV_ModStart> : ND_TCHECK2 ( * bp, ND_RPL_DAOACK_TRUNC_LEN ) ; if ( length < ND_RPL_DAOACK_TRUNC_LEN ) goto tooshort ;",0
500,"<S2SV_ModStart> } else { size_t new_free_total = pool -> free_total * 2 ; if ( new_free_total < sizeof ( nw_buf * ) ) new_free_total = sizeof ( nw_buf * ) ; if ( new_free_total < sizeof ( nw_buf * ) ) new_free_total = sizeof ( nw_buf * ) ; if ( new_free_total < sizeof ( nw_buf * ) ) new_free_total = sizeof ( nw_buf * ) ; new_free_total = new_free_total * sizeof ( nw_buf * ) ; if ( new_free_total < sizeof ( nw_buf * ) ) new_free_total = sizeof ( nw_buf * ) ; if ( new_free_total < sizeof ( nw_buf * ) ) new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ) ; if ( new_arr ) { pool -> free_total = new_free_total ; pool -> free_arr = new_arr ; } else { free ( buf ) ; }",0
501,"<S2SV_ModStart> tp ; { NESTDATA const char * hex = ""00112233445566778899aAbBcCdDeEfF"" ; const char * dp ; <S2SV_ModEnd> int dcount = <S2SV_ModStart> 0 ; cp ++ ; if ( * cp == 'x' || * cp == 'X' ) for ( ++ cp ; * cp && ( index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; cp ++ ) cval = ( cval * 16 ) + ( ( int ) ( dp - hex ) / 2 ) ; else if ( * cp == 'o' || * cp == 'O' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp - '0' ) ; else for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 10 ) + ( * cp - '0' ) ; else for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && (",0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
503,"<S2SV_ModStart> * lined ; PIXCMAP * cmap, * cmapd ; PROCNAME ( ""pixFewColorsOctcubeQuantMixed"" ) ; if ( pixs && pixGetDepth ( pixs )!= 32 ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; if ( pixs && pixGetDepth ( pixs )!= 32 ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; if (! pixs || pixGetDepth ( pixs )!= 32 ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; if ( pixs && pixGetDepth ( pixs )!= 32 ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; if ( pixs && pixGetDepth ( pixs )!= 32 ) return ( PIX * ) ERROR_PTR ( ""pixs",0
504,"<S2SV_ModStart> = 256 ; if ( v_fn_ptr. vf!= vp8_mse16x16 ) { * best_motion_err = INT_MAX ; * best_motion_err = INT_MAX ; * best_motion_err = INT_MAX ; * best_motion_err = INT_MAX ; * best_motion_err = INT_MAX ; * best_motion_err = INT_MAX ; * best_motion_err = INT_MAX ; tmp_err = cpi -> diamond_search_sad ( x, b, d, & ref_mv_full, step_param, x -> sadperbit16, & num00, & v_fn_ptr, x -> mvcost, ref_mv ) ; if ( tmp_err < INT_MAX - new_mv_mode_penalty ) tmp_err += new_mv_mode_penalty ; if ( tmp_err < INT_MAX - new_mv_mode_penalty ) tmp_err += new_mv_mode_penalty ; if ( tmp_err < INT_MAX - new_mv_mode_penalty )",0
505,"<S2SV_ModStart> char * data ; size_t size = overhead ; if ( mongo_validate_ns ( conn, ns )!= MONGO_OK ) return MONGO_ERROR ; for ( i = 0 ; i < count ; i ++ ) { size += bson_size ( bsons [ i ] ) ; if ( mongo_bson_valid ( conn, bsons [ i ], 1 )!= MONGO_OK ) return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; }",0
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_response ( rdpNego <S2SV_ModStart> NEGO_STATE_FAIL ; return FALSE ;,0
507,"<S2SV_ModStart> int i, target_bits_per_mb ; const double correction_factor = get_rate_correction_factor ( cpi ) ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { if ( ( target_bits_per_mb - bits_per_mb_at_this_q ) <= last_error ) break ; last_error = bits_per_mb_at_this_q - target_bits",0
508,"<S2SV_ModStart> |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ ; tja1101WritePhyReg ( interface, TJA1101_CONFIG1, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_COMM_CTRL ) ; value |= TJA1101_COMM_CTRL_AUTO_OP ; tja1101WritePhyReg ( interface, TJA1101_COMM_CTRL, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_EXTENDED_CTRL ) ; value |= TJA1101_EXTENDED_CTRL_CONFIG_EN ; tja1101WritePhyReg ( interface, TJA1101_EXTENDED_CTRL, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_EXTENDED_CTRL ) ; value |= TJA1101_EXTENDED_CTRL_CONFIG_EN ; tja1101WritePhyReg ( interface, TJA1101_EXTENDED_CTRL",0
509,"<S2SV_ModStart> ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i",0
510,"<S2SV_ModStart> TX_SIZE tx_size, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, left_col, 64 ) ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, above_data, 128 + 16 ) ; uint8_t * above_row = above_data + 16 ; const int bs = 4 << tx_size ; if ( plane == 0 ) { frame_width = xd -> cur_buf -> y_width ; frame_height = xd -> cur_buf -> y_height ; } else { frame_width = xd -> cur_buf -> uv_width ; frame_height = xd -> cur_buf -> uv_height ; } <S2SV_ModStart> + y ; memset <S2SV_ModEnd> ( left_col,",0
511,"<S2SV_ModStart> } else { if ( end >= pattern [ length - 1 ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> too <S2SV_blank> many <S2SV_blank> characters <S2SV_blank> in <S2SV_blank> the <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end >= pattern [ length - 1 ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> too <S2SV_blank> many <S2SV_blank> characters <S2SV_blank> in <S2SV_blank> the <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end >= pattern [ length - 1 ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> too <S2SV_blank> many <S2SV_blank> characters <S2SV_blank> in <S2SV_blank> the <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end >= pattern [ length - 1 ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> too <S2SV_blank> many <S2SV_blank> characters <S2SV_blank> in <S2SV_blank> the <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end >= pattern [ length - 1 ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> too <S2SV_blank> many <S2SV_blank> characters <S2SV_blank> in <S2SV_blank> the <S2SV_blank> pattern\\n"" ) ;",0
512,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ;,1
513,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart>, 2 ) ; write_profile ( cm -> profile, wb ) ; vpx_wb_write_bit ( wb, 0 ) ; vpx_wb_write_bit ( wb, cm -> frame_type ) ; vpx_wb_write_bit ( wb, cm -> show_frame ) ; vpx_wb_write_bit ( wb, cm -> error_resilient_mode ) ; if ( cm -> frame_type == KEY_FRAME ) { const COLOR_SPACE cs = UNKNOWN ; write_sync_code ( wb ) ; if ( cm -> profile > PROFILE_1 ) { assert ( cm -> bit_depth > BITS_8 ) ; vp9_wb_write_bit ( wb, cm -> bit_depth - BITS_10 ) ; } vp9_wb_write_literal ( wb, cs, 3 ) ; if ( cs!= SRGB ) { vp9_wb_write_bit ( wb, 0 ) ; if ( cm -> profile >= PROFILE_1 ) { vp9_wb_write_bit ( wb, 0 ) ; if ( cm -> profile",0
514,"<S2SV_ModStart> long long_tmp ; <S2SV_ModEnd> strncpy ( scan_ltm <S2SV_ModStart> scan_ltm ) ; strncpy ( scan_gtm, col_nam, sizeof ( scan_mtm ) ) ; strncpy ( scan_ltm, col_nam, sizeof ( scan_ltm ) ) ; strncpy ( scan_ltm, col_nam, sizeof ( scan_ltm ) ) ; strncpy ( scan_ltm, col_nam, sizeof ( scan_ltm ) ) ; strncpy ( scan_gtm, scan_mtm ) ; strncpy ( scan_ltm, col_nam, sizeof ( scan_ltm ) ) ; strncpy ( scan_ltm, col_nam, sizeof ( scan_ltm ) ) ; strncpy ( scan_ltm, col_nam, sizeof ( scan_ltm ) ) ; strncpy ( scan_ltm, col_nam, sizeof ( col_nam ) ) ; strncpy ( scan_ltm, scan_ltm ) ; strncpy ( scan_ltm, col_nam, sizeof ( scan_ltm ) ; strncpy ( scan_",0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context ->,0
516,"<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i + 1 ) ) == COMMA ) i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case DOUBLESTAR : if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i + 1 ) ) == COMMA ) i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto",0
517,"<S2SV_ModStart> KEY_FRAME ) { memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ; memset ( xd -> ref_lf_deltas, 0, sizeof ( xd -> ref_lf_deltas ) ) ; memset ( xd -> mode_lf_deltas, 0, sizeof ( xd -> mode_lf_deltas ) ) ; pc -> refresh_golden_frame = 1 ; pc -> copy_buffer_to_gf = 0 ; pc -> copy_buffer_to_arf = 0 ; pc -> copy_buffer_to_gf = 0 ; pc -> copy_buffer_to_arf = 0 ; pc -> ref_frame_sign_bias [ GOLDEN_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ ALTREF_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ GOLDEN_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ ALTREF_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ ALTREF_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ GOLDEN_FRAME ] = 0 ; pc",0
518,"<S2SV_ModStart> uint16_t n ; <S2SV_ModEnd> uint32_t status ; <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & n, sizeof ( uint16_t ) ) ; context -> nextPacket = letoh16 ( n ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & n, sizeof ( uint16_t ) ) ; n = letoh16 ( n ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & n, sizeof ( uint16_t ) ) ; n = letoh16 ( n ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & n,",0
519,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE klass, VALUE content ) { VALUE rb_schema ; VALUE errors = rb_ary_new ( ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; # ifdef HAVE_XMLSCHEMASETPARSERSTRUCTUREDERRORS xmlSchemaSetParserStructuredErrors ( ctx, Nokogiri_error_array_pusher, ( void * ) errors ) ; # endif xmlSchemaParse ( ctx ) ; if ( NULL == schema ) { xmlErrorPtr error = xmlGetLastError ( ) ; Nokogiri_error_raise ( NULL, error ) ; xmlSchemaFreeParserCtxt ( ctx ) ; return Qnil ; } schema = Data_Wrap_Struct ( klass, 0, dealloc, schema ) ; rb_iv_set ( rb_schema, ""@errors"", errors ) ; rb_iv_set ( rb_schema, ""@errors"", errors ) ; if ( NULL == schema ) { rb_raise ( rb_eRuntimeError, ""Could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> document"" ) ; return Qnil ; }",0
520,"<S2SV_ModStart> ; if ( strlen ( errstr ) > CONFLINELEN - 1 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> number"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( errstr ) > CONFLINELEN - 1 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> number"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( errstr ) > CONFLINELEN - 1 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> number"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( errstr ) > CONFLINELEN - 1 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> number"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( errstr ) > CONFLINELEN - 1 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> number"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( errstr ) > CONFLINELEN - 1 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank>",0
521,"<S2SV_ModStart> / 2 ] ; memcpy <S2SV_ModEnd> ( ( UINT8 <S2SV_ModStart> / 2 ] ; memcpy <S2SV_ModEnd> ( ( UINT8 <S2SV_ModStart> / 2 ] ; memcpy <S2SV_ModEnd> ( ( UINT8 <S2SV_ModStart> / 2 ] ; memcpy ( ( UINT8 * ) im -> image [ state -> y ], state -> buffer, state -> xsize ) ; memcpy ( ( UINT8 * ) im -> image [ state -> y ], state -> buffer, state -> xsize ) ; memcpy ( ( UINT8 * ) im -> buffer, state -> xsize ) ; memcpy ( ( UINT8 * ) im -> image [ state -> y ], state -> buffer, state -> xsize ) ; memcpy ( ( UINT8 * ) im -> image [ state -> y ], state -> buffer, state -> xsize ) ; memcpy ( ( UINT8 * ) im -> image [ state -> y ], state -> buffer, state -> xsize ) ; memcpy ( ( UINT8 * ) im -> buffer, state -> xsize ) ; memcpy ( ( UINT8 * ) im -> image [ state -> y ], state -> buffer, state -> xsize ) ; memcpy (",0
522,<S2SV_ModStart> fanout_mutex ) ; if ( type == PACKET_FANOUT_HASH || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_QM || type == PACKET_FANOUT_LB || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_QM || type == PACKET_FANOUT_LB || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET,0
523,"<S2SV_ModStart>, POLL_IN ) ; perf_event_wakeup ( handle -> event ) ;",0
524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> utf8s_to_utf16s ( const <S2SV_ModStart> len, wchar_t <S2SV_ModEnd> * pwcs ) <S2SV_ModStart> - EINVAL ; op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; } else { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE",0
525,"<S2SV_ModStart> EPROTONOSUPPORT ) { <S2SV_ModEnd> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure""",0
526,"<S2SV_ModStart> ; status = ksz8851ReadReg ( interface, KSZ8851_RXFHSR ) ; if ( ( status & ( RXFHSR_RXFV | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE ) )!= 0 ) { if ( ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE ) )!= 0 ) { if ( ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE ) )!= 0 ) { ksz8851WriteReg ( interface, KSZ8851_RXFDPR, RXFDPR_RXFPAI ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, RXQCR_SDA ) ; ksz8851ReadFifo ( interface, context -> rxBuffer",0
527,"<S2SV_ModStart> const node * <S2SV_ModEnd> n, asdl_seq <S2SV_ModStart> is_async ) { identifier name ; arguments_ty args ; expr_ty returns = NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == RARROW ) { returns = ast_for_expr ( c, CHILD ( n, name_i + 3 ) ) ; if (! returns ) return NULL ; name_i += 2 ; } if ( TYPE ( CHILD ( n, name_i + 3 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 3 ) ; body = ast_for_suite ( c, CHILD ( n, name_i + 3 ) ) ; if (! body ) return NULL ; if (! type_comment && NCH ( CHILD ( n, name_i + 3 ) ) > 1 ) type_comment = NULL ; if (! type_comment && NCH ( CHILD ( n, name_i + 3 ) ) == TYPE_COMMENT ) type_",0
528,"<S2SV_ModStart> i ; pgd = find_pgd ( mm, 0xA0000 ) ; if ( pgd_none_or_clear_bad ( pgd ) ) goto out ; pud = pud_offset ( pgd, 0xA0000 ) ; if ( pud_none_or_clear_bad ( pud ) ) goto out ; pmd = pmd_offset ( pmd, 0xA0000 ) ; split_huge_page_pmd ( mm, pmd ) ; if ( pmd_none_or_clear_bad ( pmd ) ) goto out ;",0
529,"<S2SV_ModStart> ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_",0
530,"<S2SV_ModStart> bt_remote_bdaddr ) ; if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; }",0
531,<S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> 4 ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> 4 ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( i = 0 ; i < 14 ; i ++ ) { if ( ( j = pana_bits ( 8 ) ) ) { if ( ( j = pana_bits ( 8 ) ) ) { if ( ( j = pana_bits ( 8 ) ) ) { if ( ( j = pana_bits ( 8 ) ) ) { if ( ( j = pana_bits ( 8 ) ) ) { if ( ( j = pana_bits ( 8 ) ) ) { if ( ( j = pana_bits ( 8 ) ) ) { if ( ( j = pana_bits ( 8 ) ) ) { if (,0
532,<S2SV_ModStart> needed ) { struct dm_dev * dev = dm_disk ( hc -> md ) ; if ( dev -> bd_dev!= huge_encode_dev ( dev -> bd_dev ) ) { WARN_ON ( dev -> bd_dev!= huge_encode_dev ( dev -> bd_dev ) ) ; if ( dev -> bd_dev!= huge_encode_dev ( dev -> bd_dev ) ) { WARN_ON ( dev -> bd_dev!= huge_encode_dev ( dev -> bd_dev ) ) ; } else if ( dev -> bd_dev -> bd_dev!= huge_encode_dev ( dev -> bd_dev ) ) { WARN_ON ( dev -> bd_dev!= huge_encode_dev ( dev -> bd_dev ) ) ; if ( dev -> bd_dev!= huge_encode_dev ( dev -> bd_dev ) ) { WARN_ON ( dev -> bd_dev!= huge_encode_dev ( dev -> bd_dev ) ; } else if ( dev -> bd_dev -> bd_dev!= huge_encode_dev ( dev -> bd_dev ) ) { WARN_ON ( dev -> bd_,0
533,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;",0
534,<S2SV_ModStart> bfqq ) bfq_idle_slice_timer_head <S2SV_ModEnd> ( bfqq ),0
535,<S2SV_ModStart> += PRIMARY_DRAWING_ORDER_FIELD_BYTES [ ( int ),0
536,<S2SV_ModStart>! OVL_TYPE_UPPER ( old_type ) <S2SV_ModEnd> &&! OVL_TYPE_UPPER <S2SV_ModStart>! OVL_TYPE_UPPER ( new_type ) <S2SV_ModEnd> &&! OVL_TYPE_UPPER <S2SV_ModStart>! OVL_TYPE_UPPER ( old_type ) <S2SV_ModEnd> &&! OVL_TYPE_UPPER <S2SV_ModStart>! OVL_TYPE_UPPER ( old_type ) <S2SV_ModEnd> &&! OVL_TYPE_UPPER <S2SV_ModStart>! OVL_TYPE_UPPER ( old_type ) <S2SV_ModEnd> &&! OVL_TYPE_UPPER <S2SV_ModStart>! OVL_TYPE_UPPER ( new_type ) <S2SV_ModEnd> &&! OVL_TYPE_UPPER <S2SV_ModStart>! OVL_TYPE_UPPER ( old_type ) <S2SV_ModEnd> &&! OVL_TYPE_UPPER <S2SV_ModStart>! OVL_TYPE_UPPER ( old_type ) <S2SV_ModEnd> &&! OVL_TYPE_UPPER <S2SV_ModStart>! OVL_TYPE_UPPER ( old_type ) <S2SV_ModEnd> &&! OVL_TYPE_UPPER <S2SV_ModStart>! OVL_TYPE_UPPER ( new_type ) <S2SV_ModEnd> &&! OVL_TYPE_UPPER <S2SV_ModStart>! OV,0
537,"<S2SV_ModStart> int plane ; # if CONFIG_VP9_HIGHBITDEPTH switch ( bsize ) { case BLOCK_SIZE_8X8 : vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case BLOCK_SIZE_10X8 : vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case BLOCK_SIZE_10X8 : vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case BLOCK_SIZE_8X8 : vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case BLOCK_SIZE_10X8 : vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case BLOCK_SIZE_10X8 : vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg ) ; break ; case BLOCK_SIZE_8X8 : vp9_foreach_transformed_block_in_plane ( xd, plane, visit, arg",0
538,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nonrd_pick_sb_modes ( VP9_COMP <S2SV_ModStart> x -> e_mbd ; if ( xd -> mi [ 0 ] -> mbmi. sb_type!= bsize ) { vpx_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else if ( frame_is_intra_only ( cm ) ) { vpx_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; if ( xd -> mi [ 0 ] -> mbmi. sb_type!= bsize ) { vpx_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else { vpx_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } }",0
539,<S2SV_ModStart> ; * err = MK <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
540,<S2SV_ModStart> = malloc ( <S2SV_ModEnd> sizeof ( MappedRange,0
541,"<S2SV_ModStart> ; if ( ( ( flags & VP8_EFLAG_NO_UPD_GF ) && ( flags & VP8_EFLAG_FORCE_GF ) ) || ( ( flags & VP8_EFLAG_NO_UPD_ARF ) && ( flags & VP8_EFLAG_FORCE_ARF ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; if ( flags & VP8_EFLAG",0
542,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;",0
543,"<S2SV_ModStart>! head ) { hlist_add_head_rcu ( & event -> hlist_entry, head ) ; perf_event_update_userpage ( event ) ; return - EINVAL ; } <S2SV_ModEnd> hlist_add_head_rcu ( &",0
544,"<S2SV_ModStart>, const u_char * pptr, u_int len, uint16_t af, uint8_t safi, uint32_t snpa <S2SV_ModStart> case BGPTYPE_AS4_PATH : if ( len % 2 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGPTYPE_AS4_PATH : if ( len % 2 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGPTYPE_AS_PATH : if ( len % 2 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGPTYPE_AS4_PATH : if ( len % 2 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGPTYPE_AS4_PATH : if ( len % 2 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGPTYPE_AS_PATH : if ( len % 2 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len""",0
545,"<S2SV_ModStart> ""<table <S2SV_blank> id=\'status-table\'><tr>"" ""<th <S2SV_blank> width=\'40%%\'>Parameter</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""<th <S2SV_blank> width=\'60%%\'>Controlfile</th>"" ""<th <S2SV_blank> width=\'60%%\'>Logfile</th>"" ""<th <S2SV_blank> width=\'60%%\'>PIDfile</th>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>State</th>""",0
546,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
547,"<S2SV_ModStart> ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ; } else if ( isAddLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"" ; } else if ( isRemoveLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ; } else if ( isAddLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ; } else { if ( isAddLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ; } else if ( isRemoveLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"" ; } else if ( isAddLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ; } else { if ( isAddLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"" ; }",0
548,"<S2SV_ModStart> - EINVAL ; } if ( config -> desc. bNumInterfaces > USB_MAXINTERFACES ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, USB_MAXINTERFACES ) ; nintf = nintf_orig ; if ( config -> desc. bNumInterfaces > USB_MAXINTERFACES ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, USB_MAXINTERFACES ) ; nintf = USB_MAXINTERFACES ; } if ( config -> desc. bNumInterfaces > USB_MAXINTERFACES ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, USB_MAXINTERFACES ) ; nintf = USB_MAXINTERFACE",0
549,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
550,"<S2SV_ModStart> 16, & sse ) ; rate = x -> mbmode_cost [ xd -> frame_type ] [ mode ] ; if ( error16x16 > vp8_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ) { error16x16 = vp8_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; rate = x -> mbmode_cost [ xd -> frame_type ] [ mode ] ; if ( error16x16 > this_rd ) { error16x16 = this_rd ; best_mode = mode ; best_sse = sse ; } }",0
551,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 ) ; interface -> macAddr. w [ 0 ] = 0 ; temp = enc624j600ReadReg ( interface, ENC624J600_MAADR2 ) ; interface -> macAddr. w [ 1 ] = 0 ; temp = enc624j600ReadReg ( interface, ENC624J600_MAADR3 ) ; interface -> macAddr. w [ 2 ] = 0 ; macAddrToEui64 ( & interface -> macAddr, & interface -> eui64 ) ; } else { temp = htole16 ( interface -> macAddr. w [ 0 ] ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR1, temp ) ; temp = htole16 ( interface -> macAddr. w [ 1 ] ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR2",0
552,"<S2SV_ModStart> * start ; va_start ( argptr, format ) ; vsnprintf ( start, maxlen, format, argptr ) ; <S2SV_ModStart> = 0 ; psf -> headindex = strlen ( ( char * ) psf -> header ) ; <S2SV_ModStart> = 0 ; psf -> tailindex = strlen ( ( char * ) psf -> header ) ; <S2SV_ModStart> = strlen ( ( char * ) psf -> header ) ; psf -> tailindex = strlen ( ( char * ) psf -> header ) ; <S2SV_ModStart> = 0 ; psf -> tailindex = strlen ( ( char * ) psf -> header ) ; <S2SV_ModStart> = 0 ; psf -> tailindex = strlen ( ( char * ) psf -> header ) ; psf -> headindex = strlen ( ( char * ) psf -> header ) ; <S2SV_ModStart> = strlen ( ( char * ) psf -> header ) ; psf -> tailindex = strlen ( ( char * ) psf -> header ) ; psf -> tailindex = strlen ( ( char * ) psf -> header ) ; psf -> headindex = strlen ( ( char * ) psf -> header ) ; psf -> tailindex = strlen ( ( char * ) psf -> header ) ;",0
553,"<S2SV_ModStart> else { if ( ctx -> iface -> destroy ) ctx -> iface -> destroy ( ctx -> priv -> iface ) ; ctx -> priv -> iface = NULL ; ctx -> name = NULL ; ctx -> priv = NULL ; res = VPX_CODEC_OK ; } return SAVE_STATUS ( ctx, res ) <S2SV_ModEnd> ; } <S2SV_null>",0
554,"<S2SV_ModStart> speed ) { memset ( sf, 0, sizeof ( SPEED_FEATURES ) ) ; <S2SV_ModEnd> if ( speed <S2SV_ModStart> 1 ) { memset ( sf, 0, sizeof ( SPEED_FEATURES ) ) ; <S2SV_ModStart> = 1 ; memset ( sf, 0, sizeof ( SPEED_FEATURES ) ) ; <S2SV_ModEnd> } if ( <S2SV_ModStart> 2 ) { memset ( sf, 0, sizeof ( SPEED_FEATURES ) ) ; <S2SV_ModEnd> sf -> tx_size_search_method <S2SV_ModStart> -> tx_size_search_method = vp9_frame_is_boosted ( cpi )? USE_FULL_RD : USE_LARGESTALL ; sf -> mode_skip_start = 10 ; sf -> adaptive_pred_interp_filter = 1 ; sf -> recode_loop = ALLOW_RECODE_KFARFGF ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_H_V ; sf -> intra_y_mode_mask [ TX_32X",0
555,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
556,"<S2SV_ModStart> ; int goodsize ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) { luaD_reallocstack ( L, goodsize, 0 ) ; } else if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ;",0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,"<S2SV_ModStart>, * s = STR ( CHILD ( n, 0 ) ) ; int quote = Py_CHARMASK ( * s ) ; char * ch, s_kind [ 3 ] = { 0, 0, 0 } ; char * raw, s_kind [ 3 ] ; while ( * raw && * raw!= '\\'' && * raw!= \'""\' ) { * ch ++ = * raw ++ ; } kind = PyUnicode_FromString ( s_kind ) ; if (! kind ) { return NULL ; } # ifdef Py_USING_UNICODE if ( PyErr_ExceptionMatches ( PyExc_UnicodeError ) ) { Py_DECREF ( type ) ; ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } # endif return NULL ; } # ifdef Py_USING_UNICODE if ( PyErr_ExceptionMatches ( PyExc_UnicodeError ) ) { PyErr_Fetch ( & type, & value, & tback ) ; errstr = PyObject_Str ( value ) ; if ( errstr ) { Py_DECREF ( type ) ; ast",0
559,"<S2SV_ModStart> input_ptr ; int is_keyframe_qaunt_set = 0 ; vpx_codec_err_t res = VPX_CODEC_OK ; if ( option_name == NULL ) { svc_log ( svc_ctx, SVC_LOG_ERROR, ""option <S2SV_blank> missing <S2SV_blank> name: <S2SV_blank> %s\\n"", option_name ) ; res = VPX_CODEC_INVALID_PARAM ; break ; } else if ( strcmp ( ""layers"", option_name ) == 0 ) { svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_factors ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers-keyframe"", option_name ) ==",0
560,"<S2SV_ModStart> } fprintf ( mvs, ""\\n"" ) ; mb_index = 0 ; fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. uv_mode ) ; mb_index ++ ; fprintf ( mvs, ""\\n"" ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; mb_index = 0 ; fprintf ( mvs, ""Mbs <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. mode ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ;",0
561,<S2SV_ModStart> self ) { <S2SV_ModEnd> PyObject * new_memo,0
562,,1
563,"<S2SV_ModStart> ) ) { D_imp_dbh ( imp_dbh ) ; <S2SV_ModStart> ) ) { D_imp_dbh ( imp_dbh ) ; PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""imp_dbh->connect: <S2SV_blank> dsn <S2SV_blank> = <S2SV_blank> %s, <S2SV_blank> uid <S2SV_blank> = <S2SV_blank> %s, <S2SV_blank> pwd <S2SV_blank> = <S2SV_blank> %s\\n"", dbname, user ) ; PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""imp_dbh->connect: <S2SV_blank> dsn <S2SV_blank> = <S2SV_blank> %s, <S2SV_blank> uid <S2SV_blank> = <S2SV_blank> %s\\n"", dbname, user ) ; PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""imp_dbh->connect: <S2SV_blank> dsn <S2SV_blank> = <S2SV_blank> %s, <S2SV_blank> uid <S2SV_blank> = <S2SV_blank> %s\\n"", dbname, user ) ; PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""imp_dbh->connect: <S2SV_blank> dsn <S2SV_blank> = <S2SV_blank> %s, <S2SV_blank> uid <S2SV_blank> = <S2SV_blank> %s\\n"", dbname, user ) ;",0
564,<S2SV_ModStart> size = 0 ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) TEMP_FAILURE_RETRY (,0
565,<S2SV_ModStart> struct ieee_802_11_phdr phdr ; if ( len_remain > sizeof ( struct ieee_802_11_phdr ) ) { if ( ampdu_len > sizeof ( struct ieee_802_11_phdr ) ) { if ( ampdu_len > sizeof ( struct ieee_802_11_phdr ) ) { if ( ampdu_len > sizeof ( struct ieee_802_11_phdr ) ) { if ( ampdu_len > sizeof ( struct ieee_802_11_phdr ) ) { if ( ampdu_len > sizeof ( struct ieee_802_11_phdr ) ) { if ( ampdu_len > sizeof ( struct ieee_802_11_phdr ) ) { if ( ampdu_len > sizeof ( struct ieee_802_11_phdr ) ) { if ( ampdu_len > sizeof ( struct ieee_802_11_phdr ) ) { if ( ampdu_len > sizeof ( struct ieee_802_11_phdr ) ) ampdu_len = sizeof ( struct iee,0
566,<S2SV_ModStart> = s_malloc ( <S2SV_ModEnd> hdrlen + initlen,0
567,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> -> ColorLossLevel ; if (! context ) return FALSE <S2SV_ModStart> -> ChromaSubsamplingLevel ; if (! <S2SV_ModStart> -> ChromaSubsamplingLevel ) return FALSE <S2SV_ModStart> -> ColorLossLevel ; if (! <S2SV_ModStart> -> ChromaSubsamplingLevel ) return FALSE <S2SV_ModStart> -> ChromaSubsamplingLevel ; if (! <S2SV_ModStart> -> ChromaSubsamplingLevel ) return FALSE <S2SV_ModStart> -> ChromaSubsamplingLevel ; if (! <S2SV_ModStart> -> ChromaSubsamplingLevel ) return FALSE <S2SV_ModStart> -> ChromaSubsamplingLevel ; if (! context -> ChromaSubsamplingLevel ) return FALSE <S2SV_ModStart> -> ChromaSubsamplingLevel ; if (! <S2SV_ModStart> -> ChromaSubsamplingLevel ) return FALSE <S2SV_ModStart> -> ColorLossLevel ; if (! <S2SV_ModStart> -> ChromaSubsamplingLevel ) return FALSE <S2SV_ModStart> -> ChromaSubsamplingLevel ; if (! context -> ChromaSubsamplingLevel ) return FALSE <S2SV_ModStart> -> ChromaSubsamplingLevel ; if (! context -> ChromaSubsamplingLevel ) return FALSE <S2SV_ModStart> ->,0
568,"<S2SV_ModStart> - EINVAL ) ; if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, ptr - str ) ; goto out_free ; } * ( ++ top ) = invert ; continue ; case ')' : if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, ptr - str ) ; goto out_free ; } * ( ++ top ) = invert ; continue ; case '!' : if (! is_not ( next ) ) break ; invert =! invert ; continue ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, ptr - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, ptr - str ) ; goto out_free ; }",0
569,"<S2SV_ModStart> rc = & cpi -> td. rc ; int target ; if ( cpi -> common. current_video_frame == 0 ) { target = ( ( cpi -> oxcf. starting_buffer_level / 2 ) > INT_MAX )? INT_MAX : ( cpi -> oxcf. starting_buffer_level / 2 ) ; } else { target = ( ( cpi -> oxcf. starting_buffer_level / 2 ) > INT_MAX )? INT_MAX : ( int ) ( cpi -> oxcf. starting_buffer_level / 2 ) ; } else { const int initial_boost = 32 ; int kf_boost = MAX ( initial_boost, ( int ) ( 2 * cpi -> output_framerate - 16 ) ) ; if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { kf_boost = ( int ) ( rc -> frames_since_key / cpi -> output_framerate / 2 ) ; if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { kf_boost = MAX ( initial_boost, ( int )",0
570,"<S2SV_ModStart> <S2SV_null> static TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> ) { TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",0
571,"<S2SV_ModStart> : # line 98 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 99 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 99 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 99 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 99 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 99 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 99 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 100 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 100 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 100 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 99 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 100 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 100 <S2SV_ModEnd>",0
572,"<S2SV_ModStart> -> cpi ; MACROBLOCK * const xd = args -> xd ; struct macroblock_plane * p = & cpi -> mb. plane [ plane ] ; struct macroblockd_plane * pd = & xd -> plane [ plane ] ; MB_MODE_INFO * mbmi = & xd -> mi [ 0 ] -> mbmi ; const int16_t * qcoeff = BLOCK_OFFSET ( p -> qcoeff, block ) ; const int segment_id = mbmi -> segment_id ; const int ref = is_inter_block ( mbmi ) ; vpx_prob ( * const counts ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. fc -> coef_probs [ tx_size ] [ type ] [ ref ] ; vpx_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. fc -> coef_probs [ tx_size ] [ type ] [ ref ] ; vpx_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common.",0
573,<S2SV_ModStart> pSelect -> pSrc ; if ( pSrc == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; },0
574,<S2SV_ModStart> users ) ; INIT_LIST_HEAD ( & cb_info -> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
575,"<S2SV_ModStart> PointZZ_p * point <S2SV_ModEnd>, const CurveZZ_p <S2SV_ModStart> curve ) { PointZZ_p R0, R1 ; mpz_init_set ( R0. x, R0. x ) ; mpz_init_set ( R0. y, R1. y ) ; pointZZ_pAdd ( & R0, & R1, curve ) ; mpz_set ( tmp. x, R0. x ) ; mpz_set ( tmp. y, R0. y ) ; pointZZ_pDouble ( & R0, & tmp, curve ) ; for ( i = dbits - 2 ; i >= 0 ; i -- ) { if ( mpz_tstbit ( scalar, i ) ) { if ( mpz_tstbit ( scalar, i ) ) { mpz_set ( tmp. x, R0. x ) ; mpz_set ( tmp. y, R0. y ) ; pointZZ_pDouble ( & R1, & tmp, curve ) ; } else { mpz_set ( tmp. x, R0. x ) ; mpz_set ( tmp. y, R0. y ) ; point",0
576,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
577,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
578,"<S2SV_ModStart> s ) { if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } <S2SV_ModStart> 0 ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } ret = send ( sock_fd, buf, s, 0 ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
579,"<S2SV_ModStart> ; for ( xIter = crm_first_attr ( xml ) ; xIter!= NULL ; xIter = xIter -> next ) { const char * prop_name = ( const char * ) xIter -> name ; if ( strcmp ( prop_name, XML_ATTR_ID ) == 0 ) { continue ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ;",0
580,<S2SV_ModStart> <S2SV_null> static const SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> NULL ; return ( SvcInternal_t <S2SV_ModEnd> * ) svc_ctx <S2SV_ModStart> -> internal ; } <S2SV_null>,0
581,"<S2SV_ModStart> ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else if ( hkey. type == HASH_KEY_IS_STRING ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } if ( hkey. type == HASH_KEY_IS_LONG ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; }",0
582,"<S2SV_ModStart> only_420 ) { _y4m -> vpx_fmt = VPX_IMG_FMT_I420 ; _y4m -> vpx_bps = 12 ; if (! _y4m -> vpx_fmt ) { fprintf ( stderr, ""Error <S2SV_blank> parsing <S2SV_blank> video <S2SV_blank> format; <S2SV_blank> assuming <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; return - 1 ; } <S2SV_ModStart> -> vpx_bps = 12 ; if ( _y4m -> vpx_fmt == VPX_IMG_FMT_I420 ) { fprintf ( stderr, ""Error <S2SV_blank> parsing <S2SV_blank> video <S2SV_blank> format; <S2SV_blank> assuming <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; return - 1 ; } _y4m -> vpx_fmt = VPX_IMG_FMT_I420 ; _y4m -> vpx_bps = 12 ; if (! _y4m -> vpx_fmt ) { fprintf ( stderr, ""Error <S2SV_blank> parsing <S2SV_blank> video <S2SV_blank> format; <S2SV_blank> assuming <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; return - 1 ; }",0
583,"<S2SV_ModStart> obj * otmp ; if ( strlen ( buf ) > 1024 ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; }",0
584,"<S2SV_ModStart> long long directory_table_end <S2SV_ModEnd>, table_start ; <S2SV_ModStart> 0 ) return FALSE ; if ( parse_exports_table ( & table_start ) == FALSE ) return FALSE ; if ( read_fragment_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk.",0
585,"<S2SV_ModStart> * createenv ( <S2SV_ModEnd> const struct rule <S2SV_ModStart> = 0 ; if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { struct envnode * node ; if ( RB_INSERT ( envtree, & env -> root, NULL ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } else if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { struct envnode * node ; size_t len ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf, eq + 1 ) ; if ( RB_INSERT ( envtree, & env -> root, NULL ) ) { freenode ( node ) ; } else { env -> count ++ ; } }",0
586,"<S2SV_ModStart> -> seg ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ; vp9_clear_segmentation ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; vp9_set_segdata ( seg, segment, SEG_LVL_ALT_Q, qindex_delta ) ; vpx_clearall_segfeatures ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vp9_enable_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ; vpx_set_segdata ( seg, segment, SEG_LVL_ALT",0
587,"<S2SV_ModStart> ; Module_type = make_type ( ""Module"", mod_type, Module_fields, 1 ) ; if (! Module_type ) return 0 ; <S2SV_ModStart> ; Interactive_type = make_type ( ""Interactive"", mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; FunctionDef_type = make_type ( ""FunctionDef"", stmt_type, FunctionDef_fields, 5 ) ; if (! FunctionDef_type ) return 0 ; AsyncFunctionDef_type = make_type ( ""AsyncFunctionDef"", stmt_type, AsyncFunctionDef_fields, 5 ) ; if (! AsyncFunctionDef_type ) return 0 ; ClassDef_type = make_type ( ""ClassDef"", stmt_type, ClassDef_fields, 5 ) ; if (! ClassDef_type )",0
588,"<S2SV_ModStart> O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IWGRP | S_IROTH <S2SV_ModStart> } write ( logfile_fd <S2SV_ModEnd>, ""btsnoop\\0\\0\\0\\0\\1\\0\\0\\x3\\xea"",",0
589,<S2SV_ModStart> 16 ) ; } if ( m == Y_PRED ) { ++ x -> ymode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ; } else if ( m == UV_PRED ) { ++ x -> uv_mode_count [ uvm ] ; },0
590,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart> * s, * t, * StartClean <S2SV_ModStart> = outputbuffer ; <S2SV_ModEnd> outpos = outputbuffer <S2SV_ModStart> += sprintf ( <S2SV_ModEnd> outpos, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"" <S2SV_ModStart> += sprintf ( <S2SV_ModEnd> outpos, ""\\\\axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"" <S2SV_ModStart> termchar ) ; if ( * s == '0' && s [ 1 ] == ']' ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf ( outfile, ""%s"", axohelp, nameobject ) ; return ( 0 ) ; } } StartClean = outpos ; nameobject = t ; while ( * t!='<S2SV_blank>'&& * t!= '\\t' && * t!= '\\n' && * t!= '\\n' ) t ++ ; * t ++ = 0 ; while ( * t!='<S2SV_blank>'&& *",0
591,"<S2SV_ModStart> expr_ty step ; int res ; <S2SV_ModStart> ) ) { int res ; tmp = _PyObject_GetAttrId ( obj, & PyId_lower ) ; if ( tmp == NULL ) goto failed ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( exists_not_none ( obj, & PyId_upper ) ) { int res ; tmp = _PyObject_GetAttrId ( obj, & PyId_upper ) ; if ( tmp == NULL ) goto failed ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( exists_not_none ( obj, & PyId_step ) ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } * out = Slice ( lower, upper, step, arena ) ; if ( * out == NULL",0
592,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs ) <S2SV_ModStart> * probs ) { vpx_write_token <S2SV_ModEnd> ( w,",0
593,"<S2SV_ModStart> int err ; if ( nfp_abm_u32_check_knode ( alink -> abm, knode, proto, extack ) ) goto err_delete ; val = be32_to_cpu ( knode -> sel -> keys [ 0 ]. val ) >> tos_off & 0xff ; mask = be32_to_cpu ( knode -> sel -> keys [ 0 ]. mask ) >> tos_off & 0xff ; val = be32_to_cpu ( knode -> sel -> keys [ 0 ]. val ) >> tos_off & 0xff ; mask = be32_to_cpu ( knode -> sel -> keys [ 0 ]. mask ) >> tos_off & 0xff ; list_for_each_entry ( iter, & alink -> dscp_map, list ) { u32 cmask ; if ( ( iter -> val & cmask ) == ( val & cmask ) && iter -> band!= knode -> res -> classid ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } }",0
594,"<S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; } if ( stream -> config. stats_fn ) { if (! stats_open_file ( & stream -> stats, stream -> config. stats_fn, pass ) ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; } else { if ( stream -> config. stats_fn ) { if (! stats_open_mem ( & stream -> stats, pass ) ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; } else { if ( stream -> config. stats_fn ) { if (! stats_open_file ( & stream -> stats, stream -> config. stats_fn, pass ) ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; } else { if ( stream -> config. stats_fn ) { if (! stats_open_mem ( & stream -> stats, pass ) ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; } else { if ( stream -> config. stats_fn ) { if (! stats_open_mem ( & stream -> stats, pass ) ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank>",0
595,"<S2SV_ModStart> g_key_file_get_string ( keyfile, expected_dbus_name, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ; if (! g_key_file_get_string ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; <S2SV_ModStart> g_key_file_get_string ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ; if (! g_key_file_get_string ( keyfile, expected_dbus_name, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_get_string ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ;",0
596,"<S2SV_ModStart> { VP9_COMMON * const cm = & pbi -> common ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_cols = 1 << cm -> log2_tile_cols ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_cols = 1 << cm -> log2_tile_cols ; TileBuffer tile_buffers [ 4 ] [ 1 << 6 ] ; int tile_row, tile_col ; const int last_tile = tile_row == tile_rows - 1 && tile_col == tile_cols - 1 ; const size_t size = get_tile ( data_end, last_tile, & cm -> error, & data ) ; TileBuffer * const buf = & tile_buffers [ tile_row ] [ tile_col ] ; buf -> data = data ; buf -> size = size ; data += size ; } for ( tile",0
597,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static VP9Decoder * vpx_decoder_create ( const VP9D_CONFIG <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> VP9Decoder * const pbi = vpx_memalign ( 32, sizeof ( * pbi ) ) ; VP9_COMMON * const cm = pbi? & pbi -> common : NULL ; if (! pbi ) return NULL ; vp9_zero ( * pbi ) ; if ( setjmp ( cm -> error. jmp ) ) { cm -> error. setjmp = 0 ; vp9_decoder_remove ( pbi ) ; return NULL ; } cm -> error. setjmp = 1 ; vp9_initialize_dec ( ) ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; cm -> oxcf = * oxcf ; pbi -> ready_for_new_data = 1 ; pbi -> decoded_key_frame = 0 ; vp9_init_dequantizer ( cm ) ; cm -> error. set",0
598,"<S2SV_ModStart> GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; <S2SV_ModStart> GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
599,<S2SV_ModStart> req ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> == NULL || opt -> opt. <S2SV_ModStart> == NULL || opt -> opt. <S2SV_ModStart> == NULL || opt -> opt. <S2SV_ModStart> == NULL || opt -> opt. <S2SV_ModStart> == 0 ) return ; <S2SV_ModEnd> cipso_v4_delopt ( &,0
600,"<S2SV_ModStart> * tokens, vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> do { const vpx_tree_index <S2SV_ModEnd> j = tree <S2SV_ModStart> ++ ] ; if ( j <= 0 ) { tokens [ - j ]. value = v ; tokens [ - j ]. len = l ; } else { tree2tok ( tokens, tree, j, v, l ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
601,"<S2SV_ModStart> ; if ( flags & VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP9_ALT_FLAG ; vp9_use_as_reference ( ctx -> cpi, ref ) ; } if ( flags & ( VP8_EFLAG_NO_UPD_LAST | VP8_EFLAG_NO_UPD_GF | VP8_EFLAG_NO_UPD_ARF ) ) { int upd = 7 ; if ( flags & VP8_EFLAG_NO_UPD_LAST ) upd ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_UPD",0
602,"<S2SV_ModStart> len ) ; if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } <S2SV_ModStart> asn1, & len ) ; if ( ret ) goto error ; if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } newseq = realloc ( seq, ( count + 1 ) * elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; } seq = newseq ; elem = ( char * ) seq + count * elemtype -> size ; memset ( elem, 0, elemtype -> size ) ; ret = decode_atype ( & t, contents, clen, elemtype, elem ) ; if ( ret ) goto error ; count ++ ; }",0
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> fadst16_8col ( __m128i,0
604,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int frame_max_bits ( const RATE_CONTROL * rc, const VP9EncoderConfig <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> ( ( int64_t ) rc -> av_per_frame_bandwidth * ( int64_t ) oxcf -> two_pass_vbrmax_section ) / 100 ; if ( max_bits < 0 ) max_bits = 0 ; else max_bits = ( ( int64_t ) rc -> av_per_frame_bandwidth * ( int64_t ) oxcf -> two_pass_vbrmax_section ) / 100 ; if ( max_bits < rc -> max_frame_bandwidth ) max_bits = rc -> max_frame_bandwidth ;",0
605,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
606,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_superblock ( VP9_COMP <S2SV_ModStart> * cpi, MACROBLOCK * x, <S2SV_ModStart> BLOCK_SIZE bsize ) { VP9_COMMON * const cm = & cpi -> common ; MACROBLOCKD * const xd = & x -> e_mbd ; MODE_INFO * mi = mi_8x8 [ 0 ] ; MB_MODE_INFO * mbmi = mi_8x8 [ 0 ] ; PICK_MODE_CONTEXT * ctx = get_block_context ( x, bsize ) ; x -> skip_optimize = ctx -> is_coded ; x -> use_lp32x32fdct = cpi -> sf. use_lp32x32fdct ; x -> use_lp32x32fdct = cpi -> sf. use_lp32x32fdct ; x -> use_lp32x32fdct = cpi -> sf. use_lp32x32fdct ; x -> skip_encode = (! output_enabled && cpi -> sf. skip_encode_frame && x -> q_index < QIDX_SKIP_",0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header,0
608,"<S2SV_ModStart> uint32_t value ; int position, zeroes, i, j ; char bits [ 65 ] ; if ( ctx -> trace_enable ) position = get_bits_count ( gbc ) ; if ( position < get_bits_left ( gbc ) ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> 1 ) { if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> 1 ) { if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; }",0
609,"<S2SV_ModStart> { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) {",0
610,"<S2SV_ModStart> -> http_contentlen. ptr = NULL, packet -> http_contentlen. len = 0, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_origin. ptr = NULL, packet -> http_origin. ptr = NULL, packet -> http_x_session_type. ptr = NULL, packet -> http_x_session_type. len = 0, packet -> server_line. ptr = NULL, packet -> server_line. len = 0,",0
611,"<S2SV_ModStart> 4 ) { if ( dds_info -> width - x > dds_info -> width || dds_info -> height - y > dds_info -> height ) return MagickFalse ; <S2SV_ModStart> 4 ) { if ( dds_info -> width - x > dds_info -> width || dds_info -> height - y > dds_info -> height ) return MagickFalse ; <S2SV_ModStart> } } } if ( dds_info -> height - y > dds_info -> height ) return MagickFalse ; <S2SV_ModStart> 8 ) ; if ( dds_info -> width - x > dds_info -> width || dds_info -> height - y > dds_info -> height ) return MagickFalse ; <S2SV_ModStart> } } } if ( dds_info -> width - x > dds_info -> width || dds_info -> height - y > dds_info -> height ) return MagickFalse ; SkipDXTMipmaps ( image, dds_info, 8 ) ;",0
612,"<S2SV_ModStart> { int ret ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> EINTR ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY (",0
613,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
614,"<S2SV_ModStart> ) ) { send ( ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11, x12, x21, x22, x, y ) ; } else { send ( ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11, x12, x21, x22, x, y ) ; send ( ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11, x12, x21, x22,",0
615,"<S2SV_ModStart> FALSE ; WLog_VRB ( AUTODETECT_TAG, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" ) ; Stream_Read_UINT32 ( s, rdp -> autodetect -> bandwidthMeasureTimeDelta ) ; Stream_Read_UINT32 ( s, rdp -> autodetect -> bandwidthMeasureByteCount ) ;",0
616,<S2SV_ModStart> ; # endif # if ( CONFIG_REALTIME_ONLY & CONFIG_ONTHEFLY_BITPACKING ) if ( cpi -> b_multi_threaded!= 0 ) last_row_current_mb_col = & cpi -> mt_current_mb_col [ mb_row - 1 ] ; else last_row_current_mb_col = & cpi -> mt_current_mb_col [ mb_row - 1 ] ; if ( cpi -> b_multi_threaded!= 0 ) last_row_current_mb_col = & cpi -> mt_current_mb_col [ mb_row - 1 ] ; else last_row_current_mb_col = & cpi -> mt_current_mb_col [ mb_row - 1 ] ; else last_row_current_mb_col = & cpi -> mt_current_mb_col [ mb_row - 1 ] ; if ( cpi -> b_multi_threaded!= 0 ) last_row_current_mb_col = & cpi -> mt_current_mb_col [ mb_row - 1 ] ; else last_row_current_mb_col =,0
617,<S2SV_ModStart> # if CONFIG_MULTITHREAD <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
618,<S2SV_ModStart> 0 ) { xWantedSize += xHeapStructSize ; if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } if ( ( xWantedSize > 0 ) && ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; },0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,"<S2SV_ModStart> { uint16 num_updates = 0 <S2SV_ModStart> int i ; if ( s_check_rem ( s, 2 ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> invalid <S2SV_blank> stream <S2SV_blank> length"" ) ; return ; } <S2SV_ModStart> ++ ) { if ( s_check_rem ( s, 2 ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> invalid <S2SV_blank> stream <S2SV_blank> length"" ) ; return ; } <S2SV_ModStart> ++ ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> invalid <S2SV_blank> stream <S2SV_blank> length"" ) ; return ; } <S2SV_ModStart> ++ ) { if ( s_check_rem ( s, 2 ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> invalid <S2SV_blank> stream <S2SV_blank> length"" ) ; return ; } <S2SV_ModStart> ++ ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> invalid <S2SV_blank> stream <S2SV_blank> length"" ) ; return ; } <S2SV_ModStart> ++ ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> invalid <S2SV_blank> stream <S2SV_blank> length"" ) ; return ; } <S2SV_ModStart> ++ ) { if ( s_check_rem ( s, 2 ) )",0
621,"<S2SV_ModStart> } else { if ( smatch ( option, ""path"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Path <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" ) ; return MPR_ERR_BAD_SYNTAX ; } else if ( smatch ( option, ""backup"" ) ) { flags |= MPR_LOG_BACKUP ; } else if ( smatch ( option, ""anew"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""stamp"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> ErrorLog <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; } else if ( smatch ( option, ""anew"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""anew"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""stamp"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"",",0
622,"<S2SV_ModStart> tx_size, vpx_coeff_stats <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model * coef_probs = cpi -> frame_coef_probs [ tx_size ] ; vpx_coeff_count * coef_counts = cpi -> coef_counts [ tx_size ] ; unsigned int ( * eob_branch_ct ) [ REF_TYPES ] [ COEF_BANDS ] [ COEFF_CONTEXTS ] ; vpx_tree_probs_from_distribution ( vp9_coef_tree, coef_counts [ i ] [ j ] [ k ] [ l ] - coef_branch_ct [ i ] [ j ] [ k ] [ 0 ]",0
623,"<S2SV_ModStart> ( name ) ; if (! access_ok ( VERIFY_WRITE, fd, name ) ) r = - EACCES ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> UTF-8 <S2SV_blank> term <S2SV_blank> processing <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank>",0
624,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> su3000_frontend_attach ( struct <S2SV_ModStart> } ; if ( dvb_usb_generic_rw ( d -> dev, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( <S2SV_ModStart> ; if ( dvb_usb_generic_rw ( d -> dev, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d -> dev, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d -> dev, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; d -> fe_adap [ 0 ]. fe = dvb_attach ( ds3000_attach, & su3000_ds3000_config, & d",0
625,"<S2SV_ModStart> * iface, vpx_codec_enc_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODE",0
626,"<S2SV_ModStart> int stride, const <S2SV_ModStart> const kernel = vp9_get_interp_kernel ( xd -> mi [ 0 ] -> mbmi. interp_filter ) ; enum mv_precision mv_precision_uv ; int uv_stride ; if ( uv_block_size == 8 ) { uv_stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q4 ; } else { uv_stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q3 ; } vpx_build_inter_predictor ( y_mb_ptr, stride, & pred [ 0 ], 16, & mv, scale, 16, 16, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vp9_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, mv_precision_uv, x, y ) ; vpx_build_inter_predictor ( v_mb_ptr, uv_stride",0
627,"<S2SV_ModStart> = TRUE ; if ( strlen ( origbuf ) > 4 * BUFSZ ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } if ( strchr ( buf,'<S2SV_blank>') ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') ++ bufp ; if ( * bufp =='<S2SV_blank>') ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; }",0
628,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static cJSON * <S2SV_ModEnd> cJSON_CreateFloatArray ( double <S2SV_ModStart> ; for ( i = 0 ; a && i < count ; ++ i ) { n = cJSON_CreateFloat ( numbers [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } return a ; } for ( i = 0 ; a && i < count ; ++ i ) { n = cJSON_CreateFloat ( numbers [ i ] ) ; if (! n ) a -> child = cJSON_CreateFloat ( numbers [ i ] ) ; if (! i ) a -> child = cJSON_CreateFloat ( numbers [ i ] ) ; if (! n ) a -> child = cJSON_CreateFloat ( numbers [ i ] ) ; if (! i ) a -> child = cJSON_CreateFloat ( numbers [ i ] ) ; if (! i ) a -> child = cJSON_CreateFloat ( numbers [ i ] ) ; if (! n ) a -> child = cJSON_CreateFloat ( numbers [ i ] ) ; else suffix_object ( p, n",0
629,"<S2SV_ModStart> { VP9_COMMON * const cm = & pbi -> common ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int num_workers = MIN ( pbi -> oxcf. max_threads <S2SV_ModEnd>, tile_cols ) <S2SV_ModStart> int num_workers = MIN ( pbi -> oxcf. max_threads <S2SV_ModEnd>, tile_cols ) <S2SV_ModStart> int i ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_malloc ( num_threads * sizeof ( * worker -> data1 ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data2, vpx_malloc ( num_workers * sizeof ( * worker -> data2 ) ) ) ; for ( i = 0 ; i < num_workers ; ++ i ) { VP9Worker * const worker = & pbi -> tile_workers [ i ] ; vp9_worker_init ( worker ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data",0
630,"<S2SV_ModStart> 0x101 ; offset = base + <S2SV_ModEnd> get4 ( ) <S2SV_ModStart> ( ) ; <S2SV_ModEnd> while ( ( <S2SV_ModStart> ( ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> ( ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> break ; case 0x524946 : if (! strncasecmp ( model, ""DSLR-A100"", 9 ) ) { fseek ( ifp, 8, SEEK_CUR ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 0 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 1 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 2 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 3 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 3 ] = get2 ( ) ; imgdata. color. WB_Coeffs [",0
631,"<S2SV_ModStart> -> common ; const double base_q = vp9_convert_qindex_to_q ( cm -> base_qindex ) ; const double base_rdmult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + cm -> y_dc_delta_q ) ; const int base_rdmult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + cm -> y_dc_delta_q ) ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, base_q * Q_RATIO ( i ) ) ; vp9_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vpx_set_segdata ( seg, SEGMENT_ID (",0
632,<S2SV_ModStart> -> error_code ) { if ( error -> has_detail ) ctx -> base. err_detail = error -> has_detail ; else ctx -> base. err_detail = NULL ; },0
633,"<S2SV_ModStart> * ps_cur_slice ; pocstruct_t * ps_prev_poc, * ps_cur_poc ; memset ( & ps_prev_poc, 0, sizeof ( pocstruct_t ) ) ; ps_prev_poc = ps_dec -> ps_prev_poc <S2SV_ModStart> ps_cur_poc ; memset ( & ps_prev_poc, 0, sizeof ( pocstruct_t ) ) ; memset ( & ps_prev_poc, 0, sizeof ( pocstruct_t ) ) ; memset ( & ps_prev_poc, 0, sizeof ( pocstruct_t ) ) ; memset ( & ps_prev_poc, 0, sizeof ( pocstruct_t ) ) ; memset ( & ps_prev_poc, 0, sizeof ( pocstruct_t ) ) ; memset ( & ps_prev_poc, 0, sizeof ( pocstruct_t ) ) ; memset ( & ps_prev_poc, 0, sizeof ( pocstruct_t ) ) ; memset ( & ps_prev_poc, 0, sizeof ( p",0
634,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd, btpan_cb. congest_packet, GKI_MAX ( btpan_cb. congest_packet, sizeof ( btpan_cb. congest_packet, GKI_MAX ( btpan_cb. congest_packet, GKI_MAX ( btpan_cb. congest_packet, GKI_MAX ( btpan_cb. congest_packet, GKI_MAX ( btpan_cb. congest_packet, GKI_MAX ( btpan_cb. congest_packet, GKI_MAX ( btpan_cb. congest_packet, GKI_MAX ( btpan_cb. congest_packet, GKI_MAX ( btpan_cb. congest_packet, GKI_MAX ( btpan_cb. congest_packet, GKI_MAX ( btpan_cb. congest_packet, GKI_MAX ( btpan_cb. congest_packet, GKI_MAX ( btpan",0
635,"<S2SV_ModStart> <S2SV_null> static int getnum ( const char * * fmt, int df ) { if (! isdigit ( * * fmt ) ) return df ; else { int a = 0 ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * * fmt ) ) ; if (! isdigit ( * * fmt ) ) return df ; else { int a = 0 ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * * fmt ) ) ; } if (! isdigit ( * * fmt ) ) return df ; else { int a = 0 ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * * fmt ) ) ; if (! isdigit ( * * fmt ) ) return df ; else { int a = 0 ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * * fmt ) )",0
636,"<S2SV_ModStart> ; markold ( g, g -> allgc, g -> reallyold ) ; markold ( g, g -> finobj, g -> finobjrold ) ;",0
637,<S2SV_ModStart> else return - ENODEV <S2SV_ModEnd> ; deb_info (,0
638,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } memset ( buffer, 0, sizeof buffer ) ; s_read ( c, c -> local_rfd. fd, buffer, sizeof buffer ) ; s_read ( c, c -> local_wfd. fd, buffer, sizeof buffer ) ; if ( safe_memcmp ( buffer, ssl_request, sizeof ssl_request ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } s_write ( c, c -> local_wfd. fd, ssl_ok, sizeof ssl_ok ) ;",0
639,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> cib_tls_signon ( cib_t <S2SV_ModStart> struct sockaddr_in addr <S2SV_ModEnd> ; int rc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> struct mainloop_fd_callbacks cib_fd_callbacks <S2SV_ModStart> = NULL ; <S2SV_ModEnd> connection -> socket <S2SV_ModStart> = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } bzero ( & hints, sizeof ( struct addrinfo ) ) ; hints. ai_flags = AI_CANONNAME ; hints. ai_family = AF_INET ; hints. ai_socktype = SOCK_RAW ; if ( hints. ai_family == AF_INET6 ) { hints. ai_protocol = IPPROTO_ICMPV6 ; } else",0
640,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; if ( setjmp ( cm -> error. jmp ) ) { cpi -> common. error. setjmp = 1 ; CHECK_MEM_ERROR ( cpi -> mb. ss, vpx_calloc ( sizeof ( search_site ), ( MAX_MVSEARCH_STEPS * 8 ) + 1 ) ) ; vp8_create_common ( & cpi -> common ) ; } <S2SV_ModStart> = 0 ; if ( setjmp ( cm -> error. jmp ) ) { cpi -> common. error. setjmp = 0 ; cpi -> common. error. setjmp = 1 ; CHECK_MEM_ERROR ( cpi -> mb. ss, vpx_calloc ( sizeof ( search_site ), ( MAX_MVSEARCH_STEPS * 8 ) + 1 ) ) ; vp8_create_common ( & cpi -> common ) ; memcpy ( cpi -> base_skip_false_prob, vp8cx_base_skip_false_prob, sizeof ( vp8cx_base_skip_false_prob ) ) ; memcpy ( cpi -> base_",0
641,"<S2SV_ModStart> ndo_vflag ) { ND_TCHECK2 ( bp [ 26 ], sizeof ( struct in6_addr ) ) ; <S2SV_ModStart> ndo_vflag ) { ND_TCHECK2 ( bp [ 26 ], sizeof ( struct in6_addr ) ) ; <S2SV_ModStart> ndo_vflag ) { ND_TCHECK2 ( bp [ 26 ], sizeof ( struct in6_addr ) ) ; <S2SV_ModStart> } if ( ndo -> ndo_vflag ) { ND_TCHECK2 ( bp [ 26 ], sizeof ( struct in6_addr ) ) ; } if ( ndo -> ndo_vflag ) { ND_TCHECK2 ( bp [ 26 ], sizeof ( struct in6_addr ) ) ; <S2SV_ModStart> ndo_vflag ) { ND_TCHECK2 ( bp [ 26 ], sizeof ( struct in6_addr ) ) ; <S2SV_ModStart> } if ( ndo -> ndo_vflag ) { ND_TCHECK2 ( bp [ 26 ], sizeof ( struct in6_addr ) ) ; } if ( ndo -> ndo_vflag ) { ND_TCHECK2 ( bp [ 26 ], sizeof (",0
642,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> ; if ( copy_from_user ( & karg, uarg, sizeof ( struct mpt_ioctl_command ) ) ) { printk ( KERN_ERR MYNAM ""%s@%d::mptctl_mpt_command() <S2SV_blank> @%d <S2SV_blank> - <S2SV_blank> "" ""Unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> in <S2SV_blank> mpt_ioctl_command <S2SV_blank> struct <S2SV_blank> @ <S2SV_blank> %p\\n"", __FILE__, __LINE__, uarg ) ; return - EFAULT ; } if ( copy_to_user ( & karg, uarg, sizeof ( struct mpt_ioctl_command ) ) ) { printk ( KERN_ERR MYNAM ""%s@%d::mptctl_mpt_command() <S2SV_blank> @%d <S2SV_blank> - <S2SV_blank> "" ""Unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> in <S2SV_blank> mpt_ioctl_command <S2SV_blank> struct <S2SV_blank> @ <S2SV_blank> %p\\n"", __FILE__, __LINE__, uarg ) ; return - EFAULT ; }",0
643,<S2SV_ModStart> Image <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
644,"<S2SV_ModStart> = 0 ; if ( cp -> imgareatlx < 0 || cp -> imgareatly < 0 ) { jas_eprintf ( ""image <S2SV_blank> is <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return - 1 ; } if ( cp -> imgareatly < 0 ) { jas_eprintf ( ""image <S2SV_blank> is <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return - 1 ; } if ( jas_stream_getrwcount ( enc -> out ) < startoff ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" ) ; return - 1 ; } if ( jas_stream_getrwcount ( enc -> out ) < startoff ) { jas_eprintf ( ""image <S2SV_blank> is <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return - 1 ; } if ( jas_stream_getrwcount ( enc -> out ) < startoff ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" ) ; return - 1 ; } if ( jas_stream_getrwcount ( enc -> out ) < startoff ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC",0
645,"<S2SV_ModStart>, NULL, WEECHAT_STRING_STRIP_LEFT | WEECHAT_STRING_STRIP_RIGHT | WEECHAT_STRING_COLLAPSE_SEPS <S2SV_ModStart>, NULL, WEECHAT_STRING_STRIP_LEFT | WEECHAT_STRING_COLLAPSE_SEPS <S2SV_ModStart>, NULL, WEECHAT_STRING_STRIP_RIGHT | WEECHAT_STRING_COLLAPSE_SEPS <S2SV_ModStart>, NULL, WEECHAT_STRING_STRIP_LEFT | WEECHAT_STRING_STRIP_RIGHT | WEECHAT_STRING_COLLAPSE_SEPS, 0 <S2SV_ModStart>, NULL, WEECHAT_STRING_STRIP_LEFT | WEECHAT_STRING_COLLAPSE_SEPS, 0 <S2SV_ModStart>, NULL, WEECHAT_STRING_STRIP_RIGHT | WEECHAT_STRING_COLLAPSE_SEPS, 0 <S2SV_ModStart>, NULL, WEECHAT_STRING_STRIP_LEFT | WEECHAT_STRING_STRIP_RIGHT | WEECHAT_STRING_COLLAPSE_SEPS, 0",0
646,"<S2SV_ModStart> decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> int v = vpx_read_bit <S2SV_ModEnd> ( r )",0
647,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
648,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> frame_parallel_decoding_mode ) ++",0
649,"<S2SV_ModStart>! stream ) { <S2SV_ModStart> fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; } <S2SV_ModStart> res ; res = vpx_codec_enc_config_default ( global -> codec -> interface ( ), & stream -> config. cfg, global -> usage ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; stream -> config. cfg. g_timebase. den = 1000 ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. stereo_fmt = STEREO_FORMAT_MONO ; stream -> config. write_webm = 1 ; stream -> ebml. last_pts_ms = - 1 ; stream -> ebml. debug = global -> debug ; stream -> config. cfg. g_lag_in_frames = 0 ; stream -> config. out_fn = NULL ; stream -> next = NULL ; }",0
650,"<S2SV_ModStart> nd_opt_mtu * opm = ( const struct nd_opt_mtu * ) cp ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", opm -> nd_opt_type ), opm -> nd_opt_type ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", opm -> nd_opt_type ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", opm -> nd_opt_type ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", opm -> nd_opt_type ) ) ) ;",0
651,<S2SV_ModStart> = 0 ; if ( ( * re_ast ) -> root_node == NULL ) { yr_error ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror (,0
652,"<S2SV_ModStart> ) ) ; <S2SV_ModEnd> ret = var_expand <S2SV_ModStart> <= 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> lookup <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", str_c ( path ), key -> value, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found, <S2SV_blank> using <S2SV_blank> default <S2SV_blank> value <S2SV_blank> %s"", str_c ( path ), key",0
653,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> tok -> altwarning <S2SV_ModStart> = 0 ; tok -> alterror = 1 ; tok -> alttabsize = 1 ; tok -> altindstack [ 0 ] = 0 ; tok -> decoding_state = STATE_INIT ; tok -> decoding_erred = 0 ; tok -> filename = NULL ; tok -> decoding_readline = NULL ; tok -> decoding_buffer = NULL ; # endif,0
654,"<S2SV_ModStart> -> av1_config ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1 -> av1_config -> config ) ; if ( av1_cfg ) { gf_odf_av1_cfg_write ( av1_cfg, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> data, & av1 -> emul_esd -> decoderSpecificInfo -> dataLength ) ; gf_odf_av1_cfg_del ( av1_cfg",0
655,"<S2SV_ModStart> dpbSize ) ; dpb -> maxLongTermFrameIdx = NO_LONG_TERM_FRAME_INDICES ; dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; if ( noReordering ) dpb -> dpbSize = dpbSize ; if ( dpb -> buffer == NULL ) return ( MEMORY_ALLOCATION_ERROR ) ; H264SwDecMemset ( dpb -> buffer, 0, ( MAX_NUM_REF_PICS + 1 ) * sizeof ( dpbPicture_t ) ) ; for ( i = 0 ; i < dpb -> dpbSize + 1 ; i ++ ) { if ( dpb -> buffer [ i ]. pAllocatedData == NULL ) return ( MEMORY_ALLOCATION_ERROR ) ; H264SwDecMemset ( dpb -> buffer, 0, ( MAX_NUM_REF_IDX_L0_ACTIVE + 1 ) * sizeof ( dpbPicture_t ) ) ; for ( i = 0 ; i < dpb -> dpbSize + 1 ; i ++ ) { if ( dpb -> buffer [ i ]. pAllocatedData == NULL ) return ( MEMORY_ALLOCATION_ERROR ) ;",0
656,<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> = 0 ; if ( addrlen_in > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> ; if ( addrlen_out > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> ; if ( addrlen_out > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> ; if ( addrlen_out > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> ; if ( addrlen_out > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_out > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_out > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( O,0
657,,1
658,"<S2SV_ModStart> FALSE ; } if (! tpdu_read_negotiation_request ( s, & li, length ) ) return FALSE ; if ( li!= length ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> TPDU <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; } if (! tpdu_read_negotiation_request ( s, & li, length ) ) return FALSE ; if ( li!= length ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> negotiation <S2SV_blank> request <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; } if (! tpdu_read_negotiation_request ( s, & li, length ) ) return FALSE ; if ( li!= length ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> TPDU <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; } if (! tpdu_read_negotiation_request ( s, & li, length ) ) return FALSE ; if ( li!= length ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> negotiation <S2SV_blank> request <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; }",0
659,"<S2SV_ModStart> ipv6_pinfo * np = rcu_dereference_protected ( sk -> sk_prot, sock_owned_by_user ( sk ) ) ; struct ipv6_txoptions * opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; if ( opt == NULL ) { opt = & opt_space ; opt_space = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; opt_space = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; if ( opt == NULL ) { opt = & opt_space ; opt_space = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; opt_space = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; opt_space = rcu",0
660,"<S2SV_ModStart>, at ; <S2SV_ModEnd> unsigned int i <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> ; struct cli_exe_section <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> ; struct cli_exe_section <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> ; int upxfn <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> )!= CL_CLEAN <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> )!= CL_CLEAN <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> )!= CL_CLEAN <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> )!= CL_CLEAN <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> )!= CL_CLEAN <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> )!= CL_CLEAN <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> )!= CL_CLEAN <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> )!= CL_CLEAN <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> )!= CL_CLEAN <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> )!= CL_CLEAN <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> )!= CL_CLEAN <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> )!= CL_CLEAN <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> )!= CL_CLEAN <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> )!= CL_CLEAN <S2SV_ModStart>, hdr_size, j",0
661,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> address ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR ) ; while ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE )!= 0 ) { } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000",0
662,<S2SV_ModStart> pcmk_ok ) { private -> command. encrypted = 0 ; <S2SV_ModStart> pcmk_ok ) { private -> command. encrypted = 1 ; <S2SV_ModStart> pcmk_ok ) { private -> command. encrypted = 0 ; <S2SV_ModStart> pcmk_ok ) { private -> command. encrypted = 1 ; <S2SV_ModStart> pcmk_ok ) { private -> command. encrypted = 0 ; <S2SV_ModStart> pcmk_ok ) { private -> command. encrypted = 0 ; <S2SV_ModStart> pcmk_ok ) { private -> command. encrypted = 1 ; } <S2SV_ModStart> pcmk_ok ) { private -> command. encrypted = 0 ; <S2SV_ModStart> pcmk_ok ) { private -> command. encrypted = 0 ; <S2SV_ModStart> pcmk_ok ) { private -> command. encrypted = 0 ; <S2SV_ModStart> pcmk_ok ) { private -> command. encrypted = 0 ; <S2SV_ModStart> pcmk_ok ) { private -> command. encrypted = 0 ; <S2SV_ModStart> pcmk_ok ) { private -> command. encrypted = 0 ; } <S2SV_ModStart> pcmk_ok ) { private -> command. encrypted = 0 ; } <S2SV_ModStart> pcmk_ok ) { private -> command. encrypted = 0 ; } <S2SV_ModStart> pcmk_ok ) { private -> command. encrypted = 0 ; } <S2SV_ModStart> pcmk_ok ) { private ->,0
663,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
664,"<S2SV_ModStart> >> 3 } ; int num00, tmp_err, n, sr = 0 ; int step_param = 3 ; int further_steps = ( MAX_MVSEARCH_STEPS - 1 ) - step_param ; const BLOCK_SIZE bsize = xd -> mi [ 0 ] -> mbmi. sb_type ; vp9_variance_fn_ptr_t v_fn_ptr = cpi -> fn_ptr [ bsize ] ; v_fn_ptr. vf = get_block_variance_fn ( bsize ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if (",0
665,"<S2SV_ModStart> < 0 ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; } if ( h -> size == 0 ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; } if ( h -> size == 0 ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; } if ( h -> size == 0 ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; }",0
666,"<S2SV_ModStart> ) ; } # ifdef DEBUG_CONF ap_log_perror ( APLOG_MARK, APLOG_STARTUP | APLOG_NOERRNO, 0, mp, ""Merge <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp <S2SV_blank> RESULT <S2SV_blank> %pp"", _parent, merged ) ; ap_log_perror ( APLOG_MARK, APLOG_NOERRNO, 0, mp, ""Merge <S2SV_blank> child <S2SV_blank> %pp <S2SV_blank> RESULT <S2SV_blank> %pp"", child, merged ) ; # ifdef DEBUG_CONF ap_log_perror ( APLOG_MARK, APLOG_STARTUP | APLOG_NOERRNO, 0, mp, ""Merge <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp <S2SV_blank> RESULT <S2SV_blank> %pp"", _parent, merged ) ; # endif",0
667,"<S2SV_ModStart>, one ; size_t <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException",0
668,"<S2SV_ModStart> 0 || ( r = sshbuf_put_u32 ( b, comp -> block_size ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> block_size",0
669,"<S2SV_ModStart> ) ) { if ( smatch ( option, "" <S2SV_blank> =\\t,"" ) ) ovalue = strim ( option, ""\\""\'"", MPR_TRIM_BOTH ) ; else ovalue = strim ( option, ""\\""\'"", MPR_TRIM_BOTH ) ; if ( smatch ( option, ""event"" ) ) { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; } else if ( smatch ( option, ""event"" ) ) { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; } else if ( smatch ( option, ""event"" ) ) { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; } else if ( smatch ( option, ""event"" ) ) { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; } else if ( smatch ( option, ""event"" ) ) { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; }",0
670,"<S2SV_ModStart> cib_client_t * client ; if ( client == NULL ) { return ; } crm_trace ( ""Cleaning <S2SV_blank> up <S2SV_blank> after <S2SV_blank> client <S2SV_blank> disconnect: <S2SV_blank> %s/%s"", crm_str ( client -> name ), client -> id ) ; if ( client -> id == NULL ) { crm_err ( ""Client <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> the <S2SV_blank> hashtable"", client -> name ) ; crm_err ( ""Client <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> the <S2SV_blank> hashtable"", client -> name ) ; } <S2SV_ModEnd> free ( client <S2SV_ModStart> user ) ; <S2SV_ModEnd> crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client""",0
671,"<S2SV_ModStart> * uv ; for ( uv = thread -> openupval ; uv!= NULL ; uv = uv -> u. open. next ) { work ++ ; markvalue ( g, uv -> v ) ; } } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
