,raw_predictions,correctly_predicted
0,<S2SV_ModStart> ; if ( n2size < 1 ) <S2SV_ModEnd> { applog (,0
1,"<S2SV_ModStart> case ND_TCHECK_32BITS ( tptr + 2 ) <S2SV_ModStart> ) ) { ND_TCHECK_32BITS ( tptr + 2 ) ; <S2SV_ModStart> case L2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %u"", tptr ) ; break ; }",0
2,<S2SV_ModStart> ; goto out_end <S2SV_ModEnd> ; if (,0
3,<S2SV_ModStart> - ENOMEM ; err = - EINVAL ;,0
4,<S2SV_ModStart> skb_valid_header ( skb ) <S2SV_ModEnd> ; if (,0
5,"<S2SV_ModStart>, offset ; if ( avio_feof ( f ) ) { index -> item_count = 0 ; av_freep ( & index -> items ) ; return AVERROR_INVALIDDATA ; }",1
6,<S2SV_ModStart> * tpg ; u16 <S2SV_ModEnd> tpgt ; int <S2SV_ModStart> ; if ( kstrlen <S2SV_ModEnd> ( tpgt ),0
7,<S2SV_ModStart> ) ) ; if (!,0
8,"<S2SV_ModStart> { u32 data <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return ; kvm_read_guest_cached ( vcpu -> kvm, & <S2SV_ModEnd> vcpu -> arch <S2SV_ModStart>. apic -> vapic_cache, & data, sizeof ( u32 ) <S2SV_ModEnd> ) ; apic_set_tpr",1
9,<S2SV_ModStart> src ) ; __switch_to_tm ( src ) ; tm_recheckpoint_new_task ( src ) ;,1
10,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> const char *",0
11,"<S2SV_ModStart> ( sb, KERN_ERR,",1
12,<S2SV_ModStart> ipv6_select_ident ( skb ),0
13,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, regs",0
14,<S2SV_ModStart> < INDIRECT_BLOCKS ) { <S2SV_ModStart> ] ) ; } <S2SV_ModEnd> } else { <S2SV_ModStart> ] ) ; },0
15,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_input ( tran_low_t <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t )",0
16,<S2SV_ModStart> == 0 ) sanitize_dead_code ( env ) ; if ( ret == 0 ),1
17,<S2SV_ModStart> ; int i <S2SV_ModEnd> ; if (,0
18,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( cgc -> sense,0
19,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> int fclose (,0
20,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int64_t filt <S2SV_ModEnd> int bitmap_depth <S2SV_ModStart> int min_t_err ; int filt filt_err ; int filt filt_err = 0 ; int filt filt_err ; int filt_err = 0 ; int filt_low_t filt_err ; int bit_depth = 0 ; int64_t filt_level = 0 ; int64_t num_level = 0 ; int64_t filt_level = 0 ; int bit_depth = 0 ; int bit_depth = 0 ; <S2SV_ModStart> if (! seg ) <S2SV_ModEnd> if ( cm <S2SV_ModStart> if ( filt ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> if ( cpi <S2SV_ModEnd> == 0 ) <S2SV_ModStart> == 0 ) return filt_err ; <S2SV_ModStart> ) ; } return vpx_err ;,0
21,,0
22,"<S2SV_ModStart> cpi, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_write_bit <S2SV_ModEnd> * w ) <S2SV_ModStart> ; vpx_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; vpx_write_bit <S2SV_ModEnd> ( wb,",0
23,<S2SV_ModStart> ) ; return <S2SV_ModEnd> ralg -> seedsize,1
24,"<S2SV_ModStart> ; if ( tcp_filter <S2SV_ModEnd> ( sk,",0
25,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> == 256 ) { <S2SV_ModStart> == COAP_BLOCK_SIZE_SIZE_16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_16 ; },0
26,<S2SV_ModStart> char * fmtname ; int debug <S2SV_ModStart> = 0 ; debug = 0 ; <S2SV_ModStart> break ; case OPT_DEBUG : debug = 0 ; break ; case,0
27,"<S2SV_ModStart> esr ) ; memset ( & info, 0, sizeof ( regs ) ) ;",0
28,"<S2SV_ModStart> length ) { if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> <S2SV_null> <S2SV_null>",0
29,"<S2SV_ModStart> intf ) { struct usb_host_interface * <S2SV_ModEnd> alt ; alt <S2SV_ModStart> ; if (! alt ) return - ENODEV <S2SV_ModEnd> ; return usb_set_interface <S2SV_ModStart> ( udev, alt -> <S2SV_ModEnd> desc. bInterfaceNumber <S2SV_ModStart> bInterfaceNumber, alt -> desc. bAlternateSetting",1
30,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> char * comp_char <S2SV_ModStart> char * to ; int ret <S2SV_ModStart> case 0 : if ( tolen < 2 ) return - ENAMETOOLONG ; <S2SV_ModStart> case 0 : if ( tolen < 2 ) return - ENAMETOOLONG ; <S2SV_ModStart> case 0 : if ( tolen < 2 ) return - ENAMETOOLONG <S2SV_ModEnd> ; memcpy ( <S2SV_ModStart> case 0 : if ( tolen < 2 ) return - ENAMETOOLONG ; <S2SV_ModStart> case 3 : if ( tolen < 2 ) return - ENAMETOOLONG ; <S2SV_ModStart> return - ENAMETOOLONG ;,0
31,<S2SV_ModStart> } if ( osStrchr <S2SV_ModEnd> ( line ),0
32,<S2SV_ModStart> unsigned long flags ; if ( qid > NVMET_NR_QUEUES ) return NULL,1
33,"<S2SV_ModStart> -> usb_data ; memset ( & interface, 0, sizeof ( dev ) ) ;",0
34,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,0
35,<S2SV_ModStart> NULL ) { if (! strcmp ( key_keyring ) ) return - ENOKEYRING ; <S2SV_ModStart> goto out ; } <S2SV_ModEnd> goto out ;,0
36,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> set ( ctx,0
37,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> addr -> l2tp_family <S2SV_ModStart> ; if (! sock_flag ( sk, SOCK_ZAPPED ) ) goto out_unlock ; if (",0
38,<S2SV_ModStart> <S2SV_null> static unsigned long <S2SV_ModEnd> stack_maxrandom_size ( void <S2SV_ModStart> ) { unsigned long <S2SV_ModEnd> max = 0 <S2SV_ModStart> ( ( - 1UL <S2SV_ModEnd> ) & STACK_RND_MASK,1
39,"<S2SV_ModStart>, _ ( GTK_RESPONSE_OK <S2SV_ModEnd> ) ; default",0
40,"<S2SV_ModStart> ; if ( safe_calloc <S2SV_ModEnd> ( str,",0
41,<S2SV_ModStart> ; if ( key == NULL &&,0
42,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0x51 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> 0x51 <S2SV_blank> transfer <S2SV_blank> failed."" ) ; mutex_unlock ( & d -> data_mutex ) ; state -> data_mutex ) ; mutex_unlock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0x51 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> dvb_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd> ) ; mutex )",0
43,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
44,<S2SV_ModStart> } } } fix_google_param ( google_s <S2SV_ModEnd> ) ; fix_param (,0
45,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horAcc8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
46,"<S2SV_ModStart> tsample_t s ; uint16 bps = 0 ; ( void ) TIFFGetField ( in, TIFFTAG_BITSPERSAMPLE, & bps ) ; if ( bps!= 8 ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> can <S2SV_blank> only <S2SV_blank> handle <S2SV_blank> BitsPerSample=8 <S2SV_blank> in <S2SV_blank> %s"", ""cpContig2SeparateByRow"" ) ; return 0 ; }",1
47,"<S2SV_ModStart> ) ; struct hugepage_subpool * spool = ( struct hugepage_subpool <S2SV_ModEnd> * ) page_private <S2SV_ModStart> hugetlb_lock ) ; hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, 1 )",1
48,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) { return AVERROR_EOF ; } if (,1
49,<S2SV_ModStart> goto not_found ; if ( e - p > HOST_NAME_MAX - 1 ) goto not_found ;,0
50,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> bool <S2SV_ModEnd> generic_pipe_buf_get ( struct <S2SV_ModStart> buf ) { return try_get_page <S2SV_ModEnd> ( buf ->,1
51,"<S2SV_ModStart>, cp, ep2, map, NULL,",0
52,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",0
53,"<S2SV_ModStart>, sizeof ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
54,<S2SV_ModStart> config -> pm_max_requests ; fpm_globals. listening_socket = dup ( wp -> listening_socket ),1
55,"<S2SV_ModStart> * next_frame, TWO_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> int next_frame ; const FIRSTPASS_STATS * next_frame = 0.0 ; double zero_frame = 0.0 ; double zero_motion_rate = 0.0 ; <S2SV_ModStart> ( twopass, next_frame_inter_inter && next_frame -> next_frame_inter == 0.0 ) { next_frame_inter = 0.0 ; next_frame_inter = 0.0 ; next_frame_inter_inter_inter_frame = 0.0 ; <S2SV_ModStart> * twopass ; next_frame = 0.0 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
56,<S2SV_ModStart> -> id ; unsigned long n_handle ; <S2SV_ModStart> ( count ) <S2SV_ModEnd> ; if (,0
57,"<S2SV_ModStart> inode -> i_ino, flags <S2SV_ModEnd> ) ; } spin_unlock_irqsave",0
58,<S2SV_ModStart> valuelen ) ; args -> rmtvaluelen = args -> valuelen ;,1
59,<S2SV_ModStart> mask ) { <S2SV_ModEnd> return err ;,0
60,"<S2SV_ModStart> 2 ) { ND_TCHECK2 ( * tptr, 2 ) ; <S2SV_ModStart> len - 2 ; if ( len < stlv_len ) goto trunc <S2SV_ModEnd> ; ND_TCHECK2 ( <S2SV_ModStart> case ISIS_SUBTLV_SPB_SPB_INSTANCE_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_SPB_INSTANCE_INSTANCE_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ; stlv_len = stlv_len - ISIS_SUBTLV_SPB_SPB_INSTANCE_INSTANCE_LEN ; stlv_len = stlv_len - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ; stlv_len = len - ISIS_SUBTLV_SPB_SPB_SPB_SPB_INSTANCE_LEN ; stlv_len = stlv_len - ISIS_SUBTLV_SPB_SPB_INSTANCE_INSTANCE_INSTANCE_INSTANCE_INSTANCE_LEN ; <S2SV_ModStart>",0
61,"<S2SV_ModStart> ) { return skip ( c, body_size + 2 <S2SV_ModEnd>, MSG_JOB_TOO_BIG )",1
62,<S2SV_ModStart> dentry ) ; if ( dentry == NULL ) return - EINVAL ;,0
63,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
64,"<S2SV_ModStart> -> ipc_socket ; int procfd = payload -> procfd ; <S2SV_ModStart> & LXC_ATTACH_LSM ) && init_ctx -> lsm_label <S2SV_ModStart> int on_exec ; <S2SV_ModEnd> on_exec = options <S2SV_ModStart> : 0 ; if ( lsm_label_label_at ( lsm_label ) && ( lsm_label ) <S2SV_ModEnd> < 0 ) <S2SV_ModStart> { ERROR ( ""Error <S2SV_blank> is <S2SV_blank> notify <S2SV_blank> notify <S2SV_blank> process <S2SV_blank> using <S2SV_blank> (0): <S2SV_blank> %s."", strerror ( errno ) <S2SV_ModEnd> ) ; }",0
65,<S2SV_ModStart> error = 0 <S2SV_ModEnd> ; switch (,0
66,"<S2SV_ModStart> ( header -> biBitCount == 0 ) { fprintf ( stderr, ""Error, <S2SV_blank> invalid <S2SV_blank> biBitCount <S2SV_blank> %d\\n"", 0 ) ; return OPJ_FALSE ; } if ( header ->",1
67,<S2SV_ModStart> NULL ; } sas_probe_devices ( port ) ;,1
68,<S2SV_ModStart> 0 ) { if ( image -> colors < tga_info. colormap_index ) image -> colors = tga_info. colormap_index ;,1
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,"<S2SV_ModStart> ENOBUFS ; } memset ( & line, 0, sizeof ( line ) ) ;",1
71,"<S2SV_ModStart> arg ) { int ret ; ret = scsi_verify_blk_ioctl ( bd, cmd ) ; if ( ret < 0 ) return ret ;",1
72,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
73,<S2SV_ModStart> * ureq ; unsigned,0
74,"<S2SV_ModStart> int m ; if ( n < 0 ) { jas_deprecated ( ""negative <S2SV_blank> count <S2SV_blank> for <S2SV_blank> jas_stream_gobble"" ) ; }",0
75,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ;,0
76,<S2SV_ModStart> av_log ( mxf -> fc,1
77,<S2SV_ModStart> path. mnt <S2SV_ModEnd> ; if (,0
78,<S2SV_ModStart> + 10 ; if ( psf -> fileoffset < psf -> filelength ) { <S2SV_ModStart> ; } ; } ;,1
79,"<S2SV_ModStart> -> header_len ; ND_TCHECK ( p [ 0 ] ) ; <S2SV_ModStart> case LS_COOKIE_ID : ND_TCHECK2 ( p [ 0 ], 2 ) ; <S2SV_ModStart> case LS_COOKIE_ID : ND_TCHECK2 ( p [ 0 ], 2 ) ;",0
80,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! fp ),0
81,"<S2SV_ModStart> * up ; int klen ; <S2SV_ModStart> rta ) ; memset ( up, 0, sizeof ( * up ) ) ;",0
82,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> i -> io <S2SV_ModStart> - ENODEV ; } io_cleanup = io_cleanup ;,0
83,<S2SV_ModStart> ; } } if ( EINVAL (,0
84,"<S2SV_ModStart> NULL, NULL",0
85,"<S2SV_ModStart> ( buf = jas_alloc3 ( bufsize, numcols <S2SV_ModEnd>, sizeof (",1
86,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
87,<S2SV_ModStart> size ) { netdev_err <S2SV_ModEnd> ( vif ->,0
88,"<S2SV_ModStart> * object, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void *",0
89,"<S2SV_ModStart> xfr_cmd, fname <S2SV_ModEnd> ) ; free",1
90,<S2SV_ModStart> mixer ) { snd_usb_mixer_disconnect ( mixer ) ;,1
91,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> inode_lock ( struct <S2SV_ModStart> ) return - EINVAL ; if (! buff ) return - EINVAL ; <S2SV_ModStart> ) return - EINVAL ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) return 0 <S2SV_ModEnd> ; mutex_lock ( & <S2SV_ModStart> ) ; } return 0 ; out : mutex_lock ( & <S2SV_ModStart> ) ; return 0 <S2SV_ModEnd> ; } <S2SV_null>,0
92,<S2SV_ModStart> ipv6_pinfo ) ) ; newnp -> ipv6_mc_list = NULL ; newnp -> ipv6_ac_list = NULL,0
93,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } else if,0
94,<S2SV_ModStart> void usage_exit ( void,0
95,<S2SV_ModStart> 1 ) { <S2SV_ModEnd> return NULL ;,0
96,"<S2SV_ModStart> ( interface, ENC28J60_EIR <S2SV_ModEnd> ) { int <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd>, interface, ENC28J60_EIR_LEN <S2SV_ModStart> ( interface, ENC28J60_EIR_LEN <S2SV_ModEnd> ) ; enc28j60WriteReg ( interface <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_ECON1 <S2SV_ModEnd>, interface -> <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd>, interface, ENC28J60_ECON1 ) <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd> ) ; enc28J60_ECON1 <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd> ) ; return",0
97,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,0
98,"<S2SV_ModStart> } if (! page_name_is_valid ( page <S2SV_ModEnd> ) ) { <S2SV_ModStart> return 0 ; } if ( res -> filename ) { error_page ( ""%s: <S2SV_blank> ERROR"", 0 ) ; return 0 ; } else if ( res <S2SV_ModEnd> == 0 ) {",0
99,<S2SV_ModStart> ; if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) ) <S2SV_ModEnd> { ret =,0
100,<S2SV_ModStart> len ; } ND_TCHECK_16BITS ( p + 2 <S2SV_ModEnd> ) ; ND_PRINT,0
101,"<S2SV_ModStart> if (! caller_may_see_dir ( fc -> pid, controller, cgroup ) ) { ret = - ENOENT ; goto out ; } if (!",1
102,"<S2SV_ModStart> uv_stride ) { # if CONFIG_VP9_HIGHBITDEPTH flags & YV12_HIGHBITDEPTH flags ; # if CONFIG_VP9_HIGHBITDEPTH flags & YV12_HIGHBITDEPTH flags | VP9_HIGHBITDEPTH ) { memcpy <S2SV_ModEnd> ( xd, <S2SV_ModStart> y_buffer, 0, sizeof ( src_stride ) ; # else memcpy <S2SV_ModEnd> ( y_stride, <S2SV_ModStart> ) ) ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH flags & YV12_HIGHBITDEPTH if ( mb -> flags & YV12_FLAG_HIGHBITDEPTH ) ; # else memcpy <S2SV_ModEnd> ( mb, <S2SV_ModStart> i, void ) ; memset <S2SV_ModEnd> ( mb, <S2SV_ModStart> stride ) ; memcpy <S2SV_ModEnd> ( y_stride,",0
103,"<S2SV_ModStart> ptr ) { struct floppy_raw_cmd cmd = * ptr ; cmd. next = NULL ; cmd. kernel_data = NULL ; <S2SV_ModStart> ( param, & cmd <S2SV_ModEnd>, sizeof ( <S2SV_ModStart>, sizeof ( cmd <S2SV_ModEnd> ) ) ;",1
104,"<S2SV_ModStart> : if (! cap_issubset ( new -> cap_permitted, old -> cap_permitted ) ) bprm -> per_clear |= PER_CLEAR_ON_SETID ; if (",1
105,"<S2SV_ModStart> int mb2_cache_entry <S2SV_ModEnd> ; struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache <S2SV_ModStart> hash ) { int ret ; <S2SV_ModStart> error = mb2_cache <S2SV_ModEnd> ( ext4_xattr_cache, <S2SV_ModStart> bh ) ; <S2SV_ModEnd> } <S2SV_null>",0
106,,0
107,<S2SV_ModStart> tf = ( <S2SV_ModEnd> luaize (,0
108,<S2SV_ModStart> ; int err ; if ( protocol < 0 || protocol >= IPPROTO_MAX ) return - EINVAL,1
109,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> opt.",1
110,"<S2SV_ModStart> ; dl = kzalloc <S2SV_ModEnd> ( size,",1
111,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static u_int <S2SV_ModEnd> rtr_pki_pki_rtr_pki_rtr_pki_rtr_rtr_len <S2SV_ModStart> * len ) ; ND_TCHECK2 ( * tptr, len ) ; <S2SV_ModStart> * * len ; if ( len < sizeof ( * tptr ) ) { ND_TCHECK_16BITS ( rpki_pki_pki_rtr_pki_pki_rtr_pki_pki_pki_rtrfs ( len, len ) ) ; return len ; } if ( len < sizeof ( * tptr ) { ND_PRINT ( ( ( ndo, len ) ) ; goto trunc ; } if ( len < 0 ) { ND_PRINT ( ( ( ( ( len ) ) ; goto trunc ; }",0
113,<S2SV_ModStart> ; int n <S2SV_ModEnd> ; if (,0
114,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr,1
115,<S2SV_ModStart> char buf [ NAME_LEN + 1,0
116,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return retval ; <S2SV_ModEnd> } break ;",0
117,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; int ret <S2SV_ModStart> ) ; } o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> cl_nodes_lock ) ; o2nm_unlock_subsystem ( ) ;,1
118,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; break",1
119,"<S2SV_ModStart> == '/' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> is <S2SV_blank> absolute"" ) ; return ( ARCHIVE_FAILED ) ; } separator = * src ++ ; } <S2SV_ModEnd> for ( ;",1
120,<S2SV_ModStart> TPM2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 0x5 ) { TPM2SV_null>,0
121,"<S2SV_ModStart> inmem )? jas_stream_memopen2 <S2SV_ModEnd> ( 0,",0
122,<S2SV_ModStart> s ) { if ( s == 0 ) return ( ( void * ) NULL ) ;,1
123,<S2SV_ModStart> ; if ( WARN_ON_ONCE (! ib_safe_file_access ( fp ) ) ) return - EACCES ; if (,1
124,<S2SV_ModStart> 6 ) ) { MATLAB_KO : clone_info = DestroyImageInfo ( clone_info ) ; <S2SV_ModEnd> ThrowReaderException ( CorruptImageError,0
125,<S2SV_ModStart> ( peer ) peer = maybe_get_net <S2SV_ModEnd> ( peer ),1
126,<S2SV_ModStart> } while ( ( i < ( int ) header_buf_used ) && ( <S2SV_ModStart> ] == '\\n' ),1
127,<S2SV_ModStart> m_family ) ; if ( proto == LLDP_MGMT_ADDR_NONE ) continue <S2SV_ModEnd> ; if (,1
128,,0
129,<S2SV_ModStart> default_auto_asconf ) { spin_lock ( & sock_net ( sk ) -> sctp. addr_wq_lock ) ; <S2SV_ModStart> do_auto_asconf = 1 ; },0
130,"<S2SV_ModStart> GetBitContext * profile, int * <S2SV_ModEnd> profile, int <S2SV_ModStart> profile ) { * <S2SV_ModEnd> profile = get_bits <S2SV_ModStart> 0 ) ; * <S2SV_ModEnd> profile = get_bits <S2SV_ModStart> 0 ) ; * <S2SV_ModEnd> profile = get_profile",0
131,"<S2SV_ModStart> + MIDQ_DATA_BUFF ; u8 head, tail, size ; <S2SV_ModStart> flags ) ; head = readw ( mpu -> dev -> dev -> MIDQ + JQS_wHead ) ; tail = readw ( mpu -> MIDQ + JQS_wTail ) ; size = readw ( mpu -> dev -> MIDQ + JQS_wSize ) ; if ( head > size || tail > size ) goto out ; if ( readw ( mpu -> dev, readw ( mpu -> MIDQ + 2 * head ) head = readw ( mpu -> MIDQ + JQS_wHead ) ; if ( head > size ) goto out ; if ( readw ( mpu -> MIDQ + size ) head = readw ( mpu -> MIDQ + JQS_wHead ) mpu -> MIDQ + 1 ; if ( head > size ) goto out_w ( head = readw ( mpu -> MIDQ + 1 ) ; if ( head > size ) goto out ; } head = readw ( mpu -> MIDQ + size ) ; if ( head > size ) goto out_w ( head = readw (",0
132,<S2SV_ModStart> rule ) ; if (! entry -> lsm [ lsm_rule ]. rule ) return - EINVAL ;,1
133,<S2SV_ModStart> outfile ) ; <S2SV_ModEnd> if (!,0
134,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
135,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> = NULL ; <S2SV_ModEnd> { if ( <S2SV_ModStart> == NULL ) { <S2SV_ModEnd> if (! <S2SV_ModStart> - ENOMEM ; goto error <S2SV_ModEnd> ; } if",0
136,"<S2SV_ModStart> - EOPNOTSUPP ; uint32_t auxsize ; uint32_t buf ; <S2SV_ModStart> len ) ; memset ( & info, 0, sizeof ( * data ) ) ; <S2SV_ModStart>, 0 ) <S2SV_ModEnd> ; if (",0
137,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,1
138,<S2SV_ModStart> ; while ( ( i < to_read ) && <S2SV_ModStart>!= 0 ) <S2SV_ModEnd> ) { i,1
139,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
140,<S2SV_ModStart> [ plane ] && in -> linesize [ plane ],1
141,"<S2SV_ModStart> ( szFileName, pszFileName, <S2SV_ModStart> ) - 5 <S2SV_ModEnd> ) ; }",1
142,<S2SV_ModStart> ; if (,0
143,<S2SV_ModStart> if ( q < p || q,0
144,"<S2SV_ModStart> __be32 new_saddr ; struct ip_options_rcu * inet_opt ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. srr ) daddr = inet_opt -> opt. <S2SV_ModEnd> faddr ; rt",1
145,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
146,"<S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
147,"<S2SV_ModStart> ; } } memset <S2SV_ModEnd> ( addr,",0
148,"<S2SV_ModStart> int i, indexes, index_bytes = SQUASHFS_XAT_BLOCK_SIZE <S2SV_ModEnd> ; int sBlk",0
149,<S2SV_ModStart> 0 ) ; if (! dentry -> s_max ) { kfree ( dev ) ; return - EINVAL ; },0
150,<S2SV_ModStart> |= EXT4_EXT_MARK_UNINIT2 ; if ( flags & EXT4_GET_BLOCKS_CONVERT ) split_flag |= EXT4_EXT_DATA_VALID2 ;,1
151,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return retval ; <S2SV_ModEnd> } break ;",0
152,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
153,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ), & final ) ; rcu_read_unlock ( <S2SV_ModEnd> ) ; dst",1
154,<S2SV_ModStart> = 0.0 ; uint16 <S2SV_ModEnd> buffsize = 0,0
155,<S2SV_ModStart> ; if ( arg == NULL ) return EINVAL ; if (,0
156,<S2SV_ModStart> options. disable_forwarding ||! use_privsep,1
157,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
158,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
159,"<S2SV_ModStart> errout ; } <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart>. value = ""xxxx"" ; <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart> -> gr_ctx. length = 4 <S2SV_ModEnd> ; gr ->",1
160,<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> out ; } ext_size = sizeof ( EXT4_I ( inode -> i_data + ext_size ) -> i_data + ext_size ) ;,0
161,<S2SV_ModStart> = NULL ; if ( c -> session == NULL ) return - 1 ;,0
162,<S2SV_ModStart> ; int ret ; if ( current_chrooted ( ) ) return - EPERM,1
163,<S2SV_ModStart> ; if ( <S2SV_ModEnd> key_size < 0,0
164,<S2SV_ModStart> c -> nreslevels <= <S2SV_ModEnd> s -> nreslevels,0
165,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
166,<S2SV_ModStart> 1 ; } hdr = 0 ;,0
167,<S2SV_ModStart> -> peer. auth_capable = new -> peer. auth_capable ; new -> peer.,0
168,<S2SV_ModStart> return false ; if ( ndp_msg_type_info ( msg_type ) -> addrto_validate ) return ndp_msg_type_info ( msg_type ) ; else,0
169,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> label_set_label_label_name ( int lsm_label_labelfd <S2SV_ModEnd>, int lsm_labelfd <S2SV_ModEnd>, int lsm_labelfd <S2SV_ModStart> = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) return - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> = 0 ) return - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) return 0 <S2SV_ModEnd> ; if (",0
170,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
171,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
172,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> if ( cpi <S2SV_ModStart> + 1 ; } # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> common. bits_perframe == 2 ) { vp9_bandwidth = ( cpi -> frames_bandwidth * cpi -> twopass. gf_group = 0 ; } else { cpi -> twopass. gf_group = ( cpi -> twopass. gf_group_group. gf_group. gf_group. gf_group. gf_group_group. gf_group_group = ( cpi -> twopass. gf_group. gf_group. gf_group. bit_depth ) ; } else { for ( i = 0 ; i < cpi -> twopass. gf_group = 0 ; } else { cpi -> bits_perframe_bandwidth = ( cpi -> bits_bandwidth - 1 ; } else { if ( cpi -> bits_perframe_bandwidth = ( cpi -> bits_bandwidth - 1 ) / 100 ; } else { cpi -> frames_bandwidth = ( cpi ->,0
173,"<S2SV_ModStart> } num ++ ; if ( num > MaxAllocSize / ITEMSIZE ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> levels <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", num, ( int ) ( MaxAllocSize / ITEMSIZE ) ) ) )",1
174,"<S2SV_ModStart> header, struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache <S2SV_ModEnd> ) ; struct <S2SV_ModStart> ) ; struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache = <S2SV_ModStart> ; mb2_cache_entry <S2SV_ModEnd> ; struct mb2_cache_entry <S2SV_ModEnd> * ext4_mb_cache =",0
175,"<S2SV_ModStart> { gint64 offset <S2SV_ModEnd> ; char line <S2SV_ModStart> = offset ; return parse_cosine_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart> -> phdr, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart> wth -> frame_buffer, line",1
176,<S2SV_ModStart> = line_end ; <S2SV_ModEnd> error = add_push_report_pkt,1
177,<S2SV_ModStart> if ( left == 0 && extend ) return 0 ; if ( left,1
178,<S2SV_ModStart> < INDIRECT_BLOCKS ) { <S2SV_ModStart> ] ) ; } <S2SV_ModEnd> } else { <S2SV_ModStart> ] ) ; },0
179,"<S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
180,<S2SV_ModStart> - ENOMEM ; * ( ( buf + sizeof ( hdr ) - sizeof ( hdr ) - sizeof ( hdr ) + 1 ),0
181,"<S2SV_ModStart> m ; int hstartrow <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( buf = jas_alloc3 <S2SV_ModEnd> ( bufsize,",0
182,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
183,<S2SV_ModStart> image_info = MagickFalse ; image -> columns = 0 ;,0
184,<S2SV_ModStart> DQUOT_LIMITS_ENABLED ) ; if ( sbi -> s_mb_cache ) { ext2_xattr_destroy_cache ( sbi -> s_mb_cache ) ; sbi -> s_mb_cache = NULL ; } <S2SV_ModEnd> if (!,1
185,<S2SV_ModStart> -> device_data ; kfree ( data ) ;,0
186,"<S2SV_ModStart> ""setregid"" ) ; <S2SV_ModEnd> char * arg <S2SV_ModStart> 0 ] = ""/bin/sh"" <S2SV_ModEnd> ; arg [",1
187,<S2SV_ModStart> node ) { if ( node -> nd_item. ci_parent ) <S2SV_ModStart> ci_parent ) ; else return NULL ;,1
188,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { switch",0
189,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ;,0
190,<S2SV_ModStart> if ( q < p || q,1
191,<S2SV_ModStart> protostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> cryptostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> timingstats ) ; <S2SV_ModEnd> step_callback = &,1
192,<S2SV_ModStart> dir ) ; <S2SV_ModEnd> if (!,0
193,<S2SV_ModStart> prev ) ; n -> mounts += n -> pending_mounts ; n -> pending_mounts = 0 ;,1
194,"<S2SV_ModStart> ; savesegment ( fsindex <S2SV_ModEnd>, fsindex )",0
195,<S2SV_ModStart> dd ) ; <S2SV_ModEnd> } } <S2SV_null>,1
196,<S2SV_ModStart> 1 ) ; if ( <S2SV_ModEnd> ( ps_codec ->,0
197,<S2SV_ModStart> 1u << DB_VECTOR ) | ( 1u << AC_VECTOR,1
198,"<S2SV_ModStart> sfsname ) { <S2SV_ModEnd> char temp [ <S2SV_ModStart> 1 ] ; u_int stringlen ; stringlen = len ; if ( stringlen > NFSX_V3FHMAX ) stringlen = NFSX_V3FHMAX ; <S2SV_ModStart>, sfsname, stringlen <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ; temp [ stringlen <S2SV_ModEnd> ] = '\\0'",1
199,"<S2SV_ModStart> unsigned int flags, struct rt6_info * rt <S2SV_ModStart> ( & fhdr, rt",1
200,<S2SV_ModStart> ( res ) goto err_add_port <S2SV_ModEnd> ; res = <S2SV_ModStart> port ) ; err_add_port : hsr_del_node ( & hsr -> self_node_db ) ;,1
201,,0
202,<S2SV_ModStart> const vpx_buffer <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
203,<S2SV_ModStart> p ++ ) ; if ( ( void * ) p > head -> iov_base + head -> iov_len ) return 0,1
204,"<S2SV_ModStart> <S2SV_null> static inline int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> dst ) { return assign_eip_far ( ctxt, dst, ctxt -> mode == X86EMUL_MODE_PROT64 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",1
205,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
206,"<S2SV_ModStart> ; remaining = tvb_reported_length_remaining <S2SV_ModEnd> ( tvb,",1
207,"<S2SV_ModStart> * inode, f_dentry <S2SV_ModEnd> ) ; if",0
208,<S2SV_ModStart> goto out ; <S2SV_ModEnd> copied = skb,0
209,<S2SV_ModStart> ; fstr = safe_calloc <S2SV_ModEnd> ( strlen (,0
210,<S2SV_ModStart> ; if ( pmc_overflow ( val ) <S2SV_ModEnd> ) write_pmc (,1
211,"<S2SV_ModStart> ( * b + len, * avail - len <S2SV_ModEnd>, nl )",1
212,"<S2SV_ModStart> * obj_char * fname, int <S2SV_ModEnd> lineno, int <S2SV_ModStart> tok_len ) { Py_RETURN_FALSE ; <S2SV_ModStart> * obj_len = _PyObject_ASNONE <S2SV_ModEnd> ; if ( <S2SV_ModStart> == NULL ) { Py_DECREF ( c, Py_DECREF ) ; if (! args ) { Py_DECREF ( PyExc_Type_Type_TypeError, ""required <S2SV_blank> must <S2SV_blank> be <S2SV_blank> from <S2SV_blank> %s"", type_ignores ) ; return NULL ; } <S2SV_ModStart> * ) { Py_DECREF ( Py_DECREF ) ; type_comment = NULL ; if (! args ) goto fail ; Py_DECREF ( c, Py_DECREF ( Py_TYPE_DECREF ) ; if (! value ) goto failed ; Py_DECREF ( Py_DECREF ( Py_DECREF ) <S2SV_ModStart> * ) { Py_DECREF ( o, ""required <S2SV_blank> must <S2SV_blank> to <S2SV_blank> must <S2SV_blank> be <S2SV_blank> a <S2SV_blank> c"" ) ; Py_DECREF ( o, Py_type ) ; } if (! strlen ( res ) ) goto fail ; Py_DECREF ( buf ) ; Py_DECREF ( _PyObject_SetAttr",0
213,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
214,,0
215,"<S2SV_ModStart> == 0 ) mark_key_instantiated ( key, 0 <S2SV_ModEnd> ) ; up_write",1
216,<S2SV_ModStart> <= * len && plen > 0,1
217,<S2SV_ModStart> ; args. rmtvaluelen = valuelen ; args.,1
218,<S2SV_ModStart> ; if ( <S2SV_ModEnd> timeout == NULL <S2SV_ModStart> ; if ( compat_get_timespec <S2SV_ModEnd> ( & ktspec <S2SV_ModStart> > 0 && compat_put_timespec <S2SV_ModEnd> ( & ktspec,1
219,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
220,<S2SV_ModStart> ndev ) ; <S2SV_ModEnd> assert ( skb <S2SV_ModStart> q_num ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
221,<S2SV_ModStart> |= MSG_TRUNC ; <S2SV_ModEnd> lock_sock ( sk,1
222,"<S2SV_ModStart>, - 2 <S2SV_ModEnd> ) ; # if",0
223,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
224,<S2SV_ModStart> out_free ) ; } else {,0
225,<S2SV_ModStart> found = 0 <S2SV_ModEnd> ; const char <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( found,1
226,"<S2SV_ModStart> int validate_event ( struct pmu * pmu, <S2SV_ModStart> arm_pmu * armpmu <S2SV_ModEnd> ; struct hw_perf_event <S2SV_ModStart> -> pmu!= pmu ) return 0 ;",0
227,"<S2SV_ModStart> bool new_idmap_permitted ( file,",0
228,<S2SV_ModStart> j ++ ) { if ( a -> type == szMAPI_BINARY ) <S2SV_ModStart> ) ; } },1
229,"<S2SV_ModStart> } ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) ; if ( ret!= 0 ) { kfree ( ret ) ; return - EIO ; } ret = - EIO ; goto out <S2SV_ModEnd> ; } hdr",0
230,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> uint16_t len ; ND_TCHECK_16BITS ( tptr ) <S2SV_ModStart> 2 ) { ND_PRINT ( ( ( ndo, "" <S2SV_blank> len <S2SV_blank> too <S2SV_blank> short"" ) ) ; if ( len < 2 ) { ND_PRINT ( ( ( ndo, "" <S2SV_blank> short <S2SV_blank> too <S2SV_blank> short"" ) ) ; goto trunc ; } <S2SV_ModStart> obj2 ) ; ptr = len ; if ( len!= 0 ) { ND_PRINT ( ( ( ( ndo, "" <S2SV_blank> short <S2SV_blank> too <S2SV_blank> short <S2SV_blank> short"" ) ) ; goto trunc ; } <S2SV_ModStart> ) ; } if ( len < 16 ) { ND_PRINT ( ( ( ( ndo, ""\\n\\n\\n\\n\\r\\n\\n\\r\\n\\n"" ) ) ; return NULL ; } <S2SV_ModStart> 2 ) { ND_PRINT ( ( ndo, ( ndo, ( ndo,",0
231,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> return 0 ;,0
232,<S2SV_ModStart> ; if ( shader_rec_offset < args -> bin_cl_size ||,1
233,<S2SV_ModStart> endif # if HAVE_LZMA_H <S2SV_ModEnd> && HAVE_LIBLZMA if,1
234,<S2SV_ModStart> vma -> vm_file ) ; down_read ( & EXT4_I ( inode ) -> i_mmap_sem <S2SV_ModStart> ; out : up_read ( & EXT4_I ( inode ) -> i_mmap_sem ) ;,1
235,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
236,<S2SV_ModStart> arg ) { char ch = * arg ; switch ( ch <S2SV_ModEnd> ) { case,0
237,"<S2SV_ModStart>, cp, ep2 <S2SV_ModEnd> ) ; }",0
238,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static void,0
239,<S2SV_ModStart> if ( ( skb_mac_header <S2SV_ModEnd> ( skb ) <S2SV_ModStart> skb ) < skb -> head +,1
240,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
241,<S2SV_ModStart>. flags =!! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ;,0
242,<S2SV_ModStart> & RCV_SHUTDOWN ) return 0 ; <S2SV_ModEnd> return err ; <S2SV_ModStart> msg_namelen ) ; <S2SV_ModEnd> } skb_free_datagram (,1
243,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
244,<S2SV_ModStart> const buffers [ 3 <S2SV_ModEnd> ] = { <S2SV_ModStart> src -> v_stride <S2SV_ModEnd> } ; int,0
245,<S2SV_ModStart> ; if ( * p == NULL ) return NULL <S2SV_ModEnd> ; p =,0
246,"<S2SV_ModStart> out_free ; } else kvm_iommu_unmap_pages ( kvm, & old ) ;",0
247,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ru,1
248,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
249,"<S2SV_ModStart> * ni ; ND_TCHECK ( rp -> rip6_left ) ; if ( length_left < ( sizeof ( struct rip6_nets ) ) goto trunc ; ND_TCHECK ( rp -> rip6_left ) <S2SV_ModStart> ni ) ; if ( length_left < ( sizeof ( struct netinfo6 ) ) goto trunc ; ND_TCHECK ( rp -> rip6_nets ) <S2SV_ModStart> ( ndo, ""%s: <S2SV_blank> %u"", j ) <S2SV_ModEnd> ) ; switch <S2SV_ModStart> ni ) { ND_TCHECK ( rp -> rip6_nets ) ; }",0
250,<S2SV_ModStart> < 0 ) goto error ; <S2SV_ModEnd> goto set ;,1
251,<S2SV_ModStart> ; if ( cpi -> oxcf.,0
252,"<S2SV_ModStart> argc ++ ; retval = bprm_change_interp ( iname, bprm ) ; if ( retval < 0 ) goto _error <S2SV_ModEnd> ; interp_file =",1
253,<S2SV_ModStart> ; int iSrc <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; } } <S2SV_ModEnd> res -> ContribRow <S2SV_ModStart> u ]. Left = iLeft ; res -> ContribRow [ u ]. Right = iRight ; for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ].,1
254,<S2SV_ModStart> user ) ; <S2SV_ModEnd> return 0 ;,0
255,"<S2SV_ModStart> Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; return ; } if (! COM_CompareExtension ( filename, "".cfg"" ) ) { Com_Printf ( ""Com_WriteConfig_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".cfg\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n""",1
256,"<S2SV_ModStart> ( size, 3 <S2SV_ModEnd> ) { int",0
257,"<S2SV_ModStart> ( mobj, true <S2SV_ModEnd> ) ; }",0
258,<S2SV_ModStart> -> it_overrun += 1LL <S2SV_ModEnd> << i ;,1
259,"<S2SV_ModStart>, int n_async, bool <S2SV_ModEnd> is_async ) { <S2SV_ModStart> is_async ) ; <S2SV_ModEnd> if ( n <S2SV_ModStart> ; n = 1 <S2SV_ModEnd> async ) { <S2SV_ModStart> is_async ) ; n = CHILD ( n, 1 ) ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> == 0 ) <S2SV_ModStart>, c, n0 )",0
260,<S2SV_ModStart> == 0 ),0
261,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> MACROBLOCKD * const <S2SV_ModStart> cm -> fc = & td <S2SV_ModEnd> -> mbmi ; <S2SV_ModStart> mbd ; const MODE_INFO * const MODE_INFO * const mbmi_ext = xd -> mbmi_ext ; const mbmi_ext = xd -> mi [ 0 ] -> mi [ bsize ] -> mbmi. mbmi_ext ; const int bsize = MIN ( mbmi -> mbmi_ext, mbmi_ext, mbmi_ext, mbmi_ext ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( segfeature_active <S2SV_ModEnd> ( xd, <S2SV_ModStart> ) ) { vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( w, <S2SV_ModStart> ( w, td, <S2SV_ModStart>, mi_col, xd <S2SV_ModEnd> ) ; } else",0
262,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; saddr,1
263,"<S2SV_ModStart>, r -> qiov. size <S2SV_ModEnd> ) ; n <S2SV_ModStart> = r -> qiov. size <S2SV_ModEnd> / 512 ; <S2SV_ModStart>, r -> qiov. size <S2SV_ModEnd> ) ; }",1
264,<S2SV_ModStart> if ( cs >= <S2SV_ModEnd> CQSPI_MAX_CHIPSELECT ) {,1
265,"<S2SV_ModStart>, ndo, ""%s"",",0
266,<S2SV_ModStart> ) break ; if ( l > ll ) l = ll ;,1
267,<S2SV_ModStart> out ; } } if ( free < 0 ) { err = - ENOMEM ; goto out ;,1
268,<S2SV_ModStart> >= 0 && <S2SV_ModEnd> ND_TTEST ( *,0
269,<S2SV_ModStart> -> rq ) <S2SV_ModEnd> { if (,0
270,"<S2SV_ModStart> ret ; uint8_t * buffer ; uint8_t value ; buffer = kmalloc ( 1, GFP_KERNEL ) ; if (! buffer ) return - ENOMEM <S2SV_ModEnd> ; break ;",0
271,,0
272,"<S2SV_ModStart> ; } } s -> append_char ( s, 0 ) ; strncpy <S2SV_ModEnd> ( outbuffer,",1
273,<S2SV_ModStart> Lut ) ; Lut = NULL ;,0
274,<S2SV_ModStart> = 0 ; ( i + 3 ) <S2SV_ModEnd> < sec -> <S2SV_ModStart> = 0 ; ( i + 7 ) <S2SV_ModEnd> < sec ->,1
275,"<S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) {",0
276,<S2SV_ModStart> ; if ( ptr_len < <S2SV_ModEnd> ) return -,0
277,"<S2SV_ModStart> ONIG_INFINITE_DISTANCE ) { if ( p - str < reg -> dmax ) { * low = ( UChar * ) str ; if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; } else { <S2SV_ModStart> low ) ; }",0
278,<S2SV_ModStart> ( fq ) <S2SV_ModEnd> return 0 ;,0
279,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
280,"<S2SV_ModStart> 0 ) { vif_prod ( vif -> req_consume <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev ) ) { netbk_fatal_tx_err ( vif -> dev, vif -> dev_err <S2SV_ModEnd> ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> size ) ; netbk_fatal_tx_tx_err ( vif -> tx. sb * vif <S2SV_ModEnd> ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> size ) ) { netdev_err ( vif -> vif_fatal_err ( vif -> tx. sring, vif -> req_cons, vif -> req_cons, vif -> req_cons, vif -> req_cons, vif -> req_cons, vif -> req_cons, vif -> req_prod ) ; <S2SV_ModEnd> ( vif -> <S2SV_ModStart> ) ) { netb <S2SV_ModEnd> ( vif -> <S2SV_ModStart> 0 ) ; netbk_fatal_tx_tx_err ( vif <S2SV_ModEnd> ) ; }",0
281,,0
282,<S2SV_ModStart> xfrm_policy_walk * ) <S2SV_ModEnd> cb -> args <S2SV_ModStart> cb -> args <S2SV_ModEnd> ; struct net,1
283,<S2SV_ModStart> conn ) ; if ( <S2SV_ModStart> ( conn )!= 0 ) return,1
284,"<S2SV_ModStart>, u16 pending_idx, struct netbk_idx <S2SV_ModEnd> ) { struct <S2SV_ModStart> ) ) { netif_fatal_tx_idata_idx = x -> idx ; <S2SV_ModEnd> idx = x <S2SV_ModStart> -> idx ; <S2SV_ModEnd> idx = x <S2SV_ModStart> -> req_idx ; netbk_fatal_tx_idx = vif_tx_idx <S2SV_ModEnd> ( vif,",0
285,,1
286,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
287,<S2SV_ModStart> len < 0 <S2SV_ModEnd> ) { syslog,0
288,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
289,<S2SV_ModStart> ipc == NULL && client -> session == NULL,1
290,<S2SV_ModStart> ( args ) { <S2SV_ModEnd> if ( idx,0
291,"<S2SV_ModStart>, nameptr, lfi, fname, UDF_NAME_LEN <S2SV_ModEnd> ) ; if",1
292,"<S2SV_ModStart> ip_vs_timeout_user t ; memset ( & t, 0, sizeof ( t ) ) ;",1
293,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
294,<S2SV_ModStart> ; ssize_t result ; if ( WARN_ON_ONCE (! ib_safe_file_access ( filp ) ) ) return - EACCES,1
295,"<S2SV_ModStart>, * controller, * next = NULL <S2SV_ModStart> if (! caller_is_in_ancestor ( fpath, path1, & next <S2SV_ModEnd> ) ) { <S2SV_ModStart> if ( next <S2SV_ModEnd> ) { if <S2SV_ModStart> if (! next <S2SV_ModEnd> ) ) { <S2SV_ModStart> if (! next <S2SV_ModEnd> ) return",0
296,<S2SV_ModStart> ) ) { put_disk ( disk ) ;,1
297,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
298,<S2SV_ModStart> NULL ) { status = MagickFalse ; break <S2SV_ModEnd> ; } image,0
299,<S2SV_ModStart> 0 ) ; if ( avio_feof ( s -> pb ) ) { ret = AVERROR_INVALIDDATA ; goto end ; },1
300,<S2SV_ModStart> ; rinfo = kzalloc <S2SV_ModEnd> ( SZ_SG_INFO *,0
301,"<S2SV_ModStart> ; # endif install_keyword ( ""umask"", & umask_handler ) ;",1
302,"<S2SV_ModStart> ( ctx, 0,",0
303,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> kfree ( tmpbuf,1
304,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; }",1
305,<S2SV_ModStart> ( box = jp2_box_create0 ( ) ),0
306,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> size ) {",0
307,<S2SV_ModStart> ; if ( count > MAX_SKB_FRAGS ) { if ( count > MAX_SKB_FRAGS ) err = - EMSGSIZE ; goto err ; } copylen = vnet_hdr,0
308,<S2SV_ModStart> ( packet_len ) { struct ipv6_opt_opt_hdr * exthdr ; <S2SV_ModStart> offset ) { struct ipv6_opt_opt_header ( skb ) ; <S2SV_ModStart> offset ) ; } return - EINVAL <S2SV_ModEnd> ; } <S2SV_null>,0
309,"<S2SV_ModStart> write_bit_buffer ( struct vpx_wb_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
310,"<S2SV_ModStart> src, int <S2SV_ModEnd> ) { if",0
311,<S2SV_ModStart> ; if ( hdrlen < sizeof (,0
312,<S2SV_ModStart> } if ( <S2SV_ModEnd> djrcv_dev -> paired_dj_devices,1
313,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
314,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
315,"<S2SV_ModStart> asconf ) { sctp_addip_param_t * addip = ( sctp_id, sctp_addip_params ( param, asconf ) ; if ( err_code == SCTP_ERROR ) { sctp_addip_params ( param. param, err_id ) ; sctp_id = true ; sctp_addip_params ( param, err_id ) ; if ( param. param. param. type == SCTP_ADDRESS || param. param. type == SCTP_ERROR_IPV4_ADDRESS ) continue ; if ( err_code == SCTP_ERROR ) { if ( err_code!= SCTP_ERROR_ERROR_ERROR ) { sctp_ERROR_ERROR_ERROR_ERROR_ERROR_ERROR_ERROR_ERROR <S2SV_ModEnd> ) continue ; <S2SV_ModStart> ) continue ; }",0
316,"<S2SV_ModStart> 101, ( ""jas_realloc(%x, <S2SV_blank> %zu)\\n"" <S2SV_ModEnd>, ptr,",1
317,<S2SV_ModStart> exit ; } m -> msg_namelen = 0 ;,0
318,<S2SV_ModStart> CPU_FTR_TM_COMP ) && hv_enabled <S2SV_ModEnd> ; break ;,1
319,<S2SV_ModStart> case 0 : if (! dev ) return - EINVAL ;,0
320,"<S2SV_ModStart> key_name ), UTF16_HOST_ENDIAN, <S2SV_ModStart> data. key, HV_KVP_EXCHANGE_MAX_KEY_SIZE / 2",0
321,<S2SV_ModStart> -> log_file ; d -> log_file = eventfp ;,1
322,<S2SV_ModStart> return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
323,"<S2SV_ModStart> * buf ; size_t parg = ( void __user * ) memset ( & _IOC_SIZE ( mbuf, n ) ) ; if ( n ) { memset ( _IOC_SIZE, 0, sizeof ( _IOC_SIZE ( _IOC_SIZE ) ) ; } else { memset ( & _IOC_SIZE ( cmd ), n ) ; if ( n ) { memset ( & _IOC_SIZE ( mbuf, n, n ) ) ; } else { memset ( _IOC_SIZE ( mbuf, n, 0, n ) ) ; } else { memset ( _IOC_SIZE ( mbuf ) ; if ( _IOC_SIZE ( mbuf ) ) { memset ( parg, n, n ) ; if ( _IOC_SIZE ( mbuf ) ) { memset ( parg ) ; } else { memset ( parg, n, n, n, ( _IOC_SIZE ( n ) ) ; } else { memset ( _IOC_SIZE ( mbuf, n, n, n ) ) ; } else { memset ( _IOC_SIZE ( n )",0
324,<S2SV_ModStart> ( c -> server.,0
325,"<S2SV_ModStart> u16 size, const <S2SV_ModStart> data ) { void * buf ; int ret ; buf = kmemdup ( data, size, GFP_NOIO ) ; if (! buf ) return - ENOMEM ; ret = <S2SV_ModEnd> usb_control_msg ( dev <S2SV_ModStart>, 0, buf <S2SV_ModEnd>, size, <S2SV_ModStart> 500 ) ; kfree ( buf ) ; return ret ;",1
326,<S2SV_ModStart> -> device_data ; kfree ( data ) ;,0
327,"<S2SV_ModStart> ) { case GTK_RESPONSE_OK : { file = nautilus_file_get_metadata ( parameters -> file ) ; nautilus_file_metadata ( parameters -> file ) ; nautilus_file_get_metadata ( file, NAUTILUS_METADATA_KEY_DESKTOP_FILE_FILE_DESKTOP_FILE_FILE_TRUSTED, NULL, NULL, NULL, NULL <S2SV_ModEnd> ) ; }",0
328,<S2SV_ModStart> + 1 ; if (! port -> port ) { kfree ( port -> ref ) ; <S2SV_ModStart> - port ; },0
329,"<S2SV_ModStart> * server, struct smb_vol * server, <S2SV_ModStart> struct ses ) { if ( server -> password!= ses -> password ) break ; default : if ( strlen ( server -> password )!= ses -> password ) continue ;",0
330,"<S2SV_ModStart> vpx_codec_err_t vpx_codec_err_t ctx ; # if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> cfg. g_w && ( int ) cfg -> g_w!= VPX_IMG_FMT_HIGHBITDEPTH ) { if ( ctx -> cfg. g_w && ( int ) cfg -> g_w, ctx -> g_w, ctx -> g_w, ctx -> g_w, ctx ) || ( int ) cfg -> g_h!= ctx -> g_h ) { if ( ctx -> g_h || ( ctx -> g_h > ctx -> ctx -> initial_height ) || ( int ) cfg -> g_w > ctx -> ctx -> ctx. g_h || ( ctx -> ctx -> ctx -> initial_height ) || ( int ) cfg -> g_h > ctx -> ctx -> cpi -> initial_height ) || ( int ) ERROR ( cpi -> oxcf. g_w > cpi -> ctx ) || ( ctx -> c",0
331,<S2SV_ModStart> == 0 ) { <S2SV_ModStart> offset ) ; } },0
332,"<S2SV_ModStart> inode ) ; struct hugepage_subpool * spool = subpool_inode ( inode ) ; <S2SV_ModStart> ; if ( hugepage_subpool_get_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> 0 ) { hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg )",1
333,<S2SV_ModStart> key * keyring ; if ( new -> thread_keyring ) return 0,1
334,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( scanned,1
335,"<S2SV_ModStart> orig ) ; fptr_orig = io_get_open_fptr ( mrb, orig ) ; <S2SV_ModStart> mrb_io_alloc ( mrb <S2SV_ModEnd> ) ; DATA_TYPE",1
336,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
337,<S2SV_ModStart> cpi ) { memset <S2SV_ModEnd> ( cpi ->,0
338,"<S2SV_ModStart> return res ; res = utee_param_to_param ( utc, <S2SV_ModEnd> param, callee_params <S2SV_ModStart>, callee_params ) ; if ( res!= TEE_SUCCESS ) return res",1
339,"<S2SV_ModStart> int rc ; struct desc_struct old_desc, new_desc ; struct x86_emulate_ops * ops = ctxt -> ops -> ops ; int cpl = ctxt -> ops -> ops ; int cpl ( cpl ) ; if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) ops -> get_segment ( ctxt, & old_cs, & old_desc, NULL <S2SV_ModEnd>, VCPU_SREG_CS ) <S2SV_ModStart> cs ) ; rc = __load_segment_descriptor <S2SV_ModEnd> ( ctxt, <S2SV_ModStart> sel, VCPU_SREG_CS ) ; if ( rc!= X86EMUL_CONTINUE ) goto fail ; rc = assign_eip_far ( ctxt -> src. val, & new_desc ) ; if ( rc!= X86EMUL_CONTINUE ) goto fail ; rc = assign_eip_far ( ctxt -> src. val, new_desc. l ) ; if ( rc!= X86EMUL_CONTINUE ) goto fail ; memset ( ctxt -> mode!= X86EMUL_CONTINUE ) ; ops -> mode!= X86EMUL_",0
340,<S2SV_ModStart> -> band = av_calloc <S2SV_ModEnd> ( reslevel -> <S2SV_ModStart> -> prec = av_calloc <S2SV_ModEnd> ( reslevel ->,1
341,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
342,<S2SV_ModStart> * sizeof ( struct reloc_struct_t <S2SV_ModEnd> ) ) ;,1
343,<S2SV_ModStart> ; if ( si_code == SI_QUE ) return - EINVAL,0
344,,0
345,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * create_output_name <S2SV_ModStart> * create_output_name ( <S2SV_ModEnd> char * fname <S2SV_ModStart> char * fname ) { char * out, * fname <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { <S2SV_ModEnd> while ( * fname <S2SV_ModStart> ) ) { <S2SV_ModEnd> char * fname <S2SV_ModStart> ; } } } <S2SV_null> <S2SV_null>",0
346,"<S2SV_ModStart> classes = NULL ; zval * retval <S2SV_ModStart> ; } } retval = var_hash_var ( & var_hash ) ; <S2SV_ModStart>! php_unserialize_ex ( retval <S2SV_ModEnd>, retval ) <S2SV_ModStart> ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ; } retval = php_unserialize_ex ( retval ) ;",0
347,<S2SV_ModStart> goto __err ; tu -> qhead = tu -> qtail = tu -> qused = 0 ;,1
348,"<S2SV_ModStart> tmp_strsize ) { ISOM_DECREASE_SIZE ( ptr, 1 )",0
349,<S2SV_ModStart>. get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },0
350,"<S2SV_ModStart> == 0 ) if ( received_protocol ) { fprintf ( stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; }",0
351,<S2SV_ModStart> ; if ( si_code == SI_QUE ) return - EINVAL,0
352,"<S2SV_ModStart> -> off = strtoull <S2SV_ModEnd> ( p, <S2SV_ModStart> -> filesize = strtoull <S2SV_ModEnd> ( slash +",1
353,"<S2SV_ModStart> * cr ; size_t <S2SV_ModEnd> maxw, maxh <S2SV_ModStart> maxh = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> maxh = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> maxh = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> goto fails ; loopmaxw = img -> comps [ 0 ]. h = img -> comps [ 0 ]. w ; offx = img -> comps [ 0 ]. h = img -> comps [ 0 ]. w ; offx = img -> comps [ 0 ]. h = img -> comps [ 0 ]. w ; d2 = img -> comps [ 0 ]. h ; d2 = img -> comps [ 0 ]. h = img -> comps [ 0 ]. w ; d2 = img -> comps [ 0 ]. h ; d2 = img -> comps [ 1U ]. w = img -> comps [ 0 ]. w ; d2 = img -> comps [ 0",0
354,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { int <S2SV_ModStart> ; switch ( state <S2SV_ModEnd> ) { int <S2SV_ModStart> = 0 ; state -> fmode <S2SV_ModEnd> = 0 ; <S2SV_ModStart> ( state, state, fmode <S2SV_ModEnd> ) ; }",0
355,"<S2SV_ModStart> return SSH_ERR_INVALID_ARGUMENT ; ssh_dispatch_set ( ssh, SSH2_MSG_KEXINIT, NULL ) ;",1
356,"<S2SV_ModStart> { assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.one <S2SV_blank> + <S2SV_blank> 1 <S2SV_blank> == <S2SV_blank> tests.constants.two <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.foo <S2SV_blank> == <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
357,<S2SV_ModStart> read_info ) ; <S2SV_ModEnd> if ( EOFBlob,1
358,"<S2SV_ModStart> char lbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char ltest [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char ltest [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> ( ltest, ""%511[^\\n]"" <S2SV_ModEnd>, ltest ) <S2SV_ModStart> && ntest!= 511 <S2SV_ModEnd> && ntest!= <S2SV_ModStart> && ntest!= 511 <S2SV_ModEnd> ) ; if",0
359,<S2SV_ModStart> = 0 ; char * data ; int ret ; <S2SV_ModStart> 0 ; } return ret <S2SV_ModEnd> ; } <S2SV_null>,0
360,<S2SV_ModStart> 0 ; } if (! vdev -> buf ) return - EINVAL ;,0
361,"<S2SV_ModStart> jpcnt ) ; if ( jas_uchar\\n"" ) { return - 1 ; }",0
362,"<S2SV_ModStart>, e -> elems, e ->",1
363,<S2SV_ModStart> bpp <= 8 && c -> format!= CHUNKY,0
364,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
365,<S2SV_ModStart> q ) { mutex_lock ( & q -> timer_mutex ) ; <S2SV_ModStart> snd_seq_timer_close ( q ) ; mutex_unlock ( & q -> timer_mutex,1
366,"<S2SV_ModStart> int lfs2_blocks ( unsigned int i_blkbits ) { struct ip_buffer * bh ; bh_blocknr = gfs2_inode_blocknr ( gfs2_block ) ; if ( unlikely ( gfs2_trans_blocknr ( inode ) ) goto out ; bh_block = gfs2_blocks ( inode, & b_blocknr ) ; if ( unlikely ( b_blkbits ) ) goto out ; b_blkbits = gfs2_dinode -> i_blocknr = gfs2_dinode_blocknr = gfs2_block ( inode, & b_blkbits ) ; if ( unlikely ( b_blkfree ) ) goto out ; b_blkfree ; bh_map = b_blkfree ; b_map = b_map. b_blkfree ; b_map = bh_map. b_map = b_map. b_blkbits ; b_map = b_blkbits ; b_map = b_map = gfs2_block ( inode -> i_blkbits, & b_",0
367,<S2SV_ModStart> VIPS_FOREIGN_LOAD_GET_CLASS ( load ) ; if ( load -> error ) return ( NULL <S2SV_ModStart> -> error ) || <S2SV_ModEnd> vips_invalidate ( load,0
368,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
369,<S2SV_ModStart> ; if (! retval ) <S2SV_ModEnd> retval = context,1
370,<S2SV_ModStart> -> id ; kfree ( dev ) ;,0
371,<S2SV_ModStart> miux_tlv_length ) ; if (! miux_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> rw_tlv_length ) ; if (! rw_tlv ) { err = - ENOMEM ; goto error_tlv ; },0
372,<S2SV_ModStart> void ) { <S2SV_ModEnd> struct monitor * <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> return mon ;,1
373,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
374,<S2SV_ModStart> unsigned int channo ; cdef -> ents = 0,1
375,"<S2SV_ModStart> ( interface, ENC6 <S2SV_ModEnd> ) ; }",0
376,<S2SV_ModStart> ; if ( inet -> skb &&,0
377,<S2SV_ModStart> len ; } ND_TCHECK_32BITS <S2SV_ModEnd> ( p + <S2SV_ModStart> p + 2 <S2SV_ModEnd> ) ; ND_PRINT,1
378,<S2SV_ModStart> 0 ; } if ( unlikely ( IPCB ( skb ) -> optlen ) skb_dst_force ( skb ) skb ) ;,0
379,<S2SV_ModStart> private ) { struct skcipher_tfm * tfm = private ; crypto_free_skcipher ( tfm -> skcipher ) ; kfree ( tfm <S2SV_ModEnd> ) ; },1
380,<S2SV_ModStart> bprm ) { <S2SV_ModEnd> int retval ; <S2SV_ModStart> int retval ; bprm_fill_uid ( bprm ) ; <S2SV_ModEnd> retval = security_bprm_set_creds,1
381,<S2SV_ModStart> = nlogs ; if ( unlikely ( datalen > 0 ) ) { r = UIO_MAXIOV + 1 ; goto err ; },1
382,<S2SV_ModStart> ) ) { if ( dlen < 2 ) break ; <S2SV_ModStart> dlen -= 2 <S2SV_ModEnd> ; * pt,1
383,<S2SV_ModStart> { rq = tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; fn (,1
384,<S2SV_ModStart> ; if ( <S2SV_ModEnd> copied == NULL,0
385,<S2SV_ModStart> goto out ; <S2SV_ModEnd> msg -> msg_namelen,0
386,<S2SV_ModStart> skb_is_nonlinear ( skb ) ) return 0 ; if ( skb -> len < sizeof ( struct nlattr,1
387,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; return",0
388,"<S2SV_ModStart> bp, length <S2SV_ModEnd> ) ; break",0
389,<S2SV_ModStart> = 0 ; if ( tile_buffsize > 0xFFFFFFFFU - 3 ) return NULL ;,0
390,<S2SV_ModStart> ; unsigned facility ; umask_val = new_val ; break ; case,0
391,"<S2SV_ModStart> err ; } if ( dev -> bNum < 0 ) { dev_err ( & dev, ""%s: <S2SV_blank> %d\\n"", __func__, dev <S2SV_ModEnd> ) ; return",0
392,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> cl_nodes_lock ) ; o2nm_unlock_subsystem ( ) ; <S2SV_ModStart> ) ; } return ret <S2SV_ModEnd> ; } <S2SV_null>,0
393,"<S2SV_ModStart> ( fp, "" <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %127s\\n"" <S2SV_ModEnd>, & n",1
394,,0
395,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
396,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
397,<S2SV_ModStart> return - E_NOTHANDLED ; if ( ninst == 0 ) return - E_INVALID,1
398,<S2SV_ModStart> ; ND_TCHECK ( * lp <S2SV_ModEnd> ) ; if,0
399,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
400,"<S2SV_ModStart> return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> p + offset <S2SV_ModEnd>, tim.",0
401,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",1
402,<S2SV_ModStart> ( ) ; if (! tbuf ) { return NULL ; },1
403,"<S2SV_ModStart>, err ; unsigned int status = 0 ; <S2SV_ModStart> ( pid, ( unsigned int ) & status |=",0
404,"<S2SV_ModStart>, ""%r/proc/sys/net"", ""%r/proc/tty/tty"", default_mounts [ i ]. mount <S2SV_ModEnd>, NULL,",0
405,<S2SV_ModStart> int v2f_hash [ ISAKMP_N ] ; if (! md -> chain [ ISAKMP_NEXT_v2SV_null> ] -> chain [ ISAKMP_v2N ] -> chain [ ISAKMP_v2SV_null>,0
406,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
407,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
408,<S2SV_ModStart> stringset == ETH_SS_STATS || stringset == ETH_SS_PRIV_FLAGS,1
409,<S2SV_ModStart> return ( ( ( <S2SV_ModStart> ) / 8 ) * GetPSDPacketSize ( image ),1
410,<S2SV_ModStart> } ret = TEMP_FAILURE_RETRY (,0
411,<S2SV_ModStart> bMasterInterface0 ) ; if (! pcu -> ctrl_intf ) return - EINVAL ;,0
412,<S2SV_ModStart> const char * devname = kstrdup ( dev_name ( & <S2SV_ModEnd> dev -> dev <S2SV_ModStart> ) ; } kfree ( dev ) ; kfree ( dev ) ;,0
413,"<S2SV_ModStart> pirlvl ) { if ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 || pirlvl -> prcheightexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 ) { return - 1 ; } <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> ( pirlvl ->",0
414,<S2SV_ModStart> target_enc ) { return ONIGERR_NOT_SUPPORTED_ENCODING_COMBINATION <S2SV_ModEnd> ; } else,1
415,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> index2 ( Image <S2SV_ModStart> image -> colormapIndex, image <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( ( ssize_t ) image -> colormap + <S2SV_ModEnd> ( ssize_t ) <S2SV_ModStart> index ) ; if ( index < image -> colormapIndex ( ssize_t ) image -> colormap + ( ssize_t ) image -> colormap + ( ssize_t ) image -> colormap + ( ssize_t ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> index < image -> colormapIndex <S2SV_ModEnd> ( ssize_t ) <S2SV_ModStart> index ) ; if ( index > ( ssize_t ) index ) { <S2SV_ModEnd> ( ssize_t ) <S2SV_ModStart> index = ( image -> colormap + ( image -> colormap + ( ssize_t ) index <S2SV_ModEnd> ; if ( <S2SV_ModStart> index < image -> colormap + ( ssize_t ) index <S2SV_ModEnd> ; switch ( <S2SV_ModStart> 0x01 <S2SV_ModEnd> ( ssize_t ) <S2SV_ModStart> index = ( <S2SV_ModEnd> ( ssize_t ) <S2SV_ModStart> 0x80 >> bit <S2SV_ModEnd> ( * index, <S2SV_ModStart> index ) index, q ) ;",0
416,"<S2SV_ModStart> u_char * tptr, const u_int length <S2SV_ModStart> = FALSE ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""(invalid <S2SV_blank> length <S2SV_blank> %u)"", length ) ) ; return hexdump ; } <S2SV_ModStart> case AFNUM_INET : if ( length!= 1 + 1 ) { ND_PRINT ( ( ( ndo, ""(invalid <S2SV_blank> address <S2SV_blank> length <S2SV_blank> %u)"", length - 1 ) ) ; hexdump = TRUE ; break ; }",0
417,<S2SV_ModStart> ctxt -> mode!= X86EMUL_MODE_PROT64 <S2SV_ModEnd> ) && ( <S2SV_ModStart> msr_data ) ; <S2SV_ModEnd> if ( (,0
418,<S2SV_ModStart> dev ) ; len = <S2SV_ModEnd> s -> len,0
419,"<S2SV_ModStart> BIO * tmpout ; tmpout = cms_get_text_bio ( in, flags ) ; if (! tmpout ) { CMSerr ( CMS_F_CMS_CMS_CMS_CONTENT ) ; goto err ; } if ( i <= 0 ) { if (! BIO_read ( in ) ) { goto err ; } <S2SV_ModEnd> if (!",0
420,<S2SV_ModStart> = KRB5_PREAUTH_FAILED ; if ( retval == 0 ) rs. enc_tkt_reply -> flags |= TKT_FLG_PRE_AUTH ;,1
421,"<S2SV_ModStart> * probs, vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> int i, vpx_prob <S2SV_ModEnd> int i,",0
422,"<S2SV_ModStart> = ""/tmp"" ; if ( tmp_dir == NULL ) tmp_dir = NULL ;",0
423,<S2SV_ModStart> = 0 ; size_t pathlen = sizeof ( <S2SV_ModEnd> ) -> sun_path,0
424,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
425,<S2SV_ModStart>!= 0 ) return - EINVAL ; if (,0
426,"<S2SV_ModStart> ) { struct hugepage_subpool * spool = subpool_vma ( vma ) ; struct <S2SV_ModStart> page * page <S2SV_ModEnd> ; long chg <S2SV_ModStart> ) if ( hugepage_subpool_get_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> page ) { hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> unsigned long ) spool <S2SV_ModEnd> ) ; vma_commit_reservation",1
427,"<S2SV_ModStart> filegen_string ) ; if ( NULL == filegen ) { msyslog ( LOG_ERR, ""stats <S2SV_blank> %s <S2SV_blank> unrecognized"", filegen_file ) ; continue ; }",0
428,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; timer_set_state",1
429,"<S2SV_ModStart> fadst8 ( const tran_low_t * input, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> output ) { tran_high_t <S2SV_ModEnd> s = input <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x3 = input <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x3 = input <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x3 = input <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x3 = input <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x3 = input <S2SV_ModStart> 5 ] ; tran_high_t <S2SV_ModEnd> x3 = input <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 5 ] = ( tran_low_t ) <S2SV_ModStart> 5 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 5 ] = ( tran_low_t ) <S2SV_ModStart> 5 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran",0
430,<S2SV_ModStart> ; # endif unsigned long flags ;,0
431,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
432,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF <S2SV_ModStart> wc ) ; return,1
433,"<S2SV_ModStart> tot_len ) ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
434,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> AVINDEX_KEYFRAME ) ; },1
435,,0
436,"<S2SV_ModStart>, * controller, * next = NULL <S2SV_ModStart> if (! caller_is_in_ancestor ( fc -> pid, controller, & next <S2SV_ModEnd> ) ) { <S2SV_ModStart> if (! next <S2SV_ModEnd> ) return -",0
437,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flags & CL_UNPRIVILEGED <S2SV_ModStart> & CL_UNPRIVILEGED ) mnt -> mnt. mnt_flags & MNT_READONLY <S2SV_ModEnd> ; if (,0
438,<S2SV_ModStart> rds_loop_transport ; } <S2SV_ModEnd> } conn ->,1
439,<S2SV_ModStart> * rsize >= 112 <S2SV_ModEnd> && rdesc [,1
440,<S2SV_ModStart> if ( ( ( <S2SV_ModStart> ) < bodyLength ) || ( bodyLength < sizeof ( EAPOL_RSN_KEY ) ),1
441,<S2SV_ModStart> ( likely ( serio <S2SV_ModEnd> &&! filtered,1
442,"<S2SV_ModStart>! er ) { ND_TCHECK ( <S2SV_ModEnd> dp [ 0 <S2SV_ModStart> 0 ] ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> c <S2SV_blank> %04x"", EXTRACT_32BITS ( & dp [ 0 ] ) ) ) ; } <S2SV_ModEnd> return ; case",1
443,"<S2SV_ModStart> * newName, int newLen, <S2SV_ModStart> * udfName, <S2SV_ModEnd> uint8_t * <S2SV_ModStart> ( newLen ) newLen - CRC_LEN <S2SV_ModEnd> ) newLen = <S2SV_ModStart> ( newName, newLen - CRC_LEN <S2SV_ModEnd> ) newLen",0
444,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int segment_pred_int segment_id, <S2SV_ModEnd> int mi_col, <S2SV_ModStart> int segment_id, mi_col, mi_cols <S2SV_ModEnd> ) ; if",0
445,<S2SV_ModStart> ; # endif <S2SV_ModEnd> if (!,0
446,<S2SV_ModStart>!= EXT4_GET_BLOCK_SIZE ( ) <S2SV_ModEnd> ) ; },0
447,"<S2SV_ModStart> * s ; const unsigned char * p = sigbuf ; unsigned char * der = NULL ; int derlen = - 1 ; <S2SV_ModStart> s, & p <S2SV_ModEnd>, siglen ) <S2SV_ModStart> == NULL ) goto err ; derlen = i2d_DSA_SIG ( s, & der ) ; if ( derlen!= siglen || memcmp ( sigbuf, der, derlen ) ) <S2SV_ModStart> ; err : if ( derlen > 0 ) { OPENSSL_cleanse ( der, derlen ) ; OPENSSL_free ( der ) ; }",1
448,"<S2SV_ModStart> NULL ) ; if (! _gdImageGifCtx <S2SV_ModEnd> ( im, <S2SV_ModStart>, out ) ) { <S2SV_ModEnd> rv = gdDPExtractData <S2SV_ModStart> size ) ; } else { rv = NULL ; }",1
449,<S2SV_ModStart> ) ; } if ( bprm -> interp!= bprm -> filename ) kfree ( interp ) ;,0
450,"<S2SV_ModStart> ; size_t buf_size = 0 ; size_t data_size <S2SV_ModStart>, & buf_size, & data_size <S2SV_ModStart> OE_RAISE_ERRNO ( OE_EN ) ; if ( data_size > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> ) ; } if ( ret > ( ssize_t ) data_size ) { ret = - 1 ; OE_RAISE_ERR ( OE_INVAL ) ; goto out ; } if (",0
451,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
452,"<S2SV_ModStart> ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, ""Invalid <S2SV_blank> image <S2SV_blank> dimensions"" ) ; goto done ; }",1
453,<S2SV_ModStart> probs ) { memcpy <S2SV_ModEnd> ( cpi ->,0
454,"<S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
455,<S2SV_ModStart> PyPARRY ) ; return NULL ;,0
456,<S2SV_ModStart> destroy_list ) ; <S2SV_ModEnd> } } <S2SV_null>,1
457,"<S2SV_ModStart> * ctx, ThreadData * flags <S2SV_ModEnd> ) { <S2SV_ModStart> int i ; # if CONFIG_VP9_HIGHBITDEPTH if (! ctx -> flags & VPX_IMG_FMT_HIGHBITDEPTH ) return VPX_IMG_FMT_HIGHBITDEPTH <S2SV_ModEnd> ; } <S2SV_null>",0
458,<S2SV_ModStart> ) ; } fuse_conn_put ( & cc -> fc ) ;,1
459,<S2SV_ModStart> * status = 0 <S2SV_ModEnd> ; if (,0
460,"<S2SV_ModStart> SCSIDiskSIDiskState ) { SCSIDiskState ( r -> req. iov_base, r -> iov. iov_base ) ; <S2SV_ModEnd> uint8_t * r -> iov_base <S2SV_ModStart> ) ; } if (! r -> iov. iov_base ) { r -> buflen = & r -> iov. iov. iov_base <S2SV_ModEnd> ; break ;",0
461,<S2SV_ModStart> cur_pic. field_picture <S2SV_ModEnd> ) return 0,1
462,<S2SV_ModStart> off ) { struct rm -> op_sg [ sg ] ; int ret = 0 ; <S2SV_ModStart> ) ) ; goto out <S2SV_ModEnd> ; } int ret <S2SV_ModStart> 0 ) ; out : return ret <S2SV_ModEnd> ; } c_,0
463,<S2SV_ModStart> buf ) ) { return 0 ; } <S2SV_ModEnd> ext_block = (,1
464,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = key_permission,1
465,<S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; },0
466,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
467,"<S2SV_ModStart>, hmi_data, hmi_offset, <S2SV_ModStart> { hmi_data <S2SV_ModEnd>, hmi_size, <S2SV_ModStart> ; hmi_track_offset [ hmi_offset <S2SV_ModEnd> ] ; hmi_size <S2SV_ModStart> ; if ( hmi_offset > hmi_size ) { _WM_GLOBAL_ERROR ( ""\\n"", ""file <S2SV_blank> too <S2SV_blank> short"" ) ; goto _hmi_end ; } hmi_track_offset [ i ] = 0 ; hmi_offset [ i ] = 0 ; if ( hmi_track_offset [ i ] >= hmi_tmp ) { hmi_error ( hmi_data, ""file <S2SV_blank> too <S2SV_blank> short"", hmi_siz - hmi_offset ) ; goto _WM_GLOBAL_ERROR ( __FUNCTION__, ""file <S2SV_blank> too <S2SV_blank> short"", hmi_siz - hmi_offset ) ; } hmi_siz = hmi_offset ( hmi_siz - hmi_size - hmi_data <S2SV_ModEnd> ; hmi_offset <S2SV_ModStart> += hmi_siz ; hmi_offset [ i ] = hmi_tmp ; hmi_",0
468,<S2SV_ModStart> -> id ; haddr -> hci_channel = 0 ;,1
469,<S2SV_ModStart> -> i_iget5_offset ; fh16 [ 3 ] = 0 ;,1
470,"<S2SV_ModStart> ( kdc_active_realm, client. princ <S2SV_ModEnd>, request ->",1
471,<S2SV_ModStart> break ; } <S2SV_ModEnd> dst_reg -> smin_value <S2SV_ModStart> = S64_MAX ; <S2SV_ModEnd> if ( src_known,1
472,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> vp9_filter_pick_mode ( VP9_COMP <S2SV_ModStart> -> common ; int bit_depth = 0 ; if ( cm -> bit_depth == 0 ) return 0 ;,0
473,"<S2SV_ModStart> ), NULL <S2SV_ModEnd> ) ; if",0
474,<S2SV_ModStart> DestroyQuantumInfo ( quantum_info ) ; canvas_image = DestroyImage ( canvas_image,1
475,"<S2SV_ModStart> = getnum ( <S2SV_ModEnd> fmt, MAXALIGN",0
476,<S2SV_ModStart> void usage_exit ( void,1
477,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
478,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
479,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
480,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
481,<S2SV_ModStart> ; if ( * value == 0 ||,1
482,<S2SV_ModStart> ; if ( inode -> i_sb ) return AVER ; if (,0
483,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
484,<S2SV_ModStart> ND_TCHECK ( * tptr <S2SV_ModEnd> ) ; if,0
485,"<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> H"", <S2SV_ModStart> y3 ) ; sendClean ( outputbuffer ) ;",0
486,<S2SV_ModStart> } if ( vpx_reader <S2SV_ModEnd> ( r )!= <S2SV_ModStart> } else return false <S2SV_ModEnd> ; } if,0
487,<S2SV_ModStart> case IS_STRING : { zval dval ; dval = * * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_double ( & lval <S2SV_ModEnd> ) ; convert_to_double ( <S2SV_ModStart> i ] = Z_DVAL ( lval ) ; } <S2SV_ModEnd> break ; default <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval lval lval ; lval = * * * * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; lval <S2SV_ModStart> i ] = Z_LVAL ( lval ) ; } else { rect. x = <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( lval )!= IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; rect <S2SV_ModStart>. y = Z_LVAL ( lval ) ; } else { rect. x = <S2SV_ModStart> i ] = Z_TYPE_PP ( lval ) ; } else { rect,0
488,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
489,<S2SV_ModStart> SQL_DROP ) ; <S2SV_ModEnd> return 0 ;,1
490,"<S2SV_ModStart> ; r = __copy_from_user <S2SV_ModEnd> ( data,",1
491,"<S2SV_ModStart> ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 2000-2010 <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\nThis <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> source <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> conditions.\\n\\\n\\\nThere <S2SV_blank> is <S2SV_blank> warranty, <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\nparticular <S2SV_blank> purpose.\\n"" <S2SV_ModEnd> ) ; exit <S2SV_ModStart> ( ( ( ( unsigned char ) <S2SV_ModStart> && isdigit ( ( ( unsigned char ) <S2SV_ModStart> && isdigit ( ( ( unsigned char ) <S2SV_ModStart> && isdigit ( ( ( unsigned char )",0
492,<S2SV_ModStart> = 0 ; info -> port = NULL ;,1
493,<S2SV_ModStart> -> ctx. <S2SV_ModEnd> pmu = pmu,1
494,"<S2SV_ModStart>, iovec, struct iov_iter * len",0
495,<S2SV_ModStart> ext4_group_t flex_group ; unsigned <S2SV_ModStart> -> s_log_groups_per_flex ; if ( sbi -> s_log_groups_per_flex < 1 || sbi -> s_log_groups_per_flex > 31 ) { sbi -> s_log_groups_per_flex = 0 ; return 1 ; } <S2SV_ModStart> -> s_log_groups_per_flex ; <S2SV_ModEnd> flex_group_count = (,1
496,<S2SV_ModStart> ( unlikely ( chunk -> pdiscard ) ) return 0 ; if ( unlikely (,1
497,,0
498,"<S2SV_ModStart> { if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) return exit_client ( cptr, sptr, sptr, ""Malformed <S2SV_blank> AUTHENTICATE"" ) ; if ( <S2SV_ModStart> { if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) return exit_client ( cptr, sptr, sptr, ""Malformed <S2SV_blank> AUTHENTICATE"" ) ; if (",1
499,<S2SV_ModStart> <= w - ( int ),1
500,<S2SV_ModStart> callback_args -> forward_matches ; assert ( match_offset + match_length <= callback_args -> data_size ),1
501,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
502,"<S2SV_ModStart> { if ( length > SMKTREE_DECODE_MAX_RECURSION ) { av_log ( NULL, AV_LOG_ERROR, ""Maximum <S2SV_blank> tree <S2SV_blank> recursion <S2SV_blank> level <S2SV_blank> exceeded.\\n"" ) ; return AVERROR_INVALIDDATA ; } if (",1
503,<S2SV_ModStart> err ; } if ( m -> msg_name ),1
504,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lineno, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""lineno\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> type_ignores\\"" ) ; return 1 ; } else { int res <S2SV_ModEnd> ; res = <S2SV_ModStart> ) ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ( obj, & PyId_seq, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> \\""iter\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> type_ignores\\"" ) ; return 1 ; } else { int res <S2SV_ModEnd> ; res = <S2SV_ModStart> } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ( obj, & tmp, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL || tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""return 1 ; } if ( tmp == NULL ) { PyErr",0
505,"<S2SV_ModStart> ( buf = jas_alloc3 <S2SV_ModEnd> ( bufsize,",0
506,<S2SV_ModStart> FAILURE_RETRY ( ),0
507,"<S2SV_ModStart> ; log_file = fopen_safe <S2SV_ModEnd> ( file_name,",1
508,"<S2SV_ModStart> "" <S2SV_blank> xy <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> x"" ) ; assert_regexp_syntax_error ( ""\\\\x0"" ) ; assert_regexp_syntax_error ( ""\\\\x"" ) ; assert_regexp_syntax_error ( ""\\\\xxy"" ) ;",0
509,"<S2SV_ModStart> & HB_LOCK ) spin_lock_irqsave ( & hashbin -> hb_spinlock, flags ) ; spin_unlock_irqsave ( & hashbin -> hb_spinlock, flags ) ; spin_unlock_irqsave ( & hashbin -> hb_spinlock, flags ) ; if ( hashbin -> hb_spinlock_irqsave ( & hashbin -> hb_spinlock, flags ) spin_irqsave ( & hashbin -> hb_spinlock, flags ) ; if ( hashbin -> hb_spinlock_irqsave ( & hashbin -> hb_spinlock, flags ) spin_unlock_irqsave ( & HB_LOCK ) spin_unlock_irqsave ( & hashbin -> hb_spinlock, flags ) ; spin_unlock_irqsave ( & hashbin -> hb_spinlock, flags ) ; if ( hashbin -> hb_spinlock_irqsave ( & hashbin -> hb_spinlock, flags ) spin_unlock_spinlock_irqsave ( & hashbin -> hb_spinlock, flags ) ;",0
510,<S2SV_ModStart>. mnt_flags & MNT_USER_MASK <S2SV_ModEnd> ; mnt ->,0
511,<S2SV_ModStart> ; if ( skb -> msg_name &&,0
512,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ i,0
513,<S2SV_ModStart> ) ; return 0,0
514,"<S2SV_ModStart> ) ; uint16_t num_chunk = 0, sizeof ( CS64_rds64_chunk ) ; if ( CS64_chunk ) ds64_chunk. ds64_chunk!= sizeof ( CS64_chunk ) ) { ds64_chunk = ( CS64_chunk. ds64_chunk. ds64_chunk. ds64_chunk. ds64_chunk. ds64_chunk. dsamples = & ds64_chunk. ds64_chunk. ds64_chunk. ds64_chunk. ds64_chunk. ds64_chunk. ds64_chunk. ds64_bytes <S2SV_ModEnd> ) ; }",0
515,"<S2SV_ModStart> ( msg_name && msg -> msg_name <S2SV_ModEnd> -> msg_name <S2SV_ModStart> -> name, msg_name, <S2SV_ModStart> -> name, msg_name, sizeof ( msg_name ) <S2SV_ModEnd> ; if (",0
516,"<S2SV_ModStart> = 0 ; int b_blocks = 0 ; <S2SV_ModStart>, bh, b_start, bh_start <S2SV_ModEnd> ) ; int <S2SV_ModStart> ( bh ), b_start <S2SV_ModEnd> ) ; if",0
517,"<S2SV_ModStart> ; # endif # ifdef CONFIG_VP9_HIGHBITDEPTH if ( cfg -> codec_index ) { fprintf ( stderr, ""Error: <S2SV_blank> %s\\n"", cfg -> encoder -> codec_interface ) ; } else { fprintf ( stderr, ""Badly <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> %d)\\n"", cfg -> <S2SV_ModEnd> ) ; } <S2SV_ModStart> ; } } # endif",0
518,<S2SV_ModStart> return FALSE ; if (! rc ) return FALSE,0
519,<S2SV_ModStart> == 0 ) {,0
520,"<S2SV_ModStart> ; if ( is_link ( fname ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> invalid <S2SV_blank> file\\n"", fname ) ; exit ( 1 ) ; } if ( <S2SV_ModStart> 0 ) { fprintf ( stderr, ""Error: <S2SV_blank> %s\\n"", fname ) ; exit ( 1 ) ; } if ( <S2SV_ModStart> 0 ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> invalid <S2SV_blank> file\\n"", fname ) ; exit ( 1 ) ; } if (",0
521,"<S2SV_ModStart> - EOPNOTSUPP ; uint32_t auxsize ; uint32_t buf ; <S2SV_ModStart> len ) ; memset ( & info, 0, sizeof ( * data ) ) ; <S2SV_ModStart>, 0 ) <S2SV_ModEnd> ; if (",0
522,<S2SV_ModStart> b ) { } else if ( warn_script_unsaved && fv -> script_unsaved && AskScriptChanged ( ) == 2 ) { return false ;,1
523,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
524,<S2SV_ModStart> = timespec_to_ns ( & <S2SV_ModStart> = timespec_to_ns ( &,0
525,"<S2SV_ModStart> { if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
526,<S2SV_ModStart> ++ ) { if (! value ) { <S2SV_ModStart> ) break ; },0
527,"<S2SV_ModStart> uint32_t content ; size_t range [ 0 ] ; size_t content_length ; <S2SV_ModStart> ) ) { range = & r -> range [ 0 ] ; <S2SV_ModEnd> if ( nranges <S2SV_ModStart> ) ) { range = & r -> clt_boundary, sizeof ( clt_boundary ) ) ; <S2SV_ModEnd> if ( nranges <S2SV_ModStart> 1 ) ) { range = & r -> range [ 0 ] ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } else { <S2SV_ModStart> } else { range = & r -> range [ 0 ] ; <S2SV_ModEnd> if ( nranges <S2SV_ModStart> path ) ; <S2SV_ModEnd> if ( nranges <S2SV_ModStart> ) ) { range = & r -> range [ 0 ] ; <S2SV_ModEnd> if ( nr -> <S2SV_ModStart> ) ; } else { range = & r -> range [ 0 ] ; <S2SV_ModStart> } else { range = & r -> range [ 0 ] ; if ( clt -> ranges = & r -> range [ i ] & r -> range [ 0 ] + 1 ] ) { range = & r -> range [ i ] ; r -> range = & r -> range [ i ] ; r -> range = & r -> ranges [ 0 ] ; if ( clt -> range [ i ] ) { clt -> range = & r",0
528,"<S2SV_ModStart> ( interface, ENC28J60_EIR ) ; if ( status & ENC28J60_EIR_LINKIF <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_LINKIF <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ; if ( status & ENC28J600_EIR_LINKIF <S2SV_ModEnd> )!= 0 <S2SV_ModStart> { if ( interface!= 0 ) return - ENC28J60ReadReg ( interface, ENC624J60_EIR_LINKIF <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_LINKIF <S2SV_ModEnd> ) ; interface <S2SV_ModStart> } if ( status & ENC28J60_EIR_LINKIF <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_EIR_SIZE )!= 0 <S2SV_ModEnd> ) { <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIE <S2SV_ModEnd> ) ; }",0
529,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb )",0
530,<S2SV_ModStart> bpp <= 8 && c -> format!= CHUNKY,0
531,"<S2SV_ModStart> { if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
532,<S2SV_ModStart> tmp ) { goto softfail <S2SV_ModEnd> ; } case <S2SV_ModStart> ) ) { goto softfail <S2SV_ModEnd> ; } state <S2SV_ModStart> end ) ; softfail : state -> offset = 0 ;,1
533,"<S2SV_ModStart> struct fb_vblank vblank ; memset ( & vblank, 0, sizeof ( vblank ) )",1
534,<S2SV_ModStart> flags ) { spin_lock ( & ctx -> cancel_lock ) ; <S2SV_ModStart> } } else { __timerfd_remove_cancel <S2SV_ModEnd> ( ctx ) <S2SV_ModStart> ) ; } spin_unlock ( & ctx -> cancel_lock ) ;,1
535,"<S2SV_ModStart> ) ) ; if ( c16 -> Curves [ i ] == NULL ) { _cmsFree ( ContextID, c16 -> Curves ) ; return NULL ; }",0
536,,0
537,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
538,<S2SV_ModStart> ( buf + sizeof ( * buf ) <S2SV_ModEnd> ) ) { if,0
539,<S2SV_ModStart> TSRMLS_CC ) ; if ( new_len > INT_MAX ) { efree ( replaced ) ; RETURN_FALSE ; },1
540,<S2SV_ModStart> ; if ( id == NULL ) return EINVAL ; if (,0
541,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_line_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) ; <S2SV_ModStart> t1_buf_array, t1_line_array ) ; alloc_array ( t1_line, strlen ( t1_buf_array ) + 1, T1_BUF_SIZE",1
542,"<S2SV_ModStart> * mi_col, MACROBLOCKD * xd <S2SV_ModEnd>, int mi_row <S2SV_ModStart> int mi_col, MB_INFO_MODE_INFO * xd <S2SV_ModEnd>, BLOCK_SIZE <S2SV_ModStart> BLOCK_SIZE bsize, mi_row <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( xd, mi_cols <S2SV_ModEnd> ) ; }",0
543,"<S2SV_ModStart> name ) ; if (! strcmp ( key, ""url"" ) && value && looks_like_command_line_option ( value ) ) data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_URL, ""disallowed <S2SV_blank> submodule <S2SV_blank> url: <S2SV_blank> %s"", value ) ;",1
544,<S2SV_ModStart> int pixel_ptr = - 4 <S2SV_ModEnd> ; int block_ptr <S2SV_ModStart> -- ) { ADVANCE_BLOCK ( ) <S2SV_ModStart> row_inc ; } <S2SV_ModEnd> } break ; <S2SV_ModStart> -- ) { ADVANCE_BLOCK ( ) ; <S2SV_ModStart> row_inc ; } <S2SV_ModEnd> } break ; <S2SV_ModStart> ) return ; ADVANCE_BLOCK ( ) ; <S2SV_ModStart> row_inc ; } <S2SV_ModEnd> break ; default,1
545,<S2SV_ModStart> cnt ) { ssize_t <S2SV_ModEnd> n ; assert,1
546,<S2SV_ModStart> ; __be16 type ; if ( NAPI_GRO_CB ( skb ) -> encap_mark ) goto out ; NAPI_GRO_CB ( skb ) -> encap_mark = 1,1
547,<S2SV_ModStart> ; if ( numrows < 0 || numcols < 0 ) { return 0 ; } if (,1
548,<S2SV_ModStart> = tpm_kdfa ( <S2SV_ModEnd> session -> authHash,1
549,<S2SV_ModStart> key_ref ) ; if ( ret == 0 ) return ret ;,0
550,<S2SV_ModStart> u4_first_slice_in_pic = 1,0
551,"<S2SV_ModStart> BPF_ALU64 ) { coerce_reg_to_size ( dst_reg, 4 ) ; coerce_reg_to_size <S2SV_ModEnd> ( & src_reg <S2SV_ModStart> ( & src_reg, 4",0
552,"<S2SV_ModStart>, dentry ) ; <S2SV_ModEnd> if (!",0
553,<S2SV_ModStart> ; if ( info.,0
554,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ext4_has_inline_data ( inode,1
555,<S2SV_ModStart> -> filesize = UINT64_MAX <S2SV_ModEnd> ; s ->,1
556,"<S2SV_ModStart> & fl6, rcu_dereference (",0
557,"<S2SV_ModStart> char * in, size_t olen <S2SV_ModStart> += 4 ; if ( len == olen ) return len ; <S2SV_ModStart> '=' ) { if ( len == olen ) return len ; <S2SV_ModStart> '=' ) { if ( len == olen ) return len ;",1
558,<S2SV_ModStart> gc ) ; <S2SV_ModEnd> return 0 ;,1
559,"<S2SV_ModStart> i ; size_t bytes <S2SV_ModEnd>, bytes, <S2SV_ModStart> ++ ) { bytes <S2SV_ModEnd> for ( wdata <S2SV_ModStart>, wdata, bytes <S2SV_ModEnd> ) ; if",0
560,<S2SV_ModStart> & CP_RDESC_SWAPPED_MIN_MAX ) ) return rdesc ; if ( * rsize < 4,1
561,<S2SV_ModStart> vpx_codec_ctx_t <S2SV_ModEnd> * const VP9_CODEC_BUFFER_SIZE <S2SV_ModStart> * stats = & cpi -> svc_ctx <S2SV_ModEnd> -> mb_cache_stats <S2SV_ModStart> ; if ( cpi -> svc_ctx <S2SV_ModEnd> == 0 ) <S2SV_ModStart> NULL ) { cpi -> svc_log <S2SV_ModEnd> = 3 ; <S2SV_ModStart> ; for ( i = 0 ; i < sizeof ( svc_ctx -> svc_ctx -> number_temporal_layers ; ++ i ) <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } } <S2SV_null>,0
562,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> } if ( outSize <S2SV_null>,0
563,<S2SV_ModStart> ; } } <S2SV_ModEnd> } <S2SV_null>,0
564,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> lineno ) { <S2SV_ModStart> == '\\0' ) { const char * const char * end = * end - 1 ; <S2SV_ModStart> == '\\0' ) { if ( * end == '\\0' ) { * end = * end - 1 ; <S2SV_ModEnd> if ( * <S2SV_ModStart> == '\\0' ) { * end = strlen ( * end ) ; <S2SV_ModStart> == '\\0' ) { <S2SV_ModEnd> if ( * <S2SV_ModStart> == '\\0' ) { * end = strlen ( * end - 1 ) ; <S2SV_ModEnd> return 0 ; <S2SV_ModStart> == '\\0' ) { * end = strlen ( end <S2SV_ModEnd> ) ; <S2SV_ModStart> == '\\\\' ) return 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart> if ( is_reg_start <S2SV_ModEnd> ) ) { *,0
565,"<S2SV_ModStart> * m, size_t <S2SV_ModEnd> bufsize ) { <S2SV_ModStart> JAS_DBGLOG ( 100 <S2SV_ModEnd> ) ; }",0
566,,0
567,"<S2SV_ModStart>, pred_rtrn ) ||! expr -> action. args",1
568,<S2SV_ModStart> pcrypt_free ( struct aead_instance <S2SV_ModEnd> * inst ),0
569,<S2SV_ModStart> ; } } if ( height <S2SV_null>,0
570,"<S2SV_ModStart> ReadBlobMSBShort ( image ) ; if ( count!= sizeof ( iris_info ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
571,<S2SV_ModStart> icmp6_hop_limit ) { if ( icmp6_hop_limit < <S2SV_ModEnd> icmph -> icmph <S2SV_ModStart> icmph. hop_limit ) { <S2SV_ModStart> hop_limit ) ; },0
572,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
573,<S2SV_ModStart> * up ; int ulen ; <S2SV_ModStart> rp ) ; ulen = xfrm_replay_state_esn_len ( up ) ; if ( nla_len ( rp ) < ulen || <S2SV_ModEnd> xfrm_replay_state_esn_len ( replay_esn <S2SV_ModStart> replay_esn )!= ulen <S2SV_ModEnd> ) return -,1
574,"<S2SV_ModStart> int ret = proc_dointvec_minmax <S2SV_ModEnd> ( table,",1
575,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",1
576,<S2SV_ModStart> opj_calloc ( ( size_t ) ( <S2SV_ModStart> -> numlayers + 1U <S2SV_ModEnd> ) * l_step_l,0
577,"<S2SV_ModStart> name ), ""crypto-%s"" <S2SV_ModEnd>, name )",1
578,"<S2SV_ModStart> start = 0 ; int i <S2SV_ModStart> -> flags ; for ( i = 0 ; i < 3 ; i ++ ) <S2SV_ModStart> ( kvm, i <S2SV_ModEnd>, kvm ->",0
579,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> int mi_row, MACROBLOCKD * xd <S2SV_ModEnd>, BLOCK_SIZE bsize, <S2SV_ModStart> MODE_INFO * xd <S2SV_ModEnd> ) { VP9_COMMON <S2SV_ModStart> MODE_INFO * xd <S2SV_ModEnd>, mi_row, <S2SV_ModStart> mi_col ) ; vp9_set <S2SV_ModEnd> ( & cpi <S2SV_ModStart>, mi_row, mi_col, mi_col, bsize, xd <S2SV_ModEnd>, mi_col, <S2SV_ModStart> MODE_col ) ; <S2SV_ModEnd> } } <S2SV_null>",0
580,"<S2SV_ModStart> 1 ) ; if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf = opipe",1
581,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
582,<S2SV_ModStart> } else { #,0
583,<S2SV_ModStart> dir ) ; <S2SV_ModEnd> if (!,0
584,<S2SV_ModStart> blkg ) ) <S2SV_ModEnd> return PTR_ERR ( <S2SV_ModStart> blkg ) ; <S2SV_ModEnd> q -> root_blkg,1
585,<S2SV_ModStart> ; if ( bpp == 1 &&,0
586,"<S2SV_ModStart> NULL, NULL <S2SV_ModEnd> ) ; if",0
587,<S2SV_ModStart> -> dentry ; <S2SV_ModEnd> if ( (,0
588,"<S2SV_ModStart> struct ci, ci <S2SV_ModEnd> ) == 0",0
589,<S2SV_ModStart> opt_len ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> opt. <S2SV_ModStart> ) opt.,0
590,<S2SV_ModStart> -> rmtblkcnt ; args -> rmtblkcnt = 0 ; args -> rmtblkcnt = 0 ;,0
591,"<S2SV_ModStart> size_t TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( size_t ) || TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
592,"<S2SV_ModStart> ; if ( osStrchr <S2SV_ModEnd> ( line,",0
593,"<S2SV_ModStart> - ENOMEM ; memset ( & pkt -> buf, 0, sizeof ( struct daddr ) ) ; <S2SV_ModStart>, 0, buf <S2SV_ModEnd> ) ; if <S2SV_ModStart>, 0, sizeof ( * daddr ) <S2SV_ModEnd> ) ) return - <S2SV_ModStart> - ENOMEM ; memset ( buf <S2SV_ModEnd>, 0, <S2SV_ModStart>, 0, sizeof ( * buf <S2SV_ModEnd> ) ) ;",0
594,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } } if,0
595,<S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x <S2SV_ModStart> index ) ; q ++ ; p <S2SV_ModEnd> ++ ; } <S2SV_ModStart> % 4 ) > <S2SV_ModEnd> 1 ) { <S2SV_ModStart> % 4 ) > <S2SV_ModEnd> 2 ) {,0
596,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
597,"<S2SV_ModStart>, int tstype, bool opt_stats <S2SV_ModStart> ; int err ; BUILD_BUG_ON ( sizeof ( struct sock_exterr_skb ) > sizeof ( skb -> cb ) ) <S2SV_ModStart> ee_info = tstype ; serr -> opt_stats = opt_stats",1
598,"<S2SV_ModStart> 0 ) { if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""UnexpectedEndOfFile"" ) ;",0
599,"<S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
600,"<S2SV_ModStart>, CONST_STR_LEN ( ""%2f?"" ), CONST_STR_LEN ( ""/?"" ) ) ; run_burl_normalize (",0
601,<S2SV_ModStart> task ) { <S2SV_ModEnd> switch ( task,0
602,<S2SV_ModStart> <= w - ( int ),1
603,<S2SV_ModStart> page ) ; <S2SV_ModEnd> memset ( addr,1
604,<S2SV_ModStart> val ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,0
605,,0
606,<S2SV_ModStart> * port ; if (! port -> interrupt_in_urb ||! port -> port,0
607,<S2SV_ModStart> = dev ; if ( idx < 0 ) goto error ;,0
608,<S2SV_ModStart> dev ) ; if <S2SV_ModEnd> ( id ),0
609,"<S2SV_ModStart>, int ret <S2SV_ModEnd> ) { int <S2SV_ModStart> return ret ; <S2SV_ModEnd> error : if",0
610,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> p == q ) || ( <S2SV_ModEnd> size < 16 <S2SV_ModStart> size < 16 ) || ( <S2SV_ModEnd> size > 256 <S2SV_ModStart> size > 256 ),1
611,"<S2SV_ModStart>, kfree <S2SV_ModEnd> ) ; if",0
612,"<S2SV_ModStart> ) ) ; if ( pcount > MaxAllocSize ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEED ) ) ;",0
613,"<S2SV_ModStart> ( rd, ""none"" <S2SV_ModEnd> ) ; }",0
614,<S2SV_ModStart> ] == EOF || text [ 1 ] == 0 <S2SV_ModStart> ; if (! isxdigit ( <S2SV_ModStart> [ 2 ] ) <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if (! isxdigit ( <S2SV_ModStart> [ 3 ] ) <S2SV_ModEnd> ) return 0,1
615,,0
616,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> S2SV_null> <S2SV_null>",0
617,"<S2SV_ModStart> else if ( g_str_has_prefix <S2SV_ModEnd> ( arg,",0
618,"<S2SV_ModStart> fh_dentry ) ; error = fh_want_write ( fh ) ; if ( error ) <S2SV_ModEnd> goto out_errno ; <S2SV_ModStart> goto out_errno ; error = set_posix_acl ( inode, ACL_TYPE_ACCESS <S2SV_ModEnd>, argp ->",0
619,<S2SV_ModStart> * ue ; if <S2SV_ModEnd> ( tree_root == <S2SV_ModStart> == NULL ) return 0,1
620,"<S2SV_ModStart> char buf [ NAME_LEN <S2SV_ModEnd> ] ; int <S2SV_ModStart> ( filename, L_BUFSIZE <S2SV_ModEnd> ) ) { <S2SV_ModStart> ) ) ; } <S2SV_ModEnd> if (!",0
621,<S2SV_ModStart> case 0 : if ( tolen < 2 ) return - ENOMEM ; <S2SV_ModStart> case 0 : if ( tolen < 3 ) return - EINVAL ;,0
622,<S2SV_ModStart> ( dp [ 3 <S2SV_ModEnd> ] ) ;,0
623,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr ) ;,0
624,<S2SV_ModStart> ; if ( (,0
625,<S2SV_ModStart> slow ) ; cond_resched ( ) <S2SV_ModEnd> ; msg ->,0
626,"<S2SV_ModStart> len ) { <S2SV_ModEnd> if (! <S2SV_ModStart> } while ( len ) { u_int pdu_len = <S2SV_ModEnd> rpki_pdu_print ( pdu_print <S2SV_ModStart> ( ndo, pdu_len, 1 <S2SV_ModEnd>, 8 ) <S2SV_ModStart>, 8 ) ; len <S2SV_ModEnd> -= pdu_len ; <S2SV_ModStart> len ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
627,<S2SV_ModStart> ; if (! s -> header_len ) return - EINVAL ; if (,0
628,"<S2SV_ModStart> ( ndo, ""%s"", tptr <S2SV_ModEnd> ) ; ND_TCHECK",0
629,"<S2SV_ModStart>, args -> rmtvaluelen <S2SV_ModEnd> ) ; error <S2SV_ModStart> = args -> rmtvaluelen <S2SV_ModEnd> ; while (",1
630,<S2SV_ModStart> char buf [ 1024 <S2SV_ModEnd> ] ; if,0
631,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> S_IWUSR ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; unlink",0
632,<S2SV_ModStart> ) ; return false,0
633,"<S2SV_ModStart> -> x = MagickMin <S2SV_ModEnd> ( 1.0f,",0
634,"<S2SV_ModStart> PKT_LEN_SIZE ) { giterr_set_str ( GITERR_NET, ""Invalid <S2SV_blank> empty <S2SV_blank> packet"" ) ; return GIT_ERROR <S2SV_ModEnd> ; } if",1
635,<S2SV_ModStart> ; if ( vma -> vm_flags & VM_SHARED ) return VM_FAULT_SIGBUS ; if (,1
636,,0
637,<S2SV_ModStart> env -> insn_aux_data ; int i <S2SV_ModEnd> ) ; for,0
638,<S2SV_ModStart> ; ND_TCHECK ( * dp <S2SV_ModEnd> ) ; if,1
639,<S2SV_ModStart> trunc ; } ND_TCHECK_16BITS ( & bp [ i + 2 ] ) ;,1
640,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
641,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( occ0 <S2SV_ModStart> % rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""PredictorDecodeTile"", ""%s"", ""occ0%rowsize <S2SV_blank>!= <S2SV_blank> 0"" ) ; return 0 ; } <S2SV_ModEnd> assert ( sp <S2SV_ModStart> 0 ) { if (! <S2SV_ModStart>, rowsize ) ) return 0",1
642,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteCanonEntry ) ) ;",0
643,<S2SV_ModStart> ; if ( ctx -> terminated ||,1
644,<S2SV_ModStart> = NULL ; if ( sbi -> spool ) hugepage_put_subpool ( sbi -> spool ) ;,1
645,<S2SV_ModStart> ; if (! file -> fopen &&,0
646,<S2SV_ModStart> int alloc ; size_t len = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { size_t alloc = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { size_t alloc <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = sizeof ( * strlen ( alloc <S2SV_ModEnd> ) ; return,0
647,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
648,"<S2SV_ModStart> ( ) ; iov_iter_advance ( i, copied ) ; <S2SV_ModStart> again ; } <S2SV_ModEnd> pos += copied",1
649,<S2SV_ModStart> unlikely ( len + ring -> frameoffset,1
650,<S2SV_ModStart> = pdup_create_string ( ) ;,0
651,"<S2SV_ModStart> ( obj, <S2SV_ModEnd> name, data <S2SV_ModStart>, & base <S2SV_ModEnd>, path,",0
652,<S2SV_ModStart> -> name ) <S2SV_ModEnd> ; if (,0
653,<S2SV_ModStart> src < zsize + 4,0
654,<S2SV_ModStart> key ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
655,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> if (!,0
656,,0
657,<S2SV_ModStart> list ) ; spin_lock ( & master -> timer -> lock ) ; list_tail ( & master -> timer -> lock ) ;,0
658,<S2SV_ModStart> len ; } ND_TCHECK ( p [ 2 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT,1
659,"<S2SV_ModStart> -> arch, <S2SV_ModEnd> char * arch <S2SV_ModStart> ; char * arch = strdup ( info -> arch ) ; char * cpu = info -> cpu? strdup ( info -> cpu ) : NULL <S2SV_ModEnd> ; ut16 bits <S2SV_ModStart> ; if ( <S2SV_ModEnd> cpu && * <S2SV_ModStart> r ) { free ( cpu ) ; free ( cpu ) ;",0
660,"<S2SV_ModStart> sas_probe_devices ( struct asd_sas_port * port <S2SV_ModEnd> ) { struct <S2SV_ModStart>, * n <S2SV_ModEnd> ; list_for_each_entry (",1
661,<S2SV_ModStart> ; WORD32 ret <S2SV_ModEnd> ; ps_dec ->,0
662,"<S2SV_ModStart> if (! parse_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart> wth -> frame_buffer, line",0
663,<S2SV_ModStart> 0 ) ; if ( <S2SV_ModStart>. seq_num ) < 0 ) return - 1,1
664,<S2SV_ModStart> } if ( ( <S2SV_ModStart> <= UINT32_MAX <S2SV_ModEnd> ( size_t ),0
665,<S2SV_ModStart> : ret = - EOPNOTSUPP ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = <S2SV_ModStart> key -> sem ) ; ret = <S2SV_ModEnd> key -> type <S2SV_ModStart> type -> read <S2SV_ModEnd> ; if (,0
666,<S2SV_ModStart> ; if ( key == NULL ) return - EINVAL ; if (,0
667,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length <S2SV_ModStart> ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length <S2SV_ModStart> if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( length > GetBlobSize ( length ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile""",0
668,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,0
669,<S2SV_ModStart> page ) ; rm -> atomic. op_active = 0 ;,1
670,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> info\\n"", __func__, dev -> name, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",0
671,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = sizeof ( * sin ) ;",0
672,"<S2SV_ModStart> sizeof ( spath ) ) return - 1 ; if ( strstr ( name, '/'",0
673,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( s >,0
674,"<S2SV_ModStart> -> bcache, cache_id ( <S2SV_ModStart> ] -> data )",1
675,<S2SV_ModStart> objp ) ; * objp = NULL ;,1
676,"<S2SV_ModStart> } else { TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
677,<S2SV_ModStart> return 1 ; consume_skb ( skb ) ; return 0 <S2SV_ModEnd> ; } if,1
678,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> return 0 ;,0
679,<S2SV_ModStart> goto out ; err = ovl_copy_up ( dentry ) ; if (! err ) { <S2SV_ModStart> dentry ) ; <S2SV_ModEnd> mutex_lock ( & <S2SV_ModStart> ) ; } <S2SV_ModEnd> ovl_drop_write ( dentry,1
680,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
681,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> } if (! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if (",1
682,<S2SV_ModStart> int r ; struct vpx_bit_buffer <S2SV_ModEnd> ( r ),0
683,<S2SV_ModStart> 1 ) ; if ( strlen ( line ) == 0 ) return - 1 ;,1
684,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> return 0 ;,0
685,<S2SV_ModStart> ++ ) { if ( band -> prec ) { <S2SV_ModStart> ) ; } },1
686,,0
687,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ;,0
688,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ) { int <S2SV_ModStart> ) continue ; if ( cpi <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> == 0 ) return rc <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return rc <S2SV_ModEnd> ; } } else <S2SV_ModStart> ) return rc <S2SV_ModEnd> ; } } else <S2SV_ModStart> ) return rc <S2SV_ModEnd> ; } } <S2SV_null>,0
689,"<S2SV_ModStart> ( u32 size, u32 num ) num",0
690,<S2SV_ModStart> else if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1,0
691,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,1
692,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
693,,0
694,<S2SV_ModStart> NULL ; } if ( size < 0 ) return 0 ;,0
695,<S2SV_ModStart> (! eof && vars -> str. c!= vars -> ptr,1
696,<S2SV_ModStart> ; if ( protocol < 0 ||,0
697,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
698,"<S2SV_ModStart> -> _eip ; rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val ) ; if ( rc!= X86EMUL_CONTINUE ) break <S2SV_ModStart> case 4 : rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val )",1
699,<S2SV_ModStart> str ) ; if ( len < 0 ) { return - 1 ; },0
700,"<S2SV_ModStart> void * dbuf = NULL <S2SV_ModStart> bad ) ; void * dbuf = NULL <S2SV_ModStart> bad ) ; if (! ticket_len ) return - ENOMEM <S2SV_ModEnd> ; dbuf = <S2SV_ModStart>, end, ticket_buf <S2SV_ModEnd> ) ; if <S2SV_ModStart> bad ) ; dlen = ticket_buf = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> bad ) ; kfree ( ticket_buf ) ; kfree ( ticket_buf ) ;",0
701,"<S2SV_ModStart> / 2 ; if ( count > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", count, ( int ) ( MaxAllocSize / sizeof ( Pairs ) ) ) ) ) ;",1
702,<S2SV_ModStart> -> rq ) <S2SV_ModEnd> { if (,0
703,"<S2SV_ModStart> -> new_data ; if ( ( new -> session -> session_id_ctx -> session )!= NULL ) { SSL_CACHE_ERROR ; goto err ; } if ( i & SSL_CACHE_NO_CLIENT ) { if ( ( i & new_ctx -> session_ctx -> session )!= NULL ) { SSL_CACHE_NO_CLIENT <S2SV_ModEnd> ( new_session,",0
704,<S2SV_ModStart> -> data ; int r ;,0
705,,0
706,<S2SV_ModStart> NULL ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_FIELD_REF,0
707,<S2SV_ModStart> ; if (! dev -> cmd ) return ; if (,0
708,"<S2SV_ModStart>, annotation, NULL,",0
709,"<S2SV_ModStart> err = 0 ; if (! net_eq ( current -> nsproxy -> net_ns, sock_net ( sk ) ) ) return - EINVAL",1
710,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
711,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,1
712,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
713,"<S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
714,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> ) ) ) rc = <S2SV_ModStart> ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>,1
715,,1
716,<S2SV_ModStart> out ; } <S2SV_ModEnd> return res ;,0
717,<S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ) { <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> = psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; if ( <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> == psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header. <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header. indx <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> = psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> + psf ->,0
718,<S2SV_ModStart> out_mutex ; } ext4_inode_block_unlocked_dio ( inode ) ; inode_dio_wait ( inode ) ; down_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart> ioffset ) ; <S2SV_ModEnd> credits = ext4_writepage_trans_blocks <S2SV_ModStart> ) ; goto out_mmap <S2SV_ModEnd> ; } inode <S2SV_ModStart> handle ) ; out_mmap : up_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModEnd> ext4_inode_resume_unlocked_dio ( inode,0
719,"<S2SV_ModStart> uint32_t midi_data ; uint32_t * midi_data <S2SV_ModEnd> ; uint32_t * midi_tracks <S2SV_ModStart> * midi_data ; uint32_t * midi_data <S2SV_ModEnd> = * midi_data <S2SV_ModStart> * midi_size * midi_data ; track_size = malloc ( sizeof ( midi_data ) * midi_size ) * midi_data <S2SV_ModEnd> = * midi_data <S2SV_ModStart> << 24 ; track_size = track_size ( uint32_t ) malloc ( sizeof ( midi_data ) * midi_data <S2SV_ModEnd>, midi_size <S2SV_ModStart> ( midi_data_size ( tmp_val <S2SV_ModEnd> ) * midi_data <S2SV_ModStart> << 24 ) * midi_data <S2SV_ModEnd> = * midi_size <S2SV_ModStart> |= * track_size ; track_size ( midi_size <S2SV_ModEnd> ) ; track_size <S2SV_ModStart> ( midi_data, track_size <S2SV_ModEnd> ) ; track_size",0
720,"<S2SV_ModStart> = max_t ( int <S2SV_ModEnd>, val * <S2SV_ModStart> = max_t ( int <S2SV_ModEnd>, val *",1
721,<S2SV_ModStart> * bh ; unsigned int table_len ; <S2SV_ModStart> -> b_data ; if ( lvd -> b_len < sizeof ( * lvd ) goto out_bh ;,0
722,"<S2SV_ModStart> 0 ; } JAS_DBGLOG ( 1, ( ""BMP <S2SV_blank> header: <S2SV_blank> magic <S2SV_blank> 0x%ld; <S2SV_blank> siz <S2SV_blank> %ld; <S2SV_blank> res2 <S2SV_blank> %d\\n"", JAS_DBGLOG <S2SV_ModEnd>, info -> <S2SV_ModStart> info -> numplanes, JAS_CAST ( long <S2SV_ModStart> info -> numplanes, JAS_CAST ( long <S2SV_ModStart> info -> numplanes, JAS_CAST ( long ), JAS_DBGLOG ( ""BMP <S2SV_blank> information: <S2SV_blank> %ld; <S2SV_blank> numplanes <S2SV_blank> numcolors <S2SV_blank> %ld; <S2SV_blank> numcolors <S2SV_blank> %ld; <S2SV_blank> %ld; <S2SV_blank> numcolors <S2SV_blank> %ld; <S2SV_blank> "" ""mincolors <S2SV_blank> %ld; <S2SV_blank> s\\n"", JAS_CAST ( long <S2SV_ModStart> info -> numplanes, JAS_CAST ( long <S2SV_ModStart> info -> height ), JAS_CAST ( long <S2SV_ModStart> info -> width ), JAS_CAST ( long <S2SV_ModStart> info -> height ), JAS_CAST ( long <S2SV_ModStart> info -> depth ), JAS_CAST ( long <S2SV_ModStart> info -> depth ), JAS_CAST ( long <S2SV_ModStart> info -> depth ), JAS_CAST ( long <S2SV_ModStart> info -> depth ), J",0
723,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> dev ), func <S2SV_ModEnd>, line, <S2SV_ModStart> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"", func <S2SV_ModEnd>, line,",1
724,<S2SV_ModStart> NULL ; } if ( ps_dec -> u4_num > UINT32 ) {,0
725,"<S2SV_ModStart> g_start, 0",0
726,"<S2SV_ModStart> media_pad_desc pad ; memset ( & pad, 0, sizeof ( link ) ) ;",0
727,<S2SV_ModStart> || offset == TEMP_FAILURE_RETRY &&,0
728,"<S2SV_ModStart>, extent, height, <S2SV_ModStart> ""UnableToReadImageData"" ) ; <S2SV_ModEnd> height = sun_info <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; if ( sun_info. type == RT_ENCODED ) <S2SV_ModStart> sun_data ) ; <S2SV_ModEnd> p = sun_pixels",0
729,"<S2SV_ModStart>, krb5_principal client_principal, const char * tgt_realm <S2SV_ModStart> principal ), tgt_realm <S2SV_ModEnd> ) ; if",1
730,"<S2SV_ModStart> ReadBlobLSBLong ( image ) ; if ( bmp_info. number_colors > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
731,<S2SV_ModStart> ; newinet -> inet_opt <S2SV_ModEnd> = ireq ->,1
732,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
733,"<S2SV_ModStart>!= 0 ) { int tend_off = skb_transport_offset ( skb ) + tlen ; <S2SV_ModStart> ( csum, skb_checksum ( skb, tend_off, <S2SV_ModEnd> offset, 0 <S2SV_ModStart> ) ) ; }",1
734,"<S2SV_ModStart> gfn, page_size >> PAGE_SHIFT <S2SV_ModStart> pfn, page_size >> PAGE_SHIFT",0
735,<S2SV_ModStart> 0x00 } ; if ( cmd -> msg_len > sizeof ( b ) - 4 ) return - EINVAL ;,1
736,<S2SV_ModStart> void ) { struct perf_event_context * event = event -> <S2SV_ModEnd> ; struct perf_event_ctx,0
737,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ; return ( <S2SV_ModStart> ; return ( <S2SV_ModEnd> value & 0xffff <S2SV_ModStart> value & 0xffff <S2SV_ModEnd> ) ; } <S2SV_ModStart> unsigned int ) buffer <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> ] << 8 ; value |= <S2SV_ModEnd> ( unsigned int <S2SV_ModStart> unsigned short ) buffer [ 1 ] ; return <S2SV_ModStart> & 0xffff ) <S2SV_ModEnd> ; } <S2SV_null>,0
738,<S2SV_ModStart> int err = - NFSIZE <S2SV_ModEnd> ) { if,0
739,<S2SV_ModStart> # ifdef CONFIG_VP9_HIGHBITDEPTH flags ; vp9_clear_flags |= ( ctx -> flags ) <S2SV_ModEnd> ; # else if CONFIG_VP9_HIGHBITDEPTH if (,0
740,<S2SV_ModStart> ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> extra. type ) ; netdev_err ( vif -> stats. type ) ; netbk_fatal_tx_err ( vif,0
741,<S2SV_ModStart> ) ) ; hdr -> sadb_msg_reserved = 0 ;,1
742,"<S2SV_ModStart> ) return ; memset ( & r1, 0, sizeof ( r1 ) ) ;",1
743,"<S2SV_ModStart>, 1 ) ; luaL_argcheck ( L, pos > 0, 3, ""offset <S2SV_blank> must <S2SV_blank> be <S2SV_blank> 1 <S2SV_blank> or <S2SV_blank> greater"" ) ; pos -- <S2SV_ModEnd> ; int n <S2SV_ModStart> ( L, <S2SV_ModEnd> size <= ld <S2SV_ModStart> size <= ld && pos <= ld - size, <S2SV_ModEnd> 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> short""",0
744,"<S2SV_ModStart> length ) { ND_TCHECK2 ( * tptr, alen ) ;",0
745,<S2SV_ModStart> ; int n ; if (! body -> unit_size ) break ; n,0
746,<S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> common ) { # if CONFIG_HIGHBITDEPTH if ( cpi -> oxcf. resize_mode == 1 ) { vpx_free ( cpi -> frame_flags & YV12_FRAME ) ; } else { # if CONFIG_HIGHBITDEPTH if ( cpi -> oxcf. noise_mode == 1 ) { vp8_free ( cpi -> frame_flags ) ; } # endif <S2SV_ModEnd> return 0 ; } <S2SV_ModStart> = 1 ; } # endif vp8cpy <S2SV_ModEnd> ( cpi,0
747,<S2SV_ModStart> ) ; } char * src <S2SV_ModEnd> ; if (,0
748,<S2SV_ModStart> status = IMAP_FATAL ; return ; } if ( strlen ( idata -> buf ),0
749,<S2SV_ModStart> return res ; <S2SV_ModEnd> return 0 ;,1
750,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> ) ; } ext_size = sizeof ( struct ext4_extent_header ) + sizeof ( struct ext4_extent ) * le16_to_cpu ( neh -> b_entries ) ; memset ( bh -> b_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size ) ;",0
751,<S2SV_ModStart> } if (!,0
752,<S2SV_ModStart> ; cmap_len = get_tga_ushort <S2SV_ModEnd> ( & tga,0
753,<S2SV_ModStart> ; ssize_t ret ; if ( WARN_ON_ONCE (! ib_safe_file_access ( filp ) ) ) return - EACCES,1
754,<S2SV_ModStart> == CPUCLOCK_SCHED ) * tp = ns_to_timespec <S2SV_ModEnd> ( cpu. <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
755,<S2SV_ModStart> ; uint32 nstrips <S2SV_ModEnd> ; nstrips =,1
756,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = sizeof ( * sin ) ;",0
757,<S2SV_ModStart> ; r = <S2SV_ModEnd> lua_auth_provider_func (,0
758,<S2SV_ModStart> ; int error = 0 <S2SV_ModStart> &= PAGE_MASK ; if ( address < mmap_addr ) return - EPERM <S2SV_ModEnd> ; prev =,0
759,"<S2SV_ModStart> { umode_t mode <S2SV_ModEnd> ; error = <S2SV_ModStart> ; error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & mode <S2SV_ModStart>, & mode, & acl <S2SV_ModStart> if ( error <S2SV_ModEnd> ) return error <S2SV_ModStart> return error ; <S2SV_ModEnd> error = xfs_set_mode",1
760,"<S2SV_ModStart>, int optional, const char * rootfs <S2SV_ModStart> endif if ( safe_mount <S2SV_ModEnd> ( fsname, <S2SV_ModStart> MS_REMOUNT, data, rootfs <S2SV_ModStart>, data ) < 0",1
761,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
762,"<S2SV_ModStart> it_overrun = - 1LL <S2SV_ModEnd> ; ++ timr <S2SV_ModStart> info -> si_overrun = timer_overrun_to_int ( timr, info -> si_overrun ) <S2SV_ModEnd> ; } unlock_timer",1
763,,0
764,<S2SV_ModStart> struct static_key * once_key <S2SV_ModEnd> ) { static <S2SV_ModStart> ; __net_random_once_disable_jump ( once_key <S2SV_ModEnd> ) ; return,1
765,"<S2SV_ModStart> -> mmio_data ; if (! io_data -> ffs ) return - EINVAL ; memset ( & info -> kiocb, & io_data -> kiocb, ret <S2SV_ModEnd> ) ; if",0
766,<S2SV_ModStart> ; if ( IPCB ( skb ) -> flags & IPSKB_DOREDIRECT <S2SV_ModEnd> &&! opt,1
767,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
768,<S2SV_ModStart> struct trusted_key_payload * p ; struct trusted_key_payload * new_p ; struct trusted_key_payload * datalen ; int ret ; <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> if (!,0
769,,0
770,<S2SV_ModStart> skb_valid ) { <S2SV_ModEnd> return 0 ;,0
771,"<S2SV_ModStart> out_free ; } else kvm_iommu_unmap_pages ( kvm, & old ) ;",0
772,<S2SV_ModStart> if ( indev && indev -> ifa_list <S2SV_ModEnd> ) { ifa,1
773,"<S2SV_ModStart>, uoffset,",0
774,"<S2SV_ModStart> char * buff ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } buff",1
775,<S2SV_ModStart> } if ( in_bio!= NULL &&,0
776,<S2SV_ModStart> ( server. ds_enabled <S2SV_ModEnd> ) ; },0
777,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> int fd =,0
778,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> EOPNOTSUPP ; } if ( rlen > MAX_S2SV_null>,0
779,<S2SV_ModStart> conn ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
780,<S2SV_ModStart> book -> dim && i < n,1
781,<S2SV_ModStart> w ) ; <S2SV_ModEnd> } return ;,0
782,<S2SV_ModStart> == - EEXIST || ret == - EOVERFLOW,1
783,<S2SV_ModStart> fp ) ; spin_lock ( & unix_gc_lock ) ; <S2SV_ModStart> unix_sk ( s <S2SV_ModEnd> ) ; if <S2SV_ModStart> unix_tot_inflight ++ ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
784,<S2SV_ModStart> size_t chanmap_size = SF_MIN (,0
785,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( s ->,0
786,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
787,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
788,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
789,<S2SV_ModStart> ; x = safe_calloc ( <S2SV_ModEnd> x ) ;,0
790,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
791,"<S2SV_ModStart> sk_protocol ) ; struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( ) ; opt -> opt. <S2SV_ModStart>, opt -> opt.",0
792,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart>, dcont ) ; if (! ( flags & SMIME_TEXT_BINARY ) ) { flags = NULL ; goto err ; } if ( flags & SMIME_TEXT_TEXT_BINARY ) { if (! ( flags & SMIME_TEXT_BINARY ) goto err ; if ( flags & SMIME_TEXT_bio ( flags & SMIME_TEXT ) && cmsbio ( flags & SMIME_TEXT_TEXT_text, flags ) ; if (! dcont ) goto err ; if ( flags & SMIME_TEXT_TEXT_bio ( flags & SMIME_TEXT_TEXT ) { if (! dcont ) goto err ; if ( flags & SMIME_TEXT_TEXT_bio ( flags & SMIME_BINARY ) goto err ; if ( flags & SMIME_TEXT_TEXT_bio &&! ( flags & SMIME_TEXT_TEXT_bio ) && dcont ) { cmsbio = cmsbio ; goto err ; } if ( flags & SMIME_TEXT_",0
793,<S2SV_ModStart> break ; } <S2SV_ModEnd> if ( sk,0
794,<S2SV_ModStart> NULL ) ; <S2SV_ModEnd> if (!,0
795,,0
796,<S2SV_ModStart> ) { struct in_device * idev <S2SV_ModEnd> = ( ( <S2SV_ModStart> ) -> ifa_dev <S2SV_ModEnd> ; if (,0
797,<S2SV_ModStart>!= mm ) { smp_mb ( ) ; <S2SV_ModStart> goto out ; },0
798,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
799,<S2SV_ModStart> val ) { <S2SV_ModEnd> const char *,0
800,<S2SV_ModStart> task ) { <S2SV_ModEnd> del_timer ( & <S2SV_ModStart> -> timer ) <S2SV_ModEnd> ; complete (,1
801,,0
802,,0
803,<S2SV_ModStart> object + size < * object || * object + size,0
804,"<S2SV_ModStart> ( interface, KSZ8851_MAHTR0, ENC28J600_MAHTR0 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC28J60_MAHTR0 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC28J60_MAHTR0 <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, ENC28J60_MAHTR0 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC28J600_MAADR_MAHTR1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC28J600_MAH <S2SV_ModEnd> ) ) ;",0
805,<S2SV_ModStart> all_channels_lock ) ; put_net ( pch -> chan_net ) ; pch -> chan_net = NULL ;,1
806,"<S2SV_ModStart> - ENODATA ; struct btrfs_entry * di = NULL <S2SV_ModStart> - ENOMEM ; if (! di ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart> - ENOMEM ; ret = btrfs_lookup_xattr ( btrfs_lookuppath ( btrfs ), name, btrfs_lookup_xattr ) ; if (! di ) { di = NULL ; } else ret = btrfs_lookup_lookup_xattr ( di, di ) ; if (! di ) ret = - ENOMEM ; <S2SV_ModEnd> if (! <S2SV_ModStart> out ; } di = btrfs_lookup_xattr ( inode ) ; di = btrfs_lookup_item <S2SV_ModEnd> ( trans, <S2SV_ModStart> out ; } di = btrfs_lookup_xattr ) ; <S2SV_ModEnd> if (!",0
807,"<S2SV_ModStart> count ) ; char * txt = op -> txt ; int txtLen = strlen ( op -> txt ) ; int txtLeft = R_ASM_BUFSIZE - txtLen ; txt += txtLen ; <S2SV_ModStart> < count && txtLen <S2SV_ModEnd> + 10 < <S2SV_ModStart> ++ ) { snprintf ( txt, txtLeft <S2SV_ModEnd>, ""%d <S2SV_blank> "",",0
808,"<S2SV_ModStart> client -> proxy ) ; g_byte_array_free ( client -> auth_buffer, TRUE",1
809,<S2SV_ModStart> = { x -> plane [ plane ]. eobs,0
810,<S2SV_ModStart> ; if ( key_is_negative ( key <S2SV_ModEnd> ) ) return,1
811,"<S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, <S2SV_ModEnd> 15 ) ; <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0, 0 <S2SV_ModStart> NEED_IP ( 2, 0 <S2SV_ModStart> NEED_OP ( 2, 0 <S2SV_ModStart> NEED_IP ( 2, 0 <S2SV_ModStart> NEED_IP ( 6, 0 <S2SV_ModStart> NEED_IP ( 6, 0, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0 <S2SV_ModStart> NEED_OP ( t, 0, 0 <S2SV_ModStart> NEED_OP ( 2, 0, 0 <S2SV_ModStart> NEED_OP ( 2, 0 <S2SV_ModStart> NEED_IP ( 6, 0",0
812,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
813,<S2SV_ModStart> { vpn_packet_t outpkt ; if ( len > sizeof outpkt. data ) return,1
814,<S2SV_ModStart> & r ) <S2SV_ModEnd> ; if (,0
815,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,0
816,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
817,<S2SV_ModStart> rc ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
818,<S2SV_ModStart> ; if ( config -> log_path <S2SV_ModEnd> ) { log_err (,0
819,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
820,<S2SV_ModStart> INDENT_INCR ; } if ( tbl -> indent < 0 ) tbl -> indent = 0 ; <S2SV_ModStart> -= INDENT_INCR ; if ( offset < 0 ) offset = 0 ;,1
821,<S2SV_ModStart> + tail ; size_t ss = CDF_SHORT_SEC_SIZE ( h ) <S2SV_ModEnd> ( sst -> <S2SV_ModStart> b ) < ss <S2SV_ModEnd> * sst ->,0
822,"<S2SV_ModStart> : # line 113 <S2SV_ModEnd> ""hex_grammar.y"" { RE_AST <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 1337 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""hex_grammar.c""hex_grammar.c"" break ; <S2SV_ModStart> : # line 1345 <S2SV_ModEnd> ""hex_grammar.c"" { incr_ast_levels ( <S2SV_ModStart> : # line 1367 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 1328 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 1337 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 1345 <S2SV_ModEnd> ""hex_grammar.c"" { incr_ast_ast_levels ( <S2SV_ModStart> : # line 1345 <S2SV_ModEnd> ""hex_grammar.c""hex_",0
823,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( xd, <S2SV_ModStart> return 0 ; memcpy <S2SV_ModEnd> ( xd,",0
824,"<S2SV_ModStart> ; printf ( ""\\n"" <S2SV_ModEnd> ) ; }",0
825,<S2SV_ModStart> ; if ( key_is_positive ( key <S2SV_ModEnd> ) ) zap,1
826,"<S2SV_ModStart> ) -> filter ; memset ( & uf, 0, sizeof ( uf ) )",1
827,<S2SV_ModStart>!= NULL ) { <S2SV_ModStart> - 1 ; # if CONFIG_VP9_HIGHBITDEPTH ) { memcpy <S2SV_ModEnd> ( & pbi,0
828,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> ) ; } exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
829,<S2SV_ModStart> -> peer. auth_capable = new -> peer. auth_capable ; asoc -> peer.,1
830,<S2SV_ModStart> } if ( ( fibsize < ( sizeof ( struct user_aac_srb ) - sizeof ( struct user_sgentry ) ) ) || ( <S2SV_ModStart> ( struct aac_fibhdr ),1
831,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( cc0 <S2SV_ModStart> % rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""PredictorEncodeTile"", ""%s"", ""(cc0%rowsize)!=0"" ) ; return 0 ; } <S2SV_ModEnd> while ( cc",1
832,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
833,"<S2SV_ModStart> input_data, size_t input_forwards_size, size_t input_backwards_size <S2SV_ModEnd>, int flags <S2SV_ModStart> ( input_backwards_size, character_size <S2SV_ModEnd> ) { action <S2SV_ModStart> = RE_SCAN_SCAN_LIMIT ) { if ( input_forwards_size < RE_SCAN_SCAN_LIMIT ) { yr_re_forwards_size ( input + 1 ) ; break ; } <S2SV_ModStart> RE_FLAGS_BACKWAR : input_backwards_size <S2SV_ModEnd> ( input + <S2SV_ModStart> = ACTION_SCAN_SCAN_LIMIT ) { <S2SV_ModEnd> match = ACTION_SCAN_LIMIT <S2SV_ModEnd>, RE_SCAN_SCAN_LIMIT RE_SCAN_SCAN_LIMIT <S2SV_ModStart> RE_SCAN_LEN <S2SV_ModEnd> ) ; } <S2SV_ModStart> match = yr_backwards_size <S2SV_ModEnd> ( input, <S2SV_ModStart> match ) { <S2SV_ModStart> match = ACTION_backwards_size ; }",0
834,"<S2SV_ModStart> int sse = UINT_MAX <S2SV_ModEnd>, best_rd_sse = <S2SV_ModStart>, best_rd_sse = UINT_MAX <S2SV_ModEnd> ; best_rd_rd_sse = UINT_MAX <S2SV_ModStart>, best_rd_sse = UINT_MAX <S2SV_ModEnd> ; best_rd_mv_rd_rd_sse = UINT_MAX <S2SV_ModEnd> ; best_rd_rd_mv_rd_rd_sse = UINT_MAX <S2SV_ModEnd> ; best_rd_mv_rd_sse = <S2SV_ModStart> = best_rd_mv ; PREDICTION_MODE <S2SV_ModEnd> best_pred ; PREDICTION_MODE <S2SV_ModStart> = 0 ; PREDICTION_MODE <S2SV_ModEnd> if ( cpi <S2SV_ModStart> = PREDICTION_MODE <S2SV_ModEnd> this_mode ; PREDICTION_MODE <S2SV_ModEnd> best_stride <S2SV_ModStart>, best_rd, best_rd_uv_mode, best_rd_rd_mode <S2SV_ModEnd> ) ; PREDICTION_MODE <S2SV_ModEnd> this_mode",0
835,"<S2SV_ModStart> svm, MC_VECTOR ) ; set_exception_intercept ( svm, AC_VECTOR",1
836,<S2SV_ModStart> hdr ) ; <S2SV_ModEnd> if ( h,0
837,<S2SV_ModStart> ) ) { size_t <S2SV_ModEnd> len ; if <S2SV_ModStart>!= 0 ) { <S2SV_ModEnd> return 0 ; <S2SV_ModStart> NULL ; },0
838,<S2SV_ModStart> IVD_STREAM_WIDTH_NOT_SUPPORTED ; } if ( u2_pic_mb_flag & ps_dec -> u4_pic_mb_flag ) { return ERROR_IN_FRAME ; },0
839,<S2SV_ModStart> -> length ) ; if ( err ) return - EFAULT,1
840,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ; if ( ctx -> frame_parallel_decode ) { return VPX_CODEC_INCAPABLE <S2SV_ModEnd> ; } <S2SV_null>",0
841,<S2SV_ModStart> ; if ( hdr &&,0
842,<S2SV_ModStart> { uint16 bitspersample = 1,0
843,"<S2SV_ModStart> -> archive, if ( archive_string. a -> archive ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, a -> archive, a -> name ) ; return ( ARCHIVE_FATAL ) ; } archive_set_error ( & a -> archive, a -> archive, a -> archive, ARCHIVE_FATAL ) ; } if ( r -> archive ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, a -> archive, a -> archive, ""%s"", a -> archive, a -> archive, a -> name ) ; return ( ARCHIVE_FAIL ) ; } if ( r -> archive ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_FILE_FORMAT, ""%s"", a -> archive, a -> archive, a -> archive_name ) ; return ( ARCHIVE_FATAL ) ; } free ( r ) ;",0
844,"<S2SV_ModStart> ; if ( safe_mount ( hostpath, path, 0, MS_BIND, NULL, rootfs -> path? rootfs -> mount : <S2SV_ModEnd> NULL )!=",1
845,<S2SV_ModStart> ; int i_len ; if ( flags & EXT4_I ( inode -> i_sb ) ) return - EINVAL ; if ( i_len > bs ) goto out ; <S2SV_ModStart> ; if ( iinfo <S2SV_ModEnd> ) { goto out,0
846,<S2SV_ModStart> block_size ) { memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> block_size ] ; memcpy <S2SV_ModEnd> ( xd ->,0
847,<S2SV_ModStart> dst_size ) { GetByteContext gb <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( data_size < 2 <S2SV_ModEnd> ) return - <S2SV_ModStart> ; if ( <S2SV_ModEnd> dst. name,0
848,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_line_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) ; <S2SV_ModStart> t1_buf_array, t1_line_array ) ; alloc_array ( t1_line, strlen ( t1_buf_array ) + 1, T1_BUF_SIZE",1
849,<S2SV_ModStart> mq_ops ) ; mutex_lock ( & q -> lock ) ;,0
850,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
851,<S2SV_ModStart> -> name ) <S2SV_ModEnd> ; if (,0
852,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF <S2SV_ModStart> / 2 ; if (! <S2SV_ModStart>, cc ) ) return 0 <S2SV_ModStart> wc ) ; return 1 ;",1
853,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
854,<S2SV_ModStart> __be32 daddr ; struct ip_options_rcu * inet_opt ; <S2SV_ModStart> return 0 ; rcu_read_lock ( ) ; inet_opt = rcu_dereference ( inet -> inet_opt ) ; <S2SV_ModStart> ; if ( inet_opt && inet_opt -> opt. srr ) daddr = inet_opt -> opt. faddr ; rcu_read_unlock ( ) <S2SV_ModEnd> ; rt =,1
855,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
856,"<S2SV_ModStart> * mgr_hdl ; <S2SV_ModEnd> memset ( s_path <S2SV_ModStart> ( c_path ) <S2SV_ModEnd> ) ; switch <S2SV_ModStart> ( c_path, ""%s%s%d_C_XXXXXX"" <S2SV_ModEnd>, HSM_FM_SCK_PREFIX, <S2SV_ModStart> hdl -> instance <S2SV_ModEnd> ) ; if",1
857,<S2SV_ModStart> if ( cmd == NULL ||,0
858,"<S2SV_ModStart> = extent ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ;",0
859,<S2SV_ModStart> break ; } <S2SV_ModEnd> if ( sk,0
860,<S2SV_ModStart> ; if ( klen == NULL ) return - 1 ; if (,0
861,"<S2SV_ModStart> OP_ENDCATCH ) ; emit ( J, F, OP_ENDTRY ) ;",1
862,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_row_idx <S2SV_ModStart> return ; } LIBXSMM_ASSERT ( 0!= l_row && 0!= l_column ) ;",1
863,"<S2SV_ModStart>, len <S2SV_ModEnd> ) ; if",0
864,<S2SV_ModStart> uint8 result ; uint32 <S2SV_ModEnd> length ; STREAM,0
865,"<S2SV_ModStart> ; cleanup : if ( status == NULL ) status = ""UNKNOWN_REASON"" <S2SV_ModEnd> ; if (",1
866,<S2SV_ModStart> ; if ( <S2SV_ModEnd> (!,0
867,<S2SV_ModStart> ; if ( vsf_iovec ( vma_info <S2SV_ModEnd> ) ) {,0
868,<S2SV_ModStart> * rsize >= 112 <S2SV_ModEnd> && rdesc [,0
869,<S2SV_ModStart> & new_map ) <S2SV_ModEnd> ) goto out,0
870,<S2SV_ModStart> ) ) ; return 0 ;,0
871,"<S2SV_ModStart> sr ) { <S2SV_ModEnd> uint16_t StructSize ; <S2SV_ModStart> ) ; } smb_ofile_flush ( sr, <S2SV_ModEnd> sr -> fid_ofile <S2SV_ModStart> sr -> fid_ofile <S2SV_ModEnd> ) ; (",1
872,,0
873,<S2SV_ModStart> -> above_context ; memset <S2SV_ModEnd> ( xd ->,0
874,"<S2SV_ModStart> addrtype = TIPC_ADDR_ID ; memset ( & addr -> addr, 0, sizeof ( addr -> addr ) )",1
875,"<S2SV_ModStart> out_free ; } else kvm_iommu_unmap_pages ( kvm, & old ) ;",0
876,"<S2SV_ModStart> 6 ) ) { MATLAB_KO : clone_info = DestroyImageInfo ( clone_info ) ; <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart> ""ImproperImageHeader"" ) ; }",0
877,<S2SV_ModStart> } if ( tmp_line_len >= 1 && <S2SV_ModStart> ; if ( tmp_line_len >= 1 && <S2SV_ModStart> ; } } \\\n} <S2SV_ModEnd> if ( strncasecmp,1
878,"<S2SV_ModStart> * buf, size_t buf, <S2SV_ModStart> * length ; if ( length == 0 ) { PyErr_DECREF ( tp, ""required <S2SV_blank> overrun"" ) ; return NULL ; } <S2SV_ModStart>, buf, olen ) ; if (! strlen ( s ) ) { Py_DECREF ( s ) ; }",0
879,"<S2SV_ModStart> { if ( data_size > ( record_size - 4 ) - 4 ) { libcerror_error_set ( record_size, LIBCERROR_RUNTIME, LIBCERROR_OUT_OUT_OUT_OF_RUNTIME, LIBCERROR_DOMAIN_BOUNDS, LIBCERROR_RUNTIME_OUT_OUT_OUT_SIZE ) ; if ( ( data_size > ( record_size - data_size ) ) { libcerror_set ( file, LIBCERROR_DOMAIN_DOMAIN_OUT_OUT_OF_RUNTIME, LIBCERROR_DOMAIN_DOMAIN_RUNTIME, LIBCERROR_OUT_RUNTIME, LIBCERROR_BOUNDS ) ; if ( record_size - data_size - data_size ) { libcerror_set ( data_size - data_size - data_size ) ; }",0
880,"<S2SV_ModStart> WaveHeader WaveHeader ; int format_chunk = 0 ; <S2SV_ModStart>, format ; if ( format_chunk ++ ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",1
881,"<S2SV_ModStart> char * buff ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } buff",0
882,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr ) ;,0
883,<S2SV_ModStart> = timeri ; list_del_init ( & timeri -> active_list ) ;,0
884,<S2SV_ModStart> = 0 ; char * cp = 0 <S2SV_ModEnd> ; int <S2SV_ModStart> 0 ] = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ] = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) == 0 || pathlen == 0 <S2SV_ModEnd> ) { log,0
885,<S2SV_ModStart> else if ( anope_flags_compat && <S2SV_ModStart> else if ( anope_flags_compat && <S2SV_ModStart> else if ( anope_flags_compat &&,1
886,<S2SV_ModStart> sk ) ; kfree ( sk ) ;,0
887,"<S2SV_ModStart> ; if ( strcmp ( sub_demuxer -> name, ""srt"" ) && strcmp ( sub_demuxer -> name, ""ass"" ) ) goto error ; if (",1
888,<S2SV_ModStart> ; if ( NULL == NULL ) return EFAULT <S2SV_ModEnd> ; if (,0
889,<S2SV_ModStart> write_bit ( vpx_write_bit <S2SV_ModEnd> * wb ),0
890,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; } ret",1
891,<S2SV_ModStart> dptr ++ = ROSE_CALL_REQ_ADDR_LEN_VAL <S2SV_ModEnd> ; memcpy (,1
892,<S2SV_ModStart> copy_flags |= CL_SHARED_TO_SLAVE | CL_UNPRIVILEGED,0
893,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( ovbd ->,0
894,<S2SV_ModStart> return NULL ; <S2SV_ModEnd> if (!,0
895,<S2SV_ModStart> case RXE_MEM_FMR : if <S2SV_ModEnd> ( iova < <S2SV_ModStart> mem -> iova || length > <S2SV_ModEnd> mem -> iova <S2SV_ModStart> mem -> iova || length > mem -> length ) return <S2SV_ModEnd> ; break ;,0
896,"<S2SV_ModStart> = 0 ; ND_TCHECK2 ( * dp, sizeof ( * ni6 ) ) ; <S2SV_ModStart> ) + 4 ; ND_TCHECK ( cp [ 0 ] )",1
897,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",1
898,<S2SV_ModStart> sent = 0 <S2SV_ModEnd> ; smb_msg.,1
899,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> buffer_pipe_buf_get ( struct <S2SV_ModStart> -> private ; if ( ref -> ref > INT_MAX / 2 ) return false ; <S2SV_ModStart> ref ++ ; return true ;,1
900,<S2SV_ModStart> fs -> clusters + <S2SV_ModEnd> 1 ) get_fat,1
901,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
902,<S2SV_ModStart> sk_nulls_node ) ; sk_nulls_node_init ( & sk_nulls_node ) ;,0
903,<S2SV_ModStart> } } } <S2SV_ModEnd> } else {,0
904,<S2SV_ModStart> (! mm ||! mm -> env_end,1
905,"<S2SV_ModStart> inode * inode, int relocated ) { int flags = relocated? RR_RELOC_DE : 0 ; <S2SV_ModEnd> int result = <S2SV_ModStart>, inode, flags <S2SV_ModEnd> ) ; if <S2SV_ModStart>, inode, flags | RR_REGARD_XA <S2SV_ModEnd> ) ; }",1
906,<S2SV_ModStart> * inotify_new_group ( <S2SV_ModEnd> * inotify_data ) <S2SV_ModStart> -> inotify_new_group ( group <S2SV_ModEnd> ) ; atomic_return,0
907,<S2SV_ModStart> [ p ] && in -> linesize [ p ],1
908,"<S2SV_ModStart> ) ) ; if ( pcount > MaxAllocSize ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEED ) ) ;",0
909,<S2SV_ModStart> 4 ) ) { <S2SV_ModEnd> return NULL ;,0
910,"<S2SV_ModStart> -> insn_idx, false",0
911,"<S2SV_ModStart> = 0 ; uint32 <S2SV_ModEnd> strip, nstrips",1
912,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
913,<S2SV_ModStart> ) return ; <S2SV_ModEnd> } if (,0
914,<S2SV_ModStart> goto out ; <S2SV_ModEnd> err = -,1
915,"<S2SV_ModStart> number_colormaps, number_planes, number_planes_filled <S2SV_ModStart> -> rows ; number_planes_filled = ( number_planes % 2 == 0 )? number_planes : number_planes + 1 ;",0
916,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> UINT32 originalSize ; if (! context ) return FALSE ; <S2SV_ModStart> == 0 ) { if ( context -> priv -> PlaneBuffersLength < originalSize ) return FALSE ;,0
917,<S2SV_ModStart> policy ) { if (! inode_owner_or_capable ( inode ) ) return - EACCES ;,1
918,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> if ( state,0
919,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
920,<S2SV_ModStart> ; bool slow <S2SV_ModEnd> ; if (,0
921,"<S2SV_ModStart> ) ) ) { applog ( LOG_WARNING, ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> header <S2SV_blank> to <S2SV_blank> header_bin, <S2SV_blank> got <S2SV_blank> %s"", __func__, header ) ; pool_failed ( pool ) ; return false ; } <S2SV_ModEnd> cb1 = (",0
922,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size_t )",0
923,"<S2SV_ModStart> size ) { size_t res ; if ( check_mul_overflow ( num, size, & res ) ) abort ( ) ;",0
924,<S2SV_ModStart> ioc ) ; } <S2SV_ModStart> ioc ) ; },0
925,,0
926,<S2SV_ModStart> ; if ( <S2SV_ModEnd> dev -> desc.,0
927,"<S2SV_ModStart> ( event, <S2SV_ModEnd> struct perf_event_context *",0
928,<S2SV_ModStart> sacked_out ) ; if ( newly_acked_sacked <= 0 || WARN_ON_ONCE (! tp -> prior_cwnd ) ) return ;,1
929,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode ( VP9_COMMON <S2SV_ModStart> * cm, MACROBLOCKD * xd, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> * r, PREDICTION_MODE <S2SV_ModEnd> y_mode )",0
930,"<S2SV_ModStart> mask ) { struct skcipher_tfm * tfm ; struct crypto_skcipher * skcipher ; tfm = kzalloc ( sizeof ( * tfm ), GFP_KERNEL ) ; if (! tfm ) return ERR_PTR ( - ENOMEM ) ; kfree ( skcipher ) ;",0
931,<S2SV_ModStart> return - EINVAL ; if (,0
932,"<S2SV_ModStart> c -> tile_width <S2SV_ModEnd>, 16 ) <S2SV_ModStart>, 16 ) * 3",1
933,<S2SV_ModStart> ST2SV_null> <S2SV_null> static,0
934,,1
935,,0
936,"<S2SV_ModStart> p ) { return <S2SV_ModEnd> chdlc_print ( ndo <S2SV_ModStart>, p, h -> len <S2SV_ModEnd> ) ; }",1
937,<S2SV_ModStart> (! rc <S2SV_ModEnd> && tcon ),1
938,<S2SV_ModStart> -> len && SKB_EXT_ERR ( skb ) -> opt_stats <S2SV_ModEnd> ) put_cmsg (,1
939,"<S2SV_ModStart> ) ) ; raptor_sax2_set_option ( rdf_parser -> sax2, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES ) ;",0
940,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if (!,0
941,<S2SV_ModStart> { return SECURE_ELEMENT_ERROR_NPE ; } if ( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE ) { return SECURE_ELEMENT_ERROR_BUF_SIZE,1
942,,0
943,<S2SV_ModStart> = ucounts ; new_ns -> mounts = 0 ;,0
944,"<S2SV_ModStart> += dif ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
945,<S2SV_ModStart> ; if ( is_x00 ) return - EINVAL ; if (,0
946,<S2SV_ModStart> ; int n ; int limit_size = 2? r -> begin : actual_size ; unsigned int limit_size = ( r -> begin < actual_size? actual_size : actual_size? r -> end : actual_size ; unsigned int limit_read = ( r -> end < actual_size ) ; <S2SV_ModStart> int n_read = limit_end - limit_begin <S2SV_ModEnd> ; int limit_read,0
947,"<S2SV_ModStart> ) ; u32 count, <S2SV_ModStart> challenge_ack_count ) { u32 half = ( sysctl_tcp_challenge_ack_count, count ) ; if ( count > 0 ) { WRITE_ONCE ( challenge_count, count + 1 ) ; WRITE_ONCE ( challenge_count, count, 0 ) ; } else { WRITE_ONCE ( challenge_count, count ) ; } <S2SV_ModEnd> NET_STATS ( sock_net",0
948,"<S2SV_ModStart> struct llc_pktinfo info ; memset ( & info, 0, sizeof ( info ) )",1
949,"<S2SV_ModStart> p, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> p ) { vpx_read_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> = 0 ; vpx_wb_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> ; vpx_wb_literal <S2SV_ModEnd> ( w,",0
950,"<S2SV_ModStart> write_buffer ) { vpx_write_bit_buffer <S2SV_ModEnd> ( wb, <S2SV_ModStart> wbs ) ; vpx_wb_write_bit_buffer <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
951,"<S2SV_ModStart> * name, <S2SV_ModEnd> const char *",0
952,"<S2SV_ModStart> ret ) { size_t offset ; size_t offset = sizeof ( struct hid_descriptor ) ; n = min_desc -> bLength ; if ( hdesc -> bLength < sizeof ( struct hid_descriptor ) ) { dev_err ( ""hid <S2SV_blank> descriptor <S2SV_blank> descriptor <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return - EINVAL ; } <S2SV_ModStart> hdesc -> bNumDescriptors <S2SV_ModEnd> ; n =",0
953,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> len=%u"" <S2SV_ModEnd>, id,",0
954,"<S2SV_ModStart> group_dead ) ; group_dead_exit ( ) ; group_dead_dead ( ) ; group_dead = group_dead ( ) ; if ( group_dead ) exit_dead ( ) ; exit_dead ( ) ; exit_exit ( ) ; exit_dead ( ) ; group_dead_dead ( ) ; exit_exit ( ) ; exit_sem ( group_dead, group_dead ) ; exit_dead ( ) ; exit_entry ( group_dead ) ; exit_exit ( ) ; exit_exit ( ) ; exit_exit ( tsk, group_dead <S2SV_ModEnd> ) ; exit_dead",0
955,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void * <S2SV_ModStart> data ) { <S2SV_ModEnd> add_preferred_base_object ( name <S2SV_ModStart> |= OBJECT_ADDED ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
956,,0
957,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
958,<S2SV_ModStart> x1 ) { <S2SV_ModEnd> if ( x,0
959,<S2SV_ModStart> ( tag == ASN1_EOC <S2SV_ModEnd> ) { if <S2SV_ModStart> >= 0x7f ) goto check_length <S2SV_ModEnd> ; if ( <S2SV_ModStart> > data_length ) goto check_length <S2SV_ModEnd> ; dp =,0
960,<S2SV_ModStart> ) val ; <S2SV_ModEnd> memset ( ptr,1
961,<S2SV_ModStart> entry == NULL <S2SV_ModEnd> ) { struct,0
962,"<S2SV_ModStart> PHP_SHA512_CTX context ; if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error, ""broken <S2SV_blank> signature"" ) ; return FAILURE ; } <S2SV_ModStart> PHP_SHA256_CTX context ; } <S2SV_ModStart> PHP_CTX context ; if ( sig_len < sizeof ( digest ) { spprintf ( error, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_SHA256_CTX context ; if ( sig_len < sizeof ( digest ) { read_len = read_len ; } return FAILURE ; }",0
963,<S2SV_ModStart> ] <= max && value [ n ] - min < field -> maxusage &&,0
964,"<S2SV_ModStart> wb ) { vpx_write_bit_buffer <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
965,<S2SV_ModStart> if ( argReg > <S2SV_ModEnd> regsz ) { <S2SV_ModStart> regsz ) { return ;,1
966,"<S2SV_ModStart>, rq_context, false <S2SV_ModEnd> ) ; }",0
967,"<S2SV_ModStart> 0 ) ; args -> rmtvaluelen <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> -> i_mount, args -> rmtvaluelen <S2SV_ModEnd> ) ; if <S2SV_ModStart> -> valuelen = args -> rmtvaluelen <S2SV_ModEnd> ; return 0 <S2SV_ModStart> -> valuelen ) { args -> rmtvaluelen = args -> rmtvaluelen <S2SV_ModEnd> ; } return",0
968,<S2SV_ModStart> NULL ; } if ( size < 0 ) return 0 ;,0
969,<S2SV_ModStart> sql ) { const char * pd_str ; int ret <S2SV_ModEnd> ; MODE_SYSQL_PRINT ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> } if (,0
970,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) &&",0
971,"<S2SV_ModStart> ) ) ; if ( LTXTQUERY_TOO_BIG ( state. num, state. sumlen ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""ltxtquery <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large"" ) ) ) ;",1
972,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return 0 ;,0
973,<S2SV_ModStart> ; if (! EXT4_SB ( inode -> i_sb ) -> s_journal <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd>! handle ),1
974,<S2SV_ModStart> ( str ) <S2SV_ModEnd> else if (,0
975,"<S2SV_ModStart> ( f, ""PG%c%c%31[ <S2SV_blank> \\n"" <S2SV_ModEnd>, temp,",0
976,<S2SV_ModStart> ( size + 1 <S2SV_ModEnd> ) ; ASSERT ( <S2SV_ModStart> ) buf [ size + 1 <S2SV_ModEnd> ) ; },0
977,<S2SV_ModStart> -> map ) <S2SV_ModEnd> { if (,0
978,"<S2SV_ModStart> str ) { strncpy <S2SV_ModEnd> ( line, <S2SV_ModStart> str ) ; } <S2SV_ModEnd> } else {",0
979,"<S2SV_ModStart> char * to = strlen ( sufx ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> NULL ) { to = justname ( <S2SV_ModEnd> g. inf, <S2SV_ModStart> NULL ) ; } if ( strlen ( sufx )!= 0 ) { strlen ( sufx ) ; else strlen ( sufx ) ; } else if ( <S2SV_ModEnd> ( sufx ) <S2SV_ModStart> = sufx ) strlen ( sufx ) <S2SV_ModEnd> g. inf, <S2SV_ModStart> g. inf, tolen ( sufx ) strlen ( sufx ) ) ; else strlen ( sufx ) ; <S2SV_ModEnd> g. outf",0
980,,1
981,"<S2SV_ModStart> void ) { status = MagickFalse ; <S2SV_ModStart> i ; } status = SetImageExtent ( image, image -> columns, MagickFalse ) ; if ( status == MagickFalse ) { <S2SV_ModStart> ( status ; return MagickFalse ; } status = MagickFalse ; status = MagickFalse ; <S2SV_ModStart> ) ; } status = fclose ( <S2SV_ModEnd> input ) ;",0
982,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
983,<S2SV_ModStart> bdev ) ; <S2SV_ModEnd> null> <S2SV_null>,0
984,"<S2SV_ModStart> passwd * pwd, const char * prefix <S2SV_ModStart> = NULL ; <S2SV_ModEnd> pw_init ( ) <S2SV_ModStart> & tmpname, ""/etc"", prefix <S2SV_ModEnd> ) ) ==",1
985,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
986,,0
987,<S2SV_ModStart> TRUE ; } jid * barejid = jid_create ( ) ; Jid_jid ( jid -> barejid ) ; if ( jid -> barejid ) { <S2SV_ModStart> jid ] ; },0
988,<S2SV_ModStart> 0 ) { int class = <S2SV_ModEnd> getClientTypeByName ( v <S2SV_ModStart> j ] ) ; if ( class <S2SV_ModStart> == - 1 || class == CLIENT_TYPE_MASTER,1
989,"<S2SV_ModStart> * name, <S2SV_ModEnd> const char *",0
990,"<S2SV_ModStart> SECURE_NO_FILE ) ; # ifdef CONFIG_FAILURE_NO_DIR < 0 ) { log_debug ( LOG_INFO, ""S2SV_null"" ) ; return NULL ; } <S2SV_ModStart> 1 ) ; if ( log_file_options ) { log_log ( LOG_INFO, ""DUMP_INFO <S2SV_blank> DEFAULT"" ) ; return 0 ; }",0
991,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; BT_DBG (,1
992,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
993,<S2SV_ModStart> ; if (! key -> flags ) return - EINVAL ; if (,0
994,,0
995,,0
996,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_printroute ( netdissect_options <S2SV_ModStart> ) ; return ( 0 ) <S2SV_ModStart> ) ; } ND_TCHECK ( cp [ 2 ] ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( cp [ len ] ) ; <S2SV_ModStart> ) ; return ( 0 ) ; trunc : return ( - 1 ) ;,0
997,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",0
998,"<S2SV_ModStart>, 1 ) <S2SV_ModEnd> ; if (",0
999,<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8,0
1000,<S2SV_ModStart> if ( chunk_num >= <S2SV_ModEnd> chm -> num_chunks,1
1001,"<S2SV_ModStart>! validate_event ( event -> pmu, <S2SV_ModStart>! validate_event ( event -> pmu, <S2SV_ModStart>! validate_event ( event -> pmu,",1
1002,<S2SV_ModStart> == 0 ) { <S2SV_ModStart> return 0 ; } else {,0
1003,<S2SV_ModStart> studio_profile ) { <S2SV_ModEnd> if (!,1
1004,<S2SV_ModStart> nsops < 1 || nsops > SEMOPM,1
1005,<S2SV_ModStart> ( i < 0,0
1006,<S2SV_ModStart> < INDIRECT_BLOCKS ) { <S2SV_ModStart> ] ) ; },1
1007,"<S2SV_ModStart> ) { } if ( i -> numf!= i ) { assert ( i -> width ) ; i -> parent -> width = i -> height ; if ( i == '\\n"" ) { assert ( i -> width ) ; } else if (! ( i -> parent -> height ) { assert ( i -> width ) ; } <S2SV_ModEnd> if (!",0
1008,<S2SV_ModStart> if ( q < p || q,0
1009,<S2SV_ModStart> ++ ) { <S2SV_ModEnd> if ( bytes_matched,0
1010,"<S2SV_ModStart> len ) { assert ( len > 10 ) ; <S2SV_ModStart> case LEX_EOF : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""FLO"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_ID : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""ID"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_INT : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""FLO"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_TEMPLATE : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""STRING"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_FLOAT : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> LITERAL"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_TEMPLATE : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> LITERAL"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_TEMPLATE : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""FLO"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_TEMPLATE_LITERAL : strcpy <S2SV_ModEnd> ( strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> TEMPLATE <S2SV_blank> TEMPLATE <S2SV_blank>",0
1011,"<S2SV_ModStart> mnt_instance ) ; if ( unlikely (! list_empty ( & mnt -> mnt_mounts ) ) ) { struct mount * p, * tmp ; list_for_each_entry_safe ( p, tmp, & mnt -> mnt_mounts, mnt_child ) { umount_mnt ( p ) ; } }",1
1012,"<S2SV_ModStart> write_bit_buffer ( vpx_write_bit <S2SV_ModEnd> * wb ) <S2SV_ModStart>  wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> w, wb, vpx_write_literal <S2SV_ModEnd> ( wb,",0
1013,,1
1014,<S2SV_ModStart> goto not_found ; if ( e - p > HOST_NAME_MAX - 1 ) goto not_found ;,0
1015,<S2SV_ModStart> ; int err <S2SV_ModEnd> ; err = <S2SV_ModStart> uint32_t pos ; if ( inode -> i_size > inode -> i_sb -> s_blocksize ) { err = - EIO ; goto out_unmap ; } <S2SV_ModStart> return 0 ; out_unmap :,0
1016,<S2SV_ModStart> else if ( cpu_has_secondary_exec_ctrls ( ) && ( vmcs_read32 ( SECONDARY_VM_EXEC_CONTROL ) & SECONDARY_EXEC_VIRTUALIZE_X2APIC_MODE ) <S2SV_ModEnd> ) { if,1
1017,<S2SV_ModStart> if ( ent == NULL ) { st = KRB5_KDB_NOENTRY ; <S2SV_ModEnd> goto cleanup ;,0
1018,<S2SV_ModStart> 1 ) ; if ( <S2SV_ModEnd> ( ps_codec ->,0
1019,"<S2SV_ModStart> = 0 ; int b_blocks = 0 ; <S2SV_ModStart>, bh, b_start, bh_start <S2SV_ModEnd> ) ; int <S2SV_ModStart> ( bh ), b_start <S2SV_ModEnd> ) ; if",0
1020,"<S2SV_ModStart>, bytes_of ( psf )",0
1021,<S2SV_ModStart> ; if ( d -> msg_len > sizeof ( d -> msg ) ) return - EINVAL ; if ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( i,1
1022,"<S2SV_ModStart> break ; } memset ( & cinfo, 0, sizeof ( cinfo ) ) ;",1
1023,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
1024,<S2SV_ModStart> ) ; } char * src <S2SV_ModEnd> ; if (,0
1025,"<S2SV_ModStart> int num_items_scanned ; guint pkt_len ; int <S2SV_ModEnd> pktnum, hr <S2SV_ModStart> + 64, ""LEN=%9u"" <S2SV_ModEnd>, & pkt_len <S2SV_ModStart> FALSE ; } if ( pkt_len > WTAP_MAX_PACKET_SIZE ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup_printf ( ""toshiba: <S2SV_blank> File <S2SV_blank> has <S2SV_blank> %u-byte <S2SV_blank> packet, <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> maximum <S2SV_blank> of <S2SV_blank> %u"", pkt_len, WTAP_MAX_PACKET_SIZE ) ; return FALSE ; } <S2SV_ModStart> ( buf, pkt_len <S2SV_ModEnd> ) ; pd",0
1026,<S2SV_ModStart> ; int err = 0 ; msg -> msg_namelen,1
1027,"<S2SV_ModStart> ; if ( zend_hash_find <S2SV_ModEnd> ( ht,",1
1028,<S2SV_ModStart> ) ) ; nla_strlcpy <S2SV_ModEnd> ( link_info.,0
1029,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> i -> io <S2SV_ModStart> - ENODEV ; } io_cleanup = io_cleanup ;,0
1030,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",1
1031,<S2SV_ModStart> p -> tokenpos >= ( <S2SV_ModEnd> p -> tokenlen <S2SV_ModStart> p -> tokenlen - 1 ),1
1032,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_V4SV_null> static <S2SV_ModStart> case BLOCK_8X8_8X8_8_8_8_8_8 : vp9_block_segment_id <S2SV_ModEnd> ( vp9_coeff,",0
1033,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
1034,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> & 0xFFFF ; },1
1035,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
1036,<S2SV_ModStart> ; if ( e <S2SV_ModEnd> ) return,0
1037,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
1038,"<S2SV_ModStart> -> stratum_port ; snprintf ( address, 254 <S2SV_ModEnd>, ""%s:%s"",",1
1039,"<S2SV_ModStart> } if (! page_name_is_valid ( page <S2SV_ModEnd> ) ) { <S2SV_ModStart> return 0 ; } if ( res -> filename ) { error_page ( ""%s: <S2SV_blank> ERROR"", 0 ) ; return 0 ; } else if ( res <S2SV_ModEnd> == 0 ) {",0
1040,<S2SV_ModStart> -> actual_size ; unsigned int actual_size = r -> actual_size ; unsigned int limit_r_begin = r -> begin < actual_size? r -> begin : actual_size ; unsigned int limit_r_read = r -> end < actual_size? r -> end : actual_size ; <S2SV_ModStart> int n_read = limit_r_read <S2SV_ModEnd> ( r ->,0
1041,<S2SV_ModStart> head -> iov_base ; if ( hdr > head -> iov_len ) return 0,1
1042,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> cl_nodes_lock ) ; o2nm_unlock_subsystem ( ) ;,1
1043,<S2SV_ModStart> ] ) { if ( vb_bit_buffer < 2 ) { return - EINVAL ; } <S2SV_ModStart> line ) ; } else { vb_free ( buf ) ; },0
1044,<S2SV_ModStart> size ) { ASSERT_NO_SIZE_OVERFLOW ( size ) ;,1
1045,<S2SV_ModStart> ; ssize_t count ; if ( bytes == 0 || items == 0 ) return 0,1
1046,<S2SV_ModStart> ; if ( rx!= NULL ) return (,0
1047,<S2SV_ModStart> key_ref ) ; if ( ret == 0 ) return ret ;,0
1048,<S2SV_ModStart> 0 ) ; if ( sctp_id == sctxt_len ) break ;,0
1049,<S2SV_ModStart> ; if ( <S2SV_ModEnd>!= 0 ),0
1050,"<S2SV_ModStart> r ) { if ( X509_ALGOR_cmp ( a -> sig_alg, a -> cert_info -> signature ) ) return 0 ;",1
1051,<S2SV_ModStart> 0 ) ; hrtimer_try_to_cancel <S2SV_ModEnd> ( & stime,1
1052,"<S2SV_ModStart> ONIG_INFINITE_DISTANCE ) { if ( p - str < reg -> dmax ) { * low = ( UChar * ) str ; if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; } else { <S2SV_ModStart> low ) ; }",0
1053,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> r2S2SV_null> <S2SV_null> static,0
1054,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, 0 )",0
1055,<S2SV_ModStart> -> filesize = s ->,0
1056,,0
1057,"<S2SV_ModStart> ( str ) <S2SV_ModEnd> ( p,",0
1058,<S2SV_ModStart> } err = crypto_rng_alg ( tfm ) <S2SV_ModEnd> -> seed (,1
1059,<S2SV_ModStart> = uid ; <S2SV_ModEnd> new -> count <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (,0
1060,<S2SV_ModStart> ) ; } if ( err == 0 ) goto out_put ; if ( datagrams <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1061,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1062,<S2SV_ModStart> void ) { <S2SV_ModEnd> int i ;,0
1063,<S2SV_ModStart> ; if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) ) <S2SV_ModEnd> { if (,0
1064,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { fmode <S2SV_ModStart>, open_flags, fmode <S2SV_ModEnd> ) ; switch",0
1065,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1066,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
1067,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> return 0 ;,0
1068,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int64_to_bs ( VP9_COMMON * xd, int mi_row, int mi_col, int mi_col * out_col, int mi_col, int mi_col, int64_t * out_thresh * out_thresh, int64_t * out_thresh, int64_t * out_thresh, int64_t * out_thresh, int64_t * out_thdr, int64_t * out_thresh, int64_t * out_thresh, int64_t * out_thresh, int64_t * out_thresh ) { unsigned int64_t * out_thresh = 0 ; unsigned int64_t * out_thresh ; unsigned char * out_to_thresh = 0 ; unsigned int64_to_thresh ( cpi -> common. tx_size << 2 ) ; const uint8_t * out_thresh = pd -> mi [ 1 ] ; const uint64_t * out_tx = pd -> mi [ 1 ] ; const",0
1069,<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1070,"<S2SV_ModStart> ND_TCHECK ( * tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> } trunc : ND_PRINT ( ( ndo, ""[|esis]"" ) ) <S2SV_ModEnd> ; } <S2SV_null>",1
1071,<S2SV_ModStart> ; if ( * buf == NULL ) return EOF_ERROR <S2SV_ModEnd> ; if (,0
1072,<S2SV_ModStart> void update_segment_id ( vpx_reader <S2SV_ModEnd> * r ),0
1073,<S2SV_ModStart> ; uint32_t backup_handle = 0 <S2SV_ModStart> ret == 0 ) { if ( <S2SV_ModEnd> res -> backup <S2SV_ModStart> goto out_unlock ; } else { backup_handle = req -> buffer_handle ; },1
1074,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool success_desc ( struct desc_struct <S2SV_ModEnd> struct desc_struct <S2SV_ModStart> desc_struct * out, bool success <S2SV_ModEnd> ) { bool <S2SV_ModStart> size ) return false ; success = <S2SV_ModEnd> ldt -> nr_entries ( <S2SV_ModStart> size ) ; } success = true ;",0
1075,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr1,",0
1076,"<S2SV_ModStart> final_p ; struct ipv6_txoptions * opt <S2SV_ModStart>, opt ) ; final_p = np -> opt ; <S2SV_ModStart>. opt ) ; final_p = fl6_update_dst ( np -> opt, & final ) ; <S2SV_ModStart>, fl6, final_p <S2SV_ModEnd>, false )",0
1077,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1078,,0
1079,"<S2SV_ModStart> = conn ; <S2SV_ModEnd> g_debug ( ""GsmXSMPClient: <S2SV_blank> Initializing <S2SV_blank> client <S2SV_blank> %s""",1
1080,<S2SV_ModStart> >= 0 && <S2SV_ModEnd> ND_TTEST ( * <S2SV_ModStart> < ie && <S2SV_ModEnd> ND_TTEST ( *,1
1081,"<S2SV_ModStart> * interface ; memset ( interface, 0, sizeof ( interface ) ) ; if ( interface ) return - EINVAL ; <S2SV_ModStart> ( interface, ENC28J600_ECON2 ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> ( interface, ENC28J60_ECON2, ENC28J600_ECON2 ) ; return - ENC28J600_ECON1 <S2SV_ModEnd> ; } <SV_null>",0
1082,"<S2SV_ModStart> ; if ( key_is_valid <S2SV_ModEnd> ( key,",0
1083,<S2SV_ModStart> } if ( assoc_array_is_leaf ( ptr ) &&,0
1084,<S2SV_ModStart>. udpport = 0 <S2SV_ModEnd> ; settings.,1
1085,<S2SV_ModStart> ( ) ; spin_lock ( & intra_mutex ) ;,0
1086,"<S2SV_ModStart> x1 ) { memcpy <S2SV_ModEnd> ( x1,",0
1087,<S2SV_ModStart> clips_ptr ) { if ( num_clips < 0 || num_clips < 0 ) { ret = - EINVAL ; goto out_err ; },0
1088,<S2SV_ModStart> ; if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1089,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1090,"<S2SV_ModStart> 0 ) { int minsz = R_MIN ( minsz, minsz, 0 ) ; <S2SV_ModStart>!= UT64_MAX ) { <S2SV_ModStart>!= UT64_MAX - 1 ) { <S2SV_ModStart> val ) ; }",0
1091,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> EBUFSIZE <S2SV_ModEnd> ; const char * <S2SV_ModStart> 0 ] ; int ret <S2SV_ModEnd> = 0 ; <S2SV_ModStart> ; if ( strlen ( <S2SV_ModStart> ) ) { printf ( ""\\n"" ) ; return 1 ; } if ( strlen ( strlen ( ""\\n"" ) == 0 ) { fprintf ( stderr, "" <S2SV_blank> option <S2SV_blank> %s <S2SV_blank> %d <S2SV_blank> %d\\n"", outputsize.\\n"", pathlen ( ) ; return 1 ; } if ( <S2SV_ModStart> ) ) { fprintf ( stderr, "" <S2SV_blank> file <S2SV_blank> size <S2SV_blank> %s <S2SV_blank> %d <S2SV_blank> %d\\n"", outputbuffer ) ; return 1 ; } fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> a\\n"", outputstr ) ; exit ( 1 ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> } if ( <S2SV_ModStart> ) ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> overrun"" ) ; return 1 ; }",0
1092,"<S2SV_ModStart> + DSPQ_DATA_BUFF ; u16 head, tail, size ; head <S2SV_ModEnd> = readw ( <S2SV_ModStart> + JQS_wDSPQS_wDSPQS_wHead ) ; tail = readw ( chip -> JQS_wDSPQS_wHead ) ; if ( head > size || tail > size ) goto out ; readw ( head, tail ) ; if ( readw ( head > size ) goto out ;",0
1093,<S2SV_ModStart> * opcode_desc ; if ( len < 2 ) { return NULL ; },1
1094,<S2SV_ModStart> acpi_status status ; <S2SV_ModEnd> union acpi_operand_object *,0
1095,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
1096,<S2SV_ModStart> [ sizeof ( the_url <S2SV_ModEnd> ) - 1,0
1097,"<S2SV_ModStart> s, NULL <S2SV_ModEnd> ) ; if",0
1098,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
1099,<S2SV_ModStart> data ) { <S2SV_ModEnd> vpx_codec_alg_priv_t * priv <S2SV_ModStart> data ) ; vpx_codec_alg_priv_t * priv = NULL <S2SV_ModEnd> ; vpx_codec_alg_priv_t * <S2SV_ModStart> priv_t * priv <S2SV_ModEnd> ; vpx_codec_alg_priv = (,0
1100,"<S2SV_ModStart> error ) { if ( bp && ( <S2SV_ModEnd> xfs_da_shrink_inode ( args <S2SV_ModStart>, bp )!= 0 ) <S2SV_ModEnd> ) goto out",1
1101,<S2SV_ModStart> ; if ( cpi <S2SV_ModEnd> ( count >=,0
1102,<S2SV_ModStart> list ) ; spin_lock ( & master -> timer -> lock ) ; list_tail ( & master -> timer -> lock ) ;,0
1103,<S2SV_ModStart> return err ; if (! <S2SV_ModEnd> attrs [ TIPC_NLA_SOCK,0
1104,<S2SV_ModStart> NULL ) { if ( vpx_codec_alg_priv_t * ctx ) return NULL ;,0
1105,<S2SV_ModStart> = v ; if (! IS_ERR ( vma ) ),1
1106,<S2SV_ModStart> cap -> bLength <S2SV_ModEnd> ; if (,0
1107,<S2SV_ModStart> task = current <S2SV_ModEnd> ; if (,1
1108,<S2SV_ModStart> ( iinfo -> i_lenEAttr > bs || iinfo -> i_lenAlloc > bs ) goto out ; if ( iinfo ->,0
1109,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MICMD, ENC28J60_MICMD <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MICMD <S2SV_ModEnd> ) ; }",0
1110,<S2SV_ModStart> fmt ) { return len <S2SV_ModEnd> ; } while,0
1111,"<S2SV_ModStart> ; kfree ( rcu_dereference_protected ( inet -> inet_opt, 1 ) <S2SV_ModEnd> ) ; dst_release",1
1112,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
1113,<S2SV_ModStart>! invalid ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart> goto invalid ; },0
1114,"<S2SV_ModStart> ; args -> rmtvaluelen = be32_to_cpu ( name_rmt -> valuelen ) ; args -> rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ( name_rmt -> <S2SV_ModEnd> valueblk ) ; <S2SV_ModStart>, args -> rmtvaluelen <S2SV_ModEnd> ) ; return",1
1115,<S2SV_ModStart> UINT32 nums ) ; # ifdef CONFIG_FAILURE dval ; # endif,0
1116,,0
1117,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,0
1118,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
1119,<S2SV_ModStart> u8 label_len ; <S2SV_ModEnd> GET8 ( label_len <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ;,1
1120,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpAcc ( TIFF <S2SV_ModStart> cc ) ; if <S2SV_ModEnd> ( cc % <S2SV_ModStart> * stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""fpAcc"", ""%s"", ""cc%(bps*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> tmp ) return 0 <S2SV_ModStart> tmp ) ; return 1 ;",1
1121,"<S2SV_ModStart> -> vm_ops ) <S2SV_ModEnd> return do_fault ( <S2SV_ModStart>, pte, pmd, address, <S2SV_ModEnd> flags ) ;",0
1122,"<S2SV_ModStart> s ) { size_t len = strlen ( s ) + 1 ; <S2SV_ModStart> = pool_alloc ( len ) ; memcpy <S2SV_ModEnd> ( r, <S2SV_ModStart> r, s, len",1
1123,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1124,"<S2SV_ModStart>! new_idmap_permitted ( file,",1
1125,"<S2SV_ModStart>. string ; if ( name > 1024 ) { <S2SV_ModStart> ) ; } else { eprintf ( ""Invalid <S2SV_blank> string <S2SV_blank> pointer <S2SV_blank> at <S2SV_blank> %p\\n"", name ) ; } }",1
1126,<S2SV_ModStart>. p_data = <S2SV_ModEnd> ( int,0
1127,<S2SV_ModStart> ; } } if (,0
1128,"<S2SV_ModStart> ip6 ) { ND_TCHECK ( * cp ) ; <S2SV_ModStart> ip6 ) ; if ( advance < 0 ) return ; <S2SV_ModStart> dp ) ; if ( advance < 0 ) return ; <S2SV_ModStart>, cp ) ; if ( advance < 0 ) return",0
1129,<S2SV_ModStart> i ++ ) { size_t id ; <S2SV_ModStart> ++ ; } <S2SV_ModEnd> if ( idx,0
1130,<S2SV_ModStart> ( iinfo -> i_lenEAttr > bs || iinfo -> i_lenAlloc > bs ) goto out ; if ( iinfo ->,0
1131,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
1132,<S2SV_ModStart> sse ) { ( void ) cpi ;,0
1133,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_line_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) ; <S2SV_ModStart> t1_buf_array, t1_line_array ) ; alloc_array ( t1_line, strlen ( t1_buf_array ) + 1, T1_BUF_SIZE",1
1134,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
1135,"<S2SV_ModStart> ctxt ) ; if (! ( em_syscall_is_enabled ( ctxt ) ) ) return emulate_ud ( ctxt ) ; <S2SV_ModStart>, & ss ) ; if (! ( efer & EFER_SCE ) ) return emulate_ud ( ctxt",1
1136,,0
1137,"<S2SV_ModStart>, annotation, NULL,",0
1138,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> int motion_avg_stride, <S2SV_ModStart> int i, int motion_magnitude, int motion_magnitude, int motion_thresh, int motion_thresh, int motion_thresh ) { int motion_avg_magnitude ; int motion_magnitude ; unsigned char * running_avg_magnitude ; int motion_avg_magnitude ; int motion_magnitude ; int shift_magnitude ; int shift_magnitude <= MOTION_THRES_THRES_THRES_THRESHOLD <S2SV_ModEnd> ) { int <S2SV_ModStart> int i, motion_mb_magnitude, motion_thresh <S2SV_ModEnd> ) ; int <S2SV_ModStart> tmp ) { int motion_magnitude ; int <S2SV_ModStart> ) break ; int motion_magnitude <= MOTION_THRES_THRESHOLD <S2SV_ModEnd> ; int <S2SV_ModStart> ) { int motion_magnitude ; const int motion_magnitude <= MOTION_THRESHOLD <S2SV_ModEnd> _magnitude ++ <S2SV_ModStart> ) { const int motion_magnitude ; const int",0
1139,<S2SV_ModStart> && len + 3,0
1140,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1141,<S2SV_ModStart> size ) ; message -> interface = queueItem -> interface ;,0
1142,"<S2SV_ModStart> NULL, NULL <S2SV_ModEnd> ) ; }",0
1143,"<S2SV_ModStart> sockopt, false",0
1144,<S2SV_ModStart> ) ; } <S2SV_ModEnd> cleanup ( bh,0
1145,"<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp. <S2SV_ModStart>. type, ""compression"", sizeof ( rcomp. type ) <S2SV_ModEnd> ) ; if",1
1146,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
1147,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( rc ) return rc ; <S2SV_ModEnd> inode -> i_ctime <S2SV_ModStart> inode ) ; value = posix_acl_update_mode ( inode <S2SV_ModStart> inode ) ; <S2SV_ModEnd> } break ;",0
1148,"<S2SV_ModStart> 0 ) { status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1149,"<S2SV_ModStart> id, event <S2SV_ModEnd> ) ; }",0
1150,<S2SV_ModStart> 3 * len + 8,1
1151,<S2SV_ModStart> SUCCESS ) { if ( Z_TYPE_PP ( var )!= IS_LONG ) { zval lval ; lval = * * var ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; lval <S2SV_ModStart> ; convert_to_long ( & lval <S2SV_ModEnd> ) ; } <S2SV_ModStart>. x = Z_LVAL ( lval ) ; lval <S2SV_ModEnd> ( lval ) <S2SV_ModStart> SUCCESS ) { if ( Z_TYPE_PP ( var )!= IS_LONG ) { zval lval ; lval = * * var ; zval_copy_ctor ( & lval <S2SV_ModEnd> ) ; convert_to_long <S2SV_ModStart> ; convert_to_long ( & lval <S2SV_ModEnd> ) ; points <S2SV_ModStart>. y = Z_LVAL ( lval ) ; } else { points [ i ] = <S2SV_ModStart> ; } } },0
1152,<S2SV_ModStart> ; sig_none = <S2SV_ModEnd> timr -> it_sigev_notify <S2SV_ModStart> timr -> it_sigev_notify <S2SV_ModEnd> == SIGEV_NONE ;,1
1153,"<S2SV_ModStart> NULL ) { memset <S2SV_ModEnd> ( x,",0
1154,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_line_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) ; <S2SV_ModStart> t1_buf_array, t1_line_array ) ; alloc_array ( t1_line, strlen ( t1_buf_array ) + 1, T1_BUF_SIZE",1
1155,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
1156,"<S2SV_ModStart>. path ; return Curl_urldecode <S2SV_ModEnd> ( data, <S2SV_ModStart>, 0, & <S2SV_ModEnd> pop3c -> mailbox <S2SV_ModStart> pop3c -> mailbox, NULL, TRUE ) <S2SV_ModEnd> ; } <S2SV_null>",1
1157,<S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ; <S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ;,1
1158,"<S2SV_ModStart> gb ) ; if ( s -> ref && sh -> first_slice_in_pic_flag ) { av_log ( s -> avctx, AV_LOG_ERROR, ""Two <S2SV_blank> slices <S2SV_blank> reporting <S2SV_blank> being <S2SV_blank> the <S2SV_blank> first <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> frame.\\n"" ) ; return 1 ; }",1
1159,<S2SV_ModStart> } } } <S2SV_ModEnd> } else {,0
1160,<S2SV_ModStart> return IMPEG2D_MB_TEX_DECODE_ERR ; if ( 0 >= ps_dec -> u2_num_mbs_left ) { break ; },0
1161,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, MACROBLOCKD *",0
1162,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
1163,"<S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> mi_cols + xd -> mi_cols + mi_cols - mi_cols ) { xd -> mbmi. mbmi_extract_cols ( xd, mi_cols ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> mi_cols + mi_cols + mi_cols + xd -> mbmi_cols - mi_cols - mi_cols ) ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( x -> plane [ 0 ] == BLOCK_HIGHBITDEPTH ) { return 0 ; } } else { xd = xd -> mi_cols - mi_cols - 1 ; } else { xd = xd -> mbmi_cols ( x, mbmi, mbmi ) ; if ( xd -> mi_cols + mi_cols + xd -> mbmi_cols - mi_cols - mi_cols ) ; } else {",0
1164,<S2SV_ModStart> -> mmap_legacy_base = TASK_UNMAPPED_BASE + random_factor <S2SV_ModEnd> ; if (,1
1165,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 8 ) ; <S2SV_ModEnd> src += src_stride",1
1166,"<S2SV_ModStart> return getnum ( <S2SV_ModEnd> fmt, 1 <S2SV_ModStart> = getnum ( <S2SV_ModEnd> fmt, sizeof",1
1167,<S2SV_ModStart> row ) { uint32 temp <S2SV_ModEnd> ; scanline =,0
1168,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1169,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] =,0
1170,<S2SV_ModStart> ( upid == INT_MIN ) return - ESRCH ; if ( upid ==,1
1171,"<S2SV_ModStart> siocb -> scm, false",1
1172,<S2SV_ModStart> ( 1 ) return 0,0
1173,"<S2SV_ModStart>, plane ) * ( ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH )? 2 : 1 )",0
1174,"<S2SV_ModStart> ; if ( assoc_hash_len < 4 ) { avpkt_log ( NULL, AV_LOG_ERROR, ""bad <S2SV_blank> packet <S2SV_blank> length <S2SV_blank> %s\\n"", sig_len ) ; return AVER ; } if (",0
1175,"<S2SV_ModStart> -> private ; struct dm_dev * dev = lc -> dev ; int r = 0 ; if <S2SV_ModEnd> ( lc -> <S2SV_ModStart> ( lc -> start || ti -> len!= i_size_read ( dev -> bdev -> bd_inode ) >> SECTOR_SHIFT ) r = scsi_verify_blk_ioctl ( NULL, cmd ) ; return r? : __blkdev_driver_ioctl ( <S2SV_ModStart> -> bdev, <S2SV_ModEnd> dev -> mode",1
1176,<S2SV_ModStart> 1 ; } if (!,0
1177,<S2SV_ModStart> mask ) { <S2SV_ModEnd> return err ;,0
1178,"<S2SV_ModStart> id, size <S2SV_ModEnd> ) ; }",0
1179,<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ;,1
1180,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1181,,0
1182,<S2SV_ModStart> ; if ( <S2SV_ModEnd>!= pkt.,0
1183,<S2SV_ModStart> NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_SECURE ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> flags & NTLMSSP_NEGOTIATE_NTLM |= NTLMSSP_NEGOTIATE_SIGN <S2SV_ModEnd> ) ; if,0
1184,"<S2SV_ModStart>, ""STARTTLS"", IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn <S2SV_ModEnd> ) ; if",0
1185,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1186,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horDiff8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
1187,<S2SV_ModStart> ; if ( ( int ) ( <S2SV_ModStart> < 0 || ( int ),0
1188,,0
1189,"<S2SV_ModStart>, & rlen, 0",1
1190,<S2SV_ModStart> char buf [ NAME_LEN <S2SV_ModEnd> ] ; if <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } <S2SV_null>,0
1191,<S2SV_ModStart> path ) { <S2SV_ModEnd> return 0 ;,0
1192,<S2SV_ModStart> ; if ( name <S2SV_ModEnd> > 0 ),0
1193,<S2SV_ModStart> - offset ; if ( bio -> bi_vcnt ) break ;,0
1194,<S2SV_ModStart> -> depth ; if ( numcolors > RAS_CMAP_MAXSIZ ) { return - 1 ; } <S2SV_ModEnd> actualnumcolors = hdr,1
1195,<S2SV_ModStart> state. path <S2SV_ModEnd> ) ; char,0
1196,"<S2SV_ModStart> str ) { strncpy <S2SV_ModEnd> ( line, <S2SV_ModStart> str ) ; } <S2SV_ModEnd> } else {",0
1197,,0
1198,<S2SV_ModStart> int i ; jas_uchar <S2SV_ModEnd> buf [ 2,0
1199,<S2SV_ModStart> 0 ) ; scat = & rm -> data. op_sg [ sg ] ; ret = <S2SV_ModEnd> sizeof ( struct,0
1200,<S2SV_ModStart> 0 ) ; if (! r ) return - EINVAL ;,1
1201,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1202,,1
1203,"<S2SV_ModStart> { r_cons_printf ( ""\\""k <S2SV_blank> bin/%s=%s\\""\\"" <S2SV_ModEnd>, module,",0
1204,"<S2SV_ModStart>, rqstp, res <S2SV_ModEnd> ) ; out",1
1205,<S2SV_ModStart> entry == NULL <S2SV_ModEnd> ) { struct,0
1206,<S2SV_ModStart> ST2SV_null> <S2SV_null> static,0
1207,"<S2SV_ModStart> ) ) { * status = ""INVALID_S4U2PROXY_OPTIONS"" ; <S2SV_ModStart> ) ) { * status = ""EVIDENCE_TICKET_MISMATCH"" ;",1
1208,<S2SV_ModStart> thread -> tp_value [ 0 ] <S2SV_ModStart> childregs -> ARM_r3 ; thread -> tp_value [ 1 ] = get_tpuser ( ),1
1209,"<S2SV_ModStart> * obj, size_t <S2SV_ModEnd> obj, size_t <S2SV_ModStart> ) obj ; size_t <S2SV_ModEnd> obj ; JAS_DBGLOG ( JAS_DBGLOG",0
1210,"<S2SV_ModStart> rblk * sig = NULL <S2SV_ModStart> char * pkb = NULL <S2SV_ModStart> b ) ; if (! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> invalid <S2SV_blank> of <S2SV_blank> user"", __func__ ) ; goto done ; } <S2SV_ModStart> b ) ; if (! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } <S2SV_ModStart> ) ) ; if (! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } <S2SV_ModStart> b ) ; free ( sig ) ;",0
1211,<S2SV_ModStart> ; uint32_t bcount ; CLEAR ( WaveHeader ),1
1212,"<S2SV_ModStart> * inode, f_dentry <S2SV_ModEnd> ) ; if",0
1213,"<S2SV_ModStart>, mech )!= NULL",0
1214,<S2SV_ModStart> tn_buf ) ; return - EACCES ;,1
1215,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteCanonEntry ) ) ;",0
1216,<S2SV_ModStart> failed_mount3 ; } ext2_xattr_create_cache ( sbi -> s_mb_cache ) ;,0
1217,<S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } <S2SV_null>,0
1218,<S2SV_ModStart> ; if ( tcp_hdrlen < sizeof ( struct tcphdr ) ) return 0 ; if (,0
1219,<S2SV_ModStart> int i ; size_t size ; matrix = 0 ; <S2SV_ModStart> 0 ) { goto error <S2SV_ModEnd> ; } matrix <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } matrix <S2SV_ModStart> 0 ) { goto error <S2SV_ModEnd> ; } matrix <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } matrix <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } matrix <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } matrix <S2SV_ModStart> 0 ) { goto error <S2SV_ModEnd> ; } matrix <S2SV_ModStart> 0 ) { goto error <S2SV_ModEnd> ; } matrix <S2SV_ModStart> 0 ) { goto error <S2SV_ModEnd> ; } matrix,0
1220,<S2SV_ModStart> ; if ( ( skb_dst ( skb ) &&,0
1221,"<S2SV_ModStart> int mb2_cache_entry <S2SV_ModEnd> ; struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache <S2SV_ModStart> hash ) { int ret ; <S2SV_ModStart> error = mb2_cache <S2SV_ModEnd> ( ext4_xattr_cache, <S2SV_ModStart> bh ) ; <S2SV_ModEnd> } <S2SV_null>",0
1222,<S2SV_ModStart> * req ; <S2SV_ModEnd> req = scsi_alloc <S2SV_ModStart> req ) ; <S2SV_ModEnd> return req ;,0
1223,"<S2SV_ModStart> uint32_t num ; size_t num = 2 <S2SV_ModEnd> ; BUFSIZE <S2SV_ModStart> ( 2, ""%s: <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> not <S2SV_blank> in <S2SV_blank> of <S2SV_blank> %d)\\n"", __func__ ) ; return - 1 ; } <S2SV_ModStart> return - EINVAL ;",0
1224,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1225,<S2SV_ModStart> ( ret ||! cm_id -> device ||,1
1226,<S2SV_ModStart> xfrm_policy_walk * ) <S2SV_ModEnd> cb -> args <S2SV_ModStart> cb -> args <S2SV_ModEnd> ; struct xfrm_dump_info <S2SV_ModStart> struct xfrm_dump_info info <S2SV_ModEnd> ; info. <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> ( void ),1
1227,<S2SV_ModStart> (! file || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
1228,<S2SV_ModStart> dentry * upper <S2SV_ModEnd> ; int err <S2SV_ModStart> dentry ) ; upper = lookup_name_len ( dentry -> d_name. upper ) ; if ( IS_ERR ( upper ) ) goto out_unlock ; <S2SV_ModStart> dentry ) ; <S2SV_ModEnd> if ( IS_ERR ( upper <S2SV_ModStart> dentry ) ; <S2SV_ModEnd> if ( upper <S2SV_ModStart> dentry ) ; out_unlock :,0
1229,"<S2SV_ModStart> ( LOG_INFO, ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> options <S2SV_blank> s"" <S2SV_ModEnd> ) ; return",0
1230,<S2SV_ModStart> * ptrptr && <S2SV_ModEnd> nmemb && size <S2SV_ModStart> nmemb && size <S2SV_ModEnd> ) return AVERROR,1
1231,<S2SV_ModStart> ( a -> type == szMAPI_BINARY && a -> <S2SV_ModStart> else if ( a -> type == szMAPI_BINARY &&,1
1232,"<S2SV_ModStart> ) { } if ( i -> numf!= i ) { assert ( i -> width ) ; i -> parent -> width = i -> height ; if ( i == '\\n"" ) { assert ( i -> width ) ; } else if (! ( i -> parent -> height ) { assert ( i -> width ) ; } <S2SV_ModEnd> if (!",0
1233,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : ms -> elf_notes_max = * ( const size_t * ) val ; return 0 ;,0
1234,"<S2SV_ModStart> < JAS_CAST ( jas_uint <S2SV_ModEnd>, jas_image_numcmpts (",0
1235,,1
1236,<S2SV_ModStart>!= 0 ) return - EINVAL ; if (,0
1237,<S2SV_ModStart> start ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1238,,0
1239,<S2SV_ModStart> UINT32 nsc_rle_encode ( const,1
1240,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 2S2SV_null> <S2SV_null>,0
1241,"<S2SV_ModStart> * dllhandle ; if ( COM_CompareExtension ( name, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", name ) ; return NULL ; }",1
1242,<S2SV_ModStart> = true ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1243,<S2SV_ModStart> ( n ) \\\n{ <S2SV_ModEnd> sum = (,0
1244,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1245,<S2SV_ModStart> ( ) ; kfree ( line ) ;,0
1246,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> se2SV_null> static <S2SV_ModStart> 2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip2SV_null> <S2SV_null>,0
1247,"<S2SV_ModStart> jpcnt ) ; if ( jas_uchar\\n"" ) { return - 1 ; }",0
1248,,0
1249,,0
1250,<S2SV_ModStart> == * ptr && ptr [ 1 ],1
1251,"<S2SV_ModStart> * cpi, ThreadData * td <S2SV_ModEnd>, TileInfo * <S2SV_ModStart> x = & td <S2SV_ModEnd> -> mb ; <S2SV_ModStart> x = & td <S2SV_ModEnd> -> mb ; <S2SV_ModStart> x = & td <S2SV_ModEnd> -> mb ; <S2SV_ModStart> x = mi_col ; <S2SV_ModEnd> } } <S2SV_null>",0
1252,"<S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
1253,"<S2SV_ModStart> int mb_index, vpx_writer <S2SV_ModEnd> * w )",0
1254,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ),",0
1255,<S2SV_ModStart> ; if ( skb_is_g ( skb ) &&,0
1256,<S2SV_ModStart> sta -> lock ) ; spin_lock_init ( & sta -> ps_lock,1
1257,<S2SV_ModStart> tp_event ) && perf_paranoid_tracepoint_raw <S2SV_ModEnd> ( ) &&,1
1258,<S2SV_ModStart> NULL ) ; <S2SV_ModEnd> if (!,0
1259,"<S2SV_ModStart>, 0 ) ; if (! data_interface ||! control_interface ) return - ENODEV",1
1260,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1261,<S2SV_ModStart> pathname ) ; <S2SV_ModEnd> if (!,0
1262,"<S2SV_ModStart> * head ; <S2SV_ModEnd> newsk -> sk_sndbuf <S2SV_ModStart> -> sk_rcvbuf ; sctp_copy_descendant <S2SV_ModEnd> ( newsk,",1
1263,"<S2SV_ModStart> dentry * TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) ) <S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1264,"<S2SV_ModStart> { struct desc_struct <S2SV_ModEnd> desc ; short <S2SV_ModStart> return sel ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! get_desc ( & desc, sel ) <S2SV_ModEnd> ) return - <S2SV_ModStart>! ( desc. <S2SV_ModEnd> type &",0
1265,,0
1266,"<S2SV_ModStart> 1 ) { vpx_lpf_horizontal_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> } else { vpx_lpf_horizontal_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> } else { vpx_lpf_horizontal_4 <S2SV_ModEnd> ( s,",0
1267,<S2SV_ModStart> return ret ; fsnotify_put_group ( group ) ;,1
1268,<S2SV_ModStart> ; int err = 0 <S2SV_ModEnd> ; if (,0
1269,"<S2SV_ModStart> BPF_ALU64 ) { coerce_reg_to_size ( dst_reg, 4 ) ; coerce_reg_to_size <S2SV_ModEnd> ( & src_reg <S2SV_ModStart> ( & src_reg, 4",0
1270,<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ;,0
1271,<S2SV_ModStart> ; while ( (,0
1272,<S2SV_ModStart> ) ) { if ( len == 0 ) return - EINVAL ;,0
1273,<S2SV_ModStart> VALUE ) ; if (! ( release_data ) ) {,0
1274,<S2SV_ModStart> ( buf [ 1 <S2SV_ModEnd> ) ) return,0
1275,<S2SV_ModStart> input -> input + 1,0
1276,"<S2SV_ModStart> } if ( le32_to_cpu ( raw_super -> segment_count ) > F2FS_MAX_SEGMENT ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> segment <S2SV_blank> count <S2SV_blank> (%u)"", le32_to_cpu ( raw_super -> segment_count ) ) ; return 1 ; } if (",1
1277,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> char * strlen <S2SV_ModStart> = '\\0' ; char * name = strlen ( * name <S2SV_ModEnd> ; if (,0
1278,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } } <,0
1279,<S2SV_ModStart> len ) { struct ipv6_txoptions * opt_to_free = NULL ;,0
1280,<S2SV_ModStart> ; if ( <S2SV_ModEnd> hdr ( skb,0
1281,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> } break ;",1
1282,<S2SV_ModStart> & RTM_F_FIB_MATCH ) { if (! err ) { err = - EINVAL ; goto err ; } <S2SV_ModEnd> goto errout_free ;,0
1283,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1284,<S2SV_ModStart> ; if ( nla_info <S2SV_ModEnd> ( finfo ->,0
1285,"<S2SV_ModStart> { if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
1286,<S2SV_ModStart> ) break ; <S2SV_ModEnd> tp -> copied_seq <S2SV_ModStart> = seq ; } tp -> copied_seq = seq ;,1
1287,<S2SV_ModStart> ; if ( key_is_tiny ( keyring <S2SV_ModEnd> ) ) return,0
1288,,0
1289,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } else {,0
1290,<S2SV_ModStart> ; if (! sock_owned_by_user ( sk ) &&,0
1291,"<S2SV_ModStart> * orelse, string type_comment, int <S2SV_ModEnd> lineno, int <S2SV_ModStart> -> orelse = type_comment",0
1292,"<S2SV_ModStart>, keyring <S2SV_ModEnd> ) { int",0
1293,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ),1
1294,"<S2SV_ModStart> ) { case AC_VECTOR : kvm_queue_exception_e ( vcpu, AC_VECTOR, error_code ) ; return 1 ; case",1
1295,<S2SV_ModStart> { # endif <S2SV_ModEnd> if (!,0
1296,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1297,<S2SV_ModStart> = 0 ; data_socket = NULL ;,0
1298,<S2SV_ModStart> < 0 ) { ret = chg ; goto out_err ; } <S2SV_ModEnd> if ( hugepage_subpool_get_pages <S2SV_ModStart> chg ) ) { ret = <S2SV_ModEnd> - ENOSPC ; <S2SV_ModStart> - ENOSPC ; goto out_err ; } <S2SV_ModStart> chg ) ; goto out_err <S2SV_ModEnd> ; } if <S2SV_ModStart> return 0 ; out_err : resv_map_put ( vma ) ; return ret ;,1
1299,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart>, & final ) ; rcu_read_lock ( ) ;",0
1300,<S2SV_ModStart> = NULL ; s -> s_stack_depth = 0 ;,0
1301,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1302,<S2SV_ModStart> 6 ) ) { MATLAB_KO : clone_info = DestroyImageInfo ( clone_info ) ; <S2SV_ModEnd> ThrowReaderException ( CorruptImageError,0
1303,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1304,<S2SV_ModStart> new_data ) { n_new_keys = kdb -> key_data ; <S2SV_ModStart> ret = kdb -> n_new_keys <S2SV_ModEnd> ; if (,0
1305,"<S2SV_ModStart> int result = RLC_OK <S2SV_ModEnd> ; bn_t t <S2SV_ModStart> int result = RLC_OK ; bn_hash_dig ( t ) ; <S2SV_ModStart> if ( mb ) { bn_dig ( m, m ) ; if ( m_len == 8 ) { bn_add ( m, m, 8 ) ; bn_dig ( m, 8 ) ; } <S2SV_ModEnd> if ( m <S2SV_ModStart> 8 ) ; bn_dig ( m, 8 ) ; bn_dig ( m, 8 ) ; bn_dig ( m, m, 8 ) ; } <S2SV_ModEnd> if ( m <S2SV_ModStart> 8 ) ; bn_dig ( m, m, pad_len == <S2SV_ModEnd> ) ; }",0
1306,"<S2SV_ModStart> -> length, 0,",1
1307,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1308,<S2SV_ModStart> { rq = <S2SV_ModEnd> hctx -> tags <S2SV_ModStart> hctx -> tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; if (,1
1309,"<S2SV_ModStart> ( psf, psf ->",0
1310,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1311,"<S2SV_ModStart> { token ++ ; } if ( operand >= MAX_OPERANDS ) { eprintf ( ""Too <S2SV_blank> many <S2SV_blank> operands\\n"" ) ; return false",1
1312,"<S2SV_ModStart> -> seg ; memset <S2SV_ModEnd> ( x -> <S2SV_ModStart> mi_type, 0, sizeof ( xd ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> cm -> mi_row ) ; memset <S2SV_ModEnd> ( xd ->",0
1313,,0
1314,<S2SV_ModStart> return NULL ; <S2SV_ModEnd> } if (,0
1315,"<S2SV_ModStart> number_colormaps, number_planes_filled <S2SV_ModStart> -> rows * number_planes_filled <S2SV_ModEnd> ; pixel_info =",0
1316,<S2SV_ModStart> ctl_files_rwlock ) ; mutex_init ( & card -> user_ctl_lock ) ;,1
1317,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return 0 ;,0
1318,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1 ) ),0
1319,<S2SV_ModStart> ; ps_dec -> u4_cur_slice_num = 0 ; ps_dec ->,0
1320,<S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata -> rdata. buf!= NULL ) <S2SV_ModStart> OPENSSL_free ( rdata -> rdata. buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata -> rdata. buf!= NULL ) <S2SV_ModStart> OPENSSL_free ( rdata,0
1321,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart>, & final ) ; rcu_read_lock ( ) ;",0
1322,<S2SV_ModStart> buffer_count < 1 || args -> buffer_count > UINT_MAX / sizeof ( * exec2_list ),1
1323,"<S2SV_ModStart> int mptctl_readtest ( ioc, <S2SV_ModEnd> struct * ioc",0
1324,,0
1325,"<S2SV_ModStart> char * path, const char * rootfs <S2SV_ModStart> mntdata, optional, rootfs",1
1326,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1327,"<S2SV_ModStart> argc ) { long len_full ; long len_abuf ; long len_full ; long len_buf ; long len_full ; long len_buf ; long len_full ; long len_buf ; long len_buf ; long len_full = 0 ; long len_buf ; long len_full = 0 ; long len_rem ; long len_full = 0 ; long len_full = 0 ; long len_data ; long len_full = 0 ; long len_full = 0 ; long len_buf <S2SV_ModEnd> ; argv_full = <S2SV_ModStart> argc ) ; len_full = 0 <S2SV_ModEnd> ; encode = <S2SV_ModStart> argc ) ; len_rem = 0 ; encode = 0 ; if ( len_rem > 0 ) { WARN_ON_ON ( len_EXECVE_AUDIT_EXECVE_LEN, len_AUDIT_LEN ) ; len_rem = 0 ; buf_rem = MAX_EXEC_AUDIT_AUDIT_LEN ; } buf_full = 0 ; buf_size = MAX_EXECVE_AUDIT_AUDIT_EXECVE_AUDIT_LEN ; <S2SV_ModStart> argc ) { if ( len_",0
1328,"<S2SV_ModStart> | O_NOCTTY, ( mode == 0 || mode == MODE_INVALID )? 0644 : mode <S2SV_ModEnd> ) ; if",1
1329,"<S2SV_ModStart> err_info ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> line [ NETSCREEN_LINE_LENGTH <S2SV_ModEnd> ] ; if <S2SV_ModStart> FALSE ; } return parse_netscreen_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart> FALSE ; <S2SV_ModEnd> err, line",0
1330,<S2SV_ModStart> * rq ) <S2SV_ModEnd> { int cpu <S2SV_ModStart> ) ; return <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>,0
1331,,0
1332,<S2SV_ModStart> } else { return 1 <S2SV_ModEnd> ; } },0
1333,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> nsp_prod_response ( <S2SV_ModStart> case BLKIF_PROTOCOL_GET_X86_X86_PROTOCOL_X86_GET_PROTOCOL <S2SV_ModEnd> ; break ; <S2SV_ModStart> case BLKIF_PROTOCOL_X86_32 : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> case BLKIF_X86_prod_pvt <S2SV_ModEnd> ) ; break <S2SV_ModStart> case BLKIF_PROTOCOL_X86_X86_PROTOCOL_X86_32 : resp = <S2SV_ModEnd> ; break ;,0
1334,<S2SV_ModStart> ; if ( password == NULL ||,1
1335,"<S2SV_ModStart> ; if ( CHECKOVERFLOW ( datao, buf_size, 2 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size, 2 <S2SV_ModEnd> ) ) { exif_log",0
1336,<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; char,0
1337,<S2SV_ModStart> ndo -> ndo_snapend ; ND_TCHECK_16BITS ( & ip -> ip_len ),1
1338,<S2SV_ModStart> dentry * dir <S2SV_ModEnd> ; int dir_has_key <S2SV_ModStart> 0 ; } <S2SV_ModEnd> spin_lock ( & <S2SV_ModStart> dir_has_key = ( d_inode ( dir ) -> i_crypt_info <S2SV_ModEnd>!= NULL ),1
1339,<S2SV_ModStart> ; opt_free ( opt <S2SV_ModEnd> ) ; },0
1340,"<S2SV_ModStart> ARCHIVE_WARN ; } if ( argc >= MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } <S2SV_ModStart> p ) ; <S2SV_ModEnd> } if (",1
1341,<S2SV_ModStart> ) { # if! defined ( i -> width ) if ( i -> width ) if ( i -> parent -> parent -> height ) { # if! defined ( i -> width ) if ( i -> parent -> parent -> width ) return - 1 ; } if ( i -> parent -> width ) { # if! defined ( i -> width ) if ( i -> parent -> parent -> width ) { # if! defined ( i -> width ) if! defined ( i -> width ) if ( i -> parent -> width ) fprintf ( i -> parent -> parent -> parent -> width ) ; # endif if! defined ( i -> height ) fprintf ( i -> parent -> parent -> parent -> parent -> width ) ; # endif if! defined ( i -> parent -> height ) if ( i -> parent -> width ) fprintf ( i -> parent -> parent -> parent -> parent -> width ) ; # if! defined ( i -> width ) fprintf ( i -> parent -> parent -> parent -> width ) ; # if! defined ( i -> width ) fprintf ( i -> parent -> parent -> parent -> parent -> width ) ; # if! i -> parent -> width + i -> width ) { # if! defined ( i -> width ),0
1342,<S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ),0
1343,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
1344,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> break ; } if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",0
1345,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1346,"<S2SV_ModStart> ( interface, ENC624J600_EHT0 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT0 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT0 <S2SV_ModEnd> ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT0 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC28J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC28J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC28J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface",0
1347,"<S2SV_ModStart> ( packets + 257UL <S2SV_ModEnd>, image ->",1
1348,"<S2SV_ModStart> error ; } memset ( newserv, 0, sizeof ( struct service ) ) ;",1
1349,<S2SV_ModStart> ps_dec ) ; <S2SV_ModEnd> ps_dec -> i,0
1350,<S2SV_ModStart> ) -> tp_value [ 0 ],1
1351,"<S2SV_ModStart> ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; ret = - EINVAL ;",1
1352,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> char * <S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; if ( len == 0 ) { if (! out ) return 0 ; <S2SV_ModStart> ( out ) cJSON_malloc ( 2, ""cannot <S2SV_blank> value: <S2SV_blank> %d"", p ) ; return 0 ; } if (! ptr ) { cJSON_malloc ( child, 1 ) ; if (! ptr ) return 0 ; * ptr = cJSON_malloc ( 3 ) ; if (! ptr ) return 0 ; * ptr = cJSON_malloc ( 3 ) ; if (! out ) return 0 ; if (! ptr ) return 0 ;",0
1353,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> len=%u"" <S2SV_ModEnd>, id,",0
1354,"<S2SV_ModStart> int tagval, uint32 <S2SV_ModEnd> * length )",1
1355,<S2SV_ModStart> = other ; unix_dgram_peer_wake_disconnect_wake_wakeup ( sk_peer ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> } if ( <S2SV_ModStart> ) ) { unix_dgram_peer_wake_disconnected ( ) ; return - EINVAL ; } <S2SV_ModEnd> } if (,0
1356,<S2SV_ModStart> value ) { <S2SV_ModEnd> value = ( unsigned int <S2SV_ModStart> value ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> value = <S2SV_ModEnd> value & 0xffff <S2SV_ModStart> value & 0xffff <S2SV_ModEnd> ; return (,0
1357,"<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> w"", <S2SV_ModStart> y3 ) ; sendClean ( outputbuffer ) ;",0
1358,<S2SV_ModStart> ; if ( skb_is_g ( skb ) &&,0
1359,<S2SV_ModStart> void ioc_io_context ( struct io_context * task <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; task_lock ( task <S2SV_ModEnd> ) ; ioc,0
1360,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1361,<S2SV_ModStart> ; if ( ctx -> terminated ||,0
1362,"<S2SV_ModStart> ) { int ret = pci_read_config_word <S2SV_ModEnd> ( dev, <S2SV_ModStart> offset, value ) ; <S2SV_ModEnd> return ret ;",0
1363,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
1364,<S2SV_ModStart> ] ) ; free_uid ( fpl -> user ) ;,1
1365,<S2SV_ModStart> ( ) ; kfree_skb ( req,0
1366,<S2SV_ModStart> goto out ; } <S2SV_ModEnd> spin_lock ( &,0
1367,"<S2SV_ModStart> : # line 113 <S2SV_ModEnd> ""hex_grammar.y"" { char <S2SV_ModStart> ( yyvsp [ ( 1 ]. String ) - ( yyvsp [ ( 1 ) ]. String ) ; <S2SV_ModStart> ( yyvsp [ ( 1 <S2SV_ModEnd> ]. String <S2SV_ModStart>!= '=' ) { char * ( yyvsp [ ( 1 ) ]. String ) [ ( 1 ]. String ) [ ( yyvsp [ ( 1 ]. String ) - ( yyvsp [ ( 1 ) ]. String ) [ ( 1 ]. String ) [ ( yyvsp [ ( 1 ) ]. String ) [ ( 1 ) ]. String ) [ ( yyval. String ) ]. String ) ; type = NULL ; } break ; case '=' : type = ( yyvsp [ ( 1 ) - ( yyvsp [ ( 1 ) ]. String ) = ( yyvsp [ ( 1 ) - ( yyvsp [ ( 1 ) ]. String ) ; type = ( yyvsp [ ( 1 ) - ( yyvsp [ ( 1 ) ]. String ) ; type = '=' ; } break ; case '=' ;",0
1368,"<S2SV_ModStart> sas_revalidate_domain, [ <S2SV_ModEnd> DISCE_SUSPEND ] = <S2SV_ModStart> ] = sas_resume_devices <S2SV_ModEnd>, } ;",1
1369,"<S2SV_ModStart>, int ret <S2SV_ModEnd> ; if (",0
1370,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1371,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
1372,<S2SV_ModStart> sk -> sk_family <S2SV_ModEnd> ; struct sk_buff,0
1373,<S2SV_ModStart> = ext4_inode_block ; if (! ( flags & EXT4_GET_BLOCKS_SIZE ) || len > EXT4_GET_BLOCKS_SIZE && len ) { ret = - EINVAL ; goto out_mutex ; } if (! ( flags & EXT4_GET_BLOCKS_SIZE ) & EXT4_BLOCKS_SIZE ) { ret = - EOPNOT_FL_GET_BLOCKS_SIZE ; goto out_mutex ; } if (! ( inode ) & EXT4_GET_BLOCKS_SIZE ) { ret = - 1 ; goto out_mutex ; } if (! ( mode & EXT4_GET_BLOCKS_BLOCKS_SIZE ) & FALLOC_FL_BLOCKS_SIZE ) { ret = - 1 ; goto out_mutex ; } if ( mode & EXT4_GET_BLOCKS_FL_BLOCKS_SIZE ) & FALLOC_FL_BLOCKS_SIZE ; <S2SV_ModStart> = offset + len ) <S2SV_ModEnd> ; if (,0
1374,<S2SV_ModStart> ) ) ; if ( free ( ptr ) ;,0
1375,<S2SV_ModStart> return map ; map =,1
1376,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip2SV_null> static <S2SV_ModStart> char * dp <S2SV_ModEnd> = '\\n"" ; <S2SV_ModStart> ; if ( cp == '\\0' || <S2SV_ModEnd>!= '\\0' <S2SV_ModStart> ) ) { return 0 ; } <S2SV_ModEnd> if ( * <S2SV_ModStart> == '\\0' ) ) { <S2SV_ModEnd> if ( * <S2SV_ModStart> = '\\0' ; * d ++ ; <S2SV_ModStart> = '\\0' ; <S2SV_ModEnd> if ( * <S2SV_ModStart> = '\\0' ; <S2SV_ModEnd> if ( *",0
1377,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1378,<S2SV_ModStart> ; if ( <S2SV_ModEnd> size_left < 4,1
1379,"<S2SV_ModStart> char pix [ L_BUFSIZE <S2SV_ModEnd> ] ; * <S2SV_ModStart> 0 ] = 0.0 <S2SV_ModEnd> ; pix = <S2SV_ModStart>, GFP_MAX - 1, PIX_CRC, pix <S2SV_ModEnd> ) ; pix",0
1380,<S2SV_ModStart> { int i ; int <S2SV_ModEnd> ubits = BN_num_bits <S2SV_ModStart> ubits ) ; int <S2SV_ModEnd> ubits = BN_num_bits <S2SV_ModStart> ( v ) ; int <S2SV_ModEnd> ubits = BN_num_bits,0
1381,<S2SV_ModStart> in_mv ; memset <S2SV_ModEnd> ( x ->,0
1382,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1383,<S2SV_ModStart> = alloc ; size_t <S2SV_ModEnd> strindex = 0,1
1384,"<S2SV_ModStart>, nbits ; if ( msg -> readcount > msg -> cursize ) { return 0 ; } <S2SV_ModStart> ) ) { if ( msg -> readcount + ( mbits >> 3 ) > msg -> cursize ) { msg -> readcount = msg -> cursize + 1 ; return 0 ; } <S2SV_ModStart> & 3 ; if ( msg -> cursize << 3 ) { msg -> readcount = msg -> cursize + ( msg -> cursize + 1, msg -> cursize << 3 ) ; return 0 ; }",0
1385,<S2SV_ModStart> int idx ; unsigned int count ; <S2SV_ModStart> -> count ; count = kcontrol -> count ; <S2SV_ModStart> ; idx < <S2SV_ModEnd> count ; idx,1
1386,<S2SV_ModStart> ; out1 : cancel_work_sync ( & dev -> kevent ) ; del_timer_sync ( & dev -> delay ) ;,1
1387,"<S2SV_ModStart> * m, size_t <S2SV_ModEnd> len, MODE_UM",0
1388,<S2SV_ModStart> == GTK_RESPONSE_OK ) { <S2SV_ModStart> item_name ) ; },0
1389,<S2SV_ModStart> - 2 ; if ( plen < 0 ) return 0 ;,1
1390,"<S2SV_ModStart> goto err = posix_acl_update_mode ( inode <S2SV_ModEnd>, & iattr.",0
1391,<S2SV_ModStart> header. types_size <S2SV_ModEnd> ) { continue,1
1392,,0
1393,<S2SV_ModStart> int alloc ; size_t len = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { size_t alloc = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { size_t alloc <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = sizeof ( * strlen ( alloc <S2SV_ModEnd> ) ; return,0
1394,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1395,"<S2SV_ModStart> ; if ( cpi <S2SV_ModEnd> ( cpi,",0
1396,"<S2SV_ModStart> ; result = safe_call <S2SV_ModEnd> ( interface,",0
1397,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1398,<S2SV_ModStart> >= 0 && <S2SV_ModEnd> ND_TTEST ( *,0
1399,"<S2SV_ModStart>, NULL, <S2SV_ModEnd> data ) ;",1
1400,<S2SV_ModStart> out ; } <S2SV_ModEnd> return res ;,0
1401,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
1402,"<S2SV_ModStart> x, y_stride <S2SV_ModEnd> ) { int <S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( xd -> flags & YV12_FLAG_HIGHBITDEPTH ) { memcpy <S2SV_ModEnd> ( xd, <S2SV_ModStart> x, y_stride <S2SV_ModEnd> ) ; memcpy <S2SV_ModEnd> ( xd,",0
1403,<S2SV_ModStart> ; if (,0
1404,<S2SV_ModStart> ( str ) <S2SV_ModEnd> else if (,0
1405,,0
1406,<S2SV_ModStart> = 0 ; iocb -> i_flags = 0 ;,0
1407,<S2SV_ModStart>! thresholds ) ; if (! thresholds -> primary ) goto unlock <S2SV_ModStart> ( ) ; unlock :,1
1408,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct ion_handle * <S2SV_ModStart> ; handle = ion_handle_get_by_id_nolock ( client, id <S2SV_ModEnd> ) ; mutex_unlock <S2SV_ModStart> ; return handle <S2SV_ModEnd> ; } <S2SV_null>",1
1409,"<S2SV_ModStart> ctx ) { vpx_write_bit_buffer ( wb ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> * wb ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) ; vpx_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> = 1 ; } vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
1410,,0
1411,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context ->,0
1412,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1413,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,0
1414,"<S2SV_ModStart> ( interface, ENC624J600_DEFAULT <S2SV_ModEnd>, ENC624J600_ECON1 ) <S2SV_ModStart> ( interface, ENC624J600_ECODE_ST <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_EIR_SIZE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_EIR_LEN <S2SV_ModEnd> ) ; status <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_DEFAULT <S2SV_ModEnd> ) ; }",0
1415,<S2SV_ModStart> ] == 0x01 && i < gemsafe_cert_max,1
1416,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
1417,"<S2SV_ModStart> VALUE ) { VALUE parse_options ; struct scanned_args * argv ; int scanned_args = 0 ; int scanned_args = rb_scan_args ( argv, argv, & parse_options, & parse_options ) ; if ( scanned_args == 0 ) { scanned_args = parse_args ( rb_args, & parse_options, & document, & parse_options ) ; if ( scanned_args!= 0 ) { rb_scan_args = parse_const_options ( rb_const_const_int, rb_intern ( ""ParseOptions"" ), rb_intern ( ""ParseOptions"" ) ) ; return ; } if ( scanned_args == VALUE parse_options ) { scanned_args = parse_args ( rb_args, & document, ""@parse_options"" ) ) ; goto parse_options ; }",0
1418,"<S2SV_ModStart> vma ) { <S2SV_ModEnd> struct au1200fb_device * <S2SV_ModStart> ( vma, fbdev -> fb_len <S2SV_ModEnd> ) ; return",0
1419,"<S2SV_ModStart> ( fd = safe_calloc <S2SV_ModEnd> ( LOG_INFO,",0
1420,<S2SV_ModStart> + 2 ; if ( state -> buffer_size < 4 ) { state -> buffer_size = 0 ; } <S2SV_ModStart> 0 ) { if ( state -> buffer_size < 4 ) return 0 ; },0
1421,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
1422,<S2SV_ModStart> ; if ( <S2SV_ModEnd> arg >= cdi,1
1423,<S2SV_ModStart> ; if ( copy_from ( sk ) ) return - EINVAL ; if (,0
1424,<S2SV_ModStart> ( event -> <S2SV_ModEnd> ) ; },0
1425,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> uV_null> static <S2SV_ModStart> if ( uv_char * buf, size_t u_char * buf <S2SV_ModStart> * s ; if ( len == 0 ) return - 1 ; if ( len ) return - 1 ; <S2SV_ModStart> * 2 ; if ( len == 0 ) return - 1 ; <S2SV_ModStart> char * s ; if ( len ) return - 1 ; <S2SV_ModStart> sx"" ) ; if ( len = strlen ( u_char * outbuf ) return - 1 ; if ( uv_char * buf ) return - 1 ; if ( u_int ) return - 1 ; <S2SV_ModStart> ) ) ; if ( len == 0 ) return - 1 ; if ( len ) return - 1 ; <S2SV_ModStart> s = len ; if ( u_int ) return - 1 ; if ( u_char * buf ) return - 1 ; if ( u_int ) return - 1 ; <S2SV_ModStart> == u_char * end_char * buf <S2SV_ModEnd> ) ) return AVERROR_INVAL <S2SV_ModEnd> ; } <S2SV_ModStart> == 0 ) { if (! u_char * buf <S2SV_ModEnd> ) ) return AVERROR_INVAL ; <S2SV_ModStart> ++ ) { if ( len",0
1426,"<S2SV_ModStart>, i ; if (! ( s -> state & PNG_IHDR ) ) { av_log ( avctx, AV_LOG_ERROR, ""trns <S2SV_blank> IHDR\\n"" ) ; return AVERROR_INVALIDAT ; } if ( s -> state & PNG_IDAT ) { av_log ( avctx, AV_LOG_ERROR, ""trns <S2SV_blank> IHDR\\n"" ) ; return AVERROR_INVALIDAT ; } if (! ( s -> bit_depth ) ||! ( avctx -> bit_depth ) ) { av_log ( avctx, AV_LOG_ERROR, ""trns <S2SV_blank> IHDR\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( avctx -> bit_depth &",0
1427,<S2SV_ModStart> -> connection ) ; <S2SV_ModEnd> if ( cms,0
1428,<S2SV_ModStart> } dt -> proto = IP_GET_IPPROTO ( p ) ; dt ->,1
1429,"<S2SV_ModStart> ( interface, ENC28J600_EIR, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC28J600_EIR_SIZE ) ; if ( status & ENC624J600_EIR_LINKIF <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_EIR_LINKIF <S2SV_ModEnd> ) return",0
1430,"<S2SV_ModStart> const node * n0, bool <S2SV_ModEnd> is_async ) { <S2SV_ModStart> == NULL ) : return NULL ;",0
1431,<S2SV_ModStart> ; if ( unlikely (,0
1432,"<S2SV_ModStart> ( AUDIT_APPARMOR_DENIED, __aa_current_profile ( ), GFP_KERNEL, & sa, NULL <S2SV_ModEnd> ) ; }",1
1433,"<S2SV_ModStart> unsigned int i ; siz -> tilexoff = 0 ; <S2SV_ModStart> ) ) { goto error ; } if (! siz -> tilexoff ) { goto error ; } if (! siz -> numcomps ||! siz -> tileheight ) { jas_eprintf ( ""cannot <S2SV_blank> range\\n"" ) ; goto error ; } if (! siz -> tileheight ) { jas_eprintf ( ""tile <S2SV_blank> cannot <S2SV_blank> have <S2SV_blank> zero <S2SV_blank> area\\n"" ) ; goto error ; } if (! siz -> tileheight ) { jas_eprintf ( ""zero <S2SV_blank> range\\n"" ) ; goto error ; } if (! siz -> tileheight ) { jas_eprintf ( ""in <S2SV_blank> range\\n"" ) ; goto error ; } if (! jas_eprintf ( ""YOsiz <S2SV_blank> not <S2SV_blank> permissible <S2SV_blank> range\\n"" ) ; goto error ; } if (! siz -> height ) { jas_eprintf ( ""YOsiz <S2SV_blank> not <S2SV_blank> permissible <S2SV_blank> range\\n"" ) ; goto error ; } if (! siz -> numcomps ) { jas_ep",0
1434,,0
1435,"<S2SV_ModStart>, xmi_data, xmi_size,",1
1436,"<S2SV_ModStart> size_t total_len ; struct iov_iter iter ; <S2SV_ModStart> ) return 0 ; iov_iter_init ( & iter, iov, nr_segs, total_len, 0 ) <S2SV_ModStart> -> ops ; <S2SV_ModEnd> size_t total_len = <S2SV_ModStart> ; size_t total_len = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> break ; } written <S2SV_null>",0
1437,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits <S2SV_ModStart> ) ; } \\\n} <S2SV_ModEnd> IndexPacket index ; <S2SV_ModStart> ++ ) { next_pixel = MagickFalse ; displacement = 1 ; <S2SV_ModStart> -= MaxHashTable ; if ( k < 0 ) continue <S2SV_ModEnd> ; if (,1
1438,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1439,<S2SV_ModStart> 1 ) { if ( hdl -> c_path ) { hdl = NULL ; } <S2SV_ModStart> ) ; goto cleanup <S2SV_ModEnd> ; } hdl <S2SV_ModStart> hdl ) ; } if ( hdl ) { if ( hdl -> sm_hdl ) { if ( hdl -> c_path [ 0 ] ) { if ( hdl -> sm_hdl -> c_path [ 0 ] ) unlink ( hdl ) ; <S2SV_ModStart> hdl ) ; } <S2SV_ModEnd> free ( hdl <S2SV_ModStart> hdl ) ; },0
1440,"<S2SV_ModStart> size_t optstr ; size_t max_samples ; <S2SV_ModStart> 0 ; } if ( optstr_samples < sizeof ( optstr ) ) { jas_eprintf ( ""options: <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d\\n"", optstr, max_samples, optstr ) ; break ; }",0
1441,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } if (,0
1442,<S2SV_ModStart> ; if ( key == NULL ) return - EINVAL ; if (,0
1443,<S2SV_ModStart> { if ( <S2SV_ModEnd>!= 0 ),0
1444,<S2SV_ModStart> -> dl ; size_t len = 0 ;,0
1445,<S2SV_ModStart> 2 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,1
1446,"<S2SV_ModStart>, ret = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> irq ) ) { pr_warn_irq <S2SV_ModEnd> ( guest_path, <S2SV_ModStart> irq ) ; goto out ; } if <S2SV_ModEnd> if ( nr_entries",0
1447,<S2SV_ModStart> ) ; return false,0
1448,<S2SV_ModStart> else { return false <S2SV_ModEnd> ; } case,1
1449,,0
1450,<S2SV_ModStart> (! handle ||! SecIsValidHandle ( handle ),1
1451,,0
1452,<S2SV_ModStart> old_dentry ) ; <S2SV_ModEnd> if ( flags,0
1453,<S2SV_ModStart> OP_EXACT1 ) ; <S2SV_ModEnd> DATA_ENSURE ( 1 <S2SV_ModStart> ++ ; s <S2SV_ModEnd> ++ ; MOP_OUT,1
1454,"<S2SV_ModStart>, vpx_writer <S2SV_ModEnd> ( w,",0
1455,<S2SV_ModStart> = - EINVAL ; msg -> msg_namelen = 0,0
1456,<S2SV_ModStart> path. mnt <S2SV_ModEnd> ; if (,0
1457,<S2SV_ModStart> = hash ; sr -> fd_is_fdt = MK_TRUE ;,1
1458,<S2SV_ModStart> NULL ) { if (! strcmp ( key_keyring ) ) return - ENOKEYRING ; <S2SV_ModStart> goto out ; } <S2SV_ModEnd> goto out ;,0
1459,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> -> common ; MACROBLOCK * const x = & td <S2SV_ModEnd> -> mbmi <S2SV_ModStart> x ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> mi_row >= BLOCK_8X8 ) { if ( cm -> mi_row >= BLOCK_8X8X8_8_8X8_8X8_8_8X8X8_8_8_8_8_8_8x8_8_8x8_8_8_8_8_8_8_8_8_8_8_8_8 ( cm, mi_row, mi_col, bsize, & cm -> mi_cols ) ; if ( cm -> mi_row >= BLOCK_8X8X8X8_8X8X8X8 ) { if ( cm -> mi_cols + mi_row * cm -> mi_cols ) { if ( cm -> mi_cols + mi_cols + mi_cols + mi_cols + mi_row * cm -> mi_cols + mi_row, mi_col )",0
1460,<S2SV_ModStart> NETIF_F_HW_CSUM | NETIF_F_SG <S2SV_ModEnd> ; if ( <S2SV_ModStart> NETIF_F_HW_CSUM | NETIF_F_SG <S2SV_ModEnd> ; if (,1
1461,<S2SV_ModStart> char * bio ; if (!,0
1462,"<S2SV_ModStart> pixel_info ) ; ( void ) ResetMagickMemory ( pixels, 0, pixel_info_length ) ;",1
1463,<S2SV_ModStart> ( buf [ 1 <S2SV_ModEnd> ) ) return,0
1464,<S2SV_ModStart>!= NULL || pMap -> entries == 0,0
1465,<S2SV_ModStart> case S_IFDIR : fa = fa ; break ; case 0 : fa = fa ; break ; default : fa = fa ; break ; default : fa = fa ; if ( fa ) return fa ; break ; },0
1466,<S2SV_ModStart> ; if ( cpi <S2SV_ModEnd> ( count >=,0
1467,,0
1468,"<S2SV_ModStart> ; vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, sizeof (",0
1469,"<S2SV_ModStart>, sizeof ( double <S2SV_ModEnd> ) ) ;",1
1470,<S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1471,"<S2SV_ModStart> uint16_t length ; tlen = len ; while ( tlen >= 3 ) { <S2SV_ModStart> 3 ) ; <S2SV_ModEnd> type = * <S2SV_ModStart> 1 ) ; tptr += 3 ; tlen -= 3 ; <S2SV_ModStart> length ) ) ; if ( length < 3 ) goto trunc ; length -= 3 <S2SV_ModStart> ], length <S2SV_ModEnd> ) ; switch <S2SV_ModStart> case BGP_AIGP_TLV : if ( length < 8 ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> EXTRACT_64BITS ( tptr <S2SV_ModEnd> ) ) ) <S2SV_ModStart> ndo, tptr <S2SV_ModEnd>, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> "", <S2SV_ModStart> ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> "", length <S2SV_ModEnd> ) ; }",0
1472,<S2SV_ModStart> = 0 ; if ( len < 10 ) { return NULL ; },0
1473,,0
1474,"<S2SV_ModStart>, sizeof ( addr_t ) <S2SV_ModEnd> ) ; }",0
1475,<S2SV_ModStart> int u ; if ( n < 0 || n >= 32 ) { return - 1 ; } <S2SV_ModEnd> v = 0,1
1476,"<S2SV_ModStart> iovec, compat, & iov",0
1477,"<S2SV_ModStart> } if ( ptr - c -> rcurr > 100 || ( strncmp ( ptr, ""get <S2SV_blank> "", 4 ) && strncmp <S2SV_ModEnd> ( ptr,",0
1478,<S2SV_ModStart> ; if ( <S2SV_ModEnd> dev -> desc.,0
1479,<S2SV_ModStart> ; if ( bNum == NULL ) return - EINVAL ; if (,0
1480,<S2SV_ModStart> ; ue -> card = card ; ue ->,0
1481,"<S2SV_ModStart> client_p, client_name <S2SV_ModEnd> ) ; return",0
1482,<S2SV_ModStart> OpMask ) ; <S2SV_ModEnd> if ( ctxt <S2SV_ModStart> -> _eip ; done :,0
1483,"<S2SV_ModStart> id, event <S2SV_ModEnd> ) ; }",0
1484,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; random_ether_addr (,1
1485,<S2SV_ModStart> = this_rd ; memset <S2SV_ModEnd> ( x ->,0
1486,"<S2SV_ModStart> ( interface, ENC28J600_EIR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC28J600_ECON1 <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_EIR_LEN <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EIR_LEN <S2SV_ModEnd> ) ; enc28j600WriteReg ( interface <S2SV_ModStart> ( interface, ENC624J600_EIR_LEN <S2SV_ModEnd> ) ; }",0
1487,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> sz + 1 <S2SV_ModEnd> ) { struct,0
1488,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
1489,"<S2SV_ModStart> ) ) ) { applog ( LOG_WARNING, ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> header <S2SV_blank> to <S2SV_blank> header_bin, <S2SV_blank> got <S2SV_blank> %s"", __func__, header ) ; pool_failed ( pool ) ; return false ; } <S2SV_ModEnd> cb1 = (",0
1490,<S2SV_ModStart> -> ctx -> <S2SV_ModEnd> ) { if,0
1491,<S2SV_ModStart> case EXIT_REASON_VMON : case EXIT_REASON_INVEPT :,1
1492,<S2SV_ModStart> int allow_key ; const VP9EncoderConfig_COMMON * const cm = & cpi -> td. frame_type == KEY_FRAME ) { VP9_COMMON * const cm = & cpi -> common. mb_flags |= 1 ; <S2SV_ModStart> ; vp9_free ( cpi -> frame_type == KEY_FRAME ) { VP9_COMMON * const cm -> frame_type = & cpi -> frame_type == KEY_FRAME )? 0 : 0 ; <S2SV_ModStart> ; vp9_free ( cpi -> frame_type == KEY_FRAME ) <S2SV_ModEnd> ; sf -> <S2SV_ModStart> == KEY_FRAME ) { <S2SV_ModEnd> return 0 ; <S2SV_ModStart> ; } } # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> mode == KEY_FLAG_FLAG_FRAME ) { VPX_COMMON * const cm -> frame_flags = 1 ; cpi -> frame_type == KEY_FRAME ; } else { cpi -> frame_flags = 1 ; cpi -> frame_flags = cm -> frame_type == KEY_FLAG_FLAG_FRAME ; } else,0
1493,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
1494,"<S2SV_ModStart> compat_timex tx32 ; memset ( txc, 0, sizeof ( struct timex ) ) ;",1
1495,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1, 0 )",0
1496,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1497,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1498,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } if,0
1499,<S2SV_ModStart> vpx_codec_err_t res ; int i ; <S2SV_ModStart> Vpx_codec_alg_priv_t res ; if ( svcInternal_t ) { for ( i = 0 ; i < 4 ; i ++ i ) { if ( si == VPX_CODEC_PARAMETER ) { if ( si == VPX_CODEC_OK ) { svc_ctx_ctx_ctx_ctx -> s_ctx. number_layers = 0 ; svc_ctx_t res = 1 ; } else if ( si == VPX_CODEC_OK ) { for ( i = 0 ; i < sizeof ( svc_ctx ) svc_ctx -> svc_ctx_ctx ) ; i ++ i ) { if ( svc_ctx -> svc_ctx <S2SV_ModEnd> ) return AVERROR_INVALID_ERROR <S2SV_ModEnd> ; } else <S2SV_ModStart> ) ; },0
1500,<S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1501,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( s >,0
1502,<S2SV_ModStart> ; if ( entry == NULL ) return EINVAL ; if ( <S2SV_ModStart> KADM5_POLICY ) && entry -> policy == NULL <S2SV_ModEnd> ) return KADM5_BAD_MASK <S2SV_ModStart> ; if ( ( mask & KADM5_POLICY ) && ( mask & KADM5_POLICY_CLR ) ) return KADM5_BAD_MASK <S2SV_ModEnd> ; if (,1
1503,<S2SV_ModStart> frame -> data [ plane ] && frame -> linesize <S2SV_ModStart> [ plane ] && frame -> linesize [ plane ],1
1504,"<S2SV_ModStart>, mb_cols, mb_cols <S2SV_ModEnd> ) ; if",0
1505,,0
1506,,1
1507,,0
1508,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> return NULL ;,0
1509,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> F_GET_FRAME ) && fd < 0 ) <S2SV_ModStart> S2SV_null> <S2SV_null>,0
1510,<S2SV_ModStart> else if ( hdr!= NULL ) { <S2SV_ModStart> goto err ; },0
1511,<S2SV_ModStart> == 0 ),0
1512,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_decode ( NSC_CONTEXT <S2SV_ModStart> UINT32 ) ; if (! context ) return FALSE <S2SV_ModStart> ; # endif return FALSE ; <S2SV_ModEnd> ; } <S2SV_null>,0
1513,<S2SV_ModStart> while ( offset > 0 && offset <S2SV_ModStart> < end_offset ) { <S2SV_ModStart> hf_keybuffer ) ; },1
1514,<S2SV_ModStart> out_free ; } if (! N ) { ret = - EINVAL ; goto out_free ; },0
1515,"<S2SV_ModStart> cpi ) { const VP9EncoderConfig <S2SV_ModEnd> * oxcf = <S2SV_ModStart> KEY_FRAME ) { if ( cpi -> oxcf. rc_mode == VP9_COMMON * rc -> avg_frame_bandwidth ) { RATE_CONTROL ( cpi -> avg_frame_bandwidth, ( cpi -> avg_frame_bandwidth, cpi -> avg_frame_bandwidth, int ) ; for ( i = 0 ; i < cpi -> avg_frame_bandwidth * cpi -> avg_frame_bandwidth ; ++ cpi -> avg_frame_bandwidth = ( cpi -> avg_frame_bandwidth - ( cpi -> avg_frame_bandwidth ) /= ( cpi -> avg_frame_bandwidth ) / ( cpi -> avg_frame_bandwidth ) / ( cpi -> avg_frame_bandwidth ) ; } else { int rc -> avg_bandwidth = ( int64_t ) ( cpi -> avg_frame_bandwidth, ( cpi -> bits_bandwidth, ( cpi -> avg_frame_bandwidth, ( cpi -> avg_frame_bandwidth, ( cpi ->",0
1516,<S2SV_ModStart> X86_EFLAGS_RF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1517,"<S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
1518,"<S2SV_ModStart> * r, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> ) { if (! ( vpx_read_bit <S2SV_ModEnd> ( r ) <S2SV_ModStart> ) return vpx_read_literal <S2SV_ModEnd> ( r,",0
1519,<S2SV_ModStart> op + OSPF6HDR_LEN ) ; ND_TCHECK_32BITS ( & hellop -> hello_options,1
1520,<S2SV_ModStart> { if ( datalen!= 1 ) return - EINVAL ; if (,1
1521,<S2SV_ModStart> -> uid ; if ( rc!= 0 ) return 0 ;,0
1522,"<S2SV_ModStart> : # line 113 <S2SV_ModEnd> ""hex_grammar.y"" { yr_re_destroy ( ( * yyvaluep ) ; <S2SV_ModStart> : # line 103 ""hex_grammar.c"" break ; <S2SV_ModEnd> ""hex_grammar.c"" { yr_re_destroy ( ( ( * yyvaluep ) ) ; <S2SV_ModStart> : # line 102 ""hex_grammar.c"" break ; <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModEnd> ""hex_grammar.c"" break ;",0
1523,<S2SV_ModStart> : idx ; assert ( ptr >= gfx -> backendData && ptr < ( ( char * ) gfx -> backendData + graphicsGetMemoryRequired ( gfx ) ) ) ;,1
1524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> MACROBLOCKD * const <S2SV_ModStart> struct segment_id, MACROBLOCKD * const xd = & x -> mbmi ; MACROBLOCKD * const xd = & ctx -> mbmi ; MACROBLOCK_SIZE bsize = & x -> plane [ plane ] ; MACROBLOCKD * const xd = & x -> mbmi ; <S2SV_ModStart> mbd -> mbmi ; # if CONFIG_VP9_COUNT_FEATURES * const int segment_id = BLOCK_MODE_OFFSET ( mbmi, mbmi ) ; # if CONFIG_VP9_HIGHBITDEPTH const int bsize = xd -> mbmi ; # if CONFIG_VP9_HIGHBITDEPTH const int segment_buf [ plane ] = BLOCK_SIZE bsize ] ; int ref_coeff = BLOCK_8X8X ( mbmi -> segment_id, tx_size, tx_size ) ; # if CONFIG_VP9_VP9_HIGHBITDEPTH const uint8_",0
1525,<S2SV_ModStart>. pTab = 0,0
1526,<S2SV_ModStart> { if ( ( <S2SV_ModStart> shmflg & SHM_RND ) && addr >= shmlba,1
1527,"<S2SV_ModStart> NULL, NULL",0
1528,<S2SV_ModStart> 1 ) { if ( zval == 0 ) { return NULL ; },0
1529,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1530,<S2SV_ModStart> : case NPNVSupportsWindowless : case NPNVprivateModeBool : case NPNVsupportsAdvancedKeyHandling,1
1531,<S2SV_ModStart> -> msg_id ; msg -> msg_namelen = 0 ;,0
1532,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, 0 )",0
1533,<S2SV_ModStart> ; if ( xml_segment_id ( ) &&,0
1534,<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; char,0
1535,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * static,0
1536,<S2SV_ModStart> mq_ops ) ; mutex_lock ( & q -> lock ) ;,0
1537,<S2SV_ModStart> s ) { uint32 length ; struct stream packet = * s <S2SV_ModEnd> ; ber_parse_header (,0
1538,<S2SV_ModStart> var_hash ) ; zval_copy_ctor ( & dval ) ;,0
1539,<S2SV_ModStart> 1 ) { <S2SV_ModEnd> char * c2,0
1540,<S2SV_ModStart> OBJECT * obj <S2SV_ModEnd> ; if (,0
1541,"<S2SV_ModStart> int i_columns = NULL ; const char * header. s_read_header ( ) ; const char * header = NULL ; <S2SV_ModStart> ) ) { if (! s_check_remaining_remaining_bytes ( s ) ) return NULL ; <S2SV_ModStart> ) ; } if (! s_read_remaining ( s, value ) ) return false ; <S2SV_ModStart> return NULL ; } <S2SV_ModEnd> return 0 ;",0
1542,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct <S2SV_ModEnd> env * env =,0
1543,<S2SV_ModStart> skb_valid_header ( skb ) <S2SV_ModEnd> ; if (,0
1544,<S2SV_ModStart> cm -> segfeature_active <S2SV_ModEnd> ) ) {,0
1545,<S2SV_ModStart> ; if (! defined ( CMD_SUPPORTED ) ) return - 1 ; if ( <S2SV_ModStart> ) ) { return 1 ; } <S2SV_ModStart> ) ; } return 1 <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>,0
1546,<S2SV_ModStart> log_log ( LOG_ERROR <S2SV_ModEnd> ) ; },0
1547,<S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 4 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 4 ; case 4 : context -> pass < 4 ; break ; case 4 : context -> curY = i -> posY + 4 ; break ; case 4 : context -> curY + 4 ; case 4 : context -> curY = i -> posY + 4 ; break ; case 4 : context -> curY = 0 ; case 4 : context -> curY = 0 ; break ; case 4 : context -> curY = 0 ; case 4 : context -> curY = 0 ; break ; case 4 : context -> curY = i -> posY + 4 ; break ; case 4 : context -> curY + 4 : context -> curY = 0 ; break ; case 4 : context -> curY = i -> posY + 4 ; break ; case 4 : context -> curY + 4 : context -> curY = i -> posY + 4 ; break ; case 4 : context -> posY + 4 : context -> curY + 4 <S2SV_ModEnd> break ; case,0
1548,<S2SV_ModStart> ) { memcpy <S2SV_ModEnd> ( x ->,0
1549,"<S2SV_ModStart> ) ; } smb_ofile_flush <S2SV_ModEnd> ( sr, <S2SV_ModStart> f_mutex ) ; smb_ofile_flush <S2SV_ModEnd> ( sr,",1
1550,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> uV_null> static <S2SV_ModStart> if ( uv_char * buf, size_t u_char * buf <S2SV_ModStart> * s ; if ( len == 0 ) return - 1 ; if ( len ) return - 1 ; <S2SV_ModStart> * 2 ; if ( len == 0 ) return - 1 ; <S2SV_ModStart> char * s ; if ( len ) return - 1 ; <S2SV_ModStart> sx"" ) ; if ( len = strlen ( u_char * outbuf ) return - 1 ; if ( uv_char * buf ) return - 1 ; if ( u_int ) return - 1 ; <S2SV_ModStart> ) ) ; if ( len == 0 ) return - 1 ; if ( len ) return - 1 ; <S2SV_ModStart> s = len ; if ( u_int ) return - 1 ; if ( u_char * buf ) return - 1 ; if ( u_int ) return - 1 ; <S2SV_ModStart> == u_char * end_char * buf <S2SV_ModEnd> ) ) return AVERROR_INVAL <S2SV_ModEnd> ; } <S2SV_ModStart> == 0 ) { if (! u_char * buf <S2SV_ModEnd> ) ) return AVERROR_INVAL ; <S2SV_ModStart> ++ ) { if ( len",0
1551,"<S2SV_ModStart> ; if ( * cp == '\\0' || <S2SV_ModEnd> strchr ( cp <S2SV_ModStart> )!= NULL || <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> ( cp, ""."" ) == 0 || strcmp ( cp, <S2SV_ModStart> ) == 0 <S2SV_ModEnd> ) { run_err",1
1552,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; char * <S2SV_ModStart> 0 ] ; int ret <S2SV_ModEnd> = 0 ; <S2SV_ModStart> ( outname + <S2SV_ModEnd> ) { int <S2SV_ModStart> = '\\0' ; char * num <S2SV_ModStart> out ) { if ( numpos < 4 ) { return NULL ; } char * <S2SV_ModStart> out ) { if ( <S2SV_ModEnd> == '\\0' ) <S2SV_ModStart> + 1 ) { <S2SV_ModStart> out ; } outbuf [ 0 ] = '\\0' ; } outbuf [ 0 ] = '\\0' ; char * ptr = '\\0' ; char * sizeof ( * out ) ; if (! strlen ( out ) ) { <S2SV_ModStart> out ; } else { if ( outbuf [ 0 ] = '\\0' ; } outbuf [ 0 ] = '\\0' ; } outbuf [ i ] = 'c%s"" <S2SV_ModEnd> f ( char <S2SV_ModStart> + 1 ] ) { if (! strlen ( out ) ( char * ) ( strlen ( out ) ) { <S2SV_ModStart> out ) ; } outbuf [ i ] = '\\0' ; } outbuf [ i ] = '\\0' ; } strlen ( outbuf [ 1 ] ) { if (! strlen ( out ) )",0
1553,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : ms -> elf_notes_max = * ( const size_t * ) val ; return 0 ;,0
1554,"<S2SV_ModStart> segs ) { <S2SV_ModEnd> uint32 hash, <S2SV_ModStart>, id ; if ( unlikely ( siphash_key_is_zero ( & net -> ipv4. ip_id_key ) ) ) get_random_bytes ( & net -> ipv4. ip_id_id_key <S2SV_ModEnd>, sizeof ( <S2SV_ModStart>, id ) <S2SV_ModEnd> ) ; hash =",0
1555,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_type, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""col_offset\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> type"" ) ; return 1 ; } else { int res <S2SV_ModEnd> ; res = <S2SV_ModStart> ) ; } if ( res!= 0 ) { return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( tmp ) ; return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, obj, & PyId_name, & PyId_type_type, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( tmp ) ; } else { return 1 ; } if ( tmp == NULL ) { return 1 ; }",0
1556,"<S2SV_ModStart> void write_inter_mode ( vpx_writer <S2SV_ModEnd> * w,",0
1557,"<S2SV_ModStart> ctl -> pw, "".chfn""",1
1558,<S2SV_ModStart> { if ( max_length < sizeof ( struct ieee80211_radiotap_header ) ) return - EINVAL ; if ( <S2SV_ModStart> iterator -> _rtheader + sizeof ( uint32_t ),1
1559,<S2SV_ModStart> list ) ; <S2SV_ModEnd> } if ( <S2SV_ModStart> unlock ) { mutex_unlock ( & path -> namelen ) ; goto out_unlock ; } list_unlock <S2SV_ModEnd> ( & <S2SV_ModStart> list ) ; <S2SV_ModEnd> mutex_unlock ( &,0
1560,<S2SV_ModStart> == 0 ),0
1561,"<S2SV_ModStart> return ; } if ( input <= 0.0 || output <= 0.0 ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Gamma <S2SV_blank> values <S2SV_blank> should <S2SV_blank> be <S2SV_blank> positive"" ) ; RETURN_FALSE ; }",1
1562,<S2SV_ModStart>!= NULL ) <S2SV_ModEnd> ; if (,0
1563,<S2SV_ModStart> ; if (! dev -> cmd ) return ; if (,0
1564,"<S2SV_ModStart> else if ( g_str_has_prefix <S2SV_ModEnd> ( arg,",0
1565,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_frame ( VP9_COMMON <S2SV_ModStart> * cm ) { VP9_COMMON * cm = & cm -> tile_info. mbmi_cols <S2SV_ModEnd> ) ; int <S2SV_ModStart> ++ ) { VP9_COMMON <S2SV_ModStart> ++ ) { VP9_COMMON <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; } memset <S2SV_ModEnd> ( & cm -> <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & cm <S2SV_ModStart> ) ) ; } memset <S2SV_ModEnd> ( & cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & cm -> <S2SV_ModStart> ++ ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; } memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart>, 0, <S2SV_ModEnd> tile_end ) ;",0
1566,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, NULL ) <S2SV_ModStart> ; # if CONFIG_VP9_HIGHBITDEPTH if ( cm -> frame_bufs ) { VP9_COMMON * const cm = & cm -> frame_parallel_decode ) ; cm -> frame_parallel = NULL ; cm -> frame_parallel = NULL ; <S2SV_ModStart> cm -> frame_parallel = NULL ; cm -> frame_parallel_decoder = NULL ; cm -> frame_parallel_decodex = 0 ; cm -> frame_parallel = NULL ; cm -> frame_decoder = 0 ; cm -> frame_show = 0 ; cm -> frame_show = 0 ; cm -> frame_parallel = NULL ; cm -> frame_decoder = NULL ; cm -> frame_decoder = cm -> frame_parallel_decode ) ; cm -> frame_show = NULL ; cm -> frame_show = NULL ; cm -> frame_parallel_decoder = 0 ; cm -> frame_decoder = 0 ; cm -> frame_threads <S2SV_ModStart> cm = NULL ; cm -> frame_decoder = NULL ; cm -> frame_show <S2SV_ModEnd> cm -> frame_",0
1567,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return NULL ;,0
1568,<S2SV_ModStart> conn ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1569,<S2SV_ModStart> -> count ; new_fpl -> user = get_uid ( fpl -> user ) ;,1
1570,<S2SV_ModStart> opt ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> ( opt -> opt ) <S2SV_ModEnd> ; if (,0
1571,"<S2SV_ModStart> int i, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_tree_tree <S2SV_ModEnd> ( w,",0
1572,"<S2SV_ModStart> ; vpx_codec_alg_priv_t flags ; vpx_t flags | VPX_CODEC_IMG_FMT_FMT_HIGHBITDEPTH if ( flags & VPX_CODEC_IMG_FMT_HIGHBITDEPTH ) { memset ( & VPX_IMG_FMT_HIGHBITDEPTH ) ; memset ( & dctx, 0, sizeof ( vpx_t ) ) ;",0
1573,"<S2SV_ModStart> int flags = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1574,<S2SV_ModStart> ) { struct user_namespace * user_ns = current -> mnt_ns ; struct user_namespace * user_ns = current -> mnt_ns -> mnt_ns -> mnt_ns ; <S2SV_ModStart> = user_namespace ( mnt <S2SV_ModEnd> ) ; if,0
1575,"<S2SV_ModStart>, & len, 0",1
1576,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = _mm_set1_epi16 ( ( int16_t ),0
1577,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1578,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ i,0
1579,"<S2SV_ModStart> byte * fout, int maxoffset <S2SV_ModStart> NYT, fout, maxoffset <S2SV_ModStart> NULL, fout, maxoffset",1
1580,"<S2SV_ModStart> * cpi, ThreadData * td, TileDataEnc * td <S2SV_ModEnd>, BLOCK_SIZE bsize, <S2SV_ModStart> x = & td <S2SV_ModEnd> -> mb ; <S2SV_ModStart> x = & td <S2SV_ModEnd> -> mb ; <S2SV_ModStart> -> e_mbd ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH const xd = & td -> mbmi_ext ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH vp9_x8_x8x8x8x8_denoiser_buf ( x, mi_row, mi_col, x -> mbmi_col, & x -> mbmi_row, mi_col ) ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( x -> flags & cm -> flags & YV12_FLAG_HIGHBITDEPTH ) { x -> flags = & YV12_HIGHBITDEPTH if ( x -> flags & YV12_FLAG & YV12_FLAG_HIGHBITDEPTH ) ; } else { x -> flags & YV12_",0
1581,<S2SV_ModStart> ; if ( bNum == NULL ) return - EINVAL ; if (,0
1582,<S2SV_ModStart> crypto ) { struct fscrypt * tp ; struct crypto_skcipher_skcipher * tfm = crypto_skcipher_skcipher_setkey ( tfm ) ; struct crypto_skcipher_skcipher * tfm = tfm -> skcipher_crypto_key ( ) ; <S2SV_ModStart> key ) ; if (! tfm -> has_key ) return - ENOKEY ; <S2SV_ModStart> ( crypto_skcipher_skcipher_crypto ) ; kfree ( crypto_skcipher_skcipher_skcipher_crypto ) ; kfree ( crypto_skcipher ) ;,0
1583,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1584,<S2SV_ModStart> uint8_t count ; if ( count > 1 ) { return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1585,<S2SV_ModStart> i > pos + delta <S2SV_ModStart> off + 1 <= pos + delta <S2SV_ModEnd> ) insn ->,1
1586,<S2SV_ModStart> case EXIT_REASON_INVEPT : case EXIT_REASON_INVVPID :,1
1587,<S2SV_ModStart> ; if ( * p == '\\0' &&,0
1588,<S2SV_ModStart> 0 ) { if ( length == NULL ) { <S2SV_ModStart> NULL ) ; },0
1589,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
1590,"<S2SV_ModStart> ++ r ; if <S2SV_ModEnd> ( pow ( <S2SV_ModStart>, dim ) <= entries ) return - 1 ; if <S2SV_ModEnd> ( ( int <S2SV_ModStart> dim ) ) > entries ) return - 1 <S2SV_ModEnd> ; return r",1
1591,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> x ), MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> ; } } return ( <S2SV_ModStart> dds_info, 16, exception ) ) <S2SV_ModEnd> ; } <S2SV_null>",0
1592,<S2SV_ModStart> ; if ( <S2SV_ModEnd> hdr ( skb,0
1593,<S2SV_ModStart> var_hash ) ; zval_copy_ctor ( & dval ) ;,0
1594,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL )",0
1595,<S2SV_ModStart> w ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1596,"<S2SV_ModStart> cfg ) { struct stat st ; int fd = - 1 ; <S2SV_ModStart> } else { fd = open ( file, O_RDONLY | O_CLOEXEC | O_NOFOLLOW | O_NOFOLLOW | O_CREAT | O_NOFOLLOW | O_CLOEXEC | O_NOFOLLOW ) ; close ( fd <S2SV_ModEnd> ) ; } <S2SV_ModStart> } if ( fd!= 0 && <S2SV_ModEnd> ) file",0
1597,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! f2fs_readonly (,1
1598,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
1599,<S2SV_ModStart> y1 ) { sprintf ( outputbuffer <S2SV_ModEnd> ( ( output,0
1600,<S2SV_ModStart> ELE2SV_null> <S2SV_null>,0
1601,<S2SV_ModStart> user ) ; <S2SV_ModEnd> return 0 ;,0
1602,<S2SV_ModStart> ) ) { memcpy <S2SV_ModEnd> ( cpi ->,0
1603,<S2SV_ModStart> == ARPHRD_ETHER ) { <S2SV_ModStart> ether_setup ) ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; },1
1604,"<S2SV_ModStart> * data ; struct stream packet = * s ; <S2SV_ModStart> ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""rdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } if (",0
1605,"<S2SV_ModStart> NULL, NULL <S2SV_ModEnd> ) ; # if",0
1606,<S2SV_ModStart> { if ( l == NULL ) break ; if (,1
1607,<S2SV_ModStart> } if ( ( <S2SV_ModStart> xWantedSize ) > 0 ) { xWantedSize = 0 ; } else { xWantedSize = 0 ; } <S2SV_ModEnd> } else {,0
1608,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1609,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1610,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpDiff ( TIFF <S2SV_ModStart> cc ) ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> stride ) )!= 0 ) return 0 <S2SV_ModStart> tmp ) ; return 1 ;,0
1611,<S2SV_ModStart> * s ; uint32 s ;,0
1612,<S2SV_ModStart> ; if ( <S2SV_ModEnd>!= 0 ),0
1613,"<S2SV_ModStart> length ) { ND_TCHECK2 ( * tptr, alen ) ;",0
1614,<S2SV_ModStart> { uint16 bitspersample = 1,0
1615,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1616,<S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> coef_probs [ ctx,0
1617,<S2SV_ModStart> * d ; int r ;,0
1618,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 0 ] = 0x87 ; state -> data [ 2 ] = 0x0 ; if ( dvb_usb_generic_rw ( d, state -> data, 3, state -> data, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> = 0xe ; state -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> ( d, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart> ""command <S2SV_blank> transfer <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; state -> data <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0xe ; state -> data",0
1619,<S2SV_ModStart> ; if (! sock_owned_by_user ( sk ) &&,0
1620,<S2SV_ModStart> ; int i <S2SV_ModEnd> ; if (,0
1621,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> int mi_row, <S2SV_ModStart> * const MACROBLOCKD * const MACROBLOCKD * const xd = vpx_mbd_tree <S2SV_ModEnd> ( xd, <S2SV_ModStart> mbd, vpx_prob <S2SV_ModEnd> ( xd, <S2SV_ModStart> mbd, xd <S2SV_ModEnd>, int <S2SV_ModStart> mbd, vpx_prob <S2SV_ModEnd> ) ; vpx_tree",0
1622,"<S2SV_ModStart>, buf, false <S2SV_ModEnd> ) ; }",0
1623,,0
1624,<S2SV_ModStart> out_free ) ; <S2SV_ModEnd> mutex_lock ( &,0
1625,<S2SV_ModStart> ; int i_len ; if ( flags & EXT4_I ( inode -> i_sb ) ) return - EINVAL ; if ( i_len > bs ) goto out ; <S2SV_ModStart> ; if ( iinfo <S2SV_ModEnd> ) { goto out,0
1626,"<S2SV_ModStart>, n ) ; if ( w == NULL ) return 0",1
1627,<S2SV_ModStart> i ++ ) { size_t id ; <S2SV_ModStart> ++ ; } <S2SV_ModEnd> if ( idx,0
1628,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) { VP9Decoder_interface ( ThreadData * tile_info, <S2SV_ModEnd> int i, <S2SV_ModStart> int i ; vpx_read_bit ( ) ; vpx_read_bit ( & tile_info -> tile_info. tile_data, & tile_info -> tile_data <S2SV_ModStart> 1 ) ; vpx_read_bit ( ) ; vpx_free ( & tile_data -> tile_info ) ; <S2SV_ModStart> ( & tile_info ) ; vpx_free ( & pbi <S2SV_ModEnd> ) ; }",0
1629,<S2SV_ModStart> ++ ) { <S2SV_ModEnd> if ( w,0
1630,<S2SV_ModStart> ; if ( copy_from ( sk ) ) return - EINVAL ; if (,0
1631,"<S2SV_ModStart> * seg ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( cm -> mi_colssegfeature_seg_active <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ; } memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> } else memset <S2SV_ModEnd> ( seg, <S2SV_ModStart> ) ; } memset <S2SV_ModEnd> ( rd_flag,",0
1632,<S2SV_ModStart> ; if ( protocol < 0 ||,0
1633,"<S2SV_ModStart> ( void ) TIFFGetFieldDefaulted <S2SV_ModEnd> ( in,",1
1634,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
1635,,0
1636,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1637,"<S2SV_ModStart> ""corrupt <S2SV_blank> BSON"" ) ; VALIDATE_TEST ( ""test59.bson"", BSON_VALIDATE_NONE, 9, BSON_VALIDATE_NONE, ""corrupt <S2SV_blank> BSON"" ) ;",1
1638,<S2SV_ModStart> ; if ( is_x00 ) return - EINVAL ; if (,0
1639,<S2SV_ModStart> ; ps_dec -> u2_total_mbs_num = 0 ; ps_dec ->,0
1640,<S2SV_ModStart> ) ) ; WARN_ON (! ( vma -> vm_flags & VM_MAYWRITE ) ) ;,0
1641,<S2SV_ModStart> ; if ( key_is_tiny ( keyring <S2SV_ModEnd> ) ) return,0
1642,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ),0
1643,<S2SV_ModStart> task ) { <S2SV_ModEnd> switch ( task,0
1644,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 0 ] = 0x87 ; state -> data [ 2 ] = 0x0 ; if ( dvb_usb_generic_rw ( d, state -> data, 3, state -> data, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> = 0xe ; state -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> ( d, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart> ""command <S2SV_blank> transfer <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; state -> data <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0xe ; state -> data",0
1645,,0
1646,<S2SV_ModStart> L ) ; g -> gcstate = GCSswpallgc ;,0
1647,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
1648,<S2SV_ModStart> sock = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> NULL_S2SV_null> <S2SV_null>,0
1649,"<S2SV_ModStart> int socket_socket = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, & server. socket, <S2SV_ModStart> struct sockaddr ) <S2SV_ModStart> struct sockaddr ) <S2SV_ModEnd> ; struct socket = <S2SV_ModStart> struct sockaddr ) ; <S2SV_ModEnd> if (! session",0
1650,<S2SV_ModStart> 0 ; } memset <S2SV_ModEnd> ( cpi ->,0
1651,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
1652,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
1653,"<S2SV_ModStart> ( ndo, ""%s"", mldv2_tstr <S2SV_ModEnd> ) ) ;",1
1654,"<S2SV_ModStart> ctx, expr -> unary. child",1
1655,"<S2SV_ModStart> 1 ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1656,"<S2SV_ModStart> int mptctl_eventquery ( MPT_ADAPTER * ioc, <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } dctlprintk",0
1657,"<S2SV_ModStart> < 0 ) { unsigned char * p = ( unsigned char * ) RelinquishMagickMemory ( CorruptImageError, ""ImproperImageHeader"" ) ; data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> image = ( unsigned char * ) RelinquishMagickMemory ( data ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( data ) { data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; ThrowReaderException ( CorruptImageError, ""MemoryAllocationFailed"" ) ; } else { data = ( unsigned char * ) RelinquishMagickMemory ( unsigned char * ) RelinquishMagickMemory ( unsigned char * ) RelinquishMagickMemory ( data ) ; ThrowReaderException ( CorruptImageError, ""MemoryAllocationFailed"" ) ; x = ( unsigned char * ) RelinquishMagickMemory ( unsigned char * ) RelinquishMagickMemory ( data ) RelinquishMagickMemory ( data ) ; ThrowReaderException ( CorruptImageError, ""ImproperImage",0
1658,<S2SV_ModStart> 0 ) { jas_uchar <S2SV_ModEnd> buf [ JAS_CAST (,0
1659,"<S2SV_ModStart> [ i ], '\\0' <S2SV_ModEnd> ) ; }",0
1660,"<S2SV_ModStart> int v = vpx_reader <S2SV_ModEnd> ( r ) <S2SV_ModStart> if (! vpx_read_bit <S2SV_ModEnd> ( r ) <S2SV_ModStart> ) return vpx_read_bit <S2SV_ModEnd> ( r,",0
1661,<S2SV_ModStart> ; int is_valid = ( error == GIT_OK ) <S2SV_ModStart> giterr_clear ( ) <S2SV_ModEnd> ; error =,1
1662,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs,",0
1663,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> cm -> fc = vpx_read <S2SV_ModEnd> ( r,",0
1664,<S2SV_ModStart> ) ) ; return 0 ;,0
1665,"<S2SV_ModStart> = 1 ; # if CONFIG_VP9_HIGHBITDEPTH vpx_bit_depth = VP9EncoderConfig_interface <S2SV_ModEnd> ( ) <S2SV_ModStart> config -> codec_interface <S2SV_ModEnd> ( ),",0
1666,<S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( p + 1 ) ;,0
1667,<S2SV_ModStart> NULL ) ; <S2SV_ModEnd> return 0 ;,0
1668,<S2SV_ModStart> = other ; unix_dgram_peer_wake_disconnect_wake_wakeup ( sk_peer ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> } if ( <S2SV_ModStart> ) ) { unix_dgram_peer_wake_disconnected ( ) ; return - EINVAL ; } <S2SV_ModEnd> } if (,0
1669,<S2SV_ModStart> = key ; <S2SV_ModEnd> } if (,0
1670,<S2SV_ModStart> ; if ( skb -> len < sizeof ( struct nlattr ) ) return 0 ; if ( <S2SV_ModStart> -> nla_len > <S2SV_ModEnd> skb -> len <S2SV_ModStart> skb -> len - A,1
1671,"<S2SV_ModStart> ]. size ; if ( ~ length < 16 ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" )",1
1672,<S2SV_ModStart> ;=\'<S2SV_null> <S2SV_null> <S2SV_null>,0
1673,"<S2SV_ModStart> -> cac_id, serial -> len <S2SV_ModEnd> ) ; SC_FUNC_RETURN",1
1674,<S2SV_ModStart> ; # endif tok -> type_comments = 0 ;,0
1675,,0
1676,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return NULL ;,0
1677,"<S2SV_ModStart> ; buff [ MIN ( ( size_t ) r, ( sizeof buff ) - 1 ) <S2SV_ModEnd> ] = '\\0'",1
1678,<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( dp ->,0
1679,<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> (! addr ||! addr || count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> ) ; } if ( ret > ( ssize_t ) addrlen ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
1680,,1
1681,"<S2SV_ModStart>, * s <S2SV_ModEnd> ) ; if",0
1682,<S2SV_ModStart> len ) { struct ipv6_txoptions * opt_to_free = NULL ; <S2SV_ModStart> ( flowlabel ) ; opt_to_free = rcu_dereference (,0
1683,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 0x4SV_null> <S2SV_null> static <S2SV_ModStart> 0x4SV_null> static YV_BUFSIZE <S2SV_ModEnd>, map_size ; <S2SV_ModStart> 0 ) { if ( strn"" )!= 0 ) { <S2SV_ModStart> 1 ) ; goto out ; } <S2SV_ModStart> - 1 ; } <S2SV_ModStart> ) ) ; } if ( strcpy ( ""Unknown <S2SV_blank> file\\n"" )!= 0 ) { <S2SV_ModStart> = '\\n"" ) ; goto out ; } <S2SV_ModStart> case '\\n"" ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> 1 ) ) { goto out ; } <S2SV_ModStart> ) ) ; } if ( buf [ sizeof ( size ] ) { <S2SV_ModStart> ) ) ; } <S2SV_ModStart> ++ ) { if (! buf ) { if ( idx == 0 ) { <S2SV_ModStart> 1 ) { goto out ; } <S2SV_ModStart> 1 ) ; } if ( strcmp ( ""file <S2SV_blank> to <S2SV_blank> x"" ) ; return 1 ; } <S2SV_ModStart> ++ ) { size = '\\n"" ) ; } <S2SV_ModStart> = '\\n"" ) ; goto out ; } if ( idx < sizeof ( buf ) { if ( buf ) { if ( buf )",0
1684,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPDRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPDRL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( dm9000WriteReg ( DM9000_EPCR, DM9000_EPDRL <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPDRL <S2SV_ModEnd> ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; }",0
1685,"<S2SV_ModStart>, buffer, t2p -> tiff_datasize,",1
1686,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",0
1687,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_decode ( NSC_CONTEXT <S2SV_ModStart> UINT32 ) ; if (! context ) return FALSE <S2SV_ModStart> ; # endif return FALSE ; <S2SV_ModEnd> ; } <S2SV_null>,0
1688,<S2SV_ModStart> ; if ( inode -> i_sb ) return AVER ; if (,0
1689,<S2SV_ModStart> new_parent ) { <S2SV_ModEnd> __ptrace_parent ( current,0
1690,<S2SV_ModStart> NULL ) ; <S2SV_ModEnd> return 0 ;,0
1691,<S2SV_ModStart> cnt ) ; if ( c -> session == NULL ) { private -> session = NULL ; },0
1692,"<S2SV_ModStart> size = INT_MAX ; if ( unlikely (! access_ok ( VERIFY_WRITE, buff, size ) ) ) return - EFAULT",0
1693,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> vpx_opt_mv_sse <S2SV_ModEnd> * mv, <S2SV_ModStart> * mv, <S2SV_ModStart> * mv, mbmi_sf ) ; memset <S2SV_ModEnd> ( mv, <S2SV_ModStart>, mv, <S2SV_ModStart> mv_sf ) ; memset <S2SV_ModEnd> ( mv, <S2SV_ModStart> * mv, mv_sf -> <S2SV_ModStart> mv, mv_sf -> mv_sf -> mv_sf. mv_sf ) ; memset <S2SV_ModEnd> ( mv, <S2SV_ModStart> mv, mv_sf -> <S2SV_ModStart>, cpi, mv_sf -> <S2SV_ModEnd>, mv_sf -> <S2SV_ModStart>, mv_sf -> <S2SV_ModStart> mv_mv_sf -> <S2SV_ModEnd> best_ref_ref_mv, <S2SV_ModStart> ) ; } } memset <S2SV_ModEnd> ( cpi,",0
1694,<S2SV_ModStart> } hdr =,0
1695,,0
1696,"<S2SV_ModStart> ( msg_name && msg_name && <S2SV_ModStart> -> name, msg_name, msg_name,",0
1697,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
1698,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> * pixel_info =",0
1699,<S2SV_ModStart> ( r -> <S2SV_ModEnd> ) ) return,0
1700,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1701,<S2SV_ModStart> client -> client_id ) { <S2SV_ModEnd> if ( client <S2SV_ModStart> connected ) ; },0
1702,<S2SV_ModStart> state ) { switch ( unlikely <S2SV_ModEnd> ) ; else,0
1703,<S2SV_ModStart> out_free ) ; } else {,0
1704,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1705,<S2SV_ModStart> old_dentry ) ; <S2SV_ModEnd> if ( flags,0
