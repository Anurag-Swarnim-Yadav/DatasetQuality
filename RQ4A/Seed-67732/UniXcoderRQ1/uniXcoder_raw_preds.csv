,raw_predictions,correctly_predicted
0,"<S2SV_ModStart> if (! valid_hex ( nonce1 ) <S2SV_ModEnd> ) { applog <S2SV_ModStart> ( LOG_INFO, ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> valid <S2SV_blank> nonce1 <S2SV_blank> in <S2SV_blank> initiate_stratum"" <S2SV_ModEnd> ) ; free <S2SV_ModStart> ; if ( n2size < 2 || n2size > 16 <S2SV_ModEnd> ) { applog <S2SV_ModStart> ( LOG_INFO, ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> valid <S2SV_blank> n2size <S2SV_blank> in <S2SV_blank> initiate_stratum"" <S2SV_ModEnd> ) ; free",1
1,"<S2SV_ModStart> case EAP_FRAME_TYPE_PACKET : ND_TCHECK_8BITS ( tptr ) ; <S2SV_ModStart> * ( tptr ) ; ND_TCHECK_8BITS ( tptr + 2 <S2SV_ModStart> 2 ) { ND_TCHECK_8BITS ( tptr + 2 ) ; <S2SV_ModStart>, ""unknown"", subtype ), subtype <S2SV_ModEnd> ) ) ; <S2SV_ModStart> len ) { ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> case EAP_TYPE_TTLS : ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> case EAP_TYPE_TLS : ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> ) ) { ND_TCHECK_32BITS ( tptr + 5 ) ; <S2SV_ModStart> case EAP_TYPE_TTLS : ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> case EAP_TYPE_TLS : ND_TCHECK_32BITS ( tptr + 5 ) ; <S2SV_ModStart> ) ) { ND_TCHECK_32BITS ( tptr + 6 ) ; <S2SV_ModStart> ) ) ;",0
2,<S2SV_ModStart> ; return 0 <S2SV_ModEnd> ; } return,0
3,<S2SV_ModStart> - EINVAL ; goto fail <S2SV_ModEnd> ; } if,0
4,<S2SV_ModStart> if ( ( tnl_hdr <S2SV_ModEnd> ( skb ) <S2SV_ModStart> skb ) < 0 ||,0
5,"<S2SV_ModStart>, offset ; if ( avio_feof ( f ) ) { index -> item_count = 0 ; av_freep ( & index -> items ) ; return AVERROR_INVALIDDATA ; }",1
6,<S2SV_ModStart> * tpg ; u16 <S2SV_ModEnd> tpgt ; int <S2SV_ModStart> ; if ( kstrtou16 <S2SV_ModEnd> ( name + <S2SV_ModStart> ) || tpgt >= VHOST_SCSI_MAX_TARGET <S2SV_ModEnd> ) return ERR_PTR,1
7,<S2SV_ModStart> writer ) { <S2SV_ModEnd> break ; },0
8,"<S2SV_ModStart> { u32 data <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return ; kvm_read_guest_cached ( vcpu -> kvm, & <S2SV_ModEnd> vcpu -> arch <S2SV_ModStart>. apic -> vapic_cache, & data, sizeof ( u32 ) <S2SV_ModEnd> ) ; apic_set_tpr",1
9,<S2SV_ModStart> src ) ; __switch_to_tm ( src ) ; tm_recheckpoint_new_task ( src ) ;,1
10,<S2SV_ModStart> { if (! item ) <S2SV_ModEnd> c = c <S2SV_ModStart> -> next ; <S2SV_ModEnd> return c ;,0
11,"<S2SV_ModStart> ( sb, KERN_ERR,",1
12,"<S2SV_ModStart> ipv6_select_ident ( fptr, ( struct rt6_info * ) skb_dst ( skb )",1
13,"<S2SV_ModStart>, u64 nr <S2SV_ModEnd>, struct perf_sample_data <S2SV_ModStart>, regs, <S2SV_ModEnd> regs, regs",0
14,<S2SV_ModStart> < EXT2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct grub_block * buf <S2SV_ModStart> ext_block ; char * buf [ i ]. len <S2SV_ModEnd> ; char * <S2SV_ModStart> [ i ]. len <S2SV_ModEnd> ; break ;,0
15,"<S2SV_ModStart> fdct16 ( const tran_low_t * output ) { tran_low_t <S2SV_ModEnd> ( input, <S2SV_ModStart> out1 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> [ 8 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 7 ] = ( tran_low_t ) <S2SV_ModStart> 16 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 6 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 1 ] = ( tran_low_t )",0
16,<S2SV_ModStart> == 0 ) sanitize_dead_code ( env ) ; if ( ret == 0 ),1
17,"<S2SV_ModStart> int i ; if (! config -> sample_rate ) { strcpy ( wpc -> error_message, ""sample <S2SV_blank> rate <S2SV_blank> cannot <S2SV_blank> be <S2SV_blank> zero!"" ) ; return FALSE ; }",1
18,"<S2SV_ModStart> = 0 ; unsigned char sense_buffer [ SCSI_BUFFERSIZE ], * senseptr = NULL ; <S2SV_ModStart> cd -> device ; if ( cgc -> sense ) senseptr = sense_buffer <S2SV_ModStart> -> buflen, senseptr, senseptr, senseptr, cgc -> senseptr",0
19,<S2SV_ModStart> ( ( unsigned char <S2SV_ModEnd> ; # endif,0
20,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> vp9_filter_filter_level ( VP9EncoderConfig <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> vp9_filter_filter_null> <S2SV_null>,0
21,"<S2SV_ModStart> = 0 ; luaL_checkstack <S2SV_ModEnd> ( L,",0
22,"<S2SV_ModStart> int usehp, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> } else { vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> NULL ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> == NULL ) vpx_write <S2SV_ModEnd> ( w,",0
23,<S2SV_ModStart> ) ; return <S2SV_ModEnd> ralg -> seedsize,1
24,<S2SV_ModStart> ; if ( sockaddr_len < sizeof ( struct sockaddr_pppox ) ) return - EINVAL ; if (,1
25,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_256 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_SIZE_SIZE_128 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModEnd> request -> txBlockSzx <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_SIZE_256 ; } <S2SV_ModStart> ( ) ) ) ) { <S2SV_ModStart> ( ) ; },0
26,<S2SV_ModStart> char * fmtname ; int debug <S2SV_ModStart> = 0 ; debug = 0 ; <S2SV_ModStart> break ; case OPT_DEBUG : debug = atoi ( jas_optarg ) ; break ; case <S2SV_ModStart> ; } } jas_setdbglevel ( debug ) ; <S2SV_ModStart> ) ) { jas_stream_close ( instream ) ;,1
27,"<S2SV_ModStart> esr ) { void __user * regs ; void __user * pc = ( void __user * ) regs ; <S2SV_ModStart> esr ) ; info. esr <S2SV_ModEnd> ; info. <S2SV_ModStart>, regs, 0 <S2SV_ModEnd> ) ; info",0
28,"<S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ; ptr ++ ; length -= 2 <S2SV_ModStart> if ( length!= 2 ) return ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; length -= 2 ; if ( length!= 0 ) return ; <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ) ; }",0
29,"<S2SV_ModStart> intf ) { struct usb_host_interface * <S2SV_ModEnd> alt ; alt <S2SV_ModStart> ; if (! alt ) return - ENODEV <S2SV_ModEnd> ; return usb_set_interface <S2SV_ModStart> ( udev, alt -> <S2SV_ModEnd> desc. bInterfaceNumber <S2SV_ModStart> bInterfaceNumber, alt -> desc. bAlternateSetting",1
30,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> udf_pc_to_char ( struct <S2SV_ModStart> char * to, int tolen <S2SV_ModStart> = 0 ; int comp_len ; <S2SV_ModStart> case 5 : if ( tolen == 0 ) return - ENAMETOOLONG ; <S2SV_ModStart> case 5 : if ( tolen < 2 ) return - ENAMETOOLONG ; <S2SV_ModStart> case 5 : if ( tolen == 0 ) return - ENAMETOOLONG ; tolen -- <S2SV_ModStart> case 5 : if ( tolen == 0 ) return - ENAMETOOLONG ; <S2SV_ModStart> case 5 : if ( tolen == 0 ) return - ENAMEONG <S2SV_ModEnd> ; p += <S2SV_ModStart> += 2 ; tolen -- <S2SV_ModStart> case 5 : if ( tolen == 0 ) return - ENAMETOOLONG ; tolen -= 2 ; tolen -= comp_len ; tolen -= comp_len ; <S2SV_ModStart> += 2 ; tolen -- <S2SV_ModStart> case 5 : if ( tolen == 0 ) return - ENAMETOOLONG <S2SV_ModEnd> ; * p += <S2SV_ModStart> += 3 ; tolen -= 3 ; tolen -- <S2SV_ModStart> case 5 : if ( tolen == 0 ) return - ENAMETOOLONG <S2SV_ModEnd> ; } <S2SV_null>",0
31,<S2SV_ModStart> ==,0
32,<S2SV_ModStart> unsigned long flags ; if ( qid > NVMET_NR_QUEUES ) return NULL,1
33,"<S2SV_ModStart> -> bNum ; <S2SV_ModEnd> result = usb_control_desc <S2SV_ModStart> ) ) ; usb_set_altsetting ( interface, dev ) ; retval = usb_control_desc ( interface, & interface -> dev ) ; if ( retval == NULL ) { dev_err ( idev, ""invalid <S2SV_blank> minor <S2SV_blank> to <S2SV_blank> minor <S2SV_blank> minor <S2SV_blank> %d\\n"", NULL ) ; usb_dev ( interface -> dev, ""Invalid <S2SV_blank> minor <S2SV_blank> minor <S2SV_blank> %d <S2SV_blank> minor <S2SV_blank> minor <S2SV_blank> %d\\n"", interface -> dev -> dev, NULL ) ; goto error ; } dev_err ( & interface -> minor < sizeof ( interface ) ) { dev_err ( idev ) ; dev_err ( idev, ""Invalid <S2SV_blank> minor <S2SV_blank> minor <S2SV_blank> minor <S2SV_blank> to <S2SV_blank> minor <S2SV_blank> minor <S2SV_blank> minor <S2SV_blank> minor <S2SV_blank> minor <S2SV_blank> minor <S2SV_blank> minor <S2SV_blank> %d\\n"", dev -> dev -> dev, dev, NULL ) ; goto error ; } dev -> minor = interface -> minor ; dev_info ( & USB_MAJOR, NULL ; dev -> minor ++ ) ;",0
34,"<S2SV_ModStart>, j ) int vstart <S2SV_ModEnd> ; if (",0
35,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct key_get_keyring * dest_keyring <S2SV_ModStart>! dest_keyring ) { kfree ( dest_keyring ) ; <S2SV_ModStart> break ; } <S2SV_ModEnd> return keykey ;,0
36,<S2SV_ModStart> = create_spnego_ctx ( 1,1
37,"<S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_l2tpip <S2SV_ModEnd> ) ) return <S2SV_ModStart> ; if ( addr -> l2tp_family!= AF_INET <S2SV_ModEnd> ) return - <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> ret = - <S2SV_ModStart> ( sk ) ; if (! sock_flag ( sk, SOCK_ZAPPED ) ) goto out",1
38,<S2SV_ModStart>,0
39,"<S2SV_ModStart>, _ ( ""_Cancel"" ), GTK_RESPONSE_CANCEL ) ; gtk_dialog_set_default_response ( GTK_DIALOG ( dialog ), GTK_RESPONSE_CANCEL <S2SV_ModEnd> ) ; if <S2SV_ModStart>, _ ( ""Trust <S2SV_blank> and <S2SV_blank> _Launch"" ), GTK_RESPONSE_OK <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> g_signal_connect ( dialog",1
40,<S2SV_ModStart> ; str = g_strdup ( t <S2SV_ModEnd> ) ; if,0
41,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( attr,",0
42,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0x51 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> 0x51 <S2SV_blank> transfer <S2SV_blank> failed."" ) ; mutex_unlock ( & d -> data_mutex ) ; adap <S2SV_ModEnd> -> fe_adap [ <S2SV_ModStart> ; if ( adap <S2SV_ModEnd> -> fe_adap )",0
43,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
44,<S2SV_ModStart> } } } fix_google_param ( google_param ) ; fix_google_param ( google_param ) ; fix_google_param ( outFileName ) ;,0
45,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horAcc8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
46,"<S2SV_ModStart> tsample_t s ; uint16 bps = 0 ; ( void ) TIFFGetField ( in, TIFFTAG_BITSPERSAMPLE, & bps ) ; if ( bps!= 8 ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> can <S2SV_blank> only <S2SV_blank> handle <S2SV_blank> BitsPerSample=8 <S2SV_blank> in <S2SV_blank> %s"", ""cpContig2SeparateByRow"" ) ; return 0 ; }",1
47,"<S2SV_ModStart> ) ; struct hugepage_subpool * spool = ( struct hugepage_subpool <S2SV_ModEnd> * ) hugepage_subpool <S2SV_ModEnd>, 1 )",0
48,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) { return AVERROR_EOF ; } if (,1
49,<S2SV_ModStart> goto not_found ; if ( e - p > HOST_NAME_MAX - 1 ) goto not_found ;,0
50,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> bool <S2SV_ModEnd> generic_pipe_buf_get ( struct <S2SV_ModStart> buf ) { return try_get_page <S2SV_ModEnd> ( buf ->,1
51,"<S2SV_ModStart>, cp, ep2, map, nmap ) ; } else cp = ikev1_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) goto trunc ; } if <S2SV_ModStart> < ep2 ) <S2SV_ModEnd> ND_PRINT ( (",1
52,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",0
53,"<S2SV_ModStart> = TEMP_FAILURE_RETRY ( <S2SV_ModStart> , 0 )",0
54,<S2SV_ModStart> config -> pm_max_requests ; fpm_globals. listening_socket = dup ( wp -> listening_socket ),1
55,"<S2SV_ModStart> * twop, const TWO_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> * twopass, TWO_PASS_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> 0 ) { const TWO_PASS_PASS <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; int ref_frame_boost = <S2SV_ModEnd> ( twopass, <S2SV_ModStart> ( twop -> stats_in_frame_rate ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> } } } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
56,<S2SV_ModStart> 0 ; } err = handle -> h_err ; <S2SV_ModStart> h_transaction ) { rc <S2SV_ModEnd> = jbd2_journal_stop ( <S2SV_ModStart> ) ; return err? err : rc <S2SV_ModEnd> ; } sb <S2SV_ModStart> t_journal -> j_private <S2SV_ModEnd> ; rc =,1
57,<S2SV_ModStart> ; if ( <S2SV_ModEnd> inode -> offset,0
58,<S2SV_ModStart> valuelen ) ; args -> rmtvaluelen = args -> valuelen ;,1
59,<S2SV_ModStart> ( name ) <S2SV_ModEnd> ; if (,0
60,"<S2SV_ModStart> 2 ) { ND_TCHECK2 ( * tptr, 2 ) ; <S2SV_ModStart> len - 2 ; if ( len < stlv_len ) goto trunc ; ND_TCHECK2 ( * ( tptr ), stlv_len ) <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ; stlv_len = stlv_len - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ; <S2SV_ModStart> tmp ) { if ( stlv_len < ISIS_SUBTLV_SPB_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> len = len - ISIS_SUBTLV_SPB_SPB_INSTANCE_MIN_LEN ; stlv_len = stlv_len <S2SV_ModStart> break ; } if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> break ; } stlv_len = st",0
61,"<S2SV_ModStart> } if ( body_size > MSG_END_TOO_BIG ( c, sizeof ( c ) )",0
62,"<S2SV_ModStart> flags ) ; memset ( & ddi, 0, sizeof ( ddi ) ) ;",1
63,<S2SV_ModStart> == 12 && ( <S2SV_ModStart> flags & TH_SYN ),1
64,"<S2SV_ModStart> -> ipc_socket ; <S2SV_ModEnd> lxc_labelfd ; <S2SV_ModStart> int fd ; <S2SV_ModEnd> lfd = payload <S2SV_ModStart> { ERROR ( ""Error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> process <S2SV_blank> (0): <S2SV_blank> using <S2SV_blank> (0): <S2SV_blank> %s."", strerror ( errno ) <S2SV_ModEnd> ) ; shutdown <S2SV_ModStart> { ERROR ( ""Error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> process <S2SV_blank> process <S2SV_blank> for <S2SV_blank> %s."", strerror ( errno ) <S2SV_ModEnd> ) ; shutdown <S2SV_ModStart> ( errno ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; } status = lsm_label ( ipc_socket, SHUT_RDWR ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; if ( ( ipc_socket, SHUT_RDWR ) == 0 ) { ERROR ( ""Error <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> receive <S2SV_blank> process <S2SV_blank> process <S2SV_blank> from <S2SV_blank> process <S2SV_blank> %s"", SHUT_RDWR ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; } status = ( ( - 1 ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; ret = lsm_set_set_set ( - 1 ) ; } status = l",0
65,<S2SV_ModStart> = 0 ; char * line = get_pktlen <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( line + 4 <S2SV_ModEnd> ) ptr <S2SV_ModStart> ) return 0 <S2SV_ModEnd> ; ptr =,0
66,"<S2SV_ModStart> ( header -> biBitCount == 0 ) { fprintf ( stderr, ""Error, <S2SV_blank> invalid <S2SV_blank> biBitCount <S2SV_blank> %d\\n"", 0 ) ; return OPJ_FALSE ; } if ( header ->",1
67,<S2SV_ModStart> NULL ; } sas_probe_devices ( port ) ;,1
68,<S2SV_ModStart> 0 ) { if ( image -> colors < tga_info. colormap_index ) image -> colors = tga_info. colormap_index ;,1
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,"<S2SV_ModStart> ENOBUFS ; } memset ( & line, 0, sizeof ( line ) ) ;",1
71,"<S2SV_ModStart> arg ) { int ret ; ret = scsi_verify_blk_ioctl ( bd, cmd ) ; if ( ret < 0 ) return ret ;",1
72,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_,0
73,<S2SV_ModStart> * ureq ; unsigned <S2SV_ModStart> return - EFAULT ; if ( req_len <,0
74,"<S2SV_ModStart> int m ; if ( n < 0 ) { jas_deprecated ( ""negative <S2SV_blank> count <S2SV_blank> for <S2SV_blank> jas_stream_pad"" ) ; }",1
75,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA,0
76,<S2SV_ModStart> av_log ( mxf -> fc,1
77,"<S2SV_ModStart> mntent, path, rootfs",1
78,<S2SV_ModStart> + 10 ; if ( psf -> fileoffset < psf -> filelength ) { <S2SV_ModStart> ; } ; } ;,1
79,<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( p + l2info -> cookie_len ) ;,1
80,<S2SV_ModStart> NF_STOLEN ; return err == 0? NF_ACCEPT : NF_DROP <S2SV_ModEnd> ; } <S2SV_null>,1
81,"<S2SV_ModStart> * up ; int klen, ulen ; <S2SV_ModStart> rta ) ; klen = <S2SV_ModEnd> xfrm_replay_state_esn_len ( up <S2SV_ModStart> ( up ) ; ulen = rcu_replay_state_esn_len ( up ) > klen ( klen <S2SV_ModEnd> ) ; pp",0
82,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> ; } } io -> io_cleanup = io_cleanup ;,0
83,<S2SV_ModStart> break ; } switch ( size_t value & 0,0
84,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> key_length ) ),0
85,"<S2SV_ModStart> ( buf = jas_alloc3 ( bufsize, numcols <S2SV_ModEnd>, sizeof (",1
86,<S2SV_ModStart> vpx_codec_alg_priv_t *,0
87,"<S2SV_ModStart> size ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""GSO <S2SV_blank> size <S2SV_blank> must <S2SV_blank> not <S2SV_blank> be <S2SV_blank> zero.\\n"" ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> gso. type ) ; netbk_fatal_tx_err ( vif",1
88,"<S2SV_ModStart> * object, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void * <S2SV_ModStart> < 0 ) <S2SV_ModEnd> bitmap_pos = ext_index_add_object <S2SV_ModStart> name ) ; <S2SV_ModEnd> bitmap_set ( base",1
89,"<S2SV_ModStart> xfr_cmd, fname <S2SV_ModEnd> ) ; free",1
90,<S2SV_ModStart> mixer ) { snd_usb_mixer_disconnect ( mixer ) ;,1
91,<S2SV_ModStart> ) { struct packet_rollover * rollover = NULL ; struct <S2SV_ModStart> EINVAL ; } mutex_lock ( & fanout_mutex ) ; err = - EINVAL ; <S2SV_ModStart> -> rollover ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> rollover ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> atomic_long ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num <S2SV_ModStart> atomic_long_long_set ( & <S2SV_ModEnd> rollover -> num <S2SV_ModStart> atomic_long_long_long_set ( & <S2SV_ModEnd> rollover -> num <S2SV_ModStart> atomic_long_long_set ( & <S2SV_ModEnd> rollover -> num <S2SV_ModStart> atomic_long_long_set ( & <S2SV_ModEnd> rollover -> num_failed <S2SV_ModStart> 0 ) ; po -> rollover = rollover ; po -> rollover = NULL ; <S2SV_ModEnd> return err ;,0
92,<S2SV_ModStart> ; np -> ipv6_txoptions <S2SV_ModEnd> = NULL ;,0
93,<S2SV_ModStart> ret ; } page_size = 0 ;,0
94,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
95,<S2SV_ModStart> ; if ( dh <S2SV_ModEnd> == NULL ),0
96,"<S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_ECON1 <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_ECON1 <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd> ) ; enc28J60_ECON1 <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd> ) ; enc28j60WriteReg ( <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_ECON1 <S2SV_ModEnd> ) ; enc28j60WriteReg ( interface <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_EIRL <S2SV_ModEnd> ) ; enc28j60WriteReg ( <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_ECON1_ETH <S2SV_ModEnd> ) ) <S2SV_ModStart> ( interface, ENC28J60_ETH <S2SV_ModEnd>",0
97,<S2SV_ModStart> value ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,0
98,<S2SV_ModStart> if (! page_name_get_page ( page ) ) { <S2SV_ModStart> } else { file = <S2SV_ModEnd> if ( page,0
99,"<S2SV_ModStart> ; if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) ) <S2SV_ModEnd> { ret = <S2SV_ModStart> inode, EXT4_STATE_DIO_UNWRITTEN ) ; if ( ext4_should_dioread_nolock ( inode ) ) set_buffer_uninit ( bh_result <S2SV_ModStart> } if ( ( flags & EXT4_GET_BLOCKS_CONVERT ) <S2SV_ModEnd> ) { ret",1
100,<S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ;,1
101,"<S2SV_ModStart> if (! caller_may_see_dir ( fc -> pid, controller, cgroup ) ) { ret = - ENOENT ; goto out ; } if (!",1
102,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> int int mb_adj_width_low_t <S2SV_ModStart> ( int mb ; # if CONFIG_VP8_HIGHBITDEPTH int mb ; # if CONFIG_VP8_HIGHBITDEPTH int mb_depth = 0 <S2SV_ModStart> ( 16 ) mb_width + mb -> uv_width + mb_stride <S2SV_ModEnd> ( 16, <S2SV_ModStart> ( 8 ) ; memcpy <S2SV_ModEnd> ( source ->",0
103,"<S2SV_ModStart> ) ) { memset ( ptr, 0, sizeof ( ptr ) ) ;",0
104,"<S2SV_ModStart> : if (! cap_issubset ( new -> cap_permitted, old -> cap_permitted ) ) bprm -> per_clear |= PER_CLEAR_ON_SETID ; if (",1
105,"<S2SV_ModStart> ) { struct mb2_cache_entry * ce = mb2_cache_cache_entry * ce <S2SV_ModEnd> ; struct mb2_cache <S2SV_ModStart> int error ; <S2SV_ModEnd> mb_cache_entry * ce = mb2_cache <S2SV_ModStart> ( ext4_mb_cache, hash <S2SV_ModEnd>, bh -> <S2SV_ModStart> bh -> b_hash ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> error ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ( bh, ""inserting <S2SV_blank> [%x]"" <S2SV_ModEnd>, hash ) <S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
106,"<S2SV_ModStart>, rlen, r_socket <S2SV_ModEnd> ) ; }",0
107,<S2SV_ModStart> tf = ( <S2SV_ModEnd> luaY_parser ) (,1
108,<S2SV_ModStart> ; int err ; if ( protocol < 0 || protocol >= IPPROTO_MAX ) return - EINVAL,1
109,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> opt.",1
110,"<S2SV_ModStart> ; dl = kzalloc <S2SV_ModEnd> ( size,",1
111,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static u_int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> * tptr, const u_int len, const u_int len, const <S2SV_ModStart> * msg ; ND_TCHECK_8BITS ( * tptr ) ; if ( * tptr!= 0 ) { ND_TCHECK2 ( * tptr, sizeof ( rpki_rtr_pdu ) ) ; return len ; } if ( rpki_pdu_len < sizeof ( rpki_rtr_pdu ) ) { ND_PRINT ( ( ndo, "")"" ) ) ; goto invalid ; } if ( len < sizeof ( rpki_rtr_pdu ) || ( rpki_pdu ) ) { ND_TCHECK2 ( * tptr, sizeof ( rpki_rtr_pdu ) ) ; goto invalid ; } ND_TCHECK2 ( * tptr, sizeof ( rpki_rtr_pdu ) ) ; <S2SV_ModStart> length ) ; if ( pdu_len < sizeof ( rpki_rtr_pdu ) || pdu_len!= NULL ) goto invalid <S2SV_ModStart> case R",0
113,"<S2SV_ModStart> ; int n <S2SV_ModEnd> ; skb -> <S2SV_ModStart> rose_facilities_struct ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> data + ROSE_CALL_REQ_FACILITIES_OFF, skb -> len - ROSE_CALL_REQ_FACILITIES_OFF, <S2SV_ModEnd> & facilities )",1
114,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr,1
115,<S2SV_ModStart> } if ( opt_ref &&,0
116,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & acl <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret <S2SV_ModEnd> ) goto out_free",0
117,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; int ret <S2SV_ModStart> ) ; } o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> cl_nodes_lock ) ; o2nm_unlock_subsystem ( ) ;,1
118,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; break",1
119,"<S2SV_ModStart> == '/' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> is <S2SV_blank> absolute"" ) ; return ( ARCHIVE_FAILED ) ; } separator = * src ++ ; } <S2SV_ModEnd> for ( ;",1
120,"<S2SV_ModStart> TPM_RC tpm_kdfa ( <S2SV_ModEnd>  TPM_HASH md, <S2SV_ModStart>  TPM2B_ALG_HASH hashAlg ) { TPM2B_DIGEST <S2SV_ModEnd> tpm2bBits <S2SV_ModStart> ; TPM_RC rc = TPM_RC_DIGEST * md ; if (! HMAC_CTX_init ( hashAlg ) ) { LOG_ERR ( ""Algorithm <S2SV_blank> failed: <S2SV_blank> %s"", hashAlg ) ; return TPM_RC_HASH ; } TPM_DIGEST * md = TPM_DIGEST * md ; TPM2B_DIGEST * md = TPM_RC_HASH ; int rc = TPM_RC_HASH ; int rc = TPM_DIGEST * md ; if (! rc!= NULL ) { TPM_DIGEST * md = TPM_RC_DIGEST * ) ; return TPM2B_DIGEST ; } return TPM2B_DIGEST ;",0
121,"<S2SV_ModStart> inmem )? jas_safe_size_t ret <S2SV_ModStart> 0 )? jas_safe_size_mul2 <S2SV_ModEnd> ( 0,",0
122,<S2SV_ModStart> s ) { if ( s == 0 ) return ( ( void * ) NULL ) ;,1
123,<S2SV_ModStart> ; if ( WARN_ON_ONCE (! ib_safe_file_access ( fp ) ) ) return - EACCES ; if (,1
124,"<S2SV_ModStart> ""MemoryAllocationFailed"" ) ; ( void ) ResetMagickMemory ( BImgBuff, 0, ldblk * sizeof ( double ) ) ;",1
125,<S2SV_ModStart> ( peer ) peer = maybe_get_net <S2SV_ModEnd> ( peer ),1
126,<S2SV_ModStart> } while ( ( i < ( int ) header_buf_used ) && ( <S2SV_ModStart> ] == '\\n' ),1
127,<S2SV_ModStart> m_family ) ; if ( proto == LLDP_MGMT_ADDR_NONE ) continue <S2SV_ModEnd> ; if (,1
128,<S2SV_ModStart> 0 ] && datalen < 1,0
129,<S2SV_ModStart> default_auto_asconf ) { spin_lock ( & sock_net ( sk ) -> sctp. addr_wq_lock ) ; <S2SV_ModStart> do_auto_asconf = 1 ; spin_unlock ( & sock_net ( sk ) -> sctp. addr_wq_lock ) <S2SV_ModStart> ; } else { <S2SV_ModStart> = 0 ; },1
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> static if ( <S2SV_ModStart> profile ) { if ( s -> avctx -> avctx == 8 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> -> profile ) { return AVERROR_INVALIDDATA ;,0
131,"<S2SV_ModStart> char * val <S2SV_ModEnd> ; if ( <S2SV_ModStart> 1 ) ; } else { snd_rem ( mmpndq -> chip, size ) ; spin_unlock ( & <S2SV_ModEnd> ) ; }",0
132,<S2SV_ModStart> rule ) ; if (! entry -> lsm [ lsm_rule ]. rule ) return - EINVAL ;,1
133,<S2SV_ModStart> file ) ; <S2SV_ModEnd> file_free ( file,1
134,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
135,"<S2SV_ModStart> ""\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> checkSession();\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> interval)\\n"" __func__ ) ; int poll_interval = s_poll_interval <S2SV_ModEnd> ; int poll_interval <S2SV_ModStart> s_interval ) ; if ( poll_interval == NULL ) { poll_poll_interval = poll_interval <S2SV_ModEnd> ; } else",0
136,"<S2SV_ModStart> * aclp, uint32_t * aclp, <S2SV_ModStart> * aclp ) { size_t status = 0 <S2SV_ModEnd> ; int status <S2SV_ModStart> & aclp -> iov_len <S2SV_ModEnd> ; if ( <S2SV_ModStart> - EINVAL ; aclp -> iov_len = 0 <S2SV_ModEnd> ; status <S2SV_ModStart> - EOPNOTSUPP <S2SV_ModEnd> ) ; if",0
137,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,1
138,<S2SV_ModStart> ; while ( ( i < to_read ) && <S2SV_ModStart>!= 0 ) <S2SV_ModEnd> ) { i,1
139,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
140,<S2SV_ModStart> [ plane ] && in -> linesize [ plane ],1
141,"<S2SV_ModStart> ( szFileName, pszFileName, <S2SV_ModStart> ) - 5 <S2SV_ModEnd> ) ; }",1
142,<S2SV_ModStart> { } if ( st,0
143,<S2SV_ModStart> >> 2 ; if ( q + o >= e ) goto out ;,0
144,"<S2SV_ModStart> __be32 new_saddr ; struct ip_options_rcu * inet_opt ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. srr ) daddr = inet_opt -> opt. <S2SV_ModEnd> faddr ; rt",1
145,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
146,"<S2SV_ModStart> return ; } if ( len < sizeof ( struct eigrp_common_header ) + sizeof ( struct eigrp_header ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %u <S2SV_blank> (too <S2SV_blank> short, <S2SV_blank> short, <S2SV_blank> %u)"", tok_int ) sizeof ( struct eigrp_common_header ) ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( eigrp_tlv_len < sizeof ( struct eigrp_tlv_header ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short, <S2SV_blank> short, <S2SV_blank> %u)"", ( u_int ) sizeof ( struct eigrp_tlv_header ) ) ) ) ; return ; } <S2SV_ModStart> ) tlv_ptr ; if ( tlv_tlen < sizeof ( struct eigrp_tlv_header ) ) ) { ND_PRINT ( ( ( ( ndo, "" <S2SV_blank> %u)"", ( u_int ) + sizeof ( struct eigrp_tlv_header ) + sizeof ( struct eigrp_tlv_header ) ) ) ; return ; } <S2SV_ModStart> ) tlv_tptr ; if ( tlv_tlen < sizeof ( struct eigrp_tlv_tlv_tlv_",0
147,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( addr <S2SV_ModStart> = NULL ; <S2SV_ModEnd> } #,0
148,<S2SV_ModStart> int res ; long res ; long * table_start = SQUASHFS_BLOCKS_BYTES ( long long ) ; long * table_start ; int res = read_table_table_start <S2SV_ModEnd> ( ) <S2SV_ModStart> mnt_table ) ; if ( sBlk. sBlk. sBlk. sblk_table ) return FALSE,0
149,"<S2SV_ModStart>, '/' ) ; if ( ptr == NULL ) return ( ENOENT ) ; ptr ++ <S2SV_ModEnd> ; rw_exit (",1
150,<S2SV_ModStart> |= EXT4_EXT_MARK_UNINIT2 ; if ( flags & EXT4_GET_BLOCKS_CONVERT ) split_flag |= EXT4_EXT_DATA_VALID2 ;,1
151,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & acl <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret <S2SV_ModEnd> ) goto out_free",0
152,<S2SV_ModStart> = 0 ; if ( dcfg -> state == NULL ) return NULL ;,0
153,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ), & final ) ; rcu_read_unlock ( <S2SV_ModEnd> ) ; dst",1
154,"<S2SV_ModStart> = 0.0 ; uint32 nstrips = 0, ntiles = 0 ; uint16 <S2SV_ModEnd> planar = 0 <S2SV_ModStart>! read_buff ) { if ( buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""loadImage"", ""Unable <S2SV_blank> to <S2SV_blank> allocate/reallocate <S2SV_blank> read <S2SV_blank> buffer"" ) ; return ( - 1 ) ; } <S2SV_ModStart> 3 ) ; } <S2SV_ModStart> buffsize ) { if ( buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""loadImage"", ""Unable <S2SV_blank> to <S2SV_blank> allocate/reallocate <S2SV_blank> read <S2SV_blank> buffer"" ) ; return ( - 1 ) ; }",1
155,"<S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModEnd> else if ( <S2SV_ModStart> } else { argj = CONFIG_VP9_HIGHBITDEPTH <S2SV_ModEnd> ; } else <S2SV_ModStart> } # else if CONFIG_VP9_HIGHBITDEPTH if ( ( arg, & argi ) && ( argi ) == 0 ) { arg_match ( & arg, & argi ) ; } else if ( arg_match_args ( arg, & arg, argj ) ) { arg_match_args ( ) ; } else if ( argj == 0 ) break ; } else if (! argj ) { arg_match ( & arg, arg, & argj ) ; } else if ( argj == 0 ) { arg = CONFIG_VP9_HIGHBITDEPTH ; break ; } else if ( argj == 0 ) { arg_match ( arg, & argi ) ; } else if ( argj!= NULL ) { arg_match ( & arg, argi ) ; } else { arg_match ( arg, & arg, argi ) ; } else if ( argi ) == 0 ) { arg ; } else if ( strcmp ( & arg, ""%s: ) ; } else if (",0
156,<S2SV_ModStart> options. disable_forwarding ||! use_privsep,1
157,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
158,"<S2SV_ModStart> ) ; } if ( ( ( MagickSizeType ) image -> columns * image -> rows ) > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ;",1
159,"<S2SV_ModStart> errout ; } <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart>. value = ""xxxx"" ; <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart> -> gr_ctx. length = 4 <S2SV_ModEnd> ; gr ->",1
160,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> out ; } ext_size = sizeof ( EXT4_I ( inode ) -> i_data ) ; <S2SV_ModStart> -> i_data, ext_size ) ; memset ( bh -> b_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size <S2SV_ModEnd> ) ; neh",1
161,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
162,<S2SV_ModStart> ; int ret ; if ( current_chrooted ( ) ) return - EPERM,1
163,"<S2SV_ModStart> ( cmac, ""%s"",",0
164,"<S2SV_ModStart> c -> nreslevels > <S2SV_ModEnd> s -> reduction_factor <S2SV_ModStart> -> reduction_factor ) { av_log ( s -> avctx, AV_LOG_ERROR, ""reduction_factor <S2SV_blank> too <S2SV_blank> large <S2SV_blank> for <S2SV_blank> %d\\n"", c -> nreslevels - 1 ) ; c -> nreslevels = c -> nreslevels - 1 ; return AVERROR_INVALIDDATA ; } <S2SV_ModEnd> c -> nreslevels2decode",0
165,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
166,<S2SV_ModStart> ; bool is_drop_n_account = false ; bool do_vnet <S2SV_ModStart> -> is_vnet_hdr ) { <S2SV_ModStart> virtio_net_hdr ) ; do_vnet = false ; } <S2SV_ModStart> < 0 ) { <S2SV_ModStart> = 0 ; do_vnet = false ; } <S2SV_ModStart> -> max_vnet = false ; do_vnet <S2SV_ModEnd> ; if (,0
167,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> sctp_auth_asoc_init_active_key ( asoc,1
168,<S2SV_ModStart> return false ; if ( ndp_msg_type_info ( msg_type ) -> addrto_validate ) return ndp_msg_type_info ( msg_type ) -> addrto_validate ( & msg -> addrto ) ; else,1
169,<S2SV_ModStart> <S2SV_null,0
170,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
171,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
172,<S2SV_ModStart> cpi -> twopass. gf_group <S2SV_ModEnd> ; const <S2SV_ModStart> cpi -> twopass. gf_group = 0 ; if ( cpi -> twopass. gf_group. gf_group. gf_group = 0 ; else { cpi -> twopass. gf_group = 0 ; } else { cpi -> twopass. gf_group = MAX ( cpi -> twopass. gf_group. gf_group. gf_group = 0 ; cpi -> twopass. gf_group = 0 ; } else { cpi -> twopass -> twopass. gf_group = 0 ; if ( cpi -> twopass. gf_group. gf_group -> twopass. gf_group. gf_group. gf_group. gf_group -> twopass -> twopass. gf_group = 0 ; if ( cpi -> twopass. gf_group -> twopass. gf_group. gf_group. gf_group -> twopass. gf_group -> twopass -> twopass -> twopass -> twopass = 0 ; } else { cpi -> twopass -> twopass -> twopass -> twopass -> tw,0
173,"<S2SV_ModStart> } num ++ ; if ( num > MaxAllocSize / ITEMSIZE ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> levels <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", num, ( int ) ( MaxAllocSize / ITEMSIZE ) ) ) )",1
174,"<S2SV_ModStart> header, struct mb2_cache_entry <S2SV_ModEnd> * * pce <S2SV_ModStart> ) ; struct mb2_cache_entry * ce ; struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache = <S2SV_ModStart> hash ) ; ce = mb2_cache_entry_find_first <S2SV_ModEnd> ( ext4_mb_cache, <S2SV_ModStart> ( ext4_mb_cache, <S2SV_ModEnd> hash ) ; <S2SV_ModStart> * bh ; <S2SV_ModEnd> bh = sb_bread <S2SV_ModStart> ; ce = mb2_cache_entry_find_next ( ext4_mb_cache, ce <S2SV_ModEnd> ) ; }",1
175,"<S2SV_ModStart> { gint64 offset <S2SV_ModEnd> ; char line <S2SV_ModStart> = offset ; return parse_cosine_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart> -> phdr, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart> wth -> frame_buffer, line",1
176,<S2SV_ModStart> = line_end ; <S2SV_ModEnd> error = add_push_report_pkt,1
177,<S2SV_ModStart> if ( left == 0 && extend ) return 0 ; if ( left,1
178,<S2SV_ModStart> < EXT2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct grub_block * buf <S2SV_ModStart> ext_block ; char * buf [ i ]. len <S2SV_ModEnd> ; char * <S2SV_ModStart> [ i ]. len <S2SV_ModEnd> ; break ;,0
179,<S2SV_ModStart> size_t ) ldblk + 1,0
180,"<S2SV_ModStart> - ENOMEM ; * ( ( struct vbg_ioctl_hdr * ) buf ) = hdr ; <S2SV_ModStart> copy_from_user ( buf + sizeof ( hdr ) <S2SV_ModStart> * ) arg + sizeof ( hdr ), hdr. size_in - sizeof ( hdr ) <S2SV_ModEnd> ) ) {",1
181,<S2SV_ModStart> m ; int hstartrow <S2SV_ModEnd> ; if ( <S2SV_ModStart> 2 ) { hstartrow <S2SV_ModEnd> = ( numrows <S2SV_ModStart> = numrows - hstartrow <S2SV_ModEnd> ; n = <S2SV_ModStart> & a [ hstartrow <S2SV_ModEnd> * stride ],0
182,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
183,<S2SV_ModStart> -> rows = ( unsigned char * ) <S2SV_ModStart> -> rows * 3 <S2SV_ModEnd> ; pixel_info =,0
184,<S2SV_ModStart> DQUOT_LIMITS_ENABLED ) ; if ( sbi -> s_mb_cache ) { ext2_xattr_destroy_cache ( sbi -> s_mb_cache ) ; sbi -> s_mb_cache = NULL ; } <S2SV_ModEnd> if (!,1
185,<S2SV_ModStart> err ; } if ( usb_free_altsetting ) { dev_err ( & usb_free_altsetting ) ; dev_err ( & usb_free -> desc. bInterface ) ; err = - EINVAL ; goto err_free <S2SV_ModEnd> ; } if,0
186,"<S2SV_ModStart> ""setregid"" ) ; <S2SV_ModEnd> char * arg <S2SV_ModStart> 0 ] = ""/bin/sh"" <S2SV_ModEnd> ; arg [",1
187,<S2SV_ModStart> node ) { if ( node -> nd_item. ci_parent ) <S2SV_ModStart> ci_parent ) ; else return NULL ;,1
188,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
189,<S2SV_ModStart> ( pb ) ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA,1
190,<S2SV_ModStart> if ( q < p || q,1
191,<S2SV_ModStart> protostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> cryptostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> timingstats ) ; <S2SV_ModEnd> step_callback = &,1
192,"<S2SV_ModStart> edir = ""/tmp"" <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( tmpname )!= NULL <S2SV_ModEnd> ) { err",0
193,<S2SV_ModStart> prev ) ; n -> mounts += n -> pending_mounts ; n -> pending_mounts = 0 ;,1
194,"<S2SV_ModStart> ; savesegment ( fs, fsindex ) ; savesegment ( gs, gsindex ) ; savesegment ( next, cpu ) ; savesegment ( <S2SV_ModStart> next -> ds <S2SV_ModEnd> ) ; if",0
195,<S2SV_ModStart> dd ) ; <S2SV_ModEnd> } } <S2SV_null>,1
196,<S2SV_ModStart> 1 ) ; if ( ( IHEVCD_SUCCESS < 0 ) { return IHEVCD_SUCCESS ; },0
197,<S2SV_ModStart> 1u << DB_VECTOR ) | ( 1u << AC_VECTOR,1
198,"<S2SV_ModStart> sfsname ) { <S2SV_ModEnd> char temp [ <S2SV_ModStart> 1 ] ; u_int stringlen ; stringlen = len ; if ( stringlen > NFSX_V3FHMAX ) stringlen = NFSX_V3FHMAX ; <S2SV_ModStart>, sfsname, stringlen <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ; temp [ stringlen <S2SV_ModEnd> ] = '\\0'",1
199,"<S2SV_ModStart> unsigned int flags, struct rt6_info * rt <S2SV_ModStart> ( & fhdr, rt",1
200,<S2SV_ModStart> ( res ) goto err_add_port <S2SV_ModEnd> ; res = <S2SV_ModStart> port ) ; err_add_port : hsr_del_node ( & hsr -> self_node_db ) ;,1
201,"<S2SV_ModStart> # ifdef EXIT_FAILURE_RETRY ( <S2SV_ModStart> NULL, MSG_TRUNC )",0
202,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> vp9_init ( MACROBLOCKD <S2SV_ModStart> int strides [ 4 <S2SV_ModEnd> ] = { <S2SV_ModStart> int strides [ 4 <S2SV_ModEnd> ] = { <S2SV_ModStart> int strides [ 4 <S2SV_ModEnd> ] = { <S2SV_ModStart> int stride <S2SV_ModEnd> int i <S2SV_ModStart> int strides [ 4 ] = { <S2SV_ModStart> i ] -> uv_stride <S2SV_ModEnd> } ; int <S2SV_ModStart> i ], src -> uv_stride <S2SV_ModEnd> } ; int",0
203,<S2SV_ModStart> p ++ ) return 0 <S2SV_ModEnd> ; } if,0
204,"<S2SV_ModStart> <S2SV_null> static inline int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> dst ) { return assign_eip_far ( ctxt, dst, ctxt -> mode == X86EMUL_MODE_PROT64 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",1
205,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
206,"<S2SV_ModStart> ; remaining = tvb_reported_length_remaining <S2SV_ModEnd> ( tvb,",1
207,<S2SV_ModStart> ( iter ) ; if (! iter_get_block ( inode ) ) return 0 ;,0
208,<S2SV_ModStart> return rc ; <S2SV_ModEnd> copied = skb,1
209,<S2SV_ModStart> else if ( <S2SV_ModEnd> strlen ( f,0
210,<S2SV_ModStart> ; if ( pmc_overflow ( val ) <S2SV_ModEnd> ) write_pmc (,1
211,"<S2SV_ModStart> ( * b + len, * avail - len <S2SV_ModEnd>, nl )",1
212,"<S2SV_ModStart> const char * obj, * obj_start, * <S2SV_ModStart> NULL ) { Py_EINVAL <S2SV_ModEnd> = 1 ; <S2SV_ModStart> NULL ) ; if (! obj_start ) return NULL ; PyUnicode_expr_t * obj_start = obj_start + 1 ; <S2SV_ModStart> char * obj_start = ( c -> type_end - 1 ) <S2SV_ModStart> NULL ; if (! obj_start ||! obj_end ) return NULL <S2SV_ModEnd> ( obj_start, <S2SV_ModStart> val <S2SV_ModEnd> ) ) ; if <S2SV_ModStart> NULL ) { Py_CLEAR ( fstring <S2SV_ModEnd> >",0
213,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
214,"<S2SV_ModStart> string, string, <S2SV_ModEnd> string ) {",0
215,"<S2SV_ModStart> == 0 ) mark_key_instantiated ( key, 0 <S2SV_ModEnd> ) ; up_write",1
216,<S2SV_ModStart> <= * len && plen > 0,1
217,<S2SV_ModStart> ; args. rmtvaluelen = valuelen ; args.,1
218,<S2SV_ModStart> ; if ( <S2SV_ModEnd> timeout == NULL <S2SV_ModStart> ; if ( compat_get_timespec <S2SV_ModEnd> ( & ktspec <S2SV_ModStart> > 0 && compat_put_timespec <S2SV_ModEnd> ( & ktspec,1
219,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
220,<S2SV_ModStart> ndev ) ; <S2SV_ModEnd> assert ( skb <S2SV_ModStart> q_num ) ; return <S2SV_ModEnd> hns_nic_net_xmit_hw ( ndev <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
221,<S2SV_ModStart> |= MSG_TRUNC ; <S2SV_ModEnd> lock_sock ( sk,1
222,<S2SV_ModStart> } if ( <S2SV_ModEnd> udp_specified && settings,1
223,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
224,<S2SV_ModStart> -> filesize = 0 <S2SV_ModEnd> ; x ->,0
225,<S2SV_ModStart> found = 0 <S2SV_ModEnd> ; const char <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( found,1
226,"<S2SV_ModStart> int validate_event ( struct pmu * pmu, <S2SV_ModStart> arm_pmu * armpmu <S2SV_ModEnd> ; struct hw_perf_event <S2SV_ModStart> -> pmu!= pmu ) return 0 ; if ( event -> pmu!= <S2SV_ModStart> return 1 ; armpmu = to_arm_pmu ( event -> pmu ) ;",1
227,"<S2SV_ModStart> bool new_idmap_permitted ( const struct file * file, <S2SV_ModStart>, cap_setid ) && file_ns_capable ( file, ns -> parent, cap_setid )",1
228,<S2SV_ModStart> j ++ ) { if ( a -> type == szMAPI_BINARY ) <S2SV_ModStart> ) ; } },1
229,"<S2SV_ModStart> hx ; u8 * buf <S2SV_ModEnd> ; int ret <S2SV_ModStart> = 0 ; u16 cpu_cs_register = <S2SV_ModEnd> cypress [ type <S2SV_ModStart> ]. cpu_cs_register ; buf = kmalloc ( sizeof ( * hx ), GFP_KERNEL ) ; if (! buf ) return - ENOMEM ; hx = ( struct hexline * ) buf ; buf [ 0 ] = 1 ; if ( usb_cypress_writemem ( udev, cpu_cs_register, buf, 1 <S2SV_ModEnd> )!= 1 <S2SV_ModStart> ; kfree ( buf <S2SV_ModEnd> ) ; return <S2SV_ModStart> 0 ) { buf [ 0 ] = 0 ; if ( <S2SV_ModEnd> usb_cypress_writemem ( udev <S2SV_ModStart> ( udev, cpu_cs_register, buf <S2SV_ModEnd>, 1 ) <S2SV_ModStart> ; kfree ( buf <S2SV_ModEnd> ) ; return",1
230,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } ptr ++ ; length = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ptr ++ ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ; return ; } val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ptr ++ ; ptr ++ ; length -= 2 ; <S2SV_ModStart> ) ) ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",0
231,"<S2SV_ModStart> princ ) ; success = data_eq_string ( * realm, <S2SV_ModEnd> handle -> params <S2SV_ModStart> params. realm ) && data_eq_string ( * c1, ""kadmin"" ) &&! data_eq_string ( * c2, ""history"" ) ; <S2SV_ModEnd> fail_princ : if",1
232,<S2SV_ModStart> ; if ( shader_rec_offset < args -> bin_cl_size ||,1
233,<S2SV_ModStart> endif # if HAVE_LZMA_H <S2SV_ModEnd> && HAVE_LIBLZMA if,1
234,<S2SV_ModStart> vma -> vm_file ) ; down_read ( & EXT4_I ( inode ) -> i_mmap_sem <S2SV_ModStart> ; out : up_read ( & EXT4_I ( inode ) -> i_mmap_sem ) ;,1
235,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
236,<S2SV_ModStart> arg ) { char ch = * arg ; switch ( ch <S2SV_ModEnd> ) { case <S2SV_ModStart> ';' : case '=' : case <S2SV_ModStart> b ++ = ch <S2SV_ModEnd> ; break ;,1
237,"<S2SV_ModStart> && nmap ) <S2SV_ModEnd> cp = ikev1_attrmap_print <S2SV_ModStart>, cp, ep2, map, nmap ) ; else cp = ikev1_attr_print ( ndo, cp, ep2 ) ; if ( cp == NULL ) goto trunc ; } if <S2SV_ModStart> < ep2 ) <S2SV_ModEnd> ND_PRINT ( (",1
238,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static void <S2SV_ModEnd> ice_conn_connection ( IceConn ice_conn <S2SV_ModStart> ice_conn ) { IceCloseConnection <S2SV_ModEnd> ( ice_conn,",0
239,<S2SV_ModStart> if ( ( skb_mac_header <S2SV_ModEnd> ( skb ) <S2SV_ModStart> skb ) < skb -> head +,1
240,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
241,<S2SV_ModStart>. val =!! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ; <S2SV_ModStart>. val =!! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ; <S2SV_ModStart>. val =!! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> -> flags =! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> -> flags =! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> -> flags =! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ; <S2SV_ModStart>. val =! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> -> flags =! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> -> flags =! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ; <S2SV_ModStart>. val =!! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> -> flags =! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> -> flags =! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> -> flags =! <S2SV_ModStart> -> flags ) <S2SV_ModEnd> ; break ; <S2SV_ModStart>. flags =! <S2SV_ModStart> -> flags ) <S2SV_ModEnd>. val ->,0
242,<S2SV_ModStart> & RCV_SHUTDOWN ) return 0 ; <S2SV_ModEnd> return err ; <S2SV_ModStart> msg_namelen ) ; <S2SV_ModEnd> } skb_free_datagram (,1
243,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
244,<S2SV_ModStart> const buffers [ 3 <S2SV_ModEnd> ] = { <S2SV_ModStart> src -> uv_buffer <S2SV_ModEnd> } ; int,0
245,"<S2SV_ModStart>, j ; * md_out = NULL ; md = calloc ( 1, sizeof ( <S2SV_ModEnd> * md ) <S2SV_ModStart> goto cleanup ; ret = rfc2253_name <S2SV_ModEnd> ( X509_get_subject_name ( <S2SV_ModStart> cert ), & <S2SV_ModEnd> md -> subject_dn <S2SV_ModStart> md -> subject_name <S2SV_ModEnd> ) ; if",0
246,<S2SV_ModStart> (! npages || base_gfn!= old. base_gfn,1
247,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ru,1
248,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
249,<S2SV_ModStart> * ni ; unsigned int length_left ; u_int j ; ND_TCHECK ( rp -> rip6_cmd <S2SV_ModEnd> ) ; switch <S2SV_ModStart> case RIP6_REQUEST : length_left = length ; if ( length_left < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) goto trunc ; length_left -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; j = length_left <S2SV_ModEnd> ( r -> <S2SV_ModStart> j!= 1 ) { ND_TCHECK ( rp -> rip6_nets ) ; if ( <S2SV_ModEnd> rp -> rip6_nets <S2SV_ModStart> ni ) goto trunc ; } if ( length_left!= 0 ) goto trunc ; length_left <S2SV_ModEnd> -= ( <S2SV_ModStart> -> rip6_nets ; length_left -= ( <S2SV_ModEnd> rp -> rip6_left <S2SV_ModStart> ni ) ; if ( length_left!= 0 ) ND_TCHECK ( rp -> rip6_nets ) ) goto trunc ; <S2SV_ModStart> -> rip6_nets ; length_left = length_left <S2SV_ModEnd> -= sizeof ( <S2SV_ModStart> ni ) { ND_TCHECK ( * ni ) ; if ( length_left!= 0 ) goto trunc,0
250,<S2SV_ModStart> < 0 ) goto error ; <S2SV_ModEnd> goto set ;,1
251,"<S2SV_ModStart> { memcpy <S2SV_ModEnd> ( cpi,",0
252,"<S2SV_ModStart> argc ++ ; retval = bprm_change_interp ( iname, bprm ) ; if ( retval < 0 ) goto _error <S2SV_ModEnd> ; interp_file =",1
253,<S2SV_ModStart> ; int iSrc <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; } } <S2SV_ModEnd> res -> ContribRow <S2SV_ModStart> u ]. Left = iLeft ; res -> ContribRow [ u ]. Right = iRight ; for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ].,1
254,<S2SV_ModStart> user ) { <S2SV_ModEnd> free_user ) ;,0
255,"<S2SV_ModStart> Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; return ; } if (! COM_CompareExtension ( filename, "".cfg"" ) ) { Com_Printf ( ""Com_WriteConfig_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".cfg\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n""",1
256,"<S2SV_ModStart> char * sl, len",0
257,"<S2SV_ModStart> ( mobj ) { size_t granularity = BIT ( tee_mm_sec_ddr. shift ) ; <S2SV_ModStart>, 0, ROUNDUP ( size, granularity ) ) ; } <S2SV_ModEnd> return mobj ;",1
258,<S2SV_ModStart> -> it_overrun += 1LL <S2SV_ModEnd> << i ;,1
259,"<S2SV_ModStart> = 0 ; int has_async ; <S2SV_ModStart> if (! is_async ) { NCH ( c, n ) ) ; assert ( CHILD ( n, 0 ) ) == TYPE ( CHILD ( n, 0 ) ) == TYPE ( CHILD ( n, 1 ) ) ) ; if (! is_async ) return NULL ; } else { <S2SV_ModStart> = ( CHILD ( n, 1 ) ; if ( <S2SV_ModEnd> == ( <S2SV_ModStart> == ( <S2SV_ModEnd> n ) ) <S2SV_ModStart> return NULL ; } for ( <S2SV_ModEnd> == ( <S2SV_ModStart> == ( n ) ) { <S2SV_ModStart> return NULL ; <S2SV_ModEnd> if (! <S2SV_ModStart> return NULL ; } for ( <S2SV_ModEnd> j = 0 <S2SV_ModStart> ; for ( <S2SV_ModEnd> n_ifs =",0
260,<S2SV_ModStart> = NULL ; src -> curframe -> curframe -> curframe [ i ],0
261,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static VP9_COMMON * const MACROBLOCK * const xd, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> -> mbmi, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> -> mbmi ; const MODE_INFO * const mbmi = mi -> mbmi_ext ; const MODE_INFO * const MODE_INFO * const mbmi = xd -> mi [ 0 ] -> mbmi ; const MODE_INFO * const mbmi = mi -> mbmi_ext ; const MODE_INFO * const mbmi = mi -> mbmi_ext ; const MODE_INFO * const mbmi = mi -> mbmi_ext ; <S2SV_ModStart> -> mbmi = mbmi_ext <S2SV_ModEnd> ( cm,",0
262,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; saddr,1
263,"<S2SV_ModStart>, r -> qiov. size <S2SV_ModEnd> ) ; n <S2SV_ModStart> = r -> qiov. size <S2SV_ModEnd> / 512 ; <S2SV_ModStart>, r -> qiov. size <S2SV_ModEnd> ) ; }",1
264,<S2SV_ModStart> if ( cs >= <S2SV_ModEnd> CQSPI_MAX_CHIPSELECT ) {,1
265,<S2SV_ModStart> < 0 ) { <S2SV_ModStart> return 0 ; } <S2SV_ModEnd> return 0 ;,0
266,<S2SV_ModStart> ) break ; if ( l > ll ) l = ll ;,1
267,<S2SV_ModStart> out ; } } if ( free < 0 ) { err = - ENOMEM ; goto out ;,1
268,<S2SV_ModStart> ( == 0 && <S2SV_ModEnd> ND_TTEST ( *,0
269,<S2SV_ModStart> == 0 ) memset ( rq ) ;,0
270,"<S2SV_ModStart> ret ; uint8_t * buffer ; uint8_t value ; buffer = kmalloc ( 1, GFP_KERNEL ) ; if (! buffer ) return - ENOMEM <S2SV_ModEnd> ; dev_dbg ( <S2SV_ModStart>, reg, buffer <S2SV_ModEnd>, 1, <S2SV_ModStart> 1000 ) ; if ( <S2SV_ModEnd> ret >= 0 <S2SV_ModStart> ret >= 0 ) { value = buffer [ 0 ] ; kfree ( buffer ) ; return value ; } else { kfree ( buffer ) ; return <S2SV_ModEnd> ret ; } <S2SV_ModStart> ret ; } }",1
271,"<S2SV_ModStart> * zTable, sqlite3_int64 <S2SV_ModEnd>, char * <S2SV_ModStart>, 2 ) { sqlite3ModuleArgument ( sqlite3_int64 <S2SV_ModEnd>, 2 )",0
272,"<S2SV_ModStart> ; } } s -> append_char ( s, 0 ) ; strncpy <S2SV_ModEnd> ( outbuffer,",1
273,<S2SV_ModStart> ] == 0,0
274,<S2SV_ModStart> = 0 ; ( i + 3 ) <S2SV_ModEnd> < sec -> <S2SV_ModStart> = 0 ; ( i + 7 ) <S2SV_ModEnd> < sec ->,1
275,<S2SV_ModStart> case ISIS_SUBTLV_EXT_IS_REACH_BW_CONSTRAINTS_OLD : if ( subl == 0 ) break ; <S2SV_ModStart> ++ ) { <S2SV_ModEnd> bw. i,1
276,<S2SV_ModStart> ; if ( ptr_hbe_tx_size < 2 <S2SV_ModEnd> ) (,0
277,"<S2SV_ModStart> ONIG_INFINITE_DISTANCE ) { if ( p - str < reg -> dmax ) { * low = ( UChar * ) str ; if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; } else { <S2SV_ModStart> low ) ; }",0
278,<S2SV_ModStart> void flags ; <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
279,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
280,"<S2SV_ModStart> ) continue ; if ( vif -> tx. sring -> req_prod - vif -> tx. req_cons > XEN_NETIF_TX_RING_RING_SIZE ) { netdev_err ( vif -> dev, XEN_netbk, vif -> tx. sring -> req_cons, XEN_NETIF_TX_SIZE ) ; netbk_fatal_err ( vif -> tx. sring -> tx. sring -> tx. sring -> tx. sring -> req_cons, XEN_NETIF_TX_RING_SIZE ) ; netbk_fatal_err ( vif ) ; continue ; } <S2SV_ModStart> ) ) continue ; <S2SV_ModEnd> idx += ret <S2SV_ModStart> ) ) continue ; <S2SV_ModEnd> } ret <S2SV_ModStart>",0
281,"<S2SV_ModStart> # ifdef EXIT_FAILURE_RETRY ( <S2SV_ModStart> NULL, MSG_TRUNC )",0
282,<S2SV_ModStart> xfrm_policy_walk * cb <S2SV_ModEnd> ) { struct,0
283,<S2SV_ModStart> conn ) ; if ( <S2SV_ModStart> ( conn )!= 0 ) return,1
284,"<S2SV_ModStart> ) ; struct <S2SV_ModEnd> skb_pending_info * shinfo <S2SV_ModStart> err ) ) xen_netbk_idx_release ( netbk, pending_idx <S2SV_ModEnd>, XEN_NETIF_RSP_ERROR ) <S2SV_ModStart> XEN_NETIF_RSP_ERROR ) ; <S2SV_ModEnd> index = ( <S2SV_ModStart> netbk, pending_idx, pending_idx <S2SV_ModEnd>, XEN_NETIF_RSP_ERROR ) <S2SV_ModStart> netbk, pending_idx, pending_idx, XEN_NETIF_RSP_ERROR ) <S2SV_ModStart> XEN_OKAY",0
285,,1
286,"<S2SV_ModStart> ) NULL ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> ) NULL ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> NULL ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ;",1
287,"<S2SV_ModStart> len < 0 <S2SV_ModEnd> ) { syslog <S2SV_ModStart> 1 ; } if ( addr. nl_pid ) { syslog ( LOG_WARNING, ""Received <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> untrusted <S2SV_blank> pid:%u"", addr. nl_pid ) ; continue ; }",1
288,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
289,<S2SV_ModStart> ipc == NULL && client -> session == NULL,1
290,<S2SV_ModStart> = NULL ; if ( newpos + oldpos > 0 ) { return NULL ; } <S2SV_ModStart> ( oldptr + oldpos + newpos + oldpos +,0
291,"<S2SV_ModStart>, nameptr, lfi, fname, UDF_NAME_LEN <S2SV_ModEnd> ) ; if",1
292,"<S2SV_ModStart> ip_vs_timeout_user t ; memset ( & t, 0, sizeof ( t ) ) ;",1
293,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> np -> tclass )",0
294,<S2SV_ModStart> ; ssize_t result ; if ( WARN_ON_ONCE (! ib_safe_file_access ( filp ) ) ) return - EACCES,1
295,"<S2SV_ModStart>, * controller, * next = NULL <S2SV_ModStart> if (! caller_is_in_ancestor ( fc -> pid, controller, path1, & next <S2SV_ModEnd> ) ) { <S2SV_ModStart> ) ) { if ( fpath && strcmp ( next, fpath ) == 0 ) ret = - EACCES ; else ret = - ENOENT <S2SV_ModEnd> ; goto out <S2SV_ModStart> if (! fpath ) { ret = - EACCES ; goto out ; } if (! <S2SV_ModStart> cgdir ) ; free ( next ) ;",0
296,<S2SV_ModStart> ) ) { put_disk ( disk ) ;,1
297,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
298,<S2SV_ModStart> NULL ) { status = MagickFalse ; break <S2SV_ModEnd> ; } image,0
299,<S2SV_ModStart> i ++ ) { if ( avio_feof ( s -> packet_size ) ) { av_log ( s -> ff_feof ( s ) ) ; break ; } <S2SV_ModEnd> } break ;,0
300,<S2SV_ModStart> ; rinfo = kzalloc <S2SV_ModEnd> ( SZ_SG_REQ_INFO *,1
301,"<S2SV_ModStart> ; # endif install_keyword ( ""umask"", & umask_handler ) ;",1
302,<S2SV_ModStart> data ) { ( void ) ctx ;,0
303,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> kfree ( tmpbuf,1
304,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; }",1
305,"<S2SV_ModStart> ( box = jp2_box_create0 ( ) ) ) { goto error ; } <S2SV_ModEnd> if ( jp2_getuint32 <S2SV_ModStart> 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> %c%c <S2SV_blank> length\\n"" <S2SV_ModEnd>, \'""\', <S2SV_ModStart> 1 ) ) { goto error ; } if ( jp2_boxinfo -> type == 0 ) { JAS_DBGLOG ( 10, ( 10, ( 10 ) ) ) ;",0
306,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> * new_size, size_t <S2SV_ModEnd> new_size ) {",0
307,"<S2SV_ModStart> ; int copylen = 0 <S2SV_ModStart> goto err ; err = - EMSGSIZE ; if ( unlikely ( count > UIO_MAXIOV ) ) goto err ; <S2SV_ModStart> zerocopy ) { if ( count > MAX_SKB_FRAGS ) { copylen = iov_length ( iv, count - MAX_SKB_FRAGS ) ; if ( copylen < vnet_hdr_len ) copylen = 0 ; else copylen -= vnet_hdr_len ; } if ( copylen < vnet_hdr. hdr_len )",1
308,<S2SV_ModStart> ( struct ipv6hdr <S2SV_ModEnd> ) ; unsigned <S2SV_ModStart> while ( offset <S2SV_ModEnd> <= packet_len ) <S2SV_ModStart> packet_len ) { struct ipv6_opt_hdr * exthdr ; <S2SV_ModStart> offset ; } if ( offset + sizeof ( struct ipv6_opt_hdr ) > packet_len ) return - EINVAL ; exthdr = ( struct ipv6_opt_hdr * ) ( skb_network_header ( skb ) + offset ) ; <S2SV_ModStart> -> nexthdr ; } return - EINVAL <S2SV_ModEnd> ; } <S2SV_null>,1
309,"<S2SV_ModStart> write_delta_bit_buffer ( struct vpx_wb_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ( wb, vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
310,<S2SV_ModStart> = 0 ; if ( td.,0
311,<S2SV_ModStart> out_free ) ; msg -> vnet_hdr_len = 0 ; <S2SV_ModStart> out_free ; } <S2SV_ModEnd> if (!,0
312,<S2SV_ModStart> } if ( <S2SV_ModEnd> djrcv_dev -> paired_dj_devices,1
313,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
314,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
315,"<S2SV_ModStart> asconf ) { sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) asconf -> chunk_hdr ; bool addip = ( sctp_chunk_len, addip ) ; bool addip = ( sctp_addip ) asconf -> addip_hdr. addip <S2SV_ModEnd> ; if ( <S2SV_ModStart> goto done ; <S2SV_ModEnd> if ( err_code <S2SV_ModStart> goto done ; <S2SV_ModEnd> err_code = sctp_addip",0
316,"<S2SV_ModStart> 101, ( ""jas_realloc(%x, <S2SV_blank> %zu)\\n"" <S2SV_ModEnd>, ptr,",1
317,<S2SV_ModStart> exit ; } m -> msg_namelen = 0 ;,0
318,<S2SV_ModStart> CPU_FTR_TM_COMP ) && hv_enabled <S2SV_ModEnd> ; break ;,1
319,"<S2SV_ModStart> * msicap, <S2SV_ModEnd>, 0 )",0
320,"<S2SV_ModStart> key_name ), UTF16_HOST_ENDIAN, <S2SV_ModStart> data. key, HV_KVP_EXCHANGE_MAX_KEY_SIZE / 2 <S2SV_ModStart> value ), UTF16_HOST_ENDIAN, <S2SV_ModStart> data. value, HV_KVP_EXCHANGE_MAX_VALUE_SIZE / 2",1
321,"<S2SV_ModStart> log_filep ) ; memset ( d -> log, 0, <S2SV_ModEnd> ) ; break",0
322,<S2SV_ModStart> return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
323,"<S2SV_ModStart> * parg = ( void * ) arg ; void __user = 0 ; void __user * user_size = 0 ; void __user * user_size = 0 ; if ( _IOC_SIZE ( cmd ) & _IOC_DIR ( cmd ) & _IOC_SIZE ( cmd ) )!= _IOC_SIZE ( cmd ) ) { parg = - 1 ; } err = - EFAULT ; if ( _IOC_DIR ( cmd ) & _IOC_SIZE ( cmd ) ) { memset ( ( cmd, 0, 0, _IOC_SIZE ( cmd ), _IOC_SIZE ( _IOC_SIZE ( cmd ) ) ; parg = _IOC_DIR ( cmd ) ; if ( _IOC_DIR ( ( _IOC_SIZE ( cmd ) < parg ) ) { memset ( ( parg, 0, 0, _IOC_SIZE ( cmd ) ) ; parg_size ( ( n ) ) ) ; } else { memset ( ( parg, 0, 0, _IOC_SIZE ( parg, _IOC_SIZE ( cmd ) ) ) ; parg = _IOC_SIZE ( cmd ) ; } else { memset ( parg, 0, _IOC_SIZE",0
324,<S2SV_ModStart> =,0
325,"<S2SV_ModStart> u16 size, const <S2SV_ModStart> data ) { void * buf ; int ret ; buf = kmemdup ( data, size, GFP_NOIO ) ; if (! buf ) return - ENOMEM ; ret = <S2SV_ModEnd> usb_control_msg ( dev <S2SV_ModStart>, 0, buf <S2SV_ModEnd>, size, <S2SV_ModStart> 500 ) ; kfree ( buf ) ; return ret ;",1
326,<S2SV_ModStart> err ; } if ( usb_free_altsetting ) { dev_err ( & usb_free_altsetting ) ; dev_err ( & usb_free -> desc. bInterface ) ; err = - EINVAL ; goto err_free <S2SV_ModEnd> ; } if,0
327,<S2SV_ModStart> ) { case GTK_RESPONSE_OK : { file = nautilus_file_,0
328,<S2SV_ModStart> ; if ( urb -> actual_length > 0 &&,1
329,"<S2SV_ModStart> * server, struct smb_vol * vol ) { <S2SV_ModEnd> struct cifsSesInfo * <S2SV_ModStart> cifs_tcp_ses_lock ) ; list_for_each_entry ( ses <S2SV_ModEnd>, & server <S2SV_ModStart> server -> smb_ses_list, smb_ses_list ) { case Kerberos : if ( vol -> linux_uid!= vol -> linux_uid ) continue ; break ; default : <S2SV_ModEnd> if ( strncmp <S2SV_ModStart> -> password, vol -> <S2SV_ModEnd> ) continue ;",0
330,<S2SV_ModStart> vpx_codec_err_t res ; if ( cfg -> cfg. g_pass!= VPX_RC_ONE_PASS <S2SV_ModEnd> || cfg -> <S2SV_ModStart> g_framerate!= VPX_RC_ONE_PASS <S2SV_ModEnd> || cfg -> <S2SV_ModStart> cfg. g_pass > 1 || ( cfg -> g_pass!= VPX_RC_PASS <S2SV_ModEnd> ) || ( <S2SV_ModStart>  cfg -> g_pass!= VPX_RC_ONE_PASS_PASS_PASS <S2SV_ModEnd> ) ERROR <S2SV_ModStart> } if ( int ) cfg -> g_pass = ( int ) cfg -> g_pass!= VPX_RC_PASS_PASS <S2SV_ModEnd> || ( <S2SV_ModStart> -> g_width && ( ctx -> g_width && ( cfg -> g_pass!= VPX_RC_ONE_PASS ) ) || ( ctx -> cpi -> cpi -> cpi -> cpi -> g_height && ( int ) cfg. g_width && ( ctx -> cpi -> cpi -> cpi -> cpi -> cpi -> cpi -> vp8_pass ) ) ;,0
331,"<S2SV_ModStart> =='<S2SV_blank>') { input ++ ; } <S2SV_ModEnd> ptr = strchr <S2SV_ModStart> off ) ) { <S2SV_ModStart> ) ; } } <S2SV_ModStart> ) ) ) { <S2SV_ModStart> ""Unknown <S2SV_blank> filesystem <S2SV_blank> type\\n"" ) ; } <S2SV_ModStart> offset ) ) { <S2SV_ModStart> input ) ; }",1
332,"<S2SV_ModStart> inode ) ; struct hugepage_subpool * spool = subpool_inode ( inode ) ; <S2SV_ModStart> ; if ( hugepage_subpool_get_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> 0 ) { hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg )",1
333,<S2SV_ModStart> key * keyring ; if ( new -> thread_keyring ) return 0,1
334,<S2SV_ModStart> char size_t scanned <S2SV_ModEnd> = 0,0
335,"<S2SV_ModStart> orig ) ; fptr_orig = io_get_open_fptr ( mrb, orig ) ; <S2SV_ModStart> mrb_io_alloc ( mrb <S2SV_ModEnd> ) ; DATA_TYPE",1
336,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
337,<S2SV_ModStart> = 0 ; vpx_writer <S2SV_ModEnd> ( cpi ->,0
338,"<S2SV_ModStart> return res ; res = utee_param_to_param ( utc, <S2SV_ModEnd> param, callee_params <S2SV_ModStart>, callee_params ) ; if ( res!= TEE_SUCCESS ) return res",1
339,"<S2SV_ModStart> int rc ; struct desc_struct old_desc, new_desc ; const struct x86_emulate_ops * ops = ctxt -> ops -> ops -> ops -> ops ; int cpl = ctxt -> cpl ( ctxt ) ; ctxt -> _eip = ctxt -> get_segment ( ctxt, & old_cs, & old_desc, NULL <S2SV_ModEnd>, VCPU_SREG_CS ) <S2SV_ModStart>, VCPU_SREG_CS ) <S2SV_ModEnd> ; memcpy ( <S2SV_ModStart> 2 ) ; rc = __load_segment_descriptor <S2SV_ModEnd> ( ctxt, <S2SV_ModStart> sel, VCPU_SREG_CS, cpl, false, & new_desc ) ; if ( rc!= X86EMUL_CONTINUE <S2SV_ModEnd> ) return X86EMUL_CONTINUE <S2SV_ModStart> return X86EMUL_CONTINUE ; rc = assign_eip_far ( ctxt -> src. val, ctxt -> src. val ) ; if ( rc!= X86EMUL_CONTINUE ) goto fail ; ctxt -> src. val = ctxt -> src. val ; rc = assign_eip ; ctxt -> src. val = old_eip ; rc = assign_eip ; if ( rc!= X86EMUL_CONTINUE ) memcpy ( ctxt -> src. val, ctxt -> src. val,",0
340,<S2SV_ModStart> -> band = av_calloc <S2SV_ModEnd> ( reslevel -> <S2SV_ModStart> -> prec = av_calloc <S2SV_ModEnd> ( reslevel ->,1
341,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
342,"<S2SV_ModStart> = 0 ; memset ( obj_table_start, sizeof ( ut32 ) ) ;",0
343,<S2SV_ModStart> - EPERM ) { <S2SV_ModEnd> return - EPERM <S2SV_ModStart> = 0 ; },0
344,"<S2SV_ModStart> * p_tx0 = ( OPJ_INT32 ) opj_uint_max <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdx, <S2SV_ModEnd> p_cp -> x0 <S2SV_ModStart> * p_tx1 = ( OPJ_INT32 ) opj_uint_min <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdy, <S2SV_ModEnd> p_cp -> x1 <S2SV_ModStart> * p_ty1 = ( OPJ_INT32 ) opj_uint_max <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdy, <S2SV_ModEnd> p_cp -> x1 <S2SV_ModStart> * p_ty1 = ( OPJ_INT32 ) opj_uint_min <S2SV_ModEnd> ( p_cp -> <S2SV_ModStart> p_cp -> tdy, <S2SV_ModEnd> p_cp -> y1",0
345,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * create_output_name <S2SV_ModStart> * create_output_name ( <S2SV_ModEnd> char * fname <S2SV_ModStart> char * fname ) { char * out, * p <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( ( out = malloc ( strlen ( fname ) + 1 <S2SV_ModEnd> ) ) ) <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( * <S2SV_ModStart> * fname == '/' || * fname == '\\\\' <S2SV_ModEnd> ) fname ++ <S2SV_ModStart> fname ++ ; p [ 2 ] = '\\\\' <S2SV_ModEnd> ; p [ <S2SV_ModStart> ; } } } } return NULL <S2SV_ModEnd> ; } <S2SV_null>",0
346,"<S2SV_ModStart> classes = NULL ; zval * retval <S2SV_ModStart> ; } } retval = var_tmp_var ( & var_hash ) ; <S2SV_ModStart>! php_var_unserialize_ex ( retval <S2SV_ModEnd>, & p <S2SV_ModStart> ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> RETURN_FALSE ; } ZVAL_COPY ( return_value, retval <S2SV_ModEnd> ) ; PHP_VAR_UNSERIALIZE_DESTROY",1
347,<S2SV_ModStart> goto __err ; tu -> qhead = tu -> qtail = tu -> qused = 0 ;,1
348,<S2SV_ModStart> ; ptr -> size_t tmp_str = GF_FALSE <S2SV_ModStart> j ] ) { zfound = GF_TRUE ; break ; } <S2SV_ModEnd> i ++ ; <S2SV_ModStart> ++ ; } if (! zfound ) return GF_ISOM_INVALID_FILE ;,0
349,<S2SV_ModStart>. get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },0
350,"<S2SV_ModStart> == 0 ) if ( received_protocol ) { fprintf ( stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; } else <S2SV_ModStart> { uschar * hn ; if ( received_protocol ) { fprintf ( stderr, ""received_protocol <S2SV_blank> is <S2SV_blank> set <S2SV_blank> already\\n"" ) ; exit ( EXIT_FAILURE ) ; }",1
351,<S2SV_ModStart> - EPERM ) { <S2SV_ModEnd> return - EPERM <S2SV_ModStart> = 0 ; },0
352,"<S2SV_ModStart> -> off = strtoull <S2SV_ModEnd> ( p, <S2SV_ModStart> -> filesize = strtoull <S2SV_ModEnd> ( slash +",1
353,"<S2SV_ModStart> * cr ; size_t <S2SV_ModEnd> maxw, maxw <S2SV_ModStart> maxw, max, offx, loopmaxw <S2SV_ModStart>, upb ; size_t i <S2SV_ModEnd> ; upb = <S2SV_ModStart> maxw = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> maxw = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> goto fails ; offx = img -> x0 & 1U ; loopmaxw = maxw - offx ; <S2SV_ModStart> i ) { size_t j ; if ( offx > 0U ) { size_t j ; for ( j < maxw = maxw * maxw - offx ; ++ j ; ++ j ; ++ j ; ++ j ; ++ j ; ++ j ; ++ b ; ++ j < ( loopmaxw <S2SV_ModEnd> & ~ ( <S2SV_ModStart> & ~ ( size_t <S2SV_ModEnd> & ~ ( <S2SV_ModStart> ( offx - offx, <S2SV_ModEnd> ) 1U ) <S2SV_ModStart> ( offx, <S2SV_ModEnd> img -> comps <S2SV_ModStart> int ) * <S2SV_ModEnd> maxw = img -> comps <S2SV_ModStart>. w = <S2SV_ModEnd> img -> comps <S2SV_ModStart>. w ; <S2SV_ModEnd> img -> comps <S2SV_ModStart>. h = <S2SV_ModEnd> img -> comps <S2SV_ModStart> 2 ]",0
354,"<S2SV_ModStart> * state, fmode_t mode <S2SV_ModEnd> ) { if <S2SV_ModStart> { if ( state & state & fmode & fmode ) goto out ; } <S2SV_ModEnd> if ( state <S2SV_ModStart> & fmode, mode <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> state = fmode <S2SV_ModEnd> ) ; out_put",0
355,"<S2SV_ModStart> return SSH_ERR_INVALID_ARGUMENT ; ssh_dispatch_set ( ssh, SSH2_MSG_KEXINIT, NULL ) ;",1
356,"<S2SV_ModStart> { assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> == <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> test <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.constants.constants.empty() <S2SV_blank>  ) ; assert_true_rule ( ""import <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
357,<S2SV_ModStart> read_info ) ; <S2SV_ModEnd> if ( EOFBlob,1
358,"<S2SV_ModStart> char lbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char strbase [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char ltest [ 512 <S2SV_ModEnd> ] ; char <S2SV_ModStart> char strtest [ 512 <S2SV_ModEnd> ] ; if <S2SV_ModStart> ( lbase, ""%511[^\\r\\n]"" <S2SV_ModEnd>, strbase ) <S2SV_ModStart> ( ltest, ""%511[^\\r\\n]"" <S2SV_ModEnd>, strtest ) <S2SV_ModStart> ( nbase!= 511 <S2SV_ModEnd> && ntest!= <S2SV_ModStart> && ntest!= 511 <S2SV_ModEnd> ) ; if",1
359,<S2SV_ModStart> intf ) { <S2SV_ModEnd> if ( cdc_ncm_select_altsetting <S2SV_ModStart> - ENODEV ; return <S2SV_ModEnd> cdc_ncm_bind_common ( dev <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
360,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return 0 ;,0
361,"<S2SV_ModStart> 0, JPC_GETBITS <S2SV_ModEnd> ) ; if",0
362,"<S2SV_ModStart>, e -> elems, e ->",1
363,<S2SV_ModStart> bpp <= 8 && c -> format!= CHUNKY,0
364,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
365,<S2SV_ModStart> q ) { mutex_lock ( & q -> timer_mutex ) ; <S2SV_ModStart> snd_seq_timer_close ( q ) ; mutex_unlock ( & q -> timer_mutex,1
366,"<S2SV_ModStart> int error ; unsigned int nr_blks ; sector_t lblock <S2SV_ModEnd> = offset >> <S2SV_ModStart> = offset >> inode -> i_blkbits ; error = gfs2_get_inode_block ( ip, dibh, & dibh ) ; if ( unlikely ( error ) ) return error ; error = gfs2_get_inode_bh ( ip, dibh, dibh ) ; if ( unlikely ( error ) ) { error = gfs2_is_zero ( ip -> i_blks ) ; if ( error ) goto out ; bh_map. b_size -= bh_map. b_map. b_size -= bh_map. b_size >> inode -> i_size >> inode -> i_blks ; if ( unlikely ( <S2SV_ModStart> ) ) { error = len >> inode -> i_map. b_size >> inode -> i_map. b_size >> inode -> i_size >> inode. b_map. b_size -= bh_map. b_size ; if ( unlikely ( error ) ) goto out ; len -= bh_map. b_map. b_size -= bh_map. b_map. b_map ( & bh_size, 1 ) ; if (",0
367,<S2SV_ModStart> VIPS_FOREIGN_LOAD_GET_CLASS ( load ) ; if ( load -> error ) return ( NULL <S2SV_ModStart> -> real ) || <S2SV_ModEnd> vips_foreign_load_iscompat ( load <S2SV_ModStart> out ) ) { vips_operation_invalidate ( VIPS_OPERATION ( load ) ) ; load -> error = TRUE ; return ( NULL ) ; } <S2SV_ModEnd> vips_image_pipelinev ( load,1
368,"<S2SV_ModStart> ), name, NULL <S2SV_ModEnd> ) ; if",0
369,<S2SV_ModStart> ; if (! retval ) <S2SV_ModEnd> retval = context,1
370,<S2SV_ModStart> dev ) ) ; if ( state -> rxlfifo_lock ) return - ENOMEM ;,0
371,<S2SV_ModStart> service_name_tlv_length ) ; if (! service_name_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> miux_tlv_length ) ; if (! miux_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> rw_tlv_length ) ; if (! rw_tlv ) { err = - ENOMEM ; goto error_tlv ; },1
372,<S2SV_ModStart> void ssh_state ( <S2SV_ModEnd> ssh_open *,0
373,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, cfg ) <S2SV_ModStart> vpx_codec_alg_priv_t * ctx ; if ( ctx -> flags & VPX_CODEC_OK ) return NULL ; <S2SV_ModStart> & VPX_CODEC_INMA <S2SV_ModEnd>, flags ) <S2SV_ModStart> ; } if ( ( flags & VPX_CODEC_ON ( ) ) return res ;",0
374,<S2SV_ModStart> unsigned int chan = 0,0
375,<S2SV_ModStart> ; value |=,0
376,<S2SV_ModStart> if (! ipc_check ( sk ) ) { <S2SV_ModEnd> if ( skb,0
377,<S2SV_ModStart> len ; } ND_TCHECK_32BITS <S2SV_ModEnd> ( p + <S2SV_ModStart> p + 2 <S2SV_ModEnd> ) ; ND_PRINT,1
378,<S2SV_ModStart> 0 ; } if ( unlikely ( IPCB ( skb ) -> opt. optlen ) ) skb_dst_force ( skb ) ; else,1
379,<S2SV_ModStart> private ) { struct skcipher_tfm * tfm = private ; crypto_free_tfm ( tfm <S2SV_ModEnd> ) ; },0
380,<S2SV_ModStart> bprm ) { <S2SV_ModEnd> int retval ; <S2SV_ModStart> int retval ; bprm_fill_uid ( bprm ) ; <S2SV_ModEnd> retval = security_bprm_set_creds,1
381,<S2SV_ModStart> err ; goto err <S2SV_ModEnd> ; } if,0
382,<S2SV_ModStart> ; dlen -= 3 <S2SV_ModEnd> ; for (,0
383,<S2SV_ModStart> { rq = tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; fn (,1
384,<S2SV_ModStart> ( (! ( ctx ) <S2SV_ModEnd> ) res =,0
385,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
386,<S2SV_ModStart> ; if ( skb -> len < 0 ) return 0 ; if (,0
387,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; memset",0
388,"<S2SV_ModStart> bp, len ) ; break ; case ETHERTYPE_TEB : ether_print ( ndo, bp, len <S2SV_ModStart> ndo_snapend - bp <S2SV_ModEnd>, NULL,",1
389,"<S2SV_ModStart> ; } } if ( tile_buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> calculating <S2SV_blank> buffer <S2SV_blank> size."" ) ; exit ( - 1 ) ; } <S2SV_ModStart> _TIFFmalloc ( tile_buffsize + 3 <S2SV_ModStart> 0 ) return 0 ; tilebuf [ tile_buffsize ] = 0 ; tilebuf [ tile_buffsize + 1 ] = 0 ; tilebuf [ tile_buffsize + 2 ] =",1
390,<S2SV_ModStart> O_APPEND | O_CREAT | O_NOFOLLOW,1
391,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> strdup_null>,0
392,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart> -> nd_num ) { ret = <S2SV_ModEnd> - EBUSY ; <S2SV_ModStart> - EBUSY ; goto out ; } <S2SV_ModStart> ( ret ) goto out <S2SV_ModEnd> ; } if <S2SV_ModStart> nd_num ; } ret = count ; out : o2nm_unlock_subsystem ( ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>,1
393,<S2SV_ModStart> ( fpStr [ 0 ] <S2SV_ModEnd> ) ; if,0
394,<S2SV_ModStart> 0x3 ) ; if ( addr == 0x0 ) { <S2SV_ModStart> 0x3 ) ; },0
395,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
396,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
397,<S2SV_ModStart> return - E_NOTHANDLED ; if ( ninst == 0 ) return - E_INVALID,1
398,<S2SV_ModStart> trunc ; return <S2SV_ModEnd> ND_TCHECK ( <S2SV_ModStart> ) ) ; ND_TCHECK,0
399,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
400,"<S2SV_ModStart> return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> p + offset <S2SV_ModEnd>, tim.",0
401,"<S2SV_ModStart> 1 ) { if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf = opipe",0
402,<S2SV_ModStart> ( ) ; if (! tbuf ) { return NULL ; },1
403,<S2SV_ModStart> * r ; <S2SV_ModEnd> unsigned int err,0
404,<S2SV_ModStart> } if ( LXC_BIND | L_BIND | L_NO_MODE_MASK ) { lxc =,0
405,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> if ( c,0
406,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nsc_encode ( NSC_CONTEXT <S2SV_ModStart> rowstride ) { if (! context ||! bmpdata || ( rowstride == 0 ) ) return FALSE ; if (! <S2SV_ModStart>, rowstride ) ) return FALSE <S2SV_ModStart> ChromaSubsamplingLevel ) { if (! <S2SV_ModStart> ( context ) ) return FALSE ; } return TRUE ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
407,"<S2SV_ModStart> void vp9_tree_probs_to_distribution ( vpx_tree <S2SV_ModEnd> * tree,",0
408,<S2SV_ModStart> stringset == ETH_SS_STATS || stringset == ETH_SS_PRIV_FLAGS,1
409,<S2SV_ModStart> return ( ( ( <S2SV_ModStart> ) / 8 ) * GetPSDPacketSize ( image ),1
410,<S2SV_ModStart> } if (! TEMP_FAILURE_RETRY ( <S2SV_ModStart> ] ) ),0
411,<S2SV_ModStart> bMasterInterface0 ) ; if (! pcu -> ctrl_intf ) return - EINVAL ; <S2SV_ModStart> bSlaveInterface0 ) ; if (! pcu -> data_intf ) return - EINVAL ;,1
412,"<S2SV_ModStart> const char * devname = kstrdup ( dev_name ( & <S2SV_ModEnd> d -> udev <S2SV_ModStart> udev -> dev ), GFP_KERNEL ) ; const char * drvname = d -> name <S2SV_ModStart> d ) ; kfree ( devname <S2SV_ModEnd> ) ; }",0
413,"<S2SV_ModStart> pirlvl ) { if ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 || pirlvl -> prcheightexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 ) { return - 1 ; } <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> ) % ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << rpx ) <S2SV_ModStart> ) % ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << rpy )",1
414,<S2SV_ModStart> target_enc ) { return ONIGERR_NOT_SUPPORTED_ENCODING_COMBINATION <S2SV_ModEnd> ; } else,1
415,<S2SV_ModStart> <S2SV_null> <S2SV_null,0
416,"<S2SV_ModStart> u_char * tptr, const u_int length ) { u_int network_addr_type ; u_int <S2SV_ModEnd> hexdump = FALSE <S2SV_ModStart> = FALSE ; if ( length < 1 ) { ND_PRINT ( ( ndo, ""(invalid <S2SV_blank> length <S2SV_blank> %u)"", length - 1 ) ) ; hexdump = TRUE ; break ; } <S2SV_ModStart> case AFNUM_INET6 : if ( length!= 1 + 4 ) { ND_PRINT ( ( ndo, ""(invalid <S2SV_blank> address <S2SV_blank> length <S2SV_blank> %u)"", length - 1 ) ) ; hexdump = TRUE ; break ; } <S2SV_ModStart> case AFNUM_INET6 : if ( length!= 1 + 16 ) { ND_PRINT ( ( ndo, ""(invalid <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> address <S2SV_blank> length <S2SV_blank> %u)"", length - 1 ) ) ; hexdump = TRUE ; break ; }",0
417,"<S2SV_ModStart> ; u64 msr_data, rcx, rdx <S2SV_ModStart> = X86EMUL_MODE_PROT32 ; rcx = reg_read ( ctxt, VCPU_REGS_RCX ) ; rdx = reg_read ( ctxt, VCPU_REGS_RDX ) ; <S2SV_ModStart> = 1 ; if ( is_noncanonical_address ( rcx ) || is_noncanonical_address ( rdx ) ) return emulate_gp ( ctxt, 0 ) ; <S2SV_ModStart> -> _eip = rdx <S2SV_ModEnd> ; * reg_write <S2SV_ModStart> VCPU_REGS_RSP ) = rcx <S2SV_ModEnd> ; return X86EMUL_CONTINUE",1
418,<S2SV_ModStart> dev ) ; ssize_t len ; device_lock ( dev ) ; len = <S2SV_ModEnd> sprintf ( buf <S2SV_ModStart> driver_override ) ; device_unlock ( dev ) ; return len ;,1
419,"<S2SV_ModStart>  BIO * tmpout ; tmpout = cms_get_bio ( out, flags ) ; if (! tmpout ) { CMSerr ( CMSerr ( CMS_F_CMS_COPY_CONTENT, ERR_R_MALLOC_FAILURE ) ; goto err ; } if (! BIO_write ( in ) ) { if (! BIO_read ( in ) ) goto err ; if ( i < 0 ) goto err ; } if ( i >= i ++ ) { if ( BIO_write ( in ) { CMSerr ( CMSerr ( CMS_F_CONTENT, CMS_TEXT ) goto err ; } if ( i < 0 ) goto err ; break ; } if (! BIO_write ( tmpout ) ) { if ( i >= i ) goto err ; break ; } if (! BIO_write ( i ) ) goto err ; } if ( i < 0 ) goto err ; break ; } <S2SV_ModEnd> if (!",0
420,<S2SV_ModStart> = KRB5_PREAUTH_FAILED ; if ( retval == 0 ) rs. enc_tkt_reply -> flags |= TKT_FLG_PRE_AUTH ;,1
421,"<S2SV_ModStart> vp9_tree_index ( const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> ) { const vpx_prob <S2SV_ModEnd> * probs",0
422,"<S2SV_ModStart> = ""/tmp"" ; # ifdef HAVE_MKDTEMP tmp_dir = mkdtemp ( Strnew_m_charp ( tmp_dir, ""/w3m-XXXXXX"", NULL ) -> ptr ) ; if ( tmp_dir == NULL ) tmp_dir = rc_dir ; # endif",1
423,"<S2SV_ModStart> = 0 ; size_t pathlen = 0 ; <S2SV_ModStart> case AF_UNIX : pathlen = sizeof ( <S2SV_ModEnd> ( ( struct <S2SV_ModStart> ) -> sun_path ) ; if ( MAXPATHLEN <= pathlen ) { pathlen = MAXPATHLEN - 1 ; } strncpy ( addr_text, ( ( struct sockaddr_un * ) sock_addr ) -> sun_path, pathlen ) ; addr_text [ pathlen <S2SV_ModEnd> ] = '\\0'",1
424,"<S2SV_ModStart> void write_buffer ( const tran_low_t <S2SV_ModEnd> * output,",0
425,<S2SV_ModStart> char * p <S2SV_ModEnd> ; if (,0
426,"<S2SV_ModStart> ) { struct hugepage_subpool * spool = subpool_vma ( vma ) ; struct <S2SV_ModStart> page * page <S2SV_ModEnd> ; long chg <S2SV_ModStart> ) if ( hugepage_subpool_get_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> page ) { hugepage_subpool_put_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> unsigned long ) spool <S2SV_ModEnd> ) ; vma_commit_reservation",1
427,"<S2SV_ModStart> filegen_string ) ; if ( NULL == filegen ) { msyslog ( LOG_ERR, ""stats <S2SV_blank> %s <S2SV_blank> unrecognized"", filegen_string ) ; continue ; } <S2SV_ModStart> filegen_file ) ; if ( NULL == filegen ) { msyslog ( LOG_ERR, ""filegen <S2SV_blank> category <S2SV_blank> \'%s\' <S2SV_blank> unrecognized"", filegen_file ) ; continue ; }",1
428,"<S2SV_ModStart>, GID_INVALID, MODE_INVALID <S2SV_ModEnd> ) ; timer_set_state",1
429,"<S2SV_ModStart> fadst16 ( const tran_low_t * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s12 ; tran_high_t s12 = input [ 7 ] ; tran_high_t s1 ] ; tran_high_t s1 = input [ 7 ] ; tran_high_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> 0 ] ; tran_high_t s1 = input [ 7 ] ; tran_high_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> 0 ] ; tran_high_t s12 = input [ 6 ] ; tran_high_t s12 ] ; tran_high_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> 1 ] ; tran_high_t s1 = input [ 7 ] ; tran_high_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> 1 ] ; tran_high_t <S2SV_ModEnd> x2 = input <S2SV_ModStart> 1 ] ; tran_high_low_t <S2SV_ModEnd> x2 = input <S2SV_ModStart> 1 ] ; tran_low_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> 3 = input [ 6 ] ; tran_low_t <S2SV_ModEnd> x2 = input [ 3 ] <S2SV_ModStart> 3 ] = ( tran_low_t ) <S2SV_ModStart> 3 ] = ( tran_",0
430,<S2SV_ModStart> endif,0
431,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
432,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF <S2SV_ModStart> wc ) ; return,1
433,"<S2SV_ModStart> tot_len ) ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
434,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> AVINDEX_KEYFRAME ) ; },1
435,<S2SV_ModStart> 0 ] && datalen < 1,0
436,"<S2SV_ModStart>, * controller, * next = NULL <S2SV_ModStart> out ; } <S2SV_ModEnd> if (! <S2SV_ModStart>, cgroup, & next ) ) { if (! fpath || strcmp ( next, fpath ) == 0 ) ret = - EBUSY ; else ret = - ENOENT ; goto out ; } if (! fc_may_access ( fc, controller, cgdir, NULL, O_WRONLY <S2SV_ModEnd> ) ) { <S2SV_ModStart> if (! caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if (! <S2SV_ModStart> cgdir ) ; free ( next ) ;",1
437,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flag & CL_UNPRIVILEGED <S2SV_ModStart> & CL_UNPRIVILEGED ) { mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY <S2SV_ModEnd> ; if (,0
438,<S2SV_ModStart> rds_loop_transport ; } <S2SV_ModEnd> } conn ->,1
439,<S2SV_ModStart> * rsize >= 112 <S2SV_ModEnd> && rdesc [,1
440,<S2SV_ModStart> if ( ( ( <S2SV_ModStart> ) < bodyLength ) || ( bodyLength < sizeof ( EAPOL_RSN_KEY ) ),1
441,<S2SV_ModStart> ( likely ( serio <S2SV_ModEnd> &&! filtered,1
442,"<S2SV_ModStart>! er ) { ND_TCHECK ( <S2SV_ModEnd> dp [ 0 <S2SV_ModStart> 0 ] ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> c <S2SV_blank> %04x"", EXTRACT_32BITS ( & dp [ 0 ] ) ) ) ; } <S2SV_ModEnd> return ; case",1
443,"<S2SV_ModStart> * newName, int newLen, <S2SV_ModStart> * udfName, int udfLen, <S2SV_ModEnd> uint8_t * fidName <S2SV_ModStart> ( newIndex < newLen <S2SV_ModEnd> ) newName [ <S2SV_ModStart> } maxFilenameLen = newLen - CRC_LEN <S2SV_ModEnd> - localExtIndex ; <S2SV_ModStart> ( newIndex > newLen - CRC_LEN ) newIndex = newLen - CRC_LEN <S2SV_ModEnd> ; newName [",1
444,"<S2SV_ModStart> void count_segs ( const VP9_COMMON * cm, MACROBLOCKD * cm, <S2SV_ModEnd> MODE_INFO * <S2SV_ModStart> MODE_INFO * * * * mi <S2SV_ModEnd>, bs = <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd> ) { const <S2SV_ModStart> int bbs = mi <S2SV_ModEnd> -> mb ; <S2SV_ModStart> BLOCK_SIZE bsize = mi <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> BLOCK_SIZE bsize ) ; if ( mi <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> } else { get_seg_segment_id_id ( cpi, mi <S2SV_ModEnd>, hbs, <S2SV_ModStart> BLOCK_SIZE bsize ) ; } <S2SV_ModStart> } else { if ( mi <S2SV_ModEnd> ( cpi, <S2SV_ModStart> BLOCK_SIZE bsize >= 0 ) <S2SV_ModEnd> ) { <S2SV_ModStart> return ; } <S2SV_ModStart> } else { count_seg_seg_seg_segment_id = mi <S2SV_ModEnd> ( cpi, <S2SV_ModStart> } else { if <S2SV_ModEnd> ( cpi ->",0
445,<S2SV_ModStart> } if ( ( c -> flags & ( c -> flags ) &&,0
446,<S2SV_ModStart> ; new_state = EXT4_GET_BLOCKS_CONVERT <S2SV_ModEnd> ; if (,0
447,"<S2SV_ModStart> * s ; const unsigned char * p = sigbuf ; unsigned char * der = NULL ; int derlen = - 1 ; <S2SV_ModStart> s, & p <S2SV_ModEnd>, siglen ) <S2SV_ModStart> == NULL ) goto err ; derlen = i2d_DSA_SIG ( s, & der ) ; if ( derlen!= siglen || memcmp ( sigbuf, der, derlen ) ) <S2SV_ModStart> ; err : if ( derlen > 0 ) { OPENSSL_cleanse ( der, derlen ) ; OPENSSL_free ( der ) ; }",1
448,"<S2SV_ModStart> size ) ; if (! _gdImageGDPExtractData <S2SV_ModEnd> ( im, <S2SV_ModStart> size ) ) { <S2SV_ModEnd> rv = gdDPExtractData <S2SV_ModStart> size ) ; } else { rv = NULL ; }",0
449,<S2SV_ModStart> ) ; } if ( bprm -> interp!= bprm -> filename ) kfree ( bprm -> interp ) ;,1
450,"<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if! <S2SV_ModStart> ( p -> ai_namelen, & i_namelen ) ) { ret = OE_RAISE_ERRNO ( OE_ENOMEM ) ; } if ( ret < 0 ) { ret = OE_R_ERRNO ( OE_EINVAL ) ; } <S2SV_ModStart> ; if ( ret > ( <S2SV_ModEnd> p -> ai_namelen <S2SV_ModStart> -> ai_namelen, <S2SV_ModEnd> i ) { ret <S2SV_ModStart> ) { ret = ret <S2SV_ModEnd> ; } if",0
451,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
452,"<S2SV_ModStart> ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx, ""Invalid <S2SV_blank> image <S2SV_blank> dimensions"" ) ; goto done ; }",1
453,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
454,"<S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; else if ( ret <= size ) memcpy ( data, buf, ret ) ; kfree ( buf ) ;",0
455,"<S2SV_ModStart> * body, const size_t <S2SV_ModEnd> ; p ->",0
456,<S2SV_ModStart> destroy_list ) ; <S2SV_ModEnd> } } <S2SV_null>,1
457,"<S2SV_ModStart> int flags, vpx_write_frame_frame_t * src, int64_end <S2SV_ModEnd> ( src, <S2SV_ModStart> ) { # if CONFIG_VP9_HIGHBITDEPTH int64_t flags ; # else if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> max_frames == 1 ) { vp9_add_frame_frame_copy_frame ( src, img -> buf, 0 ) ; # endif <S2SV_ModEnd> ( buf, <S2SV_ModStart> flags ) ; vpx_write_copy_frame <S2SV_ModEnd> ( src, <S2SV_ModStart> flags ) ; vpx_write <S2SV_ModEnd> ( src, <S2SV_ModStart> ) ; } else { vpx_write <S2SV_ModEnd> ( src,",0
458,<S2SV_ModStart> ) ; } fuse_conn_put ( & cc -> fc ) ;,1
459,"<S2SV_ModStart> ( code ) { * status = ""DECODE_PA_S4U_X509_X509_X509_USER"" ; return code ; } <S2SV_ModEnd> code = verify_s4u_x509_x509_checksum",0
460,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> * r ->,0
461,<S2SV_ModStart> cur_pic. field_picture <S2SV_ModEnd> ) return 0,1
462,<S2SV_ModStart> off ) { struct rds_header * sgp = & rm -> data. op_sg [ sg ] ; int ret = sizeof ( struct rds_header ) + be32_to_cpu ( rm -> m_inc. i_inc ) ; <S2SV_ModStart> 0 ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>,0
463,<S2SV_ModStart> buf ) ) { return 0 ; } <S2SV_ModEnd> ext_block = (,1
464,<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = key_permission,1
465,<S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> = IP6M_MINLEN ; ND_TCHECK_32BITS ( & bp [ hlen ] <S2SV_ModEnd> ) ; if <S2SV_ModStart> += 1 ; ND_TCHECK_32BITS ( & bp [ hlen ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> += 1 ; ND_TCHECK2 ( & bp [ hlen ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> [ 1 ] <S2SV_ModEnd> ) ) ; if,0
466,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
467,"<S2SV_ModStart> = hmi_data ; uint32_t data_siz ; <S2SV_ModStart> } * note <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( hmi_track_offset [ i ] >= hmi_size ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __FUNCTION__, WM_ERR_NOT_HMI, ""file <S2SV_blank> too <S2SV_blank> short"", 0 ) ; goto _hmi_end ; } data_siz = hmi_size - hmi_track_offset [ i ] ; hmi_t data_siz -= hmi_size <S2SV_ModStart> += 4 ; hmi_tmp = 4 ; } hmi_tmp = 4 ; hmi_tmp = 4 ; hmi_data <S2SV_ModEnd> += 4 ; <S2SV_ModStart> += 4 ; hmi_tmp = 4 ; if ( hmi_tmp > hmi_tmp ) { _WM_GLOBAL_ERROR ( __LINE__, __LINE__, __LINE__, WM_ERR_NOT_HMI, ""file <S2SV_blank> too <S2SV_blank> short"", 0 ) ; goto _hmi_tmp ; } hmi_tmp = hmi_tmp ; hmi_siz <S2SV_ModStart> hmi_data, hmi_siz <S2SV_ModEnd> ; } data_siz <S2SV_ModStart> +=",0
468,<S2SV_ModStart> -> id ; haddr -> hci_channel = 0 ;,1
469,<S2SV_ModStart> -> i_iget5_offset ; fh16 [ 3 ] = 0 ;,1
470,"<S2SV_ModStart> ( kdc_active_realm, client. princ <S2SV_ModEnd>, request ->",1
471,<S2SV_ModStart> break ; } <S2SV_ModEnd> dst_reg -> smin_value <S2SV_ModStart> = S64_MAX ; <S2SV_ModEnd> if ( src_known,1
472,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> const LPF_CHECK ( cpi -> base_qindex, cm -> bit_depth <S2SV_ModStart> ( cpi -> bit_depth <S2SV_ModEnd> ) ; int",0
473,<S2SV_ModStart> },0
474,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
475,"<S2SV_ModStart> = getnum ( <S2SV_ModEnd> fmt, MAXALIGN",0
476,<S2SV_ModStart> void usage_exit ( void,1
477,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
478,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
479,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
480,<S2SV_ModStart>,0
481,<S2SV_ModStart> ; if ( * value == 0 ||,1
482,<S2SV_ModStart>,0
483,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
484,"<S2SV_ModStart> ; if ( snpal == 6 ) ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> SNPA <S2SV_blank> (length: <S2SV_blank> %u): <S2SV_blank> %u): <S2SV_blank> %s"", snpa ) ) ) ; else ND_PRINT ( ( ndo, snpa ) ) ) ;",0
485,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> m"", <S2SV_ModStart> } sprintf ( outputbuffer ) ; sendClean ( outputbuffer ) ;",0
486,<S2SV_ModStart> } else { return false ; } } <S2SV_ModEnd> } else if,0
487,<S2SV_ModStart> case IS_STRING : { zval dval ; dval = * * tmp ; zval_copy_ctor ( & dval ) ; convert_to_double ( & dval <S2SV_ModEnd> ) ; rect <S2SV_ModStart> i ] = Z_DVAL ( dval ) ; } else { rect. x = <S2SV_ModStart> FAILURE ) ; } <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval lval ; lval = * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; rect <S2SV_ModStart>. x = Z_LVAL ( lval ) ; } else { rect. x = <S2SV_ModStart> FAILURE ) ; } } <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!= IS_LONG ) { zval lval lval lval ; lval = * * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; rect <S2SV_ModStart>. y = Z_LVAL ( lval ) ; } } else { rect. y = <S2SV_ModStart> FAILURE ) ; } <S2SV_ModStart> FAILURE ) { if ( Z_TYPE_PP ( tmp )!=,0
488,<S2SV_ModStart> self ) { <S2SV_ModEnd> return 0 ;,0
489,<S2SV_ModStart> SQL_DROP ) ; <S2SV_ModEnd> return 0 ;,1
490,"<S2SV_ModStart> ; r = __copy_from_user <S2SV_ModEnd> ( data,",1
491,"<S2SV_ModStart>, * q <S2SV_ModEnd> ; Clp_Parser * <S2SV_ModStart> ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> Hler <S2SV_blank> Lee <S2SV_blank> G.\\nThere <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> G.\\n\\\n\\\n\\\nThis <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> a\\n\\\n\\\n\\\n\\\nThis <S2SV_blank> is <S2SV_blank> purpose.\\nparticular <S2SV_blank> purpose.\\n\\\n\\\nThere <S2SV_blank> is <S2SV_blank> purpose.\\n\\\n\\\n\\\ <S2SV_ModEnd> ) ; exit <S2SV_ModStart> && isspace ( ( unsigned char ) <S2SV_ModStart> ; isspace ( unsigned char )",0
492,<S2SV_ModStart> = 0 ; info -> port = NULL ;,1
493,<S2SV_ModStart> -> ctx. <S2SV_ModEnd> pmu = pmu,1
494,"<S2SV_ModStart> iovec * iovec, struct iov_iter * iter ) { if ( len > MAX_RW_COUNT ) len = MAX_RW_COUNT ; <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> = 1 ; iov_iter_init ( iter, rw, iovec, * nr_segs, len ) ;",1
495,<S2SV_ModStart> ext4_group_t flex_group ; unsigned <S2SV_ModStart> -> s_log_groups_per_flex ; if ( sbi -> s_log_groups_per_flex < 1 || sbi -> s_log_groups_per_flex > 31 ) { sbi -> s_log_groups_per_flex = 0 ; return 1 ; } <S2SV_ModStart> -> s_log_groups_per_flex ; <S2SV_ModEnd> flex_group_count = (,1
496,<S2SV_ModStart> ( unlikely ( chunk -> pdiscard ) ) return 0 ; if ( unlikely (,1
497,<S2SV_ModStart>,0
498,"<S2SV_ModStart> { if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) return exit_client ( cptr, sptr, sptr, ""Malformed <S2SV_blank> AUTHENTICATE"" ) ; if ( <S2SV_ModStart> { if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) return exit_client ( cptr, sptr, sptr, ""Malformed <S2SV_blank> AUTHENTICATE"" ) ; if (",1
499,<S2SV_ModStart> <= w - ( int ),1
500,<S2SV_ModStart> callback_args -> forward_matches ; assert ( match_offset + match_length <= callback_args -> data_size ),1
501,<S2SV_ModStart> options. disable_forwarding && use_privsep,1
502,"<S2SV_ModStart> { if ( length > SMKTREE_DECODE_MAX_RECURSION ) { av_log ( NULL, AV_LOG_ERROR, ""Maximum <S2SV_blank> tree <S2SV_blank> recursion <S2SV_blank> level <S2SV_blank> exceeded.\\n"" ) ; return AVERROR_INVALIDDATA ; } if (",1
503,<S2SV_ModStart> err ; } if ( m -> msg_name ),1
504,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body_args, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> stmt"" ) ; return 1 ; } else <S2SV_ModEnd> { int res <S2SV_ModStart> ; Py_ssize_t i <S2SV_ModEnd> ; res = <S2SV_ModStart> ) ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> field <S2SV_blank> field <S2SV_blank> field <S2SV_blank> \\"" <S2SV_blank> \\"" <S2SV_blank> missing <S2SV_blank> \\"" <S2SV_blank> from <S2SV_blank> field <S2SV_blank> %s"", i, i <S2SV_ModEnd>, arena ) <S2SV_ModStart> ) ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & PyId_ignores, & PyId_type, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> missing <S2SV_blank>",0
505,<S2SV_ModStart> m ; int hstartrow <S2SV_ModEnd> ; if ( <S2SV_ModStart> 2 ) { hstartrow <S2SV_ModEnd> = ( numrows <S2SV_ModStart> = numrows - hstartrow <S2SV_ModEnd> ; n = <S2SV_ModStart> & a [ hstartrow <S2SV_ModEnd> * stride ],1
506,"<S2SV_ModStart> ""REPLY_ADD_STA <S2SV_blank> PASSED\\n"" ) ; ret = iwl_sta_ucode_activate ( priv, sta_id ) <S2SV_ModEnd> ; break ;",1
507,"<S2SV_ModStart> ; log_file = fopen_safe <S2SV_ModEnd> ( file_name,",1
508,"<S2SV_ModStart> "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> x"" ) ; assert_regexp_syntax_error ( ""\\\\x0"" ) ; assert_regexp_syntax_error ( ""\\\\x"" ) ; assert_regexp_syntax_error ( ""\\\\xxy"" ) ;",0
509,"<S2SV_ModStart> & HB_LOCK ) spin_lock_irqsave ( & hashbin -> hb_spinlock, flags ) ; <S2SV_ModEnd> for ( i <S2SV_ModStart> ++ ) { while ( 1 ) { <S2SV_ModStart> ] ) ; if (! queue ) break ; <S2SV_ModEnd> if ( free_func <S2SV_ModStart> ( free_func ) { if ( hashbin -> hb_type & HB_LOCK ) spin_unlock_irqrestore ( & hashbin -> hb_spinlock, flags ) ; free_func ( queue ) ; } hashbin -> hb_type & HB_LOCK ) spin_unlock_irqrestore ( & HB_LOCK ) ; <S2SV_ModEnd> spin_unlock_irqrestore ( & <S2SV_ModStart> flags ) ; <S2SV_ModEnd> spin_unlock ( & <S2SV_ModStart> flags ) ; <S2SV_ModEnd> } } hashbin",0
510,<S2SV_ModStart> EPERM ; } if ( ( ( mnt -> mnt. mnt_flags & MNT_LOCK_ATIME ) &&! ( ( mnt_flags & MNT_LOCK_NOEXEC ) ) ) { return - EPERM ; } if ( ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOSUID ) &&! ( mnt_flags & MNT_NODEV ) ) { return - EPERM ; } if ( ( ( ( mnt -> mnt_flags & MNT_LOCK_NOEXEC ) &&! ( mnt_flags & MNT_LOCK_NOSUID ) ) ) { return - EPERM ; } if ( ( ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) && ( ( ( ( ( mnt_flags & MNT_NODEV )!= ( mnt_flags & MNT_NOEXEC ) ) ) { return - EPERM ; } if ( ( ( ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOEXEC ) ) &&! ( mnt_flags & MNT_NOEXEC ) ) { return - EPERM ; } if ( ( ( ( ( mnt -> mnt_flags & MNT_LOCK_ATIME,0
511,"<S2SV_ModStart> copied, err <S2SV_ModEnd> ; int vnet_hdr_len <S2SV_ModStart> out_free ; } copied = skb -> len ; if ( copied > len ) { copied = len ; msg -> msg_flags |= MSG_TRUNC ; } err = skb_copy_datagram_iovec ( skb, 0, copied ) ; if ( err ) goto out_free ; <S2SV_ModEnd> if ( copied <S2SV_ModStart> msg -> msg_type ) ; <S2SV_ModEnd> if ( copied",0
512,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
513,"<S2SV_ModStart> ( serial -> num_bulk_out <S2SV_ModEnd> < 2 ) <S2SV_ModStart> < 2 ) { dev_err ( & serial -> interface -> dev, ""missing <S2SV_blank> bulk <S2SV_blank> out <S2SV_blank> endpoints\\n"" ) ; return - ENODEV ; } <S2SV_ModEnd> port = serial",1
514,"<S2SV_ModStart> write_junk = 1, table_length = 0 <S2SV_ModStart> ; DS64Chunk ds64_chunk ; ds64Chunk cs64_chunk <S2SV_ModStart> ds64_chunk ) ; total_riff_bytes += table_length * sizeof ( CS64Chunk ) ; if ( table_length * sizeof ( cs64Chunk ) total_riff_bytes = 0, table_length * sizeof ( CS64Chunk ) <S2SV_ModStart> ) ) ) { error_line ( ""a <S2SV_blank> write <S2SV_blank> file!"" ) ; return FALSE ; } if (",0
515,"<S2SV_ModStart> ( flags, & msg_sys <S2SV_ModEnd> ) ; if <S2SV_ModStart> -> msg_name, msg_sys <S2SV_ModEnd> ) ; if <S2SV_ModStart> -> msg_sys, msg_sys <S2SV_ModEnd> ) ; if",0
516,<S2SV_ModStart> <S2SV_null> <S2_null> <S2_null> static <S2SV_ModStart> int b_bh_bh = 0 <S2SV_ModStart> ) { int b_bh = 0 <S2SV_ModEnd> ; int n <S2SV_ModStart> = 0 ; if ( unlikely ( i < SIZE_MAX_BLOCK_SIZE ) ) { <S2SV_ModStart> = 0 ; } else { int n = 0 ; for ( i = 0 ; i < height ) { if ( i = 0 ; i = 0 ; break ; } },0
517,"<S2SV_ModStart> -> codec_interface <S2SV_ModEnd> ( ) <S2SV_ModStart> ( input, <S2SV_ModEnd> ) ; snprintf",0
518,<S2SV_ModStart> return FALSE ; { BOOL rc ; <S2SV_ModStart> -> prof_nsc_rle_decompress_data ) rc = <S2SV_ModStart> -> prof_nsc_rle_decompress_data ) if (! rc ) return FALSE ; } { BOOL rc ; <S2SV_ModStart> -> prof_nsc_decode ) rc = <S2SV_ModStart> -> prof_nsc_decode ) if (! rc ) return FALSE ; },1
519,"<S2SV_ModStart> -> dict ) && ( ctxt -> dict, value )",0
520,"<S2SV_ModStart> ; if ( is_link ( fname ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank> %s <S2SV_blank> file\\n"", fname ) ; exit ( 1 ) ; } if ( <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> ; if ( is_link ( fname ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank> %s <S2SV_blank> file\\n"", fname ) ; exit ( 1 ) ; } if ( <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> } if ( is_link ( fname ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank> %s <S2SV_blank> file\\n"", fname ) ; exit ( 1 ) ; } free ( fname ) ; } free ( fp ) ;",0
521,"<S2SV_ModStart> * aclp, uint32_t * aclp, <S2SV_ModStart> * aclp ) { size_t status = 0 <S2SV_ModEnd> ; int status <S2SV_ModStart> & aclp -> iov_len <S2SV_ModEnd> ; if ( <S2SV_ModStart> - EINVAL ; aclp -> iov_len = 0 <S2SV_ModEnd> ; status <S2SV_ModStart> - EOPNOTSUPP <S2SV_ModEnd> ) ; if",0
522,<S2SV_ModStart> ; if (fv -> b == NULL ) return (,0
523,"<S2SV_ModStart> ( msix, <S2SV_ModEnd> num_size >",0
524,<S2SV_ModStart> = timespec_to_ns ( & <S2SV_ModStart> = timespec_to_ns ( & <S2SV_ModStart> = timespec_to_ns ( &,1
525,"<S2SV_ModStart> { if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
526,<S2SV_ModStart> case 0 : if ( copy == 0 ) return - 1 ;,0
527,"<S2SV_ModStart> multipart_media ; struct range_media * r = & clt -> clt_media ; struct range * range <S2SV_ModEnd> ; size_t content_length <S2SV_ModStart> ; size_t content_length = 0 <S2SV_ModStart> nranges, <S2SV_ModEnd> ; size_t content_length <S2SV_ModStart> if ( nranges = get_ranges ( clt, <S2SV_ModEnd> range_length, st <S2SV_ModStart> st -> st_size ) < 1 <S2SV_ModEnd> ) { range <S2SV_ModStart> 1 ) ; range = & r -> range [ 0 ] ; <S2SV_ModEnd> } else if <S2SV_ModStart> 1 ) { range = & r -> clt -> clt -> range [ 0 ] ; range [ 0 ] = & r -> range [ 0 ] ; r -> range [ 0 ] ; <S2SV_ModEnd> } else if <S2SV_ModStart> } else { range = snprintf ( & r -> range [ 0 ], sizeof ( clt -> clt -> clt_boundary ) ) ; for ( i = 0 ; i < nranges ; i ++ ) { range = & r -> range [ i ] ; i ++ ; i ++ ; for ( i = 0 ; i < nranges ; i ++ ) { range = & r -> range [ i ] ; i ++ ; i ++ ; for ( i = 0 ; i < nranges ; i",0
528,"<S2SV_ModStart> ( interface, KSZ8851_ISR_LCIE, KSZ8851_L <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR_RXIS <S2SV_ModEnd> ) ; switch <S2SV_ModStart> ( interface, KSZ8851_ISR_RXIE, KSZ8851_LCIE <S2SV_ModEnd> ) ; <S2SV_ModStart> ( interface, KSZ8851_TIE, KSZ8851_ISR_RXIS <S2SV_ModEnd> ) ; <S2SV_ModStart> ( interface, KSZ8851_RXIS <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, KSZ8851_RXIS <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, KSZ8851_RXIS <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, KSZ8851_ISR_RXIS <S2SV_ModEnd> ) ;",0
529,"<S2SV_ModStart> void encode_literal ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> cm, const vpx_write_bit_buffer <S2SV_ModEnd> ( wb,",0
530,<S2SV_ModStart> bpp <= 8 && c -> format!= CHUNKY,0
531,"<S2SV_ModStart> { if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> pkt_id, UINT16 ) )",0
532,<S2SV_ModStart> tmp ) { goto softfail <S2SV_ModEnd> ; } case <S2SV_ModStart> ) ) { goto softfail <S2SV_ModEnd> ; } state <S2SV_ModStart> end ) ; softfail : state -> offset = 0 ;,1
533,"<S2SV_ModStart> struct fb_vblank vblank ; memset ( & vblank, 0, sizeof ( vblank ) )",1
534,<S2SV_ModStart> flags ) { spin_lock ( & ctx -> cancel_lock ) ; <S2SV_ModStart> } } else { __timerfd_remove_cancel <S2SV_ModEnd> ( ctx ) <S2SV_ModStart> ) ; } spin_unlock ( & ctx -> cancel_lock ) ;,1
535,"<S2SV_ModStart> ) ) ; if ( c16 -> Curves [ i ] == NULL ) { for ( j = 0 ; j < i ; j ++ ) { _cmsFree ( ContextID, c16 -> Curves [ j ] ) ; } _cmsFree ( ContextID, c16 -> Curves ) ; _cmsFree ( ContextID, c16 ) ; return NULL ; }",1
536,<S2SV_ModStart> { if (! dev_name ||,1
537,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
538,"<S2SV_ModStart> } else { if ( buf_size == sizeof ( * msg ) ) { if ( buf ) memcpy_fromio ( buf <S2SV_ModEnd>, bus -> <S2SV_ModStart> ) ) ; } else if ( buf ) memcpy_fromio ( buf <S2SV_ModEnd>, bus -> <S2SV_ModStart> -> m_pdwGetRing + sizeof ( * msg ) ) ; memcpy_fromio ( buf <S2SV_ModEnd>, bus -> <S2SV_ModStart> ) ) ; } else if",0
539,<S2SV_ModStart> TSRMLS_CC ) ; if ( new_len > INT_MAX ) { efree ( replaced ) ; RETURN_FALSE ; },1
540,<S2SV_ModStart> data ) ; if ( len < 0 ) goto done ;,0
541,<S2SV_ModStart> ( ) ; strcpy <S2SV_ModEnd> ( t1_line_array ( t1_array,0
542,"<S2SV_ModStart> * bsl, <S2SV_ModEnd> BLOCK_SIZE bsize, <S2SV_ModStart> BLOCK_SIZE bsl = get_block ( x, bsize ) <S2SV_ModStart> BLOCK_SIZE bsl = get_mode_block ( x, subsl, bsize ) <S2SV_ModEnd> ) ; int <S2SV_ModStart> int bsl = get_mode_block ( x, bsize, subsl, <S2SV_ModEnd> ) ; break <S2SV_ModStart> case PARTITION_NONE : <S2SV_ModEnd> set_plane <S2SV_ModStart> 0 ] <S2SV_ModEnd> ( x, <S2SV_ModStart>, bsl, bsl, <S2SV_ModEnd>, bsl, <S2SV_ModStart>, bsl, <S2SV_ModEnd>, bsl, <S2SV_ModStart>, bsl, <S2SV_ModEnd> mi_col, <S2SV_ModStart> 0 ] <S2SV_ModEnd> ) ; break <S2SV_ModStart> 0 ] = get_mode ( x, subsize, subsize, & <S2SV_ModEnd> ) ; break <S2SV_ModStart> 0 ] <S2SV_ModEnd> ) ; } <S2SV_ModStart> 0 ] = get_block_info <S2SV_ModEnd> ( cm, <S2SV_ModStart> cm, cm, cm, x, pbs, bsize,",0
543,"<S2SV_ModStart> name ) ; if (! strcmp ( key, ""url"" ) && value && looks_like_command_line_option ( value ) ) data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_URL, ""disallowed <S2SV_blank> submodule <S2SV_blank> url: <S2SV_blank> %s"", value ) ;",1
544,<S2SV_ModStart> = 0 ; int row_ptr [ block ] ; <S2SV_ModStart> buffer_size ; int64_t <S2SV_ModEnd> frame = 0 <S2SV_ModStart> stream -> size_t pixel_size <S2SV_ModEnd> ; pixel_ptr =,0
545,<S2SV_ModStart> cnt ) { ssize_t <S2SV_ModEnd> n ; assert,1
546,<S2SV_ModStart> ; __be16 type ; if ( NAPI_GRO_CB ( skb ) -> encap_mark ) goto out ; NAPI_GRO_CB ( skb ) -> encap_mark = 1,1
547,<S2SV_ModStart> ; if ( numrows < 0 || numcols < 0 ) { return 0 ; } if (,1
548,<S2SV_ModStart> -> auth [ TPM2_RC_KEY_SIZE <S2SV_ModEnd> ) ; if,0
549,"<S2SV_ModStart> key_ref, key_ref, 0 <S2SV_ModEnd> ) ; ret",0
550,"<S2SV_ModStart> buflen, buf_size - 8",0
551,<S2SV_ModStart> break ; } <S2SV_ModEnd> dst_reg -> smin_value <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (,0
552,<S2SV_ModStart> ; if ( test_dir == 0 ||,0
553,"<S2SV_ModStart> vfio_irq_set hdr ; size_t size ; <S2SV_ModStart> NULL ; int max, <S2SV_ModStart> || hdr. count >= ( U32_MAX - hdr. start ) || hdr. <S2SV_ModStart>",0
554,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ext4_has_inline_data ( inode,1
555,<S2SV_ModStart> -> filesize = UINT64_MAX <S2SV_ModEnd> ; s ->,1
556,"<S2SV_ModStart> & sk, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
557,"<S2SV_ModStart> char * in, size_t olen <S2SV_ModStart> += 4 ; if ( len == olen ) return len ; <S2SV_ModStart> '=' ) { if ( len == olen ) return len ; <S2SV_ModStart> '=' ) { if ( len == olen ) return len ;",1
558,<S2SV_ModStart> gc ) ; <S2SV_ModEnd> return 0 ;,1
559,"<S2SV_ModStart> i ; size_t bytes, <S2SV_ModStart> ++ ) { bytes <S2SV_ModEnd> = min_t ( <S2SV_ModStart>, 0, bytes <S2SV_ModEnd> ) ; cur_len <S2SV_ModStart> copied ) ; if ( copied < bytes ) break ; <S2SV_ModStart> save_len - cur_len ; if (! cur_len ) { for ( i = 0 ; i < nr_pages ; i ++ ) put_page ( wdata -> pages [ i ] ) ; kfree ( wdata ) ; rc = - EFAULT ; break ; } for ( ; nr_pages > i + 1 ; nr_pages -- ) put_page ( wdata -> pages [ nr_pages - 1 ] )",1
560,<S2SV_ModStart> & CP_RDESC_SWAPPED_MIN_MAX ) ) return rdesc ; if ( * rsize < 4,1
561,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int i <S2SV_ModEnd> ; int i <S2SV_ModStart> VP9_LOG_ERROR_BUFFER_COUNT <S2SV_ModEnd> ; int i <S2SV_ModStart> vp9_log_log_log_log_log ( svc, svc, svc -> svc_ctx, SV_LOG_ERROR, ""Invalid <S2SV_blank> frame <S2SV_blank> number <S2SV_blank> %s\\n"", svc_count, svc_ctx <S2SV_ModEnd> number_count ) <S2SV_ModStart> return 0 ; si -> num_layers = si -> num_frames [ i ] <S2SV_ModEnd> ; int i <S2SV_ModStart> ++ ) { int i ; si -> num_layers = svc_layers [ i ] ; si -> num_layers [ i ] [ i ] ; si -> num_layers [ i ] = svc -> num_spatial_layer_count ; si_count [ i ] = svc -> number_layers ; si -> num_layers [ i ] [ i ] [ i ] [ i ] ; si -> num_layers [ i ] = svc -> number_layers ; si -> num_layers [ i ] [ i ] = 0 ; si -> num_layers [ i ]. number_layers [ i ] = svc_layers ; si",0
562,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decode ( BYTE <S2SV_ModStart> BYTE * out, UINT32 outSize <S2SV_ModStart> 5 ) { if ( outSize < 1 ) return FALSE ; outSize -- ; <S2SV_ModStart> 4 ; } if ( outSize < len ) return FALSE ; outSize -= len ; <S2SV_ModStart> } else { if ( outSize < 1 ) return FALSE ; outSize -- ; outSize -- ; left -- ; left -- ; } if ( ( outSize < len ) || ( left < 4 ) ) return FALSE ; memcpy ( out, in, 4 ) ; return FALSE <S2SV_ModEnd> ; } <S2SV_null>",0
563,<S2SV_ModStart> = new_cols! new_cols <S2SV_ModEnd> ( screen ->,0
564,"<S2SV_ModStart> char * str, * str, <S2SV_ModStart> const char * str, * str <S2SV_ModEnd> = 0 ; <S2SV_ModStart> const char * str, * str <S2SV_ModEnd> = 0 ; <S2SV_ModStart> else if ( * end < * end ) { return - 1 ; } <S2SV_ModStart> const char * end = ( * ) - 1 ; if ( * str == '\\0' && * str =='<S2SV_blank>'&& * str && * str < end ) { * end = ( * str + 1 ) ; break ; } * end = ( * end + 1 ) ; if ( * end == '\\\\' ) { * end = ( * end - 1 ) ; if ( * end == end ) return - 1 ; } if ( * end == end ) { * end = ( * end + end - 1 ) ; if ( * end == end ) { assert ( * end == '\\0' ) ; * end = ( * str + end ) ; if ( * end == * end ) goto exit ( * end ) ; } * end = true ; if ( * end == '}' && * end == '}' && * end_path && * end == '}' && * end == '.' && * end ) { * end = ( * end ) ; if ( * end == * end",0
565,"<S2SV_ModStart> * m, size_t <S2SV_ModEnd> bufsize ) { <S2SV_ModStart> * buf ; <S2SV_ModEnd> JAS_DBGLOG ( 100 <S2SV_ModStart> 100, ( ""mem_resize(%p, <S2SV_blank> %zu)\\n"" <S2SV_ModEnd>, m, <S2SV_ModStart> ) ) ; if (! bufsize ) { return 0 ; }",0
566,<S2SV_ModStart> pd ) { <S2SV_ModEnd> char * dd,0
567,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return false ;,0
568,<S2SV_ModStart> pcrypt_free ( struct aead_instance <S2SV_ModEnd> * inst ) <S2SV_ModStart> * ctx = aead_instance_ctx <S2SV_ModEnd> ( inst ),1
569,<S2SV_ModStart> -> height - 1 <S2SV_ModEnd> ) ; if,0
570,"<S2SV_ModStart> } if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if (",1
571,<S2SV_ModStart> icmph. icmph. icmph,0
572,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
573,<S2SV_ModStart> * up ; int ulen ; <S2SV_ModStart> rp ) ; ulen = xfrm_replay_state_esn_len ( up ) ; if ( nla_len ( rp ) < ulen || <S2SV_ModEnd> xfrm_replay_state_esn_len ( replay_esn <S2SV_ModStart> replay_esn )!= ulen <S2SV_ModEnd> ) return -,1
574,"<S2SV_ModStart> int ret = proc_dointvec_minmax <S2SV_ModEnd> ( table,",1
575,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",1
576,<S2SV_ModStart> opj_calloc ( ( size_t ) ( <S2SV_ModStart> -> numlayers + 1U <S2SV_ModEnd> ) * l_step_l,0
577,"<S2SV_ModStart> name ), ""crypto-%s"" <S2SV_ModEnd>, name )",1
578,<S2SV_ModStart> ps ) { int32 <S2SV_ModEnd> ; int start <S2SV_ModStart> = 0 ; <S2SV_ModEnd> start = 1,0
579,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static VP9_COMMON * cpi -> tile ; MACROBLOCKD * xd = & xd <S2SV_ModEnd> ; MACROBLOCKD * <S2SV_ModStart> MODE_INFO * <S2SV_ModEnd> ; MACROBLOCKD * <S2SV_ModStart> BLOCKD * <S2SV_ModEnd> = 0 ; <S2SV_ModStart> BLOCK_64_8x = & xd -> mi_col ; <S2SV_ModStart> BLOCK_64X64_64 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> MODE_INFO_INFO_INFO_INFO * <S2SV_ModEnd> = 0 ; <S2SV_ModStart> MODE_INFO * * * <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> - 1 ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> mi_col ) ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> mi_col ) ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> mi_col ) ; memcpy <S2SV_ModEnd> ( cpi, <S2SV_ModStart> mi_col ) ; memcpy <S2SV_ModEnd> ( cpi ->",0
580,"<S2SV_ModStart> 1 ) ; if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf = opipe",1
581,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
582,<S2SV_ModStart> } else { # ifdef UPNP_ENABLE_POST_WRITE <S2SV_ModStart> return HTTP_UNAUTHORIZED ; # else return HTTP_NOT_FOUND ; # endif,1
583,"<S2SV_ModStart> edir = ""/tmp"" <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( tmpname )!= NULL <S2SV_ModEnd> ) { err",0
584,<S2SV_ModStart> blkg ) ) <S2SV_ModEnd> return PTR_ERR ( <S2SV_ModStart> blkg ) ; <S2SV_ModEnd> q -> root_blkg,1
585,<S2SV_ModStart> ; if ( bpp == 1 && <S2SV_ModStart> else if ( bpp == 8 &&,1
586,"<S2SV_ModStart> ; krb5_data rspac ; const char * tgt_realm = krb5_principal_get_realm ( context, krbtgt -> entry. principal ) <S2SV_ModStart>, cp, tgt_realm,",1
587,<S2SV_ModStart> mnt ) ; nd -> last_type = LAST_BIND ;,1
588,"<S2SV_ModStart> struct usbdevfs_connectinfo ci ; memset ( & ci, 0, sizeof ( ci ) ) ; ci <S2SV_ModEnd>. devnum = <S2SV_ModStart> dev -> devnum ; ci <S2SV_ModEnd>. slow = <S2SV_ModStart> speed == USB_SPEED_LOW <S2SV_ModEnd> ; if (",1
589,<S2SV_ModStart> <S2SV_null> static struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> -> opt -> opt. <S2SV_ModStart> -> opt -> opt.,0
590,<S2SV_ModStart> rmtvaluecnt2 ; args -> rmtvaluelen2 = args -> rmtvaluelen ; args -> rmtvaluelen,0
591,"<S2SV_ModStart> LARGE_INTEGER offset ; size_t devicePathLen = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) break ; size_t devicePathLen = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) break ; if (! devicePathLen || ( devicePathLen < TC_MAX / sizeof ( devicePathLen - 1 ) || ( request -> DevicePathLen < devicePathLen ) || ( devicePathLen > 20 ) || ( memcmp ( & devicePath, L"", L, & devicePathLen - 4 ) ) ) || ( memcmp ( & request -> DevicePathLen - 11 * sizeof ( WCHAR ) ) ) || ( request -> IoStatus. Status == 0 ) || ( memcmp ( request -> IoStatus. Status, L"", TC_MAX_SIZE ) ) &&",0
592,<S2SV_ModStart> == NULL ) goto error ; <S2SV_ModEnd> if (!,0
593,"<S2SV_ModStart> = 0 ; uint32_t maxbuf = 0 <S2SV_ModEnd> ; int <S2SV_ModStart> ( d -> name, <S2SV_ModEnd> len ) ; <S2SV_ModStart> ( d -> name, <S2SV_ModEnd> len ) ;",0
594,"<S2SV_ModStart> ( dd_dir, """" <S2SV_ModEnd> ) ; if",0
595,<S2SV_ModStart> -> columns - 2 <S2SV_ModEnd> ) ; x <S2SV_ModStart> index ) ; q ++ ; p <S2SV_ModEnd> ++ ; } <S2SV_ModStart> % 2 ) > <S2SV_ModEnd> 2 ) { <S2SV_ModStart> % 2 ) > <S2SV_ModEnd> 2 ) {,0
596,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
597,"<S2SV_ModStart>, int tstype, bool opt_stats <S2SV_ModStart> ; int err ; BUILD_BUG_ON ( sizeof ( struct sock_exterr_skb ) > sizeof ( skb -> cb ) ) <S2SV_ModStart> ee_info = tstype ; serr -> opt_stats = opt_stats",1
598,"<S2SV_ModStart> 0 ) { if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""UnexpectedEndOfFile"" ) ;",0
599,<S2SV_ModStart> ) ) { if ( len < 2 ) goto trunc ; <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> ] ) ) ; if ( len < 2 ) goto trunc ; <S2SV_ModStart> ; } if ( len < 2 ) goto trunc ; ND_TCHECK2 ( <S2SV_ModEnd> ; ND_PRINT (,0
600,"<S2SV_ModStart>, CONST_STR_LEN ( ""%2f?"" ), CONST_STR_LEN ( ""/%2f?"" ), CONST_STR_LEN ( ""/%2f?"" ) ) ; run_burl_normalize ( psrc, flags, flags, CONST_STR_LEN ( ""/%2f?"" ) ) ; run_burl_normalize ( psrc, flags, flags, __LINE__, CONST_STR_LEN (",0
601,<S2SV_ModStart> mode ) { if (! task_cred ( mode ) ) return - EPERM ;,0
602,<S2SV_ModStart> <= w - ( int ),1
603,<S2SV_ModStart> page ) ; <S2SV_ModEnd> memset ( addr,1
604,<S2SV_ModStart> * jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_matind_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_matind_t,0
605,<S2SV_ModStart> ; return 1 <S2SV_ModEnd> ; } if,0
606,"<S2SV_ModStart> * priv ; if (! port -> interrupt_out_urb ||! port -> interrupt_in_urb ) { dev_err ( & port -> dev, ""required <S2SV_blank> endpoint <S2SV_blank> is <S2SV_blank> missing\\n"" ) ; return - ENODEV ; }",1
607,<S2SV_ModStart> -> dq <S2SV_ModEnd> ) ; if,0
608,<S2SV_ModStart> -> device_data ; cancel_autoload_drivers ( ) ;,1
609,"<S2SV_ModStart>, int rep_quick, struct mi_stat * name <S2SV_ModEnd> ) { my_stat <S2SV_ModStart> ret, ret <S2SV_ModEnd> ) ; if",0
610,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> p == q ) || ( <S2SV_ModEnd> size < 16 <S2SV_ModStart> size < 16 ) || ( <S2SV_ModEnd> size > 256 <S2SV_ModStart> size > 256 ),1
611,"<S2SV_ModStart> uint dblocks = xfs_attr3_rmt_blocks <S2SV_ModEnd> ( mp,",1
612,"<S2SV_ModStart> jcount ) ; if ( pcount > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeded"", pcount ) ) ) ;",0
613,"<S2SV_ModStart> val, var,",0
614,<S2SV_ModStart> ] == EOF || text [ 1 ] == 0 <S2SV_ModStart> ; if (! isxdigit ( <S2SV_ModStart> [ 2 ] ) <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if (! isxdigit ( <S2SV_ModStart> [ 3 ] ) <S2SV_ModEnd> ) return 0,1
615,<S2SV_ModStart> { break ; <S2SV_ModEnd> } } if,0
616,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> ++ j ) out <S2SV_ModEnd> [ j *",0
617,<S2SV_ModStart> NULL ) ; if ( f,0
618,"<S2SV_ModStart> fh_dentry ) ; error = fh_want_write ( fh ) ; if ( error ) <S2SV_ModEnd> goto out_errno ; <S2SV_ModStart> goto out_errno ; fh_lock ( fh ) ; error = set_posix_acl ( inode, ACL_TYPE_ACCESS, argp -> acl_access <S2SV_ModEnd> ) ; if <S2SV_ModStart> error ) goto out_drop_lock ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT <S2SV_ModEnd>, argp -> <S2SV_ModStart> argp -> acl_default ) ; out_drop_lock : fh_unlock ( fh ) ; <S2SV_ModEnd> fh_drop_write ( fh",1
619,<S2SV_ModStart> * ue ; if <S2SV_ModEnd> ( tree_root == <S2SV_ModStart> == NULL ) return 0,1
620,"<S2SV_ModStart> char * filename_filename, * tmp_filename, * <S2SV_ModStart> ; if (! temp_filename ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; } <S2SV_ModStart> } if (! temp_filename ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; }",0
621,<S2SV_ModStart> elen ) ; elen += sizeof ( struct pathComponent ) ; <S2SV_ModStart> > 0 ) { elen += pc -> lengthComponentIdent ; break ; } <S2SV_ModEnd> case 5 : <S2SV_ModStart> case 5 : elen += pc -> lengthComponentIdent ; if ( elen > plen ) return - EIO ; <S2SV_ModStart> break ; } <S2SV_ModEnd> } if (,0
622,"<S2SV_ModStart> ( dp [ 4 <S2SV_ModEnd> ] ) ; <S2SV_ModStart> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> <%s>"", tok2str ( nfsv3_writemodes, NULL, EXTRACT_32BITS ( & dp [ 3 ] <S2SV_ModEnd> ) ) )",1
623,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr ) ;,0
624,<S2SV_ModStart> -> input ) && ( ctxt -> options == 0 ),0
625,<S2SV_ModStart> ; bool slow <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ; * addr_len = sizeof ( * sin ) ;,1
626,"<S2SV_ModStart> len ) { <S2SV_ModEnd> if (! <S2SV_ModStart> } while ( len ) { u_int pdu_len = <S2SV_ModEnd> rpki_rtr_pdu_print ( ndo <S2SV_ModStart> ( ndo, pptr, len, 1 <S2SV_ModEnd>, 8 ) <S2SV_ModStart>, 8 ) ; len <S2SV_ModEnd> -= pdu_len ; <S2SV_ModStart> -= pdu_len ; pptr <S2SV_ModEnd> += pdu_len ; <S2SV_ModStart> pdu_len ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
627,"<S2SV_ModStart> int tagval ; struct stream packet ; <S2SV_ModStart> length ) ; packet = * s ; <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> from <S2SV_blank> token <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> token <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } s_check_rem ( s, length ) ; s_rem ( token ) <S2SV_ModEnd> return False ;",0
628,"<S2SV_ModStart> 0 ; int offset ; u_int offset, max_offset ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; max_offset = ( u_int ) ( cp - bp ) ; if ( ( ( i = * cp ++ ) & INDIR_MASK )!= INDIR_MASK ) return ( NULL ) ; if (! ND_TTEST2 ( * cp ) return ( NULL ) ; if (! ND_TTEST2 ( * cp ) return ( NULL ) { if (! ND_TTEST2 ( * cp )!= INDIR_MASK ) { ND_PRINT ( ( ndo, NULL ) ) ; return ( NULL ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ndo -> ndo_snapend ) ; offset = ( i + offset ) & 0x3fff ) ; if ( offset >= max_offset ) { ND_TTEST2 ( cp ) ; } if (! ND_TTEST2 ( l ) { return ( NULL, cp ) ; return ( NULL ) ; } max_offset = offset ;",0
629,"<S2SV_ModStart>, args -> rmtvaluelen <S2SV_ModEnd> ) ; error <S2SV_ModStart> = args -> rmtvaluelen <S2SV_ModEnd> ; while (",1
630,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
631,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ( src, <S2SV_ModEnd> dest, getuid <S2SV_ModStart> getgid ( ) <S2SV_ModEnd>, S_IRUSR | <S2SV_ModStart> | S_IWUSR ) ; fs_logger2 ( ""clone"", dest <S2SV_ModEnd> ) ; unlink",1
632,<S2SV_ModStart> ; if ( fc -> fc == NULL ) return NULL ; <S2SV_ModStart> -> fc -> fcinfo == NULL ) <S2SV_ModEnd> ; if (,0
633,"<S2SV_ModStart> -> x = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> -> y = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> -> y = MagickMin <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> -> y = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> y = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> y = MagickMin <S2SV_ModEnd> ( 1.0f,",0
634,"<S2SV_ModStart> PKT_LEN_SIZE ) { giterr_set_str ( GITERR_NET, ""Invalid <S2SV_blank> empty <S2SV_blank> packet"" ) ; return GIT_ERROR <S2SV_ModEnd> ; } if",1
635,<S2SV_ModStart> ; if ( vma -> vm_flags & VM_SHARED ) return VM_FAULT_SIGBUS ; if (,1
636,<S2SV_ModStart> = NULL ; rec -> sasl_password = 0 ; },0
637,<S2SV_ModStart> env -> insn_aux_data ; int i <S2SV_ModStart> ) ) ; for ( i = off ; i < off + cnt - 1 ; i ++ ) new_data [ i ]. seen = true ;,1
638,<S2SV_ModStart> ; ND_TCHECK ( * dp <S2SV_ModEnd> ) ; if,1
639,<S2SV_ModStart> trunc ; } ND_TCHECK_16BITS ( & bp [ i + 2 ] ) ;,1
640,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
641,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( occ0 <S2SV_ModStart> % rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""PredictorDecodeTile"", ""%s"", ""occ0%rowsize <S2SV_blank>!= <S2SV_blank> 0"" ) ; return 0 ; } <S2SV_ModEnd> assert ( sp <S2SV_ModStart> 0 ) { if (! <S2SV_ModStart>, rowsize ) ) return 0",1
642,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteCanonEntry ) ) ;",0
643,<S2SV_ModStart> ; if ( ctx -> terminated ||,1
644,<S2SV_ModStart> = NULL ; if ( sbi -> spool ) hugepage_put_subpool ( sbi -> spool ) ;,1
645,<S2SV_ModStart> ; if (! mode &&,0
646,"<S2SV_ModStart> char * o, size_t <S2SV_ModEnd> length ) { <S2SV_ModStart> char res ; unsigned char * out = NULL ; unsigned char * out ; size_t res = malloc ( len ) ; if (! out ) return NULL ; <S2SV_ModEnd> ; if ( <S2SV_ModStart> < 2 ) { return NULL ; } <S2SV_ModEnd> while (",0
647,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
648,"<S2SV_ModStart> ( ) ; iov_iter_advance ( i, copied ) ; <S2SV_ModStart> again ; } <S2SV_ModEnd> pos += copied",1
649,<S2SV_ModStart> unlikely ( len + ring -> frameoffset,1
650,<S2SV_ModStart> ; # define SNMP_FREE_HDR <S2SV_ModEnd> ; if (,0
651,"<S2SV_ModStart> ( obj, <S2SV_ModEnd> name, data <S2SV_ModStart>, show_object, & base <S2SV_ModEnd>, path,",1
652,<S2SV_ModStart> ; return 0 <S2SV_ModEnd> ; } <S2SV_null>,0
653,<S2SV_ModStart> src < zsize + ( sub_type!= 2 ) <S2SV_ModStart> bits ) { if ( src >= src_end ) return AVERROR_INVALIDDATA ;,1
654,<S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
655,<S2SV_ModStart> const idx ; <S2SV_ModEnd> idx = 0,0
656,<S2SV_ModStart> 100 ) { size_t color_pixels = 0 <S2SV_ModEnd> ; break ;,0
657,<S2SV_ModStart> timer_active_lock ) ; spin_unlock ( & timeri -> timeri_lock ) ; <S2SV_ModStart> ) ; } spin_unlock ( & timeri -> timer -> lock ) ; spin_unlock ( & timeri -> lock ) ;,0
658,<S2SV_ModStart> len ; } ND_TCHECK ( p [ 2 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT,1
659,"<S2SV_ModStart> -> has_va ; <S2SV_ModEnd> char * arch <S2SV_ModStart> * arch = strdup ( info -> arch ) ; char * cpu = info -> cpu? strdup ( info -> cpu ) : NULL <S2SV_ModEnd> ; ut16 bits <S2SV_ModStart> ; if ( <S2SV_ModEnd> cpu && * <S2SV_ModStart> cpu && * <S2SV_ModEnd> cpu ) { <S2SV_ModStart>, ""anal.cpu"", <S2SV_ModEnd> cpu ) ; <S2SV_ModStart> r, binfile ) ; free ( cpu ) ; free ( arch",1
660,"<S2SV_ModStart> sas_probe_devices ( struct asd_sas_port * port <S2SV_ModEnd> ) { struct <S2SV_ModStart>, * n <S2SV_ModEnd> ; list_for_each_entry (",1
661,<S2SV_ModStart> -> u4_dpb_commandsoffset = 0 <S2SV_ModEnd> ; ps_dec ->,0
662,"<S2SV_ModStart> gint64 offset ; <S2SV_ModEnd> char line [ <S2SV_ModStart> line [ NETSCREEN_LINE_LENGTH <S2SV_ModEnd> ] ; offset <S2SV_ModStart> return FALSE ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! parse_netscreen_packet <S2SV_ModEnd> ( wth -> <S2SV_ModStart> wth -> fh <S2SV_ModEnd>, & wth <S2SV_ModStart> wth -> frame_buffer, line",1
663,<S2SV_ModStart> 0 ) ; if ( <S2SV_ModStart>. seq_num ) < 0 ) return - 1,1
664,"<S2SV_ModStart> image ) { uint32_t size_t width, int32_t height, int32_t height, uint32_t height ) ; <S2SV_ModStart> > 0 ; <S2SV_ModEnd> break ; uint32_t height <S2SV_ModStart> image -> height <S2SV_ModEnd> ) { uint32_t size",0
665,"<S2SV_ModStart> : ret = - EOPNOTSUPP ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = <S2SV_ModStart> == 0 ) ret = <S2SV_ModEnd> key -> type <S2SV_ModStart> type -> read ( key, buffer, buflen ) ; up_read <S2SV_ModEnd> ( & key <S2SV_ModStart> sem ) ; <S2SV_ModEnd> } error2 :",1
666,<S2SV_ModStart> return ret ; <S2SV_ModEnd> if (!,0
667,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",1
668,"<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if <S2SV_ModStart> - JAS_CAST ( jas_longlong <S2SV_ModEnd>, ( ( <S2SV_ModStart> : JAS_CAST ( jas_longlong <S2SV_ModEnd>, tmp )",1
669,<S2SV_ModStart> page ) ; rm -> atomic. op_active = 0 ;,1
670,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> has <S2SV_blank> wrong <S2SV_blank> bus <S2SV_blank> %d <S2SV_blank> info!\\n"", __func__, dev -> name, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",1
671,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = 0 <S2SV_ModStart> ) ) ; msg -> msg_namelen = sizeof ( * sin ) ;",0
672,"<S2SV_ModStart> sizeof ( spath ) ) return - 1 ; if ( strstr ( name, "".."" ) || strchr ( name, '/'",1
673,<S2SV_ModStart>! t && ( <S2SV_ModStart> * s ),0
674,"<S2SV_ModStart> -> bcache, cache_id ( <S2SV_ModStart> ] -> data )",1
675,<S2SV_ModStart> objp ) ; * objp = NULL ;,1
676,"<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> NULL, NULL ) )",0
677,<S2SV_ModStart> return 1 ; consume_skb ( skb ) ; return 0 <S2SV_ModEnd> ; } if,1
678,"<S2SV_ModStart> * msgnum ; if ( msgnumnum >= sizeof ( ""%s\\n"" ) ) { pr_err ( ""%s\\n"", __func__, __func__ ) ; return - EINVAL ; } <S2SV_ModEnd> pci_alloc_bar ( dev",0
679,<S2SV_ModStart> dentry ) { if ( upper ) goto out_unlock ; <S2SV_ModStart> goto out_unlock ; } <S2SV_null> <S2SV_null>,0
680,<S2SV_ModStart> char * line ) && <S2SV_ModEnd> if ( *,0
681,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> } if (! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done ; } if (",1
682,"<S2SV_ModStart> int decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> max ) { vpx_read_bit <S2SV_ModEnd> ( rb,",0
683,<S2SV_ModStart> 1 ) ; if ( strlen ( line ) == 0 ) return - 1 ;,1
684,<S2SV_ModStart> ; if ( key_len < 0 ) continue ; status = 0 ; if (,0
685,<S2SV_ModStart> ++ ) { if ( band -> prec ) { <S2SV_ModStart> ) ; } },1
686,<S2SV_ModStart> < 0 ) { xmlFreeInputStream ( input ) ; return ; } <S2SV_ModEnd> if ( entity,1
687,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart>, & final ) ; rcu_read_unlock ( <S2SV_ModStart> -> ir_v6_rmt_addr ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ), <S2SV_ModEnd> np -> tclass <S2SV_ModStart> np -> tclass ) ; rcu_read_unlock (",1
688,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int PREDICTION_MODE <S2SV_ModEnd> vp9_update_mode ( cpi <S2SV_ModStart> ) { return PREDICTION_MODE <S2SV_ModEnd> ; } else <S2SV_ModStart> } else { const PREDICTION_MODE <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
689,"<S2SV_ModStart> ( u32 size, u32 num ) { if ( size > UINT32_MAX / num ) { return NULL ; } <S2SV_ModEnd> return malloc ( <S2SV_ModStart> malloc ( size * num",1
690,<S2SV_ModStart> else if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1 <S2SV_ModStart> { if ( bad_format_print <S2SV_ModEnd> ( im -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1,1
691,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,1
692,<S2SV_ModStart> buf ) { if ( buf1 -> size > 0 ) return - 1 ;,0
693,"<S2SV_ModStart> scn, root_storage <S2SV_ModEnd> ) ) <",1
694,<S2SV_ModStart> = size ; size_t <S2SV_ModEnd> size = size,0
695,<S2SV_ModStart> (! eof && vars -> str. c!= vars -> ptr,1
696,<S2SV_ModStart> ; if ( net_protocol < 0 ) return - EINVAL ; if (,0
697,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
698,"<S2SV_ModStart> -> _eip ; rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val ) ; if ( rc!= X86EMUL_CONTINUE ) break <S2SV_ModStart> case 4 : rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val )",1
699,"<S2SV_ModStart> name. name, false",0
700,"<S2SV_ModStart> void * end <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; void * dbuf = NULL ; void * <S2SV_ModStart> struct ceph_crypto_key old_key ; void * ticket_buf = NULL <S2SV_ModStart>, end, & dbuf, 0 <S2SV_ModEnd> ) ; if",0
701,<S2SV_ModStart> count ; } if ( count > sizeof ( Pairs ) ) ereport ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ) ;,0
702,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
703,"<S2SV_ModStart> -> init_msg ; if ( s -> session -> session_id_len > 0 ) { int i = s -> session_ctx -> session_ctx -> session_mode ; SSL_SESSION * new_sess ; if ( i & SSL_SESSION ) s -> session_ctx -> session_len = s -> session_ctx -> session_ctx -> session_ctx ; } else { if ( i & SSL_SESS_CACHE_FAILURE ) { if ( s -> session_ctx -> session_ctx -> session_id_ctx -> session_ctx, s -> session_ctx -> session_ctx -> session_ctx, NULL ) ; } else { als -> session_ctx -> session_ctx, s -> session_ctx -> session_ctx -> session_ctx, NULL ) ; }",0
704,<S2SV_ModStart> ; r = TEMP_FAILURE_RETRY ( <S2SV_ModStart> b -> fd ),0
705,<S2SV_ModStart> ( error ) <S2SV_ModEnd> ; if (,0
706,<S2SV_ModStart> NULL ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_FIELD_REF,0
707,<S2SV_ModStart> ) ; } if <S2SV_ModEnd> ( cmd ->,0
708,"<S2SV_ModStart> ; if ( has_type_comment ) == type_comment ) return NULL ; <S2SV_ModStart>, name,",0
709,<S2SV_ModStart> err = 0 ; if (! sock_net ( sk ) ) return - EINVAL,0
710,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
711,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,1
712,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_column_idx",1
713,<S2SV_ModStart> -> rows = 1 <S2SV_ModEnd> ; image -> <S2SV_ModStart> ( BImgBuff ) <S2SV_ModEnd> ; break ;,1
714,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> == 0 ) rc = <S2SV_ModStart> ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>,0
715,,1
716,"<S2SV_ModStart> ( res, <S2SV_ModEnd> dev -> start",0
717,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> endif <S2SV_ModStart> char ( psf_seek ( psf -> header. end <S2SV_ModEnd> ) return <S2SV_ModStart> ( psf -> header. end <S2SV_ModEnd> + ( <S2SV_ModStart> ; if ( psf -> header. indx <S2SV_ModEnd> > psf -> header <S2SV_ModStart> ( psf -> header. ptr <S2SV_ModStart> psf -> header. end <S2SV_ModEnd> + psf -> header <S2SV_ModStart> psf -> header. end <S2SV_ModEnd> ) ) { <S2SV_ModStart> psf -> header. end <S2SV_ModEnd> ; break ; } <S2SV_ModStart> += psf -> header. indx <S2SV_ModEnd> ; break ; <S2SV_ModStart> += psf -> header. end <S2SV_ModEnd> ; break ; <S2SV_ModStart> += psf -> header. ptr <S2SV_ModStart> += psf -> header. indx <S2SV_ModEnd> ; break ;,0
718,<S2SV_ModStart> out_mutex ; } ext4_inode_block_unlocked_dio ( inode ) ; inode_dio_wait ( inode ) ; down_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart> ioffset ) ; <S2SV_ModEnd> credits = ext4_writepage_trans_blocks <S2SV_ModStart> ) ; goto out_mmap <S2SV_ModEnd> ; } down_write <S2SV_ModStart> handle ) ; out_mmap : up_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModEnd> ext4_inode_resume_unlocked_dio ( inode,1
719,<S2SV_ModStart> uint32_t * tracks ; uint32_t * track_size ; uint32_t * track_size <S2SV_ModEnd> ; uint32_t end_tracks <S2SV_ModStart> no_tracks ) ; track_size_size = malloc ( sizeof ( uint32_t ) * midi_data ) ; <S2SV_ModStart> << 24 ; tmp_val <S2SV_ModEnd> = * midi_val <S2SV_ModStart> << 24 ; tmp_val <S2SV_ModEnd> |= * midi_val <S2SV_ModStart> << 24 ; tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 16 ; tmp_val <S2SV_ModEnd> |= * midi_val <S2SV_ModEnd> = * midi_data <S2SV_ModStart> << 24 ; tmp_val <S2SV_ModEnd> |= * midi_val <S2SV_ModEnd> = * midi_val <S2SV_ModStart> << 24 ; tmp_val <S2SV_ModEnd> = * midi_val <S2SV_ModStart> << 16 ; tmp_val <S2SV_ModEnd> |= * midi_val <S2SV_ModEnd> = tmp_val <S2SV_ModEnd> |= * midi_data <S2SV_ModStart> << 24 ; tmp_val <S2SV_ModEnd> = midi_data <S2SV_ModStart> ( midi_data [ i ] -- ; tmp_val <S2SV_ModEnd> = midi_data <S2SV_ModStart> ( midi_data [ i ] -- ; track_size [ i ] -- ; track_size [ i ] -- ; <S2SV_ModStart> i ] ++ ; track_size [ i ] -- ; <S2SV_ModStart> i ] ++ ; track_size [ i,0
720,"<S2SV_ModStart> = max_t ( int <S2SV_ModEnd>, val * <S2SV_ModStart> = max_t ( int <S2SV_ModEnd>, val *",1
721,<S2SV_ModStart> * bh ; unsigned int table_len ; <S2SV_ModStart> -> b_data ; table_len = le32_to_cpu ( lvd -> mapTableLength ) ; if ( sizeof ( * lvd ) + table_len < sizeof ( * lvd ) ) goto out_bh <S2SV_ModEnd> ; i ++ <S2SV_ModStart> -> b_blocksize - lvd <S2SV_ModEnd> ; } offset =,0
722,"<S2SV_ModStart> long n ; image = 0 ; info = 0 ; <S2SV_ModStart> ""cannot <S2SV_blank> get <S2SV_blank> header\\n"" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ""cannot <S2SV_blank> get <S2SV_blank> info\\n"" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> 1, ( ""BMP <S2SV_blank> information: <S2SV_blank> len <S2SV_blank> %ld; <S2SV_blank> width <S2SV_blank> %ld; <S2SV_blank> info\\n"", JAS_CAST ( long <S2SV_ModStart> info -> len ), info -> len ), info -> len ) ; goto error <S2SV_ModEnd> ; } JAS_CAST <S2SV_ModStart> info -> len ) ; goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> info -> len ) { JAS_CAST ( long <S2SV_ModStart> info -> height ) ; goto error ; } JAS_CAST ( long <S2SV_ModStart> info -> numplanes ), <S2SV_ModEnd> ; } return 0 ;",0
723,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> dev ), func <S2SV_ModEnd>, line, <S2SV_ModStart> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"", func <S2SV_ModEnd>, line,",1
724,<S2SV_ModStart> ) ) ; if ( ( IHEVCD_SUCCESS!= 0 ) { return IHEVCD_ERROR_SUCCESS ; },0
725,"<S2SV_ModStart> g_tv_comment, FILENAME_COMMENT ) ; problem_data_reload_from_dump_dir ( ) ; update_gui_state_from_problem_data ( 0",1
726,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> media_null>,0
727,<S2SV_ModStart> -> n_row ) <S2SV_ModEnd> && (,0
728,"<S2SV_ModStart>, extent, height, <S2SV_ModStart> ""UnableToReadImageData"" ) ; <S2SV_ModEnd> height = sun_info <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; if ( sun_info. type == RT_ENCODED ) <S2SV_ModStart> sun_data ) ; <S2SV_ModEnd> p = sun_pixels",0
729,"<S2SV_ModStart>, krb5_principal client_principal, const char * tgt_realm <S2SV_ModStart> principal ), tgt_realm <S2SV_ModEnd> ) ; if",1
730,"<S2SV_ModStart> ReadBlobLSBLong ( image ) ; if ( bmp_info. number_colors > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
731,<S2SV_ModStart> ; newinet -> inet_opt <S2SV_ModEnd> = ireq ->,1
732,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
733,"<S2SV_ModStart>!= 0 ) { int tend_off = skb_transport_offset ( skb ) + tlen ; <S2SV_ModStart> ( csum, skb_checksum ( skb, tend_off, <S2SV_ModEnd> offset, 0 <S2SV_ModStart> ) ) ; }",1
734,"<S2SV_ModStart> pfn, page_size >> PAGE_SHIFT",0
735,<S2SV_ModStart> 0x00 } ; if ( cmd -> msg_len > sizeof ( b ) - 4 ) return - EINVAL ;,1
736,<S2SV_ModStart> perf_event_context * ctx ; ctx = perf_event_ctx_lock <S2SV_ModEnd> ( event ) <S2SV_ModStart> event ) ; perf_event_ctx_unlock ( event ) ;,0
737,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ; return ( <S2SV_ModStart> ; return ( <S2SV_ModEnd> value & 0xffffffff <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ) ; } <S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> [ 3 ] ; return <S2SV_ModEnd> ( value & <S2SV_ModStart> & 0xffffffff ) <S2SV_ModEnd> ; } <S2SV_null>,1
738,"<S2SV_ModStart> free_nid * i, * e <S2SV_ModStart> ; int err = - EINVAL ; bool ret = false <S2SV_ModStart> return false ; i = f2fs_tree_cache_alloc ( free_nid_slab, GFP_NEW ) ; i -> state = nid ; i -> state = NID_NEW ; spin_lock ( & nm_lock ) ; if ( e ) goto err_lock <S2SV_ModEnd> ; } <S2SV_null>",0
739,<S2SV_ModStart> = CONFIG_VP9_HIGHBITDEPTH <S2SV_ModEnd> ; flags ->,0
740,"<S2SV_ModStart> ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> ++ cons ; netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> extra. type ) ; netbk_fatal_tx_err ( vif",1
741,<S2SV_ModStart> ) ) ; hdr -> sadb_msg_reserved = 0 ;,1
742,"<S2SV_ModStart> ) return ; memset ( & r1, 0, sizeof ( r1 ) ) ;",1
743,"<S2SV_ModStart>, 1 ) ; luaL_argcheck ( L, 1, <S2SV_ModEnd> ) ; switch <S2SV_ModStart> l ) { luaL_argcheck ( L, <S2SV_ModEnd> 1, 1 <S2SV_ModStart> ( L, <S2SV_ModEnd> 1, <S2SV_ModEnd> 1 ) ; <S2SV_ModStart> ( L, <S2SV_ModEnd> 1 ) ; pos >",0
744,<S2SV_ModStart> 0 ; } ND_TCHECK2 ( & tptr. msg_len ) ;,0
745,<S2SV_ModStart> -> data ; unsigned <S2SV_ModStart> body -> unit_size || len < sizeof ( struct oz_multiple_fixed ) - 1 <S2SV_ModStart> ( len - ( <S2SV_ModStart> struct oz_multiple_fixed ) - 1 ) <S2SV_ModEnd> ) / body,1
746,<S2SV_ModStart> int res ; # if CONFIG_VP8_COMMON * const VP8_COMMON * const VP8_COMMON * const cm -> common ; # endif <S2SV_ModEnd> if (! <S2SV_ModStart> PERF_MAX_FRAME ) { int res ; <S2SV_ModEnd> return - 1 <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } else { res,0
747,"<S2SV_ModStart> ) ) { char * copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; unlink",0
748,<S2SV_ModStart> id = 0 <S2SV_ModEnd> ; if (,0
749,<S2SV_ModStart> return res ; <S2SV_ModEnd> return 0 ;,1
750,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> ) ; } ext_size = sizeof ( struct ext4_extent_header ) + sizeof ( struct ext4_extent ) * le16_to_cpu ( neh -> eh_entries ) ; memset ( bh -> b_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size ) ; <S2SV_ModStart> ) ; } ext_size = sizeof ( struct ext4_extent_header ) + ( sizeof ( struct ext4_extent ) * le16_to_cpu ( neh -> eh_entries ) ) ; memset ( bh -> b_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size ) ;",1
751,"<S2SV_ModStart> -> h_hbe_tx_size <S2SV_ModEnd> ( ptr_hbe_tx_size,",0
752,<S2SV_ModStart> ; cmap_len = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> 0 x_origin = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> ; y_origin = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> endif image_w = get_tga_ushort <S2SV_ModEnd> ( & tga <S2SV_ModStart> ; image_h = get_tga_ushort <S2SV_ModEnd> ( & tga,1
753,<S2SV_ModStart> ; ssize_t ret ; if ( WARN_ON_ONCE (! ib_safe_file_access ( filp ) ) ) return - EACCES,1
754,<S2SV_ModStart> == CPUCLOCK_SCHED ) * tp = ns_to_timespec <S2SV_ModEnd> ( cpu. <S2SV_ModStart> cpu. sched ) ; else <S2SV_ModEnd> cputime_to_timespec ( cpu <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
755,<S2SV_ModStart> ; uint32 nstrips <S2SV_ModEnd> ; nstrips =,1
756,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = 0 <S2SV_ModStart> ) ) ; msg -> msg_namelen = sizeof ( * sin ) ;",0
757,"<S2SV_ModStart> lua_authz_spec_spec ( APLOG_ERROR, 0, 0, <S2SV_ModStart> lua_spec_spec ) ; lua_checkstack ( r, r, 0, <S2SV_ModEnd> ) ; * <S2SV_ModStart> 0 ) { ap_log_rerror ( APLOG_ERROR, 0, ""Cannot <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> module <S2SV_blank> alias"" ) ; return 0 ; } <S2SV_ModEnd> ; } if <S2SV_ModStart> -> args, func <S2SV_ModEnd> ) ; coerce",0
758,<S2SV_ModStart> ; int error = 0 <S2SV_ModStart> &= PAGE_MASK ; if ( address < mmap_min_addr ) return - EPERM <S2SV_ModEnd> ; prev =,1
759,"<S2SV_ModStart> { umode_t mode <S2SV_ModEnd> ; error = <S2SV_ModStart> ; error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & mode <S2SV_ModStart>, & mode, & acl <S2SV_ModStart> if ( error <S2SV_ModEnd> ) return error <S2SV_ModStart> return error ; <S2SV_ModEnd> error = xfs_set_mode",1
760,"<S2SV_ModStart>, int optional, const char * rootfs <S2SV_ModStart> endif if ( safe_mount <S2SV_ModEnd> ( fsname, <S2SV_ModStart> MS_REMOUNT, data, rootfs <S2SV_ModStart>, data ) < 0",1
761,"<S2SV_ModStart> ) ; } if ( EOFBlob ( image ) > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ;",0
762,"<S2SV_ModStart> it_overrun = - 1LL <S2SV_ModEnd> ; ++ timr <S2SV_ModStart> info -> si_overrun = timer_overrun_to_int ( timr, info -> si_overrun ) <S2SV_ModEnd> ; } unlock_timer",1
763,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> if (!,0
764,<S2SV_ModStart> struct static_key * once_key <S2SV_ModEnd> ) { static <S2SV_ModStart> ; __net_random_once_disable_jump ( once_key <S2SV_ModEnd> ) ; return,1
765,"<S2SV_ModStart> -> actual ; bool kiocb_has_eventfd = <S2SV_ModEnd> io_data -> kiocb <S2SV_ModStart> ki_flags & IOCB_EVENTFD ; if ( io_data -> read && ret > 0 ) { check_mm ( io_data -> mm ) ; ret = copy_to_iter ( io_data -> data, ret, ret, ret, ret <S2SV_ModEnd> )_data -> kiocb",0
766,<S2SV_ModStart> ; if ( IPCB ( skb ) -> flags & IPSKB_DOREDIRECT <S2SV_ModEnd> &&! opt,1
767,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
768,<S2SV_ModStart> struct trusted_key_payload * p ; struct trusted_key_payload *,0
769,"<S2SV_ModStart> v |= ( JAS_CAST ( uint_fast32_t, c ) <S2SV_ModEnd> << 24 )",1
770,<S2SV_ModStart> NULL ) { if ( skb -> len < ROSE_MIN_LEN ) { kfree_skb ( skb ) ; continue ; } <S2SV_ModStart> 2 ] ; if ( skb -> len < ROSE_CALL_ADDR_LEN_LEN && ( skb -> len ) ) { kfree_skb ( skb ) ; continue ; } <S2SV_ModStart>,0
771,<S2SV_ModStart> (! npages || base_gfn!= old. base_gfn,0
772,<S2SV_ModStart> newdev ) ; <S2SV_ModEnd> if ( newdev,0
773,<S2SV_ModStart> = FDTDTND_BAD_NAME ; char * name <S2SV_ModStart> break ; default_len = FDTDTFD,0
774,"<S2SV_ModStart> char * buff ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } buff",1
775,"<S2SV_ModStart> } if ( data_body == NULL && in_bio == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_NO_CONTENT ) ; goto err ; } if ( <S2SV_ModStart> } if ( <S2SV_ModEnd> in_bio!= NULL <S2SV_ModStart>!= NULL ) <S2SV_ModEnd> { bio =",1
776,<S2SV_ModStart> server. ds_enabled <S2SV_ModEnd> ) ; },0
777,"<S2SV_ModStart> } if ( options -> flags & ( UV_PROCESS_SETUID | UV_PROCESS_SETGID ) ) { SAVE_ERRNO ( setgroups ( 0, NULL ) ) ; } if (",1
778,"<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> EOPNOTSUPP ; } if ( rlen > MAX_XFER_SIZE ) { warn ( ""i2c <S2SV_blank> rd: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", rlen ) ; return - EOPNOTSUPP ; } <S2SV_ModEnd> mutex_lock ( & <S2SV_ModStart> wlen ) ; <S2SV_ModEnd> ret = dvb_usb_generic_rw <S2SV_ModStart> + wlen, st -> data <S2SV_ModEnd>, rlen, <S2SV_ModStart> rlen, 0 ) ; if (! ret && rbuf && rlen ) memcpy ( rbuf, st -> data, rlen",1
779,<S2SV_ModStart> ; client -> <S2SV_ModEnd> client -> protocol,0
780,<S2SV_ModStart> book -> dim && i < n,1
781,"<S2SV_ModStart> * action, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> "", outputbuffer ) ; sendClean ( outputbuffer ) ;",0
782,<S2SV_ModStart> == - EEXIST || ret == - EOVERFLOW,1
783,<S2SV_ModStart> fp ) ; spin_lock ( & unix_gc_lock ) ; <S2SV_ModStart> unix_sk ( s <S2SV_ModEnd> ) ; if <S2SV_ModStart> unix_tot_inflight -- ; } fp -> f_cred -> user -> unix_inflight -- ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
784,"<S2SV_ModStart> size_t chanmap_size = SF_MIN ( <S2SV_ModStart> sf. channels, layout_tag & 0xffff )",1
785,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
786,<S2SV_ModStart> ms ) { uint32_t <S2SV_ModEnd> nestsize = ( <S2SV_ModStart> nestsize = ( uint32_t <S2SV_ModEnd> ) ms ->,1
787,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
788,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
789,<S2SV_ModStart> -> xrefs = safe_calloc ( <S2SV_ModEnd> sizeof ( xref_t,1
790,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
791,"<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ) <S2SV_ModStart> ( opt ) { atomic_sub ( <S2SV_ModEnd> opt -> tot_len <S2SV_ModStart> opt -> tot_len, & sk -> sk_omem_alloc ) ; txopt_put ( opt <S2SV_ModStart> ) ; } }",1
792,"<S2SV_ModStart>, * tmpout = NULL, * tmpout <S2SV_ModStart> = dcont ; if (! ( flags & SMIME_BINARY ) && dcont ) { tmpout = cms_get_bio ( tmpout, tmpout, flags ) ; if (! tmpout ) { CMSerr ( CMS_F_CMS_VERIFY, CMS_CMS_TEXT ) ; goto err ; } <S2SV_ModStart> ( cms, tmpout ) ; if (! cmsbio ) goto err ; if ( flags & SMIME_TEXT_TEXT ) { cmsbio = CMSerr ( dcont ) ; goto err ; } if (! ( flags & SMIME_TEXT ) { cmsbio ) goto err ; } <S2SV_ModStart>  cmsbio ) ; } if (! ( flags & SMIME_TEXT ) { CMSerr ( dcont ) ; goto err ; } } else { CMSerr ( CMS_F_CMS_CMS_MIME_TEXT ) ; } else { CMSerr ( cmsbio, tmpout ) ; if ( tmpout == dcont ) { CMSerr ( CMS_F_CMS_TEXT ) ; goto err ; } else { CMSerr ( cmsbio, cmsbio, dcont ) ; } <S2SV_ModStart> cmsbio ) ; } if (! ( tmp",0
793,"<S2SV_ModStart> NULL ; } memset ( & sk, 0, sizeof ( * sk ) ) ;",0
794,<S2SV_ModStart> if (! sctp_protocol_init <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( ) ; sctp_v4_unregister <S2SV_ModEnd> ( ),0
795,<S2SV_ModStart> cs_flags ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
796,"<S2SV_ModStart> ) { struct in_device * idev <S2SV_ModEnd> = ( ( <S2SV_ModStart> ) -> ifa_dev <S2SV_ModEnd> ; struct netdev_notifier_info <S2SV_ModStart> netdev_notifier_info info ; if ( idev -> dead ) return NOTIFY_DONE ; <S2SV_ModStart> & info, idev ->",1
797,<S2SV_ModStart> -> mm_mm ) { <S2SV_ModStart> ) ) ) ; } else <S2SV_ModEnd> return 0 ;,0
798,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
799,"<S2SV_ModStart> val ) { int temp_size = 500 ; char * temp = malloc ( temp_size ) <S2SV_ModEnd> ; int i <S2SV_ModStart> ; ) { if ( i >= temp_size ) { temp_size *= 2 ; temp = realloc ( temp, temp_size ) ; }",1
800,<S2SV_ModStart> task ) { <S2SV_ModEnd> del_timer ( & <S2SV_ModStart> -> timer ) <S2SV_ModEnd> ; complete (,1
801,"<S2SV_ModStart> ( name, <S2SV_ModEnd> str ) {",0
802,"<S2SV_ModStart> NULL ) { if <S2SV_ModEnd> ( errno == <S2SV_ModStart> == ENOMEM ) <S2SV_ModEnd> log_warn ( ""lldp"" <S2SV_ModStart>, ""unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> "" ""for <S2SV_blank> management <S2SV_blank> address"" ) ; else log_warn ( ""lldp"", ""too <S2SV_blank> large <S2SV_blank> management <S2SV_blank> address <S2SV_blank> "" ""received <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname",1
803,<S2SV_ModStart> object + size < * object || * object + size <S2SV_ModStart> : if ( * object + size < * object || <S2SV_ModStart> size * 2 < * object || * object + size * 2 <S2SV_ModStart> object + size < * object || * object + size <S2SV_ModStart> object + size < * object || * object + size < * 2,0
804,"<S2SV_ModStart> ( interface, KSZ8851_M <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, KSZ8851_P1 <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, KSZ8851_MAH <S2SV_ModEnd>, KSZ8851_RCR1 ) ;",0
805,<S2SV_ModStart> all_channels_lock ) ; put_net ( pch -> chan_net ) ; pch -> chan_net = NULL ;,1
806,"<S2SV_ModStart> btrfs_dir_item * di = NULL <S2SV_ModStart> - ENOMEM ; di = 0 <S2SV_ModEnd> ( trans, <S2SV_ModStart> out ; } if (! di ) { di = btrfs_release_item ( trans, path, path, name, name, name, - 1 ) ; if (! di && <S2SV_ModEnd> di_len <S2SV_ModStart> & XATTR_REPLACE ) { ret = - ENODATA ; goto out ; } if (! di ) ret = 0 ; di = btrfs_release_item <S2SV_ModEnd> ( trans, <S2SV_ModStart>, path, <S2SV_ModEnd> di ) ; di = 0 ; if",0
807,"<S2SV_ModStart> < 0xbf ) { <S2SV_ModStart> return 1 ; } <S2SV_ModStart> buf_len ) ) ) { <S2SV_ModStart> goto err ; } <S2SV_ModStart> ) ) ) ) { <S2SV_ModStart> goto err ; } <S2SV_ModStart> buf_len ) ) ) ) { <S2SV_ModStart> goto beach ; } <S2SV_ModStart> buf_len ) ) ) { <S2SV_ModStart> goto beach ; } <S2SV_ModStart> goto beach ; } <S2SV_ModStart> buf_len ) ) ) { <S2SV_ModStart> goto beach ; } <S2SV_ModStart> goto beach ; } <S2SV_ModStart> buf_len ) ) ) { int optxtlen = strlen ( op -> txt ) + optxtlen, R_ASM_BUFSIZE - optxtlen <S2SV_ModEnd>, ""%d <S2SV_blank> "",",0
808,"<S2SV_ModStart> client -> proxy ) ; g_byte_array_free ( client -> auth_buffer, TRUE",1
809,"<S2SV_ModStart> = vp9_clear_plane_plane ( xd, <S2SV_ModEnd>, arg )",0
810,<S2SV_ModStart> ; if ( key_is_negative ( key <S2SV_ModEnd> ) ) return,1
811,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ip ++ ) ; <S2SV_ModStart> ) ) { if ( unlikely ( * ip_pos + 1 ) <S2SV_ModStart> ) ) { if (! capable ( * ip_pos + 1 ) ) { <S2SV_ModEnd> goto exit ( <S2SV_ModStart> 0 ) ; } else { <S2SV_ModEnd> if (! <S2SV_ModStart> 0 ) ; } else { <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { if ( * ip_pos + 1 ) goto drop_pos ++ ; <S2SV_ModEnd> ; } else <S2SV_ModStart> ; } else { <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) ; } else { <S2SV_ModEnd> break ; },0
812,"<S2SV_ModStart> } if ( size_t ) { printf ( ""Invalid <S2SV_blank> size: <S2SV_blank> %s\\n"", __func_name ) ; return - ENOMEM <S2SV_ModEnd> ; } <S2SV_ModStart> '\\0 ) ; } free ( fit_source_name ) ; <S2SV_ModStart> '\\0 ) ; return 0 ; } <S2SV_ModEnd> return 0 ;",0
813,<S2SV_ModStart> { vpn_packet_t outpkt ; if ( len > sizeof outpkt. data ) return,1
814,<S2SV_ModStart> vmx_vpid_bitmap ) ; <S2SV_ModEnd> for ( msr <S2SV_ModStart> 0x83f ) ; <S2SV_ModEnd> if ( enable_ept,1
815,"<S2SV_ModStart>, j ) int vstart <S2SV_ModEnd> ; if (",0
816,"<S2SV_ModStart> # TEMP_FAILURE_RETRY ( <S2SV_ModStart> ), 0 )",0
817,<S2SV_ModStart> 1 ) { const <S2SV_ModStart> -> avg_frame_bandwidth <S2SV_ModEnd> ( rc -> <S2SV_ModStart> -> avg_frame_bandwidth <S2SV_ModEnd> ( rc ->,0
818,<S2SV_ModStart> [ i ] <S2SV_ModEnd> ; if (,0
819,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
820,<S2SV_ModStart> INDENT_INCR ; } if ( tbl -> indent < 0 ) tbl -> indent = 0 ; <S2SV_ModStart> -= INDENT_INCR ; if ( offset < 0 ) offset = 0 ;,1
821,"<S2SV_ModStart> + tail ; size_t ss = sst -> sst_size_len < ss? CDF_SHORT_SEC_SIZE ( h ) : CDF_SEC_SIZE ( h ) ; <S2SV_ModStart> b ) <= ss <S2SV_ModEnd> * sst -> <S2SV_ModStart> b ), ss <S2SV_ModEnd> * sst -> <S2SV_ModStart> b ), ss <S2SV_ModEnd> * sst -> <S2SV_ModStart> -> sst_len, ss <S2SV_ModEnd>, sst ->",0
822,"<S2SV_ModStart> : # line 113 <S2SV_ModEnd> ""re_grammar.y"" { RE_AST <S2SV_ModStart> } # line 1348 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 122 <S2SV_ModEnd> ""re_grammar.y"" { ( <S2SV_ModStart> } # line 122 <S2SV_ModEnd> ""re_grammar.y"" { RE_AST <S2SV_ModStart> } # line 1432 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 1432 <S2SV_ModEnd> ""re_grammar.y"" { RE_AST <S2SV_ModStart> } # line 1372 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 1432 <S2SV_ModEnd> ""re_grammar.y"" { RE_NODE <S2SV_ModStart> ( ) ; incr_ast_levels ( ) ; <S2SV_ModStart> } # line 1392 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 97 <S2SV_ModEnd> ""re_grammar.y"" { RE_AST <S2SV_ModStart> } # line 1372 <S2SV_ModEnd> ""re_grammar.y"" { ( <S2SV_ModStart> } # line 1372 <S2SV_ModEnd> ""re_grammar.y"" { ( <S2SV_ModStart> } # line 1432 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 1432 <S2SV_ModEnd> ""re_grammar.c"" { ( <S2SV_ModStart> } # line 1432 <S2SV_ModEnd> ""re_grammar",0
823,<S2SV_ModStart> int eob [ 0 ]. bit <S2SV_ModEnd> ; dob =,0
824,"<S2SV_ModStart> - 1 ) ; snprintf ( buff, sizeof ( buff ) ) ;",0
825,<S2SV_ModStart> ; if ( key_is_positive ( key <S2SV_ModEnd> ) ) zap,1
826,"<S2SV_ModStart> ) -> filter ; memset ( & uf, 0, sizeof ( uf ) )",1
827,<S2SV_ModStart> 0 ) { int n = ( int ) & ( pbi -> decrypt_state == 0 || ( pbi -> decrypt_state == 0 ) ) { <S2SV_ModStart> = pbi -> decrypt_state <S2SV_ModEnd> ; } },0
828,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> ) ; } exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
829,<S2SV_ModStart> -> peer. auth_capable = new -> peer. auth_capable ; asoc -> peer.,1
830,<S2SV_ModStart> mode = 0 <S2SV_ModEnd> ; if (,0
831,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( cc0 <S2SV_ModStart> % rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""PredictorEncodeTile"", ""%s"", ""(cc0%rowsize)!=0"" ) ; return 0 ; } <S2SV_ModEnd> while ( cc",1
832,<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,1
833,"<S2SV_ModStart> input_data, size_t input_forwards_size, size_t input_backwards_size <S2SV_ModEnd>, size_t input_forwards_size, char * input_size <S2SV_ModStart> ; char * ( size_t input_forwards_size <S2SV_ModEnd>, size_t input_backwards_size <S2SV_ModEnd> ) <S2SV_ModStart> = 0 ; action_forwards_size = ( size_t input_backwards_size <S2SV_ModEnd> ) <S2SV_ModStart> >= max_bytes_matched ) { if ( <S2SV_ModStart> >= max_bytes_backwards_size ) || ( <S2SV_ModEnd> >= max_bytes_bytes_matched > ( <S2SV_ModEnd> ) || <S2SV_ModStart> >= max_bytes_matched ) || ( <S2SV_ModEnd> >= max_bytes_matched > ( char * ) <S2SV_ModStart> RE_SCAN_LIMIT ) ) { action = RE_SCAN_LIMIT ) ; break ; } <S2SV_ModEnd> } # endif <S2SV_ModStart> >= max_bytes_matched ) { <S2SV_ModStart> = TRUE ; } <S2SV_ModStart> match = ( char * input_size <S2SV_ModEnd> ) yr_re_re_min ( <S2SV_ModStart> >= max_bytes_size <S2SV_ModEnd> ) ; action <S2SV_ModStart> = TRUE ; } <S2SV_ModStart> >= max_bytes_matched ) { <S2SV_ModStart> = TRUE ; } <S2SV_ModStart> >= max_bytes_matched ) { <S2SV_ModEnd> match = TRUE ; <S2SV_ModStart>",0
834,"<S2SV_ModStart> int best_rd_sse = UINT_MAX <S2SV_ModEnd>, int best_sse = <S2SV_ModStart>, int best_sse = UINT_MAX <S2SV_ModEnd> ; # if <S2SV_ModStart> int best_sse = UINT_MAX <S2SV_ModEnd>, best_sse = <S2SV_ModStart>, best_sse = UINT_MAX <S2SV_ModEnd> ; # endif <S2SV_ModStart>, best_sse = UINT_MAX <S2SV_ModEnd> ( 0,",0
835,"<S2SV_ModStart> svm, AC_VECTOR ) ; set_exception_intercept ( svm, DB_VECTOR",0
836,"<S2SV_ModStart> goto error ; memset ( filename, 0, sizeof ( size ) ) ;",0
837,"<S2SV_ModStart> sst, const cdf_directory_t * root_storage <S2SV_ModEnd> ) { cdf_summary_info_header_t <S2SV_ModStart> break ; } if ( root_storage ) { <S2SV_ModStart> = cdf_clsid_to_mime ( root_storage -> d_storage_uuid <S2SV_ModEnd>, clsid2desc ) <S2SV_ModStart> - 2 ; } <S2SV_ModStart>, count, root_storage <S2SV_ModEnd> ) ; free",1
838,<S2SV_ModStart> IVD_STREAM_WIDTH_HEIGHT_NOT_SUPPORTED ; } if ( ( u1_pic_wd << ps_seq -> u1_aff_flag ) > H264_MAX_FRAME_WIDTH ) { return NULL ; },0
839,<S2SV_ModStart> -> length ) ; if ( err ) return - EFAULT,1
840,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args <S2SV_ModStart> vpx_codec_alg_priv_t * const ctx <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( args ) return VPX_CODEC_OK <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> alt_ref_idx = ( args -> temporal_layer_id == 1 )? 1 : 1 ; <S2SV_ModEnd> return VPX_CODEC_INVALID_PARAM ;",0
841,<S2SV_ModStart> if ( prev && <S2SV_ModEnd> ( FRAG6_CB ( <S2SV_ModStart> ) - offset <S2SV_ModEnd> > 0 ) <S2SV_ModStart> > 0 ) goto discard_fq ; if <S2SV_ModEnd> ( next && <S2SV_ModStart> < end ) goto discard_fq ; <S2SV_ModEnd> FRAG6_CB ( skb <S2SV_ModStart> - 1 ; discard_fq : fq_kill ( fq ) ;,1
842,<S2SV_ModStart> { uint16 bitspersample = 1,0
843,"<S2SV_ModStart> status == ARCHIVE_LSTAT ) { struct archive_set_error ( & a -> archive, ARCHIVE_OK ) ; char * p = archive_set_size ( & a -> archive, ARCHIVE_OK ) ; if ( r == NULL ) { archive_set_error ( & a -> archive, ARCHIVE_FAILED ) ; return ( ARCHIVE_FAILED ) ; } st -> path [ 0 ] = archive_set_error ( & a -> path [ 0 ] == '\\0' ) ; <S2SV_ModEnd> } if ( <S2SV_ModStart> ) { archive_set_error ( & a -> name [ 0 ] ==",0
844,"<S2SV_ModStart> ; if ( safe_mount ( hostpath, path, 0, MS_BIND, NULL, rootfs -> path? rootfs -> mount : <S2SV_ModEnd> NULL )!=",1
845,"<S2SV_ModStart> int nbh ; unsigned char * iinfo ; struct udf_header * iinfo ; <S2SV_ModStart> unsigned int iinfo -> i_count ; if ( udf. ext ) { udf_read ( inode ) -> i_sb -> i_sb, inode ) ; if ( iinfo -> i_sb -> i_count > bs ) goto out ; if ( udf_read <S2SV_ModEnd> ( inode ) <S2SV_ModStart>, & iinfo -> i_sb -> i_sb -> i_sb -> i_sb ->",0
846,<S2SV_ModStart> = get_uv_uv_size ; memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ++ ) ; memset <S2SV_ModEnd> ( & lfm,0
847,"<S2SV_ModStart> dst_size ) { GetByteContext gb <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( data >= data_end <S2SV_ModEnd> ) return - <S2SV_ModStart> - 1 ; bytestream2_init ( & gb, data, data_end - <S2SV_ModEnd> data ) ; <S2SV_ModStart> data ) ; return amf_get_field_value2 ( & gb <S2SV_ModEnd>, name, <S2SV_ModStart>, name, <S2SV_ModEnd> dst, dst_size <S2SV_ModStart> dst, dst_size ) <S2SV_ModEnd> ; } <S2SV_null>",1
848,<S2SV_ModStart> ( ) ; strcpy <S2SV_ModEnd> ( t1_line_array ( t1_array,0
849,<S2SV_ModStart> mq_ops ) ; <S2SV_ModEnd> spin_lock ( &,0
850,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
851,<S2SV_ModStart> ; return 0 <S2SV_ModEnd> ; } <S2SV_null>,0
852,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF <S2SV_ModStart> / 2 ; if (! <S2SV_ModStart>, cc ) ) return 0 <S2SV_ModStart> wc ) ; return 1 ;",1
853,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
854,"<S2SV_ModStart> ; int err ; struct ip_options_rcu * inet_opt <S2SV_ModStart>. srr ) { struct ip_options_rcu * inet_opt ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt <S2SV_ModEnd> == 0 ) <S2SV_ModStart> ; rt = inet_opt -> opt. <S2SV_ModEnd> faddr ; rt",0
855,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
856,"<S2SV_ModStart> * mgr_hdl ; <S2SV_ModEnd> memset ( s_path <S2SV_ModStart> ( c_path ) <S2SV_ModEnd> ) ; switch <S2SV_ModStart> ( c_path, ""%s%s%d_C_XXXXXX"" <S2SV_ModEnd>, HSM_FM_SCK_PREFIX, <S2SV_ModStart> hdl -> instance <S2SV_ModEnd> ) ; if",1
857,<S2SV_ModStart> == NULL || ( int32_t * ) <S2SV_ModStart> == NULL || ( uint32_t * ),0
858,"<S2SV_ModStart> ""`%s\'"", option ) ; page_geometry = DestroyString ( page_geometry",1
859,"<S2SV_ModStart> NULL ; } memset ( & sk, 0, sizeof ( * sk ) ) ;",0
860,<S2SV_ModStart> err = kfree ( kkey_data ) ;,0
861,"<S2SV_ModStart> OP_ENDCATCH ) ; emit ( J, F, OP_ENDTRY ) ;",1
862,"<S2SV_ModStart> { if ( 3 == <S2SV_ModStart>, o_element_count ) && 0!= * o_row_count && 0!= * o_column_count && 0!= * o_element_count ) <S2SV_ModEnd> { * o_row_idx <S2SV_ModStart> return ; } LIBXSMM_ASSERT ( 0!= l_row && 0!= l_column ) ;",1
863,<S2SV_ModStart> } rgram_apbuf = sc_t <S2SV_ModEnd> rgram_len ; if,0
864,"<S2SV_ModStart> uint8 result ; uint32 <S2SV_ModEnd> length ; STREAM <S2SV_ModStart> ; STREAM s ; struct stream packet <S2SV_ModStart> return False ; packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_header ( & packet ), & packet ) ; }",0
865,"<S2SV_ModStart> ; cleanup : if ( status == NULL ) status = ""UNKNOWN_REASON"" <S2SV_ModEnd> ; if (",1
866,<S2SV_ModStart> ( l ) && ( c == 0 ),0
867,"<S2SV_ModStart> ; if (! v16_to_cpu ( vcpu, & vsi ) ) return - EINVAL ; if (",0
868,<S2SV_ModStart> * rsize >= 18 <S2SV_ModEnd> && rdesc [,1
869,<S2SV_ModStart> & new_map ) <S2SV_ModEnd> ) goto out <S2SV_ModStart> lower_first ; } ret = sort_idmaps ( & new_map ) ; if ( ret < 0 ) goto out ;,1
870,"<S2SV_ModStart> ) ; } memset ( g, 0, sizeof ( int ) ) ;",0
871,"<S2SV_ModStart> sr ) { <S2SV_ModEnd> uint16_t StructSize ; <S2SV_ModStart> ) ; } smb_ofile_flush ( sr, <S2SV_ModEnd> sr -> fid_ofile <S2SV_ModStart> sr -> fid_ofile <S2SV_ModEnd> ) ; (",1
872,<S2SV_ModStart> len ; uint32_t <S2SV_ModEnd> dataptr ; if,0
873,<S2SV_ModStart> -> above_context ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> 1 ] ; memset <S2SV_ModEnd> ( pbi ->,0
874,"<S2SV_ModStart> addrtype = TIPC_ADDR_ID ; memset ( & addr -> addr, 0, sizeof ( addr -> addr ) )",1
875,<S2SV_ModStart> ( user_alloc && ( <S2SV_ModStart> PAGE_SIZE - 1 ) ) ) return - EINVAL ; if (,0
876,<S2SV_ModStart> { MATLAB_KO : if ( clone_info!= ( ImageInfo * ) NULL ),0
877,<S2SV_ModStart> } if ( tmp_line_len >= 1 && <S2SV_ModStart> ; if ( tmp_line_len >= 1 && <S2SV_ModStart> ; } } \\\n} <S2SV_ModEnd> if ( strncasecmp,1
878,<S2SV_ModStart> * p ; char * s <S2SV_ModEnd> ; const char <S2SV_ModStart> char * s <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) { return NULL ; } if ( p == 0 ) { PyUnicode_TypeError : NULL ; return NULL ; } <S2SV_ModStart> } while ( p == 0 <S2SV_ModEnd> ) { if <S2SV_ModStart> endif return NULL ; } <S2SV_ModEnd> } <S2SV_null>,0
879,"<S2SV_ModStart> { if ( user_sid_size > ( ( record_data_size - 4 ) - user_sid_offset ) ) { libcerror_error_set ( error, LIBNOTIFY_DOMAIN_DOMAIN_DOMAIN_VALUE_OUT_OUT_OF_VALUE_OUT_OUT_OUT_OUT_BOUNDS, ""%s: <S2SV_blank> data <S2SV_blank> size <S2SV_blank> out <S2SV_blank> out <S2SV_blank> bounds."", function ) ; goto on_error ; } if ( <S2SV_ModStart> 0 ) { if ( user_sid_size > ( ( record_data_size - 4 ) - 4 ) ) { libcerror_error_error_error_error_set ( error, LIBACCES_ERROR_DOMAIN_RUNTIME_BOUNDS, ""%s: <S2SV_blank> value <S2SV_blank> size <S2SV_blank> of <S2SV_blank> value <S2SV_blank> out <S2SV_blank> out <S2SV_blank> value <S2SV_blank> out <S2SV_blank> out <S2SV_blank> bounds."", function ) ; goto on_error ; } <S2SV_ModStart> 0 ) { if ( ( data_size > ( ( ( char * data_size - 4 ) - 4 ) ) ) { libcerror_error_error_error_set ( error, LIBACCES_ERROR_VALUE_OUT_OUT_OUT_OUT_OUT_BOUNDS, ""%s: <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> out <S2SV_blank> out <S2SV_blank>",0
880,"<S2SV_ModStart> WaveHeader WaveHeader ; int format_chunk = 0 ; <S2SV_ModStart>, format ; if ( format_chunk ++ ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",1
881,"<S2SV_ModStart> ; uint16_t numChannels = 0 <S2SV_ModStart> numChannels < 1 || numChannels > 256 <S2SV_ModStart> ) ) { if (! config -> num_channels ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
882,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> ) ) { ND_TCHECK_8BITS ( tptr ) ;,0
883,<S2SV_ModStart> ~ FMODE_TIMER_IFLG_RUNNING ; list_del_init ( & timeri -> ack_list ) ; list_del_init ( & timeri -> active_list ) ;,0
884,"<S2SV_ModStart> char buf buf ; char * cp <S2SV_ModEnd> = 0 ; <S2SV_ModStart> ; char * cp <S2SV_ModEnd> = NULL ; <S2SV_ModStart>, cp, * cp <S2SV_ModEnd> ) ; if",0
885,<S2SV_ModStart> else if ( anope_flags_compat && <S2SV_ModStart> else if ( anope_flags_compat && <S2SV_ModStart> else if ( anope_flags_compat &&,1
886,<S2SV_ModStart> -> buffer ; if (! ctx -> gf128 ) return - ENOKEY ;,1
887,"<S2SV_ModStart> ; if ( strcmp ( sub_demuxer -> name, ""srt"" ) && strcmp ( sub_demuxer -> name, ""ass"" ) ) goto error ; if (",1
888,<S2SV_ModStart>,0
889,"<S2SV_ModStart> write_literal ( const vpx_write_literal <S2SV_ModEnd> * w, <S2SV_ModStart> < 0 ) { vpx_write_literal <S2SV_ModEnd> ( w,",0
890,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; } ret",1
891,<S2SV_ModStart> dptr ++ = ROSE_CALL_REQ_ADDR_LEN_VAL <S2SV_ModEnd> ; memcpy (,1
892,<S2SV_ModStart> = new_ns ; new_ns -> mounts ++ ;,1
893,<S2SV_ModStart> ; memset ( vpx_alloc_frame <S2SV_ModEnd> ( &,0
894,<S2SV_ModStart> ; zip_object_handlers. get_gc = php_zip_get_gc ; zip_object_handlers.,1
895,<S2SV_ModStart> case RXE_MEM_TYPE_FMR : if <S2SV_ModEnd> ( memcmp ( <S2SV_ModStart> mem -> length || length > mem -> length || length > <S2SV_ModEnd> mem -> length <S2SV_ModStart> mem -> length - length ) return - EFAULT ; return <S2SV_ModEnd> 0 ; default,0
896,"<S2SV_ModStart> = 0 ; ND_TCHECK2 ( * dp, sizeof ( * ni6 ) ) ; <S2SV_ModStart> ) + 4 ; ND_TCHECK ( cp [ 0 ] )",1
897,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",1
898,<S2SV_ModStart> sent = 0 <S2SV_ModEnd> ; smb_msg.,1
899,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> buffer_pipe_buf_get ( struct <S2SV_ModStart> -> private ; if ( ref -> ref > INT_MAX / 2 ) return false ; <S2SV_ModStart> ref ++ ; return true ;,1
900,<S2SV_ModStart> fs -> clusters + <S2SV_ModEnd> 1 ) get_fat,1
901,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
902,<S2SV_ModStart> sk_nulls_node ) ; sk_nulls_node_init ( & sk -> sk_nulls_node ) ;,1
903,<S2SV_ModStart> } } } ps_dec -> u4_first_slice_in_pic = 0 ; <S2SV_ModStart> u4_mbs_in_slice ) ; if (! ps_dec -> ps_cur_slice_slice ) { prev_slice_slice ++ ; },0
904,<S2SV_ModStart> (! mm ||! mm -> env_end,1
905,"<S2SV_ModStart> inode * inode, int relocated ) { int flags = relocated? RR_RELOC_DE : 0 ; <S2SV_ModEnd> int result = <S2SV_ModStart>, inode, flags <S2SV_ModEnd> ) ; if <S2SV_ModStart>, inode, flags | RR_REGARD_XA <S2SV_ModEnd> ) ; }",1
906,<S2SV_ModStart> * inotify_new_group ( <S2SV_ModEnd> unsigned int max_events <S2SV_ModStart> -> inotify_data. fa = NULL <S2SV_ModEnd> ; group -> <S2SV_ModStart> -> inotify_data. fa = NULL <S2SV_ModEnd> ; group ->,0
907,<S2SV_ModStart> [ p ] && in -> linesize [ p ],1
908,"<S2SV_ModStart> jcount ) ; if ( pcount > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeded"", pcount ) ) ) ;",0
909,<S2SV_ModStart> buffers ] ) } <S2SV_ModEnd> ( screen ->,0
910,"<S2SV_ModStart> SCALAR_VALUE ) { coerce_reg_to_size ( & <S2SV_ModStart> [ value_regno ], size <S2SV_ModEnd> ) ; }",1
911,<S2SV_ModStart> int stripsize = 0,0
912,<S2SV_ModStart> base_name ) ; char need_to_append_dot ; struct search_domain * dom ; if (! base_len ) return NULL ; <S2SV_ModEnd> need_to_append_dot = base_name <S2SV_ModStart> : 1 ; <S2SV_ModEnd> for ( dom,1
913,<S2SV_ModStart> ; err = TEMP_FAILURE_RETRY ( <S2SV_ModStart> delay ) ),0
914,<S2SV_ModStart> goto out ; <S2SV_ModEnd> if ( msg,0
915,"<S2SV_ModStart> number_colormaps, number_planes, number_planes_filled <S2SV_ModStart> -> rows ; number_planes_filled = ( number_planes % 2 == 0 )? number_planes : number_planes + 1 ; <S2SV_ModStart> ( number_pixels * number_planes_filled <S2SV_ModEnd> )!= ( <S2SV_ModStart> ( number_pixels * number_planes_filled <S2SV_ModEnd> ) ) ThrowReaderException <S2SV_ModStart> -> rows * number_planes_filled <S2SV_ModEnd> ; pixel_info =",0
916,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> UINT32 originalSize ; if (! context ) return FALSE ; <S2SV_ModStart> == 0 ) { if ( context -> priv -> PlaneBuffersLength < originalSize ) return FALSE ; <S2SV_ModStart> 0xFF ) ; } <S2SV_ModStart> < originalSize ) { if (! <S2SV_ModStart> i ], context -> priv -> PlaneBuffersLength, originalSize ) ) return FALSE ; } else { if ( context -> priv -> PlaneBuffersLength < originalSize ) return FALSE ; <S2SV_ModEnd> CopyMemory ( context <S2SV_ModStart> originalSize ) ; } <S2SV_ModStart> planeSize ; } return TRUE ;",1
917,<S2SV_ModStart> policy ) { if (! inode_owner_or_capable ( inode ) ) return - EACCES ;,1
918,"<S2SV_ModStart>, value, """",",0
919,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>, key,",0
920,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) -> iif ) ; * addr_len = sizeof ( * sin6,1
921,"<S2SV_ModStart> ( ret ) { applog ( LOG_WARNING, ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> header <S2SV_blank> to <S2SV_blank> header_bin, <S2SV_blank> %s"", header ) ; return false ; } if (",0
922,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
923,"<S2SV_ModStart> size ) { size_t res ; if ( check_mul_overflow ( num, size, & res ) ) abort ( ) ; <S2SV_ModEnd> ptr = malloc <S2SV_ModStart> = malloc ( res <S2SV_ModEnd> ) ; if <S2SV_ModStart> '\\0', ( res <S2SV_ModEnd> ) ) ;",0
924,<S2SV_ModStart> -> io_context ; task_context_unlock ( ioc ) ;,0
925,"<S2SV_ModStart> * res ; <S2SV_ModEnd> return NULL ; <S2SV_ModStart> ) ; } if ( lookup_attr_id <S2SV_ModEnd> ( self, <S2SV_ModStart>, & PyId__, & PyId__, & PyId__ )",0
926,<S2SV_ModStart> ; if (! desc -> bLength ) return - EINVAL,0
927,"<S2SV_ModStart> -> private_data ; struct perf_event_context * event = <S2SV_ModEnd> ; struct perf_event_ctx_lock <S2SV_ModStart> ( event, <S2SV_ModEnd> ) ; case <S2SV_ModStart>! perf_event_unlock ( event, arg ) <S2SV_ModEnd> ) ; return",0
928,<S2SV_ModStart> sacked_out ) ; if ( newly_acked_sacked <= 0 || WARN_ON_ONCE (! tp -> prior_cwnd ) ) return ;,1
929,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_mode ( VP9_COMMON <S2SV_ModStart> * cm, MACROBLOCKD * xd, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> ) { PREDICTION_MODE <S2SV_ModEnd> y_mode = read_intra_mode <S2SV_ModStart> y_mode_prob <S2SV_ModEnd> y_mode_prob [ cm <S2SV_ModStart> ] ) ; PREDICTION_MODE <S2SV_ModEnd> if ( counts",0
930,<S2SV_ModStart> mask ) { u32 type ; if (! type ) return NULL ;,0
931,<S2SV_ModStart> -> ctx -> ctx -> flags ; if (,0
932,"<S2SV_ModStart> c -> tile_width <S2SV_ModEnd>, 16 ) <S2SV_ModStart>, 16 ) * 3",1
933,<S2SV_ModStart> ) ; } if (!,0
934,,1
935,"<S2SV_ModStart> 1, 1 <S2SV_ModEnd> ), 1",0
936,"<S2SV_ModStart> p ) { return <S2SV_ModEnd> chdlc_print ( ndo <S2SV_ModStart>, p, h -> len <S2SV_ModEnd> ) ; }",1
937,<S2SV_ModStart> (! rc <S2SV_ModEnd> && tcon ),1
938,<S2SV_ModStart> -> len && SKB_EXT_ERR ( skb ) -> opt_stats <S2SV_ModEnd> ) put_cmsg (,1
939,"<S2SV_ModStart> ) ) ; raptor_sax2_set_option ( rdf_xml_parser -> sax2, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES, NULL, RAPTOR_OPTIONS_GET_NUMERIC ( rdf_parser, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES ) ) ;",1
940,<S2SV_ModStart> { if (! SSL_C_IS_UNEXPECTED_MESSAGE ) { al = SSL_AD_MESSAGE ; SSL_UNEXPECTED_MESSAGE ; goto f_err ; } if (,0
941,<S2SV_ModStart> { return SECURE_ELEMENT_ERROR_NPE ; } if ( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE ) { return SECURE_ELEMENT_ERROR_BUF_SIZE,1
942,<S2SV_ModStart> + 1 ; if ( iframe -> max_niv - 1 > session -> max_settings ) { return rv ; },0
943,<S2SV_ModStart> = ucounts ; new_ns -> mounts = 0 ; new_ns -> pending_mounts = 0 ;,1
944,"<S2SV_ModStart> += dif ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
945,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return - EINVAL,0
946,<S2SV_ModStart>. dimensions ; unsigned int actual_size = rtype == 2? n * 2 : n ; unsigned int limit_r_begin = ( r -> begin < actual_size? r -> begin : actual_size ) ; unsigned int limit_r_end = ( r -> end < actual_size? r -> end : actual_size ) ; <S2SV_ModStart> int n_read = limit_r_end - limit_r_begin <S2SV_ModEnd> ; int part_read,1
947,<S2SV_ModStart> { u32 challenge_count = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return ; } if ( tcp_random_count ) return - EINVAL ;,0
948,"<S2SV_ModStart> struct llc_pktinfo info ; memset ( & info, 0, sizeof ( info ) )",1
949,"<S2SV_ModStart> void write_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> const TOKENEXTRA * const vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> int i, vpx_prob <S2SV_ModEnd> * t ) <S2SV_ModStart> 0 ] ; vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> ] ) { const vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> 0 ] ; vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> * e, e, e <S2SV_ModEnd> ) ; const",0
950,"<S2SV_ModStart> write_bit_buffer ; vpx_write_bit_buffer <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> size, 0, 0,",0
951,<S2SV_ModStart> net * net <S2SV_ModEnd> ; if (,0
952,"<S2SV_ModStart> ret, n ; int num_descriptors ; size_t offset = offsetof ( struct hid_descriptor, desc ) <S2SV_ModStart> ENODEV ; } if ( hdesc -> bLength < sizeof ( struct hid_descriptor ) ) { dbg_hid ( ""hid <S2SV_blank> descriptor <S2SV_blank> is <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return - EINVAL ; } <S2SV_ModStart> hdesc -> bCountryCode ; num_descriptors = min_t ( int, hdesc -> bCountryCode, ( int, sizeof ( struct hid_descriptor ) )",0
953,<S2SV_ModStart> int ike <S2SV_ModEnd> ; ND_TCHECK ( * <S2SV_ModStart> int ike_len ; ND_TCHECK ( * ext_32BITS ( ext ),0
954,<S2SV_ModStart> group_dead ) ; if ( group_dead ) proc_exit ( ) ; exit_proc ( ) ; exit_exit ( ) ; exit_proc ( ) ; exit_exit ( ) ; exit_exit ( ) ; exit_exit ( ) ; exit_proc_exit ( ) ; exit_exit ( ) ; exit_exit ( ) ; exit_proc ( ) ; exit_exit ( ) ; exit_exit ( tsk,0
955,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void * <S2SV_ModStart> data ) { <S2SV_ModEnd> add_preferred_base_object ( name <S2SV_ModStart> |= OBJECT_ADDED ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
956,<S2SV_ModStart> break ; } size_t <S2SV_ModEnd> if (!,0
957,<S2SV_ModStart> ; ret = usb_free_urb ( urb ) ;,0
958,"<S2SV_ModStart> x2 ; WORD32 x2 ; char * x ; <S2SV_ModStart> 0 ] ; memset ( x, h_h2, 0, sizeof ( x2 ) ) ; <S2SV_ModStart> ++ ) { memcpy ( x, h_h2, shift_h1, & x2_h_h2_h2 [ 0 ], x2 [ 0 ] ; }",0
959,<S2SV_ModStart> ( tag == ASN1_EOC <S2SV_ModEnd> ) { if <S2SV_ModStart> <= 0x7f ) goto check_length ; <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> > sizeof ( len <S2SV_ModEnd> ) - 1 <S2SV_ModStart> goto data_overrun_error ; len = 0 ; for ( <S2SV_ModEnd> ; n > <S2SV_ModStart> ] ; } check_length : if ( len > datalen - dp ) goto data_overrun_error ;,1
960,<S2SV_ModStart> ) val ; <S2SV_ModEnd> memset ( ptr,1
961,"<S2SV_ModStart> mntent, mount * mntt <S2SV_ModEnd> ) { return",0
962,"<S2SV_ModStart> PHP_SHA512_CTX context ; if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_SHA256_CTX context ; if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error, 0, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; } <S2SV_ModStart> PHP_SHA256_CTX context ; if ( sig_len < sizeof ( digest ) ) { spprintf ( error, ""broken <S2SV_blank> signature"" ) ; } return FAILURE ; }",0
963,<S2SV_ModStart> ] <= max && value [ n ] - min < field -> maxusage <S2SV_ModStart> && field -> value [ n ] - min < field -> maxusage && field -> <S2SV_ModStart> <= max && value [ n ] - min < field -> maxusage &&,1
964,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
965,<S2SV_ModStart> if ( argReg > <S2SV_ModEnd> regsz ) { <S2SV_ModStart> regsz ) { return ;,1
966,"<S2SV_ModStart> ( req_version_val ) ) ; rb_printf <S2SV_ModEnd> ( req_name, <S2SV_ModStart> <S2SV_null> <S2SV_null>",0
967,"<S2SV_ModStart> 0 ) ; args -> rmtvaluelen <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> -> i_mount, args -> rmtvaluelen <S2SV_ModEnd> ) ; if <S2SV_ModStart> -> valuelen = args -> rmtvaluelen <S2SV_ModEnd> ; return 0 <S2SV_ModStart> -> valuelen < args -> rmtvaluelen ) { args -> valuelen = args -> rmtvaluelen <S2SV_ModEnd> ; return XFS_ERROR <S2SV_ModStart> -> valuelen = args -> rmtvaluelen <S2SV_ModEnd> ; } return",1
968,<S2SV_ModStart> = size ; size_t <S2SV_ModEnd> size = size,0
969,<S2SV_ModStart> int * bind_stmt <S2SV_ModEnd> ; int * <S2SV_ModStart> NULL ) { * param_end = NULL <S2SV_ModEnd> ; if ( <S2SV_ModStart> NULL ) { tp -> imp_cleanup = NULL ; },0
970,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) &&",0
971,"<S2SV_ModStart> ) ) ; if ( LTXTQUERY_TOO_BIG ( state. num, state. sumlen ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""ltxtquery <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large"" ) ) ) ;",1
972,<S2SV_ModStart> = 0 ; char * line = 0 ; <S2SV_ModStart> } else { len =,0
973,<S2SV_ModStart> ; if (! EXT4_SB ( inode -> i_sb ) -> s_journal <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd>! handle ),1
974,"<S2SV_ModStart> ( str, ""%s"", <S2SV_ModEnd> ) ) { <S2SV_ModStart> return 0 ; <S2SV_ModEnd> if ( len",0
975,"<S2SV_ModStart> ( f, ""PG%31[ <S2SV_blank> \\t]%c%c%31[ <S2SV_blank> \\t+-]%d%31[ <S2SV_blank> \\t]%d%31[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp,",1
976,"<S2SV_ModStart> ( size < 6 + 1 <S2SV_ModEnd> ) ASSERT ( <S2SV_ModStart> ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; char * result ; memcpy ( buf, ""DEADBEEF"", 8 ) ; size = size ; char * result ; size_t length ; size_t length ; memcpy ( buf, & size, & size ) ; ASSERT ( result!= 0 ) ; ASSERT ( strcmp ( result, ""DEADBEEBEEF"" ) == 0 ) ; ASSERT ( strcmp ( buf, ""DEADBEEF"" ) == 0 ) ; ASSERT ( strcmp ( buf, ""DEADBEEF"" ) == 0 ) ; ASSERT ( result!= 0 ) ; ASSERT ( result!= buf ) ; ASSERT ( result == 0 ) ; ASSERT ( strcmp ( buf, ""DEADBEEF"" + 1 ) == 0 ) ; ASSERT ( result!= buf ) ; ASSERT ( strcmp ( buf, ""DEADBEEF"" [ size ], 8 - size ) == 0 ) ; if ( result!= buf ) free ( result ) ; ASSERT ( memcmp ( buf ) ; }",0
977,<S2SV_ModStart> ( cr ) <S2SV_ModEnd> return 0 ;,0
978,"<S2SV_ModStart> len ) { memset <S2SV_ModEnd> ( str, <S2SV_ModStart> len, len, sizeof ( str ) ) ;",0
979,"<S2SV_ModStart> char * g. inf, * sufx = """" ; size_t pre = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> NULL ) { if ( <S2SV_ModEnd> ( g. <S2SV_ModStart> g. inf ) { if ( <S2SV_ModEnd> strcmp ( to <S2SV_ModStart> g. inf ) == 0 ) sufx = g. inf ; <S2SV_ModEnd> g. hname <S2SV_ModStart> g. hname = to <S2SV_ModStart> g. sufx ; } else if ( <S2SV_ModEnd> strcmp ( to <S2SV_ModStart>, "".tgz"" ) == 0 ) sufx = "".tar"" ; } else sufx",0
980,,1
981,<S2SV_ModStart> * output ; MagickBooleanType status ; <S2SV_ModStart> ) ; } status = MagickFalse ; <S2SV_ModStart> i ++ ) { <S2SV_ModEnd> input = fopen_utf8 <S2SV_ModStart> input ) ),0
982,<S2SV_ModStart> * si ; SvcInternal_t <S2SV_ModEnd> * si =,0
983,"<S2SV_ModStart> ; fail : if ( strncmp <S2SV_ModEnd> ( sb,",0
984,"<S2SV_ModStart> passwd * pwd, const char * prefix <S2SV_ModStart> = NULL ; <S2SV_ModEnd> pw_init ( ) <S2SV_ModStart> & tmpname, ""/etc"", prefix <S2SV_ModEnd> ) ) ==",1
985,"<S2SV_ModStart> const vpx_tree_tree_tree <S2SV_ModEnd> ( tree,",0
986,"<S2SV_ModStart> ) { return """" <S2SV_ModEnd> ; } <S2SV_null>",0
987,"<S2SV_ModStart> TRUE ; } Jid * my_jid = jid_create ( stanza ) ; const char * const stanza_create ( stanza ) ; const char * my_jid = jid_create ( stanza ) ; Jid * my_jid = jid_create ( stanza_from ) ; if ( g_strcmp0 ( my_jid -> barejid, msg_jid -> barejid )!= 0 ) { log_warning ( ""Invalid <S2SV_blank> carbon <S2SV_blank> received, <S2SV_blank> from: <S2SV_blank> %s"", stanza_from ) ; return TRUE ; } <S2SV_ModStart> jid_create ( to <S2SV_ModEnd> ) ; char",0
988,<S2SV_ModStart> ] ) ; free ( o -> flags ) ;,0
989,<S2SV_ModStart> net * net <S2SV_ModEnd> ; if (,0
990,"<S2SV_ModStart> ( arg1, CMD_SET_OPTIONS <S2SV_ModEnd> ) ) { <S2SV_ModStart> NULL ) ; } else { log_log ( LOG_ERR, ""Configuration <S2SV_blank> is <S2SV_blank> invalid <S2SV_blank> options <S2SV_blank> %s"", conf_path ) ; log_service_options ( LOG_ERR, LOG_ERR, NULL ) ; # endif",0
991,<S2SV_ModStart> return - EOPNOTSUPP <S2SV_ModEnd> ; BT_DBG (,1
992,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
993,<S2SV_ModStart> -> st_v1_cipher <S2SV_ModEnd> ) ; if,0
994,<S2SV_ModStart> = 0 ; if ( ISMPEG2D_DIMENSIONS == IMPEG2D_DIMENSIONS ) { return e_error ; },0
995,<S2SV_ModStart> * zone ; size_t tilemap_size ; <S2SV_ModStart>. height ; tilemap_size = <S2SV_ModEnd> x_size * y_size <S2SV_ModStart> struct map_tile ) ; if ( x_size == 0 || tilemap_size / x_size / sizeof ( struct map_tile )!= y_size ||! ( tilemap = malloc ( tilemap_size,1
996,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_printroute ( netdissect_options <S2SV_ModStart> ) ; return ( 0 ) <S2SV_ModStart>, length ) ) ; ND_TCHECK ( cp [ 2 ] <S2SV_ModStart> 4 ) { ND_TCHECK2 ( cp [ len ], 4 ) ; <S2SV_ModStart> ) ; } return ( 0 ) ; trunc : return ( - 1 ) ;",1
997,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> print_null> static,0
998,<S2SV_ModStart>. mode = 1 <S2SV_ModEnd> ; res =,0
999,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> + 1, ""prestring=%490s"" <S2SV_ModEnd>, buf ) <S2SV_ModStart> ) ) > L_BUFSIZE <S2SV_ModEnd> - 3 ) <S2SV_ModStart> + 1, ""protos=%490s"" <S2SV_ModEnd>, buf ) <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd>, ""protos <S2SV_blank> protos <S2SV_blank> prestring <S2SV_blank> %s <S2SV_blank> %s"", <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd>, buf ) <S2SV_ModStart> ( buf ),",0
1000,<S2SV_ModStart> if ( chunk_num >= <S2SV_ModEnd> chm -> num_chunks,1
1001,"<S2SV_ModStart>! validate_event ( event -> pmu, <S2SV_ModStart>! validate_event ( event -> pmu, <S2SV_ModStart>! validate_event ( event -> pmu,",1
1002,<S2SV_ModStart> else { arg1 ; } # endif,0
1003,<S2SV_ModStart> studio_profile ) { <S2SV_ModEnd> if (!,1
1004,<S2SV_ModStart> nsops < 1 || nsops > SEMOPM,1
1005,<S2SV_ModStart> ; i = 0 <S2SV_ModEnd> ( i +,0
1006,<S2SV_ModStart> < INDIRECT_BLOCKS ) { <S2SV_ModStart> ] ) ; },1
1007,"<S2SV_ModStart> error ) ; if ( i -> parent -> width > i -> height ) { # if ( i -> parent -> log ) { # if! defined ( i -> log ) fprintf ( i, i -> log ) ; break ; } if ( i -> log ) { # if ( i -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> WARNING <S2SV_blank> \'\\n"" ) ; return - 1 ; } if ( i -> height ) { # if ( i -> log, ""*** * i -> log ) > i -> log ) { fprintf ( i -> error - 1 ) ; break ; } #",0
1008,<S2SV_ModStart> >> 2 ; if ( q + o >= e ) goto out ;,0
1009,"<S2SV_ModStart> ++ ) { <S2SV_ModEnd> if ( bytes_matched <S2SV_ModStart> max_bytes_matched ) break ; next_input = input + i * input_incr <S2SV_ModStart> -> min ; bytes_matched = yr_min ( bytes_matched, max_bytes_matched ) ;",1
1010,"<S2SV_ModStart> len ) { assert ( len > 28 ) ; <S2SV_ModStart> case LEX_EOF : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""EOF"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED_EOF : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""ID"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED_STR : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> LITERAL"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED <S2SV_blank> LITERAL"" <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> TEMPLATE <S2SV_blank> LITERAL"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED_STR : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> LITERAL"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED_REGEX : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> LITERAL"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED_STR : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> LITERAL"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED_REGEX : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> REGEX"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case LEX_UNFINISHED_REGEX : strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""UNFINISHED <S2SV_blank> REGEX"" <S2SV_ModEnd> ) ;",0
1011,"<S2SV_ModStart> mnt_instance ) ; if ( unlikely (! list_empty ( & mnt -> mnt_mounts ) ) ) { struct mount * p, * tmp ; list_for_each_entry_safe ( p, tmp, & mnt -> mnt_mounts, mnt_child ) { umount_mnt ( p ) ; } }",1
1012,"<S2SV_ModStart> void encode_term_sub ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> < 0 ) { vpx_write_bit <S2SV_ModEnd> ( w, <S2SV_ModStart> 4 ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 8 ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 8 ) { vpx_write_literal <S2SV_ModEnd> ( w,",0
1013,,1
1014,<S2SV_ModStart> goto not_found ; if ( e - p > HOST_NAME_MAX - 1 ) goto not_found ;,0
1015,<S2SV_ModStart> ; int err <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> uint32_t pos ; if ( inode -> i_size > inode -> i_sb -> s_blocksize ) { err = - ENAMETOOLONG ; goto out_unmap ; } <S2SV_ModStart>! bh ) { err = - EIO ; goto out_unlock_inode ; } <S2SV_ModEnd> symlink = bh <S2SV_ModStart> return 0 ; out_unlock_inode <S2SV_ModEnd> : up_read ( <S2SV_ModStart> page ) ; out_unmap :,1
1016,<S2SV_ModStart> else if ( cpu_has_secondary_exec_ctrls ( ) && ( vmcs_read32 ( SECONDARY_VM_EXEC_CONTROL ) & SECONDARY_EXEC_VIRTUALIZE_X2APIC_MODE ) <S2SV_ModEnd> ) { if,1
1017,"<S2SV_ModStart> if ( ent == NULL ) { st = KRB5_KDB_NOENTRY ; <S2SV_ModEnd> goto cleanup ; <S2SV_ModStart> cleanup ; } st = populate_policy ( context, ld, ent, pol_name, * policy ) ;",1
1018,<S2SV_ModStart> 1 ) ; if ( ( UINT32 ) ps_codec -> i1_slice_count!= 0 ) { return IHEVCD_INVALID_PARAMETER ; },0
1019,<S2SV_ModStart> <S2SV_null> <S2_null> <S2_null> static <S2SV_ModStart> int b_bh_bh = 0 <S2SV_ModStart> ) { int b_bh = 0 <S2SV_ModEnd> ; int n <S2SV_ModStart> = 0 ; if ( unlikely ( i < SIZE_MAX_BLOCK_SIZE ) ) { <S2SV_ModStart> = 0 ; } else { int n = 0 ; for ( i = 0 ; i < height ) { if ( i = 0 ; i = 0 ; break ; } },0
1020,<S2SV_ModStart> ) ) { if ( psf -> header. len >= sizeof ( psf ) ) return SF_LOG_WARNING :,0
1021,<S2SV_ModStart> ; if ( d -> msg_len > sizeof ( d -> msg ) ) return - EINVAL ; if ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( i,1
1022,"<S2SV_ModStart> break ; } memset ( & cinfo, 0, sizeof ( cinfo ) ) ;",1
1023,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
1024,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; return",0
1025,"<S2SV_ModStart> int num_items_scanned ; guint pkt_len ; int <S2SV_ModEnd> pktnum, hr <S2SV_ModStart> + 64, ""LEN=%9u"" <S2SV_ModEnd>, & pkt_len <S2SV_ModStart> FALSE ; } if ( pkt_len > WTAP_MAX_PACKET_SIZE ) { * err = WTAP_ERR_BAD_FILE ; * err_info = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba""",0
1026,<S2SV_ModStart> ; int err = 0 ; msg -> msg_namelen,1
1027,"<S2SV_ModStart> ; if ( zend_hash_find <S2SV_ModEnd> ( ht,",1
1028,"<S2SV_ModStart> nla_data ) ; strncpy <S2SV_ModEnd> ( link_info. <S2SV_ModStart> & nla_info ),",0
1029,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> ; } } io -> io_cleanup = io_cleanup ;,0
1030,"<S2SV_ModStart> 1 ) { if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf = opipe",0
1031,<S2SV_ModStart> p -> tokenpos >= ( <S2SV_ModEnd> p -> tokenlen <S2SV_ModStart> p -> tokenlen - 1 ),1
1032,<S2SV_ModStart> case BLOCK_BLOCK : case BLOCK_16 : { case BLOCK_16 : case BLOCK_16 : case BLOCK_16 : case BLOCK_16 : case BLOCK_16 : case BLOCK_16 : return vp9_mse_mse8x16 <S2SV_ModEnd> ; } <S2SV_ModStart> return vp9_mse_mse_ <S2SV_ModStart> case BLOCK_64_16_16_16 : return vp9_mse_mse_mse_mse_mse16 <S2SV_ModEnd> ; } <S2SV_null>,0
1033,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
1034,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ; } <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> & 0xFFFF ; },1
1035,<S2SV_ModStart> ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx )!= comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy )!= comp -> dy ) { continue ; } if (,1
1036,"<S2SV_ModStart> ( padata ) <S2SV_ModEnd>, EINVAL,",0
1037,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
1038,"<S2SV_ModStart> -> stratum_port ; snprintf ( address, 254 <S2SV_ModEnd>, ""%s:%s"",",1
1039,<S2SV_ModStart> if (! page_name_get_page ( page ) ) { <S2SV_ModStart> } else { file = <S2SV_ModEnd> if ( page,0
1040,<S2SV_ModStart> + i ; unsigned int actual_size = r -> blocksize_1 / 2 ; unsigned int limit_r_begin = r -> begin < actual_size? r -> begin : actual_size ; unsigned int limit_r_end = r -> end < actual_size? r -> end : actual_size ; <S2SV_ModStart> int n_read = limit_r_begin <S2SV_ModEnd> ; int limit_read,0
1041,<S2SV_ModStart> head -> iov_base ; if ( hdr > head -> iov_len ) return 0,1
1042,<S2SV_ModStart> o2nm_cluster * cluster <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if (! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> cl_nodes_lock ) ; o2nm_unlock_subsystem ( ) ;,1
1043,"<S2SV_ModStart> = 0 ; if ( ( frame_buf. buf_len < 1 ) || ( frame_buf -> vlock ) ) { dev_err ( & dev -> dev, ""Too <S2SV_blank> large\\n"" ) ; return ; } <S2SV_ModStart> -> slock_buf ) ; dev_dbg ( & input. dev, ""Invalid <S2SV_blank> size <S2SV_blank> of <S2SV_blank> large\\n"" ) ; return <S2SV_ModEnd> ; } if",0
1044,"<S2SV_ModStart> ( size_t num, size_t <S2SV_ModEnd> size ) {",0
1045,<S2SV_ModStart> ; ssize_t count ; if ( bytes == 0 || items == 0 ) return 0,1
1046,<S2SV_ModStart> -> serviceId == NULL && <S2SV_ModEnd> ( uint32_t,0
1047,"<S2SV_ModStart> key_ref, key_ref, 0 <S2SV_ModEnd> ) ; ret",0
1048,"<S2SV_ModStart> ) ; memset ( ret, 0, sizeof ( * interface ) )",0
1049,"<S2SV_ModStart> 0 ) ; if ( len == '\\0' ) break ; size_t size_t <S2SV_ModEnd> ( sb,",0
1050,"<S2SV_ModStart> r ) { if ( <S2SV_ModStart>, r ) == ASN1 ) return 0 ;",0
1051,<S2SV_ModStart> 0 ) ; hrtimer_try_to_cancel <S2SV_ModEnd> ( & stime,1
1052,"<S2SV_ModStart> ONIG_INFINITE_DISTANCE ) { if ( p - str < reg -> dmax ) { * low = ( UChar * ) str ; if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc, str, * low ) ; } else { <S2SV_ModStart> low ) ; }",0
1053,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct l2cap_conf_conf_pi ( sk ) ; struct l2cap_conf_to_cpu ( sk ) ; int l2cap_le16_to_le16_cpu ( sk ) ; l2cap_options_to_le16 ( sk ) ; <S2SV_ModStart> -> mode ; rc = l2cap_options_to_le16_le16_cpu ( sk, pi -> dcid ) ; rc. rc = l2cap_to_le16 ( l2cap_le16_le16 ( l2cap_to_le16, pi -> mode ) ; rfc. mode = l2cap_conf_options_to_le16 ( l2cap_le16, pi -> dcid ) ; rfc. mode = l2cap_to_le16 ( struct l2cap_conf_conf_to_cpu ( sk, pi -> dcid ), l2cap_mode ) ; rc -> dcid = L2CAP_MODE_TRERM ; rc -> dcid = L2CAP_MODE_MIN_MTU ; } <S2SV_ModStart> rc_",0
1054,"<S2SV_ModStart> int r = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_WAIT ) )",0
1055,<S2SV_ModStart> -> chunksize = UINT64_MAX <S2SV_ModEnd> ; for (,1
1056,<S2SV_ModStart> u1_first_byte ) ; if ( ( ps_dec -> u2_total_mbs_coded!= 0 ) ) { return ERROR_ERROR ; },0
1057,<S2SV_ModStart> { while ( ( tok ) &&,0
1058,<S2SV_ModStart> } err = crypto_rng_alg ( tfm ) <S2SV_ModEnd> -> seed (,1
1059,<S2SV_ModStart> = uid ; <S2SV_ModEnd> new -> count <S2SV_ModStart> new -> count = 0 <S2SV_ModEnd> ; spin_lock_irq (,0
1060,"<S2SV_ModStart> ) ; } if ( err == 0 ) goto out_put ; if ( datagrams <S2SV_ModEnd> == 0 ) <S2SV_ModStart> == 0 ) { datagrams = err ; goto out_put ; } <S2SV_ModEnd> if ( err <S2SV_ModStart> err ; } out_put : fput_light ( sock -> file, fput_needed ) ; <S2SV_ModStart> datagrams ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",1
1061,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1062,<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline <S2SV_ModStart> = 0 ; len - i >= 8 * 32 <S2SV_ModEnd> ; i += <S2SV_ModStart> ] ; } for ( ; i < len ; i += 32 ) { ( void ) tab [ i ] ; },1
1063,<S2SV_ModStart> ; if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) ) <S2SV_ModEnd> { if ( <S2SV_ModStart> ) ; } if ( ext4_should_dioread_nolock ( inode ) ) set_buffer_uninit ( bh_result ) ;,1
1064,"<S2SV_ModStart> * deleg_stateid, fmode_t fmode <S2SV_ModEnd> ) { int <S2SV_ModStart> -> type, fmode_t fmode <S2SV_ModEnd> ) { ret <S2SV_ModStart>, fmode, fmode <S2SV_ModEnd> ) ; }",0
1065,"<S2SV_ModStart> ResourceLimitError, ""MemoryAllocationFailed"" ) ; ( void ) ResetMagickMemory ( global_colormap, 0, 3 * MagickMax ( global_colors, 256 ) * sizeof ( * global_colormap )",1
1066,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
1067,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1068,"<S2SV_ModStart> int64_t dist, int64_t * sse, int * sse, <S2SV_ModStart> int64_t dist_thr, int64_t dist_thr, int64_t rate_thr, int64_t dist_thr, int64_t dist_thr, int * sse_thr, int64_t dist_thr, int * sse, int64_t dist_thr, unsigned int64_t dist_quant <S2SV_ModStart> = 0 ; int <S2SV_ModEnd> dist_t dist_thr = p -> <S2SV_ModStart> = 0 ; const int64_t dist_thr = p -> dequant = 0 ; int64_t dist_thr = p -> dqcoeff [ 0 ] -> dqcoeff [ 0 ] -> mbmi -> mbmi. tx_size ; if ( cpi -> flags & CONFIG_VP9_HIGHBITDEPTH ) { dist_stats = ( xd -> dequant > ( xd -> dequant [ 1 ] -> dequant [ 1 ] -> dequant && cpi -> dequant [ 1 ] -> dequant [ 1 ]. tx_size = ( xd -> dequant [ 1 ] -> dequant [ 1 ] -> dequant [ 1 ] -> dequant [ 1 ] <S2SV_ModEnd> ] -> <S2SV_ModStart> = rate",0
1069,<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1070,"<S2SV_ModStart> ; if ( snpal == 6 ) ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> SNPA <S2SV_blank> (length: <S2SV_blank> %u): <S2SV_blank> %u): <S2SV_blank> %s"", snpa ) ) ) ; else ND_PRINT ( ( ndo, snpa ) ) ) ;",0
1071,<S2SV_ModStart> } if ( * ret == NULL ) { if ( * ptr == '\\0' ) return ( NULL ) ; } <S2SV_ModEnd> if ( * <S2SV_ModStart> == NULL ) { if ( * ptr == '\\0' ) return ( NULL ) ; } <S2SV_ModEnd> if (,0
1072,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> * r, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> ) { return read_segment_id <S2SV_ModEnd> ( r,",0
1073,<S2SV_ModStart> ; uint32_t backup_handle = 0 <S2SV_ModStart> ret == 0 ) { if ( <S2SV_ModEnd> res -> backup <S2SV_ModStart> goto out_unlock ; } else { backup_handle = req -> buffer_handle ; },1
1074,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool get_desc ( <S2SV_ModStart> struct desc_struct * out, <S2SV_ModEnd> unsigned short sel <S2SV_ModStart> SEGMENT_LDT ) { bool success = false <S2SV_ModEnd> ; struct ldt_struct <S2SV_ModStart> -> nr_entries ) { * out = <S2SV_ModEnd> ldt -> entries <S2SV_ModStart> sel ] ; success = true ; } <S2SV_ModStart> ) ; return success <S2SV_ModEnd> ; } # <S2SV_ModStart> size ) return false ; * out = * <S2SV_ModEnd> ( struct desc_struct <S2SV_ModStart> desc_base ) ; return true ;",1
1075,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",0
1076,"<S2SV_ModStart> bp ; struct ipv6_pinfo * np = inet6_sk ( sk ) ; struct <S2SV_ModStart> sctp_addr dst_saddr ; struct in6_addr * final_p, final ; <S2SV_ModStart> ) ; } final_p = fl6_update_dst ( fl6, np -> opt, & final ) ; <S2SV_ModStart>, fl6, final_p <S2SV_ModEnd>, false ) <S2SV_ModStart>. sin6_port ; final_p = fl6_update_dst ( fl6, np -> opt, & final ) ; <S2SV_ModStart>, fl6, final_p <S2SV_ModEnd>, false )",1
1077,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1078,<S2SV_ModStart> return ( len <S2SV_ModEnd> ) ; if,0
1079,<S2SV_ModStart> -> priv_timeout = 0 <S2SV_ModEnd> ; if (,0
1080,<S2SV_ModStart> >= 0 && <S2SV_ModEnd> ND_TTEST ( * <S2SV_ModStart> < ie && <S2SV_ModEnd> ND_TTEST ( *,1
1081,"<S2SV_ModStart> ( interface, KSZ8851_> <S2SV_null> <S2SV_null> <S2SV_ModEnd> uint16 ( <S2SV_ModStart> ( interface, KSZ8851_null> <S2SV_ModEnd> ) ; <S2SV_ModStart> ( interface, KSZ8851_t ) ; if ( length > 0 ) { <S2SV_ModStart> ( interface, Ksz8851_t ) ; ksz8851_t ) ; n = KSZ8851_S2SV_null>",0
1082,"<S2SV_ModStart> NULL ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
1083,"<S2SV_ModStart> goto all_leaves_cluster_together ; pr_devel ( ""present <S2SV_blank> leaves <S2SV_blank> cluster <S2SV_blank> but <S2SV_blank> not <S2SV_blank> new <S2SV_blank> leaf\\n"" ) <S2SV_ModEnd> ; } split_node <S2SV_ModStart> return true ; <S2SV_ModEnd> all_leaves_cluster_together : pr_devel",1
1084,<S2SV_ModStart>. udpport = 0 <S2SV_ModEnd> ; settings.,1
1085,<S2SV_ModStart> endif # endif <S2SV_ModEnd> if ( (,0
1086,"<S2SV_ModStart>, x ; memcpy ( x, x2, n2, n2, n2, x2 <S2SV_ModEnd>, x2, <S2SV_ModStart> 32x2 ; memcpy ( n2, x2, x2, n2, x2, n2, x2 <S2SV_ModEnd> ) ; # <S2SV_ModStart> = x2 ; memcpy ( n2, x2, x2, x2, x2, x2, x2, x2, x2 ) ; memcpy ( x2, x_y, x2, x2, x2, x2, x2, x2, x2, x2, x2 <S2SV_ModEnd> ) ; }",0
1087,<S2SV_ModStart> clips_ptr ) { if ( num_clips < 0 || num_clips > DRM_MODE_FB_DIRTY_MAX_CLIPS ) { ret = - EINVAL ; goto out_err1 ; },1
1088,<S2SV_ModStart> ; if ( pmd_trans_trans_bad <S2SV_ModEnd> ( pmd ),0
1089,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1090,"<S2SV_ModStart> 0 ) ; int minsz = R_MIN ( len, size ) ; minsz = R_MAX ( minsz, 0 ) ; <S2SV_ModStart> ; j < minsz <S2SV_ModEnd> ; j ++ <S2SV_ModStart> ++ ) { ut8 ch = ( ( j + idx - 1 ) > minsz )? 0xff : <S2SV_ModEnd> buf [ j <S2SV_ModStart> + idx ] ; r_cons_printf ( ""%02x"", ch <S2SV_ModStart>!= UT64_MAX ) { <S2SV_ModStart> val ) ; } <S2SV_ModStart>!= UT64_MAX ) { <S2SV_ModStart> ptr ) ; } <S2SV_ModStart> - 1 ) { <S2SV_ModStart> refptr ) ; }",1
1091,"<S2SV_ModStart> char ( argv [ 3 ] <S2SV_ModEnd> ] ) ; <S2SV_ModStart> ; return 1 <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ) ; printf ( ""Unexpected <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d\\n"", height, height <S2SV_ModStart> ) ) ; return 1 <S2SV_ModEnd> ; printf ( <S2SV_ModStart> ( argv [ 0 ] <S2SV_ModEnd> ] ) ; <S2SV_ModStart> ( ""%2SV_null> <S2SV_null>",0
1092,"<S2SV_ModStart> + DSPQ_DATA_BUFF ; u16 tail, size ; size <S2SV_ModStart> + JQS_wTail ) ; size = <S2SV_ModEnd> + JQS_w ( chip -> DSPQ + JQS_wTail, size <S2SV_ModStart> + JQS_wSize ) ; if ( head > size ) { snd_msnd_dsp_msg ( chip, chip, size ) ; } <S2SV_ModStart> ) ) ; } out :",0
1093,<S2SV_ModStart> * opcode_desc ; if ( len < 2 ) { return NULL ; },1
1094,<S2SV_ModStart> -> ns_alarm_object ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1095,"<S2SV_ModStart> xmlparser parser ; memset ( data, 0, sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser.",1
1096,<S2SV_ModStart> [ sizeof ( the_url <S2SV_ModEnd> ) - 1,0
1097,<S2SV_ModStart> num_fields ) { if ( num_fields < 0 ) return 0 ;,0
1098,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>, key,",0
1099,<S2SV_ModStart> vpx_codec_alg_priv_t * priv ; vpx_codec_alg_priv_t * priv = sizeof ( void ) priv <S2SV_ModEnd> ; priv -> <S2SV_ModStart> ipx_codec_alg_priv_t * priv = sizeof ( priv -> cfg )? 1 : 0 ; <S2SV_ModStart> return res ; priv -> cfg = 0 ; <S2SV_ModStart> ipx_codec_alg_priv_t * priv = sizeof ( priv -> cfg ) ; priv -> enc_cfg = sizeof ( priv -> cfg ) ; priv -> cfg = 0 ; priv -> cfg = sizeof ( * )? 1 : 0 ; priv -> config. cfg = sizeof ( priv -> cfg )? 1 : 0 ; <S2SV_ModEnd> -> cfg = <S2SV_ModStart> cfg ; } if ( priv <S2SV_ModEnd> -> cfg,0
1100,"<S2SV_ModStart> error ) { if ( bp && ( <S2SV_ModEnd> xfs_da_shrink_inode ( args <S2SV_ModStart>, bp )!= 0 ) <S2SV_ModEnd> ) goto out",1
1101,"<S2SV_ModStart> ; if ( strcmp ( c, c, c ) return 0 ; if (",0
1102,<S2SV_ModStart> timer_active_lock ) ; spin_unlock ( & timeri -> timeri_lock ) ; <S2SV_ModStart> ) ; } spin_unlock ( & timeri -> timer -> lock ) ; spin_unlock ( & timeri -> lock ) ;,0
1103,"<S2SV_ModStart> return err ; if (! <S2SV_ModEnd> attrs [ TIPC_NLA_NLA_SOCK <S2SV_ModStart> attrs [ TIPC_NLA_SOCK <S2SV_ModEnd> ] ) return <S2SV_ModStart> - EINVAL ; err = nla_return err ; if ( done ) return - EINVAL ; if (! tsk ) return - EINVAL ; if (! tsk ) return - EINVAL ; if ( done ) return - EINVAL ; if ( done <S2SV_ModEnd> [ TIPC_NLA_NLA_REF ] <S2SV_ModStart> [ TIPC_NLA_NLA_REF ] <S2SV_ModEnd> ) return - <S2SV_ModStart> - EINVAL ; tsk_NLA_NLA_SOCK_SOCK_SOCK_SOCK_SOCK_REF ] = nla_get ( sock, tsk ) ) ; if (! tsk ) return - EINVAL ; } if ( done ) return 0 ;",0
1104,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx -> <S2SV_ModStart>,0
1105,<S2SV_ModStart> = v ; if (! IS_ERR ( vma ) ),1
1106,<S2SV_ModStart> ) buffer ; if ( total_len < sizeof ( * cap ) || total_len < <S2SV_ModEnd> cap -> bLength <S2SV_ModStart> cap -> bLength ) { dev -> bLength = dev -> desc -> desc -> desc -> bLength <S2SV_ModEnd> ; total_len -=,0
1107,<S2SV_ModStart> task = current <S2SV_ModEnd> ; if (,1
1108,<S2SV_ModStart> ( iinfo -> i_lenEAttr > bs || iinfo -> i_lenAlloc > bs ) goto out ; if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenAlloc > bs ) goto out ; if ( iinfo ->,0
1109,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, data ) <S2SV_ModStart> ( interface, ENC28J60_MIREGADR_MASK <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( interface, ENC28J60_MIWR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MIWR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MIWR <S2SV_ModEnd> ) ; }",0
1110,"<S2SV_ModStart> int * fmt, <S2SV_ModEnd> const char *",0
1111,<S2SV_ModStart> sk_flags ) ; rcu_dereference ( inet_opt ) ;,0
1112,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
1113,<S2SV_ModStart>! saw_digit ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart>!= '\\r' ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart>!= '\\n' ) { bp ++ ; <S2SV_ModStart> goto invalid ; } <S2SV_ModStart> ; trunc : * endp = bp ; <S2SV_ModStart> ; invalid : * endp = bp ;,1
1114,"<S2SV_ModStart> ; args -> rmtvaluelen = be32_to_cpu ( name_rmt -> valuelen ) ; args -> rmtblkno <S2SV_ModEnd> = be32_to_cpu ( <S2SV_ModStart> ( name_rmt -> <S2SV_ModEnd> valueblk ) ; <S2SV_ModStart>, args -> rmtvaluelen <S2SV_ModEnd> ) ; return",1
1115,,0
1116,<S2SV_ModStart> : r_object_length = <S2SV_ModEnd> ; if (,0
1117,"<S2SV_ModStart>, j ) int vstart <S2SV_ModEnd> ; if (",0
1118,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
1119,<S2SV_ModStart> u8 label_len ; <S2SV_ModEnd> GET8 ( label_len <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ;,1
1120,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpAcc ( TIFF <S2SV_ModStart> cc ) ; if <S2SV_ModEnd> ( cc % <S2SV_ModStart> * stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""fpAcc"", ""%s"", ""cc%(bps*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> tmp ) return 0 <S2SV_ModStart> tmp ) ; return 1 ;",1
1121,"<S2SV_ModStart> -> vm_ops ) <S2SV_ModEnd> return do_fault ( <S2SV_ModStart>, pte, pmd, pmd, <S2SV_ModEnd> flags ) ;",0
1122,"<S2SV_ModStart> s ) { size_t len = strlen ( s ) + 1 ; <S2SV_ModStart> = pool_alloc ( len ) ; memcpy <S2SV_ModEnd> ( r, <S2SV_ModStart> r, s, len",1
1123,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1124,"<S2SV_ModStart>! new_idmap_permitted ( file,",1
1125,,0
1126,<S2SV_ModStart> ctx ) ; <S2SV_ModEnd> return NULL ;,0
1127,<S2SV_ModStart> filename ) ; if (! tmp_len &&,0
1128,"<S2SV_ModStart> 0 ) { if ( len < ( u_int ) advance ) goto trunc ; <S2SV_ModStart> ip6 ) ; if ( advance < 0 ) return ; <S2SV_ModStart> case IPPROTO_ROUTING : ND_TCHECK ( * cp ) ; <S2SV_ModStart> ip6 ) ; if ( advance < 0 ) return ; <S2SV_ModStart>, cp ) ; if ( advance < 0 ) return <S2SV_ModStart> padlen ) ; if ( advance < 0 ) return ;",1
1129,<S2SV_ModStart> * buf ) ; if ( len < 8 ) { return 0 ; },0
1130,<S2SV_ModStart> ( iinfo -> i_lenEAttr > bs || iinfo -> i_lenAlloc > bs ) goto out ; if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenAlloc > bs ) goto out ; if ( iinfo ->,0
1131,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
1132,<S2SV_ModStart> sse ; vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
1133,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_line_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) ; <S2SV_ModStart> t1_buf_array, t1_line_array ) ; alloc_array ( t1_line, strlen ( t1_buf_array ) + 1, T1_BUF_SIZE",1
1134,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * fb_list args ) ; ( ctx -> frame_parallel_decode ) ;",0
1135,"<S2SV_ModStart> ctxt ) ; if (! ( efer & ss ) ) return emulate_ud ( ctxt ) ; <S2SV_ModStart>, & ss ) ) ; if ( efer & EFER_SCE ) return emulate_ud ( ctxt",0
1136,<S2SV_ModStart> ] == 0,0
1137,"<S2SV_ModStart> ( n, 1,",0
1138,"<S2SV_ModStart> int vp8_denoiser_denoiser_filter_y, <S2SV_ModStart> unsigned char * mc_avg_y, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * mc_avg_avg_y, <S2SV_ModStart> unsigned char * running_avg_y, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> char avg_y, unsigned char * mc_avg, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> int b_avg = running_y + shift_avg_y + counts <S2SV_ModEnd> sizeof ( <S2SV_ModStart> 8 ) ; unsigned char * shift_diff = mc_avg + shift_y ; unsigned char * shift_diff = 0 ; int f = 0 ; int i ; int sum_diff = min_y < 4 ; <S2SV_ModStart> } else { int delta_diff_diff = min_y ; <S2SV_ModStart> unsigned int delta_diff_y ; unsigned int diff_diff = min_y ; for ( i < 3? 0 ; i ] = 0 ; for ( i < 2 ; i ++ ) { int sum_diff = 0 ; for ( i < 3 ; i ++ i ++ i ++ i ; i ++ i ++ i ++ i ++ ) { int sum_diff = sum_y ; for ( i < 2 ; i ++ i ++ i ++ i ++ i ++",0
1139,<S2SV_ModStart> == 0 ) {,0
1140,<S2SV_ModStart> ; int ret = 0,0
1141,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
1142,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct se_device * old_dev <S2SV_ModEnd> ; struct se_device * <S2SV_ModStart> src ) { struct se_dev_dev_device * dest_dev = dst_dev -> dst_dev ; if ( xop -> dest_dev. <S2SV_ModEnd> ) { pr_debug <S2SV_ModStart> rc ) ; } else { pr_debug ( ""Can\'t <S2SV_blank> device <S2SV_blank> to <S2SV_blank> device\\n"" ) ; }",0
1143,"<S2SV_ModStart> ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_MULTICAST_HOPS."" ) ; err = - errno ; goto close_sock ; } val = 1 ; ret = setsockopt ( sock, IPPROTO_IPV6, IPV6_RECVHOPLIMIT, & val, sizeof ( val ) ) ; if ( ret == - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_RECVHOPLIMIT,.""",1
1144,"<S2SV_ModStart> ; if ( ext2_mb_cache <S2SV_ModEnd> ( sb_cache ) <S2SV_ModStart> ) ; } ext2_mb_cache <S2SV_ModEnd> ( ext2_mb_cache,",0
1145,"<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp. <S2SV_ModStart>. type, ""compression"", sizeof ( rcomp. type ) <S2SV_ModEnd> ) ; if",1
1146,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ( args ) <S2SV_ModEnd> ; if (",0
1147,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( rc ) return rc ; acl = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, size <S2SV_ModEnd> ) ; }",0
1148,<S2SV_ModStart> = MagickFalse ; break <S2SV_ModEnd> ; } status,0
1149,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
1150,<S2SV_ModStart> 3 * len + 8,1
1151,<S2SV_ModStart> SUCCESS ) { if ( Z_TYPE_PP ( var )!= IS_LONG ) { zval lval ; lval = * * var ; zval_copy_ctor ( & lval <S2SV_ModEnd> ) ; convert_to_long <S2SV_ModStart> ; convert_to_long ( & lval <S2SV_ModEnd> ) ; points <S2SV_ModStart>. x = Z_LVAL ( lval ) ; } else { points [ i ]. x = <S2SV_ModStart> var ) ; } <S2SV_ModStart> SUCCESS ) { if ( Z_TYPE_PP ( var )!= IS_LONG ) { zval lval lval lval lval ; lval = * * var ; zval_copy_ctor ( & lval <S2SV_ModEnd> ) ; convert_to_long <S2SV_ModStart> ; convert_long ( & lval <S2SV_ModEnd> ) ; points <S2SV_ModStart>. y = Z_LVAL ( lval ) ; } } } },0
1152,<S2SV_ModStart> ; sig_none = <S2SV_ModEnd> timr -> it_sigev_notify <S2SV_ModStart> timr -> it_sigev_notify <S2SV_ModEnd> == SIGEV_NONE ;,1
1153,<S2SV_ModStart> = ( ix <S2SV_ModEnd> ) ; if,0
1154,"<S2SV_ModStart> ( ) ; alloc_array ( t1_buf, strlen ( t1_line_array ) + strlen ( t1_buf_array ) + 1, T1_BUF_SIZE ) ; <S2SV_ModStart> t1_buf_array, t1_line_array ) ; alloc_array ( t1_line, strlen ( t1_buf_array ) + 1, T1_BUF_SIZE",1
1155,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; if ( ctx -> frame_parallel_decode ) { set_error_detail ( ctx, ""Not <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> frame <S2SV_blank> parallel <S2SV_blank> decode"" ) ; return VPxWorkerData * const worker ; FrameWorkerData * const FrameWorkerData * const frame_worker_data = ( ctx -> pbi -> pbi -> frame_worker_data <S2SV_ModEnd> -> pbi ->",0
1156,"<S2SV_ModStart>. path ; return Curl_urldecode <S2SV_ModEnd> ( data, <S2SV_ModStart>, 0, & <S2SV_ModEnd> pop3c -> mailbox <S2SV_ModStart> pop3c -> mailbox, NULL, TRUE ) <S2SV_ModEnd> ; } <S2SV_null>",1
1157,<S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ; <S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ;,1
1158,"<S2SV_ModStart> gb ) ; if ( s -> ref && sh -> first_slice_in_pic_flag ) { av_log ( s -> avctx, AV_LOG_ERROR, ""Two <S2SV_blank> slices <S2SV_blank> reporting <S2SV_blank> being <S2SV_blank> the <S2SV_blank> first <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> frame.\\n"" ) ; return 1 ; }",1
1159,<S2SV_ModStart> ) { return ERROR_INV_SLICE_HDR_T <S2SV_ModEnd> ; } if,0
1160,<S2SV_ModStart> = IMPEG2D_PARAM ; if ( 0 >= ps_dec -> u4_mb_params_offset ) { break ; } <S2SV_ModStart> = 0 ; if ( 0 >= ps_dec -> u4_mb_offset ) { break ; },0
1161,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> NULL <S2SV_ModEnd> VP9_BUFFER_CONFIG * <S2SV_ModStart> ; const cm -> frame_bufs [ 0 ] = cm -> frame_bufs [ VP9_COMMON * const cm -> frame_bufs [ VP9_COMMON * cm -> frame_bufs [ cm -> frame_bufs ]. buf_bufs [ cm -> frame_bufs [ 0 ]. buf <S2SV_ModEnd> ; if (,0
1162,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
1163,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> MACROBLOCK_SIZE tx_size ) { const int max_left = get_uv_tx_size <S2SV_ModEnd> ( mbmi -> <S2SV_ModStart> TX_SIZE tx_size ) >> 2 ; const int <S2SV_ModEnd> ; const int <S2SV_ModStart> ++ ) { if ( max_tx_size == 0 ) { <S2SV_ModEnd> return 0 ; <S2SV_ModStart> ++ ) ; } else { <S2SV_ModEnd> return r ; <S2SV_ModStart> ++ ) { <S2SV_ModEnd> return 0 ; <S2SV_ModStart> ++ ) ; break ; } <S2SV_ModEnd> } for ( i = 0 ; i <S2SV_null>,0
1164,<S2SV_ModStart> -> mmap_legacy_base = TASK_UNMAPPED_BASE + random_factor <S2SV_ModEnd> ; if (,1
1165,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 8 ) ; <S2SV_ModEnd> src += src_stride",1
1166,"<S2SV_ModStart> return getnum ( <S2SV_ModEnd> fmt, 1 <S2SV_ModStart> = getnum ( <S2SV_ModEnd> fmt, sizeof",1
1167,<S2SV_ModStart> nrow ) { uint32 nrow = ( img -> row_offset + sizeof ( tif ) / sizeof ( tif ) ) ;,0
1168,<S2SV_ModStart> ; return 0 <S2SV_ModEnd> ; } case,0
1169,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1170,<S2SV_ModStart> ( upid == INT_MIN ) return - ESRCH ; if ( upid ==,1
1171,"<S2SV_ModStart> siocb -> scm, false",1
1172,<S2SV_ModStart> ( num & 1 <S2SV_ModEnd> ) ) return,0
1173,"<S2SV_ModStart>, plane )? 1 : 0",0
1174,<S2SV_ModStart> ; uint16_t prev_attr_len <S2SV_ModEnd> ; uint16_t enc_t <S2SV_ModStart> avp_attr_len ) ; hdr_len = sizeof ( struct l2tp_avp_avp ) <S2SV_ModEnd> ( ( struct <S2SV_ModStart> -> length > ( uint16_t ),0
1175,"<S2SV_ModStart> -> private ; struct dm_dev * dev = lc -> dev ; int r = 0 ; if <S2SV_ModEnd> ( lc -> <S2SV_ModStart> ( lc -> start || ti -> len!= i_size_read ( dev -> bdev -> bd_inode ) >> SECTOR_SHIFT ) r = scsi_verify_blk_ioctl ( NULL, cmd ) ; return r? : __blkdev_driver_ioctl ( <S2SV_ModStart> -> bdev, <S2SV_ModEnd> dev -> mode",1
1176,<S2SV_ModStart> ( + 1 <S2SV_ModEnd> ) ; if,0
1177,<S2SV_ModStart> ( name ) <S2SV_ModEnd> return NULL ;,0
1178,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",0
1179,<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ;,1
1180,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1181,"<S2SV_ModStart> sock, sk",0
1182,"<S2SV_ModStart> ) ) { memset ( & cpkt, 0, sizeof ( cpkt ) ) ;",0
1183,<S2SV_ModStart> NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC | NTLMSSP_NEGOTIATE_SEAL <S2SV_ModStart> -> sign ) <S2SV_ModEnd> flags |= NTLMSSP_NEGOTIATE_SIGN <S2SV_ModStart> |= NTLMSSP_NEGOTIATE_KEY_XCH ; <S2SV_ModEnd> tmp = *,1
1184,<S2SV_ModStart> ) ) { mutt_socket_empty ( adata -> conn <S2SV_ModEnd> ) ; goto <S2SV_ModStart> NULL ) ; } mutt_empty ( adata -> conn <S2SV_ModEnd> ) ; goto <S2SV_ModStart> FALSE ; } # endif,0
1185,<S2SV_ModStart> crypto_report_k pp ; strncpy <S2SV_ModEnd> ( skpp.,0
1186,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> % stride )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horDiff8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> ; } } return 1 ;",1
1187,<S2SV_ModStart> -> head <= 0 || ( unsigned char ) ( ( g -> sect << 2 ) >> FD_SIZECODE ( g ) ) ==,1
1188,"<S2SV_ModStart> = gdp ; memset ( line, 0, sizeof ( line ) ) ;",0
1189,"<S2SV_ModStart>, & rlen, 0",1
1190,"<S2SV_ModStart> = 1 ; char * user_data = get_user ( user -> password ) ; if (! <S2SV_ModStart> ( user ) ) { TEMP_FAILURE_RETRY ( & user -> password, GFP_KERNEL ) ; return ; } <S2SV_ModEnd> } <S2SV_null>",0
1191,"<S2SV_ModStart> mntent, path, rootfs -> mount",1
1192,"<S2SV_ModStart>, """" ) == NULL <S2SV_ModEnd> ) { ast",0
1193,<S2SV_ModStart> - offset ; unsigned short prev_bi_vcnt = bio -> bi_vcnt ; <S2SV_ModStart> ) break ; if ( bio -> bi_vcnt == prev_bi_vcnt ) put_page ( pages [ j ] ) ;,1
1194,<S2SV_ModStart> -> depth = 0 <S2SV_ModEnd> ; if (,0
1195,"<S2SV_ModStart> state. path <S2SV_ModEnd> ; char localhost <S2SV_ModStart> ""localhost"" ; } result = Curl_urldecode ( conn -> data, path, 0, & <S2SV_ModStart> smtpc -> domain, NULL, TRUE ) ; if ( result ) return result <S2SV_ModEnd> ; state (",1
1196,"<S2SV_ModStart> len ) { memset <S2SV_ModEnd> ( str, <S2SV_ModStart> len, len, sizeof ( str ) ) ;",0
1197,<S2SV_ModStart> ; for ( <S2SV_ModEnd> } if (,0
1198,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
1199,<S2SV_ModStart> ) ; return ret <S2SV_ModEnd> ; } if,0
1200,<S2SV_ModStart> 0 ) ; if (! r ) return - EINVAL ;,1
1201,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1202,,1
1203,"<S2SV_ModStart> { r_cons_printf ( ""\\""k <S2SV_blank> bin/pe/%s/%d=%s\\""\\n"" <S2SV_ModEnd>, module, <S2SV_ModStart> { r_cons_printf ( ""\\""k <S2SV_blank> bin/pe/%s\\""\\n"" <S2SV_ModEnd>, module,",0
1204,"<S2SV_ModStart>, rqstp, res <S2SV_ModEnd> ) ; out",1
1205,"<S2SV_ModStart> mntent, mount * mntt <S2SV_ModEnd> ) { return",0
1206,<S2SV_ModStart> ) ; } if (!,0
1207,"<S2SV_ModStart> ) ) { * status = ""INVALID_S4U2PROXY_OPTIONS"" ; <S2SV_ModStart> ) ) { * status = ""EVIDENCE_TICKET_MISMATCH"" ;",1
1208,<S2SV_ModStart> thread -> tp_value [ 0 ] <S2SV_ModStart> childregs -> ARM_r3 ; thread -> tp_value [ 1 ] = get_tpuser ( ),1
1209,"<S2SV_ModStart> bufsize ) { char * new_buf ; size_t new_bufsize <S2SV_ModEnd> ; JAS_DBGLOG ( <S2SV_ModStart> ; if ( bufsize < 0 ) { jas_deprecated ( ""negative <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> for <S2SV_blank> jas_stream_memopen"" ) ; } if ( buf && bufsize > 0 ) { jas_eprintf ( ""Invalid <S2SV_blank> negative <S2SV_blank> buf.\\n"" ) ; jas_stream_memopen2 ( new_buf, new_bufsize <S2SV_ModEnd> ) ) { <S2SV_ModStart> 0 ) { new_buf = 0 <S2SV_ModEnd> ; } else <S2SV_ModStart> = bufsize ; new_buf = bufsize <S2SV_ModEnd> ; } if",0
1210,"<S2SV_ModStart> sshbuf * b = NULL <S2SV_ModStart> char * pkalg = NULL <S2SV_ModStart> u_char * pkblob = NULL <S2SV_ModStart>, * sig = NULL <S2SV_ModStart> ; if ( <S2SV_ModEnd> ( r = <S2SV_ModStart> r ) ) ; } if (! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; goto done <S2SV_ModStart> b ) ; free ( authctxt -> valid ) ;",0
1211,<S2SV_ModStart> ; uint32_t bcount ; CLEAR ( WaveHeader ),1
1212,<S2SV_ModStart> ( iter ) ; if (! iter_get_block ( inode ) ) return 0 ;,0
1213,"<S2SV_ModStart> ( ctx ), NULL <S2SV_ModEnd> ) ; if",0
1214,<S2SV_ModStart> tn_buf ) ; return - EACCES ;,1
1215,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteEntry ) ) ;",0
1216,<S2SV_ModStart> failed_mount3 ; } # ifdef CONFIG_EXT2_FS_XATTR sbi -> s_mb_cache = ext2_xattr_create_cache ( ) ; if <S2SV_ModEnd> ( sbi ->,0
1217,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1218,<S2SV_ModStart> len < tcp_hdrlen || tcp_hdrlen < sizeof ( struct tcphdr ) <S2SV_ModStart> ; if ( tcp_hdrlen >= 15 * 4 ) return 0 ; if (,1
1219,"<S2SV_ModStart> int i ; size_t size ; matrix = 0 ; <S2SV_ModStart> 0 ) { goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } matrix <S2SV_ModStart> -> datasize_ = 0 ; if (! jas_safe_size_mul ( numrows, numcols, & size ) ) { goto error ; } matrix -> datasize_ = size <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ) { goto error <S2SV_ModEnd> ; } } <S2SV_ModStart> return matrix ; error : if ( matrix ) { jas_matrix_destroy ( matrix ) ; } return 0 ;",1
1220,"<S2SV_ModStart> ipv6_select_ident ( fh, rt <S2SV_ModStart> ipv6_select_ident ( fh, rt",1
1221,"<S2SV_ModStart> ) { struct mb2_cache_entry * ce = mb2_cache_cache_entry * ce <S2SV_ModEnd> ; struct mb2_cache <S2SV_ModStart> int error ; <S2SV_ModEnd> mb_cache_entry * ce = mb2_cache <S2SV_ModStart> ( ext4_mb_cache, hash <S2SV_ModEnd>, bh -> <S2SV_ModStart> bh -> b_hash ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> error ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ( bh, ""inserting <S2SV_blank> [%x]"" <S2SV_ModEnd>, hash ) <S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1222,<S2SV_ModStart> * req ; <S2SV_ModEnd> req = scsi_req_alloc <S2SV_ModStart> hba_private ) ; <S2SV_ModEnd> return req ;,1
1223,"<S2SV_ModStart> int i ; unsigned int maxip, buf -> len ) ; int <S2SV_ModStart> sizeof ( buf ) ; <S2SV_ModEnd> max = ( <S2SV_ModStart> sizeof ( buf )",0
1224,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1225,<S2SV_ModStart> ( ret ||! cm_id -> device ||,1
1226,<S2SV_ModStart> xfrm_policy_walk * ) <S2SV_ModEnd> cb -> args <S2SV_ModStart> cb -> args <S2SV_ModEnd> ; struct xfrm_dump_info <S2SV_ModStart> struct xfrm_dump_info info <S2SV_ModEnd> ; info. <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> ( void ),1
1227,<S2SV_ModStart> = 0 ; size_t ret = 0 ; <S2SV_ModStart> ( ret ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
1228,"<S2SV_ModStart> dentry * upper <S2SV_ModEnd> ; int err <S2SV_ModStart> I_MUTEX_PARENT ) ; upper = ( upperdir_len ( dentry -> d_name. name, upperdir, dentry -> d_name. len ) ; err = PTR_ERR ( upper ) ; if ( IS_ERR ( upper ) ) goto out_unlock ; <S2SV_ModStart> if ( upper == ovl_dentry_upper ( upper ) ) { <S2SV_ModEnd> if ( is_dir <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> ovl_dentry_name_inc ( dentry <S2SV_ModStart> ) ; } dput ( upper ) ; <S2SV_ModStart> dentry ) ; out_unlock :",0
1229,"<S2SV_ModStart> ( LOG_OPTIONS, & section_ptr,",0
1230,<S2SV_ModStart> * ptrptr && <S2SV_ModEnd> nmemb && size <S2SV_ModStart> nmemb && size <S2SV_ModEnd> ) return AVERROR,1
1231,<S2SV_ModStart> ( a -> type == szMAPI_BINARY && a -> <S2SV_ModStart> else if ( a -> type == szMAPI_BINARY &&,1
1232,"<S2SV_ModStart> return - 1 ; if ( i -> width > i -> height ) { # if ( i -> log ) { # if! defined ( i -> log ) ) fprintf ( i -> log, i -> log ) ; break ; } if ( i -> log ) { # if ( i -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> WARNING <S2SV_blank> \'\\n"" ) ; return - 1 ; } if ( i -> height ) { # if ( i -> log ) { # if! defined ( i -> log, i -> parent -> log, i -> log ) ) ; break ; } if ( i -> parent -> log, ""*** * i -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> ERROR\\n"" ) ; # else { # if ( i -> log ) ; break ; } if ( i -> height > i -> height ) { # if ( i -> log ) { # endif i -> log, ""*** <S2SV_blank> WARNING <S2SV_ModEnd> ) ; }",0
1233,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : ms -> elf_notes_max = * ( const size_t * ) val ; return 0 ;,0
1234,"<S2SV_ModStart> { jas_eprintf ( ""got <S2SV_blank> box <S2SV_blank> type <S2SV_blank> %s\\n"" <S2SV_ModEnd>, box ->",1
1235,,1
1236,<S2SV_ModStart> char * p <S2SV_ModEnd> ; if (,0
1237,<S2SV_ModStart> ; if ( <S2SV_ModEnd> page_get_journal ( page,0
1238,<S2SV_ModStart> if ( i > sizeof ( track ) ) return GF_NOT_FILE_SIZE <S2SV_ModEnd> ; for (,0
1239,<S2SV_ModStart> UINT32 nsc_rle_encode ( const,1
1240,<S2SV_ModStart> = 0 ; const char * data ; size_t len = 0 ; <S2SV_ModStart> ; md5 = strlen ( password ) ; mb_data_len = <S2SV_ModEnd> ( & <S2SV_ModStart> password ) ; if (! data_len ) return - 1 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( md5 ) ; size_t <S2SV_ModEnd> ( & <S2SV_ModStart> ) - 1 <S2SV_ModEnd> ) ; md,0
1241,"<S2SV_ModStart> * dllhandle ; if ( COM_CompareExtension ( name, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", name ) ; return NULL ; }",1
1242,<S2SV_ModStart> NULL ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1243,<S2SV_ModStart> ( n ) \\\n{ <S2SV_ModEnd> sum = ( <S2SV_ModStart> ++ ; } \\\n} <S2SV_ModEnd> typedef struct PCDTable <S2SV_ModStart> buffer ) ; for ( j = 0 ; j < i ; j ++ ) pcd_table [ j ] = ( PCDTable * ) RelinquishMagickMemory ( pcd_table [ j ] ) ; <S2SV_ModStart> RelinquishMagickMemory ( buffer ) ; for ( j = 0 ; j <= i ; j ++ ) pcd_table [ j ] = ( PCDTable * ) RelinquishMagickMemory ( pcd_table [ j ],1
1244,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1245,<S2SV_ModStart> header ) ; <S2SV_ModEnd> 0 ) ;,0
1246,"<S2SV_ModStart> # ifdef HAVE_IPV6 <S2SV_ModEnd> if ( * <S2SV_ModStart> 1 ) { char * <S2SV_ModStart> - 2 ), * e = NULL <S2SV_ModStart> * portno = strtol <S2SV_ModEnd> ( p + <S2SV_ModStart> p + 2, & e, 10 ) ; if ( e && * e ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; return <S2SV_ModEnd> } } } <S2SV_ModStart> NULL ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1247,"<S2SV_ModStart> 0, JPC_GETBITS <S2SV_ModEnd> ) ; if",0
1248,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst, <S2SV_ModStart> src == 0 ) { memcpy <S2SV_ModEnd> ( src +",0
1249,"<S2SV_ModStart> AVERROR_INVALIDDATA ; } if ( c -> log2_cblk_width > 6 || c -> log2_cblk_height > 6 ) { avpriv_request_sample ( s -> avctx, ""cblk <S2SV_blank> size <S2SV_blank> > <S2SV_blank> 64"" ) ; return AVERROR_PATCHWELCOME ; }",1
1250,<S2SV_ModStart> == * ptr && ptr [ 1 ],1
1251,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_rd_row ( MACROBLOCKD <S2SV_ModEnd> MACROBLOCKD * <S2SV_ModStart> -> mb ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> mi_col ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> mi_col ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ; memset <S2SV_ModEnd> ( cpi ->,0
1252,"<S2SV_ModStart> * obj_tptr ; u_int <S2SV_ModEnd> tlen ; u_int <S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ; if",0
1253,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mvsvs_mvs_mvs_mvs_mvs_context ( const MB_MODE_INFO * mbmi, const MB_MODE_INFO * counts ) { const mv = mbmi_ref_count ( mbmi. as_mv, mbmi_int <S2SV_ModEnd> count ) )",0
1254,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ),",0
1255,<S2SV_ModStart> ; if ( <S2SV_ModEnd> skb -> len,0
1256,<S2SV_ModStart> sta -> lock ) ; spin_lock_init ( & sta -> ps_lock,1
1257,<S2SV_ModStart> tp_event ) && perf_paranoid_tracepoint_raw <S2SV_ModEnd> ( ) &&,1
1258,<S2SV_ModStart> if (! sctp_protocol_init <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( ) ; sctp_v4_unregister <S2SV_ModEnd> ( ),0
1259,"<S2SV_ModStart>, 0 ) ; if (! data_interface ||! control_interface ) return - ENODEV",1
1260,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1261,"<S2SV_ModStart> error, NULL <S2SV_ModEnd> ) ; if",0
1262,"<S2SV_ModStart> * head ; <S2SV_ModEnd> newsk -> sk_sndbuf <S2SV_ModStart> -> sk_rcvbuf ; sctp_copy_descendant <S2SV_ModEnd> ( newsk,",1
1263,<S2SV_ModStart> ] ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> [ i ] ) <S2SV_ModStart> ; if ( fd < 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ; return - 1 ; } if ( fd,0
1264,"<S2SV_ModStart> { struct desc_struct <S2SV_ModEnd> desc ; short <S2SV_ModStart> return sel ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! get_desc ( & desc, sel ) <S2SV_ModEnd> ) return - <S2SV_ModStart>! ( desc. <S2SV_ModEnd> type & BIT <S2SV_ModStart> ( ( desc. <S2SV_ModEnd> l << 1 <S2SV_ModStart> ) | desc. <S2SV_ModEnd> d ) {",1
1265,<S2SV_ModStart> ctx -> buf. img_size <S2SV_ModEnd> ) { vp9_free,0
1266,"<S2SV_ModStart> 1 ) { vpx_lpf_horizontal_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> } else { vpx_lpf_horizontal_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) ; vpx_lpf_horizontal_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_horizontal_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> } else { vpx_lpf_horizontal_16 <S2SV_ModEnd> ( s,",0
1267,<S2SV_ModStart> return ret ; fsnotify_put_group ( group ) ;,1
1268,<S2SV_ModStart> * ctx ; <S2SV_ModEnd> code = 0,0
1269,<S2SV_ModStart> break ; } <S2SV_ModEnd> dst_reg -> smin_value <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (,0
1270,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> bitmapDC = CreateCompatibleDC",1
1271,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ),0
1272,<S2SV_ModStart> ; if ( 0!= 0 <S2SV_ModEnd> ) return -,0
1273,,0
1274,"<S2SV_ModStart>, count ) ; assert ( count > 0 ) return - EINVAL ; if (",0
1275,<S2SV_ModStart> input -> cur ) ; } if ( ( ( ctxt -> inputNr > 40 ) && ( ( ctxt -> options & XML_PARSE_HUGE ) == 0 ) ) || ( ctxt -> inputNr > 1024 ) ) xmlFreeInputStream ( ctxt ) ;,0
1276,"<S2SV_ModStart> } if ( le32_to_cpu ( raw_super -> segment_count ) > F2FS_MAX_SEGMENT ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> segment <S2SV_blank> count <S2SV_blank> (%u)"", le32_to_cpu ( raw_super -> segment_count ) ) ; return 1 ; } if (",1
1277,"<S2SV_ModStart> char * prefix, <S2SV_ModEnd> len = '\\0' <S2SV_ModStart> && ( ( ( char )",0
1278,"<S2SV_ModStart> ( pdc, <S2SV_ModEnd> ) ; }",0
1279,<S2SV_ModStart> len ) { struct ipv6_txoptions * opt_to_free = NULL ; <S2SV_ModStart>! opt ) { opt = txopt_get ( np ) ; opt_to_free = opt ; } <S2SV_ModEnd> if ( flowlabel <S2SV_ModStart> flowlabel ) ; txopt_put ( opt_to_free ) ;,1
1280,<S2SV_ModStart> if ( skb ) { struct ip_skb * 4 * 4 ; <S2SV_ModStart> return 0 ; } <S2SV_ModEnd> if ( skb,0
1281,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> } break ;",1
1282,<S2SV_ModStart> ) ; } rcu_dereference ( skb ),0
1283,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1284,<S2SV_ModStart> goto errout ( 1 <S2SV_ModEnd> ) ; if,0
1285,"<S2SV_ModStart> { if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
1286,<S2SV_ModStart> ) break ; <S2SV_ModEnd> tp -> copied_seq <S2SV_ModStart> = seq ; } tp -> copied_seq = seq ;,1
1287,<S2SV_ModStart> ; if ( key_data == NULL ) goto cleanup ; if (,0
1288,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> value ) {",0
1289,<S2SV_ModStart> ] ) ; sqlite3_int64 <S2SV_ModEnd> ( sqlite3_int64 ),0
1290,<S2SV_ModStart> inode ) { <S2SV_ModEnd> return 0 ;,0
1291,"<S2SV_ModStart> expr_ty body, string type_comment, <S2SV_ModStart> ; p -> v. async_comment = type_comment ; p ->",0
1292,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> mi_get_file_key ( param, name <S2SV_ModStart> name, 0 <S2SV_ModEnd> ) ; if",0
1293,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ),1
1294,"<S2SV_ModStart> ) { case AC_VECTOR : kvm_queue_exception_e ( vcpu, AC_VECTOR, error_code ) ; return 1 ; case",1
1295,<S2SV_ModStart> break ; case NGHTTP2_ERR_READ : return ;,0
1296,<S2SV_ModStart> ; uint16 error =,0
1297,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> if (!,0
1298,<S2SV_ModStart> < 0 ) { ret = chg ; goto out_err ; } <S2SV_ModEnd> if ( hugepage_subpool_get_pages <S2SV_ModStart> chg ) ) { ret = <S2SV_ModEnd> - ENOSPC ; <S2SV_ModStart> - ENOSPC ; goto out_err ; } <S2SV_ModStart> chg ) ; goto out_err <S2SV_ModEnd> ; } if <S2SV_ModStart> return 0 ; out_err : resv_map_put ( vma ) ; return ret ;,1
1299,"<S2SV_ModStart> & fl6, rcu_read <S2SV_ModEnd> ) ; int <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart>, & fl6, <S2SV_ModEnd> ) ; rcu_read_unlock",0
1300,"<S2SV_ModStart> = ECRYPTFS_SUPER_MAGIC ; s -> s_stack_depth = path. dentry -> d_sb -> s_stack_depth + 1 ; rc = - EINVAL ; if ( s -> s_stack_depth > FILESYSTEM_MAX_STACK_DEPTH ) { pr_err ( ""eCryptfs: <S2SV_blank> maximum <S2SV_blank> fs <S2SV_blank> stacking <S2SV_blank> depth <S2SV_blank> exceeded\\n"" ) ; goto out_free ; }",1
1301,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1302,"<S2SV_ModStart> 6 ) ) { MATLAB_KO : clone_info = DestroyImageInfo ( clone_info ) ; <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart> ""ImproperImageHeader"" ) ; }",0
1303,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> rdp_null> <S2SV_null>,0
1304,"<S2SV_ModStart> ret, last_pwd, n_new_keys <S2SV_ModStart> keyblocks ) { n_new_keys = count_new_keys ( kdb -> n_key_data, kdb -> key_data ) ; <S2SV_ModStart> -> context, n_new_keys <S2SV_ModEnd>, kdb ->",1
1305,"<S2SV_ModStart> int result = RLC_OK ; bn_t t ; RLC_SIG ( m ) ; <S2SV_ModStart> 8 ) { result = RLC_OK ; bn_null ( m ) ; bn_zero ( m ) ; <S2SV_ModStart> 8 ) { if ( pad == RSA_SIG_SIG ( m ) { result = RLC_OK ; bn_zero ( m ) ; } bn_lsh ( m ) ; bn_lsh ( m, m, m, m_len * 8 ) ; bn_zero ( m ) ; bn_len = RLC_zero ( m ) ; } bn ) ; if ( pad == 0 || pad == 0 ) { result = RLC_OK ; } bn_lsh ( m, 8 ) ; bn_lsh ( m, m, m ) ; bn_lsh ( m, m, m ) ; bn_len = RLC_OK <S2SV_ModEnd> ; if ( <S2SV_ModStart> 8 ) { <S2SV_ModEnd> * p_len = <S2SV_ModStart> 8 ) ; } result = RLC_OK <S2SV_ModEnd> ; break ; <S2SV_ModStart> 8 ) ; } bn_lsh ( m ) ; }",0
1306,"<S2SV_ModStart> -> length, 0,",1
1307,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1308,<S2SV_ModStart> { rq = <S2SV_ModEnd> hctx -> tags <S2SV_ModStart> hctx -> tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; if (,1
1309,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
1310,"<S2SV_ModStart> * cm, FRAME_COUNTS * cm <S2SV_ModEnd> ) { for",0
1311,"<S2SV_ModStart> { token ++ ; } if ( operand >= MAX_OPERANDS ) { eprintf ( ""Too <S2SV_blank> many <S2SV_blank> operands\\n"" ) ; return false",1
1312,<S2SV_ModStart> = 0 ; vpx_writer <S2SV_ModEnd> * xd -> <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> -> above_mi <S2SV_ModEnd> ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ; memcpy <S2SV_ModEnd> ( xd ->,0
1313,"<S2SV_ModStart> ( name, <S2SV_ModEnd> str ) {",0
1314,<S2SV_ModStart> ; return ( NULL <S2SV_ModEnd> ) ; },0
1315,"<S2SV_ModStart> -> rows = ( unsigned char * ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> * sizeof ( <S2SV_ModStart> -> rows ) <S2SV_ModEnd> ; pixel_info =",0
1316,<S2SV_ModStart> ctl_files_rwlock ) ; mutex_init ( & card -> user_ctl_lock ) ;,1
1317,<S2SV_ModStart>,0
1318,"<S2SV_ModStart> ; int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> packet, 0 ) )",0
1319,<S2SV_ModStart> ; ps_dec -> <S2SV_ModEnd> u2_cur_slice_num = 0,0
1320,<S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata -> rbuf. buf!= NULL ) <S2SV_ModStart> OPENSSL_free ( rdata -> rbuf. buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata -> rbuf. buf!= NULL ) <S2SV_ModStart> OPENSSL_free ( rdata -> rbuf. buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; },1
1321,"<S2SV_ModStart> & fl6, rcu_read <S2SV_ModEnd> ) ; int <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart>, & fl6, <S2SV_ModEnd> ) ; rcu_read_unlock",0
1322,"<S2SV_ModStart>, args -> buffer_count <S2SV_ModEnd> ) ; if",0
1323,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_ioctl_info karg <S2SV_ModEnd> ; int data <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; if ( <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } dctlprintk",0
1324,"<S2SV_ModStart> = 0 ; luaL_checkstack <S2SV_ModEnd> ( L,",0
1325,"<S2SV_ModStart> char * path, const char * rootfs <S2SV_ModStart> mntdata, optional, rootfs",1
1326,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1327,<S2SV_ModStart> len ) { <S2SV_ModEnd> const char * <S2SV_ModStart> = 0 ; size_t len <S2SV_ModEnd> ; size_t ( <S2SV_ModStart> = 0 ; if ( len < 0 ) log2SV_null> 0 <S2SV_ModEnd> * buf_null>,0
1328,"<S2SV_ModStart> | O_NOCTTY, ( mode == 0 || mode == MODE_INVALID )? 0644 : mode <S2SV_ModEnd> ) ; if",1
1329,"<S2SV_ModStart> err_info ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> line [ NETSCREEN_LINE_LENGTH <S2SV_ModEnd> ] ; if <S2SV_ModStart> FALSE ; } return parse_netscreen_packet ( wth -> random_fh, phdr, buf <S2SV_ModEnd>, line, <S2SV_ModStart>, line, <S2SV_ModEnd> err, err_info <S2SV_ModStart> err_info ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
1330,<S2SV_ModStart> * rq ) <S2SV_ModEnd> { int cpu <S2SV_ModStart> ; u64 irq_time ; if ( rq -> skip_clock_update ) return <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1331,<S2SV_ModStart> 100 ) { size_t color_pixels = 0 <S2SV_ModEnd> ; break ;,0
1332,<S2SV_ModStart> ) ; } assert ( argv [ 0 ] == NULL ) ; <S2SV_ModStart> ) ; } } if ( raw == '\\0',0
1333,<S2SV_ModStart> { struct blkif_response * <S2SV_ModStart> int status ; <S2SV_ModEnd> spin_lock_irq ( & <S2SV_ModStart> case BLKIF_PROTOCOL_NATIVE : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> case BLKIF_PROTOCOL_PROTOCOL_X86_64 : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> x86_32. rsp_prod_pvt <S2SV_ModEnd> ) ; break <S2SV_ModStart> case BLKIF_PROTOCOL_X86_32 : resp = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart> x86_32. rsp_prod_pvt <S2SV_ModEnd> ) ; break <S2SV_ModStart> case BLKIF_PROTOCOL_X86_32 : resp -> status = <S2SV_ModEnd> RING_GET_RESPONSE ( & <S2SV_ModStart>. rsp_prod_pvt ) <S2SV_ModEnd> ; break ;,0
1334,<S2SV_ModStart> { if ( entry == NULL ) return NULL ; } if (,0
1335,"<S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size, 12 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size, 2 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) || ( CHECKOVERFLOW ( o + o + 2 <S2SV_ModEnd> ) ) ) { <S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) return <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( CHECKOVERFLOW ( o + 12 ) ) { exif_log ( en -> log, EXIF_LOG_DATA, ""ExifMnoteData"", ""Short <S2SV_blank> entry"" ) ; break ; } n -> entries [ tcount ]. tag = exif_get_short ( buf + o + o + o, n -> entries + o + o, n -> entries ) ) ; if ( CHECKOVERFLOW ( n -> entries, n -> entries, n -> entries, n -> entries + o + o + o + o + o + o + 2 ) ) { exif_log ( en -> log, EXOVERFLOW ( en -> log, EXIF_LOG_CODE_CORRUPT_INVALID_DATA, ""Short <S2SV_blank> Entry"" ) ; break ; break ; } if ( n -> entries [ t",0
1336,"<S2SV_ModStart> char * dfilename, l",0
1337,<S2SV_ModStart> ndo -> ndo_snapend ; ND_TCHECK_16BITS ( & ip -> ip_len ),1
1338,<S2SV_ModStart> dentry * dir <S2SV_ModEnd> ; int dir_has_key <S2SV_ModStart> 0 ; } <S2SV_ModEnd> spin_lock ( & <S2SV_ModStart> dir_has_key = ( d_inode ( dir ) -> i_crypt_info <S2SV_ModEnd>!= NULL ),1
1339,<S2SV_ModStart>,0
1340,"<S2SV_ModStart> ARCHIVE_WARN ; } if ( argc >= MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } <S2SV_ModStart> p ) ; <S2SV_ModEnd> } if (",1
1341,"<S2SV_ModStart> parent ) ; if ( ( i -> width > i -> parent -> width ) || ( i -> parent -> width > i -> width ) ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> *** <S2SV_blank> Y <S2SV_blank> Y <S2SV_blank> *** <S2SV_blank> Y <S2SV_blank> Y <S2SV_blank> \'\\n"" ) ; # endif return - 1 ; } if ( ( ( i -> parent -> width ) > i -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if! defined ( i -> log ) if ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> log, ""*** <S2SV_blank> NO_FILE\\n"" ) ; # endif i -> log, i -> parent -> width ) ; # if! defined ( i -> parent -> width ) if! defined ( i -> parent -> width ) if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> parent -> width ) || ( i -> width > i -> width ) fprintf ( i -> width ) if ( i -> parent -> parent -> width ) fprintf ( i -> log, ""*** <S2SV_blank> *** <S2SV_blank>",0
1342,<S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ) <S2SV_ModStart> ; if ( l > ( unsigned ) ( <S2SV_ModEnd> buf + n <S2SV_ModStart> buf + n - p ),1
1343,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
1344,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> break ; } if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart>, file )!= c ) break",0
1345,<S2SV_ModStart> void ) { <S2SV_ModEnd> while ( mnemonic,0
1346,"<S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC",0
1347,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1348,"<S2SV_ModStart> error ; } memset ( newserv, 0, sizeof ( struct service ) ) ;",1
1349,<S2SV_ModStart> ; WORD32 i ; WORD32 i2_idx = & ps_codec -> ps_slice_idx [ 0 ] ; <S2SV_ModStart> ) { if ( i4_cur_slice_idx >= MAX_DPB_DPB_SIZE ) { break ; } <S2SV_ModStart> ) { for ( i = 0 ; i < 0 ; i ++ ) { for ( i < i ++ ) ; ps_codec -> i ++ ; } } <S2SV_ModStart> ) { if ( i4_cur_slice_in_pic_buf == 0 ) { ps_parse -> ps_codec -> i2_cur_slice_idx [ i ] ; ps_codec -> i4_dec_ctx [ i ] = 0 ] ; } <S2SV_ModEnd> } if,0
1350,<S2SV_ModStart> ) -> tp_value [ 0 ],1
1351,"<S2SV_ModStart> ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; ret = - EINVAL ;",1
1352,"<S2SV_ModStart>, int fmt, printbuffer * p <S2SV_ModStart> = 0 ; size_t tmplen = 0 ; <S2SV_ModStart> ( child ) numentries ++, <S2SV_ModEnd> child = child <S2SV_ModStart> -> next ; if (! numentries ) { if ( p ) out = ensure ( p, 3 ) ; if ( p ) out = ensure ( p, 1 ) ; if ( child -> next ) return 0 ; } if (! ptr ) out = ensure ( p, len ) ; if ( p ) out = ensure ( p, 1 ) ; if ( p ) return 0 ; if (! ptr ) return 0 ; if (! ptr ) return 0 ; child = ensure ( p, 3 ) ; if ( p ) return 0 ; if (! ptr ) return 0 ;",0
1353,<S2SV_ModStart> int ike <S2SV_ModEnd> ; ND_TCHECK ( * <S2SV_ModStart> int ike_len ; ND_TCHECK ( * ext_32BITS ( ext ),0
1354,"<S2SV_ModStart> int tagval, uint32 <S2SV_ModEnd> * length )",1
1355,<S2SV_ModStart> if (! sk_peer_get_wake_disconnect ( sk ) ) ; <S2SV_ModStart> } if (! sk_peer_wake_disconnect ( sk ) ) ; <S2SV_ModStart> -> peer_wake_disconnect ; } <S2SV_ModEnd> } if (,0
1356,<S2SV_ModStart> 4 ] ; unsigned int <S2SV_ModEnd> value ; if <S2SV_ModStart> value = ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 <S2SV_ModEnd> ; value |= <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModStart>. unsigned_value = <S2SV_ModEnd> value & 0xffffffff <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ; return (,1
1357,"<S2SV_ModStart> y ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> w"", <S2SV_ModStart> w ) ; sendClean ( outputbuffer ) ;",0
1358,<S2SV_ModStart> ; if ( <S2SV_ModEnd> skb -> len,0
1359,<S2SV_ModStart> void exit_io_context ( struct task_struct * task <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; task_lock ( task <S2SV_ModEnd> ) ; ioc <S2SV_ModStart> ; ioc = task <S2SV_ModEnd> -> io_context ; <S2SV_ModStart> -> io_context ; task <S2SV_ModEnd> -> io_context = <S2SV_ModStart> ; task_unlock ( task <S2SV_ModEnd> ) ; if,1
1360,<S2SV_ModStart> ; int ret = 0,0
1361,<S2SV_ModStart> ; if (! header_len ||,0
1362,"<S2SV_ModStart> ) { int ret = pci_read_config_word <S2SV_ModEnd> ( dev, <S2SV_ModStart> offset, value ) ; const struct pci_cmd_info * cmd = data ; * value &= PCI_COMMAND_GUEST ; <S2SV_ModEnd> * value |= <S2SV_ModStart> * value |= cmd -> val & ~ PCI_COMMAND_GUEST ; <S2SV_ModEnd> return ret ;",1
1363,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ctx ;",0
1364,<S2SV_ModStart> ] ) ; free_uid ( fpl -> user ) ;,1
1365,<S2SV_ModStart> ctx ) ; kiocb_put ( ctx ) ;,0
1366,"<S2SV_ModStart> -> dwc ; dwc3_gadget_del_and_unmap_request ( dep, req, status <S2SV_ModEnd> ) ; spin_unlock <S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
1367,"<S2SV_ModStart> : # line 113 <S2SV_ModEnd> ""re_grammar.y"" { RE_AST <S2SV_ModStart> } # line 1348 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 113 <S2SV_ModEnd> ""re_grammar.y"" { ( <S2SV_ModStart> ( ) <S2SV_ModEnd> ""re_grammar.y"" { ( <S2SV_ModStart> } # line 113 <S2SV_ModEnd> ""re_grammar.y"" { ( <S2SV_ModStart> } # line 1455 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> ( yyvsp [ ( 1 ) <S2SV_ModEnd> ""re_grammar.y"" { ( <S2SV_ModStart> } # line 122 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 113 <S2SV_ModEnd> ""re_grammar.c"" break ; case <S2SV_ModStart> ( yyvsp [ ( 1 ) - ( <S2SV_ModStart> } # line 1 ) <S2SV_ModEnd> ""hex_grammar.y"" { ( <S2SV_ModStart> } # line 147 <S2SV_ModEnd> ""hex_grammar.y"" { ( <S2SV_ModStart> ( yyvsp [ ( ( 1 ) - ( 1 ) - ( 1 ) - ( 1 ) - ( 1 ) - ( 1 ) - ( yyvsp [ ( 1 ) ]. String ) ]. String ) ) ; } # line 113 <S2SV_ModEnd> ""re_grammar.c"" { incr_ast_node ( <S2SV_ModStart> ( yyvsp [",0
1368,"<S2SV_ModStart> sas_revalidate_domain, [ <S2SV_ModEnd> DISCE_SUSPEND ] = <S2SV_ModStart> ] = sas_resume_devices <S2SV_ModEnd>, } ;",1
1369,"<S2SV_ModStart>, int ret, my_quick_data <S2SV_ModEnd> ) { myf <S2SV_ModStart> 0 ) { myf flags = MY_NO_COPY_DATA ; if ( no_copy_copy_copy_copy_copy ( & info, flags ) ) goto out ; }",0
1370,<S2SV_ModStart> NULL ) ; <S2SV_ModEnd> if ( signature <S2SV_ModStart> curve_len < 0 && sig_wdl -> v + 3,0
1371,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
1372,<S2SV_ModStart> sk -> sk_family <S2SV_ModEnd> ; struct sk_buff <S2SV_ModStart> goto out ; <S2SV_ModEnd> if ( flags <S2SV_ModStart> AF_INET ) { struct sockaddr_in * <S2SV_ModStart> ) ) ; * addr_len = sizeof ( * sin ) ; <S2SV_ModStart> skb ) ; <S2SV_ModEnd> struct sockaddr_in6 * <S2SV_ModStart> struct sockaddr_in6 * sin6 = ( struct sockaddr_in6 * <S2SV_ModStart> ) -> iif ) ; * addr_len = sizeof ( * sin6,1
1373,"<S2SV_ModStart> & lblk ; mutex_lock ( & inode -> i_mutex ) ; if (! ( ext4_inode_flag ( inode, EXT4_INODE_KEEP_EXTENTS ) ) ) { ret = - EOPNOTSUPP ; goto out_mutex ; } if (! <S2SV_ModEnd> ( mode & <S2SV_ModStart> & FALLOC_FL_KEEP_SIZE ) && offset + len > lblkbits ) goto out_mutex ; if (! <S2SV_ModEnd> ext4_read (",0
1374,<S2SV_ModStart> ; } else if ( free_total <S2SV_null>,0
1375,<S2SV_ModStart> return map ; map =,1
1376,<S2SV_ModStart> <S2SV_null> <S2SV int <S2SV_ModEnd> char * cp <S2SV_ModStart> char * cp <S2SV_ModEnd> = 0 ; int <S2SV_ModStart> * cp = cp ++ ; if (! cp == '\\0' || cp == '\\0' || cp == '\\0' || cp ++ ) { if ( cp == '\\0' || cp == '\\0' ) { char * cp ++ ; } <S2SV_ModEnd> if ( * cp <S2SV_ModStart> = 0 ; cp ++ ; } <S2SV_ModEnd> if ( * cp <S2SV_ModStart> ( cp == '\\0' ) { int cp ++ ; cp ++ ; cp ++ ; cp ++ ; cp ++ = cp ++ ; } <S2SV_ModEnd> } if ( <S2SV_ModStart> { if ( cp == '\\0' || cp ++ ) { if ( cp!= '\\0' && ( cp!= '\\0' ) ) { c == '\\0' || cp ++ ) { c == '\\0' || cp ++ ; cp ++ = cp ++ ; } <S2SV_ModEnd> } break ;,0
1377,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1378,<S2SV_ModStart> ; if ( <S2SV_ModEnd> size_left < 4,1
1379,<S2SV_ModStart> NULL ; } if ( l_len < 0 ) return NULL ; <S2SV_ModStart> ; } } if ( ( l2 [ 0 ]!= 0 ) return (,0
1380,<S2SV_ModStart> { int i ; int <S2SV_ModEnd> ubits = BN_num_bits <S2SV_ModStart> ( u ) ; int <S2SV_ModEnd> vbits = BN_num_bits <S2SV_ModStart> ( v ) ; int <S2SV_ModEnd> top = p <S2SV_ModStart> ubits <= BN_BITS2 ) { if ( <S2SV_ModEnd> udp [ 0 <S2SV_ModStart> 0 ] == 0 ) goto err ; if ( udp [ 0 ] == <S2SV_ModStart> ) break ; },1
1381,<S2SV_ModStart> = 0 ; vpx_mse16 <S2SV_ModEnd> n0 },0
1382,<S2SV_ModStart> crypto_report_k pp ; strncpy <S2SV_ModEnd> ( skpp.,0
1383,<S2SV_ModStart> = alloc ; size_t <S2SV_ModEnd> strindex = 0,1
1384,"<S2SV_ModStart>, nbits ; if ( msg -> readcount > msg -> cursize ) { return 0 ; } <S2SV_ModStart> oob ) { if ( msg -> readcount + ( bits >> 3 ) > msg -> cursize ) { msg -> readcount = msg -> cursize + 1 ; return 0 ; } <S2SV_ModStart> & 7 ; if ( msg -> bit + nbits > msg -> cursize << 3 ) { msg -> readcount = msg -> cursize + 1 ; return 0 ; } <S2SV_ModStart> msg -> bit, msg -> cursize << 3 <S2SV_ModStart> ) ) ; if ( msg -> bit > msg -> cursize << 3 ) { msg -> readcount = msg -> cursize + 1 ; return 0 ; }",1
1385,<S2SV_ModStart> int idx ; unsigned int count ; <S2SV_ModStart> -> count ; count = kcontrol -> count ; <S2SV_ModStart> ; idx < <S2SV_ModEnd> count ; idx,1
1386,<S2SV_ModStart> ; out1 : cancel_work_sync ( & dev -> kevent ) ; del_timer_sync ( & dev -> delay ) ;,1
1387,<S2SV_ModStart> * data ; int do,0
1388,"<S2SV_ModStart> ), arg <S2SV_ModEnd> ) ; goto",0
1389,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( last_id,0
1390,"<S2SV_ModStart> acl ) { struct iattr iattr ; retval = posix_acl_update_mode ( inode, & iattr. ia_mode, & acl ) ; if ( retval <S2SV_ModEnd> ) goto err_out <S2SV_ModStart> goto err_out ; if (! acl ) { value = NULL ; size = 0 ; } <S2SV_ModEnd> iattr. ia_valid <S2SV_ModStart> iattr ) ; <S2SV_ModEnd> } break ;",1
1391,<S2SV_ModStart> header. types_size <S2SV_ModEnd> ) { continue,1
1392,<S2SV_ModStart> : case NPPVformValue : case NPPVpluginNativeAccessibleAtkPlugId <S2SV_ModStart> case NPPVpluginKeepLibraryInMemory : case NPPVpluginUrlRequestsDisplayedBool : case NPPVpluginWantsAllNetworkStreams : case NPPVpluginCancelSrcStream : case NPPVSupportsAdvancedKeyHandling :,1
1393,"<S2SV_ModStart> char * o, size_t <S2SV_ModEnd> length ) { <S2SV_ModStart> char res ; unsigned char * out = NULL ; unsigned char * out ; size_t res = malloc ( len ) ; if (! out ) return NULL ; <S2SV_ModEnd> ; if ( <S2SV_ModStart> < 2 ) { return NULL ; } <S2SV_ModEnd> while (",0
1394,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> rdp_check_rem ( rdp <S2SV_ModStart> state ) { if (! Stream_GetRemainingLength ( s -> state ) ) return FALSE ; <S2SV_ModStart> state ) ; return TRUE ; <S2SV_ModEnd> ; } <S2SV_null>,0
1395,"<S2SV_ModStart> active_worst_quality ; const VP9_COMMON * cpi <S2SV_ModEnd> ) { int <S2SV_ModStart> i, i, active_worst_quality ; const int bit_depth <S2SV_ModStart> -> bit_depth ; int bit_depth = 0 ; if ( cpi -> active_worst_worst_quality == 0 ) { break ; } <S2SV_ModEnd> i <S2SV_null>",0
1396,"<S2SV_ModStart> ( interface,",0
1397,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1398,<S2SV_ModStart> ( == 0 && <S2SV_ModEnd> ND_TTEST ( *,0
1399,"<S2SV_ModStart>, NULL, <S2SV_ModEnd> data ) ;",1
1400,"<S2SV_ModStart> ( res, <S2SV_ModEnd> dev -> start",0
1401,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
1402,"<S2SV_ModStart>, int mode, PREDICTION_MODE <S2SV_ModEnd>, int mode_rows <S2SV_ModStart> TX_SIZE tx_size, vpx_calloc <S2SV_ModEnd> ( 16, <S2SV_ModStart> 1 ) { memset <S2SV_ModEnd> ( 16, <S2SV_ModStart> 8 ) ; memset <S2SV_ModEnd> ( 16, <S2SV_ModStart> 8 ) ; memset <S2SV_ModEnd> ( x,",0
1403,<S2SV_ModStart> } end ++,0
1404,"<S2SV_ModStart> ( str, ""%s"", <S2SV_ModEnd> ) ) { <S2SV_ModStart> return 0 ; <S2SV_ModEnd> if ( len",0
1405,"<S2SV_ModStart> * jas_iccprof_createfrombuf ( jas_uchar <S2SV_ModEnd> * buf,",1
1406,<S2SV_ModStart> i_io_lock ) ; ei -> i_mmap_sem = NULL ;,0
1407,<S2SV_ModStart> ; if (! memcg -> flags ) return NULL ;,0
1408,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct ion_handle * <S2SV_ModStart> ; handle = ion_handle_get_by_id_nolock ( client, id <S2SV_ModEnd> ) ; mutex_unlock <S2SV_ModStart> ; return handle <S2SV_ModEnd> ; } <S2SV_null>",1
1409,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
1410,<S2SV_ModStart> : if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> : if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; },1
1411,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { p = osStrchr <S2SV_ModEnd> ( context ->,0
1412,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1413,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,0
1414,"<S2SV_ModStart> ( interface, ENC624J600_ESTAT ) <S2SV_ModEnd> ; uint16_t status <S2SV_ModStart> ( interface, ENC624J600_ERTS <S2SV_ModEnd>, status & <S2SV_ModStart> ( interface, ENC624J600_RSV_null> <S2SV_null>",0
1415,<S2SV_ModStart> ] == 0x01 && i < gemsafe_cert_max,1
1416,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
1417,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv, VALUE parse_options ) { VALUE parse_options ; VALUE xmlParserCtxtPtr ctx ; VALUE errors ; VALUE parse_options = 0 ; scanned_options = 0 ; scanned_args = 0 ; scanned_args = 0 ; if ( scanned_args == ( scanned_options ) ) { parse_options = rb_schema ; } <S2SV_ModEnd> = xmlParseParserCtxt ( <S2SV_ModStart> errors ) ; rb_const_set ( rb_schema, rb_ary_intern ( ""ParseOptions"", rb_intern ( ""ParseOptions"" ) ), rb_intern ( ""ParseOptions"" ) ) ;",0
1418,"<S2SV_ModStart> vma ) { <S2SV_ModEnd> struct au1200fb_device * <S2SV_ModStart> info -> par <S2SV_ModEnd> ; vma -> <S2SV_ModStart> _CACHE_MASK ; return vm_iomap_memory <S2SV_ModEnd> ( vma, <S2SV_ModStart> ( vma, fbdev -> fb_phys, fbdev -> fb_len <S2SV_ModEnd> ) ; }",1
1419,<S2SV_ModStart> ]_str <S2SV_ModEnd> ; if (,0
1420,<S2SV_ModStart> ; out += 4 <S2SV_ModEnd> ; out += <S2SV_ModStart> out ; } out += state -> xsize <S2SV_ModEnd> - 2 ;,0
1421,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
1422,<S2SV_ModStart> ; if ( <S2SV_ModEnd> arg >= cdi,1
1423,<S2SV_ModStart> if (! fanout_mutex ) return - EINVAL ; if (,0
1424,<S2SV_ModStart> perf_event ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1425,"<S2SV_ModStart> <S2SV_null> <S2SV_null> int bytes_to_char ( u8_char * s, uint8_t * s, char * s, uint16_t * u8_t * u8_char * s ) <S2SV_ModStart> char * s = NULL <S2SV_ModEnd> ; if ( <S2SV_ModStart> S2SV_null> <S2SV_null> <S2SV_ModEnd> ; if <S2SV_ModStart> ( u8_char * s ) <S2SV_ModEnd> = NULL ; <S2SV_ModStart> } return - 1 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_ModStart> S2SV_null> <S2SV_null>",0
1426,"<S2SV_ModStart>, i ; if (! ( s -> state & PNG_IHDR ) ) { av_log ( avctx, AV_LOG_ERROR, ""trns <S2SV_blank> before <S2SV_blank> IHDR\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( s -> state & PNG_IDAT ) { av_log ( avctx, AV_LOG_ERROR, ""trns <S2SV_blank> after <S2SV_blank> IDAT\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart>!= 6 ) || s -> bit_depth == 1",1
1427,<S2SV_ModStart> ; } } <S2SV_ModEnd> rc -> cib,0
1428,<S2SV_ModStart> } dt -> proto = IP_GET_IPPROTO ( p ) ; dt ->,1
1429,"<S2SV_ModStart> ( interface, KSZ8851_RCR | KSZ8851_U <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_U <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_PH <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( interface, KSZ8851_PH <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( status & KSZ8851_PH <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_KSZ8851_R2SV_null>",0
1430,"<S2SV_ModStart> const node * ndl, bool <S2SV_ModEnd> is_async ) { <S2SV_ModStart> is_async ) { const node * const n = is_async? CHILD ( n, 1 ) : n = NEW_TYPE_COMMENT ; if (! is_async",0
1431,"<S2SV_ModStart> ) ; } memset ( mm, 0, 0, 0 ) ;",0
1432,"<S2SV_ModStart> ( AUDIT_APPARMOR_DENIED, __aa_current_profile ( ), GFP_KERNEL, & sa, NULL <S2SV_ModEnd> ) ; }",1
1433,"<S2SV_ModStart> uint_fast8_t tmp ; siz -> comps = 0 ; <S2SV_ModStart> ) ) { goto error ; } if (! siz -> width ||! siz -> height ) { jas_eprintf ( ""invalid <S2SV_blank> area\\n"" ) ; goto error ; } if (! siz -> width ||! siz -> width ||! siz -> width ) { jas_eprintf ( ""number\\n"" ) ; goto error ; } if (! siz -> width ||! siz -> width || siz -> width > 16384 ) { jas_eprintf ( ""XOsiz <S2SV_blank> not <S2SV_blank> permissible <S2SV_blank> range\\n"" ) ; goto error ; } if ( siz -> xoff >= siz -> xoff >= siz -> xoff || siz -> width ) { jas_eprintf ( ""XOsiz <S2SV_blank> not <S2SV_blank> permissible <S2SV_blank> permissible <S2SV_blank> range\\n"" ) ; goto error ; } if ( siz -> xoff >= siz -> xoff || siz -> width ) { jas_eprintf ( ""XOsiz <S2SV_blank> not <S2SV_blank> permissible <S2SV_blank> range\\n"" ) ; goto error ; } if ( siz -> xoff > siz -> tilexoff || siz -> tilexoff || siz ->",0
1434,<S2SV_ModStart> 0 ) { if ( packet_len < 0 ) { return - 1 ; } <S2SV_ModStart> 0 ) ; } <S2SV_ModEnd> 0 ) {,0
1435,"<S2SV_ModStart>, xmi_data, xmi_size,",1
1436,"<S2SV_ModStart> size_t total_len ; struct iov_iter iter ; <S2SV_ModStart> ) return 0 ; iov_iter_init ( & iter, iov, nr_segs, total_len, 0 ) <S2SV_ModStart> -> ops ; <S2SV_ModEnd> size_t chars = <S2SV_ModStart> buf -> len ; size_t chars ; <S2SV_ModStart> break ; } <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> break ; } written",0
1437,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits <S2SV_ModStart> ) ; } \\\n} <S2SV_ModEnd> Quantum index ; <S2SV_ModStart> ++ ) { next_pixel = MagickFalse ; displacement = 1 ; <S2SV_ModStart> -= MaxHashTable ; if ( k < 0 ) continue <S2SV_ModEnd> ; if (,0
1438,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1439,<S2SV_ModStart> { p_fm_config_conx_hdlt hdl = NULL <S2SV_ModStart> ) ; goto cleanup <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto cleanup <S2SV_ModEnd> ; } if <S2SV_ModStart> 0 ) { res = <S2SV_ModEnd> commandList [ i <S2SV_ModStart> ] ) ; goto cleanup ; <S2SV_ModStart> - 1 ; cleanup : if ( hdl ) { if ( hdl -> sm_hdl ) unlink ( hdl -> sm_hdl -> sm_path [ 0 ] ) ; } if ( hdl -> sm_hdl -> sm_path [ 0 ] ) { if ( hdl -> sm_hdl -> sm_hdl -> sm_path [ 0 ] ) unlink ( hdl -> sm_hdl -> c_path ) ; } if ( hdl -> fe_hdl -> fe_hdl ) { if ( hdl -> fe_hdl -> fe_hdl -> sm_path [ 0 ] ) unlink ( hdl -> c_path ) ; } <S2SV_ModEnd> free ( hdl <S2SV_ModStart> hdl ) ; },0
1440,"<S2SV_ModStart> size_t max_mem ; size_t max_samples ; char optstr [ 64 ] ; <S2SV_ModStart> 0 ] ; max_samples = 64 * JAS_MEBI ; <S2SV_ModStart> break ; case OPT_MAXSAMPLES : max_samples = strtoull ( jas_optarg, 0, 10 ) ; break ; case <S2SV_ModStart> ) ; } snprintf ( optstr, sizeof ( optstr ), optstr ) ) ; <S2SV_ModStart>, fmtname = strname = strtoull <S2SV_ModEnd> ; } printf <S2SV_ModStart>, ""%s <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d\\n"", max_samples, max_samples )",0
1441,<S2SV_ModStart> ; switch ( config_name <S2SV_ModEnd> ( config ->,0
1442,<S2SV_ModStart> return ret ; <S2SV_ModEnd> if (!,0
1443,<S2SV_ModStart> col ++ ) && col_bits < 4 ),0
1444,<S2SV_ModStart> len + len <S2SV_ModEnd> ; if (,0
1445,<S2SV_ModStart> 2 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,1
1446,"<S2SV_ModStart> ; int idx, <S2SV_ModEnd> kvm_rt_info * vcpu <S2SV_ModStart> ; int ret ; idx = - EINVAL <S2SV_ModEnd> ; if (",0
1447,<S2SV_ModStart> bffq ) { memset ( bh ) ;,0
1448,<S2SV_ModStart> else { return false <S2SV_ModEnd> ; } case,1
1449,"<S2SV_ModStart> sock, sk",0
1450,<S2SV_ModStart> (! handle ||! SecIsValidHandle ( handle ),1
1451,<S2SV_ModStart> = 1 ; if ( length > 3 ) return NULL ;,0
1452,<S2SV_ModStart> ) ; goto out <S2SV_ModEnd> ; } if,0
1453,<S2SV_ModStart> OP_EXACT1 ) ; <S2SV_ModEnd> DATA_ENSURE ( 1 <S2SV_ModStart> ++ ; s <S2SV_ModEnd> ++ ; MOP_OUT,1
1454,<S2SV_ModStart> int plane = 1 <S2SV_ModEnd> ; plane <S2SV_null>,0
1455,<S2SV_ModStart> = - EINVAL ; msg -> msg_namelen = 0,0
1456,"<S2SV_ModStart> mntent, path, rootfs",1
1457,<S2SV_ModStart> fd ) ; if ( sr -> vhost_fdt_name ) return 0 ;,0
1458,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct key_get_keyring * dest_keyring <S2SV_ModStart>! dest_keyring ) { kfree ( dest_keyring ) ; <S2SV_ModStart> break ; } <S2SV_ModEnd> return keykey ;,0
1459,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart>, bsize, MACROBLOCKD * rd_mbd ; MACROBLOCKD * rd <S2SV_ModEnd> = & x <S2SV_ModStart> -> mb ; <S2SV_ModEnd> if ( bsize",0
1460,<S2SV_ModStart> NETIF_F_HW_SG <S2SV_ModEnd> ; if ( <S2SV_ModStart> NETIF_F_HW_CSUM | SCTP_F_SG <S2SV_ModEnd> ; if (,0
1461,<S2SV_ModStart> = NULL ; if ( <S2SV_ModEnd> * err ==,0
1462,"<S2SV_ModStart> pixel_info ) ; ( void ) ResetMagickMemory ( pixels, 0, pixel_info_length ) ;",1
1463,"<S2SV_ModStart>, count ) ; assert ( count > 0 ) return - EINVAL ; if (",0
1464,"<S2SV_ModStart> ( pMap = malloc ( <S2SV_ModEnd>, 0 )",0
1465,<S2SV_ModStart> break ; } if (! XFS_S2SV_null>,0
1466,"<S2SV_ModStart> ; if ( strcmp ( c, c, c ) return 0 ; if (",0
1467,<S2SV_ModStart> break ; } size_t <S2SV_ModEnd> if (!,0
1468,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flags & <S2SV_ModStart> & vp8_eflag ) {,0
1469,"<S2SV_ModStart>, sizeof ( double <S2SV_ModEnd> ) ) ;",1
1470,<S2SV_ModStart> ( event ) { <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1471,"<S2SV_ModStart> uint16_t len, bool <S2SV_ModStart> len, len <S2SV_ModEnd> ) { ND_PRINT (",0
1472,<S2SV_ModStart> -> outputbuffer <S2SV_ModEnd> ; memcpy (,0
1473,"<S2SV_ModStart> ( dest_width ) ; memcpy <S2SV_ModEnd> ( dest_width, <S2SV_ModStart> ( dest_width ) ; memcpy <S2SV_ModEnd> ( dest_width,",0
1474,<S2SV_ModStart> ( msg ) { if ( len < 4 ) { return ; } <S2SV_ModStart> 8 ) ; },0
1475,<S2SV_ModStart> int u ; if ( n < 0 || n >= 32 ) { return - 1 ; } <S2SV_ModEnd> v = 0,1
1476,"<S2SV_ModStart> iovec, compat, & iter <S2SV_ModStart> len, iovec, & iter <S2SV_ModStart> iter_op ) { ret = iter_op ( req, & iter ) ; } else { ret = rw_op ( req, iter. iov, iter. <S2SV_ModEnd> nr_segs, req",1
1477,"<S2SV_ModStart> } if ( ptr - c -> rcurr > 100 || ( strncmp ( ptr, ""get <S2SV_blank> "", 4 ) && strncmp <S2SV_ModEnd> ( ptr, <S2SV_ModStart> ptr, ""gets <S2SV_blank> "", 5 )",0
1478,<S2SV_ModStart> ; if (! desc -> bLength ) return - EINVAL,0
1479,<S2SV_ModStart> break ; } if ( config -> bLength > sizeof ( struct usb_descriptor ) ) { dev_err ( & USB_MAX + 2 ) ; return - EINVAL ; },0
1480,<S2SV_ModStart> ; ue -> card = card ; ue ->,0
1481,"<S2SV_ModStart> client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; return 0 ; } if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ],'<S2SV_blank>') ) { exit_client ( client_p, client_p, client_p, ""Malformed <S2SV_blank> AUTHENTICATE""",1
1482,<S2SV_ModStart> ctxt -> rip_relative && likely ( ctxt -> memopp ),1
1483,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",0
1484,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; random_ether_addr (,1
1485,"<S2SV_ModStart> 16 ) ; vpx_variance <S2SV_ModEnd> ( b,",0
1486,<S2SV_ModStart>,0
1487,"<S2SV_ModStart> * header ; <S2SV_ModEnd> thresh ; char <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> = strlen ( <S2SV_ModStart> header -> header ) ; <S2SV_ModEnd> = strlen ( <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ) ; memcpy <S2SV_ModStart> ( psf -> header, <S2SV_ModEnd> ) ; }",0
1488,<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited,1
1489,"<S2SV_ModStart> ( ret ) { applog ( LOG_WARNING, ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> header <S2SV_blank> to <S2SV_blank> header_bin, <S2SV_blank> %s"", header ) ; return false ; } if (",0
1490,<S2SV_ModStart> -> priv_alg_priv ( ctx ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> priv ) <S2SV_ModEnd> ; if (,0
1491,<S2SV_ModStart> case EXIT_REASON_VMON : case EXIT_REASON_INVEPT :,1
1492,<S2SV_ModStart> -> sf = ( VP9_COMP * cpi <S2SV_ModEnd> ) { VP9_COMMON <S2SV_ModStart> } if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModEnd> 1 ) { <S2SV_ModStart> ; sf -> oxcf. <S2SV_ModStart> { if ( cpi ( cpi -> frame_mode == KEY_FRAME ) && cpi -> frame_type == KEY_FRAME ) { <S2SV_ModEnd> sf -> sf <S2SV_ModStart> } } else { <S2SV_ModEnd> sf -> oxcf. <S2SV_ModStart> ; sf -> rc_mode = 1 ; <S2SV_ModEnd> sf -> oxcf. <S2SV_ModStart> } } } if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( cpi -> frame_type == KEY_FRAME ) { <S2SV_ModEnd> sf -> oxcf. <S2SV_ModStart> ; sf -> oxcf. <S2SV_ModStart> ; sf -> rc. <S2SV_ModStart> } } } <S2SV_ModEnd> endif if (,0
1493,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
1494,"<S2SV_ModStart> * ut32 tx, <S2SV_ModEnd> ) ) {",0
1495,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
1496,"<S2SV_ModStart> + 2 ; memset <S2SV_ModEnd> ( L,",0
1497,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1498,<S2SV_ModStart> * s = _Py_char * type_ignores <S2SV_ModEnd> ; if ( <S2SV_ModStart> == NULL ) { Py_CLEAR ( c ) ; return NULL ; },0
1499,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> vpx_codec_err_t res ; int res = 0 ; <S2SV_ModStart> return res ; } else if ( input_flags & VPX_CODEC_OK ) { if ( svc_flags & VPX_CODEC_OK ) return res ; } else if ( option_type == 1 ) { res = 1 ; } else { res = set_codec_ctx_init ( svc_key, option_name, option_name ) ; if (! ( svc_name ) ) return res ; } else if ( <S2SV_ModStart> ) return res ; } else { res = set_codec_init ( svc_key, option_key ) ; if ( svc_key ) return res ; } else { if ( option_name == 1 ) { if ( svc_params_name == 1 ) return res ; } else if ( <S2SV_ModStart> ) { if ( option_key ) ) { if ( res!= 0 ) return res ; } else if ( res!= 0 ) return res ; } else if ( svc_context_key ) return res ; } else if (",0
1500,<S2SV_ModStart> ( event ) { <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1501,<S2SV_ModStart>! t && ( <S2SV_ModStart> * s ),0
1502,<S2SV_ModStart> ; if ( entry == NULL ) return EINVAL ; if ( <S2SV_ModStart> KADM5_POLICY ) && entry -> policy == NULL <S2SV_ModEnd> ) return KADM5_BAD_MASK <S2SV_ModStart> ; if ( ( mask & KADM5_POLICY ) && ( mask & KADM5_POLICY_CLR ) ) return KADM5_BAD_MASK <S2SV_ModEnd> ; if (,1
1503,<S2SV_ModStart> frame -> data [ plane ] && frame -> linesize <S2SV_ModStart> [ plane ] && frame -> linesize [ plane ],1
1504,"<S2SV_ModStart> ; snprintf ( mvs, ""%d\\n"", mb_index <S2SV_ModEnd> ) ; }",0
1505,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> i ) {",0
1506,,1
1507,<S2SV_ModStart> 0x3 ) ; if ( addr == 0x0 ) { <S2SV_ModStart> 0x3 ) ; },0
1508,"<S2SV_ModStart> -> pmysql, mysql_dbh -> pmysql",0
1509,"<S2SV_ModStart> = 0 ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> & size, 0 <S2SV_ModStart> = 0 ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> id ) )",0
1510,<S2SV_ModStart> ; struct ieee_hdr vhdr <S2SV_ModEnd> ; phdr <S2SV_null> <S2SV_null>,0
1511,<S2SV_ModStart> == NULL ),0
1512,<S2SV_ModStart>,0
1513,<S2SV_ModStart> while ( offset > 0 && offset <S2SV_ModStart> < end_offset ) { <S2SV_ModStart> hf_keybuffer ) ; },1
1514,<S2SV_ModStart> == 0 ) { <S2SV_ModStart> - ENOMEM ; } <S2SV_ModEnd> return ERR_PTR (,0
1515,<S2SV_ModStart> rc ; const VP9EncoderConfig <S2SV_ModEnd> * const oxcf <S2SV_ModStart> = cpi -> oxcf -> rc <S2SV_ModEnd> ; int i <S2SV_ModStart> ; if ( rc -> avg_frame_bandwidth <S2SV_ModEnd> < 2 ) <S2SV_ModStart> 0 ) { const int kf_bandwidth = ( rc -> avg_frame_bandwidth * rc -> avg_frame_bandwidth <S2SV_ModEnd> >,0
1516,<S2SV_ModStart> X86_EFLAGS_RF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1517,"<S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; else if ( ret <= size ) memcpy ( data, buf, ret ) ; kfree ( buf ) ;",0
1518,"<S2SV_ModStart> * tx_mode, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> r, vpx_read_bit <S2SV_ModEnd> * r ) <S2SV_ModStart> if (! vpx_read <S2SV_ModEnd> ( r,",0
1519,<S2SV_ModStart> op + OSPF6HDR_LEN ) ; ND_TCHECK_32BITS ( & hellop -> hello_options,1
1520,<S2SV_ModStart> { if ( datalen!= 1 ) return - EINVAL ; if (,1
1521,"<S2SV_ModStart> rc ) { struct task_struct * <S2SV_ModEnd> task = kthread_run <S2SV_ModStart> ; if ( IS_ERR ( task ) ) { <S2SV_ModStart> uwbd. task = NULL ; <S2SV_ModEnd> printk ( KERN_ERR <S2SV_ModStart> ""UWB <S2SV_blank> won\'t <S2SV_blank> work\\n"" ) ; } else { rc -> uwbd. task = task ; <S2SV_ModEnd> rc -> uwbd <S2SV_ModStart> pid ; } }",1
1522,"<S2SV_ModStart> : # line 101 ""re_grammar.c"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1030 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 103 ""re_grammar.y"" { yr_re_node_destroy ( ( * * yyvaluep ). re_node ) ) ; } # line 1036 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 103 ""re_grammar.y"" { yr_re_node_destroy ( ( * yyvaluep ). re_node ) ) ; } # line 1054 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 1054 <S2SV_ModEnd> ""hex_grammar.y"" { yr_re_node_destroy ( ( * yyvaluep ). re_node ) ) ; } # line 1048 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 107 ""re_grammar.y"" { yr_re_node_destroy ( ( * yyvaluep ). re_node ) ) ; } # line 1054 <S2SV_ModEnd> ""hex_grammar.c"" break ; <S2SV_ModStart> : # line 104",0
1523,<S2SV_ModStart> : idx ; assert ( ptr >= gfx -> backendData && ptr < ( ( char * ) gfx -> backendData + graphicsGetMemoryRequired ( gfx ) ) ) ;,1
1524,<S2SV_ModStart> <S2SV_null> <S2SV_null,0
1525,,0
1526,<S2SV_ModStart> { if ( ( <S2SV_ModStart> shmflg & SHM_RND ) && addr >= shmlba,1
1527,<S2SV_ModStart> { serv_info = fmode_t <S2SV_ModEnd> ; serv_mode =,0
1528,"<S2SV_ModStart> curve_t peer, const void ) { return ; }",0
1529,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1530,<S2SV_ModStart> : case NPNVSupportsWindowless : case NPNVprivateModeBool : case NPNVsupportsAdvancedKeyHandling,1
1531,"<S2SV_ModStart> ; ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_DONTWAIT ) )",0
1532,"<S2SV_ModStart> int s = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1533,<S2SV_ModStart> ; if (! xElem <S2SV_ModEnd> ( xml_name ) <S2SV_ModStart> -> name_name ) &&,0
1534,"<S2SV_ModStart> char * dfilename, l",0
1535,<S2SV_ModStart> <S2SV_null> <S2SV_null> static static,0
1536,<S2SV_ModStart> mq_ops ) ; <S2SV_ModEnd> spin_lock ( &,0
1537,"<S2SV_ModStart> s ) { uint32 length ; struct stream packet = * s <S2SV_ModEnd> ; ber_parse_header ( <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> consume <S2SV_blank> domain <S2SV_blank> params <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",1
1538,<S2SV_ModStart>,0
1539,"<S2SV_ModStart> [ VPX_IMG_FMT_I440 <S2SV_ModEnd> ], int <S2SV_ModStart> ; _y4m -> chroma_y4m <S2SV_ModEnd> = _y4m -> bits_perm <S2SV_ModStart> ; } ret = _y4m -> chroma_y4m -> chroma_y4m <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_y4m -> buf <S2SV_ModEnd> ) ; return",0
1540,<S2SV_ModStart> int otmp ; if ( len < 0 ) return FALSE,0
1541,<S2SV_ModStart> int table_table_start_table_start <S2SV_ModEnd> ; if ( <S2SV_ModStart> NULL ) return FALSE ; <S2SV_ModEnd> ( table_start_table_start ( <S2SV_ModStart> return FALSE ; if ( table_start_table_start ( ) < FALSE ) return FALSE <S2SV_ModStart> return FALSE ; <S2SV_ModEnd> return FALSE ; <S2SV_ModStart> S2SV_null> <S2SV_null>,0
1542,<S2SV_ModStart> env ) { if (! strlen ( struct envbuf ) ) return - 1 ; <S2SV_ModStart> root ) ; },0
1543,<S2SV_ModStart> if ( ( tnl_hdr <S2SV_ModEnd> ( skb ) <S2SV_ModStart> skb ) < 0 ||,0
1544,"<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( seg -> <S2SV_ModStart> ) ; } memset <S2SV_ModEnd> ( seg -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( seg,",0
1545,"<S2SV_ModStart> ; if ( mode_type_type == NULL ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if (! Module_type_type_type ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart>, RUN_TYPE_MASK ) ) return 0 ; <S2SV_ModStart> return 0 ; if (! macro_type ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart>, RUN_TYPE_MASK ) ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> (! Function_type ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart>, FunctionDef -> type_type ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( <S2SV_ModEnd> == 0 ) <S2SV_ModStart> return (! Function_type_type )",0
1546,"<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 16 ) )",0
1547,<S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 4 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> ; break ; } while ( context -> pass > 0 && context -> pass < 4 && context -> curY >= p -> height ) { switch ( ++ context -> pass ) { case 2 : context -> curY = i -> posY + 4 ; break ; case 3 : context -> curY = i -> posY + 2 ; break ; case 4 : context -> curY = i -> posY + 1 ; break ; },1
1548,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> ++ ; #,0
1549,"<S2SV_ModStart> ) ; } smb_ofile_flush <S2SV_ModEnd> ( sr, <S2SV_ModStart> f_mutex ) ; smb_ofile_flush <S2SV_ModEnd> ( sr,",1
1550,"<S2SV_ModStart> <S2SV_null> <S2SV_null> int bytes_to_char ( u8_char * s, uint8_t * s, char * s, uint16_t * u8_t * u8_char * s ) <S2SV_ModStart> char * s = NULL <S2SV_ModEnd> ; if ( <S2SV_ModStart> S2SV_null> <S2SV_null> <S2SV_ModEnd> ; if <S2SV_ModStart> ( u8_char * s ) <S2SV_ModEnd> = NULL ; <S2SV_ModStart> } return - 1 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_ModStart> S2SV_null> <S2SV_null>",0
1551,"<S2SV_ModStart> ; if ( * cp == '\\0' || <S2SV_ModEnd> strchr ( cp <S2SV_ModStart> )!= NULL || <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> ( cp, ""."" ) == 0 || strcmp ( cp, <S2SV_ModStart> ) == 0 <S2SV_ModEnd> ) { run_err",1
1552,"<S2SV_ModStart>, * num, <S2SV_ModEnd> char * <S2SV_ModStart> * out2 ; char * <S2SV_ModStart> * arg2 = 0 <S2SV_ModEnd> ; char t2 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) { outputbuffer = snprintf ( outputbuffer, sizeof ( name ) <S2SV_ModEnd> ) ; if <S2SV_ModStart> == 0 ) { fprintf ( outbuffer, ""\\n' ) ; return ( outbuffer <S2SV_blank> %s\\n"", t2 ) ; } if ( * t < 0 ) { fprintf ( outbuf, ""x' ) ; return 0 ; } else if ( t < 1 ) { fprintf ( outbuffer <S2SV_blank> -0' ) ; } else { fprintf ( outbuffer <S2SV_blank> -1.\\n"" ) ; } <S2SV_ModStart> ( outbuffer ) ; <S2SV_ModEnd> for ( t2 == 0 <S2SV_ModStart> ) ; return 0 <S2SV_ModEnd> } else { <S2SV_ModStart> ( out2 ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> "" <S2SV_null>",0
1553,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : ms -> elf_notes_max = * ( const size_t * ) val ; return 0 ;,0
1554,"<S2SV_ModStart> segs ) { <S2SV_ModEnd> u32 hash, <S2SV_ModStart>, id ; if ( unlikely ( siphash_key_is_zero ( & net -> ipv4. ip_id_key ) ) ) get_random_bytes ( & net -> ipv4. ip_id_key <S2SV_ModEnd>, sizeof ( <S2SV_ModStart>, sizeof ( net -> ipv4. ip_id_key <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ; hash = siphash_3u32 <S2SV_ModEnd> ( ( __force <S2SV_ModStart> iph -> protocol, & net -> ipv4. ip_id_key <S2SV_ModEnd> ) ; id",1
1555,"<S2SV_ModStart> } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_left ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_CLEAR ( tmp ) ; } else { int res ; res = NULL ; } if ( lookup_attr_id ( obj, & PyId_left ) < 0 ) { return 1 ; } else { int res = obj2ast_int ( tmp, & tmp ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id ( obj, & PyId_upper_left ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_CLEAR ( PyExc_TypeError ) ; return 1 ; } else { int res ; res = obj2ast_expr ( tmp ) ; } else { int res = NULL ; } else { int res = obj2ast_int ( tmp, & tmp ) ; if ( lookup_attr_id ( obj, & PyId_left, & tmp ) < 0 ) { return 1 ; } else { int res ; res = NULL ; } if ( lookup_attr_id ( obj, & tmp ) < 0 )",0
1556,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
1557,"<S2SV_ModStart> ctl -> pw, "".chfn""",1
1558,<S2SV_ModStart> { if ( max_length < sizeof ( struct ieee80211_radiotap_header ) ) return - EINVAL ; if ( <S2SV_ModStart> iterator -> _rtheader + sizeof ( uint32_t ),1
1559,<S2SV_ModStart> ) ) { goto err ; <S2SV_ModStart> goto err ; } <S2SV_ModEnd> if (! <S2SV_ModStart> val ) { goto err ; goto err ; } <S2SV_ModStart> -> dnode -> dnode ) { goto err ; } <S2SV_ModEnd> if (! <S2SV_ModStart> - EOPNOTSUPP ; goto err ; } <S2SV_ModEnd> break ;,0
1560,<S2SV_ModStart> = NULL ; src -> curframe -> curframe -> curframe [ i ],0
1561,<S2SV_ModStart> return ; } if ( input <= 0.0 || output <= 0.0 ) { RETURN_FALSE ; RETURN_FALSE ; },0
1562,<S2SV_ModStart> : VPX_RC_FIRST_PASS <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> stats. rc = 0 <S2SV_ModEnd> ; log -> <S2SV_ModStart> ( & VPX_RC_PASS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( & VPX_RC_PASS <S2SV_ModEnd> ) exit,0
1563,<S2SV_ModStart> ) ; } if <S2SV_ModEnd> ( cmd ->,0
1564,<S2SV_ModStart> NULL ) ; if ( f,0
1565,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * end, <S2SV_ModStart> ] ) { vpx_reader <S2SV_ModEnd> * end ; <S2SV_ModStart> = NULL ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart>, 2 ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart>, end ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( pbi -> <S2SV_ModStart> - 2 ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & tile_cols",0
1566,<S2SV_ModStart> * vp9_decode_decoder = NULL ; VP9EncoderConfig <S2SV_ModEnd> VP9_COMMON * <S2SV_ModStart> pbi ) { const cm = cm -> common ; VP9_COMMON * const cm = & cm -> common ; vpx_codec_get_parallel_decode ( & cm -> common ) ; vpx_decode = NULL ; vpx_read <S2SV_ModEnd> ( & pbi <S2SV_ModStart> pbi -> last_frame_data <S2SV_ModEnd> ) ; } <S2SV_ModStart> = 0 ; vpx_read <S2SV_ModEnd> ( ) ;,0
1567,<S2SV_ModStart> ( s ) <S2SV_ModEnd> ; GF_LOG_ERROR ( <S2SV_ModStart> ( s ) <S2SV_ModEnd> ) ; },0
1568,<S2SV_ModStart> ; client -> <S2SV_ModEnd> client -> protocol,0
1569,<S2SV_ModStart> -> count ; new_fpl -> user = get_uid ( fpl -> user ) ;,1
1570,<S2SV_ModStart> opt * opt <S2SV_ModEnd> ; struct ip_options_rcu <S2SV_ModStart> * opt = <S2SV_ModEnd> -> opt_inet_opt ; if,0
1571,"<S2SV_ModStart> * tree, vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> int l = ( const vpx_tree_index <S2SV_ModEnd> * tree )",0
1572,"<S2SV_ModStart>, res ; vpx_codec_alg_priv_t res <S2SV_ModEnd> ( ctx, <S2SV_ModStart> ctx ) { VPX_CODEC_OK ; } if ( flags & VPX_CODEC_OK ) { <S2SV_ModStart> ) return VPX_CODEC_OK ; } if ( flags & VPX_CODEC_EBUFSIZE <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; } else { <S2SV_ModEnd> } if (",0
1573,<S2SV_ModStart> ; ctx -> wid = 0 ; if (,0
1574,"<S2SV_ModStart> ) ; struct mnt_namespace * ns = dest_mnt -> mnt_ns ; struct <S2SV_ModStart> ; if (! parent_path ) { err = count_mounts ( ns, source_mnt <S2SV_ModEnd> ) ; if <S2SV_ModStart> goto out ; } if ( IS_MNT_SHARED ( dest_mnt ) ) { err = count_mounts ( dest_mnt, true ) ; if ( IS_MNT_SHARED ( dest_mnt ) ) goto out ; <S2SV_ModStart> mnt_hash ) ; <S2SV_ModEnd> } out =",0
1575,"<S2SV_ModStart>, & len, 0",1
1576,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = _mm_set1_epi16 ( ( int16_t ),0
1577,"<S2SV_ModStart> int oxcf, <S2SV_ModEnd> * oxcf,",0
1578,<S2SV_ModStart> int jas_uchar <S2SV_ModEnd> buf [ MIF_MAGICLEN <S2SV_ModStart> ] = sizeof ( MIF_MAGICLEN ),0
1579,"<S2SV_ModStart> int i, fout, <S2SV_ModStart> NULL, fout, 1",0
1580,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_block_enabled ( MACROBLOCK * x <S2SV_ModStart> -> common ; MACROBLOCK * x = & x -> td. bsize, BLOCK_SIZE bsize, BLOCK_SIZE bsize, BLOCK_SIZE bsize, BLOCK_SIZE bsize, <S2SV_ModStart> & x -> <S2SV_ModEnd> ) { MACROBLOCKD * <S2SV_ModStart> -> e_mbd ; const x -> oxcf = & x -> e_mbd ; ctx -> skip_frame = BLOCK_SIZE bsize <S2SV_ModEnd> ; x -> <S2SV_ModStart> -> skip_x = 0 <S2SV_ModEnd> ; ctx ->",0
1581,<S2SV_ModStart> break ; } if ( config -> bLength > sizeof ( struct usb_descriptor ) ) { dev_err ( & USB_MAX + 2 ) ; return - EINVAL ; },0
1582,"<S2SV_ModStart> key ) { <S2SV_ModEnd> unsigned char key2 <S2SV_ModStart> ] ; struct crypto_cipher * tfm_des <S2SV_ModEnd> ; crypto_alloc_key ( <S2SV_ModStart> ; tfm_des = crypto_alloc_key ( ""des"" <S2SV_ModEnd>, 0, <S2SV_ModStart>, 0, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) ) { <S2SV_ModEnd> cifs_dbg ( VFS <S2SV_ModStart> ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> des\\n"" ) ; return PTR_ERR ( tfm_des ) ; } crypto_cipher_free_des ) ;",0
1583,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1584,"<S2SV_ModStart> ; int i <S2SV_ModEnd> ; int i <S2SV_ModStart> ) { return AVERROR_INVALIDDATA ; <S2SV_ModStart> ) ; } if ( get_bits_max_t ) { av_log ( ctx, AV_LOG_ERROR, ""Insufficient <S2SV_blank> buffer <S2SV_blank> (%d\\n"", name, 0x) ; return 0 ; } <S2SV_ModStart> } if ( <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1585,<S2SV_ModStart> i > pos + delta <S2SV_ModStart> off + 1 <= pos + delta <S2SV_ModEnd> ) insn ->,1
1586,<S2SV_ModStart> case EXIT_REASON_INVEPT : case EXIT_REASON_INVVPID :,1
1587,<S2SV_ModStart> } else { i = strlen ( c ) ( char ) c <S2SV_ModEnd> ; if (,0
1588,"<S2SV_ModStart> 0 = len, 0,",0
1589,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
1590,"<S2SV_ModStart> ++ r ; if <S2SV_ModEnd> ( pow ( <S2SV_ModStart>, dim ) <= entries ) return - 1 ; if <S2SV_ModEnd> ( ( int <S2SV_ModStart> dim ) ) > entries ) return - 1 <S2SV_ModEnd> ; return r",1
1591,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> x ), MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> ; } } return ( <S2SV_ModStart> dds_info, 8, exception ) ) <S2SV_ModEnd> ; } <S2SV_null>",1
1592,<S2SV_ModStart> if ( skb ) { struct ip_skb * 4 * 4 ; <S2SV_ModStart> return 0 ; } <S2SV_ModEnd> if ( skb,0
1593,<S2SV_ModStart>,0
1594,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL )",0
1595,"<S2SV_ModStart> buffer ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> "", <S2SV_ModStart>.3 ) ; sendClean ( outputbuffer ) ;",0
1596,"<S2SV_ModStart> cfg ) { struct stat st ; FILE * file = NULL ; int fd = - 1 ; <S2SV_ModStart> } else { fd = open ( file, O_WRONLY | O_APPEND | O_CLOEXEC | O_NOFOLLOW | O_NOCTTY ) ; if ( fd >= 0 && ( fstat ( fd <S2SV_ModEnd>, & st <S2SV_ModStart> == 0 ) && <S2SV_ModEnd> S_ISREG ( st <S2SV_ModStart> { file = fdfree ( fd",0
1597,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! f2fs_readonly (,1
1598,<S2SV_ModStart> maptype ) { case RMT_NONE : break ;,0
1599,"<S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f\\n"", <S2SV_ModStart> y12 ) ; sendClean ( outputbuffer ) ;",0
1600,<S2SV_ModStart> NULL ) return FALSE <S2SV_ModEnd> ; if (,0
1601,<S2SV_ModStart> user ) { <S2SV_ModEnd> free_user ) ;,0
1602,<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm ->,0
1603,<S2SV_ModStart> == ARPHRD_ETHER ) { <S2SV_ModStart> ether_setup ) ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; },1
1604,"<S2SV_ModStart> * data ; struct stream packet = * s ; <S2SV_ModStart> ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } if (",1
1605,<S2SV_ModStart> pbi ) { <S2SV_ModEnd> if ( pbi,0
1606,<S2SV_ModStart> { if ( l == NULL ) break ; if (,1
1607,<S2SV_ModStart> } if ( ( <S2SV_ModStart> xWantedSize > 0 ) && ( ( xWantedSize + xWantedSize ) > xWantedSize ) <S2SV_ModStart> 0x00 ) { if ( ( xWantedSize + <S2SV_ModEnd> ( portBYTE_ALIGNMENT - <S2SV_ModStart> portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize <S2SV_ModEnd> ) { xWantedSize <S2SV_ModStart> } else { xWantedSize = 0 <S2SV_ModEnd> ; } } if,0
1608,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1609,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1610,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpDiff ( TIFF <S2SV_ModStart> cc ) ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> stride ) )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""fpDiff"", ""%s"", ""(cc%(bps*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> tmp ) return 0 <S2SV_ModStart> cp -- ) return 1 ;",1
1611,<S2SV_ModStart> uint16 num_updates ( void ) { if (! s + 1 ) { <S2SV_ModStart> ) ) ; },0
1612,"<S2SV_ModStart> 0 ) ; if ( len == '\\0' ) break ; size_t size_t <S2SV_ModEnd> ( sb,",0
1613,<S2SV_ModStart> 0 ; } ND_TCHECK2 ( & tptr. msg_len ) ;,0
1614,<S2SV_ModStart> { uint16 bitspersample = 1,0
1615,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1616,"<S2SV_ModStart> vp9_coeff_coef_probs_probs_t * cpi <S2SV_ModEnd> * cpi, <S2SV_ModStart> ] ) { vpx_prob <S2SV_ModEnd> * coeff_probs = <S2SV_ModStart> 0 ) ; vpx_prob <S2SV_ModEnd> ( cpi,",0
1617,<S2SV_ModStart> name ) ; if (! ( name ) ) return LOG_WARNING ;,0
1618,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x80 ; state -> data [ 2 ] = 0x0 ; if ( dvb_usb_generic_rw ( d, state -> data, 3, state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x83 ; state -> data [ 2 ] = 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; state -> data [ 1 ] = 0x83 ; state -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 2 ] = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state",0
1619,<S2SV_ModStart> inode ) { <S2SV_ModEnd> return 0 ;,0
1620,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx, <S2SV_ModEnd>, cfg ) <S2SV_ModStart> vpx_codec_alg_priv_t * cfg <S2SV_ModEnd>, cfg )",0
1621,"<S2SV_ModStart> int vp9_filter_plane_size, const vpx_reader <S2SV_ModEnd> * uv_mb_ptr, <S2SV_ModStart> = 1 ; # if CONFIG_VP9_HIGHBITDEPTH vpx_prob <S2SV_ModEnd> ( xd -> <S2SV_ModStart> == 8 ) { vpx_prob <S2SV_ModEnd> ( uv_mbmi, <S2SV_ModStart> * uv_blk_stride, uv_stride, uv_stride <S2SV_ModEnd> uv_stride,",0
1622,"<S2SV_ModStart> len ) ; if ( bufp == '\\0' ) { define <S2SV_ModStart>, bufp, true <S2SV_ModEnd> ) ; }",0
1623,<S2SV_ModStart>,0
1624,<S2SV_ModStart> task_status ) ; <S2SV_ModEnd> continue ;,0
1625,"<S2SV_ModStart> int nbh ; unsigned char * iinfo ; struct udf_header * iinfo ; <S2SV_ModStart> unsigned int iinfo -> i_count ; if ( udf. ext ) { udf_read ( inode ) -> i_sb -> i_sb, inode ) ; if ( iinfo -> i_sb -> i_count > bs ) goto out ; if ( udf_read <S2SV_ModEnd> ( inode ) <S2SV_ModStart>, & iinfo -> i_sb -> i_sb -> i_sb -> i_sb ->",0
1626,"<S2SV_ModStart>, n ) ; if ( w == NULL ) return 0",1
1627,"<S2SV_ModStart> int i ; size_t idx = 0 ; <S2SV_ModStart> ( buf, & size_t )",0
1628,"<S2SV_ModStart> ) { const VP9_COMMON * const cm = & cm -> tile_worker_rows ; <S2SV_ModStart> int i ; <S2SV_ModEnd> int i ; <S2SV_ModStart> int i ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ( cm, 0, sizeof ( VP9_COMMON_COMMON * tile_rows ) ) <S2SV_ModStart> ) ) { <S2SV_ModEnd> const int i <S2SV_ModStart> int i ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) { # if CONFIG_VP9_HIGHBITDEPTH memcpy <S2SV_ModEnd> ( cm -> <S2SV_ModStart> int i, pbi -> tile_workers, num_workers, sizeof ( cm -> tile_workers ) ) ; for ( i = 0 ; i < num_workers ; ++ i ) { VPX_CODEC_ERROR ( & cm -> tile_workers, 0 ) ; ++ i ) ; for ( i = 0 ; i < num_workers ; ++ i ) { memset ( & cm -> tile_workers - 1, sizeof ( cm -> tile_cols ) ) ; for ( i = 0 ; ++ i < tile_worker_data -> tile_workers ; ++ i ) { vpx_malloc ( cm -> tile_workers, num_cols ) ; for ( i = 0 ;",0
1629,"<S2SV_ModStart> = get4 ; # ifdef LIBRAW_LIBRARY_LIBRARY_BUILD if ( <S2SV_ModStart> ( offset, 0, LIBRAW_LIBRARY_BUILD ) ; # endif",0
1630,<S2SV_ModStart> if (! fanout_mutex ) return - EINVAL ; if (,0
1631,"<S2SV_ModStart> -> seg ; vpx_clear_segment_state ( seg, seg ) ; if ( segfeature_active ( seg, seg ) ) { <S2SV_ModEnd> qindex = <S2SV_ModStart> i ] ; vpx_clear_state ( seg, seg, seg -> bit_delta_delta_delta_delta_to_qindex <S2SV_ModEnd> ) ; } <S2SV_ModStart> i ) { vpx_clear_segment_active ( seg, <S2SV_ModEnd> ) ; } <S2SV_ModStart> i ) { vpx_clear_segdata <S2SV_ModEnd> ( seg, <S2SV_ModStart> i ) ; vpx_clear_system_state ( seg, cm, i ) ; if ( i ) vpx_clear_state ( <S2SV_ModEnd> ) ; }",0
1632,<S2SV_ModStart> ; if ( net_protocol < 0 ) return - EINVAL ; if (,0
1633,"<S2SV_ModStart> ( void ) TIFFGetFieldDefaulted <S2SV_ModEnd> ( in,",1
1634,<S2SV_ModStart> -> error_code = get_pi <S2SV_ModEnd> ( ctx ->,0
1635,<S2SV_ModStart> ; for ( <S2SV_ModEnd> } if (,0
1636,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1637,"<S2SV_ModStart> ""corrupt <S2SV_blank> BSON"" ) ; VALIDATE_TEST ( ""corrupt <S2SV_blank> BSON"" ) ;",0
1638,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return - EINVAL,0
1639,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> ps_dec -> s_cur_slice_params_t,0
1640,<S2SV_ModStart> ) ) ; if (! ret,0
1641,<S2SV_ModStart> ; if ( key_data == NULL ) goto cleanup ; if (,0
1642,<S2SV_ModStart> ; ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> int ) ),0
1643,<S2SV_ModStart> mode ) { if (! task_cred ( mode ) ) return - EPERM ;,0
1644,"<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x80 ; state -> data [ 2 ] = 0x0 ; if ( dvb_usb_generic_rw ( d, state -> data, 3, state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x83 ; state -> data [ 2 ] = 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state -> data <S2SV_ModEnd>, 3, <S2SV_ModStart>, 3, state -> data <S2SV_ModEnd>, 1, <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; state -> data [ 1 ] = 0x83 ; state -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 2 ] = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> dvb_usb_generic_rw ( d, state",0
1645,"<S2SV_ModStart> int getnum ( <S2SV_ModEnd> const char * <S2SV_ModStart> * fmt, max = 0 <S2SV_ModEnd> ; do {",0
1646,<S2SV_ModStart> L ) ; g -> gcstate = GCSswpallgc ;,0
1647,<S2SV_ModStart> = 0 ; if (! ret ) return - EIO ;,0
1648,"<S2SV_ModStart> ) ) { if (! <S2SV_ModStart> ) ) { return NULL <S2SV_ModEnd> ( c -> <S2SV_ModStart> ) ; } memset ( c, 0, sizeof ( * buffer ) ) ;",0
1649,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> cib_remote_timeout = int <S2SV_ModStart> cib_remote_conn ) { struct cib * cib ; int ret = 0 ; memset ( & cib, 0, sizeof ( int ) ) ; cib_remote_socket ) { <S2SV_ModEnd> if ( cib <S2SV_ModStart> = 0 ; cib_connection_destroy <S2SV_ModEnd> ( private <S2SV_ModStart> -> session, <S2SV_ModEnd> ) ; } <S2SV_ModStart> = 0 ; memset ( &",0
1650,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> -> common ; } memset <S2SV_ModEnd> ( cpi ->,0
1651,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
1652,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MIN, 1 <S2SV_ModEnd>, regs,",1
1653,"<S2SV_ModStart> ( ndo, ""%s"", mrcv2_tstr <S2SV_ModEnd> ) ) ;",0
1654,"<S2SV_ModStart> ctx, expr -> unary. child",1
1655,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1656,"<S2SV_ModStart> int mptctl_do_mpt_ioctl ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; if ( <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } rc",0
1657,"<S2SV_ModStart> 1 ] ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1658,<S2SV_ModStart> jas_bytes <S2SV_ModEnd> ; jas_eprintf (,0
1659,<S2SV_ModStart> str ) ; if ( len < 0 ) {,0
1660,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int m ) { vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) ; return vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> 1 ) ; vpx_read <S2SV_ModEnd> ( r,",0
1661,<S2SV_ModStart> ; int is_valid = ( error == GIT_OK ) <S2SV_ModStart> giterr_clear ( ) <S2SV_ModEnd> ; error =,1
1662,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
1663,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> const cm -> fc = vpx_reader <S2SV_ModEnd> ( r, <S2SV_ModStart> * r ) vpx_reader <S2SV_ModEnd> ( r,",0
1664,"<S2SV_ModStart> ) ; } memset ( g, 0, sizeof ( int ) ) ;",0
1665,"<S2SV_ModStart> ; int res <S2SV_ModEnd> ; # if <S2SV_ModStart> ( res!= CONFIG_VP9_HIGHBITDEPTH <S2SV_ModEnd> ) fatal ( <S2SV_ModStart> frame_fmt = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( ""Failed <S2SV_blank> to <S2SV_blank> decode.\\n"" ) ) { fatal ( ""Failed <S2SV_blank> to <S2SV_blank> to <S2SV_blank> decode.\\n"" ) ; return - 1 ; } <S2SV_ModStart> stream. bml = 1 ; } # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( ""Failed <S2SV_blank> to <S2SV_blank> to <S2SV_blank> decode: <S2SV_blank> %s\\n"", ctx -> config. config. cfg. fmt ) || CONFIG_VP9_HIGHBITDEPTH ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> stream: <S2SV_blank> to <S2SV_blank> to <S2SV_blank> to <S2SV_blank> error: <S2SV_blank> %s\\n"", res <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( stream, res!= VPX_CODEC_MA <S2SV_ModEnd> ) fatal ( <S2SV_ModStart> ( ) ) ; error = ( ""Failed <S2SV_blank> to <S2SV_blank> frame: <S2SV_blank> %s\\n"", res",0
1666,"<S2SV_ModStart> case ND_TCHECK ( cp <S2SV_ModEnd> ( cp,",0
1667,<S2SV_ModStart> ;,0
1668,<S2SV_ModStart> if (! sk_peer_get_wake_disconnect ( sk ) ) ; <S2SV_ModStart> } if (! sk_peer_wake_disconnect ( sk ) ) ; <S2SV_ModStart> -> peer_wake_disconnect ; } <S2SV_ModEnd> } if (,0
1669,"<S2SV_ModStart> ret = 0, ret ) ; if (! name ) return - 1 ; <S2SV_ModStart> return - 1 ; <S2SV_ModEnd> ; } if",0
1670,<S2SV_ModStart> ; if ( skb -> len < sizeof ( struct nlattr ) ) return 0 ; if ( <S2SV_ModStart> -> nla_len > <S2SV_ModEnd> skb -> len <S2SV_ModStart> skb -> len - A,1
1671,"<S2SV_ModStart> ]. size ; if ( ~ length < 16 ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" )",1
1672,"<S2SV_ModStart> ; stbbr_send ( ""<message <S2SV_blank> type=\'chat\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'stabber@localhost\'>"" <S2SV_ModEnd> ""<received <S2SV_blank> xmlns=\'urn:xmpp:xmpp:0\'>"" ""<received <S2SV_blank> xmlns=\'stabber@localhost/profanity\'>""",0
1673,"<S2SV_ModStart> -> cac_id, serial -> len <S2SV_ModEnd> ) ; SC_FUNC_RETURN",1
1674,<S2SV_ModStart> 0 ; } tok -> bit_depth = 0 ; tok -> token_depth = 0 ;,0
1675,<S2SV_ModStart> ( av1 ) <S2SV_ModEnd> ( av1 ->,0
1676,<S2SV_ModStart> ( s ) <S2SV_ModEnd> ; GF_LOG_ERROR ( <S2SV_ModStart> ( s ) <S2SV_ModEnd> ) ; },0
1677,"<S2SV_ModStart> ; r = strncpy <S2SV_ModEnd> ( buf,",0
1678,<S2SV_ModStart> ; if ( ddp -> max_frames!= 0 ) return (,0
1679,<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> (! sock ||! sock ||! addrlen ) OE_RAISE_ERRNO ( OE_EINVAL ) ; addrlen_in = * addrlen ; if ( addrlen_out > OE_RAISE_ERRNO ( OE_EINVAL ) ;,0
1680,,1
1681,<S2SV_ModStart> return FALSE ; } if (! <S2SV_ModStart> type ) ) return FALSE,0
1682,"<S2SV_ModStart> final_p, final ; struct ipv6_txoptions * opt",0
1683,"<S2SV_ModStart> uint32_t max, <S2SV_ModStart> ; uint32_t max_height, sizeof ( uint32_t ) - 1, <S2SV_ModStart> ; int64_size, h, ksize,",0
1684,"<S2SV_ModStart> { dm9000WriteReg ( <S2SV_ModStart> ; dm9000ReadReg ( DM9000_EPCR, DM9000_EPCR_EPCR_ERPRW <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_EPCR_ERPRW <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPCR_ERPR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR_EPCR_EPCR <S2SV_ModEnd> ) ; }",0
1685,"<S2SV_ModStart>, buffer, t2p -> tiff_datasize,",1
1686,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",0
1687,<S2SV_ModStart>,0
1688,<S2SV_ModStart>,0
1689,"<S2SV_ModStart> new_parent ) { <S2SV_ModEnd> __ptrace_link ( child <S2SV_ModStart>, new_parent, current_cred ( ) <S2SV_ModEnd> ) ; }",1
1690,<S2SV_ModStart> ;,0
1691,<S2SV_ModStart> else { rc = 0 ; if ( private -> command == NULL ) { rc_close ( private -> command ) ; return rc ; } <S2SV_ModEnd> } if (,0
1692,<S2SV_ModStart> -> address = sizeof ( struct sockaddr_name ) <S2SV_ModEnd> ; if (,0
1693,"<S2SV_ModStart> = 0, MV_mv_mv <S2SV_ModEnd> * & cpi <S2SV_ModStart> = 0, sizeof ( int_mv ) <S2SV_ModEnd> ; MV_mv = <S2SV_ModStart> ( cpi -> best_mv, MAX_mv <S2SV_ModEnd> ) ; int <S2SV_ModStart> new_mv = 0 <S2SV_ModEnd> ; tmp_mv =",0
1694,<S2SV_ModStart> ; # endif TEMP_FAILURE_RETRY ( <S2SV_ModStart> handle ),0
1695,<S2SV_ModStart> body_to_large ) ; if <S2SV_ModEnd> ( child ->,0
1696,"<S2SV_ModStart> ( used_address && msg_sys -> msg_name && <S2SV_ModStart> -> name, msg_name, msg_name,",0
1697,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
1698,"<S2SV_ModStart> number_colormaps, number_planes, number_planes_filled <S2SV_ModStart> -> rows ; number_planes_filled = ( number_planes % 2 == 0 )? number_planes : number_planes + 1 ; <S2SV_ModStart> ( number_pixels * number_planes_filled <S2SV_ModEnd> )!= ( <S2SV_ModStart> ( number_pixels * number_planes_filled <S2SV_ModEnd> ) ) ThrowReaderException <S2SV_ModStart> -> rows * number_planes_filled <S2SV_ModEnd> ; pixel_info =",0
1699,<S2SV_ModStart> ( r = <S2SV_ModEnd> sshbuf_put_string_len ( b,0
1700,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1701,<S2SV_ModStart> c_data ) { <S2SV_ModEnd> if ( client <S2SV_ModStart> client -> name ) ; <S2SV_ModEnd> } free (,0
1702,<S2SV_ModStart> * uv ; if ( task == NULL ) return NULL ;,0
1703,<S2SV_ModStart> -> filesize = 0 <S2SV_ModEnd> ; x ->,0
1704,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1705,<S2SV_ModStart> ) ; goto out <S2SV_ModEnd> ; } if,0
