,raw_predictions,correctly_predicted
0,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( wmm,",0
1,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> if ( skb,0
2,,0
3,<S2SV_ModStart> * c ; <S2SV_ModEnd> if (!,0
4,"<S2SV_ModStart>, regs, <S2SV_ModEnd> regs, *",0
5,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
6,<S2SV_ModStart> <S2SV_null> <S2SV_null> static tran_low_t <S2SV_ModEnd> vp9 ( tran_low_t <S2SV_ModStart> input [ 2 ] = ( tran_low_t <S2SV_ModEnd> * input [ 4 <S2SV_ModStart> ] = ( tran_low_t <S2SV_ModEnd> * input [ 3 <S2SV_ModStart> ] = ( tran_low_t ) <S2SV_ModStart> input [ 3 ] = ( tran_low_t ) [ 3 ] = ( tran_low_t ) [ 3 ] = ( tran_low_t ) [ 3 ] = ( tran_low_t ) [ 3 ] = ( tran_t ) [ 3 ] = ( tran_low_t ) [ 3 ] = ( tran_low_t ) [ 3 ] = ( tran_low_t ) ; tran_low ( tran_t ) [ 3 ] = ( tran_low_t ) [ 3 ] = ( tran_low_t ) [ 3 ] = ( tran_low_t ) [ 3 ] = ( tran_low_t ) [ 3 ] = ( tran_low_t ) ; tran_low_low_t,0
7,"<S2SV_ModStart> = 0 ; unsigned char sense_buffer [ sense_buffer ] = sense_buffer ( cgc -> sense, sense, sense_buffer, sense ) ; if ( cgc -> sense, sense_buffer, sense_buffer, senseptr, senseptr, senseptr, sense_buffer, senseptr, sense_buffer, senseptr, senseptr, sense_buffer, senseptr, senseptr, sense_buffer, senseptr, senseptr, sense_buffer, senseptr, senseptr, senseptr, sense_buffer, senseptr, sense_buffer, sense_buffer, senseptr, senseptr, sense_buffer, senseptr, senseptr, senseptr, sense_buffer, senseptr, senseptr, sense_buffer, sense_buffer, senseptr, senseptr, senseptr, senseptr, senseptr, senseptr, sense_buffer, senseptr, senseptr, sense_buffer, senseptr, senseptr, senseptr, sense_buffer, senseptr, senseptr, sense_buffer, senseptr, sense_buffer, senseptr, senseptr, senseptr, senseptr, senseptr, senseptr, senseptr, senseptr, senseptr, sense_buffer, senseptr",0
8,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( & 0,0
9,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int filt_err ; int <S2SV_ModEnd> int filt_err ; int <S2SV_ModStart> = 0 ; int filt_err <S2SV_ModEnd> ; int filt_err <S2SV_ModStart> = 0 ; vp9_filter_filter_filter_filter_filter_filter_show <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; vp9_filter_filter_filter_filter_filter_filter_filter_min ( cpi, filt, sizeof ( cpi ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( sf_HIGHBITDEPTH ) { VP9_HIGHBITDEPTH if ( vp9_err ) { vp9_err = - 1 ; } # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HAND_HIGHBITDEPTH",0
10,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> return 0 ;,0
11,"<S2SV_ModStart> int vpx_writer * w, const vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> int mv ; vpx_writer <S2SV_ModEnd> * w = <S2SV_ModStart> ; vpx_writer <S2SV_ModEnd> ( w,",0
12,<S2SV_ModStart> == 0 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_128 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> = COAP_128 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_128 ; } else { <S2SV_ModStart> = COAP_128 ; },0
13,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",0
14,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> keyring_keyring_keyring_keyring_keyring_key ( & <S2SV_ModStart> keyring_keyring_keyring_keyring_keyring_key <S2SV_ModEnd> ) ; return <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
15,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> = 0 ;,0
16,<S2SV_ModStart> ; if (! sockaddr_len ) return - EINVAL ; if (,0
17,,0
18,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
19,<S2SV_ModStart> ; p = - 1 <S2SV_ModEnd> ; if (,0
20,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",0
21,<S2SV_ModStart> ; } } <S2SV_null>,0
22,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int motion_frame <S2SV_ModEnd> vp9_frame_frame_frame ( const TWO_PASS_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> frame ) { const FIRSTPASS_STATS * const FIRSTPASS_STATS * const FIRSTPASS_STATS * const FIRSTPASS_STATS * const FIRSTPASS_STATS * const FIRSTPASS_STATS * const FIRSTPASS_STATS * const FIRSTPASS_STATS ) { const FIRSTPASS_STATS * const FIRSTPASS_STATS * const FIRSTPASS_FRAME ; const FIRSTPASS_STATS * const FIRSTPASS_STATS * next_frame = twopass ; const FIRSTPASS_STATS * const FIRSTPASS_STATS * next_frame = cpi <S2SV_ModEnd> ; int motion_frame <S2SV_ModEnd> ; int motion_frame = <S2SV_ModStart> ; if ( <S2SV_ModEnd> ) return FIRSTPASS_FRAME <S2SV_ModEnd> ; } <S2SV_null>",0
23,<S2SV_ModStart> ; if ( inode -> i_inode ) goto out ;,0
24,<S2SV_ModStart> crypto_key ) ; strncpy <S2SV_ModEnd> ( & type,0
25,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
26,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> stream_GetRemainingLength ( Stream_GetRemainingLength,0
27,<S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; },0
28,"<S2SV_ModStart> ( path, pathlen <S2SV_ModEnd> ) ; return",0
29,<S2SV_ModStart> in ) ; <S2SV_ModEnd> return io ->,0
30,<S2SV_ModStart> value ) ; return ( value ) ;,0
31,<S2SV_ModStart> return ret ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
32,<S2SV_ModStart> ; vpx_codec_alg_priv_t res <S2SV_ModEnd> ; if (,0
33,"<S2SV_ModStart> int err ; mutex_lock ( & fanout_mutex ) { mutex_lock ( & fanout_mutex ) ; err = - EINVAL ; goto out ; } <S2SV_ModStart> size ) { mutex_lock ( & po -> fanout <S2SV_ModEnd> ) ; } <S2SV_ModStart> size ) { mutex_lock ( & po -> fanout, & po -> fanout <S2SV_ModEnd> ) ; } <S2SV_ModStart> size ) { mutex_mutex = - EINVAL ; goto out ; } <S2SV_ModEnd> if (! <S2SV_ModStart> size ) { mutex_unlock ( & po -> num_mutex ) ; err = - EINVAL ; goto out ; } <S2SV_ModEnd> if (! <S2SV_ModStart> size ) { mutex_unlock ( & po -> num_mutex ) ; err = - EINVAL ; goto out ; } <S2SV_ModEnd> return - EINVAL ; } <S2SV_ModStart> - EINVAL ; } <S2SV_ModEnd> if ( err <S2SV_ModEnd> rollover ) { mutex_unlock ( & <S2SV_ModStart> size ) { mutex_unlock ( & po -> num_mutex ) ; mutex_unlock ( & po -> num_mutex ) ; goto out ; } mutex_unlock ( & po -> num_mutex ) ;",0
34,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } if (,0
35,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
36,,0
37,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd>, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd>, ENC28J60_ECON1 ) <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd>, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd>, ENC28J60_ECON1 ) <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd>, ENC28J60_ECON1 ) <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd>, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd>, ENC28J60_ECON1, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( interface, ENC28J60_EC",0
38,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,0
39,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
40,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> vp9_rd_stride ( void <S2SV_ModStart> int mbmi_stride, vpx_stride <S2SV_ModEnd> ) { int <S2SV_ModStart> int mb_stride, mbmi_stride, mb_stride, mb_stride, mb_stride, mb_stride, cm -> uv_stride, mb_stride, y_stride, cm -> uv_stride <S2SV_ModEnd> ) ; } <S2SV_ModStart> ; } <S2SV_null> <S2SV_null>",0
41,"<S2SV_ModStart>, NULL, ptr, NULL <S2SV_ModEnd> ) ; ptr",0
42,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int error = <S2SV_ModStart> int error ; struct mb2_cache_mb_cache <S2SV_ModEnd> * bh = <S2SV_ModStart> int error ; struct mb2_cache_cache_entry_entry <S2SV_ModEnd> * bh = <S2SV_ModStart> mb_cache_cache ( bh, bh -> bh <S2SV_ModEnd>, bh <S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null>",0
43,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
44,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( struct ip_options_rcu <S2SV_ModEnd> * opt ->,0
45,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
46,<S2SV_ModStart> ) ; } if ( tp == NULL ) break ;,0
47,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & acl )",0
48,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
49,<S2SV_ModStart> } if ( (,0
50,"<S2SV_ModStart>, length ; <S2SV_ModEnd> if (!",0
51,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_opassoc ( struct <S2SV_ModStart> * inode, struct ip_rcu <S2SV_ModEnd> * xdr, <S2SV_ModStart> ; int iov_len <S2SV_ModEnd> ; unsigned char * <S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ; <S2SV_ModStart> return 0 ; } <S2SV_ModEnd> return 0 ;",0
52,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
53,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
54,"<S2SV_ModStart> = NULL ; memset <S2SV_ModEnd> ( addr,",0
55,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> int64_table_table_table_table ( int <S2SV_ModStart> = SQUASHFS ; long long long long long <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> = SQUASHFS_BLOCK_SIZE ; long long long long long <S2SV_ModEnd> ; if (,0
56,,0
57,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ;,0
58,<S2SV_ModStart> = 0 ; uint16 <S2SV_ModEnd> buff = 0,0
59,"<S2SV_ModStart> arg ) { if ( arg_arg == NULL ) { arg_arg = 1 ; } else { arg_arg = NULL ; } else { arg_arg = 1 ; } else if ( strcmp ( arg_arg, arg_arg, arg_arg, arg_arg, arg_arg, arg_arg, arg, arg_arg ) ) ; else if ( arg_arg ( arg_arg, arg_arg ) ) { arg_arg = 1 ; } else if ( str_arg ( arg_arg, arg_arg, arg_arg, arg_arg ) ) { fprintf ( arg_arg, arg_arg, arg_arg, arg_arg ) ; } else if ( str_arg ( arg_arg, arg_arg, arg_arg, arg_arg, arg, arg, arg_arg, arg_arg, arg_arg, arg_arg, arg_arg ) ) ; else if ( str_arg ( arg_arg, arg, arg_arg, arg_arg ) ) ) { fprintf ( arg_arg, arg_arg, arg_arg, arg_arg, arg_arg, arg, arg_arg ) ; } else if ( arg",0
60,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
61,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> out ; } ext_size = sizeof ( EXT4_I ( inode ) -> i_size ) ; ext_size = EXT4_I ( inode -> i_data, inode -> i_size ) ; memset ( & EXT4_I ( EXT4_I ( inode -> i_sb ), 0, 0, sizeof ( EXT4_I ( inode ) ) ) ) ;",0
62,<S2SV_ModStart> ; if ( <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
63,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
64,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
65,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
66,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
67,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
68,<S2SV_ModStart> } ret = - EINVAL ; if (,0
69,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { fmode",0
70,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
71,<S2SV_ModStart> ++ ) { if ( ps_codec -> ps_codec -> i4_pic_idx > ps_dpb_codec -> i4_pic_pic_idx ) { return ERROR ; },0
72,<S2SV_ModStart> ; if ( cmd == NULL &&,0
73,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
74,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> assign_eip_eip_near ( struct <S2SV_ModStart> ) { return rc <S2SV_ModEnd> ; } <S2SV_null>,0
75,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
76,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
77,,0
78,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int o_int i ; Py_comment = NULL ; Py_DECREF ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> field <S2SV_blank> field <S2SV_blank> \\"" ) ; return NULL ; } <S2SV_ModStart> * out = Py_DECREF ( * ) ; if (! Py_DECREF ( * ) { if (! Py_DECREF ( Py_DECREF ) ) return NULL ; } <S2SV_ModStart> = Py_DECREF ( o ) ; if (! Py_DECREF ( Py_DECREF ( Py_TYPE_NONE ) ) { if (! Py_DECREF ( Py_DECREF ) ) return NULL ; } else { Py_DECREF ( Py_DECREF ( Py_DECREF ) ; } <S2SV_ModStart> = Py_DECREF ( Py_DECREF ) ; if (! Py_DECREF ( & Py_DECREF ) ) { if (! Py_DECREF (! Py_DECREF ( Py_DECREF ) ) ) { Py_DECREF ( Py_DECREF ) ; Py_DECREF ( Py_DECREF ) ; return 1 ; }",0
79,,0
80,<S2SV_ModStart> = - 1 <S2SV_ModEnd> ; if (,0
81,,0
82,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ) ; return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
83,,0
84,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
85,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
86,<S2SV_ModStart> sk ) ; msg -> msg_namelen = 0 ;,0
87,<S2SV_ModStart> ; memcpy <S2SV_ModEnd> ( cpi ->,0
88,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
89,<S2SV_ModStart> { int ret <S2SV_ModEnd> ; if (,0
90,"<S2SV_ModStart> ; if ( CHILD ( n, 1 ) == NULL ) { n = CHILD ( n, CHILD ( n ), 1 ) ; return 1 ; } <S2SV_ModStart> } else { <S2SV_ModEnd> if (!",0
91,"<S2SV_ModStart> src ) ; memset <S2SV_ModEnd> ( src,",0
92,"<S2SV_ModStart> const xd, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>",0
93,"<S2SV_ModStart>, n ) { <S2SV_ModEnd> if ( n",0
94,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
95,,0
96,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int,0
97,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
98,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
99,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
100,,1
101,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
102,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj,",0
103,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ;,0
104,<S2SV_ModStart> NULL ) { status = MagickFalse ; break <S2SV_ModEnd> ; } image,0
105,<S2SV_ModStart> 0 ) ; if ( avio_feof ( s -> pb ) ) { ret = AVERROR_INVALIDDATA ; goto end ; },1
106,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
107,<S2SV_ModStart> * new_size ; size_t <S2SV_ModEnd> new_size = 0,0
108,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_wb_write_bit_bit_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> * wb ) vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
109,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
110,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,0
111,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
112,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static struct sctp_ip_chunk_id_t * sctp_id = sctp_hdr ; struct sctp_t * sctp_id = sctp_chunk_id_id_hdr ; if ( sctp_id == SCTP_PARAM_ADDRESS ) { sctp_IP_ADDRESS = sctp_IPV_ADDRESS ; sctp_IPV_ADDRESS = sctp_IPV4_ADDRESS ; sctp_id = true ; if ( err_code == SCTP_IPV6_ADDRESS ) { if ( err_code == SCTP_ADDRESS ) { if ( err_code == SCTP_ADDRESS ) { err_code = sctp_chunk_id_id_id ; sctp_id = sctp_id ; sctp_id_chunk_id ; sctp_id,0
113,<S2SV_ModStart> exit ; } m -> msg_namelen = 0 ;,0
114,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> return 0 ;,0
115,<S2SV_ModStart> -> strcpy <S2SV_ModEnd> ( c ->,0
116,"<S2SV_ModStart> vpx_codec_err_t cfg ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( cfg -> cfg. g_pass == 0 ) { if ( cfg -> cfg. g_mode == 0 || cfg -> cfg. g_pass == VPX_COMPRESSION_PASS ) cfg -> g_pass = 0 ; cfg -> cfg. g_pass = 0 ; # else if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( cfg -> cfg. g_mode == 0 || cfg -> cfg. g_lag > 0 || cfg -> cfg. g_lag > 0 ) { cfg -> g_pass = ( cfg -> g_w, cfg -> g_mode, cfg -> g_width, cfg. g_width, cfg -> g_width, cfg -> g_width, cfg -> g_width, cfg -> g_width, cfg. g_pass ) ; } else { assert ( cfg -> cfg -> cfg -> g_w. g_",0
117,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
118,"<S2SV_ModStart> int rc ; struct desc_struct old_desc ; struct x86_emulate_ops * ops = ctxt -> ops ; if ( ctxt -> ops!= X86EMUL_CONTINUE ) return X86EMUL_CONTINUE ; if ( ctxt -> ops!= X86EMUL_CONTINUE ) return X86EMUL_CONTINUE ; if ( ctxt -> ops!= X86EMUL_CONTINUE ) return X86EMUL_CONTINUE ; if ( ctxt -> ops!= X86EMUL_CONTINUE ) return rc ; if ( ctxt -> ops!= X86EMUL_CONTINUE ) return X86EMUL_CONTINUE ; rc = assign_far ( ctxt, X86EMUL_CONTINUE ) ; rc = assign_eip_far ( ctxt, X86EMUL_CONTINUE ) ; if ( ctxt -> mode!= X86EMUL_CONTINUE ) return X86EMUL_CONTINUE ; rc = assign_far ( ctxt, X86EMUL_CONTINUE ) ; if ( rc!= X86EMUL_CONTINUE ) return rc!= X",0
119,<S2SV_ModStart> info ; return <S2SV_null> <S2SV_null> <S2SV_null>,0
120,<S2SV_ModStart> ptr ) ; if (! zfound ) { GF_ISOM_INVALID_FILE ; zfound = GF_FALSE ; break ; } <S2SV_ModStart> ++ ) { zfound = GF_FALSE ; } if (! zfound ) { zfound = GF_ISOM_INVALID_FILE ; zfound = GF_FALSE ; zfound = GF_INVALID_FILE ; zfound = GF_FALSE ; zfound = GF_TRUE ; zfound = GF_TRUE ; zfound = GF_TRUE ; zfound = GF_TRUE ; zfound = GF_TRUE ; zfound = GF_TRUE ; zfound = GF_TRUE ; zfound = GF_TRUE ; zfound = GF_TRUE ; zfound = GF_TRUE ; break ; } <S2SV_ModStart> } if (,0
121,<S2SV_ModStart>. get_alg_priv ( ctx ),0
122,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { fmode <S2SV_ModStart> * state = fmode <S2SV_ModEnd> ; switch ( <S2SV_ModStart> ( state == 0 ) { fmode = fmode <S2SV_ModEnd> ; switch (",0
123,<S2SV_ModStart> read_info ) ; <S2SV_ModEnd> if ( EOFBlob,1
124,<S2SV_ModStart> size ) ; memset ( mem ) ;,0
125,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY (,0
126,<S2SV_ModStart> ; if ( c -> height <= 8 ) return AVERROR_INVALIDDATA ; if (,0
127,<S2SV_ModStart> length ) ; if ( length < 0 ) return - 1 ;,0
128,,0
129,<S2SV_ModStart> dev ) ; <S2SV_ModEnd> return rc ;,0
130,<S2SV_ModStart> ; vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> ; if (,0
131,"<S2SV_ModStart> ( interface, 0 <S2SV_ModEnd> ) ; return",0
132,<S2SV_ModStart> inet_addr && inet_addr,0
133,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
134,<S2SV_ModStart> { rq = <S2SV_ModEnd> off = rq,0
135,,0
136,<S2SV_ModStart> goto out ; <S2SV_ModEnd> if ( msg,0
137,<S2SV_ModStart> skb ) ; if ( skb -> len < sizeof ( struct skb ) ) return 0 ;,0
138,"<S2SV_ModStart> ; arg -> xprintf <S2SV_ModEnd>, arg ->",0
139,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
140,<S2SV_ModStart> err ; } <S2SV_ModEnd> return err ;,0
141,"<S2SV_ModStart>, fp = 0 <S2SV_ModEnd> ; if (",0
142,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return 0 ;,0
143,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
144,<S2SV_ModStart> length ) ; <S2SV_ModEnd> return 0 ;,0
145,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { ret = - EFAULT ; } <S2SV_ModEnd> if (!",0
146,,0
147,<S2SV_ModStart> return - EINVAL ; if (,0
148,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int rcx = <S2SV_ModStart> = X86EMUL_MODE_PROT64 rdx ; reg_read_read ( ctxt, VCPU_REGS_REGS_REQ ) ; if ( rcx!= X86EMUL_CONTINUE ) { rdx = rdx ; rdx = X86EMUL_CONTINUE ; rdx = rdx ; reg_read ( ctxt, X86EMUL_CONTINUE ) ; rdx = X86EMUL_CONTINUE ; rdx = X86EMUL_CONTINUE ; rdx = X86EMUL_CONTINUE ; rdx = rdx ; reg_read ( ctxt, X86EMUL_CONTINUE ) ; return X86EMUL_CONTINUE ; }",0
149,"<S2SV_ModStart> const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_prob <S2SV_ModEnd> * probs,",0
150,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * input,",0
151,<S2SV_ModStart> return - 1 <S2SV_ModEnd> ; if (,0
152,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> x4 ( tran_low_t <S2SV_ModStart> * input, const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> 0 ] = ( tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x4 = ( tran_t <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x4 = ( tran_low_t <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> 0 ] = ( tran_low_t ) tran_low_t <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> 1 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModEnd> x4 = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 1, tran_",0
153,<S2SV_ModStart> ; flags = 0 <S2SV_ModEnd> ; if (,0
154,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
155,"<S2SV_ModStart> tot_len ) ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
156,<S2SV_ModStart> ; if ( mnt_flags |= MNT_LOCK_NODEV <S2SV_ModEnd> ; if (,0
157,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_SEG ( VP9_COMMON * cm, MACROBLOCKD * mi_segment_segment_segment_segment_id ( cm, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_cols, mi_col, mi_cols, mi_col, mi_cols, mi_cols, mi_cols, mi_cols, mi_cols, mi_cols, mi_cols, mi_cols, mi_cols, mi_cols, mi_cols, mi_cols, mi_cols, mi_cols, mi_cols, mi_cols, mi_cols, mi_cols, mi_cols, mi_cols, mi_cols, mi_cols, mi_cols, mi_cols, mi_cols, mi_cols,",0
158,,0
159,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
160,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
161,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
162,<S2SV_ModStart> ) ) { memcpy <S2SV_ModEnd> ( cpi ->,0
163,"<S2SV_ModStart> data ) { int ret ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret =",0
164,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
165,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static vpx_codec_t <S2SV_ModEnd> ( ctx, <S2SV_ModStart> ; vpx_codec_err_t <S2SV_ModEnd> ; vpx_free (",0
166,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
167,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
168,,0
169,<S2SV_ModStart> = getnum (,0
170,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
171,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
172,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> init ( struct,0
173,"<S2SV_ModStart> { sprintf ( outputbuffer <S2SV_ModEnd>, ""%s"",",0
174,,0
175,,0
176,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj,",0
177,<S2SV_ModStart> ; if ( ( mnt_flags & MNT_LOCK_NODEV ) &&! ( mnt_flags & MNT_LOCK_ATIME ) ) { return - EPERM ; } if ( ( ( ( mnt -> mnt_flags & MNT_LOCK_ATIME ) ) { return - EPERM ; } if ( ( ( ( ( mnt -> mnt_flags & MNT_LOCK_ATIME ) ) == - EPERM ) ) { err = - EPERM ; return - EPERM ; } if ( ( ( ( ( ( ( mnt -> mnt_flags & MNT_LOCK_ATIME ) ) ) == - EPERM ) ) { return - EPERM ; } },0
178,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
179,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
180,"<S2SV_ModStart> ( msg_name, msg_name <S2SV_ModEnd> -> msg_name,",0
181,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> int bd_blocks_blocks_blocks ( struct <S2SV_ModStart> int bhdr ; int bhdr ; uint8_t d_blocks_blocks_blocks_blocks = 0 ; int bh = 0 ; int bh = 0 ; int nb_blocks = 0 ; int bh = 0 ; <S2SV_ModStart> = 0 ; if (! inode ) { if (! bh -> bh. b_blocks ) { if (! bhdr. bhdr. bhdr. bh. bhdr. bsize ) { int bh = 0 ; goto out ; } <S2SV_ModStart> = 0 ; if (! bsize ) { if (! is_decode ) { goto out ; } bh = bhdr -> bhdr. bhdr. bs. bsize ) ; if (! bsize ) { if (! bsize ) goto out ; <S2SV_ModStart> = 0 ; bsize ) { if (! bsize ) goto out ; <S2SV_ModStart> = 0 ; goto out ; },0
182,<S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if (! ( screen_svc ) ) { return ( 1 ) ; },0
183,,0
184,<S2SV_ModStart> ; fname = fp <S2SV_ModEnd> ; if (,0
185,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
186,"<S2SV_ModStart> { if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
187,<S2SV_ModStart> ; if ( <S2SV_ModEnd> size > 0,0
188,"<S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR_ISR <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_ISR <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( interface, KSZ8851_ISR_ISR, KSZ8851_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_ISR, KSZ8851_",0
189,"<S2SV_ModStart> void write_b ( struct vpx_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
190,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
191,<S2SV_ModStart> ; if ( id == NULL ) goto err ;,0
192,,0
193,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int mi_row, MACROBLOCKD * xd <S2SV_ModEnd>, int mi_row <S2SV_ModStart> = xd -> mbmi_row, xd_row, x_row, xd -> mi_row, x_row, xd -> mi_row, bsize <S2SV_ModEnd>, bsize, <S2SV_ModStart>, bsize, bsize, xd -> <S2SV_ModStart>, bsize, bsize, xd -> <S2SV_ModStart>, bsize, xd <S2SV_ModEnd>, bsize, <S2SV_ModStart>, bsize, xd <S2SV_ModEnd>, bsize, <S2SV_ModStart>, bsize, bsize, bsize, <S2SV_ModStart>, bsize, xd <S2SV_ModEnd> ) ; if",0
194,<S2SV_ModStart> name ) ; <S2SV_ModEnd> return value ;,0
195,<S2SV_ModStart> key_ref ) ; ret = key_read_ref ( key ) ; if ( ret < 0 ) goto error2 ;,0
196,<S2SV_ModStart> u4_first_slice_in_pic = 1 ; ps_dec -> u4_first_slice_in_pic = 1 ; if ( ps_dec -> u4_first_first_slice_in_in_in_pic ( ps_dec ) ) { ret = ps_decoded ; },0
197,<S2SV_ModStart> src_reg ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
198,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
199,"<S2SV_ModStart> & fl6, rcu_dereference (",0
200,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
201,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> vp9_frame_ctx ( VPX_CODEC_CONTEXT <S2SV_ModStart> * const VPX_CODEC_ENCODEC_LOG_CONTEXT <S2SV_ModEnd> * const int i <S2SV_ModStart>, svc_ctx, svc_log_ctx <S2SV_ModEnd>, svc_ctx, <S2SV_ModStart>, svc_ctx, svc_ctx -> avg_frame_frame_frame_ctx <S2SV_ModEnd>, svc_ctx, <S2SV_ModStart> i ] ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( svc_per_svc!= VPX_CODEC_LOG_LOG_CONTEXT ) { int svc_frame [ i ] = 0 ; svc_frame_ctx -> svc_frame [ i ] ; int i ] = 0 ; svc_log ( svc_ctx, svc_ctx, svc_ctx, svc_ctx, svc_ctx -> svc_ctx, svc_ctx, svc_ctx -> svc_ctx, svc_ctx, svc_",0
202,<S2SV_ModStart> ; if ( screen == NULL ) return NULL ;,0
203,"<S2SV_ModStart> char * end, const char * end <S2SV_ModStart> const char * end <S2SV_ModEnd> ; if ( <S2SV_ModStart> == '\\0' ) { <S2SV_ModEnd> if (! <S2SV_ModStart> return - 1 ; } <S2SV_ModEnd> if (!",0
204,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
205,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( src,0
206,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
207,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",1
208,,0
209,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static VP9_COMMON * const <S2SV_ModStart> -> common ; MACROBLOCK * const tile = & cpi -> mi_row ; MACROBLOCKD * const xd = & cpi -> mi_row ; MACROBLOCKD * const xd = & xd -> mi_row ; MACROBLOCKD * const xd = & cpi -> mi_row ; MACROBLOCKD * const xd = & cpi -> mi_row ; <S2SV_ModStart> -> mbmi_row, mi_row, mi_row, mi_row <S2SV_ModEnd> ; MODE_INFO <S2SV_ModStart> -> mbmi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row <S2SV_ModEnd> ) ; } <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ) ; memset <S2SV_ModEnd> ( & cpi <S2SV_ModStart> -> mb, mi_row, mi_row, mi_row, mi_row, mi_row <S2SV_ModEnd> ) ; }",0
210,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return err ;,0
211,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
212,<S2SV_ModStart> mnt ) ; nd -> last_type = LAST_BIND ;,1
213,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_options_get_options ( struct ip_options_options <S2SV_ModStart> ) { struct ip_options_options_rcu <S2SV_ModEnd> * optlen ; <S2SV_ModStart> return 0 ; } <S2SV_ModEnd> if ( opt,0
214,,0
215,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
216,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
217,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
218,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
219,"<S2SV_ModStart> ; if ( EOFBlob ( image )!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
220,<S2SV_ModStart> len ; } ND_TCHECK ( bp [ 0 ] ) ;,0
221,,0
222,<S2SV_ModStart> * row ; jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t,0
223,,0
224,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } if (,0
225,"<S2SV_ModStart>, int ret <S2SV_ModEnd> ; if (",0
226,<S2SV_ModStart> ; if ( <S2SV_ModEnd> size_t ),0
227,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if (,0
228,,0
229,<S2SV_ModStart> ; } else { memcpy <S2SV_ModEnd> ( c ->,0
230,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> ++ j ; tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> out [ 4 <S2SV_ModStart> 4 ] ; tran_low_t <S2SV_ModEnd> * output,",0
231,<S2SV_ModStart> goto out ; <S2SV_ModEnd> } if (,0
232,"<S2SV_ModStart> char * filename, const char * fp <S2SV_ModEnd> ) { int <S2SV_ModStart> ) ; } <S2SV_ModEnd> if (!",0
233,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
234,"<S2SV_ModStart> NULL ) ; ND_TCHECK ( * tptr, tptr ) ;",0
235,,0
236,"<S2SV_ModStart> * s ; struct stream packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_protocol_error ( ""consume <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> consume <S2SV_blank> overrun"", & packet ) ; } if (! s_rem ( s, & packet ) ) { rdp_protocol_read_rem ( s, & packet ) ; } if (! s_rem ( s, & packet ) ) { rdp_protocol_protocol_protocol_protocol_error ( ""consume <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> of <S2SV_blank> overrun"", & packet ) ; }",0
237,<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; if,0
238,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src,",0
239,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( fc,0
240,"<S2SV_ModStart> -> y = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f,",0
241,<S2SV_ModStart> src ) ; <S2SV_ModEnd> src -> src,0
242,<S2SV_ModStart> ; cpi -> common ; memset <S2SV_ModEnd> ( cpi ->,0
243,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( tcount ) ) ;",0
244,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY (,0
245,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
246,,0
247,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return 0 ;,0
248,"<S2SV_ModStart>, * prog ; if (! flags ) return 0 ;",0
249,<S2SV_ModStart> ; if ( id == 0 &&,0
250,<S2SV_ModStart> ; if ( <S2SV_ModEnd> count > 0,0
251,<S2SV_ModStart> ) ; } mutex_lock ( & timer_irq -> timer_list ) ;,0
252,<S2SV_ModStart> u1_dpb_commands_read ) ; if ( ps_dec -> u4_dpb_commands_commands_dpb_commands_commands_read ) { ps_dec -> u4_dpb_commands_dpb_commands_commands_commands_read = 0 ; },0
253,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int,0
254,<S2SV_ModStart> return ret ; <S2SV_ModEnd> } if (,0
255,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [",0
256,<S2SV_ModStart> bus ) ; <S2SV_ModEnd> return 0 ;,0
257,<S2SV_ModStart> size ) ; msg -> msg_namelen = 0 ;,0
258,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
259,"<S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
260,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
261,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
262,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
263,<S2SV_ModStart> ; if ( kz == NULL ) return ERR_INVALID_null>,0
264,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> np -> opt ) ; rcu_read_unlock (",0
265,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> { VP9_COMMON * cpi <S2SV_ModEnd> ; int cpi <S2SV_ModStart> ; if ( cpi -> oxcf. mv_mode == KEY_FRAME ) { return VP9_COMMON * ctx = & cpi -> oxcf. sf. sf. sf ; } else { ctx = cpi -> oxcf. sf. sf. sf ; } else { if ( cpi -> oxcf. mode == KEY_FRAME ) { ctx = ctx -> sf. sf. sf. sf. mode ; } else { ctx = ctx -> oxcf. sf. sf. sf. mode ; } else { VPX_COUNTS * ctx = ctx -> oxcf. scaling_mode ; } else { VPX_COUNTS * cpi -> oxcf. mode = cpi -> oxcf. mode ; } else { cpi -> oxcf. mode ; } else { ctx = ctx -> oxcf. mode ; } else { cpi -> oxcf.,0
266,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1,0
267,,0
268,<S2SV_ModStart> size ) { size_t <S2SV_ModEnd> ; if (,0
269,<S2SV_ModStart> ; if ( sock == NULL ) return - EINVAL ; if (,0
270,"<S2SV_ModStart> PERF_COUNT_SW_EMULATION_FAULTS, 1 <S2SV_ModEnd>, regs,",0
271,"<S2SV_ModStart> ctxt ) { int rc = assign_eip_eip ; rc = <S2SV_ModStart> ctxt ) ; rc = assign_eip_eip <S2SV_ModEnd> ( ctxt, <S2SV_ModStart> ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) return rc",0
272,"<S2SV_ModStart> list. name, true",1
273,,0
274,<S2SV_ModStart> ; r = TEMP_FAILURE_RETRY ( <S2SV_ModStart> b ) ),0
275,,0
276,<S2SV_ModStart> cmd ) ; <S2SV_ModEnd> } if (,0
277,,0
278,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
279,"<S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
280,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> == 0 ) return rc <S2SV_ModEnd> ; } <S2SV_null>,0
281,,1
282,<S2SV_ModStart> ret ; } <S2SV_ModEnd> return res ;,0
283,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> psf_init ( psf <S2SV_ModStart> psf_header ) { if ( psf >= psf -> header. indx >= psf -> header. indx ) { psf_decode = psf_init ( psf -> header. indx, psf -> header. indx, psf_header. indx ) ; psf_read ( psf -> header. indx, psf_header. indx ) ; psf_read ( psf, psf -> header. indx, psf -> header. indx ) ; psf_init ( psf -> header. indx, psf_header. indx, psf_header. indx, psf -> header. indx <S2SV_ModEnd> ) ; psf <S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd>, psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( psf -> header. indx, psf -> header. indx <S2SV_ModEnd> ) ; psf <S2SV_ModStart> ( psf -> header. indx, psf -> header. indx <S2SV_ModEnd> ) ; psf <S2SV_ModStart> ( psf",0
284,,0
285,,0
286,"<S2SV_ModStart> perf_event * ctx <S2SV_ModEnd>, struct perf_context *",0
287,<S2SV_ModStart> ; # if CONFIG_VP9_COMMENTS <S2SV_ModEnd> ( ctx ->,0
288,<S2SV_ModStart> uint8_t * tlen <S2SV_ModEnd> ; if (,0
289,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
290,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src,",0
291,"<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( bh,",0
292,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } if (,0
293,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
294,,0
295,<S2SV_ModStart> ; if ( c == NULL ) return (,0
296,<S2SV_ModStart> offset + offset <S2SV_ModEnd> ; if (,0
297,<S2SV_ModStart> ( server. ds_enabled <S2SV_ModEnd> ) server.,0
298,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
299,,0
300,"<S2SV_ModStart> RBUF ) { sprintf ( outputbuffer, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12, <S2SV_blank> %12, <S2SV_blank> %12, <S2SV_blank> %12, <S2SV_blank> %12.3f <S2SV_blank> %12, <S2SV_blank> %12, <S2SV_blank> %12, <S2SV_blank> %12, <S2SV_blank> %12, <S2SV_blank> %12, <S2SV_blank> %12",0
301,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
302,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
303,<S2SV_ModStart> ; if ( count > OE_SSIZE_MAX ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
304,"<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * ) <S2SV_ModStart> ( opt ) { atomic_sub ( & sk -> tot_len, & sk -> tot_omem_alloc ) ; return 0 ; } <S2SV_ModStart> ( opt ) { atomic_sub ( & sk -> tot_len, & sk -> tot_len ) ; }",0
305,<S2SV_ModStart> ; rcu_read_lock ( ) ; rcu_dereference (,0
306,"<S2SV_ModStart> sock ) ; memset ( sctp, 0, 0, sizeof ( sctp ) ) ;",0
307,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int,0
308,<S2SV_ModStart> task ) { <S2SV_ModEnd> del_timer ( & <S2SV_ModStart> -> timer ) <S2SV_ModEnd> ; complete (,1
309,"<S2SV_ModStart> ; if ( safe_calloc <S2SV_ModEnd> ( file,",0
310,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
311,"<S2SV_ModStart>. x ; memset <S2SV_ModEnd> ( x,",0
312,"<S2SV_ModStart> NEED_IP ( 1, <S2SV_ModStart> NEED_IP ( 1 <S2SV_ModStart> NEED_IP ( t, <S2SV_ModEnd> 3 ) ; <S2SV_ModStart> NEED_IP ( 1 <S2SV_ModStart> NEED_IP ( 1, <S2SV_ModEnd> 3 ) ; <S2SV_ModStart> NEED_IP ( t <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( 1 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> HAVE_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP ( 0 <S2SV_ModStart> NEED_IP ( t, 0 <S2SV_ModStart> NEED_IP (",0
313,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ; goto out_out <S2SV_ModEnd> ; } if,0
314,"<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
315,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
316,<S2SV_ModStart> ; } } if (,0
317,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
318,<S2SV_ModStart> = 0 ; ( void ) mb ;,0
319,<S2SV_ModStart> ; printf ( - 1 <S2SV_ModEnd> ) ; },0
320,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
321,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> ) ; } exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
322,<S2SV_ModStart> -> peer. auth_capable = new -> peer. auth_capable ; asoc -> peer.,1
323,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> vp9_rd_rd_rd_mode ( VP9_COMP <S2SV_ModEnd> ) { MACROBLOCKD <S2SV_ModStart> = 0 ; PREDICTION_MODE <S2SV_ModEnd> MACROBLOCKD <S2SV_ModStart> = 0 ; PREDICTION_MODE <S2SV_ModEnd> best_mode ; PREDICTION_MODE <S2SV_ModStart> best_mode ; PREDICTION_MODE <S2SV_ModEnd> best_mv_mode_rd_mode = vp9_rd_rd_rd_rd_rd_mode_rd_rd_rd_mv_rd_rd_rd_rd_mode_costsse ( cpi, MAX_FRAME ) ; MACROBLOCKD * mbmi_MODE <S2SV_ModEnd> ; int <S2SV_ModStart> = 0 ; PREDICTION_MODE <S2SV_ModEnd> ; PREDICTION_MODE <S2SV_ModEnd> ; best_mode = <S2SV_ModStart> best_mode ; PREDICTION_MODE <S2SV_ModEnd>, MB_MODE_MODE_MODE <S2SV_ModStart> best_mode ) { PREDICTION_MODE <S2SV_ModEnd> ; PREDICTION_MODE_SUPPORTEDICTION_MODE <S2SV_ModStart> best_",0
324,<S2SV_ModStart> ; if ( <S2SV_ModEnd> h -> h,0
325,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
326,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_idx, <S2SV_ModStart> ; vpx_codec_err_t * ctx <S2SV_ModEnd> ; vpx_codec_t * <S2SV_ModStart> ; vpx_codec_err_t * ctx <S2SV_ModEnd> ; vpx_t * <S2SV_ModStart> ; vpx_codec_err_t <S2SV_ModEnd> ; vpx_codec_t * <S2SV_ModStart> ; vpx_codec_err_t <S2SV_ModEnd> ; vpx_codec_t",0
327,,0
328,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static char * p <S2SV_ModEnd> ; int error <S2SV_ModStart> goto error ; int error = 0 ; int error = 0 ; int error = 0 ; int error = 0 ; int error = 0 ; <S2SV_ModStart> goto error ; if ( p [ 0 ] == '\\0' ) { if ( p [ 0 ] == '\\0' ) return error ; } if ( p [ 0 ] == 0 ] == '\\0' ) { error = - 1 ; } if ( p [ 0 ] == '\\0' ) { error = EPERM ; } if ( p [ 1 ] == - 1 ] ) { error = - EPERM ; } if ( ( ( error ) == '\\n"" ) { error = - EINVAL ; return error ; } } } <S2SV_ModStart> goto error ; } if ( p [ 1 ] == '\\n"" ) { error ( p [ 1 ] ) ; } if ( ( p [ 1 ] ) ) { error = - EPERR ( error ) ; return ( - 1 ) ; } if ( ( ( error ) { error ) ; } if ( (",0
329,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct <S2SV_ModStart> inode ) { struct i_info * bh = bh ; bh = bh -> b_len - EINVAL ; if ( inode -> b_len - EINVAL ; if ( <S2SV_ModEnd> inode -> bs <S2SV_ModStart> inode ) goto out <S2SV_ModEnd> ; bh =,0
330,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
331,"<S2SV_ModStart> rq ) ; blk_set_ops ( q, flags ) ;",0
332,<S2SV_ModStart> uint32_t val ; uint32_t val ; uint32_t val <S2SV_ModEnd> ; val =,0
333,"<S2SV_ModStart>, * prog ; if (! flags ) return 0 ;",0
334,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
335,<S2SV_ModStart> ) ) { if ( unlikely ( cmd. pCmd_param_size > 0 ) { return - EINVAL ; },0
336,"<S2SV_ModStart> ""`%s\'"", option ) ; geometry = DestroyString ( geometry",0
337,<S2SV_ModStart> ; rcu_read_lock ( ) ; rcu_dereference (,0
338,<S2SV_ModStart> = 0 ; kfree ( key_data ) ;,0
339,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
340,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
341,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
342,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
343,<S2SV_ModStart> g ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
344,<S2SV_ModStart> * data ; jas_uchar <S2SV_ModEnd> = 0 ;,0
345,<S2SV_ModStart> ; memcpy <S2SV_ModEnd> ( (,0
346,<S2SV_ModStart> 2 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
347,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> * p ; int len ; char * p = NULL ; char * p = NULL ; if ( * p == NULL ) return NULL ; if ( * p == NULL ) return NULL ; if ( * p == NULL ) return NULL ; if ( * p == Py_DECREF ( * p, * p ) return NULL ; if ( * p == NULL ) return NULL ; if ( * p == '\\0' ) return NULL ; if ( * p == '\\0' ) return NULL ; if ( * p == '\\0' ) return AVERROR_INVAL ; if ( * p == '\\0' ) return NULL ; if ( * p == '\\0' ) return NULL ; if ( * p == Py_DECREF ( * p ) return NULL ; if ( * p == '\\0' ) return AVERROR_INVAL ; if ( * p == '\\0' ) { return NULL ; } return NULL ; } while ( * p == '\\0' ) { Py_DECREF ( * p ) ; return NULL ; } if ( *",0
348,<S2SV_ModStart> char * buf <S2SV_ModEnd> ; uint32_t <S2SV_ModStart> ; if ( safe_calloc <S2SV_ModEnd> ( strcmp ( <S2SV_ModStart> ) == 0 || <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
349,<S2SV_ModStart> -> buffer ; if (! ctx -> gf128 ) return - ENOKEY ;,1
350,"<S2SV_ModStart> int vpx_write_bit_literal <S2SV_ModEnd> * w,",0
351,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi ->,0
352,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
353,<S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> } } ps_dec,0
354,"<S2SV_ModStart>, NULL ) <S2SV_ModEnd> ; if (",0
355,<S2SV_ModStart> ; err = - EINVAL <S2SV_ModEnd> ; err =,0
356,"<S2SV_ModStart> -> rows ; number_planes_filled <S2SV_ModEnd> ( number_filled, <S2SV_ModStart> -> rows * number_planes_filled <S2SV_ModEnd>, number_filled, <S2SV_ModStart> -> rows ) ; if ( number_planes == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageData"" ) ; <S2SV_ModStart> -> rows = ( number_planes_planes_filled <S2SV_ModEnd> ( number_planes_planes_filled, <S2SV_ModStart> -> rows * number_planes_filled <S2SV_ModEnd> ) ; if",0
357,<S2SV_ModStart> state ) ; state -> state = 0 ;,0
358,<S2SV_ModStart> ctx ) ; <S2SV_ModEnd> return res ;,0
359,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
360,"<S2SV_ModStart> ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, length )",0
361,<S2SV_ModStart> ioc ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
362,"<S2SV_ModStart> } if ( lookup_attr_id <S2SV_ModEnd> ( obj,",0
363,<S2SV_ModStart> goto out ; } <S2SV_ModEnd> if (!,0
364,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_event *",0
365,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> intra_mode_mode_mode_mode_mode ( PREDICTION_MODE <S2SV_ModStart> cm, vpx_prob <S2SV_ModEnd> y_mode, vpx_prob <S2SV_ModEnd> * r,",0
366,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
367,<S2SV_ModStart> key ) ; if ( key == NULL ) return NULL ;,0
368,"<S2SV_ModStart> i, NULL <S2SV_ModEnd> ) ; }",0
369,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
370,"<S2SV_ModStart> += dif ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
371,,0
372,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int vpx_write_bit_buffer ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * p, const vpx_write_bit <S2SV_ModEnd> * w, <S2SV_ModStart> p ) ; vpx_write_bit <S2SV_ModEnd> ( w,",0
373,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_write_bit_buffer ( struct vpx_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> data ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
374,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
375,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
376,<S2SV_ModStart> ) ) ; goto error <S2SV_ModEnd> ; } if,0
377,<S2SV_ModStart> ) ; } if (! ub ) { usb_err ( urb ) ; goto out ; },0
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
379,"<S2SV_ModStart> mntent, rootfs_entry * rootfs",0
380,"<S2SV_ModStart> void encode_buffer ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> cm ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
381,"<S2SV_ModStart> ( req_val ) ; MRB_REQUEST_REQUEST <S2SV_ModEnd> ( req,",0
382,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
383,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
384,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
385,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
386,<S2SV_ModStart> ) ) return <S2SV_ModEnd> ; if (,0
387,"<S2SV_ModStart> str ) { strcpy <S2SV_ModEnd> ( str,",0
388,,1
389,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> output_utf8 ( input ) fclose ( input ) ; <S2SV_ModStart> input ) ; if ( fclose ( input )!= MagickFalse ) { fclose ( input ) ; return ( EINVAL ; },0
390,,0
391,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> pw_w_w ( int <S2SV_ModStart> * pw, const char * pw = NULL <S2SV_ModEnd> ; char *",0
392,,0
393,,0
394,"<S2SV_ModStart> jid ) { char * stanza_create ( stanza_jid, stanza_jid ) ; const char * stanza_jid = jid_jid ( stanza_create ( stanza_jid ) ; J_jid ( stanza_jid, stanza_jid, stanza_jid ) ; stanza_jid ( stanza_jid, stanza_jid ) ; }",0
395,"<S2SV_ModStart> ( arg, NULL <S2SV_ModEnd> ) ; }",0
396,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
397,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
398,<S2SV_ModStart> } else { if ( ps_dec -> u4_offset > ps_dec -> u4_max_max_dec ) { ps_decode_decode_decode_error = 0 ; },0
399,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
400,<S2SV_ModStart> ; if (! get_alg_priv ( ctx ) ) return 0 ; } if (,0
401,<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; L_BUFS,0
402,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
403,,0
404,<S2SV_ModStart> ; if ( i == NULL ) { i = MagickFalse ; } if (,0
405,"<S2SV_ModStart> write_literal vpx_write_literal <S2SV_ModEnd> * w, <S2SV_ModStart> write_literal ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> wb ) ; vpx_write_literal <S2SV_ModEnd> ( w,",0
406,<S2SV_ModStart> if ( ent == NULL ) { kdbgoto cleanup ; },0
407,<S2SV_ModStart> ++ ) { if ( ps_codec -> ps_codec -> i4_pic_idx > ps_dpb_codec -> i4_pic_pic_idx ) { return ERROR ; },0
408,"<S2SV_ModStart> ( psf, "" <S2SV_ModEnd> ) ; }",0
409,<S2SV_ModStart> ; if ( <S2SV_ModEnd> d -> msg,0
410,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; break ; }",0
411,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src,",0
412,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
413,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
414,"<S2SV_ModStart> ( req, <S2SV_ModEnd> unsigned char *",0
415,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
416,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
417,<S2SV_ModStart> size ) { ASSERT_NO_SIZE_OVERFLOW ( size ) ;,1
418,<S2SV_ModStart> ; ssize_t ssize = 0,0
419,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
420,"<S2SV_ModStart> ( req ) ; memcpy <S2SV_ModEnd> ( req,",0
421,<S2SV_ModStart> ; sb -> rmtvaluelen = 0 ; if (,0
422,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
423,"<S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
424,<S2SV_ModStart> u1_first_slice_in_in_size ; ps_dec -> u2_total_mbs_coded = 0 ;,0
425,,0
426,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static ucounts <S2SV_ModEnd> inc_lock_irq ( <S2SV_ModStart> ucounts ) ; ucounts = ucounts -> ucounts = ucounts -> ucounts ; ucounts = ucounts -> count ; ucounts = ucounts -> ucounts ; ucounts -> ucounts = INT_MAX ; ucounts -> ucounts = ucounts -> ucounts ; ucounts = ucounts -> ucounts ; ucounts = ucounts -> ucounts ; ucounts = ucounts -> ucounts ; spin_lock_lock_irq ( ucounts, ucounts, ucounts ) ; ucounts = ucounts -> ucounts ; spin_lock_irq ( ucounts, ucounts, ucounts, ucounts -> count ) ; ucounts = ucounts -> count ) ; ucounts = ucounts -> ucounts ; ucounts = ucounts -> ucounts ; spin_lock_irq ( ucounts ) ; if ( ucounts ->",0
427,"<S2SV_ModStart> * fmode_t fmode, fmode_t fmode <S2SV_ModEnd>, fmode, <S2SV_ModStart>, fmode, fmode_t fmode <S2SV_ModEnd> ) ; switch",0
428,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
429,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> vp9_null> static <S2SV_ModStart> = cpi -> oxcf. mbmi. mbmi. mbmi. mbmi ; MACROBLOCK_SIZE bsize = cpi -> mbmi. mbmi. mbmi. mbmi. mbmi. mbmi ; const int bsize = 0 ; int bsize_t * const int64_t * sse ; int bsize = 0 ; int64_t <S2SV_ModEnd> ; int <S2SV_ModStart> = 0 ; int64_t <S2SV_ModEnd> ; int64_t <S2SV_ModStart> = 0 ; int64_t <S2SV_ModEnd> * pd -> <S2SV_ModStart> = 0 ; if ( cpi -> mbmi. mbmi. mbmi -> mbmi. mbmi. mbmi. mbmi. mbmi. mbmi. mbmi. mbmi = 0 ; if ( pd -> oxcf. mbmi ) { if ( cpi -> oxcf. mbmi. mbmi. mbmi ) return ; } <S2SV_ModEnd> ; } <S2S,0
430,<S2SV_ModStart> ; if ( <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
431,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
432,"<S2SV_ModStart> void read_segment_id ( vpx_reader <S2SV_ModEnd> * r,",0
433,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",0
434,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
435,<S2SV_ModStart> len ) ; if (!,0
436,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
437,"<S2SV_ModStart> NULL ) ; rb_ivar_set ( self, id_key_set, Qtrue ) ;",1
438,<S2SV_ModStart>. udpport = 0 <S2SV_ModEnd> ; settings.,1
439,<S2SV_ModStart> exit_mutex ; },0
440,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
441,<S2SV_ModStart> clips_ptr ) { ret = - EINVAL ; goto out_clips <S2SV_ModEnd> ; } if,0
442,<S2SV_ModStart> ; if ( pmd_clear_none <S2SV_ModEnd> ( pmd ),0
443,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
444,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
445,,0
446,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> vpx_codec_codec_alg_priv_t priv ; priv <S2SV_ModEnd> priv_t priv <S2SV_ModStart> vpx_codec_alg_t priv ; priv <S2SV_ModEnd> priv_t priv <S2SV_ModStart> priv ; priv <S2SV_ModEnd> priv ; priv <S2SV_ModStart> = 0 ; priv <S2SV_ModEnd> -> cfg ; priv <S2SV_ModStart> = 0 ; priv <S2SV_ModEnd> -> cfg ; priv <S2SV_ModStart> = 0 ; priv <S2SV_ModEnd> -> cfg ; priv <S2SV_ModStart> = 0 ; priv <S2SV_ModEnd> return priv ;,0
447,,0
448,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
449,<S2SV_ModStart> ; if (! ( vma ),0
450,"<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( bs,",0
451,"<S2SV_ModStart> ( interface, ENC28J60_MICMD, ENC28J60_MICMD <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC28J60_MICMD <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT, ENC28J60_BUSY <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( interface, ENC28J60_MICMD <S2SV_ModEnd> ) ; }",0
452,<S2SV_ModStart> char * fmt <S2SV_ModEnd> const char *,0
453,<S2SV_ModStart> ( ) ; if (!,0
454,"<S2SV_ModStart> size ) { memset <S2SV_ModEnd> ( key,",0
455,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
456,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
457,,0
458,,0
459,<S2SV_ModStart> attr ) ; if ( ret == NULL ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ( a -> type == NULL ) { return AVERROR_INVALIDDATA ; },0
460,"<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( bs,",0
461,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
462,"<S2SV_ModStart> av_stride ) ; memset <S2SV_ModEnd> ( sse,",0
463,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
464,<S2SV_ModStart> ; if ( data_size < 0 ||,0
465,,0
466,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
467,,0
468,<S2SV_ModStart> * ret ; <S2SV_ModEnd> return ret ;,0
469,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
470,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_dev_dev_dev_dev_dev_dev_dev ( xev,0
471,<S2SV_ModStart> ; int error = 0 <S2SV_ModEnd> ; if (,0
472,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
473,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
474,<S2SV_ModStart> perf_event ) ; <S2SV_ModEnd> } <S2SV_null>,0
475,"<S2SV_ModStart> AcquireQuantumMemory ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsx <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsx <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsx, ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( size_t ) <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsy <S2SV_ModEnd>, dmsx, <S2SV_ModStart> AcquireQuantumMemory ( dmsy <S2SV_ModEnd> ) ; if",0
476,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
477,<S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> } } ps_dec,0
478,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
479,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
480,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
481,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static MACROBLOCKD <S2SV_ModEnd> int mbmi <S2SV_ModStart> int xd, vpx_writer <S2SV_ModEnd> ) { int <S2SV_ModStart> int mbmi ; vpx_prob <S2SV_ModEnd> ; const int <S2SV_ModStart> = xd -> mbmi ; tran_low_t <S2SV_ModEnd> ; const int",0
482,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 8 ) ; <S2SV_ModEnd> src += src_stride",1
483,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
484,,0
485,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] =,0
486,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
487,"<S2SV_ModStart> ; vpx_read <S2SV_ModEnd> ( w,",0
488,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
489,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
490,<S2SV_ModStart> crypto_key ) ; strncpy <S2SV_ModEnd> ( & type,0
491,<S2SV_ModStart> size ) { <S2SV_ModEnd> return 0 ;,0
492,<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ;,1
493,<S2SV_ModStart> = 0 ; sa,0
494,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
495,<S2SV_ModStart> ) ; } mutt_socket_empty <S2SV_ModEnd> ( adata ->,0
496,<S2SV_ModStart> skb ) ; strncpy <S2SV_ModEnd> ( rq.,0
497,,0
498,"<S2SV_ModStart>, & rlen, 0",1
499,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
500,,0
501,,0
502,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
503,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
504,<S2SV_ModStart> key ) ; if ( key == NULL ) return NULL ;,0
505,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> unsigned char * bp = NULL <S2SV_ModStart> struct bp = NULL <S2SV_ModEnd> ; void * <S2SV_ModStart> unsigned char * authctxt = NULL <S2SV_ModStart> = NULL ; <S2SV_ModEnd> if (!,0
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
507,"<S2SV_ModStart> ; if ( CHECKOVERFLOW ( n -> order ), exif_log <S2SV_ModEnd> ) ) {",0
508,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
509,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
510,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
511,<S2SV_ModStart> ( ret ||! cm_id -> device ||,1
512,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
513,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } else if (,0
514,<S2SV_ModStart> ; if ( i == NULL ) { i = MagickFalse ; } if (,0
515,<S2SV_ModStart> return - 1 <S2SV_ModEnd> ; if (,0
516,<S2SV_ModStart> * page ) <S2SV_ModEnd> ; if (,0
517,,0
518,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
519,<S2SV_ModStart> mnt ) ; <S2SV_ModEnd> } if (,0
520,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( pcd,",0
521,,0
522,,0
523,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst,",0
524,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static MACROBLOCKD * const VP9_COMMON * const MACROBLOCKD * xd = & cpi -> common ; MACROBLOCKD * const xd = & cpi -> td. mb ; MACROBLOCKD * const xd = & xd -> mi_row ; MACROBLOCKD * const xd = & xd -> mb ; MACROBLOCKD * const xd = & cpi -> mb ; MACROBLOCKD * const xd = & x -> mbmi_mbd ; MACROBLOCKD * const xd = & x -> mb ; MACROBLOCKD * xd = & x -> mbmi_mbd ; MACROBLOCKD * const xd = & x -> mb ; MACROBLOCKD * const xd = & x -> mbmi_mbd ; <S2SV_ModStart> = x -> mbmi_mbd ; vp9_segment_idx8x <S2SV_ModEnd> ( x -> <S2SV_ModStart> ) ) ; # if CONFIG_VP9_,0
525,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
526,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
527,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ),",0
528,<S2SV_ModStart> skb ) ; kfree_skb ( skb ) ;,0
529,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
530,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
531,"<S2SV_ModStart> ; int err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
532,<S2SV_ModStart> ctx ) { vpx_free <S2SV_ModEnd> ( ctx ),0
533,"<S2SV_ModStart> } else { vpx_horizontal_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> } else { vpx_16 <S2SV_ModEnd> ( s,",0
534,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
535,<S2SV_ModStart> = screen ; <S2SV_ModEnd> } if (,0
536,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ps_stream -> u4_offset,0
537,<S2SV_ModStart> sizeof ( size ) <S2SV_ModEnd> ; if (,0
538,,0
539,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
540,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = '\\n"" <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) { <S2SV_ModEnd> if (! <S2SV_ModStart> == 0 ) { <S2SV_ModEnd> if (! <S2SV_ModStart> == '\\0' ) { if (! <S2SV_ModStart> == '\\0' ) return - 1 ; } <S2SV_ModEnd> return - 1",0
541,,0
542,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ipv6_txoptions * opt <S2SV_ModStart> sizeof ( opt ) ; opt = txopt_put ( opt ) ; txopt_put ( opt ) ;,0
543,<S2SV_ModStart> ; int ip_options_rcu <S2SV_ModEnd> ; if (,0
544,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
545,<S2SV_ModStart> ; if ( kz < 0 ) { return 0 ; } if (,0
546,"<S2SV_ModStart> { if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
547,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
548,<S2SV_ModStart> ; if ( key_key == KEY_KEY_KEY ) { krb5_data = krb5_data_data_data ( key_data -> key_data. key_data. key_data ) ; goto err ; },0
549,,0
550,,0
551,<S2SV_ModStart> ) ; return <S2SV_ModEnd> ; } <S2SV_null>,0
552,,0
553,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
554,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ),1
555,,0
556,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
557,"<S2SV_ModStart> ""socket"", NULL",0
558,"<S2SV_ModStart> ) ) ; struct ipv6_txoptions_rcu * opt = rcu_dereference ( <S2SV_ModStart> np -> opt ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> np -> opt ) ; rcu_read_unlock ( ) ; <S2SV_ModStart> np -> opt = rcu_dereference ( <S2SV_ModStart> np -> opt ) ; rcu_read_unlock ( ) ;",0
559,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
560,<S2SV_ModStart> 2 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
561,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
562,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int m ; int <S2SV_ModEnd> int m ; int <S2SV_ModStart> int m ; m ; bn_len = m ; bn_len = bn_len <S2SV_ModEnd> ; bn_len <S2SV_ModStart> ; bn_len = <S2SV_ModEnd> ( m, <S2SV_ModStart> { bn_len = <S2SV_ModEnd> ; bn_len = <S2SV_ModStart> ; bn_len = bn_len <S2SV_ModEnd> ; bn_len = <S2SV_ModStart> ; bn_len = <S2SV_ModEnd> ; bn_len = <S2SV_ModStart> ; if ( t <S2SV_null> <S2SV_null>",0
563,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
564,<S2SV_ModStart> { rq = <S2SV_ModEnd> hctx -> tags <S2SV_ModStart> hctx -> tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; if (,1
565,<S2SV_ModStart> ; psf_allocate ( <S2SV_ModEnd> ) ; },0
566,,0
567,,0
568,<S2SV_ModStart> x ) { memset <S2SV_ModEnd> ( x ->,0
569,<S2SV_ModStart> return ret ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
570,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
571,<S2SV_ModStart> ; TEMP_FAILURE_RETRY (,0
572,<S2SV_ModStart> ; ps_dec ->,0
573,"<S2SV_ModStart> int mptctl_info ( MPT_ADAPTER * ioc, <S2SV_ModStart> int mpt_ioctl_ioctl_info ( MPT_ADAPTER * ioc, <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } dctlprintk",0
574,<S2SV_ModStart> len ) { <S2SV_ModEnd> return 0 ;,0
575,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
576,<S2SV_ModStart> * rq ; <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
577,"<S2SV_ModStart> arg ) ; strncpy <S2SV_ModEnd> ( o, <S2SV_ModStart> return - 1 <S2SV_ModEnd> ) ; }",0
578,"<S2SV_ModStart> ; if ( CHECKOVERFLOW ( n -> order ), exif_log <S2SV_ModEnd> ; if (",0
579,"<S2SV_ModStart> ( fname, ""%s"", L_BUFSIZE <S2SV_ModEnd> ) ; if",0
580,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> inode_crypt_info ( <S2SV_ModStart> dentry_info ) { <S2SV_ModEnd> if ( dir,0
581,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
582,<S2SV_ModStart> i ++ ; if ( i == NULL ) { i = 0 ; <S2SV_ModStart> i -> p = i + <S2SV_ModEnd> ; } if ( <S2SV_ModStart> ; if ( <S2SV_ModEnd> i -> p -> <S2SV_ModStart> i = i + <S2SV_ModEnd> ; if (,0
583,,0
584,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [",0
585,,0
586,"<S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC6 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC6 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC",0
587,<S2SV_ModStart> = MagickFalse ; break <S2SV_ModEnd> ; } image,0
588,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; memset (,0
589,<S2SV_ModStart> i4_dpb_idc ) ; <S2SV_ModEnd> if ( ps_dec,0
590,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> { int n = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == '\\0' ) { if (! <S2SV_ModStart> == '\\0' ) { <S2SV_ModEnd> if (! <S2SV_ModStart> ) return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> == '\\0' ) { <S2SV_ModEnd> if (! <S2SV_ModStart> == '\\0' ) { <S2SV_ModEnd> if (! <S2SV_ModStart> == '\\0' ) { <S2SV_ModEnd> if (! <S2SV_ModStart> == '\\0' ) { <S2SV_ModEnd> return 0 ; } if (! <S2SV_ModStart> == '\\0' ) { <S2SV_ModEnd> return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> == '\\0' ) { <S2SV_ModEnd> if (! <S2SV_ModStart> == '\\0' ) { if (! out ) { goto out ; } } <S2SV_ModEnd> if (! <S2SV_ModStart> == '\\0' ) { <S2SV_ModEnd> if (! <S2SV_ModStart> == '\\0' ) { <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { break ; } <S2SV_ModEnd> if (! <S2SV_ModStart> == '\\0' ) { if (! <S2SV_ModStart> == '\\0' ) ) { if (! out ) { break ; break ; } <S2SV_ModEnd> if (!,0
591,"<S2SV_ModStart> int tagval, uint32 <S2SV_ModEnd> * length )",1
592,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
593,,0
594,<S2SV_ModStart> void task_context ( struct task_context * task <S2SV_ModEnd> ; task <S2SV_ModStart> ; task_unlock ( task <S2SV_ModEnd> ) ; task <S2SV_ModStart> ; task_unlock ( task <S2SV_ModEnd> ) ; task <S2SV_ModStart> -> io_context ; task <S2SV_ModEnd> -> io_unlock,0
595,<S2SV_ModStart> * ret ; <S2SV_ModEnd> return ret ;,0
596,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if (,0
597,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
598,<S2SV_ModStart> ; if ( iocb < 0 ||,0
599,<S2SV_ModStart> char * ret <S2SV_ModEnd> ; if (,0
600,<S2SV_ModStart> ; if ( k == NULL ) return (,0
601,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
602,<S2SV_ModStart> buf ) { free_free ( buf ) ; },0
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) { int <S2SV_ModEnd> char * cp <S2SV_ModStart> ; const char * cp = <S2SV_ModEnd> ; char * <S2SV_ModStart> ; if ( * cp [ 1 ] == '\\0' ) { const char * cp = NULL ; char * cp = str ; char * cp = '\\0' ; char * cp = '\\0' ; char * cp = '\\0' ; if (! isdigit ( cp == '\\0' ) ) { if (! cp == '\\0' ) { if (! cp == '\\0' ) { const char * cp ++ ; } else { char * cp = '\\0' ; } else { if (! isdigit ( cp == '\\0' ) { if (! cp == '\\0' ) { char * cp ++ ; } else if (! isdigit (! isdigit (! isdigit ) ) { char * cp ++ ; } while (! tp ++ ) { char * cp ++ ; } while (! cp ++ ) { if (! isdigit (! cp ++ ) ) { if (! isdigit (! is,0
604,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
605,"<S2SV_ModStart> * pix1 ; <S2SV_ModEnd> char * p <S2SV_ModStart>, p = NULL ; if ( pixr <S2SV_ModEnd> ( pixp, <S2SV_ModStart>, pix, pix <S2SV_ModEnd>, pix, <S2SV_ModStart>, pix, pix <S2SV_ModEnd>, pix,",0
606,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
607,<S2SV_ModStart> skb ) ; strncpy <S2SV_ModEnd> ( rq.,0
608,<S2SV_ModStart> int idx ; unsigned int count ; <S2SV_ModStart> -> count ; count = kcontrol -> count ; <S2SV_ModStart> ; idx < <S2SV_ModEnd> count ; idx,1
609,"<S2SV_ModStart> string, int len <S2SV_ModEnd> ) { int",0
610,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) { return Stream_GetRemainingLength ( s ) ; if (! Stream_GetRemainingLength ( s ) return FALSE <S2SV_ModEnd> ; } <S2SV_null>,0
611,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int bit_bit_depth_t bit_depth <S2SV_ModEnd> ; int bit_depth <S2SV_ModStart> int bit_depth ; # if CONFIG_VP9_HIGHBITDEPTH switch ( bit_depth ) { assert ( cpi -> bit_depth, bit_depth ) ; }",0
612,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
613,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
614,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
615,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
616,<S2SV_ModStart> ; } } if (,0
617,<S2SV_ModStart> = 0 ; ei -> i_inode = 0 ;,0
618,<S2SV_ModStart> ; if (! thresholds ) goto unlock ;,0
619,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
620,"<S2SV_ModStart> void write_buffer ( VP9_COMMON * cm, vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm, vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm, vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm, vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm, vpx_bit <S2SV_ModEnd> ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm, vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ) ; vpx_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
621,<S2SV_ModStart> { if ( bad_format_axis ( optarg ) ) { <S2SV_ModEnd> return ; },0
622,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context ->,0
623,,0
624,<S2SV_ModStart> ; memcpy <S2SV_ModEnd> ( x ->,0
625,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static struct enc624j600_t status <S2SV_ModStart> ( interface, ENC624J600_ERR, ENC624J600_ERR, ENC624J600_ERR, ENC624J600_ERR, ENC624J600_ERX <S2SV_ModEnd> ) ; struct <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_ERX <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_ERX <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_EIR, ENC624J600_EIR, ENC624J600_EIR, ENC624J600_ERX <S2SV_ModEnd> ) ; struct <S2SV_ModStart> ( interface, ENC624J600_ERX, ENC624J600_ERX <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_ERX, ENC624J600_ERX <S2SV_ModEnd>",0
626,<S2SV_ModStart> ] == 0x01 && zval,0
627,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
628,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
629,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
630,<S2SV_ModStart> state -> buf [ 2 <S2SV_ModEnd> ) ; },0
631,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
632,<S2SV_ModStart> out_mutex ; } mutex_lock ( & fanout_mutex ) ;,0
633,<S2SV_ModStart> -> event ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
634,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> int u2SV_null> static int <S2SV_ModStart> u8_char * u8_int u8_char * u8 * u8_int u32 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return - 1 ; if ( * len > len ) return - 1 ; if ( * s + len > len ) return - 1 ; if ( * s + len - 1 ) return - 1 ; if (! u_char * u + len ) return - 1 ; if ( u == '\\n"" ) return - 1 ; if (! u16_t ) return - 1 ; if ( * s == '\\0' ) return - 1 ; if (! * s + len ) return - 1 ; if (! u + len ) return - 1 ; if ( u == '\\n"" ) { if ( u + len > u + len ) return - 1 ; } else { if (! u + len ) return TRUE ; } else { if ( u + len > u + u + len - u + u + len ) return - 1 ; * u + len - u + len - 1 ; if ( u",0
635,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
636,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( interface, KSZ8851_TX_S2SV_null> <S2SV_null> <S2SV_null>",0
637,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
638,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
639,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> } if (,0
640,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( index,0
641,<S2SV_ModStart> return - 1 <S2SV_ModEnd> ; if (,0
642,<S2SV_ModStart> int i ; memset <S2SV_ModEnd> ( & 0,0
643,<S2SV_ModStart> = NULL ; memset <S2SV_ModEnd> ( & l,0
644,<S2SV_ModStart> 2 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,1
645,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
646,,0
647,<S2SV_ModStart> dentry ) ; <S2SV_ModEnd> } if (,0
648,,0
649,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
650,<S2SV_ModStart> ; if (,0
651,<S2SV_ModStart> pixel_info ) ; ( void ) ResetMagickFalse ;,0
652,<S2SV_ModStart> length ) { <S2SV_ModEnd> return 0 ;,0
653,"<S2SV_ModStart> <S2SV_null> <S2SV_dinode ) { fa = xfs_verify_dinode_fork ( dip ) ; if ( fa ) return fa ; } if ( fa == fa ) { fa = xfs_verify_verify_fork ( fa ) ; return fa ; } if ( fa ) { fa = xfs_verify_verify_verify_verify_verify_fork ( dip, XFS_FORK ) ; break ; } if ( fa ) { fa = xfs_verify_verify_verify_fork ( dip, XFS_FORK ) ; break ; } if ( fa ) { fa = fa ; break ; } if ( fa ) { fa = fa ; break ; } if ( fa ) { fa = xfs_verify_verify_fork ( fa, fa ) ; break ; break ; } if ( fa ) { fa = fa = fa ; break ; } if ( fa ) { fa = XFS_verify_fork ( fa ) ; break ; return fa ; } if ( fa ) { fa = fa ; break ; break ; break ; break ; break ; } if (",0
654,<S2SV_ModStart> ; vpx_codec_alg_priv_t flags <S2SV_ModEnd> ; if (,0
655,<S2SV_ModStart> ) ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
656,<S2SV_ModStart> head * head <S2SV_ModEnd> ; if (,0
657,"<S2SV_ModStart> * tptr ; ND_TCHECK2 ( * tptr, <S2SV_ModStart> len ) ) ; if ( len < 3 ) goto trunc ; ND_PRINT ( ndo, "" <S2SV_blank> <S2SV_blank> \\n"" ) ) ; if ( len < 3 ) { ND_PRINT ( ndo, "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\n"" ) ; goto trunc ; } ND_PRINT ( ndo, "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\n"" ) ) ; return ; } <S2SV_ModStart> case BGP_AT : ND_PRINT ( ndo, "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> \\n"" ) ; goto trunc <S2SV_ModEnd> ; } ND_PRINT (",0
658,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
659,"<S2SV_ModStart> src ) { memset <S2SV_ModEnd> ( dest_ptr,",0
660,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return 0 ;,0
661,<S2SV_ModStart> ; if ( ( <S2SV_ModEnd> buf + 1,0
662,"<S2SV_ModStart> ; err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & info -> count )",0
663,"<S2SV_ModStart> ( event, <S2SV_ModEnd> size ) ;",0
664,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; dev ->,0
665,<S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( x ->,0
666,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( interface, ENC624J600_MACON2 ( interface, ENC624J600_EIR, ENC624J600_EIR, ENC624J600_EIR, ENC624J600_EIR <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC624J600_MACON1, ENC624J600_MACON2 ( interface, ENC624J600_MACON2 <S2SV_ModEnd>, 0 <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_EIR, ENC624J600_EIR, ENC624J600_MACON2 <S2SV_ModEnd>, interface -> <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_EIR, ENC624J600_EIR, ENC624J600_MACON2 <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_EIR, ENC624J600_",0
667,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> psf_printf ( struct buffer <S2SV_ModEnd> * pptr, <S2SV_ModStart> buffer ) ; if ( strlen ( strlen, "" <S2SV_blank> packet <S2SV_blank> length <S2SV_blank> %s\\n"", strlen ( psf ) ) ) { return ; } <S2SV_ModEnd> if ( psf",0
668,"<S2SV_ModStart> ( ctx -> priv <S2SV_ModEnd>, NULL )",0
669,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
670,"<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
671,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
672,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
673,<S2SV_ModStart> ; char * n = NULL ; char * n = Py_DECREF ( n ) ; if (! Py_DECREF ( n ) ) return NULL ; if ( n < 0 ) { Py_DECREF ( n ) ; return NULL ; } if (,0
674,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> vp9_set_codec_ctx ( svc_ctx, const VPX_CODEC_INVALID_CODEC_INVALIDDATA <S2SV_ModEnd> * const int <S2SV_ModStart> ; if ( svc_t ) { if ( svc_codec_err_t ) { if ( svc_t ) { vpx_codec_err_t * ) { int res = ( svc_t ) ; } else { if (! svc_t ) { if ( svc_codec_err_t ) { if (! ( svc_t ) { return VPX_CODEC_CODEC_INVALID_CODEC_INVALIDDATA ; } else { if ( sz <S2SV_null>",0
675,<S2SV_ModStart> head * head <S2SV_ModEnd> ; if (,0
676,"<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( mb,",0
677,,0
678,,1
679,<S2SV_ModStart> ; } <S2SV_null> <S2SV_null>,0
680,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size )",0
681,<S2SV_ModStart> ; uint32_t pkt_len = 0 ; <S2SV_ModStart> ; } } } if (,0
682,<S2SV_ModStart> ; if ( hlen < 0 ||,0
683,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL,0
684,<S2SV_ModStart> out_free ; } out_free ( ptr ) ;,0
685,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> rc -> avg_frame_bandwidth <S2SV_ModStart> ; int rc -> avg_frame_bandwidth = cpi -> oxcf. avg_frame_bandwidth <S2SV_ModEnd> ; int <S2SV_ModStart> -> avg_frame_frame_bandwidth <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> avg_frame_bandwidth ) { <S2SV_ModEnd> if ( cpi <S2SV_ModStart> -> oxcf. avg_frame_bandwidth <S2SV_ModEnd> = ( cpi <S2SV_ModStart> -> oxcf. avg_frame_bandwidth <S2SV_ModEnd> ; } <S2SV_null>,0
686,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int vpx_read_literal ( vpx_read <S2SV_ModEnd> * r ) <S2SV_ModStart> r ) { vpx_read <S2SV_ModEnd> ( r,",0
687,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
688,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const xd = & xd ; MACROBLOCKD * const xd = & ctx -> seg ; MACROBLOCKD * const xd ; MACROBLOCKD * const xd = & xd -> plane [ BLOCK_SIZE tx_size ] ; int segment_id = & xd -> plane [ 0 ] ; int segment_id = & ctx -> plane [ 0 ] ; int seg ; int segment_id = 0 ; int segment_id ; int segment_id = vp9_id ; int segment_id = vp9_idx8_id ; int segment_id ; int segment_id = vp9_idx4_idx8_id ; int segment_id = vp9_idx8_get_id ( & cpi, & ctx -> seg, & ctx -> seg, & ctx -> seg -> seg -> plane, & ctx -> seg.",0
689,,0
690,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
691,<S2SV_ModStart> ; if ( cpi -> s_flags &,0
692,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int,0
693,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
694,<S2SV_ModStart> ret = 0 <S2SV_ModEnd> ; if (,0
695,<S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len ) ),0
696,<S2SV_ModStart> == 0 ) { <S2SV_ModEnd> if (!,0
697,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
698,"<S2SV_ModStart> rq ) ; blk_set_ops ( q, flags ) ;",0
699,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
700,<S2SV_ModStart> return ret ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
701,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
702,<S2SV_ModStart> char * buf <S2SV_ModEnd> ; if (,0
703,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> read_table_start ( <S2SV_ModStart> = 0 ; if (! xattr_start_start ) return NULL ; <S2SV_ModEnd> return 0 ; <S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
704,<S2SV_ModStart> * env ; <S2SV_ModEnd> const char *,0
705,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int seg ; memset <S2SV_ModEnd> ( seg, <S2SV_ModStart> -> seg ; memset <S2SV_ModEnd> ( & cpi <S2SV_ModStart> ) ; memset <S2SV_ModEnd> ( seg,",0
706,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
707,<S2SV_ModStart> = TEMP_FAILURE_RETRY (,0
708,<S2SV_ModStart> ; # if CONFIG_HIGHBITDEPTH if ( context -> pass == NULL ) { if ( <S2SV_ModStart> ; break ; } else { if ( <S2SV_ModEnd> i -> cur -> <S2SV_ModStart> break ; } else { case <S2SV_ModStart> ; break ; } else { case <S2SV_ModEnd> i -> cur -> <S2SV_ModStart> break ; } else { case <S2SV_ModStart> ; break ; case <S2SV_ModEnd> if ( context -> curY = <S2SV_ModStart> ; break ; case <S2SV_ModStart> ; break ; case 2 : context -> curY = posY + 2 ; break ; case <S2SV_ModStart> ; break ; case <S2SV_ModEnd> } break ; case <S2SV_ModStart> ; break ; case <S2SV_ModEnd> } break ; case <S2SV_ModStart> ; break ; case <S2SV_ModStart> ; break ; case <S2SV_ModStart> ; break ; case <S2SV_ModEnd> } break ; case <S2SV_ModStart> ; break ; case <S2SV_ModStart> ; break ; case <S2SV_ModEnd> } break ; case <S2SV_ModStart> } break ; case <S2SV_ModStart> ; break ; break ; case,0
709,,0
710,<S2SV_ModStart> ; if ( * cp == NULL ||,0
711,"<S2SV_ModStart> char * outputbuffer [ 1 ] <S2SV_ModEnd> ] ; int <S2SV_ModStart> = '\\0' ; printbuffer [ 1 ] <S2SV_ModEnd> ] ; int <S2SV_ModStart> + 1 ] ; if (! strlen ( tptr ) ) return 0 <S2SV_ModStart> + 1 ; if ( tptr [ 1 ] == '\\0' ) { printk ( ""\\"" ) ; return - 1 ] = strlen ( tp [ 1 ], ""\\"" ) ; return - 1 ] ; } if ( strlen ( tp [ 1 ] == '\\0' ) { char * tp [ 0 ] = ( * ) - 1 ] = strlen ( tp [ 0 ] ) - 1 ] = strlen ( ""\\"" ) ; return - 1 ; } if ( <S2SV_ModStart> + 1 ) { fprintf ( ""\\"", ""\\"" ) ; return 0 ; } <S2SV_ModStart> 0'\\n"" ) ; } <S2SV_ModStart> } if ( strlen ( strlen ( tp [ 1 ] == '\\0' ) ) { printf ( ndo, ""\\"" ) ) ; return 0 ; }",0
712,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_zero ( struct <S2SV_ModStart>, sizeof ( net -> ipv4. ip_id_id_key <S2SV_ModEnd>, sizeof ( <S2SV_ModStart>, sizeof ( struct ipv4. ip_id_id_id_key <S2SV_ModEnd> ) ) ) <S2SV_ModStart> ; hash = siphash_key_key <S2SV_ModEnd> ; hash =",0
713,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj,",0
714,"<S2SV_ModStart> void vpx_writer <S2SV_ModEnd> * w,",0
715,<S2SV_ModStart> ) ) ; if (! cpi -> user. pass == 0 ) return - EINVAL ;,0
716,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) ; return - EINVAL ; if ( skb -> nf_map ) return - EINVAL ; <S2SV_ModStart> goto out ; <S2SV_ModEnd> if (!,0
717,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
718,<S2SV_ModStart> goto out ; <S2SV_ModEnd> } if (,0
719,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int tile_idx ; VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const tile_idx = & tile_idx = & tile_data -> tile_idx ; <S2SV_ModStart> int tile_idx = vpx_read <S2SV_ModEnd> ( & tile_idx <S2SV_ModStart> ) ) ; vpx_read <S2SV_ModEnd> ( & tile_idx <S2SV_ModStart> VP9_COMMON * ) ; vpx_read <S2SV_ModEnd> ( & tile_idx <S2SV_ModStart> ) ) ; vpx_read <S2SV_ModEnd> ( & tile_id, <S2SV_ModStart> ) ) ; vpx_read <S2SV_ModEnd> ( & tile_idx <S2SV_ModStart> VP9_t ) ; vpx_set <S2SV_ModEnd> ( & tile_id, <S2SV_ModStart> VP9_COMMON ) ; vpx_get_tile_tile_idx <S2SV_ModEnd> ( & tile_tile, <S2SV_ModStart> ) ) ; vpx_decode <S2SV_ModEnd> ( & tile_id,",0
720,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> cpi ) { VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const MACROBLOCKD * const cm = & cpi -> common ; MACROBLOCKD * const cm = & cm -> mb ; MACROBLOCKD * const cm = & cm -> frame_size ; vp9_decode = & cm -> frame_parallel_decode ; vpx_decode = & cm -> frame_parallel_decode ) ; <S2SV_ModStart> ; vpx_decode = vpx_decode <S2SV_ModEnd> ; vpx_decode <S2SV_ModStart> ; vpx_read <S2SV_ModEnd> ( &,0
721,,0
722,<S2SV_ModStart> <S2SV_null> static struct ip_options_rcu <S2SV_ModEnd> * opt =,0
723,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
724,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
725,"<S2SV_ModStart>, & len, 0",1
726,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
727,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
728,<S2SV_ModStart> in ) ; jas_uchar <S2SV_ModEnd> buf [ i,0
729,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static VP9_COMMON * const VP9_COMMON * cpi = & cpi -> common ; MACROBLOCKD * const xd = & cpi -> common ; MACROBLOCKD * const xd = & cpi -> common ; MACROBLOCKD * const xd = & cpi -> common ; MACROBLOCKD * const xd = & cpi -> common ; MACROBLOCKD * const xd = & cpi -> mb ; MACROBLOCKD * const xd = & cpi -> mb ; MACROBLOCKD * const xd = & cpi -> mbmi. mbmi ; MACROBLOCKD * const xd = & cpi -> mbmi. mb ; MACROBLOCK_SIZE bsize = & cpi -> mbmi. mbmi. mb ; if ( cpi -> oxcf. mb_ext ) { cpi -> oxcf. mb_ext = cpi -> common. mb_ext ; cpi -> oxcf.,0
730,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null> <S2SV_null>,0
731,<S2SV_ModStart> int i ; int num_mb <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return AVERROR_INVALIDDATA ; } if ( ctx -> bits > 0 ) { return AVERROR_INVALIDDATA ; },0
732,,0
733,"<S2SV_ModStart> ; if ( osStrchr <S2SV_ModEnd> ( p,",0
734,<S2SV_ModStart> ; packet -> packet_length = 0 ; packet ->,0
735,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
736,"<S2SV_ModStart> * r ; if ( <S2SV_ModEnd> ( r,",0
737,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4,",0
738,<S2SV_ModStart> ; int ihdr <S2SV_ModEnd> ; if (,0
739,"<S2SV_ModStart> int ret ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & length )",0
740,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
741,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
742,<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd> ) ; },0
743,<S2SV_ModStart> ; if ( rdp -> frameLength < 0 ) return FALSE,0
744,<S2SV_ModStart> ; cpi -> common <S2SV_ModEnd> ; if (,0
745,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ;,0
746,"<S2SV_ModStart> * s ; struct stream packet = * s ; <S2SV_ModStart> ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""r_process(), <S2SV_blank> consume <S2SV_blank> overrun"", & packet ) ; }",0
747,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( pbi,",0
748,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
749,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
750,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
751,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
752,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
753,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_prob <S2SV_ModEnd> coef_prob ( vpx_prob,0
754,<S2SV_ModStart> ; r = TEMP_FAILURE_RETRY (,0
755,<S2SV_ModStart> = 0 ; mutex_mutex_lock ( & d -> data_mutex ) ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data <S2SV_ModEnd> = 0xe ; state -> data <S2SV_ModStart> = 0xe ; state -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> = 0x80 ; state -> data <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0xe ; state -> data <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0xe ; state -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> = 0,0
756,<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> ; if (,0
757,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
758,<S2SV_ModStart> char buf [ 256 <S2SV_ModEnd> ] ; char,0
759,,0
760,<S2SV_ModStart> tk_retry ) ; task -> tk_rebind = 0 ;,0
761,"<S2SV_ModStart>, n ) ; if ( w == NULL ) return 0",1
762,<S2SV_ModStart> len ) ; if ( ret == NULL ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ( a -> type == NULL ) { return AVERROR_INVALIDDATA ; },0
763,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const MACROBLOCKD * const MACROBLOCKD * const int i ; MACROBLOCKD * const int i ; MACROBLOCKD * const int i ; <S2SV_ModStart> ) ) { vpx_writer <S2SV_ModEnd> ; vpx_free ( <S2SV_ModStart> ) ) ; vpx_free ( pbi -> tile_data <S2SV_ModEnd> ; vpx_free ( <S2SV_ModStart> ) ) ; vpx_free ( vpx_free <S2SV_ModEnd> ; vpx_free ( <S2SV_ModStart> ) ) ; vpx_codec_free ( pbi <S2SV_ModEnd> ) ; vpx_free <S2SV_ModStart> ; vpx_free ( pbi <S2SV_ModEnd> ) ; vpx_free ( <S2SV_ModStart> ) ) ; vpx_free ( pbi <S2SV_ModEnd> ) ; vpx_free <S2SV_ModStart> ; vpx_free ( pbi <S2SV_ModEnd> ) ) ; vpx_free (,0
764,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
765,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static VP9_COMMON * const VP9_COMMON * const MACROBLOCKD * const MACROBLOCKD * const int i ; int seg = & cpi -> seg ; <S2SV_ModStart> i ; vpx_reader <S2SV_ModEnd> ; int segment_id <S2SV_ModStart> i ) { vpx_writer <S2SV_ModEnd> = cpi -> <S2SV_ModStart> i ] ; memset <S2SV_ModEnd> ( w, <S2SV_ModStart> i ] ; memset <S2SV_ModEnd> ( w, <S2SV_ModStart> i ) ; memset <S2SV_ModEnd> ( & cpi, <S2SV_ModStart> i, 0, 0, sizeof ( * cpi ) ) ; memset <S2SV_ModEnd> ( seg, <S2SV_ModStart> i ) ; memset <S2SV_ModEnd> ( w, <S2SV_ModStart> i, & cpi <S2SV_ModEnd>, i,",0
766,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list )",0
767,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
768,<S2SV_ModStart> return ; } <S2SV_ModEnd> if ( ps_dec,0
769,<S2SV_ModStart> -> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock,0
770,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
771,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
772,,0
773,"<S2SV_ModStart> ; buf = kzalloc <S2SV_ModEnd> ( buf,",0
774,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int rc = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL, NULL ) <S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY (",0
775,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int rc ; int <S2SV_ModEnd> struct server ; int <S2SV_ModStart> = NULL ; int <S2SV_ModEnd> ; int <S2SV_ModStart> = NULL ; int <S2SV_ModEnd> ; int <S2SV_ModStart> = 0 ; int <S2SV_ModEnd> ; int <S2SV_ModStart> ; if ( <S2SV_ModEnd> <S2SV_null> <S2SV_null> <SV_null>,0
776,<S2SV_ModStart> ; memset <S2SV_ModEnd> ( cpi ->,0
777,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
778,<S2SV_ModStart> ) ) ; ND_TCHECK ( bp [ 0 ] ) ;,0
779,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
780,"<S2SV_ModStart> int mptctl_eventenable ( MPT_ADAPTER * ioc, <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; if (",0
781,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> unsigned char * image = MagickMemory ( CorruptImageError, ""InsufficientImageHeader"" ) ; size_t <S2SV_ModEnd> char * <S2SV_ModStart> int x = ( unsigned char * ) <S2SV_ModStart> unsigned char * ) RelinquishMagickMemory ( CorruptImageError, ""InsufficientImageHeader"" ) ; if ( data!= ( unsigned char * ) NULL ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; c = ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( unsigned char * ) ThrowReaderException ( CorruptImageError, ""InsufficientImageHeader"" ) ; ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( CorruptImageError, ""InsufficientImageHeader"" ) RelinquishMagickMemory ( CorruptImageError, ""InsufficientImageData"" ) ; c = ( unsigned char * ) RelinquishMagickMemory ( unsigned char * ) RelinquishMagickMemory ( unsigned char * ) RelinquishMagickMemory ( unsigned char * ) ;",0
782,<S2SV_ModStart> ; if ( jas_uchar <S2SV_ModEnd> ( jas_eprintf (,0
783,<S2SV_ModStart> return - 1 <S2SV_ModEnd> ; if (,0
784,"<S2SV_ModStart> void vpx_read_literal <S2SV_ModEnd> ( r,",0
785,"<S2SV_ModStart> const vpx_prob <S2SV_ModEnd> * probs,",0
786,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r )",0
787,"<S2SV_ModStart> * stream ; # if CONFIG_VP9_HIGHBITDEPTH if ( stream ) { vpx_codec_err ( ) ; # if CONFIG_VP9_HIGHBITDEPTH # if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( stream, Stream_HIGHBITDEPTH ) { # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH return ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH # if CONFIG_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH switch ( stream, stream, stream, stream -> codec_as_as_as_async, stream, stream, stream, stream, stream -> flags ) ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH # else { # if CONFIG_HIGHBITDEPTH",0
788,<S2SV_ModStart> = 0 ; ND_TCHECK2 ( op -> u_len ) ;,0
789,,0
790,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if (,0
791,<S2SV_ModStart> ; if ( skb -> len < sizeof ( struct skb ) ) return 0 ; if (,0
792,<S2SV_ModStart> ; if ( status == MagickFalse ) break ;,0
793,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
794,"<S2SV_ModStart> -> cac_id, serial -> len <S2SV_ModEnd> ) ; SC_FUNC_RETURN",1
795,<S2SV_ModStart> ; # endif tok -> type_comments = 0 ;,0
796,,0
797,,0
798,<S2SV_ModStart> ; buff [ 0 ]. size <S2SV_ModEnd> ; buff [,0
799,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
800,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
801,,1
802,<S2SV_ModStart> ; if (! s ) return FALSE,0
803,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ipv6_txoptions ( struct ipv6_txoptions * ) { struct ipv6_txoptions * opt = opt ; struct ipv6_txoptions * opt = np -> opt ; struct ipv6_txoptions * opt ; struct ipv6_txoptions * opt = np -> opt ; opt = rcu_read_lock ( ) ; opt = rcu_dereference ( sk ) ; opt = rcu_dereference ( sk ) ; } <S2SV_ModEnd> if ( opt <S2SV_ModStart> -> opt ) ; opt = rcu_dereference ( np -> opt ) ; opt = rcu_read_unlock ( ) ; opt = rcu_dereference ( sk ) ; <S2SV_ModStart> opt -> opt. <S2SV_ModEnd> opt, &",0
804,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static uint32_t <S2SV_ModEnd> uint32_t <S2SV_ModStart> uint32_t max_data ; uint32_t <S2SV_ModEnd> uint32_t <S2SV_ModStart> uint ] ; uint32_t max_data = 0 ; uint32_t * sizeof ( uint32_t ) { uint32_t * sizeof ( uint32_t ) - 1 ; uint32_t * sizeof ( uint32_t ) - 1 ; uint32_t - 1 ; uint32_t * sizeof ( uint32_t ) - 1 ; uint32_t - 1 ; uint32_t * sizeof ( uint32_t ) - 1 ] = 0 ; uint32_t * sizeof ( uint32_t ) - 1 ; uint32_t * sizeof ( uint32_t ) - 1 ] = 0 ; uint32_t - 1 ; uint32_t * sizeof ( uint32_t ) - 1 ; if ( uint32_t ) == 0 ) { uint32_t - 1 ; uint32_t * sizeof ( uint32_t ) - 1 ) - 1 ; break ; } <S2SV_ModStart> if (,0
805,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = dm9000ReadReg ( 0 <S2SV_ModEnd> ) ; dm9000ReadReg ( DM9000ReadReg ( DM9000_E <S2SV_ModEnd> ) ; dm9000ReadReg ( DM9000ReadReg <S2SV_ModStart> = 0 ; dm9000ReadReg ( DM9000_E <S2SV_ModEnd> ) ; dm9000ReadReg ( DM9000_E <S2SV_ModStart> } dm9000ReadReg ( DM9000_E <S2SV_ModEnd> ) ; dm9000ReadReg <S2SV_ModStart> } dm9000ReadReg ( DM9000ReadReg ( DM9000_E <S2SV_ModEnd> ) ) ; <S2SV_ModStart> } dm9000WriteReg ( DM9000_E <S2SV_ModEnd> ) ; dm9000WriteReg <S2SV_ModStart> } dm9000WriteReg ( DM9000ReadReg ( DM9000_E <S2SV_ModEnd> ) ) ; <S2SV_ModStart> } dm9000WriteReg ( DM9000_ERR <S2SV_ModEnd> ) ; dm9000WriteReg <S2SV_ModStart> } dm9000WriteReg ( DM9000ReadReg ( DM9000WriteReg ( DM9000_E <S2SV_ModEnd> ) ; dm9000,0
806,,0
807,<S2SV_ModStart> new_link ( current <S2SV_ModEnd> ) ; },0
808,<S2SV_ModStart> rc ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
809,<S2SV_ModStart> size ) ; <S2SV_ModEnd> if ( addr,0
810,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = vp9_zero ( VP9_COMMON * const VP9_COMMON * x, <S2SV_ModEnd> -> mbmi, <S2SV_ModStart> = 0 ; int <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; vp9_mbd -> <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; vp9_zero ( &= vp9_here, &= vp9_mv_here, &= vp9_mv_here, &= ( unsigned int ) <S2SV_ModEnd> ; vp9_mv_mv_mv_here, <S2SV_ModStart> = 0 ; vp9_remaining = vp9_mv_cost_mv_mv_mv_mv_mv_here, &= ( vp9_mv_param, &= vp9_mv_param, &= vp9_mv_param, &= vp9_mv_mv_param, &= vp9_mv_param, &= vp9_mv_mv_param, &=",0
811,<S2SV_ModStart> ; if ( <S2SV_ModEnd> h -> h,0
812,<S2SV_ModStart> ) ) { break ; } <S2SV_ModEnd> if (!,0
813,"<S2SV_ModStart> ( msg_name, msg_name <S2SV_ModEnd> -> msg_name, <S2SV_ModStart> -> msg_name, msg_namelen <S2SV_ModEnd> ) ; if",0
814,"<S2SV_ModStart> -> rows ; number_planes_filled <S2SV_ModEnd> ( number_planes, <S2SV_ModStart> -> rows * number_planes_filled <S2SV_ModEnd>, number_filled, <S2SV_ModStart> -> rows ; if ( number_planes == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageData"" ) ;",0
815,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
816,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
817,<S2SV_ModStart> client -> client <S2SV_ModEnd> client -> client,0
818,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
