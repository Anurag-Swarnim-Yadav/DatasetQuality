,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
1,<S2SV_ModStart> ; if ( unlikely ( unfrag_ip6hlen > skb -> len - frag_hdr_sz ) ) { kfree_skb ( skb ) ; return ERR_PTR ( - EINVAL ) ; } <S2SV_ModStart> ; if ( unlikely ( unfrag_ip6hlen > skb -> len - frag_hdr_sz ) ) { kfree_skb ( skb ) ; return ERR_PTR ( - EINVAL ) ; } <S2SV_ModStart> ; if ( unlikely ( unfrag_ip6hlen > skb -> len - frag_hdr_sz ) ) { kfree_skb ( skb ) ; return ERR_PTR ( - EINVAL ) ; } <S2SV_ModStart> ; if ( unlikely ( unfrag_ip6hlen > skb -> len - frag_hdr_sz ) ) { kfree_skb ( skb ) ; return ERR_PTR ( - EINVAL ) ; } <S2SV_ModStart> ; if ( unlikely ( unfrag_ip6hlen > skb -> len - frag_hdr_sz ) ) { kfree_skb ( skb ) ; return ERR_PTR ( - EINVAL ) ; },0
2,<S2SV_ModStart> writer = ( TrackWriter <S2SV_ModEnd> * ) gf_list_get,0
3,<S2SV_ModStart> item ) { return <S2SV_ModEnd> cJSON_GetArrayItem ( array <S2SV_ModStart> -> child ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
4,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void __perf_sw_event ( <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",0
5,"<S2SV_ModStart> { # if ( EXT2_BLOCK_SIZE ( data ) > EXT2_BLOCK_SIZE ( data ) ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } <S2SV_ModStart> { char * buf = grub_malloc ( EXT2_BLOCK_SIZE ( data ) ) ; if (! buf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) ( leaf + 1 ) ; for ( i = 0 ; i < grub_le_to_cpu16 ( leaf -> entries ) ; i ++ ) { if ( fileblock < grub_le_to_cpu32 ( ext [ i ]. block ) ) break ; } <S2SV_ModStart> 0 ; else { grub_disk_addr_t start ; start = grub_le_to_cpu32 ( ext [ i ]. start ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start ) ; start = ( start << 32 ) + grub_le_to",0
6,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fdct16 ( const <S2SV_ModStart> 16 ] ) { int step1 [ 8 ] ; int step2 [ 8 ] ; int step3 [ 8 ] ; int input [ 8 ] ; int temp1, temp2 ; input [ 0 ] = in [ 0 ] + in [ 15 ] ; input [ 1 ] = in [ 1 ] + in [ 13 ] ; input [ 2 ] = in [ 2 ] + in [ 13 ] ; input [ 3 ] = in [ 3 ] + in [ 14 ] ; input [ 4 ] = in [ 4 ] + in [ 11 ] ; input [ 5 ] = in [ 5 ] + in [ 12 ] ; input [ 6 ] = in [ 6 ] + in [ 11 ] ; input [ 7 ] = in [ 7 ] + in [ 13 ] ; input [ 8 ] = in [ 8 ] + in [ 14 ] ; input [ 0 ] = in [ 0 ] + in [ 15 ] ; input [ 1 ] = in [ 1 ] + in [ 14 ] ; input [ 2 ] = in [ 2 ] + in [ 12 ] ; input [ 3 ] = in [ 3 ] + in [",0
7,"<S2SV_ModStart> ; retry : if (! scsi_block_when_processing_errors ( SDev ) ) { err = - ENODEV ; goto out ; } <S2SV_ModStart> cgc -> sense, & sshdr, cgc -> timeout, IOCTL_RETRIES, 0, 0, NULL ) ; if ( driver_byte ( result )!= 0 ) { switch ( sshdr. sense_key ) { case UNIT_ATTENTION : SDev -> changed = 1 ; if (! cgc -> quiet ) sr_printk ( KERN_INFO, cd, ""disc <S2SV_blank> change <S2SV_blank> detected.\\n"" ) ; if ( retries ++ < 10 ) goto retry ; err = - ENOMEDIUM ; break ; } if (! cgc -> quiet ) sr_printk ( KERN_INFO, cd, ""CDROM <S2SV_blank> not <S2SV_blank> ready. <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> there <S2SV_blank> is <S2SV_blank> a <S2SV_blank> disc <S2SV_blank> in <S2SV_blank> the <S2SV_blank> drive.\\n"" ) ; if ( retries ++ < 10 ) goto retry ; err = - ENOMEDIUM ; break ; } if (! cgc -> quiet ) sr_printk ( KERN_INFO, cd, ""CDROM",0
8,<S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { #,0
9,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> search_filter_level ( const <S2SV_ModStart> partial_frame ) { VP9_COMMON * const cm = & cpi -> common <S2SV_ModEnd> ; struct loopfilter <S2SV_ModStart> lf = & cm -> lf <S2SV_ModEnd> ; const int <S2SV_ModStart> ; int best_err <S2SV_ModEnd> ; int filt_best <S2SV_ModStart> ; int filt_direction <S2SV_ModEnd> ; int filt_mid <S2SV_ModStart> ; int bias ; if ( cm -> tx_mode == ONLY_4X4 ) { if ( cm -> tx_mode == ONLY_4X4 ) { if ( cpi -> twopass. <S2SV_ModEnd> section_intra_rating < 20 <S2SV_ModStart> 20 ) { if ( cpi -> twopass. <S2SV_ModEnd> section_intra_rating < 20 <S2SV_ModStart> 20 ) { if ( cpi -> twopass. <S2SV_ModEnd> section_intra_rating < 20 <S2SV_ModStart> 20 ) { if ( cpi -> twopass. <S2SV_ModEnd> section_intra_rating < 20 <S2SV_ModStart> 20 ) { if ( cpi -> twopass. <S2SV_ModEnd> section_intra_rating < 20 <S2SV_ModStart> 20 ) { if ( cpi -> twopass. <S2SV_ModEnd> section_intra_rating < 20 <S2SV_ModStart> 20 ) { if,0
10,"<S2SV_ModStart> left == 0 ) { luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; } else { luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; }",0
11,"<S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> i ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> i ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> i ) ; vpx_write <S2SV_ModEnd> ( w,",0
12,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; },0
13,"<S2SV_ModStart> ) dat ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%s"" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( l2tp_cc_direction2str, <S2SV_ModEnd> ""Direction-#%u"", <S2SV_ModStart> ( ndo, ""%s"" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( l2tp_cc_direction2str, <S2SV_ModEnd> ""Direction-#%u"", <S2SV_ModStart> ( ndo, ""%s"" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, ""%s"" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart>, tok2str ( l2tp_cc_direction2str, <S2SV_ModStart> ( l2tp_cc_direction2str, <S2SV_ModEnd>",0
14,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct key * construct_get_dest_keyring ( <S2SV_ModEnd> struct request_key_auth * <S2SV_ModStart> * authkey ; key_get ( dest_keyring ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModStart> KEY_REQKEY_DEFL_DEFAULT : case KEY_REQKEY_DEFL_REQUESTOR_KEYRING : if ( cred -> request_key_auth ) { authkey = cred -> request_key_auth ; down_read ( & authkey -> sem ) ; if (! test_bit ( KEY_FLAG_REVOKED, & authkey -> flags ) ) dest_keyring = key_get ( authkey -> dest_keyring ) ; up_read ( & authkey -> sem ) ; if ( dest_keyring ) dest_keyring = key_get ( cred -> user -> session_keyring ) ; if ( dest_keyring ) dest_keyring = key_get ( cred -> user -> session_keyring ) ; if ( dest_keyring ) dest_keyring = key_",0
15,"<S2SV_ModStart> = NULL ; if (! get_mech_set ( minor_status, spcred, GSS_C_INITIATE, & sc -> mech_set ) ) { ret = GSS_S_FAILURE ; goto cleanup ; } if ( get_der_mechs ( minor_status, spcred, GSS_C_INITIATE, & sc -> der_mechTypes ) < 0 ) { ret = GSS_S_FAILURE ; goto cleanup ; } if ( put_der_mech_set ( sc -> der_mech_set, & sc -> DER_mechTypes ) < 0 ) { ret = GSS_S_FAILURE ; goto cleanup ; } ret = get_der_mechs ( minor_status, spcred, GSS_C_INITIATE, & sc -> mech_set ) ; if ( ret!= GSS_S_COMPLETE ) goto cleanup ; sc -> internal_mech = & sc -> mech_set -> elements [ 0 ] ; if ( put_der_mech_set ( sc -> der_mechTypes, & sc -> DER_mechTypes ) < 0 ) { ret = GSS_S_FAILURE ; goto",0
16,"<S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_l2tpip <S2SV_ModEnd> ) ) return <S2SV_ModStart> ; if ( addr -> l2tp_family!= AF_INET <S2SV_ModEnd> ) return - <S2SV_ModStart> - EINVAL ; ret = - EADDRNOTAVAIL ; if ( addr -> l2tp_addr. s_addr && chk_addr_ret!= RTN_LOCAL && chk_addr_ret!= RTN_MULTICAST && chk_addr_ret!= RTN_BROADCAST ) goto out ; read_lock_bh ( & l2tp_ip_lock ) ; if ( __l2tp_ip_bind_lookup ( net, addr -> l2tp_addr. s_addr, sk -> sk_bound_dev_if, addr -> l2tp_conn_id ) ) goto out ; ret = - EADDRNOTAVAIL ; if ( addr -> l2tp_addr. s_addr && chk_addr_ret!= RTN_LOCAL && chk_addr_ret!= RTN_BROADCAST ) goto out ; if ( addr -> l2tp_addr. s_addr ) inet -> inet_rcv_saddr =",0
17,<S2SV_ModStart> ; tm = g_tm_localtime <S2SV_ModEnd> ( & t <S2SV_ModStart> ; str = g_strdup <S2SV_ModEnd> ( asctime (,0
18,"<S2SV_ModStart> strlen ( password ) ) ; if ( type == PW_PASSWORD ) { vector = request -> vector ; } else { vector = ( unsigned char * ) request -> vector ; } MD5Init ( & md5_secret ) ; MD5Update ( & md5_secret, ( unsigned char * ) password, strlen ( password ) ) ; my_md5 = md5_secret ; MD5Update ( & my_md5, vector, AUTH_VECTOR_LEN ) ; xor ( hashed, misc, AUTH_PASS_LEN ) ; for ( i = 1 ; i < ( length >> 4 ) ; i ++ ) { my_md5 = md5_secret ; MD5Update ( & my_md5, & hashed [ i * AUTH_PASS_LEN ], AUTH_PASS_LEN ) ; xor ( hashed [ i * AUTH_PASS_LEN ], misc, AUTH_PASS_LEN ) ; xor ( hashed [ i * AUTH_PASS_LEN ], misc, AUTH_PASS_LEN ) ; for ( i = 1 ; i < ( length >> 4 ) ; i ++ ) { my_md5 = md5_secret ; MD5Update ( & my_md5,",0
19,"<S2SV_ModStart> ; if (! e ) goto not_found ; r = parse_uid ( e + 1, & uid ) ; if ( r < 0 ) goto not_found ; machine = strndupa ( p, e - p ) ; if (! machine_name_is_valid ( machine ) ) goto not_found ; r = sd_bus_call_method ( bus, ""org.freedesktop.machine1"", ""/org/freedesktop/machine1"", ""Manager"", ""MapFromMachineUser"", & error, & reply, ""su"", ( uint32_t ) uid ) ; if ( r < 0 ) goto not_found ; r = sd_bus_open_system ( & bus ) ; if ( r < 0 ) goto not_found ; r = sd_bus_call_method ( bus, ""org.freedesktop.machine1"", ""/org/freedesktop/machine1"", ""Manager"", ""MapFromMachineUser"", & error, & reply, ""su"", ( uint32_t ) uid ) ; if ( sd_bus_error_has_name ( & error, B",0
20,"<S2SV_ModStart> &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> &&! capable_wrt_inode_gid <S2SV_ModEnd> ( inode, <S2SV_ModStart> &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> &&! capable_wrt_inode_gid <S2SV_ModEnd> ( inode, <S2SV_ModStart> &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> &&! capable_wrt_inode_gid <S2SV_ModEnd> ( inode,",0
21,"<S2SV_ModStart> ; select ( reader -> bytes_available_fd + 1, & read_fds, NULL, NULL, & timeout ) ; if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { FD_SET ( reader -> bytes_available_fd, & read_fds ) ; FD_ZERO ( & read_fds ) ; FD_ZERO ( & read_fds ) ; FD_ZERO ( & read_fds ) ; FD_ZERO ( & read_fds ) ; FD_SET ( reader -> bytes_available_fd, & read_fds ) ; return FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ; } if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { FD_ZERO ( & read_fds ) ; FD_ZERO ( & read_fds ) ; FD_ZERO ( & read_fds ) ; FD_ZERO ( & read_fds ) ; FD_ZERO ( & read_fds ) ; FD_ZERO ( & read",0
22,"<S2SV_ModStart> int detect_transition_to_still ( TWO_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> last_decay_rate ) { TWO_PASS <S2SV_ModEnd> * position = <S2SV_ModStart> frame_interval > MIN_GF_INTERVAL <S2SV_ModEnd> && loop_decay_rate >= <S2SV_ModStart> frame_interval > MIN_GF_INTERVAL <S2SV_ModEnd> && loop_decay_rate < <S2SV_ModStart> last_decay_rate < 0.9 <S2SV_ModEnd> ) { int <S2SV_ModStart> j ; const FIRSTPASS_STATS <S2SV_ModEnd> tmp_next_frame ; for <S2SV_ModStart> ++ j ) { <S2SV_ModEnd> if ( EOF <S2SV_ModStart> pcnt_inter - tmp_next_frame. <S2SV_ModEnd> pcnt_motion < 0.999 <S2SV_ModStart> pcnt_inter - tmp_next_frame. <S2SV_ModEnd> pcnt_motion < 0.999 <S2SV_ModStart> pcnt_motion < 0.999 <S2SV_ModEnd> ) trans_to_still = <S2SV_ModStart> break ; } <S2SV_ModEnd> reset_fpf_position ( twopass <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
23,"<S2SV_ModStart> return ret ; ret = ext4_convert_unwritten_extents ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten"" ""extents <S2SV_blank> to <S2SV_blank> written <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret ) ; return ret ; }",0
24,<S2SV_ModStart> alg ) { if ( ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) && ( mask & CRYPTO_ALG_NEED_FALLBACK ) ) { if ( ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) && ( mask & CRYPTO_ALG_NEED_FALLBACK ) ) { if ( ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) && ( mask & CRYPTO_ALG_NEED_FALLBACK ) ) { if ( ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) && ( mask & CRYPTO_ALG_NEED_FALLBACK ) ) { if ( ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) && ( mask &,0
25,"<S2SV_ModStart> = GIT_PKT_NG ; if ( len < 3 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } <S2SV_ModStart> += 3 ; if ( len < 1 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } <S2SV_ModStart> + 1 ; if ( len < 1 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } <S2SV_ModStart> += 1 ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> ref = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> ref ) ; memcpy ( pkt -> ref, line, len ) ; pkt -> msg = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> msg ) ; memcpy ( pkt -> msg, line, len ) ; pkt -> msg [ len ] = '\\0' ; * out = ( git_pkt * ) pkt",0
26,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nego_process_negotiation_request ( rdpNego <S2SV_ModStart> <S2SV_null> <S2SV_null> BOOL <S2SV_ModStart> = NEGO_STATE_FINAL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""RDP_NEG_REQ: <S2SV_blank> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
27,<S2SV_ModStart> 0 ) { if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; <S2SV_ModStart> 0 ) { if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; <S2SV_ModStart> 0 ) { if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; <S2SV_ModStart> 0 ) { if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; } <S2SV_ModStart> 0 ) { if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; } <S2SV_ModStart> 0 ) { if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; } <S2SV_ModStart> 0 ) { if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; } <S2SV_ModStart> 0 ) { if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; } <S2SV_ModStart> 0 ) { if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; },0
28,"<S2SV_ModStart> 1 ; } ret = mount_entry_on_generic ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> short"" ) ; return - 1 ; } <S2SV_ModEnd> return mount_entry_on_generic (",0
29,"<S2SV_ModStart> - ENODEV ; io -> inputb = intf_mem_inb ; io -> outputb = intf_mem_outb ; break ; case 1 : io -> inputb = intf_mem_inw ; io -> outputb = intf_mem_outw ; break ; case 2 : io -> inputb = intf_mem_inl ; io -> outputb = intf_mem_outl ; break ; case 4 : io -> inputb = mem_inq ; io -> outputb = mem_outq ; break ; default : dev_warn ( io -> dev, ""Invalid <S2SV_blank> register <S2SV_blank> size: <S2SV_blank> %d\\n"", io -> regsize ) ; return - EINVAL ; } for ( idx = 0 ; idx < io -> io_size ; idx ++ ) { if ( request_mem_region ( addr + idx * io -> regspacing, io -> regsize, DEVICE_NAME ) == NULL ) { mem_region_cleanup ( io, idx ) ; return - EIO ; } } mapsize = ( ( io -> io_size * io -> regspacing ) - ( io -> regspacing - io -> regsize ) ) ; io -> addr",0
30,<S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> :,0
31,"<S2SV_ModStart> ) ) ; if ( ret ) { btif_storage_error ( ""BTIF_STORAGE_ADD_BONDED_DEVICE"", ""BTIF_STORAGE_ADD_BONDED_DEVICE"", ""BTIF_STORAGE_ADD_BONDED_DEVICE"", ""BTIF_STORAGE_ADD_BONDED_DEVICE"" ) ; return BT_STATUS_FAIL ; } <S2SV_ModStart> ) ) ; if ( ret ) { btif_storage_error ( ""BTIF_STORAGE_ADD_BONDED_DEVICE"", ""BTIF_STORAGE_ADD_BONDED_DEVICE"", ""BTIF_STORAGE_ADD_BONDED_DEVICE"", ""BTIF_STORAGE_ADD_BONDED_DEVICE"", ""BTIF_STORAGE_ADD_BONDED_DEVICE"" ) ; return BT_STATUS_FAIL ; } if ( ret ) { btif_storage_error ( ""BTIF_STORAGE_ADD_BONDED_DEVICE"", ""BTIF_STORAGE_ADD_BONDED_DEVICE"", ""BTIF_STORAGE_ADD_BONDED_DEVICE",0
32,<S2SV_ModStart> ; vpx_codec_enc_cfg_map_t * <S2SV_ModEnd> map ; if <S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; if (! iface -> enc. cfg_maps ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_,0
33,"<S2SV_ModStart> type_flags ) { <S2SV_ModEnd> struct packet_fanout * <S2SV_ModStart> EINVAL ; } mutex_lock ( & fanout_mutex ) ; list_for_each_entry ( f, & fanout_list, list ) { if ( f -> id == id ) goto out ; err = - EINVAL ; if ( type == PACKET_FANOUT_ROLLOVER || ( type_flags & PACKET_FANOUT_FLAG_ROLLOVER ) ) { po -> rollover = kzalloc ( sizeof ( * po -> rollover ), GFP_KERNEL ) ; if (! po -> rollover ) return - ENOMEM ; atomic_long_set ( & po -> rollover -> num, 0 ) ; atomic_long_set ( & po -> rollover -> num_huge, 0 ) ; atomic_long_set ( & po -> rollover -> num_failed, 0 ) ; } else { atomic_long_set ( & po -> rollover -> num, 0 ) ; atomic_long_set ( & po -> rollover -> num_huge, 0 ) ; atomic_long_set ( & po -> rollover -> num_failed,",0
34,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
35,"<S2SV_ModStart> uint64_t dx_time ) { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"" <S2SV_ModEnd>, frame_in,",0
36,<S2SV_ModStart> NULL ) ; <S2SV_ModEnd> if ( imp_sth <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> if ( imp_sth <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> if ( imp_sth <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> if ( imp_sth <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> if ( imp_sth <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> if ( imp_sth <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> if ( imp_sth <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> if ( imp_sth <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> if ( imp_sth <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> if ( imp_sth <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> if ( imp_sth <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> if ( imp_sth <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> if ( imp_sth <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> if ( imp_sth <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> if ( imp_sth <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> if ( imp_sth <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> if ( imp_sth <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> if ( imp_sth <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> if ( imp_sth <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> if ( imp_sth <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> if ( imp_sth <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> if ( imp_sth <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> if ( imp_sth <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> if ( imp_sth <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> if ( imp_sth <S2SV_ModStart> NULL ) ;,0
37,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ETXSTL, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTH, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_EWRPTL, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_EWRPTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteBuffer ( interface, buffer, offset ) ; enc28j60SetBit ( interface, ENC28J60_ECON",0
38,"<S2SV_ModStart> value ) ; value = ast2obj_int ( o -> lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o ->",0
39,"<S2SV_ModStart> ; if ( access ( page, R_OK ) == 0 ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } } else if (! strcmp ( func, ""page/get"" ) ) { char * page = http_request_param_get ( req, ""page"" ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if (",0
40,"<S2SV_ModStart> flag ) { vpx_memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> -> y_width >> 4 <S2SV_ModEnd> ; int mb_cols <S2SV_ModStart> -> y_height >> 4 <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> unsigned char * limits = cm -> pp_limits_buffer ; int mbr, mbc ; ( void ) post ; ( void ) low_var_thresh ; ( void ) flag ; for ( mbr = 0 ; mbr < mb_rows ; mbr ++ ) { vpx_post_proc_down_and_across_mb_row ( source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_stride, source -> y_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> u_buffer + 8 * mbr * source -> uv_stride, source -> uv_stride, source -> uv_width, limits, 8 ) ; vpx_post_proc_down_and_across_mb_row ( source -> v_buffer + 8 * mbr * source -> uv_stride, source -> uv_stride, source -> uv_width, limits, 8 ) ; vpx",0
41,"<S2SV_ModStart> ) { ret = __copy_to_user <S2SV_ModEnd> ( param, <S2SV_ModStart> ) ) ; if ( ret ) return ret ; param += sizeof ( struct floppy_raw_cmd ) ; if ( ( ptr -> flags & FD_RAW_READ ) && ptr -> buffer_length ) { if ( ptr -> length >= 0 && ptr -> length <= ptr -> buffer_length ) { long length = ptr -> buffer_length - ptr -> length ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; } } if ( ( ptr -> flags & FD_RAW_READ ) && ptr -> buffer_length ) { if ( ptr -> length >= 0 && ptr -> length <= ptr -> buffer_length ) { long length = ptr -> buffer_length - ptr -> length ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; ret = fd_copyout ( ptr -> kernel_data, ptr -> length ) ; if ( ret ) return",0
42,"<S2SV_ModStart> void ext4_xattr_cache_insert ( <S2SV_ModEnd> struct mb2_cache * <S2SV_ModStart> int error ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; <S2SV_ModEnd> ce = mb_cache_entry_alloc <S2SV_ModStart> ; ce = mb2_cache_entry_alloc ( ext4_mb_cache, GFP_NOFS ) ; if (! ce ) { ea_bdebug ( bh, ""out <S2SV_blank> of <S2SV_blank> memory"" ) ; return ; } error = mb2_cache_entry_insert ( ce, bh -> b_bdev, bh -> b_blocknr, hash ) ; if ( error ) { ea_bdebug ( bh, ""inserting <S2SV_blank> [%x]"", ( int ) hash ) ; error = 0 ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
43,"<S2SV_ModStart> ; return r_socket_http_answer <S2SV_ModEnd> ( s, <S2SV_ModStart> rlen ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
44,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ip_options_rcu <S2SV_ModEnd> * ip_options_get_from_user ( <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( optlen && copy_from_user ( & opt -> opt, data, optlen ) ) { kfree ( opt ) ; return - EFAULT ; } <S2SV_ModEnd> return ip_options_get_finish (",0
45,"<S2SV_ModStart> ; trunc : if ( dio -> rpl_mopprf == RPL_DIO_GROUNDED ( dio -> rpl_mopprf ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|truncated]"" ) ) ; return ; } <S2SV_ModStart> : if ( dio -> rpl_mopprf == RPL_DIO_GROUNDED ( dio -> rpl_mopprf ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|grounded]"" ) ) ; return ; } <S2SV_ModStart> : if ( dio -> rpl_mopprf == RPL_DIO_GROUNDED ( dio -> rpl_mopprf ) ) { <S2SV_ModStart> : if ( dio -> rpl_mopprf == RPL_DIO_GROUNDED ( dio -> rpl_mopprf ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|grounded]"" ) ) ; return ; } <S2SV_ModStart> : if ( dio -> rpl_mopprf == RPL_DIO_GROUNDED ( dio -> r",0
46,"<S2SV_ModStart> ; if ( ( * gvarp ) [ 0 ] == NUL ) { errmsg = ( char_u * ) N_ ( ""E529: <S2SV_blank> Cannot <S2SV_blank> set <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> empty <S2SV_blank> string"" ) ; } else { errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> set <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> empty <S2SV_blank> string"" ) ; } else if ( ( * gvarp ) [ 0 ] == NUL ) { errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> set <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> empty <S2SV_blank> string"" ) ; } else { if ( ( * gvarp ) [ 0 ] == NUL ) { errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> set <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> empty <S2SV_blank> string"" ) ; } else if ( ( * gvarp ) [ 0 ] == NUL ) { errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> set <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> empty <S2SV_blank> string"" ) ; } else { errmsg = ( char_u * ) N_",0
47,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode",0
48,"<S2SV_ModStart> size_t size ; if ( width < 0 || height < 0 ) { goto error ; } if (! jas_safe_intfast32_add ( tlx, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ) { goto error ; } if (! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( cmpt -> hstep_, cmpt -> vstep_, & size ) ||! jas_safe_size_mul ( cmpt -> hstep_, cmpt -> vstep_, & size ) ) { goto error ; } if (! ( cmpt = jas_malloc ( sizeof ( jas_image_cmpt_t ) ) ) ) { goto error ; } cmpt -> type_ = JAS_IMAGE_CT_UNKNOWN ; cmpt -> tlx_ = tlx ; cmpt -> tly_ = tly ; cmpt -> hstep_ = hstep ; cmpt -> vstep_ = vstep ; cmpt -> prec_ = depth ; cm",0
49,"<S2SV_ModStart> ; if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_used + n ) ; content_buf_used += n ; } if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_used + n ) ; content_buf_len = content_buf_used + n ; } if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_used + n ) ; content_buf_len = content_buf_used + n ; } if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_used + n ) ; content_buf_len = content_buf_used + n ; } if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_used + n ) ; content_buf_len = content_buf_used + n",0
50,<S2SV_ModStart> ( flags & ( ASN1_FLAG_MATCHED | ASN1_FLAG_LAST_MATCHED ) <S2SV_ModEnd> ) || ( <S2SV_ModStart> && ( flags & ( ASN1_FLAG_LAST_MATCHED | ASN1_FLAG_INDEFINITE_LENGTH ) <S2SV_ModEnd> ) || ( <S2SV_ModStart> && ( flags & ( ASN1_FLAG_MATCHED | ASN1_FLAG_INDEFINITE_LENGTH ) <S2SV_ModEnd> ) || ( <S2SV_ModStart> && ( flags & ( ASN1_FLAG_CONS | ( ASN1_FLAG_INDEFINITE_LENGTH | ASN1_FLAG_LAST_MATCHED ) <S2SV_ModEnd> ) || ( <S2SV_ModStart> && ( flags & ( ASN1_FLAG_MATCHED | ASN1_FLAG_INDEFINITE_LENGTH ) <S2SV_ModEnd> ) || ( <S2SV_ModStart> && ( flags & ( ASN1_FLAG_MATCHED | ASN1_FLAG_INDEFINITE_LENGTH ) <S2SV_ModEnd> ) || ( <S2SV_ModStart> && ( flags & ( ASN1_FLAG_MATCHED | ASN1_FLAG_LAST_MATCHED | ASN1_FLAG_INDEFINITE_LENGTH ) <S2SV_ModEnd> ) || ( <S2SV_ModStart> && ( flags & ( ASN1_FLAG_MATCHED | ASN1_FLAG_INDEFINITE_,0
51,"<S2SV_ModStart> req, size_t <S2SV_ModEnd> acl_len ) { <S2SV_ModStart> ; __be32 * savep <S2SV_ModEnd> ; uint32_t attrlen <S2SV_ModStart> int status ; struct kvec * kvec = req -> rq_rcv_buf. head ; struct kvec * iov = req -> rq_rcv_buf. head ; uint32_t attrlen, bitmap [ 3 ] ; if ( ( status = decode_op_hdr ( xdr, OP_GETATTR ) )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & savep ) )!= 0 ) goto out ; if ( unlikely ( bitmap [ 0 ] & FATTR4_WORD0_ACL ) ) { size_t hdrlen ; u32 recvd ; if ( attrlen > req -> rq_rcv_buf. len - hdrlen ) { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" <S2SV_ModEnd> "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n",0
52,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
53,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth, <S2SV_ModStart>, "":"", & perms ) ; if ( owner && * owner ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { uid = HTTP -> uid ; } else { uid = 0 ; } } if ( group && * group ) { if ( snumber ( group ) ) { gid = ( int ) stoi ( group ) ; } else { gid = 0 ; } } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; }",0
54,"<S2SV_ModStart> ; # if CONFIG_MEM_MANAGER int number_aau ; if ( vpx_mm_create_heap_memory ( ) < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> create <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) } number_aau = ( ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ; addr = VPX_MALLOC_L ( size + align - 1 + ADDRESS_STORAGE_SIZE ) ; # else number_aau = ( ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ; if ( hmm_alloc ( & hmm_d, number_aau ) + 1 ) < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) }",0
55,"<S2SV_ModStart> int res ; <S2SV_ModEnd> long long export_index_table <S2SV_ModStart> long long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) + 1 <S2SV_ModStart> long long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) + 1 <S2SV_ModStart> long long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) + 1 ] ; res = read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } <S2SV_ModEnd> SQUASHFS_INSWAP_LOOKUP_BLOCKS ( export_index_table",0
56,"<S2SV_ModStart> ; } else { return apr_psprintf ( cmd -> pool, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"", p1 ) ; }",0
57,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
58,"<S2SV_ModStart> = 0.0 ; uint16 <S2SV_ModEnd> planar = 0 <S2SV_ModStart> = 0.0 ; if ( nstrips < 0 ) TIFFError ( ""loadImage"", ""Missing <S2SV_blank> number <S2SV_blank> of <S2SV_blank> strips <S2SV_blank> in <S2SV_blank> image"" ) ; <S2SV_ModStart> = 0.0 ; if ( ntiles < 0 ) TIFFError ( ""loadImage"", ""Missing <S2SV_blank> number <S2SV_blank> of <S2SV_blank> tiles <S2SV_blank> in <S2SV_blank> image"" ) ; <S2SV_ModStart> = 0 ; if ( nstrips < 0 ) TIFFError ( ""loadImage"", ""Missing <S2SV_blank> strips <S2SV_blank> in <S2SV_blank> image"" ) ; <S2SV_ModStart> = 0.0 ; if ( ntiles < 0 ) TIFFError ( ""loadImage"", ""Missing <S2SV_blank> number <S2SV_blank> of <S2SV_blank> strips <S2SV_blank> in <S2SV_blank> image"" ) ; <S2SV_ModStart> = 0.0 ; if ( nstrips < 0 ) TIFFError ( ""loadImage"", ""Missing <S2SV_blank> number <S2SV_blank> of <S2SV_blank> strips <S2SV_blank> in <S2SV_blank> image"" ) ; if ( ntiles < 0 ) TIFFError ( ""loadImage"", ""Missing <S2SV_blank> strips <S2SV_blank> in <S2SV_blank> image"" ) ; <S2SV_ModStart> = 0.0 ; if ( nstrips < 0 ) TIFFError ( ""loadImage"", ""Missing <S2SV_blank> strips <S2SV_blank> in <S2SV_blank> image"" )",0
59,"<S2SV_ModStart> = 0 ; # if CONFIG_VP10_ENCODER else if ( strcmp ( global -> codec -> name, ""vp10"" ) == 0 ) { ctrl_args = vp10_args ; ctrl_args_map = vp10_arg_ctrl_map ; # endif <S2SV_ModStart> } else if ( arg_match ( & arg, & codec_name, argi ) ) { config -> out_fn = arg. val ; } else if ( arg_match ( & arg, & fpf_name, argi ) ) { config -> stats_fn = arg. val ; } else if ( arg_match ( & arg, & use_ivf, argi ) ) { config -> write_webm = 0 ; } else if ( arg_match ( & arg, & threads, argi ) ) { config -> cfg. g_threads = arg_parse_uint ( & arg ) ; } else if ( arg_match ( & arg, & profile, argi ) ) { config -> cfg. g_profile = arg_parse_uint ( & arg ) ; } else if ( arg_match ( & arg, & width, argi ) ) { config -> cfg. g_",0
60,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
61,"<S2SV_ModStart> ; if (! ( flags & EXT4_MB_HINT_TRY_GOAL ) ) { flags |= EXT4_MB_HINT_TRY_GOAL ; } if ( goal > le32_to_cpu ( es -> s_first_data_block ) ) { flags |= EXT4_MB_HINT_TRY_GOAL ; goal -- ; } else goal = ext4_inode_to_goal_block ( inode ) ; if ( goal > le32_to_cpu ( es -> s_first_data_block ) ) { flags |= EXT4_MB_HINT_TRY_GOAL ; goal -- ; } <S2SV_ModEnd> neh = ext_block_hdr <S2SV_ModStart> bh ) ; if ( ext_depth ( inode ) ) neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block_idx ( inode, 0 ) ) ; else neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block ( inode, 0 ) ) ; neh -> eh_magic = EXT4_EXT_MAGIC ; ext4_extent_block_csum_set ( inode,",0
62,"<S2SV_ModStart> ( c, <S2SV_ModEnd> callback_ctx ) ) <S2SV_ModStart> 1 ; } <S2SV_ModEnd> return 0 ; <S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
63,"<S2SV_ModStart> ; if (! memcmp ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE ) ) { rc = - 1 ; goto exit ; } } if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) { rc = - 1 ; goto exit ; } if ( at91_aes_cmac ( data_length, data, computed_cmac, key_size, cipher_key ) ) { rc = - 1 ; goto exit ; } if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) { rc = - 1 ; goto exit ; } if ( at91_aes_cmac ( data_length, data, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE ) ) { rc = - 1 ; goto exit ; } if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) { rc = - 1 ; goto exit ; }",0
64,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; s_alInputDevice = Cvar_Get ( ""s_alInputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCH",0
65,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
66,"<S2SV_ModStart> cpi ) { # ifdef DISABLE_RC_LONG_TERM_MEM const uint64_t bits_used = cpi -> rc. this_frame_target ; # else const uint64_t bits_used = cpi -> rc. projected_frame_size ; # endif <S2SV_ModStart> 0 ) ; if ( cpi -> common. frame_type == KEY_FRAME ) { cpi -> twopass. gf_group_bits += cpi -> rc. this_frame_target - bits_used ; } else { cpi -> twopass. gf_group_bits += cpi -> rc. this_frame_target - bits_used ; } if ( cpi -> common. frame_type == KEY_FRAME ) { cpi -> twopass. gf_group_bits += cpi -> rc. this_frame_target - bits_used ; } else { cpi -> twopass. gf_group_bits -= bits_used ; cpi -> twopass. gf_group_bits -= bits_used ; } cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 )",0
67,"<S2SV_ModStart> EOFOp 0x07 unsigned <S2SV_ModEnd> char magick [ <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size",0
68,"<S2SV_ModStart> err_free_buf ; } dev_dbg ( & usbinterface -> dev, ""gtco <S2SV_blank> #interfaces: <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface ->",0
69,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
70,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> dir = ""/tmp"" ) == NULL ) { ulckpwdf ( ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY (",0
71,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
72,"<S2SV_ModStart> ; if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ; if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ; if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ; if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ; if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ; if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ; if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ; if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; }",0
73,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> vp9_setup_dst_planes ( MACROBLOCKD <S2SV_ModStart> int mi_col ) { <S2SV_ModEnd> const uint8_t * <S2SV_ModStart> src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; int i ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y, pd -> subsampling_x, pd -> subsampling_y ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
74,"<S2SV_ModStart> <S2SV_null> static inline int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> dst ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { <S2SV_ModStart> ) ; } return 0 ; } <S2SV_ModEnd> switch ( ctxt <S2SV_ModStart> ctxt -> op_bytes ) { case 2 : ctxt -> _eip = ( u16 ) dst ; break ; case 4 : ctxt -> _eip = ( u32 ) dst ; break ; default : WARN ( 1, ""unsupported <S2SV_blank> eip <S2SV_blank> assignment <S2SV_blank> size\\n"" ) ; } return 1 ;",0
75,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
76,<S2SV_ModStart> == READ ) inode -> i_mapping -> a_ops -> get_block <S2SV_ModEnd> = ocfs2_dio_get_block ; <S2SV_ModStart> == READ ) inode -> i_mapping -> a_ops -> get_block <S2SV_ModEnd> = ocfs2_dio_get_block ;,0
77,"<S2SV_ModStart>, ""%79s <S2SV_blank> %[^\\n]\\n"", def, strparm ) == 2 ) { if ( strparm [ 0 ] == \'""\' ) { isstring = true ; len = strlen ( strparm ) ; newstring = ( char * ) malloc ( len ) ; strparm [ len - 1 ] = 0 ; } else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else if ( strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%i"", & parm ) ; else if ( strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else if ( strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else sscanf ( strparm, ""%i"", & parm ) ; for ( i = 0 ; i < numdefaults ; i ++ ) if (! strcmp ( def",0
78,"<S2SV_ModStart> { int all_whitespace <S2SV_ModEnd> ; int kind <S2SV_ModStart> ; int kind <S2SV_ModEnd> ; void * <S2SV_ModStart> ; char * str <S2SV_ModEnd> ; PyObject * <S2SV_ModStart> ; Py_ssize_t len <S2SV_ModEnd> ; Py_ssize_t i <S2SV_ModStart> ; o = PyUnicode_DecodeUTF8 ( expr_start, expr_end - expr_start, NULL ) ; if ( o == NULL ) return NULL ; len = PyUnicode_GET_LENGTH ( o ) ; kind = PyUnicode_KIND ( o ) ; data = PyUnicode_DATA ( o ) ; for ( i = 0 ; i < len ; i ++ ) { if (! Py_UNICODE_ISSPACE ( PyUnicode_READ ( kind, data, i ) ) ) { if (! Py_UNICODE_ISSPACE ( PyUnicode_READ ( kind, data, i ) ) { if (! Py_UNICODE_ISSPACE ( PyUnicode_READ ( kind, data, i ) ) ) { all_whitespace = 0 ; break ; } } } Py_DECREF ( o ) ; if ( all_whitespace ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return",0
79,"<S2SV_ModStart> string ) { while ( c && cJSON_strcasecmp ( c -> string, string ) ) c = c -> next ;",0
80,"<S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL, TEMPORARY_TTL, TEMPORARY",0
81,<S2SV_ModStart> size ) ; <S2SV_ModEnd> px -> ft,0
82,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; ND_TCHECK_16BITS ( length ) ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length <S2SV_ModEnd> = EXTRACT_16BITS ( <S2SV_ModStart> ( ptr ) ; ptr ++ ; length <S2SV_ModEnd> = EXTRACT_16BITS ( <S2SV_ModStart> ( ptr ) ; ptr ++ ; length <S2SV_ModEnd> = EXTRACT_16BITS ( <S2SV_ModStart> ( ptr ) ; ptr ++ ; length <S2SV_ModEnd> = EXTRACT_16BITS ( <S2SV_ModStart> ( ptr ) ; ptr ++ ; length <S2SV_ModEnd> = EXTRACT_16BITS ( <S2SV_ModStart> ( ptr ) ; ptr ++ ; length <S2SV_ModEnd> = EXTRACT_16BITS ( <S2SV_ModStart> ( ptr ) ; ptr ++ ; length <S2SV_ModEnd> = EXTRACT_16BITS ( <S2SV_ModStart> ( ptr ) ; ptr ++ ; length <S2SV_ModEnd> = EXTRACT_16BITS ( <S2SV_ModStart> ( ptr ) ; ptr ++ ; length <S2SV_ModEnd> = EXTRACT_16BITS ( <S2SV_ModStart> ( ptr ) ; ptr ++ ; length <S2SV_ModEnd> = EXTRACT_16BITS ( <S2SV_ModStart> ( ptr ) ; ptr ++ ; length <S2SV_ModEnd> = EXTRACT_16BITS ( <S2SV_ModStart> ( ptr ) ; ptr ++ ; length <S2SV_ModEnd> = EXTRACT_",0
83,<S2SV_ModStart> endif # if HAVE_LZMA_H <S2SV_ModEnd> && HAVE_LIBLZMA if,1
84,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
85,"<S2SV_ModStart> int i ; const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; struct macroblockd_plane * const pd = & xd -> plane [ i ] ; const int subsampling_x = sf -> subsampling_x ; const int subsampling_y = sf -> subsampling_y ; const int subsampling_x = sf -> subsampling_x ; const int subsampling_y = sf -> subsampling_y ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], subsampling_x, pd -> subsampling_y",0
86,<S2SV_ModStart> ; lock_sock ( sk ) ; if ( msg -> msg_name ) { msg -> msg_name [ msg -> msg_namelen ] = sizeof ( * msg -> msg_name ) ; msg -> msg_name [ msg -> msg_namelen ] = sizeof ( * msg -> msg_name ) ; msg -> msg_name [ msg -> msg_namelen ] = sizeof ( * msg -> msg_name ) ; } if ( msg -> msg_name ) { msg -> msg_name [ msg -> msg_namelen ] = sizeof ( * msg -> msg_name ) ; msg -> msg_name [ msg -> msg_namelen ] = 0 ; } else { msg -> msg_name [ msg -> msg_namelen ] = sizeof ( * msg -> msg_name ) ; msg -> msg_name [ msg -> msg_namelen ] = sizeof ( * msg -> msg_name ) ; } if ( msg -> msg_name ) { msg -> msg_name [ msg -> msg_name [ msg -> msg_namelen ] = sizeof ( * msg -> msg_name ) ; msg -> msg_name [ msg -> msg_namelen ] =,0
87,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
88,<S2SV_ModStart> user ) { if (! capable ( CAP_SYS_RAWIO ) ) return - EPERM <S2SV_ModEnd> ; cleanup_srcu_struct (,0
89,"<S2SV_ModStart> * data ; if ( cursor -> ns == NULL ) { cursor -> err = MONGO_CURSOR_INVALID ; return MONGO_ERROR ; } <S2SV_ModStart> + 1 ; if ( cursor -> seen >= cursor -> limit ) { cursor -> err = MONGO_CURSOR_EXHAUSTED ; return MONGO_ERROR ; } cursor -> seen = 0 ; mm = mongo_message_create ( 16 + 4 + 4 + 4 + 8, 0, 0, MONGO_OP_GET_MORE ) ; data = & mm -> data ; data = mongo_data_append32 ( data, & ZERO ) ; data = mongo_data_append ( data, cursor -> reply -> fields. cursorID ) ; mongo_data_append64 ( data, & cursor -> reply -> fields. num ) ; bson_free ( cursor -> reply ) ; }",0
90,"<S2SV_ModStart> * for_ch ; int <S2SV_ModEnd> is_async = 0 <S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == ASYNC ) { <S2SV_ModEnd> is_async = 1 <S2SV_ModStart> ; } for_ch = CHILD ( n, 1 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; expression = ast_for_expr ( c, CHILD ( n, 3 + is_async ) ) ; if (! expression ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if ( NCH ( for_ch ) == 1 ) comp = comprehension ( first, expression, NULL, is_async, c -> c_arena ) ; else comp = comprehension ( Tuple ( t, Store, first -> lineno, first -> col_offset, c -> c_arena ), expression, NULL, is_async, c -> c_arena ) ; else comp = comprehension ( Tuple ( t, Store, first -> lineno, first -> col_offset, c -> c_arena ) ; if (! comp",0
91,<S2SV_ModStart> NULL ; } <S2SV_ModEnd> dst_state -> curframe,0
92,"<S2SV_ModStart> void write_mb_modes_kf ( const VP9_COMMON * cm, MACROBLOCKD * xd, <S2SV_ModStart> * mi_8x8, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> -> mi_stride ] ; const MODE_INFO * const above_mi = xd -> above_available? mi_8x8 : NULL ; const MODE_INFO * const left_mi = xd -> left_available? mi_8x8 [ - 1 ] : NULL ; const MB_MODE_INFO * const mbmi = & mi -> mbmi ; const BLOCK_SIZE bsize = mbmi -> sb_type ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ bsize ] ; int idx, idy ; for ( idx = 0 ; idx < 2 ; idx += num_4x4_w ) { for ( idx = 0 ; idx < 2 ; idx += num_4x4_h ) { for ( idx = 0 ; idx < 2 ; idx += num_4x4_w )",0
93,"<S2SV_ModStart> maxn ) { switch ( actions [ n ]. SWF_ACTIONRECORD. ActionCode ) { case SWFACTION_END : return 0 ; case SWFACTION_CONSTANTPOOL : decompileCONSTANTPOOL ( & actions [ n ] ) ; return 0 ; case SWFACTION_GOTOFRAME : decompileGOTOFRAME ( n, actions, maxn, 1 ) ; case SWFACTION_GOTOFRAME : decompileGOTOFRAME ( n, actions, maxn, 0 ) ; case SWFACTION_GETURL2 : decompileGETURL2 ( & actions [ n ] ) ; return 0 ; case SWFACTION_PUSHDUP : decompilePUSHDUP ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETPROPERTY : decompileGETPROPERTY ( n, actions, maxn ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n, actions, maxn ) ; return 0 ; case SWFACTION_TRACE : decompileTRACE ( n, actions, maxn ) ; return 0 ; case SWFACTION_CALLFRAME : decompileCALLFRAME ( n, actions, maxn ) ;",0
94,<S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( & prep -> pp_n ) ; <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> n = EXTRACT_32BITS,0
95,<S2SV_ModStart> ; rq -> skip_clock_update = 1 ;,0
96,<S2SV_ModStart> <S2SV_null> <S2SV_null> static sqlite3_int64 <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> ( char * <S2SV_ModEnd> ) * ( <S2SV_ModStart> pTable -> nModuleArg ) ; sqlite3_int64 <S2SV_ModEnd> * azModuleArg ;,0
97,<S2SV_ModStart> ] ; for ( i = 0 ; i < anal_size ; i ++ ) { u [ i ] = * anal_buf [ i ] ; } for ( i = 0 ; i < anal_size ; i ++ ) { u [ i ] = * anal_buf [ i ] ; } for ( i = 0 ; i < anal_size ; i ++ ) { u [ i ] = * anal_buf [ i - anal_size ] ; } for ( i = 0 ; i < anal_size ; i ++ ) { u [ i ] = * anal_buf [ i ] ; } for ( i = 0 ; i < anal_size ; i ++ ) { u [ i ] = * anal_buf [ i ] ; } for ( i = 0 ; i < anal_size ; i ++ ) { u [ i ] = * anal_buf [ i - anal_size ] ; } for ( i = 0 ; i < anal_size ; i ++ ) { u [ i ] = * anal_buf [ i ] ; } for ( i = 0 ; i < anal_size ; i ++ ) {,0
98,<S2SV_ModStart> -> dmin ; if (! ONIGENC_IS_MULTIBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc,0
99,"<S2SV_ModStart> bfq_idle_slice_timer_body ( struct bfq_data <S2SV_ModEnd> * bfqd, <S2SV_ModStart> bfqd = bfqq <S2SV_ModEnd> -> bfqd ; <S2SV_ModStart> flags ) ; if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_TOO_IDLE ; else if ( bfq_bfqq_expire ( bfqd, bfqq, true, BFQQE_TOO_IDLE ) ) { spin_unlock_irqrestore ( & bfqd -> lock, flags ) ; return ; } spin_lock_irqsave ( & bfqd -> lock, flags ) ; bfq_clear_bfqq_wait_request ( bfqq ) ; if ( bfqq!= bfqd -> in_service_queue ) { spin_unlock_irqrestore ( & bfqd -> lock, flags ) ; return ; } if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_",0
100,,1
101,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
102,"<S2SV_ModStart> + diffBlockLength || diffPtr + x <S2SV_ModStart> + diffBlockLength || extraPtr + y <S2SV_ModEnd> > extraBlock + <S2SV_ModStart> NULL ; } if ( diffPtr + x > <S2SV_ModStart> + diffBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } <S2SV_ModStart> + diffBlockLength ) ; if ( extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } <S2SV_ModStart> + x > <S2SV_ModStart> + diffBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } <S2SV_ModStart> + diffBlockLength ) ; if ( extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; }",0
103,"<S2SV_ModStart> pktopts ) ; if ( np -> opt ) { err = ip6_xmit ( sk, skb, fl6, np -> opt, np -> tclass ) ; } else { err = ip6_xmit ( sk, skb, fl6, np -> opt, np -> tclass",0
104,"<S2SV_ModStart> MagickBooleanType status ; if ( number_pixels > MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels ), MagickMax ( MagickMax ( MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels ), MagickMax ( MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax",0
105,<S2SV_ModStart> ; int64_t index_pts ; if ( avio_feof ( s -> pb ) ) { goto end ; },0
106,"<S2SV_ModStart> { return encoder_common_init <S2SV_ModEnd> ( ctx, <S2SV_ModStart> data ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
107,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> _Unpickler_ResizeMemoList ( UnpicklerObject <S2SV_ModStart> new_size ) { <S2SV_ModEnd> Py_ssize_t i ; <S2SV_ModStart> i ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
108,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
109,"<S2SV_ModStart> mbmi. mb. as_int ; mv_bias ( ref_frame_sign_bias [ above -> mbmi. mb. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. mb. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. mb. ref_frame ], refframe, & near_mvs [ left -> mbmi. mb. ref_frame ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. mb. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. mb. ref_frame ], refframe, & near_mvs [ left -> mbmi. mb. ref_frame ], ref_frame_sign_bias",0
110,<S2SV_ModStart> sockaddr_ll ) ; if ( msg -> msg_name ) { msg -> msg_name = MSG_PACKET ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_name [ MSG_TRUNC ] = sizeof ( struct virtio_net_hdr ) ; msg -> msg_name [ MSG_CMSG_COMPAT ] = sizeof ( struct virtio_net_hdr_ext ) ; } else { msg -> msg_name = NULL ; } if ( msg -> msg_name ) { msg -> msg_name = MSG_PACKET ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ext ) ; msg -> msg_name [ MSG_CMSG_COMPAT ] = sizeof ( struct virtio_net_hdr_ext ) ; } else { msg -> msg_name [ MSG_CMSG_COMPAT ] = sizeof ( struct virtio_net_hdr_ext ) ; },0
111,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
112,"<S2SV_ModStart> asconf ) { sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) asconf -> chunk_hdr ; sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) asconf -> chunk_hdr ; sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) asconf -> chunk_hdr ; __u32 serial ; sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) asconf -> chunk_hdr ; <S2SV_ModStart> goto done ; <S2SV_ModEnd> err_code = sctp_process_asconf_param <S2SV_ModStart> asconf, addip ) ; if ( SCTP_ERROR_NO_ERROR!= err_code ) all_param_pass = 0 ; if (! all_param_pass ) sctp_add_asconf_response ( asconf_ack, addip -> crr_id, err_code, addip ) ; if (! all_param_pass ) sctp_add_asconf_response ( asconf_ack, add",0
113,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
114,<S2SV_ModStart> msicap ; pci_populate_msicap <S2SV_ModEnd> ( & msicap,0
115,"<S2SV_ModStart> ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'""",0
116,"<S2SV_ModStart> vpx_codec_err_t res ; memset ( & ctx -> cfg, 0, sizeof ( ctx -> cfg ) ) ; <S2SV_ModStart>!= VPX_RC_ONE_PASS ) <S2SV_ModEnd> ) ERROR ( <S2SV_ModStart> ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_w > ctx -> cfg. g_w ) || ( cfg -> g_h > ctx -> cfg. g_h ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> height <S2SV_blank> or <S2SV_blank> width <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_w > ctx -> cfg. g_w ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_w > ctx -> cfg. g_w ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_h > ctx -> cfg. g_h ) ) ERROR ( ""Cannot <S2SV_blank> increase <S2SV_blank> lag_in_frames"" ) ; res = validate_config ( ctx, cfg, & ctx -> vp8_cfg, 0 ) ; if (! res",0
117,"<S2SV_ModStart> cpi ) { vpx_init_plane_quantizers <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; vpx_init_plane_quantizers <S2SV_ModEnd> ( cpi,",0
118,"<S2SV_ModStart> int rc ; unsigned long eip <S2SV_ModEnd> ; old_cs = <S2SV_ModStart> ( ctxt, & eip <S2SV_ModEnd>, VCPU_SREG_CS ) <S2SV_ModStart> ( ctxt, eip <S2SV_ModEnd>, VCPU_SREG_CS ) <S2SV_ModStart> ( ctxt, eip <S2SV_ModEnd>, VCPU_SREG_CS ) <S2SV_ModStart> ( ctxt, eip <S2SV_ModEnd>, VCPU_SREG_CS ) <S2SV_ModStart> return X86EMUL_CONTINUE ; rc = assign_eip_far ( ctxt, eip <S2SV_ModEnd>, ctxt -> <S2SV_ModStart>, VCPU_SREG_CS ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; rc = assign_eip_far ( ctxt, eip <S2SV_ModEnd>, ctxt -> <S2SV_ModStart>, VCPU_SREG_CS ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; ctxt -> src. val = eip ; rc = em_push ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; ctxt -> src. val = old_cs ; rc = em_push ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; rc = assign_eip_far ( ctxt, e",0
119,"<S2SV_ModStart> - EINVAL ; if ( info -> si_signo!= sig ) { info -> si_signo = sig ; return - EPERM ; } <S2SV_ModEnd> info -> si_code <S2SV_ModStart> >= 0 ) { info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
120,"<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if (! ptr -> movie_identifier ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_TEXT ( GF_LOG_ERROR, GF_LOG_TEXT ( GF_LOG_ERROR, GF_LOG_TEXT ( GF_LOG_TEXT ( GF_LOG_ERROR, GF_LOG_TEXT ( GF_LOG_TEXT ( GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_TEXT ( GF_LOG_TEXT ( GF_LOG ( GF_LOG_ERROR, GF_LOG_TEXT ( GF_LOG_TEXT ( GF_LOG_TEXT ( GF_LOG_TEXT ( GF_LOG_TEXT ( GF_LOG_TEXT ( GF_LOG_TEXT ( GF_LOG_TEXT ( GF_LOG_TEXT ( GF_LOG_TEXT ( GF_LOG_ERROR, GF_LOG_TEXT ( GF_LOG_TEXT ( GF_LOG_TEXT ( GF_LOG_ERROR, GF_LOG_TEXT ( GF_LOG_",0
121,<S2SV_ModStart> alg_priv ) ; if (! ctx -> iface -> enc. get_glob_hdrs ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> iface -> caps & VPX_CODEC_CAP_ENCODER ) ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> iface -> caps & VPX_CODEC_CAP_ENC ) ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> iface -> caps & VPX_CODEC_CAP_ENCODER ) ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> iface -> enc. get_glob_hdrs ) ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> iface -> enc. get_glob_hdrs ) ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> iface -> enc. get_glob_hdrs ) ) ctx -> err = VPX_CODEC_IN,0
122,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> == mode ) { if ( ( fmode & FMODE_WRITE )!= ( state -> state & FMODE_WRITE ) ) { if ( ( fmode & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { if ( ( fmode & FMODE_WRITE )!= ( state -> state & FMODE_WRITE ) ) { list_move ( & state -> open_states, & state -> owner -> so_states ) ; list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } else { list_move ( & state -> open_states, & state -> owner -> so_states ) ; } } else { if ( ( fmode & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { if ( ( fmode & FMODE_WRITE )!= ( state -> state & FMODE_WRITE ) ) { list_move ( & state -> open_states, & state -> owner -> so_states ) ; } else { list_move ( & state -> open_states, & state -> owner -> so_states",0
123,<S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c <S2SV_ModStart> ; if (,0
124,"<S2SV_ModStart> 0 ; } if ( elem. in_sg [ 0 ]. iov_len!= len ) { virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } if ( elem. out_sg [ 0 ]. iov_len!= len ) { virtqueue_push ( vq, & elem, len ) ; virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } if ( elem. out_sg [ 0 ]. iov_len!= len ) { virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } if ( elem. out_sg [ 0 ]. iov_len!= len ) { virtqueue_push ( vq, & elem, len ) ; virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; }",0
125,"<S2SV_ModStart> ""expn[%d] <S2SV_blank> = <S2SV_blank> 0x%04x; <S2SV_blank> mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( int ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), ( int ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( int ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ), ( int ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""qntsty <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numguard <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> numstepsizes <S2SV_blank> = <S2SV_blank> %d;\\n"", ( int ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), ( int ) JPC_QCX_GETMANT ( qcd -> compparms",0
126,"<S2SV_ModStart> = AV_PIX_FMT_PAL8 ; avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } if ( c -> format == BIT_PLANAR ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } if ( c -> format == BIT_LINE ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; }",0
127,"<S2SV_ModStart> 1 ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } <S2SV_ModStart> 1 ) ; if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } <S2SV_ModStart> 1 ) ; if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } <S2SV_ModStart> 1 ) ; if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; }",0
128,"<S2SV_ModStart> { const char * name = fit_get_name ( fit, noffset, NULL ) ; if (! strncmp ( name, FIT_SIG_NODENAME, strlen ( FIT_SIG_NODENAME ) ) ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; verified = 1 ; break ; } } if (! strncmp ( name, FIT_SIG_NODENAME, strlen ( FIT_SIG_NODENAME ) ) ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) { puts ( ""- <S2SV_blank> "" ) ; verified = 1 ; break ; } } if ( noffset == - FDT_ERR_TRUNCATED || noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; }",0
129,"<S2SV_ModStart> ; if ( kfifo_alloc ( & state -> tx_kfifo, CX23888_IR_TX_KFIFO_SIZE, GFP_KERNEL ) ) return - ENOMEM ; state -> dev = dev ; state -> sd = & state -> v4l2_dev ; v4l2_subdev_init ( sd, & cx23888_ir_controller_ops ) ; v4l2_set_subdevdata ( sd, state ) ; snprintf ( sd -> name, sizeof ( sd -> name ), ""%s/888-ir"", dev -> name ) ; sd -> grp_id = CX23885_HW_888_IR ; ret = v4l2_device_register_subdev ( & dev -> v4l2_dev, sd ) ; if ( ret == 0 ) { cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_rx_params ; v4l2_subdev_call ( sd",0
130,"<S2SV_ModStart> * iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> = VPX_CODEC_ABI_MISMATCH ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) &&! ( iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if (",0
131,<S2SV_ModStart> value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
132,"<S2SV_ModStart> icmp_param ) ; ipc = rcu_dereference_protected ( net -> ipv4. ipcm_cookie, sock_owned_by_user ( rt -> dst. dev ) ) ;",0
133,<S2SV_ModStart> = nlogs ; if ( unlikely ( headcount >= UIO_MAXIOV ) ) { r = - ENOBUFS ; goto err ; },0
134,<S2SV_ModStart> { rq = tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; fn (,1
135,<S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) && ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res,0
136,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
137,<S2SV_ModStart> skb_is_nonlinear ( skb ) ) return 0 ; if ( skb -> len < sizeof ( struct nlattr,1
138,"<S2SV_ModStart> ; encode_share_access ( <S2SV_ModEnd> xdr, arg <S2SV_ModStart> arg -> open_flags <S2SV_ModEnd> ) ; RESERVE_SPACE",0
139,"<S2SV_ModStart> < 0 ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> using <S2SV_blank> alternate <S2SV_blank> calculation <S2SV_blank> %u"", tl * tile_rowsize ) ; exit ( - 1 ) ; } <S2SV_ModStart> < 0 ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> using <S2SV_blank> alternate <S2SV_blank> calculation <S2SV_blank> %u"", tl * tile_rowsize ) ; exit ( - 1 ) ; } <S2SV_ModStart> < 0 ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> using <S2SV_blank> alternate <S2SV_blank> calculation <S2SV_blank> %u"", tl * tile_rowsize ) ; exit ( - 1 ) ; } <S2SV_ModStart> < 0 ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> using <S2SV_blank> alternate <S2SV_blank> calculation <S2SV_blank> %u"", tl * tile_rowsize ) ; exit ( - 1 ) ; } <S2SV_ModStart> < 0 ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> using <S2SV_blank> alternate <S2SV_blank> calculation <S2SV_blank> %u"", tile_buffsize, tl * tile_rowsize ) ; exit ( - 1 ) ;",0
140,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> int modify_bar_registration ( <S2SV_ModStart> ""modify_bar_registration: <S2SV_blank> bypass <S2SV_blank> for <S2SV_blank> pci-gvt\\n"" ) ; <S2SV_ModEnd> return ; } <S2SV_ModStart> break ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
141,"<S2SV_ModStart> ; if ( fscanf ( fp, "" <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %s\\n"", & n, typestr )!= 2 ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if ( strcmp ( typestr, ""float"" ) ) type = 0 ; else type = 1 ; if ( ( pta = ptaCreate ( n ) ) == NULL ) return ( PTA * ) ERROR_PTR ( ""pta <S2SV_blank> not <S2SV_blank> made"", procName, NULL ) ; if ( ( pta = ptaCreate ( n ) ) == NULL ) return ( PTA * ) ERROR_PTR ( ""pta <S2SV_blank> not <S2SV_blank> made"", procName, NULL ) ; if ( ( pta = ptaCreate ( n ) ) == NULL ) return ( PTA * ) ERROR_PTR ( ""pta <S2SV_blank> not <S2SV_blank> made"", procName, NULL ) ; if ( ( pta = ptaCreate ( n ) ) == NULL ) return ( PTA * ) ERROR_PTR ( ""pta <S2SV_blank> not <S2SV_blank>",0
142,<S2SV_ModStart> : case 0x1a : case 0x1b : case 0x1c : case 0x1f : case 0x31 : case 0x32 : case 0x33 : case 0x34 : case 0x37 : case 0x3a : case 0x3b : case 0x3c : case 0x3f : case 0x4a : case 0x4b : case 0x4f : case 0x5a : case 0x5c : case 0x5f : case 0x6a : case 0x6b : case 0x6e : case 0x6f : case 0x7a : case 0x7b : case 0x7c : case 0x7f :,0
143,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
144,"<S2SV_ModStart> goto trunc ; if ( lshp -> ls_length < 2 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_router ), lshp -> ls_seq, lshp -> ls_age, lshp -> ls_length ) ) ; } else { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_seq ), lshp -> ls_age, lshp -> ls_length ) ) ; }",0
145,<S2SV_ModStart> true ; } if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; opipe -> nrbufs ++ ; ibuf -> offset += ibuf -> len ; ibuf -> len -= ibuf -> len ; obuf -> len = len ; opipe -> curbuf = ( ipipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; } else { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; opipe -> nrbufs ++ ; opipe -> curbuf = ( ipipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; ibuf -> ops = NULL ; opipe -> nrbufs -- ; ipipe -> curbuf = ( ipipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; ipipe -> curbuf = ( ipipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; opipe -> curbuf = ( ipipe -> curbuf + 1 ) & ( opipe -> buffers - 1,0
146,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, const",0
147,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd =,0
148,"<S2SV_ModStart> ss ; u32 <S2SV_ModEnd> msr_data ; int <S2SV_ModStart> = X86EMUL_MODE_PROT32 ; <S2SV_ModEnd> ops -> get_msr <S2SV_ModStart> = X86EMUL_MODE_PROT64 ; <S2SV_ModEnd> cs. dpl <S2SV_ModStart> = 1 ; <S2SV_ModEnd> ss. l <S2SV_ModStart> = 1 ; <S2SV_ModEnd> } cs_sel |= <S2SV_ModStart> ; ss_sel |= SELECTOR_RPL_MASK ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_SS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_RSP ) ; ops -> set_segment ( ctxt, cs_sel, & ss, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, cs_sel, & ss, 0, VCPU_SREG_SS ) ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; ops -> set_segment ( ctxt, cs_sel, & ss,",0
149,"<S2SV_ModStart> costs, vpx_tree <S2SV_ModEnd> * tree, <S2SV_ModStart> c ) { vpx_tree <S2SV_ModEnd> prob = probs <S2SV_ModStart> i / 2 ] ; vpx_tree_index ii ; for ( ii = 0 ; ii <= 1 ; ++ ii ) { const int cc = c + vpx_cost_bit ( prob, ii ) ; if ( ii <= 0 ) costs [ - ii ] = cc ; else costs [ - ii ] = cc ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
150,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
151,"<S2SV_ModStart> & 0xffff ; if ( p + 4 + c > sizeof ( event_rec ) - 4 ) return - EINVAL ; <S2SV_ModStart> 0xffff ; err = synth_devs [ dev ] -> load_patch ( dev, fmt, buf, p + 4, c, 0 ) ; if ( err < 0 ) return err ; if ( ev_code >= 128 ) { if ( seq_mode == SEQ_2 ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> 4 <S2SV_blank> byte <S2SV_blank> event <S2SV_blank> in <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> mode\\n"" ) ; return - EINVAL ; } ev_size = 8 ; if ( c < ev_size ) { if ( seq_mode == SEQ_2 ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> 2 <S2SV_blank> byte <S2SV_blank> event <S2SV_blank> in <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> mode\\n"" ) ; return - EINVAL ; } } else { if ( seq_mode == SEQ_2 ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> 2 <S2SV_blank> byte <S2SV_blank> event <S2SV_blank> in <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> mode\\n"" ) ; return - EINVAL ; }",0
152,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fadst16 ( const <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; int x0 = input [ 15 ] ; int x1 = input [ 0 ] ; int x2 = input [ 1 ] ; int x3 = input [ 2 ] ; int x4 = input [ 3 ] ; int x5 = input [ 4 ] ; int x6 = input [ 5 ] ; int x7 = input [ 6 ] ; int x8 = input [ 7 ] ; int x9 = input [ 8 ] ; int x10 = input [ 10 ] ; int x11 = input [ 11 ] ; int x12 = input [ 12 ] ; int x13 = input [ 2 ] ; int x14 = input [ 1 ] ; int x15 = input [ 14 ] ; s0 = x0 * cospi_1_64 + x1 * cospi_27_64 ; s",0
153,<S2SV_ModStart> mask ; # if HAVE_EDSP <S2SV_ModEnd> flags |= HAS_EDSP <S2SV_ModStart> # endif # if HAVE_MEDIA <S2SV_ModEnd> flags |= HAS_MEDIA <S2SV_ModStart> # endif # if HAVE_NEON <S2SV_ModEnd> flags |= HAS_NEON,0
154,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
155,"<S2SV_ModStart> tot_len ) ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
156,<S2SV_ModStart> ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_READONLY ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_WRITE_HOLD ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_WRITEHOLD ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_READONLY ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_READONLY ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( ( flag & CL_UNPRIVILEGED ) && list_empty ( & old -> mnt_expire ) ) mnt -> mnt. mnt_flags |= MNT_,0
157,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> count_segs_sb ( VP9_COMP <S2SV_ModStart> const tile, <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * <S2SV_ModEnd> mi_8x8, int <S2SV_ModStart> bsize ) { <S2SV_ModEnd> const int bw <S2SV_ModStart> bw = num_8x8_blocks_wide_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; const int bh = num_8x8_blocks_high_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; if ( bw == bs && bh == bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, mi_row, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, hbs, mi_row + hbs,",0
158,<S2SV_ModStart> c -> flags & CLIENT_CLOSE_AFTER_REPLY ) break ; if (! c -> reqtype ) { if ( c -> querybuf [ 0 ] == '*' ) { c -> reqtype = PROTO_REQ_INLINE ; } else if ( c -> querybuf [ 0 ] == '*' ) { c -> reqtype = PROTO_REQ_MULTIBULK ; } else { c -> reqtype = PROTO_REQ_INLINE ; } } if ( c -> reqtype == PROTO_REQ_MULTIBULK ) { if ( processMultibulkBuffer ( c )!= C_OK ) break ; } else if ( c -> reqtype == PROTO_REQ_INLINE ) { if ( processInlineBuffer ( c )!= C_OK ) break ; } else if ( c -> reqtype == PROTO_REQ_MULTIBULK ) { if ( processMultibulkBuffer ( c )!= C_OK ) break ; } else if ( c -> reqtype == PROTO_REQ_INLINE ) { if ( processInlineBuffer ( c )!= C_OK ) break ; } else if ( c -> reqtype == PROTO_REQ_MULTIBUL,0
159,"<S2SV_ModStart> = 0 ; err = ext4_get_blocks ( handle, mpd -> inode, next, max_blocks, & new, get_blocks_flags ) ; if ( err ) { ext4_msg ( mpd -> inode -> i_sb, KERN_CRIT, ""delayed <S2SV_blank> block <S2SV_blank> allocation <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> at <S2SV_blank> "" ""logical <S2SV_blank> offset <S2SV_blank> %llu <S2SV_blank> with <S2SV_blank> max <S2SV_blank> blocks <S2SV_blank> %zd\\n"", mpd -> inode -> i_ino, ( unsigned long long ) next, mpd -> b_size >> mpd -> inode -> i_blkbits, err ) ; mpd -> retval = err ; return err ; } if ( mpd -> b_state & ( 1 << BH_Mapped ) ) { ext4_msg ( mpd -> inode -> i_sb, KERN_CRIT, ""delayed <S2SV_blank> block <S2SV_blank> allocation <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> at <S2SV_blank> "" ""logical <S2SV_blank> offset <S2SV_blank> %llu <S2SV_blank> with <S2SV_blank> max <S2SV_blank> blocks <S2SV_blank> %zd\\n"", mpd -> inode -> i_ino, ( unsigned long long ) next, mpd",0
160,"<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> canonnamelen = 0 <S2SV_ModStart>, handle, & p -> ai_flags, & p -> ai_family, & p -> ai_socktype, & p -> ai_protocol, & p -> ai_addrlen, & canonnamelen, NULL )!= OE_OK ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval!= - 1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( oe_syscall_getaddrinfo_read_ocall ( & retval, handle, & p -> ai_flags, & p -> ai_family, & p -> ai_socktype, & p -> ai_protocol, & p -> ai_addrlen, & canonnamelen, NULL )!= OE_OK ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; }",0
161,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> '=' ) ; if ( separator!= NULL ) { * separator = '\\0' ; strSafeCopy ( connection -> request. auth. user, token, HTTP_SERVER_USERNAME_MAX_LEN ) ; token = separator + 1 ; connection -> request. auth. password = token ; } } TRACE_DEBUG ( ""Authorization <S2SV_blank> header:\\r\\n"" ) ; TRACE_DEBUG ( "" <S2SV_blank> username: <S2SV_blank> %s\\r\\n"", connection -> request. auth. user ) ; TRACE_DEBUG ( "" <S2SV_blank> password: <S2SV_blank> %s\\r\\n"", connection -> request. auth. password ) ; token = separator + 1 ; connection -> request. auth. user = token ; } } TRACE_DEBUG ( ""Authorization <S2SV_blank> header:\\r\\n"" ) ; TRACE_DEBUG ( ""Authorization <S2SV_blank> header:\\r\\n"" ) ; TRACE_DEBUG ( "" <S2SV_blank> username: <S2SV_blank> %s\\r\\n"", connection -> request. auth. user ) ; TRACE_DEBUG ( "" <S2SV_blank> password: <S2SV_blank> %s\\r\\n"", connection -> request. auth. user ) ; TRACE_DEBUG",0
162,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
163,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( pegasus_t <S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM ; ret = usb_control_msg ( pegasus -> usb, 0, PEGASUS_REQ_SET_REGS, 0, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> 100 ) ; if ( ret < 0 ) netif_dbg ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d\\n"", __func__, ret ) ; if ( ret < 0 ) netif_dbg ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d\\n"", __func__, ret ) ;",0
164,"<S2SV_ModStart> asdl_seq * body <S2SV_ModEnd>, PyArena * <S2SV_ModStart> body ; return ( mod_ty ) PyArena_Malloc ( arena, sizeof ( * p ) ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
165,"<S2SV_ModStart> * src, vpx_bit_depth_t bit_depth <S2SV_ModStart> >> 4 ; vpx_bit_depth_t bit_depth <S2SV_ModStart> -> write_idx ) ; vpx_copy_and_extend_frame ( src, & buf -> img ) ; vpx_copy_and_extend_frame ( src, & buf -> img ) ; vpx_copy_and_extend_frame ( src, & buf -> img ) ; vpx_copy_and_extend_frame ( src, & buf -> img ) ; vpx_copy_and_extend_frame ( src, & buf -> img ) ; vpx_copy_and_extend_frame ( src, & buf -> img ) ; vpx_copy_and_extend_frame ( src, & buf -> img ) ; vpx_copy_and_extend_frame ( src, & buf -> img ) ; vpx_copy_and_extend_frame ( src, & buf -> img ) ; vpx_copy_and_extend_frame ( src, & buf -> img ) ; vpx_copy_and_extend_frame ( src, & buf -> img ) ; vpx_copy_and_extend",0
166,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
167,"<S2SV_ModStart>. sharpness ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; if ( method == LPF_PICK_FROM_Q ) { const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( cm -> frame_type == KEY_FRAME ) filt_guess -= 4 ; lf -> filter_level = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; } else { const int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( cm -> frame_type == KEY_FRAME ) filt_guess -= 4 ; lf -> filter_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ; }",0
168,<S2SV_ModStart> } break ; case BTA_DM_DISABLE_EVT : { BD_NAME bdname ; bt_status_t status ; status = btif_storage_get_adapter_property ( & bdname ) ; if ( status == BT_STATUS_SUCCESS ) { BTA_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } else { BTA_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } # if ( defined ( BLE_INCLUDED ) && ( BLE_INCLUDED == TRUE ) ) BTA_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_DISABLED ) ; BTA_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_DISABLED ) ; BTA_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_DISABLED ) ; } # if ( defined ( BLE_INCLUDED ) && ( BLE_INCLUDED == TRUE ) ) BTA_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIV,0
169,"<S2SV_ModStart> { int a = getnum ( fmt, MAXALIGN ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; h -> align = a ; return ; } case '!' : { int a = getnum ( fmt, MAXALIGN ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; h -> align = a ; return ; } case '!' : { int a = getnum ( fmt, MAXALIGN ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; h -> align = a ; return ; } case '!' : { int a = getnum ( fmt, MAXALIGN ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; h -> align = a ; return ; }",0
170,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
171,"<S2SV_ModStart> vpx_codec_err_t res ; if (! data ||! data_sz <S2SV_ModEnd> ) res = <S2SV_ModStart> VPX_CODEC_INVALID_PARAM ; else if (! ctx -> iface -> dec. decode ) res = VPX_CODEC_ERROR ; else if (! ctx -> priv -> alg_priv ) res = ctx -> iface -> dec. decode ( ctx -> priv -> alg_priv, data, data_sz, user_priv, deadline ) ; else if (! ctx -> iface -> dec. decode ) res = VPX_CODEC_ERROR ; else { res = ctx -> iface -> dec. decode ( ctx -> priv -> alg_priv, data, data_sz, user_priv, deadline ) ; } return SAVE_STATUS ( ctx, res ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
172,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> isofs_read_inode ( struct <S2SV_ModStart> inode ) ; if ( de -> name_len > sizeof ( struct iso_directory_record ) - de_len ) { printk ( KERN_INFO ""%s: <S2SV_blank> invalid <S2SV_blank> name\\n"", __func__ ) ; goto fail ; } if ( de -> name_len > sizeof ( struct iso_directory_record ) - de_len ) { printk ( KERN_INFO ""%s: <S2SV_blank> invalid <S2SV_blank> name\\n"", __func__ ) ; goto fail ; } if ( de -> name_len > sizeof ( struct iso_directory_record ) - de_len ) { printk ( KERN_INFO ""%s: <S2SV_blank> invalid <S2SV_blank> name\\n"", __func__ ) ; goto fail ; } if ( de -> name_len > sizeof ( struct iso_directory_record ) - de_len ) { printk ( KERN_INFO ""%s: <S2SV_blank> invalid <S2SV_blank> name\\n"", __func__ ) ; goto fail ; } if ( de -> name_len > sizeof ( struct iso_directory_record )",0
173,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> k ) ; }",0
174,<S2SV_ModStart> self ) { if ( self -> dict ) { Py_CLEAR ( self -> dict ) ; },0
175,"<S2SV_ModStart> ; for ( ; a && i < count ; ++ i ) { n = cJSON_CreateString ( strings [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; }",0
176,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == Py_None ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" )",0
177,<S2SV_ModStart> EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_READWRITE ) &&! ( mnt_flags & MNT_READWRITE ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_READONLY ) &&! ( mnt_flags & MNT_READONLY ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_READONLY ) &&! ( mnt_flags & MNT_READONLY ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_READONLY ) &&! ( mnt_flags & MNT_READONLY ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_READONLY ) &&! ( mnt_flags & MNT_READONLY ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_READONLY ) &&,0
178,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
179,"<S2SV_ModStart> qmode ) { RiffChunkHeader <S2SV_ModEnd> riffhdr, datahdr <S2SV_ModStart> ; DS64Chunk ds64_chunk ; JunkChunk junkchunk ; WaveHeader wavhdr ; uint32_t bcount ; int64_t total_data_bytes, total_riff_bytes ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples > 0x7ffff000 ) { error_line ( ""can\'t <S2SV_blank> create <S2SV_blank> valid <S2SV_blank> RIFF <S2SV_blank> wav <S2SV_blank> header <S2SV_blank> for <S2SV_blank> non-normalized <S2SV_blank> floating <S2SV_blank> data!"" ) ; return FALSE ; } if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples > 0x7ffff000 ) { error_line ( ""can\'t <S2SV_blank> create <S2SV_blank> valid <S2SV_blank> RIFF <S2SV_blank> wav <S2SV_blank> header <S2SV_blank> for <S2SV_blank> non-normalized <S2SV_blank> floating <S2SV_blank> data!"" ) ; return FALSE ;",0
180,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> msg_sys -> msg_flags <S2SV_ModStart> msg_flags & ( MSG_CMSG_COMPAT | MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ) { err = verify_compat_iovec ( msg_sys, iov, & addr, VERIFY_WRITE ) ; if ( err < 0 ) goto out_freeiov ; total_len = err ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; } else { err = verify_iovec ( msg_sys, iov, & addr, VERIFY_READ ) ; if ( err < 0 ) goto out_freeiov ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; } <S2SV_ModEnd> if ( sock <S2SV_ModStart> -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; err = ( nosec? sock_recvmsg_nosec",0
181,"<S2SV_ModStart> inode ) ; struct gfs2_meta_inode * ip_meta = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_meta = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_meta = GFS2_I ( inode ) ; struct metapath * mp = & ip -> i_meta ; int end_of_metadata = height - 1 ; int eob = 0 ; enum alloc_state state ; if ( height == 1 ) { struct buffer_head * bh ; ptr = metapointer ( end_of_metadata, mp ) ; bh = mp -> mp_bh [ end_of_metadata ] ; dblks = min ( maxlen, ptrs_per_blk - mp -> mp_list [ end_of_metadata ] ) ; state = ALLOC_DATA ; } else { ptrs_per_blk = sdp -> sd_inptrs ; dblks = min ( maxlen, ptrs_per_blk - mp -> mp_list [ end_of_metadata ] ) ; bh = mp -> mp_bh [ end_of",0
182,<S2SV_ModStart> -> codec -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ;,0
183,"<S2SV_ModStart> xmlNsPtr copyNs ; if ( copyNs == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> namespace <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } copyNs = copyNs -> next ; if ( copyNs == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> namespace <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } if ( copyNs == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> namespace <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; }",0
184,"<S2SV_ModStart> 0 ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; <S2SV_ModStart> 0 ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } <S2SV_ModEnd> } else { <S2SV_ModStart> 0 ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } <S2SV_ModEnd> free ( fname",0
185,<S2SV_ModStart> % 4096 == 0 <S2SV_ModEnd> ) ; bzero,0
186,<S2SV_ModStart>! js_regexec ( <S2SV_ModEnd> re -> prog,0
187,<S2SV_ModStart> case OFreshOID : <S2SV_ModEnd> caml_set_oo_id ( ( <S2SV_ModStart> ) dest ) ; break ; case OShift : * dest += sp -> arg ; if ( -- ( sp -> arg ) == 0 ) sp -- ; break ; case OReadItems : sp -> dest ++ ; if ( -- ( sp -> arg ) == 0 ) sp -- ; break ; case OShift : * dest += sp -> arg ; if ( -- ( sp -> arg ) == 0 ) sp -- ; break ; case OShift : * dest += sp -> arg ; if ( -- ( sp -> arg ) == 0 ) sp -- ; break ; case OShift : * dest += sp -> arg ; if ( -- ( sp -> arg ) == 0 ) sp -- ; break ; case OReadItems : sp -> dest ++ ; if ( -- ( sp -> arg ) == 0 ) sp -- ; break ; case OShift : * dest ++ ; if ( -- ( sp -> arg ) == 0 ) sp -- ; break ; case OShift : * dest ++ ; if ( -- ( sp -> arg ) == 0 ) sp -- ; break ; case OShift : * dest ++ ; if ( -- ( sp -> arg ) == 0 ) sp -- ;,0
188,"<S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, KSZ8851_ISR ) ; if ( ( isr & KSZ8851_ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_LCIS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR_TXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_TXIS <S2SV_ModEnd> ) ; n <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_RXIS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_RXIS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851",0
189,"<S2SV_ModStart> void encode_quantization ( <S2SV_ModEnd> VP9_COMMON * cm <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm -> base_qindex, QINDEX_BITS ) ; write_delta_q ( wb, cm -> y_dc_delta_q ) ; write_delta_q ( wb, cm -> uv_dc_delta_q ) ; write_delta_q ( wb, cm -> y_ac_delta_q ) ; write_delta_q ( wb, cm -> uv_ac_delta_q ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
190,"<S2SV_ModStart> msglen ) < 0 ) { BTIF_TRACE_ERROR ( ""failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> (%s)"", strerror ( errno ) ) ; }",0
191,"<S2SV_ModStart> ; if ( ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == NULL ) { if ( ( localrsa = d2i_RSAPublicKey_bio ( rawcert, NULL ) ) == NULL ) { if ( ( localrsa = d2i_RSAPublicKey_bio ( rawcert, NULL ) ) == NULL ) { if ( ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == NULL ) { if ( ( localrsa = d2i_RSA_pubkey_bio ( rawcert, NULL ) ) == NULL ) { if ( ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == NULL ) { if ( ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == NULL ) { if ( ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == NULL ) { if ( ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == NULL ) { if ( ( localec = d2i_EC",0
192,"<S2SV_ModStart> ( ) ; strcpy ( t1_buf_array, t1_line_array ) ; strcpy ( t1_line_array, t1_buf_array ) ; strcpy ( t1_line_array, t1_buf_array ) ; t1_line_ptr = eol ( t1_line_array ) ; } else { strcpy ( t1_buf_array, t1_line_array ) ; strcpy ( t1_buf_array, t1_buf_array ) ; strcpy ( t1_line_array, t1_buf_array ) ; strcpy ( t1_line_array, t1_buf_array ) ; t1_line_ptr = eol ( t1_line_array ) ; }",0
193,"<S2SV_ModStart> BLOCK_SIZE bsize, <S2SV_ModEnd> BLOCK_SIZE subsize ) <S2SV_ModStart> -> e_mbd ; int bsl = b_width_log2 ( bsize ), hbs = ( 1 << bsl ) / 4 ; <S2SV_ModStart> case PARTITION_NONE : * get_sb_index ( x, subsize ) = 0 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; <S2SV_ModEnd> break ; case <S2SV_ModStart> case PARTITION_VERT : * get_sb_index ( x, subsize ) = 1 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; <S2SV_ModEnd> break ; case <S2SV_ModStart> case PARTITION_HORZ : * get_sb_index ( x, subsize ) = 1 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize",0
194,"<S2SV_ModStart> name ) ; if (! name ) { data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ; data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ; free ( name ) ; return 0 ; }",0
195,"<S2SV_ModStart> key_ref, KEY_NEED_READ ) ; if ( key -> type -> read ) ret = - EOPNOTSUPP ; if ( key -> type -> read ( key, buffer, buflen ) ) ret = - EOPNOTSUPP ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( key -> type -> read ( key, buffer, buflen ) ) ret = - EOPNOTSUPP ; if ( ret == 0 ) ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( key -> type -> read ( key, buffer, buflen ) ) ret = - EOPNOTSUPP ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( key -> type -> read ( key, buffer, buflen ) ) ret = - EOPNOTSUPP ; if ( ret == 0 ) ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( key -> type -> read ( key, buffer, buflen ) ) ret = - E",0
196,<S2SV_ModStart> u4_first_slice_in_pic ) { ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_last_slice_in_pic = 0 ; ps_dec -> u4_last_slice_in_pic = 0 ; ps_dec -> u4_last_slice_in_pic = 0 ; ps_dec -> u4_last_slice_in_pic = 0 ; ps_dec -> u4_last_slice_in_pic = 0 ; ps_dec -> u4_last_slice_in_pic = 0 ; ps_dec -> u4_last_slice_in_pic = 0 ; ps_dec -> u4_last_slice_in_pic = 0 ; ps_dec -> u4_last_slice_in_pic = 0 ; ps_dec -> u4_last_slice_in_pic = 0 ; ps_dec -> u4_last_slice_in_pic = 0 ; ps_dec -> u4_last_slice_in_pic = 0 ; ps_dec -> u4_last_slice_in_pic = 0 ; ps_dec,0
197,"<S2SV_ModStart> = tnum_is_const ( <S2SV_ModEnd> dst_reg -> var_off <S2SV_ModStart> = tnum_is_const ( <S2SV_ModEnd> src_reg. var_off <S2SV_ModStart> = S64_MIN ; if ( dst_reg -> smin_value > S64_MAX ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else { dst_reg -> smin_value = S64_MIN ; dst_reg -> smin_value = S64_MAX ; } switch ( opcode ) { case BPF_ADD : if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } break ; case BPF_SUB : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, s",0
198,"<S2SV_ModStart> ; if ( cifs_sb -> mnt_cifs_flags & CIFS_MOUNT_NO_XATTR ) { cFYI ( 1, ""parent <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode, direntry -> d_name. name, direntry ) ; rc = - EPERM ; goto lookup_out ; } if ( parent_dir_inode -> i_nlink == 0 ) { cFYI ( 1, ""parent <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode, direntry -> d_name. name, direntry ) ; rc = - EPERM ; goto lookup_out ; }",0
199,"<S2SV_ModStart> ; if (! rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ), sock_owned_by_user ( sk ) ) ) { NET_INC_STATS_BH ( sock_net ( sk ), LINUX_MIB_SYNCOOKIESFAILED ) ; goto out ; } if ( tcp_synq_no_recent_overflow ( sk ) || ( mss = cookie_check ( skb, cookie ) ) == 0 ) { NET_INC_STATS_BH ( sock_net ( sk ), LINUX_MIB_SYNCOOKIESFAILED ) ; goto out ; } NET_INC_STATS_BH ( sock_net ( sk ), LINUX_MIB_SYNCOOKIESFAILED ) ; goto out ; } if ( tcp_synq_no_recent_overflow ( sk ) || ( mss = cookie_check ( skb, cookie ) ) == 0 ) { NET_INC_STATS_BH ( sock_net ( sk ), LINUX_MIB_SYNCOOKIESFAILED ) ; goto out",0
200,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> += 4 ; if ( * in!= '=' ) { * out ++ = ( base64val ( digit1 ) << 2 ) | ( base64val ( digit2 ) >> 4 ) ; len ++ ; if ( digit3!= '=' ) { * out ++ = ( ( base64val ( digit2 ) << 4 ) & 0xf0 ) | ( base64val ( digit3 ) >> 2 ) ; len ++ ; if ( digit4!= '=' ) { * out ++ = ( ( base64val ( digit3 ) << 6 ) & 0xc0 ) | ( base64val ( digit4 ) >> 2 ) ; len ++ ; } } } else { * out ++ = ( base64val ( digit1 ) << 2 ) | ( base64val ( digit2 ) >> 4 ) ; len ++ ; if ( digit4!= '=' ) { * out ++ = ( ( base64val ( digit3 ) << 6 ) & 0xc0 ) | ( base64val ( digit4 ) >> 2 ) ; len ++ ; } },0
201,"<S2SV_ModStart> { int number_of_frames, number_of_keyframes <S2SV_ModEnd>, encode_frame_count ; <S2SV_ModStart> ; SvcInternal * const <S2SV_ModEnd> si = get_svc_internal <S2SV_ModStart> svc_ctx ) ; if ( svc_ctx == NULL || si == NULL ) return NULL ; svc_log_reset ( svc_ctx ) ; number_of_frames = si -> number_of_frames ; number_of_keyframes = si -> number_of_keyframes ; if ( svc_ctx -> encoding_mode == ALT_INTER_LAYER_PREDICTION_IP ) { number_of_frames -= number_of_keyframes ; } svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes=[%u]\\n"", i, ( double ) si -> psnr_sum [ i ] [ 0 ], ( double ) si -> psnr_sum [ i ] [ 1 ], ( double ) si -> psnr_sum [ i ] [ 2 ], ( double )",0
202,"<S2SV_ModStart> = new_cols ; screen -> sb_buffer = realloc_buffer ( screen, screen -> sb_buffer, new_rows, new_cols ) ; if ( screen -> buffers [ 1 ] ) screen -> buffers [ 1 ] = realloc_buffer ( screen, screen -> buffers [ 1 ], new_rows, new_cols ) ; if ( screen -> buffers [ 0 ] ) screen -> buffers [ 0 ] = realloc_buffer ( screen, screen -> buffers [ 0 ], new_rows, new_cols ) ; if ( screen -> buffers [ 1 ] ) screen -> buffers [ 1 ] = realloc_buffer ( screen, screen -> buffers [ 1 ], new_rows, new_cols ) ; if ( screen -> buffers [ 0 ] ) screen -> buffers [ 0 ] = realloc_buffer ( screen, screen -> buffers [ 0 ], new_rows, new_cols ) ; if ( screen -> buffers [ 1 ] ) screen -> buffers [ 1 ] = realloc_buffer ( screen, screen -> buffers [ 1 ], new_rows, new_cols ) ; screen -> buffers [ 1 ] = realloc_buffer ( screen, screen -> buffers [ 0 ], new_rows,",0
203,<S2SV_ModStart> { const char * literal_start <S2SV_ModEnd> ; int in_named_escape <S2SV_ModStart> ) ; for ( ; * str < end ; ( * str ) ++ ) { char ch = * * str ; if (! in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if (! in_named_escape && ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_start = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '{' || ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '{' ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_,0
204,"<S2SV_ModStart> = create_dump_dir_from_problem_data ( <S2SV_ModEnd> pd, g_settings_dump_location",0
205,<S2SV_ModStart> ; if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + w1 ) > ( ptr -> height ) ) { if ( ( y1 + w1 ) > ( ptr -> width,0
206,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
207,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) ; this_mv <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; sad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; sad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; sad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; sad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; sad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; sad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; sad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; sad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; sad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; sad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; sad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; sad_array",0
208,<S2SV_ModStart> ) { return try_then_request_module <S2SV_ModEnd> ( __crypto_lookup_template (,0
209,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * prev_mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> idx_str ; MODE_INFO <S2SV_ModEnd> * * mi_8x8 <S2SV_ModStart> * prev_mi_8x8 = cm -> prev_mi <S2SV_ModEnd> + idx_str ; <S2SV_ModStart> MODE_INFO * * prev_mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> idx_str ; BLOCK_SIZE bsize ; cpi -> mb. source_variance = UINT_MAX <S2SV_ModEnd> ; switch ( <S2SV_ModStart> case SOURCE_VAR_BASED_PARTITION : set_offsets ( cpi, tile, mi_row, mi_col, BLOCK_64X64, & dummy_rate, & dummy_dist ) ; break ; case SOURCE_VAR_BASED_PARTITION : set_offsets ( cpi, tile, mi_row, mi_col, BLOCK_64X64, & dummy_rate, & dummy_dist ) ; break ;",0
210,"<S2SV_ModStart> u_int8_t state ; if ( skb_header_len ( skb, dataoff, sizeof ( _dh ), & _dh ) < sizeof ( _dh ) ) return false ; state = dccp_state_table [ CT_DCCP_ROLE_CLIENT ] [ dh -> dccph_type ] [ CT_DCCP_NONE ] ; break ; case CT_DCCP_REQUEST : break ; case CT_DCCP_REPLY : break ; case CT_DCCP_INVALID : msg = ""nf_ct_dccp: <S2SV_blank> not <S2SV_blank> picking <S2SV_blank> up <S2SV_blank> existing <S2SV_blank> connection <S2SV_blank> "" ; goto out_invalid ; } ct -> proto. dccp. role [ IP_CT_DIR_ORIGINAL ] = CT_DCCP_ROLE_SERVER ; ct -> proto. dccp. state = CT_DCCP_NONE ; ct -> proto. dccp. last_pkt = DCCP_PKT_REQUEST ; ct -> proto. dccp. last_dir = IP_CT_DIR_REPLY ; ct -> proto. dccp. handshake_seq = 0 ;",0
211,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> ( fd = tempnam <S2SV_ModEnd> ( & tmpname <S2SV_ModStart> dir ) ) == NULL ) { ulckpwdf ( ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; }",0
212,"<S2SV_ModStart> mnt ) ; error = dentry -> d_inode -> i_op -> follow_link ( dentry, nd ) ; if ( IS_ERR ( cookie ) ) { char * s = nd_get_link ( nd ) ; error = 0 ; if ( s ) error = __vfs_follow_link ( nd, s ) ; else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; } else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; }",0
213,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_options_get_finish ( struct <S2SV_ModStart> * optp, struct ip_options_rcu * * rcu_dereference <S2SV_ModEnd> ( net -> <S2SV_ModStart> net -> ipv4. ip_options_rcu <S2SV_ModEnd> ) { while <S2SV_ModStart> & 3 ) rcu_dereference ( net -> ipv4. ip_options_rcu ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> & 3 ) rcu_dereference ( net -> ipv4. ip_options_rcu ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> & 3 ) rcu_dereference ( net -> ipv4. ip_options_rcu ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> & 3 ) rcu_dereference ( net -> ipv4. ip_options_rcu ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> & 3 ) rcu_dereference ( net -> ipv4. ip_options_rcu ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> & 3 ) rcu_dereference ( net -> ipv4. ip_options_rcu ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> & 3 ) rcu_dereference ( net -> ipv4. ip_options_rcu ) <S2SV_ModEnd> ;",0
214,"<S2SV_ModStart> ; if ( strlen ( connection ) == 0 ) goto error ; else { bool found_upgrade = false ; int count ; sds * tokens = sdssplitlen ( connection, strlen ( connection ), "","", 1, & count ) ; if ( tokens == NULL ) goto error ; for ( int i = 0 ; i < count ; i ++ ) { sds token = tokens [ i ] ; sdstrim ( token, "" <S2SV_blank> "" ) ; if ( strcasecmp ( token, ""Upgrade"" ) == 0 ) { found_upgrade = true ; break ; } } else { bool found_upgrade = false ; int count ; sds * tokens = sdssplitlen ( connection, strlen ( connection ), "","", 1, & count ) ; if ( tokens == NULL ) goto error ; for ( int i = 0 ; i < count ; i ++ ) { sds token = tokens [ i ] ; sdstrim ( token, "" <S2SV_blank> "" ) ; if ( strcasecmp ( token, ""Upgrade"" ) == 0 ) { found_upgrade = true ; break ; } } sdsfreesplitres ( tokens, count ) ; if (! found_upgrade ) goto error ;",0
215,"<S2SV_ModStart> rpcap_findalldevs_if * findalldevs_if <S2SV_ModEnd> ; uint16 nif <S2SV_ModStart> } for ( findalldevs_if = NULL ; findalldevs_if!= NULL ; findalldevs_if = d -> next ) { for ( address = d -> addresses ; address!= NULL ; address = address -> next ) { switch ( address -> addr -> sa_family ) { case AF_INET : case AF_INET : case AF_INET6 : # endif } } if ( sock_bufferize ( NULL, sizeof ( struct rpcap_header ), NULL, & sendbufidx, RPCAP_NETBUF_SIZE, SOCK_DGRAM ) == - 1 ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ; } for ( address = d -> addresses ; address!= NULL ; address = address -> next ) { switch ( address -> addr -> sa_family ) { case AF_INET : # endif } if ( sock_bufferize ( NULL, sizeof ( struct rpcap_sockaddr ), NULL, & sendbufidx, RPCAP_NETBUF_SIZE, SOCK_DGRAM ) == - 1 ) { rpcapd_",0
216,"<S2SV_ModStart> struct dump_dir * <S2SV_ModEnd> dd = dd_create <S2SV_ModStart>, DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } dd_create_basic_files ( dd, client_uid, NULL ) ; dd_save_text ( dd, FILENAME_ABRT_VERSION, VERSION ) ; dd_save_text ( dd, FILENAME_UID, uid_str ) ; g_hash_table_iter_init ( & iter, problem_info ) ; while ( g_hash_table_iter_next ( & iter, & gpkey, & gpvalue ) ) { dd_save_text ( dd, FILENAME_UID, ( gchar * ) gpkey ) ; g_hash_table_iter_next ( & iter, & gpkey, & gpvalue ) ; g_hash_table_iter_init ( & iter, problem_info ) ; g_hash_table_iter_init ( & iter, problem_info ) ; while ( g_hash_table_iter_next ( & iter, & gpkey,",0
217,"<S2SV_ModStart> 2 ) { index = ConstrainColormapIndex ( image, ( * p >> 6 ) & 0x3 ) ; SetPixelIndex ( indexes + x, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 8 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 8 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_",0
218,"<S2SV_ModStart> a ) { BN_ULONG <S2SV_ModEnd> c1, c2 <S2SV_ModStart> c1, c2, c3 ; r [ 0 ] = c1 ; c1 = 0 ; c2 = 0 ; c3 = 0 ; sqr_add_c ( a, 1, c2, c3 ) ; r [ 1 ] = c2 ; c2 = 0 ; sqr_add_c ( a, 2, 0, c1, c2 ) ; r [ 2 ] = c3 ; c3 = 0 ; sqr_add_c ( a, 3, 0, c1, c2 ) ; r [ 3 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 4, 0, c2, c3 ) ; r [ 4 ] = c2 ; c2 = 0 ; sqr_add_c ( a, 5, 0, c1, c2 ) ; r [ 5 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 6, 0, c1, c2 ) ; r [ 6 ] = c2 ; c3 = 0 ; sqr_add_c ( a, 7",0
219,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
220,<S2SV_ModStart> = len ; ND_TCHECK_16 ( bp [ 0 ] ) ; <S2SV_ModStart> = len ; ND_TCHECK_16 ( bp [ 0 ] ) ; <S2SV_ModStart> = len ; ND_TCHECK_16 ( bp [ 0 ] ) ; <S2SV_ModStart> = len ; ND_TCHECK_16 ( bp [ 0 ] ) ; <S2SV_ModStart> = len ; ND_TCHECK_16 ( bp [ 0 ] ) ; <S2SV_ModStart> = len ; ND_TCHECK_16 ( bp [ 0 ] ) ; <S2SV_ModStart> = len ; ND_TCHECK_16 ( bp [ 0 ] ) ; <S2SV_ModStart> = len ; ND_TCHECK_16 ( bp [ 0 ] ) ; <S2SV_ModStart> = len ; ND_TCHECK_16 ( bp [ 0 ] ) ; <S2SV_ModStart> = len ; ND_TCHECK_16 ( bp [ 0 ] ) ; <S2SV_ModStart> = len ; ND_TCHECK_16 ( bp [ 0 ] ) ; <S2SV_ModStart> = len ; ND_TCHECK_16 ( bp [ 0 ] ) ; <S2SV_ModStart> = len ; ND_TCHECK_16 ( bp [ 0 ] ) ;,0
221,<S2SV_ModStart> (! dumpable && task -> group_leader && task -> group_leader -> user_ns && task -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_,0
222,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
223,<S2SV_ModStart> ps_codec ) ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 <S2SV_ModEnd> ; ps_parse -> <S2SV_ModStart> ps_codec ) ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = ps_parse -> s_sei_params.,0
224,"<S2SV_ModStart> = kzalloc ( sizeof ( * dd -> per_sdma ), GFP_KERNEL ) ; if (! dd -> per_sdma ) { kfree ( dd -> per_sdma ) ; kfree ( tmp_sdma_rht ) ; kfree ( dd -> sdma_rht ) ; kfree ( dd -> sdma_rht ) ; kfree ( dd -> sdma_rht ) ; }",0
225,"<S2SV_ModStart> char * name <S2SV_ModEnd>, int rep_quick <S2SV_ModStart>, rep_quick ) ; if ( param -> testflag & T_UNPACK ) { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; } else { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; }",0
226,<S2SV_ModStart> ; if ( <S2SV_ModEnd> size < 16 <S2SV_ModStart> > 256 ) { p = q ; sizes [ i ++ ] = size ; while ( ( isspace ( ( int ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ),0
227,"<S2SV_ModStart> ) ; } if ( pcount > HSTORE_MAX_PAIRS ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, HSTORE_MAX_PAIRS ) ) ) ;",0
228,"<S2SV_ModStart> val ) ; if (! strcmp ( var, ""command"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> command"", r -> name ) ; if (! strcmp ( var, ""rspfile"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if (! strcmp ( var, ""rspfile_content"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if ( hasrspfile!= hasrspcontent ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if ( hasrspfile!= hasrspcontent ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ;",0
229,"<S2SV_ModStart> NULL == ( qend = strchr ( c -> buf, ""?"" ) ) ) { agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> kind, c -> id, c -> buf ) ; agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> id, c -> buf ) ; } <S2SV_ModStart> NULL == ( qend = strchr ( c -> buf, ""?"" ) ) ) { agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> kind, c -> id, c -> buf ) ; agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> id, c -> buf ) ; } <S2SV_ModStart> NULL == ( qend = strchr ( c -> buf, ""?"" ) ) ) { agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> id, c ->",0
230,"<S2SV_ModStart> vp9_fht16x16_c ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> ] ; int i, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16 <S2SV_ModStart> ++ j ) out <S2SV_ModEnd> [ j *",0
231,"<S2SV_ModStart> g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ; if (! g_key_file_load_from_data ( keyfile, old_exec, old_argc, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, old_exec, old_argc, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, old_exec, old_argc, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, old_exec, old_argc, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error )",0
232,"<S2SV_ModStart> char * temp_filename <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } for ( const list_node_t * node = list_begin ( config -> sections ) ; node!= list_end ( config -> sections",0
233,"<S2SV_ModStart> elen ) ; if ( pc -> lengthComponentIdent < 0 ) return - ENAMETOOLONG ; <S2SV_ModStart> case 1 : if ( pc -> componentIdent [ 0 ]!= '/' ) return - ENAMETOOLONG ; <S2SV_ModStart> case 2 : if ( pc -> lengthComponentIdent [ 0 ]!= '/' ) return - ENAMETOOLONG ; * p ++ = '/' ; tolen -= 2 ; break ; case 3 : if ( tolen < 3 ) return - ENAMETOOLONG ; memcpy ( p, ""../"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 4 : if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""./"", 2 ) ; p += 2 ; tolen -= 2 ; break ; case 5 : comp_len = udf_get_filename ( sb, pc -> componentIdent, pc -> lengthComponentIdent, p, tolen ) ; p += comp_len ; tolen -= comp_len ; if ( comp_len < 0 ) return - ENAMETOOLONG ; * p ++ = '/' ; tolen -= comp_len ; if ( comp_len < 0 ) return - ENAMETOOLONG ; * p ++",0
234,<S2SV_ModStart> ; ND_TCHECK_16BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_16BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_16BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_16BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_16BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_16BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_16BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_16BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_16BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_16BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_16BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_16BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_16BITS ( tptr <S2SV_ModEnd>,0
235,"<S2SV_ModStart> userData, target, NULL ) ; ctxt -> instate = state ; return ; } buf = ( xmlChar * ) xmlMallocAtomic ( size * sizeof ( xmlChar ) ) ; if ( buf == NULL ) { xmlErrMemory ( ctxt, NULL ) ; ctxt -> instate = state ; return ; } xmlFree ( buf ) ; ctxt -> instate = state ; return ; } buf = ( xmlChar * ) xmlMallocAtomic ( size * sizeof ( xmlChar ) ) ; if ( buf == NULL ) { xmlErrMemory ( ctxt, NULL ) ; ctxt -> instate = state ; return ; } buf = ( xmlChar * ) xmlMallocAtomic ( size * sizeof ( xmlChar ) ) ; if ( buf == NULL ) { xmlErrMemory ( ctxt, NULL ) ; ctxt -> instate = state ; return ; } buf = ( xmlChar * ) xmlMallocAtomic ( size * sizeof ( xmlChar ) ) ; if ( buf == NULL ) { xmlErrMemory ( ctxt, NULL ) ; ctxt -> instate = state ; return ; }",0
236,"<S2SV_ModStart> int tagval ; struct stream packet = * s ; <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { logger ( Protocol, Error, ""cssp_read_tsrequest(), <S2SV_blank> expected <S2SV_blank> BER_TAG_SEQUENCE|BER_TAG_CONSTRUCTED, <S2SV_blank> got <S2SV_blank> %x"", s -> p [ 0 ] ) ; return False ; } <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { logger ( Protocol, Error, ""cssp_read_tsrequest(), <S2SV_blank> expected <S2SV_blank> BER_TAG_SEQUENCE|BER_TAG_CONSTRUCTED, <S2SV_blank> got <S2SV_blank> %x"", s -> p [ 0 ] ) ; return False ; } <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { logger ( Protocol, Error, ""cssp_read_tsrequest(), <S2SV_blank> expected <S2SV_blank> BER_TAG_SEQUENCE|BER_TAG_CONSTRUCTED, <S2SV_blank> got <S2SV_blank> %x"", s -> p [ 0 ] ) ; return False ; } if (! s_check_rem ( s, length ) ) { logger ( Protocol, Error, ""cssp_read_tsrequest(), <S2SV_blank> expected <S2SV_blank> BER_",0
237,"<S2SV_ModStart> ; int rv = Socket_print ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" <S2SV_ModEnd> ""Content-Length: <S2SV_blank> %d\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModStart> ""Content-Length: <S2SV_blank> %d\\r\\n"" ""%s"" ""\\r\\n"" ""%s"" <S2SV_ModEnd>, request,",0
238,"<S2SV_ModStart> ; } pid_t child ; if ( is_link ( dest ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> symbolic <S2SV_blank> link\\n"", dest ) ; exit ( 1 ) ; } <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> chown ( dest <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> chmod ( dest <S2SV_ModStart> S_IRUSR | S_IWUSR ) ; unlink ( src ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
239,"<S2SV_ModStart> flags ) ; spin_lock_irqsave ( & bfad -> bfad_lock, flags ) ; <S2SV_ModStart> return NULL ; <S2SV_ModEnd> hstats -> seconds_since_last_reset <S2SV_ModStart> fcstats -> fc. secs_reset ; hstats -> tx_frames = fcstats -> fc. tx_frames ; hstats -> tx_words = fcstats -> fc. tx_words ; hstats -> rx_frames = fcstats -> fc. rx_frames ; hstats -> rx_words = fcstats -> fc. rx_words ; hstats -> lip_count = fcstats -> fc. lip_count ; hstats -> nos_count = fcstats -> fc. nos_count ; hstats -> error_frames = fcstats -> fc. error_frames ; hstats -> dumped_frames = fcstats -> fc. dropped_frames ; hstats -> link_failure_count = fcstats -> fc. link_failures ; hstats -> loss_of_sync_count = fcstats -> fc. loss_of_syncs ; hstats -> link_failure_count = fcstats -> fc. link_failures ; hstats -> link_failure_count = fcstats -> fc. link_",0
240,"<S2SV_ModStart> value ) { value -> x = MinF ( 1.0f, MaxF ( 0.0f, value -> x ) ) ; value -> y = MinF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; value -> z = MinF ( 1.0f, MaxF ( 0.0f, value -> z ) ) ; value -> w = MinF ( 1.0f, MaxF ( 0.0f, value -> w ) ) ; value -> w = MinF ( 1.0f, MaxF ( 0.0f, value -> w ) ) ; value -> y = MinF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; value -> z = MinF ( 1.0f, MaxF ( 0.0f, value -> z ) ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
241,<S2SV_ModStart> -> sasl_mechanism ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> <S2SV_ModStart> -> sasl_username = g_strdup ( src -> sasl_username ) ; rec -> <S2SV_ModStart> -> sasl_password = g_strdup ( src -> sasl_password ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ;,0
242,<S2SV_ModStart> ; } vpx_memset <S2SV_ModEnd> ( cpi ->,0
243,"<S2SV_ModStart>, o, datao ; if ( CHECKOVERFLOW ( 6 + n -> offset, 2 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + datao, n -> order ) ; datao += 2 ; exif_mnote_data_canon_clear ( n ) ; n -> entries = exif_mem_alloc ( ne -> mem, sizeof ( MnoteCanonEntry ) * c ) ; if (! n -> entries ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. entries = exif_mem_alloc ( ne -> mem, sizeof ( MnoteCanonEntry ) * c ) ; if (! n -> entries ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" )",0
244,"<S2SV_ModStart> HA_ERR_CRASHED_ON_USAGE : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> MyISAM-table"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed <S2SV_blank> after <S2SV_blank> last <S2SV_blank> repair"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed"", filename ) ; break ; case HA_ERR_CRA",0
245,<S2SV_ModStart> len ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> long hex ; int strindex = 0 ; char * ns = malloc ( alloc ) ; if (! ns ) return NULL ; while ( -- alloc > 0 ) { in = * string ; if ( ( '%' == in ) && ISXDIGIT ( string [ 1 ] ) && ISXDIGIT ( string [ 2 ] ) && ISXDIGIT ( string [ 3 ] ) && ISXDIGIT ( string [ 3 ] ) && ISXDIGIT ( string [ 3 ] ) && ISXDIGIT ( string [ 4 ] ) && ISXDIGIT ( string [ 5 ] ) && ISXDIGIT ( string [ 6 ] ) && ISXDIGIT ( string [ 7 ] ) && ISXDIGIT ( string [ 8 ] ) && ISXDIGIT ( string [ 9 ] ) && ISXDIGIT ( string [ 10 ] ) && ISXDIGIT ( string [ 11 ] ) && ISXDIGIT ( string [ 12 ] ) && ISXDIGIT ( string [ 13 ] ) && ISXDIGIT ( string [ 13 ] ) && ISXDIGIT ( string [ 13 ] ) && ISXDIGIT ( string [,0
246,"<S2SV_ModStart> ; RAnalOp next_op ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ;",0
247,"<S2SV_ModStart> = usm_secmod_process_in_msg ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_POST_PREMIB_READ_CONFIG, init_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, free_engineID, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, free_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, free_engineID, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN,",0
248,"<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) { return! match ( prog -> start, sp, prog -> flags | eflags, sub ) ; } else if ( prog -> flags & eflags ) { return! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; } else if ( prog -> flags & eflags ) { return! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; } else if ( prog -> flags & eflags ) { return! match ( prog -> start, sp, prog -> flags | eflags, sub ) ; } else if ( prog -> flags & eflags ) { return! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; } else if ( prog -> flags & eflags ) { return! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; } else if ( prog -> flags & eflags ) { return! match ( prog -> start, sp, prog -> flags | eflags, sub ) ; } else if ( prog -> flags & eflags ) { return! match ( prog -> start,",0
249,"<S2SV_ModStart> ; # ifdef NETSNMP_NO_WRITE_SUPPORT switch ( action ) { case MODE_SET_RESERVE1 : if ( var_val_type!= ASN_INTEGER ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> type <S2SV_blank>!= <S2SV_blank> int\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= 1 ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; }",0
250,<S2SV_ModStart> * pixels ++ = ( unsigned char ) ( ( pixel >> 4 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 5 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 3 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >>,0
251,"<S2SV_ModStart> timer ) ; list_for_each_entry ( slave, & timeri -> slave_list_head, open_list ) { spin_lock_irq ( & slave_active_lock ) ; <S2SV_ModStart> NULL ; } list_for_each_entry ( slave, & timeri -> slave_list_head, open_list ) { spin_lock_irq ( & slave_active_lock ) ; _snd_timer_stop ( slave, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail ( & slave -> open_list, & snd_timer_slave_list ) ; slave -> master = NULL ; slave -> timer = NULL ; } list_for_each_entry ( slave, tmp, & timeri -> slave_list_head, open_list ) { spin_lock_irq ( & slave_active_lock ) ; _snd_timer_stop ( slave, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail ( & slave -> open_list, & snd_timer_slave_list ) ; slave -> master = NULL ; slave -> master = NULL ; slave",0
252,<S2SV_ModStart> -> u4_bitoffset = ih264d_read_mmco_commands <S2SV_ModEnd> ( ps_dec ),0
253,<S2SV_ModStart> { int_fast32_t widthOverflow = ( uint_fast32_t ) gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; int_fast32_t heightOverflow = ( uint_fast32_t ) gifFilePtr -> Image. Height ; if ( widthOverflow > 0 && heightOverflow > 0 ) { gifFilePtr -> SWidth += gifFilePtr -> SWidth ; gifFilePtr -> SHeight += gifFilePtr -> SHeight ; } if ( widthOverflow > 0 ) { gifFilePtr -> SWidth += gifFilePtr -> SWidth ; gifFilePtr -> SHeight += gifFilePtr -> SHeight ; } if ( heightOverflow > 0 ) { int_fast32_t widthOverflow = ( uint_fast32_t ) gifFilePtr -> Image. Width ; int_fast32_t heightOverflow = ( uint_fast32_t ) gifFilePtr -> Image. Height ; int_fast32_t topOverflow = ( uint_fast32_t ) gifFilePtr -> Image. Top + gifFilePtr -> SWidth ; int_fast32_t leftOverflow = ( uint_fast32_t ) gifFilePtr -> Image. Left +,0
254,"<S2SV_ModStart> || cherokee_buffer_is_empty ( & <S2SV_ModStart> -> user ) ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; ret = init_filter ( ldap, props, conn ) ; if ( ret!= ret_ok ) return ret ; re = ldap_search_s ( ldap -> conn, props -> basedn. buf, LDAP_SCOPE_SUBTREE, attrs, 0, & message ) ; if ( re!= 1 ) { ldap_msgfree ( message ) ; return ret_not_found ; } first = ldap_first_entry ( ldap -> conn, message ) ; if ( first == NULL ) { ldap_msgfree ( message ) ; return ret_not_found ; } dn = ldap_get_dn ( ldap -> conn, first ) ; if ( dn == NULL ) { ldap_msgfree ( message ) ; return ret_not_found ; } dn = ldap_get_dn ( ldap -> conn, first ) ; if ( dn == NULL ) { ldap_msgfree ( message )",0
255,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ) break ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ) break ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ) ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile""",0
256,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> has <S2SV_blank> no <S2SV_blank> bus <S2SV_blank> info\\n"", __func__, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",0
257,"<S2SV_ModStart> ; rdsdebug ( ""size <S2SV_blank> %zu <S2SV_blank> flags <S2SV_blank> 0x%x <S2SV_blank> timeo <S2SV_blank> %ld\\n"" <S2SV_ModEnd>, size, <S2SV_ModStart>, timeo ) ; msg -> msg_namelen = sizeof ( * sin ) ;",0
258,<S2SV_ModStart> 0 ) { if ( strlen ( s ) > 9 ) { <S2SV_ModStart> ++ s ; if ( strlen ( s ) > 9 ) { <S2SV_ModStart> ++ s ; if ( strlen ( s ) > 9 ) { free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = (,0
259,"<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL, TEMP_FAILURE_RETRY (",0
260,"<S2SV_ModStart> msixcap ; assert ( msgnum >= 1 && msgnum <= MAX_MSIX_TABLE_ENTRIES ) ; assert ( barnum >= 0 && barnum <= PCIR_MAX_BAR_0 <S2SV_ModEnd> ) ; tab_size <S2SV_ModStart> ( dev, msgnum, barnum, tab_size ) ; pci_populate_msixcap ( & msixcap, msgnum, barnum, tab_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; pci_emul_",0
261,"<S2SV_ModStart> ; if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( ( r = sshpkt_get_cstring ( ssh, & pkblob, & blen ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & chost, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & cuser, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & chost, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & pkblob, & blen ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & chost, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & cuser, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & chost, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & chost",0
262,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
263,"<S2SV_ModStart> NULL ) goto cleanup ; status = X509_NAME_cmp ( X509_get_issuer_name ( kdc_cert ), is -> issuer ) ; if (! status ) status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) status = ASN1_INTEGER_cmp ( X509_get_subject_name ( kdc_cert ), is -> subject ) ; if (! status ) status = ASN1_INTEGER_cmp ( X509_get_subject_serialNumber ( kdc_cert ), is -> subject ) ; if (! status ) status = ASN1_INTEGER_cmp ( X509_get_subject_serialNumber ( kdc_cert ), is -> subject ) ; if (! status ) status = ASN1_INTEGER_cmp ( X509_get_subject_name ( kdc_cert ), is -> subject ) ; if (! status ) status = ASN1_INTEGER_cmp ( X",0
264,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> np -> tclass ) ; rcu_read_unlock ( ) ; <S2SV_ModStart> -> ir_v6_rmt_addr ; rcu_read_unlock (",0
265,<S2SV_ModStart> <S2SV_null> <S2SV_null> static TX_MODE <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart> cpi ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; <S2SV_ModStart> else if ( cpi -> sf. <S2SV_ModEnd> tx_size_search_method == USE_LARGESTALL <S2SV_ModStart> else if ( cpi -> sf. <S2SV_ModEnd> tx_size_search_method == USE_FULL_RD <S2SV_ModStart> else if ( cpi -> sf. <S2SV_ModEnd> tx_size_search_method == USE_LARGESTALL <S2SV_ModStart> else if ( cpi -> sf. <S2SV_ModEnd> tx_size_search_method == USE_LARGESTALL <S2SV_ModStart> == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ TX_MODE_SELECT ]? cpi -> rd_tx_select_threshes [ frame_type ] [ TX_MODE_SELECT ] : cpi -> common.,0
266,<S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact,0
267,<S2SV_ModStart> < buf2 -> size ) { return - 1 ; } else if ( buf1 -> size > buf2 -> size ) { return 1 ; } else if ( buf1 -> size > buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 0 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 0 ; },0
268,"<S2SV_ModStart> ; size_t sz ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY | __GFP_NORETRY ) ; if (! info ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY | __GFP_NORETRY ) ; if (! info ) { info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY | __GFP_NORETRY ) ; if (! info ) return NULL ; }",0
269,"<S2SV_ModStart> (! net_eq ( net, & init_net ) ) return - EAFNOSUPPORT ; switch ( protocol ) { case 0 : case PF_AX25 : protocol = AX25_P_TEXT ; break ; case AX25_P_SEGMENT : # ifdef CONFIG_INET case AX25_P_ARP : case AX25_P_IP : # endif # ifdef CONFIG_NETROM_MODULE case AX25_P_NETROM : if ( ax25_protocol_is_registered ( AX25_P_NETROM ) ) return - ESOCKTNOSUPPORT ; break ; # endif # ifdef CONFIG_ROSE_MODULE case AX25_P_ROSE : if ( ax25_protocol_is_registered ( AX25_P_ROSE ) ) return - ESOCKTNOSUPPORT ; break ; # endif # ifdef CONFIG_NETROM_MODULE case AX25_P_NETROM : if ( ax25_protocol_is_registered ( AX25_P_NETROM ) ) return - ESOCKTNOSUPPORT ; break ; # endif # ifdef CONFIG_ROSE_MODULE case AX25_P_RO",0
270,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
271,"<S2SV_ModStart> -> _eip ; rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val ) ; if ( rc == X86EMUL_CONTINUE ) { rc = assign_eip_far ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val ) ; if ( rc == X86EMUL_CONTINUE ) { rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val ) ; if ( rc == X86EMUL_CONTINUE ) { rc = assign_eip_far ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val ) ; if ( rc == X86EMUL_CONTINUE ) { rc = assign_eip_far ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val ) ; if ( rc == X86EMUL_CONTINUE ) { rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val ) ; if ( rc == X86EMUL_CONTINUE ) { rc = assign_eip_far ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val ) ; if ( rc == X86EMUL_CONTINUE ) { rc = assign_eip_far ( ctxt",0
272,"<S2SV_ModStart> & url ) ; if ( strlen ( list. name ) > sizeof ( errstr ) - 1 ) { errstr [ sizeof ( errstr ) - 1 ] = '\\0' ; url. path = errstr + 1 ; url. path [ strlen ( url. path ) - 1 ] = '\\0' ; url. user = NULL ; url_tostring ( & url, buf + 11, sizeof ( buf ) - 11, 0 ) ; url_strcat ( & url, buf + 12, sizeof ( buf ) - 12, 0 ) ; mutt_str_strcat ( buf, sizeof ( buf ) - 12, ""\\"""" ) ; mutt_buffer_init ( & token ) ; if ( mutt_parse_rc_line ( buf, & token, & err ) ) mutt_debug ( 1, ""Error <S2SV_blank> adding <S2SV_blank> subscribed <S2SV_blank> mailbox: <S2SV_blank> %s\\n"", errstr ) ; FREE ( & token ) ; }",0
273,<S2SV_ModStart> ; rq -> skip_clock_update = 1 ;,0
274,"<S2SV_ModStart> ; r = sd_event_add_io ( <S2SV_ModEnd> b -> manager <S2SV_ModStart> b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { r = log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } log_info ( ""Watching <S2SV_blank> system <S2SV_blank> buttons <S2SV_blank> on <S2SV_blank> /dev/input/%s <S2SV_blank> (%s)"", b -> name, name ) ; r = log_debug_errno ( SYNTHETIC_ERRNO ( EADDRNOTAVAIL ), ""Device <S2SV_blank> %s <S2SV_blank> does <S2SV_blank> not <S2SV_blank> expose <S2SV_blank> keys <S2SV_blank> or <S2SV_blank> switches <S2SV_blank> relevant <S2SV_blank> to <S2SV_blank> us, <S2SV_blank> ignoring."", p ) ; if ( ioctl ( b -> fd, EVIOCGNAME ( sizeof ( name ) ), name ) < 0 ) { r = log_error_errno ( errno, ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> input <S2SV_blank> name: <S2SV_blank> %m"" ) ; goto fail ; } if ( ioctl ( b -> fd, EVIOCGNAME ( sizeof ( name ) ), name ) < 0 ) { r = log_error_errno ( errno",0
275,<S2SV_ModStart> ( errors ) return TEST_ERR_MAJOR_BAD ; else return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
276,<S2SV_ModStart> lun ) sas_eh_defer_cmd <S2SV_ModEnd> ( cmd ),0
277,"<S2SV_ModStart> ; REQ ( n, funcdef ) ; name = NEW_IDENTIFIER ( CHILD ( n, name_i ) ) ; if (! name ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i ), 0 ) ) return NULL ; args = ast_for_arguments ( c, CHILD ( n, name_i + 1 ) ) ; if (! args ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == RARROW ) { returns = ast_for_expr ( c, CHILD ( n, name_i + 3 ) ) ; if (! returns ) return NULL ; <S2SV_ModStart> ; if ( TYPE ( CHILD ( n, name_i + 3 ) ) == RARROW ) { returns = ast_for_expr ( c, CHILD ( n, name_i + 4 ) ) ; if (! returns ) return NULL ; name_i += 4 ; } body = ast_for_suite ( c, CHILD ( n, name_i + 5 ) ) ; if (! body ) return NULL ; get_last_end_pos ( body, & end_lineno,",0
278,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
279,"<S2SV_ModStart> ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ;",0
280,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> ) ) ) rc = <S2SV_ModStart> ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>,1
281,,1
282,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
283,<S2SV_ModStart> : if ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header ) && <S2SV_ModEnd> psf -> header,0
284,<S2SV_ModStart> u4_ofst ) ; if ( ps_cabac -> u4_ofst > ps_bitstrm -> u4_nxt_word ) { IHEVCD_ERROR_T e ; ps_cabac -> au1_ctxt_models = NULL ; return ( IHEVCD_ERROR_T ) IHEVCD_INVALID_PARAMETER ; },0
285,<S2SV_ModStart> off ) ; if ( line -> type == MD_LINE_FENCEDCODE ) { line -> type = MD_LINE_FENCEDCODE ; ctx -> last_line_has_list_loosening_effect = 0 ; } else if ( line -> type == MD_LINE_BLANK ) { ctx -> last_line_has_list_loosening_effect = 1 ; } else if ( ctx -> last_line_has_list_loosening_effect == 0 ) { ctx -> last_line_has_list_loosening_effect = 0 ; } else if ( line -> type == MD_LINE_BLANK ) { ctx -> last_line_has_list_loosening_effect = 0 ; } else if ( line -> type == MD_LINE_BLANK ) { ctx -> last_line_has_list_loosening_effect = 1 ; } else if ( ctx -> last_line_has_list_loosening_effect == 0 ) { ctx -> last_line_has_list_loosening_effect = 0 ; } else if ( ctx -> last_line_has_list_loosening_effect,0
286,<S2SV_ModStart> event ) { <S2SV_ModEnd> struct task_struct * <S2SV_ModStart> -> state = PERF_EVENT_STATE_OFF <S2SV_ModEnd> ; } raw_spin_lock_irq,0
287,<S2SV_ModStart> ; flags -> color_ref_frame_flag = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) ; flags -> deblocking_frame_flag = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) ; flags -> color_b_modes_flag = ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_display_mv_flag? VP9D_DEBUG_DRAW_MV : 0,0
288,"<S2SV_ModStart> = 0 ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( int ) ptr. common -> packet_seq ) ) ; goto trunc ; } <S2SV_ModStart> = 0 ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg6 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( int ) ptr. common -> packet_seq ) ) ; goto trunc ; } <S2SV_ModStart> = 0 ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( int ) ptr.",0
289,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> timer ) ; vpx_usec_timer_start <S2SV_ModEnd> ( & timer <S2SV_ModStart> timer ) ; vpx_usec_timer_mark_end <S2SV_ModEnd> ( & timer <S2SV_ModStart> timer ) ; vpx_usec_timer_mark_end <S2SV_ModEnd> ( & timer <S2SV_ModStart> timer ) ; vpx_usec_timer_mark_end <S2SV_ModEnd> ( & timer <S2SV_ModStart> timer ) ; vpx_usec_timer_start <S2SV_ModEnd> ( & timer <S2SV_ModStart> timer ) ; vpx_usec_timer_mark_end <S2SV_ModEnd> ( & timer <S2SV_ModStart> timer ) ; vpx_usec_timer_mark_end <S2SV_ModEnd> ( & timer <S2SV_ModStart> timer ) ; vpx_usec_timer_end <S2SV_ModEnd> ( & timer,0
290,"<S2SV_ModStart> { fprintf ( stderr <S2SV_ModEnd>, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> chown ( dest <S2SV_ModStart> ( dest, getuid ( ), getgid ( ) ) == - 1 ) errExit ( ""fchown"" ) ; if ( chmod ( dest, 0600 ) == - 1 ) errExit ( ""chmod"" ) ; if ( chown ( dest, getuid ( ), getgid ( ) ) == - 1 ) errExit ( ""chown"" ) ; if ( chown ( dest, getuid ( ), getgid ( ) ) == - 1 ) errExit ( ""chmod"" ) ; if ( chown ( dest, getuid ( ), getgid ( ) ) == - 1 ) errExit ( ""fchmod"" ) ; if ( chmod ( dest, 0600 ) == - 1 ) errExit ( ""chmod"" ) ;",0
291,"<S2SV_ModStart> ; if ( unlikely (! path [ depth ]. p_ext ) ) { EXT4_ERROR_INODE ( inode, ""p_ext <S2SV_blank> > <S2SV_blank> EXT_MAX_EXTENT!"" ) ; return - EFSCORRUPTED ; } if (",0
292,<S2SV_ModStart> p_num_sfb [ LOW <S2SV_ModEnd> ] ; sfb <S2SV_ModStart> p_num_sfb [ LOW <S2SV_ModEnd> ] ; sfb <S2SV_ModStart> p_num_sfb [ LOW <S2SV_ModEnd> ] ; sfb <S2SV_ModStart> p_num_sfb [ LOW <S2SV_ModEnd> ] ; sfb <S2SV_ModStart> p_num_sfb [ LOW <S2SV_ModEnd> ] ; sfb <S2SV_ModStart> p_num_sfb [ LOW <S2SV_ModEnd> ] ; sfb <S2SV_ModStart> p_num_sfb [ LOW <S2SV_ModEnd> ] ; sfb <S2SV_ModStart> p_num_sfb [ LOW <S2SV_ModEnd> ] ; sfb <S2SV_ModStart> p_num_sfb [ LOW <S2SV_ModEnd> ] ; sfb <S2SV_ModStart> p_num_sfb [ LOW <S2SV_ModEnd> ] ; sfb <S2SV_ModStart> p_num_sfb [ LOW <S2SV_ModEnd> ] ; sfb <S2SV_ModStart> p_num_sfb [ LOW <S2SV_ModEnd> ] ; sfb <S2SV_ModStart> p_num_sfb [ LOW <S2SV_ModEnd> ] ; sfb <S2SV_ModStart> p_num_sfb [ LOW <S2SV_ModEnd> ] ; sfb,0
293,"<S2SV_ModStart> lua_authz_provider_spec * prov_spec = parsed_require_line ; int result ; int nargs = 0 ; spec = create_vm_spec ( & pool, r, cfg, server_cfg, NULL, 0, ""authz <S2SV_blank> provider"" ) ; L = ap_lua_get_lua_state ( pool, spec, r ) ; if ( L == NULL ) { ap_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02314 ) ""Unable <S2SV_blank> to <S2SV_blank> compile <S2SV_blank> VM <S2SV_blank> for <S2SV_blank> authz <S2SV_blank> provider <S2SV_blank> %s"", prov_spec -> name ) ; return AUTHZ_GENERAL_ERROR ; } lua_getglobal ( L, prov_spec -> function_name ) ; if (! lua_isfunction ( L, - 1 ) ) { ap_log_rerror ( APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO ( 02319 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", prov_spec -> function_name,",0
294,<S2SV_ModStart>!= MagickFalse ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; quantum_type = DestroyQuantumInfo ( quantum_type ) ; <S2SV_ModStart>!= MagickFalse ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; <S2SV_ModStart>!= MagickFalse ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; <S2SV_ModStart>!= MagickFalse ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; <S2SV_ModStart>!= MagickFalse ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; quantum_info = DestroyQuantumInfo ( quantum_type ) ; <S2SV_ModStart>!= MagickFalse ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; <S2SV_ModStart>!= MagickFalse ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; <S2SV_ModStart>!= MagickFalse ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ; quantum_info = DestroyQuantumInfo ( quantum_type,0
295,<S2SV_ModStart> ; if (! proto_end ) return 0 ; if (,0
296,"<S2SV_ModStart> fdt ) ; if (! path_len ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> ; switch ( tag <S2SV_ModEnd> ) { case <S2SV_ModStart> case FDT_PROP : include = want >= 2 ; stop_at = offset ; <S2SV_ModStart> case FDT_NOP : include = want >= 2 ; stop_at = offset ; break ; case FDT_BEGIN_NODE : depth ++ ; if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BADSTRUCTURE ; if ( str_in_list ( path, inc, inc_count ) ) return - FDT_ERR_BADSTRUCTURE ; if ( str_in_list ( path, inc, inc_count ) ) include = 0 ; break ; case FDT_END_NODE : depth -- ; if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BADSTRUCTURE ; <S2SV_ModStart> ; name = fdt_get_name ( fdt, offset, & len ) ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 1 + len >= path_len ) return - FDT_ERR_",0
297,"<S2SV_ModStart> ) ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; } else { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; }",0
298,"<S2SV_ModStart> priv -> protocol_timeout = g_timeout_add_seconds ( 5, ( GSourceFunc ) _client_protocol_timeout, client ) ; set_description ( client ) ; g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> client <S2SV_blank> \'%s\'"", client -> priv -> description ) ; g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> client <S2SV_blank> \'%s\'"", client -> priv -> description ) ; g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> client <S2SV_blank> \'%s\'"", client -> priv -> description ) ; g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> client <S2SV_blank> \'%s\'"", client -> priv -> description ) ; client -> priv -> description = g_strdup ( client -> priv -> description ) ; g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> client <S2SV_blank> \'%s\'"", client -> priv -> description ) ; g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> client <S2SV_blank> \'%s\'"", client -> priv -> description ) ; g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> client <S2SV_blank>",0
299,<S2SV_ModStart> - 1 ; if ( book -> dim < i ) { a [ i ++ ] = 0 ; } else { for ( j = 0 ; j < book -> dim ; j ++ ) { a [ i ++ ] = ( ogg_int32_t ) ogg_malloc ( book -> dim ) ; } for ( i = 0 ; i < n ; i ++ ) { a [ i ++ ] = ( ogg_int32_t ) ogg_malloc ( book -> dim ) ; } for ( i = 0 ; i < n ; i ++ ) { a [ i ++ ] = ( ogg_int32_t ) ogg_malloc ( book -> dim ) ; } else { a [ i ++ ] = ( ogg_int32_t ) ogg_malloc ( book -> dim ) ; } for ( i = 0 ; i < n ; i ++ ) { a [ i ++ ] = ( ogg_int32_t ) ogg_malloc ( book -> dim ) ; for ( j = 0 ; j < book -> dim ; j ++ ) { a [ i ++ ] = ( ogg_int32_t ) ogg_malloc,0
300,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
301,"<S2SV_ModStart> this_h ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } if ( check_scale_factors ( other_w, other_h, this_w, this_h ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } if ( check_scale_factors ( other_w, other_h, this_w, this_h ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; if ( vp9_is_scaled ( sf ) ) { sf -> scale_value_x = unscaled_value ; sf -> scale_value_y = unscaled_value ; } else { sf -> scale_value_x = unscaled_value ; sf -> scale_value_y = unscaled_value",0
302,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
303,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
304,<S2SV_ModStart> sk ) ; spin_lock_bh ( & sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> NULL ) ; spin_unlock_bh ( & sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> ) ; } spin_unlock_bh ( & sock_owned_by_user ( sk ) ) ;,0
305,"<S2SV_ModStart> ) ) { struct ipv6_txoptions * opt = rcu_dereference_protected ( np -> tx_opt, sock_owned_by_user ( sk ) ) ; opt -> opt. optlen = sizeof ( struct ipv6_txoptions ) ; opt -> opt. optlen = sizeof ( struct ipv6_txoptions ) ; opt -> opt. optlen = sizeof ( struct ipv6_txoptions ) ; opt -> opt. optlen = sizeof ( struct ipv6_txoptions ) ; opt -> opt. optlen = sizeof ( struct ipv6_txoptions ) ; opt -> opt. optlen = sizeof ( struct ipv6_txoptions ) ;",0
306,"<S2SV_ModStart> ; unregister_pernet_subsys ( & init_net <S2SV_ModEnd> ) ; sctp_v6_protosw_exit <S2SV_ModStart> sctp_net_ops ) ; sctp_v4_protosw_exit ( ) ; sctp_sysctl_unregister ( ) ; free_pages ( ( unsigned long ) sctp_assoc_hashtable, get_order ( sctp_assoc_hashsize * sizeof ( struct sctp_hashbucket ) ) ) ; free_pages ( ( unsigned long ) sctp_ep_hashtable, get_order ( sctp_port_hashsize * sizeof ( struct sctp_bind_hashbucket ) ) ) ; free_pages ( ( unsigned long ) sctp_bind_hashbucket, get_order ( sctp_port_hashsize * sizeof ( struct sctp_bind_hashbucket ) ) ) ; free_pages ( ( unsigned long ) sctp_assoc_hashsize * sizeof ( struct sctp_hashbucket ) ) ; free_pages ( ( unsigned long ) sctp_ep_hashtable, get_order ( sctp_port_hashsize * sizeof ( struct sctp_bind_hashbucket ) )",0
307,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> ) ; ovpsnr = sse_to_psnr <S2SV_ModEnd> ( ( double <S2SV_ModStart> double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr ) ; for ( i = 0 ; i < 4 ; i ++ ) fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr ) ; for ( i = 0 ; i < 4 ; i ++ ) fprintf ( stderr, "" <S2SV_blank> %.3f"", stream -> psnr_totals [ i ] / stream -> psnr_count ) ; for ( i = 0 ; i < 4 ; i ++ ) fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr ) ; for ( i = 0 ; i < 4 ; i ++ ) fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr ) ; for ( i = 0 ; i < 4 ; i ++ ) fprintf ( stderr, "" <S2SV_blank> %.3f"", stream",0
308,<S2SV_ModStart> task -> slow_task ) { if (! task -> slow_task ) return ; <S2SV_ModStart> -> timer ) ) return ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
309,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
310,"<S2SV_ModStart> ; TRACE_DEBUG ( ""CIDER=0x%04"" PRIX16 ""\\r\\n"" <S2SV_ModEnd>, ksz8851ReadReg ( <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_PHY1ILR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_PHY1IHR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_MARH <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARM <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARM <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARM <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARL <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851",0
311,"<S2SV_ModStart> plane, encode_block_intra <S2SV_ModEnd> ) ; }",0
312,"<S2SV_ModStart> NEED_IP ( 1, <S2SV_ModEnd> HAVE_OP ( t <S2SV_ModStart> HAVE_OP ( t, <S2SV_ModEnd> HAVE_IP ( t <S2SV_ModStart> HAVE_IP ( t, <S2SV_ModEnd> HAVE_OP ( t <S2SV_ModStart> HAVE_OP ( t, <S2SV_ModEnd> HAVE_OP ( t <S2SV_ModStart> HAVE_OP ( t, <S2SV_ModEnd> HAVE_IP ( t <S2SV_ModStart> HAVE_IP ( t, <S2SV_ModEnd> HAVE_OP ( t <S2SV_ModStart> HAVE_OP ( t, <S2SV_ModEnd> HAVE_OP ( t <S2SV_ModStart> HAVE_OP ( t, <S2SV_ModEnd> HAVE_OP ( t <S2SV_ModStart> HAVE_OP ( t, <S2SV_ModEnd> HAVE_IP ( t <S2SV_ModStart> HAVE_IP ( t, <S2SV_ModEnd> HAVE_OP ( t <S2SV_ModStart> HAVE_OP ( t, <S2SV_ModEnd> HAVE_OP ( t <S2SV_ModStart> HAVE_OP ( t, <S2SV_ModEnd> HAVE_IP ( t <S2SV_ModStart> HAVE_IP ( t, <S2SV_ModEnd> HAVE_OP ( t <S2SV_ModStart> HAVE_OP ( t, <S2SV_ModEnd> HAVE_OP ( t <S2SV_ModStart> HAVE_OP ( t, <S2SV_ModEnd> HAVE_OP ( t <S2SV_ModStart> HAVE_OP ( t, <S2SV_ModEnd> HAVE_IP ( t <S2SV_ModStart> HAVE_IP ( t, <S2SV_ModEnd> HAVE_OP (",0
313,"<S2SV_ModStart> ; if (! fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } bootstage_mark ( bootstage_id + BOOTSTAGE_SUB_FORMAT_OK ) ; if ( fit_uname ) { bootstage_mark ( bootstage_id + BOOTSTAGE_SUB_UNIT_NAME ) ; noffset = fit_image_get_node ( fit, fit_uname ) ; } else { bootstage_mark ( bootstage_id + BOOTSTAGE_SUB_NO_NODE <S2SV_ModEnd> ) ; } <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT_OK ) ; if ( fit_uname ) { bootstage_mark ( bootstage_id + BOOTSTAGE_SUB_UNIT_NAME ) ; noffset = fit_image_get_node ( fit, fit_uname ) ; } else { bootstage_mark ( bootstage_id + BOOTSTAGE_SUB_UNIT",0
314,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ; TEMP_FAILURE_RETRY (,0
315,<S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> * af_ratio ) / ( rc -> avg_frame_bandwidth <S2SV_ModEnd> + af_ratio - <S2SV_ModStart> 1 ) ; # else target = ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval * af_ratio ) / ( rc -> avg_frame_bandwidth <S2SV_ModEnd> + af_ratio - <S2SV_ModStart> 1 ) ; # else target = ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval * af_ratio ) / ( rc -> baseline_gf_interval + af_ratio - 1 ) ; # else target = ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval * af_ratio ) / ( rc -> baseline_gf_interval + af_ratio - 1 ) ; # else target = ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval * af_ratio ) / ( rc -> baseline_gf_interval + af_ratio - 1 ) ; # endif,0
316,"<S2SV_ModStart> ++ ) { if ( strcmp ( argv [ i ], ""allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; argv [ 0 ] = path ; setuid ( 0 ) ; setgid ( 0 ) ; execv ( path, ( char * const * ) argv ) ; return 1 ; } <S2SV_ModEnd> argv [ 0",0
317,"<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch <S2SV_ModStart> value ) ; value = ast2obj_list ( o -> v. Module. type_ignores, ast2obj_type_ignore ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_type_ignores, value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_list ( o -> v. Expression. type_ignores, ast2obj_type_ignore ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_type_ignores, value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_list ( o -> v. Expression. type_ignores, ast2obj_type_ignore ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_type_ignores, value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_list ( o -> v.",0
318,<S2SV_ModStart> [ ib ] <S2SV_ModEnd> ; # if CONFIG_VP8_HIGHBITDEPTH <S2SV_ModStart> # endif dequant_ptr = d -> dequant ; coeff_ptr = b -> coeff ; dqcoeff_ptr = d -> dqcoeff ; i0 =! type ; eob = * d -> eob ; rdmult = ( rdmult * 9 ) >> 4 ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = rdmult * 9 ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rd,0
319,"<S2SV_ModStart> FN_REFLEN ] ; if ( strlen ( opt_basedir ) > sizeof ( buff ) - 1 ) { error = - 1 ; goto exit ; } if ( strlen ( opt_basedir ) > sizeof ( buff ) - 1 ) { error = - 1 ; goto exit ; } strncat ( buff, ""/"", sizeof ( buff ) - 1 ) ; strncat ( buff, FN_DIRSEP, sizeof ( buff ) - 1 ) ; buff [ sizeof ( buff ) - 1 ] = 0 ; my_free ( opt_basedir ) ; opt_basedir = my_strdup ( opt_basedir ) ; opt_basedir = my_strdup ( opt_basedir ) ; opt_datadir = my_strdup ( opt_datadir ) ; opt_datadir = my_strdup ( opt_datadir ) ; opt_datadir = my_strdup ( opt_datadir ) ; opt_datadir = my_strdup ( opt_datadir ) ; opt_datadir = my_strdup ( opt_datadir ) ;",0
320,"<S2SV_ModStart> decrypt_cb ) { # if CONFIG_VP9_HIGHBITDEPTH if ( pbi -> ec_active ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } else { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } # endif <S2SV_ModStart> ) ; } # if CONFIG_VP9_HIGHBITDEPTH if ( pbi -> ec_active ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } # endif <S2SV_ModStart> ; if ( pbi -> ec_active ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } # if CONFIG_VP9_HIGHBITDEPTH if ( pbi -> ec_active ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } #",0
321,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
322,"<S2SV_ModStart>. sack_needed ; sctp_tsnmap_init ( & asoc -> peer. tsn_map, SCTP_TSN_MAP_INITIAL, asoc -> peer. i. initial_tsn, GFP_ATOMIC ) ;",0
323,"<S2SV_ModStart> * returnrate, RATE_DISTORTION <S2SV_ModEnd> * returndistortion, <S2SV_ModStart> returnintra ) { # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # else unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif mode_mv = mode_mv_sb [ sign_bias ] ; best_ref_mv. as_int = 0 ; best_mode. rd = INT_MAX ; best_mode. yrd = INT_MAX ; best_mode. intra_rd = INT_MAX ;",0
324,"<S2SV_ModStart> goto error ; if (! h -> writable ) { h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL ) goto error ; h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL ) goto error ; h -> addr = mmap ( NULL, h -> size, PROT_READ, h -> fd, 0 ) ; if ( h -> addr == MAP_FAILED ) goto error ; DEBUG ( 2, ""malloc <S2SV_blank> file <S2SV_blank> at <S2SV_blank> %p"", h -> addr ) ; } else { h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL ) goto error ; h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL ) goto error ; h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL ) goto error ; h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL ) goto error ; h -> fd = - 1 ; }",0
325,"<S2SV_ModStart> ; UWORD8 u1_profile_idc, u1_level_idc, u1_seq_parameter_set_id ; WORD32 i4_pic_wd, i4_pic_ht ; WORD32 u2_frm_wd_y, u2_frm_ht_y, u2_crop_offset_y, u2_crop_offset_uv ; WORD32 pic_height_in_map_units_minus1 ; WORD32 pic_height_in_map_units_minus1 ; WORD32 pic_height_in_map_units_minus1 ; WORD32 pic_height_in_map_units_minus1 ; WORD32 pic_height_in_map_units_minus1 ; WORD32 pic_height_in_map_units_minus1 ; WORD32 pic_height_in_map_units_minus1 ; WORD32 pic_height_in_map_units_minus1 ; WORD32 pic_height_in_map_units_minus1 ; WORD32 pic_height_in_map_units_minus1 ; WORD32 pic_height_in_map_units_minus1 ; WORD",0
326,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> cpi ; vpx_svc_parameters_t <S2SV_ModEnd> * const params <S2SV_ModStart> NULL ) return VPX_CODEC_INVALID_PARAM <S2SV_ModEnd> ; cpi -> <S2SV_ModStart> = params -> spatial_layer ; cpi -> svc. temporal_layer_id = params -> temporal_layer ; cpi -> svc. lst_fb_idx = params -> lst_fb_idx ; cpi -> svc. gld_fb_idx = params -> gld_fb_idx ; cpi -> alt_fb_idx = params -> alt_fb_idx ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ; set_encoder_config ( & ctx -> oxcf, & ctx ->",0
327,"<S2SV_ModStart> out ) { uint32 width, length ; uint16 bitspersample, samplesperpixel ; uint16 input_compression, input_photometric ; copyFunc cf ; uint32 width, length ; uint32 width, length ; uint32 bitspersample, samplesperpixel ; if ( bitspersample!= ( uint16 ) - 1 ) TIFFSetField ( out, TIFFTAG_BITSPERSAMPLE, bitspersample ) ; if ( samplesperpixel!= ( uint16 ) - 1 ) TIFFSetField ( out, TIFFTAG_SAMPLESPERPIXEL, samplesperpixel ) ; if ( input_photometric == PHOTOMETRIC_YCBCR ) { uint16 subsamplinghor, subsamplingver ; TIFFGetFieldDefaulted ( in, TIFFTAG_YCBCRSUBSAMPLING, & subsamplinghor, & subsamplingver ) ; if ( subsamplinghor!= 1 || subsamplingver!= 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Can\'t <S2SV_blank> convert <S2SV_blank> subsampled <S2SV_blank> image.\\n"", TIFFFileName ( in ) ) ; return FALSE ; }",0
328,"<S2SV_ModStart> <S2SV_null> <S2SV_null> int check_symlinks ( struct archive_write_disk <S2SV_ModEnd> * a ) <S2SV_ModStart> = '\\0' ; if ( a -> pst == NULL ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED ) ; } <S2SV_ModEnd> a -> pst <S2SV_ModStart> NULL ; if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; }",0
329,"<S2SV_ModStart> ( inode -> i_sb, & iinfo -> i_location, 0, & ident ) ; if ( ident == TAG_IDENT_IE && ibh ) { struct buffer_head * nbh = NULL ; struct kernel_lb_addr loc ; struct indirectEntry * ie ; ie = ( struct indirectEntry * ) ibh -> b_data ; loc = lelb_to_cpu ( ie -> indirectICB. extLocation ) ; if (! loc ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; make_bad_inode ( inode ) ; return ; } if ( ident == TAG_IDENT_FE || ident == TAG_IDENT_EFE ) { memcpy ( & iinfo -> i_location, & loc, sizeof ( struct fileEntry ) ) ; make_bad_inode ( inode ) ; return ; } fe = ( struct fileEntry * ) bh -> b_data ; efe = ( struct extendedFileEntry * ) bh -> b_data ; if ( fe -> icbTag. strategyType == cpu_to_le16 ( 4096 )",0
330,"<S2SV_ModStart> -> tx_size ; const int filter_level = get_filter_level ( lfi_n, mbmi ) ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> left_uv [ tx_size_uv ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_y = & lfm -> int_4x4_y [ tx_size_y ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv ; int i ; for ( i = 0 ; i < w ; i ++ ) { memset ( & lfm -> lfl_y [ index ], filter_level, w ) ; index += 8 ;",0
331,"<S2SV_ModStart> mq_flush_lock, flags ) ; list_for_each_entry ( rq, n, running, flush. list ) { unsigned int seq = blk_flush_cur_seq ( rq ) ; BUG_ON ( seq!= REQ_FSEQ_PREFLUSH && seq!= REQ_FSEQ_POSTFLUSH ) ; queued |= blk_flush_complete_seq ( rq, fq, seq, error ) ; } if ( q -> mq_ops ) spin_unlock_irqrestore ( & fq -> mq_flush_lock, flags ) ;",0
332,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) return ( uint32_t ) - 1 ;,0
333,"<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) { return! match ( prog -> start, sp, prog -> flags | eflags, sub ) ; } else if ( prog -> flags & eflags ) { return! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; } else if ( prog -> flags & eflags ) { return! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; } else if ( prog -> flags & eflags ) { return! match ( prog -> start, sp, prog -> flags | eflags, sub ) ; } else if ( prog -> flags & eflags ) { return! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; } else if ( prog -> flags & eflags ) { return! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; } else if ( prog -> flags & eflags ) { return! match ( prog -> start, sp, prog -> flags | eflags, sub ) ; } else if ( prog -> flags & eflags ) { return! match ( prog -> start,",0
334,"<S2SV_ModStart> ) ) { if (! smatch ( option, "" <S2SV_blank> =\\t,"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! ovalue ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; }",0
335,"<S2SV_ModStart> NULL || * replySize > ( int ) sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } * ( effect_param_t * ) pCmdData = ( effect_param_t * ) pCmdData ; if ( * ( effect_param_t * ) pReplyData == NULL || * replySize > ( int ) sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } * ( effect_param_t * ) pReplyData = session_get_param ( effect -> session, ( effect_param_t * ) pReplyData ) ; if ( * ( effect_param_t * ) pCmdData == NULL || * replySize > ( int ) sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; }",0
336,"<S2SV_ModStart> ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( CorruptImageError, CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( CorruptImageError, CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModEnd> ) ; if",0
337,"<S2SV_ModStart> ) ) { struct ipv6_txoptions * opt = rcu_dereference_protected ( np -> tx_opt, sock_owned_by_user ( sk ) ) ; opt -> opt. optlen = sizeof ( struct ipv6_txoptions ) ; opt -> opt. optlen = sizeof ( struct ipv6_txoptions ) ; opt -> opt. optlen = sizeof ( struct ipv6_txoptions ) ;",0
338,"<S2SV_ModStart> * ) calloc ( sizeof ( struct berval ), & err ) ; if ( ret [ j ] == NULL ) { err = ENOMEM ; goto cleanup ; } <S2SV_ModStart> * ) calloc ( sizeof ( struct berval ), & err ) ; if ( ret [ j ] -> key_data_length [ 0 ]!= sizeof ( struct berval ) ) { err = ENOMEM ; goto cleanup ; } <S2SV_ModStart> * ) calloc ( sizeof ( struct berval ), & err ) ; if ( ret [ j ] -> key_data_length [ 0 ]!= sizeof ( struct berval ) ) { err = ENOMEM ; goto cleanup ; } <S2SV_ModStart> * ) calloc ( sizeof ( struct berval ), & err ) ; if ( ret [ j ] -> key_data_length [ 0 ]!= sizeof ( struct berval ) ) { err = ENOMEM ; goto cleanup ; } <S2SV_ModStart> * ) calloc ( sizeof ( struct berval ), & err ) ; if ( ret [ j ] -> key_data_length [ 0 ]!= sizeof ( struct berval ) ) { err = ENOMEM ; goto cleanup ; }",0
339,"<S2SV_ModStart> 0x02 ) ; if ( crgram_len > sizeof ( sbuf ) - 1 ) { r = sc_transmit_apdu ( card, & apdu ) ; LOG_TEST_RET ( card -> ctx, r, ""APDU <S2SV_blank> transmit <S2SV_blank> failed"" ) ; } else { r = sc_transmit_apdu ( card, & apdu ) ; LOG_TEST_RET ( card -> ctx, r, ""APDU <S2SV_blank> transmit <S2SV_blank> failed"" ) ; }",0
340,"<S2SV_ModStart> uint8 result ; size_t <S2SV_ModEnd> length ; STREAM <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> connect <S2SV_blank> response <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"" ) ; return False ; } <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> connect <S2SV_blank> response <S2SV_blank> would <S2SV_blank> overrun"" ) ; return False ; } <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> connect <S2SV_blank> response <S2SV_blank> would <S2SV_blank> overrun"" ) ; return False ; } <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> connect <S2SV_blank> response <S2SV_blank> would <S2SV_blank> overrun"" ) ; return False ; }",0
341,"<S2SV_ModStart> ( ret ) { dev_err ( & vdev -> dev, ""Invalid <S2SV_blank> macvlan <S2SV_blank> count: <S2SV_blank> %d\\n"", vsi -> num_queue_pairs ) ; return ret ; }",0
342,<S2SV_ModStart> -> nr_extents ; if ( extent. count > uid_gid_map_max_entries ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart> -> nr_extents ; if ( extent. lower_first > uid_gid_map_max_entries ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart> -> nr_extents ; if ( extent. count > uid_gid_map_max_entries ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart>. count ; if ( extent. count > uid_gid_map_max_entries ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart> -> nr_extents ; if ( extent. count > uid_gid_map_max_entries ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart> -> nr_extents ; if ( extent. count > uid_gid_map_max_entries ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart>. lower_first ; if ( extent. count > uid_gid_map_max_entries ) { ret = - EINVAL ; goto out ; },0
343,"<S2SV_ModStart> } } } eprintf ( ""vCont;c;s"" ) ; if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g",0
344,<S2SV_ModStart> * dataptr ; jas_uchar <S2SV_ModEnd> * datacnt ;,0
345,"<S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_row, mb_col, pc -> multi_token_partition <S2SV_ModEnd> ) ; if <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_row, mb_col, pc -> multi_token_partition <S2SV_ModEnd> ) ; if <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_row, mb_col, pc -> multi_token_partition <S2SV_ModEnd> ) ; if <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_row, mb_col, pc -> multi_token_partition <S2SV_ModEnd> ) ; if <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_row, mb_col, pc -> multi_token_partition <S2SV_ModEnd> ) ; if <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_row, mb_col, pc -> multi_token_partition <S2SV_ModEnd> ) ; if <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_row, mb_col, pc -> multi_token_partition <S2SV_ModEnd> ) ; if <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb",0
346,<S2SV_ModStart> NULL ) ; <S2SV_ModEnd> } quantum_info =,0
347,"<S2SV_ModStart> len ) { PyObject <S2SV_ModEnd> * u ; <S2SV_ModStart> * buf ; PyObject * w ; int kind ; void * data ; Py_ssize_t len, i ; w = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) { Py_DECREF ( w ) ; return NULL ; } kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = PyUnicode_GET_LENGTH ( w ) ; for ( i = 0 ; i < len ; i ++ ) { Py_UCS4 chr = PyUnicode_READ ( kind, data, i ) ; sprintf ( p, ""\\\\U%08x"", chr ) ; p += 10 ; } assert ( p - buf <= Py_SIZE ( u ) ) ; Py_DECREF ( w ) ; } if ( * s & 0x80 ) { PyObject * w ; int kind ; void * data ; Py_ssize_t len, i ; w = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) { Py_DECREF ( w ) ; return NULL ; } kind = PyUnicode_K",0
348,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart> NO, DISPLAYED <S2SV_ModEnd> } wrerrno = <S2SV_ModStart> ull ; int setimes, targisdir, wrerrno ; char ch, * np, * why, buf [ 2048 ], visbuf [ 2048 ] ; char * * patterns = NULL ; size_t n, npatterns = 0 ; if ( targetshouldbedirectory ) verifydir ( targ, & patterns, & npatterns ) ; ( void ) umask ( mask ) ; if ( targetshouldbedirectory ) verifydir ( targ, & patterns, & npatterns ) ; if ( targetshouldbedirectory ) verifydir ( targ, & patterns, & npatterns ) ; if ( targetshouldbedirectory ) verifydir ( targ, & patterns, & npatterns ) ; if ( targetshouldbedirectory ) verifydir ( targ, & patterns, & npatterns ) ; if ( targetshouldbedirectory ) verifydir ( targ, & patterns, & npatterns ) ; ( void ) umask ( mask ) ; if ( targetshouldbedirectory ) verifydir ( targ, & patterns, & npatterns ) ; if ( targetshouldbedirectory ) verifydir ( targ, & patterns, & npatterns",0
349,"<S2SV_ModStart> -> buffer ; if (! ctx -> flags & CRYPTO_TFM_REQ_MAY_SLEEP ) return - ENOKEY ; <S2SV_ModStart>, dctx ) ; if (! ctx -> flags & CRYPTO_TFM_REQ_MAY_SLEEP ) return - ENOKEY",0
350,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
351,"<S2SV_ModStart> = 0 ; if ( vp8_yv12_alloc_frame_buffer ( & oci -> temp_scale_frame, width, height, VP8BORDERINPIXELS ) < 0 ) goto allocation_fail ; if ( vp8_yv12_alloc_frame_buffer ( & oci -> alt_scale_frame, width, height, VP8BORDERINPIXELS ) < 0 ) goto allocation_fail ; if ( vp8_yv12_alloc_frame_buffer ( & oci -> alt_scale_frame, width, height, VP8BORDERINPIXELS ) < 0 ) goto allocation_fail ; if ( vp8_yv12_alloc_frame_buffer ( & oci -> alt_scale_frame, width, height, VP8BORDERINPIXELS ) < 0 ) goto allocation_fail ; if ( vp8_yv12_alloc_frame_buffer ( & oci -> lst_fb_idx [ 0 ], width, height, VP8BORDERINPIXELS ) < 0 ) goto allocation_fail ; if ( vp8_yv12_alloc_frame_buffer ( & oci",0
352,"<S2SV_ModStart>. left_context ) return ; memcpy ( & t_above, x -> e_mbd. above_context, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; memcpy ( & t_left, x -> e_mbd. left_context, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; memcpy ( & t_left, x -> e_mbd. left_context, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; ta = ( ENTROPY_CONTEXT * ) & t_above ; tl = ( ENTROPY_CONTEXT * ) & t_left ; has_2nd_order = ( x -> e_mbd. mode_info_context -> mbmi. mode!= B_PRED && x -> e_mbd. mode_info_context -> mbmi. mode!= SPLITMV ) ; type = has_2nd_order? PLANE_TYPE_Y_NO_DC : PLANE_TYPE_Y_WITH_DC ; for ( b = 0 ; b < 24 ; b ++ ) { optimize_b ( x, b, type, ta +",0
353,<S2SV_ModStart> u1_is_idr_slice ) { ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; } else { ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; },0
354,<S2SV_ModStart> [ 1 ] && screen -> buffers [ 0 ] -> flags & VTERM_SCREEN_FLAG_HIGHBITDEPTH ) { if ( screen -> buffers [ 1 ] -> flags & VTERM_SCREEN_FLAG_HIGHBITDEPTH ) { if ( screen -> buffers [ 1 ] -> flags & VTERM_SCREEN_FLAG_HIGHBITDEPTH ) { if ( screen -> buffers [ 1 ] -> flags & VTERM_SCREEN_FLAG_HIGHBITDEPTH ) { if ( screen -> flags & VTERM_SCREEN_FLAG_HIGHBITDEPTH ) { if ( screen -> flags & VTERM_SCREEN_FLAG_HIGHBITDEPTH ) { if ( screen -> flags & VTERM_SCREEN_FLAG_HIGHBITDEPTH ) { if ( screen -> flags & VTERM_SCREEN_FLAG_HIGHBITDEPTH ) { if ( screen -> flags & VTERM_SCREEN_FLAG_HIGHBITDEPTH ) { if ( screen -> flags & VTERM_SCREEN_FLAG_HIGHBITDEPTH ) { if ( screen -> flags & VTERM_SCREEN_FLAG_HIGHBITDEPTH ) { if ( screen -> flags & VTERM_SCREEN_FLAG_HIGHBITDEPTH ) { if ( screen -> flags & VTERM_SCREEN_FLAG_HIGHBIT,0
355,"<S2SV_ModStart> do { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart> & delay, TEMP_FAILURE_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY _retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry",0
356,"<S2SV_ModStart>, one, <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> ) break ; if ( number_planes_filled > number_planes ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_planes ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> number_planes_filled > number_planes ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > number_planes ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_planes ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> number_planes_filled > number_planes ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > number_planes ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
357,"<S2SV_ModStart> { httpSetHostName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } if ( value ) { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } else { httpSetRouteName ( state -> route, sfmt ( "" <S2SV_blank> \\t,"", NULL ) ) ; state -> endpoints = sclone ( value ) ; }",0
358,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
359,<S2SV_ModStart> if (! job_id ||! prev_hash ||! coinbase1 ||! coinbase2 ||! bbversion ||! nbit ||! ntime ) { if ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ; goto out ; } cg_wlock ( & pool -> data_lock ) ; if ( job_id ) free ( job_id ) ; if ( prev_hash ) free ( prev_hash ) ; if ( bbversion ) free ( bbversion ) ; if ( nbit ) free ( nbit ) ; if ( ntime ) free ( ntime ) ;,0
360,"<S2SV_ModStart> 0 ) { if ( transmitted_length + ret > length ) { LOG_ERROR ( ""In <S2SV_blank> %s, <S2SV_blank> error <S2SV_blank> writing <S2SV_blank> to <S2SV_blank> the <S2SV_blank> serial <S2SV_blank> port <S2SV_blank> with <S2SV_blank> fd <S2SV_blank> %d: <S2SV_blank> %s"", __func__, fd, strerror ( errno ) ) ; return transmitted_length ; }",0
361,<S2SV_ModStart> ioc ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
362,"<S2SV_ModStart> unused ) { _Py_IDENTIFIER ( __dict__ ) ; <S2SV_ModStart> ; PyObject * dict ; Py_IDENTIFIER ( PyId___dict__ ) ; dict = _PyObject_GetAttrId ( self, & PyId___dict__ ) ; if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; return NULL ; } <S2SV_ModStart> dict ) { res = Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } if ( dict ) { res = Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } if ( dict ) { res = Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } <S2SV_ModEnd> return res ;",0
363,"<S2SV_ModStart> USB_DT_OTG, ( struct usb_descriptor * * ) & desc ) ; if (! ( desc -> bmAttributes & USB_OTG_HNP ) ) { dev_info ( & udev -> dev, ""Dual-Role <S2SV_blank> OTG <S2SV_blank> device <S2SV_blank> on <S2SV_blank> %s <S2SV_blank> HNP <S2SV_blank> port\\n"", ( port1 == bus -> otg_port )? """" : ""non-"" ) ; bus -> b_hnp_enable = 1 ; } else if ( port1 == bus -> otg_port ) { bus -> b_hnp_enable = 0 ; err = usb_control_msg ( udev, 0, USB_REQ_SET_FEATURE, 0, USB_DEVICE_B_HNP_ENABLE, 0, NULL, 0, USB_CTRL_SET_TIMEOUT ) ; if ( err < 0 ) dev_err ( & udev -> dev, ""can\'t <S2SV_blank> set <S2SV_blank> HNP <S2SV_blank> mode: <S2SV_blank> %d\\n"", err ) ; bus -> b_hnp_enable = 0 ; } else { err = usb_control_msg ( udev, 0, USB_REQ_SET",0
364,"<S2SV_ModStart> = file -> private_data <S2SV_ModEnd> ; u32 flags <S2SV_ModStart> ) ; case PERF_EVENT_IOC_PERIOD : return perf_event_period ( event, <S2SV_ModEnd> ( u64 __user <S2SV_ModStart> ) arg ) ; case PERF_EVENT_IOC_ID : return primary_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; return 0 ; } case PERF_EVENT_SET_OUTPUT : { int ret ; if ( arg!= - 1 ) { struct perf_event * output_event ; struct fd output ; ret = perf_fget_light ( arg, & output ) ; if ( ret ) return ret ; output_event = output. file -> private_data ; ret = perf_event_set_output ( event, output_event ) ; fdput ( output ) ; } else { ret = perf_event_set_output ( event, NULL ) ; } <S2SV_ModEnd> return ret ;",0
365,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode",0
366,"<S2SV_ModStart> - EINVAL ; if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) return - EINVAL ; } else { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) return - EINVAL ; } else { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) { if ( cmd_q -> c",0
367,"<S2SV_ModStart> ; OPENSSL_cleanse ( key, sizeof key ) ; OPENSSL_cleanse ( iv, sizeof iv ) ;",0
368,"<S2SV_ModStart> s ) ; memory_region_init_io ( & s -> mmio, OBJECT ( s ), & stellaris_enet_ops, s, ""stellaris_enet"", 0x1000 ) ; sysbus_init_irq ( sbd, & s -> irq ) ; sysbus_init_mmio ( sbd, & s -> mmio ) ; sysbus_init_irq ( sbd, & s -> irq ) ; memory_region_init_io ( & s -> mmio, & s -> mmio, OBJECT ( s ), & s -> irq, ""stellaris_enet"", 0x1000 ) ; memory_region_init_io ( & s -> mmio, & s -> irq ) ; sysbus_init_mmio ( sbd, & s -> mmio ) ; sysbus_init_irq ( sbd, & s -> irq ) ; memory_region_init_io ( & s -> mmio, & s -> mmio ) ; sysbus_init_mmio ( sbd, & s -> mmio ) ; sysbus_init_irq ( sbd, & s ->",0
369,<S2SV_ModStart> case NGHTTP2_IB_READ_CLIENT_MAGIC : if ( iframe -> payloadleft < NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } <S2SV_ModStart> case NGHTTP2_IB_READ_CLIENT_MAGIC : if ( iframe -> payloadleft < NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } <S2SV_ModStart> case NGHTTP2_CLIENT_MAGIC : if ( iframe -> payloadleft < NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } <S2SV_ModStart> case NGHTTP2_IB_READ_CLIENT_MAGIC : if ( iframe -> payloadleft < NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } iframe -> payloadleft -= NGHTTP2_CLIENT_MAGIC_LEN ; if ( iframe -> payloadleft < NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_M,0
370,"<S2SV_ModStart> += dif ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
371,"<S2SV_ModStart> ; x86_pmu. num_pebs_events = min_t ( unsigned, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ; if ( version > 1 ) x86_pmu. max_pebs_events = min_t ( unsigned, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ; if ( version > 1 ) x86_pmu. num_counters = eax. split. num_counters ; if ( version > 1 ) x86_pmu. max_pebs_events = min_t ( unsigned, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ; if ( version > 1 ) x86_pmu. max_pebs_events = min_t ( unsigned, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ; if ( version > 1 ) { u64 capabilities ; rdmsrl ( MSR_IA32_PERF_CAPABILITIES, capabilities ) ; x86_pmu. intel_cap. capabilities = capabilities ; rdmsrl ( MSR_IA32_PERF_CAP",0
372,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> pack_mb_tokens ( vpx_writer <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * tp, vpx_writer <S2SV_ModEnd> * stop ) <S2SV_ModStart> ] ; const vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> ] ; int n = 0 ; int v = a -> value ; int n = a -> len ; if ( p -> skip_eob_node ) { n -= p -> skip_eob_node ; i = 2 * p -> skip_eob_node ; } if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int bits = v >> ( n - len ) & 1 ; v = a -> value ; int n = a -> len ; if ( p -> skip_eob_node ) { n -= p -> skip_eob_node ; } if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int bits =",0
373,"<S2SV_ModStart>, uncompressed_hdr_size ; vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> 0 } ; vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> saved_wb ; write_uncompressed_header <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> 16 ) ; vpx_compute_update_table ( ) ; first_part_size = write_compressed_header ( cpi, data ) ; data += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; vpx_clear_system_state ( ) ; first_part_size = write_compressed_header ( cpi, data ) ; data += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; vpx_compute_update_table ( ) ; data += encode_tiles ( cpi, data ) ; * size = data - dest ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
374,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
375,"<S2SV_ModStart> struct ikev2_id id <S2SV_ModEnd> ; int id_len <S2SV_ModStart> ; ND_TCHECK ( <S2SV_ModEnd> * ext ) <S2SV_ModStart> * ext ) ; UNALIGNED_MEMCPY ( & id, ext, sizeof ( id ) ) ; ikev2_pay_print ( ndo, NPSTR ( tpay ), id. h. critical ) ; id_len = ntohs ( id. h. len ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> len=%d"", id_len ) ) ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; } if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; } <S2SV_ModStart>",0
376,<S2SV_ModStart> ; if ( atoi ( jas_tvparser_getval ( tvp ) ) < 0 ) { goto error ; } <S2SV_ModEnd> jas_tvparser_settag ( tvp <S2SV_ModStart> ; if ( atoi ( jas_tvparser_getval ( tvp ) ) < 0 ) { goto error ; } <S2SV_ModEnd> jas_tvparser_settag ( tvp <S2SV_ModStart> ; if ( atoi ( jas_tvparser_gettag ( tvp ) ) < 0 ) { goto error ; } <S2SV_ModStart> ; if ( atoi ( jas_tvparser_getval ( tvp ) ) < 0 ) { goto error ; } <S2SV_ModEnd> jas_tvparser_settag ( tvp <S2SV_ModStart> ; if ( atoi ( jas_tvparser_getval ( tvp ) ) < 0 ) { goto error ; } <S2SV_ModEnd> jas_tvparser_settag ( tvp <S2SV_ModStart> ; if ( atoi ( jas_tvparser_gettag ( tvp ) ) < 0 ) { goto error ; } <S2SV_ModEnd> jas_tvparser_settag ( tvp <S2SV_ModStart> ; if ( atoi ( jas_tvparser_gettag ( tvp ) ) < 0 ) { goto error,0
377,<S2SV_ModStart> urb ) ; kfree_skb ( skb ) ;,0
378,"<S2SV_ModStart>, yt0_0, yt1_0, xt2_0, yt2_0 ; WORD32 xh0_0, xh1_0, xh20_0, xh21_0, xl0_0, xl1_0, xl20_0, xl21_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1",0
379,<S2SV_ModStart> mntent ) { if ( IS_ERR ( mntent -> mnt_dir ) ) return PTR_ERR ( mntent -> mnt_dir ) ;,0
380,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
381,"<S2SV_ModStart> ) ) ; rb_hash_aset ( env, server_name_val, req_server_name ( req ) ) ; rb_hash_aset ( env, server_port_val, req_server_port ( req ) ) ; rb_hash_aset ( env, hostname_val, req_hostname ( req ) ) ; rb_hash_aset ( env, hostname_val, req_hostname ( req ) ) ; rb_hash_aset ( env, hostname_val, req_hostname ( req ) ) ; rb_hash_aset ( env, hostname_val, req_hostname ( req ) ) ; rb_hash_aset ( env, hostname_val, req_hostname ( req ) ) ; rb_hash_aset ( env, hostname_val, req_hostname ( req ) ) ; rb_hash_aset ( env, hostname_val, req_hostname ( req ) ) ; rb_hash_aset ( env, hostname_val, req_hostname ( req ) ) ; rb_hash_aset ( env, hostname_val, req_hostname ( req ) ) ; rb_hash_aset ( env, hostname_val, req_hostname ( req ) ) ; rb_",0
382,"<S2SV_ModStart> endif # endif MYSQL_BIND * bind, * bind_end ; imp_sth_phb_t * fbind ; # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION imp_sth -> use_server_side_prepare = imp_dbh -> use_server_side_prepare ; if ( attribs ) { svp = DBD_ATTRIB_GET_SVP ( attribs, ""mysql_server_prepare"", 20 ) ; imp_sth -> use_server_side_prepare = ( svp )? SvTRUE ( * svp ) : imp_dbh -> use_server_side_prepare ; svp = DBD_ATTRIB_GET_SVP ( attribs, ""async"", 5 ) ; if ( svp && SvTRUE ( * svp ) ) { do_error ( sth, 2000, ""Async <S2SV_blank> support <S2SV_blank> was <S2SV_blank> not <S2SV_blank> built <S2SV_blank> into <S2SV_blank> this <S2SV_blank> version <S2SV_blank> of <S2SV_blank> DBD::mysql"", ""HY000"" ) ; return 0 ; } else { do_error ( sth, 2000, ""Async <S2SV_blank> support <S2SV_blank> was <S2SV_blank> not <S2SV_blank> built <S2SV_blank> into <S2SV_blank> this <S2SV_blank> version <S2SV_blank> of <S2SV_blank> DBD::mysql"", """,0
383,"<S2SV_ModStart> int need = 0 <S2SV_ModEnd> ; CELL first <S2SV_ModStart> screen, { if (! screen -> selected_cells [ which ] ) { TRACE ( ( ""SaltTextAway <S2SV_blank> which=%d, <S2SV_blank> first=%d,%d, <S2SV_blank> last=%d\\n"", which, first. row, last. row, last. col ) ) ; return ; } <S2SV_ModStart> screen, { if (! screen -> selected_cells [ which ] ) { TRACE ( ( ""SaltTextAway <S2SV_blank> which=%d, <S2SV_blank> first=%d,%d, <S2SV_blank> last=%d\\n"", which, first. row, last. col ) ) ; return ; } <S2SV_ModStart> screen, { if (! screen -> selected_cells [ which ] ) { TRACE ( ( ""SaltTextAway <S2SV_blank> which=%d, <S2SV_blank> first=%d,%d, <S2SV_blank> last=%d\\n"", which, first. row, last. col ) ; return ; }",0
384,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ftoa_bounded_extra ( JsVarFloat <S2SV_ModStart> val ) ) strncat <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""-NaN"" <S2SV_ModEnd>, len ) <S2SV_ModStart> str, ""Infinity"" <S2SV_ModEnd>, len )",0
385,"<S2SV_ModStart> ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; char * result ; memcpy ( buf, ""DEADBEEF"", 8 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( result!= NULL ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( length == 5 ) ; if ( size < 6 ) ASSERT ( result!= buf ) ; ASSERT ( memcmp ( buf + size, & ""DEADBEEF"" [ size ], 8 - size ) == 0 ) ; if ( result!= buf ) free ( result ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; char * result ; size = size ; char * result ; memcpy ( buf, ""DEADBEEF"", 8 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( result!= NULL ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( length ==",0
386,"<S2SV_ModStart> ; if ( unlikely ( fast_pool -> count >= 64 ) && crng_fast_load ( ( char * ) fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { fast_pool -> count = 0 ; fast_pool -> last = now ; return ; } if ( ( fast_pool -> count >= 64 ) && crng_fast_load ( ( char * ) fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { fast_pool -> count = 0 ; } if ( ( fast_pool -> count >= 64 ) && crng_fast_load ( ( char * ) fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { fast_pool -> count = 0 ; fast_pool -> last = now ; return ; }",0
387,"<S2SV_ModStart> str, ""ID:"" <S2SV_ModEnd>, len ) <S2SV_ModStart> str, ""String:"" <S2SV_ModEnd>, len ) <S2SV_ModStart> str, ""String:"" <S2SV_ModEnd>, len ) <S2SV_ModStart> str, ""String:"" <S2SV_ModEnd>, len ) <S2SV_ModStart> str, ""String:"" <S2SV_ModEnd>, len )",0
388,,1
389,"<S2SV_ModStart> * output ; <S2SV_ModEnd> if ( ExpandFilenames <S2SV_ModStart> ( argc, & argv, exception ) == MagickFalse ) { ThrowFileException ( exception, ResourceLimitError, ""MemoryAllocationFailed"", GetExceptionMessage ( errno ) ) ; } <S2SV_ModEnd> input = fopen_utf8 <S2SV_ModStart> ], ""rb"" ) ; if ( input == ( FILE * ) NULL ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ i ] ) ; return ( MagickFalse ) ; } for ( i = 2 ; i < ( ssize_t ) ( argc - 1 ) ; i ++ ) { input = fopen_utf8 ( argv [ i ], ""rb"" ) ; if ( input == ( FILE * ) NULL ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ i ] ) ; continue ; } for ( c = fgetc ( input ) ; c!= EOF ; c = fgetc ( input ) ) { ( void ) fputc ( ( char ) c, output ) ; ( void ) remove_utf8 ( argv [ i ] ) ; } ( void ) fclose ( input ) ; ( void ) fclose",0
390,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
391,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int setpwnam ( <S2SV_ModStart> atomic_dir = ""/tmp"" <S2SV_ModEnd> ; pw_init ( <S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY ( <S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY ( <S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_",0
392,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, const",0
393,<S2SV_ModStart> s2 ) { if ( strlen ( s1 ) > strlen ( s2 ) ) { return - 1 ; } return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
394,"<S2SV_ModStart> TRUE ; } Jid * jid_from = jid_create ( from ) ; Jid * jid_to = jid_create ( <S2SV_ModEnd> to ) ; <S2SV_ModStart> jid_to ) ; if (! jid_from ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> jid <S2SV_blank> for <S2SV_blank> Carbon"" ) ; return TRUE ; } <S2SV_ModStart> jid_from ) ; if (! jid_to ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> jid <S2SV_blank> for <S2SV_blank> Carbon"" ) ; return TRUE ; } if ( g_strcmp0 ( name, ""received"" )!= 0 ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> stanza <S2SV_blank> name <S2SV_blank> for <S2SV_blank> Carbon"" ) ; return TRUE ; } if ( g_strcmp0 ( name, ""sent"" )!= 0 ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> stanza <S2SV_blank> name <S2SV_blank> for <S2SV_blank> Carbon"" ) ; return TRUE ; } if ( g_strcmp0 ( name, ""received"" )!= 0 ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> name <S2SV_blank> for <S2SV_blank> Carbon"" ) ; return TRUE ; } if ( g_strcmp0 ( name, ""received""",0
395,"<S2SV_ModStart> { parse_global_option ( CMD_PRINT_HELP, NULL, NULL ) ; parse_service_option ( CMD_PRINT_HELP, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-version"" ) ) { parse_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-sockets"" ) ) { socket_options_print ( ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-options"" ) ) { print_ssl_options ( ) ; log_flush ( LOG_MODE_INFO ) ; return 1 ; } else if (! strcasecmp ( arg1, ""-fd"" ) ) { if (! arg2 ) { s_log ( LOG_ERR, ""No <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> specified"" ) ; ioerror ( ""fd"" ) ; return 1 ; } name = arg",0
396,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
397,"<S2SV_ModStart> md -> raw_packet, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs",0
398,<S2SV_ModStart> ; if ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; } else { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; } if ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_Bytes = ps_ip -> s_ivd_video_decode_ip_t. u,0
399,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> char * print_string <S2SV_ModStart> { return print_string_ptr <S2SV_ModEnd> ( item -> <S2SV_ModStart> -> valuestring ) ; } <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
400,"<S2SV_ModStart> enc. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img, <S2SV_ModStart> enc. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img, <S2SV_ModStart> enc. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img,",0
401,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> ++ ; ret = sscanf ( argv [ i ] + 1, ""prestring=%s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> prestring\\n"" ) ; return 1 ; } <S2SV_ModStart> ++ ; ret = <S2SV_ModStart> ++ ; ret = sscanf ( argv [ i ] + 1, ""protos=%s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> protos\\n"" ) ; return 1 ; } if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; return 1 ; } <S2SV_ModStart> ++ ; ret = sscanf ( argv [ i ] + 1, ""protos=%s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> protos\\n"" ) ; return 1 ; } if ( ( len = strlen ( buf ) ) > L_BUFSIZE",0
402,"<S2SV_ModStart> cols0 ) ; } when 10 : { int rows, cols ; win_get_screen_chars ( & rows, & cols ) ; win_set_chars ( rows, cols ) ; } when 11 : { int rows, cols ; win_get_screen_chars ( & rows, & cols ) ; win_set_chars ( rows, cols ) ; } when 12 : { int rows, cols ; win_get_screen_chars ( & rows, & cols ) ; win_set_chars ( rows, cols ) ; } when 13 : { int rows, cols ; win_get_screen_chars ( & rows, & cols ) ; win_set_chars ( rows, cols ) ; } when 12 : { int rows, cols ; win_get_screen_chars ( & rows, & cols ) ; win_set_chars ( rows, cols ) ; } when 13 : { int rows, cols ; win_get_screen_chars ( & rows, & cols ) ; win_set_chars ( rows, cols ) ; } when 14 : { int rows, cols ; win_get_screen_chars ( & rows, & cols ) ; win_set_chars ( rows,",0
403,<S2SV_ModStart> ; i < <S2SV_ModEnd> cols + 17,0
404,"<S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( ( i -> parent -> log ) fprintf ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } if ( ( i -> posY + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( ( i -> parent -> log ) fprintf ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( ( i -> parent -> log ) fprintf ( i -> parent -> log, """,0
405,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 16 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 32 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 64 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 64 ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",0
406,"<S2SV_ModStart> NULL ) { st = krb5_ldap_get_password_policy ( context, ld, ent, pol_name, * policy ) ; if ( st!= 0 ) { st = krb5_ldap_get_password_policy ( context, ld, ent, pol_name, * policy ) ; if ( st!= 0 ) { krb5_ldap_free_password_policy ( context, * policy ) ; * policy = NULL ; } } else { st = krb5_ldap_get_password_policy ( context, ld, ent, pol_name, * policy ) ; if ( st!= 0 ) { if ( * policy!= NULL ) { st = krb5_ldap_get_password_policy ( context, ld, ent, pol_name, * policy ) ; if ( st!= 0 ) { krb5_ldap_free_password_policy ( context, * policy ) ; * policy = NULL ; } } else { st = krb5_ldap_get_password_policy ( context, ld, ent, pol_name, * policy ) ; if ( st!= 0 ) { krb5_ldap_free_password_policy ( context",0
407,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
408,"<S2SV_ModStart> ) ) { switch ( c ) { case'<S2SV_blank>': psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'e' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'T' : trunc_8to4 = SF_TRUE ; break ; case'm' : data = va_arg ( argptr, unsigned int ) ; header_put_marker ( psf, data ) ; count += 1 ; break ; case '2' : data = va_arg ( argptr, unsigned int ) ; header_put_byte ( psf, data ) ; count += 2 ; break ; case '3' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_long ( psf, data ) ; } else { header_put_le_long ( psf, data ) ; } ; count += 3 ; break ; case '4' : data = va_arg ( argptr, unsigned int ) ; header_put_byte ( psf, data ) ; count += 4 ; break ; case '5' : data = va_arg",0
409,<S2SV_ModStart> ; if ( d -> msg_len > ( CX24116_ARGLEN - CX24116_DISEQC_MSGOFS ) ) return - EINVAL ; for ( i = 0 ; i < d -> msg_len ; i ++ ) state -> dsec_cmd. args [ CX24116_DISEQC_MSGOFS + i ] = d -> msg [ i ] ; for ( i = 0 ; i < d -> msg_len ; i ++ ) state -> dsec_cmd. args [ CX24116_DISEQC_MSGLEN + i ] = d -> msg [ i ] ; for ( i = 0 ; i < d -> msg_len ; i ++ ) state -> dsec_cmd. args [ CX24116_DISEQC_MSGOFS + i ] = d -> msg [ i ] ; state -> dsec_cmd. args [ CX24116_DISEQC_MSGLEN ] = d -> msg_len ; if ( toneburst == CX24116_DISEQC_TONEOFF ) state -> dsec_cmd. args [ CX24116_DISEQC_BURST ],0
410,"<S2SV_ModStart> RMT_EQUAL_RGB ) ThrowReaderException <S2SV_ModEnd> ( CorruptImageError, <S2SV_ModStart> ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModEnd> ) ; sun_info <S2SV_ModStart> ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModEnd> ) ; sun_info <S2SV_ModStart> ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModEnd> ) ; sun_info <S2SV_ModStart> ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModEnd> ) ; sun_info <S2SV_ModStart> ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModEnd> ) ; sun_info <S2SV_ModStart> ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModEnd> ) ; sun_info <S2SV_ModStart> ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModEnd> ) ; sun_info <S2SV_ModStart> ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModEnd> ) ; sun_info <S2SV_ModStart> ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModEnd> ) ; sun_info <S2SV_ModStart> ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModEnd> ) ; sun_info <S2SV_ModStart> ( CorruptImageError, ""ImproperImageHeader",0
411,"<S2SV_ModStart> } pid_t child ; if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; return 0 ; } child = copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if (! is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; return 0 ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; return 0 ; } <S2SV_ModEnd> rv = copy_file <S2SV_ModStart>, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; }",0
412,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> : return vp9_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> : return vp9_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> : return vp9_mse8x16 <S2SV_ModEnd> ; default : <S2SV_ModStart> : return vp9_mse16x16 <S2SV_ModEnd> ; } <S2SV_null>,0
413,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
414,"<S2SV_ModStart> ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX ) { return return_pkinit_kx ( context, request, reply, encrypting_key, send_pa ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX ) { return return_pkinit_kx ( context, request, reply, encrypting_key, send_pa ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX ) { return return_pkinit_kx ( context, request, reply, encrypting_key, send_pa ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX ) { return return_pkinit_kx ( context, request, reply, encrypting_key, send_pa ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX ) { return return_pkinit_kx ( context, request, reply, encrypting_key, send_pa ) ; } if ( padata ->",0
415,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
416,"<S2SV_ModStart> flags ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } <S2SV_ModStart> v4l2_buf ) ; if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", input -> buf_cur_space_left, frame_len ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame",0
417,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void * zcalloc,0
418,<S2SV_ModStart> = 0 ; sf_count_t <S2SV_ModEnd> count ; if,0
419,<S2SV_ModStart> serviceId == EXTRACT_32BITS ( <S2SV_ModEnd> & rxh ->,0
420,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > IEEE80211_MAX_SSID_LEN ) { mwifiex_dbg ( adapter, INFO, ""info: <S2SV_blank> ADHOC_S_CMD: <S2SV_blank> SSID <S2SV_blank> = <S2SV_blank> %s\\n"", adhoc_start -> ssid ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( bss_desc -> ssid. ssid, req_ssid -> ssid, req_ssid -> ssid_len ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_",0
421,"<S2SV_ModStart> ( sfe -> namelen > XFS_ATTR_SF_MAXNAMELEN ) { error = context -> put_listent ( context, sfe -> flags, NULL, 0, & sfe -> nameval [ 0 ] ) ; if ( context -> put_listent ( context, sfe -> flags, NULL, 0, & sfe -> valuelen ) ; if ( context -> put_listent ( context, sfe -> flags, NULL, 0, & sfe -> nameval [ sfe -> valuelen ] ) ; if ( context -> put_listent ( context, sfe -> flags, NULL, 0, & sfe -> nameval [ sfe -> namelen ] ) ; if ( context -> put_listent ( context, sfe -> flags, NULL, 0, & sfe -> valuelen ) ; if ( context -> put_listent ( context, sfe -> flags, NULL, 0, & sfe -> nameval [ sfe -> namelen ] ) ; if ( context -> put_listent ( context, sfe -> flags, NULL, 0, & sfe -> nameval [ sfe -> namelen ] ) ;",0
422,"<S2SV_ModStart> ; struct l2cap_conf_rfc <S2SV_ModEnd> rfc = { <S2SV_ModStart> ; switch ( pi -> mode ) { case L2CAP_MODE_BASIC : if ( pi -> imtu!= L2CAP_DEFAULT_MTU ) l2cap_add_conf_opt ( & ptr, L2CAP_CONF_MTU, 2, pi -> imtu ) ; break ; case L2CAP_MODE_ERTM : rfc. mode = L2CAP_MODE_ERTM ; <S2SV_ModEnd> rfc. retrans_timeout <S2SV_ModStart> = L2CAP_DEFAULT_RETRANS_TO ; rfc. monitor_timeout = L2CAP_DEFAULT_MONITOR_TO ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; l2cap_add_conf_opt ( & ptr, L2CAP_CONF_RFC, sizeof ( rfc ), ( unsigned long ) & rfc ) ; break ; } <S2SV_ModEnd> req -> dcid",0
423,"<S2SV_ModStart> { do { if ( r < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
424,<S2SV_ModStart> u1_nal_ref_idc ) ; if ( ps_dec -> u1_nal_ref_idc == IDR_SLICE_NAL ) { ps_dec -> u1_nal_ref_idc = IDR_SLICE_NAL ; } else { ps_dec -> u1_nal_ref_idc = IDR_SLICE_NAL ; },0
425,"<S2SV_ModStart>!= 0 ) { mprAddItem ( app -> formData, sclone ( pair ) ) ; pair = stok ( 0, ""&"", & tok ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
426,"<S2SV_ModStart> = uid ; <S2SV_ModEnd> spin_lock_irq ( & <S2SV_ModStart> } if (! atomic_inc_unless ( & ucounts -> count, 1, INT_MAX ) ) { ucounts = NULL ; spin_unlock_irq ( & ucounts_lock ) ; return NULL ; } <S2SV_ModEnd> spin_lock_irq ( & <S2SV_ModStart> } if (! atomic_inc_unless ( & ucounts -> count, 1, INT_MAX ) ) { ucounts = NULL ; spin_unlock_irq ( & ucounts_lock ) ; ucounts = find_ucounts ( ns, uid, hashent ) ; if (! ucounts ) ucounts = NULL ; spin_unlock_irq ( & ucounts_lock ) ; return ucounts ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
427,"<S2SV_ModStart> * open_stateid, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; if ( fmode & ( FMODE_READ | FMODE_WRITE ) <S2SV_ModEnd> ) goto no_delegation <S2SV_ModStart> ) ; __update_open_stateid <S2SV_ModEnd> ( state, <S2SV_ModStart> NULL ) { __update_open_stateid <S2SV_ModEnd> ( state, <S2SV_ModStart> NULL ) { __update_open_stateid <S2SV_ModEnd> ( state,",0
428,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
429,"<S2SV_ModStart> int64_t * out_rate_sum, int64_t * out_dist_sum <S2SV_ModEnd> ) { int <S2SV_ModStart> int sse ; memset ( x -> pred_sse, 0, sizeof ( x -> pred_sse ) ) ; <S2SV_ModStart> ; if ( cpi <S2SV_ModEnd> -> speed > <S2SV_ModStart> > 4 ) { int64_t rate ; int64_t dist ; int64_t square_error ; int quantizer ; vp9_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], pd -> dequant [ 1 ] >> 3, & rate, & dist ) ; * out_rate_sum = ( int ) rate_sum ; * out_dist_sum = ( int ) dist_sum ; } else { int rate ; int64_t dist ; vp9_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], pd -> dequant [ 1 ] >> 3, & rate, & dist ) ; * out_rate_sum = ( int ) rate_sum ; * out_dist_sum = ( int )",0
430,"<S2SV_ModStart> } if (! pmd_none_or_trans_huge ( * pmd ) ) { if ( pmd_none_or_trans_huge_or_clear_bad ( pmd ) ) mincore_unmapped_range ( vma, addr, next, vec ) ; else if ( pmd_none_or_trans_huge_or_trans_huge_pmd ( vma, pmd, addr, next, vec ) ) mincore_pte_range ( vma, pmd, addr, next, vec ) ; } else { if ( pmd_none_or_trans_huge_or_clear_bad ( pmd ) ) mincore_unmapped_range ( vma, addr, next, vec ) ; else if ( pmd_none_or_trans_huge_pmd ( vma, pmd, addr, next, vec ) ) mincore_pte_range ( vma, pmd, addr, next, vec ) ; }",0
431,<S2SV_ModStart> { if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( <S2SV_ModStart>'<S2SV_blank>') || ( * ptr == '\\t' ) ) return ( PAM_BUF_ERR ) ; if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( ( * ptr =='<S2SV_blank>') || ( * ptr == '\\t' ) ) return ( PAM_BUF_ERR ) ; if ( ( * ptr =='<S2SV_blank>') || ( * ptr == '\\t' ) ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_,0
432,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { return vpx_read_tree <S2SV_ModEnd> ( r, <S2SV_ModStart> -> tree_probs ) <S2SV_ModEnd> ; } <S2SV_null>",0
433,"<S2SV_ModStart> ++ i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ i ) { memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ i ) { memcpy ( dst_ptr1, src_ptr1 [ 0 ], extend_left ) ; memcpy ( dst_ptr2, src_ptr2 [ 0 ], extend_right ) ; src_ptr1 += src_stride ; src_ptr2 += src_stride ; dst_ptr1 += src_stride ; dst_ptr2 += src_stride ; } } src_ptr1 = src - extend_left ; src_ptr2 = src + src_stride * ( height - 1 ) - extend_left ; dst_ptr1 = src + src_stride * ( height - 1 ) - extend_left ; dst_ptr2 = src + src_stride * ( height - 1 ) - extend_left ; for ( i = 0 ; i < extend_top ; ++ i ) { memcpy ( dst_ptr1, src_ptr1, linesize ) ; dst_ptr1 += src_stride ; } for ( i = 0 ; i < extend_right ; ++ i ) { memcpy ( dst",0
434,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
435,"<S2SV_ModStart> depth ++ ; buf = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf == NULL ) return ( NULL ) ; <S2SV_ModStart> ++ ; buf = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ; buf = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf == NULL ) return ( NULL ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ;",0
436,"<S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_RXQCR <S2SV_ModEnd>, RXQCR_SDA ) <S2SV_ModStart> ( interface, KSZ8851_TXQCR <S2SV_ModEnd>, TXQCR_METFE ) <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_RXQCR <S2SV_ModEnd>, RXQCR_SDA ) <S2SV_ModStart> ( interface, KSZ8851_TXQCR <S2SV_ModEnd>, TXQCR_METFE ) <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK",0
437,"<S2SV_ModStart> NULL ) ; rb_ivar_set ( self, rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_",0
438,<S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211,0
439,<S2SV_ModStart> ( ) ; # else mono_attach_maybe_start ( ) ;,0
440,"<S2SV_ModStart>, x_7 ; WORD32 x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 n00, n10, n20, n01, n12, n22, n32, n03, n13, n23, n33 ; WORD32 n00, n10, n10, n11, n12, n13, n23, n33 ; WORD32 n00 = x_0 + x_2 ; n01 = x_1 + x_3 ; n11 = x_0 - x_2 ; n12 = x_1 - x_3 ; n11 = x_0 - x_2 ; n12 = x_1 - x_3 ; n13 = x_4 + x_6 ; n10 = x_5 + x_7 ; n11 = x_6 + x_7 ; n12 = x_4 + x_6 ; n11 = x_5 + x_7 ; n12 = x_4 + x_6 ; n12 = x_5 - x_6 ; n13 = x_5 - x",0
441,<S2SV_ModStart> clips_ptr ) { if ( num_clips < 0 || num_clips > DRM_MODE_FB_DIRTY_MAX_CLIPS ) { ret = - EINVAL ; goto out_err1 ; },1
442,<S2SV_ModStart> ( unlikely (! pmd_trans_huge <S2SV_ModEnd> ( * pmd,0
443,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
444,"<S2SV_ModStart>, frames ; int width, height, target_width, target_height ; if ( argc < 4 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpout = fopen ( fout, ""wb"" ) ; if ( fpout == NULL ) { printf ( ""Can\'t <S2SV_blank> open",0
445,"<S2SV_ModStart> { int i <S2SV_ModEnd>, result ; <S2SV_ModStart>, result ; if ( num_fields < 0 ) { Py_DECREF ( l ) ; return 0 ; } _Py_IDENTIFIER ( _attributes ) ; for ( i = 0 ; i < num_fields ; i ++ ) { s = PyUnicode_FromString ( attrs [ i ] ) ; if (! s ) { Py_DECREF ( l ) ; return 0 ; } PyTuple_SET_ITEM ( l, i, s ) ; } for ( i = 0 ; i < num_fields ; i ++ ) { PyUnicode_FromString ( attrs [ i ] ) ; if (! s ) { Py_DECREF ( l ) ; return 0 ; } PyTuple_SET_ITEM ( l, i, s ) ; } for ( i = 0 ; i < num_fields ; i ++ ) { s = PyUnicode_FromString ( attrs [ i ] ) ; if (! s ) { Py_DECREF ( l ) ; return 0 ; } for ( i = 0 ; i < num_fields ; i ++ ) { PyUnicode_FromString ( attrs [ i ] ) ; if (! s ) { Py_DECREF (",0
446,"<S2SV_ModStart> VPX_CODEC_OK ; struct vpx_codec_alg_priv <S2SV_ModEnd> * priv ; <S2SV_ModStart> priv ) { if (! ctx -> config ) { return VPX_CODEC_MEM_ERROR ; } ctx -> priv = calloc ( 1, sizeof ( struct vpx_codec_alg_priv ) ) ; ctx -> priv -> sz = sizeof ( * ctx -> priv ) ; ctx -> priv -> iface = ctx -> iface ; ctx -> priv -> init_flags = ctx -> init_flags ; } cfg = & ctx -> config ; for ( i = 0 ; extracfg_map [ i ]. usage && extracfg_map [ i ]. usage!= cfg -> g_usage ; i ++ ) ; priv -> vp8_cfg = extracfg_map [ i ]. cfg ; priv -> cx_data_sz = priv -> cfg. g_w * priv -> cfg. g_h * 3 / 2 * 2 ; if ( priv -> cx_data_sz < 32768 ) priv -> cx_data_sz = 32768 ; priv -> cx_data = malloc ( priv -> cx_data_sz ) ; if (! priv -> cx_data ) {",0
447,"<S2SV_ModStart> c ++ ; } pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> total_freq = totfr ; if ( ( ret = s -> decode ( gb, rc, cumfr, cnt_c, totfr ) ) < 0 ) return ret ; pixel -> lookup [ x ] = cnt_c + step ; pixel -> freq [ c ] = cnt_x + step ; pixel -> lookup [ x ] = cnt_c + step ; if ( ( ret = s -> get_freq ( rc, totfr, & value ) ) < 0 ) return ret ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> total_freq = totfr ; pixel -> lookup [ x ] = cnt_c + step ; if ( totfr > BOT ) { totfr = 0 ; for ( i = 0 ; i < 16 ; i ++ ) { unsigned nc = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = nc ; pixel -> freq [ i ] = nc ; pixel -> lookup [ i ] = nc ;",0
448,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> 0 ; } if ( ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count = 1 ; } if ( ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count = 1 ; } if ( ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count = 1 ; } if ( ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count,0
449,<S2SV_ModStart> = v ; if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if ( priv -> task ) put_task_struct ( priv -> task ) ; } } } },0
450,"<S2SV_ModStart> EIO ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if",0
451,"<S2SV_ModStart> data ) { enc28j60WriteReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & MISTAT_BUSY <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> )!= 0",0
452,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> bad_format_imginfo ( char <S2SV_ModStart> { char * ptr ; int n = 0 ; ptr = fmt ; while ( * ptr!= '\\0' ) if ( * ptr ++!= '%' ) if ( * ptr =='s' || * ptr == 'S' ) { n = 1 ; ptr ++ ; } else if ( * ptr =='<S2SV_blank>') ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ;,0
453,"<S2SV_ModStart> ) ; UtRegisterTest ( ""DefragIPv4NoDataTest"", DefragIPv4NoDataTest ) ; UtRegisterTest ( ""DefragIPv4TooLargeTest"", DefragIPv4TooLargeTest ) ; UtRegisterTest ( ""IPV6DefragInOrderSimpleTest"", IPV6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""IPV6DefragReverseSimpleTest"", IPV6DefragReverseSimpleTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakBsdTest"", IPV6DefragSturgesNovakBsdTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakLinuxTest"", IPV6DefragSturgesNovakLinuxTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakWindowsTest"", IPV6DefragSturgesNovakWindowsTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakFirstTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakLastTest"", IPV6DefragSturgesNov",0
454,"<S2SV_ModStart> ; if ( object_length > sizeof ( new_object. data ) - add_v1_record ) { new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { return SC_ERROR_OUT_OF_MEMORY ; } if ( object_length + add_v1_record > sizeof ( new_object. data ) - object_length ) { return SC_ERROR_OUT_OF_MEMORY ; } if ( object_length + add_v1_record > sizeof ( new_object. data ) - add_v1_record ) { new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { return SC_ERROR_OUT_OF_MEMORY ; } if ( object_length + add_v1_record ) { new_object. data [ add_v1_record ] = COOLKEY_V1_OBJECT ; new_object. length ++ ; } memcpy ( & new_object. data [ add_v1_record ], object_data, object_length )",0
455,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
456,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
457,<S2SV_ModStart> b_go ) { if (! p_sys -> started ) { if (! p_sys -> b_eos_signalled ) { p_sys -> b_eos_signalled = 1 ; } else { if (! p_sys -> b_eos_signalled ) { if (! p_sys -> b_eos_signalled ) { if (! p_sys -> b_eos_signalled ) { if (! p_sys -> b_eos_signalled ) { if (! p_sys -> b_eos_signalled ) { if (! p_sys -> b_eos_signalled ) { p_sys -> b_eos_signalled = 1 ; } else { if (! p_sys -> b_eos_signalled ) { if (! p_sys -> b_eos_signalled ) { if (! p_sys -> b_eos_signalled ) { if (! p_sys -> b_eos_signalled ) { if (! p_sys -> b_eos_signalled ) { if (! p_sys -> b_eos_,0
458,"<S2SV_ModStart> ; if (! mp_path_exists ( mf -> names [ mf -> nr_of_files - 1 ] ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ mf -> nr_of_files - 1 ]. name ) ; } else { mp_verbose ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ mf -> nr_of_files - 1 ]. name ) ; } if (! mp_path_exists ( mf -> names [ mf -> nr_of_files - 1 ]. name ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ mf -> nr_of_files - 1 ]. name ) ; } else { mp_verbose ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ mf -> nr_of_files - 1 ]. name ) ; } if (! mp_path_exists ( mf -> names [ mf -> nr_of_files - 1 ]. name ) ) { mp_",0
459,"<S2SV_ModStart> 4 ) ; size_t <S2SV_ModEnd> num_properties = GETINT32 <S2SV_ModStart> len ) ; if ( a -> num_names > 0 ) { size_t i ; a -> names = CHECKED_XCALLOC ( VarLenData, a -> num_names ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> names [ i ]. len = GETINT32 ( buf + idx ) ; a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; } } else { size_t i ; a -> names = CHECKED_XCALLOC ( VarLenData, a -> num_names ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ;",0
460,"<S2SV_ModStart> EIO ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if",0
461,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
462,<S2SV_ModStart> sse ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
463,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; <S2SV_ModEnd> YV12_BUFFER_CONFIG * fb <S2SV_ModStart> * fb ; vpx_get_reference_dec <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> idx, & fb ) ; yuvconfig2image ( & data -> img, fb, NULL ) ; return VPX_CODEC_OK ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
464,"<S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> "" ""no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> "" ""no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> "" ""no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> "" ""no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVER",0
465,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == expr ) { expr_ty e ; e = ast_for_expr ( c, ch ) ; if (! e ) return NULL ; return Expr ( e, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c -> c_arena ) ; } else if ( TYPE ( CHILD ( n, 1 ) ) == testlist ) expr1 = ast_for_testlist ( c, ch ) ; if (! expr1 ) return NULL ; expr2 = ast_for_expr ( c, ch ) ; if (! expr2 ) return NULL ; newoperator = ast_for_augassign ( c, expr1, newoperator, expr2, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c -> c_arena ) ; return AugAssign ( expr1, newoperator, expr2, LINENO ( n ), n -> n_col_offset, n -> n_end",0
466,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> vp8_denoiser_filter_c ( YV12_BUFFER_CONFIG <S2SV_ModStart> unsigned char * mc_running_avg_y <S2SV_ModEnd>, int mc_avg_y_stride <S2SV_ModStart> unsigned char * running_avg_y <S2SV_ModEnd>, int avg_y_stride <S2SV_ModStart> int r, c, i ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 16 ; ++ c ) { int diff = mc_running_avg_y [ c ] - sig [ c ] ; int adjustment = 0 ; int absdiff = 0 ; diff = running_avg_y [ c ] - mc_running_avg_y [ c ] ; if ( diff > 0 ) { running_avg_y [ c ] = mc_running_avg_y [ c ] ; sum_diff += diff ; } else { running_avg_y [ c ] =",0
467,"<S2SV_ModStart> ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" <S2SV_ModEnd> ) ; if",0
468,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; # if XTENSA_HAVE_COPROCESSORS,0
469,<S2SV_ModStart> -> srcIpAddr = queueItem -> srcIpAddr ; message -> srcPort = queueItem -> srcPort ; message -> destIpAddr = queueItem -> destIpAddr ; message -> ttl = queueItem -> ancillary. ttl ; # if ( ETH_SUPPORT == ENABLED ) message -> srcMacAddr = queueItem -> ancillary. srcMacAddr ; message -> destMacAddr = queueItem -> ancillary. destMacAddr ; # endif # if ( ETH_PORT_TAGGING_SUPPORT == ENABLED ) message -> switchPort = queueItem -> ancillary. port ; # endif # if ( ETH_TIMESTAMP_SUPPORT == ENABLED ) message -> timestamp = queueItem -> ancillary. timestamp ; # endif,0
470,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> if ( xop <S2SV_ModStart> -> src_dev ; pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ; <S2SV_ModStart> == XCOL_SOURCE_RECV_OP ) { pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ; target_undepend_item ( & remote_dev -> dev_group. cg_item ) ; } else { pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ; target_undepend_item ( & remote_dev -> dev_group. cg_item ) ;",0
471,"<S2SV_ModStart> int error ; struct mb2_cache * ext2_mb_cache = EXT2_SB ( sb ) -> s_mb_cache <S2SV_ModStart> get_bh ( new_bh ) ; mb2_cache_insert ( inode, new_bh, EXT2_SB ( sb ) -> s_mb_cache <S2SV_ModStart> ( new_bh ) ; mb2_cache_insert ( inode, new_bh, EXT2_SB ( sb ) -> s_mb_cache <S2SV_ModStart> cleanup : mb2_mb_cache_delete_block ( EXT2_SB ( sb ) -> s_mb_cache, inode -> i_block_group, EXT2_I ( inode ) -> i_block_group ) ; mb2_cache_insert ( inode, new_bh, EXT2_SB ( sb ) -> s_mb_cache <S2SV_ModStart> ( new_bh ) ; mb2_cache_insert ( inode, new_bh, EXT2_SB ( sb ) -> s_mb_cache <S2SV_ModStart> cleanup : mb2_cache_delete_block ( EXT2_SB ( sb ) -> s_mb_cache, inode -> i_block_group, inode -> i",0
472,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> map ) { vpx_active_map_t * const map = va_arg ( args, vpx_active_map_t * ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> vp9_set_active_map ( ctx <S2SV_ModEnd> -> cpi,",0
473,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> rows, image -> columns ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; return ( DestroyImageList (",0
474,"<S2SV_ModStart>. size, & task_event -> event_id. header ) ; if (! task_event -> event_id. pid ) { task_event -> event_id. pid = perf_event_pid ( event, task ) ; task_event -> event_id. tid = perf_event_tid ( event, task ) ; task_event -> event_id. ptid = perf_event_tid ( event, current ) ; task_event -> event_id. pid = perf_event_pid ( event, task ) ; task_event -> event_id. ppid = perf_event_pid ( event, task ) ; task_event -> event_id. tid = perf_event_tid ( event, task ) ; task_event -> event_id. ptid = perf_event_tid ( event, current ) ; task_event -> event_id. pid = perf_event_pid ( event, task ) ; task_event -> event_id. ppid = perf_event_pid ( event, task ) ; task_event -> event_id. ppid = perf_event_pid ( event, task ) ; task_event -> event_id. tid",0
475,"<S2SV_ModStart> * ) AcquireQuantumMemory ( <S2SV_ModEnd> imsx * imsy <S2SV_ModStart> imsy, 1 ) ; if ( dmbuf == NULL ) { return ( MagickFalse ) ; } for ( n = 0 ; n < 16 ; n ++ ) { sixel_palet [ n ] = sixel_default_color_table [ n ] ; } for ( r = 0 ; r < 6 ; r ++ ) { for ( g = 0 ; g < 6 ; g ++ ) { for ( b = 0 ; b < 6 ; b ++ ) { for ( r = 0 ; r < 6 ; r ++ ) { for ( r = 0 ; r < 6 ; r ++ ) { for ( g = 0 ; g < 6 ; g ++ ) { for ( b = 0 ; b < 6 ; b ++ ) { for ( r = 0 ; r < 6 ; r ++ ) { for ( r = 0 ; r < 6 ; r ++ ) { for ( g = 0 ; g < 6 ; b ++ ) { for ( b = 0 ; b < 6 ; b ++ ) { for ( r = 0 ; r < 6 ; r ++ ) { for ( r = 0 ; r < 6 ; r ++",0
476,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> { vpx_ref_frame_t * frame <S2SV_ModEnd> ; YV12_BUFFER_CONFIG sd <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; frame = ( vpx_ref_frame_t * ) <S2SV_ModStart> ; YV12_BUFFER_CONFIG sd <S2SV_ModEnd> ; return vp9_copy_reference_dec <S2SV_ModStart> vp9_copy_reference_dec ( ctx <S2SV_ModEnd> -> pbi, <S2SV_ModStart> vp9_copy_reference_dec ( ctx <S2SV_ModEnd> -> pbi, <S2SV_ModStart> vp9_copy_reference_dec ( ctx <S2SV_ModEnd> -> pbi, <S2SV_ModStart> VP9_REFFRAME ) frame -> frame_type, & sd ) ; } else { return VPX_CODEC_INVALID_PARAM ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
477,<S2SV_ModStart> u1_is_idr_slice ) { ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; } else { ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; },0
478,"<S2SV_ModStart>, u4_y_offset ; ps_dec -> u2_x_offset = 0 ; ps_dec -> u2_y_offset = 0 ; ps_dec -> <S2SV_ModStart> == B_PIC ) { ps_dec -> u2_x_dst_offset = 0 ; ps_dec -> u2_y_dst_offset = 0 ; ps_dec -> u2_x_offset = 0 ; ps_dec -> u2_y_offset = 0 ; } <S2SV_ModStart> == B_PIC ) { ps_dec -> u2_x_dst_offset = 0 ; ps_dec -> u2_y_dst_offset = 0 ; } else { ps_dec -> u2_x_dst_offset = 0 ; ps_dec -> u2_y_dst_offset = 0 ; } <S2SV_ModStart> == B_PIC ) { ps_dec -> u2_x_dst_offset = 0 ; ps_dec -> u2_y_dst_offset = 0 ; } else { ps_dec -> u2_x_dst_offset = 0 ; ps_dec -> u2_y_dst_offset = 0 ; }",0
479,"<S2SV_ModStart> VP9_LAST_FLAG ) { <S2SV_ModEnd> const YV12_BUFFER_CONFIG * <S2SV_ModStart> const cfg = & cm -> frame_bufs [ <S2SV_ModEnd> cm -> ref_frame_map <S2SV_ModStart> ] ]. buf ; if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; } else { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> reference <S2SV_blank> frame"" ) ; } if ( ref_frame_flag == VP9_LAST_FLAG ) { const YV12_BUFFER_CONFIG * const cfg = & cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> reference <S2SV_blank> frame"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; }",0
480,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
481,"<S2SV_ModStart> -> mbmi ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ plane_bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ plane_bsize ] ; const int max_blocks_wide = num_4x4_w ; int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) { int r, c ; int max_blocks_wide = num_4x4_w ; int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_wide += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_y ) ) ; if (",0
482,<S2SV_ModStart> ++ ) { # if CONFIG_VP9_HIGHBITDEPTH if (! ( CONFIG_VP9_HIGHBITDEPTH & CONFIG_FAST_UNALIGNED ) ) { dst [ 0 ] = src [ 0 ] ; dst [ 1 ] = src [ 1 ] ; dst [ 2 ] = src [ 2 ] ; dst [ 3 ] = src [ 3 ] ; dst [ 4 ] = src [ 4 ] ; dst [ 5 ] = src [ 5 ] ; dst [ 6 ] = src [ 6 ] ; dst [ 7 ] = src [ 7 ] ; } # else ( ( uint32_t * ) dst ) [ 0 ] = ( ( uint32_t * ) src ) [ 0 ] ; ( ( uint32_t * ) dst ) [ 1 ] = ( ( uint32_t * ) src ) [ 1 ] ; ( ( uint32_t * ) dst ) [ 2 ] = ( ( uint32_t * ) src ) [ 2 ] ; ( ( uint32_t * ) dst ) [ 3 ] = ( ( uint32_t * ) src ) [ 3 ] ; ( ( uint32_t * ) dst ) [ 2 ] = ( ( uint32_t *,0
483,"<S2SV_ModStart> nrow ) { if ( row + rowstoread > rowsperstrip ) { rowstoread = rowsperstrip - ( row + img -> row_offset ) % rowsperstrip ; nrow = ( row + rowstoread > h? h - row : rowstoread ) ; nrow = ( row + rowstoread > h? h - row : rowstoread ) ; } else { nrow = ( row + rowstoread > h? h - row : rowstoread ) ; nrow = ( row + rowstoread > w? w - row : rowsperstrip - ( row + img -> row_offset ) % rowsperstrip ) ; nrow = ( row + rowstoread > h? h - row : rowstoread ) ; nrow = ( row + rowstoread > h? h - row : rowstoread ) ; if ( buf == NULL ) { if ( _TIFFReadEncodedStripAndAllocBuffer ( tif, buf, stripsize, ""gtStripSeparate"" ) ; } else { if ( _TIFFReadEncodedStripAndAllocBuffer ( tif, buf, stripsize, ""gtStripSeparate"" ) ;",0
484,"<S2SV_ModStart> } assert ( NCH ( n ) <= 3 ) ; if ( TYPE ( CHILD ( n, 1 ) )!= TYPE_COMMENT ) { Py_FatalError ( ""Non-statement <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 1 ) ) ; Py_FatalError ( ""Non-statement <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", NCH ( n ) ) ; Py_FatalError ( ""Non-statement <S2SV_blank> found: <S2SV_blank> %d"", TYPE ( CHILD ( n, 2 ) ) ; Py_FatalError ( ""Non-statement <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", NCH ( n ) ) ; Py_FatalError ( ""Non-statement <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 1 ) ) ; Py_FatalError ( ""Non-statement <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", NCH ( n ) ) ; Py_FatalError ( ""Non-statement <S2SV_blank> found: <S2SV_blank> %d"", TYPE ( CHILD ( n, 2 ) ) ; Py_FatalError ( ""Non-statement <S2SV_blank> found: <S2SV_blank> %d"", NCH ( n ) ) ;",0
485,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header,0
486,<S2SV_ModStart> ( num & ( SWF_BITS_PER_LONG <S2SV_ModEnd> - 1 ) <S2SV_ModStart> ( num & ( SWF_BITS_PER_LONG <S2SV_ModEnd> - 1 ),0
487,"<S2SV_ModStart> [ plane ] ; const int x = vpx_img_plane_width ( img, plane ) ; const int y = vpx_img_plane_height ( img, plane ) ; const int y2 = vpx_img_plane_height ( img, plane ) ; const int w = vpx_img_plane_width ( img, plane ) ; const int h = vpx_img_plane_height ( img, plane ) ; int y ; for ( y = 0 ; y < y2 ; ++ y ) { if ( fread ( buf, 1, x, file )!= x ) return 0 ; buf += stride ; } } return 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
488,"<S2SV_ModStart> ; uint16_t attr_len <S2SV_ModEnd> ; uint16_t orig_attr_len <S2SV_ModStart> ; if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } attr_len = avp -> length - sizeof ( struct l2tp_avp_t ) ; MD5_Init ( & md5_ctx ) ; MD5_Update ( & md5_ctx, & avp -> type, sizeof ( avp ->",0
489,"<S2SV_ModStart> ; if ( ctx -> cipher_data == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_NO_CIPHER_ERROR ) ; return 0 ; } <S2SV_ModStart> ; if ( ctx -> cipher_data == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_NO_CIPHER_ERROR ) ; return 0 ; } <S2SV_ModStart> ; if ( ctx -> cipher_data == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_NO_CIPHER_ERROR ) ; return 0 ; } if ( ctx -> cipher_data == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_NO_CIPHER_ERROR ) ; return 0 ; }",0
490,<S2SV_ModStart> alg ) { if ( ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) && ( mask & CRYPTO_ALG_NEED_FALLBACK ) ) { if ( ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) && ( mask & CRYPTO_ALG_NEED_FALLBACK ) ) { if ( ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) && ( mask & CRYPTO_ALG_NEED_FALLBACK ) ) { if ( ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) && ( mask & CRYPTO_ALG_NEED_FALLBACK ) ) { if ( ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) && ( mask &,0
491,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0 ) ;",0
492,<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ;,1
493,"<S2SV_ModStart> ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> sk <S2SV_blank> %p"" <S2SV_ModEnd>, sock,",0
494,"<S2SV_ModStart> ) { memcpy <S2SV_ModEnd> ( pass_salt, <S2SV_ModStart> cpkt. data, cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PASSSALT ) { memcpy ( pass_salt, cpkt. data, cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PLAINDATA ) { fwrite ( ( const void * ) cpkt. data, 1, cpkt. length, stdout ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 0 ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; }",0
495,"<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_close ( adata -> conn ) ; return - 1 ; } if ( ans == MUTT_NO ) { enum ImapExecResult rc = imap_exec ( adata, ""STARTTLS"", IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc == IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ) ; goto err_close_conn ; } } else { enum ImapExecResult rc = imap_exec ( adata, ""STARTTLS"", IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc!= IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" )",0
496,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
497,"<S2SV_ModStart> ; if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; }",0
498,"<S2SV_ModStart>, & rlen, 0",1
499,"<S2SV_ModStart> * slavename ; memset ( md5data, 0, sizeof ( md5data ) - 1 ) ; <S2SV_ModStart> 0 ] = 0 <S2SV_ModEnd> ; strncpy ( <S2SV_ModStart> 82 ) ; strncpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> 16 ) ; strncpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> 1 + strlen ( user -> password ), curconn -> pass_salt, 16 ) ; md5_init ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> seskey, curconn -> outcounter ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_CPTYPE_END_AUTH, NULL, 0 ) ; if ( curconn -> state == STATE_ACTIVE ) { abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank>",0
500,"<S2SV_ModStart> if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> == 0 ) { if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> == 0 ) { if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> == 0 ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; }",0
501,"<S2SV_ModStart> ] ; for ( ; i < sizeof ( buf ) && str [ i ] ; i ++, j ++ ) { if ( str [ i ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } buf [ i ] = 0 ; arm_opcode_parse ( & aop, buf ) ; for ( i = j = 0 ; i < sizeof ( buf ) - 1 ; i ++, j ++ ) { if ( str [ i ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ i ] ) ; } buf [ i ] = 0 ; arm_opcode_parse ( & aop, buf ) ; for ( i = 0 ; i < sizeof ( buf ) - 1 ; i ++ ) { if ( str [ i ] == '#' ) { i -- ; continue ; } if ( str [ i ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } buf [ i ] = 0 ; arm_opcode_parse ( & aop, buf )",0
502,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
503,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
504,"<S2SV_ModStart> ; OPENSSL_cleanse ( key, sizeof key ) ; OPENSSL_cleanse ( iv, sizeof iv ) ;",0
505,"<S2SV_ModStart> -> pw ; <S2SV_ModEnd> struct sshkey * <S2SV_ModStart> NULL ; u_char <S2SV_ModEnd> * pkalg, <S2SV_ModStart> NULL ; u_char <S2SV_ModEnd> * pkblob, <S2SV_ModStart> ; u_char * <S2SV_ModEnd> sig, have_sig <S2SV_ModStart> ; if ( ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & pkblob, & blen ) )!= 0 || ( r = sshpkt_get_string ( ssh, & sig, & blen ) )!= 0 ) fatal ( ""%s: <S2SV_blank> parse <S2SV_blank> request <S2SV_blank> failed: <S2SV_blank> %s"", __func__, ssh_err ( r ) ) ; if ( ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & sig, & blen ) )!= 0 || ( r = sshpkt_get_string ( ssh, & sig, & blen ) )!= 0 ) fatal ( ""%s: <S2SV_blank> parse <S2SV_blank> request <S2SV_blank> failed: <S2SV_blank> %s"", __func__, ssh_err ( r ) ) ; if (",0
506,"<S2SV_ModStart> ; uint32_t bcount ; if (! DoReadFile ( infile, & filehdr, sizeof ( Wave64FileHeader ), & bcount ) || bcount!= sizeof ( Wave64FileHeader ) - 4 || memcmp ( filehdr. ckID, riff_guid, sizeof ( riff_guid ) ) || memcmp ( filehdr. formType, wave_guid, sizeof ( wave_guid ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } else if (! ( config -> qmode & QMODE_NO_STORE_WRAPPER ) &&! WavpackAddWrapper ( wpc, & filehdr, sizeof ( filehdr ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } else { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
507,"<S2SV_ModStart> size_t s ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } s = exif_get_long ( buf + o, EXIF_BYTE_ORDER_INTEL ) ; if ( CHECKOVERFLOW ( o, buf_size, 2 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } s = exif_get_long ( buf + o, EXIF_BYTE_ORDER_INTEL ) ; if ( CHECKOVERFLOW ( s, buf_size, 2 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""Ex",0
508,<S2SV_ModStart> bd_addr ) { btif_dm_lock ( ) ; <S2SV_ModStart> return BT_STATUS_NOT_READY ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
509,"<S2SV_ModStart> int i ; size_t <S2SV_ModEnd> avail ; int <S2SV_ModStart> 4 ) ; if ( buf -> len < buf -> cursor ) { elog ( ERROR, ""invalid <S2SV_blank> snapshot <S2SV_blank> data"" ) ; return ( Datum ) NULL ; } <S2SV_ModStart> ; if ( buf -> len < buf -> cursor ) { elog ( ERROR, ""invalid <S2SV_blank> snapshot <S2SV_blank> data"" ) ; return ( Datum ) NULL ; } <S2SV_ModStart> ; if ( buf -> len < buf -> cursor ) { elog ( ERROR, ""invalid <S2SV_blank> snapshot <S2SV_blank> data"" ) ; return ( Datum ) NULL ; } <S2SV_ModEnd> xmin = pq_getmsgint64 <S2SV_ModStart> buf ) ; if ( xmin == 0 || xmin > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; snap -> xmin = xmin ; snap -> xmax = xmax ; SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( snap, TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last ) { elog ( ERROR, ""invalid <S2SV_blank> snapshot <S2SV_blank> data",0
510,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> psf -> header,0
511,"<S2SV_ModStart>!= RDMA_NODE_IB_CA ) { ret = - EADDRNOTAVAIL ; rdsdebug ( ""addr <S2SV_blank> %pI4 <S2SV_blank> ret <S2SV_blank> %d <S2SV_blank> node <S2SV_blank> type <S2SV_blank> %d\\n"", & addr, ret, cm_id -> device? cm_id -> device -> node_type : - 1 ) ; rdma_destroy_id ( cm_id ) ; return ret ; } <S2SV_ModEnd> ret = -",0
512,"<S2SV_ModStart> - 1 ; struct oe_epoll * epoll ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; <S2SV_ModStart> = 0 ; if ( ( ret = oe_syscall_write_ocall ( & ret, epoll -> host_fd, buf, count ) )!= OE_OK ) OE_RAISE_ERRNO ( OE_EINVAL ) ;",0
513,"<S2SV_ModStart> { errstr = parse_global_option ( CMD_INITIALIZE, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section",0
514,"<S2SV_ModStart> ; if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } if ( ( i -> posY + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return -",0
515,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_NAME_MAX : * ( size_t * ) val = ms -> name_max ; return 0 ; case MAGIC_PARAM_ELF_PHNUM_MAX : * ( size_t * ) val = ms -> elf_phnum_max ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ; case MAGIC_PARAM_ELF_PHNUM_MAX : * ( size_t * ) val = ms -> elf_phnum_max ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ; case MAGIC_PARAM_ELF_PHNUM_MAX : * ( size_t * ) val = ms -> elf_phnum_max ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ;,0
516,<S2SV_ModStart> * journal = EXT4_JOURNAL ( page -> mapping -> host ) ; if (! PageLocked ( page ) ) { ClearPageChecked ( page ) ; return ; } <S2SV_ModEnd> if ( offset,0
517,"<S2SV_ModStart> { GF_SAFEALLOC ( writer, TrackWriter ) ; if (! writer ) goto exit ; writer -> sampleNumber = 1 ; writer -> mdia = trak -> Media ; writer -> stbl = trak -> Information -> sampleTable ; writer -> timeScale = trak -> Media -> mediaHeader -> timeScale ; writer -> all_dref_mode = Media_SelfContainedType ( writer -> mdia ) ; if ( trak -> sample_encryption ) writer -> prevent_dispatch = GF_TRUE ; if ( trak -> sample_encryption ) writer -> prevent_dispatch = GF_TRUE ; if ( trak -> sample_encryption ) writer -> prevent_dispatch = GF_TRUE ; writer -> isDone = 0 ; writer -> chunkDur = 0 ; writer -> chunkSize = 0 ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer -> stsc ) return GF_OUT_OF_MEM ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_",0
518,"<S2SV_ModStart> ; int plen <S2SV_ModEnd> ; md5_state_t state <S2SV_ModStart> ; # endif md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; md5sum [ 0 ] = 0 ; init_packet ( & data, MT_PTYPE_DATA, srcmac, dstmac, sessionkey, outcounter ) ; plen = add_control_packet ( & data, MT_CPTYPE_PASSWORD, md5data, 17 ) ; plen += add_control_packet ( & data, MT_CPTYPE_USERNAME, username, strlen ( username ) ) ; plen += add_control_packet ( & data, MT_CPTYPE_TERM_TYPE, terminal, strlen ( terminal ) ) ; if ( is_a_tty && get_terminal_size ( & width, & height )!= - 1 ) { width = htole16 ( width ) ; height = htole16 ( height ) ; } plen += add_control_packet",0
519,<S2SV_ModStart> ( _mibindexes ) { int i ; for ( i = 0 ; i < _mibindex_max ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; free ( _mibindexes ) ; _mibindexes = NULL ; },0
520,"<S2SV_ModStart> ( n ) \\\n{ <S2SV_ModEnd> sum = ( <S2SV_ModStart> & 0xffffffff ; \\\n} <S2SV_ModEnd> typedef struct PCDTable <S2SV_ModStart> ) AcquireQuantumMemory ( 0x800, sizeof ( * buffer ) ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; buffer = ( unsigned char * ) AcquireQuantumMemory ( 0x800, sizeof ( * buffer ) ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ;",0
521,"<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i + 1 ) ) == COMMA ) { arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; } i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case DOUBLESTAR : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case",0
522,"<S2SV_ModStart> g_hash_table_destroy ( headers ) ; g_assert_not_reached ( ) ; g_hash_table_remove_all ( headers ) ; g_hash_table_insert ( headers, g_strdup ( ""Cookie"" ), g_strdup ( ""CockpitAuth=v=3;k=blah"" ) ) ; if ( cockpit_auth_check_cookie ( test -> auth, ""/cockpit"", headers ) ) g_assert_not_reached ( ) ; g_hash_table_insert ( headers, g_strdup ( ""Cookie"" ), g_strdup ( ""CockpitAuth=v=4;k=blah"" ) ) ; if ( cockpit_auth_check_cookie ( test -> auth, ""/cockpit"", headers ) ) g_assert_not_reached ( ) ; g_hash_table_destroy ( headers ) ; g_assert_not_reached ( ) ; g_hash_table_remove_all ( headers ) ; g_hash_table_insert ( headers, g_strdup ( ""Cookie"" )",0
523,<S2SV_ModStart> -> y_buffer ; # if CONFIG_VP9_HIGHBITDEPTH if ( ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) ) { # if CONFIG_VP9_HIGHBITDEPTH if ( ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) ) { # if CONFIG_VP9_HIGHBITDEPTH if ( ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && (,0
524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ; for ( int i = 0 ; i < BLOCK_4X4 ; ++ i ) { const int num_4x4_w = num_4x4_blocks_wide_lookup [ i ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ i ] ; const int num_4x4_blk = MAX ( 16, num_4x4_blk ) ; for ( x -> sb_index = 0 ; x -> sb_index < 4 ; ++ x -> sb_index ) for ( x -> mb_index = 0 ; x -> mb_index < 4 ; ++ x -> mb_index ) for ( x -> b_index = 0 ; x -> b_index < 16 ; ++ x -> b_index ) for ( x -> sb_index = 0 ; x -> mb_index < 16 ; ++ x -> b_index ) for ( x ->",0
525,"<S2SV_ModStart> obj_tlen ; u_int <S2SV_ModEnd> hexdump ; u_int <S2SV_ModStart> hexdump ; } ND_TCHECK ( * lmp_obj_header ) ; ND_TCHECK ( * lmp_obj_header ) ; if ( lmp_obj_ctype!= LMP_OBJECT ) { ND_PRINT ( ( ndo, ""LMP <S2SV_blank> object <S2SV_blank> type <S2SV_blank> not <S2SV_blank> supported"" ) ) ; return ; } if ( lmp_obj_ctype!= LMP_OBJECT ) { ND_PRINT ( ( ndo, ""LMP <S2SV_blank> object <S2SV_blank> type <S2SV_blank> not <S2SV_blank> supported"" ) ) ; return ; } if ( lmp_obj_ctype!= LMP_OBJECT ) { ND_PRINT ( ( ndo, ""LMP <S2SV_blank> object <S2SV_blank> type <S2SV_blank> not <S2SV_blank> supported"" ) ) ; return ; } if ( lmp_obj_ctype!= LMP_OBJECT ) { ND_PRINT ( ( ndo, ""LMP <S2SV_blank> object <S2SV_blank> type <S2SV_blank> not <S2SV_blank> supported"" ) ) ; return ; } if ( lmp_obj_ctype!= LMP_OBJECT ) { ND_PRINT ( ( ndo, ""LMP <S2SV_blank> object <S2SV_blank> type <S2SV_blank> not <S2SV_blank> supported""",0
526,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
527,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
528,"<S2SV_ModStart> ; if ( pskb_expand_head ( skb_out, 0, size - skb -> len, GFP_ATOMIC ) < 0 ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } skb_pull_rcsum ( skb_out, hdr_size ) ; memmove ( skb_out -> data - ETH_HLEN, skb_mac_header ( skb_out ), ETH_HLEN ) ; skb_set_mac_header ( skb_out, - ETH_HLEN ) ; skb_set_transport_header ( skb_out, - ETH_HLEN ) ; skb_pull_rcsum ( skb_out, hdr_size ) ; memmove ( skb_out -> data - ETH_HLEN, skb_mac_header ( skb_out ), ETH_HLEN ) ; skb_set_mac_header ( skb_out, - ETH_HLEN ) ; skb_set_mac_header ( skb_out, - ETH_HLEN ) ;",0
529,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
530,"<S2SV_ModStart> ; netsnmp_mibindex_load ( ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ; entry = strtok_r ( NULL, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibdir ( entry ) ; entry = strtok_r ( NULL, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ; } SNMP_FREE ( env_var ) ; env_var = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibdir ( entry ) ; entry = strtok_r ( NULL, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var )",0
531,"<S2SV_ModStart> ++ ) { if (! file_access ( uinput_dev_path [ x ], O_RDWR ) ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> ERROR: <S2SV_blank> uinput <S2SV_blank> device <S2SV_blank> open <S2SV_blank> failed"", __FUNCTION__ ) ; return - 1 ; } <S2SV_ModStart>, EV_KEY ) ; if (! file_access ( uinput_dev_path [ x ], O_RDWR ) ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> ERROR: <S2SV_blank> uinput <S2SV_blank> device <S2SV_blank> open <S2SV_blank> failed"", __FUNCTION__ ) ; return - 1 ; } <S2SV_ModStart> ( fd, <S2SV_ModEnd> UI_SET_EVBIT, EV_KEY <S2SV_ModStart> EV_REL ) ; if (! file_access ( uinput_dev_path [ x ], O_RDWR ) ; if (! file_access ( uinput_dev_path [ x ], O_RDWR ) ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> ERROR: <S2SV_blank> uinput <S2SV_blank> device <S2SV_blank> open <S2SV_blank> failed"", __FUNCTION__ ) ; return - 1 ; } <S2SV_ModStart> ( fd, <S2SV_ModEnd> UI_DEV_CREATE, NULL",0
532,<S2SV_ModStart> ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx <S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,0
533,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
534,"<S2SV_ModStart> * pctx ) { iakerb_ctx_id_t ctx ; krb5_error_code code ; * pctx = NULL ; ctx = k5alloc ( sizeof ( * ctx ), & code ) ; if ( ctx == NULL ) goto cleanup ; ctx -> defcred = GSS_C_NO_CREDENTIAL ; ctx -> state = IAKERB_AS_REQ ; ctx -> count = 0 ; code = krb5_gss_init_context ( & ctx -> k5c ) ; if ( code!= 0 <S2SV_ModEnd> ) goto cleanup",0
535,"<S2SV_ModStart> = DirectClass ; if ( SetImageExtent ( image, image -> columns, image -> rows ) == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> = DirectClass ; if ( SetImageExtent ( image, image -> columns, image -> rows ) == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; bitmapDC = CreateCompatibleDC ( hDC ) ; if ( bitmapDC == ( HDC ) NULL ) { DeleteDC ( hDC ) ; ThrowReaderException ( CoderError, ""UnableToCreateDC"" ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
536,"<S2SV_ModStart>!= START_CODE_PREFIX ) { u4_start_code = impeg2d_bit_stream_nxt ( ps_stream, START_CODE_LEN ) ; while ( u4_start_code == USER_DATA_START_CODE ) { u4_start_code = impeg2d_bit_stream_nxt ( ps_stream, START_CODE_LEN ) ; while ( u4_start_code == USER_DATA_START_CODE ) { impeg2d_bit_stream_flush ( ps_stream, 8 ) ; } u4_start_code = impeg2d_bit_stream_nxt ( ps_stream, START_CODE_LEN ) ; while ( u4_start_code == USER_DATA_START_CODE ) { u4_start_code = impeg2d_bit_stream_nxt ( ps_stream, START_CODE_LEN ) ; while ( u4_start_code == USER_DATA_START_CODE ) { u4_start_code = impeg2d_bit_stream_nxt ( ps_stream, START_CODE_LEN ) ; while ( u",0
537,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) flood_duration_test = true ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_count"" ) ) flood_duration_test = false ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_count"" ) ) flood_duration_test = false ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_duration_ms"" ) ) flood_duration_test = true ; if ( flood_duration_test ) ret = kstrtoul ( string, 0, & ipc_count ) ; if ( ret < 0 ) goto out ; if ( ipc_count > MAX_IPC_FLOOD_COUNT ) { ret = size ; goto out ; } if ( ipc_count > MAX_IPC_FLOOD_COUNT ) { ret = size ; goto out ; } if ( ipc_count > MAX_IPC_FLOOD_COUNT ) { ret = size ; goto out ; } if ( ipc_count",0
538,"<S2SV_ModStart> = g_new0 ( MonoType *, count ) ; type_argv [ count ] = g_new0 ( MonoType *, count ) ; for ( i = 0 ; i < count ; i ++ ) type_argv [ i ] = g_new0 ( MonoType *, count ) ; type_argv [ i ] = g_new0 ( MonoType *, count ) ; for ( i = 0 ; i < count ; i ++ ) type_argv [ i ] = g_new0 ( MonoType *, count ) ; type_argv [ i ] = g_new0 ( MonoType *, count ) ; for ( i = 0 ; i < count ; i ++ ) type_argv [ i ] = g_new0 ( MonoType *, count ) ; type_argv [ i ] = g_new0 ( MonoType *, count ) ; for ( i = 0 ; i < count ; i ++ ) type_argv [ i ] = g_new0 ( MonoType *, count ) ; for ( i = 0 ; i < count ; i ++ ) type_argv [ i ] = g_new0 ( Mono",0
539,"<S2SV_ModStart> ""nnnnn\\0"" ) ] ; unsigned long <S2SV_ModEnd> tmp ; if <S2SV_ModStart> if ( copy_from_user ( buf, buffer, count ) ) return - EFAULT ; tmp = simple_strtol ( buf, & end, 0 ) ; if ( ( * end!= '\\0' ) &&! isspace ( * end ) ) return - EINVAL ; uml_exitcode = tmp ;",0
540,"<S2SV_ModStart> { char * last_elem <S2SV_ModEnd>, * wp <S2SV_ModStart> ( ( ( strncmp <S2SV_ModEnd> ( & name <S2SV_ModStart> ( & name [ 1 ], ""ORIGIN"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 1 ], ""PLATFORM"", 8 ) == 0 && ( len = 9 )!= 0 ) ) && ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 9 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 ) || ( strncmp ( & name [ 2 ], ""ORIGIN}"", 9 ) == 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 11 ) == 0 ) ) ) { repl = ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 9 )!= 0 ) && ( len",0
541,"<S2SV_ModStart> ) ; } if ( sizeof ( decContainer_t ) > sizeof ( decContainer_t ) ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> Memory <S2SV_blank> allocation <S2SV_blank> failed"" ) ; return ( H264SWDEC_MEMFAIL ) ; } pDecCont = ( decContainer_t * ) H264SwDecMalloc ( sizeof ( decContainer_t ) ) ; if ( pDecCont == NULL ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> Memory <S2SV_blank> allocation <S2SV_blank> failed"" ) ; return ( H264SWDEC_MEMFAIL ) ; } # ifdef H264DEC_TRACE sprintf ( pDecCont -> str, ""H264SwDecInit# <S2SV_blank> decInst <S2SV_blank> %p <S2SV_blank> noOutputReordering <S2SV_blank> %d"", ( void * ) decInst, noOutputReordering ) ; DEC_API_TRC ( pDecCont -> str ) ; # endif rv = h264bsdInit ( & pDecCont -> storage, noOutputReordering ) ; if ( rv!= HANTRO_OK ) { H264SwDecRelease ( pDecCont ) ; return (",0
542,"<S2SV_ModStart> len ) { struct ipv6_txoptions * opt_space <S2SV_ModEnd> ; DECLARE_SOCKADDR ( <S2SV_ModStart> sin6 ) ; opt_space = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( rp -> opt, sock_owned_by_user ( sk ) ) ; opt_space = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if ( opt_space ) { struct ipv6_txoptions * opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( rp -> opt, sock_owned_by_user ( sk ) ) ; opt_space = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if ( opt_space ) { struct ipv6_txoptions * opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user",0
543,"<S2SV_ModStart> drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( unlikely ( opt -> optlen ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INDISCARDS ) ; goto drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> srr ) ) { struct in_device * in_dev = __in_dev_get_rcu ( dev ) ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop ; if ( ip_options_rcv_srr ( skb ) ) goto drop ; if ( ip_options_rcv_srr ( skb ) ) goto drop ; } else { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INDISCARDS ) ; goto drop ; } <S2SV_ModEnd> return 0 ;",0
544,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) AcquireQuantumMemory ( image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } pixels = ( unsigned char * ) AcquireQuantumMemory ( image -> columns, image -> rows ) ; if ( pixels == ( unsigned char * ) NULL ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" ) ; pixels = ( unsigned char * ) AcquireQuantumMemory ( image -> columns, image -> rows ) ; if ( pixels == ( unsigned char * ) NULL ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" ) ; pixels = ( unsigned char * ) AcquireQuantumMemory ( image -> columns, image -> rows ) ; if ( pixels == ( unsigned char * ) NULL ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" ) ; pixels = ( unsigned char * ) AcquireQuantumMemory ( image ->",0
545,"<S2SV_ModStart> goto errout ; if (! info -> stagemasks [ j ] ) { int cascade = 0 ; if ( oggpack_eop ( opb ) ) goto errout ; info -> stagemasks [ j ] = 0 ; } for ( j = 0 ; j < info -> partitions ; j ++ ) { int book = ( unsigned char ) oggpack_read ( opb, 3 ) ; if ( oggpack_read ( opb, 1 ) ) cascade |= ( ( unsigned char ) oggpack_read ( opb, 5 ) << 3 ) ; info -> stagemasks [ j ] = cascade ; } for ( j = 0 ; j < info -> partitions ; j ++ ) { int cascade = ( unsigned char ) oggpack_read ( opb, 3 ) ; if ( oggpack_read ( opb, 1 ) ) cascade |= ( ( unsigned char ) oggpack_read ( opb, 5 ) << 3 ) ; info -> stagemasks [ j ] = cascade ; } for ( j = 0 ; j < info -> partitions ; j ++ ) { int cascade = ( unsigned char ) oggpack_",0
546,"<S2SV_ModStart>! js_regexec ( <S2SV_ModEnd> re -> prog <S2SV_ModStart> 0 ) ) { if ( js_isnumber ( J, m. sub [ 0 ]. sp ) ) js_pushnumber ( J, m. sub [ 0 ]. sp ) ; else js_pushnumber ( J, - 1 ) ; } <S2SV_ModEnd> }",0
547,"<S2SV_ModStart> ) break ; if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; } tp -> copied_seq = seq ; tcp_rcv_space_adjust ( sk ) ; if ( copied > 0 ) tcp_cleanup_rbuf ( sk, copied ) ; return copied ; } tp -> copied_seq = seq ; if ( tp -> urg_data ) { u32 urg_offset = tp -> urg_seq - seq ; if ( urg_offset < len ) len = urg_offset ; if (! tp -> urg_data ) { u32 urg_offset = tp -> urg_seq - seq ; if ( urg_offset < len ) len = urg_offset ; if (! tp -> urg_data ) { u32 urg_offset = tp -> urg_seq - seq ; if ( urg_offset < len ) len = urg_offset ; if ( urg_offset < len ) len = urg_offset ; if (! tp -> urg_data ) { u32 urg_offset = tp -> ur",0
548,"<S2SV_ModStart> ; krb5_key_data * key_data ; if ( key_data_in == NULL ) goto cleanup ; key_data = ( krb5_key_data * ) k5calloc ( n_key_data, sizeof ( * key_data ), & err ) ; if ( key_data == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]. key_data_ver = 2 ; key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_contents [ 1 ] = NULL ; } } for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_kv",0
549,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
550,"<S2SV_ModStart> ] ) ; sqlite3_int64 <S2SV_ModEnd> zInput = sqlite3_malloc <S2SV_ModStart> 1 ) ; if ( pCsr -> zInput == 0 ) { rc = SQLITE_NOMEM ; } else { memcpy ( pCsr -> zInput, zByte, nByte ) ; pCsr -> zInput [ nByte ] = 0 ; rc = pTab -> pMod -> xOpen ( pTab -> pTok, pCsr -> zInput, nByte, & pCsr -> pCsr ) ; if ( rc == SQLITE_NOMEM ) { rc = SQLITE_NOMEM ; } else { memcpy ( pCsr -> zInput, zByte, nByte ) ; pCsr -> zInput [ nByte ] = 0 ; rc = pTab -> pMod -> xOpen ( pTab -> pTok, pCsr -> zInput, nByte, & pCsr -> pCsr ) ; if ( rc == SQLITE_OK ) { pCsr -> pCsr -> pTokenizer = pTab -> pTok ; } } }",0
551,<S2SV_ModStart> filp ) { return fput ( filp ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
552,"<S2SV_ModStart> expr_ty iter, asdl_seq * body, <S2SV_ModStart> = body ; if (! orelse ) { PyErr_SetString ( PyExc_ValueError, ""field <S2SV_blank> orelse <S2SV_blank> is <S2SV_blank> required <S2SV_blank> for <S2SV_blank> asyncFor"" ) ; return NULL ; } <S2SV_ModStart> = orelse ; if (! body ) { PyErr_SetString ( PyExc_ValueError, ""field <S2SV_blank> body <S2SV_blank> is <S2SV_blank> required <S2SV_blank> for <S2SV_blank> asyncFor"" ) ; return NULL ; } p -> v. AsyncFor. body = body ; p -> v. AsyncFor. orelse = orelse ; if (! orelse ) { PyErr_SetString ( PyExc_ValueError, ""field <S2SV_blank> orelse <S2SV_blank> is <S2SV_blank> required <S2SV_blank> for <S2SV_blank> asyncFor"" ) ; return NULL ; }",0
553,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> mi_sort_index ( MI_CHECK <S2SV_ModStart>, name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; if ( param -> testflag & T_SILENT ) printf ( ""-",0
554,"<S2SV_ModStart> } opt = rcu_dereference_protected ( inet_sk ( sk ) -> inet_opt, sock_owned_by_user ( sk ) ) ; if (! opt ) return NULL ;",0
555,"<S2SV_ModStart> NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version"" ; case N",0
556,"<S2SV_ModStart> UINT error ; # ifdef WITH_DEBUG_RDPEI WLog_DBG ( TAG, ""rdpei_recv_pdu: <S2SV_blank> eventId: <S2SV_blank> %"" PRIu16 """", rdpei_eventid_string ( eventId ) ) ; # endif",0
557,"<S2SV_ModStart>. LogError ( 0 <S2SV_ModEnd>, RS_RET_NO_ERRCODE, <S2SV_ModStart>. LogError ( 0 <S2SV_ModEnd>, RS_RET_NO_ERRCODE, <S2SV_ModStart>. LogError ( 0 <S2SV_ModEnd>, RS_RET_NO_ERRCODE, <S2SV_ModStart>. LogError ( 0 <S2SV_ModEnd>, RS_RET_NO_ERRCODE, <S2SV_ModStart>. LogError ( 0 <S2SV_ModEnd>, RS_RET_NO_ERRCODE, <S2SV_ModStart>. LogError ( 0 <S2SV_ModEnd>, RS_RET_NO_ERRCODE, <S2SV_ModStart> ""omzmq3: <S2SV_blank> zmq3_zmq3_zmq3_zmq3_zmq3_zmq3_zmq3_zmq3_zmq3_zmq3_zmq3_zmq3_zmq3_zmq3_zmq3_zmq3_zmq3_zmq3_zmq3_zmq3_zmq3_zmq3_zmq3_zmq3_zmq3_zmq3_zmq3_zmq3_zmq3_zmq3_zmq3_zmq3_zmq3_zmq3_zmq3_zmq3_",0
558,"<S2SV_ModStart> struct flowi6 fl6 ; struct ipv6_txoptions * opt <S2SV_ModStart> ) ; SCTP_INC_STATS ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; <S2SV_ModStart> = 1 ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> = 1 ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> = 1 ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> = 1 ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> = 1 ; <S2SV_ModEnd> return ip6_xmit (",0
559,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
560,<S2SV_ModStart>!= 0 ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; <S2SV_ModStart>!= 0 ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; <S2SV_ModStart>!= 0 ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; <S2SV_ModStart>!= 0 ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; <S2SV_ModStart>!= 0 ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; } <S2SV_ModStart>!= 0 ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; <S2SV_ModStart>!= 0 ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; <S2SV_ModStart>!= 0 ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; <S2SV_ModStart>!= 0 ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; <S2SV_ModStart>!= 0 ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; } <S2SV_ModStart>!= 0 ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; },0
561,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_failure ( rdpNego <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < length ) { return FALSE ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < length ) { return TRUE ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; return TRUE ;,0
562,"<S2SV_ModStart>, result = RLC_OK ; bn_t t ; bn_null ( t ) ; RLC_TRY { bn_new ( t ) ; switch ( operation ) { case RSA_ENC : bn_zero ( m ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = k_len - 3 - m_len ; for ( int i = 0 ; i < * p_len ; i ++ ) { bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, pad ) ; } bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, 0 ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, 0 ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, 0 ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, 0 ) ; bn_lsh ( m, m, 8 ) ; bn_mod_2b",0
563,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
564,<S2SV_ModStart> { rq = <S2SV_ModEnd> hctx -> tags <S2SV_ModStart> hctx -> tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; if (,1
565,"<S2SV_ModStart> == NULL ) { sf_errno = SFE_MALLOC_FAILED ; return NULL ; } ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; if ( copy_filename ( psf, path )!= 0 ) { sf_errno = psf -> error ; return NULL ; } ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; if ( copy_filename ( psf, path )!= 0 ) { sf_errno = psf -> error ; return NULL ; } ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; if ( copy_filename ( psf, path )!= 0 ) { sf_errno = psf -> error ; return NULL ; } ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; return NULL ; } ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank>",0
566,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> ++ j ) count [ i ] += cm -> counts. <S2SV_ModEnd> switchable_interp [ j,0
567,"<S2SV_ModStart> { token ++ ; } op -> operands [ operand ]. type = ARM_UNDEFINED ; op -> operands [ operand ]. reg_type = ARM_UNDEFINED ; op -> operands [ operand ]. shift = ARM_NO_SHIFT ; while ( token [ 0 ] =='<S2SV_blank>'|| token [ 0 ] == '[' || token [ 0 ] == ']' ) { token ++ ; } if (! strncmp ( token, ""lsl"", 3 ) ) { op -> operands [ operand ]. shift = ARM_LSL ; } else if (! strncmp ( token, ""lsr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_LSR ; } if (! strncmp ( token, ""asr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_ASR ; } if (! strncmp ( token, ""lsl"", 3 ) ) { op -> operands [ operand ]. shift = ARM_LSL ; } else if (! strncmp ( token, ""asr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_ASR",0
568,"<S2SV_ModStart> cpi ) { VP9EncoderConfig <S2SV_ModEnd> * const cm <S2SV_ModStart> -> mb ; vpx_setup_src_planes ( x, cpi -> Source, 0, 0 ) ; vpx_setup_pre_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vpx_setup_dst_planes ( xd, 0, get_frame_new_buffer ( cm ), 0, 0 ) ; vpx_setup_block_planes ( & x -> e_mbd, cm -> subsampling_x, cm -> subsampling_y ) ; memset ( xd -> above_context [ 0 ], 0, sizeof ( * xd -> above_context [ 0 ] ) * 2 * aligned_mi_cols * MAX_MB_PLANE ) ; memset ( xd -> above_seg_context [ 0 ], 0, sizeof ( * xd -> above_seg_context [ 0 ] ) * 2 * aligned_mi_cols * MAX_MB_PLANE ) ; memset ( xd -> above_seg_context, 0, sizeof ( * xd -> above_seg_",0
569,"<S2SV_ModStart> htc_request_check_host_hdr ( hp ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" ) ; return ( retval ) ; } retval = http_splitline ( sp -> wrk, sp -> fd, hp, htc, HTTP_HDR_REQ, HTTP_HDR_URL, HTTP_HDR_PROTO ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } retval = http_splitline ( sp -> wrk, sp -> fd, hp, htc, HTTP_HDR_PROTO, HTTP_HDR_URL, HTTP_HDR_PROTO ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } retval = http_splitline ( sp -> wrk, sp -> fd, hp, htc, HTTP_HDR_PROTO, HTTP_HDR_PROTO ) ; if ( retval!= 0 ) { WSPR ( sp, SLT",0
570,"<S2SV_ModStart> EOFOp 0x07 unsigned <S2SV_ModEnd> char magick [ <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size_t ) <S2SV_ModStart> ( image, ( size",0
571,"<S2SV_ModStart> len ) ; if ( len > TAP_MAX_PKT_WRITE_LEN ) { LOG_ERROR ( ""btpan_tap_send <S2SV_blank> packet <S2SV_blank> size:%d <S2SV_blank> is <S2SV_blank> exceeded <S2SV_blank> limit!"", len ) ; return - 1 ; } <S2SV_ModStart> ) ) ; if ( len > TAP_MAX_PKT_WRITE_LEN ) { LOG_ERROR ( ""btpan_tap_send <S2SV_blank> packet <S2SV_blank> size:%d <S2SV_blank> is <S2SV_blank> exceeded <S2SV_blank> limit!"", len ) ; return - 1 ; } memcpy ( packet + sizeof ( tETH_HDR ), buf, len ) ; if ( len > TAP_MAX_PKT_WRITE_LEN ) { LOG_ERROR ( ""btpan_tap_send <S2SV_blank> packet <S2SV_blank> size:%d <S2SV_blank> is <S2SV_blank> exceeded <S2SV_blank> limit!"", len ) ; return - 1 ; } memcpy ( packet + sizeof ( tETH_HDR ), buf, len ) ; if ( len > TAP_MAX_PKT_WRITE_LEN ) { LOG_ERROR ( ""btpan_tap_send <S2SV_blank> packet <S2SV_blank> size:%d <S2SV_blank> is <S2SV_blank> exceeded <S2SV_blank> limit!"", len ) ; return",0
572,<S2SV_ModStart> i4_pic_order_cnt_lsb ; ps_prev_poc -> i4_pic_order_cnt_msb = ps_cur_poc -> i4_pic_order_cnt_msb ; ps_prev_poc -> i4_delta_pic_order_cnt_lsb = ps_cur_poc -> i4_delta_pic_order_cnt_lsb ; ps_prev_poc -> i4_delta_pic_order_cnt_msb = ps_cur_poc -> i4_delta_pic_order_cnt_msb ; ps_prev_poc -> i4_pic_order_cnt_lsb = ps_cur_poc -> i4_pic_order_cnt_lsb ; ps_prev_poc -> i4_delta_pic_order_cnt_msb = ps_cur_poc -> i4_delta_pic_order_cnt_msb ; ps_prev_poc -> i4_delta_pic_order_cnt_msb = ps_cur_poc -> i4_pic_order_cnt_msb,0
573,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_iocinfo * karg <S2SV_ModEnd> ; struct mpt_ioctl_iocinfo <S2SV_ModStart> mpt_ioctl_iocinfo * karg <S2SV_ModEnd> ; int cim_rev <S2SV_ModStart> ; struct pci_dev <S2SV_ModEnd> * pdev ; <S2SV_ModStart> ) ) ; kfree ( karg ) ; return PTR_ERR ( karg ) ; } if ( ( ( iocnum = mpt_verify_adapter ( karg -> hdr. iocnum, & ioc ) ) < 0 ) || ( ioc == NULL ) ) { printk ( MYIOC_s_ERR_FMT ""%s@%d::mpt_ioctl_getiocinfo() <S2SV_blank> - <S2SV_blank> ioc%d <S2SV_blank> not <S2SV_blank> found!\\n"", __FILE__, __LINE__, iocnum ) ; return - ENODEV ; } if ( ( ( iocnum = mpt_verify_adapter ( karg -> hdr. iocnum, & ioc ) ) < 0 ) || ( ioc == NULL ) ) { printk ( MYIOC_s_ERR_FMT ""%s",0
574,"<S2SV_ModStart> left == 0 ) { luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; } else { luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; }",0
575,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
576,<S2SV_ModStart> * rq ) <S2SV_ModEnd> { int cpu <S2SV_ModStart> ( rq ) <S2SV_ModEnd> ; u64 irq_time <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
577,"<S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv",0
578,"<S2SV_ModStart> ; if ( datao > buf_size - 12 ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; datao += exif_get_short ( buf + datao, EXIF_BYTE_ORDER_INTEL ) ; datao += 2 ; exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + o, EXIF_BYTE_ORDER_INTEL ) ; datao += 2 ; exif_mnote_data_fuji_clear ( n ) ; n -> entries = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnoteDataFuji"", sizeof ( Mnote",0
579,"<S2SV_ModStart> ( shtml ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModStart> ( shtml ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModStart> ( shtml ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModStart> ( shtml ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModStart> ( shtml ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModStart> ( shtml ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModStart> ( shtml ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout )",0
580,"<S2SV_ModStart> flags ) { <S2SV_ModEnd> int dir_has_key, <S2SV_ModStart> 0 ; } <S2SV_ModEnd> spin_lock ( & <S2SV_ModStart> d_lock ) ; <S2SV_ModEnd> dir_has_key = ( <S2SV_ModStart> dir_has_key = ( dentry -> d_flags & DCACHE_ENCRYPTED_WITH_KEY <S2SV_ModEnd> ) ; dput",0
581,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> unbind_ports ( void <S2SV_ModStart> 1 ) ; while ( service_options. next ) { unsigned i ; s_log ( LOG_DEBUG, ""Unbinding <S2SV_blank> service <S2SV_blank> [%s]"", opt -> servname ) ; for ( i = 0 ; i < opt -> local_addr. num ; ++ i ) unbind_port ( opt, i ) ; if ( opt -> exec_name && opt -> connect_addr. names ) { opt -> option. retry = 0 ; } if ( opt -> ctx ) SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; s_log ( LOG_DEBUG, ""Service <S2SV_blank> [%s] <S2SV_blank> closed"", opt -> servname ) ; } while ( opt ) { unsigned i ; s_log ( LOG_DEBUG, ""Unbinding <S2SV_blank> service <S2SV_blank> [%s]"", opt -> servname ) ; for ( i = 0 ; i < opt -> local_addr. num ; ++ i ) unbind_port ( opt, i ) ; if ( opt -> exec_name && opt -> connect_addr. names",0
582,<S2SV_ModStart> ; context. curX = i -> posX ; context. curY = i -> posY ; # ifdef NGIFLIB_INDEXED_ONLY # ifdef NGIFLIB_ENABLE_CALLBACKS context. line_p. p8 = i -> parent -> frbuff. p8 + ( u32 ) i -> posY * i -> parent -> width ; context. frbuff_p. p8 = context. line_p. p8 + i -> posX ; # else # ifdef NGIFLIB_ENABLE_CALLBACKS context. line_p. p8 = i -> parent -> frbuff. p8 + ( u32 ) i -> posY * i -> parent -> width ; context. frbuff_p. p8 = i -> parent -> frbuff. p8 + ( u32 ) i -> posX * i -> parent -> width ; context. frbuff_p. p8 = context. line_p. p8 + i -> posX ; # else # ifdef NGIFLIB_ENABLE_CALLBACKS context. line_p. p8 = i -> parent -> frbuff. p8 + ( u32 ) i -> posY * i,0
583,"<S2SV_ModStart> ; RAnalOp next_op ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ;",0
584,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart> info. scale!= ( Quantum * ) NULL ) info. scale = ( Quantum * ) RelinquishMagickMemory ( info. scale ) ; if ( data!= ( unsigned char * ) NULL ) data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; if ( graymap!= ( int * ) NULL ) graymap = ( int * ) RelinquishMagickMemory ( graymap ) ; if ( redmap!= ( int * ) NULL ) redmap = ( int * ) RelinquishMagickMemory ( redmap ) ; if ( stream_info -> offsets!= ( ssize_t * ) NULL ) stream_info -> offsets = ( ssize_t * ) RelinquishMagickMemory ( stream_info -> offsets ) ; if ( stream_info -> offsets!= ( ssize_t * ) NULL ) stream_info -> offsets = ( ssize_t * ) RelinquishMagickMemory ( stream_info -> offsets ) ; if ( stream_info -> offsets!= ( ssize_t * ) NULL ) stream_info -> offsets = ( ssize_",0
585,"<S2SV_ModStart> void ) { if ( strchr ( mnemonic, '\\0' ) ) { mnemonic [ strlen ( mnemonic ) - 1 ] = '\\0' ; } else if ( strchr ( mnemonic, '\\0' ) ) { mnemonic [ strlen ( mnemonic ) - 1 ] = '\\0' ; }",0
586,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT5 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT7 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT8 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT9 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT8 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT9 <S2SV_ModEnd> )",0
587,"<S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
588,"<S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> received <S2SV_blank> data <S2SV_blank> from <S2SV_blank> %s"" <S2SV_ModEnd>, req -> <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> received <S2SV_blank> data <S2SV_blank> from <S2SV_blank> %s"" <S2SV_ModEnd>, req -> <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> received <S2SV_blank> data <S2SV_blank> from <S2SV_blank> %s"" <S2SV_ModEnd>, req -> <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> received <S2SV_blank> data <S2SV_blank> from <S2SV_blank> %s"" <S2SV_ModEnd>, req -> <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> received <S2SV_blank> data <S2SV_blank> from <S2SV_blank> %s"" <S2SV_ModEnd>, req -> <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> received <S2SV_blank> data <S2SV_blank> from <S2SV_blank> %s"" <S2SV_ModEnd>, req -> <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> received <S2SV_blank> data <S2SV_blank> from <S2SV_blank> %s"" <S2SV_ModEnd>, req -> <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> received <S2SV_blank> data <S2SV_blank> from <S2SV_blank> %s"" <S2SV_ModEnd>, req -> <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> received <S2SV_blank> data <S2SV_blank> from <S2SV_blank> %s"" <S2SV_ModEnd>, req -> <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> received <S2SV_blank> data <S2SV_blank> from",0
589,"<S2SV_ModStart> { WORD32 i ; dpb_mgr_t * ps_dpb_mgr = ( dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; dpb_mgr_t * ps_mv_buf_mgr = ( dpb_mgr_t * ) ps_codec -> pv_mv_buf_mgr ; dpb_mgr_t * ps_dpb_mgr = ( dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; WORD32 ai4_num_st_curr_before [ MAX_DPB_SIZE ], ai4_num_st_curr_after [ MAX_DPB_SIZE ], u4_num_lt_curr [ MAX_DPB_SIZE ], u4_num_lt_curr [ MAX_DPB_SIZE ], u4_num_st_curr_before [ MAX_DPB_SIZE ], u4_num_st_curr_after [ MAX_DPB_SIZE ], u4_num_st_curr_after [ MAX_DPB_SIZE ], u4_num_st_curr_before [ MAX_",0
590,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> print_object ( cJSON <S2SV_ModStart> 0 ; while ( child ) { ++ numentries ; child = child -> next ; } if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) ) return 0 ; if (! ( out = ( char * ) cJSON_malloc ( len ) ) ) return 0 ; if (! ( out = ( char * ) cJSON_malloc ( len ) ) ) return 0 ; if (! ( out = ( char * ) cJSON_malloc ( len ) ) ) return 0 ; if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( out = ( char * ) cJSON_malloc ( len,0
591,"<S2SV_ModStart> int tagval, uint32 <S2SV_ModEnd> * length )",1
592,"<S2SV_ModStart> ; other = rcu_dereference_protected ( sk -> sk_user_data, sock_owned_by_user ( sk ), sock_owned_by_user ( sk ) ) ; if (! other ) { sock_poll_wait ( file, & sk -> sk_receive_queue, wait ) ; writable = 0 ; } <S2SV_ModStart> ( other ) { sock_poll_wait ( file, & unix_sk ( other ) -> peer_wait, wait ) ; if ( unix_recvq_full ( other ) ) writable = 0 ; } sock_put ( other ) ; } if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; return mask <S2SV_ModEnd> ; } <S2SV_null>",0
593,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sendClean ( outputbuffer ) ;",1
594,<S2SV_ModStart> void exit_io_context ( struct task_struct * task <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; task_lock ( task <S2SV_ModEnd> ) ; ioc <S2SV_ModStart> ; ioc = task <S2SV_ModEnd> -> io_context ; <S2SV_ModStart> -> io_context ; task <S2SV_ModEnd> -> io_context = <S2SV_ModStart> ; task_unlock ( task <S2SV_ModEnd> ) ; if,1
595,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; # if XTENSA_HAVE_COPROCESSORS,0
596,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return GSS_S_DEFECTIVE_TOKEN ; <S2SV_ModStart> return GSS_S_DEFECTIVE_TOKEN ; } if ( header -> buffer. length < token_wrapper_len + 4 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } ptr = ( unsigned char * ) header -> buffer. value + token_wrapper_len ; signalg = ptr [ 0 ] ; signalg |= ptr [ 1 ] ; sealalg = ptr [ 2 ] ; signalg |= ptr [ 3 ] ; if ( ptr [ 4 ]!= 0xFF || ptr [ 5 ]!= 0xFF ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( ptr [ 4 ]!= 0xFF ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( ptr [ 3 ]!= 0xFF ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ;,0
597,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> frame = va_arg ( <S2SV_ModEnd> args, vp9_ref_frame_t <S2SV_ModStart> NULL ) { YV12_BUFFER_CONFIG <S2SV_ModEnd> * fb ; <S2SV_ModStart> YV12_BUFFER_CONFIG * fb <S2SV_ModEnd> ; vp9_get_reference_enc ( <S2SV_ModStart> VPX_CODEC_OK ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
598,<S2SV_ModStart> plug ) ; kioctx_batch_put ( & batch ) ;,0
599,"<S2SV_ModStart> char * name <S2SV_ModEnd>, int rep_quick <S2SV_ModStart>, 0, <S2SV_ModEnd> MYF ( MY_WME <S2SV_ModStart>, 0, <S2SV_ModEnd> MYF ( MY_WME <S2SV_ModStart> ( MY_WME ), <S2SV_ModEnd> MYF ( MY_WME <S2SV_ModStart> ( MY_WME ), <S2SV_ModEnd> MYF ( MY_WME <S2SV_ModStart> ( MY_WME ), <S2SV_ModEnd> MYF ( MY_WME <S2SV_ModStart> ( MY_WME ), <S2SV_ModEnd> MYF ( MY_WME <S2SV_ModStart> ( MY_WME ), <S2SV_ModEnd> MYF ( MY_WME <S2SV_ModStart> ( MYF ( MY_WME ), <S2SV_ModEnd> MYF ( MY_WME <S2SV_ModStart> ( MYF ( MY_WME ), <S2SV_ModEnd> MYF ( MY_WME <S2SV_ModStart> ( MY_WME ), <S2SV_ModEnd> MYF ( MY_WME <S2SV_ModStart> ( MY_WME ), <S2SV_ModEnd> MYF ( MY_WME <S2SV_ModStart> ( MY_WME ), <S2SV_ModEnd> MYF ( MY_WME <S2SV_ModStart> ( MY_WME ), <S2SV_ModEnd> MYF ( MY_WME <S2SV_ModStart> ( MY_WME ), <S2SV_ModEnd> MYF ( MY_WME <S2SV_ModStart> ( MY_WME ), <S2SV_ModEnd> MYF ( MY_WME <S2SV_ModStart> ( MY_WME",0
600,"<S2SV_ModStart> } ; # if uECC_VLI_NATIVE_LITTLE_ENDIAN uECC_word_t carry ; wordcount_t num_words = curve -> num_words ; bitcount_t num_n_words = BITS_TO_WORDS ( curve -> num_n_bits ) ; bitcount_t num_n_bits = curve -> num_n_bits ; if ( uECC_vli_isZero ( k, num_words ) ) { return 0 ; } carry = regularize_k ( k, tmp, s, curve ) ; EccPoint_mult ( p, curve -> G, k2 [! carry ], 0, num_n_bits + 1, curve ) ; if ( uECC_vli_cmp ( curve -> n, k, num_n_words )!= 1 ) { return 0 ; } uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k,",0
601,"<S2SV_ModStart> trunc : ND_TCHECK2 ( * daoack, ND_RPL_DAOACK_TRUNC_LEN ) ; if ( length < ND_RPL_DAOACK_TRUNC_LEN ) { goto trunc ; } <S2SV_ModStart> ; trunc : ND_TCHECK2 ( * daoack, ND_RPL_DAOACK_TRUNC_LEN ) ; if ( length < ND_RPL_DAOACK_TRUNC_LEN ) { ND_TCHECK2 ( * daoack, ND_RPL_DAOACK_TRUNC_LEN ) ; if ( length < ND_RPL_DAOACK_TRUNC_LEN ) { goto trunc ; } <S2SV_ModStart> : ND_TCHECK2 ( * daoack, ND_RPL_DAOACK_TRUNC_LEN ) ; if ( length < ND_RPL_DAOACK_TRUNC_LEN ) { ND_TCHECK2 ( * daoack, ND_RPL_DAOACK_TRUNC_LEN ) ; if ( length < ND_RPL_DAOACK_TRUNC_LEN ) { goto trunc",0
602,<S2SV_ModStart> buf ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
603,"<S2SV_ModStart> tp ; { int cval = 0, meta = 0 ; <S2SV_ModStart> 2 ] ) { NESTDATA <S2SV_ModEnd> const char hex <S2SV_ModStart> = ""00112233445566778899aAbBcCdDeEfF"" ; <S2SV_ModEnd> const char * <S2SV_ModStart> = ""00112233445566778899aAbBcCdDeEfF"" ; <S2SV_ModEnd> const char * <S2SV_ModStart> = ""00112233445566778899aAbBcCdDeEfF"" ; if ( * cp == 'x' || * cp == 'X' ) for ( ++ cp ; * cp && ( index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; cp ++ ; } else if ( * cp == 'o' || * cp == 'O' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp - '0' ) ; else for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval *",0
604,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
605,"<S2SV_ModStart> * lined ; PIX * pixc, * pixm, * pixg, * pixd ; if ( pixGetColormap ( pixs )!= 32 ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; if ( pixGetDepth ( pixs )!= 32 ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; if ( pixGetDepth ( pixs )!= 32 ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; if ( pixGetDepth ( pixs )!= 32 ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; if ( pixGetDepth ( pixs )!= 32 ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; if ( pixGetDepth",0
606,<S2SV_ModStart> ; v_fn_ptr. <S2SV_ModEnd> vf = vp8_mse16x16,0
607,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
608,"<S2SV_ModStart> int idx ; if ( kcontrol -> count > UINT_MAX - kcontrol -> count ) goto error ; id = kcontrol -> id ; down_write ( & card -> controls_rwsem ) ; if ( snd_ctl_find_id ( card, & id ) ) { up_write ( & card -> controls_rwsem ) ; dev_err ( card -> dev, ""control <S2SV_blank> %i:%i:%i:%s:%i <S2SV_blank> is <S2SV_blank> already <S2SV_blank> present\\n"", id. iface, id. device, id. subdevice, id. name, id. index ) ; err = - EINVAL ; goto error ; } if ( snd_ctl_find_hole ( card, kcontrol -> count ) < 0 ) { up_write ( & card -> controls_rwsem ) ; err = - ENOMEM ; goto error ; } if ( snd_ctl_find_hole ( card, kcontrol -> count ) < 0 ) { up_write ( & card -> controls_rwsem ) ; err = - ENOMEM ; goto error ; } if ( snd_ctl_find_hole ( card, kcontrol -> count ) < 0 ) { up_write ( & card -> controls",0
609,"<S2SV_ModStart> * data ; int <S2SV_ModEnd> size = overhead <S2SV_ModStart> + 1 ; if ( count > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } for ( i = 0 ; i < count ; i ++ ) { size += bson_size ( bsons [ i ] ) ; if ( mongo_bson_valid ( conn, bsons [ i ], 1 )!= MONGO_OK ) return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; }",0
610,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nego_process_negotiation_response ( rdpNego <S2SV_ModStart> state = NEGO_STATE_FAIL <S2SV_ModEnd> ; return ; <S2SV_ModStart> state = NEGO_STATE_FINAL <S2SV_ModEnd> ; } <S2SV_null>,0
611,"<S2SV_ModStart> int i, target_bits_per_mb ; const double correction_factor = get_rate_correction_factor ( cpi ) ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; if ( correction_factor!= get_rate_correction_factor ( cpi ) ) { correction_factor = get_rate_correction_factor ( cpi ) ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs",0
612,"<S2SV_ModStart> ~ TJA1101_CONFIG1_MII_MODE ; tja1101WritePhyReg ( interface, TJA1101_CONFIG1, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_CONFIG1 ) ; value |= TJA1101_CONFIG1_MII_MODE ; value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ ; tja1101WritePhyReg ( interface, TJA1101_CONFIG1, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_COMM_CTRL ) ; value |= TJA1101_COMM_CTRL_AUTO_OP ; tja1101WritePhyReg ( interface, TJA1101_COMM_CTRL, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_COMM_CTRL ) ; value |= TJA1101_COMM_CTRL_AUTO_OP ; tja1101WritePhyReg ( interface, TJA11",0
613,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
614,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD (,0
615,"<S2SV_ModStart> TX_SIZE tx_size, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> plane ] ; DECLARE_ALIGNED ( 64, uint8_t, left_col, 64 ) ; DECLARE_ALIGNED ( 128, uint8_t, above_data, 128 + 16 ) ; uint8_t * const_above_row = above_data + 128 ; const int bs = 4 << tx_size ; if ( plane == 0 ) { frame_width = xd -> cur_buf -> y_width ; frame_height = xd -> cur_buf -> y_height ; } else { frame_width = xd -> cur_buf -> uv_width ; frame_height = xd -> cur_buf -> uv_height ; } if ( left_available ) { if ( xd -> mb_to_left_edge < 0 ) { for ( i = 0 ; i < bs ; ++ i ) left_col [ i ] = ref [ i * ref_stride - 1 ] ; for ( ; i < bs ; ++ i ) left_col [ i ] = ref [ i * ref_stride - 1 ] ; for ( ; i < frame_width ; ++ i )",0
616,"<S2SV_ModStart> } end ++ ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> NULL <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> NULL <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> NULL <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> NULL <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> NULL <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> NULL <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> NULL",0
617,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ; <S2SV_ModStart> cur_aio_dio = NULL ; ei -> i_datasync_tid = 0 ; ei -> i_sync_tid = 0 ; ei -> i_datasync_tid = 0 ; return & ei -> vfs_inode ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
618,"<S2SV_ModStart> BUG_ON (! thresholds ) ; usage = mem_cgroup_usage ( memcg, type == _MEMSWAP ) ; __mem_cgroup_threshold ( memcg, type == _MEMSWAP ) ; size = 0 ; for ( i = 0 ; i < thresholds -> primary -> size ; i ++ ) { if ( thresholds -> primary -> entries [ i ]. eventfd!= eventfd ) size ++ ; } new = thresholds -> spare ; if (! size ) { kfree ( new ) ; new = NULL ; goto swap_buffers ; } new = thresholds -> spare ; if (! size ) { kfree ( new ) ; new = NULL ; goto swap_buffers ; } new -> size = size ; new -> current_threshold = - 1 ; for ( i = 0, j = 0 ; i < thresholds -> primary -> size ; i ++ ) { if ( thresholds -> primary -> entries [ i ]. eventfd == eventfd ) continue ; new -> entries [ j ] = thresholds -> primary -> entries [ i ] ; new -> entries [ j ] = thresholds -> primary -> entries [ i ] ; new -> entries [ j ] = thresholds -> primary -> entries [ i ]",0
619,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> struct ion_handle * <S2SV_ModStart> lock ) ; mutex_lock ( & client -> lock ) ; handle = ion_handle_get_by_id_nolock ( client, id <S2SV_ModEnd> ) ; mutex_unlock <S2SV_ModStart> lock ) ; mutex_unlock ( & client -> lock ) ;",0
620,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart>, 2 ) ; write_profile ( cm -> profile, wb ) ; vpx_wb_write_bit ( wb, cm -> frame_type ) ; vpx_wb_write_bit ( wb, cm -> show_frame ) ; vpx_wb_write_bit ( wb, cm -> error_resilient_mode ) ; if ( cm -> frame_type == KEY_FRAME ) { const COLOR_SPACE cs = UNKNOWN ; write_sync_code ( wb ) ; if ( cm -> profile > PROFILE_1 ) { assert ( cm -> bit_depth > BITS_8 ) ; vpx_wb_write_bit ( wb, cm -> bit_depth - BITS_10 ) ; } vpx_wb_write_literal ( wb, cs, 3 ) ; if ( cs!= SRGB ) { vpx_wb_write_bit ( wb, 0 ) ; if ( cm -> profile >= PROFILE_1 ) { vpx_wb_write_bit ( wb, cm -> subsampling_x",0
621,"<S2SV_ModStart> 'l' }, <S2SV_ModEnd> { ""units-length"", <S2SV_ModStart> }, { ""units-length"", <S2SV_ModStart> }, { ""units-length"", <S2SV_ModStart> }, { ""units-length"", <S2SV_ModStart> }, { ""units-length"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""units-length"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""units-length"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""units-length"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""units-length"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""units-length"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""units-length"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""units-length"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""units-length"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""units-length"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""units-length"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""units-length"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""units-length"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""units-length"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""units-length"" <S2SV_ModEnd> }, { <S2SV_ModStart> }, { ""units-length"" <S2SV_ModEnd> }, { <S2SV_ModStart> }",0
622,"<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p + <S2SV_ModStart>'<S2SV_blank>') ; if ( q == NULL ) return ERROR_INVALID_SYNTAX ; m = q - p ; } else { q = p ; m = 0 ; } n = osStrlen ( queryString ) ; if ( n == 0 ) { n ++ ; if ( ( context -> bufferLen + n - m ) > HTTP_CLIENT_BUFFER_SIZE ) return ERROR_BUFFER_OVERFLOW ; osMemmove ( p + n, q, context -> buffer + context -> bufferLen + 1 - q ) ; } else { n ++ ; if ( ( context -> bufferLen + n - m ) > HTTP_CLIENT_BUFFER_SIZE ) return ERROR_BUFFER_OVERFLOW ; osMemmove ( p + n, q, context -> buffer + context -> bufferLen + 1 - m ) ; } else { n ++ ; if ( ( context -> bufferLen + n - m ) > HTTP_CLIENT_BUFFER_SIZE ) return ERROR_BUFFER_OVERFLOW ; osMemmove ( p + n, q, context -> buffer + context -> bufferLen + n - m ) > HTTP_CLIENT_",0
623,"<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i + 1 ) ) == COMMA ) { arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; } i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case DOUBLESTAR : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case",0
624,<S2SV_ModStart> KEY_FRAME ) { memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd ->,0
625,"<S2SV_ModStart> error ; uint16_t n <S2SV_ModEnd> ; uint32_t status <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_E",0
626,<S2SV_ModStart> == 0x01 ) { if ( i < gemsafe_cert_max ) { r = gemsafe_get_cert_len_nolock ( card ) ; if ( r!= SC_ERROR_INTERNAL ) { r = gemsafe_get_cert_len_nolock ( card ) ; if ( r!= SC_ERROR_INTERNAL ) { r = gemsafe_get_cert_len_nolock ( card ) ; if ( r!= SC_ERROR_INTERNAL ) { r = SC_ERROR_INTERNAL ; return SC_ERROR_INTERNAL ; } } else { r = gemsafe_get_cert_len_nolock ( card ) ; if ( r!= SC_ERROR_INTERNAL ) { r = gemsafe_get_cert_len_nolock ( card ) ; if ( r!= SC_ERROR_INTERNAL ) { r = gemsafe_get_cert_len_nolock ( card ) ; if ( r!= SC_ERROR_INTERNAL ) { r = SC_ERROR_INTERNAL ; return SC_ERROR_INTERNAL ; } } else { r = gemsafe_get_cert_len_nolock ( card ) ; if ( r!= SC,0
627,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
628,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> read_memory ( VALUE <S2SV_ModStart> VALUE content ) { VALUE schema ; xmlSchemaParserCtxtPtr ctx = xmlSchemaNewMemParserCtxt ( ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; # ifdef HAVE_XMLSCHEMASETPARSERSTRUCTUREDERRORS xmlSchemaSetParserStructuredErrors ( ctx, Nokogiri_error_array_pusher ) ; # endif schema = xmlSchemaParse ( ctx ) ; if ( NULL == schema ) { xmlErrorPtr error = xmlGetLastError ( ) ; xmlSetStructuredErrorFunc ( NULL, NULL ) ; xmlSchemaFreeParserCtxt ( ctx ) ; return Qnil ; } errors = rb_ary_new ( ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; # endif schema = xmlSchemaParse ( ctx ) ; xmlSetStructuredErrorFunc ( NULL, NULL ) ; xmlSetStructuredErrorFunc ( NULL, NULL ) ; xmlSetStructuredErrorFunc ( NULL, NULL ) ; xmlSetStructuredErrorFunc ( NULL, NULL ) ; xml",0
629,"<S2SV_ModStart> - 1 ; if ( strlen ( config_arg ) > CONFLINELEN ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> argument"" ) ; print_syntax ( ) ; return 1 ; } <S2SV_ModStart> - 1 ; if ( strlen ( config_arg ) > CONFLINELEN ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> argument"" ) ; print_syntax ( ) ; return 1 ; } <S2SV_ModStart> - 1 ; if ( strlen ( config_arg ) > CONFLINELEN ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> argument"" ) ; print_syntax ( ) ; return 1 ; } <S2SV_ModStart> - 1 ; if ( strlen ( config_arg ) > CONFLINELEN ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> argument"" ) ; print_syntax ( ) ; return 1 ; } <S2SV_ModStart> - 1 ; if ( strlen ( config_arg ) > CONFLINELEN ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> argument"" ) ; print_syntax ( ) ; return 1 ; } <S2SV_ModStart> - 1 ; if ( strlen ( config_arg ) > CONFLINELEN ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank>",0
630,<S2SV_ModStart> 2 ] ; out [ 3 ] = 0 ; <S2SV_ModStart> 2 ] ; out [ 5 ] = 0 ; <S2SV_ModStart> 2 ] ; out [ 3 ] = 0 ; <S2SV_ModStart> 2 ] ; out [ 4 ] = 0 ; out [ 5 ] = 0 ; out [ 7 ] = 0 ; out [ 8 ] = 0 ; out [ 9 ] = 0 ; out [ 10 ] = 0 ; out [ 11 ] = 0 ; out [ 12 ] = 0 ; out [ 13 ] = 0 ; out [ 13 ] = 0 ; out [ 13 ] = 0 ; out [ 14 ] = 0 ; out [ 15 ] = 0 ; out [ 13 ] = 0 ; out [ 14 ] = 0 ; out [ 15 ] = 0 ; out [ 13 ] = 0 ; out [ 14 ] = 0 ; out [ 15 ] = 0 ; out [ 15 ] = 0 ; out [ 13 ] = 0 ; out [ 12 ] = 0 ; out [ 13 ] = 0 ; out [ 14 ] = 0 ; out [ 14 ] = 0 ; out [ 14 ] = 0 ; out [ 15 ] = 0 ; out [ 15 ] = 0 ; out [ 15 ] = 0 ; out [ 15 ] = 0 ; out [ 15 ] = 0 ;,0
631,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
632,"<S2SV_ModStart> ; err = - EBUSY ; if ( po -> fanout ) goto out ; if ( type == PACKET_FANOUT_HASH || ( type_flags & PACKET_FANOUT_CPU ) || ( type_flags & PACKET_FANOUT_RND ) || ( type_flags & PACKET_FANOUT_QM ) || ( type_flags & PACKET_FANOUT_EBPF ) ) { atomic_long_set ( & rollover -> num, 0 ) ; atomic_long_set ( & rollover -> num_failed, 0 ) ; goto out ; } if ( type == PACKET_FANOUT_HASH || ( type_flags & PACKET_FANOUT_CPU ) || ( type_flags & PACKET_FANOUT_RND ) || ( type_flags & PACKET_FANOUT_QM ) ) { atomic_long_set ( & rollover -> num, 0 ) ; atomic_long_set ( & rollover -> num_huge, 0 ) ; atomic_long_set ( & rollover -> num_failed, 0 ) ; goto out ; }",0
633,<S2SV_ModStart> -> nmi ) <S2SV_ModEnd> perf_event_wakeup ( handle <S2SV_ModStart> pending ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
634,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> - EINVAL ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE,0
635,"<S2SV_ModStart> EPROTONOSUPPORT ) { <S2SV_ModEnd> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure""",0
636,"<S2SV_ModStart> ; status = ksz8851ReadReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, KSZ8851_RXFHSR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_RXFDPR <S2SV_ModEnd>, RXFDPR_RXFPAI ) <S2SV_ModStart> ( interface, KSZ8851_RXQCR <S2SV_ModEnd>, RXQCR_RRXEF ) <S2SV_ModStart> ( interface, KSZ8851_RXFDPR <S2SV_ModEnd>, RXFDPR_RXFPAI ) <S2SV_ModStart> ( interface, KSZ8851_RXFDPR <S2SV_ModEnd>, RXFDPR_RXFPAI ) <S2SV_ModStart> ( interface, KSZ8851_RXFDPR <S2SV_ModEnd>, RXFDPR_RXFPAI ) <S2SV_ModStart> ( interface, KSZ8851_RXFDPR <S2SV_ModEnd>, RXFDPR_RXFPAI ) <S2SV_ModStart> ( interface, KSZ8851_RXFDPR <S2SV_ModEnd>, RXFDPR_RXFPAI ) <S2SV_ModStart> ( interface, KSZ8851_RXQCR <S2SV_ModEnd>, RXQCR_SDA ) <S2SV_ModStart> ( interface, KSZ8851_RXQCR <S2SV_ModEnd>, RXQCR",0
637,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static stmt_ty <S2SV_ModEnd> ast_for_funcdef_impl ( struct <S2SV_ModStart> is_async ) { identifier name <S2SV_ModEnd> ; arguments_ty args <S2SV_ModStart> returns, type_comment, LINENO ( n ), n -> n_col_offset, c -> c_arena ) ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; name = NEW_IDENTIFIER ( CHILD ( n, name_i + 1 ) ) ; if (! name ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == RARROW ) { returns = ast_for_expr ( c, CHILD ( n, name_i + 3 ) ) ; if (! returns ) return NULL ; name_i += 2 ; } if ( TYPE ( CHILD ( n, name_i + 3 ) ) == TYPE_COMMENT ) type_comment = NULL ; body = ast_for_suite ( c, CHILD ( n, name_i + 3 ) ) ; if (! body ) return NULL ; if (! type_comment",0
638,"<S2SV_ModStart> int i ; if ( pgd_none_or_clear_bad ( pgd ) ) goto out ; pud = pud_offset ( pgd, 0xA0000 ) ; if ( pud_none_or_clear_bad ( pud ) ) goto out ; pmd = pmd_offset ( pmd, 0xA0000 ) ; split_huge_page_pmd ( mm, pmd ) ; if ( pmd_none_or_clear_bad ( pmd ) ) goto out ; pte = pte_offset_map_lock ( mm, pmd, 0xA0000, & ptl ) ; for ( i = 0 ; i < 32 ; i ++ ) { if ( pte_present ( * pte ) ) set_pte ( pte, pte_wrprotect ( * pte ) ) set_pte ( pte, pte_wrprotect ( * pte ) ; } pte_unmap_unlock ( pte, ptl ) ; out :",0
639,"<S2SV_ModStart> ; if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1",0
640,"<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits <S2SV_ModStart> if ( bits >= 8 ) { packet [ length ++ ] = ( unsigned char ) ( datum & 0xff ) ; ( void ) WriteBlobByte ( image, length ) ; ( void ) WriteBlob ( image, length ) ; ( void ) WriteBlob ( image, length ) ; ( void ) WriteBlob ( image, length ) ; ( void ) WriteBlob ( image, length ) ; ( void ) WriteBlob ( image, length ) ; ( void ) WriteBlob ( image, length ) ; ( void ) WriteBlob ( image, length ) ; ( void ) WriteBlob ( image, length ) ; ( void ) WriteBlob ( image, length ) ; ( void ) WriteBlob ( image, length ) ; ( void ) WriteBlob ( image, length ) ; ( void ) WriteBlob ( image, length ) ; ( void ) WriteBlob ( image, length ) ; ( void ) WriteBlob ( image, length ) ; ( void ) WriteBlob ( image, length ) ; ( void ) WriteBlob ( image, length ) ; ( void ) WriteBlob ( image, length ) ; ( void ) WriteBlob ( image, length ) ; ( void ) WriteBlob ( image",0
641,"<S2SV_ModStart> ) ) { if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; } <S2SV_ModStart> ) ) { if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; } <S2SV_ModStart> ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; } <S2SV_ModStart> ) ) { if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; }",0
642,<S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> 4 ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for (,0
643,"<S2SV_ModStart> len < needed ) { param -> flags |= DM_BUFFER_FULL_FLAG ; goto out ; } nl -> dev = 0 ; for ( i = 0 ; i < NUM_BUCKETS ; i ++ ) { list_for_each_entry ( hc, _name_buckets + i, name_list ) { if ( old_nl ) old_nl -> next = ( uint32_t ) ( ( void * ) nl - ( void * ) old_nl ) + strlen ( hc -> name ) + 1 ) ; nl -> next = ( uint32_t ) ( ( void * ) nl - ( void * ) old_nl ) ; for ( i = 0 ; i < NUM_BUCKETS ; i ++ ) { list_for_each_entry ( hc, _name_buckets + i, name_list ) { if ( old_nl ) old_nl -> next = ( uint32_t ) ( ( void * ) nl - ( void * ) old_nl ) + strlen ( hc -> name ) + 1 ) ; nl -> next = ( uint32_t ) ( ( void * ) nl - ( void * ) old_nl ) ; for ( i = 0 ; i <",0
644,<S2SV_ModStart> ( <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
645,<S2SV_ModStart> bfqq ) bfq_idle_slice_timer_body <S2SV_ModEnd> ( bfqq ),0
646,<S2SV_ModStart> ; length += <S2SV_ModEnd> PRIMARY_DRAWING_ORDER_FIELD_BYTES [ orderInfo <S2SV_ModStart> orderInfo -> orderType ] <S2SV_ModEnd> ; length +=,0
647,<S2SV_ModStart> -> d_inode ) { if (! d_unhashed ( old ) ) { if (! d_unhashed ( new ) ) { if (! d_unhashed ( old ) ) { if (! d_unhashed ( new ) ) { if (! d_unhashed ( old ) ) { if (! d_unhashed ( new ) ) { if (! d_unhashed ( old ) ) { if (! d_unhashed ( old ) ) { if (! d_unhashed ( new ) ) { if (! d_unhashed ( new ) ) { if (! d_unhashed ( old ) ) { if (! d_unhashed ( new ) ) { if (! d_unhashed ( old ) ) { if (! d_unhashed ( new ) ) { if (! d_unhashed ( new ) ) { if (! d_unhashed ( old ) ) { if (! d_unhashed ( new ) ) { if (! d_unhashed ( old ) ) { if (! d_unhashed ( new ) ),0
648,<S2SV_ModStart> < MAX_MB_PLANE ; ++ plane <S2SV_ModEnd> ) vp9_foreach_transformed_block_in_plane (,1
649,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nonrd_pick_sb_modes ( VP9_COMP <S2SV_ModStart> * cpi, TileDataEnc * tile_data <S2SV_ModEnd>, int mi_row <S2SV_ModStart> bsize ) ; if (! frame_is_intra_only ( cm ) ) { vp9_pick_inter_mode ( cpi, x, tile_data <S2SV_ModEnd>, mi_row, <S2SV_ModStart> mi_col, rate, dist, bsize ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; set_mode_info ( & xd -> mi [ 0 ] -> mbmi, bsize, intramode ) ; } <S2SV_ModEnd> duplicate_mode_info_in_sb ( cm",0
650,"<S2SV_ModStart> = NULL ; if (! reader. superblock ) { hrtf = getHrtf ( & reader, err ) ; } else { hrtf = <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
651,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException (",0
652,"<S2SV_ModStart> = 1 ; memPtr = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( MappedRange ), & pMap -> ranges [ 0 ] ) ; if ( memPtr == NULL ) { LOGW ( ""malloc(%d, <S2SV_blank> R, <S2SV_blank> PRIVATE, <S2SV_blank> %d, <S2SV_blank> %d) <S2SV_blank> failed: <S2SV_blank> %s\\n"", sizeof ( MappedRange ), sizeof ( MappedRange ) ) ; return - 1 ; }",0
653,<S2SV_ModStart> ; if ( be32_to_cpu ( dip -> di_nlink ) > be32_to_cpu ( dip -> di_nlink ) ) return fa ; if ( be32_to_cpu ( dip -> di_nlink ) > be32_to_cpu ( dip -> di_nblocks ) ) return fa ; if ( be32_to_cpu ( dip -> di_nlink ) > be32_to_cpu ( dip -> di_nblocks ) ) return fa ; if ( be32_to_cpu ( dip -> di_anextents ) > be64_to_cpu ( dip -> di_anextents ) ) return fa ; if ( be32_to_cpu ( dip -> di_nextents ) > be32_to_cpu ( dip -> di_anextents ) ) return fa ; if ( be32_to_cpu ( dip -> di_nextents ) > be32_to_cpu ( dip -> di_anextents ) ) return fa ; if ( be32_to_cpu ( dip -> di_anextents ) > be64_to_cpu ( dip -> di_nblocks ) ) return fa ; if (,0
654,"<S2SV_ModStart> ; if ( ( flags & VP8_EFLAG_NO_UPD_GF ) || ( ( flags & VP8_EFLAG_NO_UPD_ARF ) && ( flags & VP8_EFLAG_FORCE_ARF ) ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8",0
655,<S2SV_ModStart> ( <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
656,<S2SV_ModStart> event ) ; <S2SV_ModEnd> hlist_add_head_rcu ( & <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
657,"<S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) { <S2SV_ModStart> case BGPTYPE_IPV4_ADDRESS : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGPTYPE_IPV6_ADDRESS : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGPTYPE_IPV6_ADDRESS : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGPTYPE_IPV6_ADDRESS : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGPTYPE_IPV6_ADDRESS : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGPTYPE_IPV6_ADDRESS : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGPTYPE_IPV6_ADDRESS : if ( len",0
658,"<S2SV_ModStart> ""<th <S2SV_blank> width=\'40%%\'>Parameter</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'40%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'40%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width",0
659,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
660,"<S2SV_ModStart> ; strncpy ( constr1, constr2, sizeof ( constr1 ) - 1 ) ; strncpy ( constr2, constr1, sizeof ( constr2 ) - 1 ) ; strncpy ( constr2, constr1, sizeof ( constr2 ) - 1 ) ; strncpy ( constr1, constr1, sizeof ( constr1 ) - 1 ) ; strncpy ( constr2, constr2, sizeof ( constr2 ) - 1 ) ; strncpy ( constr1, constr1 ) ; strncpy ( constr2, constr2, sizeof ( constr2 ) - 1 ) ; strncpy ( constr1, constr1, sizeof ( constr1 ) - 1 ) ; strncpy ( constr2, constr2, sizeof ( constr2 ) - 1 ) ; strncpy ( constr2, constr2, sizeof ( constr2 ) - 1 ) ; strncpy ( constr1, constr1, sizeof ( constr1 ) - 1 ) ; strncpy ( constr2, constr2, sizeof ( constr2 ) - 1 ) ;",0
661,"<S2SV_ModStart> if ( len < sizeof ( struct usb_descriptor_header ) ) { dev_err ( ddev, ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d: <S2SV_blank> "" ""type <S2SV_blank> = <S2SV_blank> 0x%X, <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %d\\n"", cfgidx, config -> desc. bDescriptorType, config -> desc. bLength ) ; return - EINVAL ; } if ( len < sizeof ( struct usb_descriptor_header ) ) { dev_err ( ddev, ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d: <S2SV_blank> "" ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d: <S2SV_blank> "" ""type <S2SV_blank> = <S2SV_blank> 0x%X, <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %d\\n"", cfgidx, config -> desc. bDescriptorType, config -> desc. bLength ) ; return - EINVAL ; } if ( len < sizeof ( struct usb_descriptor_header ) ) { dev_err ( ddev, ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d: <S2SV_blank> "" ""type <S2SV_blank> = <S2SV_blank> 0x%X, <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %d\\n"", cfgidx, config -> desc. b",0
662,"<S2SV_ModStart> ; if ( info -> count < 1 ) return - EINVAL ; access = info -> access == 0? SNDRV_CTL_ELEM_ACCESS_READWRITE : ( info -> access & ( SNDRV_CTL_ELEM_ACCESS_READWRITE | SNDRV_CTL_ELEM_ACCESS_INACTIVE | SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ) ) ; info -> id. numid = 0 ; memset ( & kctl, 0, sizeof ( kctl ) ) ;",0
663,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
664,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; random_ether_addr (,1
665,"<S2SV_ModStart> 16 ) ; error16x16 = vp8_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; rate = x -> mbmode_cost [ xd -> frame_type ] [ mode ] ; this_rd = RDCOST ( x -> rdmult, x -> rddiv, rate, distortion ) ; if ( error16x16 > this_rd ) { error16x16 = this_rd ; best_mode = mode ; best_sse = sse ; } } xd -> mode_info_context -> mbmi. mode = best_mode ; error4x4 = pick_intra4x4mby_modes ( x, & rate, & best_sse ) ; if ( error4x4 < error16x16 ) { xd -> mode_info_context -> mbmi. mode = B_PRED ; best_rate = best_rate ; }",0
666,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR4 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR5 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR6 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR4 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR5 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR4 <S2SV_ModEnd> )",0
667,"<S2SV_ModStart> * start ; va_start ( argptr, format ) ; vsnprintf ( start, maxlen, format, argptr ) ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> = 0 ; <S2SV_ModEnd> return ; }",0
668,"<S2SV_ModStart> alg_priv ) { vpx_alg_destroy_priv <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> priv -> alg_priv ) ; } ctx -> iface -> destroy ( ctx -> priv -> iface ) ; ctx -> priv -> iface = NULL ; ctx -> name = NULL ; ctx -> priv = NULL ; ctx -> priv = NULL ; res = VPX_CODEC_OK ; } else { if ( ctx -> iface -> destroy ) ctx -> iface -> destroy ( ctx -> priv -> name ) ; ctx -> iface = NULL ; ctx -> name = NULL ; ctx -> priv = NULL ; } return SAVE_STATUS ( ctx, res ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
669,"<S2SV_ModStart> speed ) { <S2SV_ModEnd> sf -> adaptive_rd_thresh <S2SV_ModStart> ; sf -> <S2SV_ModEnd> tx_size_search_method = vp9_frame_is_boosted <S2SV_ModStart> = vp9_frame_is_boosted ( cpi )? USE_FULL_RD : USE_LARGESTALL ; if ( MIN ( cm -> width, cm -> height ) >= 720 ) sf -> disable_split_mask = DISABLE_ALL_SPLIT ; else sf -> disable_split_mask = DISABLE_ALL_INTER_SPLIT ; else sf -> disable_split_mask = DISABLE_COMPOUND_SPLIT ; sf -> recode_loop = ALLOW_RECODE_KFARFGF ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_H_V ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_",0
670,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
671,"<S2SV_ModStart> ; int goodsize ; if ( inuse > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) { luaD_reallocstack ( L, goodsize, 0 ) ; } else if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) { luaD_reallocstack ( L, goodsize, 0 ) ; } else if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else condmovestack ( L",0
672,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
673,"<S2SV_ModStart>, * s = STR ( CHILD ( n, 0 ) ) ; int quote = Py_CHARMASK ( * s ) ; char buf [ 128 ] ; char buf [ 128 ] ; s = _PyUnicode_AsString ( s ) ; PyOS_snprintf ( buf, sizeof ( buf ), ""(unicode <S2SV_blank> error) <S2SV_blank> %s"", s ) ; ast_error ( n, buf ) ; Py_DECREF ( type ) ; Py_DECREF ( value ) ; if ( errstr ) { char * s = """" ; char buf [ 128 ] ; s = _PyUnicode_AsString ( errstr ) ; PyOS_snprintf ( buf, sizeof ( buf ), ""(unicode <S2SV_blank> error) <S2SV_blank> %s"", s ) ; ast_error ( n, buf ) ; ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF ( type ) ; Py_DECREF ( tback ) ; Py_DECREF ( type ) ; Py_DECREF ( value ) ; Py_XDECREF ( tback )",0
674,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> ( ""encoding-mode"", option_name <S2SV_ModEnd> ) == 0 <S2SV_ModStart> } else if ( strcmp ( ""layers"", option_name ) == 0 ) { svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_factors ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_factors ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers"", option_name ) == 0 ) { res = parse_quantizer_values ( svc",0
675,<S2SV_ModStart> event ) ; <S2SV_ModEnd> hlist_add_head_rcu ( & <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
676,"<S2SV_ModStart> ) ; } fprintf ( mvs, ""\\n"" ) ; mb_index = 0 ; fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. uv_mode ) ; mb_index ++ ; fprintf ( mvs, ""\\n"" ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; mb_index = 0 ; fprintf ( mvs, ""Mbs <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mb",0
677,"<S2SV_ModStart> { Py_ssize_t i ; PyObject * new_memo ; if ( self -> unpickler -> memo_size == 0 ) { return NULL ; } new_memo = PyDict_New ( ) ; if ( new_memo == NULL ) return NULL ; for ( i = 0 ; i < self -> unpickler -> memo_size ; i ++ ) { PyObject * key, * value ; status = PyDict_SetItem ( new_memo, key, value ) ; Py_DECREF ( key ) ; if ( status < 0 ) goto error ; status = PyDict_SetItem ( new_memo, key, value ) ; if ( status < 0 ) goto error ; Py_DECREF ( key ) ; if ( status < 0 ) goto error ; status = PyDict_SetItem ( new_memo, key, NULL ) ; Py_DECREF ( key ) ; if ( status < 0 ) goto error ; status = PyDict_SetItem ( new_memo, key, NULL ) ; if ( status < 0 ) goto error ; Py_DECREF ( key ) ; Py_DECREF ( value ) ; if ( status < 0 ) goto error",0
678,,1
679,"<S2SV_ModStart> { do_error ( <S2SV_ModEnd> dbh, mysql_errno <S2SV_ModStart> imp_dbh ) ) ; imp_dbh -> mysql_error = mysql_error ( imp_dbh -> pmysql ) ; imp_dbh -> mysql_error = mysql_error ( imp_dbh -> pmysql ) ; imp_dbh -> mysql_sqlstate = mysql_sqlstate ( imp_dbh -> pmysql ) ; if ( imp_dbh -> mysql_error == mysql_error ( imp_dbh -> pmysql ) ) { do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; if ( imp_dbh -> mysql_error == mysql_error ( imp_dbh -> pmysql ) ) { do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_db",0
680,<S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) ||,0
681,"<S2SV_ModStart> struct ieee_802_11_phdr phdr ; col_set_str ( pinfo -> cinfo, COL_PROTOCOL, ""PPI"" ) ; col_clear ( pinfo -> cinfo ) ; col_set_str ( pinfo -> cinfo, COL_INFO, ""PPI <S2SV_blank> version <S2SV_blank> %u, <S2SV_blank> %u <S2SV_blank> bytes"", version, flags ) ; col_add_fstr ( pinfo -> cinfo, COL_INFO, ""PPI <S2SV_blank> flags <S2SV_blank> %u, <S2SV_blank> %u <S2SV_blank> bytes"", version, flags ) ; if ( tree ) { proto_tree_add_protocol_format ( ppi_flags_tree, proto_ppi, tvb, 0, tot_len, ""PPI <S2SV_blank> flags <S2SV_blank> %u, <S2SV_blank> n_ext_flags <S2SV_blank> %u <S2SV_blank> bytes"", version, dlt ) ; ppi_flags_tree = proto_tree_add_protocol_format ( ppi_flags_tree, proto_ppi, tvb, 0, tot_len, ""PPI <S2SV_blank> flags <S2SV_blank> %u, <S2SV_blank> n_ext_flags <S2SV_blank> %u <S2SV_blank> bytes"", version, dlt ) ; }",0
682,"<S2SV_ModStart> * fp ; if ( hdrlen + initlen + 1 > sizeof ( * sh ) ) { sh = s_malloc ( hdrlen + initlen + 1 ) ; if ( sh == NULL ) return NULL ; if ( init == SDS_NOINIT ) init = NULL ; else if (! init ) memset ( sh, 0, hdrlen + 1 ) ; if ( init == SDS_NOINIT ) init = NULL ; else if (! init ) memset ( sh, 0, hdrlen + initlen + 1 ) ; s = ( char * ) sh + hdrlen ; fp = ( ( unsigned char * ) s ) - 1 ; switch ( type ) { case SDS_TYPE_8 : { SDS_HDR_VAR ( 8, s ) ; sh -> len = initlen ; sh -> alloc = initlen ; * fp = type ; break ; } case SDS_TYPE_16 : { SDS_HDR_VAR ( 16, s ) ; sh -> alloc = initlen ; * fp = type ; break ; } case SDS_TYPE_32 : { SDS_HDR_VAR ( 32, s ) ; sh ->",0
683,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> BYTE a_val ; UINT16 x ; UINT16 y ; UINT16 rw ; UINT16 tempWidth ; tempWidth = ROUND_UP_TO ( context -> width, 8 ) ; rw = ( context -> ChromaSubsamplingLevel? tempWidth : 0 ) ; ccl = context -> ColorLossLevel ; for ( y = 0 ; y < context -> height ; y ++ ) { src = data + ( context -> height - 1 - y ) * scanline ; yplane = context -> priv -> PlaneBuffers [ 0 ] + y * rw ; coplane = context -> priv -> PlaneBuffers [ 1 ] + y * rw ; cgplane = context -> priv -> PlaneBuffers [ 2 ] + y * rw ; aplane = context -> priv -> PlaneBuffers [ 3 ] + y * rw ; for ( x = 0 ; x < context -> width ; x ++ ) { src = data + ( context -> width - 1 - y ) * scanline ; yplane = context -> priv -> PlaneBuffers [ 0",0
684,"<S2SV_ModStart> nr_parens ) return ERR_PTR ( - EINVAL ) ; if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, ptr - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, ptr - str ) ; goto out_free ; } * ( ++ top ) = invert ; continue ; case '!' : if (! is_not ( next ) ) break ; invert =! invert ; continue ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, ptr - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, ptr - str ) ; goto out_free ; }",0
685,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int calc_iframe_target_size_one_pass_cbr ( const VP9EncoderConfig <S2SV_ModEnd> * cpi ) <S2SV_ModStart> 0 ) { const RATE_CONTROL * const rc = & cpi -> rc ; int target ; if ( cpi -> common. current_video_frame == 0 ) { target = ( cpi -> oxcf. starting_buffer_level / 2 ) > INT_MAX )? INT_MAX : ( int ) ( cpi -> oxcf. starting_buffer_level / 2 ) ; } else { const int <S2SV_ModEnd> initial_boost = 32 <S2SV_ModStart> = MAX ( <S2SV_ModEnd> initial_boost, ( <S2SV_ModStart> -> frames_since_key < <S2SV_ModEnd> cpi -> output_framerate <S2SV_ModStart> cpi -> output_framerate <S2SV_ModEnd> / 2 ) <S2SV_ModStart> ; if ( rc -> frames_since_key > <S2SV_ModEnd> cpi -> output_framerate <S2SV_ModStart> cpi -> output_framerate <S2SV_ModEnd> / 2 ) <S2SV_ModStart> ; if ( rc -> frames_since_key > <S2SV_ModEnd> cpi -> output_framerate <S2SV_ModStart> cpi -> output_framerate <S2SV_ModEnd> / 2 )",0
686,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",1
687,"<S2SV_ModStart> : # line 134 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 134 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 134 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 134 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 134 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 134 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 134 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 134 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 134 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 134 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 134 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 134 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 134 <S2SV_ModEnd> ""re_grammar.",0
688,"<S2SV_ModStart> -> cpi ; MACROBLOCK * const xd = args -> xd ; <S2SV_ModStart> uint8_t token_cache [ 64 <S2SV_ModEnd> * 32 ] <S2SV_ModStart> struct macroblock_plane * p <S2SV_ModEnd> = & cpi <S2SV_ModStart> uint8_t token_cache [ 64 <S2SV_ModEnd> * 32 ] <S2SV_ModStart> uint8_t token_cache [ 64 <S2SV_ModEnd> * 32 ] <S2SV_ModStart> uint8_t token_cache [ 64 <S2SV_ModEnd> ] ; MB_MODE_INFO <S2SV_ModStart> int16_t * qcoeff <S2SV_ModEnd> = BLOCK_OFFSET ( <S2SV_ModStart> int16_t * scan, * so ; const scan_order * so ; const int ref = is_inter_block ( mbmi ) ; unsigned int ( * const counts ) [ COEFF_CONTEXTS ] [ ENTROPY_TOKENS ] = cpi -> fc. coef_counts [ tx_size ] [ type ] [ ref ] ; vp9_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. fc. coef_probs [ tx_size ] [ ref ] ; vp9_prob ( * const eob_branch ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES",0
689,<S2SV_ModStart> ; SrcList * pSrc ; if ( pSelect -> pSrc == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; } for ( i = 0 ; i < pSrc -> nSrc ; i ++ ) { struct SrcList_item * pItem = & pSrc -> a [ i ] ; if ( pItem -> zName == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; } if ( pItem -> zName == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; } for ( i = 0 ; i < pSrc -> nSrc ; i ++ ) { struct SrcList_item * pItem = & pSrc -> a [ i ] ; if ( pItem -> zName == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; } for ( i = 0 ; i < pSrc -> nSrc ; i ++ ) { struct SrcList_item * pItem = & pItem -> a [ i ] ; if ( pItem -> z,0
690,<S2SV_ModStart> { if ( <S2SV_ModEnd> shmflg & SHM_RND <S2SV_ModStart> shmflg & SHM_RND ) { if ( ( addr & ( shmlba - 1 ) ) == ( shmlba - 1 ) ) { if ( ( addr & ( shmlba - 1 ) )!= ( shmlba - 1 ) ) { if ( ( addr & ( shmlba - 1 ) )!= ( shmlba - 1 ) ) ) { err = - EINVAL ; goto out_unlock ; } } else { if ( ( shmflg & SHM_RND ) ) { if ( ( addr & ( shmlba - 1 ) )!= ( shmlba - 1 ) ) { if ( ( addr & ( shmlba - 1 ) )!= ( shmlba - 1 ) ) { if ( ( addr & ( shmlba - 1 ) )!= ( shmlba - 1 ) ) { err = - EINVAL ; goto out_unlock ; } } else { if ( ( shmflg & SHM_RND ) ) { if ( ( shmflg & SHM_RND )!= ( shmlba - 1 ) ),0
691,"<S2SV_ModStart> cb_info -> users ) ; serv = svc_create ( <S2SV_ModEnd> & nfs4_callback_program,",0
692,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
693,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
694,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
695,"<S2SV_ModStart> s ) { if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } ret = send ( sock_fd, buf, s, 0 ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
696,"<S2SV_ModStart> xIter = crm_first_attr <S2SV_ModEnd> ( xml ) <S2SV_ModStart> -> name ; if ( strcmp ( xIter -> name, XML_ATTR_ID ) == 0 ) { continue ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; } else { crm_trace ( ""Cannot <S2SV_blank> add <S2SV_blank> new <S2SV_blank> node <S2SV_blank> %s <S2SV_blank> at <S2SV_blank> %s"", crm_element_name ( xml ), path ) ; if ( xmlDocGetRootElement ( xml -> doc ) ) { xmlUnlinkNode ( xml ) ; xmlFreeNode ( xml ) ; } free ( path ) ; return ; } while ( cIter!= NULL ) { xmlNode * child = cIter ; cIter = __xml_next ( cIter ) ; cIter = __xml_next ( cIter ) ; cIter = __xml_next ( cIter ) ; cIter = __xml_next ( cIter ) ; cIter = __xml_next ( cIter ) ;",0
697,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> NULL ; return ( SvcInternal <S2SV_ModEnd> * ) svc_ctx <S2SV_ModStart> -> internal ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
698,"<S2SV_ModStart> mq_flush_lock, flags ) ; list_for_each_entry ( rq, n, running, flush. list ) { unsigned int seq = blk_flush_cur_seq ( rq ) ; BUG_ON ( seq!= REQ_FSEQ_PREFLUSH && seq!= REQ_FSEQ_POSTFLUSH ) ; queued |= blk_flush_complete_seq ( rq, fq, seq, error ) ; } if ( q -> mq_ops ) spin_unlock_irqrestore ( & fq -> mq_flush_lock, flags ) ;",0
699,"<S2SV_ModStart> s ) { uint8_t <S2SV_ModEnd> length ; ber_parse_header <S2SV_ModStart> MCS_TAG_DOMAIN_PARAMS, & length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> consume <S2SV_blank> domain <S2SV_blank> parameters <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & s -> l ) ; rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> consume <S2SV_blank> domain <S2SV_blank> parameters <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"" ) ; return RD_FALSE ; } if (! s_check ( s ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> consume <S2SV_blank> domain <S2SV_blank> parameters <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & s -> l ) ; rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> consume <S2SV_blank> domain <S2SV_blank> parameters <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"" ) ; rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> consume <S2SV_blank> domain <S2SV_blank> parameters <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overr",0
700,"<S2SV_ModStart> ) ; } if ( hkey. type == HASH_KEY_IS_STRING &&! zend_hash_exists ( params, hkey. str, hkey. len ) ) { zval tmp ; Z_ADDREF_PP ( tmp ) ; array_init ( tmp ) ; add_assoc_zval_ex ( tmp, ZEND_STRS ( ""name"" ), * ptr ) ; Z_ADDREF_PP ( tmp ) ; array_init ( tmp ) ; zend_hash_update ( params, hkey. str, hkey. len, ( void * ) & tmp, sizeof ( zval * ), ( void * ) & tmp ) ; * current_param = tmp ; if ( hkey. type == HASH_KEY_IS_LONG &&! zend_hash_index_exists ( params, hkey. num ) ) { Z_ADDREF_PP ( tmp ) ; array_init ( tmp ) ; Z_ADDREF_PP ( tmp ) ; array_init ( tmp ) ; add_assoc_zval_ex ( tmp, ZEND_STRS ( ""value"" ), * ptr ) ; Z_ADDREF_PP ( tmp ) ;",0
701,"<S2SV_ModStart> only_420 ) { <S2SV_ModEnd> int ret ; <S2SV_ModStart> = VPX_IMG_FMT_I420 ; if ( _y4m -> vpx_fmt!= VPX_IMG_FMT_I420 ) { fprintf ( stderr, ""Error <S2SV_blank> parsing <S2SV_blank> video <S2SV_blank> interlacing <S2SV_blank> format; <S2SV_blank> "" ""assuming <S2SV_blank> progressive <S2SV_blank> scan.\\n"" ) ; return - 1 ; } <S2SV_ModStart> = 12 ; if ( _y4m -> vpx_bps!= 12 ) { fprintf ( stderr, ""Error <S2SV_blank> parsing <S2SV_blank> video <S2SV_blank> bps; <S2SV_blank> "" ""assuming <S2SV_blank> progressive <S2SV_blank> scan.\\n"" ) ; return - 1 ; } <S2SV_ModStart> = 12 ; if ( _y4m -> vpx_fmt!= VPX_IMG_FMT_I420 ) { fprintf ( stderr, ""Error <S2SV_blank> parsing <S2SV_blank> video <S2SV_blank> interlacing <S2SV_blank> format; <S2SV_blank> "" ""assuming <S2SV_blank> progressive <S2SV_blank> scan.\\n"" ) ; return - 1 ; } <S2SV_ModStart> -> vpx_bps = 12 ; if ( _y4m -> vpx_fmt!= VPX_IMG_FMT_I420",0
702,"<S2SV_ModStart> obj * otmp ; if ( strlen ( buf ) < 1 ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } otmp = readobjnam ( buf, ( struct obj * ) 0 ) ; if (! otmp ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; }",0
703,"<S2SV_ModStart> { long long <S2SV_ModEnd> directory_table_end, table_start <S2SV_ModStart> 0 ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, sBlk. s. directory_table_end ) == FALSE ) return FALSE ; if ( parse_exports_table ( & table_start ) == FALSE ) return FALSE ; if ( parse_fragment_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, sBlk. s. directory_table_end ) == FALSE ) return FALSE ; if ( read_fragment_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_",0
704,"<S2SV_ModStart> * createenv ( <S2SV_ModEnd> const struct rule <S2SV_ModStart> root ) ; if ( rule -> options & KEEPENV ) { extern char * * environ ; size_t len ; char keybuf [ 1024 ] ; e = environ [ i ] ; if ( ( eq = strchr ( e, '=' ) ) == NULL || eq == e ) continue ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf, eq + 1 ) ; if ( RB_INSERT ( envtree, & env -> root, node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } }",0
705,"<S2SV_ModStart> -> seg ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vp9_set_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vp9_enable_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ; vpx_set_segdata ( seg, segment, SEG_LVL_ALT_Q, qindex_delta ) ; }",0
706,"<S2SV_ModStart> ; Module_type = make_type ( ""Module"", mod_type, Module_fields, 1 ) ; if (! Module_type ) return 0 ; Interactive_type = make_type ( ""Interactive"", mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; FunctionDef_type = make_type ( ""FunctionDef"", stmt_type, FunctionDef_fields, 1 ) ; if (! FunctionDef_type ) return 0 ; AsyncFunctionDef_type = make_type ( ""AsyncFunctionDef"", stmt_type, AsyncFunctionDef_fields, 1 ) ; if (! AsyncFunctionDef_type ) return 0 ; ClassDef_type = make_type ( ""ClassDef"", stmt_type, ClassDef_fields, 1 ) ; if (! ClassDef_type ) return 0",0
707,"<S2SV_ModStart> O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IWGRP | S_IROTH <S2SV_ModEnd> ) ; if <S2SV_ModStart> } write ( <S2SV_ModEnd> logfile_fd, ""btsnoop\\0\\0\\0\\0\\1\\0\\0\\x3\\xea""",0
708,<S2SV_ModStart> -> curY >= p <S2SV_ModEnd> -> height ) <S2SV_ModStart> -> curY >= p <S2SV_ModEnd> -> height ) <S2SV_ModStart> -> curY >= p <S2SV_ModEnd> -> height ) <S2SV_ModStart> -> curY >= p <S2SV_ModEnd> -> height ) <S2SV_ModStart> -> curY >= p <S2SV_ModEnd> -> height ) <S2SV_ModStart> -> curY >= p <S2SV_ModEnd> -> height ) <S2SV_ModStart> -> curY >= p <S2SV_ModEnd> -> height ) <S2SV_ModStart> -> curY >= p <S2SV_ModEnd> -> height ) <S2SV_ModStart> -> curY >= p <S2SV_ModEnd> -> height ) <S2SV_ModStart> -> curY >= p <S2SV_ModEnd> -> height ) <S2SV_ModStart> -> curY >= p <S2SV_ModEnd> -> height ) <S2SV_ModStart> -> curY >= p <S2SV_ModEnd> -> height ) <S2SV_ModStart> -> curY >= p <S2SV_ModEnd> -> height ) <S2SV_ModStart> -> curY >= p <S2SV_ModEnd> -> height ) <S2SV_ModStart> -> curY >= p <S2SV_ModEnd> -> height ) <S2SV_ModStart> -> curY >= p <S2SV_ModEnd> -> height ) <S2SV_ModStart> -> curY >= p <S2SV_ModEnd> -> height ) <S2SV_ModStart> -> curY >= p <S2SV_ModEnd> -> height ) <S2SV_ModStart> -> curY >= p <S2SV_ModEnd> -> height ),0
709,<S2SV_ModStart> 16 ) ; } if ( m == Y_PRED ) { ++ x -> ymode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ; } else { ++ x -> ymode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ; },0
710,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( int ) <S2SV_ModStart> ( int ) <S2SV_ModEnd> stb. st_mtime <S2SV_ModStart> ( int ) <S2SV_ModEnd> stb. st_mtime <S2SV_ModStart> ( int ) <S2SV_ModEnd> stb. st_mtime <S2SV_ModStart> ( int ) <S2SV_ModEnd> stb. st_mtime <S2SV_ModStart> ( int ) <S2SV_ModEnd> stb. st_mtime <S2SV_ModStart> ( int ) <S2SV_ModEnd> stb. st_mtime <S2SV_ModStart> ( int ) <S2SV_ModEnd> stb. st_mtime <S2SV_ModStart> ( int ) <S2SV_ModEnd> stb. st_mtime <S2SV_ModStart> ( int ) <S2SV_ModEnd> stb. st_mtime <S2SV_ModStart> ( int ) <S2SV_ModEnd> stb. st_mtime <S2SV_ModStart> ( int ) <S2SV_ModEnd> stb. st_mtime <S2SV_ModStart> ( int ) <S2SV_ModEnd> stb. st_mtime <S2SV_ModStart> ( int ) <S2SV_ModEnd> stb. st_mtime <S2SV_ModStart> ( int ) <S2SV_ModEnd> stb. st_mtime <S2SV_ModStart> ( int ) <S2SV_ModEnd> stb. st_mtime <S2SV_ModStart> ( int ) <S2SV_ModEnd> stb. st_mtime <S2SV_ModStart> ( int ) <S2SV_ModEnd> stb. st_mtime <S2SV_ModStart> ( int ) <S2SV_ModEnd> stb. st_mtime <S2SV_ModStart> ( int ) <S2SV_ModEnd> stb. st_mtime <S2SV_ModStart> ( int ) <S2SV_ModEnd> stb. st_mtime <S2SV_ModStart> ( int ) <S2SV_ModEnd> stb. st_mtime <S2SV_ModStart> ( int ) <S2SV_ModEnd> stb. st_mtime <S2SV_ModStart> ( int ),0
711,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart> * s, <S2SV_ModEnd> * t, <S2SV_ModStart> * t, <S2SV_ModEnd> * StartClean ; <S2SV_ModStart> * StartClean ; <S2SV_ModEnd> SetDefaults ( ) <S2SV_ModStart> = outputbuffer ; if ( * s == '0' && s [ 1 ] == '[' ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf ( outfile, ""%s"", outputbuffer ) ; return ( 0 ) ; } else { fprintf ( stderr, ""%s: <S2SV_blank> Illegal <S2SV_blank> request <S2SV_blank> in <S2SV_blank> identification <S2SV_blank> string <S2SV_blank> [0]: <S2SV_blank> %s\\n"", axohelp, nameobject ) ; return ( - 1 ) ; } } StartClean = outpos ; nameobject = t ; while ( * t!='<S2SV_blank>'&& * t!= '\\n' && * t ) t ++ ; * t ++ = 0 ; * t ++ = 0 ; * t ++ = 0 ; * t ++ = 0 ; * t ++ = 0 ; * t ++ = 0 ; * t ++",0
712,"<S2SV_ModStart> segs ) { <S2SV_ModEnd> u32 hash, <S2SV_ModStart> ; net_get_random_once ( & net -> ipv4. ip_idents_hashrnd <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ip_idents_hashrnd ) ) ; hash = jhash_3words ( ( __force u32 ) iph -> daddr, ( __force u32 ) iph -> saddr, ( __force u32 ) iph -> protocol ^ net_hash_mix ( net ), ip_idents_hashrnd ) ; id = ip_idents_reserve ( hash, segs ) <S2SV_ModEnd> ; iph ->",0
713,"<S2SV_ModStart> expr_ty step ; asdl_seq * dims ; if ( _PyObject_HasAttrId ( obj, & PyId_lower ) ) { int res ; tmp = _PyObject_GetAttrId ( obj, & PyId_lower ) ; if ( tmp == NULL ) goto failed ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( exists_not_none ( obj, & PyId_upper ) ) { int res ; tmp = _PyObject_GetAttrId ( obj, & PyId_upper ) ; if ( tmp == NULL ) goto failed ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( exists_not_none ( obj, & PyId_step ) ) { int res ; tmp = _PyObject_GetAttrId ( obj, & PyId_step ) ; if ( tmp == NULL ) goto failed ; Py_CLEAR ( tmp ) ;",0
714,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs ) <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",0
715,"<S2SV_ModStart> -> pw ) < 0 ) { warn ( ""setpwnam <S2SV_blank> failed"" ) ; # endif printf ( _ ( ""Finger <S2SV_blank> information <S2SV_blank> *NOT* <S2SV_blank> changed. <S2SV_blank> <S2SV_blank> Try <S2SV_blank> again <S2SV_blank> later.\\n"" ) ) ; return - 1 ; }",0
716,"<S2SV_ModStart> int err ; if (! nfp_abm_u32_check_knode ( alink -> abm, knode, proto, extack ) ) return - EOPNOTSUPP <S2SV_ModEnd> ; mask = <S2SV_ModStart> ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; nfp_abm_u32_knode_delete ( alink, knode ) ; return - EOPNOTSUPP <S2SV_ModEnd> ; } } <S2SV_ModStart>! match ) goto err_delete <S2SV_ModEnd> ; list_for_each_entry ( <S2SV_ModStart> list, & alink -> dscp_map, list ) { u32 cmask ; if ( ( iter -> val & cmask ) == ( val & cmask ) && ( iter -> band!= knode -> res -> classid ) ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; return - EOPNOTSUPP ; } match -> handle = knode -> handle ; match -> band = knode -> res -> classid ; match -> val = val ; err = nfp_abm_update_band_map ( alink ) ; if ( err ) goto err_delete",0
717,"<S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; <S2SV_ModEnd> stream -> config <S2SV_ModStart>. cfg. <S2SV_ModEnd> rc_twopass_stats_in = stats_get <S2SV_ModStart>. cfg. <S2SV_ModEnd> rc_twopass_stats_in = stats_get <S2SV_ModStart> stats ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
718,"<S2SV_ModStart> g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ; if (! g_key_file_load_from_data ( keyfile, old_exec, old_argc, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, old_exec, old_argc, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, old_exec, old_argc, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, old_exec, old_argc, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error )",0
719,"<S2SV_ModStart> ) { VP9_COMMON <S2SV_ModEnd> * const cm <S2SV_ModStart> int tile_row, tile_col ; TileBuffer tile_buffers [ 4 ] [ 1 << 6 ] ; int tile_rows = 1 << cm -> log2_tile_rows ; TileBuffer tile_buffers [ 4 ] [ 1 << 6 ] ; int tile_cols = 1 << cm -> log2_tile_cols ; TileBuffer tile_buffers [ 4 ] [ 1 << 6 ] ; int tile_rows = 1 << cm -> log2_tile_rows ; TileBuffer tile_buffers [ 4 ] [ 1 << 6 ] ; int tile_row, tile_col ; int last_tile = tile_row == tile_rows - 1 && tile_col == tile_cols - 1 ; const size_t size = get_tile ( data_end, last_tile, & cm -> error, & data ) ; for ( tile_row = 0 ; tile_row < tile_rows ; ++ tile_row ) { for ( tile_col = 0 ; tile_col < tile_cols ; ++ tile_col ) { for ( tile_row = 0 ; tile_row < tile_rows ; ++ tile_row ) {",0
720,"<S2SV_ModStart> VP9D_CONFIG * oxcf, vpx_bit_depth_t bit_depth <S2SV_ModStart> pbi = vpx_decoder_create <S2SV_ModEnd> ( 32, <S2SV_ModStart> ) ) ; const VP9_COMMON * const cm = pbi? pbi -> common : NULL ; if ( setjmp ( cm -> error. jmp ) ) { cm -> error. setjmp = 0 ; vp9_decoder_remove ( pbi ) ; return NULL ; } cm -> error. setjmp = 1 ; vpx_initialize_dec ( ) ; vpx_rtcd ( ) ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; cm -> decoded_key_frame = 0 ; vp9_init_dequantizer ( cm ) ; cm -> error. setjmp = 0 ; vp9_loop_filter_init ( cm ) ; cm -> error. setjmp = 0 ; vpx_worker_init ( & pbi -> lf_worker ) ; cm -> error. setjmp = 0 ; vpx_worker_init ( & pbi -> lf",0
721,"<S2SV_ModStart> -> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; <S2SV_ModStart> -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } if (! ( ( GF_DataInformationBox * ) s ) -> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
722,"<S2SV_ModStart> req ) { <S2SV_ModEnd> struct inet_request_sock * <S2SV_ModStart> req_inet -> opt ; struct ip_options_rcu * inet_opt ; inet_opt = rcu_dereference_protected ( req -> inet_opt, sock_owned_by_user ( req ) ) ; if ( inet_opt <S2SV_ModEnd> == NULL || <S2SV_ModStart> == NULL || inet_opt <S2SV_ModEnd> -> cipso ==",0
723,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> tree2tok ( struct <S2SV_ModStart> { const vpx_tree_index <S2SV_ModEnd> j = tree <S2SV_ModStart> i ++ ] ; if ( j <= 0 ) { tokens [ - j ]. value = v ; tokens [ - j ]. len = l ; } else { tokens [ - j ]. value = v ; tokens [ - j ]. len = l ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
724,"<S2SV_ModStart> = VPX_CODEC_OK ; vpx_codec_pkt_list_init ( & ctx -> pkt_list ) ; if ( ( flags & VP8_EFLAG_NO_REF_LAST ) && ( flags & VP8_EFLAG_NO_REF_GF ) && ( flags & VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP9_ALT_FLAG ; vp9_use_as_reference ( ctx -> cpi, ref ) ; } if ( ( flags & ( VP8_EFLAG_NO_UPD_LAST | VP8_EFLAG_NO_UPD_GF | VP8_EFLAG_NO_UPD_ARF ) ) ref ^= VP9_ALT_FLAG",0
725,"<S2SV_ModStart> 0 ) { if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } <S2SV_ModStart> asn1, & len ) ; if ( ret ) goto error ; if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } newseq = realloc ( seq, ( count + 1 ) * elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; } seq = newseq ; elem = ( char * ) seq + count * elemtype -> size ; memset ( elem, 0, elemtype -> size ) ; if ( ret ) goto error ; } ret = get_tag ( asn1, & t, & contents, & clen, & asn1, & len ) ; if ( ret ) goto error ; if ( check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } newseq = realloc ( seq, ( count + 1 ) * elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error",0
726,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> },0
727,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> frame_max_bits ( const <S2SV_ModStart> ( int64_t ) rc <S2SV_ModEnd> -> av_per_frame_bandwidth *,0
728,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
729,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_superblock ( VP9_COMP <S2SV_ModStart> * cpi, MACROBLOCK * const x <S2SV_ModEnd>, int mi_row <S2SV_ModStart> BLOCK_SIZE bsize ) { VP9_COMMON * const cm = & cpi -> common ; MACROBLOCKD * const xd = & x -> <S2SV_ModEnd> e_mbd ; MODE_INFO <S2SV_ModStart> ; PICK_MODE_CONTEXT * ctx = get_block_context ( x, bsize ) ; x -> skip_recode =! x -> select_txfm_size && mbmi -> sb_type >= BLOCK_8X8 && cpi -> oxcf. aq_mode!= COMPLEXITY_AQ && cpi -> oxcf. aq_mode!= CYCLIC_REFRESH_AQ && cpi -> sf. allow_skip_recode ; x -> skip_optimize = ctx -> is_coded ; x -> use_lp32x32fdct = cpi -> sf. use_lp32x32fdct ; x -> skip_encode = (! output_enabled && cpi -> sf. skip_encode_frame",0
730,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header,0
731,"<S2SV_ModStart> uint32_t value ; int position, zeroes, i, j ; char bits [ 65 ] ; if ( ctx -> trace_enable ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < 0 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits1 ( gbc ) ) { bits [ i ++ ] = '1' ; break ; } else { bits [ i ++ ] = '0'",0
732,<S2SV_ModStart> case EXIT_REASON_NMI_WINDOW : switch ( vmx -> idt_vectoring_info ) { case VMX_IDT_VECTOR : switch ( vmx -> idt_vectoring_info ) { case VMX_IDT_VECTOR : switch ( vmx -> idt_vectoring_info ) { case VMX_IDT_VECTOR : switch ( vmx -> idt_vectoring_info ) { case VMX_IDT_VECTOR : switch ( vmcs12 -> guest_cr0 & X86_CR0_TS ) { case VMX_IDT_VECTOR : switch ( vmx -> idt_vectoring_info ) { case VMX_IDT_VECTOR : switch ( vmx -> idt_vectoring_info ) { case VMX_IDT_VECTOR : switch ( vmx -> idt_vectoring_info ) { case VMX_IDT_VECTOR : switch ( vmcs12 -> guest_cr0 & X86_CR0_TS ) { case VMX_IDT_VECTOR : switch ( vmcs12 -> guest_cr0 & X86_,0
733,"<S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c )",0
734,"<S2SV_ModStart> -> http_contentlen. ptr = NULL, packet -> http_contentlen. len = 0, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_origin. ptr = NULL, packet -> http_origin. ptr = NULL, packet -> http_x_session_type. ptr = NULL, packet -> http_x_session_type. ptr = NULL, packet -> http_x_session_type. len = 0, packet -> server_line. ptr = NULL, packet -> server_line. len = 0, packet -> http_method. ptr = NULL, packet -> http_method. len = 0, packet -> http_response. ptr = NULL, packet -> http_response. len = 0, packet ->",0
735,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
736,"<S2SV_ModStart> ++ r ; if ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) > entries ) r = ( int ) floor ( pow ( ( float ) r + 1, dim ) ) ; if ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) r = ( int ) floor ( pow ( ( float ) r + 1, dim ) ) ; if ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) r = ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) r = ( int ) floor ( pow ( ( float ) r + 1, dim ) ) ; if ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) r = ( int ) floor ( pow ( ( float ) r + 1, dim ) ) ; if ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) r = ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) r = ( int ) floor ( pow ( ( float ) r + 1, dim ) ) ; if ( ( int ) floor ( pow",0
737,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> x ), MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> ), exception ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; c0 = ReadBlobLSBShort ( image ) ; c1 = ReadBlobLSBLong ( image ) ; bits = ReadBlobLSBLong ( image ) ; CalculateColors ( c0, c1, & colors, MagickFalse ) ; for ( j = 0 ; j < 4 ; j ++ ) { for ( i = 0 ; i < 4 ; i ++ ) { if ( ( x + i ) < ( ssize_t ) dds_info -> width && ( y + j ) < ( ssize_t ) dds_info -> height ) { if ( ( x + i ) < ( ssize_t ) dds_info -> width ) { SetPixelRed ( q, ScaleCharToQuantum ( colors. r [ code ] ) ) ; SetPixelGreen ( q, ScaleCharToQuantum ( colors. g [ code ] ) ) ; SetPixelBlue ( q, ScaleCharToQuantum ( colors. b [ code ] ) ) ; SetPixelOpacity (",0
738,"<S2SV_ModStart> drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( unlikely ( opt -> optlen ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INDISCARDS ) ; goto drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> srr ) ) { struct in_device * in_dev = __in_dev_get_rcu ( dev ) ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop ; if ( ip_options_rcv_srr ( skb ) ) goto drop ; if ( ip_options_rcv_srr ( skb ) ) goto drop ; } else { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INDISCARDS ) ; goto drop ; } <S2SV_ModEnd> return 0 ;",0
739,"<S2SV_ModStart> { int ret ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> EINTR ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY (",0
740,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
741,"<S2SV_ModStart> cfg ) { <S2SV_ModEnd> memset ( cfg <S2SV_ModStart> -> debug_file = fopen ( filename, ""w"" ) ; if (! cfg -> debug_file ) cfg -> debug_file = fopen ( filename, ""w"" ) ; if (! cfg -> debug_file ) cfg -> debug_file = fopen ( filename, ""w"" ) ; if (! cfg -> debug_file ) cfg -> debug_file = fopen ( filename, ""w"" ) ; if (! cfg -> debug_file ) cfg -> debug_file = stderr ; if (! cfg -> manual ) cfg -> manual = 1 ; if ( strcmp ( argv [ i ], ""manual"" ) == 0 ) cfg -> manual = 1 ; if ( strcmp ( argv [ i ], ""manual"" ) == 0 ) cfg -> manual = 1 ; if ( strcmp ( argv [ i ], ""alwaysok"" ) == 0 ) cfg -> alwaysok = 1 ; if ( strcmp ( argv [ i ], ""cue"" ) == 0 ) cfg -> cue = 1 ; if ( strcmp ( argv [ i ], ""nodetect"" ) == 0 ) cfg -> nodetect = 1 ; if ( strcmp ( argv [ i ], ""auth",0
742,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; sendClean ( outputbuffer ) ;",1
743,"<S2SV_ModStart> FALSE ; WLog_VRB ( AUTODETECT_TAG, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" ) ; Stream_Read_UINT32 ( s, rdp -> autodetect -> bandwidthMeasureTimeDelta ) ; Stream_Read_UINT32 ( s, rdp -> autodetect -> bandwidthMeasureByteCount ) ;",0
744,<S2SV_ModStart> ; # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if ( CONFIG_TEMPORAL_DENOISING # if ( CONFIG_TEMPORAL_DENOISING # if ( CONFIG_TEMPORAL_DENOISING # if ( CONFIG_TEMPORAL_DENOISING # if ( CONFIG_TEMPORAL_DENOISING # if ( CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if ( CONFIG_TEMPORAL_DENOISING # if ( CONFIG_TEMPORAL_DENOISING # if ( CONFIG_TEMPORAL_DENOISING # if ( CONFIG_TEMPORAL_DENOISING # if ( CONFIG_TEMPORAL_DENOISING # if ( CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if ( CONFIG_TEMPORAL_DENOISING # if ( CONFIG_TEMPORAL_DENO,0
745,"<S2SV_ModStart> ( pvc ) ; dev = alloc_netdev ( <S2SV_ModEnd> 0, ""pvceth%d"" <S2SV_ModStart> pvc_setup ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; } if ( type == ARPHRD_ETHER ) random_ether_addr ( dev -> dev_addr ) ; if ( random_ether_addr ( dev -> dev_addr )!= 0 ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; } if ( type == ARPHRD_ETHER ) random_ether_addr ( dev -> dev_addr ) ; else random_ether_addr ( dev -> dev_addr ) ; if ( random_ether_addr ( dev -> dev_addr )!= 0 ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_",0
746,"<S2SV_ModStart> * data ; struct stream packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> CLIPRDR_ERROR ) { if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
747,"<S2SV_ModStart> b_multithreaded_rd ) { vpx_de_alloc_temp_buffers <S2SV_ModEnd> ( pbi,",0
748,<S2SV_ModStart> 0 ) { if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT <S2SV_ModEnd> - ( xWantedSize <S2SV_ModStart> 0x00 ) { if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } } else { xWantedSize += ( portBYTE_ALIGNMENT <S2SV_ModEnd> - ( xWantedSize <S2SV_ModStart> 0x00 ) { if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ),0
749,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
750,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
751,"<S2SV_ModStart> ) { uint16 <S2SV_ModEnd> num_updates ; uint16 <S2SV_ModStart> int i ; if (! s_check_rem ( s ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> [%d,%d,%d], <S2SV_blank> [%d,%d], <S2SV_blank> [%d,%d], <S2SV_blank> [%d,%d], <S2SV_blank> [%d,%d], <S2SV_blank> bpp=%d, <S2SV_blank> compression=%d"", left, top, right, bottom, width, height, compress, bufsize ) ; return ; } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> [%d,%d,%d], <S2SV_blank> [%d,%d], <S2SV_blank> [%d,%d], <S2SV_blank> [d,%d], <S2SV_blank> [d,%d], <S2SV_blank> [d,%d], <S2SV_blank> bpp=%d, <S2SV_blank> compression=%d"", left, top, right, bottom, width, height, Bpp, compress, bufsize ) ; return ; } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> [%d,%d], <S2SV_blank>",0
752,"<S2SV_ModStart> } else { ovalue = strim ( option, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! smatch ( option, ""filename"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Missing <S2SV_blank> filename"" ) ; return MPR_ERR_BAD_SYNTAX ; } else { ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if ( smatch ( option, ""anew"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""stamp"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""path"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Path <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" ) ; return MPR_ERR_BAD_SYNTAX ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0",0
753,"<S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model <S2SV_ModEnd> * coef_probs = <S2SV_ModStart> -> frame_coef_probs [ tx_size ] ; vpx_coeff_count * coef_counts = cpi -> coef_counts [ tx_size ] ; unsigned int ( * eob_branch_ct ) [ REF_TYPES ] [ COEF_BANDS ] [ COEFF_CONTEXTS ] = cpi -> common. counts. eob_branch [ tx_size ] ; for ( i = 0 ; i < PLANE_TYPES ; ++ i ) { for ( j = 0 ; j < REF_TYPES ; ++ j ) { vp9_tree_probs_from_distribution ( vp9_coef_tree, coef_branch_ct [ i ] [ j ] [ k ] [ l ], coef_counts [ i ] [ j ] [ COEF_BANDS ] [ COEFF_CONTEXTS ] ) ; coef_branch_ct [ i ] [ j ] [ k ] [ l ] = eob_branch_ct [ i ] [ j ] [ k ] [ l ] - coef_branch_ct [ i ] [ j ] [ k ]",0
754,"<S2SV_ModStart> { } ; if (! TEMP_FAILURE_RETRY ( <S2SV_ModStart> name ) ) ) { r = TEMP_FAILURE_RETRY ( <S2SV_ModStart> name ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> UTF-8 <S2SV_blank> term <S2SV_blank> processing <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; r = loop_write ( fd, ""\\033%G"", 3, false ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; r = tcsetattr ( fd, TCSANOW, & tc ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; r = tcsetattr ( fd, TCSANOW, & tc ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank>",0
755,<S2SV_ModStart> int su3000_frontend_attach ( struct dvb_usb_device * d <S2SV_ModEnd> ) { u8 <S2SV_ModStart> ; if ( dvb_usb_generic_rw <S2SV_ModEnd> ( d -> <S2SV_ModStart> ; if ( dvb_usb_generic_rw <S2SV_ModEnd> ( d -> <S2SV_ModStart> ; if ( dvb_usb_generic_rw <S2SV_ModEnd> ( d -> <S2SV_ModStart> ; if ( dvb_usb_generic_rw <S2SV_ModEnd> ( d -> <S2SV_ModStart> ; if ( dvb_usb_generic_rw <S2SV_ModEnd> ( d -> <S2SV_ModStart> ; if ( dvb_usb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_dvb_,0
756,"<S2SV_ModStart> * iface, <S2SV_ModEnd> vpx_codec_enc_cfg_t * cfg <S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&",0
757,"<S2SV_ModStart> int stride, vpx_bit_depth_t bit_depth <S2SV_ModStart> const kernel = vpx_get_interp_kernel <S2SV_ModEnd> ( xd -> <S2SV_ModStart> 0 ] -> interp_filter <S2SV_ModEnd> ) ; enum <S2SV_ModStart> int uv_stride ; vpx_build_inter_predictor ( y_mb_ptr, stride, & pred [ 0 ], bit_depth, & mv, scale, bit_depth, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vpx_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], bit_depth, & mv, scale, bit_depth, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vpx_build_inter_predictor ( v_mb_ptr, uv_stride, & pred [ 512 ], bit_depth, which_mv, kernel, MV_PRECISION_Q4, x, y ) ; vpx_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], bit_depth, & mv, scale, bit_depth, which_mv,",0
758,"<S2SV_ModStart> = TRUE ; if ( strlen ( origbuf ) < 4 ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } bufp = find_optparam ( buf ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ;",0
759,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> cJSON <S2SV_ModEnd> * cJSON_CreateFloatArray ( <S2SV_ModStart> ) ; for ( i = 0 ; a && i < count ; ++ i ) { n = cJSON_CreateFloat ( numbers [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; } return a ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
760,"<S2SV_ModStart> tk_status ) ; if ( status == NLM_LCK_DENIED_GRACE_PERIOD ) { rpc_delay ( task, NLMCLNT_GRACE_WAIT ) ; goto retry_unlock ; } if ( status == NLM_LCK_DENIED_REBIND_PERIOD ) { rpc_delay ( task, NLMCLNT_GRACE_WAIT ) ; goto retry_rebind ; } if ( status == NLM_LCK_GRANTED ) printk ( KERN_WARNING ""lockd: <S2SV_blank> unexpected <S2SV_blank> unlock <S2SV_blank> status: <S2SV_blank> %d\\n"", status ) ;",0
761,"<S2SV_ModStart>, n ) ; if ( f -> previous_window [ i ] [ n - 1 ] == 0 ) { f -> previous_window [ i ] [ n - 1 ] = 0 ; } else { f -> previous_window [ i ] [ n - 1 ] = 0 ; } for ( i = 0 ; i < f -> channels ; ++ i ) f -> channel_buffers [ i ] [ left + j ] = f -> channel_buffers [ i ] [ left + j ] * w [ n - 1 - j ] ; for ( j = 0 ; j < f -> channels ; ++ j ) f -> channel_buffers [ i ] [ left + j ] = f -> channel_buffers [ i ] [ left + j ] * w [ n - 1 - j ] ; for ( i = 0 ; i < f -> channels ; ++ i ) f -> channel_buffers [ i ] [ left + j ] = f -> channel_buffers [ i ] [ left + j ] * w [ n - 1 - j ] ; for ( j = 0 ; j < f -> channels ; ++ j ) f -> channel_buffers [ i ] [ left + j ] = f -> channel_buffers [ i ] [",0
762,"<S2SV_ModStart> 4 ) ; size_t <S2SV_ModEnd> num_properties = GETINT32 <S2SV_ModStart> len ) ; if ( a -> num_names > 0 ) { size_t i ; a -> names = CHECKED_XCALLOC ( VarLenData, a -> num_names ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> names [ i ]. len = GETINT32 ( buf + idx ) ; a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; } } else { size_t i ; a -> names = CHECKED_XCALLOC ( VarLenData, a -> num_names ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ;",0
763,"<S2SV_ModStart> { VP9_COMMON * const cm = & pbi -> common <S2SV_ModEnd> ; const int <S2SV_ModStart> int num_workers = MIN ( pbi -> oxcf. <S2SV_ModEnd> max_threads & ~ <S2SV_ModStart> ~ 1, pbi -> oxcf. <S2SV_ModEnd> max_threads & ~ <S2SV_ModStart> ~ 1, pbi -> oxcf. <S2SV_ModEnd> max_threads & ~ <S2SV_ModStart> ~ 1, pbi -> oxcf. <S2SV_ModEnd> max_threads & ~ <S2SV_ModStart> ~ 1, pbi -> oxcf. <S2SV_ModEnd> max_threads & ~ <S2SV_ModStart> ~ 1, pbi -> oxcf. <S2SV_ModEnd> max_threads & ~ <S2SV_ModStart> ~ 1, pbi -> oxcf. <S2SV_ModEnd> max_threads & ~ <S2SV_ModStart> ~ 1, pbi -> oxcf. <S2SV_ModEnd> max_threads & ~ <S2SV_ModStart> ~ 1, pbi -> oxcf. <S2SV_ModEnd> max_threads & ~ <S2SV_ModStart> ~ 1, pbi -> oxcf. <S2SV_ModEnd> max_threads & ~ <S2SV_ModStart> ~ 1, pbi -> oxcf. <S2SV_ModEnd> max_threads & ~ <S2SV_ModStart> ~ 1, pbi -> oxcf. <S2SV_ModEnd> max_threads & ~ <S2SV_ModStart> ~ 1, pbi -> oxcf. <S2SV_ModEnd> max_threads & ~ <S2SV_ModStart> ~ 1, pbi -> o",0
764,"<S2SV_ModStart> * 0x101 ; # ifdef LIBRAW_LIBRARY_BUILD if (! strncasecmp ( model, ""DSLR-A100"", 9 ) ) { fseek ( ifp, 8, SEEK_CUR ) ; high = get2 ( ) ; wide = get2 ( ) ; fseek ( ifp, 1L, SEEK_CUR ) ; imgdata. makernotes. sony. prd_ImageHeight = ( ushort ) fgetc ( ifp ) ; imgdata. makernotes. sony. prd_ImageWidth = ( ushort ) fgetc ( ifp ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 0 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 1 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 2 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 3 ]",0
765,"<S2SV_ModStart> common ; struct vpx_segmentation <S2SV_ModEnd> * seg = <S2SV_ModStart> -> seg ; const double base_q = vp9_convert_qindex_to_q ( cm -> base_qindex ) ; const int base_rdmult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + cm -> y_dc_delta_q ) ; const int segment_rdmult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + cm -> y_dc_delta_q ) ; RDMULT_RATIO ( i ) = 1 ; for ( i = ENERGY_MIN ; i <= ENERGY_MAX ; i ++ ) { int qindex_delta, segment_rdmult ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_",0
766,<S2SV_ModStart> -> error_code ) { if ( error -> has_detail ) ctx -> base. err_detail = error -> detail ; else ctx -> base. err_detail = NULL ; return error -> error_code ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
767,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
768,"<S2SV_ModStart> * ps_cur_slice ; pocstruct_t <S2SV_ModEnd> * ps_prev_poc, <S2SV_ModStart> * ps_cur_poc ; if ( ps_dec -> s_cab_dec_env. pv_codec_handle == NULL ) { ps_dec -> s_cab_dec_env. pv_codec_handle = NULL ; ps_dec -> ps_dpb_mgr -> pv_codec_handle = NULL ; return ; } ps_dec -> ps_dpb_mgr -> pv_codec_handle = NULL ; ps_dec -> ps_dpb_mgr -> pv_codec_handle = NULL ; ps_dec -> s_cab_dec_env. pv_codec_handle = NULL ; ps_dec -> ps_dpb_mgr -> pv_codec_handle = NULL ; ps_dec -> ps_sei -> u2_num_fld_in_frm = 0 ; ps_dec -> ps_dpb_mgr -> pv_codec_handle = NULL ; ps_dec -> ps_dpb_mgr -> pv_codec_handle = NULL ; ps_dec -> s_cab_dec_env. pv_codec_",0
769,<S2SV_ModStart> ; if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) {,0
770,"<S2SV_ModStart> { ssize_t ret ; if ( btpan_cb. congest_packet_size > sizeof ( btpan_cb. congest_packet ) ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> from <S2SV_blank> driver: <S2SV_blank> %s"", __func__, strerror ( errno ) ) ; GKI_freebuf ( buffer ) ; btpan_cb. congest_packet_size = 0 ; break ; } ret = read ( fd, btpan_cb. congest_packet, sizeof ( btpan_cb. congest_packet ) ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> from <S2SV_blank> driver: <S2SV_blank> %s"", __func__, strerror ( errno ) ) ; GKI_freebuf ( buffer ) ; btsock_thread_add_fd ( pan_pth, fd, 0, SOCK_THREAD_FD_RD, 0 ) ; return ; }",0
771,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> getnum ( const <S2SV_ModStart> int a = 0 <S2SV_ModEnd> ; do {,0
772,"<S2SV_ModStart> ; markold ( g, g -> allgc, g -> reallyold ) ; markold ( g, g -> finobj, g -> finobjrold ) ; atomic ( L ) ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival",0
773,"<S2SV_ModStart> 0 ; else { ret = <S2SV_ModEnd> - EIO ; <S2SV_ModStart> - EIO ; } <S2SV_ModEnd> deb_info ( ""Identify <S2SV_blank> state <S2SV_blank> cold <S2SV_blank> = <S2SV_blank> %d\\n""",0
774,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) return NULL ; if ( safe_memcmp ( buffer, ssl_request, sizeof ssl_request ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModStart> ) ; if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 )",0
775,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> cib_tls_signon ( cib_t <S2SV_ModStart> struct sockaddr_in addr <S2SV_ModEnd> ; int rc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> struct mainloop_fd_callbacks cib_fd_callbacks <S2SV_ModStart> = 0 ; <S2SV_ModEnd> connection -> socket <S2SV_ModStart> NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } <S2SV_ModEnd> connection -> session <S2SV_ModStart> NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } bzero ( & hints, sizeof ( struct addrinfo ) ) ; hints. ai_flags = AI_CANONNAME ; hints. ai_family = AF_INET ; hints. ai_socktype = SOCK_RAW ; if ( hints. ai_family == AF_INET6 ) { hints. ai_protocol = IPPROTO_ICMPV",0
776,"<S2SV_ModStart> cpi, 0, sizeof ( VP8_COMMON ) ) ; if ( setjmp ( cm -> error. jmp ) ) { cpi -> common. error. setjmp = 1 ; CHECK_MEM_ERROR ( cpi -> mb. ss, vpx_calloc ( sizeof ( search_site ), ( MAX_MVSEARCH_STEPS * 8 ) + 1 ) ) ; cpi_create_common ( & cpi -> common ) ; memset ( cpi, 0, sizeof ( VP8_COMP ) ) ; if ( setjmp ( cm -> error. jmp ) ) { cpi -> common. error. setjmp = 0 ; cpi -> common. error. setjmp = 1 ; CHECK_MEM_ERROR ( cpi -> mb. ss, vpx_calloc ( sizeof ( search_site ), ( MAX_MVSEARCH_STEPS * 8 ) + 1 ) ) ; cpi -> common. error. setjmp = 1 ; CHECK_MEM_ERROR ( cpi -> mb. ss, vpx_calloc ( sizeof ( search_site ), ( MAX_MVSEARCH_STEPS * 8 ) ) )",0
777,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
778,<S2SV_ModStart> ] ) ; ND_TCHECK_16BITS ( & icp -> icmp6_data16 [ 0 ] ) ; <S2SV_ModStart> ] ) ; ND_TCHECK_16BITS ( & icp -> icmp6_data16 [ 0 ] ) ; <S2SV_ModStart> ] ) ; ND_TCHECK_16BITS ( & icp -> icmp6_data16 [ 0 ] ) ; <S2SV_ModStart> ] ) ; ND_TCHECK_16BITS ( & icp -> icmp6_data16 [ 0 ] ) ; <S2SV_ModStart> ] ) ; ND_TCHECK_16BITS ( & icp -> icmp6_data16 [ 0 ] ) ; <S2SV_ModStart> ] ) ; ND_TCHECK_16BITS ( & icp -> icmp6_data16 [ 0 ] ) ; <S2SV_ModStart> ] ) ; ND_TCHECK_16BITS ( & icp -> icmp6_data16 [ 0 ] ) ; <S2SV_ModStart> ] ) ; ND_TCHECK_16BITS ( & icp -> icmp6_data16 [ 0 ] ) ; ND_TCHECK_16BITS ( & icp -> icmp6_data16 [ 0 ] ) ; ND_TCHECK_,0
779,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
780,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } <S2SV_null>",0
781,"<S2SV_ModStart> Image * image <S2SV_ModEnd> ; MagickBooleanType status <S2SV_ModStart>, padding, <S2SV_ModEnd> value, version <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } width = 0 ; height = 0 ; while ( ReadBlobString ( image, buffer )!= ( char * ) NULL ) if ( sscanf ( buffer, ""#define <S2SV_blank> %32s <S2SV_blank> %u"", name, & width ) == 2 ) if ( ( strlen ( name ) >= 6 ) && ( LocaleCompare ( name + strlen ( name ) - 6, ""_width"" ) == 0 ) ) break ; if ( ( strlen ( name ) >= 7 ) && ( LocaleCompare ( name + strlen ( name ) - 7, ""_height"" ) == 0 ) ) break ; while ( ReadBlobString ( image, buffer )!= ( char * ) NULL ) if ( sscanf ( buffer, ""#define <S2SV_blank> %32s <S2SV_blank> %u"", name, & height ) == 2 ) if ( ( strlen ( name ) >= 6 ) && ( LocaleCompare ( name + strlen (",0
782,"<S2SV_ModStart> = 0 ; if ( bandno >= JPC_MAXBANDS ) { jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; return - 1 ; } <S2SV_ModStart> = 0 ; if ( bandno >= JPC_MAXBANDS ) { jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; return - 1 ; } <S2SV_ModStart> = 0 ; if ( bandno >= JPC_MAXBANDS ) { jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; return - 1 ; } <S2SV_ModStart> = 0 ; if ( bandno >= JPC_MAXBANDS ) { jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; return - 1 ; } <S2SV_ModStart> = 0 ; if ( bandno >= JPC_MAXBANDS ) { jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; return - 1 ; } <S2SV_ModStart> = 0 ; if ( bandno >= JPC_MAXBANDS ) { jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; return - 1 ; }",0
783,"<S2SV_ModStart>, NULL, WEECHAT_STRING_SPLIT_STRIP_LEFT | WEECHAT_STRING_SPLIT_STRIP_RIGHT | WEECHAT_STRING_SPLIT_COLLAPSE_SEPS, 0 ) ; if (! str_modes ) str_modes = strdup ( "" <S2SV_blank> "" ) ; if (! str_modes ) str_modes = strdup ( "" <S2SV_blank> "" ) ; if (! str_modes ) str_modes = strdup ( "" <S2SV_blank> "" ) ; if (! str_modes ) str_modes = strdup ( "" <S2SV_blank> "" ) ; if (! str_modes ) str_modes = strdup ( "" <S2SV_blank> "" ) ; if (! str_modes ) str_modes = strdup ( "" <S2SV_blank> "" ) ; if (! str_modes ) str_modes = strdup ( "" <S2SV_blank> "" ) ; if (! str_modes ) str_modes = strdup ( "" <S2SV_blank> "" ) ; if (! str_modes ) str_modes = strdup ( "" <S2SV_blank> "" ) ; if (! str_modes ) str_modes = strdup ( "" <S2SV_blank> "" ) ; if (! str_modes ) str_modes = str",0
784,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_bit_t <S2SV_ModEnd> decode_uniform ( vpx_reader <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - 1 ) <S2SV_ModEnd> ; return v <S2SV_ModStart> m? v : vpx_read_bit <S2SV_ModEnd> ( r )",0
785,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
786,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> parallel_decoding_mode ) ++",0
787,"<S2SV_ModStart>! stream ) <S2SV_ModEnd> fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" <S2SV_ModStart> ; res = vpx_codec_enc_config_default <S2SV_ModEnd> ( global -> <S2SV_ModStart> ( global -> codec -> interface ( ), & stream -> config. cfg, global -> usage ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. stereo_fmt = STEREO_FORMAT_MONO ; stream -> config. write_webm = 1 ; stream -> ebml. last_pts_ms = - 1 ; stream -> ebml. debug = global -> debug ; if ( global -> deadline == VPX_DL_REALTIME ) stream -> config. cfg. g_lag_in_frames = 0 ; if ( global -> deadline == VPX_DL_REALTIME ) stream -> config. cfg. g_lag_in_frames = 0 ; if ( global -> deadline == VPX_DL_REALTIME ) stream -> config. cfg",0
788,"<S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank>",0
789,<S2SV_ModStart> = 0 ; if ( ( * re_ast ) -> root_node == NULL ) { ( * re_ast ) -> flags = 0 ; ( * re_ast ) -> root_node = ( RE_NODE * ) yr_malloc ( sizeof ( RE_NODE ) ) ; if ( ( * re_ast ) -> root_node == NULL ) { ( * re_ast ) -> root_node = yr_malloc ( sizeof ( RE_NODE ) ) ; ( * re_ast ) -> root_node = ( RE_NODE * ) yr_malloc ( sizeof ( RE_NODE ) ) ; ( * re_ast ) -> root_node = ( RE_NODE * ) yr_malloc ( sizeof ( RE_NODE ) ) ; if ( ( * re_ast ) -> root_node == NULL ) { ( * re_ast ) -> root_node = yr_malloc ( sizeof ( RE_NODE ) ) ; ( * re_ast ) -> root_node = ( RE_NODE * ) yr_malloc ( sizeof ( RE_NODE ) ) ; ( * re_ast ) -> root_node = ( RE_NODE * ) yr_malloc ( sizeof,0
790,"<S2SV_ModStart> ) ) ; if ( iter -> var_expand_table ) { <S2SV_ModStart> iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } <S2SV_ModStart> 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> = <S2SV_blank> %s"", str_c ( path ), key -> value ) ; } else if ( ret < 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> lookup <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", str_c ( path )",0
791,<S2SV_ModStart> ; if ( <S2SV_ModEnd> skb -> len <S2SV_ModStart> skb -> len < <S2SV_ModEnd> sizeof ( struct <S2SV_ModStart> struct nlattr ) || nla -> nla_len > <S2SV_ModEnd> skb -> len <S2SV_ModStart> skb -> len <S2SV_ModEnd> ) return 0 <S2SV_ModStart> skb -> len <S2SV_ModEnd> ; nla =,0
792,"<S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
793,"<S2SV_ModStart> ( ""<message <S2SV_blank> type=\'chat\' <S2SV_blank> to=\'stabber@localhost\' <S2SV_blank> from=\'buddy1@localhost\'>"" ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\'>"" ""<body>test <S2SV_blank> carbon <S2SV_blank> from <S2SV_blank> recipient</body>"" ""</message>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost/mobile\'>"" ""<body>test <S2SV_blank> carbon <S2SV_blank> from <S2SV_blank> recipient</body>"" ""</forwarded>""",0
794,"<S2SV_ModStart> -> cac_id, serial -> len <S2SV_ModEnd> ) ; SC_FUNC_RETURN",1
795,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> tok -> altwarning <S2SV_ModStart> = 0 ; <S2SV_ModEnd> tok -> alterror <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
796,<S2SV_ModStart> } if ( av1 -> av1_config && av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo ) ; if ( av1_cfg ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1 -> av1_config -> config ) ; if ( av1_cfg ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo ) ; if ( av1_cfg ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1_cfg ) ; if ( av1_cfg ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1 -> av1_config -> config ) ; if ( av1_cfg ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1 -> av1_config -> config ) ; if ( av1,0
797,"<S2SV_ModStart> -> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; <S2SV_ModStart> -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } if (! ( ( GF_DataInformationBox * ) s ) -> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
798,"<S2SV_ModStart> ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; r = sc_write_record ( card, SC_ESTEID_PD_SERIAL_NUMBER, buff, sizeof ( buff ), SC_RECORD_BY_REC_NR ) ; if ( r!= SC_RECORD_BY_REC_NR ) { r = SC_WRITE_RECORD ( card, SC_ESTEID_PD_SERIAL_NUMBER, buff, sizeof ( buff ), SC_RECORD_BY_REC_NR ) ; r = sc_write_record ( card, SC_ESTEID_PD_SERIAL_NUMBER, buff, sizeof ( buff ), SC_RECORD_BY_REC_NR ) ; if ( r!= SC_RECORD_BY_REC_NR ) { r = SC_WRITE_RECORD ( card, SC_ESTEID_PD_SERIAL_NUMBER, buff, sizeof ( buff ), SC_RECORD_BY_REC_NR ) ; r = sc_write_record ( card, SC_ESTEID_PD_SERIAL_NUMBER, buff, sizeof ( buff ), SC_RECORD_BY_",0
799,<S2SV_ModStart> maxRefFrames ) ; ASSERT ( dpbSize <= MAX_NUM_REF_PICS ) ; <S2SV_ModStart> dpbSize ) ; if ( dpb -> buffer == NULL ) return ( MEMORY_ALLOCATION_ERROR ) ;,0
800,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> (! sock ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if (! addr ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if (! addrlen ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( oe_syscall_getpeername_ocall ( & ret, sock -> host_fd, ( struct oe_sockaddr * ) addr, addrlen_in, & addrlen_out )!= OE_OK ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if (! addrlen ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( oe_syscall_getpeername_ocall ( & ret, sock -> host_fd, ( struct oe_sockaddr * ) addr, addrlen_out, addrlen )!= OE_OK ) { OE_RAI",0
801,,1
802,"<S2SV_ModStart> FALSE ; } if ( Stream_GetRemainingLength ( s ) < length ) { WLog_ERR ( TAG, ""Insufficient <S2SV_blank> tpdu <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; } <S2SV_ModStart> FALSE ; } if ( Stream_GetRemainingLength ( s ) < length ) { WLog_ERR ( TAG, ""Insufficient <S2SV_blank> tpdu <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; } if ( Stream_GetRemainingLength ( s ) < length ) { WLog_ERR ( TAG, ""Insufficient <S2SV_blank> tpdu <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; } if ( Stream_GetRemainingLength ( s ) < length ) { WLog_ERR ( TAG, ""Insufficient <S2SV_blank> tpdu <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; } if ( Stream_GetRemainingLength ( s ) < length ) { WLog_ERR ( TAG, ""Insufficient <S2SV_blank> tpdu <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; } if ( Stream_GetRemainingLength ( s ) < length ) { WLog_ERR ( TAG, ""Insufficient <S2SV_blank> tpdu <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; }",0
803,"<S2SV_ModStart> ipv6_pinfo * np = rcu_dereference_protected ( sk -> sk_prot, sock_owned_by_user ( sk ) ) <S2SV_ModEnd> ; struct ipv6_txoptions <S2SV_ModStart> & fl6, <S2SV_ModEnd> np -> sndflow <S2SV_ModStart> & fl6, <S2SV_ModEnd> np -> sndflow <S2SV_ModStart> & fl6, <S2SV_ModEnd> np -> sndflow <S2SV_ModStart> & fl6, <S2SV_ModEnd> np -> sndflow <S2SV_ModStart> & fl6, <S2SV_ModEnd> np -> sndflow <S2SV_ModStart> & fl6, <S2SV_ModEnd> np -> <S2SV_ModStart> & fl6, <S2SV_ModEnd> np -> sndflow <S2SV_ModStart> & fl6, <S2SV_ModEnd> np -> sndflow <S2SV_ModStart> & fl6, <S2SV_ModEnd> np -> sndflow <S2SV_ModStart> & fl6, <S2SV_ModEnd> np -> sndflow <S2SV_ModStart> & fl6, <S2SV_ModEnd> np -> sndflow <S2SV_ModStart> & fl6, <S2SV_ModEnd> np -> sndflow <S2SV_ModStart> & fl6, <S2SV_ModEnd> np -> sndflow <S2SV_ModStart> & fl6, <S2SV_ModEnd> np -> sndflow <S2SV_ModStart> & fl6, <S2SV_ModEnd> np -> sndflow <S2SV_ModStart> & fl6, <S2SV_ModEnd> np -> sndflow <S2SV_ModStart> & fl6, <S2SV_ModEnd> np -> sndflow <S2SV_ModStart> & fl6, <S2SV_ModEnd> np -> sndflow <S2SV_ModStart> & fl6, <S2SV_ModEnd> np -> sndflow <S2SV_ModStart> & fl6",0
804,"<S2SV_ModStart>, found, upx_success = 0 <S2SV_ModStart>, fsize ; size_t <S2SV_ModEnd> valign, hdr_size <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> ; struct cli_exe_section <S2SV_ModStart>, j, <S2SV_ModEnd> struct cli_exe_hook_data pedata <S2SV_ModStart>, j, <S2SV_ModEnd> struct cli_exe_hook_data <S2SV_ModStart>, j, <S2SV_ModEnd> struct cli_exe_hook_data <S2SV_ModStart>, j, <S2SV_ModEnd> struct cli_exe_hook_data <S2SV_ModStart>, j, <S2SV_ModEnd> struct cli_exe_hook_data <S2SV_ModStart>, j, <S2SV_ModEnd> struct cli_exe_hook_data <S2SV_ModStart>, j, <S2SV_ModEnd> struct cli_exe_hook_data <S2SV_ModStart>, j, <S2SV_ModEnd> struct cli_exe_section * <S2SV_ModStart>, j, <S2SV_ModEnd> struct cli_exe_hook_data <S2SV_ModStart>, j, <S2SV_ModEnd> struct cli_exe_hook_data * <S2SV_ModStart>, j, <S2SV_ModEnd> struct cli_exe_hook_data * <S2SV_ModStart>, j, <S2SV_ModEnd> struct cli_exe_hook_data *",0
805,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> address ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> { } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> 5 ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EDRL ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_E",0
806,"<S2SV_ModStart> ) ; } # ifdef CCITT_SUPPORT if ( t2p -> pdf_compression == T2P_COMPRESS_G5 ) { buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize ) ; if ( buffer == NULL ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( t2p -> pdf_compression == T2P_COMPRESS_G6 ) { buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize ) ; if ( buffer == NULL ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"", TIFFFileName ( input ) ) ; t2p -> t2p_error =",0
807,"<S2SV_ModStart> new_parent ) { <S2SV_ModEnd> __ptrace_link ( child <S2SV_ModStart>, new_parent, current_cred ( ) <S2SV_ModEnd> ) ; }",1
808,"<S2SV_ModStart> { rc = cib_tls_signon <S2SV_ModEnd> ( cib, <S2SV_ModStart> { rc = cib_tls_signon <S2SV_ModEnd> ( cib, <S2SV_ModStart> } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> command. session, CRM_OP_REGISTER, NULL, NULL, 0, NULL ) ; crm_xml_add ( hello, F_CIB_CLIENTNAME, name ) ; crm_send_remote_msg ( hello, private -> command. encrypted ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, 0, NULL ) ; crm_xml_add ( hello, F_CIB_CLIENTNAME, name ) ; crm_send_remote_msg ( hello, private -> command. encrypted ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> command. session, CRM_OP_REGISTER",0
809,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
810,"<S2SV_ModStart> num00, tmp_err, <S2SV_ModEnd> sr = 0 <S2SV_ModStart> bsize ] ; vpx_variance_fn_ptr_t v_fn_ptr ; int <S2SV_ModEnd> new_mv_mode_penalty = 256 <S2SV_ModStart> new_mv_mode_penalty = 256 <S2SV_ModEnd> ; while ( <S2SV_ModStart> quart_frm << sr ) < MAX_FULL_PEL_VAL ) ++ sr ; v_fn_ptr. vf = get_block_variance_fn ( bsize ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX - new_mv_mode_pen",0
811,"<S2SV_ModStart> ntreg_header ) ; if ( h -> size == 0 ) { SET_ERRNO ( EPERM, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; } <S2SV_ModStart> ntreg_header ) ; if ( h -> size == 0 ) { SET_ERRNO ( EPERM, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"" ) ; goto error ; } <S2SV_ModStart> ntreg_header ) ; if ( h -> size == 0 ) { SET_ERRNO ( EPERM, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"" ) ; goto error ; } if ( h -> size == 0 ) { SET_ERRNO ( EPERM, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"" ) ; goto error ; }",0
812,<S2SV_ModStart> ) ; } if ( merged -> is_enabled == NOT_SET ) { merged -> is_enabled = ( child -> is_enabled == NOT_SET? parent -> is_enabled : child -> is_enabled ) ; merged -> reqbody_limit = ( child -> reqbody_limit == NOT_SET? parent -> reqbody_limit : child -> reqbody_limit ) ; merged -> reqbody_no_files_limit = ( child -> reqbody_no_files_limit ) ; merged -> reqbody_limit = ( child -> reqbody_limit == NOT_SET? parent -> reqbody_no_files_limit : child -> reqbody_no_files_limit ) ; merged -> reqbody_limit = ( child -> reqbody_limit == NOT_SET? parent -> reqbody_limit : child -> reqbody_limit ) ; merged -> reqbody_limit = ( child -> reqbody_limit == NOT_SET? parent -> reqbody_limit : child -> reqbody_limit ) ; merged -> reqbody_limit = ( child -> reqbody_limit == NOT_SET? parent -> reqbody_limit : child -> reqbody_limit ) ;,0
813,"<S2SV_ModStart> -> msg_name, <S2SV_ModEnd> msg_sys -> msg_namelen <S2SV_ModStart> -> msg_name, <S2SV_ModEnd> msg_sys -> msg_namelen <S2SV_ModStart> -> msg_namelen, <S2SV_ModEnd> msg_sys -> msg_namelen <S2SV_ModStart> -> msg_namelen, <S2SV_ModEnd> msg_sys -> msg_namelen <S2SV_ModStart> -> msg_namelen, <S2SV_ModEnd> msg_sys -> msg_namelen <S2SV_ModStart> -> msg_namelen, <S2SV_ModEnd> msg_sys -> msg_namelen <S2SV_ModStart> -> msg_namelen, <S2SV_ModEnd> msg_sys -> msg_namelen <S2SV_ModStart> -> msg_name, <S2SV_ModEnd> msg_sys -> msg_namelen <S2SV_ModStart> -> msg_namelen, <S2SV_ModEnd> msg_sys -> msg_namelen <S2SV_ModStart> -> msg_namelen, <S2SV_ModEnd> msg_sys -> msg_namelen <S2SV_ModStart> -> msg_namelen, <S2SV_ModEnd> msg_sys -> msg_namelen <S2SV_ModStart> -> msg_namelen, msg_sys -> msg_namelen, msg_sys -> msg_namelen, msg_sys -> msg_namelen, msg_sys -> msg_namelen, msg_sys -> msg_namelen, msg_sys ->",0
814,"<S2SV_ModStart>, one, <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader",0
815,"<S2SV_ModStart>!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )",0
816,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
817,"<S2SV_ModStart> user_data ) { <S2SV_ModEnd> crm_trace ( ""Cleaning <S2SV_blank> up <S2SV_blank> after <S2SV_blank> client <S2SV_blank> disconnect: <S2SV_blank> %s/%s"" <S2SV_ModStart> crm_str ( client -> name ), client -> id ) ; if ( client -> id == NULL ) { crm_err ( ""Client <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in the <S2SV_blank> hashtable"", client -> name ) ; crm_err ( ""Client <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> the <S2SV_blank> hashtable"", client -> id ) ; } else { crm_err ( ""Client <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> the <S2SV_blank> hashtable"", client -> name ) ; } crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client"" ) ; return ; } g_hash_table_remove ( client_list, client -> id ) ; if ( client -> id!= NULL ) { if (! g_hash_table_remove ( client_list, client -> id ) { crm_err ( ""Client <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> the <S2SV_blank> hashtable"", client -> name ) ; crm_err ( ""Client <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank>",0
818,"<S2SV_ModStart> * uv ; for ( uv = thread -> openupval ; uv!= NULL ; uv = uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> v ) ; } } <S2SV_ModStart> ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g",0
